//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Infested
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/SwarmCampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libSwaC_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_DOMINION_BULLIES = 2;
const int gv_pLAYER_03_DOMINION_AI = 3;
const int gv_pLAYER_04_DOMINION_CLEANSERS = 4;
const int gv_pLAYER_05_GARRISON = 5;
const int gv_pLAYER_06_INFESTED = 6;
const int gv_virophage_Max = 8;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_Virophage {
    unitgroup lv_garrisonBuildings;
    unit lv_virophage;
    unit lv_beacon;
    bool lv_infested;
    point lv_virophagePosition;
    region lv_bullyRegion;
    int lv_attackedIndicator;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_VirophageName_None = 0;
const int ge_VirophageName_VirophageSA1 = 1;
const int ge_VirophageName_VirophageSA2 = 2;
const int ge_VirophageName_VirophageSA3 = 3;
const int ge_VirophageName_VirophageCenter = 4;
const int ge_VirophageName_Virophage1stRight = 5;
const int ge_VirophageName_Virophage2ndRight = 6;
const int ge_VirophageName_Virophage1stLeft = 7;
const int ge_VirophageName_Virophage2ndLeft = 8;
const int ge_PRESET_IsGasOn_GasOn = 0;
const int ge_PRESET_IsGasOn_GasOff = 1;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
unit gv_kerrigan;
unitgroup gv_playersBaseGroup;
playergroup gv_dominionPlayers;
bool gv_gameOver;
bool gv_inCinematic;
string gv_mapMusicTrack;
unit gv_labEntranceUnit;
fixed gv_labEntranceMaxLife;
fixed gv_virophageMaxLife;
gs_Virophage[9] gv_virophageRecord;
int gv_virophageMaxIndex;
int gv_inCombatIndicator;
unitgroup gv_startingUnits;
int gv_labEntrancePing;
bool gv_parasiticDominationUsed;
actor gv_parasiticDominationTarget_Helper;
actor gv_fungalTarget_Helper;
int gv_fungalTarget_TAG;
int gv_parasiticDominationTarget_TAG;
unitgroup gv_fungalGroup;
bool gv_fungalUsed;
bool gv_fungalSkip;
bool gv_consumptionUsed;
unitgroup gv_sneakAttackTerranBase;
bool gv_sneakAttackDone;
int gv_gasStatus;
fixed gv_gasOn_DURATION;
fixed gv_gasOff_DURATION;
int gv_gasOnCycle;
int gv_gasOffCycle;
timer gv_mainTimer;
int gv_mainTimerWindow;
bool gv_gasStateChangeTransFirstTime1;
bool gv_gasStateChangeTransFirstTime2;
unitgroup gv_infestedStructures;
unitgroup gv_virophages;
unitgroup gv_virophagesFinished;
int gv_virophage_Count;
int gv_max_Infested_Units;
bool gv_virophageCompletedTransFirstTime;
fixed gv_objective_TumorActivateRange;
int gv_objective_CreepTumorsPlaced;
actor[4] gv_objective_TumorPlacementHelper;
int[4] gv_objective_TumorPlacementTag;
region[4] gv_objective_TumorRegion;
bool[4] gv_objective_TumorActivated;
unit[4] gv_objective_ScienceFacilities;
unit[4] gv_objective_MinimapMarkers;
int[4] gv_objective_BonusPings;
unitgroup gv_infestedOrderGroup;
region gv_finalPlatform;
int gv_cleanserWaveCount;
int[6] gv_cleanserTeamPings;
unit[6] gv_cleanserTeamTargets;
wave[6] gv_cleanserWaves;
int gv_transFirebatRolling;
unit gv_ghost_BaseEntrance;
unit gv_ghost_RightPlatform;
unitgroup gv_achievementDominatedTerranUnits;
int gv_achievementMaxDomiantedTerran;
int gv_achievementUnitsKilledWithDominatedTerran;
int gv_achievementVirophageLostCount;
int gv_objectiveDestroyDominionBase;
int gv_objectivePINGDominionOutpost;
int gv_objectiveInfestGarrisons;
int gv_infestedGarrisonCount;
int[4] gv_garrisonPings;
int gv_objectiveInfestorSurvival;
int gv_objectiveOpenTheLab;
int gv_objectiveSpreadCreep;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
sound gv_introBackground;
sound gv_introAmbience;
sound gv_introWarning;
sound gv_introMarineRunBy;
unitgroup gv_introDropGroup;
actor gv_introDoorPing;
unitgroup gv_introFungalGroup;
unit gv_planetaryFort;
bool gv_introMusicCompleted;
unitgroup gv_midInfestedTerrans;
sound gv_midGasStinger;
sound gv_midAlert;
bool gv_midMusicCompleted;
unitgroup gv_victoryZerg1;
unitgroup gv_victoryZerg2;
unit gv_victoryKerrigan;

void InitGlobals () {
    int init_i;

    gv_playersBaseGroup = UnitGroupEmpty();
    gv_dominionPlayers = PlayerGroupEmpty();
    gv_labEntranceUnit = UnitFromId(212);
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_virophageRecord[init_i].lv_garrisonBuildings = UnitGroupEmpty();
    }
    gv_startingUnits = UnitGroupEmpty();
    gv_labEntrancePing = c_invalidPingId;
    gv_fungalTarget_TAG = c_textTagNone;
    gv_parasiticDominationTarget_TAG = c_textTagNone;
    gv_fungalGroup = UnitGroupEmpty();
    gv_sneakAttackTerranBase = UnitGroupEmpty();
    gv_gasStatus = ge_PRESET_IsGasOn_GasOff;
    gv_gasOffCycle = 1;
    gv_mainTimer = TimerCreate();
    gv_gasStateChangeTransFirstTime1 = true;
    gv_gasStateChangeTransFirstTime2 = true;
    gv_infestedStructures = UnitGroupEmpty();
    gv_virophages = UnitGroupEmpty();
    gv_virophagesFinished = UnitGroupEmpty();
    gv_virophageCompletedTransFirstTime = true;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_objective_TumorPlacementTag[init_i] = c_textTagNone;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_objective_BonusPings[init_i] = c_invalidPingId;
    }
    gv_infestedOrderGroup = UnitGroupEmpty();
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_cleanserTeamPings[init_i] = c_invalidPingId;
    }
    gv_transFirebatRolling = c_invalidTransmissionId;
    gv_achievementDominatedTerranUnits = UnitGroupEmpty();
    gv_objectiveDestroyDominionBase = c_invalidObjectiveId;
    gv_objectivePINGDominionOutpost = c_invalidPingId;
    gv_objectiveInfestGarrisons = c_invalidObjectiveId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_garrisonPings[init_i] = c_invalidPingId;
    }
    gv_objectiveInfestorSurvival = c_invalidObjectiveId;
    gv_objectiveOpenTheLab = c_invalidObjectiveId;
    gv_objectiveSpreadCreep = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_introDropGroup = UnitGroupEmpty();
    gv_introFungalGroup = UnitGroupEmpty();
    gv_planetaryFort = UnitFromId(25);
    gv_midInfestedTerrans = UnitGroupEmpty();
    gv_victoryZerg1 = UnitGroupEmpty();
    gv_victoryZerg2 = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
bool gf_PlayerIsInCombat (int lp_player);
int gf_GetVirophageIndex (unit lp_virophage);
void gf_ReactivateBulliesIfClear ();
void gf_BeaconSwap (unit lp_beacon);
void gf_InfestBuilding (unit lp_cHOSEN_UNIT);
void gf_BuildVirophageTumor (point lp_point, unit lp_creator);
void gf_CreateBonusHelper (int lp_index);
void gf_TumorPlacedDisableGuns (int lp_index);
unit gf_GetCleanserTarget ();
point gf_GetDropOffPoint (unit lp_tARGET);
void gf_CleanserPingCreate (int lp_cleanserTeam);
int gf_UniqueGarrisonsInfested ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_PlayerIsInCombat;
trigger gt_PlayerIsInCombatIndicatorDiminish;
trigger gt_DEBUGStage2;
trigger gt_StartGameStage01Q;
trigger gt_TransmissionMissionStartQ;
trigger gt_StartGameStage02;
trigger gt_CreateLabEntrancePing;
trigger gt_TeachFungalGrowth;
trigger gt_FungalGrowthUsed;
trigger gt_TransmissionUseFungalGrowthQ;
trigger gt_TransmissionFungalGrowthUsedQ;
trigger gt_TeachParasiticDomination;
trigger gt_ParasticDominationUsed;
trigger gt_TransmissionUseDominationQ;
trigger gt_ParasticDominationReminderQ;
trigger gt_ParasticDominationReminderHighlightsOff;
trigger gt_TeachConsumption;
trigger gt_TransmissionUseConsumptionQ;
trigger gt_ConsumptionUsed;
trigger gt_BuildVirophages;
trigger gt_InfestGarrisons;
trigger gt_TransmissionFirstVirophageSpawnedQ;
trigger gt_TransmissionThirdVirophageSpawnedQ;
trigger gt_CreateGauge;
trigger gt_UpdateGauge;
trigger gt_TimerCycling;
trigger gt_TransmissionGasStateChangeQ;
trigger gt_GasAnimationHandler;
trigger gt_KillInfestedWhenGasisOn;
trigger gt_TransmissionAttackWithInfestedQ;
trigger gt_VirophageAttacked;
trigger gt_VirophageAttackedDiminish;
trigger gt_VirophageDestroyed;
trigger gt_TransmissionVirophageLostFirstQ;
trigger gt_TransmissionVirophageLostSubsequentQ;
trigger gt_SpawnInfested;
trigger gt_EnableBeaconbyproximity_Center;
trigger gt_EnableBeaconbyproximity_2ndright;
trigger gt_EnableBeaconbyproximity_1stLeft;
trigger gt_EnableBeaconbyproximity_2ndLeft;
trigger gt_VirophageProjectileVomiting;
trigger gt_TransmissionVirophageCompleteQ;
trigger gt_TransmissionNextTwoBeaconsQ;
trigger gt_TransmissionLastThreeBeaconsQ;
trigger gt_UnitEnterBonusObjectiveArea;
trigger gt_BonusObjectiveActivatedQ;
trigger gt_BonusObjectiveCreepTumorPlaced;
trigger gt_BonusObjectiveSpreadCreepUpdate;
trigger gt_TransmissionBonusObjectiveUpdateQ;
trigger gt_BonusObjectiveCreepTumorDies;
trigger gt_CreepTumorTargetCursorEnter;
trigger gt_CreepTumorTargetCursorLeave;
trigger gt_HandleKerriganDeath;
trigger gt_AmbientGunFiring;
trigger gt_CreateLabEntranceIndicator;
trigger gt_ExpansionClearSpawnGasPallets;
trigger gt_TransmissionDetectionWarningQ;
trigger gt_LabEntranceDamagedRemoveHarmless;
trigger gt_InfestedAttackGate;
trigger gt_TransmissionExpansionEngagedQ;
trigger gt_TransmissionBridgeAttackQ;
trigger gt_TransmissionBaseAttackStartedQ;
trigger gt_Transmission2ndLayerBreachedQ;
trigger gt_TransmissionStukovBanterKillDominionQ;
trigger gt_TransmissionStukovBanterDoingWellQ;
trigger gt_TransmissionStukovBanterKeepGoingQ;
trigger gt_CleanserAttackWaves;
trigger gt_CleanserPingUpdate;
trigger gt_TransmissionCleanserTeamEnrouteQ;
trigger gt_WarnIfVirophageUnderAttack;
trigger gt_TransmissionKilltheCleanserTeamQ;
trigger gt_StartAI;
trigger gt_AIAttackWaves;
trigger gt_AIBridgeAttack;
trigger gt_StartUpgradesNormal;
trigger gt_StartUpgradesHard;
trigger gt_AIGiveMinerals;
trigger gt_AIGiveGas;
trigger gt_GhostNukeBaseEntrance;
trigger gt_GhostNukeRightPlatform;
trigger gt_DefeatBaseDead;
trigger gt_DefeatSneakAttackInfestorsDead;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_AchievementUnitsKilledwithDominatedTerran;
trigger gt_AchievementDominatedTerranAdded;
trigger gt_AchievementDominatedTerranRemoved;
trigger gt_AchievementInfestGarrisonsNoVirophageLostNH;
trigger gt_AchievementWinMissionBefore3rdGassingH;
trigger gt_StatisticUnitsKilledwithDominatedTerran;
trigger gt_TipMissionHelpQ;
trigger gt_ObjectiveDominionOutpostCreate;
trigger gt_ObjectiveDominionOutpostComplete;
trigger gt_ObjectiveDominionOutpostFail;
trigger gt_ObjectiveInfestGarrisonsCreate;
trigger gt_ObjectiveInfestGarrisonsUpdatePhageBorn;
trigger gt_ObjectiveInfestGarrisonsUpdatePhageLost;
trigger gt_ObjectiveInfestGarrisonsComplete;
trigger gt_ObjectiveInfestGarrisonsFail;
trigger gt_GarrisonPings;
trigger gt_ObjectiveInfestorSurvivalCreate;
trigger gt_ObjectiveInfestorSurvivalComplete;
trigger gt_ObjectiveInfestorSurvivalFail;
trigger gt_ObjectiveOpentheLabCreate;
trigger gt_ObjectiveOpentheLabComplete;
trigger gt_ObjectiveSpreadCreepCreate;
trigger gt_ObjectiveSpreadCreepComplete;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanupNotSkipped;
trigger gt_IntroCleanupSkipped;
trigger gt_IntroMusic;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_MidInfestedTerrans;
trigger gt_MidInfestedTerransKill;
trigger gt_MidDropPods;
trigger gt_MidMusic;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryZerg;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
bool gf_PlayerIsInCombat (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_inCombatIndicator > 0)) {
        return true;
    }
    else {
        return false;
    }
}

int gf_GetVirophageIndex (unit lp_virophage) {
    // Variable Declarations
    int lv_iter;

    // Automatic Variable Declarations
    int auto7E41CE69_ae;
    const int auto7E41CE69_ai = 1;

    // Variable Initialization

    // Implementation
    auto7E41CE69_ae = gv_virophageMaxIndex;
    lv_iter = 1;
    for ( ; ( (auto7E41CE69_ai >= 0 && lv_iter <= auto7E41CE69_ae) || (auto7E41CE69_ai < 0 && lv_iter >= auto7E41CE69_ae) ) ; lv_iter += auto7E41CE69_ai ) {
        if ((lp_virophage == gv_virophageRecord[lv_iter].lv_virophage)) {
            return lv_iter;
        }

    }
    return -1;
}

void gf_ReactivateBulliesIfClear () {
    // Automatic Variable Declarations
    int auto8074CA14_ae;
    int auto8074CA14_var;

    // Implementation
    auto8074CA14_ae = gv_virophageMaxIndex;
    auto8074CA14_var = 1;
    for ( ; auto8074CA14_var <= auto8074CA14_ae; auto8074CA14_var += 1 ) {
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_05_GARRISON, gv_virophageRecord[auto8074CA14_var].lv_bullyRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
            AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION_BULLIES, gv_virophageRecord[auto8074CA14_var].lv_bullyRegion, true);
        }

    }
}

trigger auto_gf_BeaconSwap_Trigger = null;
unit auto_gf_BeaconSwap_lp_beacon;

void gf_BeaconSwap (unit lp_beacon) {
    auto_gf_BeaconSwap_lp_beacon = lp_beacon;

    if (auto_gf_BeaconSwap_Trigger == null) {
        auto_gf_BeaconSwap_Trigger = TriggerCreate("auto_gf_BeaconSwap_TriggerFunc");
    }

    TriggerExecute(auto_gf_BeaconSwap_Trigger, false, false);
}

bool auto_gf_BeaconSwap_TriggerFunc (bool testConds, bool runActions) {
    unit lp_beacon = auto_gf_BeaconSwap_lp_beacon;

    // Variable Declarations
    const int lv_unitHandled = 0;
    unit lv_closestVirophage;
    int lv_recordIndex;

    // Automatic Variable Declarations
    int autoB61C6468_ae;
    int autoB61C6468_var;

    // Variable Initialization

    // Implementation
    if ((UnitGetCustomValue(lp_beacon, lv_unitHandled) == 100.0)) {
        return true;
    }

    autoB61C6468_ae = gv_virophageMaxIndex;
    autoB61C6468_var = 1;
    for ( ; autoB61C6468_var <= autoB61C6468_ae; autoB61C6468_var += 1 ) {
        if ((lp_beacon == gv_virophageRecord[autoB61C6468_var].lv_beacon)) {
            lv_recordIndex = autoB61C6468_var;
            break;
        }

    }
    UnitSetCustomValue(lp_beacon, lv_unitHandled, 100.0);
    while (true) {
        libNtve_gf_ShowHideUnit(lp_beacon, true);
        UnitCreate(1, "Beacon_Zerg", c_unitCreateIgnorePlacement, 0, UnitGetPosition(lp_beacon), UnitGetFacing(lp_beacon));
        UnitKill(UnitLastCreated());
        while (!((UnitIsAlive(gv_virophageRecord[lv_recordIndex].lv_virophage) == true))) {
            Wait(0.1, c_timeGame);
        }
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_beacon), c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
        Wait(1.5, c_timeReal);
        libNtve_gf_ShowHideUnit(lp_beacon, false);
        libSwaC_gf_ClearAnimationwithblendtime(c_animNameDefault, lp_beacon, 0.0);
        while (!((UnitIsAlive(gv_virophageRecord[lv_recordIndex].lv_virophage) == false))) {
            Wait(0.5, c_timeGame);
        }
    }
    return true;
}

void gf_InfestBuilding (unit lp_cHOSEN_UNIT) {
    // Variable Declarations
    int lv_index;
    int lv_pickedVirophage;

    // Automatic Variable Declarations
    int autoD429098F_ae;
    const int autoD429098F_ai = 1;
    unitgroup autoCF2A28FA_g;
    int autoCF2A28FA_u;
    unit autoCF2A28FA_var;

    // Variable Initialization

    // Implementation
    autoD429098F_ae = gv_virophageMaxIndex;
    lv_index = 1;
    for ( ; ( (autoD429098F_ai >= 0 && lv_index <= autoD429098F_ae) || (autoD429098F_ai < 0 && lv_index >= autoD429098F_ae) ) ; lv_index += autoD429098F_ai ) {
        if ((lp_cHOSEN_UNIT == gv_virophageRecord[lv_index].lv_virophage)) {
            lv_pickedVirophage = lv_index;
            break;
        }

    }
    autoCF2A28FA_g = gv_virophageRecord[lv_pickedVirophage].lv_garrisonBuildings;
    autoCF2A28FA_u = UnitGroupCount(autoCF2A28FA_g, c_unitCountAll);
    for (;; autoCF2A28FA_u -= 1) {
        autoCF2A28FA_var = UnitGroupUnitFromEnd(autoCF2A28FA_g, autoCF2A28FA_u);
        if (autoCF2A28FA_var == null) { break; }
        UnitSetOwner(autoCF2A28FA_var, gv_pLAYER_06_INFESTED, true);
        UnitBehaviorAdd(autoCF2A28FA_var, "ColonyInfestation", autoCF2A28FA_var, 1);
        UnitBehaviorAdd(autoCF2A28FA_var, "MakeCreep5x5", autoCF2A28FA_var, 1);
        UnitGroupAdd(gv_infestedStructures, autoCF2A28FA_var);
    }
}

void gf_BuildVirophageTumor (point lp_point, unit lp_creator) {
    // Variable Declarations
    point lv_spawnLocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawnLocation = libNtve_gf_PointOffsetTowardsPoint(lp_point, -1.0, UnitGetPosition(lp_creator));

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumor", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, lv_spawnLocation);
    UnitCreateEffectUnit(lp_creator, "VirophageLaunchMissile", UnitLastCreated());
}

trigger auto_gf_CreateBonusHelper_Trigger = null;
int auto_gf_CreateBonusHelper_lp_index;

void gf_CreateBonusHelper (int lp_index) {
    auto_gf_CreateBonusHelper_lp_index = lp_index;

    if (auto_gf_CreateBonusHelper_Trigger == null) {
        auto_gf_CreateBonusHelper_Trigger = TriggerCreate("auto_gf_CreateBonusHelper_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateBonusHelper_Trigger, false, false);
}

bool auto_gf_CreateBonusHelper_TriggerFunc (bool testConds, bool runActions) {
    int lp_index = auto_gf_CreateBonusHelper_lp_index;

    // Automatic Variable Declarations
    // Implementation
    libSwaC_gf_CreateObjectivePing(false, UnitGetPosition(gv_objective_ScienceFacilities[lp_index]), StringExternal("Param/Value/BD662D72"));
    gv_objective_BonusPings[lp_index] = PingLastCreated();
    while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(RegionGetCenter(gv_objective_TumorRegion[lp_index]), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), c_unitCountAlive) > 0))) {
        Wait(0.5, c_timeGame);
    }
    libNtve_gf_ShareVisionofUnit(gv_objective_MinimapMarkers[lp_index], true, gv_pLAYER_01_USER);
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_ZergBonusObjective, libSwaC_ge_CampaginReticleSize_Large, StringExternal("Param/Value/4F5DD446"), gv_objective_ScienceFacilities[lp_index], "Ref_Center");
    gv_objective_TumorPlacementHelper[lp_index] = libNtve_gf_ActorLastCreated();
    gv_objective_TumorPlacementTag[lp_index] = TextTagLastCreated();
    return true;
}

trigger auto_gf_TumorPlacedDisableGuns_Trigger = null;
int auto_gf_TumorPlacedDisableGuns_lp_index;

void gf_TumorPlacedDisableGuns (int lp_index) {
    auto_gf_TumorPlacedDisableGuns_lp_index = lp_index;

    if (auto_gf_TumorPlacedDisableGuns_Trigger == null) {
        auto_gf_TumorPlacedDisableGuns_Trigger = TriggerCreate("auto_gf_TumorPlacedDisableGuns_TriggerFunc");
    }

    TriggerExecute(auto_gf_TumorPlacedDisableGuns_Trigger, false, false);
}

bool auto_gf_TumorPlacedDisableGuns_TriggerFunc (bool testConds, bool runActions) {
    int lp_index = auto_gf_TumorPlacedDisableGuns_lp_index;

    // Automatic Variable Declarations
    int auto24CA4F3E_val;

    // Implementation
    auto24CA4F3E_val = lp_index;
    if (auto24CA4F3E_val == 1) {
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(1189));
        Wait(0.5, c_timeReal);
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(23), null, c_animNameDefault, "Stand Unpowered Start", c_animFlagNonLooping, c_animTimeDefault);
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(1190));
        Wait(0.5, c_timeReal);
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(1191));
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(1192));
        Wait(0.5, c_timeReal);
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(1193));
        Wait(2.0, c_timeReal);
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(23), null, c_animNameDefault, "Stand Unpowered", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    }
    else if (auto24CA4F3E_val == 2) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(40), null, c_animNameDefault, "Stand Unpowered Start", c_animFlagNonLooping, c_animTimeDefault);
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(39), null, c_animNameDefault, "Stand Unpowered Start", c_animFlagNonLooping, c_animTimeDefault);
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(1198));
        Wait(1.0, c_timeGame);
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(1199));
        Wait(2.0, c_timeReal);
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(40), null, c_animNameDefault, "Stand Unpowered", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(39), null, c_animNameDefault, "Stand Unpowered", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    }
    else if (auto24CA4F3E_val == 3) {
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(1194));
        Wait(0.5, c_timeGame);
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(51), null, c_animNameDefault, "Stand Unpowered Start", c_animFlagNonLooping, c_animTimeDefault);
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(1195));
        Wait(0.5, c_timeGame);
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(1196));
        Wait(0.2, c_timeGame);
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(1197));
        Wait(2.0, c_timeReal);
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(51), null, c_animNameDefault, "Stand Unpowered", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    }
    else {
    }
    return true;
}

unit gf_GetCleanserTarget () {
    // Variable Declarations
    unitgroup lv_targetPool;
    unit lv_tARGET;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetPool = UnitGroupEmpty();

    // Implementation
    lv_targetPool = libNtve_gf_UnitsInUnitGroupWithCustomValue(gv_virophages, 1, 0.0);
    lv_tARGET = UnitGroupRandomUnit(lv_targetPool, c_unitCountAlive);
    if ((lv_tARGET != null)) {
        UnitSetCustomValue(lv_tARGET, 1, 1.0);
    }

    return lv_tARGET;
}

point gf_GetDropOffPoint (unit lp_tARGET) {
    // Automatic Variable Declarations
    // Implementation
    return gv_virophageRecord[gf_GetVirophageIndex(lp_tARGET)].lv_virophagePosition;
}

trigger auto_gf_CleanserPingCreate_Trigger = null;
int auto_gf_CleanserPingCreate_lp_cleanserTeam;

void gf_CleanserPingCreate (int lp_cleanserTeam) {
    auto_gf_CleanserPingCreate_lp_cleanserTeam = lp_cleanserTeam;

    if (auto_gf_CleanserPingCreate_Trigger == null) {
        auto_gf_CleanserPingCreate_Trigger = TriggerCreate("auto_gf_CleanserPingCreate_TriggerFunc");
    }

    TriggerExecute(auto_gf_CleanserPingCreate_Trigger, false, false);
}

bool auto_gf_CleanserPingCreate_TriggerFunc (bool testConds, bool runActions) {
    int lp_cleanserTeam = auto_gf_CleanserPingCreate_lp_cleanserTeam;

    // Automatic Variable Declarations
    // Implementation
    while (!((UnitGroupCount(AIWaveGetUnits(gv_cleanserWaves[lp_cleanserTeam]), c_unitCountAlive) >= 1))) {
        Wait(1.0, c_timeGame);
    }
    if ((gv_cleanserTeamPings[lp_cleanserTeam] != c_invalidPingId)) {
        PingDestroy(gv_cleanserTeamPings[lp_cleanserTeam]);
    }

    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", UnitGroupCenterOfGroup(AIWaveGetUnits(gv_cleanserWaves[lp_cleanserTeam])), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
        gv_cleanserTeamPings[lp_cleanserTeam] = PingLastCreated();
        TriggerEnable(gt_CleanserPingUpdate, true);
    }

    TriggerExecute(gt_TransmissionCleanserTeamEnrouteQ, true, false);
    if ((libNtve_gf_UnitGroupIsDead(AIWaveGetUnits(gv_cleanserWaves[lp_cleanserTeam])) == true) && (gv_transFirebatRolling != c_invalidTransmissionId)) {
        TransmissionClear(gv_transFirebatRolling);
        gv_transFirebatRolling = c_invalidTransmissionId;
    }

    return true;
}

int gf_UniqueGarrisonsInfested () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto77D4F188_ae;
    int auto77D4F188_var;

    // Variable Initialization

    // Implementation
    auto77D4F188_ae = gv_virophageMaxIndex;
    auto77D4F188_var = 1;
    for ( ; auto77D4F188_var <= auto77D4F188_ae; auto77D4F188_var += 1 ) {
        if ((gv_virophageRecord[auto77D4F188_var].lv_infested == true)) {
            lv_i += 1;
        }

    }
    return lv_i;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ULoadCampaignData("ZHybrid1");
    TriggerExecute(gt_Init01Technology, true, true);
    libSwaC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04MusicSound, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameStage01Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libSwaC_gf_EnableCampaignTechUnit(true, "Infestor", gv_pLAYER_01_USER);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "SiegeTech", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "NotPossibleSiegeMode", 1);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("NPSwarm", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("InfestorConsumption", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_visionGroup;

    // Automatic Variable Declarations
    playergroup auto8185E5E7_g;
    int auto8185E5E7_var;
    playergroup auto5EE4380C_g;
    int auto5EE4380C_var;

    // Variable Initialization
    lv_visionGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_05_GARRISON, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_06_INFESTED, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_06_INFESTED, gv_pLAYER_05_GARRISON, libNtve_ge_AllianceSetting_Neutral);
    PlayerSetColorIndex(gv_pLAYER_05_GARRISON, 1, true);
    PlayerGroupAdd(gv_dominionPlayers, gv_pLAYER_02_DOMINION_BULLIES);
    PlayerGroupAdd(gv_dominionPlayers, gv_pLAYER_03_DOMINION_AI);
    PlayerGroupAdd(gv_dominionPlayers, gv_pLAYER_04_DOMINION_CLEANSERS);
    libNtve_gf_SetPlayerGroupAlliance(gv_dominionPlayers, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    auto8185E5E7_g = gv_dominionPlayers;
    auto8185E5E7_var = -1;
    while (true) {
        auto8185E5E7_var = PlayerGroupNextPlayer(auto8185E5E7_g, auto8185E5E7_var);
        if (auto8185E5E7_var < 0) { break; }
        libNtve_gf_SetAlliance(auto8185E5E7_var, gv_pLAYER_01_USER, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(auto8185E5E7_var, gv_pLAYER_05_GARRISON, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(auto8185E5E7_var, gv_pLAYER_06_INFESTED, libNtve_ge_AllianceSetting_Enemy);
        PlayerSetColorIndex(auto8185E5E7_var, 1, true);
    }
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_02_DOMINION_BULLIES);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_03_DOMINION_AI);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_04_DOMINION_CLEANSERS);
    PlayerGroupAdd(lv_visionGroup, gv_pLAYER_05_GARRISON);
    libSwaC_gf_ShareVisionAmongPlayers(lv_visionGroup);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 250);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 100);
    auto5EE4380C_g = gv_dominionPlayers;
    auto5EE4380C_var = -1;
    while (true) {
        auto5EE4380C_var = PlayerGroupNextPlayer(auto5EE4380C_g, auto5EE4380C_var);
        if (auto5EE4380C_var < 0) { break; }
        PlayerModifyPropertyInt(auto5EE4380C_var, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
        PlayerModifyPropertyInt(auto5EE4380C_var, c_playerPropVespene, c_playerPropOperSetTo, 5000);
        PlayerSetState(auto5EE4380C_var, c_playerStateFoodIgnored, true);
    }
    PlayerSetState(gv_pLAYER_02_DOMINION_BULLIES, c_playerStateFidgetingEnabled, false);
    PlayerSetState(gv_pLAYER_03_DOMINION_AI, c_playerStateFidgetingEnabled, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5AEC8B4C_g;
    int auto5AEC8B4C_u;
    unit auto5AEC8B4C_var;
    unitgroup auto72AF9A0F_g;
    int auto72AF9A0F_u;
    unit auto72AF9A0F_var;
    unitgroup autoACFBC130_g;
    int autoACFBC130_u;
    unit autoACFBC130_var;
    unitgroup auto049A8510_g;
    int auto049A8510_u;
    unit auto049A8510_var;
    unitgroup autoD456EF0B_g;
    int autoD456EF0B_u;
    unit autoD456EF0B_var;
    int auto2CF8078E_ae;
    int auto2CF8078E_var;
    unitgroup auto0A0A7754_g;
    int auto0A0A7754_u;
    unit auto0A0A7754_var;
    unitgroup autoB089A23E_g;
    int autoB089A23E_u;
    unit autoB089A23E_var;
    unitgroup autoA37977C8_g;
    int autoA37977C8_u;
    unit autoA37977C8_var;
    unitgroup auto4A58F939_g;
    int auto4A58F939_u;
    unit auto4A58F939_var;
    unitgroup auto714C1380_g;
    int auto714C1380_u;
    unit auto714C1380_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(UnitFromId(212), "Harmless", UnitFromId(212), 1);
    libSwaC_gf_SetUnitInfoTextCampaign(UnitFromId(212), null, StringExternal("Param/Value/DD9AC0D9"), null);
    libSwaC_gf_SetUnitInfoTextCampaign(UnitFromId(270), StringExternal("Param/Value/400F8381"), StringExternal("Param/Value/F3F0C650"), null);
    UnitSetState(UnitFromId(270), c_unitStateTooltipable, true);
    auto5AEC8B4C_g = UnitGroup("Infestor", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5AEC8B4C_u = UnitGroupCount(auto5AEC8B4C_g, c_unitCountAll);
    for (;; auto5AEC8B4C_u -= 1) {
        auto5AEC8B4C_var = UnitGroupUnitFromEnd(auto5AEC8B4C_g, auto5AEC8B4C_u);
        if (auto5AEC8B4C_var == null) { break; }
        UnitSetPropertyFixed(auto5AEC8B4C_var, c_unitPropEnergyPercent, 100.0);
    }
    gv_startingUnits = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_playersBaseGroup = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto72AF9A0F_g = gv_playersBaseGroup;
    auto72AF9A0F_u = UnitGroupCount(auto72AF9A0F_g, c_unitCountAll);
    for (;; auto72AF9A0F_u -= 1) {
        auto72AF9A0F_var = UnitGroupUnitFromEnd(auto72AF9A0F_g, auto72AF9A0F_u);
        if (auto72AF9A0F_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto72AF9A0F_var, false);
        libNtve_gf_PauseUnit(auto72AF9A0F_var, true);
    }
    libNtve_gf_SendActorMessageToUnit(UnitFromId(66), "SetMinimapVisibility");
    autoACFBC130_g = UnitGroup(null, gv_pLAYER_02_DOMINION_BULLIES, RegionFromId(33), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoACFBC130_u = UnitGroupCount(autoACFBC130_g, c_unitCountAll);
    for (;; autoACFBC130_u -= 1) {
        autoACFBC130_var = UnitGroupUnitFromEnd(autoACFBC130_g, autoACFBC130_u);
        if (autoACFBC130_var == null) { break; }
        UnitGroupAdd(gv_fungalGroup, autoACFBC130_var);
    }
    auto049A8510_g = UnitGroup("HybridScienceFacility", gv_pLAYER_02_DOMINION_BULLIES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto049A8510_u = UnitGroupCount(auto049A8510_g, c_unitCountAll);
    for (;; auto049A8510_u -= 1) {
        auto049A8510_var = UnitGroupUnitFromEnd(auto049A8510_g, auto049A8510_u);
        if (auto049A8510_var == null) { break; }
        libSwaC_gf_SetUnitInfoTextCampaign(auto049A8510_var, StringExternal("Param/Value/C8E99B95"), StringExternal("Param/Value/6559A843"), null);
        if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
            UnitSetInfoSubTip(auto049A8510_var, StringExternal("Param/Value/BD914B16"));
        }

    }
    autoD456EF0B_g = UnitGroup("Beacon_Zerg", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoD456EF0B_u = UnitGroupCount(autoD456EF0B_g, c_unitCountAll);
    for (;; autoD456EF0B_u -= 1) {
        autoD456EF0B_var = UnitGroupUnitFromEnd(autoD456EF0B_g, autoD456EF0B_u);
        if (autoD456EF0B_var == null) { break; }
        libSwaC_gf_SetUnitInfoTextCampaign(autoD456EF0B_var, StringExternal("Param/Value/B57CBB5D"), StringExternal("Param/Value/970BD58C"), null);
    }
    gv_ghost_BaseEntrance = UnitFromId(331);
    gv_ghost_RightPlatform = UnitFromId(18);
    gv_virophageMaxIndex += 1;
    gv_virophageRecord[ge_VirophageName_VirophageSA1].lv_virophagePosition = UnitGetPosition(UnitFromId(64));
    UnitRemove(UnitFromId(64));
    gv_virophageRecord[ge_VirophageName_VirophageSA1].lv_beacon = UnitFromId(54);
    UnitGroupAdd(gv_virophageRecord[ge_VirophageName_VirophageSA1].lv_garrisonBuildings, UnitFromId(44));
    UnitGroupAdd(gv_virophageRecord[ge_VirophageName_VirophageSA1].lv_garrisonBuildings, UnitFromId(22));
    gv_virophageRecord[ge_VirophageName_VirophageSA1].lv_bullyRegion = null;
    gv_virophageMaxIndex += 1;
    gv_virophageRecord[ge_VirophageName_VirophageSA2].lv_virophagePosition = UnitGetPosition(UnitFromId(176));
    UnitRemove(UnitFromId(176));
    gv_virophageRecord[ge_VirophageName_VirophageSA2].lv_beacon = UnitFromId(5);
    UnitGroupAdd(gv_virophageRecord[ge_VirophageName_VirophageSA2].lv_garrisonBuildings, UnitFromId(1024));
    UnitGroupAdd(gv_virophageRecord[ge_VirophageName_VirophageSA2].lv_garrisonBuildings, UnitFromId(6));
    gv_virophageRecord[ge_VirophageName_VirophageSA2].lv_bullyRegion = null;
    gv_virophageMaxIndex += 1;
    gv_virophageRecord[ge_VirophageName_VirophageSA3].lv_virophagePosition = UnitGetPosition(UnitFromId(347));
    UnitRemove(UnitFromId(347));
    gv_virophageRecord[ge_VirophageName_VirophageSA3].lv_beacon = UnitFromId(17);
    UnitGroupAdd(gv_virophageRecord[ge_VirophageName_VirophageSA3].lv_garrisonBuildings, UnitFromId(252));
    UnitGroupAdd(gv_virophageRecord[ge_VirophageName_VirophageSA3].lv_garrisonBuildings, UnitFromId(898));
    gv_virophageRecord[ge_VirophageName_VirophageSA3].lv_bullyRegion = null;
    gv_virophageMaxIndex += 1;
    gv_virophageRecord[ge_VirophageName_Virophage1stLeft].lv_virophagePosition = UnitGetPosition(UnitFromId(428));
    UnitRemove(UnitFromId(428));
    gv_virophageRecord[ge_VirophageName_Virophage1stLeft].lv_beacon = UnitFromId(30);
    UnitGroupAdd(gv_virophageRecord[ge_VirophageName_Virophage1stLeft].lv_garrisonBuildings, UnitFromId(27));
    UnitGroupAdd(gv_virophageRecord[ge_VirophageName_Virophage1stLeft].lv_garrisonBuildings, UnitFromId(270));
    UnitGroupAdd(gv_virophageRecord[ge_VirophageName_Virophage1stLeft].lv_garrisonBuildings, UnitFromId(49));
    gv_virophageRecord[ge_VirophageName_Virophage1stLeft].lv_bullyRegion = RegionFromId(15);
    gv_virophageMaxIndex += 1;
    gv_virophageRecord[ge_VirophageName_Virophage2ndLeft].lv_virophagePosition = UnitGetPosition(UnitFromId(177));
    UnitRemove(UnitFromId(177));
    gv_virophageRecord[ge_VirophageName_Virophage2ndLeft].lv_beacon = UnitFromId(234);
    UnitGroupAdd(gv_virophageRecord[ge_VirophageName_Virophage2ndLeft].lv_garrisonBuildings, UnitFromId(219));
    UnitGroupAdd(gv_virophageRecord[ge_VirophageName_Virophage2ndLeft].lv_garrisonBuildings, UnitFromId(285));
    UnitGroupAdd(gv_virophageRecord[ge_VirophageName_Virophage2ndLeft].lv_garrisonBuildings, UnitFromId(284));
    UnitGroupAdd(gv_virophageRecord[ge_VirophageName_Virophage2ndLeft].lv_garrisonBuildings, UnitFromId(250));
    UnitGroupAdd(gv_virophageRecord[ge_VirophageName_Virophage2ndLeft].lv_garrisonBuildings, UnitFromId(69));
    gv_virophageRecord[ge_VirophageName_Virophage2ndLeft].lv_bullyRegion = RegionFromId(16);
    gv_virophageMaxIndex += 1;
    gv_virophageRecord[ge_VirophageName_Virophage1stRight].lv_virophagePosition = UnitGetPosition(UnitFromId(343));
    UnitRemove(UnitFromId(343));
    gv_virophageRecord[ge_VirophageName_Virophage1stRight].lv_beacon = UnitFromId(149);
    UnitGroupAdd(gv_virophageRecord[ge_VirophageName_Virophage1stRight].lv_garrisonBuildings, UnitFromId(148));
    UnitGroupAdd(gv_virophageRecord[ge_VirophageName_Virophage1stRight].lv_garrisonBuildings, UnitFromId(147));
    UnitGroupAdd(gv_virophageRecord[ge_VirophageName_Virophage1stRight].lv_garrisonBuildings, UnitFromId(146));
    gv_virophageRecord[ge_VirophageName_Virophage1stRight].lv_bullyRegion = RegionFromId(14);
    gv_virophageMaxIndex += 1;
    gv_virophageRecord[ge_VirophageName_Virophage2ndRight].lv_virophagePosition = UnitGetPosition(UnitFromId(425));
    UnitRemove(UnitFromId(425));
    gv_virophageRecord[ge_VirophageName_Virophage2ndRight].lv_beacon = UnitFromId(106);
    UnitGroupAdd(gv_virophageRecord[ge_VirophageName_Virophage2ndRight].lv_garrisonBuildings, UnitFromId(138));
    UnitGroupAdd(gv_virophageRecord[ge_VirophageName_Virophage2ndRight].lv_garrisonBuildings, UnitFromId(120));
    UnitGroupAdd(gv_virophageRecord[ge_VirophageName_Virophage2ndRight].lv_garrisonBuildings, UnitFromId(121));
    UnitGroupAdd(gv_virophageRecord[ge_VirophageName_Virophage2ndRight].lv_garrisonBuildings, UnitFromId(119));
    gv_virophageRecord[ge_VirophageName_Virophage2ndRight].lv_bullyRegion = RegionFromId(17);
    gv_virophageMaxIndex += 1;
    gv_virophageRecord[ge_VirophageName_VirophageCenter].lv_virophagePosition = UnitGetPosition(UnitFromId(246));
    UnitRemove(UnitFromId(246));
    gv_virophageRecord[ge_VirophageName_VirophageCenter].lv_beacon = UnitFromId(292);
    UnitGroupAdd(gv_virophageRecord[ge_VirophageName_VirophageCenter].lv_garrisonBuildings, UnitFromId(294));
    UnitGroupAdd(gv_virophageRecord[ge_VirophageName_VirophageCenter].lv_garrisonBuildings, UnitFromId(1029));
    UnitGroupAdd(gv_virophageRecord[ge_VirophageName_VirophageCenter].lv_garrisonBuildings, UnitFromId(293));
    gv_virophageRecord[ge_VirophageName_VirophageCenter].lv_bullyRegion = RegionFromId(21);
    auto2CF8078E_ae = gv_virophageMaxIndex;
    auto2CF8078E_var = 1;
    for ( ; auto2CF8078E_var <= auto2CF8078E_ae; auto2CF8078E_var += 1 ) {
        CreepModify(gv_virophageRecord[auto2CF8078E_var].lv_virophagePosition, 12.0, false, false);
        auto0A0A7754_g = gv_virophageRecord[auto2CF8078E_var].lv_garrisonBuildings;
        auto0A0A7754_u = UnitGroupCount(auto0A0A7754_g, c_unitCountAll);
        for (;; auto0A0A7754_u -= 1) {
            auto0A0A7754_var = UnitGroupUnitFromEnd(auto0A0A7754_g, auto0A0A7754_u);
            if (auto0A0A7754_var == null) { break; }
            UnitSetState(auto0A0A7754_var, c_unitStateInvulnerable, true);
        }
    }
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(241), true);
    UnitSetTeamColorIndex(UnitFromId(308), 14);
    UnitSetTeamColorIndex(UnitFromId(23), 7);
    UnitSetTeamColorIndex(UnitFromId(307), 2);
    UnitSetTeamColorIndex(UnitFromId(309), 5);
    autoB089A23E_g = UnitGroup("GhostAcademy", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB089A23E_u = UnitGroupCount(autoB089A23E_g, c_unitCountAll);
    for (;; autoB089A23E_u -= 1) {
        autoB089A23E_var = UnitGroupUnitFromEnd(autoB089A23E_g, autoB089A23E_u);
        if (autoB089A23E_var == null) { break; }
        UnitMagazineArm(autoB089A23E_var, AbilityCommand("ArmSiloWithNuke", 0), 1);
    }
    autoA37977C8_g = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHasEnergy - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA37977C8_u = UnitGroupCount(autoA37977C8_g, c_unitCountAll);
    for (;; autoA37977C8_u -= 1) {
        autoA37977C8_var = UnitGroupUnitFromEnd(autoA37977C8_g, autoA37977C8_u);
        if (autoA37977C8_var == null) { break; }
        UnitSetPropertyFixed(autoA37977C8_var, c_unitPropEnergy, libHots_gf_DifficultyValueFixed2(75.0, 125.0, 200.0));
    }
    auto4A58F939_g = UnitGroup("Bunker", gv_pLAYER_02_DOMINION_BULLIES, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4A58F939_u = UnitGroupCount(auto4A58F939_g, c_unitCountAll);
    for (;; auto4A58F939_u -= 1) {
        auto4A58F939_var = UnitGroupUnitFromEnd(auto4A58F939_g, auto4A58F939_u);
        if (auto4A58F939_var == null) { break; }
        UnitCargoCreate(auto4A58F939_var, "Marine", 4);
    }
    auto714C1380_g = UnitGroup("Bunker", gv_pLAYER_03_DOMINION_AI, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto714C1380_u = UnitGroupCount(auto714C1380_g, c_unitCountAll);
    for (;; auto714C1380_u -= 1) {
        auto714C1380_var = UnitGroupUnitFromEnd(auto714C1380_g, auto714C1380_u);
        if (auto714C1380_var == null) { break; }
        UnitCargoCreate(auto714C1380_var, "Marine", 2);
        UnitCargoCreate(auto714C1380_var, "Marauder", 1);
    }
    UnitCargoCreate(UnitFromId(81), "Firebat", 1);
    gv_objective_TumorRegion[1] = RegionFromId(53);
    gv_objective_TumorRegion[2] = RegionFromId(54);
    gv_objective_TumorRegion[3] = RegionFromId(55);
    gv_objective_ScienceFacilities[1] = UnitFromId(359);
    gv_objective_ScienceFacilities[2] = UnitFromId(335);
    gv_objective_ScienceFacilities[3] = UnitFromId(635);
    UnitIssueOrder(UnitFromId(66), Order(AbilityCommand("ExtendingBridgeNWWide8", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZHybrid01MusicAlt1", c_soundtrackCueAny, c_soundtrackIndexAny);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("18:00:00");
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionPlayableMap(), "GasGiantStorm", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "Signal GasOff");
    libLbty_gf_AutoRevealRegion(RegionFromId(10), RegionFromId(10), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(43), RegionFromId(42), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(45), RegionFromId(56), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(47), RegionFromId(46), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(48), RegionFromId(17), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(49), RegionFromId(50), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(51), RegionFromId(16), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(52), RegionFromId(30), gv_pLAYER_01_USER);
    CreepModify(UnitGetPosition(UnitFromId(161)), 30.0, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto7BF1F56D_g;
    int auto7BF1F56D_var;
    playergroup auto49D74679_g;
    int auto49D74679_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gasOn_DURATION = 210.0;
    gv_gasOff_DURATION = libNtve_gf_DifficultyValueFixed(270.0, 270.0, 210.0, 180.0);
    gv_labEntranceMaxLife = libHots_gf_DifficultyValueFixed2(1000.0, 1000.0, 1500.0);
    UnitSetPropertyFixed(gv_labEntranceUnit, c_unitPropLifeMax, gv_labEntranceMaxLife);
    UnitSetPropertyFixed(gv_labEntranceUnit, c_unitPropLifePercent, 100.0);
    gv_virophageMaxLife = libHots_gf_DifficultyValueFixed2(750.0, 750.0, 500.0);
    gv_max_Infested_Units = libHots_gf_DifficultyValueInt2(120, 120, 100);
    auto7BF1F56D_g = gv_dominionPlayers;
    auto7BF1F56D_var = -1;
    while (true) {
        auto7BF1F56D_var = PlayerGroupNextPlayer(auto7BF1F56D_g, auto7BF1F56D_var);
        if (auto7BF1F56D_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto7BF1F56D_var, "CombatShield", 1);
        TechTreeUpgradeAddLevel(auto7BF1F56D_var, "PunisherGrenades", 1);
        TechTreeUpgradeAddLevel(auto7BF1F56D_var, "SiegeTech", 1);
        TechTreeUpgradeAddLevel(auto7BF1F56D_var, "AresClassWeaponsSystemViking", 1);
        TechTreeUpgradeAddLevel(auto7BF1F56D_var, "HailstormMissilePods", 1);
    }
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        auto49D74679_g = gv_dominionPlayers;
        auto49D74679_var = -1;
        while (true) {
            auto49D74679_var = PlayerGroupNextPlayer(auto49D74679_g, auto49D74679_var);
            if (auto49D74679_var < 0) { break; }
            TechTreeUpgradeAddLevel(auto49D74679_var, "TerranInfantryWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto49D74679_var, "TerranShipWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto49D74679_var, "TerranVehicleArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto49D74679_var, "TerranInfantryArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto49D74679_var, "TerranShipArmorsLevel1", 1);
            TechTreeAbilityAllow(auto49D74679_var, AbilityCommand("EMP", 0), true);
            TechTreeUpgradeAllow(auto49D74679_var, "NeoSteelAndShrikeTurretIconUpgrade", true);
            TechTreeUpgradeAddLevel(auto49D74679_var, "NeoSteelAndShrikeTurretIconUpgrade", 1);
            TechTreeUpgradeAllow(auto49D74679_var, "NeoSteelFrame", true);
            TechTreeUpgradeAddLevel(auto49D74679_var, "NeoSteelFrame", 1);
            TechTreeUpgradeAllow(auto49D74679_var, "ShrikeTurret", true);
            TechTreeUpgradeAddLevel(auto49D74679_var, "ShrikeTurret", 1);
            TechTreeUpgradeAllow(auto49D74679_var, "ClusterWarheads", true);
            TechTreeUpgradeAllow(auto49D74679_var, "DualFusionWelders", true);
            TechTreeUpgradeAllow(auto49D74679_var, "FireSuppressionSystems", true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_AddMissionTipUserData("Infestor");
    libSwaC_gf_AddMissionTipUserData("Fungal Growth");
    libSwaC_gf_AddMissionTipUserData("Parasitic Domination");
    libSwaC_gf_AddMissionTipUserData("Consume (Hybrid01)");
    libSwaC_gf_AddMissionTipUserData("Garrisons");
    libSwaC_gf_AddMissionTipUserData("Dominion Gassing");
    libSwaC_gf_AddMissionTipUserData("Cleansing Teams");
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SCV", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Marine", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Medic", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Firebat", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Marauder", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Ghost", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Hellion", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Vulture", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SpiderMine", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Predator", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Diamondback", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("SiegeTank", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Thor", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("VikingFighter", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Medivac", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Battlecruiser", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("ScienceVessel", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Banshee", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("PlanetaryFortress", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Bunker", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("MissileTurret", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("AutoTurret", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("PerditionTurret", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("InfestedTerranCampaign", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("InfestedCivilian", false, gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Is In Combat
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIsInCombat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnitTarget()) == gv_pLAYER_01_USER)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_inCombatIndicator = 4;
    Wait(0.5, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIsInCombat_Init () {
    gt_PlayerIsInCombat = TriggerCreate("gt_PlayerIsInCombat_Func");
    TriggerAddEventUnitAttacked(gt_PlayerIsInCombat, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Is In Combat Indicator Diminish
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIsInCombatIndicatorDiminish_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCombatIndicator > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCombatIndicator = (gv_inCombatIndicator - 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIsInCombatIndicatorDiminish_Init () {
    gt_PlayerIsInCombatIndicatorDiminish = TriggerCreate("gt_PlayerIsInCombatIndicatorDiminish_Func");
    TriggerAddEventTimePeriodic(gt_PlayerIsInCombatIndicatorDiminish, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGStage2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto2DE18B12_ae = 3;
    int auto2DE18B12_var;
    unitgroup auto39735217_g;
    int auto39735217_u;
    unit auto39735217_var;
    unitgroup auto8B88287A_g;
    int auto8B88287A_u;
    unit auto8B88287A_var;
    unitgroup autoB34ADE11_g;
    int autoB34ADE11_u;
    unit autoB34ADE11_var;
    unitgroup auto703ADC12_g;
    int auto703ADC12_u;
    unit auto703ADC12_var;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_sneakAttackDone == false)) {
        gv_sneakAttackDone = true;
        TriggerExecute(gt_ObjectiveInfestGarrisonsComplete, true, false);
        auto2DE18B12_var = 1;
        for ( ; auto2DE18B12_var <= auto2DE18B12_ae; auto2DE18B12_var += 1 ) {
            UnitCreate(1, "Infestor", 0, gv_pLAYER_01_USER, UnitGetPosition(gv_virophageRecord[auto2DE18B12_var].lv_beacon), 270.0);
            while (!((gv_virophageRecord[auto2DE18B12_var].lv_virophage != null))) {
                Wait(0.1, c_timeGame);
            }
            UnitBehaviorAddPlayer(gv_virophageRecord[auto2DE18B12_var].lv_virophage, "FastBuild", UnitGetOwner(gv_virophageRecord[auto2DE18B12_var].lv_virophage), 1);
            UnitRemove(UnitLastCreated());
        }
        auto39735217_g = UnitGroup("Bunker", gv_pLAYER_02_DOMINION_BULLIES, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto39735217_u = UnitGroupCount(auto39735217_g, c_unitCountAll);
        for (;; auto39735217_u -= 1) {
            auto39735217_var = UnitGroupUnitFromEnd(auto39735217_g, auto39735217_u);
            if (auto39735217_var == null) { break; }
            UnitKill(auto39735217_var);
        }
        auto8B88287A_g = UnitGroup("Bunker", gv_pLAYER_04_DOMINION_CLEANSERS, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto8B88287A_u = UnitGroupCount(auto8B88287A_g, c_unitCountAll);
        for (;; auto8B88287A_u -= 1) {
            auto8B88287A_var = UnitGroupUnitFromEnd(auto8B88287A_g, auto8B88287A_u);
            if (auto8B88287A_var == null) { break; }
            UnitKill(auto8B88287A_var);
        }
        autoB34ADE11_g = UnitGroup(null, gv_pLAYER_02_DOMINION_BULLIES, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoB34ADE11_u = UnitGroupCount(autoB34ADE11_g, c_unitCountAll);
        for (;; autoB34ADE11_u -= 1) {
            autoB34ADE11_var = UnitGroupUnitFromEnd(autoB34ADE11_g, autoB34ADE11_u);
            if (autoB34ADE11_var == null) { break; }
            UnitKill(autoB34ADE11_var);
        }
        auto703ADC12_g = UnitGroup(null, gv_pLAYER_04_DOMINION_CLEANSERS, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto703ADC12_u = UnitGroupCount(auto703ADC12_g, c_unitCountAll);
        for (;; auto703ADC12_u -= 1) {
            auto703ADC12_var = UnitGroupUnitFromEnd(auto703ADC12_g, auto703ADC12_u);
            if (auto703ADC12_var == null) { break; }
            UnitKill(auto703ADC12_var);
        }
        TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("NPSwarm", 0), true);
    }
    else {
        TimerStart(gv_mainTimer, 1.0, false, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DEBUGStage2_Init () {
    gt_DEBUGStage2 = TriggerCreate("gt_DEBUGStage2_Func");
    TriggerAddEventChatMessage(gt_DEBUGStage2, c_playerAny, "s2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Stage 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_StartAI, true, false);
    gf_BeaconSwap(UnitFromId(54));
    gf_BeaconSwap(UnitFromId(5));
    gf_BeaconSwap(UnitFromId(17));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/FA5D3671"), null, RegionGetCenter(RegionFromId(1)));
    Wait(3.0, c_timeGame);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveInfestGarrisonsCreate, true, false);
    TriggerExecute(gt_ObjectiveDominionOutpostCreate, true, false);
    TriggerExecute(gt_ObjectiveInfestorSurvivalCreate, true, true);
    TriggerQueueExit();
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_TipMissionHelpQ, true, true);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_TeachFungalGrowth, true, false);
    while (!((UnitGroupCount(gv_fungalGroup, c_unitCountAlive) == 0))) {
        Wait(0.25, c_timeGame);
    }
    if ((gv_virophageRecord[1].lv_virophage == null) && (gv_fungalSkip == false)) {
        TriggerExecute(gt_TransmissionMissionStartQ, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage01Q_Init () {
    gt_StartGameStage01Q = TriggerCreate("gt_StartGameStage01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Mission Start Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionMissionStartQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00070", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    MinimapPing(PlayerGroupAll(), PointFromId(191), 2.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/56032436"), null, PointFromId(191));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionMissionStartQ_Init () {
    gt_TransmissionMissionStartQ = TriggerCreate("gt_TransmissionMissionStartQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Stage 02
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        libSwaC_gf_RemindPlayertoSpawnDrones(120.0, 6);
        libSwaC_gf_RemindPlayertoAssign3DronestoExtractor(UnitGroupUnit(UnitGroup("Extractor", gv_pLAYER_01_USER, RegionCircle(PointFromId(65), 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), 150.0);
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/372CE03F"), null, PointFromId(2));
    libNtve_gf_SendActorMessageToUnit(UnitFromId(66), "SetMinimapVisibility 1");
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, true);
    TimerWindowDestroy(gv_mainTimerWindow);
    GameTimeOfDayPause(true);
    TriggerEnable(gt_HandleKerriganDeath, true);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionFromId(44), gv_pLAYER_02_DOMINION_BULLIES);
    TriggerEnable(gt_InfestedAttackGate, true);
    TriggerEnable(gt_DefeatBaseDead, true);
    gv_gasOnCycle = 1;
    TimerStart(gv_mainTimer, 180.0, false, c_timeAI);
    TriggerExecute(gt_CreateGauge, true, false);
    TriggerEnable(gt_EnableBeaconbyproximity_1stLeft, true);
    TriggerEnable(gt_EnableBeaconbyproximity_2ndLeft, true);
    Wait(3.0, c_timeReal);
    CreepSetSpeed(c_creepSpeedGrowth, 100.0);
    TriggerQueueEnter();
    TriggerExecute(gt_CreateLabEntrancePing, true, false);
    TriggerExecute(gt_ObjectiveOpentheLabCreate, true, true);
    TriggerQueueExit();
    Wait(4.0, c_timeGame);
    TriggerExecute(gt_CleanserAttackWaves, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage02_Init () {
    gt_StartGameStage02 = TriggerCreate("gt_StartGameStage02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Lab Entrance Ping
//--------------------------------------------------------------------------------------------------
bool gt_CreateLabEntrancePing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_labEntranceUnit), 10.0), 3.0, false);
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(gv_labEntranceUnit), StringExternal("Param/Value/E01BB368"));
    gv_labEntrancePing = PingLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateLabEntrancePing_Init () {
    gt_CreateLabEntrancePing = TriggerCreate("gt_CreateLabEntrancePing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teach Fungal Growth
//--------------------------------------------------------------------------------------------------
bool gt_TeachFungalGrowth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_fungalUsed == false)) {
        CameraPan(gv_pLAYER_01_USER, PointFromId(718), 2.0, -1, 10.0, true);
        UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("FungalGrowth", 0), true);
        libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_ZergEnemy, libSwaC_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/514DC072"), UnitFromId(15), "Ref_Origin");
        gv_fungalTarget_Helper = libNtve_gf_ActorLastCreated();
        gv_fungalTarget_TAG = TextTagLastCreated();
        TriggerExecute(gt_TransmissionUseFungalGrowthQ, true, false);
        while (!(((gv_fungalUsed == true) || (gv_fungalSkip == true)))) {
            Wait(0.25, c_timeGame);
        }
        UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("FungalGrowth", 0), false);
        TextTagDestroy(gv_fungalTarget_TAG);
        libNtve_gf_KillModel(gv_fungalTarget_Helper);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeachFungalGrowth_Init () {
    gt_TeachFungalGrowth = TriggerCreate("gt_TeachFungalGrowth_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fungal Growth Used
//--------------------------------------------------------------------------------------------------
bool gt_FungalGrowthUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_fungalUsed = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FungalGrowthUsed_Init () {
    gt_FungalGrowthUsed = TriggerCreate("gt_FungalGrowthUsed_Func");
    TriggerAddEventUnitAbility(gt_FungalGrowthUsed, null, AbilityCommand("FungalGrowth", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Use Fungal Growth Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionUseFungalGrowthQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_fungalUsed == false)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00005", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionUseFungalGrowthQ_Init () {
    gt_TransmissionUseFungalGrowthQ = TriggerCreate("gt_TransmissionUseFungalGrowthQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Fungal Growth Used Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFungalGrowthUsedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Marine"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitIsAlive(EventUnit()) == true)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libSwaC_gf_SendTransmissionCampaign(EventUnit(), "zMission_Hybrid01|Line00109", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFungalGrowthUsedQ_Init () {
    gt_TransmissionFungalGrowthUsedQ = TriggerCreate("gt_TransmissionFungalGrowthUsedQ_Func");
    TriggerAddEventUnitBehaviorChange(gt_TransmissionFungalGrowthUsedQ, null, "FungalGrowth", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teach Parasitic Domination
//--------------------------------------------------------------------------------------------------
bool gt_TeachParasiticDomination_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_06_INFESTED, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_fungalUsed == false)) {
        gv_fungalSkip = true;
        TriggerEnable(gt_TransmissionFungalGrowthUsedQ, false);
    }

    TriggerEnable(gt_TransmissionFirstVirophageSpawnedQ, false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("NPSwarm", 0), true);
    UISetButtonHighlighted(PlayerGroupSingle(gv_pLAYER_01_USER), AbilityCommand("NPSwarm", 0), true);
    TriggerEnable(gt_ParasticDominationUsed, true);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(241)), 2.0, Color(100.00, 100.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/A513E70F"), null, UnitFromId(241));
    CameraPan(gv_pLAYER_01_USER, UnitGetPosition(UnitFromId(241)), 2.0, -1, 10, true);
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_ZergEnemy, libSwaC_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/CCAA7BCD"), UnitFromId(241), "Ref_Center");
    TextTagSetPosition(TextTagLastCreated(), UnitGetPosition(UnitFromId(241)), 4.0);
    gv_parasiticDominationTarget_Helper = libNtve_gf_ActorLastCreated();
    gv_parasiticDominationTarget_TAG = TextTagLastCreated();
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(241), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(241)), 3.0), 15.0, false);
    TriggerExecute(gt_TransmissionUseDominationQ, true, false);
    while (!((gv_parasiticDominationUsed == true))) {
        Wait(1.0, c_timeGame);
    }
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("NPSwarm", 0), false);
    libNtve_gf_KillModel(gv_parasiticDominationTarget_Helper);
    TextTagDestroy(gv_parasiticDominationTarget_TAG);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeachParasiticDomination_Init () {
    gt_TeachParasiticDomination = TriggerCreate("gt_TeachParasiticDomination_Func");
    TriggerAddEventTimePeriodic(gt_TeachParasiticDomination, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Parastic Domination Used
//--------------------------------------------------------------------------------------------------
bool gt_ParasticDominationUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_parasiticDominationUsed = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ParasticDominationUsed_Init () {
    gt_ParasticDominationUsed = TriggerCreate("gt_ParasticDominationUsed_Func");
    TriggerEnable(gt_ParasticDominationUsed, false);
    TriggerAddEventUnitAbility(gt_ParasticDominationUsed, null, AbilityCommand("NPSwarm", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Use Domination Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionUseDominationQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_parasiticDominationUsed == false)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00006", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionUseDominationQ_Init () {
    gt_TransmissionUseDominationQ = TriggerCreate("gt_TransmissionUseDominationQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Parastic Domination Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_ParasticDominationReminderQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(UnitFromId(154), "NPSwarm") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(UnitFromId(153), "NPSwarm") == false))) {
            return false;
        }

        if (!(((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(153)), 9.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(154)), 9.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 1), c_unitCountAlive) > 0)))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_ZergEnemy, libSwaC_ge_CampaginReticleSize_Medium, null, UnitFromId(154), "Ref_Center");
    libHots_gf_StoreActorForUnit(UnitFromId(154), 1, libNtve_gf_ActorLastCreated());
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_ZergEnemy, libSwaC_ge_CampaginReticleSize_Medium, null, UnitFromId(153), "Ref_Center");
    libHots_gf_StoreActorForUnit(UnitFromId(153), 1, libNtve_gf_ActorLastCreated());
    TriggerEnable(gt_ParasticDominationReminderHighlightsOff, true);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00061", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ParasticDominationReminderQ_Init () {
    gt_ParasticDominationReminderQ = TriggerCreate("gt_ParasticDominationReminderQ_Func");
    TriggerAddEventTimePeriodic(gt_ParasticDominationReminderQ, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Parastic Domination Reminder - Highlights Off
//--------------------------------------------------------------------------------------------------
bool gt_ParasticDominationReminderHighlightsOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!(((EventUnitTargetUnit() == UnitFromId(154)) || (EventUnitTargetUnit() == UnitFromId(153))))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(154), 1));
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(153), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ParasticDominationReminderHighlightsOff_Init () {
    gt_ParasticDominationReminderHighlightsOff = TriggerCreate("gt_ParasticDominationReminderHighlightsOff_Func");
    TriggerEnable(gt_ParasticDominationReminderHighlightsOff, false);
    TriggerAddEventUnitAbility(gt_ParasticDominationReminderHighlightsOff, null, AbilityCommand("NPSwarm", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teach Consumption
//--------------------------------------------------------------------------------------------------
bool gt_TeachConsumption_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoEDF3FA2B_g;
    int autoEDF3FA2B_u;
    unit autoEDF3FA2B_var;
    fixed autoA1A099AB_at;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_consumptionUsed == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(57), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("InfestorConsumption", 0), true);
    while ((gv_consumptionUsed == false)) {
        autoEDF3FA2B_g = UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoEDF3FA2B_u = UnitGroupCount(autoEDF3FA2B_g, c_unitCountAll);
        for (;; autoEDF3FA2B_u -= 1) {
            autoEDF3FA2B_var = UnitGroupUnitFromEnd(autoEDF3FA2B_g, autoEDF3FA2B_u);
            if (autoEDF3FA2B_var == null) { break; }
            if ((UnitGetPropertyFixed(autoEDF3FA2B_var, c_unitPropEnergy, c_unitPropCurrent) < 75.0) && (UnitGetType(autoEDF3FA2B_var) == "Infestor")) {
                UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("InfestorConsumption", 0), true);
                TriggerExecute(gt_TransmissionUseConsumptionQ, true, false);
                autoA1A099AB_at = 0;
                while (!((gv_consumptionUsed == true)) && autoA1A099AB_at <= 120.0) {
                    Wait(1.0, c_timeGame);
                    autoA1A099AB_at = autoA1A099AB_at + 1.0;
                }
                UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("InfestorConsumption", 0), false);
                return true;
            }

        }
        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeachConsumption_Init () {
    gt_TeachConsumption = TriggerCreate("gt_TeachConsumption_Func");
    TriggerAddEventTimePeriodic(gt_TeachConsumption, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Use Consumption Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionUseConsumptionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_consumptionUsed == false)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00124", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionUseConsumptionQ_Init () {
    gt_TransmissionUseConsumptionQ = TriggerCreate("gt_TransmissionUseConsumptionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Consumption Used
//--------------------------------------------------------------------------------------------------
bool gt_ConsumptionUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_consumptionUsed = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConsumptionUsed_Init () {
    gt_ConsumptionUsed = TriggerCreate("gt_ConsumptionUsed_Func");
    TriggerAddEventUnitAbility(gt_ConsumptionUsed, null, AbilityCommand("InfestorConsumption", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Build Virophages
//--------------------------------------------------------------------------------------------------
bool gt_BuildVirophages_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto91E56966_ae;
    int auto91E56966_var;
    unitgroup auto7A95F5D2_g;
    int auto7A95F5D2_u;
    unit auto7A95F5D2_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto91E56966_ae = gv_virophageMaxIndex;
    auto91E56966_var = 1;
    for ( ; auto91E56966_var <= auto91E56966_ae; auto91E56966_var += 1 ) {
        if ((UnitGroupCount(UnitGroup("Infestor", gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_virophageRecord[auto91E56966_var].lv_beacon), 1.25), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) && ((gv_virophageRecord[auto91E56966_var].lv_virophage == null) || (UnitIsAlive(gv_virophageRecord[auto91E56966_var].lv_virophage) == false))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Virophage", c_unitCreateConstruct | c_unitCreateIgnorePlacement, gv_pLAYER_06_INFESTED, gv_virophageRecord[auto91E56966_var].lv_virophagePosition);
            gv_virophageRecord[auto91E56966_var].lv_virophage = UnitLastCreated();
            UnitGroupAdd(gv_virophages, UnitLastCreated());
            libSwaC_gf_SetUnitInfoTextCampaign(UnitLastCreated(), null, StringExternal("Param/Value/B87FB62C"), null);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_virophageMaxLife);
            UnitSetCustomValue(UnitLastCreated(), 1, 0.0);
            auto7A95F5D2_g = gv_virophageRecord[auto91E56966_var].lv_garrisonBuildings;
            auto7A95F5D2_u = UnitGroupCount(auto7A95F5D2_g, c_unitCountAll);
            for (;; auto7A95F5D2_u -= 1) {
                auto7A95F5D2_var = UnitGroupUnitFromEnd(auto7A95F5D2_g, auto7A95F5D2_u);
                if (auto7A95F5D2_var == null) { break; }
                UnitCreateEffectUnit(UnitLastCreated(), "VirophageLaunchMissile", auto7A95F5D2_var);
                UnitBehaviorAdd(auto7A95F5D2_var, "GarrisonInfestation", UnitLastCreated(), 1);
            }
            CreepModify(gv_virophageRecord[auto91E56966_var].lv_virophagePosition, 2.0, true, false);
            if ((gv_virophageRecord[auto91E56966_var].lv_infested == false)) {
                gv_virophageRecord[auto91E56966_var].lv_infested = true;
                gf_BuildVirophageTumor(UnitGetPosition(gv_virophageRecord[auto91E56966_var].lv_beacon), UnitLastCreated());
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuildVirophages_Init () {
    gt_BuildVirophages = TriggerCreate("gt_BuildVirophages_Func");
    TriggerAddEventTimePeriodic(gt_BuildVirophages, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infest Garrisons
//--------------------------------------------------------------------------------------------------
bool gt_InfestGarrisons_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto88D8013B_ae;
    int auto88D8013B_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "Virophage"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_virophage_Count += 1;
    UnitGroupAdd(gv_virophagesFinished, EventUnitProgressUnit());
    auto88D8013B_ae = gv_virophageMaxIndex;
    auto88D8013B_var = 1;
    for ( ; auto88D8013B_var <= auto88D8013B_ae; auto88D8013B_var += 1 ) {
        if ((EventUnitProgressUnit() == gv_virophageRecord[auto88D8013B_var].lv_virophage)) {
            gf_InfestBuilding(EventUnitProgressUnit());
            if ((gv_virophageRecord[auto88D8013B_var].lv_bullyRegion != null)) {
                AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION_BULLIES, gv_virophageRecord[auto88D8013B_var].lv_bullyRegion, false);
            }

            break;
        }

    }
    if ((gv_virophage_Count == 1)) {
        TriggerExecute(gt_TransmissionFirstVirophageSpawnedQ, true, false);
    }

    if ((gv_sneakAttackDone == false)) {
        TriggerExecute(gt_SpawnInfested, true, false);
        TriggerExecute(gt_ObjectiveInfestGarrisonsUpdatePhageBorn, true, false);
    }
    else {
        TriggerExecute(gt_TransmissionVirophageCompleteQ, true, false);
        UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/7094AF00"), null, EventUnitProgressUnit());
        MinimapPing(PlayerGroupAll(), UnitGetPosition(EventUnitProgressUnit()), 2.0, Color(100.00, 100.00, 0.00));
    }
    gf_InfestBuilding(EventUnitProgressUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestGarrisons_Init () {
    gt_InfestGarrisons = TriggerCreate("gt_InfestGarrisons_Func");
    TriggerAddEventUnitConstructProgress(gt_InfestGarrisons, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: First Virophage Spawned Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFirstVirophageSpawnedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00009", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFirstVirophageSpawnedQ_Init () {
    gt_TransmissionFirstVirophageSpawnedQ = TriggerCreate("gt_TransmissionFirstVirophageSpawnedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Third Virophage Spawned Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionThirdVirophageSpawnedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00011", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00022", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionThirdVirophageSpawnedQ_Init () {
    gt_TransmissionThirdVirophageSpawnedQ = TriggerCreate("gt_TransmissionThirdVirophageSpawnedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Gauge
//--------------------------------------------------------------------------------------------------
bool gt_CreateGauge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_title;
    text lv_label;
    int lv_width;
    int lv_progress;

    // Automatic Variable Declarations
    int auto52552AD9_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_title = StringExternal("Param/Value/D12B27A5");
    auto52552AD9_val = gv_gasStatus;
    if (auto52552AD9_val == ge_PRESET_IsGasOn_GasOff) {
        TextExpressionSetToken("Param/Expression/17F482EB", "A", FormatDuration(FixedToInt(gv_gasOff_DURATION)));
        lv_label = TextExpressionAssemble("Param/Expression/17F482EB");
        lv_width = FixedToInt(gv_gasOff_DURATION);
        lv_progress = FixedToInt(TimerGetRemaining(gv_mainTimer));
    }
    else if (auto52552AD9_val == ge_PRESET_IsGasOn_GasOn) {
        TextExpressionSetToken("Param/Expression/D78ED081", "A", FormatDuration(FixedToInt(gv_gasOn_DURATION)));
        lv_label = TextExpressionAssemble("Param/Expression/D78ED081");
        lv_width = FixedToInt(FixedToInt(gv_gasOn_DURATION));
        lv_progress = FixedToInt(TimerGetRemaining(gv_mainTimer));
    }
    else {
    }
    libSwaC_gf_DisplayProgressBar(lv_title, 0, lv_width);
    libSwaC_gf_SetProgressBarColor(Color(100.00, 50.20, 0.00));
    libSwaC_gf_SetProgressBarLabel(lv_label);
    libSwaC_gf_SetProgressBarProgress(lv_progress);
    TriggerExecute(gt_UpdateGauge, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateGauge_Init () {
    gt_CreateGauge = TriggerCreate("gt_CreateGauge_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Gauge
//--------------------------------------------------------------------------------------------------
bool gt_UpdateGauge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoFE5A62DA_val;

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((gv_inCinematic == false))) {
        Wait(1.0, c_timeGame);
    }
    while ((gv_gameOver == false) && (gv_inCinematic == false)) {
        autoFE5A62DA_val = gv_gasStatus;
        if (autoFE5A62DA_val == ge_PRESET_IsGasOn_GasOff) {
            TextExpressionSetToken("Param/Expression/FAF7172C", "A", FormatDuration(FixedToInt(TimerGetRemaining(gv_mainTimer))));
            libSwaC_gf_SetProgressBarLabel(TextExpressionAssemble("Param/Expression/FAF7172C"));
            libSwaC_gf_SetProgressBarValueRange(0, FixedToInt(gv_gasOff_DURATION));
            libSwaC_gf_SetProgressBarProgress(FixedToInt(TimerGetElapsed(gv_mainTimer)));
        }
        else if (autoFE5A62DA_val == ge_PRESET_IsGasOn_GasOn) {
            if ((gv_gasOnCycle == 1)) {
                TextExpressionSetToken("Param/Expression/DDBBD16D", "A", FormatDuration(FixedToInt(TimerGetRemaining(gv_mainTimer))));
                libSwaC_gf_SetProgressBarLabel(TextExpressionAssemble("Param/Expression/DDBBD16D"));
                libSwaC_gf_SetProgressBarValueRange(0, 180);
                libSwaC_gf_SetProgressBarProgress(FixedToInt(TimerGetRemaining(gv_mainTimer)));
            }
            else {
                TextExpressionSetToken("Param/Expression/0EDC1F0B", "A", FormatDuration(FixedToInt(TimerGetRemaining(gv_mainTimer))));
                libSwaC_gf_SetProgressBarLabel(TextExpressionAssemble("Param/Expression/0EDC1F0B"));
                libSwaC_gf_SetProgressBarValueRange(0, FixedToInt(gv_gasOn_DURATION));
                libSwaC_gf_SetProgressBarProgress(FixedToInt(TimerGetRemaining(gv_mainTimer)));
            }
        }
        else {
        }
        Wait(0.5, c_timeGame);
    }
    if ((gv_gameOver == false)) {
        TriggerExecute(gt_UpdateGauge, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateGauge_Init () {
    gt_UpdateGauge = TriggerCreate("gt_UpdateGauge_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer Cycling
//--------------------------------------------------------------------------------------------------
bool gt_TimerCycling_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE4787EFE_g;
    int autoE4787EFE_u;
    unit autoE4787EFE_var;

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_gasStatus == ge_PRESET_IsGasOn_GasOff)) {
        gv_gasStatus = ge_PRESET_IsGasOn_GasOn;
        gv_gasOnCycle += 1;
        SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
        TriggerExecute(gt_GasAnimationHandler, true, false);
        autoE4787EFE_g = gv_virophages;
        autoE4787EFE_u = UnitGroupCount(autoE4787EFE_g, c_unitCountAll);
        for (;; autoE4787EFE_u -= 1) {
            autoE4787EFE_var = UnitGroupUnitFromEnd(autoE4787EFE_g, autoE4787EFE_u);
            if (autoE4787EFE_var == null) { break; }
            UnitIssueOrder(autoE4787EFE_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        }
        TriggerEnable(gt_KillInfestedWhenGasisOn, true);
        TriggerExecute(gt_TransmissionGasStateChangeQ, true, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/EA90CCC8"));
        TimerStart(gv_mainTimer, gv_gasOn_DURATION, false, c_timeAI);
        TimerWindowSetStyle(gv_mainTimerWindow, c_timerWindowStyleHorizontalTitleTime, false);
        TimerWindowSetColor(gv_mainTimerWindow, c_timerWindowColorTitle, Color(0.00, 100.00, 0.00), 0.0);
        TimerWindowShow(gv_mainTimerWindow, PlayerGroupAll(), true);
        TriggerExecute(gt_CleanserAttackWaves, true, false);
        TriggerExecute(gt_AIAttackWaves, true, false);
        if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
            TriggerExecute(gt_StartUpgradesNormal, true, false);
        }
        else {
            TriggerExecute(gt_StartUpgradesHard, true, false);
        }
        if ((gv_gasOnCycle == 2)) {
            Wait(60.0, c_timeGame);
            TriggerExecute(gt_BonusObjectiveActivatedQ, true, false);
        }

        if ((gv_gasOnCycle == 3)) {
            TriggerExecute(gt_AIBridgeAttack, true, false);
        }

    }
    else {
        gv_gasStatus = ge_PRESET_IsGasOn_GasOff;
        gv_gasOffCycle += 1;
        TriggerExecute(gt_GasAnimationHandler, true, false);
        TriggerEnable(gt_KillInfestedWhenGasisOn, false);
        TriggerExecute(gt_TransmissionGasStateChangeQ, true, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/275F6D3F"));
        TimerStart(gv_mainTimer, gv_gasOff_DURATION, false, c_timeAI);
        TimerWindowSetStyle(gv_mainTimerWindow, c_timerWindowStyleHorizontalTitleTime, false);
        TimerWindowSetColor(gv_mainTimerWindow, c_timerWindowColorTitle, Color(100.00, 0.00, 0.00), 0.0);
        TimerWindowShow(gv_mainTimerWindow, PlayerGroupAll(), true);
        Wait(1.0, c_timeGame);
        TriggerExecute(gt_SpawnInfested, true, false);
        TriggerExecute(gt_TransmissionAttackWithInfestedQ, true, false);
        AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION_BULLIES, RegionEntireMap(), false);
        gf_ReactivateBulliesIfClear();
        Wait(2.0, c_timeGame);
        libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/87FB7A39"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimerCycling_Init () {
    gt_TimerCycling = TriggerCreate("gt_TimerCycling_Func");
    TriggerAddEventTimer(gt_TimerCycling, gv_mainTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Gas State Change Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionGasStateChangeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto60CCB148_val;
    int auto23373198_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_gasStatus == ge_PRESET_IsGasOn_GasOff)) {
        TriggerQueueEnter();
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        if ((gv_gasStateChangeTransFirstTime1 == true)) {
            gv_gasStateChangeTransFirstTime1 = false;
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00031", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
            auto23373198_val = RandomInt(1, 3);
            if (auto23373198_val == 1) {
                libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00032", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto23373198_val == 2) {
                libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00033", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto23373198_val == 3) {
                libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00012", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else {
            }
        }
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else {
        TriggerQueueEnter();
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        if ((gv_gasStateChangeTransFirstTime2 == true)) {
            gv_gasStateChangeTransFirstTime2 = false;
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00010", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Hybrid01|Line00020", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
            auto60CCB148_val = RandomInt(1, 3);
            if (auto60CCB148_val == 1) {
                libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00071", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto60CCB148_val == 2) {
                libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00029", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto60CCB148_val == 3) {
                libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00072", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else {
            }
        }
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionGasStateChangeQ_Init () {
    gt_TransmissionGasStateChangeQ = TriggerCreate("gt_TransmissionGasStateChangeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gas Animation Handler
//--------------------------------------------------------------------------------------------------
bool gt_GasAnimationHandler_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto668C5880_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto668C5880_val = gv_gasStatus;
    if (auto668C5880_val == ge_PRESET_IsGasOn_GasOff) {
        libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "Signal GasOff");
    }
    else if (auto668C5880_val == ge_PRESET_IsGasOn_GasOn) {
        libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "Signal GasOn");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GasAnimationHandler_Init () {
    gt_GasAnimationHandler = TriggerCreate("gt_GasAnimationHandler_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Infested When Gas is On
//--------------------------------------------------------------------------------------------------
bool gt_KillInfestedWhenGasisOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_infestedGroup;
    unit lv_u;

    // Automatic Variable Declarations
    unitgroup auto08E208FE_g;
    int auto08E208FE_u;
    unit auto08E208FE_var;
    unitgroup auto8D6BBAF6_g;
    int auto8D6BBAF6_u;

    // Variable Initialization
    lv_infestedGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gasStatus == ge_PRESET_IsGasOn_GasOn))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto08E208FE_g = UnitGroup(null, c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto08E208FE_u = UnitGroupCount(auto08E208FE_g, c_unitCountAll);
    for (;; auto08E208FE_u -= 1) {
        auto08E208FE_var = UnitGroupUnitFromEnd(auto08E208FE_g, auto08E208FE_u);
        if (auto08E208FE_var == null) { break; }
        if ((UnitHasBehavior(auto08E208FE_var, "GaseousCombustion") == false) && ((UnitGetType(auto08E208FE_var) == "InfestedTerranCampaign") || (UnitGetType(auto08E208FE_var) == "InfestedTerranCampaignBurrowed") || (UnitGetType(auto08E208FE_var) == "InfestedCivilian") || (UnitGetType(auto08E208FE_var) == "InfestedCivilianBurrowed") || (UnitGetType(auto08E208FE_var) == "InfestorTerran") || (UnitGetType(auto08E208FE_var) == "InfestorTerranBurrowed"))) {
            UnitGroupAdd(lv_infestedGroup, auto08E208FE_var);
        }

    }
    while (true) {
        auto8D6BBAF6_g = UnitGroupFilter(null, c_playerAny, lv_infestedGroup, UnitFilter(0, 0, 0, 0), 10);
        auto8D6BBAF6_u = UnitGroupCount(auto8D6BBAF6_g, c_unitCountAll);
        for (;; auto8D6BBAF6_u -= 1) {
            lv_u = UnitGroupUnitFromEnd(auto8D6BBAF6_g, auto8D6BBAF6_u);
            if (lv_u == null) { break; }
            UnitBehaviorAdd(lv_u, "GaseousCombustion", lv_u, 1);
            UnitGroupRemove(lv_infestedGroup, lv_u);
        }
        if ((libNtve_gf_UnitGroupIsDead(lv_infestedGroup) == true)) {
            return true;
        }

        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillInfestedWhenGasisOn_Init () {
    gt_KillInfestedWhenGasisOn = TriggerCreate("gt_KillInfestedWhenGasisOn_Func");
    TriggerAddEventTimePeriodic(gt_KillInfestedWhenGasisOn, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Attack With Infested Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAttackWithInfestedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gasOffCycle == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Hybrid01|Line00037", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionAttackWithInfestedQ_Init () {
    gt_TransmissionAttackWithInfestedQ = TriggerCreate("gt_TransmissionAttackWithInfestedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Virophage Attacked
//--------------------------------------------------------------------------------------------------
bool gt_VirophageAttacked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Virophage"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = gf_GetVirophageIndex(EventUnit());
    if ((lv_index < 0)) {
        return true;
    }

    if ((gv_virophageRecord[lv_index].lv_attackedIndicator == 0)) {
        UIAlertUnit("AttackTownAlly_Zerg", gv_pLAYER_01_USER, StringExternal("Param/Value/4F068508"), null, EventUnit());
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(EventUnit()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 3.0, 270.0);
        SoundPlay(SoundLink("Alert_ZergAllyBaseUnderAttack", -1), PlayerGroupSingle(gv_pLAYER_01_USER), 100.0, 0.0);
    }

    gv_virophageRecord[lv_index].lv_attackedIndicator = 30;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VirophageAttacked_Init () {
    gt_VirophageAttacked = TriggerCreate("gt_VirophageAttacked_Func");
    TriggerAddEventUnitAttacked(gt_VirophageAttacked, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Virophage Attacked Diminish
//--------------------------------------------------------------------------------------------------
bool gt_VirophageAttackedDiminish_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoDA52AC39_ae;
    int autoDA52AC39_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoDA52AC39_ae = gv_virophageMaxIndex;
    autoDA52AC39_var = 1;
    for ( ; autoDA52AC39_var <= autoDA52AC39_ae; autoDA52AC39_var += 1 ) {
        if ((gv_virophageRecord[autoDA52AC39_var].lv_attackedIndicator > 0)) {
            gv_virophageRecord[autoDA52AC39_var].lv_attackedIndicator -= 1;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VirophageAttackedDiminish_Init () {
    gt_VirophageAttackedDiminish = TriggerCreate("gt_VirophageAttackedDiminish_Func");
    TriggerAddEventTimePeriodic(gt_VirophageAttackedDiminish, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Virophage Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_VirophageDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC47E0188_g;
    int autoC47E0188_u;
    unit autoC47E0188_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_virophages, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/4A57BE70"), "EditorData\\Images\\TriggerLabels\\Exclamation.tga", EventUnit());
    MinimapPing(PlayerGroupAll(), UnitGetPosition(EventUnit()), 2.0, Color(100.00, 0.00, 0.00));
    gv_achievementVirophageLostCount += 1;
    if ((UnitGroupHasUnit(gv_virophagesFinished, EventUnit()) == true)) {
        gv_virophage_Count -= 1;
        TriggerExecute(gt_ObjectiveInfestGarrisonsUpdatePhageLost, true, false);
    }

    if ((TriggerIsEnabled(gt_TransmissionVirophageLostFirstQ) == true)) {
        TriggerExecute(gt_TransmissionVirophageLostFirstQ, true, false);
    }
    else {
        TriggerExecute(gt_TransmissionVirophageLostSubsequentQ, true, false);
    }
    autoC47E0188_g = gv_virophageRecord[gf_GetVirophageIndex(EventUnit())].lv_garrisonBuildings;
    autoC47E0188_u = UnitGroupCount(autoC47E0188_g, c_unitCountAll);
    for (;; autoC47E0188_u -= 1) {
        autoC47E0188_var = UnitGroupUnitFromEnd(autoC47E0188_g, autoC47E0188_u);
        if (autoC47E0188_var == null) { break; }
        UnitBehaviorRemove(autoC47E0188_var, "ColonyInfestation", 1);
        UnitBehaviorRemove(autoC47E0188_var, "GarrisonInfestation", 1);
        UnitBehaviorRemove(autoC47E0188_var, "makeCreep3x3", 1);
        UnitGroupRemove(gv_infestedStructures, autoC47E0188_var);
        UnitSetOwner(autoC47E0188_var, gv_pLAYER_05_GARRISON, true);
        UnitSetPropertyFixed(autoC47E0188_var, c_unitPropLifePercent, 100.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VirophageDestroyed_Init () {
    gt_VirophageDestroyed = TriggerCreate("gt_VirophageDestroyed_Func");
    TriggerAddEventUnitDied(gt_VirophageDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Virophage Lost First Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionVirophageLostFirstQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00008", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Hybrid01|Line00017", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionVirophageLostFirstQ_Init () {
    gt_TransmissionVirophageLostFirstQ = TriggerCreate("gt_TransmissionVirophageLostFirstQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Virophage Lost Subsequent Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionVirophageLostSubsequentQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00135", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionVirophageLostSubsequentQ_Init () {
    gt_TransmissionVirophageLostSubsequentQ = TriggerCreate("gt_TransmissionVirophageLostSubsequentQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Infested
//--------------------------------------------------------------------------------------------------
bool gt_SpawnInfested_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6CB67634_g;
    int auto6CB67634_u;
    unit auto6CB67634_var;
    unitgroup autoE2EEC058_g;
    int autoE2EEC058_u;
    unit autoE2EEC058_var;
    int auto3C34081E_n;
    int auto3C34081E_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_sneakAttackDone == false)) {
        while ((gv_gameOver == false) && (gv_inCinematic == false) && (gv_sneakAttackDone == false)) {
            autoE2EEC058_g = gv_infestedStructures;
            autoE2EEC058_u = UnitGroupCount(autoE2EEC058_g, c_unitCountAll);
            for (;; autoE2EEC058_u -= 1) {
                autoE2EEC058_var = UnitGroupUnitFromEnd(autoE2EEC058_g, autoE2EEC058_u);
                if (autoE2EEC058_var == null) { break; }
                if ((UnitHasBehavior(autoE2EEC058_var, "ColonyInfestation") == true)) {
                    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_06_INFESTED, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < libHots_gf_DifficultyValueInt2(100, 100, 100))) {
                        auto3C34081E_n = libHots_gf_DifficultyValueInt2(4, 4, 3);
                        for (auto3C34081E_i = 1; auto3C34081E_i <= auto3C34081E_n; auto3C34081E_i += 1) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedCivilian", 0, gv_pLAYER_06_INFESTED, libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(autoE2EEC058_var), 0.5, PointFromId(4)));
                        }
                        AIAttackWaveSetTargetUnitGroup(gv_pLAYER_06_INFESTED, gv_sneakAttackTerranBase);
                        AIAttackWaveAddUnits3(4, 4, 3, "InfestedCivilian");
                        AIAttackWaveSend(gv_pLAYER_06_INFESTED, 0, true);
                    }

                }
                else {
                    UnitGroupRemove(gv_infestedStructures, autoE2EEC058_var);
                }
            }
            Wait(15.0, c_timeAI);
        }
    }
    else {
        while (true) {
            if (((gv_gameOver == true) || (gv_inCinematic == true) || (gv_gasStatus == ge_PRESET_IsGasOn_GasOn))) {
                break;
            }

            auto6CB67634_g = gv_infestedStructures;
            auto6CB67634_u = UnitGroupCount(auto6CB67634_g, c_unitCountAll);
            for (;; auto6CB67634_u -= 1) {
                auto6CB67634_var = UnitGroupUnitFromEnd(auto6CB67634_g, auto6CB67634_u);
                if (auto6CB67634_var == null) { break; }
                if ((UnitHasBehavior(auto6CB67634_var, "ColonyInfestation") == true)) {
                    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_06_INFESTED, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < libHots_gf_DifficultyValueInt2(200, 200, 150))) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(libHots_gf_DifficultyValueInt2(1, 1, 0), "InfestedTerranCampaign", 0, gv_pLAYER_06_INFESTED, libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(auto6CB67634_var), 0.5, PointFromId(4)));
                        AISetGroupSuicide(UnitLastCreatedGroup(), true);
                        libNtve_gf_CreateUnitsWithDefaultFacing(libHots_gf_DifficultyValueInt2(3, 3, 3), "InfestedCivilian", 0, gv_pLAYER_06_INFESTED, libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(auto6CB67634_var), 0.5, PointFromId(4)));
                        AISetGroupSuicide(UnitLastCreatedGroup(), true);
                    }

                }
                else {
                    UnitGroupRemove(gv_infestedStructures, auto6CB67634_var);
                }
            }
            Wait(30.0, c_timeGame);
        }
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnInfested_Init () {
    gt_SpawnInfested = TriggerCreate("gt_SpawnInfested_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable Beacon by proximity_Center
//--------------------------------------------------------------------------------------------------
bool gt_EnableBeaconbyproximity_Center_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_BeaconSwap(UnitFromId(292));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableBeaconbyproximity_Center_Init () {
    gt_EnableBeaconbyproximity_Center = TriggerCreate("gt_EnableBeaconbyproximity_Center_Func");
    TriggerAddEventUnitRange(gt_EnableBeaconbyproximity_Center, null, UnitFromId(292), 5.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable Beacon by proximity_2nd right
//--------------------------------------------------------------------------------------------------
bool gt_EnableBeaconbyproximity_2ndright_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_BeaconSwap(UnitFromId(106));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableBeaconbyproximity_2ndright_Init () {
    gt_EnableBeaconbyproximity_2ndright = TriggerCreate("gt_EnableBeaconbyproximity_2ndright_Func");
    TriggerAddEventUnitRange(gt_EnableBeaconbyproximity_2ndright, null, UnitFromId(106), 5.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable Beacon by proximity_1st Left
//--------------------------------------------------------------------------------------------------
bool gt_EnableBeaconbyproximity_1stLeft_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_BeaconSwap(UnitFromId(30));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableBeaconbyproximity_1stLeft_Init () {
    gt_EnableBeaconbyproximity_1stLeft = TriggerCreate("gt_EnableBeaconbyproximity_1stLeft_Func");
    TriggerEnable(gt_EnableBeaconbyproximity_1stLeft, false);
    TriggerAddEventUnitRange(gt_EnableBeaconbyproximity_1stLeft, null, UnitFromId(30), 5.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable Beacon by proximity_2nd Left
//--------------------------------------------------------------------------------------------------
bool gt_EnableBeaconbyproximity_2ndLeft_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_BeaconSwap(UnitFromId(234));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableBeaconbyproximity_2ndLeft_Init () {
    gt_EnableBeaconbyproximity_2ndLeft = TriggerCreate("gt_EnableBeaconbyproximity_2ndLeft_Func");
    TriggerEnable(gt_EnableBeaconbyproximity_2ndLeft, false);
    TriggerAddEventUnitRange(gt_EnableBeaconbyproximity_2ndLeft, null, UnitFromId(234), 5.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Virophage Projectile Vomiting
//--------------------------------------------------------------------------------------------------
bool gt_VirophageProjectileVomiting_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_victim;

    // Automatic Variable Declarations
    int autoF4B68E3B_ae;
    int autoF4B68E3B_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF4B68E3B_ae = gv_virophageMaxIndex;
    autoF4B68E3B_var = 1;
    for ( ; autoF4B68E3B_var <= autoF4B68E3B_ae; autoF4B68E3B_var += 1 ) {
        if ((UnitIsAlive(gv_virophageRecord[autoF4B68E3B_var].lv_virophage) == true)) {
            if ((gv_gasStatus == ge_PRESET_IsGasOn_GasOff)) {
                lv_victim = UnitGroupRandomUnit(gv_virophageRecord[autoF4B68E3B_var].lv_garrisonBuildings, c_unitCountAlive);
                if ((lv_victim != null)) {
                    UnitIssueOrder(gv_virophageRecord[autoF4B68E3B_var].lv_virophage, OrderTargetingUnit(AbilityCommand("attack", 0), lv_victim), c_orderQueueReplace);
                }

            }
            else {
                UnitIssueOrder(gv_virophageRecord[autoF4B68E3B_var].lv_virophage, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VirophageProjectileVomiting_Init () {
    gt_VirophageProjectileVomiting = TriggerCreate("gt_VirophageProjectileVomiting_Func");
    TriggerAddEventTimePeriodic(gt_VirophageProjectileVomiting, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Virophage Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionVirophageCompleteQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto4208D68B_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    if ((gv_virophageCompletedTransFirstTime == true)) {
        gv_virophageCompletedTransFirstTime = false;
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00043", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        auto4208D68B_val = RandomInt(1, 8);
        if (auto4208D68B_val == 1) {
            libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Hybrid01|Line00113", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto4208D68B_val == 2) {
            libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Hybrid01|Line00117", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto4208D68B_val == 3) {
            libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Hybrid01|Line00118", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto4208D68B_val == 4) {
            libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Hybrid01|Line00119", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto4208D68B_val == 5) {
            libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Hybrid01|Line00123", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto4208D68B_val == 6) {
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00014", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto4208D68B_val == 7) {
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00027", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto4208D68B_val == 8) {
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00019", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
        }
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionVirophageCompleteQ_Init () {
    gt_TransmissionVirophageCompleteQ = TriggerCreate("gt_TransmissionVirophageCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Next Two Beacons Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionNextTwoBeaconsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_sneakAttackDone == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_BeaconSwap(UnitFromId(292));
    gf_BeaconSwap(UnitFromId(149));
    TriggerQueueEnter();
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(292)), 8.0), 12.0, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(149)), 8.0), 12.0, false);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Hybrid01|Line00111", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionNextTwoBeaconsQ_Init () {
    gt_TransmissionNextTwoBeaconsQ = TriggerCreate("gt_TransmissionNextTwoBeaconsQ_Func");
    TriggerAddEventUnitRange(gt_TransmissionNextTwoBeaconsQ, null, UnitFromId(149), 14.0, true);
    TriggerAddEventUnitRange(gt_TransmissionNextTwoBeaconsQ, null, UnitFromId(292), 14.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Last Three Beacons Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionLastThreeBeaconsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_sneakAttackDone == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_BeaconSwap(UnitFromId(106));
    gf_BeaconSwap(UnitFromId(30));
    gf_BeaconSwap(UnitFromId(234));
    TriggerQueueEnter();
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(106)), 8.0), 12.0, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(30)), 8.0), 12.0, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(234)), 8.0), 12.0, false);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Hybrid01|Line00112", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionLastThreeBeaconsQ_Init () {
    gt_TransmissionLastThreeBeaconsQ = TriggerCreate("gt_TransmissionLastThreeBeaconsQ_Func");
    TriggerAddEventUnitRange(gt_TransmissionLastThreeBeaconsQ, null, UnitFromId(106), 15.0, true);
    TriggerAddEventUnitRange(gt_TransmissionLastThreeBeaconsQ, null, UnitFromId(30), 15.0, true);
    TriggerAddEventUnitRange(gt_TransmissionLastThreeBeaconsQ, null, UnitFromId(234), 15.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Enter Bonus Objective Area
//--------------------------------------------------------------------------------------------------
bool gt_UnitEnterBonusObjectiveArea_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(41), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_target = UnitGroupClosestToPoint(UnitGroup("HybridScienceFacility", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(UnitGroupUnit(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(41), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 1), 1)));
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/3B9EB9EA"), null, lv_target);
    TriggerExecute(gt_BonusObjectiveActivatedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitEnterBonusObjectiveArea_Init () {
    gt_UnitEnterBonusObjectiveArea = TriggerCreate("gt_UnitEnterBonusObjectiveArea_Func");
    TriggerEnable(gt_UnitEnterBonusObjectiveArea, false);
    TriggerAddEventTimePeriodic(gt_UnitEnterBonusObjectiveArea, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Activated Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveActivatedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto61C8EF73_ae = 3;
    int auto61C8EF73_var;
    const int autoA24E82EC_ae = 3;
    const int autoA24E82EC_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_BonusObjectiveCreepTumorPlaced, true);
    auto61C8EF73_var = 1;
    for ( ; auto61C8EF73_var <= auto61C8EF73_ae; auto61C8EF73_var += 1 ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, 0, UnitGetPosition(gv_objective_ScienceFacilities[auto61C8EF73_var]));
        gv_objective_MinimapMarkers[auto61C8EF73_var] = UnitLastCreated();
    }
    libSwaC_gf_RemindPlayertoCompleteBonusObjective("ZHybrid01Objective03", 600.0);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveSpreadCreepCreate, true, true);
    lv_index = 1;
    for ( ; ( (autoA24E82EC_ai >= 0 && lv_index <= autoA24E82EC_ae) || (autoA24E82EC_ai < 0 && lv_index >= autoA24E82EC_ae) ) ; lv_index += autoA24E82EC_ai ) {
        gf_CreateBonusHelper(lv_index);
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00130", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00131", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveActivatedQ_Init () {
    gt_BonusObjectiveActivatedQ = TriggerCreate("gt_BonusObjectiveActivatedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Creep Tumor Placed
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveCreepTumorPlaced_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tumor;
    int lv_i;

    // Automatic Variable Declarations
    const int auto53CE819D_ae = 3;
    const int auto53CE819D_ai = 1;
    fixed autoF4C42D6A_at;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitProgressUnit()) == "CreepTumor") || (UnitGetType(EventUnitProgressUnit()) == "CreepTumorQueen")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_tumor = EventUnitProgressUnit();
    lv_i = 1;
    for ( ; ( (auto53CE819D_ai >= 0 && lv_i <= auto53CE819D_ae) || (auto53CE819D_ai < 0 && lv_i >= auto53CE819D_ae) ) ; lv_i += auto53CE819D_ai ) {
        if ((libNtve_gf_UnitInRegion(lv_tumor, gv_objective_TumorRegion[lv_i]) == true) && (gv_objective_TumorActivated[lv_i] == false)) {
            PingDestroy(gv_objective_BonusPings[lv_i]);
            TextTagDestroy(gv_objective_TumorPlacementTag[lv_i]);
            libNtve_gf_KillModel(gv_objective_TumorPlacementHelper[lv_i]);
            autoF4C42D6A_at = 0;
            while (!((UnitGetType(lv_tumor) == "CreepTumorBurrowed")) && autoF4C42D6A_at <= 15.0) {
                Wait(0.25, c_timeGame);
                autoF4C42D6A_at = autoF4C42D6A_at + 0.25;
            }
            if ((UnitIsAlive(lv_tumor) == true) && (gv_objective_TumorActivated[lv_i] == false)) {
                gv_objective_TumorActivated[lv_i] = true;
                UnitCreateEffectUnit(lv_tumor, "ScourgeNestAcquire", gv_objective_ScienceFacilities[lv_i]);
                UnitKill(gv_objective_MinimapMarkers[lv_i]);
                gf_TumorPlacedDisableGuns(lv_i);
                libSwaC_gf_DisplayMissionObjectiveRewardFloatingText(UnitGetPosition(lv_tumor), "ZHybrid01Objective03", gv_pLAYER_01_USER);
                TriggerExecute(gt_BonusObjectiveSpreadCreepUpdate, true, false);
                Wait(1.0, c_timeGame);
                UnitBehaviorAddPlayer(gv_objective_ScienceFacilities[lv_i], "ColonyInfestation", gv_pLAYER_01_USER, 1);
                return true;
            }
            else {
                return true;
            }
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveCreepTumorPlaced_Init () {
    gt_BonusObjectiveCreepTumorPlaced = TriggerCreate("gt_BonusObjectiveCreepTumorPlaced_Func");
    TriggerEnable(gt_BonusObjectiveCreepTumorPlaced, false);
    TriggerAddEventUnitConstructProgress(gt_BonusObjectiveCreepTumorPlaced, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Spread Creep Update
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveSpreadCreepUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveSpreadCreepCreate, true, false);
    gv_objective_CreepTumorsPlaced += 1;
    libSwaC_gf_SetMissionObjectiveProgress2("ZHybrid01Objective03", gv_objective_CreepTumorsPlaced, true, null, true);
    if ((gv_objective_CreepTumorsPlaced == 3)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_BonusObjectiveCreepTumorPlaced, false);
        TriggerEnable(gt_BonusObjectiveCreepTumorDies, false);
        TriggerExecute(gt_ObjectiveSpreadCreepComplete, true, true);
    }

    TriggerExecute(gt_TransmissionBonusObjectiveUpdateQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveSpreadCreepUpdate_Init () {
    gt_BonusObjectiveSpreadCreepUpdate = TriggerCreate("gt_BonusObjectiveSpreadCreepUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Bonus Objective Update Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBonusObjectiveUpdateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoFD43C19C_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    autoFD43C19C_val = gv_objective_CreepTumorsPlaced;
    if (autoFD43C19C_val == 1) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00134", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoFD43C19C_val == 2) {
    }
    else if (autoFD43C19C_val == 3) {
        TriggerEnable(TriggerGetCurrent(), false);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00132", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBonusObjectiveUpdateQ_Init () {
    gt_TransmissionBonusObjectiveUpdateQ = TriggerCreate("gt_TransmissionBonusObjectiveUpdateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Creep Tumor Dies
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveCreepTumorDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tumor;
    int lv_i;

    // Automatic Variable Declarations
    const int auto5208ADA1_ae = 3;
    const int auto5208ADA1_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "CreepTumor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_tumor = EventUnit();
    lv_i = 1;
    for ( ; ( (auto5208ADA1_ai >= 0 && lv_i <= auto5208ADA1_ae) || (auto5208ADA1_ai < 0 && lv_i >= auto5208ADA1_ae) ) ; lv_i += auto5208ADA1_ai ) {
        if ((libNtve_gf_UnitInRegion(lv_tumor, gv_objective_TumorRegion[lv_i]) == true) && (gv_objective_TumorActivated[lv_i] == false)) {
            if ((PingIsVisible(gv_objective_BonusPings[lv_i]) == false) && (UnitGroupCount(UnitGroup("CreepTumor", gv_pLAYER_01_USER, gv_objective_TumorRegion[lv_i], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), c_unitCountAlive) == 0)) {
                gf_CreateBonusHelper(lv_i);
            }

            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveCreepTumorDies_Init () {
    gt_BonusObjectiveCreepTumorDies = TriggerCreate("gt_BonusObjectiveCreepTumorDies_Func");
    TriggerAddEventUnitDied(gt_BonusObjectiveCreepTumorDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creep Tumor Target Cursor Enter
//--------------------------------------------------------------------------------------------------
bool gt_CreepTumorTargetCursorEnter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto26A76269_ae = 3;
    const int auto26A76269_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (auto26A76269_ai >= 0 && lv_i <= auto26A76269_ae) || (auto26A76269_ai < 0 && lv_i >= auto26A76269_ae) ) ; lv_i += auto26A76269_ai ) {
        if ((UnitGetOwner(gv_objective_ScienceFacilities[lv_i]) != gv_pLAYER_01_USER) && (UnitIsAlive(gv_objective_ScienceFacilities[lv_i]) == true)) {
            libNtve_gf_SendActorMessageToUnit(gv_objective_ScienceFacilities[lv_i], "Signal BuildOn");
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreepTumorTargetCursorEnter_Init () {
    gt_CreepTumorTargetCursorEnter = TriggerCreate("gt_CreepTumorTargetCursorEnter_Func");
    TriggerAddEventTargetModeUpdate(gt_CreepTumorTargetCursorEnter, gv_pLAYER_01_USER, AbilityCommand("CreepTumorBuild", 0), c_targetModeStateOn);
    TriggerAddEventTargetModeUpdate(gt_CreepTumorTargetCursorEnter, gv_pLAYER_01_USER, AbilityCommand("QueenBuild", 0), c_targetModeStateOn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creep Tumor Target Cursor Leave
//--------------------------------------------------------------------------------------------------
bool gt_CreepTumorTargetCursorLeave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto7639581B_ae = 3;
    const int auto7639581B_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (auto7639581B_ai >= 0 && lv_i <= auto7639581B_ae) || (auto7639581B_ai < 0 && lv_i >= auto7639581B_ae) ) ; lv_i += auto7639581B_ai ) {
        if ((UnitIsAlive(gv_objective_ScienceFacilities[lv_i]) == true)) {
            libNtve_gf_SendActorMessageToUnit(gv_objective_ScienceFacilities[lv_i], "Signal BuildOff");
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreepTumorTargetCursorLeave_Init () {
    gt_CreepTumorTargetCursorLeave = TriggerCreate("gt_CreepTumorTargetCursorLeave_Func");
    TriggerAddEventTargetModeUpdate(gt_CreepTumorTargetCursorLeave, gv_pLAYER_01_USER, AbilityCommand("CreepTumorBuild", 0), c_targetModeStateOff);
    TriggerAddEventTargetModeUpdate(gt_CreepTumorTargetCursorLeave, gv_pLAYER_01_USER, AbilityCommand("QueenBuild", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Handle Kerrigan Death
//--------------------------------------------------------------------------------------------------
bool gt_HandleKerriganDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_StartKerriganReviveCooldown();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HandleKerriganDeath_Init () {
    gt_HandleKerriganDeath = TriggerCreate("gt_HandleKerriganDeath_Func");
    TriggerEnable(gt_HandleKerriganDeath, false);
    TriggerAddEventUnitDied(gt_HandleKerriganDeath, UnitRefFromVariable("gv_kerrigan"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ambient Gun Firing
//--------------------------------------------------------------------------------------------------
bool gt_AmbientGunFiring_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_objective_TumorActivated[1] == false)) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(23), "DominionEnergyCannon", c_animNameDefault, "Stand Work", c_animFlagNonLooping, c_animTimeDefault);
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(23), "HybridCannon", c_animNameDefault, "Stand Work", c_animFlagNonLooping, c_animTimeDefault);
    }

    if ((gv_objective_TumorActivated[2] == false)) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(40), "DominionEnergyCannon", c_animNameDefault, "Stand Work", c_animFlagNonLooping, c_animTimeDefault);
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(40), "HybridCannon", c_animNameDefault, "Stand Work", c_animFlagNonLooping, c_animTimeDefault);
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(39), "DominionEnergyCannon", c_animNameDefault, "Stand Work", c_animFlagNonLooping, c_animTimeDefault);
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(39), "HybridCannon", c_animNameDefault, "Stand Work", c_animFlagNonLooping, c_animTimeDefault);
    }

    if ((gv_objective_TumorActivated[3] == false)) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(52), "DominionEnergyCannon", c_animNameDefault, "Stand Work", c_animFlagNonLooping, c_animTimeDefault);
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(52), "HybridCannon", c_animNameDefault, "Stand Work", c_animFlagNonLooping, c_animTimeDefault);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmbientGunFiring_Init () {
    gt_AmbientGunFiring = TriggerCreate("gt_AmbientGunFiring_Func");
    TriggerAddEventTimePeriodic(gt_AmbientGunFiring, 20.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Lab Entrance Indicator
//--------------------------------------------------------------------------------------------------
bool gt_CreateLabEntranceIndicator_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_helperModel;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateReticleEffectAndTextTagAtPoint(libSwaC_ge_CampaginReticleType_ZergEnemy, libSwaC_ge_CampaginReticleSize_Large, null, PointFromId(1021));
    lv_helperModel = libNtve_gf_ActorLastCreated();
    while (!((UnitGetPropertyFixed(UnitFromId(212), c_unitPropLifePercent, c_unitPropCurrent) <= 99.0))) {
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_KillModel(lv_helperModel);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateLabEntranceIndicator_Init () {
    gt_CreateLabEntranceIndicator = TriggerCreate("gt_CreateLabEntranceIndicator_Func");
    TriggerAddEventUnitRange(gt_CreateLabEntranceIndicator, null, UnitFromId(212), 10.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Expansion Clear - Spawn Gas Pallets
//--------------------------------------------------------------------------------------------------
bool gt_ExpansionClearSpawnGasPallets_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto8B79EA2A_n = 4;
    int auto8B79EA2A_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    for (auto8B79EA2A_i = 1; auto8B79EA2A_i <= auto8B79EA2A_n; auto8B79EA2A_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PalletGas", c_unitCreateIgnorePlacement, 0, RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 2.5)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExpansionClearSpawnGasPallets_Init () {
    gt_ExpansionClearSpawnGasPallets = TriggerCreate("gt_ExpansionClearSpawnGasPallets_Func");
    TriggerAddEventUnitDied(gt_ExpansionClearSpawnGasPallets, UnitRefFromUnit(UnitFromId(53)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Detection Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDetectionWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TechTreeBehaviorCount(gv_pLAYER_01_USER, "InfestorDetectorRadarDetected", c_techCountQueuedOrBetter) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00007", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    breakpoint;
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDetectionWarningQ_Init () {
    gt_TransmissionDetectionWarningQ = TriggerCreate("gt_TransmissionDetectionWarningQ_Func");
    TriggerAddEventTimePeriodic(gt_TransmissionDetectionWarningQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lab Entrance Damaged - Remove Harmless
//--------------------------------------------------------------------------------------------------
bool gt_LabEntranceDamagedRemoveHarmless_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemovePlayer(gv_labEntranceUnit, "Harmless", gv_pLAYER_02_DOMINION_BULLIES, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LabEntranceDamagedRemoveHarmless_Init () {
    gt_LabEntranceDamagedRemoveHarmless = TriggerCreate("gt_LabEntranceDamagedRemoveHarmless_Func");
    TriggerAddEventUnitDamaged(gt_LabEntranceDamagedRemoveHarmless, UnitRefFromVariable("gv_labEntranceUnit"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infested Attack Gate
//--------------------------------------------------------------------------------------------------
bool gt_InfestedAttackGate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_zombies;
    unitgroup lv_dominions;
    unitgroup lv_dominions_Left;
    unitgroup lv_dominions_Right;
    unit lv_target_Left;
    unit lv_target_Right;

    // Automatic Variable Declarations
    unitgroup auto1229455E_g;
    int auto1229455E_u;
    unit auto1229455E_var;
    unitgroup auto633412F7_g;
    int auto633412F7_u;
    unit auto633412F7_var;

    // Variable Initialization
    lv_zombies = UnitGroupEmpty();
    lv_dominions = UnitGroupEmpty();
    lv_dominions_Left = UnitGroupEmpty();
    lv_dominions_Right = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_labEntranceUnit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_finalPlatform == null)) {
        gv_finalPlatform = RegionFromId(58);
        RegionAddRegion(gv_finalPlatform, RegionFromId(59));
    }

    lv_zombies = UnitGroup(null, gv_pLAYER_06_INFESTED, gv_finalPlatform, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((libNtve_gf_UnitGroupIsDead(lv_zombies) == true)) {
        return true;
    }

    lv_dominions = UnitGroupAlliance(gv_pLAYER_06_INFESTED, c_unitAllianceEnemy, gv_finalPlatform, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupRemove(lv_dominions, UnitFromId(212));
    if ((libNtve_gf_UnitGroupIsDead(lv_dominions) == true)) {
        auto633412F7_g = lv_zombies;
        auto633412F7_u = UnitGroupCount(auto633412F7_g, c_unitCountAll);
        for (;; auto633412F7_u -= 1) {
            auto633412F7_var = UnitGroupUnitFromEnd(auto633412F7_g, auto633412F7_u);
            if (auto633412F7_var == null) { break; }
            UnitIssueOrder(auto633412F7_var, OrderTargetingUnit(AbilityCommand("attack", 0), gv_labEntranceUnit), c_orderQueueReplace);
        }
    }
    else {
        lv_dominions_Left = UnitGroupAlliance(gv_pLAYER_06_INFESTED, c_unitAllianceEnemy, RegionFromId(58), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupRemove(lv_dominions_Left, UnitFromId(212));
        lv_target_Left = UnitGroupClosestToPoint(lv_dominions_Left, PointFromId(1239));
        lv_dominions_Right = lv_dominions;
        UnitGroupRemoveUnitGroup(lv_dominions_Right, lv_dominions_Left);
        lv_target_Right = UnitGroupClosestToPoint(lv_dominions_Right, PointFromId(1239));
        if ((lv_target_Left == null)) {
            lv_target_Left = lv_target_Right;
        }

        if ((lv_target_Right == null)) {
            lv_target_Right = lv_target_Left;
        }

        auto1229455E_g = lv_zombies;
        auto1229455E_u = UnitGroupCount(auto1229455E_g, c_unitCountAll);
        for (;; auto1229455E_u -= 1) {
            auto1229455E_var = UnitGroupUnitFromEnd(auto1229455E_g, auto1229455E_u);
            if (auto1229455E_var == null) { break; }
            if ((libNtve_gf_UnitInRegion(auto1229455E_var, RegionFromId(58)) == true)) {
                UnitIssueOrder(auto1229455E_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_target_Left)), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(auto1229455E_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_target_Right)), c_orderQueueReplace);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestedAttackGate_Init () {
    gt_InfestedAttackGate = TriggerCreate("gt_InfestedAttackGate_Func");
    TriggerEnable(gt_InfestedAttackGate, false);
    TriggerAddEventTimePeriodic(gt_InfestedAttackGate, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Expansion Engaged Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionExpansionEngagedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00015", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionExpansionEngagedQ_Init () {
    gt_TransmissionExpansionEngagedQ = TriggerCreate("gt_TransmissionExpansionEngagedQ_Func");
    TriggerAddEventUnitDamaged(gt_TransmissionExpansionEngagedQ, UnitRefFromUnit(UnitFromId(332)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Bridge Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBridgeAttackQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00016", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBridgeAttackQ_Init () {
    gt_TransmissionBridgeAttackQ = TriggerCreate("gt_TransmissionBridgeAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Base Attack Started Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBaseAttackStartedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_06_INFESTED) || (UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00034", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBaseAttackStartedQ_Init () {
    gt_TransmissionBaseAttackStartedQ = TriggerCreate("gt_TransmissionBaseAttackStartedQ_Func");
    TriggerAddEventUnitRegion(gt_TransmissionBaseAttackStartedQ, null, RegionFromId(32), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: 2nd Layer Breached Q
//--------------------------------------------------------------------------------------------------
bool gt_Transmission2ndLayerBreachedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00060", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Transmission2ndLayerBreachedQ_Init () {
    gt_Transmission2ndLayerBreachedQ = TriggerCreate("gt_Transmission2ndLayerBreachedQ_Func");
    TriggerAddEventUnitRegion(gt_Transmission2ndLayerBreachedQ, null, RegionFromId(30), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Stukov Banter Kill Dominion Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionStukovBanterKillDominionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TriggerQueueIsEmpty() == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION_BULLIES, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), c_unitCountAlive) < 10))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00116", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionStukovBanterKillDominionQ_Init () {
    gt_TransmissionStukovBanterKillDominionQ = TriggerCreate("gt_TransmissionStukovBanterKillDominionQ_Func");
    TriggerAddEventTimePeriodic(gt_TransmissionStukovBanterKillDominionQ, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Stukov Banter Doing Well Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionStukovBanterDoingWellQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(gv_virophagesFinished, c_unitCountAlive) > 5))) {
            return false;
        }

        if (!((TriggerQueueIsEmpty() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00110", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionStukovBanterDoingWellQ_Init () {
    gt_TransmissionStukovBanterDoingWellQ = TriggerCreate("gt_TransmissionStukovBanterDoingWellQ_Func");
    TriggerAddEventTimePeriodic(gt_TransmissionStukovBanterDoingWellQ, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Stukov Banter Keep Going Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionStukovBanterKeepGoingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TriggerQueueIsEmpty() == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_06_INFESTED, RegionFromId(31), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 12))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00114", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionStukovBanterKeepGoingQ_Init () {
    gt_TransmissionStukovBanterKeepGoingQ = TriggerCreate("gt_TransmissionStukovBanterKeepGoingQ_Func");
    TriggerAddEventTimePeriodic(gt_TransmissionStukovBanterKeepGoingQ, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cleanser Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_CleanserAttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_cleanserWaveCount = 0;
    AIAttackWaveSetGatherPoint(gv_pLAYER_04_DOMINION_CLEANSERS, PointFromId(107));
    if ((gv_gasOnCycle == 1)) {
        gv_cleanserWaveCount += 1;
        gv_cleanserTeamTargets[gv_cleanserWaveCount] = gv_virophageRecord[ge_VirophageName_VirophageSA1].lv_virophage;
        if ((gv_cleanserTeamTargets[gv_cleanserWaveCount] != null)) {
            AIAttackWaveSetTargetUnitPoint(gv_pLAYER_04_DOMINION_CLEANSERS, gv_cleanserTeamTargets[gv_cleanserWaveCount]);
            AIAttackWaveAddUnits3(3, 3, 4, "Firebat");
            AIAttackWaveAddUnits3(1, 1, 2, "Medivac");
            AIAttackWaveAddWaypoint(gv_pLAYER_04_DOMINION_CLEANSERS, gf_GetDropOffPoint(gv_cleanserTeamTargets[gv_cleanserWaveCount]), true);
            AIAttackWaveSend(gv_pLAYER_04_DOMINION_CLEANSERS, 90, false);
            gv_cleanserWaves[gv_cleanserWaveCount] = WaveLastCreated();
            while (!((UnitGroupCount(UnitGroupFilterRegion(AIWaveGetUnits(gv_cleanserWaves[gv_cleanserWaveCount]), RegionCircle(UnitGetPosition(gv_virophageRecord[ge_VirophageName_VirophageSA1].lv_virophage), 60.0), 0), c_unitCountAlive) > 0))) {
                Wait(1.0, c_timeGame);
            }
            gf_CleanserPingCreate(gv_cleanserWaveCount);
            TriggerExecute(gt_WarnIfVirophageUnderAttack, true, false);
        }

    }
    else if ((gv_gasOnCycle <= 3)) {
        gv_cleanserWaveCount += 1;
        gv_cleanserTeamTargets[gv_cleanserWaveCount] = gf_GetCleanserTarget();
        if ((gv_cleanserTeamTargets[gv_cleanserWaveCount] != null)) {
            AIAttackWaveSetTargetUnitPoint(gv_pLAYER_04_DOMINION_CLEANSERS, gv_cleanserTeamTargets[gv_cleanserWaveCount]);
            AIAttackWaveAddUnits3(3, 3, 4, "Firebat");
            AIAttackWaveAddUnits3(1, 1, 2, "Medivac");
            AIAttackWaveAddUnits3(3, 3, 4, "VikingFighter");
            AIAttackWaveAddWaypoint(gv_pLAYER_04_DOMINION_CLEANSERS, gf_GetDropOffPoint(gv_cleanserTeamTargets[gv_cleanserWaveCount]), true);
            AIAttackWaveSend(gv_pLAYER_04_DOMINION_CLEANSERS, 60, false);
            gv_cleanserWaves[gv_cleanserWaveCount] = WaveLastCreated();
            gf_CleanserPingCreate(gv_cleanserWaveCount);
            TriggerExecute(gt_WarnIfVirophageUnderAttack, true, false);
        }

        Wait(60.0, c_timeAI);
        gv_cleanserWaveCount += 1;
        gv_cleanserTeamTargets[gv_cleanserWaveCount] = gf_GetCleanserTarget();
        if ((gv_cleanserTeamTargets[gv_cleanserWaveCount] != null)) {
            AIAttackWaveSetTargetUnitPoint(gv_pLAYER_04_DOMINION_CLEANSERS, gv_cleanserTeamTargets[gv_cleanserWaveCount]);
            AIAttackWaveAddUnits3(3, 3, 4, "Firebat");
            AIAttackWaveAddUnits3(1, 1, 2, "Medivac");
            AIAttackWaveAddUnits3(1, 1, 2, "Banshee");
            AIAttackWaveAddUnits3(0, 0, 1, "ScienceVessel");
            AIAttackWaveAddWaypoint(gv_pLAYER_04_DOMINION_CLEANSERS, gf_GetDropOffPoint(gv_cleanserTeamTargets[gv_cleanserWaveCount]), true);
            AIAttackWaveSend(gv_pLAYER_04_DOMINION_CLEANSERS, 60, false);
            gv_cleanserWaves[gv_cleanserWaveCount] = WaveLastCreated();
            gf_CleanserPingCreate(gv_cleanserWaveCount);
            TriggerExecute(gt_WarnIfVirophageUnderAttack, true, false);
        }

    }
    else if ((gv_gasOnCycle <= 5)) {
        gv_cleanserWaveCount += 1;
        gv_cleanserTeamTargets[gv_cleanserWaveCount] = gf_GetCleanserTarget();
        if ((gv_cleanserTeamTargets[gv_cleanserWaveCount] != null)) {
            AIAttackWaveSetTargetUnitPoint(gv_pLAYER_04_DOMINION_CLEANSERS, gv_cleanserTeamTargets[gv_cleanserWaveCount]);
            AIAttackWaveAddUnits3(3, 3, 4, "Firebat");
            AIAttackWaveAddUnits3(1, 1, 2, "Medivac");
            AIAttackWaveAddUnits3(3, 3, 4, "VikingFighter");
            AIAttackWaveAddUnits3(0, 0, 1, "ScienceVessel");
            AIAttackWaveAddWaypoint(gv_pLAYER_04_DOMINION_CLEANSERS, gf_GetDropOffPoint(gv_cleanserTeamTargets[gv_cleanserWaveCount]), true);
            AIAttackWaveSend(gv_pLAYER_04_DOMINION_CLEANSERS, 60, false);
            gv_cleanserWaves[gv_cleanserWaveCount] = WaveLastCreated();
            gf_CleanserPingCreate(gv_cleanserWaveCount);
            TriggerExecute(gt_WarnIfVirophageUnderAttack, true, false);
        }

        Wait(60.0, c_timeAI);
        gv_cleanserWaveCount += 1;
        gv_cleanserTeamTargets[gv_cleanserWaveCount] = gf_GetCleanserTarget();
        if ((gv_cleanserTeamTargets[gv_cleanserWaveCount] != null)) {
            AIAttackWaveSetTargetUnitPoint(gv_pLAYER_04_DOMINION_CLEANSERS, gv_cleanserTeamTargets[gv_cleanserWaveCount]);
            AIAttackWaveAddUnits3(4, 4, 5, "Firebat");
            AIAttackWaveAddUnits3(4, 4, 6, "Marine");
            AIAttackWaveAddUnits3(2, 2, 3, "Medivac");
            AIAttackWaveAddWaypoint(gv_pLAYER_04_DOMINION_CLEANSERS, gf_GetDropOffPoint(gv_cleanserTeamTargets[gv_cleanserWaveCount]), true);
            AIAttackWaveSend(gv_pLAYER_04_DOMINION_CLEANSERS, 60, false);
            gv_cleanserWaves[gv_cleanserWaveCount] = WaveLastCreated();
            gf_CleanserPingCreate(gv_cleanserWaveCount);
            TriggerExecute(gt_WarnIfVirophageUnderAttack, true, false);
        }

        Wait(60.0, c_timeAI);
        gv_cleanserWaveCount += 1;
        gv_cleanserTeamTargets[gv_cleanserWaveCount] = gf_GetCleanserTarget();
        if ((gv_cleanserTeamTargets[gv_cleanserWaveCount] != null)) {
            AIAttackWaveSetTargetUnitPoint(gv_pLAYER_04_DOMINION_CLEANSERS, gv_cleanserTeamTargets[gv_cleanserWaveCount]);
            AIAttackWaveAddUnits3(4, 4, 5, "Firebat");
            AIAttackWaveAddUnits3(1, 1, 2, "SiegeTank");
            AIAttackWaveAddUnits3(2, 2, 3, "Medivac");
            AIAttackWaveAddWaypoint(gv_pLAYER_04_DOMINION_CLEANSERS, gf_GetDropOffPoint(gv_cleanserTeamTargets[gv_cleanserWaveCount]), true);
            AIAttackWaveSend(gv_pLAYER_04_DOMINION_CLEANSERS, 60, false);
            gv_cleanserWaves[gv_cleanserWaveCount] = WaveLastCreated();
            gf_CleanserPingCreate(gv_cleanserWaveCount);
            TriggerExecute(gt_WarnIfVirophageUnderAttack, true, false);
        }

    }
    else if ((gv_gasOnCycle > 5)) {
        gv_cleanserWaveCount += 1;
        gv_cleanserTeamTargets[gv_cleanserWaveCount] = gf_GetCleanserTarget();
        if ((gv_cleanserTeamTargets[gv_cleanserWaveCount] != null)) {
            AIAttackWaveSetTargetUnitPoint(gv_pLAYER_04_DOMINION_CLEANSERS, gv_cleanserTeamTargets[gv_cleanserWaveCount]);
            AIAttackWaveAddUnits3(3, 3, 4, "Firebat");
            AIAttackWaveAddUnits3(2, 2, 3, "Marauder");
            AIAttackWaveAddUnits3(2, 2, 3, "Medivac");
            AIAttackWaveAddWaypoint(gv_pLAYER_04_DOMINION_CLEANSERS, gf_GetDropOffPoint(gv_cleanserTeamTargets[gv_cleanserWaveCount]), true);
            AIAttackWaveSend(gv_pLAYER_04_DOMINION_CLEANSERS, 60, false);
            gv_cleanserWaves[gv_cleanserWaveCount] = WaveLastCreated();
            gf_CleanserPingCreate(gv_cleanserWaveCount);
            TriggerExecute(gt_WarnIfVirophageUnderAttack, true, false);
        }

        Wait(15.0, c_timeAI);
        gv_cleanserWaveCount += 1;
        gv_cleanserTeamTargets[gv_cleanserWaveCount] = gf_GetCleanserTarget();
        if ((gv_cleanserTeamTargets[gv_cleanserWaveCount] != null)) {
            AIAttackWaveSetTargetUnitPoint(gv_pLAYER_04_DOMINION_CLEANSERS, gv_cleanserTeamTargets[gv_cleanserWaveCount]);
            AIAttackWaveAddUnits3(3, 3, 4, "Firebat");
            AIAttackWaveAddUnits3(3, 3, 4, "VikingFighter");
            AIAttackWaveAddUnits3(1, 1, 2, "Medivac");
            AIAttackWaveAddUnits3(0, 0, 1, "ScienceVessel");
            AIAttackWaveAddWaypoint(gv_pLAYER_04_DOMINION_CLEANSERS, gf_GetDropOffPoint(gv_cleanserTeamTargets[gv_cleanserWaveCount]), true);
            AIAttackWaveSend(gv_pLAYER_04_DOMINION_CLEANSERS, 60, false);
            gv_cleanserWaves[gv_cleanserWaveCount] = WaveLastCreated();
            gf_CleanserPingCreate(gv_cleanserWaveCount);
            TriggerExecute(gt_WarnIfVirophageUnderAttack, true, false);
        }

        Wait(30.0, c_timeAI);
        gv_cleanserWaveCount += 1;
        gv_cleanserTeamTargets[gv_cleanserWaveCount] = gf_GetCleanserTarget();
        if ((gv_cleanserTeamTargets[gv_cleanserWaveCount] != null)) {
            AIAttackWaveSetTargetUnitPoint(gv_pLAYER_04_DOMINION_CLEANSERS, gv_cleanserTeamTargets[gv_cleanserWaveCount]);
            AIAttackWaveAddUnits3(4, 4, 5, "Firebat");
            AIAttackWaveAddUnits3(1, 1, 2, "Banshee");
            AIAttackWaveAddUnits3(1, 1, 2, "Medivac");
            AIAttackWaveAddWaypoint(gv_pLAYER_04_DOMINION_CLEANSERS, gf_GetDropOffPoint(gv_cleanserTeamTargets[gv_cleanserWaveCount]), true);
            AIAttackWaveSend(gv_pLAYER_04_DOMINION_CLEANSERS, 60, false);
            gv_cleanserWaves[gv_cleanserWaveCount] = WaveLastCreated();
            gf_CleanserPingCreate(gv_cleanserWaveCount);
        }

        Wait(15.0, c_timeAI);
        gv_cleanserWaveCount += 1;
        gv_cleanserTeamTargets[gv_cleanserWaveCount] = gf_GetCleanserTarget();
        if ((gv_cleanserTeamTargets[gv_cleanserWaveCount] != null)) {
            AIAttackWaveSetTargetUnitPoint(gv_pLAYER_04_DOMINION_CLEANSERS, gv_cleanserTeamTargets[gv_cleanserWaveCount]);
            AIAttackWaveAddUnits3(3, 3, 4, "Firebat");
            AIAttackWaveAddUnits3(2, 2, 3, "Medivac");
            AIAttackWaveAddUnits3(3, 3, 4, "VikingFighter");
            AIAttackWaveAddUnits3(0, 0, 1, "ScienceVessel");
            AIAttackWaveAddWaypoint(gv_pLAYER_04_DOMINION_CLEANSERS, gf_GetDropOffPoint(gv_cleanserTeamTargets[gv_cleanserWaveCount]), true);
            AIAttackWaveSend(gv_pLAYER_04_DOMINION_CLEANSERS, 60, false);
            gv_cleanserWaves[gv_cleanserWaveCount] = WaveLastCreated();
            gf_CleanserPingCreate(gv_cleanserWaveCount);
            TriggerExecute(gt_WarnIfVirophageUnderAttack, true, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CleanserAttackWaves_Init () {
    gt_CleanserAttackWaves = TriggerCreate("gt_CleanserAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cleanser Ping Update
//--------------------------------------------------------------------------------------------------
bool gt_CleanserPingUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    bool lv_allDead;

    // Automatic Variable Declarations
    int autoFA640AE4_ae;
    const int autoFA640AE4_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_allDead = true;
    autoFA640AE4_ae = gv_cleanserWaveCount;
    lv_index = 1;
    for ( ; ( (autoFA640AE4_ai >= 0 && lv_index <= autoFA640AE4_ae) || (autoFA640AE4_ai < 0 && lv_index >= autoFA640AE4_ae) ) ; lv_index += autoFA640AE4_ai ) {
        if ((UnitGroupCount(AIWaveGetUnits(gv_cleanserWaves[lv_index]), c_unitCountAlive) > 0)) {
            lv_allDead = false;
            if ((gv_cleanserTeamPings[lv_index] != c_invalidPingId)) {
                PingSetPosition(gv_cleanserTeamPings[lv_index], UnitGroupCenterOfGroup(AIWaveGetUnits(gv_cleanserWaves[lv_index])));
                PingSetTooltip(gv_cleanserTeamPings[lv_index], StringExternal("Param/Value/62FF8DEB"));
                PingSetScale(gv_cleanserTeamPings[lv_index], 0.6);
            }

        }
        else {
            PingDestroy(gv_cleanserTeamPings[lv_index]);
            gv_cleanserTeamPings[lv_index] = c_invalidPingId;
            UnitSetCustomValue(gv_cleanserTeamTargets[lv_index], 1, 0.0);
        }
    }
    if ((lv_allDead == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CleanserPingUpdate_Init () {
    gt_CleanserPingUpdate = TriggerCreate("gt_CleanserPingUpdate_Func");
    TriggerEnable(gt_CleanserPingUpdate, false);
    TriggerAddEventTimePeriodic(gt_CleanserPingUpdate, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Cleanser Team Enroute Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionCleanserTeamEnrouteQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto82186813_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((libNtve_gf_UnitGroupIsDead(AIWaveGetUnits(gv_cleanserWaves[gv_cleanserWaveCount])) == false)) {
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        if ((gv_gasOnCycle == 1)) {
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00048", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
            auto82186813_val = RandomInt(1, 4);
            if (auto82186813_val == 1) {
                libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00039", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto82186813_val == 2) {
                libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00003", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto82186813_val == 3) {
                libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00035", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto82186813_val == 4) {
                libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00036", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else {
            }
        }
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionCleanserTeamEnrouteQ_Init () {
    gt_TransmissionCleanserTeamEnrouteQ = TriggerCreate("gt_TransmissionCleanserTeamEnrouteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warn If Virophage Under Attack
//--------------------------------------------------------------------------------------------------
bool gt_WarnIfVirophageUnderAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    fixed auto84B08F90_at;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto84B08F90_at = 0;
    while (!((UnitGroupCount(UnitGroupFilterRegion(AIWaveGetUnits(gv_cleanserWaves[gv_cleanserWaveCount]), RegionCircle(UnitGetPosition(gv_cleanserTeamTargets[gv_cleanserWaveCount]), 40.0), 0), c_unitCountAlive) > 0)) && auto84B08F90_at <= 30.0) {
        Wait(1.0, c_timeAI);
        auto84B08F90_at = auto84B08F90_at + 1.0;
    }
    if ((UnitGroupCount(UnitGroupFilterRegion(AIWaveGetUnits(gv_cleanserWaves[gv_cleanserWaveCount]), RegionCircle(UnitGetPosition(gv_cleanserTeamTargets[gv_cleanserWaveCount]), 40.0), 0), c_unitCountAlive) > 0)) {
        TriggerExecute(gt_TransmissionKilltheCleanserTeamQ, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarnIfVirophageUnderAttack_Init () {
    gt_WarnIfVirophageUnderAttack = TriggerCreate("gt_WarnIfVirophageUnderAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Kill the Cleanser Team Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionKilltheCleanserTeamQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto3B1E4E94_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    auto3B1E4E94_val = RandomInt(1, 2);
    if (auto3B1E4E94_val == 1) {
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Hybrid01|Line00013", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto3B1E4E94_val == 2) {
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Hybrid01|Line00049", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    Wait(30.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionKilltheCleanserTeamQ_Init () {
    gt_TransmissionKilltheCleanserTeamQ = TriggerCreate("gt_TransmissionKilltheCleanserTeamQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AICampaignStart(gv_pLAYER_02_DOMINION_BULLIES);
    AICampaignStart(gv_pLAYER_03_DOMINION_AI);
    AICampaignStart(gv_pLAYER_04_DOMINION_CLEANSERS);
    AICampaignStart(gv_pLAYER_06_INFESTED);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_06_INFESTED, PlayerGroupSingle(gv_pLAYER_03_DOMINION_AI));
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION_BULLIES, RegionPlayableMap(), true);
    AIToggleBulliesInRegion(gv_pLAYER_03_DOMINION_AI, RegionPlayableMap(), true);
    AIToggleBulliesInRegion(gv_pLAYER_04_DOMINION_CLEANSERS, RegionPlayableMap(), true);
    AISetBullyAttackWavePercent(100, gv_pLAYER_04_DOMINION_CLEANSERS);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_AIAttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoE3694680_val;

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPlayer(gv_pLAYER_03_DOMINION_AI, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER_03_DOMINION_AI, PointFromId(175));
    autoE3694680_val = gv_gasOnCycle;
    if (autoE3694680_val == 2) {
        AIAttackWaveAddUnits3(9, 9, 12, "Marine");
        AIAttackWaveAddUnits3(2, 2, 4, "Marauder");
        AIAttackWaveAddUnits3(1, 1, 2, "Medic");
        AIAttackWaveSend(gv_pLAYER_03_DOMINION_AI, 160, false);
    }
    else if (autoE3694680_val == 3) {
    }
    else if (autoE3694680_val == 4) {
        AIAttackWaveAddUnits3(8, 8, 15, "Marine");
        AIAttackWaveAddUnits3(2, 2, 3, "Medic");
        AIAttackWaveAddUnits3(3, 3, 5, "VikingFighter");
        AIAttackWaveAddUnits3(0, 0, 1, "ScienceVessel");
        AIAttackWaveAddWaypoint(gv_pLAYER_03_DOMINION_AI, RegionGetCenter(RegionFromId(9)), false);
        AIAttackWaveSend(gv_pLAYER_03_DOMINION_AI, 150, false);
    }
    else if (autoE3694680_val == 5) {
        AIAttackWaveAddUnits3(3, 3, 4, "SiegeTank");
        AIAttackWaveAddUnits3(2, 2, 3, "Thor");
        AIAttackWaveAddUnits3(0, 0, 3, "HellionTank");
        AIAttackWaveAddWaypoint(gv_pLAYER_03_DOMINION_AI, RegionGetCenter(RegionFromId(9)), false);
        AIAttackWaveSend(gv_pLAYER_03_DOMINION_AI, 150, false);
    }
    else if (autoE3694680_val == 6) {
        AIAttackWaveAddUnits3(3, 3, 5, "Goliath");
        AIAttackWaveAddUnits3(4, 4, 6, "Hellion");
        AIAttackWaveAddUnits3(2, 2, 3, "Banshee");
        AIAttackWaveAddUnits3(0, 0, 1, "Battlecruiser");
        AIAttackWaveAddWaypoint(gv_pLAYER_03_DOMINION_AI, RegionGetCenter(RegionFromId(9)), false);
        AIAttackWaveSend(gv_pLAYER_03_DOMINION_AI, 160, false);
    }
    else if (autoE3694680_val == 7) {
        AIAttackWaveAddUnits3(9, 9, 12, "Marine");
        AIAttackWaveAddUnits3(4, 4, 5, "SiegeTank");
        AIAttackWaveAddUnits3(2, 2, 4, "VikingFighter");
        AIAttackWaveAddUnits3(0, 0, 1, "ScienceVessel");
        AIAttackWaveAddWaypoint(gv_pLAYER_03_DOMINION_AI, RegionGetCenter(RegionFromId(9)), false);
        AIAttackWaveSend(gv_pLAYER_03_DOMINION_AI, 160, false);
    }
    else if (autoE3694680_val == 8) {
        AIAttackWaveAddUnits3(3, 3, 4, "Battlecruiser");
        AIAttackWaveSend(gv_pLAYER_03_DOMINION_AI, 100, false);
        AIAttackWaveAddUnits3(4, 4, 5, "Thor");
        AIAttackWaveAddUnits3(3, 3, 4, "Goliath");
        AIAttackWaveAddWaypoint(gv_pLAYER_03_DOMINION_AI, RegionGetCenter(RegionFromId(9)), false);
        AIAttackWaveSend(gv_pLAYER_03_DOMINION_AI, 160, false);
    }
    else {
        if ((ModI(gv_gasOnCycle, 2) == 1)) {
            AIAttackWaveAddUnits3(3, 3, 4, "Banshee");
            AIAttackWaveAddUnits3(2, 2, 4, "VikingFighter");
            AIAttackWaveAddUnits3(2, 2, 3, "SiegeTank");
            AIAttackWaveAddUnits3(1, 1, 2, "Thor");
            AIAttackWaveAddWaypoint(gv_pLAYER_03_DOMINION_AI, RegionGetCenter(RegionFromId(9)), false);
            AIAttackWaveSend(gv_pLAYER_03_DOMINION_AI, 160, false);
        }
        else {
            AIAttackWaveAddUnits3(3, 3, 4, "Battlecruiser");
            AIAttackWaveAddUnits3(4, 4, 5, "Thor");
            AIAttackWaveAddWaypoint(gv_pLAYER_03_DOMINION_AI, RegionGetCenter(RegionFromId(9)), false);
            AIAttackWaveSend(gv_pLAYER_03_DOMINION_AI, 180, false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIAttackWaves_Init () {
    gt_AIAttackWaves = TriggerCreate("gt_AIAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Bridge Attack
//--------------------------------------------------------------------------------------------------
bool gt_AIBridgeAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(40.0, c_timeAI);
    TriggerExecute(gt_TransmissionBridgeAttackQ, true, true);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(28), 112.0, false);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(66)), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/758B1158"), null, UnitFromId(66));
    UnitIssueOrder(UnitFromId(66), Order(AbilityCommand("ExtendingBridgeNWWide8Out", 0)), c_orderQueueReplace);
    Wait(2.0, c_timeAI);
    AIAttackWaveAddUnits3(8, 8, 10, "Marine");
    AIAttackWaveAddUnits3(2, 2, 3, "SiegeTank");
    AIAttackWaveAddUnits3(2, 2, 3, "Medic");
    AIAttackWaveAddUnits3(0, 0, 1, "ScienceVessel");
    AIAttackWaveAddWaypoint(gv_pLAYER_03_DOMINION_AI, RegionGetCenter(RegionFromId(9)), false);
    AIAttackWaveSend(gv_pLAYER_03_DOMINION_AI, 110, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIBridgeAttack_Init () {
    gt_AIBridgeAttack = TriggerCreate("gt_AIBridgeAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Upgrades (Normal)
//--------------------------------------------------------------------------------------------------
bool gt_StartUpgradesNormal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoE277CF53_g;
    int autoE277CF53_var;
    int auto0714ECA5_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoE277CF53_g = gv_dominionPlayers;
    autoE277CF53_var = -1;
    while (true) {
        autoE277CF53_var = PlayerGroupNextPlayer(autoE277CF53_g, autoE277CF53_var);
        if (autoE277CF53_var < 0) { break; }
        auto0714ECA5_val = gv_gasOnCycle;
        if (auto0714ECA5_val == 3) {
            TechTreeUpgradeAddLevel(autoE277CF53_var, "TerranInfantryWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoE277CF53_var, "TerranVehicleWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoE277CF53_var, "TerranShipWeaponsLevel1", 1);
        }
        else if (auto0714ECA5_val == 4) {
            TechTreeUpgradeAddLevel(autoE277CF53_var, "TerranInfantryArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(autoE277CF53_var, "TerranVehicleArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(autoE277CF53_var, "TerranShipArmorsLevel1", 1);
        }
        else if (auto0714ECA5_val == 5) {
            TechTreeUpgradeAddLevel(autoE277CF53_var, "TerranInfantryWeaponsLevel2", 1);
            TechTreeUpgradeAddLevel(autoE277CF53_var, "TerranVehicleWeaponsLevel2", 1);
            TechTreeUpgradeAddLevel(autoE277CF53_var, "TerranShipWeaponsLevel2", 1);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartUpgradesNormal_Init () {
    gt_StartUpgradesNormal = TriggerCreate("gt_StartUpgradesNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Upgrades (Hard)
//--------------------------------------------------------------------------------------------------
bool gt_StartUpgradesHard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto24B2362F_g;
    int auto24B2362F_var;
    int auto16501C87_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto24B2362F_g = gv_dominionPlayers;
    auto24B2362F_var = -1;
    while (true) {
        auto24B2362F_var = PlayerGroupNextPlayer(auto24B2362F_g, auto24B2362F_var);
        if (auto24B2362F_var < 0) { break; }
        auto16501C87_val = gv_gasOnCycle;
        if (auto16501C87_val == 2) {
            TechTreeUpgradeAddLevel(auto24B2362F_var, "TerranInfantryWeaponsLevel2", 1);
            TechTreeUpgradeAddLevel(auto24B2362F_var, "TerranVehicleWeaponsLevel2", 1);
            TechTreeUpgradeAddLevel(auto24B2362F_var, "TerranShipWeaponsLevel2", 1);
        }
        else if (auto16501C87_val == 3) {
            TechTreeUpgradeAddLevel(auto24B2362F_var, "TerranInfantryArmorsLevel2", 1);
            TechTreeUpgradeAddLevel(auto24B2362F_var, "TerranVehicleArmorsLevel2", 1);
            TechTreeUpgradeAddLevel(auto24B2362F_var, "TerranShipArmorsLevel2", 1);
        }
        else if (auto16501C87_val == 4) {
            TechTreeUpgradeAddLevel(auto24B2362F_var, "TerranInfantryWeaponsLevel3", 1);
            TechTreeUpgradeAddLevel(auto24B2362F_var, "TerranVehicleWeaponsLevel3", 1);
            TechTreeUpgradeAddLevel(auto24B2362F_var, "TerranShipWeaponsLevel3", 1);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartUpgradesHard_Init () {
    gt_StartUpgradesHard = TriggerCreate("gt_StartUpgradesHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveMinerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveMinerals_Init () {
    gt_AIGiveMinerals = TriggerCreate("gt_AIGiveMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_02_DOMINION_BULLIES, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_03_DOMINION_AI, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_04_DOMINION_CLEANSERS, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveGas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveGas_Init () {
    gt_AIGiveGas = TriggerCreate("gt_AIGiveGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_02_DOMINION_BULLIES, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_03_DOMINION_AI, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_04_DOMINION_CLEANSERS, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ghost Nuke Base Entrance
//--------------------------------------------------------------------------------------------------
bool gt_GhostNukeBaseEntrance_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), c_unitCountAlive) >= 5))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(gv_ghost_BaseEntrance, OrderTargetingPoint(AbilityCommand("TacNukeStrike", 0), RegionGetCenter(RegionFromId(18))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GhostNukeBaseEntrance_Init () {
    gt_GhostNukeBaseEntrance = TriggerCreate("gt_GhostNukeBaseEntrance_Func");
    TriggerAddEventTimePeriodic(gt_GhostNukeBaseEntrance, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ghost Nuke Right Platform
//--------------------------------------------------------------------------------------------------
bool gt_GhostNukeRightPlatform_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), c_unitCountAlive) >= 5))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(gv_ghost_RightPlatform, OrderTargetingPoint(AbilityCommand("TacNukeStrike", 0), RegionGetCenter(RegionFromId(19))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GhostNukeRightPlatform_Init () {
    gt_GhostNukeRightPlatform = TriggerCreate("gt_GhostNukeRightPlatform_Func");
    TriggerAddEventTimePeriodic(gt_GhostNukeRightPlatform, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    libSwaC_gf_ShowHideProgressBar(false);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/021BDB59"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerEnable(gt_DefeatBaseDead, false);
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Sneak Attack - Infestors Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatSneakAttackInfestorsDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Infestor", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("InfestorBurrowed", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveInfestorSurvivalFail, true, false);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/679BDA74"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatSneakAttackInfestorsDead_Init () {
    gt_DefeatSneakAttackInfestorsDead = TriggerCreate("gt_DefeatSneakAttackInfestorsDead_Func");
    TriggerEnable(gt_DefeatSneakAttackInfestorsDead, false);
    TriggerAddEventTimePeriodic(gt_DefeatSneakAttackInfestorsDead, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    UnitSetState(gv_kerrigan, c_unitStateInvulnerable, true);
    Wait(2.0, c_timeReal);
    libSwaC_gf_ShowHideProgressBar(false);
    TriggerExecute(gt_ObjectiveOpentheLabComplete, true, true);
    libSwaC_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
    TriggerAddEventUnitDied(gt_VictorySequence, UnitRefFromUnit(UnitFromId(212)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((ObjectiveGetState(gv_objectiveOpenTheLab) == c_objectiveStateCompleted)) {
        libSwaC_gf_CampaignAwardAchievement("ZHybrid01_1", gv_pLAYER_01_USER);
    }

    TriggerExecute(gt_AchievementInfestGarrisonsNoVirophageLostNH, true, false);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1) && (gv_gasOnCycle < 3)) {
        TriggerExecute(gt_AchievementWinMissionBefore3rdGassingH, true, false);
    }

    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/1DB232C6"), IntToText(libNtve_gf_UnitGetPropertyKills(gv_kerrigan, c_unitPropCurrent)));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/228175DE"), IntToText(gv_achievementUnitsKilledWithDominatedTerran));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/8118EFA9"), IntToText(gv_achievementVirophageLostCount));
    TextExpressionSetToken("Param/Expression/F0FCA2E1", "A", IntToText(gf_UniqueGarrisonsInfested()));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/DB688757"), TextExpressionAssemble("Param/Expression/F0FCA2E1"));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/D37AB335"), IntToText(PlayerScoreValueGetAsInt(gv_pLAYER_06_INFESTED, "UnitsTotalCount")));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/F4BE622E"), IntToText(PlayerScoreValueGetAsInt(gv_pLAYER_01_USER, "UnitsKilledCount")));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/BBF5291D"), IntToText(gv_gasOnCycle));
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Defeat, false);
    TriggerEnable(gt_DefeatCheat, false);
    gv_gameOver = true;
    libSwaC_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Victory, false);
    TriggerEnable(gt_VictoryCheat, false);
    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Units Killed with Dominated Terran
//--------------------------------------------------------------------------------------------------
bool gt_AchievementUnitsKilledwithDominatedTerran_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!(((UnitHasBehavior(libNtve_gf_KillingUnit(), "NPSwarm") == true) || ((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_01_USER) && (UnitGetType(libNtve_gf_KillingUnit()) == "AutoTurret"))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_achievementUnitsKilledWithDominatedTerran += 1;
    if ((gv_achievementUnitsKilledWithDominatedTerran >= 60)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_StatisticUnitsKilledwithDominatedTerran, true);
        libSwaC_gf_CampaignAwardAchievement("ZHybrid01_2", gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementUnitsKilledwithDominatedTerran_Init () {
    gt_AchievementUnitsKilledwithDominatedTerran = TriggerCreate("gt_AchievementUnitsKilledwithDominatedTerran_Func");
    TriggerAddEventUnitDied(gt_AchievementUnitsKilledwithDominatedTerran, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Dominated Terran Added
//--------------------------------------------------------------------------------------------------
bool gt_AchievementDominatedTerranAdded_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_achievementDominatedTerranUnits, EventUnit());
    if ((UnitGroupCount(gv_achievementDominatedTerranUnits, c_unitCountAlive) >= gv_achievementMaxDomiantedTerran)) {
        gv_achievementMaxDomiantedTerran = UnitGroupCount(gv_achievementDominatedTerranUnits, c_unitCountAlive);
        AchievementTermQuantitySet(gv_pLAYER_01_USER, "Anniversary_ZHybrid01", gv_achievementMaxDomiantedTerran);
        TextExpressionSetToken("Param/Expression/C56EE2DC", "A", IntToText(gv_achievementMaxDomiantedTerran));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/C56EE2DC"), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementDominatedTerranAdded_Init () {
    gt_AchievementDominatedTerranAdded = TriggerCreate("gt_AchievementDominatedTerranAdded_Func");
    TriggerAddEventUnitBehaviorChange(gt_AchievementDominatedTerranAdded, null, "NPSwarm", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Dominated Terran Removed
//--------------------------------------------------------------------------------------------------
bool gt_AchievementDominatedTerranRemoved_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_achievementDominatedTerranUnits, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementDominatedTerranRemoved_Init () {
    gt_AchievementDominatedTerranRemoved = TriggerCreate("gt_AchievementDominatedTerranRemoved_Func");
    TriggerAddEventUnitBehaviorChange(gt_AchievementDominatedTerranRemoved, null, "NPSwarm", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Infest Garrisons/No Virophage Lost N/H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementInfestGarrisonsNoVirophageLostNH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libHots_gf_DifficultyValueInt2(0, 1, 1) == 1))) {
            return false;
        }

        if (!((gv_achievementVirophageLostCount == 0))) {
            return false;
        }

        if (!((gv_virophage_Count == gv_virophage_Max))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_CampaignAwardAchievement("ZHybrid01_3", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementInfestGarrisonsNoVirophageLostNH_Init () {
    gt_AchievementInfestGarrisonsNoVirophageLostNH = TriggerCreate("gt_AchievementInfestGarrisonsNoVirophageLostNH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Win Mission Before 3rd Gassing H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementWinMissionBefore3rdGassingH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("Mastery_Hybrid1", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementWinMissionBefore3rdGassingH_Init () {
    gt_AchievementWinMissionBefore3rdGassingH = TriggerCreate("gt_AchievementWinMissionBefore3rdGassingH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Statistic - Units Killed with Dominated Terran
//--------------------------------------------------------------------------------------------------
bool gt_StatisticUnitsKilledwithDominatedTerran_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!(((UnitHasBehavior(libNtve_gf_KillingUnit(), "NPSwarm") == true) || ((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_01_USER) && (UnitGetType(libNtve_gf_KillingUnit()) == "AutoTurret"))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_achievementUnitsKilledWithDominatedTerran += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatisticUnitsKilledwithDominatedTerran_Init () {
    gt_StatisticUnitsKilledwithDominatedTerran = TriggerCreate("gt_StatisticUnitsKilledwithDominatedTerran_Func");
    TriggerEnable(gt_StatisticUnitsKilledwithDominatedTerran, false);
    TriggerAddEventUnitDied(gt_StatisticUnitsKilledwithDominatedTerran, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Mission Help Q
//--------------------------------------------------------------------------------------------------
bool gt_TipMissionHelpQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_DisplayMissionTip(StringExternal("Param/Value/2A673C7C"));
    Wait(libSwaC_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipMissionHelpQ_Init () {
    gt_TipMissionHelpQ = TriggerCreate("gt_TipMissionHelpQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Dominion Outpost Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDominionOutpostCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZHybrid01Objective01");
    gv_objectiveDestroyDominionBase = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    libSwaC_gf_CreateObjectivePing(true, PointFromId(424), StringExternal("Param/Value/6C4EB229"));
    gv_objectivePINGDominionOutpost = PingLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDominionOutpostCreate_Init () {
    gt_ObjectiveDominionOutpostCreate = TriggerCreate("gt_ObjectiveDominionOutpostCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Dominion Outpost Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDominionOutpostComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION_BULLIES, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_04_DOMINION_CLEANSERS, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDominionOutpostCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZHybrid01Objective01", libSwaC_ge_MissionObjectiveState_Completed);
    PingDestroy(gv_objectivePINGDominionOutpost);
    if ((TriggerIsEnabled(gt_ObjectiveInfestGarrisonsComplete) == false)) {
        TriggerEnable(gt_DefeatSneakAttackInfestorsDead, false);
        TriggerExecute(gt_ObjectiveInfestorSurvivalComplete, true, false);
        gv_sneakAttackDone = true;
        libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/3A9A30CC"));
        Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
        TriggerExecute(gt_MidQ, true, true);
    }
    else {
        Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
        TriggerExecute(gt_GarrisonPings, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDominionOutpostComplete_Init () {
    gt_ObjectiveDominionOutpostComplete = TriggerCreate("gt_ObjectiveDominionOutpostComplete_Func");
    TriggerAddEventUnitDied(gt_ObjectiveDominionOutpostComplete, null);
    TriggerAddEventUnitBehaviorChange(gt_ObjectiveDominionOutpostComplete, null, "NPSwarm", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Dominion Outpost Fail
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDominionOutpostFail_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDominionOutpostCreate, true, false);
    ObjectiveSetState(gv_objectiveDestroyDominionBase, c_objectiveStateFailed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDominionOutpostFail_Init () {
    gt_ObjectiveDominionOutpostFail = TriggerCreate("gt_ObjectiveDominionOutpostFail_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Infest Garrisons Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveInfestGarrisonsCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto67AABA21_ae = 3;
    const int auto67AABA21_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZHybrid01Objective04");
    gv_objectiveInfestGarrisons = ObjectiveLastCreated();
    libSwaC_gf_SetMissionObjectiveProgress2("ZHybrid01Objective04", gv_infestedGarrisonCount, true, null, true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    lv_i = 1;
    for ( ; ( (auto67AABA21_ai >= 0 && lv_i <= auto67AABA21_ae) || (auto67AABA21_ai < 0 && lv_i >= auto67AABA21_ae) ) ; lv_i += auto67AABA21_ai ) {
        libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(gv_virophageRecord[lv_i].lv_beacon), StringExternal("Param/Value/8C4C205F"));
        gv_garrisonPings[lv_i] = PingLastCreated();
        PingSetVisible(PingLastCreated(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveInfestGarrisonsCreate_Init () {
    gt_ObjectiveInfestGarrisonsCreate = TriggerCreate("gt_ObjectiveInfestGarrisonsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Infest Garrisons Update (Phage Born)
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveInfestGarrisonsUpdatePhageBorn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveInfestGarrisonsCreate, true, false);
    gv_infestedGarrisonCount += 1;
    libSwaC_gf_SetMissionObjectiveProgress2("ZHybrid01Objective04", gv_infestedGarrisonCount, true, null, true);
    if ((gv_infestedGarrisonCount == 3)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_ObjectiveInfestGarrisonsUpdatePhageLost, false);
        TriggerExecute(gt_ObjectiveInfestGarrisonsComplete, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveInfestGarrisonsUpdatePhageBorn_Init () {
    gt_ObjectiveInfestGarrisonsUpdatePhageBorn = TriggerCreate("gt_ObjectiveInfestGarrisonsUpdatePhageBorn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Infest Garrisons Update (Phage Lost)
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveInfestGarrisonsUpdatePhageLost_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveInfestGarrisonsCreate, true, false);
    gv_infestedGarrisonCount -= 1;
    libSwaC_gf_SetMissionObjectiveProgress2("ZHybrid01Objective04", gv_infestedGarrisonCount, true, null, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveInfestGarrisonsUpdatePhageLost_Init () {
    gt_ObjectiveInfestGarrisonsUpdatePhageLost = TriggerCreate("gt_ObjectiveInfestGarrisonsUpdatePhageLost_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Infest Garrisons Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveInfestGarrisonsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveInfestGarrisonsCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZHybrid01Objective04", libSwaC_ge_MissionObjectiveState_Completed);
    if ((TriggerIsEnabled(gt_ObjectiveDominionOutpostComplete) == false)) {
        TriggerEnable(gt_DefeatSneakAttackInfestorsDead, false);
        TriggerExecute(gt_ObjectiveInfestorSurvivalComplete, true, false);
        gv_sneakAttackDone = true;
        libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/801693BA"));
        Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
        TriggerExecute(gt_MidQ, true, true);
    }
    else {
        Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
        TriggerExecute(gt_TransmissionThirdVirophageSpawnedQ, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveInfestGarrisonsComplete_Init () {
    gt_ObjectiveInfestGarrisonsComplete = TriggerCreate("gt_ObjectiveInfestGarrisonsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Infest Garrisons Fail
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveInfestGarrisonsFail_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveInfestGarrisonsCreate, true, false);
    ObjectiveSetState(gv_objectiveInfestGarrisons, c_objectiveStateFailed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveInfestGarrisonsFail_Init () {
    gt_ObjectiveInfestGarrisonsFail = TriggerCreate("gt_ObjectiveInfestGarrisonsFail_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Garrison Pings
//--------------------------------------------------------------------------------------------------
bool gt_GarrisonPings_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto61689F70_ae = 3;
    const int auto61689F70_ai = 1;
    const int autoF7315601_ae = 3;
    const int autoF7315601_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("UI_BriefingUnitSelect", 0), PlayerGroupAll(), 100.0, 0.0);
    lv_i = 1;
    for ( ; ( (auto61689F70_ai >= 0 && lv_i <= auto61689F70_ae) || (auto61689F70_ai < 0 && lv_i >= auto61689F70_ae) ) ; lv_i += auto61689F70_ai ) {
        if ((UnitIsAlive(gv_virophageRecord[lv_i].lv_virophage) == false)) {
            PingSetVisible(gv_garrisonPings[lv_i], true);
        }

    }
    while (!((TriggerIsEnabled(gt_ObjectiveInfestGarrisonsComplete) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerEnable(TriggerGetCurrent(), false);
    lv_i = 1;
    for ( ; ( (autoF7315601_ai >= 0 && lv_i <= autoF7315601_ae) || (autoF7315601_ai < 0 && lv_i >= autoF7315601_ae) ) ; lv_i += autoF7315601_ai ) {
        PingDestroy(gv_garrisonPings[lv_i]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GarrisonPings_Init () {
    gt_GarrisonPings = TriggerCreate("gt_GarrisonPings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Infestor Survival Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveInfestorSurvivalCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZHybrid01Objective05");
    gv_objectiveInfestorSurvival = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveInfestorSurvivalCreate_Init () {
    gt_ObjectiveInfestorSurvivalCreate = TriggerCreate("gt_ObjectiveInfestorSurvivalCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Infestor Survival Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveInfestorSurvivalComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveInfestorSurvivalCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZHybrid01Objective05", libSwaC_ge_MissionObjectiveState_Completed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveInfestorSurvivalComplete_Init () {
    gt_ObjectiveInfestorSurvivalComplete = TriggerCreate("gt_ObjectiveInfestorSurvivalComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Infestor Survival Fail
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveInfestorSurvivalFail_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveInfestorSurvivalCreate, true, false);
    ObjectiveSetState(gv_objectiveInfestorSurvival, c_objectiveStateFailed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveInfestorSurvivalFail_Init () {
    gt_ObjectiveInfestorSurvivalFail = TriggerCreate("gt_ObjectiveInfestorSurvivalFail_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Open the Lab Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveOpentheLabCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZHybrid01Objective02");
    gv_objectiveOpenTheLab = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveOpentheLabCreate_Init () {
    gt_ObjectiveOpentheLabCreate = TriggerCreate("gt_ObjectiveOpentheLabCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Open the Lab Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveOpentheLabComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveOpentheLabCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZHybrid01Objective02", libSwaC_ge_MissionObjectiveState_Completed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveOpentheLabComplete_Init () {
    gt_ObjectiveOpentheLabComplete = TriggerCreate("gt_ObjectiveOpentheLabComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Spread Creep Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSpreadCreepCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZHybrid01Objective03");
    gv_objectiveSpreadCreep = ObjectiveLastCreated();
    libSwaC_gf_SetMissionObjectiveProgress2("ZHybrid01Objective03", gv_objective_CreepTumorsPlaced, true, null, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSpreadCreepCreate_Init () {
    gt_ObjectiveSpreadCreepCreate = TriggerCreate("gt_ObjectiveSpreadCreepCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Spread Creep Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSpreadCreepComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveSpreadCreepCreate, true, false);
    libSwaC_gf_ZS_SetMissionObjectiveState("ZHybrid01Objective03", libSwaC_ge_MissionObjectiveState_Completed);
    libSwaC_gf_SetMissionObjectiveProgress2("ZHybrid01Objective03", 3, true, null, true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSpreadCreepComplete_Init () {
    gt_ObjectiveSpreadCreepComplete = TriggerCreate("gt_ObjectiveSpreadCreepComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto865B499B_g;
    int auto865B499B_u;
    unit auto865B499B_var;
    unitgroup autoF80CFDEF_g;
    int autoF80CFDEF_u;
    unit autoF80CFDEF_var;
    unitgroup auto424FEC31_g;
    int auto424FEC31_u;
    unit auto424FEC31_var;
    unitgroup autoE782C067_g;
    int autoE782C067_u;
    unit autoE782C067_var;
    unitgroup auto2D8F1399_g;
    int auto2D8F1399_u;
    unit auto2D8F1399_var;
    unitgroup auto1C164BA2_g;
    int auto1C164BA2_u;
    unit auto1C164BA2_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    UnitPauseAll(true);
    auto865B499B_g = UnitGroup("MissileTurret", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto865B499B_u = UnitGroupCount(auto865B499B_g, c_unitCountAll);
    for (;; auto865B499B_u -= 1) {
        auto865B499B_var = UnitGroupUnitFromEnd(auto865B499B_g, auto865B499B_u);
        if (auto865B499B_var == null) { break; }
        libNtve_gf_PauseUnit(auto865B499B_var, false);
    }
    autoF80CFDEF_g = UnitGroup("AutoTurret", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF80CFDEF_u = UnitGroupCount(autoF80CFDEF_g, c_unitCountAll);
    for (;; autoF80CFDEF_u -= 1) {
        autoF80CFDEF_var = UnitGroupUnitFromEnd(autoF80CFDEF_g, autoF80CFDEF_u);
        if (autoF80CFDEF_var == null) { break; }
        libNtve_gf_PauseUnit(autoF80CFDEF_var, false);
    }
    auto424FEC31_g = UnitGroup("PerditionTurret", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto424FEC31_u = UnitGroupCount(auto424FEC31_g, c_unitCountAll);
    for (;; auto424FEC31_u -= 1) {
        auto424FEC31_var = UnitGroupUnitFromEnd(auto424FEC31_g, auto424FEC31_u);
        if (auto424FEC31_var == null) { break; }
        libNtve_gf_PauseUnit(auto424FEC31_var, false);
    }
    autoE782C067_g = UnitGroup("PerditionTurretUnderground", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE782C067_u = UnitGroupCount(autoE782C067_g, c_unitCountAll);
    for (;; autoE782C067_u -= 1) {
        autoE782C067_var = UnitGroupUnitFromEnd(autoE782C067_g, autoE782C067_u);
        if (autoE782C067_var == null) { break; }
        libNtve_gf_PauseUnit(autoE782C067_var, false);
    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    auto2D8F1399_g = gv_fungalGroup;
    auto2D8F1399_u = UnitGroupCount(auto2D8F1399_g, c_unitCountAll);
    for (;; auto2D8F1399_u -= 1) {
        auto2D8F1399_var = UnitGroupUnitFromEnd(auto2D8F1399_g, auto2D8F1399_u);
        if (auto2D8F1399_var == null) { break; }
        UnitGroupAdd(gv_cinematicHiddenUnits, auto2D8F1399_var);
    }
    auto1C164BA2_g = gv_cinematicHiddenUnits;
    auto1C164BA2_u = UnitGroupCount(auto1C164BA2_g, c_unitCountAll);
    for (;; auto1C164BA2_u -= 1) {
        auto1C164BA2_var = UnitGroupUnitFromEnd(auto1C164BA2_g, auto1C164BA2_u);
        if (auto1C164BA2_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto1C164BA2_var, false);
    }
    libNtve_gf_ShowHideUnit(gv_planetaryFort, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_movePoint;

    // Automatic Variable Declarations
    unitgroup autoDC5DCC1C_g;
    int autoDC5DCC1C_u;
    unit autoDC5DCC1C_var;
    unitgroup auto43E34B7B_g;
    int auto43E34B7B_u;
    unit auto43E34B7B_var;
    unitgroup auto14C6DFCC_g;
    int auto14C6DFCC_u;
    unit auto14C6DFCC_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1237), 0.0, -1, 10.0, true);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(673), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(674), 8.0, -1, 10.0, true);
    autoDC5DCC1C_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoDC5DCC1C_u = UnitGroupCount(autoDC5DCC1C_g, c_unitCountAll);
    for (;; autoDC5DCC1C_u -= 1) {
        autoDC5DCC1C_var = UnitGroupUnitFromEnd(autoDC5DCC1C_g, autoDC5DCC1C_u);
        if (autoDC5DCC1C_var == null) { break; }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(autoDC5DCC1C_var), c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(122));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(gv_introDropGroup, UnitLastCreated());
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "Banshee", 0, gv_pLAYER_02_DOMINION_BULLIES, PointFromId(710));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(713)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(714)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "Banshee", 0, gv_pLAYER_02_DOMINION_BULLIES, PointFromId(711));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(715)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(714)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "Banshee", 0, gv_pLAYER_02_DOMINION_BULLIES, PointFromId(712));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(716)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(714)), c_orderQueueAddToEnd);
    auto43E34B7B_g = gv_fungalGroup;
    auto43E34B7B_u = UnitGroupCount(auto43E34B7B_g, c_unitCountAll);
    for (;; auto43E34B7B_u -= 1) {
        auto43E34B7B_var = UnitGroupUnitFromEnd(auto43E34B7B_g, auto43E34B7B_u);
        if (auto43E34B7B_var == null) { break; }
        UnitCreate(1, UnitGetType(auto43E34B7B_var), 0, gv_pLAYER_02_DOMINION_BULLIES, UnitGetPosition(auto43E34B7B_var), UnitGetFacing(auto43E34B7B_var));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(gv_introFungalGroup, UnitLastCreated());
    }
    lv_movePoint = UnitGroupCenterOfGroup(gv_introFungalGroup);
    UnitGroupIssueOrder(gv_introFungalGroup, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(704)), c_orderQueueReplace);
    UnitGroupIssueOrder(gv_introFungalGroup, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(705)), c_orderQueueAddToEnd);
    auto14C6DFCC_g = UnitGroup("TechReactor", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto14C6DFCC_u = UnitGroupCount(auto14C6DFCC_g, c_unitCountAll);
    for (;; auto14C6DFCC_u -= 1) {
        auto14C6DFCC_var = UnitGroupUnitFromEnd(auto14C6DFCC_g, auto14C6DFCC_u);
        if (auto14C6DFCC_var == null) { break; }
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(auto14C6DFCC_var), "Attached");
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(auto14C6DFCC_var), c_animNameDefault, "Stand Attached", 0, 0.0);
    }
    SoundPlay(SoundLink("Ambience_Hybrid01_intro", -1), PlayerGroupAll(), 0.0, 0.0);
    gv_introAmbience = SoundLastPlayed();
    SoundPlay(SoundLink("Hybrid01_CS_Open", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introBackground = SoundLastPlayed();
    ActorSend(ActorFromDoodad(DoodadFromId(448)), "Signal SoundDistant");
    ActorSend(ActorFromDoodad(DoodadFromId(694)), "Signal SoundDistant");
    ActorSend(ActorFromDoodad(DoodadFromId(695)), "Signal SoundDistant");
    TriggerExecute(gt_IntroMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    Wait(7.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(675), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Hybrid01|Line00011", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Hybrid01|Line00012", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Hybrid01|Line00013", true), c_soundIndexAny)) - 1), -1, 10.0, true);
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectLargeZergRed", PointFromId(1021));
    gv_introDoorPing = libNtve_gf_ActorLastCreated();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 45.0, 1.5);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Hybrid01|Line00011", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Hybrid01|Line00012", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_KillModel(gv_introDoorPing);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 70.0, 5.0);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Hybrid01|Line00013", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    ActorSend(ActorFromDoodad(DoodadFromId(448)), "Signal SoundNormal");
    ActorSend(ActorFromDoodad(DoodadFromId(694)), "Signal SoundNormal");
    ActorSend(ActorFromDoodad(DoodadFromId(695)), "Signal SoundNormal");
    SoundPlay(SoundLink("Hybrid01_CS_Open_MarinesRunBy", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introMarineRunBy = SoundLastPlayed();
    UnitGroupIssueOrder(gv_introFungalGroup, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(705)), c_orderQueueReplace);
    UnitGroupIssueOrder(gv_introFungalGroup, OrderTargetingPoint(AbilityCommand("move", 0), lv_movePoint), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(gv_introFungalGroup, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(717)), c_orderQueueAddToEnd);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(707), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(708), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Hybrid01|Line00014", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Hybrid01|Line00015", true), c_soundIndexAny)) - 1), -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Hybrid01|Line00014", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_LeavePortraitVisibleAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitCreate(1, UnitGetType(UnitFromId(54)), c_unitCreateIgnorePlacement, 0, UnitGetPosition(UnitFromId(54)), UnitGetFacing(UnitFromId(54)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitCreate(1, UnitGetType(UnitFromId(54)), c_unitCreateIgnorePlacement, 0, UnitGetPosition(UnitFromId(54)), UnitGetFacing(UnitFromId(54)));
    UnitKill(UnitLastCreated());
    SoundPlay(SoundLink("UI_ZergWarning", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_introWarning = SoundLastPlayed();
    Wait(2.0, c_timeReal);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Hybrid01|Line00015", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Zerg, RegionGetCenter(RegionFromId(1)), gv_introDropGroup, false, gv_pLAYER_01_USER);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(236), 3.0, -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Hybrid01|Line00016", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    while (!((UnitGroupCount(UnitGroupFilter(null, c_playerAny, gv_introDropGroup, UnitFilter(0, (1 << (c_targetFilterHidden - 32)), 0, 0), 0), c_unitCountAlive) == 0))) {
        Wait(0.0625, c_timeReal);
    }
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        TriggerExecute(gt_IntroCleanupNotSkipped, true, true);
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
        TriggerExecute(gt_IntroCleanupSkipped, true, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup Not Skipped
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanupNotSkipped_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto469B9F68_g;
    int auto469B9F68_u;
    unit auto469B9F68_var;
    unitgroup auto8A9D41BA_g;
    int auto8A9D41BA_u;
    unit auto8A9D41BA_var;
    unitgroup autoD0F927A2_g;
    int autoD0F927A2_u;
    unit autoD0F927A2_var;
    unitgroup auto5EF63C32_g;
    int auto5EF63C32_u;
    unit auto5EF63C32_var;
    unitgroup auto6566E56E_g;
    int auto6566E56E_u;
    unit auto6566E56E_var;
    unitgroup auto290BF49E_g;
    int auto290BF49E_u;
    unit auto290BF49E_var;
    unitgroup autoCE675729_g;
    int autoCE675729_u;
    unit autoCE675729_var;
    unitgroup autoB8AA22F9_g;
    int autoB8AA22F9_u;
    unit autoB8AA22F9_var;
    unitgroup autoEF864B2A_g;
    int autoEF864B2A_u;
    unit autoEF864B2A_var;
    unitgroup auto11293D2F_g;
    int auto11293D2F_u;
    unit auto11293D2F_var;
    unitgroup autoCEB9C504_g;
    int autoCEB9C504_u;
    unit autoCEB9C504_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto469B9F68_g = gv_startingUnits;
    auto469B9F68_u = UnitGroupCount(auto469B9F68_g, c_unitCountAll);
    for (;; auto469B9F68_u -= 1) {
        auto469B9F68_var = UnitGroupUnitFromEnd(auto469B9F68_g, auto469B9F68_u);
        if (auto469B9F68_var == null) { break; }
        UnitRemove(auto469B9F68_var);
    }
    auto8A9D41BA_g = gv_introDropGroup;
    auto8A9D41BA_u = UnitGroupCount(auto8A9D41BA_g, c_unitCountAll);
    for (;; auto8A9D41BA_u -= 1) {
        auto8A9D41BA_var = UnitGroupUnitFromEnd(auto8A9D41BA_g, auto8A9D41BA_u);
        if (auto8A9D41BA_var == null) { break; }
        UnitGroupRemove(gv_cinematicTempUnits, auto8A9D41BA_var);
        UnitGroupAdd(gv_startingUnits, auto8A9D41BA_var);
        UnitSetPropertyFixed(auto8A9D41BA_var, c_unitPropEnergyPercent, 100.0);
    }
    autoD0F927A2_g = gv_fungalGroup;
    autoD0F927A2_u = UnitGroupCount(autoD0F927A2_g, c_unitCountAll);
    for (;; autoD0F927A2_u -= 1) {
        autoD0F927A2_var = UnitGroupUnitFromEnd(autoD0F927A2_g, autoD0F927A2_u);
        if (autoD0F927A2_var == null) { break; }
        UnitRemove(autoD0F927A2_var);
    }
    auto5EF63C32_g = gv_introFungalGroup;
    auto5EF63C32_u = UnitGroupCount(auto5EF63C32_g, c_unitCountAll);
    for (;; auto5EF63C32_u -= 1) {
        auto5EF63C32_var = UnitGroupUnitFromEnd(auto5EF63C32_g, auto5EF63C32_u);
        if (auto5EF63C32_var == null) { break; }
        UnitGroupRemove(gv_cinematicTempUnits, auto5EF63C32_var);
        UnitGroupAdd(gv_fungalGroup, auto5EF63C32_var);
    }
    auto6566E56E_g = gv_cinematicTempUnits;
    auto6566E56E_u = UnitGroupCount(auto6566E56E_g, c_unitCountAll);
    for (;; auto6566E56E_u -= 1) {
        auto6566E56E_var = UnitGroupUnitFromEnd(auto6566E56E_g, auto6566E56E_u);
        if (auto6566E56E_var == null) { break; }
        UnitRemove(auto6566E56E_var);
    }
    UnitPauseAll(false);
    auto290BF49E_g = gv_cinematicHiddenUnits;
    auto290BF49E_u = UnitGroupCount(auto290BF49E_g, c_unitCountAll);
    for (;; auto290BF49E_u -= 1) {
        auto290BF49E_var = UnitGroupUnitFromEnd(auto290BF49E_g, auto290BF49E_u);
        if (auto290BF49E_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto290BF49E_var, true);
    }
    autoCE675729_g = gv_playersBaseGroup;
    autoCE675729_u = UnitGroupCount(autoCE675729_g, c_unitCountAll);
    for (;; autoCE675729_u -= 1) {
        autoCE675729_var = UnitGroupUnitFromEnd(autoCE675729_g, autoCE675729_u);
        if (autoCE675729_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoCE675729_var, false);
        libNtve_gf_PauseUnit(autoCE675729_var, true);
    }
    libNtve_gf_ShowHideUnit(gv_planetaryFort, true);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libSwaC_gf_EnableDisableZerglingRespawn(true);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    TriggerEnable(gt_DefeatSneakAttackInfestorsDead, true);
    CreepSetSpeed(c_creepSpeedDecay, 100.0);
    UnitGroupSelect(gv_startingUnits, gv_pLAYER_01_USER, true);
    RegionPlayableMapSet(RegionFromId(7));
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(38), true, false);
    AICampaignStart(gv_pLAYER_06_INFESTED);
    gv_gasStatus = ge_PRESET_IsGasOn_GasOff;
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly_Zerg", false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    GameTimeOfDayPause(true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Barracks", 0, gv_pLAYER_02_DOMINION_BULLIES, PointFromId(47));
    UnitGroupAdd(gv_sneakAttackTerranBase, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Factory", 0, gv_pLAYER_02_DOMINION_BULLIES, PointFromId(52));
    UnitGroupAdd(gv_sneakAttackTerranBase, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "FactoryTechLab", 0, gv_pLAYER_02_DOMINION_BULLIES, PointFromId(507));
    UnitGroupAdd(gv_sneakAttackTerranBase, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Bunker", 0, gv_pLAYER_02_DOMINION_BULLIES, PointFromId(357));
    UnitGroupAdd(gv_sneakAttackTerranBase, UnitLastCreated());
    UnitCargoCreate(UnitLastCreated(), "Marine", 2);
    UnitCargoCreate(UnitLastCreated(), "Firebat", 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Bunker", 0, gv_pLAYER_02_DOMINION_BULLIES, PointFromId(441));
    UnitGroupAdd(gv_sneakAttackTerranBase, UnitLastCreated());
    UnitCargoCreate(UnitLastCreated(), "Marine", 2);
    UnitCargoCreate(UnitLastCreated(), "Firebat", 1);
    UnitIssueOrder(UnitFromId(241), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    autoB8AA22F9_g = UnitGroup(null, gv_pLAYER_02_DOMINION_BULLIES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB8AA22F9_u = UnitGroupCount(autoB8AA22F9_g, c_unitCountAll);
    for (;; autoB8AA22F9_u -= 1) {
        autoB8AA22F9_var = UnitGroupUnitFromEnd(autoB8AA22F9_g, autoB8AA22F9_u);
        if (autoB8AA22F9_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(autoB8AA22F9_var, RegionFromId(22)) == false)) {
            libNtve_gf_ShowHideUnit(autoB8AA22F9_var, false);
            libNtve_gf_PauseUnit(autoB8AA22F9_var, true);
        }

    }
    autoEF864B2A_g = UnitGroup(null, gv_pLAYER_03_DOMINION_AI, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEF864B2A_u = UnitGroupCount(autoEF864B2A_g, c_unitCountAll);
    for (;; autoEF864B2A_u -= 1) {
        autoEF864B2A_var = UnitGroupUnitFromEnd(autoEF864B2A_g, autoEF864B2A_u);
        if (autoEF864B2A_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(autoEF864B2A_var, RegionFromId(22)) == false)) {
            libNtve_gf_ShowHideUnit(autoEF864B2A_var, false);
            libNtve_gf_PauseUnit(autoEF864B2A_var, true);
        }

    }
    libNtve_gf_ShowHideUnit(UnitFromId(270), false);
    auto11293D2F_g = UnitGroup("Beacon_Zerg", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto11293D2F_u = UnitGroupCount(auto11293D2F_g, c_unitCountAll);
    for (;; auto11293D2F_u -= 1) {
        auto11293D2F_var = UnitGroupUnitFromEnd(auto11293D2F_g, auto11293D2F_u);
        if (auto11293D2F_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(auto11293D2F_var, RegionFromId(22)) == false)) {
            libNtve_gf_ShowHideUnit(auto11293D2F_var, false);
        }

    }
    autoCEB9C504_g = gv_fungalGroup;
    autoCEB9C504_u = UnitGroupCount(autoCEB9C504_g, c_unitCountAll);
    for (;; autoCEB9C504_u -= 1) {
        autoCEB9C504_var = UnitGroupUnitFromEnd(autoCEB9C504_g, autoCEB9C504_u);
        if (autoCEB9C504_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(autoCEB9C504_var, true, gv_pLAYER_01_USER);
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
    libNtve_gf_GlobalCinematicSetting(false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(709), 1.5, -1, 10.0, true);
    Wait(1.5, c_timeGame);
    gv_inCinematic = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanupNotSkipped_Init () {
    gt_IntroCleanupNotSkipped = TriggerCreate("gt_IntroCleanupNotSkipped_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup Skipped
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanupSkipped_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup autoE09B0DCF_g;
    int autoE09B0DCF_u;
    unit autoE09B0DCF_var;
    unitgroup auto006C63CD_g;
    int auto006C63CD_u;
    unit auto006C63CD_var;
    unitgroup auto768AA6B2_g;
    int auto768AA6B2_u;
    unit auto768AA6B2_var;
    unitgroup auto273F03BC_g;
    int auto273F03BC_u;
    unit auto273F03BC_var;
    unitgroup auto8C68906E_g;
    int auto8C68906E_u;
    unit auto8C68906E_var;
    unitgroup auto92B299DE_g;
    int auto92B299DE_u;
    unit auto92B299DE_var;
    unitgroup auto59588F89_g;
    int auto59588F89_u;
    unit auto59588F89_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_introMusicCompleted == false)) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    }

    autoE09B0DCF_g = gv_cinematicTempUnits;
    autoE09B0DCF_u = UnitGroupCount(autoE09B0DCF_g, c_unitCountAll);
    for (;; autoE09B0DCF_u -= 1) {
        autoE09B0DCF_var = UnitGroupUnitFromEnd(autoE09B0DCF_g, autoE09B0DCF_u);
        if (autoE09B0DCF_var == null) { break; }
        UnitRemove(autoE09B0DCF_var);
    }
    UnitPauseAll(false);
    auto006C63CD_g = gv_cinematicHiddenUnits;
    auto006C63CD_u = UnitGroupCount(auto006C63CD_g, c_unitCountAll);
    for (;; auto006C63CD_u -= 1) {
        auto006C63CD_var = UnitGroupUnitFromEnd(auto006C63CD_g, auto006C63CD_u);
        if (auto006C63CD_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto006C63CD_var, true);
    }
    auto768AA6B2_g = gv_playersBaseGroup;
    auto768AA6B2_u = UnitGroupCount(auto768AA6B2_g, c_unitCountAll);
    for (;; auto768AA6B2_u -= 1) {
        auto768AA6B2_var = UnitGroupUnitFromEnd(auto768AA6B2_g, auto768AA6B2_u);
        if (auto768AA6B2_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto768AA6B2_var, false);
        libNtve_gf_PauseUnit(auto768AA6B2_var, true);
    }
    libNtve_gf_ShowHideUnit(gv_planetaryFort, true);
    libNtve_gf_KillModel(gv_introDoorPing);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    TriggerEnable(gt_DefeatSneakAttackInfestorsDead, true);
    CreepSetSpeed(c_creepSpeedDecay, 100.0);
    UnitGroupSelect(gv_startingUnits, gv_pLAYER_01_USER, true);
    RegionPlayableMapSet(RegionFromId(7));
    ActorSend(ActorFromDoodad(DoodadFromId(448)), "Signal SoundNormal");
    ActorSend(ActorFromDoodad(DoodadFromId(694)), "Signal SoundNormal");
    ActorSend(ActorFromDoodad(DoodadFromId(695)), "Signal SoundNormal");
    SoundStop(gv_introAmbience, true);
    SoundStop(gv_introBackground, true);
    SoundStop(gv_introWarning, true);
    SoundStop(gv_introMarineRunBy, true);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(38), true, false);
    AICampaignStart(gv_pLAYER_06_INFESTED);
    gv_gasStatus = ge_PRESET_IsGasOn_GasOff;
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly_Zerg", false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    GameTimeOfDayPause(true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Barracks", 0, gv_pLAYER_02_DOMINION_BULLIES, PointFromId(47));
    UnitGroupAdd(gv_sneakAttackTerranBase, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Factory", 0, gv_pLAYER_02_DOMINION_BULLIES, PointFromId(52));
    UnitGroupAdd(gv_sneakAttackTerranBase, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "FactoryTechLab", 0, gv_pLAYER_02_DOMINION_BULLIES, PointFromId(507));
    UnitGroupAdd(gv_sneakAttackTerranBase, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Bunker", 0, gv_pLAYER_02_DOMINION_BULLIES, PointFromId(357));
    UnitGroupAdd(gv_sneakAttackTerranBase, UnitLastCreated());
    UnitCargoCreate(UnitLastCreated(), "Marine", 2);
    UnitCargoCreate(UnitLastCreated(), "Firebat", 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Bunker", 0, gv_pLAYER_02_DOMINION_BULLIES, PointFromId(441));
    UnitGroupAdd(gv_sneakAttackTerranBase, UnitLastCreated());
    UnitCargoCreate(UnitLastCreated(), "Marine", 2);
    UnitCargoCreate(UnitLastCreated(), "Firebat", 1);
    UnitIssueOrder(UnitFromId(241), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    auto273F03BC_g = UnitGroup(null, gv_pLAYER_02_DOMINION_BULLIES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto273F03BC_u = UnitGroupCount(auto273F03BC_g, c_unitCountAll);
    for (;; auto273F03BC_u -= 1) {
        auto273F03BC_var = UnitGroupUnitFromEnd(auto273F03BC_g, auto273F03BC_u);
        if (auto273F03BC_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(auto273F03BC_var, RegionFromId(22)) == false)) {
            libNtve_gf_ShowHideUnit(auto273F03BC_var, false);
            libNtve_gf_PauseUnit(auto273F03BC_var, true);
        }

    }
    auto8C68906E_g = UnitGroup(null, gv_pLAYER_03_DOMINION_AI, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8C68906E_u = UnitGroupCount(auto8C68906E_g, c_unitCountAll);
    for (;; auto8C68906E_u -= 1) {
        auto8C68906E_var = UnitGroupUnitFromEnd(auto8C68906E_g, auto8C68906E_u);
        if (auto8C68906E_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(auto8C68906E_var, RegionFromId(22)) == false)) {
            libNtve_gf_ShowHideUnit(auto8C68906E_var, false);
            libNtve_gf_PauseUnit(auto8C68906E_var, true);
        }

    }
    libNtve_gf_ShowHideUnit(UnitFromId(270), false);
    auto92B299DE_g = UnitGroup("Beacon_Zerg", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto92B299DE_u = UnitGroupCount(auto92B299DE_g, c_unitCountAll);
    for (;; auto92B299DE_u -= 1) {
        auto92B299DE_var = UnitGroupUnitFromEnd(auto92B299DE_g, auto92B299DE_u);
        if (auto92B299DE_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(auto92B299DE_var, RegionFromId(22)) == false)) {
            libNtve_gf_ShowHideUnit(auto92B299DE_var, false);
        }

    }
    auto59588F89_g = gv_fungalGroup;
    auto59588F89_u = UnitGroupCount(auto59588F89_g, c_unitCountAll);
    for (;; auto59588F89_u -= 1) {
        auto59588F89_var = UnitGroupUnitFromEnd(auto59588F89_g, auto59588F89_u);
        if (auto59588F89_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(auto59588F89_var, true, gv_pLAYER_01_USER);
    }
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(709)), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanupSkipped_Init () {
    gt_IntroCleanupSkipped = TriggerCreate("gt_IntroCleanupSkipped_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Music
//--------------------------------------------------------------------------------------------------
bool gt_IntroMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZHybrid01MissionIntro";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_introMusicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroMusic_Init () {
    gt_IntroMusic = TriggerCreate("gt_IntroMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lOOP;

    // Automatic Variable Declarations
    unitgroup auto615FE1BF_g;
    int auto615FE1BF_u;
    unit auto615FE1BF_var;
    unitgroup auto1BB13183_g;
    int auto1BB13183_u;
    unit auto1BB13183_var;
    unitgroup autoA7B93EA4_g;
    int autoA7B93EA4_u;
    unit autoA7B93EA4_var;
    unitgroup autoC52F4D14_g;
    int autoC52F4D14_u;
    unit autoC52F4D14_var;
    unitgroup auto8FC380A1_g;
    int auto8FC380A1_u;
    unit auto8FC380A1_var;
    unitgroup auto9B74362C_g;
    int auto9B74362C_u;
    unit auto9B74362C_var;
    int auto4BAB2104_val;
    unitgroup auto69B480CC_g;
    int auto69B480CC_u;
    unit auto69B480CC_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    TimerPause(gv_mainTimer, true);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    TriggerEnable(gt_TeachFungalGrowth, false);
    TriggerEnable(gt_TeachParasiticDomination, false);
    ObjectiveShow(gv_objectiveInfestGarrisons, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveDestroyDominionBase, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveInfestorSurvival, PlayerGroupAll(), false);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION_BULLIES, RegionFromId(13), false);
    auto615FE1BF_g = UnitGroup(null, gv_pLAYER_02_DOMINION_BULLIES, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto615FE1BF_u = UnitGroupCount(auto615FE1BF_g, c_unitCountAll);
    for (;; auto615FE1BF_u -= 1) {
        auto615FE1BF_var = UnitGroupUnitFromEnd(auto615FE1BF_g, auto615FE1BF_u);
        if (auto615FE1BF_var == null) { break; }
        UnitRemove(auto615FE1BF_var);
    }
    auto1BB13183_g = UnitGroup(null, gv_pLAYER_04_DOMINION_CLEANSERS, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1BB13183_u = UnitGroupCount(auto1BB13183_g, c_unitCountAll);
    for (;; auto1BB13183_u -= 1) {
        auto1BB13183_var = UnitGroupUnitFromEnd(auto1BB13183_g, auto1BB13183_u);
        if (auto1BB13183_var == null) { break; }
        UnitRemove(auto1BB13183_var);
    }
    autoA7B93EA4_g = UnitGroup("InfestedCivilian", gv_pLAYER_06_INFESTED, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA7B93EA4_u = UnitGroupCount(autoA7B93EA4_g, c_unitCountAll);
    for (;; autoA7B93EA4_u -= 1) {
        autoA7B93EA4_var = UnitGroupUnitFromEnd(autoA7B93EA4_g, autoA7B93EA4_u);
        if (autoA7B93EA4_var == null) { break; }
        UnitRemove(autoA7B93EA4_var);
    }
    autoC52F4D14_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(29), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC52F4D14_u = UnitGroupCount(autoC52F4D14_g, c_unitCountAll);
    for (;; autoC52F4D14_u -= 1) {
        autoC52F4D14_var = UnitGroupUnitFromEnd(autoC52F4D14_g, autoC52F4D14_u);
        if (autoC52F4D14_var == null) { break; }
        UnitRemove(autoC52F4D14_var);
    }
    auto8FC380A1_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8FC380A1_u = UnitGroupCount(auto8FC380A1_g, c_unitCountAll);
    for (;; auto8FC380A1_u -= 1) {
        auto8FC380A1_var = UnitGroupUnitFromEnd(auto8FC380A1_g, auto8FC380A1_u);
        if (auto8FC380A1_var == null) { break; }
        if ((UnitGetType(auto8FC380A1_var) != "Infestor") && (UnitGetType(auto8FC380A1_var) != "InfestorBurrowed") && (UnitFilterMatch(auto8FC380A1_var, gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
            UnitSetPosition(auto8FC380A1_var, PointFromId(762), false);
            UnitIssueOrder(auto8FC380A1_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        }

    }
    auto9B74362C_g = gv_startingUnits;
    auto9B74362C_u = UnitGroupCount(auto9B74362C_g, c_unitCountAll);
    for (;; auto9B74362C_u -= 1) {
        auto9B74362C_var = UnitGroupUnitFromEnd(auto9B74362C_g, auto9B74362C_u);
        if (auto9B74362C_var == null) { break; }
        lv_lOOP += 1;
        auto4BAB2104_val = lv_lOOP;
        if (auto4BAB2104_val == 1) {
            UnitSetPosition(auto9B74362C_var, PointFromId(11), false);
        }
        else if (auto4BAB2104_val == 2) {
            UnitSetPosition(auto9B74362C_var, PointFromId(384), false);
        }
        else if (auto4BAB2104_val == 3) {
            UnitSetPosition(auto9B74362C_var, PointFromId(422), false);
        }
        else if (auto4BAB2104_val == 4) {
            UnitSetPosition(auto9B74362C_var, PointFromId(504), false);
        }
        else {
            UnitSetPosition(auto9B74362C_var, PointFromId(11), false);
        }
        UnitIssueOrder(auto9B74362C_var, Order(AbilityCommand("BurrowInfestorUp", 0)), c_orderQueueReplace);
    }
    auto69B480CC_g = UnitGroup(null, c_playerAny, RegionFromId(22), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto69B480CC_u = UnitGroupCount(auto69B480CC_g, c_unitCountAll);
    for (;; auto69B480CC_u -= 1) {
        auto69B480CC_var = UnitGroupUnitFromEnd(auto69B480CC_g, auto69B480CC_u);
        if (auto69B480CC_var == null) { break; }
        libNtve_gf_PauseUnit(auto69B480CC_var, true);
    }
    gv_cinematicTempUnits = UnitGroupEmpty();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0D2EEB18_g;
    int auto0D2EEB18_u;
    unit auto0D2EEB18_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(423), 0.0, -1, 10.0, true);
    TriggerExecute(gt_MidInfestedTerrans, true, false);
    TriggerExecute(gt_MidMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midAlert = SoundLastPlayed();
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00026", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicOutofTransmission);
    auto0D2EEB18_g = gv_virophages;
    auto0D2EEB18_u = UnitGroupCount(auto0D2EEB18_g, c_unitCountAll);
    for (;; auto0D2EEB18_u -= 1) {
        auto0D2EEB18_var = UnitGroupUnitFromEnd(auto0D2EEB18_g, auto0D2EEB18_u);
        if (auto0D2EEB18_var == null) { break; }
        libNtve_gf_PauseUnit(auto0D2EEB18_var, false);
        UnitIssueOrder(auto0D2EEB18_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        libNtve_gf_PauseUnit(auto0D2EEB18_var, true);
    }
    gv_gasStatus = ge_PRESET_IsGasOn_GasOn;
    TriggerExecute(gt_GasAnimationHandler, true, false);
    SoundPlay(SoundLink("MidGasStinger", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_midGasStinger = SoundLastPlayed();
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(676), 3.0, -1, 10.0, true);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_MidInfestedTerransKill, true, false);
    Wait(2.0, c_timeReal);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00051", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00023", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00045", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(703), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Hybrid01|Line00055", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Hybrid01|Line00056", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Hybrid01|Line00023", true), c_soundIndexAny))), -1, 10.0, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "Overlord", 0, gv_pLAYER_01_USER, PointFromId(720));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(719)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Overlord", 0, gv_pLAYER_01_USER, PointFromId(721));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(706)), c_orderQueueReplace);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00055", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_LeavePortraitVisibleAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerExecute(gt_MidDropPods, true, false);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00129", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_LeavePortraitVisibleAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto0B8E91F2_g;
    int auto0B8E91F2_u;
    unit auto0B8E91F2_var;
    unitgroup auto587720AE_g;
    int auto587720AE_u;
    unit auto587720AE_var;
    unitgroup auto5D9A381C_g;
    int auto5D9A381C_u;
    unit auto5D9A381C_var;
    unitgroup autoD2E0FD49_g;
    int autoD2E0FD49_u;
    unit autoD2E0FD49_var;
    unitgroup auto6F448370_g;
    int auto6F448370_u;
    unit auto6F448370_var;
    unitgroup autoA086807D_g;
    int autoA086807D_u;
    unit autoA086807D_var;
    unitgroup auto729B219C_g;
    int auto729B219C_u;
    unit auto729B219C_var;
    unitgroup autoD8A94286_g;
    int autoD8A94286_u;
    unit autoD8A94286_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_MidInfestedTerrans);
    TriggerStop(gt_MidDropPods);
    TriggerStop(gt_MidInfestedTerransKill);
    SoundStop(gv_midGasStinger, true);
    SoundStop(gv_midAlert, true);
    if ((gv_cinematicCompleted == false) && (gv_midMusicCompleted == false)) {
        TriggerStop(gt_MidMusic);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZHybrid01MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

    auto0B8E91F2_g = gv_cinematicTempUnits;
    auto0B8E91F2_u = UnitGroupCount(auto0B8E91F2_g, c_unitCountAll);
    for (;; auto0B8E91F2_u -= 1) {
        auto0B8E91F2_var = UnitGroupUnitFromEnd(auto0B8E91F2_g, auto0B8E91F2_u);
        if (auto0B8E91F2_var == null) { break; }
        UnitRemove(auto0B8E91F2_var);
    }
    auto587720AE_g = UnitGroup("ZergDropPod", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto587720AE_u = UnitGroupCount(auto587720AE_g, c_unitCountAll);
    for (;; auto587720AE_u -= 1) {
        auto587720AE_var = UnitGroupUnitFromEnd(auto587720AE_g, auto587720AE_u);
        if (auto587720AE_var == null) { break; }
        UnitRemove(auto587720AE_var);
    }
    auto5D9A381C_g = UnitGroup("ZergDropPodCreep", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5D9A381C_u = UnitGroupCount(auto5D9A381C_g, c_unitCountAll);
    for (;; auto5D9A381C_u -= 1) {
        auto5D9A381C_var = UnitGroupUnitFromEnd(auto5D9A381C_g, auto5D9A381C_u);
        if (auto5D9A381C_var == null) { break; }
        UnitRemove(auto5D9A381C_var);
    }
    autoD2E0FD49_g = UnitGroup("Larva", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD2E0FD49_u = UnitGroupCount(autoD2E0FD49_g, c_unitCountAll);
    for (;; autoD2E0FD49_u -= 1) {
        autoD2E0FD49_var = UnitGroupUnitFromEnd(autoD2E0FD49_g, autoD2E0FD49_u);
        if (autoD2E0FD49_var == null) { break; }
        UnitRemove(autoD2E0FD49_var);
    }
    UnitRemove(UnitFromId(1236));
    auto6F448370_g = gv_playersBaseGroup;
    auto6F448370_u = UnitGroupCount(auto6F448370_g, c_unitCountAll);
    for (;; auto6F448370_u -= 1) {
        auto6F448370_var = UnitGroupUnitFromEnd(auto6F448370_g, auto6F448370_u);
        if (auto6F448370_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto6F448370_var, true);
    }
    autoA086807D_g = UnitGroup(null, gv_pLAYER_02_DOMINION_BULLIES, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoA086807D_u = UnitGroupCount(autoA086807D_g, c_unitCountAll);
    for (;; autoA086807D_u -= 1) {
        autoA086807D_var = UnitGroupUnitFromEnd(autoA086807D_g, autoA086807D_u);
        if (autoA086807D_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoA086807D_var, true);
    }
    auto729B219C_g = UnitGroup(null, gv_pLAYER_03_DOMINION_AI, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto729B219C_u = UnitGroupCount(auto729B219C_g, c_unitCountAll);
    for (;; auto729B219C_u -= 1) {
        auto729B219C_var = UnitGroupUnitFromEnd(auto729B219C_g, auto729B219C_u);
        if (auto729B219C_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto729B219C_var, true);
    }
    libNtve_gf_ShowHideUnit(UnitFromId(270), true);
    UnitPauseAll(false);
    libSwaC_gf_CreateHero2(PointFromId(3), gv_pLAYER_01_USER, libSwaC_ge_HeroUnit_Kerrigan, UnitGetFacing(gv_kerrigan), c_unitCreateIgnorePlacement, libSwaC_ge_KerriganCreatePurpose_GamePlay);
    gv_kerrigan = UnitLastCreated();
    libSwaC_gf_SetHeroPanelUnit(1, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Extractor", 0, gv_pLAYER_01_USER, PointFromId(65));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropResources, 3000.0);
    autoD8A94286_g = gv_startingUnits;
    autoD8A94286_u = UnitGroupCount(autoD8A94286_g, c_unitCountAll);
    for (;; autoD8A94286_u -= 1) {
        autoD8A94286_var = UnitGroupUnitFromEnd(autoD8A94286_g, autoD8A94286_u);
        if (autoD8A94286_var == null) { break; }
        UnitSetPropertyFixed(autoD8A94286_var, c_unitPropEnergyPercent, 100.0);
    }
    UnitRemove(UnitFromId(372));
    UnitRemove(UnitFromId(818));
    UnitRemove(UnitFromId(825));
    UnitRemove(UnitFromId(826));
    UnitRemove(UnitFromId(827));
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libSwaC_gf_SpawnLarvaForHatchery(UnitFromId(161), 3);
    CreepModify(UnitGetPosition(UnitFromId(161)), 12.0, true, false);
    libSwaC_gf_SetHatcheryRallyPoint(UnitFromId(161), PointFromId(3));
    libSwaC_gf_EnableDisableZerglingRespawn(true);
    if ((gv_gasStatus == ge_PRESET_IsGasOn_GasOff)) {
        gv_gasStatus = ge_PRESET_IsGasOn_GasOn;
        TriggerExecute(gt_GasAnimationHandler, true, false);
    }

    libSwaC_gf_StartingWorkersAutoHarvest(RegionFromId(25), RegionFromId(26));
    UIAlertClear(gv_pLAYER_01_USER);
    libNtve_gf_RemoveDeathModelsinRegion(RegionFromId(22));
    RegionPlayableMapSet(RegionEntireMap());
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PlayerStartLocation(gv_pLAYER_01_USER), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    TriggerEnable(gt_UnitEnterBonusObjectiveArea, true);
    TriggerExecute(gt_StartGameStage02, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Infested Terrans
//--------------------------------------------------------------------------------------------------
bool gt_MidInfestedTerrans_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto7EF91F8A_n = 80;
    int auto7EF91F8A_i;
    unitgroup auto9C94425E_g;
    int auto9C94425E_u;
    unit auto9C94425E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto7EF91F8A_i = 1; auto7EF91F8A_i <= auto7EF91F8A_n; auto7EF91F8A_i += 1) {
        UnitCreate(1, "InfestedCivilian", 0, gv_pLAYER_06_INFESTED, RegionRandomPoint(RegionFromId(24)), libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(gv_midInfestedTerrans, UnitLastCreatedGroup());
    }
    while (true) {
        auto9C94425E_g = gv_midInfestedTerrans;
        auto9C94425E_u = UnitGroupCount(auto9C94425E_g, c_unitCountAll);
        for (;; auto9C94425E_u -= 1) {
            auto9C94425E_var = UnitGroupUnitFromEnd(auto9C94425E_g, auto9C94425E_u);
            if (auto9C94425E_var == null) { break; }
            if ((RandomInt(1, 8) == 1)) {
                UnitIssueOrder(auto9C94425E_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(24))), c_orderQueueReplace);
            }

        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidInfestedTerrans_Init () {
    gt_MidInfestedTerrans = TriggerCreate("gt_MidInfestedTerrans_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Infested Terrans Kill
//--------------------------------------------------------------------------------------------------
bool gt_MidInfestedTerransKill_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5C9E609D_g;
    int auto5C9E609D_u;
    unit auto5C9E609D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto5C9E609D_g = gv_midInfestedTerrans;
    auto5C9E609D_u = UnitGroupCount(auto5C9E609D_g, c_unitCountAll);
    for (;; auto5C9E609D_u -= 1) {
        auto5C9E609D_var = UnitGroupUnitFromEnd(auto5C9E609D_g, auto5C9E609D_u);
        if (auto5C9E609D_var == null) { break; }
        UnitBehaviorAdd(auto5C9E609D_var, "GaseousCombustion", auto5C9E609D_var, 1);
        Wait(0.05, c_timeGame);
    }
    TriggerStop(gt_MidInfestedTerrans);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidInfestedTerransKill_Init () {
    gt_MidInfestedTerransKill = TriggerCreate("gt_MidInfestedTerransKill_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Drop Pods
//--------------------------------------------------------------------------------------------------
bool gt_MidDropPods_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropGroup;
    point[16] lv_dropPositions;
    unit[16] lv_dropUnits;
    int lv_i;
    int lv_count;

    // Automatic Variable Declarations
    unitgroup autoC22F3473_g;
    int autoC22F3473_u;
    unit autoC22F3473_var;
    int autoA397C7CC_ae;
    const int autoA397C7CC_ai = 1;

    // Variable Initialization
    lv_dropGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    autoC22F3473_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(34), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 15);
    autoC22F3473_u = UnitGroupCount(autoC22F3473_g, c_unitCountAll);
    for (;; autoC22F3473_u -= 1) {
        autoC22F3473_var = UnitGroupUnitFromEnd(autoC22F3473_g, autoC22F3473_u);
        if (autoC22F3473_var == null) { break; }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(autoC22F3473_var), 0, gv_pLAYER_01_USER, PointFromId(122));
        UnitGroupAdd(lv_dropGroup, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        lv_count += 1;
        lv_dropUnits[lv_count] = UnitLastCreated();
        lv_dropPositions[lv_count] = UnitGetPosition(autoC22F3473_var);
    }
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Zerg, PointFromId(3), lv_dropGroup, false, gv_pLAYER_01_USER);
    Wait(0.5, c_timeGame);
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Zerg, PointFromId(1222), UnitGroupEmpty(), false, gv_pLAYER_01_USER);
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Zerg, PointFromId(1223), UnitGroupEmpty(), false, gv_pLAYER_01_USER);
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Zerg, PointFromId(1224), UnitGroupEmpty(), false, gv_pLAYER_01_USER);
    Wait(3.0, c_timeGame);
    autoA397C7CC_ae = lv_count;
    lv_i = 1;
    for ( ; ( (autoA397C7CC_ai >= 0 && lv_i <= autoA397C7CC_ae) || (autoA397C7CC_ai < 0 && lv_i >= autoA397C7CC_ae) ) ; lv_i += autoA397C7CC_ai ) {
        UnitIssueOrder(lv_dropUnits[lv_i], OrderTargetingPoint(AbilityCommand("move", 0), lv_dropPositions[lv_i]), c_orderQueueReplace);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hatchery", c_unitCreateConstruct | c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, UnitGetPosition(UnitFromId(161)));
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpawningPool", c_unitCreateConstruct | c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, UnitGetPosition(UnitFromId(426)));
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "EvolutionChamber", c_unitCreateConstruct | c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, UnitGetPosition(UnitFromId(389)));
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitLastCreatedGroup());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidDropPods_Init () {
    gt_MidDropPods = TriggerCreate("gt_MidDropPods_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Music
//--------------------------------------------------------------------------------------------------
bool gt_MidMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZHybrid01MusicCutscene_GasReleased";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_midMusicCompleted = true;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZHybrid01MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidMusic_Init () {
    gt_MidMusic = TriggerCreate("gt_MidMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto63CD3108_g;
    int auto63CD3108_u;
    unit auto63CD3108_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitPauseAll(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    auto63CD3108_g = gv_cinematicHiddenUnits;
    auto63CD3108_u = UnitGroupCount(auto63CD3108_g, c_unitCountAll);
    for (;; auto63CD3108_u -= 1) {
        auto63CD3108_var = UnitGroupUnitFromEnd(auto63CD3108_g, auto63CD3108_u);
        if (auto63CD3108_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto63CD3108_var, false);
        libNtve_gf_PauseUnit(auto63CD3108_var, true);
    }
    libNtve_gf_ShowHideUnit(gv_labEntranceUnit, true);
    libNtve_gf_PauseUnit(gv_labEntranceUnit, false);
    if ((UnitIsAlive(gv_labEntranceUnit) == true)) {
        UnitKill(gv_labEntranceUnit);
    }

    if ((gv_gasStatus == ge_PRESET_IsGasOn_GasOn)) {
        gv_gasStatus = ge_PRESET_IsGasOn_GasOff;
        TriggerExecute(gt_GasAnimationHandler, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(159), 0.0, -1, 10, true);
    TriggerExecute(gt_VictoryZerg, true, false);
    libSwaC_gf_CreateHero2(PointFromId(725), gv_pLAYER_01_USER, libSwaC_ge_HeroUnit_Kerrigan, 135.0, 0, libSwaC_ge_KerriganCreatePurpose_Cinematic);
    gv_victoryKerrigan = UnitLastCreated();
    UnitBehaviorAdd(gv_victoryKerrigan, "KerriganWalk", gv_victoryKerrigan, 1);
    UnitIssueOrder(gv_victoryKerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(726)), c_orderQueueReplace);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 100.0, 0.1);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZHybrid01MusicCutscene02_EnterLab", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(31), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Hybrid01|Line00065", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Hybrid01|Line00057", true), c_soundIndexAny))), -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Hybrid01|Line00065", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_victoryKerrigan, "zMission_Hybrid01|Line00057", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_LeavePortraitVisibleAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_VictoryZerg);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Zerg
//--------------------------------------------------------------------------------------------------
bool gt_VictoryZerg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto4D747BF3_n = 25;
    int auto4D747BF3_i;
    const int autoC5D6367D_n = 15;
    int autoC5D6367D_i;
    const int auto4441A4FC_n = 3;
    int auto4441A4FC_i;
    const int auto67582256_n = 2;
    int auto67582256_i;
    unitgroup auto38CD3039_g;
    int auto38CD3039_u;
    unit auto38CD3039_var;
    unitgroup auto3CD5D778_g;
    int auto3CD5D778_u;
    unit auto3CD5D778_var;

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto4D747BF3_i = 1; auto4D747BF3_i <= auto4D747BF3_n; auto4D747BF3_i += 1) {
        UnitCreate(1, "InfestedCivilian", 0, gv_pLAYER_06_INFESTED, RegionRandomPoint(RegionFromId(35)), libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(gv_victoryZerg1, UnitLastCreatedGroup());
    }
    for (autoC5D6367D_i = 1; autoC5D6367D_i <= autoC5D6367D_n; autoC5D6367D_i += 1) {
        UnitCreate(1, "InfestedCivilian", 0, gv_pLAYER_06_INFESTED, RegionRandomPoint(RegionFromId(36)), libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(gv_victoryZerg2, UnitLastCreatedGroup());
    }
    for (auto4441A4FC_i = 1; auto4441A4FC_i <= auto4441A4FC_n; auto4441A4FC_i += 1) {
        UnitCreate(1, "Hydralisk", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(35)), libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(gv_victoryZerg1, UnitLastCreatedGroup());
    }
    for (auto67582256_i = 1; auto67582256_i <= auto67582256_n; auto67582256_i += 1) {
        UnitCreate(1, "Hydralisk", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(36)), libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(gv_victoryZerg2, UnitLastCreatedGroup());
    }
    while (true) {
        auto38CD3039_g = gv_victoryZerg1;
        auto38CD3039_u = UnitGroupCount(auto38CD3039_g, c_unitCountAll);
        for (;; auto38CD3039_u -= 1) {
            auto38CD3039_var = UnitGroupUnitFromEnd(auto38CD3039_g, auto38CD3039_u);
            if (auto38CD3039_var == null) { break; }
            if ((RandomInt(1, 8) == 1)) {
                UnitIssueOrder(auto38CD3039_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(35))), c_orderQueueReplace);
            }

        }
        auto3CD5D778_g = gv_victoryZerg2;
        auto3CD5D778_u = UnitGroupCount(auto3CD5D778_g, c_unitCountAll);
        for (;; auto3CD5D778_u -= 1) {
            auto3CD5D778_var = UnitGroupUnitFromEnd(auto3CD5D778_g, auto3CD5D778_u);
            if (auto3CD5D778_var == null) { break; }
            if ((RandomInt(1, 8) == 1)) {
                UnitIssueOrder(auto3CD5D778_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(36))), c_orderQueueReplace);
            }

        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryZerg_Init () {
    gt_VictoryZerg = TriggerCreate("gt_VictoryZerg_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_PlayerIsInCombat_Init();
    gt_PlayerIsInCombatIndicatorDiminish_Init();
    gt_DEBUGStage2_Init();
    gt_StartGameStage01Q_Init();
    gt_TransmissionMissionStartQ_Init();
    gt_StartGameStage02_Init();
    gt_CreateLabEntrancePing_Init();
    gt_TeachFungalGrowth_Init();
    gt_FungalGrowthUsed_Init();
    gt_TransmissionUseFungalGrowthQ_Init();
    gt_TransmissionFungalGrowthUsedQ_Init();
    gt_TeachParasiticDomination_Init();
    gt_ParasticDominationUsed_Init();
    gt_TransmissionUseDominationQ_Init();
    gt_ParasticDominationReminderQ_Init();
    gt_ParasticDominationReminderHighlightsOff_Init();
    gt_TeachConsumption_Init();
    gt_TransmissionUseConsumptionQ_Init();
    gt_ConsumptionUsed_Init();
    gt_BuildVirophages_Init();
    gt_InfestGarrisons_Init();
    gt_TransmissionFirstVirophageSpawnedQ_Init();
    gt_TransmissionThirdVirophageSpawnedQ_Init();
    gt_CreateGauge_Init();
    gt_UpdateGauge_Init();
    gt_TimerCycling_Init();
    gt_TransmissionGasStateChangeQ_Init();
    gt_GasAnimationHandler_Init();
    gt_KillInfestedWhenGasisOn_Init();
    gt_TransmissionAttackWithInfestedQ_Init();
    gt_VirophageAttacked_Init();
    gt_VirophageAttackedDiminish_Init();
    gt_VirophageDestroyed_Init();
    gt_TransmissionVirophageLostFirstQ_Init();
    gt_TransmissionVirophageLostSubsequentQ_Init();
    gt_SpawnInfested_Init();
    gt_EnableBeaconbyproximity_Center_Init();
    gt_EnableBeaconbyproximity_2ndright_Init();
    gt_EnableBeaconbyproximity_1stLeft_Init();
    gt_EnableBeaconbyproximity_2ndLeft_Init();
    gt_VirophageProjectileVomiting_Init();
    gt_TransmissionVirophageCompleteQ_Init();
    gt_TransmissionNextTwoBeaconsQ_Init();
    gt_TransmissionLastThreeBeaconsQ_Init();
    gt_UnitEnterBonusObjectiveArea_Init();
    gt_BonusObjectiveActivatedQ_Init();
    gt_BonusObjectiveCreepTumorPlaced_Init();
    gt_BonusObjectiveSpreadCreepUpdate_Init();
    gt_TransmissionBonusObjectiveUpdateQ_Init();
    gt_BonusObjectiveCreepTumorDies_Init();
    gt_CreepTumorTargetCursorEnter_Init();
    gt_CreepTumorTargetCursorLeave_Init();
    gt_HandleKerriganDeath_Init();
    gt_AmbientGunFiring_Init();
    gt_CreateLabEntranceIndicator_Init();
    gt_ExpansionClearSpawnGasPallets_Init();
    gt_TransmissionDetectionWarningQ_Init();
    gt_LabEntranceDamagedRemoveHarmless_Init();
    gt_InfestedAttackGate_Init();
    gt_TransmissionExpansionEngagedQ_Init();
    gt_TransmissionBridgeAttackQ_Init();
    gt_TransmissionBaseAttackStartedQ_Init();
    gt_Transmission2ndLayerBreachedQ_Init();
    gt_TransmissionStukovBanterKillDominionQ_Init();
    gt_TransmissionStukovBanterDoingWellQ_Init();
    gt_TransmissionStukovBanterKeepGoingQ_Init();
    gt_CleanserAttackWaves_Init();
    gt_CleanserPingUpdate_Init();
    gt_TransmissionCleanserTeamEnrouteQ_Init();
    gt_WarnIfVirophageUnderAttack_Init();
    gt_TransmissionKilltheCleanserTeamQ_Init();
    gt_StartAI_Init();
    gt_AIAttackWaves_Init();
    gt_AIBridgeAttack_Init();
    gt_StartUpgradesNormal_Init();
    gt_StartUpgradesHard_Init();
    gt_AIGiveMinerals_Init();
    gt_AIGiveGas_Init();
    gt_GhostNukeBaseEntrance_Init();
    gt_GhostNukeRightPlatform_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatSneakAttackInfestorsDead_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_AchievementUnitsKilledwithDominatedTerran_Init();
    gt_AchievementDominatedTerranAdded_Init();
    gt_AchievementDominatedTerranRemoved_Init();
    gt_AchievementInfestGarrisonsNoVirophageLostNH_Init();
    gt_AchievementWinMissionBefore3rdGassingH_Init();
    gt_StatisticUnitsKilledwithDominatedTerran_Init();
    gt_TipMissionHelpQ_Init();
    gt_ObjectiveDominionOutpostCreate_Init();
    gt_ObjectiveDominionOutpostComplete_Init();
    gt_ObjectiveDominionOutpostFail_Init();
    gt_ObjectiveInfestGarrisonsCreate_Init();
    gt_ObjectiveInfestGarrisonsUpdatePhageBorn_Init();
    gt_ObjectiveInfestGarrisonsUpdatePhageLost_Init();
    gt_ObjectiveInfestGarrisonsComplete_Init();
    gt_ObjectiveInfestGarrisonsFail_Init();
    gt_GarrisonPings_Init();
    gt_ObjectiveInfestorSurvivalCreate_Init();
    gt_ObjectiveInfestorSurvivalComplete_Init();
    gt_ObjectiveInfestorSurvivalFail_Init();
    gt_ObjectiveOpentheLabCreate_Init();
    gt_ObjectiveOpentheLabComplete_Init();
    gt_ObjectiveSpreadCreepCreate_Init();
    gt_ObjectiveSpreadCreepComplete_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanupNotSkipped_Init();
    gt_IntroCleanupSkipped_Init();
    gt_IntroMusic_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_MidInfestedTerrans_Init();
    gt_MidInfestedTerransKill_Init();
    gt_MidDropPods_Init();
    gt_MidMusic_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryZerg_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
