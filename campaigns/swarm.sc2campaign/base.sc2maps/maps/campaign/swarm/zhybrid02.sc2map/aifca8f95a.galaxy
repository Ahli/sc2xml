//==================================================================================================
// 
// Generated AI Script
// 
// AI Name: P03 Yellow (West)
// 
//==================================================================================================
include "TriggerLibs/natives"
include "TriggerLibs/AI"
include "TriggerLibs/Computer"

//--------------------------------------------------------------------------------------------------
// Globals
//--------------------------------------------------------------------------------------------------
point[17] aiFCA8F95A_defGather;
string[17] aiFCA8F95A_customData;
wave[17] aiFCA8F95A_lastWave;

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiFCA8F95A_wave3_enabled;
wave[17] aiFCA8F95A_wave3_lastWave;
trigger aiFCA8F95A_wave3_trigger = null;
int aiFCA8F95A_wave3_runPlayer;
playergroup aiFCA8F95A_wave3_runTarget;

//--------------------------------------------------------------------------------------------------
void aiFCA8F95A_wave3_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiFCA8F95A_wave3_enabled[init_i] = true;
        aiFCA8F95A_wave3_lastWave[init_i] = null;
    }

    aiFCA8F95A_wave3_trigger = TriggerCreate("aiFCA8F95A_wave3_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiFCA8F95A_wave3_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiFCA8F95A_wave3_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiFCA8F95A_wave3_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiFCA8F95A_wave3_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiFCA8F95A_wave3_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiFCA8F95A_wave3_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiFCA8F95A_wave3_runFunc (bool c, bool a) {
    int p = aiFCA8F95A_wave3_runPlayer;
    playergroup target = aiFCA8F95A_wave3_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiFCA8F95A_wave3_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiFCA8F95A_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 230; }
    if (d == 2) { ta = 230; }
    if (d == 3) { ta = 230; }
    if (d == 4) { ta = 230; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiFCA8F95A_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 4, "Marine");
    AIAttackWaveAddUnits(3, 4, "Marine");
    AIAttackWaveAddUnits(4, 6, "Marine");
    AIAttackWaveAddUnits(5, 6, "Marine");

    AIAttackWaveAddUnits(2, 2, "HellionTank");
    AIAttackWaveAddUnits(3, 2, "HellionTank");
    AIAttackWaveAddUnits(4, 3, "HellionTank");
    AIAttackWaveAddUnits(5, 3, "HellionTank");

    AIAttackWaveAddUnits(4, 1, "Medic");
    AIAttackWaveAddUnits(5, 1, "Medic");

    AIAttackWaveSend(p, ts, false);
    aiFCA8F95A_wave3_lastWave[p] = WaveLastCreated();
    aiFCA8F95A_lastWave[p] = aiFCA8F95A_wave3_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiFCA8F95A_wave3_run (int p, playergroup target, bool wait) {
    aiFCA8F95A_wave3_runPlayer = p;
    aiFCA8F95A_wave3_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiFCA8F95A_wave3_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiFCA8F95A_wave4_enabled;
wave[17] aiFCA8F95A_wave4_lastWave;
trigger aiFCA8F95A_wave4_trigger = null;
int aiFCA8F95A_wave4_runPlayer;
playergroup aiFCA8F95A_wave4_runTarget;

//--------------------------------------------------------------------------------------------------
void aiFCA8F95A_wave4_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiFCA8F95A_wave4_enabled[init_i] = true;
        aiFCA8F95A_wave4_lastWave[init_i] = null;
    }

    aiFCA8F95A_wave4_trigger = TriggerCreate("aiFCA8F95A_wave4_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiFCA8F95A_wave4_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiFCA8F95A_wave4_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiFCA8F95A_wave4_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiFCA8F95A_wave4_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiFCA8F95A_wave4_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiFCA8F95A_wave4_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiFCA8F95A_wave4_runFunc (bool c, bool a) {
    int p = aiFCA8F95A_wave4_runPlayer;
    playergroup target = aiFCA8F95A_wave4_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiFCA8F95A_wave4_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiFCA8F95A_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 190; }
    if (d == 2) { ta = 190; }
    if (d == 3) { ta = 190; }
    if (d == 4) { ta = 190; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiFCA8F95A_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 4, "Marine");
    AIAttackWaveAddUnits(3, 4, "Marine");
    AIAttackWaveAddUnits(4, 5, "Marine");
    AIAttackWaveAddUnits(5, 5, "Marine");

    AIAttackWaveAddUnits(2, 2, "Marauder");
    AIAttackWaveAddUnits(3, 2, "Marauder");
    AIAttackWaveAddUnits(4, 3, "Marauder");
    AIAttackWaveAddUnits(5, 3, "Marauder");

    AIAttackWaveAddUnits(2, 1, "Medic");
    AIAttackWaveAddUnits(3, 1, "Medic");
    AIAttackWaveAddUnits(4, 1, "Medic");
    AIAttackWaveAddUnits(5, 1, "Medic");

    AIAttackWaveSend(p, ts, false);
    aiFCA8F95A_wave4_lastWave[p] = WaveLastCreated();
    aiFCA8F95A_lastWave[p] = aiFCA8F95A_wave4_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiFCA8F95A_wave4_run (int p, playergroup target, bool wait) {
    aiFCA8F95A_wave4_runPlayer = p;
    aiFCA8F95A_wave4_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiFCA8F95A_wave4_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiFCA8F95A_wave5_enabled;
wave[17] aiFCA8F95A_wave5_lastWave;
trigger aiFCA8F95A_wave5_trigger = null;
int aiFCA8F95A_wave5_runPlayer;
playergroup aiFCA8F95A_wave5_runTarget;

//--------------------------------------------------------------------------------------------------
void aiFCA8F95A_wave5_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiFCA8F95A_wave5_enabled[init_i] = true;
        aiFCA8F95A_wave5_lastWave[init_i] = null;
    }

    aiFCA8F95A_wave5_trigger = TriggerCreate("aiFCA8F95A_wave5_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiFCA8F95A_wave5_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiFCA8F95A_wave5_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiFCA8F95A_wave5_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiFCA8F95A_wave5_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiFCA8F95A_wave5_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiFCA8F95A_wave5_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiFCA8F95A_wave5_runFunc (bool c, bool a) {
    int p = aiFCA8F95A_wave5_runPlayer;
    playergroup target = aiFCA8F95A_wave5_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiFCA8F95A_wave5_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiFCA8F95A_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 300; }
    if (d == 2) { ta = 300; }
    if (d == 3) { ta = 300; }
    if (d == 4) { ta = 300; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiFCA8F95A_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 3, "Marauder");
    AIAttackWaveAddUnits(3, 3, "Marauder");
    AIAttackWaveAddUnits(4, 4, "Marauder");
    AIAttackWaveAddUnits(5, 4, "Marauder");

    AIAttackWaveAddUnits(2, 2, "HellionTank");
    AIAttackWaveAddUnits(3, 3, "HellionTank");
    AIAttackWaveAddUnits(4, 3, "HellionTank");
    AIAttackWaveAddUnits(5, 3, "HellionTank");

    AIAttackWaveAddUnits(2, 2, "SiegeTank");
    AIAttackWaveAddUnits(3, 2, "SiegeTank");
    AIAttackWaveAddUnits(4, 3, "SiegeTank");
    AIAttackWaveAddUnits(5, 3, "SiegeTank");

    AIAttackWaveAddUnits(4, 1, "ScienceVessel");
    AIAttackWaveAddUnits(5, 1, "ScienceVessel");

    AIAttackWaveSend(p, ts, false);
    aiFCA8F95A_wave5_lastWave[p] = WaveLastCreated();
    aiFCA8F95A_lastWave[p] = aiFCA8F95A_wave5_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiFCA8F95A_wave5_run (int p, playergroup target, bool wait) {
    aiFCA8F95A_wave5_runPlayer = p;
    aiFCA8F95A_wave5_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiFCA8F95A_wave5_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiFCA8F95A_wave2_enabled;
wave[17] aiFCA8F95A_wave2_lastWave;
trigger aiFCA8F95A_wave2_trigger = null;
int aiFCA8F95A_wave2_runPlayer;
playergroup aiFCA8F95A_wave2_runTarget;

//--------------------------------------------------------------------------------------------------
void aiFCA8F95A_wave2_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiFCA8F95A_wave2_enabled[init_i] = true;
        aiFCA8F95A_wave2_lastWave[init_i] = null;
    }

    aiFCA8F95A_wave2_trigger = TriggerCreate("aiFCA8F95A_wave2_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiFCA8F95A_wave2_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiFCA8F95A_wave2_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiFCA8F95A_wave2_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiFCA8F95A_wave2_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiFCA8F95A_wave2_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiFCA8F95A_wave2_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiFCA8F95A_wave2_runFunc (bool c, bool a) {
    int p = aiFCA8F95A_wave2_runPlayer;
    playergroup target = aiFCA8F95A_wave2_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiFCA8F95A_wave2_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiFCA8F95A_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 600; }
    if (d == 2) { ta = 600; }
    if (d == 3) { ta = 600; }
    if (d == 4) { ta = 600; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiFCA8F95A_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 4, "Marine");
    AIAttackWaveAddUnits(3, 4, "Marine");
    AIAttackWaveAddUnits(4, 4, "Marine");
    AIAttackWaveAddUnits(5, 4, "Marine");

    AIAttackWaveAddUnits(2, 3, "HellionTank");
    AIAttackWaveAddUnits(3, 3, "HellionTank");
    AIAttackWaveAddUnits(4, 4, "HellionTank");
    AIAttackWaveAddUnits(5, 4, "HellionTank");

    AIAttackWaveAddUnits(4, 1, "Thor");
    AIAttackWaveAddUnits(5, 1, "Thor");

    AIAttackWaveAddUnits(2, 2, "Goliath");
    AIAttackWaveAddUnits(3, 2, "Goliath");
    AIAttackWaveAddUnits(4, 3, "Goliath");
    AIAttackWaveAddUnits(5, 3, "Goliath");

    AIAttackWaveAddUnits(2, 2, "VikingFighter");
    AIAttackWaveAddUnits(3, 2, "VikingFighter");
    AIAttackWaveAddUnits(4, 3, "VikingFighter");
    AIAttackWaveAddUnits(5, 3, "VikingFighter");

    AIAttackWaveSend(p, ts, false);
    aiFCA8F95A_wave2_lastWave[p] = WaveLastCreated();
    aiFCA8F95A_lastWave[p] = aiFCA8F95A_wave2_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiFCA8F95A_wave2_run (int p, playergroup target, bool wait) {
    aiFCA8F95A_wave2_runPlayer = p;
    aiFCA8F95A_wave2_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiFCA8F95A_wave2_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Wrappers
//--------------------------------------------------------------------------------------------------
void aiFCA8F95A_wave_enable (int w, int p, bool val) {
    if (w == 3) { aiFCA8F95A_wave3_enable(p, val); }
    if (w == 4) { aiFCA8F95A_wave4_enable(p, val); }
    if (w == 5) { aiFCA8F95A_wave5_enable(p, val); }
    if (w == 2) { aiFCA8F95A_wave2_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
bool aiFCA8F95A_wave_isEnabled (int w, int p) {
    if (w == 3) { return aiFCA8F95A_wave3_isEnabled(p); }
    if (w == 4) { return aiFCA8F95A_wave4_isEnabled(p); }
    if (w == 5) { return aiFCA8F95A_wave5_isEnabled(p); }
    if (w == 2) { return aiFCA8F95A_wave2_isEnabled(p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup aiFCA8F95A_wave_createdUnits (int w, int p) {
    return null;
}

//--------------------------------------------------------------------------------------------------
wave aiFCA8F95A_wave_createdWave (int w, int p) {
    if (w == 3) { return aiFCA8F95A_wave3_createdWave(p); }
    if (w == 4) { return aiFCA8F95A_wave4_createdWave(p); }
    if (w == 5) { return aiFCA8F95A_wave5_createdWave(p); }
    if (w == 2) { return aiFCA8F95A_wave2_createdWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void aiFCA8F95A_wave_run (int w, int p, playergroup target, bool wait) {
    if (w == 3) { aiFCA8F95A_wave3_run(p, target, wait); }
    if (w == 4) { aiFCA8F95A_wave4_run(p, target, wait); }
    if (w == 5) { aiFCA8F95A_wave5_run(p, target, wait); }
    if (w == 2) { aiFCA8F95A_wave2_run(p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Sequence
//--------------------------------------------------------------------------------------------------
trigger aiFCA8F95A_waves_trigger = null;
int aiFCA8F95A_waves_runPlayer;
playergroup aiFCA8F95A_waves_runTarget;

//--------------------------------------------------------------------------------------------------
void aiFCA8F95A_waves_init () {
    aiFCA8F95A_waves_trigger = TriggerCreate("aiFCA8F95A_waves_runFunc");
}

//--------------------------------------------------------------------------------------------------
bool aiFCA8F95A_waves_runFunc (bool c, bool a) {
    int p = aiFCA8F95A_waves_runPlayer;
    playergroup target = aiFCA8F95A_waves_runTarget;

    if (p < 0 || p >= 16) {
        return false;
    }

    aiFCA8F95A_wave3_run(p, target, true);
    aiFCA8F95A_wave4_run(p, target, true);
    aiFCA8F95A_wave5_run(p, target, true);
    aiFCA8F95A_wave2_run(p, target, true);

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiFCA8F95A_waves_run (int p, playergroup target) {
    aiFCA8F95A_waves_runPlayer = p;
    aiFCA8F95A_waves_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiFCA8F95A_waves_trigger, false, false);
}

//--------------------------------------------------------------------------------------------------
void aiFCA8F95A_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }

    aiFCA8F95A_wave3_enable(p, val);
    aiFCA8F95A_wave4_enable(p, val);
    aiFCA8F95A_wave5_enable(p, val);
    aiFCA8F95A_wave2_enable(p, val);
}

//--------------------------------------------------------------------------------------------------
void aiFCA8F95A_waves_stop () {
    TriggerStop(aiFCA8F95A_waves_trigger);

    TriggerStop(aiFCA8F95A_wave3_trigger);
    TriggerStop(aiFCA8F95A_wave4_trigger);
    TriggerStop(aiFCA8F95A_wave5_trigger);
    TriggerStop(aiFCA8F95A_wave2_trigger);
}

//--------------------------------------------------------------------------------------------------
// Configuration
//--------------------------------------------------------------------------------------------------
void aiFCA8F95A_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiFCA8F95A_defGather[p] = val;
}

//--------------------------------------------------------------------------------------------------
string aiFCA8F95A_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiFCA8F95A_customData[p];
}

//--------------------------------------------------------------------------------------------------
wave aiFCA8F95A_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiFCA8F95A_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
// Start
//--------------------------------------------------------------------------------------------------
bool aiFCA8F95A_initialized = false;

//--------------------------------------------------------------------------------------------------
void aiFCA8F95A_start (int p) {
    int init_i;

    if (p < 0 || p >= 16) {
        return;
    }
    if (!aiFCA8F95A_initialized) {
        aiFCA8F95A_wave3_init();
        aiFCA8F95A_wave4_init();
        aiFCA8F95A_wave5_init();
        aiFCA8F95A_wave2_init();
        aiFCA8F95A_waves_init();

        for (init_i = 0; init_i <= 16; init_i += 1) {
            aiFCA8F95A_defGather[init_i] = PointFromId(278);
        }

        aiFCA8F95A_initialized = true;
    }

    AICampaignStart(p);
}
