//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Harvest of Screams
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/SwarmCampaignLib"
include "ai3DE93F0F"
include "ai5BE6898D"
include "ai32C8620D"
include "aiB03B9787"
include "aiA6290BBE"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libSwaC_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_RESCUE_ZERG = 2;
const int gv_pLAYER_03_PSI_SPIRES = 3;
const int gv_pLAYER_04_PROTOSS = 4;
const int gv_pLAYER_05_PROTOSS = 5;
const int gv_pLAYER_06_PROTOSS = 6;
const int gv_pLAYER_09_ESSENCE = 9;
const int gv_pLAYER_10_URSADON = 10;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_inCinematic;
string gv_mapMusicTrack;
unit gv_kerrigan;
bool gv_baseRescued;
unitgroup gv_roachRescues;
playergroup gv_protossPlayers;
unit[7] gv_startingRoach;
unit[5] gv_startingZergling;
revealer gv_startingVision;
unit gv_startingHatchery;
sound gv_flashFreezeSound;
bool gv_flashFreezeActive;
unitgroup gv_overlordPathingBlockers;
int gv_inCombatIndicator;
fixed gv_flashFreeze_Duration;
timer gv_flashFreeze_Timer;
int gv_flashFreezeDuration_Window;
fixed gv_nextFlashFreeze_Duration;
timer gv_nextFlashFreeze_Timer;
int gv_nextFlashFreeze_Window;
int gv_pingZergBase;
int gv_pingMatriarch;
bool gv_giveEssenceObjective;
int gv_firstFlashFreezeTransmission;
actor gv_matriarchActor;
int gv_pingSpire01;
int gv_pingSpire02;
int gv_pingSpire03;
actor gv_spireActorModel01;
actor gv_spireActorModel02;
actor gv_spireActorModel03;
revealer gv_visibilitySpire01;
revealer gv_visibilitySpire02;
revealer gv_visibilitySpire03;
unitgroup gv_firstZealotAttackGroup;
int gv_flashFreezeCount;
bool gv_flashFreezeRetreatLineDelivered;
region[7] gv_flashFreezeRetreatAreas;
int gv_ursadon_CenterNorth;
int gv_ursadon_CenterSouth;
int gv_ursadon_NorthProtossBase;
int gv_ursadon_SouthProtossBase;
int gv_protossKilledDuringFlashFreeze;
int gv_unfrozenStructureDestroyed;
timer gv_speedRunTimer;
timer gv_completionistTimer;
int gv_largestZergForce;
int gv_objectiveDestroyDominionBase3;
int gv_ursadonEssence_Collected;
int gv_ursadonEssence_Needed;
int gv_objectiveDestroyDominionBase;
int gv_objectiveDestroyDominionBase22;
int gv_psiLinkSpiresDestroyed;
int gv_objectiveRescueBrood;
int gv_matriarchsKilled;
int gv_ursadonMatriarchPingWest;
int gv_ursadonMatriarchPingNorth;
bool gv_cinematicCompleted;
unitgroup gv_cinematicTempUnits;
unitgroup gv_cinematicHiddenUnits;
unit gv_cinematicKerrigan;
unit[5] gv_cinematicZergling;
bool gv_introMusicCompleted;
bool gv_midMusicCompleted;
bool gv_victoryCinematicCompleted;
unitgroup gv_victoryHiddenUnitGroup;
unit gv_victoryKerrigan;
point gv_victorySpirePoint;
sound gv_victoryEndWinHordeSound;

void InitGlobals () {
    gv_roachRescues = UnitGroupEmpty();
    gv_protossPlayers = PlayerGroupEmpty();
    gv_startingHatchery = UnitFromId(1);
    gv_overlordPathingBlockers = UnitGroupEmpty();
    gv_flashFreeze_Timer = TimerCreate();
    gv_flashFreezeDuration_Window = c_timerWindowNone;
    gv_nextFlashFreeze_Timer = TimerCreate();
    gv_nextFlashFreeze_Window = c_timerWindowNone;
    gv_pingZergBase = c_invalidPingId;
    gv_pingMatriarch = c_invalidPingId;
    gv_firstFlashFreezeTransmission = c_invalidTransmissionId;
    gv_pingSpire01 = c_invalidPingId;
    gv_pingSpire02 = c_invalidPingId;
    gv_pingSpire03 = c_invalidPingId;
    gv_firstZealotAttackGroup = UnitGroupEmpty();
    gv_speedRunTimer = TimerCreate();
    gv_completionistTimer = TimerCreate();
    gv_objectiveDestroyDominionBase3 = c_invalidObjectiveId;
    gv_ursadonEssence_Needed = 1;
    gv_objectiveDestroyDominionBase = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase22 = c_invalidObjectiveId;
    gv_objectiveRescueBrood = c_invalidObjectiveId;
    gv_ursadonMatriarchPingWest = c_invalidPingId;
    gv_ursadonMatriarchPingNorth = c_invalidPingId;
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_victoryHiddenUnitGroup = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
bool gf_PlayerIsInCombat (int lp_player);
void gf_CreateInfoText (unit lp_cHOSEN_UNIT);
void gf_ReplaceUnit (unit lp_unit);
void gf_TurnFogValuesOn (fixed lp_dURATION);
void gf_TurnFogValuesOff (fixed lp_dURATION);
void gf_AddFlashFreezetoUnit (unit lp_cHOSEN_UNIT);
void gf_RemoveFlashFreezeFromUnit (unit lp_cHOSEN_UNIT);
void gf_PickupEssence (unit lp_cHOSEN_ESSENCE);
void gf_StartFlashFreeze ();
void gf_EndFlashFreeze ();
void gf_RescueUnit (unit lp_cHOSEN_UNIT, unit lp_cHOSEN_TARGET);
void gf_WarpinProtossUnit (string lp_cHOSEN_UNIT, int lp_cHOSEN_PLAYER, point lp_sPAWN_POINT);
bool gf_FlashFreezeRetreat ();
fixed gf_SupplyValueOfUnitGroup (unitgroup lp_unitGroup);
void gf_FlashFreezeEvent ();
void gf_CreateUrsadonAttackAtLocation (point lp_sPAWN_POINT, point lp_aTTACK_POINT);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_PlayerIsInCombat;
trigger gt_PlayerIsInCombatIndicatorDiminish;
trigger gt_CreatedUnit;
trigger gt_SpineCrawlerTransform;
trigger gt_DEBUGStage2;
trigger gt_DEBUGStartBlizzard;
trigger gt_DEBUGStartSnow;
trigger gt_DEBUGStopSnow;
trigger gt_StartGameStage1Q;
trigger gt_StartGameStage2Q;
trigger gt_PrepareKerriganRevive;
trigger gt_UnitDiesGiveEssenceUpdateStats;
trigger gt_GlobalFlashFreezeBehavior;
trigger gt_CreateFlashFreezeDurationTimerWindow;
trigger gt_CreateNextFlashFreezeTimerWindow;
trigger gt_CreatePingFirstUrsadonMatriarch;
trigger gt_RescueRoaches;
trigger gt_EnableRoachTech;
trigger gt_UrsadonAttack01;
trigger gt_UrsadonAttack02;
trigger gt_UrsadonAttack03Sound;
trigger gt_UrsadonMatriarchKilledUpdateObjective;
trigger gt_StartFirstFlashFreezeQ;
trigger gt_StartFirstMatriarchAttack;
trigger gt_MatriachTakesDamage;
trigger gt_RecoverLostBroodShowQ;
trigger gt_CreatePingFrozenZergBase;
trigger gt_RecoverLostBroodBaseRescue;
trigger gt_TransmissionFindUrsadonMatriarchQ;
trigger gt_TransmissionFirstRoachFoundQ;
trigger gt_TransmissionAnotherRoachFoundQ;
trigger gt_TransmissionFlashFreezeisNearQ;
trigger gt_TransmissionFirstUrsadonMatriarchEssenceCollectedQ;
trigger gt_TransmissionKerriganAwakensZergBaseQ;
trigger gt_TransmissionTeachRoachBurrowRegenQ;
trigger gt_SpawnFirstZealotAttack;
trigger gt_TransmissionTakeFighttoHerQ;
trigger gt_SendFirstZealotAttack;
trigger gt_TransmissionProtossIncomingQ;
trigger gt_TransitiontoFirstFlashFreeze;
trigger gt_TransmissionProtossFrozenbyFlashFreezeQ;
trigger gt_AddWarpedInZealottoFirstAttack;
trigger gt_ZealotAttackWaveEngagedbyPlayerSafety;
trigger gt_FlashFreezeTimer;
trigger gt_FlashFreezeIncomingRandomQ;
trigger gt_FlashFreezeStartingOrderedQ;
trigger gt_FlashFreezeStartingRandomQ;
trigger gt_FlashFreezeEndingRandomQ;
trigger gt_SetNextFlashFreezeDurationto60s;
trigger gt_TransmissionFlashFreezeDurationto60sQ;
trigger gt_ProtossBaseWarningTopQ;
trigger gt_ProtossBaseWarningBottomQ;
trigger gt_ProtossBaseWarningDelays;
trigger gt_CreatePingPsiLinkSpire01;
trigger gt_CreatePingPsiLinkSpire0203;
trigger gt_PsiLinkSpireDamaged1;
trigger gt_PsiLinkSpireDamaged2;
trigger gt_PsiLinkSpireDamaged3;
trigger gt_PsiLinkSpireDestroyed;
trigger gt_PowerUpSpire01;
trigger gt_PowerUpSpire02;
trigger gt_PowerUpSpire03;
trigger gt_Spire01WarpInDefenders;
trigger gt_Spire02WarpInDefenders;
trigger gt_Spire03WarpInDefenders;
trigger gt_TransmissionFirstSpireDestroyedQ;
trigger gt_TransmissionSecondSpireDestroyedQ;
trigger gt_ProtossAttackWaveTauntQ;
trigger gt_RescueZergExpansion;
trigger gt_RootCommandIssued;
trigger gt_TransmissionDropZergExpansionQ;
trigger gt_TransmissionKerriganFindsDeadQueenQ;
trigger gt_ShowBonusObjectiveQ;
trigger gt_CreateUrsadonMatriarchPings;
trigger gt_MatriarchKilledUpgradeZergQ;
trigger gt_UrsadonAttackPlayerBase;
trigger gt_UrsadonAmbushNorthBonusArea;
trigger gt_UrsadonAttackCenterNorthAttack;
trigger gt_UrsadonAttackCenterSouthAttack;
trigger gt_UrsadonAttackSouthProtossBase;
trigger gt_IceBridgeCracking;
trigger gt_FogChange01;
trigger gt_FogChange02;
trigger gt_GroundIceCollapse01;
trigger gt_GroundIceCollapse02;
trigger gt_GroundIceCracking01;
trigger gt_GroundIceCracking02;
trigger gt_IceWallCollapse01;
trigger gt_IceWallCollapse02;
trigger gt_IceWallCollapse03;
trigger gt_IceWallCollapse04;
trigger gt_IceWallCollapse05;
trigger gt_IceWallCollapse06;
trigger gt_StartAI;
trigger gt_StartUpgradesHard;
trigger gt_AIAttackWaves;
trigger gt_AIGiveMinerals;
trigger gt_AIGiveGas;
trigger gt_AchievementDestroyUnfrozenStructures;
trigger gt_AchievementTimedRunNH;
trigger gt_AchievementCompletionistRunH;
trigger gt_LargestZergForce;
trigger gt_DefeatKerriganDead;
trigger gt_DefeatBaseDead;
trigger gt_VictoryPsiLinkSpiresDestroyed;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_TipMissionHelpQ;
trigger gt_ObjectiveCollectUrsadonEssenceCreate;
trigger gt_ObjectiveCollectUrsadonEssenceComplete;
trigger gt_ObjectiveCollectUrsadonEssenceFailed;
trigger gt_ObjectiveRecoverLostBroodCreate;
trigger gt_ObjectiveRecoverLostBroodComplete;
trigger gt_ObjectiveRecoverLostBroodFailed;
trigger gt_ObjectiveDestroyPsiLinkSpiresCreate;
trigger gt_ObjectiveDestroyPsiLinkSpiresUpdate;
trigger gt_ObjectiveDestroyPsiLinkSpiresComplete;
trigger gt_ObjectiveDestroyPsiLinkSpiresFailed;
trigger gt_ObjectiveUrsadonMatriarchsCreate;
trigger gt_ObjectiveUrsadonMatriarchsUpdate;
trigger gt_ObjectiveUrsadonMatriarchsComplete;
trigger gt_ObjectiveUrsadonMatriarchsFailedQ;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroMusic;
trigger gt_MidRecoverBroodQ;
trigger gt_MidRecoverBroodSetup;
trigger gt_MidRecoverBroodCinematic;
trigger gt_MidRecoverBroodCinematicEnd;
trigger gt_MidRecoverBroodCleanup;
trigger gt_MidMusic;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryZerg;
trigger gt_VictoryZergKerrigan;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai3DE93F0F") { ai3DE93F0F_start(p); }
    if (cai_playerAI[p] == "ai5BE6898D") { ai5BE6898D_start(p); }
    if (cai_playerAI[p] == "ai32C8620D") { ai32C8620D_start(p); }
    if (cai_playerAI[p] == "aiB03B9787") { aiB03B9787_start(p); }
    if (cai_playerAI[p] == "aiA6290BBE") { aiA6290BBE_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai3DE93F0F") { ai3DE93F0F_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai5BE6898D") { ai5BE6898D_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai32C8620D") { ai32C8620D_setDefGather(p, val); }
    if (cai_playerAI[p] == "aiB03B9787") { aiB03B9787_setDefGather(p, val); }
    if (cai_playerAI[p] == "aiA6290BBE") { aiA6290BBE_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai3DE93F0F") { return ai3DE93F0F_getCustomData(p); }
    if (cai_playerAI[p] == "ai5BE6898D") { return ai5BE6898D_getCustomData(p); }
    if (cai_playerAI[p] == "ai32C8620D") { return ai32C8620D_getCustomData(p); }
    if (cai_playerAI[p] == "aiB03B9787") { return aiB03B9787_getCustomData(p); }
    if (cai_playerAI[p] == "aiA6290BBE") { return aiA6290BBE_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai3DE93F0F") { return ai3DE93F0F_getLastWave(p); }
    if (cai_playerAI[p] == "ai5BE6898D") { return ai5BE6898D_getLastWave(p); }
    if (cai_playerAI[p] == "ai32C8620D") { return ai32C8620D_getLastWave(p); }
    if (cai_playerAI[p] == "aiB03B9787") { return aiB03B9787_getLastWave(p); }
    if (cai_playerAI[p] == "aiA6290BBE") { return aiA6290BBE_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai3DE93F0F") { ai3DE93F0F_waves_run(p, target); }
    if (cai_playerAI[p] == "ai5BE6898D") { ai5BE6898D_waves_run(p, target); }
    if (cai_playerAI[p] == "ai32C8620D") { ai32C8620D_waves_run(p, target); }
    if (cai_playerAI[p] == "aiB03B9787") { aiB03B9787_waves_run(p, target); }
    if (cai_playerAI[p] == "aiA6290BBE") { aiA6290BBE_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai3DE93F0F") { ai3DE93F0F_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai5BE6898D") { ai5BE6898D_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai32C8620D") { ai32C8620D_waves_enable(p, val); }
    if (cai_playerAI[p] == "aiB03B9787") { aiB03B9787_waves_enable(p, val); }
    if (cai_playerAI[p] == "aiA6290BBE") { aiA6290BBE_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai3DE93F0F") { ai3DE93F0F_waves_stop(); }
    if (ai == "ai5BE6898D") { ai5BE6898D_waves_stop(); }
    if (ai == "ai32C8620D") { ai32C8620D_waves_stop(); }
    if (ai == "aiB03B9787") { aiB03B9787_waves_stop(); }
    if (ai == "aiA6290BBE") { aiA6290BBE_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai3DE93F0F") { ai3DE93F0F_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai5BE6898D") { ai5BE6898D_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai32C8620D") { ai32C8620D_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "aiB03B9787") { aiB03B9787_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "aiA6290BBE") { aiA6290BBE_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai3DE93F0F") { ai3DE93F0F_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai5BE6898D") { ai5BE6898D_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai32C8620D") { ai32C8620D_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "aiB03B9787") { aiB03B9787_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "aiA6290BBE") { aiA6290BBE_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai3DE93F0F") { return ai3DE93F0F_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai5BE6898D") { return ai5BE6898D_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai32C8620D") { return ai32C8620D_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "aiB03B9787") { return aiB03B9787_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "aiA6290BBE") { return aiA6290BBE_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai3DE93F0F") { return ai3DE93F0F_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai5BE6898D") { return ai5BE6898D_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai32C8620D") { return ai32C8620D_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "aiB03B9787") { return aiB03B9787_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "aiA6290BBE") { return aiA6290BBE_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai3DE93F0F") { return ai3DE93F0F_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai5BE6898D") { return ai5BE6898D_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai32C8620D") { return ai32C8620D_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "aiB03B9787") { return aiB03B9787_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "aiA6290BBE") { return aiA6290BBE_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("ai3DE93F0F", 6);
    cai_start("ai5BE6898D", 4);
    cai_start("ai32C8620D", 5);
    cai_start("aiB03B9787", 7);
    cai_start("aiA6290BBE", 10);
    AICampaignStart(2);
    AICampaignStart(3);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(6, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(4, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(5, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(7, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(10, target);
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
bool gf_PlayerIsInCombat (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_inCombatIndicator > 0)) {
        return true;
    }
    else {
        return false;
    }
}

void gf_CreateInfoText (unit lp_cHOSEN_UNIT) {
    // Automatic Variable Declarations
    string autoDAA6B44E_val;

    // Implementation
    autoDAA6B44E_val = UnitGetType(lp_cHOSEN_UNIT);
    if (autoDAA6B44E_val == "SpineCrawler") {
        libSwaC_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/1C004C23"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/5F1DB332"));
    }
    else if (autoDAA6B44E_val == "SpineCrawlerUprooted") {
        libSwaC_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/78300F83"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/155903C2"));
    }
    else {
    }
    UnitSetState(lp_cHOSEN_UNIT, c_unitStateTooltipable, true);
}

void gf_ReplaceUnit (unit lp_unit) {
    // Variable Declarations
    int lv_owner;
    string lv_type;
    point lv_position;
    fixed lv_facing;
    fixed lv_life;
    fixed lv_shield;
    fixed lv_energy;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_unit == null)) {
        return ;
    }

    lv_owner = UnitGetOwner(lp_unit);
    lv_type = UnitGetType(lp_unit);
    lv_position = UnitGetPosition(lp_unit);
    lv_facing = UnitGetFacing(lp_unit);
    lv_life = UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent);
    lv_shield = UnitGetPropertyFixed(lp_unit, c_unitPropShields, c_unitPropCurrent);
    lv_energy = UnitGetPropertyFixed(lp_unit, c_unitPropEnergy, c_unitPropCurrent);
    UnitRemove(lp_unit);
    if ((lv_type == "Extractor")) {
        UnitRemove(UnitGroupUnit(UnitGroup("VespeneGeyser", 0, RegionCircle(lv_position, 0.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1), 1));
    }

    UnitCreate(1, lv_type, c_unitCreateIgnorePlacement, lv_owner, lv_position, lv_facing);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, lv_life);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShields, lv_shield);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergy, lv_energy);
}

trigger auto_gf_TurnFogValuesOn_Trigger = null;
fixed auto_gf_TurnFogValuesOn_lp_dURATION;

void gf_TurnFogValuesOn (fixed lp_dURATION) {
    auto_gf_TurnFogValuesOn_lp_dURATION = lp_dURATION;

    if (auto_gf_TurnFogValuesOn_Trigger == null) {
        auto_gf_TurnFogValuesOn_Trigger = TriggerCreate("auto_gf_TurnFogValuesOn_TriggerFunc");
    }

    TriggerExecute(auto_gf_TurnFogValuesOn_Trigger, false, false);
}

bool auto_gf_TurnFogValuesOn_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_dURATION = auto_gf_TurnFogValuesOn_lp_dURATION;

    // Automatic Variable Declarations
    // Implementation
    FogSetDensityOverTime(0.2, lp_dURATION);
    FogSetFallOffOverTime(0.3, lp_dURATION);
    FogSetStartHeightOverTime(8.0, lp_dURATION);
    return true;
}

trigger auto_gf_TurnFogValuesOff_Trigger = null;
fixed auto_gf_TurnFogValuesOff_lp_dURATION;

void gf_TurnFogValuesOff (fixed lp_dURATION) {
    auto_gf_TurnFogValuesOff_lp_dURATION = lp_dURATION;

    if (auto_gf_TurnFogValuesOff_Trigger == null) {
        auto_gf_TurnFogValuesOff_Trigger = TriggerCreate("auto_gf_TurnFogValuesOff_TriggerFunc");
    }

    TriggerExecute(auto_gf_TurnFogValuesOff_Trigger, false, false);
}

bool auto_gf_TurnFogValuesOff_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_dURATION = auto_gf_TurnFogValuesOff_lp_dURATION;

    // Automatic Variable Declarations
    // Implementation
    FogSetDensityOverTime(0.1, lp_dURATION);
    FogSetFallOffOverTime(0.2, lp_dURATION);
    FogSetStartHeightOverTime(0.0, lp_dURATION);
    return true;
}

trigger auto_gf_AddFlashFreezetoUnit_Trigger = null;
unit auto_gf_AddFlashFreezetoUnit_lp_cHOSEN_UNIT;

void gf_AddFlashFreezetoUnit (unit lp_cHOSEN_UNIT) {
    auto_gf_AddFlashFreezetoUnit_lp_cHOSEN_UNIT = lp_cHOSEN_UNIT;

    if (auto_gf_AddFlashFreezetoUnit_Trigger == null) {
        auto_gf_AddFlashFreezetoUnit_Trigger = TriggerCreate("auto_gf_AddFlashFreezetoUnit_TriggerFunc");
    }

    TriggerExecute(auto_gf_AddFlashFreezetoUnit_Trigger, false, false);
}

bool auto_gf_AddFlashFreezetoUnit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_cHOSEN_UNIT = auto_gf_AddFlashFreezetoUnit_lp_cHOSEN_UNIT;

    // Automatic Variable Declarations
    // Implementation
    Wait(RandomFixed(0.2, 0.4), c_timeGame);
    if ((gv_flashFreezeActive == true)) {
        UnitBehaviorAdd(lp_cHOSEN_UNIT, "FlashFreeze", lp_cHOSEN_UNIT, 1);
    }

    return true;
}

trigger auto_gf_RemoveFlashFreezeFromUnit_Trigger = null;
unit auto_gf_RemoveFlashFreezeFromUnit_lp_cHOSEN_UNIT;

void gf_RemoveFlashFreezeFromUnit (unit lp_cHOSEN_UNIT) {
    auto_gf_RemoveFlashFreezeFromUnit_lp_cHOSEN_UNIT = lp_cHOSEN_UNIT;

    if (auto_gf_RemoveFlashFreezeFromUnit_Trigger == null) {
        auto_gf_RemoveFlashFreezeFromUnit_Trigger = TriggerCreate("auto_gf_RemoveFlashFreezeFromUnit_TriggerFunc");
    }

    TriggerExecute(auto_gf_RemoveFlashFreezeFromUnit_Trigger, false, false);
}

bool auto_gf_RemoveFlashFreezeFromUnit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_cHOSEN_UNIT = auto_gf_RemoveFlashFreezeFromUnit_lp_cHOSEN_UNIT;

    // Automatic Variable Declarations
    // Implementation
    Wait(RandomFixed(0.2, 0.4), c_timeGame);
    UnitBehaviorAdd(lp_cHOSEN_UNIT, "ThawUnit", lp_cHOSEN_UNIT, 1);
    return true;
}

trigger auto_gf_PickupEssence_Trigger = null;
unit auto_gf_PickupEssence_lp_cHOSEN_ESSENCE;

void gf_PickupEssence (unit lp_cHOSEN_ESSENCE) {
    auto_gf_PickupEssence_lp_cHOSEN_ESSENCE = lp_cHOSEN_ESSENCE;

    if (auto_gf_PickupEssence_Trigger == null) {
        auto_gf_PickupEssence_Trigger = TriggerCreate("auto_gf_PickupEssence_TriggerFunc");
    }

    TriggerExecute(auto_gf_PickupEssence_Trigger, false, false);
}

bool auto_gf_PickupEssence_TriggerFunc (bool testConds, bool runActions) {
    unit lp_cHOSEN_ESSENCE = auto_gf_PickupEssence_lp_cHOSEN_ESSENCE;

    // Variable Declarations
    text lv_text;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    Wait(2.5, c_timeGame);
    if ((gv_baseRescued == false)) {
        gv_ursadonEssence_Collected = (gv_ursadonEssence_Collected + 1);
        SoundPlay(SoundLink("UI_ResourcePickup", 0), PlayerGroupSingle(gv_pLAYER_01_USER), 100.0, 0.0);
        TextExpressionSetToken("Param/Expression/0894A15A", "A", StringToText(("Kicker_Zerg")));
        TextExpressionSetToken("Param/Expression/0894A15A", "B", StringExternal("Param/Value/75FB824F"));
        TextTagCreate(TextExpressionAssemble("Param/Expression/0894A15A"), 24, UnitGetPosition(lp_cHOSEN_ESSENCE), 2.0, true, false, PlayerGroupAll());
        TextTagSetVelocity(TextTagLastCreated(), 0.7, 90.0);
        TextTagSetBackgroundImage(TextTagLastCreated(), "Assets\\Textures\\blank.dds", true);
        TextTagSetEdgeImage(TextTagLastCreated(), c_textTagEdgeBottom, "Assets\\Textures\\ui_hots_frame_objectives_bonus_popup_short.dds", 0, -15);
        TextTagShowBackground(TextTagLastCreated(), true);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
        UnitKill(lp_cHOSEN_ESSENCE);
        TriggerExecute(gt_UrsadonMatriarchKilledUpdateObjective, true, false);
        PingDestroy(gv_pingMatriarch);
    }
    else {
        libSwaC_gf_DestroyCacheAndGivePlayerResources(lp_cHOSEN_ESSENCE, libSwaC_ge_CacheResourceType_CustomResource, 1, null, StringExternal("Param/Value/BE672C70"), gv_pLAYER_01_USER);
    }
    return true;
}

void gf_StartFlashFreeze () {
    // Automatic Variable Declarations
    // Implementation
    SoundPlay(SoundLink("Ambience_Kaldir_FlashFreeze", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_flashFreezeSound = SoundLastPlayed();
    libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionEntireMap(), "SnowBlizzard", "Death");
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "SnowBlizzard", c_animNameDefault, "GLstand", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    gv_flashFreezeActive = true;
    TriggerEnable(gt_GlobalFlashFreezeBehavior, true);
}

void gf_EndFlashFreeze () {
    // Automatic Variable Declarations
    unitgroup autoEEB94356_g;
    int autoEEB94356_u;
    unit autoEEB94356_var;
    playergroup autoD18B3EBA_g;
    int autoD18B3EBA_var;
    unitgroup autoFA1E7D0E_g;
    int autoFA1E7D0E_u;
    unit autoFA1E7D0E_var;

    // Implementation
    SoundStop(gv_flashFreezeSound, true);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "SnowBlizzard", "Death", "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    TriggerExecute(gt_ProtossBaseWarningDelays, true, false);
    gv_flashFreezeActive = false;
    TriggerEnable(gt_GlobalFlashFreezeBehavior, false);
    TimerWindowDestroy(gv_flashFreezeDuration_Window);
    autoEEB94356_g = UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoEEB94356_u = UnitGroupCount(autoEEB94356_g, c_unitCountAll);
    for (;; autoEEB94356_u -= 1) {
        autoEEB94356_var = UnitGroupUnitFromEnd(autoEEB94356_g, autoEEB94356_u);
        if (autoEEB94356_var == null) { break; }
        UnitBehaviorAdd(autoEEB94356_var, "ThawUnit", autoEEB94356_var, 1);
    }
    autoD18B3EBA_g = gv_protossPlayers;
    autoD18B3EBA_var = -1;
    while (true) {
        autoD18B3EBA_var = PlayerGroupNextPlayer(autoD18B3EBA_g, autoD18B3EBA_var);
        if (autoD18B3EBA_var < 0) { break; }
        autoFA1E7D0E_g = UnitGroup(null, autoD18B3EBA_var, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        autoFA1E7D0E_u = UnitGroupCount(autoFA1E7D0E_g, c_unitCountAll);
        for (;; autoFA1E7D0E_u -= 1) {
            autoFA1E7D0E_var = UnitGroupUnitFromEnd(autoFA1E7D0E_g, autoFA1E7D0E_u);
            if (autoFA1E7D0E_var == null) { break; }
            if ((libNtve_gf_UnitIsVisibleToPlayer(autoFA1E7D0E_var, gv_pLAYER_01_USER) == true)) {
                gf_RemoveFlashFreezeFromUnit(autoFA1E7D0E_var);
            }
            else {
                UnitBehaviorAdd(autoFA1E7D0E_var, "ThawUnit", autoFA1E7D0E_var, 1);
            }
        }
    }
}

trigger auto_gf_RescueUnit_Trigger = null;
unit auto_gf_RescueUnit_lp_cHOSEN_UNIT;
unit auto_gf_RescueUnit_lp_cHOSEN_TARGET;

void gf_RescueUnit (unit lp_cHOSEN_UNIT, unit lp_cHOSEN_TARGET) {
    auto_gf_RescueUnit_lp_cHOSEN_UNIT = lp_cHOSEN_UNIT;
    auto_gf_RescueUnit_lp_cHOSEN_TARGET = lp_cHOSEN_TARGET;

    if (auto_gf_RescueUnit_Trigger == null) {
        auto_gf_RescueUnit_Trigger = TriggerCreate("auto_gf_RescueUnit_TriggerFunc");
    }

    TriggerExecute(auto_gf_RescueUnit_Trigger, false, false);
}

bool auto_gf_RescueUnit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_cHOSEN_UNIT = auto_gf_RescueUnit_lp_cHOSEN_UNIT;
    unit lp_cHOSEN_TARGET = auto_gf_RescueUnit_lp_cHOSEN_TARGET;

    // Automatic Variable Declarations
    // Implementation
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/1C393D2A"), null, lp_cHOSEN_UNIT);
    UnitBehaviorAddPlayer(lp_cHOSEN_UNIT, "ThawUnit", gv_pLAYER_01_USER, 1);
    UnitSetOwner(lp_cHOSEN_UNIT, gv_pLAYER_01_USER, false);
    Wait(2.2, c_timeGame);
    libNtve_gf_PauseUnit(lp_cHOSEN_UNIT, false);
    UnitSetState(lp_cHOSEN_UNIT, c_unitStateTargetable, true);
    libNtve_gf_RescueUnit(lp_cHOSEN_UNIT, gv_pLAYER_01_USER, true);
    UnitSetTeamColorIndex(lp_cHOSEN_UNIT, PlayerGetColorIndex(gv_pLAYER_01_USER, false));
    SoundPlayAtPoint(SoundLink("Event_Expedition01_FreeRoachVox", -1), PlayerGroupAll(), UnitGetPosition(lp_cHOSEN_UNIT), 0.0, 100.0, 0.0);
    if (((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_cHOSEN_UNIT), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 1), c_unitCountAlive) == 0) || (UnitGetOwner(lp_cHOSEN_UNIT) != gv_pLAYER_02_RESCUE_ZERG))) {
        UnitIssueOrder(lp_cHOSEN_UNIT, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lp_cHOSEN_TARGET)), c_orderQueueReplace);
    }

    Wait(1.0, c_timeGame);
    TriggerExecute(gt_EnableRoachTech, true, false);
    return true;
}

void gf_WarpinProtossUnit (string lp_cHOSEN_UNIT, int lp_cHOSEN_PLAYER, point lp_sPAWN_POINT) {
    // Automatic Variable Declarations
    // Implementation
    UnitIssueOrder(UnitFromId(970), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), lp_sPAWN_POINT), c_orderQueueReplace);
}

bool gf_FlashFreezeRetreat () {
    // Variable Declarations
    int lv_currentArea;
    unit lv_currentUnit;
    bool lv_deliverRetreatLine;

    // Automatic Variable Declarations
    const int auto0120D8C9_ae = 6;
    const int auto0120D8C9_ai = 1;

    // Variable Initialization

    // Implementation
    lv_currentArea = 1;
    for ( ; ( (auto0120D8C9_ai >= 0 && lv_currentArea <= auto0120D8C9_ae) || (auto0120D8C9_ai < 0 && lv_currentArea >= auto0120D8C9_ae) ) ; lv_currentArea += auto0120D8C9_ai ) {
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, gv_flashFreezeRetreatAreas[lv_currentArea], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
            lv_currentUnit = UnitGroupClosestToPoint(UnitGroup(null, gv_pLAYER_01_USER, gv_flashFreezeRetreatAreas[lv_currentArea], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionGetCenter(gv_flashFreezeRetreatAreas[lv_currentArea]));
            if ((gf_SupplyValueOfUnitGroup(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_currentUnit), 16.0), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) > gf_SupplyValueOfUnitGroup(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lv_currentUnit), 16.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)))) {
                lv_deliverRetreatLine = true;
                break;
            }

        }

    }
    return lv_deliverRetreatLine;
}

fixed gf_SupplyValueOfUnitGroup (unitgroup lp_unitGroup) {
    // Variable Declarations
    fixed lv_supplyValue;

    // Automatic Variable Declarations
    unitgroup auto76A5C87F_g;
    int auto76A5C87F_u;
    unit auto76A5C87F_var;
    unitgroup auto9FC73900_g;
    int auto9FC73900_u;
    unit auto9FC73900_var;

    // Variable Initialization

    // Implementation
    auto76A5C87F_g = UnitGroupFilter(null, c_playerAny, lp_unitGroup, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto76A5C87F_u = UnitGroupCount(auto76A5C87F_g, c_unitCountAll);
    for (;; auto76A5C87F_u -= 1) {
        auto76A5C87F_var = UnitGroupUnitFromEnd(auto76A5C87F_g, auto76A5C87F_u);
        if (auto76A5C87F_var == null) { break; }
        if ((UnitTypeTestAttribute(UnitGetType(auto76A5C87F_var), c_unitAttributeHeroic) == true)) {
            lv_supplyValue += 6.0;
        }
        else {
            lv_supplyValue += UnitGetPropertyFixed(auto76A5C87F_var, c_unitPropSuppliesUsed, c_unitPropCurrent);
        }
    }
    auto9FC73900_g = UnitGroupFilter("PhotonCannon", c_playerAny, lp_unitGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9FC73900_u = UnitGroupCount(auto9FC73900_g, c_unitCountAll);
    for (;; auto9FC73900_u -= 1) {
        auto9FC73900_var = UnitGroupUnitFromEnd(auto9FC73900_g, auto9FC73900_u);
        if (auto9FC73900_var == null) { break; }
        if ((UnitGroupCount(UnitGroup("Pylon", c_playerAny, RegionCircle(UnitGetPosition(auto9FC73900_var), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
            lv_supplyValue += 4.0;
        }

    }
    return lv_supplyValue;
}

trigger auto_gf_FlashFreezeEvent_Trigger = null;

void gf_FlashFreezeEvent () {
    if (auto_gf_FlashFreezeEvent_Trigger == null) {
        auto_gf_FlashFreezeEvent_Trigger = TriggerCreate("auto_gf_FlashFreezeEvent_TriggerFunc");
    }

    TriggerExecute(auto_gf_FlashFreezeEvent_Trigger, false, false);
}

bool auto_gf_FlashFreezeEvent_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    gf_StartFlashFreeze();
    TimerWindowDestroy(gv_nextFlashFreeze_Window);
    TriggerExecute(gt_CreateFlashFreezeDurationTimerWindow, true, false);
    Wait((gv_flashFreeze_Duration - 10.0), c_timeAI);
    if ((gv_gameOver == true)) {
        return true;
    }

    gf_TurnFogValuesOff(5.0);
    Wait(5.0, c_timeAI);
    if ((gv_gameOver == true)) {
        return true;
    }

    TriggerExecute(gt_FlashFreezeEndingRandomQ, true, false);
    Wait(5.0, c_timeAI);
    gf_EndFlashFreeze();
    if ((gv_gameOver == true)) {
        return true;
    }

    TriggerExecute(gt_FlashFreezeTimer, true, false);
    return true;
}

trigger auto_gf_CreateUrsadonAttackAtLocation_Trigger = null;
point auto_gf_CreateUrsadonAttackAtLocation_lp_sPAWN_POINT;
point auto_gf_CreateUrsadonAttackAtLocation_lp_aTTACK_POINT;

void gf_CreateUrsadonAttackAtLocation (point lp_sPAWN_POINT, point lp_aTTACK_POINT) {
    auto_gf_CreateUrsadonAttackAtLocation_lp_sPAWN_POINT = lp_sPAWN_POINT;
    auto_gf_CreateUrsadonAttackAtLocation_lp_aTTACK_POINT = lp_aTTACK_POINT;

    if (auto_gf_CreateUrsadonAttackAtLocation_Trigger == null) {
        auto_gf_CreateUrsadonAttackAtLocation_Trigger = TriggerCreate("auto_gf_CreateUrsadonAttackAtLocation_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateUrsadonAttackAtLocation_Trigger, false, false);
}

bool auto_gf_CreateUrsadonAttackAtLocation_TriggerFunc (bool testConds, bool runActions) {
    point lp_sPAWN_POINT = auto_gf_CreateUrsadonAttackAtLocation_lp_sPAWN_POINT;
    point lp_aTTACK_POINT = auto_gf_CreateUrsadonAttackAtLocation_lp_aTTACK_POINT;

    // Variable Declarations
    unit lv_sPAWNED_URSADON;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_CreateUnitsAtPoint2(1, "Yeti", 0, gv_pLAYER_10_URSADON, lp_sPAWN_POINT);
    lv_sPAWNED_URSADON = UnitLastCreated();
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        UnitSetPropertyFixed(lv_sPAWNED_URSADON, c_unitPropLifeMax, 185.0);
        UnitSetPropertyFixed(lv_sPAWNED_URSADON, c_unitPropLifePercent, 100.0);
    }

    UnitBehaviorAdd(lv_sPAWNED_URSADON, "YetiJump", lv_sPAWNED_URSADON, 1);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lv_sPAWNED_URSADON), 4.0), 10.0, false);
    UnitIssueOrder(lv_sPAWNED_URSADON, OrderTargetingPoint(AbilityCommand("attack", 0), lp_aTTACK_POINT), c_orderQueueReplace);
    AISetUnitSuicide(lv_sPAWNED_URSADON, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_ULoadCampaignData("ZExpedition1");
    TriggerExecute(gt_Init01Technology, true, true);
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04MusicSound, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    libSwaC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameStage1Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_visionGroup01;

    // Automatic Variable Declarations
    playergroup auto72944A8A_g;
    int auto72944A8A_var;

    // Variable Initialization
    lv_visionGroup01 = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_protossPlayers, gv_pLAYER_03_PSI_SPIRES);
    PlayerGroupAdd(gv_protossPlayers, gv_pLAYER_04_PROTOSS);
    PlayerGroupAdd(gv_protossPlayers, gv_pLAYER_05_PROTOSS);
    PlayerGroupAdd(gv_protossPlayers, gv_pLAYER_06_PROTOSS);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_RESCUE_ZERG, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_03_PSI_SPIRES, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_04_PROTOSS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_05_PROTOSS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_06_PROTOSS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_09_ESSENCE, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_10_URSADON, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_RESCUE_ZERG, gv_pLAYER_05_PROTOSS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_RESCUE_ZERG, gv_pLAYER_10_URSADON, libNtve_ge_AllianceSetting_Neutral);
    auto72944A8A_g = gv_protossPlayers;
    auto72944A8A_var = -1;
    while (true) {
        auto72944A8A_var = PlayerGroupNextPlayer(auto72944A8A_g, auto72944A8A_var);
        if (auto72944A8A_var < 0) { break; }
        PlayerSetColorIndex(auto72944A8A_var, 2, true);
        libNtve_gf_SetAlliance(auto72944A8A_var, gv_pLAYER_03_PSI_SPIRES, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(auto72944A8A_var, gv_pLAYER_04_PROTOSS, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(auto72944A8A_var, gv_pLAYER_05_PROTOSS, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(auto72944A8A_var, gv_pLAYER_06_PROTOSS, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    }
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_02_RESCUE_ZERG);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_03_PSI_SPIRES);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_04_PROTOSS);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_05_PROTOSS);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_06_PROTOSS);
    PlayerGroupAdd(lv_visionGroup01, gv_pLAYER_10_URSADON);
    libSwaC_gf_ShareVisionAmongPlayers(lv_visionGroup01);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 250);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 100);
    PlayerModifyPropertyInt(gv_pLAYER_02_RESCUE_ZERG, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_RESCUE_ZERG, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_04_PROTOSS, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_04_PROTOSS, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_05_PROTOSS, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_05_PROTOSS, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_06_PROTOSS, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_06_PROTOSS, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA7CF02C3_g;
    int autoA7CF02C3_u;
    unit autoA7CF02C3_var;
    unitgroup autoFB40A647_g;
    int autoFB40A647_u;
    unit autoFB40A647_var;
    unitgroup auto4FA887E1_g;
    int auto4FA887E1_u;
    unit auto4FA887E1_var;
    unitgroup auto66C2393E_g;
    int auto66C2393E_u;
    unit auto66C2393E_var;
    unitgroup auto41A5F831_g;
    int auto41A5F831_u;
    unit auto41A5F831_var;
    unitgroup autoB3AF5F95_g;
    int autoB3AF5F95_u;
    unit autoB3AF5F95_var;
    unitgroup autoB42FACC0_g;
    int autoB42FACC0_u;
    unit autoB42FACC0_var;
    unitgroup auto1B4EACBF_g;
    int auto1B4EACBF_u;
    unit auto1B4EACBF_var;
    unitgroup autoFD5DAF59_g;
    int autoFD5DAF59_u;
    unit autoFD5DAF59_var;
    string auto1A1E4CE8_val;
    unitgroup auto127E2B78_g;
    int auto127E2B78_u;
    unit auto127E2B78_var;
    unitgroup autoC9CB8FDE_g;
    int autoC9CB8FDE_u;
    unit autoC9CB8FDE_var;
    unitgroup auto5AB2C057_g;
    int auto5AB2C057_u;
    unit auto5AB2C057_var;
    unitgroup auto290A1BB9_g;
    int auto290A1BB9_u;
    unit auto290A1BB9_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_CreateHero2(PointFromId(644), gv_pLAYER_01_USER, libSwaC_ge_HeroUnit_Kerrigan, PointGetFacing(PointFromId(644)), 0, libSwaC_ge_KerriganCreatePurpose_GamePlay);
    gv_kerrigan = UnitLastCreated();
    libSwaC_gf_SetHeroPanelUnit(1, UnitLastCreated());
    gv_startingZergling[1] = UnitFromId(255);
    gv_startingZergling[2] = UnitFromId(267);
    gv_startingZergling[3] = UnitFromId(289);
    gv_startingZergling[4] = UnitFromId(508);
    gv_startingRoach[1] = UnitFromId(468);
    gv_startingRoach[2] = UnitFromId(465);
    gv_startingRoach[3] = UnitFromId(473);
    gv_startingRoach[4] = UnitFromId(619);
    gv_victorySpirePoint = PointWithOffsetPolar(UnitGetPosition(UnitFromId(6)), 3.0, 94.0);
    libSwaC_gf_SetUnitInfoTextCampaign(UnitFromId(1276), StringExternal("Param/Value/6E0E070A"), StringExternal("Param/Value/3E0C0D3E"), null);
    UnitSetState(UnitFromId(1276), c_unitStateTooltipable, true);
    autoA7CF02C3_g = UnitGroup("YetiMomma", gv_pLAYER_10_URSADON, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA7CF02C3_u = UnitGroupCount(autoA7CF02C3_g, c_unitCountAll);
    for (;; autoA7CF02C3_u -= 1) {
        autoA7CF02C3_var = UnitGroupUnitFromEnd(autoA7CF02C3_g, autoA7CF02C3_u);
        if (autoA7CF02C3_var == null) { break; }
        libSwaC_gf_SetUnitInfoTextCampaign(autoA7CF02C3_var, null, StringExternal("Param/Value/DF6CAE96"), null);
        UnitSetState(autoA7CF02C3_var, c_unitStateTooltipable, true);
    }
    autoFB40A647_g = UnitGroup("ProtossRadioTower", gv_pLAYER_03_PSI_SPIRES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFB40A647_u = UnitGroupCount(autoFB40A647_g, c_unitCountAll);
    for (;; autoFB40A647_u -= 1) {
        autoFB40A647_var = UnitGroupUnitFromEnd(autoFB40A647_g, autoFB40A647_u);
        if (autoFB40A647_var == null) { break; }
        libSwaC_gf_SetUnitInfoTextCampaign(autoFB40A647_var, StringExternal("Param/Value/900EA04A"), StringExternal("Param/Value/67AC373E"), null);
        UnitSetState(autoFB40A647_var, c_unitStateTooltipable, true);
    }
    auto4FA887E1_g = UnitGroup("Roach", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4FA887E1_u = UnitGroupCount(auto4FA887E1_g, c_unitCountAll);
    for (;; auto4FA887E1_u -= 1) {
        auto4FA887E1_var = UnitGroupUnitFromEnd(auto4FA887E1_g, auto4FA887E1_u);
        if (auto4FA887E1_var == null) { break; }
        UnitGroupAdd(gv_roachRescues, auto4FA887E1_var);
    }
    auto66C2393E_g = UnitGroup("RoachVile", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto66C2393E_u = UnitGroupCount(auto66C2393E_g, c_unitCountAll);
    for (;; auto66C2393E_u -= 1) {
        auto66C2393E_var = UnitGroupUnitFromEnd(auto66C2393E_g, auto66C2393E_u);
        if (auto66C2393E_var == null) { break; }
        UnitGroupAdd(gv_roachRescues, auto66C2393E_var);
    }
    auto41A5F831_g = UnitGroup("RoachCorpser", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto41A5F831_u = UnitGroupCount(auto41A5F831_g, c_unitCountAll);
    for (;; auto41A5F831_u -= 1) {
        auto41A5F831_var = UnitGroupUnitFromEnd(auto41A5F831_g, auto41A5F831_u);
        if (auto41A5F831_var == null) { break; }
        UnitGroupAdd(gv_roachRescues, auto41A5F831_var);
    }
    autoB3AF5F95_g = UnitGroup(null, gv_pLAYER_02_RESCUE_ZERG, RegionFromId(46), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB3AF5F95_u = UnitGroupCount(autoB3AF5F95_g, c_unitCountAll);
    for (;; autoB3AF5F95_u -= 1) {
        autoB3AF5F95_var = UnitGroupUnitFromEnd(autoB3AF5F95_g, autoB3AF5F95_u);
        if (autoB3AF5F95_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(autoB3AF5F95_var, true);
    }
    autoB42FACC0_g = UnitGroup("Overlord", gv_pLAYER_01_USER, RegionFromId(55), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB42FACC0_u = UnitGroupCount(autoB42FACC0_g, c_unitCountAll);
    for (;; autoB42FACC0_u -= 1) {
        autoB42FACC0_var = UnitGroupUnitFromEnd(autoB42FACC0_g, autoB42FACC0_u);
        if (autoB42FACC0_var == null) { break; }
        libNtve_gf_PauseUnit(autoB42FACC0_var, true);
        libNtve_gf_ShowHideUnit(autoB42FACC0_var, false);
    }
    UnitBehaviorRemove(gv_startingHatchery, "makeCreep8x6", 1);
    UnitBehaviorRemove(UnitFromId(690), "makeCreep4x4", 1);
    if ((libSwaC_gf_MissionStatusCheck("ZChar1", libSwaC_ge_MissionStatus_Completed) == false)) {
        gf_CreateInfoText(UnitFromId(80));
        UnitSetState(UnitFromId(80), c_unitStateTooltipable, true);
    }

    auto1B4EACBF_g = gv_roachRescues;
    auto1B4EACBF_u = UnitGroupCount(auto1B4EACBF_g, c_unitCountAll);
    for (;; auto1B4EACBF_u -= 1) {
        auto1B4EACBF_var = UnitGroupUnitFromEnd(auto1B4EACBF_g, auto1B4EACBF_u);
        if (auto1B4EACBF_var == null) { break; }
        libNtve_gf_PauseUnit(auto1B4EACBF_var, true);
        UnitSetState(auto1B4EACBF_var, c_unitStateTargetable, false);
        UnitSetOwner(auto1B4EACBF_var, gv_pLAYER_02_RESCUE_ZERG, true);
        UnitSetPropertyFixed(auto1B4EACBF_var, c_unitPropLifePercent, RandomFixed(78.0, 88.0));
        UnitBehaviorAdd(auto1B4EACBF_var, "FlashFreeze", auto1B4EACBF_var, 1);
    }
    UnitGroupRemove(gv_roachRescues, UnitFromId(621));
    UnitGroupRemove(gv_roachRescues, UnitFromId(176));
    autoFD5DAF59_g = UnitGroup(null, gv_pLAYER_02_RESCUE_ZERG, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFD5DAF59_u = UnitGroupCount(autoFD5DAF59_g, c_unitCountAll);
    for (;; autoFD5DAF59_u -= 1) {
        autoFD5DAF59_var = UnitGroupUnitFromEnd(autoFD5DAF59_g, autoFD5DAF59_u);
        if (autoFD5DAF59_var == null) { break; }
        libNtve_gf_PauseUnit(autoFD5DAF59_var, true);
        UnitSetPropertyFixed(autoFD5DAF59_var, c_unitPropLifePercent, RandomFixed(78.0, 88.0));
        auto1A1E4CE8_val = UnitGetType(autoFD5DAF59_var);
        if (auto1A1E4CE8_val == "Larva") {
            UnitRemove(autoFD5DAF59_var);
        }
        else if (auto1A1E4CE8_val == "Hatchery") {
            UnitBehaviorAdd(autoFD5DAF59_var, "FlashFreeze", autoFD5DAF59_var, 1);
        }
        else if (auto1A1E4CE8_val == "Extractor") {
            UnitBehaviorAdd(autoFD5DAF59_var, "FlashFreeze", autoFD5DAF59_var, 1);
        }
        else if (auto1A1E4CE8_val == "EvolutionChamber") {
            UnitBehaviorAdd(autoFD5DAF59_var, "FlashFreeze", autoFD5DAF59_var, 1);
        }
        else if (auto1A1E4CE8_val == "RoachWarren") {
            UnitBehaviorAdd(autoFD5DAF59_var, "FlashFreeze", autoFD5DAF59_var, 1);
        }
        else if (auto1A1E4CE8_val == "SpawningPool") {
            UnitBehaviorAdd(autoFD5DAF59_var, "FlashFreeze", autoFD5DAF59_var, 1);
        }
        else if (auto1A1E4CE8_val == "SpineCrawler") {
            UnitBehaviorAdd(autoFD5DAF59_var, "FlashFreeze", autoFD5DAF59_var, 1);
        }
        else if (auto1A1E4CE8_val == "Overlord") {
            UnitBehaviorAdd(autoFD5DAF59_var, "FlashFreeze", autoFD5DAF59_var, 1);
            UnitSetState(autoFD5DAF59_var, c_unitStateSelectable, false);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker2x2", c_unitCreateIgnorePlacement, 0, UnitGetPosition(autoFD5DAF59_var));
            UnitGroupAdd(gv_overlordPathingBlockers, UnitLastCreated());
        }
        else if (auto1A1E4CE8_val == "Drone") {
            UnitBehaviorAdd(autoFD5DAF59_var, "FlashFreeze", autoFD5DAF59_var, 1);
        }
        else if (auto1A1E4CE8_val == "Roach") {
            UnitBehaviorAdd(autoFD5DAF59_var, "FlashFreeze", autoFD5DAF59_var, 1);
        }
        else {
        }
    }
    auto127E2B78_g = UnitGroup(null, c_playerAny, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto127E2B78_u = UnitGroupCount(auto127E2B78_g, c_unitCountAll);
    for (;; auto127E2B78_u -= 1) {
        auto127E2B78_var = UnitGroupUnitFromEnd(auto127E2B78_g, auto127E2B78_u);
        if (auto127E2B78_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto127E2B78_var, false);
        libNtve_gf_PauseUnit(auto127E2B78_var, true);
    }
    autoC9CB8FDE_g = UnitGroup(null, c_playerAny, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC9CB8FDE_u = UnitGroupCount(autoC9CB8FDE_g, c_unitCountAll);
    for (;; autoC9CB8FDE_u -= 1) {
        autoC9CB8FDE_var = UnitGroupUnitFromEnd(autoC9CB8FDE_g, autoC9CB8FDE_u);
        if (autoC9CB8FDE_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoC9CB8FDE_var, false);
        libNtve_gf_PauseUnit(autoC9CB8FDE_var, true);
    }
    auto5AB2C057_g = UnitGroup(null, gv_pLAYER_10_URSADON, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5AB2C057_u = UnitGroupCount(auto5AB2C057_g, c_unitCountAll);
    for (;; auto5AB2C057_u -= 1) {
        auto5AB2C057_var = UnitGroupUnitFromEnd(auto5AB2C057_g, auto5AB2C057_u);
        if (auto5AB2C057_var == null) { break; }
        UnitBehaviorAdd(auto5AB2C057_var, "YetiJump", auto5AB2C057_var, 1);
        UnitIssueOrder(auto5AB2C057_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    auto290A1BB9_g = UnitGroup("DestructibleIce6x6", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto290A1BB9_u = UnitGroupCount(auto290A1BB9_g, c_unitCountAll);
    for (;; auto290A1BB9_u -= 1) {
        auto290A1BB9_var = UnitGroupUnitFromEnd(auto290A1BB9_g, auto290A1BB9_u);
        if (auto290A1BB9_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(auto290A1BB9_var, true);
        UnitSetState(auto290A1BB9_var, c_unitStateSelectable, false);
        UnitSetState(auto290A1BB9_var, c_unitStateStatusBar, false);
        UnitSetState(auto290A1BB9_var, c_unitStateTooltipable, false);
        UnitSetState(auto290A1BB9_var, c_unitStateTargetable, false);
        UnitSetState(auto290A1BB9_var, c_unitStateHighlightable, false);
    }
    libSwaC_gf_SetUnitInfoTextCampaign(UnitFromId(18), StringExternal("Param/Value/FB5B0A62"), StringExternal("Param/Value/18D3B3F7"), null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "ZExpedition01MusicMain";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    RegionPlayableMapSet(RegionFromId(32));
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "SnowBlizzard", "Death", "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    FogSetColor(Color(65.10, 84.31, 100.00));
    FogSetDensity(0.1);
    FogSetFallOff(0.2);
    FogSetStartHeight(0.0);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(14));
    gv_startingVision = VisRevealerLastCreated();
    CreepModify(RegionGetCenter(RegionFromId(46)), 40.0, false, false);
    libLbty_gf_AutoRevealRegion(RegionFromId(11), RegionFromId(11), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(42), RegionFromId(42), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(26), RegionFromId(26), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(58), RegionFromId(60), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(59), RegionFromId(61), gv_pLAYER_01_USER);
    gv_flashFreezeRetreatAreas[1] = RegionFromId(62);
    gv_flashFreezeRetreatAreas[2] = RegionFromId(63);
    gv_flashFreezeRetreatAreas[3] = RegionFromId(64);
    gv_flashFreezeRetreatAreas[4] = RegionFromId(65);
    gv_flashFreezeRetreatAreas[5] = RegionFromId(66);
    gv_flashFreezeRetreatAreas[6] = RegionFromId(67);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5DCB250A_g;
    int auto5DCB250A_u;
    unit auto5DCB250A_var;
    playergroup auto5E739341_g;
    int auto5E739341_var;
    playergroup auto309A4655_g;
    int auto309A4655_var;
    unitgroup auto94BF0BDC_g;
    int auto94BF0BDC_u;
    unit auto94BF0BDC_var;
    unitgroup auto60ECAE4C_g;
    int auto60ECAE4C_u;
    unit auto60ECAE4C_var;
    unitgroup auto09F701D6_g;
    int auto09F701D6_u;
    unit auto09F701D6_var;
    playergroup auto2E0DDC70_g;
    int auto2E0DDC70_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libHots_gf_DifficultyValueInt2(1, 0, 0) == 1)) {
        PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, 50);
    }

    gv_flashFreeze_Duration = libNtve_gf_DifficultyValueFixed(90.0, 90.0, 60.0, 60.0);
    gv_nextFlashFreeze_Duration = libHots_gf_DifficultyValueFixed2(120.0, 120.0, 120.0);
    auto5DCB250A_g = UnitGroup("ProtossRadioTower", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5DCB250A_u = UnitGroupCount(auto5DCB250A_g, c_unitCountAll);
    for (;; auto5DCB250A_u -= 1) {
        auto5DCB250A_var = UnitGroupUnitFromEnd(auto5DCB250A_g, auto5DCB250A_u);
        if (auto5DCB250A_var == null) { break; }
        UnitSetPropertyFixed(auto5DCB250A_var, c_unitPropShieldsMax, libNtve_gf_DifficultyValueFixed(1000.0, 1000.0, 1000.0, 1500.0));
        UnitSetPropertyFixed(auto5DCB250A_var, c_unitPropShieldsPercent, 100.0);
        UnitSetPropertyFixed(auto5DCB250A_var, c_unitPropLifeMax, libNtve_gf_DifficultyValueFixed(1000.0, 1000.0, 1500.0, 1500.0));
        UnitSetPropertyFixed(auto5DCB250A_var, c_unitPropLifePercent, 100.0);
    }
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        auto5E739341_g = gv_protossPlayers;
        auto5E739341_var = -1;
        while (true) {
            auto5E739341_var = PlayerGroupNextPlayer(auto5E739341_g, auto5E739341_var);
            if (auto5E739341_var < 0) { break; }
            TechTreeAbilityAllow(auto5E739341_var, AbilityCommand("GuardianShield", 0), false);
        }
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        auto309A4655_g = gv_protossPlayers;
        auto309A4655_var = -1;
        while (true) {
            auto309A4655_var = PlayerGroupNextPlayer(auto309A4655_g, auto309A4655_var);
            if (auto309A4655_var < 0) { break; }
            TechTreeUpgradeAddLevel(auto309A4655_var, "Charge", 1);
        }
        TriggerEnable(gt_Spire01WarpInDefenders, true);
        TriggerEnable(gt_Spire02WarpInDefenders, true);
        TriggerEnable(gt_Spire03WarpInDefenders, true);
        auto94BF0BDC_g = UnitGroup("Yeti", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto94BF0BDC_u = UnitGroupCount(auto94BF0BDC_g, c_unitCountAll);
        for (;; auto94BF0BDC_u -= 1) {
            auto94BF0BDC_var = UnitGroupUnitFromEnd(auto94BF0BDC_g, auto94BF0BDC_u);
            if (auto94BF0BDC_var == null) { break; }
            UnitSetPropertyFixed(auto94BF0BDC_var, c_unitPropLifeMax, 185.0);
            UnitSetPropertyFixed(auto94BF0BDC_var, c_unitPropLifePercent, 100.0);
        }
        auto60ECAE4C_g = UnitGroup("YetiMomma", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto60ECAE4C_u = UnitGroupCount(auto60ECAE4C_g, c_unitCountAll);
        for (;; auto60ECAE4C_u -= 1) {
            auto60ECAE4C_var = UnitGroupUnitFromEnd(auto60ECAE4C_g, auto60ECAE4C_u);
            if (auto60ECAE4C_var == null) { break; }
            UnitSetPropertyFixed(auto60ECAE4C_var, c_unitPropLifeMax, 625.0);
            UnitSetPropertyFixed(auto60ECAE4C_var, c_unitPropLifePercent, 100.0);
        }
        UnitRemove(UnitFromId(431));
        auto09F701D6_g = UnitGroup("UnbuildableRocksSmallUnit", 0, RegionFromId(57), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto09F701D6_u = UnitGroupCount(auto09F701D6_g, c_unitCountAll);
        for (;; auto09F701D6_u -= 1) {
            auto09F701D6_var = UnitGroupUnitFromEnd(auto09F701D6_g, auto09F701D6_u);
            if (auto09F701D6_var == null) { break; }
            UnitRemove(auto09F701D6_var);
        }
    }

    if (((libSwaC_gf_MissionStatusCheck("ZChar3", libSwaC_ge_MissionStatus_Completed) == false) || (libSwaC_gf_MissionStatusCheck("ZZerus3", libSwaC_ge_MissionStatus_Completed) == false))) {
        auto2E0DDC70_g = gv_protossPlayers;
        auto2E0DDC70_var = -1;
        while (true) {
            auto2E0DDC70_var = PlayerGroupNextPlayer(auto2E0DDC70_g, auto2E0DDC70_var);
            if (auto2E0DDC70_var < 0) { break; }
            TechTreeUpgradeAddLevel(auto2E0DDC70_var, "Charge", 1);
            TechTreeUpgradeAddLevel(auto2E0DDC70_var, "BlinkTech", 1);
            TechTreeUpgradeAddLevel(auto2E0DDC70_var, "ExtendedThermalLance", 1);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_AddMissionTipUserData("Hive Cluster");
    libSwaC_gf_AddMissionTipUserData("Base Defense");
    libSwaC_gf_AddMissionTipUserData("Zerg Expansion");
    libSwaC_gf_AddMissionTipUserData("Roach");
    libSwaC_gf_AddMissionTipUserData("Burrow Regeneration");
    libSwaC_gf_AddMissionTipUserData("Flash Freeze");
    libSwaC_gf_AddMissionTipUserData("Kerrigan Power");
    libSwaC_gf_AddMissionTipUserData("Army Button");
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Probe", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Stalker", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Sentry", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Immortal", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Archon", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("Colossus", false, gv_pLAYER_01_USER);
    libSwaC_gf_AddUnitTypeToUnitHelpPanel("PhotonCannon", false, gv_pLAYER_01_USER);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("Scout", false, gv_pLAYER_01_USER);
        libSwaC_gf_AddUnitTypeToUnitHelpPanel("VoidRay", false, gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Is In Combat
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIsInCombat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnitTarget()) == gv_pLAYER_01_USER)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_inCombatIndicator = 4;
    Wait(0.5, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIsInCombat_Init () {
    gt_PlayerIsInCombat = TriggerCreate("gt_PlayerIsInCombat_Func");
    TriggerAddEventUnitAttacked(gt_PlayerIsInCombat, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Is In Combat Indicator Diminish
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIsInCombatIndicatorDiminish_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_inCombatIndicator > 0)) {
        gv_inCombatIndicator = (gv_inCombatIndicator - 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIsInCombatIndicatorDiminish_Init () {
    gt_PlayerIsInCombatIndicatorDiminish = TriggerCreate("gt_PlayerIsInCombatIndicatorDiminish_Func");
    TriggerAddEventTimePeriodic(gt_PlayerIsInCombatIndicatorDiminish, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Created Unit
//--------------------------------------------------------------------------------------------------
bool gt_CreatedUnit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitCreatedUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((libSwaC_gf_MissionStatusCheck("ZChar1", libSwaC_ge_MissionStatus_Completed) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateInfoText(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreatedUnit_Init () {
    gt_CreatedUnit = TriggerCreate("gt_CreatedUnit_Func");
    TriggerAddEventUnitCreated(gt_CreatedUnit, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spine Crawler Transform
//--------------------------------------------------------------------------------------------------
bool gt_SpineCrawlerTransform_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((libSwaC_gf_MissionStatusCheck("ZExpedition1", libSwaC_ge_MissionStatus_Completed) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateInfoText(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpineCrawlerTransform_Init () {
    gt_SpineCrawlerTransform = TriggerCreate("gt_SpineCrawlerTransform_Func");
    TriggerAddEventUnitAbility(gt_SpineCrawlerTransform, null, AbilityCommand("SpineCrawlerRoot", 0), c_abilMorphStageUnitEnd, false);
    TriggerAddEventUnitAbility(gt_SpineCrawlerTransform, null, AbilityCommand("SpineCrawlerUproot", 0), c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGStage2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto299B9F49_g;
    int auto299B9F49_u;
    unit auto299B9F49_var;
    unitgroup autoA581D1F8_g;
    int autoA581D1F8_u;
    unit autoA581D1F8_var;
    unitgroup autoBD204B07_g;
    int autoBD204B07_u;
    unit autoBD204B07_var;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerDebugOutput(1, StringExternal("Param/Value/5F3B1A2E"), true);
    TriggerEnable(gt_UrsadonAttack02, false);
    TriggerEnable(gt_FogChange02, false);
    TriggerEnable(gt_TransmissionAnotherRoachFoundQ, false);
    TriggerEnable(gt_FogChange01, false);
    TriggerEnable(gt_StartFirstFlashFreezeQ, false);
    TriggerEnable(gt_TransmissionFlashFreezeisNearQ, false);
    TriggerEnable(gt_StartFirstFlashFreezeQ, false);
    CameraPan(gv_pLAYER_01_USER, PointWithOffset(PointFromId(551), 0.0, 0.0), 0.0, -1, 10, false);
    UnitKill(UnitFromId(590));
    UnitKill(UnitFromId(105));
    UnitKill(UnitFromId(458));
    UnitKill(UnitFromId(93));
    UnitKill(UnitFromId(249));
    UnitKill(UnitFromId(251));
    UnitKill(UnitFromId(75));
    auto299B9F49_g = UnitGroup("Zergling", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto299B9F49_u = UnitGroupCount(auto299B9F49_g, c_unitCountAll);
    for (;; auto299B9F49_u -= 1) {
        auto299B9F49_var = UnitGroupUnitFromEnd(auto299B9F49_g, auto299B9F49_u);
        if (auto299B9F49_var == null) { break; }
        UnitRemove(auto299B9F49_var);
    }
    autoA581D1F8_g = UnitGroup("Roach", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA581D1F8_u = UnitGroupCount(autoA581D1F8_g, c_unitCountAll);
    for (;; autoA581D1F8_u -= 1) {
        autoA581D1F8_var = UnitGroupUnitFromEnd(autoA581D1F8_g, autoA581D1F8_u);
        if (autoA581D1F8_var == null) { break; }
        UnitRemove(autoA581D1F8_var);
    }
    autoBD204B07_g = UnitGroup("Roach", gv_pLAYER_02_RESCUE_ZERG, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBD204B07_u = UnitGroupCount(autoBD204B07_g, c_unitCountAll);
    for (;; autoBD204B07_u -= 1) {
        autoBD204B07_var = UnitGroupUnitFromEnd(autoBD204B07_g, autoBD204B07_u);
        if (autoBD204B07_var == null) { break; }
        UnitRemove(autoBD204B07_var);
    }
    UnitSetPosition(gv_kerrigan, PointFromId(977), false);
    UnitCreate(4, "Roach", 0, gv_pLAYER_01_USER, PointFromId(551), 270.0);
    UnitCreate(4, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(551), 270.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DEBUGStage2_Init () {
    gt_DEBUGStage2 = TriggerCreate("gt_DEBUGStage2_Func");
    TriggerAddEventChatMessage(gt_DEBUGStage2, c_playerAny, "Stage2", true);
    TriggerAddEventChatMessage(gt_DEBUGStage2, c_playerAny, "S2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG Start Blizzard
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGStartBlizzard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/2FA7B0A4"), true);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "SnowBlizzard", c_animNameDefault, "GLstand", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(10.0, c_timeGame);
    TriggerDebugOutput(1, StringExternal("Param/Value/0D114C2C"), true);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "SnowBlizzard", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DEBUGStartBlizzard_Init () {
    gt_DEBUGStartBlizzard = TriggerCreate("gt_DEBUGStartBlizzard_Func");
    TriggerAddEventChatMessage(gt_DEBUGStartBlizzard, c_playerAny, "blizzardgo", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG Start Snow
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGStartSnow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/B835FE49"), true);
    libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionPlayableMap(), "SnowLight", "Death");
    libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionPlayableMap(), "SnowBlizzard", "Death");
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "SnowLight", c_animNameDefault, "GLstand", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "SnowBlizzard", c_animNameDefault, "GLstand", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DEBUGStartSnow_Init () {
    gt_DEBUGStartSnow = TriggerCreate("gt_DEBUGStartSnow_Func");
    TriggerAddEventChatMessage(gt_DEBUGStartSnow, c_playerAny, "snowgo", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG Stop Snow
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGStopSnow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/861C0ED8"), true);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "SnowLight", "Death", "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "SnowBlizzard", "Death", "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DEBUGStopSnow_Init () {
    gt_DEBUGStopSnow = TriggerCreate("gt_DEBUGStopSnow_Func");
    TriggerAddEventChatMessage(gt_DEBUGStopSnow, c_playerAny, "snowdie", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Stage 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/781F7A83"), null, PointFromId(429));
    TimerStart(gv_speedRunTimer, 900.0, false, c_timeAI);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        TimerStart(gv_completionistTimer, 720.0, false, c_timeAI);
    }

    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(14), 4.0, false);
    Wait(3.0, c_timeReal);
    VisRevealerDestroy(gv_startingVision);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveCollectUrsadonEssenceCreate, true, true);
    TriggerQueueExit();
    TriggerExecute(gt_CreatePingFirstUrsadonMatriarch, true, false);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_TransmissionFindUrsadonMatriarchQ, true, true);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_TipMissionHelpQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage1Q_Init () {
    gt_StartGameStage1Q = TriggerCreate("gt_StartGameStage1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Stage 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        libSwaC_gf_RemindPlayertoSpawnDrones(240.0, 6);
        libSwaC_gf_RemindPlayertoAssign3DronestoExtractor(UnitGroupUnit(UnitGroup("Extractor", gv_pLAYER_01_USER, RegionCircle(PointFromId(1380), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), 300.0);
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/11531BDB"), null, PointFromId(116));
    TriggerExecute(gt_AIAttackWaves, true, false);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroyPsiLinkSpiresCreate, true, true);
    TriggerQueueExit();
    TriggerExecute(gt_CreatePingPsiLinkSpire01, true, false);
    Wait(6.0, c_timeReal);
    TriggerExecute(gt_ShowBonusObjectiveQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage2Q_Init () {
    gt_StartGameStage2Q = TriggerCreate("gt_StartGameStage2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prepare Kerrigan Revive
//--------------------------------------------------------------------------------------------------
bool gt_PrepareKerriganRevive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_baseRescued == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_StartKerriganReviveCooldown();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrepareKerriganRevive_Init () {
    gt_PrepareKerriganRevive = TriggerCreate("gt_PrepareKerriganRevive_Func");
    TriggerAddEventUnitDied(gt_PrepareKerriganRevive, UnitRefFromVariable("gv_kerrigan"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Dies - Give Essence, Update Stats
//--------------------------------------------------------------------------------------------------
bool gt_UnitDiesGiveEssenceUpdateStats_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_eSSENCE_Ursadon;
    string lv_eSSENCE_Matriarch;

    // Automatic Variable Declarations
    string auto9A1428F5_val;

    // Variable Initialization
    lv_eSSENCE_Ursadon = "DNAPickup";
    lv_eSSENCE_Matriarch = "MatriarchDNAPickup";

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_baseRescued == false)) {
        auto9A1428F5_val = UnitGetType(EventUnit());
        if (auto9A1428F5_val == "YetiMomma") {
            UnitCreate(1, lv_eSSENCE_Matriarch, 0, gv_pLAYER_09_ESSENCE, PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.0, (UnitGetFacing(EventUnit()) + 220.0)), libNtve_gf_RandomAngle());
            libSwaC_gf_SetUnitInfoTextCampaign(UnitLastCreated(), null, StringExternal("Param/Value/C180FC79"), null);
            gf_PickupEssence(UnitLastCreated());
        }
        else {
        }
    }

    if ((gv_flashFreezeActive == true) && (UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_01_USER) && ((UnitGetOwner(EventUnit()) == gv_pLAYER_04_PROTOSS) || (UnitGetOwner(EventUnit()) == gv_pLAYER_05_PROTOSS) || (UnitGetOwner(EventUnit()) == gv_pLAYER_06_PROTOSS)) && (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false)) {
        gv_protossKilledDuringFlashFreeze = (gv_protossKilledDuringFlashFreeze + 1);
    }

    if ((gv_flashFreezeActive == false) && (UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_01_USER) && ((UnitGetOwner(EventUnit()) == gv_pLAYER_04_PROTOSS) || (UnitGetOwner(EventUnit()) == gv_pLAYER_05_PROTOSS) || (UnitGetOwner(EventUnit()) == gv_pLAYER_06_PROTOSS)) && (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true)) {
        gv_unfrozenStructureDestroyed = (gv_unfrozenStructureDestroyed + 1);
        if ((gv_unfrozenStructureDestroyed >= 20)) {
            TriggerExecute(gt_AchievementDestroyUnfrozenStructures, true, false);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitDiesGiveEssenceUpdateStats_Init () {
    gt_UnitDiesGiveEssenceUpdateStats = TriggerCreate("gt_UnitDiesGiveEssenceUpdateStats_Func");
    TriggerAddEventUnitDied(gt_UnitDiesGiveEssenceUpdateStats, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Global Flash Freeze Behavior
//--------------------------------------------------------------------------------------------------
bool gt_GlobalFlashFreezeBehavior_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoBC11CD66_g;
    int autoBC11CD66_u;
    unit autoBC11CD66_var;
    playergroup autoB3C6E1FE_g;
    int autoB3C6E1FE_var;
    unitgroup auto39882515_g;
    int auto39882515_u;
    unit auto39882515_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_flashFreezeActive == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoBC11CD66_g = UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoBC11CD66_u = UnitGroupCount(autoBC11CD66_g, c_unitCountAll);
    for (;; autoBC11CD66_u -= 1) {
        autoBC11CD66_var = UnitGroupUnitFromEnd(autoBC11CD66_g, autoBC11CD66_u);
        if (autoBC11CD66_var == null) { break; }
        if ((UnitHasBehavior(autoBC11CD66_var, "FlashFreeze") == false)) {
            gf_AddFlashFreezetoUnit(autoBC11CD66_var);
        }

    }
    autoB3C6E1FE_g = gv_protossPlayers;
    autoB3C6E1FE_var = -1;
    while (true) {
        autoB3C6E1FE_var = PlayerGroupNextPlayer(autoB3C6E1FE_g, autoB3C6E1FE_var);
        if (autoB3C6E1FE_var < 0) { break; }
        auto39882515_g = UnitGroup(null, autoB3C6E1FE_var, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto39882515_u = UnitGroupCount(auto39882515_g, c_unitCountAll);
        for (;; auto39882515_u -= 1) {
            auto39882515_var = UnitGroupUnitFromEnd(auto39882515_g, auto39882515_u);
            if (auto39882515_var == null) { break; }
            if ((UnitHasBehavior(auto39882515_var, "FlashFreeze") == false)) {
                if ((libNtve_gf_UnitIsVisibleToPlayer(auto39882515_var, gv_pLAYER_01_USER) == true)) {
                    gf_AddFlashFreezetoUnit(auto39882515_var);
                }
                else {
                    UnitBehaviorAdd(auto39882515_var, "FlashFreeze", auto39882515_var, 1);
                }
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GlobalFlashFreezeBehavior_Init () {
    gt_GlobalFlashFreezeBehavior = TriggerCreate("gt_GlobalFlashFreezeBehavior_Func");
    TriggerAddEventTimePeriodic(gt_GlobalFlashFreezeBehavior, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Flash Freeze Duration Timer Window
//--------------------------------------------------------------------------------------------------
bool gt_CreateFlashFreezeDurationTimerWindow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_flashFreeze_Timer, gv_flashFreeze_Duration, false, c_timeAI);
    gv_flashFreeze_Timer = TimerLastStarted();
    libSwaC_gf_TimerWindowCreate2(gv_flashFreeze_Timer, StringExternal("Param/Value/5B58F497"), true, false, libSwaC_ge_CampaignTimerPositiveNegativeOptions_Positive);
    gv_flashFreezeDuration_Window = TimerWindowLastCreated();
    TimerWindowSetFormat(gv_flashFreezeDuration_Window, StringToText("<mintotal/>:<sec2/>"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateFlashFreezeDurationTimerWindow_Init () {
    gt_CreateFlashFreezeDurationTimerWindow = TriggerCreate("gt_CreateFlashFreezeDurationTimerWindow_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Next Flash Freeze Timer Window
//--------------------------------------------------------------------------------------------------
bool gt_CreateNextFlashFreezeTimerWindow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_nextFlashFreeze_Timer, gv_nextFlashFreeze_Duration, false, c_timeAI);
    gv_nextFlashFreeze_Timer = TimerLastStarted();
    libSwaC_gf_TimerWindowCreate2(gv_nextFlashFreeze_Timer, StringExternal("Param/Value/523099E4"), true, false, libSwaC_ge_CampaignTimerPositiveNegativeOptions_Positive);
    gv_nextFlashFreeze_Window = TimerWindowLastCreated();
    TimerWindowSetFormat(gv_nextFlashFreeze_Window, StringToText("<mintotal/>:<sec2/>"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateNextFlashFreezeTimerWindow_Init () {
    gt_CreateNextFlashFreezeTimerWindow = TriggerCreate("gt_CreateNextFlashFreezeTimerWindow_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Ping - First Ursadon Matriarch
//--------------------------------------------------------------------------------------------------
bool gt_CreatePingFirstUrsadonMatriarch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_CreateObjectivePing(true, PointFromId(1279), StringExternal("Param/Value/EC978073"));
    gv_pingMatriarch = PingLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreatePingFirstUrsadonMatriarch_Init () {
    gt_CreatePingFirstUrsadonMatriarch = TriggerCreate("gt_CreatePingFirstUrsadonMatriarch_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rescue Roaches
//--------------------------------------------------------------------------------------------------
bool gt_RescueRoaches_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_roachRescues, EventUnitRangeUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_roachRescues, EventUnitRangeUnit());
    gf_RescueUnit(EventUnitRangeUnit(), EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RescueRoaches_Init () {
    gt_RescueRoaches = TriggerCreate("gt_RescueRoaches_Func");
    TriggerAddEventUnitRange(gt_RescueRoaches, null, UnitFromId(468), 4.0, true);
    TriggerAddEventUnitRange(gt_RescueRoaches, null, UnitFromId(465), 4.0, true);
    TriggerAddEventUnitRange(gt_RescueRoaches, null, UnitFromId(395), 6.0, true);
    TriggerAddEventUnitRange(gt_RescueRoaches, null, UnitFromId(396), 6.0, true);
    TriggerAddEventUnitRange(gt_RescueRoaches, null, UnitFromId(398), 6.0, true);
    TriggerAddEventUnitRange(gt_RescueRoaches, null, UnitFromId(384), 6.0, true);
    TriggerAddEventUnitRange(gt_RescueRoaches, null, UnitFromId(385), 6.0, true);
    TriggerAddEventUnitRange(gt_RescueRoaches, null, UnitFromId(393), 6.0, true);
    TriggerAddEventUnitRange(gt_RescueRoaches, null, UnitFromId(394), 6.0, true);
    TriggerAddEventUnitRange(gt_RescueRoaches, null, UnitFromId(401), 6.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable Roach Tech
//--------------------------------------------------------------------------------------------------
bool gt_EnableRoachTech_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_EnableCampaignTechUnit(true, "Roach", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableRoachTech_Init () {
    gt_EnableRoachTech = TriggerCreate("gt_EnableRoachTech_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ursadon Attack 01
//--------------------------------------------------------------------------------------------------
bool gt_UrsadonAttack01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ShareVisionofUnit(UnitFromId(590), true, gv_pLAYER_01_USER);
    Wait(1.0, c_timeGame);
    SoundPlay(SoundLink("Event_Expedition01_YetiAggro", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitIssueOrder(UnitFromId(590), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_kerrigan)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UrsadonAttack01_Init () {
    gt_UrsadonAttack01 = TriggerCreate("gt_UrsadonAttack01_Func");
    TriggerAddEventUnitRegion(gt_UrsadonAttack01, null, RegionFromId(8), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ursadon Attack 02
//--------------------------------------------------------------------------------------------------
bool gt_UrsadonAttack02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ShareVisionofUnit(UnitFromId(105), true, gv_pLAYER_01_USER);
    UnitIssueOrder(UnitFromId(105), OrderSetAutoCast(AbilityCommand("YetiCharge", 0), true), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    SoundPlay(SoundLink("Event_Expedition01_YetiAggro", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitIssueOrder(UnitFromId(105), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(569)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UrsadonAttack02_Init () {
    gt_UrsadonAttack02 = TriggerCreate("gt_UrsadonAttack02_Func");
    TriggerAddEventUnitRegion(gt_UrsadonAttack02, null, RegionFromId(22), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ursadon Attack 03 Sound
//--------------------------------------------------------------------------------------------------
bool gt_UrsadonAttack03Sound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("Event_Expedition01_YetiAggro", -1), PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UrsadonAttack03Sound_Init () {
    gt_UrsadonAttack03Sound = TriggerCreate("gt_UrsadonAttack03Sound_Func");
    TriggerAddEventUnitAcquiredTarget(gt_UrsadonAttack03Sound, UnitRefFromUnit(UnitFromId(93)));
    TriggerAddEventUnitAcquiredTarget(gt_UrsadonAttack03Sound, UnitRefFromUnit(UnitFromId(458)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ursadon Matriarch Killed - Update Objective
//--------------------------------------------------------------------------------------------------
bool gt_UrsadonMatriarchKilledUpdateObjective_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveCollectUrsadonEssenceComplete, true, false);
    if ((gv_ursadonEssence_Collected == gv_ursadonEssence_Needed)) {
        UnitKill(UnitFromId(1085));
        UnitKill(UnitFromId(1087));
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "ImmuneToFlashFreezeLevel3", gv_pLAYER_01_USER);
        TriggerExecute(gt_TransmissionFirstUrsadonMatriarchEssenceCollectedQ, true, true);
        TriggerExecute(gt_RecoverLostBroodShowQ, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UrsadonMatriarchKilledUpdateObjective_Init () {
    gt_UrsadonMatriarchKilledUpdateObjective = TriggerCreate("gt_UrsadonMatriarchKilledUpdateObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start First Flash Freeze Q
//--------------------------------------------------------------------------------------------------
bool gt_StartFirstFlashFreezeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_DEBUGStage2, false);
    FogSetDensityOverTime(0.2, 5.0);
    FogSetFallOffOverTime(0.3, 5.0);
    FogSetStartHeightOverTime(8.0, 5.0);
    TriggerQueueEnter();
    gf_StartFlashFreeze();
    Wait(2.0, c_timeReal);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZExpedition01MusicEvent02_FlashFreeze", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00012", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 75.0, 0.5);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 75.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 85.0, 1.0);
    TriggerExecute(gt_StartFirstMatriarchAttack, true, false);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraPan(gv_pLAYER_01_USER, PointFromId(694), 3.0, -1, 10, true);
    SoundPlay(SoundLink("Event_Exp1_SnowBeastRoar", -1), PlayerGroupAll(), 100.0, 0.0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00120", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 3.0);
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(libSwaC_ge_CampaginReticleType_ZergEnemy, libSwaC_ge_CampaginReticleSize_Medium, null, UnitFromId(75), "Ref_Center");
    libHots_gf_StoreActorForUnit(UnitFromId(75), 1, libNtve_gf_ActorLastCreated());
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 100.0, 0.0);
    SoundPlay(SoundLink("UI_BriefingUnitSelect", -1), PlayerGroupAll(), 100.0, 0.0);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00014", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    CameraPan(gv_pLAYER_01_USER, PointFromId(1277), 3.0, -1, 10, false);
    Wait(3.0, c_timeGame);
    CameraLockInput(gv_pLAYER_01_USER, false);
    gf_EndFlashFreeze();
    gf_RescueUnit(UnitFromId(619), EventUnit());
    gf_RescueUnit(UnitFromId(473), EventUnit());
    TriggerQueueExit();
    TriggerExecute(gt_FlashFreezeEndingRandomQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartFirstFlashFreezeQ_Init () {
    gt_StartFirstFlashFreezeQ = TriggerCreate("gt_StartFirstFlashFreezeQ_Func");
    TriggerAddEventUnitRegion(gt_StartFirstFlashFreezeQ, null, RegionFromId(16), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start First Matriarch Attack
//--------------------------------------------------------------------------------------------------
bool gt_StartFirstMatriarchAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShareVisionofUnit(UnitFromId(75), true, gv_pLAYER_01_USER);
    libNtve_gf_ShareVisionofUnit(UnitFromId(249), true, gv_pLAYER_01_USER);
    libNtve_gf_ShareVisionofUnit(UnitFromId(251), true, gv_pLAYER_01_USER);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(169), false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(78), false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(79), false);
    libNtve_gf_ChangeUnitDamage(UnitFromId(169), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(UnitFromId(78), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(UnitFromId(79), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitIssueOrder(UnitFromId(75), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(78)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(251), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(79)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(249), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(169)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(75), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(591)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(251), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(591)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(249), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(591)), c_orderQueueAddToEnd);
    Wait((SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Expedition01|Line00120", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Expedition01|Line00014", true), c_soundIndexAny))), c_timeReal);
    FogSetDensityOverTime(0.0, 12.0);
    UnitKill(UnitFromId(169));
    Wait(0.2, c_timeGame);
    UnitKill(UnitFromId(78));
    Wait(0.3, c_timeGame);
    UnitKill(UnitFromId(79));
    Wait(1.0, c_timeGame);
    AISetUnitScriptControlled(UnitFromId(75), false);
    AISetUnitScriptControlled(UnitFromId(249), false);
    AISetUnitScriptControlled(UnitFromId(251), false);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_10_URSADON, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveUseUnit(gv_pLAYER_10_URSADON, UnitFromId(75));
    AIAttackWaveUseUnit(gv_pLAYER_10_URSADON, UnitFromId(249));
    AIAttackWaveUseUnit(gv_pLAYER_10_URSADON, UnitFromId(251));
    AIAttackWaveSend(gv_pLAYER_10_URSADON, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartFirstMatriarchAttack_Init () {
    gt_StartFirstMatriarchAttack = TriggerCreate("gt_StartFirstMatriarchAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Matriach Takes Damage
//--------------------------------------------------------------------------------------------------
bool gt_MatriachTakesDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(75), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MatriachTakesDamage_Init () {
    gt_MatriachTakesDamage = TriggerCreate("gt_MatriachTakesDamage_Func");
    TriggerAddEventUnitDamaged(gt_MatriachTakesDamage, UnitRefFromUnit(UnitFromId(75)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Recover Lost Brood -  Show Q
//--------------------------------------------------------------------------------------------------
bool gt_RecoverLostBroodShowQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveRecoverLostBroodCreate, true, true);
    TriggerExecute(gt_CreatePingFrozenZergBase, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RecoverLostBroodShowQ_Init () {
    gt_RecoverLostBroodShowQ = TriggerCreate("gt_RecoverLostBroodShowQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Ping - Frozen Zerg Base
//--------------------------------------------------------------------------------------------------
bool gt_CreatePingFrozenZergBase_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_baseRescued == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_CreateObjectivePing(true, PointFromId(42), StringExternal("Param/Value/438A2290"));
    gv_pingZergBase = PingLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreatePingFrozenZergBase_Init () {
    gt_CreatePingFrozenZergBase = TriggerCreate("gt_CreatePingFrozenZergBase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Recover Lost Brood Base - Rescue
//--------------------------------------------------------------------------------------------------
bool gt_RecoverLostBroodBaseRescue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_pingZergBase);
    gv_baseRescued = true;
    libNtve_gf_MakeUnitUncommandable(gv_kerrigan, true);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionCircle(UnitGetPosition(UnitFromId(1276)), 3.0))), c_orderQueueReplace);
    UnitKill(UnitFromId(1276));
    TriggerExecute(gt_ObjectiveRecoverLostBroodComplete, true, true);
    libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/9DF3077E"));
    TriggerExecute(gt_TransmissionKerriganAwakensZergBaseQ, true, false);
    TriggerExecute(gt_MidRecoverBroodQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RecoverLostBroodBaseRescue_Init () {
    gt_RecoverLostBroodBaseRescue = TriggerCreate("gt_RecoverLostBroodBaseRescue_Func");
    TriggerAddEventUnitRegion(gt_RecoverLostBroodBaseRescue, UnitRefFromVariable("gv_kerrigan"), RegionFromId(31), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Find Ursadon Matriarch Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFindUrsadonMatriarchQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Expedition01|Line00132", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFindUrsadonMatriarchQ_Init () {
    gt_TransmissionFindUrsadonMatriarchQ = TriggerCreate("gt_TransmissionFindUrsadonMatriarchQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: First Roach Found Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFirstRoachFoundQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(468)), 2.0, Color(0.00, 100.00, 0.00));
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00007", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFirstRoachFoundQ_Init () {
    gt_TransmissionFirstRoachFoundQ = TriggerCreate("gt_TransmissionFirstRoachFoundQ_Func");
    TriggerAddEventUnitRegion(gt_TransmissionFirstRoachFoundQ, null, RegionFromId(15), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Another Roach Found Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAnotherRoachFoundQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZExpedition01MusicEvent01_FeralRoach", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libSwaC_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(465)), 2.0, Color(0.00, 100.00, 0.00));
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Expedition01|Line00021", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionAnotherRoachFoundQ_Init () {
    gt_TransmissionAnotherRoachFoundQ = TriggerCreate("gt_TransmissionAnotherRoachFoundQ_Func");
    TriggerAddEventUnitRegion(gt_TransmissionAnotherRoachFoundQ, null, RegionFromId(23), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Flash Freeze is Near Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFlashFreezeisNearQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00010", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Expedition01|Line00011", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFlashFreezeisNearQ_Init () {
    gt_TransmissionFlashFreezeisNearQ = TriggerCreate("gt_TransmissionFlashFreezeisNearQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: First Ursadon Matriarch Essence Collected Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFirstUrsadonMatriarchEssenceCollectedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00122", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Expedition01|Line00130", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFirstUrsadonMatriarchEssenceCollectedQ_Init () {
    gt_TransmissionFirstUrsadonMatriarchEssenceCollectedQ = TriggerCreate("gt_TransmissionFirstUrsadonMatriarchEssenceCollectedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Kerrigan Awakens Zerg Base Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionKerriganAwakensZergBaseQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Expedition01|Line00023", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionKerriganAwakensZergBaseQ_Init () {
    gt_TransmissionKerriganAwakensZergBaseQ = TriggerCreate("gt_TransmissionKerriganAwakensZergBaseQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Teach Roach Burrow/Regen Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTeachRoachBurrowRegenQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00039", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTeachRoachBurrowRegenQ_Init () {
    gt_TransmissionTeachRoachBurrowRegenQ = TriggerCreate("gt_TransmissionTeachRoachBurrowRegenQ_Func");
    TriggerAddEventUnitRegion(gt_TransmissionTeachRoachBurrowRegenQ, null, RegionFromId(69), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn First Zealot Attack
//--------------------------------------------------------------------------------------------------
bool gt_SpawnFirstZealotAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionTakeFighttoHerQ, true, false);
    gf_WarpinProtossUnit("Zealot", gv_pLAYER_06_PROTOSS, PointFromId(158));
    Wait(RandomFixed(0.1, 0.3), c_timeAI);
    gf_WarpinProtossUnit("Zealot", gv_pLAYER_06_PROTOSS, PointFromId(159));
    Wait(RandomFixed(0.1, 0.3), c_timeAI);
    gf_WarpinProtossUnit("Zealot", gv_pLAYER_06_PROTOSS, PointFromId(160));
    Wait(RandomFixed(0.1, 0.3), c_timeAI);
    gf_WarpinProtossUnit("Zealot", gv_pLAYER_06_PROTOSS, PointFromId(161));
    Wait(RandomFixed(0.1, 0.3), c_timeAI);
    gf_WarpinProtossUnit("Zealot", gv_pLAYER_06_PROTOSS, PointFromId(162));
    Wait(RandomFixed(0.1, 0.3), c_timeAI);
    gf_WarpinProtossUnit("Zealot", gv_pLAYER_06_PROTOSS, PointFromId(163));
    Wait(RandomFixed(0.1, 0.3), c_timeAI);
    gf_WarpinProtossUnit("Zealot", gv_pLAYER_06_PROTOSS, PointFromId(164));
    Wait(RandomFixed(0.1, 0.3), c_timeAI);
    gf_WarpinProtossUnit("Zealot", gv_pLAYER_06_PROTOSS, PointFromId(165));
    Wait(RandomFixed(0.1, 0.3), c_timeAI);
    gf_WarpinProtossUnit("Zealot", gv_pLAYER_06_PROTOSS, PointFromId(166));
    Wait(RandomFixed(0.1, 0.3), c_timeAI);
    gf_WarpinProtossUnit("Zealot", gv_pLAYER_06_PROTOSS, PointFromId(167));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnFirstZealotAttack_Init () {
    gt_SpawnFirstZealotAttack = TriggerCreate("gt_SpawnFirstZealotAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Take Fight to Her Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTakeFighttoHerQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00027", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTakeFighttoHerQ_Init () {
    gt_TransmissionTakeFighttoHerQ = TriggerCreate("gt_TransmissionTakeFighttoHerQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send First Zealot Attack
//--------------------------------------------------------------------------------------------------
bool gt_SendFirstZealotAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionProtossIncomingQ, true, false);
    UnitGroupIssueOrder(gv_firstZealotAttackGroup, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(614)), c_orderQueueReplace);
    UnitGroupIssueOrder(gv_firstZealotAttackGroup, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(615)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(gv_firstZealotAttackGroup, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(616)), c_orderQueueAddToEnd);
    TriggerEnable(gt_AddWarpedInZealottoFirstAttack, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendFirstZealotAttack_Init () {
    gt_SendFirstZealotAttack = TriggerCreate("gt_SendFirstZealotAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Protoss Incoming Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionProtossIncomingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00028", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionProtossIncomingQ_Init () {
    gt_TransmissionProtossIncomingQ = TriggerCreate("gt_TransmissionProtossIncomingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transition to First Flash Freeze
//--------------------------------------------------------------------------------------------------
bool gt_TransitiontoFirstFlashFreeze_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7D4D4406_g;
    int auto7D4D4406_u;
    unit auto7D4D4406_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_TurnFogValuesOn(5.0);
    auto7D4D4406_g = gv_firstZealotAttackGroup;
    auto7D4D4406_u = UnitGroupCount(auto7D4D4406_g, c_unitCountAll);
    for (;; auto7D4D4406_u -= 1) {
        auto7D4D4406_var = UnitGroupUnitFromEnd(auto7D4D4406_g, auto7D4D4406_u);
        if (auto7D4D4406_var == null) { break; }
        UnitGroupRemove(gv_firstZealotAttackGroup, auto7D4D4406_var);
        AISetUnitScriptControlled(auto7D4D4406_var, false);
        AIAttackWaveUseUnit(gv_pLAYER_06_PROTOSS, auto7D4D4406_var);
    }
    AIAttackWaveSetTargetPlayer(gv_pLAYER_06_PROTOSS, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSend(gv_pLAYER_06_PROTOSS, 0, false);
    TriggerExecute(gt_TransmissionProtossFrozenbyFlashFreezeQ, true, false);
    Wait(2.0, c_timeAI);
    gv_flashFreezeCount = (gv_flashFreezeCount + 1);
    gf_FlashFreezeEvent();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransitiontoFirstFlashFreeze_Init () {
    gt_TransitiontoFirstFlashFreeze = TriggerCreate("gt_TransitiontoFirstFlashFreeze_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Protoss Frozen by Flash Freeze Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionProtossFrozenbyFlashFreezeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00030", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Expedition01|Line00144", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionProtossFrozenbyFlashFreezeQ_Init () {
    gt_TransmissionProtossFrozenbyFlashFreezeQ = TriggerCreate("gt_TransmissionProtossFrozenbyFlashFreezeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add Warped In Zealot to First Attack
//--------------------------------------------------------------------------------------------------
bool gt_AddWarpedInZealottoFirstAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "Zealot"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_06_PROTOSS))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_firstZealotAttackGroup, EventUnitProgressUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddWarpedInZealottoFirstAttack_Init () {
    gt_AddWarpedInZealottoFirstAttack = TriggerCreate("gt_AddWarpedInZealottoFirstAttack_Func");
    TriggerAddEventUnitConstructProgress(gt_AddWarpedInZealottoFirstAttack, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zealot Attack Wave Engaged by Player (Safety)
//--------------------------------------------------------------------------------------------------
bool gt_ZealotAttackWaveEngagedbyPlayerSafety_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_SpawnFirstZealotAttack, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZealotAttackWaveEngagedbyPlayerSafety_Init () {
    gt_ZealotAttackWaveEngagedbyPlayerSafety = TriggerCreate("gt_ZealotAttackWaveEngagedbyPlayerSafety_Func");
    TriggerAddEventUnitRegion(gt_ZealotAttackWaveEngagedbyPlayerSafety, null, RegionFromId(7), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flash Freeze Timer
//--------------------------------------------------------------------------------------------------
bool gt_FlashFreezeTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_CreateNextFlashFreezeTimerWindow, true, false);
    Wait((gv_nextFlashFreeze_Duration - 30.0), c_timeAI);
    TriggerExecute(gt_FlashFreezeIncomingRandomQ, true, false);
    Wait(16.0, c_timeAI);
    gf_TurnFogValuesOn(5.0);
    Wait(14.0, c_timeAI);
    gv_flashFreezeCount = (gv_flashFreezeCount + 1);
    if ((gv_flashFreezeCount <= 3)) {
        TriggerExecute(gt_FlashFreezeStartingOrderedQ, true, false);
    }
    else {
        TriggerExecute(gt_FlashFreezeStartingRandomQ, true, false);
    }
    gf_FlashFreezeEvent();
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        TriggerExecute(gt_UrsadonAttackPlayerBase, true, false);
    }

    while (!((TriggerQueueIsEmpty() == true))) {
        Wait(2.0, c_timeGame);
    }
    libSwaC_gf_ObjectiveRePing(gv_pingSpire01);
    libSwaC_gf_ObjectiveRePing(gv_pingSpire02);
    libSwaC_gf_ObjectiveRePing(gv_pingSpire03);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlashFreezeTimer_Init () {
    gt_FlashFreezeTimer = TriggerCreate("gt_FlashFreezeTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flash Freeze Incoming (Random) Q
//--------------------------------------------------------------------------------------------------
bool gt_FlashFreezeIncomingRandomQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_random;

    // Automatic Variable Declarations
    int auto885151DB_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_random = RandomInt(1, 4);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    auto885151DB_val = lv_random;
    if (auto885151DB_val == 1) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00033", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto885151DB_val == 2) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00034", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto885151DB_val == 3) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00046", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto885151DB_val == 4) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00047", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlashFreezeIncomingRandomQ_Init () {
    gt_FlashFreezeIncomingRandomQ = TriggerCreate("gt_FlashFreezeIncomingRandomQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flash Freeze Starting (Ordered) Q
//--------------------------------------------------------------------------------------------------
bool gt_FlashFreezeStartingOrderedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto842FA3FF_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    auto842FA3FF_val = gv_flashFreezeCount;
    if (auto842FA3FF_val == 2) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00036", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Expedition01|Line00145", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto842FA3FF_val == 3) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00067", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Expedition01|Line00144", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlashFreezeStartingOrderedQ_Init () {
    gt_FlashFreezeStartingOrderedQ = TriggerCreate("gt_FlashFreezeStartingOrderedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flash Freeze Starting (Random) Q
//--------------------------------------------------------------------------------------------------
bool gt_FlashFreezeStartingRandomQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_random;

    // Automatic Variable Declarations
    int auto1A994613_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_random = RandomInt(1, 5);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    auto1A994613_val = lv_random;
    if (auto1A994613_val == 1) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00067", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto1A994613_val == 2) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00064", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto1A994613_val == 3) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00035", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto1A994613_val == 4) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00036", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto1A994613_val == 5) {
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00143", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlashFreezeStartingRandomQ_Init () {
    gt_FlashFreezeStartingRandomQ = TriggerCreate("gt_FlashFreezeStartingRandomQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flash Freeze Ending (Random) Q
//--------------------------------------------------------------------------------------------------
bool gt_FlashFreezeEndingRandomQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_deliverRetreatLine;
    int lv_randomLine;

    // Automatic Variable Declarations
    int auto9F0CE4B3_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_randomLine = RandomInt(1, 4);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_flashFreezeRetreatLineDelivered == false) && ((ObjectiveGetState(gv_objectiveDestroyDominionBase3) == c_objectiveStateCompleted) || (ObjectiveGetState(gv_objectiveDestroyDominionBase3) == c_objectiveStateHidden))) {
        lv_deliverRetreatLine = gf_FlashFreezeRetreat();
    }

    if ((lv_deliverRetreatLine == true)) {
        gv_flashFreezeRetreatLineDelivered = true;
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00150", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        auto9F0CE4B3_val = lv_randomLine;
        if (auto9F0CE4B3_val == 1) {
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00037", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto9F0CE4B3_val == 2) {
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00038", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto9F0CE4B3_val == 3) {
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00068", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto9F0CE4B3_val == 4) {
            libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00069", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
        }
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlashFreezeEndingRandomQ_Init () {
    gt_FlashFreezeEndingRandomQ = TriggerCreate("gt_FlashFreezeEndingRandomQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Next Flash Freeze Duration to 60s
//--------------------------------------------------------------------------------------------------
bool gt_SetNextFlashFreezeDurationto60s_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_flashFreeze_Duration = 60.0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetNextFlashFreezeDurationto60s_Init () {
    gt_SetNextFlashFreezeDurationto60s = TriggerCreate("gt_SetNextFlashFreezeDurationto60s_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Flash Freeze Duration to 60s Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFlashFreezeDurationto60sQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00139", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFlashFreezeDurationto60sQ_Init () {
    gt_TransmissionFlashFreezeDurationto60sQ = TriggerCreate("gt_TransmissionFlashFreezeDurationto60sQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Base Warning Top Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBaseWarningTopQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_flashFreezeActive == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(EventUnit()), 16.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 3), c_unitCountAlive) > 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gf_SupplyValueOfUnitGroup(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) > gf_SupplyValueOfUnitGroup(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(EventUnit()), 16.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)))) {
        TriggerQueueEnter();
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00151", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBaseWarningTopQ_Init () {
    gt_ProtossBaseWarningTopQ = TriggerCreate("gt_ProtossBaseWarningTopQ_Func");
    TriggerAddEventUnitRegion(gt_ProtossBaseWarningTopQ, null, RegionFromId(65), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Base Warning Bottom Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBaseWarningBottomQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_flashFreezeActive == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(EventUnit()), 16.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 3), c_unitCountAlive) > 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gf_SupplyValueOfUnitGroup(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) > gf_SupplyValueOfUnitGroup(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(EventUnit()), 16.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)))) {
        TriggerQueueEnter();
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00152", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBaseWarningBottomQ_Init () {
    gt_ProtossBaseWarningBottomQ = TriggerCreate("gt_ProtossBaseWarningBottomQ_Func");
    TriggerAddEventUnitRegion(gt_ProtossBaseWarningBottomQ, null, RegionFromId(67), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Base Warning Delays
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBaseWarningDelays_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_delayTop;
    bool lv_delayBottom;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(gt_ProtossBaseWarningTopQ) == true)) {
        lv_delayTop = true;
        TriggerEnable(gt_ProtossBaseWarningTopQ, false);
    }

    if ((TriggerIsEnabled(gt_ProtossBaseWarningBottomQ) == true)) {
        lv_delayBottom = true;
        TriggerEnable(gt_ProtossBaseWarningBottomQ, false);
    }

    Wait(10.0, c_timeAI);
    if ((lv_delayTop == true)) {
        TriggerEnable(gt_ProtossBaseWarningTopQ, true);
    }

    if ((lv_delayBottom == true)) {
        TriggerEnable(gt_ProtossBaseWarningBottomQ, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBaseWarningDelays_Init () {
    gt_ProtossBaseWarningDelays = TriggerCreate("gt_ProtossBaseWarningDelays_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Ping - Psi Link Spire 01
//--------------------------------------------------------------------------------------------------
bool gt_CreatePingPsiLinkSpire01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(7)), 6.0));
    gv_visibilitySpire01 = VisRevealerLastCreated();
    libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(7)), StringExternal("Param/Value/364408C3"));
    gv_pingSpire01 = PingLastCreated();
    libSwaC_gf_CreateReticleEffectAndTextTagAtPoint(libSwaC_ge_CampaginReticleType_ZergEnemy, libSwaC_ge_CampaginReticleSize_Large, null, UnitGetPosition(UnitFromId(7)));
    gv_spireActorModel01 = libNtve_gf_ActorLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreatePingPsiLinkSpire01_Init () {
    gt_CreatePingPsiLinkSpire01 = TriggerCreate("gt_CreatePingPsiLinkSpire01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Ping - Psi Link Spire 02-03
//--------------------------------------------------------------------------------------------------
bool gt_CreatePingPsiLinkSpire0203_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(UnitFromId(5)) == true)) {
        VisRevealerCreate(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(5)), 6.0));
        gv_visibilitySpire02 = VisRevealerLastCreated();
        libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(5)), StringExternal("Param/Value/29E5A8C2"));
        gv_pingSpire02 = PingLastCreated();
        libSwaC_gf_CreateReticleEffectAndTextTagAtPoint(libSwaC_ge_CampaginReticleType_ZergEnemy, libSwaC_ge_CampaginReticleSize_Large, null, UnitGetPosition(UnitFromId(5)));
        gv_spireActorModel02 = libNtve_gf_ActorLastCreated();
    }

    if ((UnitIsAlive(UnitFromId(6)) == true)) {
        VisRevealerCreate(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(6)), 6.0));
        gv_visibilitySpire03 = VisRevealerLastCreated();
        libSwaC_gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(6)), StringExternal("Param/Value/A3CDE1AF"));
        gv_pingSpire03 = PingLastCreated();
        libSwaC_gf_CreateReticleEffectAndTextTagAtPoint(libSwaC_ge_CampaginReticleType_ZergEnemy, libSwaC_ge_CampaginReticleSize_Large, null, UnitGetPosition(UnitFromId(6)));
        gv_spireActorModel03 = libNtve_gf_ActorLastCreated();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreatePingPsiLinkSpire0203_Init () {
    gt_CreatePingPsiLinkSpire0203 = TriggerCreate("gt_CreatePingPsiLinkSpire0203_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Psi Link Spire Damaged 1
//--------------------------------------------------------------------------------------------------
bool gt_PsiLinkSpireDamaged1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_spireActorModel01);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PsiLinkSpireDamaged1_Init () {
    gt_PsiLinkSpireDamaged1 = TriggerCreate("gt_PsiLinkSpireDamaged1_Func");
    TriggerAddEventUnitDamaged(gt_PsiLinkSpireDamaged1, UnitRefFromUnit(UnitFromId(7)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Psi Link Spire Damaged 2
//--------------------------------------------------------------------------------------------------
bool gt_PsiLinkSpireDamaged2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_spireActorModel02);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PsiLinkSpireDamaged2_Init () {
    gt_PsiLinkSpireDamaged2 = TriggerCreate("gt_PsiLinkSpireDamaged2_Func");
    TriggerAddEventUnitDamaged(gt_PsiLinkSpireDamaged2, UnitRefFromUnit(UnitFromId(5)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Psi Link Spire Damaged 3
//--------------------------------------------------------------------------------------------------
bool gt_PsiLinkSpireDamaged3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_spireActorModel03);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PsiLinkSpireDamaged3_Init () {
    gt_PsiLinkSpireDamaged3 = TriggerCreate("gt_PsiLinkSpireDamaged3_Func");
    TriggerAddEventUnitDamaged(gt_PsiLinkSpireDamaged3, UnitRefFromUnit(UnitFromId(6)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Psi Link Spire Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_PsiLinkSpireDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_psiLinkSpiresDestroyed = (gv_psiLinkSpiresDestroyed + 1);
    gv_victorySpirePoint = PointWithOffsetPolar(UnitGetPosition(EventUnit()), 3.0, 94.0);
    TriggerExecute(gt_ObjectiveDestroyPsiLinkSpiresUpdate, true, false);
    TriggerExecute(gt_CreatePingPsiLinkSpire0203, true, false);
    if ((EventUnit() == UnitFromId(7))) {
        PingDestroy(gv_pingSpire01);
        gv_pingSpire01 = c_invalidPingId;
        UnitRemove(UnitFromId(1226));
        ActorSend(ActorFromDoodad(DoodadFromId(412)), "Signal DoodadDeath");
        VisRevealerDestroy(gv_visibilitySpire01);
    }

    if ((EventUnit() == UnitFromId(5))) {
        PingDestroy(gv_pingSpire02);
        gv_pingSpire02 = c_invalidPingId;
        UnitRemove(UnitFromId(1227));
        ActorSend(ActorFromDoodad(DoodadFromId(245)), "Signal DoodadDeath");
        VisRevealerDestroy(gv_visibilitySpire02);
    }

    if ((EventUnit() == UnitFromId(6))) {
        PingDestroy(gv_pingSpire03);
        gv_pingSpire03 = c_invalidPingId;
        UnitRemove(UnitFromId(1228));
        VisRevealerDestroy(gv_visibilitySpire03);
    }

    if ((gv_psiLinkSpiresDestroyed == 3)) {
        TriggerExecute(gt_VictoryPsiLinkSpiresDestroyed, true, false);
    }

    if ((gv_psiLinkSpiresDestroyed == 2)) {
        Wait(2.0, c_timeGame);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZExpedition01MusicEvent05_FirstSpireDestroyed", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        Wait(2.0, c_timeGame);
        libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/A98A35CB"));
        TriggerExecute(gt_TransmissionSecondSpireDestroyedQ, true, true);
    }

    if ((gv_psiLinkSpiresDestroyed == 1)) {
        Wait(2.0, c_timeGame);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZExpedition01MusicEvent05_FirstSpireDestroyed", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        Wait(2.0, c_timeGame);
        libSwaC_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/57B4E18C"));
        TriggerExecute(gt_TransmissionFirstSpireDestroyedQ, true, true);
    }

    if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1) && (EventUnit() == UnitFromId(7))) {
        TriggerExecute(gt_RescueZergExpansion, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PsiLinkSpireDestroyed_Init () {
    gt_PsiLinkSpireDestroyed = TriggerCreate("gt_PsiLinkSpireDestroyed_Func");
    TriggerAddEventUnitDied(gt_PsiLinkSpireDestroyed, UnitRefFromUnit(UnitFromId(7)));
    TriggerAddEventUnitDied(gt_PsiLinkSpireDestroyed, UnitRefFromUnit(UnitFromId(5)));
    TriggerAddEventUnitDied(gt_PsiLinkSpireDestroyed, UnitRefFromUnit(UnitFromId(6)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Power Up Spire 01
//--------------------------------------------------------------------------------------------------
bool gt_PowerUpSpire01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spireUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_spireUnit = UnitFromId(7);
    while (!((UnitHasBehavior(lv_spireUnit, "FlashFreeze") == false))) {
        Wait(1.0, c_timeGame);
    }
    UnitBehaviorAdd(lv_spireUnit, "ProtossRadioTowerPowerUpA", lv_spireUnit, 1);
    Wait(20.0, c_timeGame);
    while (!((UnitHasBehavior(lv_spireUnit, "FlashFreeze") == false))) {
        Wait(1.0, c_timeGame);
    }
    UnitBehaviorRemove(lv_spireUnit, "ProtossRadioTowerPowerUpA", 1);
    UnitBehaviorAdd(lv_spireUnit, "ProtossRadioTowerPowerUpB", lv_spireUnit, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PowerUpSpire01_Init () {
    gt_PowerUpSpire01 = TriggerCreate("gt_PowerUpSpire01_Func");
    TriggerAddEventUnitRange(gt_PowerUpSpire01, null, UnitFromId(7), 15.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Power Up Spire 02
//--------------------------------------------------------------------------------------------------
bool gt_PowerUpSpire02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spireUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_spireUnit = UnitFromId(5);
    while (!((UnitHasBehavior(lv_spireUnit, "FlashFreeze") == false))) {
        Wait(1.0, c_timeGame);
    }
    UnitBehaviorAdd(lv_spireUnit, "ProtossRadioTowerPowerUpA", lv_spireUnit, 1);
    Wait(20.0, c_timeGame);
    while (!((UnitHasBehavior(lv_spireUnit, "FlashFreeze") == false))) {
        Wait(1.0, c_timeGame);
    }
    UnitBehaviorRemove(lv_spireUnit, "ProtossRadioTowerPowerUpA", 1);
    UnitBehaviorAdd(lv_spireUnit, "ProtossRadioTowerPowerUpB", lv_spireUnit, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PowerUpSpire02_Init () {
    gt_PowerUpSpire02 = TriggerCreate("gt_PowerUpSpire02_Func");
    TriggerAddEventUnitRange(gt_PowerUpSpire02, null, UnitFromId(5), 15.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Power Up Spire 03
//--------------------------------------------------------------------------------------------------
bool gt_PowerUpSpire03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spireUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_spireUnit = UnitFromId(6);
    while (!((UnitHasBehavior(lv_spireUnit, "FlashFreeze") == false))) {
        Wait(1.0, c_timeGame);
    }
    UnitBehaviorAdd(lv_spireUnit, "ProtossRadioTowerPowerUpA", lv_spireUnit, 1);
    Wait(20.0, c_timeGame);
    while (!((UnitHasBehavior(lv_spireUnit, "FlashFreeze") == false))) {
        Wait(1.0, c_timeGame);
    }
    UnitBehaviorRemove(lv_spireUnit, "ProtossRadioTowerPowerUpA", 1);
    UnitBehaviorAdd(lv_spireUnit, "ProtossRadioTowerPowerUpB", lv_spireUnit, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PowerUpSpire03_Init () {
    gt_PowerUpSpire03 = TriggerCreate("gt_PowerUpSpire03_Func");
    TriggerAddEventUnitRange(gt_PowerUpSpire03, null, UnitFromId(6), 15.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spire 01 Warp In Defenders
//--------------------------------------------------------------------------------------------------
bool gt_Spire01WarpInDefenders_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) <= 50.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_flashFreezeActive == false))) {
        Wait(0.5, c_timeAI);
    }
    if (((gv_gameOver == true) || (UnitIsAlive(UnitFromId(7)) == false))) {
        return true;
    }

    UnitIssueOrder(UnitFromId(1213), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(1210)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1213), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(1211)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1213), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(1212)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Spire01WarpInDefenders_Init () {
    gt_Spire01WarpInDefenders = TriggerCreate("gt_Spire01WarpInDefenders_Func");
    TriggerEnable(gt_Spire01WarpInDefenders, false);
    TriggerAddEventUnitDamaged(gt_Spire01WarpInDefenders, UnitRefFromUnit(UnitFromId(7)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spire 02 Warp In Defenders
//--------------------------------------------------------------------------------------------------
bool gt_Spire02WarpInDefenders_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) <= 75.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_flashFreezeActive == false))) {
        Wait(0.5, c_timeAI);
    }
    if (((gv_gameOver == true) || (UnitIsAlive(UnitFromId(5)) == false))) {
        return true;
    }

    UnitIssueOrder(UnitFromId(1213), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 9), PointFromId(1214)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1213), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(1215)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1213), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(1216)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Spire02WarpInDefenders_Init () {
    gt_Spire02WarpInDefenders = TriggerCreate("gt_Spire02WarpInDefenders_Func");
    TriggerEnable(gt_Spire02WarpInDefenders, false);
    TriggerAddEventUnitDamaged(gt_Spire02WarpInDefenders, UnitRefFromUnit(UnitFromId(5)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spire 03 Warp In Defenders
//--------------------------------------------------------------------------------------------------
bool gt_Spire03WarpInDefenders_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) <= 100.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_flashFreezeActive == false))) {
        Wait(0.5, c_timeAI);
    }
    if (((gv_gameOver == true) || (UnitIsAlive(UnitFromId(6)) == false))) {
        return true;
    }

    UnitIssueOrder(UnitFromId(1213), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 9), PointFromId(1219)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1213), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), PointFromId(1220)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1213), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 8), PointFromId(1218)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1213), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 14), PointFromId(1217)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Spire03WarpInDefenders_Init () {
    gt_Spire03WarpInDefenders = TriggerCreate("gt_Spire03WarpInDefenders_Func");
    TriggerEnable(gt_Spire03WarpInDefenders, false);
    TriggerAddEventUnitDamaged(gt_Spire03WarpInDefenders, UnitRefFromUnit(UnitFromId(6)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: First Spire Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFirstSpireDestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Expedition01|Line00049", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00074", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFirstSpireDestroyedQ_Init () {
    gt_TransmissionFirstSpireDestroyedQ = TriggerCreate("gt_TransmissionFirstSpireDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Second Spire Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSecondSpireDestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Expedition01|Line00050", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00051", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00052", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionSecondSpireDestroyedQ_Init () {
    gt_TransmissionSecondSpireDestroyedQ = TriggerCreate("gt_TransmissionSecondSpireDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Attack Wave Taunt Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossAttackWaveTauntQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomLine;

    // Automatic Variable Declarations
    int auto1F359055_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_randomLine = RandomInt(1, 3);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    auto1F359055_val = lv_randomLine;
    if (auto1F359055_val == 1) {
        TriggerQueueEnter();
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00056", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        TriggerQueueExit();
    }
    else if (auto1F359055_val == 2) {
        TriggerQueueEnter();
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00057", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        TriggerQueueExit();
    }
    else if (auto1F359055_val == 3) {
        TriggerQueueEnter();
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00058", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        TriggerQueueExit();
    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossAttackWaveTauntQ_Init () {
    gt_ProtossAttackWaveTauntQ = TriggerCreate("gt_ProtossAttackWaveTauntQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rescue Zerg Expansion
//--------------------------------------------------------------------------------------------------
bool gt_RescueZergExpansion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4F35D5D3_g;
    int auto4F35D5D3_u;
    unit auto4F35D5D3_var;
    unitgroup autoD5E63E6D_g;
    int autoD5E63E6D_u;
    unit autoD5E63E6D_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Hatchery", gv_pLAYER_01_USER, RegionFromId(44), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Lair", gv_pLAYER_01_USER, RegionFromId(44), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Hive", gv_pLAYER_01_USER, RegionFromId(44), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(12), 15.0, false);
    TriggerExecute(gt_TransmissionDropZergExpansionQ, true, false);
    Wait(6.0, c_timeGame);
    libSwaC_gf_CreateDropPodForZergBuilding("Hatchery", RegionGetCenter(RegionFromId(57)), gv_pLAYER_01_USER, false);
    libSwaC_gf_SetHatcheryRallyPoint(UnitLastCreated(), null);
    Wait(2.5, c_timeGame);
    auto4F35D5D3_g = UnitGroup("UnbuildableRocksSmallUnit", 0, RegionFromId(57), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4F35D5D3_u = UnitGroupCount(auto4F35D5D3_g, c_unitCountAll);
    for (;; auto4F35D5D3_u -= 1) {
        auto4F35D5D3_var = UnitGroupUnitFromEnd(auto4F35D5D3_g, auto4F35D5D3_u);
        if (auto4F35D5D3_var == null) { break; }
        UnitKill(auto4F35D5D3_var);
    }
    autoD5E63E6D_g = UnitGroup("UnbuildableRocksUnit", 0, RegionFromId(57), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD5E63E6D_u = UnitGroupCount(autoD5E63E6D_g, c_unitCountAll);
    for (;; autoD5E63E6D_u -= 1) {
        autoD5E63E6D_var = UnitGroupUnitFromEnd(autoD5E63E6D_g, autoD5E63E6D_u);
        if (autoD5E63E6D_var == null) { break; }
        UnitKill(autoD5E63E6D_var);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpineCrawlerUprooted", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(195));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("SpineCrawlerRoot", 0), PointFromId(195)), c_orderQueueReplace);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 0)) {
        UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("SpineCrawlerRoot", 0), true);
    }

    TriggerEnable(gt_RootCommandIssued, true);
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Zerg, PointFromId(195), UnitLastCreatedGroup(), false, gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RescueZergExpansion_Init () {
    gt_RescueZergExpansion = TriggerCreate("gt_RescueZergExpansion_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Root Command Issued
//--------------------------------------------------------------------------------------------------
bool gt_RootCommandIssued_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("SpineCrawlerRoot", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RootCommandIssued_Init () {
    gt_RootCommandIssued = TriggerCreate("gt_RootCommandIssued_Func");
    TriggerEnable(gt_RootCommandIssued, false);
    TriggerAddEventUnitAbility(gt_RootCommandIssued, null, AbilityCommand("SpineCrawlerRoot", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Drop Zerg Expansion Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDropZergExpansionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(57)), 2.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/06E759C8"), null, RegionGetCenter(RegionFromId(57)));
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Expedition01|Line00115", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDropZergExpansionQ_Init () {
    gt_TransmissionDropZergExpansionQ = TriggerCreate("gt_TransmissionDropZergExpansionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Kerrigan Finds Dead Queen Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionKerriganFindsDeadQueenQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libSwaC_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(18)), 2.0, Color(100.00, 100.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/97445FC7"), null, UnitFromId(18));
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Expedition01|Line00024", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionKerriganFindsDeadQueenQ_Init () {
    gt_TransmissionKerriganFindsDeadQueenQ = TriggerCreate("gt_TransmissionKerriganFindsDeadQueenQ_Func");
    TriggerAddEventUnitRegion(gt_TransmissionKerriganFindsDeadQueenQ, UnitRefFromVariable("gv_kerrigan"), RegionFromId(2), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Bonus Objective Q
//--------------------------------------------------------------------------------------------------
bool gt_ShowBonusObjectiveQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_RemindPlayertoCompleteBonusObjective("ZExpedition01Objective05", 600.0);
    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00123", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_Expedition01|Line00124", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    TriggerExecute(gt_ObjectiveUrsadonMatriarchsCreate, true, true);
    TriggerExecute(gt_CreateUrsadonMatriarchPings, true, false);
    if ((libSwaC_gf_MissionStatusCheck("ZChar1", libSwaC_ge_MissionStatus_Completed) == false) && (libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
        Wait(2.0, c_timeReal);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Speech);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_MultiMissionCallouts|Line00031", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_MultiMissionCallouts|Line00032", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowBonusObjectiveQ_Init () {
    gt_ShowBonusObjectiveQ = TriggerCreate("gt_ShowBonusObjectiveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Ursadon Matriarch Pings
//--------------------------------------------------------------------------------------------------
bool gt_CreateUrsadonMatriarchPings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(593)), StringExternal("Param/Value/56031F2D"));
    gv_ursadonMatriarchPingNorth = PingLastCreated();
    Wait(0.5, c_timeGame);
    libSwaC_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(595)), StringExternal("Param/Value/E6EC6B1E"));
    gv_ursadonMatriarchPingWest = PingLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateUrsadonMatriarchPings_Init () {
    gt_CreateUrsadonMatriarchPings = TriggerCreate("gt_CreateUrsadonMatriarchPings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Matriarch Killed - Upgrade Zerg Q
//--------------------------------------------------------------------------------------------------
bool gt_MatriarchKilledUpgradeZergQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoB9A5E93F_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    autoB9A5E93F_val = gv_matriarchsKilled;
    if (autoB9A5E93F_val == 1) {
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "ImmuneToFlashFreezeLevel2", gv_pLAYER_01_USER);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00127", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoB9A5E93F_val == 2) {
        TriggerEnable(TriggerGetCurrent(), false);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "ImmuneToFlashFreezeLevel1", gv_pLAYER_01_USER);
        libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00128", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        if ((libSwaC_gf_MissionStatusCheck("ZChar1", libSwaC_ge_MissionStatus_Completed) == false) && (libHots_gf_DifficultyValueInt2(1, 1, 0) == 1)) {
            libSwaC_gf_SendTransmissionCampaign(gv_kerrigan, "zMission_MultiMissionCallouts|Line00015", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }

    }
    else {
    }
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MatriarchKilledUpgradeZergQ_Init () {
    gt_MatriarchKilledUpgradeZergQ = TriggerCreate("gt_MatriarchKilledUpgradeZergQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ursadon Attack - Player Base
//--------------------------------------------------------------------------------------------------
bool gt_UrsadonAttackPlayerBase_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoBC8FC450_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoBC8FC450_val = gv_flashFreezeCount;
    if (autoBC8FC450_val == 3) {
        gf_CreateUrsadonAttackAtLocation(PointFromId(632), PointFromId(116));
        gf_CreateUrsadonAttackAtLocation(PointFromId(632), PointFromId(116));
        gf_CreateUrsadonAttackAtLocation(PointFromId(632), PointFromId(116));
        if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
            gf_CreateUrsadonAttackAtLocation(PointFromId(632), PointFromId(116));
            gf_CreateUrsadonAttackAtLocation(PointFromId(632), PointFromId(116));
            gf_CreateUrsadonAttackAtLocation(PointFromId(632), PointFromId(116));
            gf_CreateUrsadonAttackAtLocation(PointFromId(632), PointFromId(116));
        }

    }
    else if (autoBC8FC450_val == 5) {
        gf_CreateUrsadonAttackAtLocation(PointFromId(631), PointFromId(116));
        gf_CreateUrsadonAttackAtLocation(PointFromId(631), PointFromId(116));
        gf_CreateUrsadonAttackAtLocation(PointFromId(631), PointFromId(116));
        if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
            gf_CreateUrsadonAttackAtLocation(PointFromId(631), PointFromId(116));
            gf_CreateUrsadonAttackAtLocation(PointFromId(631), PointFromId(116));
            gf_CreateUrsadonAttackAtLocation(PointFromId(631), PointFromId(116));
            gf_CreateUrsadonAttackAtLocation(PointFromId(631), PointFromId(116));
            gf_CreateUrsadonAttackAtLocation(PointFromId(631), PointFromId(116));
        }

    }
    else if (autoBC8FC450_val == 7) {
        gf_CreateUrsadonAttackAtLocation(PointFromId(632), PointFromId(116));
        gf_CreateUrsadonAttackAtLocation(PointFromId(632), PointFromId(116));
        gf_CreateUrsadonAttackAtLocation(PointFromId(632), PointFromId(116));
        if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
            gf_CreateUrsadonAttackAtLocation(PointFromId(632), PointFromId(116));
            gf_CreateUrsadonAttackAtLocation(PointFromId(632), PointFromId(116));
            gf_CreateUrsadonAttackAtLocation(PointFromId(632), PointFromId(116));
            gf_CreateUrsadonAttackAtLocation(PointFromId(632), PointFromId(116));
            gf_CreateUrsadonAttackAtLocation(PointFromId(632), PointFromId(116));
        }

    }
    else if (autoBC8FC450_val == 9) {
        gf_CreateUrsadonAttackAtLocation(PointFromId(632), PointFromId(116));
        gf_CreateUrsadonAttackAtLocation(PointFromId(632), PointFromId(116));
        gf_CreateUrsadonAttackAtLocation(PointFromId(631), PointFromId(116));
        gf_CreateUrsadonAttackAtLocation(PointFromId(631), PointFromId(116));
        if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
            gf_CreateUrsadonAttackAtLocation(PointFromId(632), PointFromId(116));
            gf_CreateUrsadonAttackAtLocation(PointFromId(632), PointFromId(116));
            gf_CreateUrsadonAttackAtLocation(PointFromId(632), PointFromId(116));
            gf_CreateUrsadonAttackAtLocation(PointFromId(631), PointFromId(116));
            gf_CreateUrsadonAttackAtLocation(PointFromId(631), PointFromId(116));
            gf_CreateUrsadonAttackAtLocation(PointFromId(631), PointFromId(116));
        }

    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UrsadonAttackPlayerBase_Init () {
    gt_UrsadonAttackPlayerBase = TriggerCreate("gt_UrsadonAttackPlayerBase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ursadon Ambush - North Bonus Area
//--------------------------------------------------------------------------------------------------
bool gt_UrsadonAmbushNorthBonusArea_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(61)), 4.0), 15.0, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(427)), 4.0), 15.0, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(309)), 4.0), 15.0, false);
    UnitBehaviorAdd(UnitFromId(61), "YetiJump", UnitFromId(61), 1);
    UnitBehaviorAdd(UnitFromId(427), "YetiJump", UnitFromId(427), 1);
    UnitBehaviorAdd(UnitFromId(309), "YetiJump", UnitFromId(309), 1);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(UnitFromId(61), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(35))), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(427), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(35))), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(309), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(35))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UrsadonAmbushNorthBonusArea_Init () {
    gt_UrsadonAmbushNorthBonusArea = TriggerCreate("gt_UrsadonAmbushNorthBonusArea_Func");
    TriggerAddEventUnitRegion(gt_UrsadonAmbushNorthBonusArea, null, RegionFromId(35), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ursadon Attack - Center North Attack
//--------------------------------------------------------------------------------------------------
bool gt_UrsadonAttackCenterNorthAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoAF3A9310_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_04_PROTOSS, RegionFromId(52), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 1), c_unitCountAlive) > 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_ursadon_CenterNorth = (gv_ursadon_CenterNorth + 1);
        autoAF3A9310_val = gv_ursadon_CenterNorth;
        if (autoAF3A9310_val == 1) {
            gf_CreateUrsadonAttackAtLocation(PointFromId(1058), PointFromId(1060));
            Wait(0.5, c_timeGame);
            gf_CreateUrsadonAttackAtLocation(PointFromId(1058), PointFromId(1060));
            Wait(0.5, c_timeGame);
            gf_CreateUrsadonAttackAtLocation(PointFromId(1058), PointFromId(1060));
            Wait(0.5, c_timeGame);
            gf_CreateUrsadonAttackAtLocation(PointFromId(1058), PointFromId(1060));
            if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
                gf_CreateUrsadonAttackAtLocation(PointFromId(1058), PointFromId(1060));
                Wait(0.5, c_timeGame);
                gf_CreateUrsadonAttackAtLocation(PointFromId(1058), PointFromId(1060));
                Wait(0.5, c_timeGame);
                gf_CreateUrsadonAttackAtLocation(PointFromId(1058), PointFromId(1060));
            }

        }
        else if (autoAF3A9310_val == 2) {
            gf_CreateUrsadonAttackAtLocation(PointFromId(1058), PointFromId(1060));
            Wait(0.5, c_timeGame);
            gf_CreateUrsadonAttackAtLocation(PointFromId(1058), PointFromId(1060));
            Wait(0.5, c_timeGame);
            gf_CreateUrsadonAttackAtLocation(PointFromId(1058), PointFromId(1060));
            Wait(0.5, c_timeGame);
            gf_CreateUrsadonAttackAtLocation(PointFromId(1058), PointFromId(1060));
            if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
                gf_CreateUrsadonAttackAtLocation(PointFromId(1058), PointFromId(1060));
                Wait(0.5, c_timeGame);
                gf_CreateUrsadonAttackAtLocation(PointFromId(1058), PointFromId(1060));
                Wait(0.5, c_timeGame);
                gf_CreateUrsadonAttackAtLocation(PointFromId(1058), PointFromId(1060));
            }

        }
        else if (autoAF3A9310_val == 3) {
            return true;
        }
        else {
        }
        Wait(45.0, c_timeGame);
        while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 1), c_unitCountAlive) > 0))) {
            Wait(0.9, c_timeGame);
        }
        TriggerExecute(TriggerGetCurrent(), false, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UrsadonAttackCenterNorthAttack_Init () {
    gt_UrsadonAttackCenterNorthAttack = TriggerCreate("gt_UrsadonAttackCenterNorthAttack_Func");
    TriggerAddEventUnitRegion(gt_UrsadonAttackCenterNorthAttack, null, RegionFromId(50), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ursadon Attack - Center South Attack
//--------------------------------------------------------------------------------------------------
bool gt_UrsadonAttackCenterSouthAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto1C8625B8_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_04_PROTOSS, RegionFromId(53), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 1), c_unitCountAlive) > 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_ursadon_CenterSouth = (gv_ursadon_CenterSouth + 1);
        auto1C8625B8_val = gv_ursadon_CenterSouth;
        if (auto1C8625B8_val == 1) {
            gf_CreateUrsadonAttackAtLocation(PointFromId(1058), PointFromId(1059));
            Wait(0.5, c_timeGame);
            gf_CreateUrsadonAttackAtLocation(PointFromId(1058), PointFromId(1059));
            Wait(0.5, c_timeGame);
            gf_CreateUrsadonAttackAtLocation(PointFromId(1058), PointFromId(1059));
            Wait(0.5, c_timeGame);
            gf_CreateUrsadonAttackAtLocation(PointFromId(1058), PointFromId(1059));
            if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
                gf_CreateUrsadonAttackAtLocation(PointFromId(1058), PointFromId(1059));
                Wait(0.5, c_timeGame);
                gf_CreateUrsadonAttackAtLocation(PointFromId(1058), PointFromId(1059));
                Wait(0.5, c_timeGame);
                gf_CreateUrsadonAttackAtLocation(PointFromId(1058), PointFromId(1059));
            }

        }
        else if (auto1C8625B8_val == 2) {
            gf_CreateUrsadonAttackAtLocation(PointFromId(1058), PointFromId(1059));
            Wait(0.5, c_timeGame);
            gf_CreateUrsadonAttackAtLocation(PointFromId(1058), PointFromId(1059));
            Wait(0.5, c_timeGame);
            gf_CreateUrsadonAttackAtLocation(PointFromId(1058), PointFromId(1059));
            Wait(0.5, c_timeGame);
            gf_CreateUrsadonAttackAtLocation(PointFromId(1058), PointFromId(1059));
            if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
                gf_CreateUrsadonAttackAtLocation(PointFromId(1058), PointFromId(1059));
                Wait(0.5, c_timeGame);
                gf_CreateUrsadonAttackAtLocation(PointFromId(1058), PointFromId(1059));
                Wait(0.5, c_timeGame);
                gf_CreateUrsadonAttackAtLocation(PointFromId(1058), PointFromId(1059));
            }

        }
        else if (auto1C8625B8_val == 3) {
            return true;
        }
        else {
        }
        Wait(45.0, c_timeGame);
        while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 1), c_unitCountAlive) > 0))) {
            Wait(0.9, c_timeGame);
        }
        TriggerExecute(TriggerGetCurrent(), false, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UrsadonAttackCenterSouthAttack_Init () {
    gt_UrsadonAttackCenterSouthAttack = TriggerCreate("gt_UrsadonAttackCenterSouthAttack_Func");
    TriggerAddEventUnitRegion(gt_UrsadonAttackCenterSouthAttack, null, RegionFromId(49), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ursadon Attack - South Protoss Base
//--------------------------------------------------------------------------------------------------
bool gt_UrsadonAttackSouthProtossBase_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto5C545FFA_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_05_PROTOSS, RegionFromId(51), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_ursadon_SouthProtossBase = (gv_ursadon_SouthProtossBase + 1);
        auto5C545FFA_val = gv_ursadon_SouthProtossBase;
        if (auto5C545FFA_val == 1) {
            gf_CreateUrsadonAttackAtLocation(PointFromId(1047), PointFromId(1062));
            Wait(0.5, c_timeGame);
            gf_CreateUrsadonAttackAtLocation(PointFromId(1047), PointFromId(1062));
            Wait(0.5, c_timeGame);
            gf_CreateUrsadonAttackAtLocation(PointFromId(1047), PointFromId(1062));
            if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
                gf_CreateUrsadonAttackAtLocation(PointFromId(1047), PointFromId(1062));
                Wait(0.5, c_timeGame);
                gf_CreateUrsadonAttackAtLocation(PointFromId(1047), PointFromId(1062));
                Wait(0.5, c_timeGame);
                gf_CreateUrsadonAttackAtLocation(PointFromId(1047), PointFromId(1062));
            }

        }
        else if (auto5C545FFA_val == 2) {
            gf_CreateUrsadonAttackAtLocation(PointFromId(1047), PointFromId(1062));
            Wait(0.5, c_timeGame);
            gf_CreateUrsadonAttackAtLocation(PointFromId(1047), PointFromId(1062));
            Wait(0.5, c_timeGame);
            gf_CreateUrsadonAttackAtLocation(PointFromId(1047), PointFromId(1062));
            if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
                gf_CreateUrsadonAttackAtLocation(PointFromId(1047), PointFromId(1062));
                Wait(0.5, c_timeGame);
                gf_CreateUrsadonAttackAtLocation(PointFromId(1047), PointFromId(1062));
                Wait(0.5, c_timeGame);
                gf_CreateUrsadonAttackAtLocation(PointFromId(1047), PointFromId(1062));
            }

        }
        else if (auto5C545FFA_val == 3) {
            return true;
        }
        else {
        }
        Wait(RandomFixed(45.0, 90.0), c_timeGame);
        while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            Wait(0.9, c_timeGame);
        }
        TriggerExecute(TriggerGetCurrent(), false, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UrsadonAttackSouthProtossBase_Init () {
    gt_UrsadonAttackSouthProtossBase = TriggerCreate("gt_UrsadonAttackSouthProtossBase_Func");
    TriggerAddEventUnitRegion(gt_UrsadonAttackSouthProtossBase, null, RegionFromId(48), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ice Bridge Cracking
//--------------------------------------------------------------------------------------------------
bool gt_IceBridgeCracking_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(496)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IceBridgeCracking_Init () {
    gt_IceBridgeCracking = TriggerCreate("gt_IceBridgeCracking_Func");
    TriggerAddEventUnitRegion(gt_IceBridgeCracking, null, RegionFromId(13), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fog Change01
//--------------------------------------------------------------------------------------------------
bool gt_FogChange01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    FogSetDensityOverTime(0.15, 4.0);
    FogSetFallOffOverTime(0.28, 4.0);
    FogSetStartHeightOverTime(4.0, 4.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FogChange01_Init () {
    gt_FogChange01 = TriggerCreate("gt_FogChange01_Func");
    TriggerAddEventUnitRegion(gt_FogChange01, null, RegionFromId(9), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fog Change02
//--------------------------------------------------------------------------------------------------
bool gt_FogChange02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionFlashFreezeisNearQ, true, false);
    FogSetDensityOverTime(0.125, 4.0);
    FogSetFallOffOverTime(0.24, 4.0);
    FogSetStartHeightOverTime(2.0, 4.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FogChange02_Init () {
    gt_FogChange02 = TriggerCreate("gt_FogChange02_Func");
    TriggerAddEventUnitRegion(gt_FogChange02, null, RegionFromId(10), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ground Ice Collapse 01
//--------------------------------------------------------------------------------------------------
bool gt_GroundIceCollapse01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(304)), c_animNameDefault, "Stand Work Start", c_animFlagNonLooping, c_animTimeDefault);
    Wait(2.66, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(304)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GroundIceCollapse01_Init () {
    gt_GroundIceCollapse01 = TriggerCreate("gt_GroundIceCollapse01_Func");
    TriggerAddEventUnitRegion(gt_GroundIceCollapse01, null, RegionFromId(20), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ground Ice Collapse 02
//--------------------------------------------------------------------------------------------------
bool gt_GroundIceCollapse02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(308)), c_animNameDefault, "Stand Work Start", c_animFlagNonLooping, c_animTimeDefault);
    Wait(2.66, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(308)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GroundIceCollapse02_Init () {
    gt_GroundIceCollapse02 = TriggerCreate("gt_GroundIceCollapse02_Func");
    TriggerAddEventUnitRegion(gt_GroundIceCollapse02, null, RegionFromId(21), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ground Ice Cracking 01
//--------------------------------------------------------------------------------------------------
bool gt_GroundIceCracking01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(506)), c_animNameDefault, "Stand Work Start", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.0, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(506)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GroundIceCracking01_Init () {
    gt_GroundIceCracking01 = TriggerCreate("gt_GroundIceCracking01_Func");
    TriggerAddEventUnitRegion(gt_GroundIceCracking01, null, RegionFromId(25), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ground Ice Cracking 02
//--------------------------------------------------------------------------------------------------
bool gt_GroundIceCracking02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(505)), c_animNameDefault, "Stand Work Start", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.0, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(505)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GroundIceCracking02_Init () {
    gt_GroundIceCracking02 = TriggerCreate("gt_GroundIceCracking02_Func");
    TriggerAddEventUnitRegion(gt_GroundIceCracking02, null, RegionFromId(30), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ice Wall Collapse 01
//--------------------------------------------------------------------------------------------------
bool gt_IceWallCollapse01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(674)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(6.667, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(674)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IceWallCollapse01_Init () {
    gt_IceWallCollapse01 = TriggerCreate("gt_IceWallCollapse01_Func");
    TriggerAddEventUnitRegion(gt_IceWallCollapse01, null, RegionFromId(38), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ice Wall Collapse 02
//--------------------------------------------------------------------------------------------------
bool gt_IceWallCollapse02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1278)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(6.667, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1278)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IceWallCollapse02_Init () {
    gt_IceWallCollapse02 = TriggerCreate("gt_IceWallCollapse02_Func");
    TriggerAddEventUnitRegion(gt_IceWallCollapse02, null, RegionFromId(39), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ice Wall Collapse 03
//--------------------------------------------------------------------------------------------------
bool gt_IceWallCollapse03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(676)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(6.667, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(676)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IceWallCollapse03_Init () {
    gt_IceWallCollapse03 = TriggerCreate("gt_IceWallCollapse03_Func");
    TriggerAddEventUnitRegion(gt_IceWallCollapse03, null, RegionFromId(36), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ice Wall Collapse 04
//--------------------------------------------------------------------------------------------------
bool gt_IceWallCollapse04_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(677)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(6.667, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(677)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IceWallCollapse04_Init () {
    gt_IceWallCollapse04 = TriggerCreate("gt_IceWallCollapse04_Func");
    TriggerAddEventUnitRegion(gt_IceWallCollapse04, null, RegionFromId(37), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ice Wall Collapse 05
//--------------------------------------------------------------------------------------------------
bool gt_IceWallCollapse05_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(678)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(6.667, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(678)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IceWallCollapse05_Init () {
    gt_IceWallCollapse05 = TriggerCreate("gt_IceWallCollapse05_Func");
    TriggerAddEventUnitRegion(gt_IceWallCollapse05, null, RegionFromId(40), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ice Wall Collapse 06
//--------------------------------------------------------------------------------------------------
bool gt_IceWallCollapse06_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(906)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(6.667, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(906)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IceWallCollapse06_Init () {
    gt_IceWallCollapse06 = TriggerCreate("gt_IceWallCollapse06_Func");
    TriggerAddEventUnitRegion(gt_IceWallCollapse06, null, RegionFromId(41), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    cai_start("aiA6290BBE", gv_pLAYER_10_URSADON);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        TriggerExecute(gt_StartUpgradesHard, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Upgrades (Hard)
//--------------------------------------------------------------------------------------------------
bool gt_StartUpgradesHard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto07E3F054_g;
    int auto07E3F054_var;
    playergroup auto5EB6E772_g;
    int auto5EB6E772_var;
    playergroup auto188DCC98_g;
    int auto188DCC98_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(300.0, c_timeAI);
    auto07E3F054_g = gv_protossPlayers;
    auto07E3F054_var = -1;
    while (true) {
        auto07E3F054_var = PlayerGroupNextPlayer(auto07E3F054_g, auto07E3F054_var);
        if (auto07E3F054_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto07E3F054_var, "ProtossGroundWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto07E3F054_var, "ProtossAirWeaponsLevel1", 1);
    }
    Wait(300.0, c_timeAI);
    auto5EB6E772_g = gv_protossPlayers;
    auto5EB6E772_var = -1;
    while (true) {
        auto5EB6E772_var = PlayerGroupNextPlayer(auto5EB6E772_g, auto5EB6E772_var);
        if (auto5EB6E772_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto5EB6E772_var, "ProtossGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto5EB6E772_var, "ProtossAirArmorsLevel1", 1);
    }
    Wait(300.0, c_timeAI);
    auto188DCC98_g = gv_protossPlayers;
    auto188DCC98_var = -1;
    while (true) {
        auto188DCC98_var = PlayerGroupNextPlayer(auto188DCC98_g, auto188DCC98_var);
        if (auto188DCC98_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto188DCC98_var, "ProtossShieldsLevel1", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartUpgradesHard_Init () {
    gt_StartUpgradesHard = TriggerCreate("gt_StartUpgradesHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_AIAttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    cai_startall();
    cai_runall();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIAttackWaves_Init () {
    gt_AIAttackWaves = TriggerCreate("gt_AIAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveMinerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveMinerals_Init () {
    gt_AIGiveMinerals = TriggerCreate("gt_AIGiveMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_04_PROTOSS, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_05_PROTOSS, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_06_PROTOSS, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveGas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveGas_Init () {
    gt_AIGiveGas = TriggerCreate("gt_AIGiveGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_04_PROTOSS, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_05_PROTOSS, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_06_PROTOSS, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Destroy Unfrozen Structures
//--------------------------------------------------------------------------------------------------
bool gt_AchievementDestroyUnfrozenStructures_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libHots_gf_DifficultyValueInt2(1, 1, 1) == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("ZKaldir01_2", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementDestroyUnfrozenStructures_Init () {
    gt_AchievementDestroyUnfrozenStructures = TriggerCreate("gt_AchievementDestroyUnfrozenStructures_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Timed Run N/H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementTimedRunNH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libHots_gf_DifficultyValueInt2(0, 1, 1) == 1))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_speedRunTimer) > 0.0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("ZExpedition01_3", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementTimedRunNH_Init () {
    gt_AchievementTimedRunNH = TriggerCreate("gt_AchievementTimedRunNH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Completionist Run H
//--------------------------------------------------------------------------------------------------
bool gt_AchievementCompletionistRunH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TimerGetRemaining(gv_completionistTimer) > 0.0))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveDestroyDominionBase22) == c_objectiveStateCompleted))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveRescueBrood) == c_objectiveStateCompleted))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CampaignAwardAchievement("Mastery_Kaldir1", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementCompletionistRunH_Init () {
    gt_AchievementCompletionistRunH = TriggerCreate("gt_AchievementCompletionistRunH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Largest Zerg Force
//--------------------------------------------------------------------------------------------------
bool gt_LargestZergForce_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentForce;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentForce = PlayerScoreValueGetAsInt(gv_pLAYER_01_USER, "UnitsActiveCount");
    if ((lv_currentForce > gv_largestZergForce)) {
        gv_largestZergForce = lv_currentForce;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LargestZergForce_Init () {
    gt_LargestZergForce = TriggerCreate("gt_LargestZergForce_Func");
    TriggerAddEventTimePeriodic(gt_LargestZergForce, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Kerrigan Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatKerriganDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_baseRescued == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/364F9533"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatKerriganDead_Init () {
    gt_DefeatKerriganDead = TriggerCreate("gt_DefeatKerriganDead_Func");
    TriggerAddEventUnitDied(gt_DefeatKerriganDead, UnitRefFromVariable("gv_kerrigan"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libSwaC_gf_DisplayCampaignMessage(PlayerGroupAll(), libSwaC_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/206446C3"), libSwaC_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerEnable(gt_DefeatBaseDead, false);
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Psi Link Spires Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryPsiLinkSpiresDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(7)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(5)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(6)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryPsiLinkSpiresDestroyed_Init () {
    gt_VictoryPsiLinkSpiresDestroyed = TriggerCreate("gt_VictoryPsiLinkSpiresDestroyed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerPause(gv_speedRunTimer, true);
    TimerPause(gv_completionistTimer, true);
    SoundStop(gv_flashFreezeSound, true);
    libNtve_gf_MakeUnitInvulnerable(gv_kerrigan, true);
    gv_gameOver = true;
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDestroyPsiLinkSpiresComplete, true, true);
    libSwaC_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitPauseAll(true);
    AITimePause(true);
    if ((ObjectiveGetState(gv_objectiveDestroyDominionBase22) == c_objectiveStateCompleted)) {
        libSwaC_gf_CampaignAwardAchievement("ZKaldir01_1", gv_pLAYER_01_USER);
    }

    TriggerExecute(gt_AchievementTimedRunNH, true, true);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        TriggerExecute(gt_AchievementCompletionistRunH, true, true);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (GameGetMissionTime() < 541.0)) {
        libSwaC_gf_CampaignAwardAchievement("Anniversary_ZExpedition01", gv_pLAYER_01_USER);
        TriggerDebugOutput(1, StringExternal("Param/Value/7A9CC845"), false);
    }

    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/3FA0CFC4"), IntToText(libNtve_gf_UnitGetPropertyKills(gv_kerrigan, c_unitPropCurrent)));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/E1516A06"), IntToText(PlayerScoreValueGetAsInt(gv_pLAYER_01_USER, "UnitsKilledCount")));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/4CEA34A2"), IntToText(gv_protossKilledDuringFlashFreeze));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/35F03014"), IntToText(gv_largestZergForce));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/55ADACBF"), IntToText(gv_unfrozenStructureDestroyed));
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Defeat, false);
    TriggerEnable(gt_DefeatCheat, false);
    gv_gameOver = true;
    SoundStop(gv_flashFreezeSound, true);
    libSwaC_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Victory, false);
    TriggerEnable(gt_VictoryCheat, false);
    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Mission Help Q
//--------------------------------------------------------------------------------------------------
bool gt_TipMissionHelpQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libSwaC_gf_DisplayMissionTip(StringExternal("Param/Value/DF2E6FF8"));
    Wait(libSwaC_gv_campaignHintDelay, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipMissionHelpQ_Init () {
    gt_TipMissionHelpQ = TriggerCreate("gt_TipMissionHelpQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Collect Ursadon Essence Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCollectUrsadonEssenceCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZExpedition01Objective2");
    libSwaC_gf_SetMissionObjectiveProgress2("ZExpedition01Objective2", gv_ursadonEssence_Collected, false, null, false);
    gv_objectiveDestroyDominionBase3 = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCollectUrsadonEssenceCreate_Init () {
    gt_ObjectiveCollectUrsadonEssenceCreate = TriggerCreate("gt_ObjectiveCollectUrsadonEssenceCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Collect Ursadon Essence Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCollectUrsadonEssenceComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveCollectUrsadonEssenceCreate, true, false);
    ObjectiveSetState(gv_objectiveDestroyDominionBase3, c_objectiveStateCompleted);
    libSwaC_gf_SetMissionObjectiveProgress2("ZExpedition01Objective2", gv_ursadonEssence_Collected, false, null, false);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCollectUrsadonEssenceComplete_Init () {
    gt_ObjectiveCollectUrsadonEssenceComplete = TriggerCreate("gt_ObjectiveCollectUrsadonEssenceComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Collect Ursadon Essence Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCollectUrsadonEssenceFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveCollectUrsadonEssenceCreate, true, false);
    ObjectiveSetState(gv_objectiveDestroyDominionBase3, c_objectiveStateFailed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCollectUrsadonEssenceFailed_Init () {
    gt_ObjectiveCollectUrsadonEssenceFailed = TriggerCreate("gt_ObjectiveCollectUrsadonEssenceFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Recover Lost Brood Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRecoverLostBroodCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZExpedition01Objective1");
    gv_objectiveDestroyDominionBase = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRecoverLostBroodCreate_Init () {
    gt_ObjectiveRecoverLostBroodCreate = TriggerCreate("gt_ObjectiveRecoverLostBroodCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Recover Lost Brood Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRecoverLostBroodComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveRecoverLostBroodCreate, true, false);
    ObjectiveSetState(gv_objectiveDestroyDominionBase, c_objectiveStateCompleted);
    libSwaC_gf_SetMissionObjectiveProgress2("ZExpedition01Objective1", 1, true, null, false);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRecoverLostBroodComplete_Init () {
    gt_ObjectiveRecoverLostBroodComplete = TriggerCreate("gt_ObjectiveRecoverLostBroodComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Recover Lost Brood Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRecoverLostBroodFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveRecoverLostBroodCreate, true, false);
    ObjectiveSetState(gv_objectiveDestroyDominionBase, c_objectiveStateFailed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRecoverLostBroodFailed_Init () {
    gt_ObjectiveRecoverLostBroodFailed = TriggerCreate("gt_ObjectiveRecoverLostBroodFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Psi Link Spires Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPsiLinkSpiresCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZExpedition01Objective04");
    libSwaC_gf_SetMissionObjectiveProgress2("ZExpedition01Objective04", gv_psiLinkSpiresDestroyed, true, null, true);
    gv_objectiveDestroyDominionBase22 = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPsiLinkSpiresCreate_Init () {
    gt_ObjectiveDestroyPsiLinkSpiresCreate = TriggerCreate("gt_ObjectiveDestroyPsiLinkSpiresCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Psi Link Spires Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPsiLinkSpiresUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyPsiLinkSpiresCreate, true, false);
    libSwaC_gf_SetMissionObjectiveProgress2("ZExpedition01Objective04", gv_psiLinkSpiresDestroyed, true, null, true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPsiLinkSpiresUpdate_Init () {
    gt_ObjectiveDestroyPsiLinkSpiresUpdate = TriggerCreate("gt_ObjectiveDestroyPsiLinkSpiresUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Psi Link Spires Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPsiLinkSpiresComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyPsiLinkSpiresCreate, true, false);
    ObjectiveSetState(gv_objectiveDestroyDominionBase22, c_objectiveStateCompleted);
    libSwaC_gf_SetMissionObjectiveProgress2("ZExpedition01Objective04", gv_psiLinkSpiresDestroyed, true, null, true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPsiLinkSpiresComplete_Init () {
    gt_ObjectiveDestroyPsiLinkSpiresComplete = TriggerCreate("gt_ObjectiveDestroyPsiLinkSpiresComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Psi Link Spires Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPsiLinkSpiresFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyPsiLinkSpiresCreate, true, false);
    ObjectiveSetState(gv_objectiveDestroyDominionBase22, c_objectiveStateFailed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPsiLinkSpiresFailed_Init () {
    gt_ObjectiveDestroyPsiLinkSpiresFailed = TriggerCreate("gt_ObjectiveDestroyPsiLinkSpiresFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Ursadon Matriarchs Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveUrsadonMatriarchsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libSwaC_gf_CreateObjectiveCampaign("ZExpedition01Objective05");
    libSwaC_gf_SetMissionObjectiveProgress2("ZExpedition01Objective05", gv_matriarchsKilled, true, null, true);
    gv_objectiveRescueBrood = ObjectiveLastCreated();
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveUrsadonMatriarchsCreate_Init () {
    gt_ObjectiveUrsadonMatriarchsCreate = TriggerCreate("gt_ObjectiveUrsadonMatriarchsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Ursadon Matriarchs Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveUrsadonMatriarchsUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unit autoDF2CAB02_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_matriarchsKilled = (gv_matriarchsKilled + 1);
    autoDF2CAB02_val = EventUnit();
    if (autoDF2CAB02_val == UnitFromId(595)) {
        PingDestroy(gv_ursadonMatriarchPingWest);
    }
    else if (autoDF2CAB02_val == UnitFromId(593)) {
        PingDestroy(gv_ursadonMatriarchPingNorth);
    }
    else {
    }
    TriggerExecute(gt_MatriarchKilledUpgradeZergQ, true, false);
    TriggerExecute(gt_ObjectiveUrsadonMatriarchsCreate, true, false);
    libSwaC_gf_DisplayMissionObjectiveRewardFloatingText(UnitGetPosition(EventUnit()), "ZExpedition01Objective05", gv_pLAYER_01_USER);
    libSwaC_gf_SetMissionObjectiveProgress2("ZExpedition01Objective05", gv_matriarchsKilled, true, null, true);
    TriggerExecute(gt_ObjectiveUrsadonMatriarchsComplete, true, false);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveUrsadonMatriarchsUpdate_Init () {
    gt_ObjectiveUrsadonMatriarchsUpdate = TriggerCreate("gt_ObjectiveUrsadonMatriarchsUpdate_Func");
    TriggerAddEventUnitDied(gt_ObjectiveUrsadonMatriarchsUpdate, UnitRefFromUnit(UnitFromId(595)));
    TriggerAddEventUnitDied(gt_ObjectiveUrsadonMatriarchsUpdate, UnitRefFromUnit(UnitFromId(593)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Ursadon Matriarchs Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveUrsadonMatriarchsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(595)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(593)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveUrsadonMatriarchsCreate, true, false);
    ObjectiveSetState(gv_objectiveRescueBrood, c_objectiveStateCompleted);
    libSwaC_gf_SetMissionObjectiveProgress2("ZExpedition01Objective05", 2, true, null, true);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveUrsadonMatriarchsComplete_Init () {
    gt_ObjectiveUrsadonMatriarchsComplete = TriggerCreate("gt_ObjectiveUrsadonMatriarchsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Ursadon Matriarchs Failed Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveUrsadonMatriarchsFailedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveUrsadonMatriarchsCreate, true, false);
    ObjectiveSetState(gv_objectiveRescueBrood, c_objectiveStateFailed);
    Wait(libSwaC_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveUrsadonMatriarchsFailedQ_Init () {
    gt_ObjectiveUrsadonMatriarchsFailedQ = TriggerCreate("gt_ObjectiveUrsadonMatriarchsFailedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto00751E9E_g;
    int auto00751E9E_u;
    unit auto00751E9E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    gv_inCinematic = true;
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_06_PROTOSS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    auto00751E9E_g = gv_cinematicHiddenUnits;
    auto00751E9E_u = UnitGroupCount(auto00751E9E_g, c_unitCountAll);
    for (;; auto00751E9E_u -= 1) {
        auto00751E9E_var = UnitGroupUnitFromEnd(auto00751E9E_g, auto00751E9E_u);
        if (auto00751E9E_var == null) { break; }
        libNtve_gf_PauseUnit(auto00751E9E_var, true);
        libNtve_gf_ShowHideUnit(auto00751E9E_var, false);
    }
    libSwaC_gf_CreateHero2(PointFromId(429), gv_pLAYER_01_USER, libSwaC_ge_HeroUnit_Kerrigan, 45.0, 0, libSwaC_ge_KerriganCreatePurpose_Cinematic);
    gv_cinematicKerrigan = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(429));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    gv_cinematicZergling[1] = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(429));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    gv_cinematicZergling[2] = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(429));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    gv_cinematicZergling[3] = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_01_USER, PointFromId(429));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    gv_cinematicZergling[4] = UnitLastCreated();
    libNtve_gf_ShowHideUnit(UnitFromId(309), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dROP_UNITS;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dROP_UNITS = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(596), 0.0, -1, 10.0, true);
    gf_TurnFogValuesOn(5.0);
    TriggerExecute(gt_IntroMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(671), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Expedition01|Line00027", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Expedition01|Line00028", true), c_soundIndexAny)) - 1), -1, 10.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Expedition01|Line00027", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundPlay(SoundLink("Ambience_Kaldir_FlashFreeze", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_flashFreezeSound = SoundLastPlayed();
    libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionEntireMap(), "SnowBlizzard", "Death");
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "SnowBlizzard", c_animNameDefault, "GLstand", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Expedition01|Line00028", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gf_TurnFogValuesOff(0.0);
    SoundStop(gv_flashFreezeSound, true);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "SnowBlizzard", "Death", "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(643), 0.0, -1, 10.0, true);
    UnitGroupAdd(lv_dROP_UNITS, gv_cinematicKerrigan);
    UnitGroupAdd(lv_dROP_UNITS, gv_cinematicZergling[1]);
    UnitGroupAdd(lv_dROP_UNITS, gv_cinematicZergling[2]);
    UnitGroupAdd(lv_dROP_UNITS, gv_cinematicZergling[3]);
    UnitGroupAdd(lv_dROP_UNITS, gv_cinematicZergling[4]);
    libSwaC_gf_CreateDropPod(libSwaC_ge_DropPodRace_Zerg, PointFromId(115), lv_dROP_UNITS, false, gv_pLAYER_01_USER);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(645), (SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Expedition01|Line00023", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Expedition01|Line00024", true), c_soundIndexAny))), -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zBriefing_Expedition01|Line00023", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(3.0, c_timeGame);
    UnitIssueOrder(gv_cinematicKerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(644)), c_orderQueueReplace);
    UnitIssueOrder(gv_cinematicKerrigan, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(115)), c_orderQueueAddToEnd);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(gv_cinematicZergling[1], OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(255))), c_orderQueueReplace);
    UnitIssueOrder(gv_cinematicZergling[2], OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(267))), c_orderQueueReplace);
    UnitIssueOrder(gv_cinematicZergling[3], OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(289))), c_orderQueueReplace);
    UnitIssueOrder(gv_cinematicZergling[4], OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(508))), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1280), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1281), SoundLengthSync(SoundLink(ConversationDataGetSound("zBriefing_Expedition01|Line00026", true), c_soundIndexAny)), -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(gv_cinematicKerrigan, "zBriefing_Expedition01|Line00026", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto02ED3806_g;
    int auto02ED3806_u;
    unit auto02ED3806_var;
    unitgroup auto6ABB1C17_g;
    int auto6ABB1C17_u;
    unit auto6ABB1C17_var;
    unitgroup auto2A87DBF1_g;
    int auto2A87DBF1_u;
    unit auto2A87DBF1_var;
    unitgroup autoA5E3C26D_g;
    int autoA5E3C26D_u;
    unit autoA5E3C26D_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_introMusicCompleted == false)) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    }

    UnitRemove(gv_cinematicKerrigan);
    auto02ED3806_g = gv_cinematicTempUnits;
    auto02ED3806_u = UnitGroupCount(auto02ED3806_g, c_unitCountAll);
    for (;; auto02ED3806_u -= 1) {
        auto02ED3806_var = UnitGroupUnitFromEnd(auto02ED3806_g, auto02ED3806_u);
        if (auto02ED3806_var == null) { break; }
        UnitRemove(auto02ED3806_var);
    }
    auto6ABB1C17_g = UnitGroup("ZergDropPod", gv_pLAYER_01_USER, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6ABB1C17_u = UnitGroupCount(auto6ABB1C17_g, c_unitCountAll);
    for (;; auto6ABB1C17_u -= 1) {
        auto6ABB1C17_var = UnitGroupUnitFromEnd(auto6ABB1C17_g, auto6ABB1C17_u);
        if (auto6ABB1C17_var == null) { break; }
        UnitRemove(auto6ABB1C17_var);
    }
    auto2A87DBF1_g = UnitGroup("ZergDropPodCreep", gv_pLAYER_01_USER, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2A87DBF1_u = UnitGroupCount(auto2A87DBF1_g, c_unitCountAll);
    for (;; auto2A87DBF1_u -= 1) {
        auto2A87DBF1_var = UnitGroupUnitFromEnd(auto2A87DBF1_g, auto2A87DBF1_u);
        if (auto2A87DBF1_var == null) { break; }
        UnitRemove(auto2A87DBF1_var);
    }
    autoA5E3C26D_g = gv_cinematicHiddenUnits;
    autoA5E3C26D_u = UnitGroupCount(autoA5E3C26D_g, c_unitCountAll);
    for (;; autoA5E3C26D_u -= 1) {
        autoA5E3C26D_var = UnitGroupUnitFromEnd(autoA5E3C26D_g, autoA5E3C26D_u);
        if (autoA5E3C26D_var == null) { break; }
        libNtve_gf_PauseUnit(autoA5E3C26D_var, false);
        libNtve_gf_ShowHideUnit(autoA5E3C26D_var, true);
    }
    gf_TurnFogValuesOff(0.0);
    SoundStop(gv_flashFreezeSound, true);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "SnowBlizzard", "Death", "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_ShowHideUnit(UnitFromId(309), true);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libSwaC_gf_EnableDisableZerglingRespawn(true);
    TriggerExecute(gt_StartAI, true, false);
    UnitGroupSelect(UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_pLAYER_01_USER, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    gv_inCinematic = false;
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(573)), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Music
//--------------------------------------------------------------------------------------------------
bool gt_IntroMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZExpedition01MusicIntro";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_introMusicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroMusic_Init () {
    gt_IntroMusic = TriggerCreate("gt_IntroMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Recover Brood Q
//--------------------------------------------------------------------------------------------------
bool gt_MidRecoverBroodQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidRecoverBroodSetup, true, true);
    TriggerExecute(gt_MidRecoverBroodCinematic, true, true);
    TriggerExecute(gt_MidRecoverBroodCinematicEnd, true, true);
    TriggerExecute(gt_MidRecoverBroodCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidRecoverBroodQ_Init () {
    gt_MidRecoverBroodQ = TriggerCreate("gt_MidRecoverBroodQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Recover Brood Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidRecoverBroodSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_backupRoachsGiven;

    // Automatic Variable Declarations
    unitgroup auto4FE73A03_g;
    int auto4FE73A03_u;
    unit auto4FE73A03_var;
    unitgroup autoBDCEE4FE_g;
    int autoBDCEE4FE_u;
    unit autoBDCEE4FE_var;
    unitgroup auto3E3B7179_g;
    int auto3E3B7179_u;
    unit auto3E3B7179_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    gv_inCinematic = true;
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    libSwaC_gf_EnableDisableZerglingRespawn(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionFromId(1));
    UnitPauseAll(true);
    AITimePause(true);
    auto4FE73A03_g = UnitGroup("Probe", gv_pLAYER_04_PROTOSS, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4FE73A03_u = UnitGroupCount(auto4FE73A03_g, c_unitCountAll);
    for (;; auto4FE73A03_u -= 1) {
        auto4FE73A03_var = UnitGroupUnitFromEnd(auto4FE73A03_g, auto4FE73A03_u);
        if (auto4FE73A03_var == null) { break; }
        libNtve_gf_PauseUnit(auto4FE73A03_var, false);
    }
    autoBDCEE4FE_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBDCEE4FE_u = UnitGroupCount(autoBDCEE4FE_g, c_unitCountAll);
    for (;; autoBDCEE4FE_u -= 1) {
        autoBDCEE4FE_var = UnitGroupUnitFromEnd(autoBDCEE4FE_g, autoBDCEE4FE_u);
        if (autoBDCEE4FE_var == null) { break; }
        UnitRemove(autoBDCEE4FE_var);
    }
    libNtve_gf_PauseUnit(UnitFromId(32), false);
    libNtve_gf_PauseUnit(UnitFromId(106), false);
    libNtve_gf_PauseUnit(UnitFromId(16), false);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionFromId(4), gv_pLAYER_04_PROTOSS);
    UnitBehaviorAdd(gv_startingHatchery, "makeCreep8x6", gv_startingHatchery, 1);
    UnitBehaviorAdd(UnitFromId(690), "makeCreep4x4", UnitFromId(690), 1);
    gv_cinematicHiddenUnits = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAdd(gv_cinematicHiddenUnits, gv_kerrigan);
    UnitGroupAddUnitGroup(gv_cinematicHiddenUnits, UnitGroup(null, c_playerAny, RegionCircle(PointFromId(428), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto3E3B7179_g = gv_cinematicHiddenUnits;
    auto3E3B7179_u = UnitGroupCount(auto3E3B7179_g, c_unitCountAll);
    for (;; auto3E3B7179_u -= 1) {
        auto3E3B7179_var = UnitGroupUnitFromEnd(auto3E3B7179_g, auto3E3B7179_u);
        if (auto3E3B7179_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto3E3B7179_var, false);
    }
    libSwaC_gf_CreateHero2(PointFromId(428), gv_pLAYER_01_USER, libSwaC_ge_HeroUnit_Kerrigan, PointGetFacing(PointFromId(428)), 0, libSwaC_ge_KerriganCreatePurpose_Cinematic);
    gv_cinematicKerrigan = UnitLastCreated();
    UnitSetState(gv_cinematicKerrigan, c_unitStateFidget, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidRecoverBroodSetup_Init () {
    gt_MidRecoverBroodSetup = TriggerCreate("gt_MidRecoverBroodSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Recover Brood Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidRecoverBroodCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoCD34E8AD_g;
    int autoCD34E8AD_u;
    unit autoCD34E8AD_var;
    unitgroup auto7DC8D021_g;
    int auto7DC8D021_u;
    unit auto7DC8D021_var;
    unitgroup autoF53DAE54_g;
    int autoF53DAE54_u;
    unit autoF53DAE54_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(554), 0.0, -1, 10.0, true);
    UnitBehaviorRemove(gv_startingHatchery, "SpawnLarva", 1);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_MidMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_PauseUnit(UnitFromId(690), false);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_cinematicKerrigan), c_animNameDefault, "Spell 01", 0, c_animTimeDefault);
    SoundPlay(SoundLink("UI_TerranRescueUnit", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("Event_Exp1_KerriganEyeFlare", -1), PlayerGroupAll(), 100.0, 0.0);
    autoCD34E8AD_g = UnitGroup(null, gv_pLAYER_02_RESCUE_ZERG, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCD34E8AD_u = UnitGroupCount(autoCD34E8AD_g, c_unitCountAll);
    for (;; autoCD34E8AD_u -= 1) {
        autoCD34E8AD_var = UnitGroupUnitFromEnd(autoCD34E8AD_g, autoCD34E8AD_u);
        if (autoCD34E8AD_var == null) { break; }
        libNtve_gf_PauseUnit(autoCD34E8AD_var, false);
        UnitSetOwner(autoCD34E8AD_var, gv_pLAYER_01_USER, true);
        libNtve_gf_MakeUnitInvulnerable(autoCD34E8AD_var, false);
        UnitSetState(autoCD34E8AD_var, c_unitStateSelectable, true);
        UnitBehaviorAddPlayer(autoCD34E8AD_var, "ThawUnit", gv_pLAYER_01_USER, 1);
    }
    auto7DC8D021_g = UnitGroup("DestructibleIce6x6", c_playerAny, RegionFromId(33), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7DC8D021_u = UnitGroupCount(auto7DC8D021_g, c_unitCountAll);
    for (;; auto7DC8D021_u -= 1) {
        auto7DC8D021_var = UnitGroupUnitFromEnd(auto7DC8D021_g, auto7DC8D021_u);
        if (auto7DC8D021_var == null) { break; }
        UnitKill(auto7DC8D021_var);
    }
    autoF53DAE54_g = gv_overlordPathingBlockers;
    autoF53DAE54_u = UnitGroupCount(autoF53DAE54_g, c_unitCountAll);
    for (;; autoF53DAE54_u -= 1) {
        autoF53DAE54_var = UnitGroupUnitFromEnd(autoF53DAE54_g, autoF53DAE54_u);
        if (autoF53DAE54_var == null) { break; }
        UnitKill(autoF53DAE54_var);
    }
    Wait(2.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(555), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Expedition01|Line00040", true), c_soundIndexAny)) - 1.0), -1, 10.0, true);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00075", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00040", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(552), 0.0, -1, 10.0, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 85.0, 1.0);
    libSwaC_gf_SendTransmissionCampaign(gv_cinematicKerrigan, "zMission_Expedition01|Line00018", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(553), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Expedition01|Line00041", true), c_soundIndexAny)) - 1.0), -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00041", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(555), 0.0, -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(gv_cinematicKerrigan, "zMission_Expedition01|Line00042", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00043", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(549), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(550), (SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Expedition01|Line00044", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Expedition01|Line00045", true), c_soundIndexAny))), -1, 10.0, true);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00044", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(gv_cinematicKerrigan, "zMission_Expedition01|Line00140", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidRecoverBroodCinematic_Init () {
    gt_MidRecoverBroodCinematic = TriggerCreate("gt_MidRecoverBroodCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Recover Brood Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidRecoverBroodCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidRecoverBroodCinematicEnd_Init () {
    gt_MidRecoverBroodCinematicEnd = TriggerCreate("gt_MidRecoverBroodCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Recover Brood Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidRecoverBroodCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;
    unitgroup lv_tempGroup;

    // Automatic Variable Declarations
    unitgroup auto91995258_g;
    int auto91995258_u;
    unit auto91995258_var;
    unitgroup autoD07C78E0_g;
    int autoD07C78E0_u;
    unit autoD07C78E0_var;
    unitgroup auto29A4EFDF_g;
    int auto29A4EFDF_u;
    unit auto29A4EFDF_var;
    unitgroup auto72A4D6D2_g;
    int auto72A4D6D2_u;
    unit auto72A4D6D2_var;
    unitgroup auto7F3F7FBC_g;
    int auto7F3F7FBC_u;
    unit auto7F3F7FBC_var;
    unitgroup autoE1AA4206_g;
    int autoE1AA4206_u;
    unit autoE1AA4206_var;
    unitgroup auto4A7A874E_g;
    int auto4A7A874E_u;
    unit auto4A7A874E_var;
    unitgroup auto1FD7D7EE_g;
    int auto1FD7D7EE_u;
    unit auto1FD7D7EE_var;

    // Variable Initialization
    lv_tempGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == false) && (gv_midMusicCompleted == false)) {
        TriggerStop(gt_MidMusic);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZExpedition01MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

    auto91995258_g = gv_cinematicHiddenUnits;
    auto91995258_u = UnitGroupCount(auto91995258_g, c_unitCountAll);
    for (;; auto91995258_u -= 1) {
        auto91995258_var = UnitGroupUnitFromEnd(auto91995258_g, auto91995258_u);
        if (auto91995258_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto91995258_var, true);
    }
    UnitRemove(gv_cinematicKerrigan);
    UnitPauseAll(false);
    AITimePause(false);
    autoD07C78E0_g = UnitGroup("Larva", gv_pLAYER_01_USER, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD07C78E0_u = UnitGroupCount(autoD07C78E0_g, c_unitCountAll);
    for (;; autoD07C78E0_u -= 1) {
        autoD07C78E0_var = UnitGroupUnitFromEnd(autoD07C78E0_g, autoD07C78E0_u);
        if (autoD07C78E0_var == null) { break; }
        UnitRemove(autoD07C78E0_var);
    }
    auto29A4EFDF_g = UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto29A4EFDF_u = UnitGroupCount(auto29A4EFDF_g, c_unitCountAll);
    for (;; auto29A4EFDF_u -= 1) {
        auto29A4EFDF_var = UnitGroupUnitFromEnd(auto29A4EFDF_g, auto29A4EFDF_u);
        if (auto29A4EFDF_var == null) { break; }
        if ((auto29A4EFDF_var != gv_kerrigan)) {
            UnitSetPosition(auto29A4EFDF_var, RegionRandomPoint(RegionFromId(68)), false);
            UnitIssueOrder(auto29A4EFDF_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        }

    }
    auto72A4D6D2_g = UnitGroup("Overlord", gv_pLAYER_01_USER, RegionFromId(55), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto72A4D6D2_u = UnitGroupCount(auto72A4D6D2_g, c_unitCountAll);
    for (;; auto72A4D6D2_u -= 1) {
        auto72A4D6D2_var = UnitGroupUnitFromEnd(auto72A4D6D2_g, auto72A4D6D2_u);
        if (auto72A4D6D2_var == null) { break; }
        UnitRemove(auto72A4D6D2_var);
    }
    auto7F3F7FBC_g = gv_overlordPathingBlockers;
    auto7F3F7FBC_u = UnitGroupCount(auto7F3F7FBC_g, c_unitCountAll);
    for (;; auto7F3F7FBC_u -= 1) {
        auto7F3F7FBC_var = UnitGroupUnitFromEnd(auto7F3F7FBC_g, auto7F3F7FBC_u);
        if (auto7F3F7FBC_var == null) { break; }
        UnitKill(auto7F3F7FBC_var);
    }
    libNtve_gf_MakeUnitUncommandable(gv_kerrigan, false);
    UnitSetPosition(gv_kerrigan, PointFromId(428), false);
    UnitSetFacing(gv_kerrigan, 315.0, 0.0);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    CreepModify(UnitGetPosition(gv_startingHatchery), 10.0, true, false);
    CreepModify(UnitGetPosition(UnitFromId(690)), 10.0, true, false);
    autoE1AA4206_g = UnitGroup("DestructibleIce6x6", c_playerAny, RegionFromId(33), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE1AA4206_u = UnitGroupCount(autoE1AA4206_g, c_unitCountAll);
    for (;; autoE1AA4206_u -= 1) {
        autoE1AA4206_var = UnitGroupUnitFromEnd(autoE1AA4206_g, autoE1AA4206_u);
        if (autoE1AA4206_var == null) { break; }
        UnitRemove(autoE1AA4206_var);
    }
    lv_tempGroup = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(lv_tempGroup, UnitGroup(null, gv_pLAYER_02_RESCUE_ZERG, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto4A7A874E_g = lv_tempGroup;
    auto4A7A874E_u = UnitGroupCount(auto4A7A874E_g, c_unitCountAll);
    for (;; auto4A7A874E_u -= 1) {
        auto4A7A874E_var = UnitGroupUnitFromEnd(auto4A7A874E_g, auto4A7A874E_u);
        if (auto4A7A874E_var == null) { break; }
        UnitSetOwner(auto4A7A874E_var, gv_pLAYER_01_USER, true);
        libNtve_gf_MakeUnitInvulnerable(auto4A7A874E_var, false);
        UnitSetState(auto4A7A874E_var, c_unitStateSelectable, true);
        if ((auto4A7A874E_var != gv_kerrigan) && (UnitGetType(auto4A7A874E_var) != "AutomatedExtractor")) {
            if ((auto4A7A874E_var == gv_startingHatchery)) {
                UnitBehaviorRemove(auto4A7A874E_var, "ZergBuildingDies9", 1);
                gf_ReplaceUnit(auto4A7A874E_var);
                gv_startingHatchery = UnitLastCreated();
            }
            else {
                UnitBehaviorRemove(auto4A7A874E_var, "ZergBuildingDies6", 1);
                gf_ReplaceUnit(auto4A7A874E_var);
            }
        }

    }
    auto1FD7D7EE_g = UnitGroup("Probe", gv_pLAYER_04_PROTOSS, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1FD7D7EE_u = UnitGroupCount(auto1FD7D7EE_g, c_unitCountAll);
    for (;; auto1FD7D7EE_u -= 1) {
        auto1FD7D7EE_var = UnitGroupUnitFromEnd(auto1FD7D7EE_g, auto1FD7D7EE_u);
        if (auto1FD7D7EE_var == null) { break; }
        AISetUnitScriptControlled(auto1FD7D7EE_var, false);
    }
    libSwaC_gf_SetHatcheryRallyPoint(gv_startingHatchery, PointFromId(437));
    libSwaC_gf_SpawnLarvaForHatchery(gv_startingHatchery, 3);
    libSwaC_gf_StartingWorkersAutoHarvest(RegionFromId(27), RegionFromId(70));
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libSwaC_gf_EnableDisableZerglingRespawn(true);
    libNtve_gf_RestoreUnitSelection(gv_pLAYER_01_USER);
    CameraRestore(gv_pLAYER_01_USER, 0.0, -1, 10);
    CameraPan(gv_pLAYER_01_USER, PointWithOffset(PointFromId(116), 0.0, 0.0), 0.0, -1, 10, false);
    libSwaC_gf_ResetHeroAbilityCooldowns(libSwaC_ge_HeroUnit_Kerrigan);
    UnitSetPropertyFixed(gv_kerrigan, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_kerrigan, c_unitPropEnergyPercent, 100.0);
    UIAlertClear(gv_pLAYER_01_USER);
    PingDestroy(gv_pingZergBase);
    ObjectiveShow(gv_objectiveDestroyDominionBase3, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveDestroyDominionBase, PlayerGroupAll(), false);
    TriggerEnable(gt_DefeatBaseDead, true);
    TriggerEnable(gt_DefeatKerriganDead, false);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    gv_inCinematic = false;
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, true);
    TriggerExecute(gt_StartGameStage2Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidRecoverBroodCleanup_Init () {
    gt_MidRecoverBroodCleanup = TriggerCreate("gt_MidRecoverBroodCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Music
//--------------------------------------------------------------------------------------------------
bool gt_MidMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "ZExpedition01MusicCutscene04_ProtossAlerted";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_midMusicCompleted = true;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZExpedition01MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidMusic_Init () {
    gt_MidMusic = TriggerCreate("gt_MidMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7B1251BB_g;
    int auto7B1251BB_u;
    unit auto7B1251BB_var;
    unitgroup auto97EAA495_g;
    int auto97EAA495_u;
    unit auto97EAA495_var;
    unitgroup auto8E2EDFC0_g;
    int auto8E2EDFC0_u;
    unit auto8E2EDFC0_var;
    unitgroup auto63395592_g;
    int auto63395592_u;
    unit auto63395592_var;
    unitgroup autoA0AC0CAB_g;
    int autoA0AC0CAB_u;
    unit autoA0AC0CAB_var;
    unitgroup auto530F15FA_g;
    int auto530F15FA_u;
    unit auto530F15FA_var;
    unitgroup autoF77F0F6E_g;
    int autoF77F0F6E_u;
    unit autoF77F0F6E_var;
    unitgroup auto65A44B0F_g;
    int auto65A44B0F_u;
    unit auto65A44B0F_var;
    unitgroup autoB4D9EC09_g;
    int autoB4D9EC09_u;
    unit autoB4D9EC09_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    gv_inCinematic = true;
    libSwaC_gf_CinematicModeSwarmCampaign(true, 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "SnowBlizzard", "Death", "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    gf_TurnFogValuesOff(0.0);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionFromId(1));
    AITimePause(true);
    if ((UnitIsAlive(UnitFromId(6)) == true)) {
        UnitKill(UnitFromId(6));
    }

    libNtve_gf_ShowHideUnit(gv_kerrigan, false);
    libNtve_gf_PauseUnit(gv_kerrigan, true);
    auto7B1251BB_g = UnitGroup(null, gv_pLAYER_04_PROTOSS, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7B1251BB_u = UnitGroupCount(auto7B1251BB_g, c_unitCountAll);
    for (;; auto7B1251BB_u -= 1) {
        auto7B1251BB_var = UnitGroupUnitFromEnd(auto7B1251BB_g, auto7B1251BB_u);
        if (auto7B1251BB_var == null) { break; }
        UnitKill(auto7B1251BB_var);
    }
    auto97EAA495_g = UnitGroup(null, gv_pLAYER_05_PROTOSS, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto97EAA495_u = UnitGroupCount(auto97EAA495_g, c_unitCountAll);
    for (;; auto97EAA495_u -= 1) {
        auto97EAA495_var = UnitGroupUnitFromEnd(auto97EAA495_g, auto97EAA495_u);
        if (auto97EAA495_var == null) { break; }
        UnitKill(auto97EAA495_var);
    }
    auto8E2EDFC0_g = UnitGroup(null, gv_pLAYER_06_PROTOSS, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8E2EDFC0_u = UnitGroupCount(auto8E2EDFC0_g, c_unitCountAll);
    for (;; auto8E2EDFC0_u -= 1) {
        auto8E2EDFC0_var = UnitGroupUnitFromEnd(auto8E2EDFC0_g, auto8E2EDFC0_u);
        if (auto8E2EDFC0_var == null) { break; }
        UnitKill(auto8E2EDFC0_var);
    }
    auto63395592_g = UnitGroup(null, gv_pLAYER_03_PSI_SPIRES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto63395592_u = UnitGroupCount(auto63395592_g, c_unitCountAll);
    for (;; auto63395592_u -= 1) {
        auto63395592_var = UnitGroupUnitFromEnd(auto63395592_g, auto63395592_u);
        if (auto63395592_var == null) { break; }
        UnitRemove(auto63395592_var);
    }
    autoA0AC0CAB_g = UnitGroup(null, gv_pLAYER_04_PROTOSS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA0AC0CAB_u = UnitGroupCount(autoA0AC0CAB_g, c_unitCountAll);
    for (;; autoA0AC0CAB_u -= 1) {
        autoA0AC0CAB_var = UnitGroupUnitFromEnd(autoA0AC0CAB_g, autoA0AC0CAB_u);
        if (autoA0AC0CAB_var == null) { break; }
        UnitRemove(autoA0AC0CAB_var);
    }
    auto530F15FA_g = UnitGroup(null, gv_pLAYER_05_PROTOSS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto530F15FA_u = UnitGroupCount(auto530F15FA_g, c_unitCountAll);
    for (;; auto530F15FA_u -= 1) {
        auto530F15FA_var = UnitGroupUnitFromEnd(auto530F15FA_g, auto530F15FA_u);
        if (auto530F15FA_var == null) { break; }
        UnitRemove(auto530F15FA_var);
    }
    autoF77F0F6E_g = UnitGroup(null, gv_pLAYER_06_PROTOSS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF77F0F6E_u = UnitGroupCount(autoF77F0F6E_g, c_unitCountAll);
    for (;; autoF77F0F6E_u -= 1) {
        autoF77F0F6E_var = UnitGroupUnitFromEnd(autoF77F0F6E_g, autoF77F0F6E_u);
        if (autoF77F0F6E_var == null) { break; }
        UnitRemove(autoF77F0F6E_var);
    }
    auto65A44B0F_g = UnitGroup(null, gv_pLAYER_10_URSADON, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto65A44B0F_u = UnitGroupCount(auto65A44B0F_g, c_unitCountAll);
    for (;; auto65A44B0F_u -= 1) {
        auto65A44B0F_var = UnitGroupUnitFromEnd(auto65A44B0F_g, auto65A44B0F_u);
        if (auto65A44B0F_var == null) { break; }
        UnitRemove(auto65A44B0F_var);
    }
    libNtve_gf_KillModel(gv_spireActorModel01);
    libNtve_gf_KillModel(gv_spireActorModel02);
    libNtve_gf_KillModel(gv_spireActorModel03);
    autoB4D9EC09_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB4D9EC09_u = UnitGroupCount(autoB4D9EC09_g, c_unitCountAll);
    for (;; autoB4D9EC09_u -= 1) {
        autoB4D9EC09_var = UnitGroupUnitFromEnd(autoB4D9EC09_g, autoB4D9EC09_u);
        if (autoB4D9EC09_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoB4D9EC09_var, false);
        libNtve_gf_PauseUnit(autoB4D9EC09_var, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto52184B7D_g;
    int auto52184B7D_u;
    unit auto52184B7D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(549), 0.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_01_USER, gv_victorySpirePoint, 0.0, -1, 10.0, false);
    TriggerExecute(gt_VictoryZerg, true, false);
    TriggerExecute(gt_VictoryZergKerrigan, true, false);
    UnitCreate(1, "WarpPrism", 0, gv_pLAYER_04_PROTOSS, PointWithOffsetPolar(gv_victorySpirePoint, 5.0, 200.0), 45.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 30.0, 45.0)), c_orderQueueReplace);
    UnitCreate(1, "WarpPrism", 0, gv_pLAYER_04_PROTOSS, PointWithOffsetPolar(gv_victorySpirePoint, 1.0, 70.0), 45.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 30.0, 45.0)), c_orderQueueReplace);
    UnitCreate(1, "WarpPrism", 0, gv_pLAYER_04_PROTOSS, PointWithOffsetPolar(gv_victorySpirePoint, 4.0, 350.0), 45.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 30.0, 45.0)), c_orderQueueReplace);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZExpedition01MusicCutscene07_MissionVictory", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_victoryCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(550), ((SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Expedition01|Line00059", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("zMission_Expedition01|Line00060", true), c_soundIndexAny))) - 1.0), -1, 10.0, false);
    libSwaC_gf_SetAllSoundChannelVolumesCampaign(libSwaC_ge_VolumeChannelModeCampaign_CinematicInTransmission);
    SoundPlay(SoundLink("Event_Exp3_EndWin_Horde", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_victoryEndWinHordeSound = SoundLastPlayed();
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00059", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libSwaC_gf_SendTransmissionCampaign(null, "zMission_Expedition01|Line00060", c_transmissionDurationAdd, 0.0, false, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 1.0);
    auto52184B7D_g = UnitGroup("WarpPrism", gv_pLAYER_04_PROTOSS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto52184B7D_u = UnitGroupCount(auto52184B7D_g, c_unitCountAll);
    for (;; auto52184B7D_u -= 1) {
        auto52184B7D_var = UnitGroupUnitFromEnd(auto52184B7D_g, auto52184B7D_u);
        if (auto52184B7D_var == null) { break; }
        UnitRemove(auto52184B7D_var);
    }
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(430), 0.0, -1, 10.0, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libSwaC_gf_SendTransmissionCampaign(gv_victoryKerrigan, "zMission_Expedition01|Line00117", c_transmissionDurationAdd, 0.0, true, libSwaC_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter, libSwaC_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_victoryCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuratioin;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victoryCinematicCompleted == true)) {
        lv_fadeDuratioin = 2.0;
    }
    else {
        lv_fadeDuratioin = 0.5;
    }
    CinematicFade(false, lv_fadeDuratioin, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundStop(gv_victoryEndWinHordeSound, true);
    TriggerStop(gt_VictoryZerg);
    TriggerStop(gt_VictoryZergKerrigan);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Zerg
//--------------------------------------------------------------------------------------------------
bool gt_VictoryZerg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_victoryZerg;
    region lv_zergRegion;

    // Automatic Variable Declarations
    const int auto42624857_n = 20;
    int auto42624857_i;
    const int auto8724B318_n = 8;
    int auto8724B318_i;
    unitgroup auto7E71FCEF_g;
    int auto7E71FCEF_u;
    unit auto7E71FCEF_var;

    // Variable Initialization
    lv_victoryZerg = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RegionContainsPoint(RegionFromId(5), gv_victorySpirePoint) == true)) {
        lv_zergRegion = RegionFromId(5);
    }
    else {
        if ((RegionContainsPoint(RegionFromId(6), gv_victorySpirePoint) == true)) {
            lv_zergRegion = RegionFromId(6);
        }
        else {
            lv_zergRegion = RegionFromId(43);
        }
    }
    for (auto42624857_i = 1; auto42624857_i <= auto42624857_n; auto42624857_i += 1) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(lv_zergRegion), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_victoryZerg, UnitLastCreated());
    }
    for (auto8724B318_i = 1; auto8724B318_i <= auto8724B318_n; auto8724B318_i += 1) {
        UnitCreate(1, "Roach", 0, gv_pLAYER_01_USER, RegionRandomPoint(lv_zergRegion), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_victoryZerg, UnitLastCreated());
    }
    while (true) {
        auto7E71FCEF_g = lv_victoryZerg;
        auto7E71FCEF_u = UnitGroupCount(auto7E71FCEF_g, c_unitCountAll);
        for (;; auto7E71FCEF_u -= 1) {
            auto7E71FCEF_var = UnitGroupUnitFromEnd(auto7E71FCEF_g, auto7E71FCEF_u);
            if (auto7E71FCEF_var == null) { break; }
            if ((RandomInt(1, 8) == 1)) {
                UnitIssueOrder(auto7E71FCEF_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lv_zergRegion)), c_orderQueueAddToEnd);
            }

        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryZerg_Init () {
    gt_VictoryZerg = TriggerCreate("gt_VictoryZerg_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Zerg Kerrigan
//--------------------------------------------------------------------------------------------------
bool gt_VictoryZergKerrigan_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_victoryZerg;

    // Automatic Variable Declarations
    unitgroup auto0CB66236_g;
    int auto0CB66236_u;
    unit auto0CB66236_var;
    const int auto7216D57C_n = 10;
    int auto7216D57C_i;
    const int auto97A16610_n = 5;
    int auto97A16610_i;
    const int auto30A05C46_n = 30;
    int auto30A05C46_i;
    const int auto93B724F8_n = 15;
    int auto93B724F8_i;
    unitgroup autoC9B6CF83_g;
    int autoC9B6CF83_u;
    unit autoC9B6CF83_var;

    // Variable Initialization
    lv_victoryZerg = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto0CB66236_g = UnitGroup(null, c_playerAny, RegionFromId(29), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0CB66236_u = UnitGroupCount(auto0CB66236_g, c_unitCountAll);
    for (;; auto0CB66236_u -= 1) {
        auto0CB66236_var = UnitGroupUnitFromEnd(auto0CB66236_g, auto0CB66236_u);
        if (auto0CB66236_var == null) { break; }
        if ((UnitGetType(auto0CB66236_var) != "CreepTumor") && (UnitGetType(auto0CB66236_var) != "CreepTumorBurrowed") && (UnitGetType(auto0CB66236_var) != "CreepTumorUsed")) {
            UnitRemove(auto0CB66236_var);
        }

    }
    libSwaC_gf_CreateHero2(PointFromId(542), gv_pLAYER_01_USER, libSwaC_ge_HeroUnit_Kerrigan, 285.0, 0, libSwaC_ge_KerriganCreatePurpose_Cinematic);
    gv_victoryKerrigan = UnitLastCreated();
    UnitIssueOrder(gv_victoryKerrigan, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitSetState(gv_victoryKerrigan, c_unitStateFidget, false);
    for (auto7216D57C_i = 1; auto7216D57C_i <= auto7216D57C_n; auto7216D57C_i += 1) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(28)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_victoryZerg, UnitLastCreated());
    }
    for (auto97A16610_i = 1; auto97A16610_i <= auto97A16610_n; auto97A16610_i += 1) {
        UnitCreate(1, "Roach", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(28)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_victoryZerg, UnitLastCreated());
    }
    for (auto30A05C46_i = 1; auto30A05C46_i <= auto30A05C46_n; auto30A05C46_i += 1) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(56)), RandomFixed(290.0, 330.0));
    }
    for (auto93B724F8_i = 1; auto93B724F8_i <= auto93B724F8_n; auto93B724F8_i += 1) {
        UnitCreate(1, "Roach", 0, gv_pLAYER_01_USER, RegionRandomPoint(RegionFromId(56)), RandomFixed(290.0, 330.0));
    }
    while (true) {
        autoC9B6CF83_g = lv_victoryZerg;
        autoC9B6CF83_u = UnitGroupCount(autoC9B6CF83_g, c_unitCountAll);
        for (;; autoC9B6CF83_u -= 1) {
            autoC9B6CF83_var = UnitGroupUnitFromEnd(autoC9B6CF83_g, autoC9B6CF83_u);
            if (autoC9B6CF83_var == null) { break; }
            if ((RandomInt(1, 8) == 1)) {
                UnitIssueOrder(autoC9B6CF83_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(28))), c_orderQueueAddToEnd);
            }

        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryZergKerrigan_Init () {
    gt_VictoryZergKerrigan = TriggerCreate("gt_VictoryZergKerrigan_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_PlayerIsInCombat_Init();
    gt_PlayerIsInCombatIndicatorDiminish_Init();
    gt_CreatedUnit_Init();
    gt_SpineCrawlerTransform_Init();
    gt_DEBUGStage2_Init();
    gt_DEBUGStartBlizzard_Init();
    gt_DEBUGStartSnow_Init();
    gt_DEBUGStopSnow_Init();
    gt_StartGameStage1Q_Init();
    gt_StartGameStage2Q_Init();
    gt_PrepareKerriganRevive_Init();
    gt_UnitDiesGiveEssenceUpdateStats_Init();
    gt_GlobalFlashFreezeBehavior_Init();
    gt_CreateFlashFreezeDurationTimerWindow_Init();
    gt_CreateNextFlashFreezeTimerWindow_Init();
    gt_CreatePingFirstUrsadonMatriarch_Init();
    gt_RescueRoaches_Init();
    gt_EnableRoachTech_Init();
    gt_UrsadonAttack01_Init();
    gt_UrsadonAttack02_Init();
    gt_UrsadonAttack03Sound_Init();
    gt_UrsadonMatriarchKilledUpdateObjective_Init();
    gt_StartFirstFlashFreezeQ_Init();
    gt_StartFirstMatriarchAttack_Init();
    gt_MatriachTakesDamage_Init();
    gt_RecoverLostBroodShowQ_Init();
    gt_CreatePingFrozenZergBase_Init();
    gt_RecoverLostBroodBaseRescue_Init();
    gt_TransmissionFindUrsadonMatriarchQ_Init();
    gt_TransmissionFirstRoachFoundQ_Init();
    gt_TransmissionAnotherRoachFoundQ_Init();
    gt_TransmissionFlashFreezeisNearQ_Init();
    gt_TransmissionFirstUrsadonMatriarchEssenceCollectedQ_Init();
    gt_TransmissionKerriganAwakensZergBaseQ_Init();
    gt_TransmissionTeachRoachBurrowRegenQ_Init();
    gt_SpawnFirstZealotAttack_Init();
    gt_TransmissionTakeFighttoHerQ_Init();
    gt_SendFirstZealotAttack_Init();
    gt_TransmissionProtossIncomingQ_Init();
    gt_TransitiontoFirstFlashFreeze_Init();
    gt_TransmissionProtossFrozenbyFlashFreezeQ_Init();
    gt_AddWarpedInZealottoFirstAttack_Init();
    gt_ZealotAttackWaveEngagedbyPlayerSafety_Init();
    gt_FlashFreezeTimer_Init();
    gt_FlashFreezeIncomingRandomQ_Init();
    gt_FlashFreezeStartingOrderedQ_Init();
    gt_FlashFreezeStartingRandomQ_Init();
    gt_FlashFreezeEndingRandomQ_Init();
    gt_SetNextFlashFreezeDurationto60s_Init();
    gt_TransmissionFlashFreezeDurationto60sQ_Init();
    gt_ProtossBaseWarningTopQ_Init();
    gt_ProtossBaseWarningBottomQ_Init();
    gt_ProtossBaseWarningDelays_Init();
    gt_CreatePingPsiLinkSpire01_Init();
    gt_CreatePingPsiLinkSpire0203_Init();
    gt_PsiLinkSpireDamaged1_Init();
    gt_PsiLinkSpireDamaged2_Init();
    gt_PsiLinkSpireDamaged3_Init();
    gt_PsiLinkSpireDestroyed_Init();
    gt_PowerUpSpire01_Init();
    gt_PowerUpSpire02_Init();
    gt_PowerUpSpire03_Init();
    gt_Spire01WarpInDefenders_Init();
    gt_Spire02WarpInDefenders_Init();
    gt_Spire03WarpInDefenders_Init();
    gt_TransmissionFirstSpireDestroyedQ_Init();
    gt_TransmissionSecondSpireDestroyedQ_Init();
    gt_ProtossAttackWaveTauntQ_Init();
    gt_RescueZergExpansion_Init();
    gt_RootCommandIssued_Init();
    gt_TransmissionDropZergExpansionQ_Init();
    gt_TransmissionKerriganFindsDeadQueenQ_Init();
    gt_ShowBonusObjectiveQ_Init();
    gt_CreateUrsadonMatriarchPings_Init();
    gt_MatriarchKilledUpgradeZergQ_Init();
    gt_UrsadonAttackPlayerBase_Init();
    gt_UrsadonAmbushNorthBonusArea_Init();
    gt_UrsadonAttackCenterNorthAttack_Init();
    gt_UrsadonAttackCenterSouthAttack_Init();
    gt_UrsadonAttackSouthProtossBase_Init();
    gt_IceBridgeCracking_Init();
    gt_FogChange01_Init();
    gt_FogChange02_Init();
    gt_GroundIceCollapse01_Init();
    gt_GroundIceCollapse02_Init();
    gt_GroundIceCracking01_Init();
    gt_GroundIceCracking02_Init();
    gt_IceWallCollapse01_Init();
    gt_IceWallCollapse02_Init();
    gt_IceWallCollapse03_Init();
    gt_IceWallCollapse04_Init();
    gt_IceWallCollapse05_Init();
    gt_IceWallCollapse06_Init();
    gt_StartAI_Init();
    gt_StartUpgradesHard_Init();
    gt_AIAttackWaves_Init();
    gt_AIGiveMinerals_Init();
    gt_AIGiveGas_Init();
    gt_AchievementDestroyUnfrozenStructures_Init();
    gt_AchievementTimedRunNH_Init();
    gt_AchievementCompletionistRunH_Init();
    gt_LargestZergForce_Init();
    gt_DefeatKerriganDead_Init();
    gt_DefeatBaseDead_Init();
    gt_VictoryPsiLinkSpiresDestroyed_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_TipMissionHelpQ_Init();
    gt_ObjectiveCollectUrsadonEssenceCreate_Init();
    gt_ObjectiveCollectUrsadonEssenceComplete_Init();
    gt_ObjectiveCollectUrsadonEssenceFailed_Init();
    gt_ObjectiveRecoverLostBroodCreate_Init();
    gt_ObjectiveRecoverLostBroodComplete_Init();
    gt_ObjectiveRecoverLostBroodFailed_Init();
    gt_ObjectiveDestroyPsiLinkSpiresCreate_Init();
    gt_ObjectiveDestroyPsiLinkSpiresUpdate_Init();
    gt_ObjectiveDestroyPsiLinkSpiresComplete_Init();
    gt_ObjectiveDestroyPsiLinkSpiresFailed_Init();
    gt_ObjectiveUrsadonMatriarchsCreate_Init();
    gt_ObjectiveUrsadonMatriarchsUpdate_Init();
    gt_ObjectiveUrsadonMatriarchsComplete_Init();
    gt_ObjectiveUrsadonMatriarchsFailedQ_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroMusic_Init();
    gt_MidRecoverBroodQ_Init();
    gt_MidRecoverBroodSetup_Init();
    gt_MidRecoverBroodCinematic_Init();
    gt_MidRecoverBroodCinematicEnd_Init();
    gt_MidRecoverBroodCleanup_Init();
    gt_MidMusic_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryZerg_Init();
    gt_VictoryZergKerrigan_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
