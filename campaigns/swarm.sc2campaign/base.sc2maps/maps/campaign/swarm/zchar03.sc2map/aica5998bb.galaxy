//==================================================================================================
// 
// Generated AI Script
// 
// AI Name: P05 Dominion
// 
//==================================================================================================
include "TriggerLibs/natives"
include "TriggerLibs/AI"
include "TriggerLibs/Computer"

//--------------------------------------------------------------------------------------------------
// Globals
//--------------------------------------------------------------------------------------------------
point[17] aiCA5998BB_defGather;
string[17] aiCA5998BB_customData;
wave[17] aiCA5998BB_lastWave;

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiCA5998BB_wave1_enabled;
wave[17] aiCA5998BB_wave1_lastWave;
trigger aiCA5998BB_wave1_trigger = null;
int aiCA5998BB_wave1_runPlayer;
playergroup aiCA5998BB_wave1_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave1_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiCA5998BB_wave1_enabled[init_i] = true;
        aiCA5998BB_wave1_lastWave[init_i] = null;
    }

    aiCA5998BB_wave1_trigger = TriggerCreate("aiCA5998BB_wave1_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave1_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCA5998BB_wave1_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiCA5998BB_wave1_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiCA5998BB_wave1_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCA5998BB_wave1_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCA5998BB_wave1_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiCA5998BB_wave1_runFunc (bool c, bool a) {
    int p = aiCA5998BB_wave1_runPlayer;
    playergroup target = aiCA5998BB_wave1_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiCA5998BB_wave1_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiCA5998BB_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 240; }
    if (d == 2) { ta = 240; }
    if (d == 3) { ta = 210; }
    if (d == 4) { ta = 210; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiCA5998BB_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(917), true);
    if ((d == 1) || (d == 2)) {
        AIAttackWaveAddWaypoint(p, PointFromId(918), true);
    }
    if ((d == 1) || (d == 2)) {
        AIAttackWaveAddWaypoint(p, PointFromId(611), true);
    }
    if ((d == 3) || (d == 4)) {
        AIAttackWaveAddWaypoint(p, PointFromId(934), true);
    }
    AIAttackWaveAddWaypoint(p, PointFromId(939), false);

    AIAttackWaveAddUnits(2, 6, "Marine");
    AIAttackWaveAddUnits(3, 6, "Marine");
    AIAttackWaveAddUnits(4, 8, "Marine");
    AIAttackWaveAddUnits(5, 8, "Marine");

    AIAttackWaveAddUnits(2, 1, "Medivac");
    AIAttackWaveAddUnits(3, 1, "Medivac");
    AIAttackWaveAddUnits(4, 1, "Medivac");
    AIAttackWaveAddUnits(5, 1, "Medivac");

    AIAttackWaveAddUnits(2, 3, "VikingFighter");
    AIAttackWaveAddUnits(3, 3, "VikingFighter");
    AIAttackWaveAddUnits(4, 4, "VikingFighter");
    AIAttackWaveAddUnits(5, 4, "VikingFighter");

    AIAttackWaveSend(p, ts, false);
    aiCA5998BB_wave1_lastWave[p] = WaveLastCreated();
    aiCA5998BB_lastWave[p] = aiCA5998BB_wave1_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave1_run (int p, playergroup target, bool wait) {
    aiCA5998BB_wave1_runPlayer = p;
    aiCA5998BB_wave1_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCA5998BB_wave1_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiCA5998BB_wave4_enabled;
wave[17] aiCA5998BB_wave4_lastWave;
trigger aiCA5998BB_wave4_trigger = null;
int aiCA5998BB_wave4_runPlayer;
playergroup aiCA5998BB_wave4_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave4_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiCA5998BB_wave4_enabled[init_i] = true;
        aiCA5998BB_wave4_lastWave[init_i] = null;
    }

    aiCA5998BB_wave4_trigger = TriggerCreate("aiCA5998BB_wave4_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave4_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCA5998BB_wave4_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiCA5998BB_wave4_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiCA5998BB_wave4_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCA5998BB_wave4_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCA5998BB_wave4_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiCA5998BB_wave4_runFunc (bool c, bool a) {
    int p = aiCA5998BB_wave4_runPlayer;
    playergroup target = aiCA5998BB_wave4_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiCA5998BB_wave4_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiCA5998BB_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 150; }
    if (d == 2) { ta = 150; }
    if (d == 3) { ta = 150; }
    if (d == 4) { ta = 150; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiCA5998BB_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 4, "Marine");
    AIAttackWaveAddUnits(3, 4, "Marine");
    AIAttackWaveAddUnits(4, 6, "Marine");
    AIAttackWaveAddUnits(5, 6, "Marine");

    AIAttackWaveAddUnits(2, 2, "Marauder");
    AIAttackWaveAddUnits(3, 2, "Marauder");
    AIAttackWaveAddUnits(4, 3, "Marauder");
    AIAttackWaveAddUnits(5, 3, "Marauder");

    AIAttackWaveAddUnits(2, 2, "WarHound");
    AIAttackWaveAddUnits(3, 2, "WarHound");
    AIAttackWaveAddUnits(4, 3, "WarHound");
    AIAttackWaveAddUnits(5, 3, "WarHound");

    AIAttackWaveAddUnits(4, 2, "Medic");
    AIAttackWaveAddUnits(5, 2, "Medic");

    AIAttackWaveSend(p, ts, false);
    aiCA5998BB_wave4_lastWave[p] = WaveLastCreated();
    aiCA5998BB_lastWave[p] = aiCA5998BB_wave4_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave4_run (int p, playergroup target, bool wait) {
    aiCA5998BB_wave4_runPlayer = p;
    aiCA5998BB_wave4_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCA5998BB_wave4_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiCA5998BB_wave2_enabled;
wave[17] aiCA5998BB_wave2_lastWave;
trigger aiCA5998BB_wave2_trigger = null;
int aiCA5998BB_wave2_runPlayer;
playergroup aiCA5998BB_wave2_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave2_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiCA5998BB_wave2_enabled[init_i] = true;
        aiCA5998BB_wave2_lastWave[init_i] = null;
    }

    aiCA5998BB_wave2_trigger = TriggerCreate("aiCA5998BB_wave2_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave2_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCA5998BB_wave2_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiCA5998BB_wave2_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiCA5998BB_wave2_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCA5998BB_wave2_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCA5998BB_wave2_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiCA5998BB_wave2_runFunc (bool c, bool a) {
    int p = aiCA5998BB_wave2_runPlayer;
    playergroup target = aiCA5998BB_wave2_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiCA5998BB_wave2_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiCA5998BB_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 150; }
    if (d == 2) { ta = 150; }
    if (d == 3) { ta = 150; }
    if (d == 4) { ta = 150; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiCA5998BB_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(937), false);
    AIAttackWaveAddWaypoint(p, PointFromId(489), false);
    if ((d == 3) || (d == 4)) {
        AIAttackWaveAddWaypoint(p, PointFromId(933), false);
    }
    if ((d == 1) || (d == 2)) {
        AIAttackWaveAddWaypoint(p, PointFromId(611), false);
    }
    if ((d == 1) || (d == 2)) {
        AIAttackWaveAddWaypoint(p, PointFromId(939), false);
    }

    AIAttackWaveAddUnits(2, 6, "VikingFighter");
    AIAttackWaveAddUnits(3, 6, "VikingFighter");
    AIAttackWaveAddUnits(4, 8, "VikingFighter");
    AIAttackWaveAddUnits(5, 10, "VikingFighter");

    AIAttackWaveSend(p, ts, false);
    aiCA5998BB_wave2_lastWave[p] = WaveLastCreated();
    aiCA5998BB_lastWave[p] = aiCA5998BB_wave2_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave2_run (int p, playergroup target, bool wait) {
    aiCA5998BB_wave2_runPlayer = p;
    aiCA5998BB_wave2_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCA5998BB_wave2_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiCA5998BB_wave5_enabled;
wave[17] aiCA5998BB_wave5_lastWave;
trigger aiCA5998BB_wave5_trigger = null;
int aiCA5998BB_wave5_runPlayer;
playergroup aiCA5998BB_wave5_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave5_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiCA5998BB_wave5_enabled[init_i] = true;
        aiCA5998BB_wave5_lastWave[init_i] = null;
    }

    aiCA5998BB_wave5_trigger = TriggerCreate("aiCA5998BB_wave5_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave5_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCA5998BB_wave5_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiCA5998BB_wave5_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiCA5998BB_wave5_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCA5998BB_wave5_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCA5998BB_wave5_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiCA5998BB_wave5_runFunc (bool c, bool a) {
    int p = aiCA5998BB_wave5_runPlayer;
    playergroup target = aiCA5998BB_wave5_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiCA5998BB_wave5_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiCA5998BB_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 150; }
    if (d == 2) { ta = 150; }
    if (d == 3) { ta = 150; }
    if (d == 4) { ta = 150; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiCA5998BB_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(917), true);
    if ((d == 1) || (d == 2)) {
        AIAttackWaveAddWaypoint(p, PointFromId(918), false);
    }
    if ((d == 1) || (d == 2)) {
        AIAttackWaveAddWaypoint(p, PointFromId(611), true);
    }
    if ((d == 3) || (d == 4)) {
        AIAttackWaveAddWaypoint(p, PointFromId(934), false);
    }
    AIAttackWaveAddWaypoint(p, PointFromId(939), false);

    AIAttackWaveAddUnits(2, 4, "Marine");
    AIAttackWaveAddUnits(3, 4, "Marine");
    AIAttackWaveAddUnits(4, 4, "Marine");
    AIAttackWaveAddUnits(5, 6, "Marine");

    AIAttackWaveAddUnits(2, 2, "Ghost");
    AIAttackWaveAddUnits(3, 2, "Ghost");
    AIAttackWaveAddUnits(4, 2, "Ghost");
    AIAttackWaveAddUnits(5, 2, "Ghost");

    AIAttackWaveAddUnits(2, 1, "Medivac");
    AIAttackWaveAddUnits(3, 1, "Medivac");
    AIAttackWaveAddUnits(4, 2, "Medivac");
    AIAttackWaveAddUnits(5, 2, "Medivac");

    AIAttackWaveAddUnits(4, 1, "Banshee");
    AIAttackWaveAddUnits(5, 2, "Banshee");

    AIAttackWaveSend(p, ts, false);
    aiCA5998BB_wave5_lastWave[p] = WaveLastCreated();
    aiCA5998BB_lastWave[p] = aiCA5998BB_wave5_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave5_run (int p, playergroup target, bool wait) {
    aiCA5998BB_wave5_runPlayer = p;
    aiCA5998BB_wave5_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCA5998BB_wave5_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiCA5998BB_wave6_enabled;
wave[17] aiCA5998BB_wave6_lastWave;
trigger aiCA5998BB_wave6_trigger = null;
int aiCA5998BB_wave6_runPlayer;
playergroup aiCA5998BB_wave6_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave6_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiCA5998BB_wave6_enabled[init_i] = true;
        aiCA5998BB_wave6_lastWave[init_i] = null;
    }

    aiCA5998BB_wave6_trigger = TriggerCreate("aiCA5998BB_wave6_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave6_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCA5998BB_wave6_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiCA5998BB_wave6_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiCA5998BB_wave6_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCA5998BB_wave6_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCA5998BB_wave6_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiCA5998BB_wave6_runFunc (bool c, bool a) {
    int p = aiCA5998BB_wave6_runPlayer;
    playergroup target = aiCA5998BB_wave6_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiCA5998BB_wave6_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiCA5998BB_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 150; }
    if (d == 2) { ta = 150; }
    if (d == 3) { ta = 150; }
    if (d == 4) { ta = 150; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiCA5998BB_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 10, "Marine");
    AIAttackWaveAddUnits(3, 10, "Marine");
    AIAttackWaveAddUnits(4, 12, "Marine");
    AIAttackWaveAddUnits(5, 12, "Marine");

    AIAttackWaveAddUnits(2, 2, "Medic");
    AIAttackWaveAddUnits(3, 2, "Medic");
    AIAttackWaveAddUnits(4, 2, "Medic");
    AIAttackWaveAddUnits(5, 2, "Medic");

    AIAttackWaveAddUnits(2, 1, "Thor");
    AIAttackWaveAddUnits(3, 1, "Thor");
    AIAttackWaveAddUnits(4, 1, "Thor");
    AIAttackWaveAddUnits(5, 2, "Thor");

    AIAttackWaveSend(p, ts, false);
    aiCA5998BB_wave6_lastWave[p] = WaveLastCreated();
    aiCA5998BB_lastWave[p] = aiCA5998BB_wave6_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave6_run (int p, playergroup target, bool wait) {
    aiCA5998BB_wave6_runPlayer = p;
    aiCA5998BB_wave6_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCA5998BB_wave6_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiCA5998BB_wave7_enabled;
wave[17] aiCA5998BB_wave7_lastWave;
trigger aiCA5998BB_wave7_trigger = null;
int aiCA5998BB_wave7_runPlayer;
playergroup aiCA5998BB_wave7_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave7_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiCA5998BB_wave7_enabled[init_i] = true;
        aiCA5998BB_wave7_lastWave[init_i] = null;
    }

    aiCA5998BB_wave7_trigger = TriggerCreate("aiCA5998BB_wave7_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave7_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCA5998BB_wave7_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiCA5998BB_wave7_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiCA5998BB_wave7_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCA5998BB_wave7_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCA5998BB_wave7_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiCA5998BB_wave7_runFunc (bool c, bool a) {
    int p = aiCA5998BB_wave7_runPlayer;
    playergroup target = aiCA5998BB_wave7_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiCA5998BB_wave7_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiCA5998BB_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 150; }
    if (d == 2) { ta = 150; }
    if (d == 3) { ta = 150; }
    if (d == 4) { ta = 150; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiCA5998BB_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 3, "HellionTank");
    AIAttackWaveAddUnits(3, 3, "HellionTank");
    AIAttackWaveAddUnits(4, 3, "HellionTank");
    AIAttackWaveAddUnits(5, 3, "HellionTank");

    AIAttackWaveAddUnits(4, 2, "SiegeTank");
    AIAttackWaveAddUnits(5, 2, "SiegeTank");

    AIAttackWaveAddUnits(2, 3, "VikingFighter");
    AIAttackWaveAddUnits(3, 3, "VikingFighter");
    AIAttackWaveAddUnits(4, 3, "VikingFighter");
    AIAttackWaveAddUnits(5, 3, "VikingFighter");

    AIAttackWaveAddUnits(4, 1, "ScienceVessel");
    AIAttackWaveAddUnits(5, 1, "ScienceVessel");

    AIAttackWaveSend(p, ts, false);
    aiCA5998BB_wave7_lastWave[p] = WaveLastCreated();
    aiCA5998BB_lastWave[p] = aiCA5998BB_wave7_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave7_run (int p, playergroup target, bool wait) {
    aiCA5998BB_wave7_runPlayer = p;
    aiCA5998BB_wave7_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCA5998BB_wave7_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiCA5998BB_wave8_enabled;
wave[17] aiCA5998BB_wave8_lastWave;
trigger aiCA5998BB_wave8_trigger = null;
int aiCA5998BB_wave8_runPlayer;
playergroup aiCA5998BB_wave8_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave8_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiCA5998BB_wave8_enabled[init_i] = true;
        aiCA5998BB_wave8_lastWave[init_i] = null;
    }

    aiCA5998BB_wave8_trigger = TriggerCreate("aiCA5998BB_wave8_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave8_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCA5998BB_wave8_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiCA5998BB_wave8_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiCA5998BB_wave8_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCA5998BB_wave8_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCA5998BB_wave8_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiCA5998BB_wave8_runFunc (bool c, bool a) {
    int p = aiCA5998BB_wave8_runPlayer;
    playergroup target = aiCA5998BB_wave8_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiCA5998BB_wave8_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiCA5998BB_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 150; }
    if (d == 2) { ta = 150; }
    if (d == 3) { ta = 150; }
    if (d == 4) { ta = 150; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiCA5998BB_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    if ((d == 3) || (d == 4)) {
        AIAttackWaveAddWaypoint(p, PointFromId(933), false);
    }

    AIAttackWaveAddUnits(2, 5, "VikingFighter");
    AIAttackWaveAddUnits(3, 5, "VikingFighter");
    AIAttackWaveAddUnits(4, 6, "VikingFighter");
    AIAttackWaveAddUnits(5, 6, "VikingFighter");

    AIAttackWaveAddUnits(2, 2, "Wraith");
    AIAttackWaveAddUnits(3, 2, "Wraith");

    AIAttackWaveAddUnits(4, 2, "Banshee");
    AIAttackWaveAddUnits(5, 2, "Banshee");

    AIAttackWaveSend(p, ts, false);
    aiCA5998BB_wave8_lastWave[p] = WaveLastCreated();
    aiCA5998BB_lastWave[p] = aiCA5998BB_wave8_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave8_run (int p, playergroup target, bool wait) {
    aiCA5998BB_wave8_runPlayer = p;
    aiCA5998BB_wave8_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCA5998BB_wave8_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiCA5998BB_wave9_enabled;
wave[17] aiCA5998BB_wave9_lastWave;
trigger aiCA5998BB_wave9_trigger = null;
int aiCA5998BB_wave9_runPlayer;
playergroup aiCA5998BB_wave9_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave9_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiCA5998BB_wave9_enabled[init_i] = true;
        aiCA5998BB_wave9_lastWave[init_i] = null;
    }

    aiCA5998BB_wave9_trigger = TriggerCreate("aiCA5998BB_wave9_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave9_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCA5998BB_wave9_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiCA5998BB_wave9_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiCA5998BB_wave9_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCA5998BB_wave9_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCA5998BB_wave9_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiCA5998BB_wave9_runFunc (bool c, bool a) {
    int p = aiCA5998BB_wave9_runPlayer;
    playergroup target = aiCA5998BB_wave9_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiCA5998BB_wave9_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiCA5998BB_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 150; }
    if (d == 2) { ta = 150; }
    if (d == 3) { ta = 150; }
    if (d == 4) { ta = 150; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiCA5998BB_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 12, "Marine");
    AIAttackWaveAddUnits(3, 12, "Marine");
    AIAttackWaveAddUnits(4, 15, "Marine");
    AIAttackWaveAddUnits(5, 15, "Marine");

    AIAttackWaveAddUnits(2, 3, "WarHound");
    AIAttackWaveAddUnits(3, 3, "WarHound");
    AIAttackWaveAddUnits(4, 4, "WarHound");
    AIAttackWaveAddUnits(5, 4, "WarHound");

    AIAttackWaveAddUnits(4, 2, "Medic");
    AIAttackWaveAddUnits(5, 2, "Medic");

    AIAttackWaveSend(p, ts, false);
    aiCA5998BB_wave9_lastWave[p] = WaveLastCreated();
    aiCA5998BB_lastWave[p] = aiCA5998BB_wave9_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave9_run (int p, playergroup target, bool wait) {
    aiCA5998BB_wave9_runPlayer = p;
    aiCA5998BB_wave9_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCA5998BB_wave9_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiCA5998BB_wave10_enabled;
wave[17] aiCA5998BB_wave10_lastWave;
trigger aiCA5998BB_wave10_trigger = null;
int aiCA5998BB_wave10_runPlayer;
playergroup aiCA5998BB_wave10_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave10_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiCA5998BB_wave10_enabled[init_i] = true;
        aiCA5998BB_wave10_lastWave[init_i] = null;
    }

    aiCA5998BB_wave10_trigger = TriggerCreate("aiCA5998BB_wave10_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave10_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCA5998BB_wave10_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiCA5998BB_wave10_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiCA5998BB_wave10_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCA5998BB_wave10_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCA5998BB_wave10_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiCA5998BB_wave10_runFunc (bool c, bool a) {
    int p = aiCA5998BB_wave10_runPlayer;
    playergroup target = aiCA5998BB_wave10_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiCA5998BB_wave10_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiCA5998BB_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 150; }
    if (d == 2) { ta = 150; }
    if (d == 3) { ta = 150; }
    if (d == 4) { ta = 150; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiCA5998BB_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 6, "Marine");
    AIAttackWaveAddUnits(3, 6, "Marine");
    AIAttackWaveAddUnits(4, 10, "Marine");
    AIAttackWaveAddUnits(5, 12, "Marine");

    AIAttackWaveAddUnits(2, 1, "Medivac");
    AIAttackWaveAddUnits(3, 1, "Medivac");
    AIAttackWaveAddUnits(4, 2, "Medivac");
    AIAttackWaveAddUnits(5, 2, "Medivac");

    AIAttackWaveAddUnits(2, 4, "VikingFighter");
    AIAttackWaveAddUnits(3, 4, "VikingFighter");
    AIAttackWaveAddUnits(4, 6, "VikingFighter");
    AIAttackWaveAddUnits(5, 6, "VikingFighter");

    AIAttackWaveSend(p, ts, false);
    aiCA5998BB_wave10_lastWave[p] = WaveLastCreated();
    aiCA5998BB_lastWave[p] = aiCA5998BB_wave10_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave10_run (int p, playergroup target, bool wait) {
    aiCA5998BB_wave10_runPlayer = p;
    aiCA5998BB_wave10_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCA5998BB_wave10_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiCA5998BB_wave3_enabled;
wave[17] aiCA5998BB_wave3_lastWave;
trigger aiCA5998BB_wave3_trigger = null;
int aiCA5998BB_wave3_runPlayer;
playergroup aiCA5998BB_wave3_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave3_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiCA5998BB_wave3_enabled[init_i] = true;
        aiCA5998BB_wave3_lastWave[init_i] = null;
    }

    aiCA5998BB_wave3_trigger = TriggerCreate("aiCA5998BB_wave3_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave3_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCA5998BB_wave3_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiCA5998BB_wave3_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiCA5998BB_wave3_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCA5998BB_wave3_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCA5998BB_wave3_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiCA5998BB_wave3_runFunc (bool c, bool a) {
    int p = aiCA5998BB_wave3_runPlayer;
    playergroup target = aiCA5998BB_wave3_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiCA5998BB_wave3_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiCA5998BB_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 150; }
    if (d == 2) { ta = 150; }
    if (d == 3) { ta = 150; }
    if (d == 4) { ta = 150; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiCA5998BB_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 4, "Marauder");
    AIAttackWaveAddUnits(3, 4, "Marauder");
    AIAttackWaveAddUnits(4, 5, "Marauder");
    AIAttackWaveAddUnits(5, 5, "Marauder");

    AIAttackWaveAddUnits(2, 3, "WarHound");
    AIAttackWaveAddUnits(3, 3, "WarHound");
    AIAttackWaveAddUnits(4, 5, "WarHound");
    AIAttackWaveAddUnits(5, 5, "WarHound");

    AIAttackWaveAddUnits(4, 2, "Medic");
    AIAttackWaveAddUnits(5, 2, "Medic");

    AIAttackWaveSend(p, ts, false);
    aiCA5998BB_wave3_lastWave[p] = WaveLastCreated();
    aiCA5998BB_lastWave[p] = aiCA5998BB_wave3_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave3_run (int p, playergroup target, bool wait) {
    aiCA5998BB_wave3_runPlayer = p;
    aiCA5998BB_wave3_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCA5998BB_wave3_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiCA5998BB_wave11_enabled;
wave[17] aiCA5998BB_wave11_lastWave;
trigger aiCA5998BB_wave11_trigger = null;
int aiCA5998BB_wave11_runPlayer;
playergroup aiCA5998BB_wave11_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave11_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiCA5998BB_wave11_enabled[init_i] = true;
        aiCA5998BB_wave11_lastWave[init_i] = null;
    }

    aiCA5998BB_wave11_trigger = TriggerCreate("aiCA5998BB_wave11_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave11_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCA5998BB_wave11_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiCA5998BB_wave11_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiCA5998BB_wave11_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCA5998BB_wave11_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCA5998BB_wave11_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiCA5998BB_wave11_runFunc (bool c, bool a) {
    int p = aiCA5998BB_wave11_runPlayer;
    playergroup target = aiCA5998BB_wave11_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiCA5998BB_wave11_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiCA5998BB_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 150; }
    if (d == 2) { ta = 150; }
    if (d == 3) { ta = 150; }
    if (d == 4) { ta = 150; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiCA5998BB_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 10, "Marine");
    AIAttackWaveAddUnits(3, 10, "Marine");
    AIAttackWaveAddUnits(4, 10, "Marine");
    AIAttackWaveAddUnits(5, 10, "Marine");

    AIAttackWaveAddUnits(2, 2, "Ghost");
    AIAttackWaveAddUnits(3, 2, "Ghost");
    AIAttackWaveAddUnits(4, 3, "Ghost");
    AIAttackWaveAddUnits(5, 3, "Ghost");

    AIAttackWaveAddUnits(2, 2, "Medivac");
    AIAttackWaveAddUnits(3, 2, "Medivac");
    AIAttackWaveAddUnits(4, 3, "Medivac");
    AIAttackWaveAddUnits(5, 3, "Medivac");

    AIAttackWaveAddUnits(4, 1, "Thor");
    AIAttackWaveAddUnits(5, 1, "Thor");

    AIAttackWaveSend(p, ts, false);
    aiCA5998BB_wave11_lastWave[p] = WaveLastCreated();
    aiCA5998BB_lastWave[p] = aiCA5998BB_wave11_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave11_run (int p, playergroup target, bool wait) {
    aiCA5998BB_wave11_runPlayer = p;
    aiCA5998BB_wave11_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCA5998BB_wave11_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Wrappers
//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave_enable (int w, int p, bool val) {
    if (w == 1) { aiCA5998BB_wave1_enable(p, val); }
    if (w == 4) { aiCA5998BB_wave4_enable(p, val); }
    if (w == 2) { aiCA5998BB_wave2_enable(p, val); }
    if (w == 5) { aiCA5998BB_wave5_enable(p, val); }
    if (w == 6) { aiCA5998BB_wave6_enable(p, val); }
    if (w == 7) { aiCA5998BB_wave7_enable(p, val); }
    if (w == 8) { aiCA5998BB_wave8_enable(p, val); }
    if (w == 9) { aiCA5998BB_wave9_enable(p, val); }
    if (w == 10) { aiCA5998BB_wave10_enable(p, val); }
    if (w == 3) { aiCA5998BB_wave3_enable(p, val); }
    if (w == 11) { aiCA5998BB_wave11_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
bool aiCA5998BB_wave_isEnabled (int w, int p) {
    if (w == 1) { return aiCA5998BB_wave1_isEnabled(p); }
    if (w == 4) { return aiCA5998BB_wave4_isEnabled(p); }
    if (w == 2) { return aiCA5998BB_wave2_isEnabled(p); }
    if (w == 5) { return aiCA5998BB_wave5_isEnabled(p); }
    if (w == 6) { return aiCA5998BB_wave6_isEnabled(p); }
    if (w == 7) { return aiCA5998BB_wave7_isEnabled(p); }
    if (w == 8) { return aiCA5998BB_wave8_isEnabled(p); }
    if (w == 9) { return aiCA5998BB_wave9_isEnabled(p); }
    if (w == 10) { return aiCA5998BB_wave10_isEnabled(p); }
    if (w == 3) { return aiCA5998BB_wave3_isEnabled(p); }
    if (w == 11) { return aiCA5998BB_wave11_isEnabled(p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup aiCA5998BB_wave_createdUnits (int w, int p) {
    return null;
}

//--------------------------------------------------------------------------------------------------
wave aiCA5998BB_wave_createdWave (int w, int p) {
    if (w == 1) { return aiCA5998BB_wave1_createdWave(p); }
    if (w == 4) { return aiCA5998BB_wave4_createdWave(p); }
    if (w == 2) { return aiCA5998BB_wave2_createdWave(p); }
    if (w == 5) { return aiCA5998BB_wave5_createdWave(p); }
    if (w == 6) { return aiCA5998BB_wave6_createdWave(p); }
    if (w == 7) { return aiCA5998BB_wave7_createdWave(p); }
    if (w == 8) { return aiCA5998BB_wave8_createdWave(p); }
    if (w == 9) { return aiCA5998BB_wave9_createdWave(p); }
    if (w == 10) { return aiCA5998BB_wave10_createdWave(p); }
    if (w == 3) { return aiCA5998BB_wave3_createdWave(p); }
    if (w == 11) { return aiCA5998BB_wave11_createdWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_wave_run (int w, int p, playergroup target, bool wait) {
    if (w == 1) { aiCA5998BB_wave1_run(p, target, wait); }
    if (w == 4) { aiCA5998BB_wave4_run(p, target, wait); }
    if (w == 2) { aiCA5998BB_wave2_run(p, target, wait); }
    if (w == 5) { aiCA5998BB_wave5_run(p, target, wait); }
    if (w == 6) { aiCA5998BB_wave6_run(p, target, wait); }
    if (w == 7) { aiCA5998BB_wave7_run(p, target, wait); }
    if (w == 8) { aiCA5998BB_wave8_run(p, target, wait); }
    if (w == 9) { aiCA5998BB_wave9_run(p, target, wait); }
    if (w == 10) { aiCA5998BB_wave10_run(p, target, wait); }
    if (w == 3) { aiCA5998BB_wave3_run(p, target, wait); }
    if (w == 11) { aiCA5998BB_wave11_run(p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Sequence
//--------------------------------------------------------------------------------------------------
trigger aiCA5998BB_waves_trigger = null;
int aiCA5998BB_waves_runPlayer;
playergroup aiCA5998BB_waves_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_waves_init () {
    aiCA5998BB_waves_trigger = TriggerCreate("aiCA5998BB_waves_runFunc");
}

//--------------------------------------------------------------------------------------------------
bool aiCA5998BB_waves_runFunc (bool c, bool a) {
    int p = aiCA5998BB_waves_runPlayer;
    playergroup target = aiCA5998BB_waves_runTarget;

    if (p < 0 || p >= 16) {
        return false;
    }

    aiCA5998BB_wave1_run(p, target, true);
    aiCA5998BB_wave4_run(p, target, true);
    aiCA5998BB_wave2_run(p, target, true);
    aiCA5998BB_wave5_run(p, target, true);
    aiCA5998BB_wave6_run(p, target, true);
    aiCA5998BB_wave7_run(p, target, true);
    aiCA5998BB_wave8_run(p, target, true);
    aiCA5998BB_wave9_run(p, target, true);
    aiCA5998BB_wave10_run(p, target, true);
    aiCA5998BB_wave3_run(p, target, true);
    aiCA5998BB_wave11_run(p, target, true);

    while (true) {
        aiCA5998BB_wave9_run(p, target, true);
        aiCA5998BB_wave10_run(p, target, true);
        aiCA5998BB_wave3_run(p, target, true);
        aiCA5998BB_wave11_run(p, target, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_waves_run (int p, playergroup target) {
    aiCA5998BB_waves_runPlayer = p;
    aiCA5998BB_waves_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCA5998BB_waves_trigger, false, false);
}

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }

    aiCA5998BB_wave1_enable(p, val);
    aiCA5998BB_wave4_enable(p, val);
    aiCA5998BB_wave2_enable(p, val);
    aiCA5998BB_wave5_enable(p, val);
    aiCA5998BB_wave6_enable(p, val);
    aiCA5998BB_wave7_enable(p, val);
    aiCA5998BB_wave8_enable(p, val);
    aiCA5998BB_wave9_enable(p, val);
    aiCA5998BB_wave10_enable(p, val);
    aiCA5998BB_wave3_enable(p, val);
    aiCA5998BB_wave11_enable(p, val);
}

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_waves_stop () {
    TriggerStop(aiCA5998BB_waves_trigger);

    TriggerStop(aiCA5998BB_wave1_trigger);
    TriggerStop(aiCA5998BB_wave4_trigger);
    TriggerStop(aiCA5998BB_wave2_trigger);
    TriggerStop(aiCA5998BB_wave5_trigger);
    TriggerStop(aiCA5998BB_wave6_trigger);
    TriggerStop(aiCA5998BB_wave7_trigger);
    TriggerStop(aiCA5998BB_wave8_trigger);
    TriggerStop(aiCA5998BB_wave9_trigger);
    TriggerStop(aiCA5998BB_wave10_trigger);
    TriggerStop(aiCA5998BB_wave3_trigger);
    TriggerStop(aiCA5998BB_wave11_trigger);
}

//--------------------------------------------------------------------------------------------------
// Configuration
//--------------------------------------------------------------------------------------------------
void aiCA5998BB_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCA5998BB_defGather[p] = val;
}

//--------------------------------------------------------------------------------------------------
string aiCA5998BB_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCA5998BB_customData[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCA5998BB_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCA5998BB_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
// Start
//--------------------------------------------------------------------------------------------------
bool aiCA5998BB_initialized = false;

//--------------------------------------------------------------------------------------------------
void aiCA5998BB_start (int p) {
    int init_i;

    if (p < 0 || p >= 16) {
        return;
    }
    if (!aiCA5998BB_initialized) {
        aiCA5998BB_wave1_init();
        aiCA5998BB_wave4_init();
        aiCA5998BB_wave2_init();
        aiCA5998BB_wave5_init();
        aiCA5998BB_wave6_init();
        aiCA5998BB_wave7_init();
        aiCA5998BB_wave8_init();
        aiCA5998BB_wave9_init();
        aiCA5998BB_wave10_init();
        aiCA5998BB_wave3_init();
        aiCA5998BB_wave11_init();
        aiCA5998BB_waves_init();

        for (init_i = 0; init_i <= 16; init_i += 1) {
            aiCA5998BB_defGather[init_i] = PointFromId(168);
        }

        aiCA5998BB_initialized = true;
    }

    AICampaignStart(p);
}
