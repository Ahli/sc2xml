include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmCampaignLib"

include "Lib281DEC45_h"

//--------------------------------------------------------------------------------------------------
// Library: Swarm Story (Shared)
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib281DEC45_InitLibraries () {
    libNtve_InitVariables();
    libSwaC_InitVariables();
}

// Variable Initialization
bool lib281DEC45_InitVariables_completed = false;

void lib281DEC45_InitVariables () {
    int init_i;
    int init_j;

    if (lib281DEC45_InitVariables_completed) {
        return;
    }

    lib281DEC45_InitVariables_completed = true;

    lib281DEC45_gv_zSS_UIVisible = true;
    lib281DEC45_gv_zSS_ScreenDialog = c_invalidDialogId;
    lib281DEC45_gv_zSS_StoryPanel = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_AttachmentUnits = UnitGroupEmpty();
    lib281DEC45_gv_zSS_UIArchivesPanel = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_UIArchivesTitle = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_UIArchivesBackButton = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_UIArchivesQuitButton = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_UIArchivesMissionPanel = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_UIArchivesMissionTitle = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_UIArchivesMissionBonusLabel = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_UIArchivesMissionImage = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_UIArchivesAchievementPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lib281DEC45_gv_zSS_UIArchivesAchievements[init_i] = c_invalidDialogControlId;
    }
    lib281DEC45_gv_zSS_UIArchivesDifficultyPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lib281DEC45_gv_zSS_UIArchivesDifficultyLabels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lib281DEC45_gv_zSS_UIArchivesDifficultyTimes[init_i] = c_invalidDialogControlId;
    }
    lib281DEC45_gv_zSS_UIArchivesMissionPlayButton = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_UIArchivesScenePanel = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_UIArchivesSceneTitle = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_UIArchivesSceneImage = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_UIArchivesScenePlayButton = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_UIArchivesLoadingDialog = c_invalidDialogId;
    lib281DEC45_gv_zSS_UIArchivesLoadingLabel = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_UITravelPanel = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_UITravelPlanetBigText = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_UITravelPlanetBigTitle = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_UITravelPlanetObjectiveText = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lib281DEC45_gv_zSS_UITravelPlanetFrame[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lib281DEC45_gv_zSS_UITravelPlanetPortrait[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lib281DEC45_gv_zSS_UITravelPlanetSelectedPortrait[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lib281DEC45_gv_zSS_UITravelPlanetSelectedBorder[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lib281DEC45_gv_zSS_UITravelPlanetSelectedName[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lib281DEC45_gv_zSS_UITravelPlanetSelectedText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lib281DEC45_gv_zSS_UITravelPlanetName[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lib281DEC45_gv_zSS_UITravelPlanetText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lib281DEC45_gv_zSS_UITravelPlanetButton[init_i] = c_invalidDialogControlId;
    }
    lib281DEC45_gv_zSS_UITravelUnitRewardFrame = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lib281DEC45_gv_zSS_UITravelRewardUnitPanel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lib281DEC45_gv_zSS_UITravelRewardUnit[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lib281DEC45_gv_zSS_UITravelRewardUnitLabel[init_i] = c_invalidDialogControlId;
    }
    lib281DEC45_gv_zSS_UITravelBackButton = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_UITravelQuitButton = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_UITravelLaunchButton = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_UITravelContactPlayButton = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_UITravelContactStopButton = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_UITravelContactPortrait = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_UITravelContactPortraitFrame = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_UITravelBGPortrait = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_UITravelSubtitleAnchor = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_UITravelSelectLabel = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_UITravelMainTitle = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_UITravelOrbitImage = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_UITravelDialog = c_invalidDialogId;
    lib281DEC45_gv_zSS_MissionDialog = c_invalidDialogId;
    lib281DEC45_gv_zSS_MissionRewardKerriganLevelPanel = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_MissionRewardEvolutionUnlocksPanel = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_MissionBonusMissionRewardPanel = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_MissionNewUnitFramePanel = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_MissionContactPortrait = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_MissionPanel = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_MissionBackgroundImage = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_MissionTextLabel = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_MissionPrimaryObjectiveText = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_MissionRewardText = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_MissionRewardEvolutionUnlockText = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_MissionRewardEvolutionUnlockTitle = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_MissionBonusText = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_MissionLaunchButton = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_MissionBackButton = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_MissionQuitButton = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_MissionContactPlayButton = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_MissionContactStopButton = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_MissionDifficultyDropdown = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_MissionTechnologyText = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_MissionTechnologyTitle = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_MissionTechnologyBorder = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_MissionTechnologyDescriptionLabel = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_MissionUnit = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_MissionSubtitleAnchor = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_MissionUnitTooltipHolder = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_MissionArmyButton = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_MissionKerriganButton = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_UIMainSetSubtitleAnchor = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lib281DEC45_gv_zSS_UIMainBottomButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lib281DEC45_gv_zSS_UIMainBottomButtonFlashes[init_i] = c_invalidDialogControlId;
    }
    lib281DEC45_gv_zSS_DebugSceneButtonY = 40;
    lib281DEC45_gv_zSS_DebugSceneDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 40; init_i += 1) {
        lib281DEC45_gv_zSS_DebugSceneAnimaticButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 40; init_i += 1) {
        lib281DEC45_gv_zSS_DebugSceneRenderButtons[init_i] = c_invalidDialogControlId;
    }
    lib281DEC45_gv_zSS_DebugSceneCloseButton = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_DebugStoryDialog = c_invalidDialogId;
    lib281DEC45_gv_zSS_DebugStoryLabel = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_DebugStoryTypeList = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_DebugStorySceneList = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_DebugStoryKerriganTypeCheckbox = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_DebugStoryKerriganTypeLabel = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_DebugStoryPlayButton = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_DebugStoryCloseButton = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_DebugStoryLoadButton = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_DebugStoryStateList = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_DebugStoryStateEditBox = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lib281DEC45_gv_zSS_DebugStorySceneTypes[init_i] = "";
    }
    lib281DEC45_gv_zSS_DebugStoryAmbientLabel = c_invalidDialogControlId;
    lib281DEC45_gv_zSS_DebugStoryEnabledLabel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lib281DEC45_gv_zSS_DebugStoryInteractiveLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lib281DEC45_gv_zSS_DebugStoryAmbientCheckbox[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lib281DEC45_gv_zSS_DebugStoryEnabledCheckbox[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lib281DEC45_gv_zSS_DebugStoryInteractiveReset[init_i] = c_invalidDialogControlId;
    }
    lib281DEC45_gv_zSS_CurrentSoundMode = libNtve_ge_VolumeChannelMode_Speech;
    lib281DEC45_gv_zSS_PlanetSetUnits = UnitGroupEmpty();
    for (init_i = 0; init_i <= 20; init_i += 1) {
        lib281DEC45_gv_zSS_Aliases[init_i] = "";
    }
    lib281DEC45_gv_zSS_VisibleUnits = UnitGroupEmpty();
    lib281DEC45_gv_zSS_StorySetLightingCutscene = c_cutsceneNone;
    lib281DEC45_gv_zSS_InteractionOn = true;
    lib281DEC45_gv_zSS_CurrentStoryActivity = lib281DEC45_ge_StoryActivities_None;
    lib281DEC45_gv_zSS_LastStoryActivity = lib281DEC45_ge_StoryActivities_None;
    lib281DEC45_gv_zSS_CurrentRoom = lib281DEC45_ge_Rooms_StoryRoomVoid;
    lib281DEC45_gv_zSS_LastRoom = lib281DEC45_ge_Rooms_StoryRoomVoid;
    for (init_i = 0; init_i <= lib281DEC45_gv_zSSC_MAXAMBIENTCUTSCENES; init_i += 1) {
        for (init_j = 0; init_j <= 4; init_j += 1) {
            lib281DEC45_gv_zSS_AmbientScenes[init_i][init_j] = c_cutsceneNone;
        }
    }
    for (init_i = 0; init_i <= lib281DEC45_gv_zSSC_MAXAMBIENTCUTSCENES; init_i += 1) {
        for (init_j = 0; init_j <= 4; init_j += 1) {
            lib281DEC45_gv_zSS_AmbientSceneTimer[init_i][init_j] = TimerCreate();
        }
    }
    for (init_i = 0; init_i <= lib281DEC45_gv_zSSC_MAXAMBIENTCUTSCENES; init_i += 1) {
        lib281DEC45_gv_zSS_AmbientSceneStatus[init_i] = lib281DEC45_ge_ZSS_AmbientSceneStatusType_ZSS_AmbientSceneUnused;
    }
    lib281DEC45_gv_zSS_AmbientScenesHidden = true;
    lib281DEC45_gv_zSS_ConvoListener = "Kerrigan";
    lib281DEC45_gv_zSS_ConversationScene = c_cutsceneNone;
    lib281DEC45_gv_zSS_ConversationCutscenePosition = Point(16.0, 16.0);
    lib281DEC45_gv_zSS_EggRoomCutscenePosition = Point(50.0, 50.0);
    lib281DEC45_gv_zSS_ActiveConvoBookmarkToken = "";
    for (init_i = 0; init_i <= 40; init_i += 1) {
        lib281DEC45_gv_zSS_Characters[init_i].lv_stringID = "";
        lib281DEC45_gv_zSS_Characters[init_i].lv_callout = c_invalidDialogControlId;
        lib281DEC45_gv_zSS_Characters[init_i].lv_calloutSubtitle = c_invalidDialogControlId;
        lib281DEC45_gv_zSS_Characters[init_i].lv_lightingCutscene = c_cutsceneNone;
    }
    lib281DEC45_gv_zSSC_DefaultAdjutantHeight = 0.4282;
    lib281DEC45_gv_zSS_Cutscene = c_cutsceneNone;
}

// Presets
// Functions
void lib281DEC45_gf_InitializeSwarmStoryData (string lp_map) {
    // Implementation
    UISetMinimumLetterboxHeight(0);
    GameSetTransitionMap(("Campaign/Swarm/" + libSwaC_gf_StoryMapFile(lp_map)));
    libNtve_gf_StoryMode(PlayerGroupAll(), true);
    FogSetDisableAtUltra(true);
    GameSetSpeedValue(c_gameSpeedNormal);
    GameSetSpeedLocked(true);
    GameSetQuitOnQuitButton(false);
    SoundtrackSetContinuous(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
    SoundtrackSetContinuous(PlayerGroupAll(), c_soundtrackCategoryAmbience, false);
    lib281DEC45_gv_zSS_CurrentMap = lp_map;
    libSwaC_gf_RegisterStoryEvent(libSwaC_ge_ZS_Event_CampaignDataReset, lib281DEC45_gt_ZSS_ResetStoryData);
    libSwaC_gf_RegisterStoryEvent(libSwaC_ge_ZS_Event_EvolutionMasterConversation, lib281DEC45_gt_ZSS_EggRoomEvoMasterClicked);
    libSwaC_gf_RegisterStoryEvent(libSwaC_ge_ZS_Event_TransitionFromStoryMap, lib281DEC45_gt_ZSS_SaveStoryDataCallback);
    libSwaC_gf_RegisterStoryEvent(libSwaC_ge_ZS_Event_PostEnteringEggRoom, lib281DEC45_gt_ZSS_EggRoomPostDisplayCutScene);
    libSwaC_gf_RegisterStoryEvent(libSwaC_ge_ZS_Event_ProgressCheatStart, lib281DEC45_gt_ZSS_DebugProgressCheatUsed);
    libSwaC_gf_RegisterStoryEvent(libSwaC_ge_ZS_Event_ProgressCheatLoad, lib281DEC45_gt_ZSS_DebugProgressLoad);
    libSwaC_gf_RegisterStoryEvent(libSwaC_ge_ZS_Event_ProgressCheatSave, lib281DEC45_gt_ZSS_DebugProgressSave);
    libSwaC_gf_RegisterStoryEvent(libSwaC_ge_ZS_Event_ProgressMapCompleted, lib281DEC45_gt_ZSS_DebugProgressMapComplete);
    libSwaC_gf_RegisterStoryEvent(libSwaC_ge_ZS_Event_ProgressCheatCancel, lib281DEC45_gt_ZSS_DebugProgressCheatCancelled);
    libSwaC_gf_RegisterStoryEvent(libSwaC_ge_ZS_Event_ArchivesBankSynced, lib281DEC45_gt_ZSS_UIArchivesSynced);
    libSwaC_gf_RegisterStoryEvent(libSwaC_ge_ZS_Event_StatisticsBankSave, lib281DEC45_gt_ZSS_StoryModeStatisticsSave);
    lib281DEC45_gf_ZSS_CharacterDataInit();
    lib281DEC45_gf_ZSS_InitSceneData();
    libSwaC_gf_ULoadCampaignData(lp_map);
    lib281DEC45_gf_ZSS_LoadStoryData();
    TriggerExecute(lib281DEC45_gt_ZSS_UIStoryInit, true, false);
    lib281DEC45_gf_ZSS_CharacterDataUpdate();
    lib281DEC45_gf_ZSS_UpdateStoryData();
    libNtve_gf_SetCinematicTransitionStyle(libNtve_ge_CinematicTransitionStyle_Story);
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, null, c_soundtrackCueAny, c_soundtrackIndexAny);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, false);
}

void lib281DEC45_gf_BeginStoryMode () {
    unitgroup autoD711EDC9_g;
    int autoD711EDC9_u;
    unitgroup auto37E86738_g;
    int auto37E86738_u;

    // Variable Declarations
    unit lv_indexUnit;

    // Variable Initialization

    // Implementation
    if ((lib281DEC45_gv_zSS_IsLeavingMap == true)) {
        return ;
    }
    else {
    }
    lib281DEC45_gf_ZSS_SMTipsInit();
    if ((lib281DEC45_gf_ZSS_CampaignCompleted() == true)) {
        lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomMissionArchives);
        return ;
    }
    else {
    }
    if ((lib281DEC45_gv_zSS_IsTransitionalLoad == true)) {
        lib281DEC45_gf_EnterRoom(lib281DEC45_gf_CurrentRoom());
        return ;
    }
    else {
    }
    lib281DEC45_gf_ZSS_RunAutomatedTest();
    if ((GameIsExaminable() == true)) {
        UISetWorldVisible(PlayerGroupAll(), false);
        Wait(1.0, c_timeGame);
        autoD711EDC9_g = lib281DEC45_gv_zSS_PlanetSetUnits;
        autoD711EDC9_u = 1;
        for ( ; autoD711EDC9_u <= UnitGroupCount(autoD711EDC9_g, c_unitCountAll) ; autoD711EDC9_u += BoolToInt(lv_indexUnit == UnitGroupUnit(autoD711EDC9_g, autoD711EDC9_u)) ) {
            lv_indexUnit = UnitGroupUnit(autoD711EDC9_g, autoD711EDC9_u);
            UnitUnloadModel(lv_indexUnit);
        }
        ConsoleCommand("resourceclean", true, true);
        Wait(1.0, c_timeGame);
        ConsoleCommand("resourcedump", true, true);
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_281DEC45_3E4C043A"), true);
        Wait(1.0, c_timeGame);
        auto37E86738_g = lib281DEC45_gv_zSS_PlanetSetUnits;
        auto37E86738_u = 1;
        for ( ; auto37E86738_u <= UnitGroupCount(auto37E86738_g, c_unitCountAll) ; auto37E86738_u += BoolToInt(lv_indexUnit == UnitGroupUnit(auto37E86738_g, auto37E86738_u)) ) {
            lv_indexUnit = UnitGroupUnit(auto37E86738_g, auto37E86738_u);
            UnitLoadModel(lv_indexUnit);
        }
    }
    else {
    }
    TriggerQueuePause(true);
    if ((lib281DEC45_gv_zSSX_DebugStoryScene != null)) {
        lib281DEC45_gf_PlayScriptedScene(lib281DEC45_gv_zSSX_DebugStoryScene);
        lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomDebugStoryCheat);
        return ;
    }
    else {
    }
    lib281DEC45_gf_ZSS_PlayStoryModeEntryScenes();
    if ((libSwaC_gf_LastMapConditionCheck(libSwaC_ge_MissionCondition_Simulation) == true) && (libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_LastMap(), c_mapKindStory) == false)) {
        lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomMissionArchives);
        return ;
    }
    else {
    }
    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_LastMap(), c_mapKindUpgrade) == true)) {
        lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomEggRoom);
        return ;
    }
    else {
    }
    if ((libSwaC_gf_MissionStatusCheck("ZLab1", libSwaC_ge_MissionStatus_Completed) == false)) {
        libSwaC_gf_LaunchMission("ZLab1", false, PlayerDifficulty(1));
        return ;
    }
    else {
    }
    if ((libSwaC_gf_MissionStatusCheck("ZLab3", libSwaC_ge_MissionStatus_Completed) == false)) {
        lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomMissionScreen);
        return ;
    }
    else {
    }
    if ((libSwaC_gf_MissionStatusCheck("ZLab3", libSwaC_ge_MissionStatus_Completed) == true) && (libSwaC_gf_CurrentMap() == "ZStoryLab")) {
        lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomTravelScreen);
        return ;
    }
    else {
    }
    lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomMainSet);
    TriggerExecute(lib281DEC45_gt_ZSS_PlayEntryAmbientLine, true, false);
}

void lib281DEC45_gf_ApplyStorymodeEnvironment () {
    // Implementation
    GameTimeOfDaySet("08:00:00");
    GameTimeOfDayPause(true);
    VisRevealArea(1, RegionEntireMap(), 0.0, false);
    CameraLockInput(1, true);
    CameraUseHeightSmoothing(1, false);
}

void lib281DEC45_gf_ZSS_UpdateStoryData () {
    // Implementation
    if ((libSwaC_gf_MissionStatusCheck("ZZerus2", libSwaC_ge_MissionStatus_Completed) == true)) {
        CutsceneAddGlobalFilter("Primal");
    }
    else {
        CutsceneAddGlobalFilter("Ghost");
    }
    if (((libSwaC_gf_MissionStatusCheck("ZChar1", libSwaC_ge_MissionStatus_Completed) == true) || (libSwaC_gf_MissionStatusCheck("ZExpedition1", libSwaC_ge_MissionStatus_Completed) == true))) {
        UserDataSetInt("StoryStates", "Post Lab Choice Made", "value", 1, 1);
    }
    else {
    }
    if ((libSwaC_gf_MissionStatusCheck("ZZerus2", libSwaC_ge_MissionStatus_Completed) == true) && (UserDataGetInt("WriterStates", "KerriganPrimalColumn", "Value", 1) != 2)) {
        UserDataSetInt("WriterStates", "KerriganPrimalColumn", "Value", 1, 1);
    }
    else {
    }
    if ((libSwaC_gf_StoryKerriganHasNewAbilities() == true) && (UserDataGetInt("WriterStates", "KerriganFirstTier", "Value", 1) != 2)) {
        UserDataSetInt("WriterStates", "KerriganFirstTier", "Value", 1, 1);
    }
    else {
    }
    if ((libSwaC_gf_MissionStatusCheck("ZKorhal3", libSwaC_ge_MissionStatus_Completed) == true)) {
        lib281DEC45_gv_zSS_CampaignComplete = true;
    }
    else {
        lib281DEC45_gv_zSS_ArchivesSynced = true;
    }
    if ((((libSwaC_gf_NumberOfMissionArcsCompleted() == 3) && (libSwaC_gf_MissionStatusCheck("ZChar3", libSwaC_ge_MissionStatus_Available) == true)) || ((libSwaC_gf_NumberOfMissionArcsCompleted() == 3) && (libSwaC_gf_MissionStatusCheck("ZExpedition3", libSwaC_ge_MissionStatus_Available) == true)) || ((libSwaC_gf_NumberOfMissionArcsCompleted() == 4) && (libSwaC_gf_MissionStatusCheck("ZZerus3", libSwaC_ge_MissionStatus_Completed) == true) && (libSwaC_gf_CurrentMap() == "ZStoryZerus")))) {
        ConversationDataStateSetValue("TemporaryStoryStates|FirstDoWJustPlayed", 1);
    }
    else {
    }
}

void lib281DEC45_gf_ZSS_SetStoryMap (string lp_map) {
    // Implementation
    lib281DEC45_gv_zSS_CurrentMap = lp_map;
    libSwaC_gf_SetCurrentMap(lp_map);
}

void lib281DEC45_gf_ZSS_RunAutomatedTest () {
    // Implementation
    if ((GameIsTestMap(true) == true)) {
        PreloadScene("Cutscenes\\zScripted_ZAdjutantIntro.SC2Cutscene", false);
        lib281DEC45_gf_ChangeRoom(lib281DEC45_ge_Rooms_StoryRoomVoid);
        lib281DEC45_gf_StartStoryActivity(lib281DEC45_ge_StoryActivities_Cinematic);
        libSwaC_gf_PlayCinematic("Zerg02 - Dominion Calling", true);
        lib281DEC45_gf_PlayScriptedScene("Scene18");
        lib281DEC45_gf_StoryCutsceneFade(true, 0.0, true);
        lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomMainSet);
        Wait(5.0, c_timeGame);
        lib281DEC45_gf_ZSS_PlayCharacterConversation("Zerg Adjutant");
        UserDataSetInt("StoryStates", "Army UI Visited", "value", 1, 1);
        TriggerExecute(lib281DEC45_gt_ZSS_DebugEnterEggRoom, true, false);
        Wait(5.0, c_timeGame);
        ConsoleCommand("exit", true, true);
    }
    else {
    }
}

bool lib281DEC45_gf_ZSS_InNewStorymodeInstance () {
    // Implementation
    if ((lib281DEC45_gv_zSS_IsTransitionalLoad == false) && (libSwaC_gf_LastMapConditionCheck(libSwaC_ge_MissionCondition_Simulation) == false) && (((libSwaC_gf_LastMapConditionCheck(libSwaC_ge_MissionCondition_Sucessful) == true) && (libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_LastMap(), c_mapKindMission) == true)) || ((libSwaC_gf_LastMap() != libSwaC_gf_CurrentMap()) && (libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_LastMap(), c_mapKindStory) == true)))) {
        return true;
    }
    else {
    }
    return false;
}

void lib281DEC45_gf_ZSS_LoadStoryData () {
    int auto4FB8B176_ai;
    int auto4FB8B176_ae;
    int auto2DC3C7B3_ai;
    int auto2DC3C7B3_ae;

    // Variable Declarations
    bank lv_storyBank;
    bank lv_statisticsBank;
    string lv__SectionName;
    string lv_character;
    int lv_index;
    string lv_indexAbility;
    string lv_indexCategory;

    // Variable Initialization
    lv_storyBank = libSwaC_gf_StoryBank();
    lv__SectionName = "";

    // Implementation
    lib281DEC45_gf_ZSS_TransitionalLoad();
    auto4FB8B176_ai = 1;
    auto4FB8B176_ae = UserDataInstanceCount("Character")+1;
    while (auto4FB8B176_ai < auto4FB8B176_ae) {
        lv_character = UserDataInstance("Character", auto4FB8B176_ai);
        lv__SectionName = "CharacterUnlocked";
        UserDataSetInt("Character", lv_character, "Unlocked", 1, BankValueGetAsInt(lv_storyBank, lv__SectionName, (lv_character)));
        lv__SectionName = "CharacterAmbient";
        lib281DEC45_gf_ZSS_CharacterSetAmbient(lv_character, (BankValueGetAsInt(lv_storyBank, lv__SectionName, (lv_character)) == 1));
        lv__SectionName = "CharacterNew";
        lib281DEC45_gf_SetCharacterNew(lv_character, (BankValueGetAsInt(lv_storyBank, lv__SectionName, (lv_character)) == 1));
        auto4FB8B176_ai = auto4FB8B176_ai+1;
    }
    lib281DEC45_gf_ZSS_LoadConversations(lv_storyBank, "StoryConversations");
    lv__SectionName = "Debug";
    lib281DEC45_gv_zSSX_DebugStoryScene = UserDataInstanceFromReference(BankValueGetAsString(lv_storyBank, lv__SectionName, "DebugStoryScene"));
    if ((lib281DEC45_gf_ZSS_InNewStorymodeInstance() == true)) {
        if ((libSwaC_gf_MissionStatusCheck("ZChar1", libSwaC_ge_MissionStatus_Completed) == true)) {
            lib281DEC45_gf_EnableDisableCharacter("Zagara", true);
        }
        else {
        }
        auto2DC3C7B3_ai = 1;
        auto2DC3C7B3_ae = UserDataInstanceCount("Character")+1;
        while (auto2DC3C7B3_ai < auto2DC3C7B3_ae) {
            lv_character = UserDataInstance("Character", auto2DC3C7B3_ai);
            lv__SectionName = "CharacterUnlocked";
            lib281DEC45_gf_ZSS_CharacterSetAmbient(lv_character, !(ConversationDataCanRun(lib281DEC45_gf_ZSS_CharacterConversation(lv_character), false)));
            lib281DEC45_gf_SetCharacterNew(lv_character, ConversationDataCanRun(lib281DEC45_gf_ZSS_CharacterConversation(lv_character), true));
            UserDataSetInt("Character", lv_character, "Unlocked", 1, BankValueGetAsInt(lv_storyBank, lv__SectionName, (lv_character)));
            auto2DC3C7B3_ai = auto2DC3C7B3_ai+1;
        }
        lib281DEC45_gf_ZSS_SaveConversations(lv_storyBank, "ConversationSnapshot");
    }
    else {
    }
    BankLoad("\"ZCampaignStats\"", 1);
    if ((BankLastCreated() == null)) {
        return ;
    }
    else {
    }
    lv_statisticsBank = BankLastCreated();
    BankOptionSet(lv_statisticsBank, c_bankOptionSignature, true);
    UserDataLoadType("ScriptedScenes", lv_statisticsBank, "StoryScenes");
}

void lib281DEC45_gf_ZSS_SaveStoryData () {
    int auto7E4635CA_ai;
    int auto7E4635CA_ae;

    // Variable Declarations
    bank lv_storyBank;
    string lv__SectionName;
    string lv_character;
    string lv_indexCategory;

    // Variable Initialization
    lv_storyBank = libSwaC_gf_StoryBank();
    lv__SectionName = "";

    // Implementation
    auto7E4635CA_ai = 1;
    auto7E4635CA_ae = UserDataInstanceCount("Character")+1;
    while (auto7E4635CA_ai < auto7E4635CA_ae) {
        lv_character = UserDataInstance("Character", auto7E4635CA_ai);
        lv__SectionName = "CharacterUnlocked";
        BankValueSetFromInt(libSwaC_gf_StoryBank(), lv__SectionName, (lv_character), UserDataGetInt("Character", lv_character, "Unlocked", 1));
        lv__SectionName = "CharacterAmbient";
        BankValueSetFromInt(libSwaC_gf_StoryBank(), lv__SectionName, (lv_character), UserDataGetInt("Character", lv_character, "Ambient", 1));
        lv__SectionName = "CharacterNew";
        BankValueSetFromInt(libSwaC_gf_StoryBank(), lv__SectionName, (lv_character), BoolToInt(lib281DEC45_gf_CharacterHasNewInfo(lv_character)));
        auto7E4635CA_ai = auto7E4635CA_ai+1;
    }
    lib281DEC45_gf_ZSS_SaveConversations(lv_storyBank, "StoryConversations");
    lv__SectionName = "Debug";
    BankValueSetFromString(lv_storyBank, lv__SectionName, "DebugStoryScene", ("ScriptedScenes" + ";" + (lib281DEC45_gv_zSSX_DebugStoryScene)));
    BankSave(lv_storyBank);
}

void lib281DEC45_gf_ZSS_SaveConversations (bank lp_bank, string lp_section) {
    int auto3171AB38_ai;
    int auto3171AB38_ae;

    // Variable Declarations
    string lv_indexCharacter;
    string lv_indexHotspot;

    // Variable Initialization

    // Implementation
    auto3171AB38_ai = 1;
    auto3171AB38_ae = UserDataInstanceCount("Character")+1;
    while (auto3171AB38_ai < auto3171AB38_ae) {
        lv_indexCharacter = UserDataInstance("Character", auto3171AB38_ai);
        ConversationDataSaveNodeState(lib281DEC45_gf_ZSS_CharacterConversation(lv_indexCharacter), lp_bank, lp_section);
        ConversationDataSaveNodeState(lib281DEC45_gf_ZSS_CharacterAmbientConversation(lv_indexCharacter), lp_bank, lp_section);
        auto3171AB38_ai = auto3171AB38_ai+1;
    }
}

void lib281DEC45_gf_ZSS_LoadConversations (bank lp_bank, string lp_section) {
    int auto4F1F65F6_ai;
    int auto4F1F65F6_ae;

    // Variable Declarations
    string lv_indexCharacter;
    string lv_indexHotspot;

    // Variable Initialization

    // Implementation
    auto4F1F65F6_ai = 1;
    auto4F1F65F6_ae = UserDataInstanceCount("Character")+1;
    while (auto4F1F65F6_ai < auto4F1F65F6_ae) {
        lv_indexCharacter = UserDataInstance("Character", auto4F1F65F6_ai);
        ConversationDataLoadNodeState(lib281DEC45_gf_ZSS_CharacterConversation(lv_indexCharacter), lp_bank, lp_section);
        ConversationDataLoadNodeState(lib281DEC45_gf_ZSS_CharacterAmbientConversation(lv_indexCharacter), lp_bank, lp_section);
        auto4F1F65F6_ai = auto4F1F65F6_ai+1;
    }
}

void lib281DEC45_gf_ZSS_RestoreWriterStates () {
    int autoA64B39DA_ae;
    int autoA64B39DA_ai;

    // Variable Declarations
    int lv_index;
    string lv_indexState;

    // Variable Initialization

    // Implementation
    autoA64B39DA_ae = UserDataInstanceCount("WriterStates");
    autoA64B39DA_ai = 1;
    lv_index = 1;
    for ( ; ( (autoA64B39DA_ai >= 0 && lv_index <= autoA64B39DA_ae) || (autoA64B39DA_ai <= 0 && lv_index >= autoA64B39DA_ae) ) ; lv_index += autoA64B39DA_ai ) {
        lv_indexState = UserDataInstance("WriterStates", lv_index);
        if ((UserDataGetInt("WriterStates", lv_indexState, "Value", 1) == BankValueGetAsInt(libSwaC_gf_StoryBank(), ("WriterStateSnapshot"), (lv_indexState)))) {
            UserDataLoadInstance("WriterStates", lv_indexState, lib281DEC45_gf_ZSS_TempConversationBank(), ("WriterStates"));
        }
        else {
        }
    }
    if ((UserDataGetInt("StoryStates", "Kerrigan UI Visited", "value", 1) == 1)) {
        UserDataSetInt("WriterStates", "KerriganFirstVisit", "Value", 1, 2);
    }
    else {
    }
}

void lib281DEC45_gf_ZSS_BackupWriterStates () {
    // Variable Declarations
    int lv_index;
    string lv_indexState;

    // Variable Initialization

    // Implementation
    UserDataSaveType("WriterStates", lib281DEC45_gf_ZSS_TempConversationBank(), ("WriterStates"));
}

void lib281DEC45_gf_ZSS_SaveSnapshotWriterStates () {
    // Variable Declarations
    int lv_index;
    string lv_indexState;

    // Variable Initialization

    // Implementation
    UserDataSaveType("WriterStates", libSwaC_gf_StoryBank(), ("WriterStateSnapshot"));
}

void lib281DEC45_gf_ZSS_LoadSnapshotWriterStates () {
    // Variable Declarations
    int lv_index;
    string lv_indexState;

    // Variable Initialization

    // Implementation
    UserDataLoadType("WriterStates", libSwaC_gf_StoryBank(), ("WriterStateSnapshot"));
}

bank lib281DEC45_gf_ZSS_TempConversationBank () {
    // Implementation
    if ((lib281DEC45_gv_zSS_TempConvoBank == null)) {
        BankLoad("ZSSTempConvoBank", 1);
        lib281DEC45_gv_zSS_TempConvoBank = BankLastCreated();
    }
    else {
    }
    return lib281DEC45_gv_zSS_TempConvoBank;
}

void lib281DEC45_gf_ZSS_SaveForExit () {
    // Variable Declarations
    string lv_transitionMap;
    string lv_image;

    // Variable Initialization
    lv_transitionMap = "";

    // Implementation
    if ((lib281DEC45_gv_zSS_CampaignComplete == true) && (AchievementsDisabled(1) == true)) {
        return ;
    }
    else {
    }
    lib281DEC45_gv_zSS_IsLeavingMap = true;
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_281DEC45_BED331D6"), false);
    if ((lib281DEC45_gv_zSS_CampaignComplete == true)) {
        CampaignProgressEnableCampaignCompletedSaves(PlayerGroupAll(), true);
    }
    else {
    }
    libSwaC_gf_PrepareForStoryModeTransitionalSave();
    lib281DEC45_gf_ZSS_SaveStoryData();
    lib281DEC45_gf_ZSS_TransitionalSave();
    lv_transitionMap = ("Campaign/Swarm/" + libSwaC_gf_StoryMapFile(libSwaC_gf_CurrentMap()));
    GameSetTransitionMap(lv_transitionMap);
    lv_image = libSwaC_gf_StoryMapLoadingScreenVictoryImage(libSwaC_gf_CurrentMap());
    GameSaveCreate(libSwaC_gf_StoryMapName(libSwaC_gf_CurrentMap()), StringToText(""), lv_image, true);
    Wait(0.1, c_timeGame);
}

void lib281DEC45_gf_ZSS_TransitionalSave () {
    // Variable Declarations
    string lv__SectionName;

    // Variable Initialization
    lv__SectionName = "";

    // Implementation
    BankLoad(lib281DEC45_gv_zSS_TransitionBankName, 1);
    lib281DEC45_gv_zSS_TransitionBank = BankLastCreated();
    lv__SectionName = "StorySet";
    BankValueSetFromInt(BankLastCreated(), lv__SectionName, "CurrentRoom", (lib281DEC45_gv_zSS_CurrentRoom));
}

void lib281DEC45_gf_ZSS_TransitionalLoad () {
    // Variable Declarations
    string lv__SectionName;

    // Variable Initialization
    lv__SectionName = "";

    // Implementation
    if ((BankExists(lib281DEC45_gv_zSS_TransitionBankName, 1) == false)) {
        return ;
    }
    else {
    }
    lib281DEC45_gv_zSS_IsTransitionalLoad = true;
    BankLoad(lib281DEC45_gv_zSS_TransitionBankName, 1);
    lv__SectionName = "StorySet";
    lib281DEC45_gv_zSS_CurrentRoom = lib281DEC45_gf_ZSS_RoomFromIndex(BankValueGetAsInt(BankLastCreated(), lv__SectionName, "CurrentRoom"));
    if ((lib281DEC45_gv_zSS_CurrentRoom != lib281DEC45_ge_Rooms_StoryRoomEggRoom)) {
        lib281DEC45_gv_zSS_CurrentRoom = lib281DEC45_ge_Rooms_StoryRoomMainSet;
    }
    else {
    }
}

void lib281DEC45_gf_ShowHideStoryUI (bool lp_hideShow) {
    // Implementation
    lib281DEC45_gv_zSS_UIVisible = (lp_hideShow == true);
    if ((lib281DEC45_gv_zSS_ScreenDialog != c_invalidDialogId)) {
        DialogSetVisible(lib281DEC45_gv_zSS_ScreenDialog, PlayerGroupAll(), lp_hideShow);
    }
    else {
    }
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, lp_hideShow);
    if ((lp_hideShow == false)) {
        lib281DEC45_gf_ToggleAllUnitsHighlightable(false);
    }
    else {
        lib281DEC45_gf_ToggleAllUnitsHighlightable(true);
    }
}

void lib281DEC45_gf_StoryAddCalloutAttachmentUnit (unit lp_attachmentUnit) {
    // Implementation
    UnitGroupAdd(lib281DEC45_gv_zSS_AttachmentUnits, lp_attachmentUnit);
}

string lib281DEC45_gf_ZSS_UIArchivesDataString (int lp_missionarchive) {
    // Implementation
    return ("ZSS_Archive_" + IntToString((lp_missionarchive)));
}

string lib281DEC45_gf_ZSS_UIArchivesDataTypeString (int lp_missionarchive) {
    // Implementation
    return ("ZSS_ArchiveType_" + IntToString((lp_missionarchive)));
}

void lib281DEC45_gf_ZSS_UIArchivesOverlayCreate () {
    // Implementation
    lib281DEC45_gv_zSS_MissionArchiveOverlayCreated = true;
    lib281DEC45_gv_zSS_UIArchivesPanel = BattleReportGetDialogControl();
    DialogControlHookup(lib281DEC45_gv_zSS_UIArchivesPanel, c_triggerControlTypePanel, "ScreenTitleFrame");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "ScreenTitleLabel");
    lib281DEC45_gv_zSS_UIArchivesTitle = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UIArchivesPanel, c_triggerControlTypeButton, "CloseButton");
    lib281DEC45_gv_zSS_UIArchivesBackButton = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UIArchivesPanel, c_triggerControlTypeButton, "QuitButton");
    lib281DEC45_gv_zSS_UIArchivesQuitButton = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UIArchivesPanel, c_triggerControlTypePanel, "MissionSummaryContainer");
    lib281DEC45_gv_zSS_UIArchivesMissionPanel = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UIArchivesMissionPanel, c_triggerControlTypeLabel, "MissionTitleLabel");
    lib281DEC45_gv_zSS_UIArchivesMissionTitle = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UIArchivesMissionPanel, c_triggerControlTypeLabel, "MissionBonusObjectivesLabel");
    lib281DEC45_gv_zSS_UIArchivesMissionBonusLabel = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UIArchivesMissionPanel, c_triggerControlTypeImage, "MissionImage");
    lib281DEC45_gv_zSS_UIArchivesMissionImage = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UIArchivesMissionPanel, c_triggerControlTypePanel, "AchievementSummaryContainer");
    lib281DEC45_gv_zSS_UIArchivesAchievementPanel = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UIArchivesAchievementPanel, c_triggerControlTypeAchievement, "AchievementFrame0");
    lib281DEC45_gv_zSS_UIArchivesAchievements[1] = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UIArchivesAchievementPanel, c_triggerControlTypeAchievement, "AchievementFrame1");
    lib281DEC45_gv_zSS_UIArchivesAchievements[2] = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UIArchivesAchievementPanel, c_triggerControlTypeAchievement, "AchievementFrame2");
    lib281DEC45_gv_zSS_UIArchivesAchievements[3] = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UIArchivesMissionPanel, c_triggerControlTypePanel, "DifficultySummaryContainer");
    lib281DEC45_gv_zSS_UIArchivesDifficultyPanel = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UIArchivesDifficultyPanel, c_triggerControlTypeLabel, "DifficultyCasualLabel");
    lib281DEC45_gv_zSS_UIArchivesDifficultyLabels[1] = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UIArchivesDifficultyPanel, c_triggerControlTypeLabel, "DifficultyCasualTimeLabel");
    lib281DEC45_gv_zSS_UIArchivesDifficultyTimes[1] = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UIArchivesDifficultyPanel, c_triggerControlTypeLabel, "DifficultyNormalLabel");
    lib281DEC45_gv_zSS_UIArchivesDifficultyLabels[2] = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UIArchivesDifficultyPanel, c_triggerControlTypeLabel, "DifficultyNormalTimeLabel");
    lib281DEC45_gv_zSS_UIArchivesDifficultyTimes[2] = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UIArchivesDifficultyPanel, c_triggerControlTypeLabel, "DifficultyHardLabel");
    lib281DEC45_gv_zSS_UIArchivesDifficultyLabels[3] = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UIArchivesDifficultyPanel, c_triggerControlTypeLabel, "DifficultyHardTimeLabel");
    lib281DEC45_gv_zSS_UIArchivesDifficultyTimes[3] = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UIArchivesDifficultyPanel, c_triggerControlTypeLabel, "DifficultyBrutalLabel");
    lib281DEC45_gv_zSS_UIArchivesDifficultyLabels[4] = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UIArchivesDifficultyPanel, c_triggerControlTypeLabel, "DifficultyBrutalTimeLabel");
    lib281DEC45_gv_zSS_UIArchivesDifficultyTimes[4] = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UIArchivesMissionPanel, c_triggerControlTypeButton, "ReplayMissionButton");
    lib281DEC45_gv_zSS_UIArchivesMissionPlayButton = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UIArchivesPanel, c_triggerControlTypePanel, "CinematicSummaryContainer");
    lib281DEC45_gv_zSS_UIArchivesScenePanel = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UIArchivesScenePanel, c_triggerControlTypeLabel, "CinematicTitleLabel");
    lib281DEC45_gv_zSS_UIArchivesSceneTitle = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UIArchivesScenePanel, c_triggerControlTypeImage, "CinematicImage");
    lib281DEC45_gv_zSS_UIArchivesSceneImage = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UIArchivesScenePanel, c_triggerControlTypeButton, "PlayCinematicButton");
    lib281DEC45_gv_zSS_UIArchivesScenePlayButton = DialogControlLastCreated();
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    lib281DEC45_gv_zSS_UIArchivesLoadingDialog = DialogLastCreated();
    DialogSetFullscreen(lib281DEC45_gv_zSS_UIArchivesLoadingDialog, true);
    DialogSetImageVisible(lib281DEC45_gv_zSS_UIArchivesLoadingDialog, false);
    libNtve_gf_CreateDialogItemLabel(lib281DEC45_gv_zSS_UIArchivesLoadingDialog, 200, 50, c_anchorBottomLeft, 0, 0, StringExternal("Param/Value/lib_281DEC45_05ECE39E"), Color(254*100/255,138*100/255,14*100/255), false, 2.0);
    lib281DEC45_gv_zSS_UIArchivesLoadingLabel = DialogControlLastCreated();
    DialogControlSetPositionRelative(lib281DEC45_gv_zSS_UIArchivesLoadingLabel, PlayerGroupAll(), c_anchorTopRight, lib281DEC45_gv_zSS_UIArchivesMissionPanel, c_anchorBottomRight, 0, 0);
}

void lib281DEC45_gf_ZSS_UIArchivesClosed () {
    // Implementation
    TriggerEnable(lib281DEC45_gt_ZSS_UIArchivesSelectionChanged, false);
    TriggerEnable(lib281DEC45_gt_ZSS_UIArchivesScenePlayClicked, false);
    TriggerEnable(lib281DEC45_gt_ZSS_UIArchivesMissionPlayClicked, false);
    TriggerEnable(lib281DEC45_gt_ZSS_UIArchivesCloseClicked, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleReportPanel, false);
}

void lib281DEC45_gf_ZSS_UIArchivesDisplay () {
    // Implementation
    TriggerExecute(lib281DEC45_gt_ZSS_UIArchivesCreate, true, false);
    TriggerEnable(lib281DEC45_gt_ZSS_UIArchivesSelectionChanged, true);
    TriggerEnable(lib281DEC45_gt_ZSS_UIArchivesScenePlayClicked, true);
    TriggerEnable(lib281DEC45_gt_ZSS_UIArchivesMissionPlayClicked, true);
    TriggerEnable(lib281DEC45_gt_ZSS_UIArchivesCloseClicked, true);
    lib281DEC45_gf_ZSS_UIArchivesUpdate();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleReportPanel, true);
    if ((lib281DEC45_gf_ZSS_CampaignCompleted() == true) && (libSwaC_gf_StoryMasterArchivesWasVisited() == false)) {
        TextExpressionSetToken("Param/Expression/lib_281DEC45_3B6081C9", "A", ConversationDataStateText("StoryModeText|UberArchivesIntroDescription", "Description"));
        TextExpressionSetToken("Param/Expression/lib_281DEC45_3B6081C9", "B", ConversationDataStateText("StoryModeText|UberArchivesIntroDescription1", "Description"));
        UIShowCustomDialog(PlayerGroupAll(), libNtve_ge_CustomDialogType_c_customDialogTypeMessage, ConversationDataStateText("StoryModeText|UberArchivesIntroTitle", "Description"), TextExpressionAssemble("Param/Expression/lib_281DEC45_3B6081C9"), true);
    }
    else {
    }
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Mission_Archives", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libSwaC_gf_CinematicFade(true, 0.0, Color(0.00, 0.00, 0.00), true);
}

void lib281DEC45_gf_ZSS_UIArchivesUpdate () {
    int auto996933DC_ae;
    int auto996933DC_ai;

    // Variable Declarations
    int lv_index;
    string lv_mission;
    string lv_scene;

    // Variable Initialization

    // Implementation
    if ((lib281DEC45_gv_zSS_ArchivesSynced == true)) {
        DialogSetVisible(lib281DEC45_gv_zSS_UIArchivesLoadingDialog, PlayerGroupAll(), false);
    }
    else {
        DialogSetVisible(lib281DEC45_gv_zSS_UIArchivesLoadingDialog, PlayerGroupAll(), true);
    }
    if ((lib281DEC45_gv_zSS_CampaignComplete == true)) {
        libNtve_gf_SetDialogItemText(lib281DEC45_gv_zSS_UIArchivesTitle, ConversationDataStateText("StoryModeText|MasterArchivesTitle", "Description"), PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(lib281DEC45_gv_zSS_UIArchivesQuitButton, ConversationDataStateText("StoryModeText|MasterArchivesBackTooltip", "Description"), PlayerGroupAll());
        DialogControlSetVisible(lib281DEC45_gv_zSS_UIArchivesQuitButton, PlayerGroupAll(), true);
        DialogControlSetVisible(lib281DEC45_gv_zSS_UIArchivesBackButton, PlayerGroupAll(), false);
    }
    else {
        DialogControlSetVisible(lib281DEC45_gv_zSS_UIArchivesQuitButton, PlayerGroupAll(), false);
        DialogControlSetVisible(lib281DEC45_gv_zSS_UIArchivesBackButton, PlayerGroupAll(), true);
    }
    if ((BattleReportPanelGetSelectedBattleReport(1) == c_invalidBattleReportId)) {
        DialogControlSetVisible(lib281DEC45_gv_zSS_UIArchivesScenePanel, PlayerGroupAll(), false);
        DialogControlSetVisible(lib281DEC45_gv_zSS_UIArchivesMissionPanel, PlayerGroupAll(), false);
    }
    else if ((DataTableGetInt(true, lib281DEC45_gf_ZSS_UIArchivesDataTypeString(BattleReportPanelGetSelectedBattleReport(1))) == lib281DEC45_ge_ZSS_UIArchivesType_Mission)) {
        lv_mission = (DataTableGetString(true, lib281DEC45_gf_ZSS_UIArchivesDataString(BattleReportPanelGetSelectedBattleReport(1))));
        DialogControlSetVisible(lib281DEC45_gv_zSS_UIArchivesScenePanel, PlayerGroupAll(), false);
        DialogControlSetVisible(lib281DEC45_gv_zSS_UIArchivesMissionPanel, PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemText(lib281DEC45_gv_zSS_UIArchivesMissionTitle, libSwaC_gf_StoryMapName(lv_mission), PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lib281DEC45_gv_zSS_UIArchivesMissionImage, libSwaC_gf_StoryMapMissionArchiveBackgroundImage(lv_mission), PlayerGroupAll());
        if ((lib281DEC45_gf_MissionRewardTotal(lv_mission, "KerriganXP") > 0) && (lib281DEC45_gv_zSS_ArchivesSynced == true)) {
            DialogControlSetVisible(lib281DEC45_gv_zSS_UIArchivesMissionBonusLabel, PlayerGroupAll(), true);
            TextExpressionSetToken("Param/Expression/lib_281DEC45_92BCB8EC", "EARNEDXP", IntToText((libSwaC_gf_MissionRewardTotalEarned(lv_mission, "KerriganXP")-lib281DEC45_gf_ZS_MissionKerriganXPRewarded(lv_mission, false))));
            TextExpressionSetToken("Param/Expression/lib_281DEC45_92BCB8EC", "TOTALXP", IntToText(lib281DEC45_gf_MissionRewardTotal(lv_mission, "KerriganXP")));
            libNtve_gf_SetDialogItemText(lib281DEC45_gv_zSS_UIArchivesMissionBonusLabel, TextExpressionAssemble("Param/Expression/lib_281DEC45_92BCB8EC"), PlayerGroupAll());
        }
        else {
            DialogControlSetVisible(lib281DEC45_gv_zSS_UIArchivesMissionBonusLabel, PlayerGroupAll(), false);
        }
        if ((libSwaC_gf_StoryMapTypeCheck(lv_mission, c_mapKindMission) == true)) {
            if ((lib281DEC45_gv_zSS_ArchivesSynced == true)) {
                DialogControlSetVisible(lib281DEC45_gv_zSS_UIArchivesDifficultyPanel, PlayerGroupAll(), true);
                if ((libSwaC_gf_MissionCompleteBestTime(lv_mission, 1) > 0)) {
                    libNtve_gf_SetDialogItemStyle(lib281DEC45_gv_zSS_UIArchivesDifficultyLabels[1], "SwarmMissionArchiveDifficultyCompletedLabel", PlayerGroupAll());
                    libNtve_gf_SetDialogItemStyle(lib281DEC45_gv_zSS_UIArchivesDifficultyTimes[1], "SwarmMissionArchiveDifficultyTimeCompletedLabel", PlayerGroupAll());
                }
                else {
                    libNtve_gf_SetDialogItemStyle(lib281DEC45_gv_zSS_UIArchivesDifficultyLabels[1], "SwarmMissionArchiveDifficultyLabel", PlayerGroupAll());
                    libNtve_gf_SetDialogItemStyle(lib281DEC45_gv_zSS_UIArchivesDifficultyTimes[1], "SwarmMissionArchiveDifficultyTimeLabel", PlayerGroupAll());
                }
                if ((libSwaC_gf_MissionCompleteBestTime(lv_mission, 2) > 0)) {
                    libNtve_gf_SetDialogItemStyle(lib281DEC45_gv_zSS_UIArchivesDifficultyLabels[2], "SwarmMissionArchiveDifficultyCompletedLabel", PlayerGroupAll());
                    libNtve_gf_SetDialogItemStyle(lib281DEC45_gv_zSS_UIArchivesDifficultyTimes[2], "SwarmMissionArchiveDifficultyTimeCompletedLabel", PlayerGroupAll());
                }
                else {
                    libNtve_gf_SetDialogItemStyle(lib281DEC45_gv_zSS_UIArchivesDifficultyLabels[2], "SwarmMissionArchiveDifficultyLabel", PlayerGroupAll());
                    libNtve_gf_SetDialogItemStyle(lib281DEC45_gv_zSS_UIArchivesDifficultyTimes[2], "SwarmMissionArchiveDifficultyTimeLabel", PlayerGroupAll());
                }
                if ((libSwaC_gf_MissionCompleteBestTime(lv_mission, 3) > 0)) {
                    libNtve_gf_SetDialogItemStyle(lib281DEC45_gv_zSS_UIArchivesDifficultyLabels[3], "SwarmMissionArchiveDifficultyCompletedLabel", PlayerGroupAll());
                    libNtve_gf_SetDialogItemStyle(lib281DEC45_gv_zSS_UIArchivesDifficultyTimes[3], "SwarmMissionArchiveDifficultyTimeCompletedLabel", PlayerGroupAll());
                }
                else {
                    libNtve_gf_SetDialogItemStyle(lib281DEC45_gv_zSS_UIArchivesDifficultyLabels[3], "SwarmMissionArchiveDifficultyLabel", PlayerGroupAll());
                    libNtve_gf_SetDialogItemStyle(lib281DEC45_gv_zSS_UIArchivesDifficultyTimes[3], "SwarmMissionArchiveDifficultyTimeLabel", PlayerGroupAll());
                }
                if ((libSwaC_gf_MissionCompleteBestTime(lv_mission, 4) > 0)) {
                    libNtve_gf_SetDialogItemStyle(lib281DEC45_gv_zSS_UIArchivesDifficultyLabels[4], "SwarmMissionArchiveDifficultyCompletedLabel", PlayerGroupAll());
                    libNtve_gf_SetDialogItemStyle(lib281DEC45_gv_zSS_UIArchivesDifficultyTimes[4], "SwarmMissionArchiveDifficultyTimeCompletedLabel", PlayerGroupAll());
                }
                else {
                    libNtve_gf_SetDialogItemStyle(lib281DEC45_gv_zSS_UIArchivesDifficultyLabels[4], "SwarmMissionArchiveDifficultyLabel", PlayerGroupAll());
                    libNtve_gf_SetDialogItemStyle(lib281DEC45_gv_zSS_UIArchivesDifficultyTimes[4], "SwarmMissionArchiveDifficultyTimeLabel", PlayerGroupAll());
                }
                libNtve_gf_SetDialogItemText(lib281DEC45_gv_zSS_UIArchivesDifficultyLabels[1], DifficultyNameCampaign(1), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(lib281DEC45_gv_zSS_UIArchivesDifficultyTimes[1], libSwaC_gf_FormatTimeCampaign(MaxI(libSwaC_gf_MissionCompleteBestTime(lv_mission, 1), 0)), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(lib281DEC45_gv_zSS_UIArchivesDifficultyLabels[2], DifficultyNameCampaign(2), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(lib281DEC45_gv_zSS_UIArchivesDifficultyTimes[2], libSwaC_gf_FormatTimeCampaign(MaxI(libSwaC_gf_MissionCompleteBestTime(lv_mission, 2), 0)), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(lib281DEC45_gv_zSS_UIArchivesDifficultyLabels[3], DifficultyNameCampaign(3), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(lib281DEC45_gv_zSS_UIArchivesDifficultyTimes[3], libSwaC_gf_FormatTimeCampaign(MaxI(libSwaC_gf_MissionCompleteBestTime(lv_mission, 3), 0)), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(lib281DEC45_gv_zSS_UIArchivesDifficultyLabels[4], DifficultyNameCampaign(4), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(lib281DEC45_gv_zSS_UIArchivesDifficultyTimes[4], libSwaC_gf_FormatTimeCampaign(MaxI(libSwaC_gf_MissionCompleteBestTime(lv_mission, 4), 0)), PlayerGroupAll());
            }
            else {
                DialogControlSetVisible(lib281DEC45_gv_zSS_UIArchivesDifficultyPanel, PlayerGroupAll(), false);
            }
            DialogControlSetVisible(lib281DEC45_gv_zSS_UIArchivesAchievementPanel, PlayerGroupAll(), true);
            auto996933DC_ae = 3;
            auto996933DC_ai = 1;
            lv_index = 1;
            for ( ; ( (auto996933DC_ai >= 0 && lv_index <= auto996933DC_ae) || (auto996933DC_ai <= 0 && lv_index >= auto996933DC_ae) ) ; lv_index += auto996933DC_ai ) {
                libNtve_gf_SetDialogItemAchievement(lib281DEC45_gv_zSS_UIArchivesAchievements[lv_index], UserDataGetGameLink("Maps", lib281DEC45_gf_ZS_MapUserDataInstance(lv_mission), "Achievements", lv_index), PlayerGroupAll());
            }
        }
        else {
            if ((lib281DEC45_gv_zSS_CampaignComplete == true) && (libSwaC_gf_MissionStatusCheck(lv_mission, libSwaC_ge_MissionStatus_Completed) == false) && (lib281DEC45_gv_zSS_ArchivesSynced == true)) {
                DialogControlSetVisible(lib281DEC45_gv_zSS_UIArchivesMissionBonusLabel, PlayerGroupAll(), true);
                libNtve_gf_SetDialogItemText(lib281DEC45_gv_zSS_UIArchivesMissionBonusLabel, StringExternal("Param/Value/lib_281DEC45_F9B62A9E"), PlayerGroupAll());
            }
            else {
                DialogControlSetVisible(lib281DEC45_gv_zSS_UIArchivesMissionBonusLabel, PlayerGroupAll(), false);
            }
            DialogControlSetVisible(lib281DEC45_gv_zSS_UIArchivesDifficultyPanel, PlayerGroupAll(), false);
            DialogControlSetVisible(lib281DEC45_gv_zSS_UIArchivesAchievementPanel, PlayerGroupAll(), false);
        }
    }
    else if ((DataTableGetInt(true, lib281DEC45_gf_ZSS_UIArchivesDataTypeString(BattleReportPanelGetSelectedBattleReport(1))) == lib281DEC45_ge_ZSS_UIArchivesType_Scene)) {
        lv_scene = UserDataInstanceFromReference(DataTableGetString(true, lib281DEC45_gf_ZSS_UIArchivesDataString(BattleReportPanelGetSelectedBattleReport(1))));
        DialogControlSetVisible(lib281DEC45_gv_zSS_UIArchivesScenePanel, PlayerGroupAll(), true);
        DialogControlSetVisible(lib281DEC45_gv_zSS_UIArchivesMissionPanel, PlayerGroupAll(), false);
        libNtve_gf_SetDialogItemImage(lib281DEC45_gv_zSS_UIArchivesSceneImage, UserDataGetImagePath("Scenes", lv_scene, "Archives Image", 1), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(lib281DEC45_gv_zSS_UIArchivesSceneTitle, libSwaC_gf_StorySceneName(lv_scene), PlayerGroupAll());
    }
}

int lib281DEC45_gf_ZSS_UIArchivesScenePriority (string lp_scene) {
    string auto50076ADC_val;

    // Implementation
    auto50076ADC_val = lp_scene;
    if (auto50076ADC_val == "Pre-render - Zerg Intro") {
        return 999;
    }
    else if (auto50076ADC_val == "Zerg01 - Identity Crisis") {
        return 998;
    }
    else if (auto50076ADC_val == "Zerg02 - Dominion Calling") {
        return (lib281DEC45_gf_ZSS_UIArchivesMissionPriority("ZLab1") - 1);
    }
    else if (auto50076ADC_val == "Zerg03 - Choices") {
        return (lib281DEC45_gf_ZSS_UIArchivesMissionPriority("ZLab2") - 1);
    }
    else if (auto50076ADC_val == "Zerg04 - New Beginnings") {
        return (lib281DEC45_gf_ZSS_UIArchivesMissionPriority("ZLab3") - 1);
    }
    else if (auto50076ADC_val == "Zerg05 - Char Arc") {
        if ((libSwaC_gf_MissionStatusAge("ZChar3", libSwaC_ge_MissionStatus_Completed) > libSwaC_gf_MissionStatusAge("ZZerus2", libSwaC_ge_MissionStatus_Completed))) {
            return (lib281DEC45_gf_ZSS_UIArchivesMissionPriority("ZChar3") - 1);
        }
        else {
            return 1000;
        }
    }
    else if (auto50076ADC_val == "Zerg06 - Char Arc Alt") {
        if ((libSwaC_gf_MissionStatusAge("ZChar3", libSwaC_ge_MissionStatus_Completed) > libSwaC_gf_MissionStatusAge("ZZerus2", libSwaC_ge_MissionStatus_Completed))) {
            return 1000;
        }
        else {
            return (lib281DEC45_gf_ZSS_UIArchivesMissionPriority("ZChar3") - 1);
        }
    }
    else if (auto50076ADC_val == "Zerg07 - Now Zerus") {
        if ((libSwaC_gf_MissionStatusCheck("ZChar3", libSwaC_ge_MissionStatus_Completed) == true) && (libSwaC_gf_CurrentMap() != "ZStoryChar") && (libSwaC_gf_MissionStatusAge("ZChar3", libSwaC_ge_MissionStatus_Completed) > libSwaC_gf_MissionStatusAge("ZExpedition3", libSwaC_ge_MissionStatus_Completed))) {
            return (lib281DEC45_gf_ZSS_UIArchivesMissionPriority("ZChar3") - 2);
        }
        else if ((libSwaC_gf_MissionStatusCheck("ZExpedition3", libSwaC_ge_MissionStatus_Completed) == true) && (libSwaC_gf_CurrentMap() != "ZStoryExpedition") && (libSwaC_gf_MissionStatusAge("ZExpedition3", libSwaC_ge_MissionStatus_Completed) > libSwaC_gf_MissionStatusAge("ZChar3", libSwaC_ge_MissionStatus_Completed))) {
            return (lib281DEC45_gf_ZSS_UIArchivesMissionPriority("ZExpedition3") - 1);
        }
        else if (true) {
            return 1000;
        }
    }
    else if (auto50076ADC_val == "Zerg08 - Wings") {
        return (lib281DEC45_gf_ZSS_UIArchivesMissionPriority("ZZerus2") - 1);
    }
    else if (auto50076ADC_val == "Zerg09 - Hybrid Arc") {
        return (lib281DEC45_gf_ZSS_UIArchivesMissionPriority("ZHybrid3") - 1);
    }
    else if (auto50076ADC_val == "Zerg10 - Reunited") {
        return (lib281DEC45_gf_ZSS_UIArchivesMissionPriority("ZSpace2") - 1);
    }
    else if (auto50076ADC_val == "Pre-render - Kerrigan Ascendant") {
        return (lib281DEC45_gf_ZSS_UIArchivesMissionPriority("ZKorhal3") - 1);
    }
    else {
    }
    return 1000;
}

int lib281DEC45_gf_ZSS_UIArchivesMissionPriority (string lp_mission) {
    string auto1CA2C01E_val;

    // Implementation
    if ((libSwaC_gf_MissionStatusCheck(lp_mission, libSwaC_ge_MissionStatus_Completed) == false) && ((libSwaC_gf_StoryMapTypeCheck(lp_mission, c_mapKindUpgrade) == false) || (lib281DEC45_gv_zSS_CampaignComplete == false))) {
        return 1500;
    }
    else {
    }
    if ((libSwaC_gf_MissionStatusCheck(lp_mission, libSwaC_ge_MissionStatus_Completed) == true) && (libSwaC_gf_StoryMapTypeCheck(lp_mission, c_mapKindMission) == true)) {
        return (500+((libSwaC_gf_MissionStatusAge(lp_mission, libSwaC_ge_MissionStatus_Completed)+1)*5));
    }
    else {
    }
    if ((libSwaC_gf_StoryMapTypeCheck(lp_mission, c_mapKindUpgrade) == true)) {
        auto1CA2C01E_val = lp_mission;
        if (auto1CA2C01E_val == "ZEvolutionZergling") {
            return 10;
        }
        else if (auto1CA2C01E_val == "ZEvolutionBaneling") {
            if ((libSwaC_gf_MissionStatusAge("ZChar1", libSwaC_ge_MissionStatus_Completed) > libSwaC_gf_MissionStatusAge("ZExpedition1", libSwaC_ge_MissionStatus_Completed))) {
                return 9;
            }
            else {
                return 8;
            }
        }
        else if (auto1CA2C01E_val == "ZEvolutionRoach") {
            if ((libSwaC_gf_MissionStatusAge("ZChar1", libSwaC_ge_MissionStatus_Completed) > libSwaC_gf_MissionStatusAge("ZExpedition1", libSwaC_ge_MissionStatus_Completed))) {
                return 8;
            }
            else {
                return 9;
            }
        }
        else if (auto1CA2C01E_val == "ZEvolutionHydralisk") {
            if ((libSwaC_gf_MissionStatusAge("ZHybrid1", libSwaC_ge_MissionStatus_Completed) > libSwaC_gf_MissionStatusAge("ZSpace1", libSwaC_ge_MissionStatus_Completed))) {
                return 7;
            }
            else {
                return 6;
            }
        }
        else if (auto1CA2C01E_val == "ZEvolutionMutalisk") {
            if ((libSwaC_gf_MissionStatusAge("ZHybrid1", libSwaC_ge_MissionStatus_Completed) > libSwaC_gf_MissionStatusAge("ZSpace1", libSwaC_ge_MissionStatus_Completed))) {
                return 6;
            }
            else {
                return 5;
            }
        }
        else if (auto1CA2C01E_val == "ZEvolutionSwarmHost") {
            if ((libSwaC_gf_MissionStatusAge("ZHybrid1", libSwaC_ge_MissionStatus_Completed) > libSwaC_gf_MissionStatusAge("ZSpace1", libSwaC_ge_MissionStatus_Completed))) {
                return 5;
            }
            else {
                return 7;
            }
        }
        else if (auto1CA2C01E_val == "ZEvolutionUltralisk") {
            return 4;
        }
        else {
        }
    }
    else {
    }
    return 0;
}

string lib281DEC45_gf_ZSS_UITravelLocationProperty (int lp_planetIndex, string lp_field) {
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogLocation, (lib281DEC45_gv_zSS_UITravelLocationLinks[lp_planetIndex]), lp_field, c_playerAny);
}

void lib281DEC45_gf_ZSS_UITravelDisplay () {
    // Variable Declarations
    int lv_planetWidth;
    int lv_index;

    // Variable Initialization

    // Implementation
    TriggerExecute(lib281DEC45_gt_ZSS_UITravelInit, true, true);
    TriggerExecute(lib281DEC45_gt_ZSS_UITravelPlayMusic, true, false);
    lib281DEC45_gf_ZSS_UITravelUpdateData();
    GameSetLighting("Starmap", 0.0);
    if ((libSwaC_gf_NumberOfMissions(libSwaC_ge_MissionCountOptions_Completed) == 6)) {
        DialogControlSetEnabled(lib281DEC45_gv_zSS_UITravelBackButton, PlayerGroupAll(), false);
        libNtve_gf_SetDialogItemTooltip(lib281DEC45_gv_zSS_UITravelBackButton, StringExternal("Param/Value/lib_281DEC45_F285B16A"), PlayerGroupAll());
    }
    else {
    }
    if ((libSwaC_gf_CurrentMap() == "ZStoryLab")) {
        lib281DEC45_gv_zSS_UITravelUseTerranPitch = true;
    }
    else {
    }
    lv_index = 0;
    IntLoopBegin(1, 4);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((lib281DEC45_gv_zSS_UITravelLocationLinks[IntLoopCurrent()] != null)) {
            lv_index += 1;
            lib281DEC45_gv_zSS_UITravelNumPlanets += 1;
            lv_planetWidth += 270;
            DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelPlanetFrame[lv_index], PlayerGroupAll(), true);
            libNtve_gf_SetDialogItemText(lib281DEC45_gv_zSS_UITravelPlanetName[lv_index], libSwaC_gf_StoryPlanetName(lib281DEC45_gv_zSS_UITravelLocationLinks[IntLoopCurrent()]), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib281DEC45_gv_zSS_UITravelPlanetSelectedName[lv_index], libSwaC_gf_StoryPlanetName(lib281DEC45_gv_zSS_UITravelLocationLinks[IntLoopCurrent()]), PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(lib281DEC45_gv_zSS_UITravelPlanetSelectedBorder[lv_index], StringExternal(lib281DEC45_gf_ZSS_UITravelLocationProperty(IntLoopCurrent(), "PlanetToolTip")), PlayerGroupAll());
            PortraitSetModel(PortraitGetTriggerControl(lib281DEC45_gv_zSS_UITravelPlanetPortrait[lv_index]), (lib281DEC45_gf_ZSS_UITravelLocationProperty(IntLoopCurrent(), "PlanetModel")), true);
        }
        else {
        }
    }
    IntLoopEnd();
    if ((lib281DEC45_gv_zSS_UITravelSelectedPlanet == 0) && (lv_index == 1)) {
        lib281DEC45_gf_ZSS_UITravelLocationSelect(1);
    }
    else {
    }
    lib281DEC45_gf_ZSS_UITravelPreload();
    DialogSetSubtitlePositionOverrideControl(lib281DEC45_gv_zSS_UITravelSubtitleAnchor);
    TriggerEnable(lib281DEC45_gt_ZSS_UITravelLaunchSelected, true);
    TriggerEnable(lib281DEC45_gt_ZSS_UITravelBackSelected, true);
    TriggerEnable(lib281DEC45_gt_ZSS_UITravelPlanetSelected, true);
    lib281DEC45_gf_ZSS_UITravelAmbiencePlay(lib281DEC45_gv_zSS_UITravelSelectedPlanet);
    DialogSetVisible(lib281DEC45_gv_zSS_UITravelDialog, PlayerGroupAll(), true);
    libSwaC_gf_CinematicFade(true, 0.0, Color(0.00, 0.00, 0.00), true);
    TriggerExecute(lib281DEC45_gt_ZSS_UIWaitForSelection, true, true);
    DialogClearSubtitlePositionOverrideControl();
    TriggerEnable(lib281DEC45_gt_ZSS_UITravelBackSelected, false);
    TriggerEnable(lib281DEC45_gt_ZSS_UITravelLaunchSelected, false);
}

void lib281DEC45_gf_ZSS_UITravelAmbiencePlay (int lp_planetIndex) {
    // Implementation
    if ((lp_planetIndex == 0)) {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_TravelScreen_Main", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        return ;
    }
    else {
    }
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, (CatalogFieldValueGet(c_gameCatalogLocation, (libSwaC_gf_StoryMapPlanet(lib281DEC45_gv_zSS_UITravelMaps[lp_planetIndex])), "AmbientSound", c_playerAny)), c_soundtrackCueAny, c_soundtrackIndexAny, false);
}

void lib281DEC45_gf_ZSS_TravelLocationLaunch (string lp_planetMap) {
    // Variable Declarations
    int lv_travelScene;

    // Variable Initialization

    // Implementation
    ConversationDataStop();
    TransmissionClearAll();
    TriggerEnable(lib281DEC45_gt_ZSS_UITravelBackSelected, false);
    TriggerEnable(lib281DEC45_gt_ZSS_UITravelLaunchSelected, false);
    if ((lp_planetMap != "ZStoryKorhal") && ((libSwaC_gf_NumberOfMissions(libSwaC_ge_MissionCountOptions_Completed) == 6) || (libSwaC_gf_CurrentMap() == "ZStorySpace") || (libSwaC_gf_CurrentMap() == "ZStoryLab"))) {
        lib281DEC45_gf_ZSS_SoundFadeAll(1.0, false);
    }
    else {
    }
    libSwaC_gf_CinematicFade(false, 1.0, Color(0.00, 0.00, 0.00), true);
    DialogSetVisible(lib281DEC45_gv_zSS_UITravelDialog, PlayerGroupAll(), false);
    libSwaC_gf_CinematicFade(true, 0.0, Color(0.00, 0.00, 0.00), true);
    if ((lp_planetMap == "ZStoryKorhal")) {
        lib281DEC45_gf_PlayScriptedScene("Scene15");
    }
    else {
    }
    lib281DEC45_gv_zSS_UITravelPickedPlanet = libSwaC_gf_StoryMapPlanet(lp_planetMap);
    if ((lp_planetMap == lib281DEC45_gv_zSS_CurrentMap)) {
        TriggerExecute(lib281DEC45_gt_ZSS_UITravelBackSelected, false, false);
        return ;
    }
    else {
        if ((libSwaC_gf_NumberOfMissions(libSwaC_ge_MissionCountOptions_Completed) != 6) && (libSwaC_gf_NumberOfMissions(libSwaC_ge_MissionCountOptions_Completed) != 17) && (libSwaC_gf_CurrentMap() != "ZStorySpace")) {
            lib281DEC45_gf_PlayScriptedScene("Scene33");
        }
        else {
        }
    }
    if ((lp_planetMap == "ZStorySpace")) {
        lib281DEC45_gf_PlayScriptedScene("Scene17");
    }
    else {
    }
    lib281DEC45_gf_ZSS_SaveSnapshotWriterStates();
    libSwaC_gf_StoryMapSwitch(lp_planetMap);
}

string lib281DEC45_gf_ZSS_UITravelChosenLocation () {
    // Implementation
    return lib281DEC45_gv_zSS_UITravelPickedPlanet;
}

trigger auto_lib281DEC45_gf_ZSS_UITravelLocationSelect_Trigger = null;
int auto_lib281DEC45_gf_ZSS_UITravelLocationSelect_lp_planetIndex;

void lib281DEC45_gf_ZSS_UITravelLocationSelect (int lp_planetIndex) {
    auto_lib281DEC45_gf_ZSS_UITravelLocationSelect_lp_planetIndex = lp_planetIndex;

    if (auto_lib281DEC45_gf_ZSS_UITravelLocationSelect_Trigger == null) {
        auto_lib281DEC45_gf_ZSS_UITravelLocationSelect_Trigger = TriggerCreate("auto_lib281DEC45_gf_ZSS_UITravelLocationSelect_TriggerFunc");
    }

    TriggerExecute(auto_lib281DEC45_gf_ZSS_UITravelLocationSelect_Trigger, false, false);
}

bool auto_lib281DEC45_gf_ZSS_UITravelLocationSelect_TriggerFunc (bool testConds, bool runActions) {
    int lp_planetIndex = auto_lib281DEC45_gf_ZSS_UITravelLocationSelect_lp_planetIndex;

    // Implementation
    TriggerExecute(lib281DEC45_gt_ZSS_UITravelStopPitch, false, false);
    DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelUnitRewardFrame, PlayerGroupAll(), false);
    lib281DEC45_gv_zSS_UITravelSelectedPlanet = lp_planetIndex;
    lib281DEC45_gf_ZSS_UITravelUpdate();
    if ((lib281DEC45_gv_zSS_UITravelPitchPlayed[lp_planetIndex] == false) && (lib281DEC45_gv_zSS_Preloading == false)) {
        TriggerExecute(lib281DEC45_gt_ZSS_UITravelPlayPitch, false, false);
    }
    else {
    }
    return true;
}

void lib281DEC45_gf_ZSS_UITravelUpdateData () {
    int autoB1C59412_ae;
    int autoB1C59412_ai;
    int autoE95DCAF2_ae;
    int autoE95DCAF2_ai;
    int auto9A8D7A4C_ae;
    int auto9A8D7A4C_ai;
    int auto126FACCA_ae;
    int auto126FACCA_ai;

    // Variable Declarations
    string lv_indexPlanet;
    int lv_index;
    int lv_indexSearch;
    int lv_swapIndex;
    string lv_swapPlanet;
    string lv_swapMap;

    // Variable Initialization

    // Implementation
    autoB1C59412_ae = lib281DEC45_gv_zSSC_PLANETPANELMAXPLANETS;
    autoB1C59412_ai = 1;
    lv_index = 1;
    for ( ; ( (autoB1C59412_ai >= 0 && lv_index <= autoB1C59412_ae) || (autoB1C59412_ai <= 0 && lv_index >= autoB1C59412_ae) ) ; lv_index += autoB1C59412_ai ) {
        lib281DEC45_gv_zSS_UITravelMaps[lv_index] = null;
        lib281DEC45_gv_zSS_UITravelLocationLinks[lv_index] = null;
    }
    lv_index = 1;
    autoE95DCAF2_ae = CatalogEntryCount(c_gameCatalogLocation);
    autoE95DCAF2_ai = 1;
    while (autoE95DCAF2_ai <= autoE95DCAF2_ae) {
        lv_indexPlanet = CatalogEntryGet(c_gameCatalogLocation, autoE95DCAF2_ai);
        if ((lib281DEC45_gf_ZSS_UITravelPlanetVisibleInScreen(lv_indexPlanet) == true)) {
            lib281DEC45_gv_zSS_UITravelMaps[lv_index] = libSwaC_gf_StoryPlanetMap(lv_indexPlanet);
            lib281DEC45_gv_zSS_UITravelLocationLinks[lv_index] = lv_indexPlanet;
            lv_index += 1;
        }
        else {
        }
        autoE95DCAF2_ai = autoE95DCAF2_ai + 1;
    }
    auto9A8D7A4C_ae = (lib281DEC45_gv_zSSC_PLANETPANELMAXPLANETS-1);
    auto9A8D7A4C_ai = 1;
    lv_index = 1;
    for ( ; ( (auto9A8D7A4C_ai >= 0 && lv_index <= auto9A8D7A4C_ae) || (auto9A8D7A4C_ai <= 0 && lv_index >= auto9A8D7A4C_ae) ) ; lv_index += auto9A8D7A4C_ai ) {
        if ((lib281DEC45_gv_zSS_UITravelMaps[lv_index] == null)) {
            break;
        }
        else {
        }
        lv_swapIndex = lv_index;
        auto126FACCA_ae = lib281DEC45_gv_zSSC_PLANETPANELMAXPLANETS;
        auto126FACCA_ai = 1;
        lv_indexSearch = (lv_index+1);
        for ( ; ( (auto126FACCA_ai >= 0 && lv_indexSearch <= auto126FACCA_ae) || (auto126FACCA_ai <= 0 && lv_indexSearch >= auto126FACCA_ae) ) ; lv_indexSearch += auto126FACCA_ai ) {
            if ((lib281DEC45_gv_zSS_UITravelLocationLinks[lv_indexSearch] == null)) {
                break;
            }
            else {
            }
            if ((lib281DEC45_gf_ZSS_UITravelPlanetSortIndex(lib281DEC45_gv_zSS_UITravelLocationLinks[lv_indexSearch]) < lib281DEC45_gf_ZSS_UITravelPlanetSortIndex(lib281DEC45_gv_zSS_UITravelLocationLinks[lv_swapIndex]))) {
                lv_swapIndex = lv_indexSearch;
            }
            else {
            }
        }
        if ((lv_swapIndex != lv_index)) {
            lv_swapMap = lib281DEC45_gv_zSS_UITravelMaps[lv_swapIndex];
            lv_swapPlanet = lib281DEC45_gv_zSS_UITravelLocationLinks[lv_swapIndex];
            lib281DEC45_gv_zSS_UITravelLocationLinks[lv_swapIndex] = lib281DEC45_gv_zSS_UITravelLocationLinks[lv_index];
            lib281DEC45_gv_zSS_UITravelMaps[lv_swapIndex] = lib281DEC45_gv_zSS_UITravelMaps[lv_index];
            lib281DEC45_gv_zSS_UITravelMaps[lv_index] = lv_swapMap;
            lib281DEC45_gv_zSS_UITravelLocationLinks[lv_index] = lv_swapPlanet;
        }
        else {
        }
    }
}

int lib281DEC45_gf_ZSS_UITravelPlanetSortIndex (string lp_location) {
    // Implementation
    return UserDataGetInt("Planets", UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogLocation, lp_location, "UserReference", 1)), "SortIndex", 1);
}

void lib281DEC45_gf_ZSS_UITravelUpdate () {
    int auto92F3F8E3_ae;
    int auto92F3F8E3_ai;

    // Variable Declarations
    int lv_indexPlanet;

    // Variable Initialization

    // Implementation
    if ((libSwaC_gf_StoryMapPlanet(libSwaC_gf_CurrentMap()) == "DominionLab")) {
        DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelQuitButton, PlayerGroupAll(), true);
        DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelBackButton, PlayerGroupAll(), false);
    }
    else {
        DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelQuitButton, PlayerGroupAll(), false);
        DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelBackButton, PlayerGroupAll(), true);
    }
    if ((lib281DEC45_gv_zSS_UITravelSelectedPlanet == 0)) {
        DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelMainTitle, PlayerGroupAll(), true);
        DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelLaunchButton, PlayerGroupAll(), false);
        libNtve_gf_SetDialogItemImage(lib281DEC45_gv_zSS_UITravelBGPortrait, "Assets\\Textures\\ui_hots_loading_arcselection_background.dds", PlayerGroupAll());
        DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelContactPortraitFrame, PlayerGroupAll(), false);
    }
    else {
        DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelMainTitle, PlayerGroupAll(), false);
        DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelContactPortraitFrame, PlayerGroupAll(), true);
        DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelLaunchButton, PlayerGroupAll(), true);
    }
    if ((lib281DEC45_gv_zSS_UITravelNumPlanets == 1)) {
        DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelOrbitImage, PlayerGroupAll(), false);
    }
    else {
        DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelOrbitImage, PlayerGroupAll(), true);
    }
    auto92F3F8E3_ae = lib281DEC45_gv_zSSC_PLANETPANELMAXPLANETS;
    auto92F3F8E3_ai = 1;
    lv_indexPlanet = 1;
    for ( ; ( (auto92F3F8E3_ai >= 0 && lv_indexPlanet <= auto92F3F8E3_ae) || (auto92F3F8E3_ai <= 0 && lv_indexPlanet >= auto92F3F8E3_ae) ) ; lv_indexPlanet += auto92F3F8E3_ai ) {
        lib281DEC45_gf_ZSS_UITravelUpdateSinglePlanet(lv_indexPlanet);
    }
    if ((lib281DEC45_gv_zSS_UITravelBGPortrait != c_invalidDialogControlId) && (lib281DEC45_gv_zSS_UITravelSelectedPlanet != 0) && (DialogControlIsVisible(lib281DEC45_gv_zSS_UITravelBGPortrait, 1) == true)) {
        PortraitWaitForLoad(PortraitGetTriggerControl(lib281DEC45_gv_zSS_UITravelBGPortrait));
    }
    else {
    }
    if ((lib281DEC45_gv_zSS_UITravelSelectedPlanet != 0) && (DialogControlIsVisible(lib281DEC45_gv_zSS_UITravelContactPortrait, 1) == true)) {
        PortraitWaitForLoad(PortraitGetTriggerControl(lib281DEC45_gv_zSS_UITravelContactPortrait));
    }
    else {
    }
}

void lib281DEC45_gf_ZSS_UITravelUpdateSinglePlanet (int lp_planetIndex) {
    int autoD506B6BB_ae;
    int autoD506B6BB_ai;

    // Variable Declarations
    int lv_index;
    int lv_unitFrameIndex;
    int lv_evolutionFrameIndex;
    bool lv_normalShowHide;
    bool lv_selectedShowHide;
    string lv_indexMap;
    string lv_defaultPortraitImage;

    // Variable Initialization
    lv_normalShowHide = true;
    lv_selectedShowHide = true;

    // Implementation
    DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelPlanetPortrait[lp_planetIndex], PlayerGroupAll(), true);
    if ((lp_planetIndex != lib281DEC45_gv_zSS_UITravelSelectedPlanet)) {
        DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelPlanetName[lp_planetIndex], PlayerGroupAll(), true);
        DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelPlanetButton[lp_planetIndex], PlayerGroupAll(), true);
        DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelPlanetSelectedPortrait[lp_planetIndex], PlayerGroupAll(), false);
        DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelPlanetSelectedName[lp_planetIndex], PlayerGroupAll(), false);
        DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelPlanetSelectedBorder[lp_planetIndex], PlayerGroupAll(), false);
        libNtve_gf_SetDialogItemToggled(lib281DEC45_gv_zSS_UITravelPlanetButton[lp_planetIndex], false, PlayerGroupAll());
        return ;
    }
    else {
    }
    DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelPlanetName[lp_planetIndex], PlayerGroupAll(), false);
    DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelPlanetButton[lp_planetIndex], PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemToggled(lib281DEC45_gv_zSS_UITravelPlanetButton[lp_planetIndex], true, PlayerGroupAll());
    DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelSelectLabel, PlayerGroupAll(), false);
    DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelPlanetSelectedName[lp_planetIndex], PlayerGroupAll(), true);
    DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelPlanetSelectedBorder[lp_planetIndex], PlayerGroupAll(), false);
    DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelUnitRewardFrame, PlayerGroupAll(), false);
    if ((lib281DEC45_gv_zSS_UITravelUseTerranPitch == true)) {
        PortraitSetModel(PortraitGetTriggerControl(lib281DEC45_gv_zSS_UITravelContactPortrait), "AdjutantPortrait_L3D", false);
    }
    else {
        PortraitSetModel(PortraitGetTriggerControl(lib281DEC45_gv_zSS_UITravelContactPortrait), (lib281DEC45_gf_ZSS_UITravelLocationProperty(lp_planetIndex, "ContactModel")), false);
        if ((lib281DEC45_gf_ZSS_UITravelLocationProperty(lp_planetIndex, "ContactActor") == "")) {
            PortraitSetActor(PortraitGetTriggerControl(lib281DEC45_gv_zSS_UITravelContactPortrait), "PortraitActor");
        }
        else {
            PortraitSetActor(PortraitGetTriggerControl(lib281DEC45_gv_zSS_UITravelContactPortrait), (lib281DEC45_gf_ZSS_UITravelLocationProperty(lp_planetIndex, "ContactActor")));
        }
    }
    libNtve_gf_SetDialogItemText(lib281DEC45_gv_zSS_UITravelPlanetBigText, StringExternal(lib281DEC45_gf_ZSS_UITravelLocationProperty(lp_planetIndex, "MissionText")), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib281DEC45_gv_zSS_UITravelPlanetObjectiveText, StringExternal(lib281DEC45_gf_ZSS_UITravelLocationProperty(lp_planetIndex, "PrimaryObjectiveText")), PlayerGroupAll());
    if (((lib281DEC45_gf_ZSS_UITravelLocationProperty(lp_planetIndex, "BackgroundModel")) == null)) {
        libNtve_gf_SetDialogItemImage(lib281DEC45_gv_zSS_UITravelBGPortrait, (lib281DEC45_gf_ZSS_UITravelLocationProperty(lp_planetIndex, "BackgroundImage")), PlayerGroupAll());
    }
    else {
        PortraitSetModel(PortraitGetTriggerControl(lib281DEC45_gv_zSS_UITravelBGPortrait), (lib281DEC45_gf_ZSS_UITravelLocationProperty(lp_planetIndex, "BackgroundModel")), false);
    }
    lv_unitFrameIndex = 0;
    lv_evolutionFrameIndex = 0;
    autoD506B6BB_ae = lib281DEC45_gv_zSSC_PLANETPANELMAXMISSIONS;
    autoD506B6BB_ai = 1;
    lv_index = 1;
    for ( ; ( (autoD506B6BB_ai >= 0 && lv_index <= autoD506B6BB_ae) || (autoD506B6BB_ai <= 0 && lv_index >= autoD506B6BB_ae) ) ; lv_index += autoD506B6BB_ai ) {
        lv_indexMap = (lib281DEC45_gf_ZSS_UITravelLocationProperty(lp_planetIndex, ("MissionCategoryArray[" + IntToString((lv_index - 1)) + "].Map")));
        if ((lv_indexMap != null)) {
            DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelRewardUnitPanel[lv_index], PlayerGroupAll(), false);
            if ((libSwaC_gf_MissionArmyCategoryUnlocked(lv_indexMap) != null)) {
                lv_unitFrameIndex += 1;
                libNtve_gf_SetDialogItemUnitLink(lib281DEC45_gv_zSS_UITravelRewardUnit[lv_unitFrameIndex], (CatalogFieldValueGet(c_gameCatalogArmyCategory, libSwaC_gf_MissionArmyCategoryUnlocked(lv_indexMap), "Unit", c_playerAny)), PlayerGroupAll());
                libNtve_gf_SetDialogItemCamera(lib281DEC45_gv_zSS_UITravelRewardUnit[lv_unitFrameIndex], libSwaC_gf_StoryArmyCategoryPlanetCamera(libSwaC_gf_MissionArmyCategoryUnlocked(lv_indexMap)), PlayerGroupAll());
                libNtve_gf_SetDialogItemTeamColor(lib281DEC45_gv_zSS_UITravelRewardUnit[lv_unitFrameIndex], libNtve_gf_ConvertPlayerColorToColor(libSwaC_gf_CampaignKerriganZergPlayerColor()), PlayerGroupAll());
                DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelRewardUnitPanel[lv_unitFrameIndex], PlayerGroupAll(), true);
                libNtve_gf_SetDialogItemText(lib281DEC45_gv_zSS_UITravelRewardUnitLabel[lv_unitFrameIndex], libSwaC_gf_StoryArmyCategoryName(libSwaC_gf_MissionArmyCategoryUnlocked(lv_indexMap)), PlayerGroupAll());
                TextExpressionSetToken("Param/Expression/lib_281DEC45_272AF6B1", "A", libSwaC_gf_StoryArmyCategoryName(libSwaC_gf_MissionArmyCategoryUnlocked(lv_indexMap)));
                TextExpressionSetToken("Param/Expression/lib_281DEC45_272AF6B1", "B", libSwaC_gf_StoryArmyCategoryName2(libSwaC_gf_MissionArmyCategoryUnlocked(lv_indexMap)));
                libNtve_gf_SetDialogItemTooltip(lib281DEC45_gv_zSS_UITravelRewardUnitPanel[lv_unitFrameIndex], TextExpressionAssemble("Param/Expression/lib_281DEC45_272AF6B1"), PlayerGroupAll());
                DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelUnitRewardFrame, PlayerGroupAll(), true);
            }
            else {
            }
        }
        else {
        }
    }
}

bool lib281DEC45_gf_ZSS_UITravelPlanetVisibleInScreen (string lp_location) {
    // Implementation
    if (((lp_location == null) || (libSwaC_gf_StoryPlanetMap(lp_location) == libSwaC_gf_CurrentMap()) || (libSwaC_gf_StoryPlanetIsAvailable(lp_location) == false))) {
        return false;
    }
    else {
    }
    return true;
}

void lib281DEC45_gf_ZSS_UITravelClose () {
    // Implementation
    DialogSetVisible(lib281DEC45_gv_zSS_UITravelDialog, PlayerGroupAll(), false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    TriggerStop(lib281DEC45_gt_ZSS_UIWaitForSelection);
    TriggerStop(lib281DEC45_gt_ZSS_UITravelPlayMusic);
}

void lib281DEC45_gf_ZSS_UITravelPreload () {
    int auto85A4F513_ae;
    int auto85A4F513_ai;
    int autoEC32C210_ae;
    int autoEC32C210_ai;

    // Variable Declarations
    int lv_index;
    int lv_indexPlanet;
    string lv_indexMap;

    // Variable Initialization

    // Implementation
    auto85A4F513_ae = lib281DEC45_gv_zSSC_PLANETPANELMAXPLANETS;
    auto85A4F513_ai = 1;
    lv_indexPlanet = 1;
    for ( ; ( (auto85A4F513_ai >= 0 && lv_indexPlanet <= auto85A4F513_ae) || (auto85A4F513_ai <= 0 && lv_indexPlanet >= auto85A4F513_ae) ) ; lv_indexPlanet += auto85A4F513_ai ) {
        if ((lib281DEC45_gv_zSS_UITravelLocationLinks[lv_indexPlanet] != null)) {
            autoEC32C210_ae = lib281DEC45_gv_zSSC_PLANETPANELMAXMISSIONS;
            autoEC32C210_ai = 1;
            lv_index = 1;
            for ( ; ( (autoEC32C210_ai >= 0 && lv_index <= autoEC32C210_ae) || (autoEC32C210_ai <= 0 && lv_index >= autoEC32C210_ae) ) ; lv_index += autoEC32C210_ai ) {
                lv_indexMap = (lib281DEC45_gf_ZSS_UITravelLocationProperty(lv_indexPlanet, ("MissionCategoryArray[" + IntToString((lv_index - 1)) + "].Map")));
                if ((lv_indexMap != null) && (libSwaC_gf_MissionArmyCategoryUnlocked(lv_indexMap) != null)) {
                    libNtve_gf_PreloadUnit((CatalogFieldValueGet(c_gameCatalogArmyCategory, libSwaC_gf_MissionArmyCategoryUnlocked(lv_indexMap), "Unit", 1)), false);
                }
                else {
                }
            }
        }
        else {
        }
    }
}

void lib281DEC45_gf_ZSS_UIMissionDisplay () {
    // Implementation
    if ((libSwaC_gf_StoryInSimulation() == false) && (libSwaC_gf_MissionAvailableOnPlanet(libSwaC_gf_StoryMapPlanet(lib281DEC45_gv_zSS_CurrentMap)) == false)) {
        return ;
    }
    else {
    }
    TriggerExecute(lib281DEC45_gt_ZSS_UIMissionCreate, true, false);
    if ((libSwaC_gf_StoryInSimulation() == true)) {
        TriggerEnable(lib281DEC45_gt_ZSS_UIMissionArmyClicked, true);
        TriggerEnable(lib281DEC45_gt_ZSS_UIMissionKerriganClicked, true);
    }
    else {
        TriggerEnable(lib281DEC45_gt_ZSS_UIMissionArmyClicked, false);
        TriggerEnable(lib281DEC45_gt_ZSS_UIMissionKerriganClicked, false);
        lib281DEC45_gv_zSS_NextMission = lib281DEC45_gf_ZSS_MissionNextAvailable(libSwaC_gf_StoryMapPlanet(lib281DEC45_gv_zSS_CurrentMap));
    }
    lib281DEC45_gf_ZSS_UIMissionPreload();
    lib281DEC45_gf_ZSS_UIMissionUpdate();
    if ((lib281DEC45_gf_ZSS_UIMissionProperty("ContactActor") == "")) {
        PortraitSetActor(PortraitGetTriggerControl(lib281DEC45_gv_zSS_MissionContactPortrait), "PortraitActor");
    }
    else {
        PortraitSetActor(PortraitGetTriggerControl(lib281DEC45_gv_zSS_MissionContactPortrait), (lib281DEC45_gf_ZSS_UIMissionProperty("ContactActor")));
    }
    if ((libSwaC_gf_StoryInSimulation() == false) && (lib281DEC45_gv_zSS_MissionPitchPlayed == false) && (lib281DEC45_gv_zSS_Preloading == false)) {
        TriggerExecute(lib281DEC45_gt_ZSS_UIMissionPitchPlayClicked, false, false);
    }
    else {
    }
    lib281DEC45_gf_ZSS_UIMissionUpdatePortrait();
    DialogSetVisible(lib281DEC45_gv_zSS_MissionDialog, PlayerGroupAll(), true);
    TriggerExecute(lib281DEC45_gt_ZSS_UIMissionPlayMusic, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, UserDataGetGameLink("Maps", lib281DEC45_gf_ZS_MapUserDataInstance(lib281DEC45_gv_zSS_NextMission), "UIAmbience", 1), c_soundtrackCueAny, c_soundtrackIndexAny, false);
    if ((lib281DEC45_gv_zSS_NextMission == "ZLab2") && (libSwaC_gf_StoryInSimulation() == false)) {
        libSwaC_gf_CinematicFade(true, 0.5, Color(0.00, 0.00, 0.00), true);
    }
    else {
        libSwaC_gf_CinematicFade(true, 0.0, Color(0.00, 0.00, 0.00), true);
    }
    TriggerExecute(lib281DEC45_gt_ZSS_UIWaitForSelection, true, true);
    DialogClearSubtitlePositionOverrideControl();
}

void lib281DEC45_gf_ZSS_UIMissionClose () {
    // Implementation
    DialogSetVisible(lib281DEC45_gv_zSS_MissionDialog, PlayerGroupAll(), false);
    TriggerEnable(lib281DEC45_gt_ZSS_UIMissionArmyClicked, false);
    TriggerEnable(lib281DEC45_gt_ZSS_UIMissionKerriganClicked, false);
    TriggerStop(lib281DEC45_gt_ZSS_UIWaitForSelection);
    TriggerStop(lib281DEC45_gt_ZSS_UIMissionPlayMusic);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
}

void lib281DEC45_gf_ZSS_UIMissionUpdate () {
    // Variable Declarations
    string lv_evolutionCategory;

    // Variable Initialization

    // Implementation
    GameSetLighting("MissionPitchScreenLighting", 0.0);
    libNtve_gf_SetDialogItemImage(lib281DEC45_gv_zSS_MissionBackgroundImage, lib281DEC45_gf_ZSS_UIMissionBackgroundImage(lib281DEC45_gv_zSS_NextMission), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib281DEC45_gv_zSS_MissionTextLabel, libSwaC_gf_StoryMapName(lib281DEC45_gv_zSS_NextMission), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib281DEC45_gv_zSS_MissionPrimaryObjectiveText, StringExternal(lib281DEC45_gf_ZSS_UIMissionProperty("PrimaryObjectiveText")), PlayerGroupAll());
    if ((lib281DEC45_gf_ZS_MissionKerriganXPRewarded(lib281DEC45_gv_zSS_NextMission, false) > 0)) {
        DialogControlSetVisible(lib281DEC45_gv_zSS_MissionRewardKerriganLevelPanel, PlayerGroupAll(), true);
        TextExpressionSetToken("Param/Expression/lib_281DEC45_1837ECC2", "Count", IntToText(lib281DEC45_gf_ZS_MissionKerriganXPRewarded(lib281DEC45_gv_zSS_NextMission, false)));
        libNtve_gf_SetDialogItemText(lib281DEC45_gv_zSS_MissionRewardText, TextExpressionAssemble("Param/Expression/lib_281DEC45_1837ECC2"), PlayerGroupAll());
    }
    else {
        DialogControlSetVisible(lib281DEC45_gv_zSS_MissionRewardKerriganLevelPanel, PlayerGroupAll(), false);
    }
    lv_evolutionCategory = libSwaC_gf_MissionArmyEvolutionUnlocked(lib281DEC45_gv_zSS_NextMission);
    if ((lv_evolutionCategory != null) && (libSwaC_gf_MissionStatusCheck(libSwaC_gf_StoryArmyCategoryEvolutionMission(lv_evolutionCategory), libSwaC_ge_MissionStatus_Locked) == true)) {
        DialogControlSetVisible(lib281DEC45_gv_zSS_MissionRewardEvolutionUnlocksPanel, PlayerGroupAll(), true);
        TextExpressionSetToken("Param/Expression/lib_281DEC45_CF2EF169", "Unit", libSwaC_gf_StoryArmyCategoryName(lv_evolutionCategory));
        libNtve_gf_SetDialogItemText(lib281DEC45_gv_zSS_MissionRewardEvolutionUnlockText, TextExpressionAssemble("Param/Expression/lib_281DEC45_CF2EF169"), PlayerGroupAll());
        if ((lib281DEC45_gf_ZS_MissionKerriganXPRewarded(lib281DEC45_gv_zSS_NextMission, false) > 0)) {
            libNtve_gf_SetDialogItemText(lib281DEC45_gv_zSS_MissionRewardEvolutionUnlockTitle, StringExternal("Param/Value/lib_281DEC45_3AF4F29D"), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(lib281DEC45_gv_zSS_MissionRewardEvolutionUnlockTitle, StringExternal("UI/MissionSelectRewardTitle"), PlayerGroupAll());
        }
    }
    else {
        DialogControlSetVisible(lib281DEC45_gv_zSS_MissionRewardEvolutionUnlocksPanel, PlayerGroupAll(), false);
    }
    if ((lib281DEC45_gf_MissionRewardTotal(lib281DEC45_gv_zSS_NextMission, "KerriganXP") > 0)) {
        DialogControlSetVisible(lib281DEC45_gv_zSS_MissionBonusMissionRewardPanel, PlayerGroupAll(), true);
        TextExpressionSetToken("Param/Expression/lib_281DEC45_632299BC", "Count", IntToText(lib281DEC45_gf_MissionRewardTotal(lib281DEC45_gv_zSS_NextMission, "KerriganXP")));
        libNtve_gf_SetDialogItemText(lib281DEC45_gv_zSS_MissionBonusText, TextExpressionAssemble("Param/Expression/lib_281DEC45_632299BC"), PlayerGroupAll());
    }
    else {
        DialogControlSetVisible(lib281DEC45_gv_zSS_MissionBonusMissionRewardPanel, PlayerGroupAll(), false);
    }
    if ((libSwaC_gf_MissionArmyCategoryUnlocked(lib281DEC45_gv_zSS_NextMission) != null) && (libSwaC_gf_StoryArmyCategoryStateCheck(libSwaC_gf_MissionArmyCategoryUnlocked(lib281DEC45_gv_zSS_NextMission), c_armyCategoryStateUnlocked) == false)) {
        DialogControlSetVisible(lib281DEC45_gv_zSS_MissionNewUnitFramePanel, PlayerGroupAll(), true);
        DialogControlSetVisible(lib281DEC45_gv_zSS_MissionUnit, PlayerGroupAll(), true);
        DialogControlSetVisible(lib281DEC45_gv_zSS_MissionTechnologyBorder, PlayerGroupAll(), true);
        DialogControlSetVisible(lib281DEC45_gv_zSS_MissionTechnologyText, PlayerGroupAll(), true);
        DialogControlSetVisible(lib281DEC45_gv_zSS_MissionTechnologyTitle, PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemUnitLink(lib281DEC45_gv_zSS_MissionUnit, (CatalogFieldValueGet(c_gameCatalogArmyCategory, libSwaC_gf_MissionArmyCategoryUnlocked(lib281DEC45_gv_zSS_NextMission), "Unit", c_playerAny)), PlayerGroupAll());
        libNtve_gf_SetDialogItemCamera(lib281DEC45_gv_zSS_MissionUnit, libSwaC_gf_StoryArmyCategoryPlanetCamera(libSwaC_gf_MissionArmyCategoryUnlocked(lib281DEC45_gv_zSS_NextMission)), PlayerGroupAll());
        libNtve_gf_SetDialogItemTeamColor(lib281DEC45_gv_zSS_MissionUnit, libNtve_gf_ConvertPlayerColorToColor(libSwaC_gf_CampaignKerriganZergPlayerColor()), PlayerGroupAll());
        TextExpressionSetToken("Param/Expression/lib_281DEC45_0E2BCC46", "A", libSwaC_gf_StoryArmyCategoryName(libSwaC_gf_MissionArmyCategoryUnlocked(lib281DEC45_gv_zSS_NextMission)));
        TextExpressionSetToken("Param/Expression/lib_281DEC45_0E2BCC46", "B", libSwaC_gf_StoryArmyCategoryName2(libSwaC_gf_MissionArmyCategoryUnlocked(lib281DEC45_gv_zSS_NextMission)));
        libNtve_gf_SetDialogItemTooltip(lib281DEC45_gv_zSS_MissionUnitTooltipHolder, TextExpressionAssemble("Param/Expression/lib_281DEC45_0E2BCC46"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(lib281DEC45_gv_zSS_MissionTechnologyText, libSwaC_gf_StoryArmyCategoryName(libSwaC_gf_MissionArmyCategoryUnlocked(lib281DEC45_gv_zSS_NextMission)), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(lib281DEC45_gv_zSS_MissionTechnologyDescriptionLabel, lib281DEC45_gf_MissionDebriefingText2(lib281DEC45_gv_zSS_NextMission), PlayerGroupAll());
    }
    else {
        DialogControlSetVisible(lib281DEC45_gv_zSS_MissionNewUnitFramePanel, PlayerGroupAll(), false);
    }
    if ((libSwaC_gf_StoryMapPlanet(libSwaC_gf_CurrentMap()) == "DominionLab")) {
        DialogControlSetVisible(lib281DEC45_gv_zSS_MissionQuitButton, PlayerGroupAll(), true);
        DialogControlSetVisible(lib281DEC45_gv_zSS_MissionBackButton, PlayerGroupAll(), false);
    }
    else {
        DialogControlSetVisible(lib281DEC45_gv_zSS_MissionQuitButton, PlayerGroupAll(), false);
        DialogControlSetVisible(lib281DEC45_gv_zSS_MissionBackButton, PlayerGroupAll(), true);
        if ((libSwaC_gf_StoryInSimulation() == true)) {
            libNtve_gf_SetDialogItemTooltip(lib281DEC45_gv_zSS_MissionBackButton, ConversationDataStateText("StoryModeText|ArchivesMissionBackTooltip", "Description"), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemTooltip(lib281DEC45_gv_zSS_MissionBackButton, StringExternal("ConversationState/MissionPanelTooltips/Close_Button/Info/Description"), PlayerGroupAll());
        }
    }
    if ((libSwaC_gf_StoryInSimulation() == true) && (lib281DEC45_gv_zSS_NextMission != "ZLab1") && (lib281DEC45_gv_zSS_NextMission != "ZLab2") && (lib281DEC45_gv_zSS_NextMission != "ZLab3") && (lib281DEC45_gv_zSS_NextMission != "ZZerus3") && (lib281DEC45_gv_zSS_NextMission != "ZSpace1")) {
        DialogControlSetVisible(lib281DEC45_gv_zSS_MissionArmyButton, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(lib281DEC45_gv_zSS_MissionArmyButton, PlayerGroupAll(), false);
    }
    if ((libSwaC_gf_StoryInSimulation() == true) && (libSwaC_gf_NumberOfMissions(libSwaC_ge_MissionCountOptions_Completed) >= 4) && (lib281DEC45_gv_zSS_NextMission != "ZSpace1") && (lib281DEC45_gv_zSS_NextMission != "ZZerus3") && (lib281DEC45_gv_zSS_NextMission != "ZExpedition3")) {
        DialogControlSetVisible(lib281DEC45_gv_zSS_MissionKerriganButton, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(lib281DEC45_gv_zSS_MissionKerriganButton, PlayerGroupAll(), false);
    }
    DialogSetSubtitlePositionOverrideControl(lib281DEC45_gv_zSS_MissionSubtitleAnchor);
}

void lib281DEC45_gf_ZSS_UIMissionUpdatePortrait () {
    // Implementation
    PortraitSetModel(PortraitGetTriggerControl(lib281DEC45_gv_zSS_MissionContactPortrait), (lib281DEC45_gf_ZSS_UIMissionProperty("ContactModelLink")), true);
    PortraitWaitForLoad(PortraitGetTriggerControl(lib281DEC45_gv_zSS_MissionContactPortrait));
}

void lib281DEC45_gf_ZSS_UIMissionPreload () {
    // Implementation
    if ((libSwaC_gf_MissionArmyCategoryUnlocked(lib281DEC45_gv_zSS_NextMission) != null)) {
        libNtve_gf_PreloadUnit((CatalogFieldValueGet(c_gameCatalogArmyCategory, libSwaC_gf_MissionArmyCategoryUnlocked(lib281DEC45_gv_zSS_NextMission), "Unit", c_playerAny)), false);
    }
    else {
    }
}

string lib281DEC45_gf_ZSS_UIMissionProperty (string lp_field) {
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogMap, (lib281DEC45_gv_zSS_NextMission), lp_field, c_playerAny);
}

string lib281DEC45_gf_ZSS_UIMissionBackgroundImage (string lp_mission) {
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogMap, lp_mission, "MissionBackgroundImage", 1));
}

text lib281DEC45_gf_MissionDebriefingText2 (string lp_mission) {
    // Implementation
    return UserDataGetText("Maps", libSwaC_gf_ZS_MapUserDataInstance(lp_mission), "TechnologyDescriptionLabel", 1);
}

string lib281DEC45_gf_ZS_MapUserDataInstance (string lp_map) {
    // Implementation
    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "UserReference", 1));
}

int lib281DEC45_gf_ZS_MissionKerriganXPRewarded (string lp_mission, bool lp_debugProgress) {
    // Implementation
    if ((lp_debugProgress == false)) {
        return UserDataGetInt("Maps", libSwaC_gf_ZS_MapUserDataInstance(lp_mission), "KerriganXP", 1);
    }
    else {
        return UserDataGetInt("Maps", libSwaC_gf_ZS_MapUserDataInstance(lp_mission), "KerriganXPProgress", 1);
    }
}

int lib281DEC45_gf_MissionRewardTotal (string lp_mission, string lp_type) {
    int auto9126F137_ae;
    int auto9126F137_ai;

    // Variable Declarations
    string lv_objective;
    int lv_count;

    // Variable Initialization

    // Implementation
    auto9126F137_ae = CatalogFieldValueCount(c_gameCatalogMap, lp_mission, "ObjectiveArray", 1);
    auto9126F137_ai = 1;
    while (auto9126F137_ai <= auto9126F137_ae) {
        lv_objective = CatalogFieldValueGet(c_gameCatalogMap, lp_mission, "ObjectiveArray["+IntToString(auto9126F137_ai-1)+"]", 1);
        if ((libSwaC_gf_ZS_ObjectiveRewardDivided(lv_objective) == true)) {
            lv_count += (libSwaC_gf_MissionObjectiveRewards(lv_objective, lp_type)*libSwaC_gf_MissionObjectiveItemCount(lv_objective));
        }
        else {
            lv_count += libSwaC_gf_MissionObjectiveRewards(lv_objective, lp_type);
        }
        auto9126F137_ai = auto9126F137_ai + 1;
    }
    return lv_count;
}

trigger auto_lib281DEC45_gf_ZSS_UIMainUpdate_Trigger = null;

void lib281DEC45_gf_ZSS_UIMainUpdate () {
    if (auto_lib281DEC45_gf_ZSS_UIMainUpdate_Trigger == null) {
        auto_lib281DEC45_gf_ZSS_UIMainUpdate_Trigger = TriggerCreate("auto_lib281DEC45_gf_ZSS_UIMainUpdate_TriggerFunc");
    }

    TriggerExecute(auto_lib281DEC45_gf_ZSS_UIMainUpdate_Trigger, false, false);
}

bool auto_lib281DEC45_gf_ZSS_UIMainUpdate_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    lib281DEC45_gf_ZSS_UIMainBottomButtonsUpdate();
    return true;
}

void lib281DEC45_gf_ZSS_UIMainCreateBottomButtons () {
    // Implementation
    lib281DEC45_gf_ZSS_UIMainCreateBottomButtonSingle(lib281DEC45_ge_ZSS_UIMainBottomButtonType_BottomButtonTravel, "TravelButton", "ButtonFlashEffect_Travel");
    lib281DEC45_gf_ZSS_UIMainCreateBottomButtonSingle(lib281DEC45_ge_ZSS_UIMainBottomButtonType_BottomButtonMission, "MissionButton", "ButtonFlashEffect_Mission");
    lib281DEC45_gf_ZSS_UIMainCreateBottomButtonSingle(lib281DEC45_ge_ZSS_UIMainBottomButtonType_BottomButtonEvolution, "EvolutionButton", "ButtonFlashEffect_Evolution");
    lib281DEC45_gf_ZSS_UIMainCreateBottomButtonSingle(lib281DEC45_ge_ZSS_UIMainBottomButtonType_BottomButtonKerrigan, "KerriganButton", "ButtonFlashEffect_Kerrigan");
    lib281DEC45_gf_ZSS_UIMainCreateBottomButtonSingle(lib281DEC45_ge_ZSS_UIMainBottomButtonType_BottomButtonArchives, "SwarmStatusButton", "ButtonFlashEffect_SwarmStatus");
}

void lib281DEC45_gf_ZSS_UIMainCreateBottomButtonSingle (int lp_buttonIndex, string lp_layoutPath, string lp_layoutPathFlash) {
    // Implementation
    DialogControlHookup(lib281DEC45_gv_zSS_StoryPanel, c_triggerControlTypeButton, lp_layoutPath);
    lib281DEC45_gv_zSS_UIMainBottomButtons[(lp_buttonIndex)] = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_StoryPanel, c_triggerControlTypeFlash, lp_layoutPathFlash);
    lib281DEC45_gv_zSS_UIMainBottomButtonFlashes[(lp_buttonIndex)] = DialogControlLastCreated();
}

void lib281DEC45_gf_ZSS_UIMainBottomButtonsUpdate () {
    // Variable Declarations
    string lv_indexMission;
    bool lv_enabled;

    // Variable Initialization

    // Implementation
    lv_enabled = (libSwaC_gf_MissionAvailableOnPlanet(libSwaC_gf_StoryMapPlanet(lib281DEC45_gv_zSS_CurrentMap)) == true);
    lib281DEC45_gf_ZSS_UIMainBottomButtonUpdateSingle(lib281DEC45_ge_ZSS_UIMainBottomButtonType_BottomButtonMission, lv_enabled);
    lv_enabled = (lib281DEC45_gf_ZSS_TravelAvailableCount() > 1);
    lib281DEC45_gf_ZSS_UIMainBottomButtonUpdateSingle(lib281DEC45_ge_ZSS_UIMainBottomButtonType_BottomButtonTravel, lv_enabled);
    lv_enabled = (libSwaC_gf_NumberOfMissions(libSwaC_ge_MissionCountOptions_Completed) >= 3);
    lib281DEC45_gf_ZSS_UIMainBottomButtonUpdateSingle(lib281DEC45_ge_ZSS_UIMainBottomButtonType_BottomButtonEvolution, lv_enabled);
    if ((libSwaC_gf_LastSuccessfulMission() == "ZZerus2")) {
        lib281DEC45_gf_ZSS_UIMainBottomButtonUpdateSingle(lib281DEC45_ge_ZSS_UIMainBottomButtonType_BottomButtonKerrigan, false);
        libNtve_gf_SetDialogItemTooltip(lib281DEC45_gv_zSS_UIMainBottomButtons[(lib281DEC45_ge_ZSS_UIMainBottomButtonType_BottomButtonKerrigan)], StringExternal("Param/Value/lib_281DEC45_7E965CA4"), PlayerGroupAll());
    }
    else {
        lv_enabled = (libSwaC_gf_NumberOfMissions(libSwaC_ge_MissionCountOptions_Completed) >= 4);
        lib281DEC45_gf_ZSS_UIMainBottomButtonUpdateSingle(lib281DEC45_ge_ZSS_UIMainBottomButtonType_BottomButtonKerrigan, lv_enabled);
    }
    lv_enabled = (libSwaC_gf_NumberOfMissions(libSwaC_ge_MissionCountOptions_Completed) >= 4);
    lib281DEC45_gf_ZSS_UIMainBottomButtonUpdateSingle(lib281DEC45_ge_ZSS_UIMainBottomButtonType_BottomButtonArchives, lv_enabled);
}

void lib281DEC45_gf_ZSS_UIMainBottomButtonUpdateSingle (int lp_buttonIndex, bool lp_enabled) {
    // Variable Declarations
    bool lv_clicked;

    // Variable Initialization

    // Implementation
    if (((lp_buttonIndex == lib281DEC45_ge_ZSS_UIMainBottomButtonType_BottomButtonMission) || (lp_buttonIndex == lib281DEC45_ge_ZSS_UIMainBottomButtonType_BottomButtonTravel))) {
        if ((lp_enabled == true)) {
            DialogControlSetVisible(lib281DEC45_gv_zSS_UIMainBottomButtons[(lp_buttonIndex)], PlayerGroupAll(), true);
            DialogControlSetVisible(lib281DEC45_gv_zSS_UIMainBottomButtonFlashes[(lp_buttonIndex)], PlayerGroupAll(), true);
        }
        else {
            DialogControlSetVisible(lib281DEC45_gv_zSS_UIMainBottomButtons[(lp_buttonIndex)], PlayerGroupAll(), false);
            DialogControlSetVisible(lib281DEC45_gv_zSS_UIMainBottomButtonFlashes[(lp_buttonIndex)], PlayerGroupAll(), false);
        }
    }
    else {
        if ((lp_enabled == true)) {
            DialogControlSetEnabled(lib281DEC45_gv_zSS_UIMainBottomButtons[(lp_buttonIndex)], PlayerGroupAll(), true);
            DialogControlSetVisible(lib281DEC45_gv_zSS_UIMainBottomButtonFlashes[(lp_buttonIndex)], PlayerGroupAll(), true);
        }
        else {
            DialogControlSetEnabled(lib281DEC45_gv_zSS_UIMainBottomButtons[(lp_buttonIndex)], PlayerGroupAll(), false);
            libNtve_gf_SetDialogItemTooltip(lib281DEC45_gv_zSS_UIMainBottomButtons[(lp_buttonIndex)], StringExternal("Param/Value/lib_281DEC45_E53286CA"), PlayerGroupAll());
            DialogControlSetVisible(lib281DEC45_gv_zSS_UIMainBottomButtonFlashes[(lp_buttonIndex)], PlayerGroupAll(), false);
        }
    }
    if ((lp_enabled == true) && (lib281DEC45_gf_ZSS_UIMainBottomButtonShouldFlash(lp_buttonIndex) == true)) {
        lib281DEC45_gf_ZSS_UIMainBottomButtonFlash(lp_buttonIndex);
    }
    else {
        lib281DEC45_gf_ZSS_UIMainBottomButtonStopFlash(lp_buttonIndex);
    }
}

string lib281DEC45_gf_ZSS_UIMainBottomButtonClickedState (int lp_bottomButtonIndex) {
    int autoF50B6943_val;

    // Implementation
    autoF50B6943_val = lp_bottomButtonIndex;
    if (autoF50B6943_val == lib281DEC45_ge_ZSS_UIMainBottomButtonType_BottomButtonMission) {
        return "Bottom Bar Mission Clicked";
    }
    else if (autoF50B6943_val == lib281DEC45_ge_ZSS_UIMainBottomButtonType_BottomButtonTravel) {
        return "Bottom Bar Travel Clicked";
    }
    else if (autoF50B6943_val == lib281DEC45_ge_ZSS_UIMainBottomButtonType_BottomButtonEvolution) {
        return "Bottom Bar Evolution Clicked";
    }
    else if (autoF50B6943_val == lib281DEC45_ge_ZSS_UIMainBottomButtonType_BottomButtonKerrigan) {
        return "Bottom Bar Kerrigan Clicked";
    }
    else if (autoF50B6943_val == lib281DEC45_ge_ZSS_UIMainBottomButtonType_BottomButtonArchives) {
        return "Bottom Bar Swarm Clicked";
    }
    else {
    }
    return null;
}

trigger auto_lib281DEC45_gf_ZSS_UIMainBottomButtonFlash_Trigger = null;
int auto_lib281DEC45_gf_ZSS_UIMainBottomButtonFlash_lp_buttonIndex;

void lib281DEC45_gf_ZSS_UIMainBottomButtonFlash (int lp_buttonIndex) {
    auto_lib281DEC45_gf_ZSS_UIMainBottomButtonFlash_lp_buttonIndex = lp_buttonIndex;

    if (auto_lib281DEC45_gf_ZSS_UIMainBottomButtonFlash_Trigger == null) {
        auto_lib281DEC45_gf_ZSS_UIMainBottomButtonFlash_Trigger = TriggerCreate("auto_lib281DEC45_gf_ZSS_UIMainBottomButtonFlash_TriggerFunc");
    }

    TriggerExecute(auto_lib281DEC45_gf_ZSS_UIMainBottomButtonFlash_Trigger, false, false);
}

bool auto_lib281DEC45_gf_ZSS_UIMainBottomButtonFlash_TriggerFunc (bool testConds, bool runActions) {
    int lp_buttonIndex = auto_lib281DEC45_gf_ZSS_UIMainBottomButtonFlash_lp_buttonIndex;

    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUpgrade;
    bool lv_upgradeChosen;

    // Variable Initialization

    // Implementation
    if ((lib281DEC45_gv_zSS_UIMainBottomButtonIsFlashing[(lp_buttonIndex)] == true)) {
        return true;
    }
    else {
    }
    DialogControlInvokeAsString(lib281DEC45_gv_zSS_UIMainBottomButtonFlashes[(lp_buttonIndex)], PlayerGroupAll(), "Birth", null, null, null, null);
    lib281DEC45_gv_zSS_UIMainBottomButtonIsFlashing[(lp_buttonIndex)] = true;
    return true;
}

trigger auto_lib281DEC45_gf_ZSS_UIMainBottomButtonStopFlash_Trigger = null;
int auto_lib281DEC45_gf_ZSS_UIMainBottomButtonStopFlash_lp_buttonIndex;

void lib281DEC45_gf_ZSS_UIMainBottomButtonStopFlash (int lp_buttonIndex) {
    auto_lib281DEC45_gf_ZSS_UIMainBottomButtonStopFlash_lp_buttonIndex = lp_buttonIndex;

    if (auto_lib281DEC45_gf_ZSS_UIMainBottomButtonStopFlash_Trigger == null) {
        auto_lib281DEC45_gf_ZSS_UIMainBottomButtonStopFlash_Trigger = TriggerCreate("auto_lib281DEC45_gf_ZSS_UIMainBottomButtonStopFlash_TriggerFunc");
    }

    TriggerExecute(auto_lib281DEC45_gf_ZSS_UIMainBottomButtonStopFlash_Trigger, false, false);
}

bool auto_lib281DEC45_gf_ZSS_UIMainBottomButtonStopFlash_TriggerFunc (bool testConds, bool runActions) {
    int lp_buttonIndex = auto_lib281DEC45_gf_ZSS_UIMainBottomButtonStopFlash_lp_buttonIndex;

    // Implementation
    if ((lib281DEC45_gv_zSS_UIMainBottomButtonIsFlashing[(lp_buttonIndex)] == false)) {
        return true;
    }
    else {
    }
    DialogControlInvokeAsString(lib281DEC45_gv_zSS_UIMainBottomButtonFlashes[(lp_buttonIndex)], PlayerGroupAll(), "Death", null, null, null, null);
    lib281DEC45_gv_zSS_UIMainBottomButtonIsFlashing[(lp_buttonIndex)] = false;
    return true;
}

bool lib281DEC45_gf_ZSS_UIMainBottomButtonShouldFlash (int lp_buttonIndex) {
    int auto34BFA6EB_val;
    int autoB514CCD6_ae;
    int autoB514CCD6_ai;
    int auto3BB88340_ae;
    int auto3BB88340_ai;
    int auto31596AEB_ae;
    int auto31596AEB_ai;

    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUpgrade;
    bool lv_upgradeChosen;

    // Variable Initialization

    // Implementation
    auto34BFA6EB_val = lp_buttonIndex;
    if (auto34BFA6EB_val == lib281DEC45_ge_ZSS_UIMainBottomButtonType_BottomButtonTravel) {
        if ((libSwaC_gf_MissionAvailableOnPlanet(libSwaC_gf_StoryMapPlanet(libSwaC_gf_CurrentMap())) == false)) {
            return true;
        }
        else {
        }
    }
    else if (auto34BFA6EB_val == lib281DEC45_ge_ZSS_UIMainBottomButtonType_BottomButtonMission) {
        if ((libSwaC_gf_NumberOfMissions(libSwaC_ge_MissionCountOptions_Completed) == 3) && (UserDataGetInt("StoryStates", lib281DEC45_gf_ZSS_UIMainBottomButtonClickedState(lib281DEC45_ge_ZSS_UIMainBottomButtonType_BottomButtonEvolution), "value", 1) == 1)) {
            return true;
        }
        else {
        }
    }
    else if (auto34BFA6EB_val == lib281DEC45_ge_ZSS_UIMainBottomButtonType_BottomButtonKerrigan) {
        if (((libSwaC_gf_StoryKerriganHasNewAbilities() == true) || (UserDataGetInt("StoryStates", lib281DEC45_gf_ZSS_UIMainBottomButtonClickedState(lib281DEC45_ge_ZSS_UIMainBottomButtonType_BottomButtonKerrigan), "value", 1) == 0))) {
            return true;
        }
        else {
        }
    }
    else if (auto34BFA6EB_val == lib281DEC45_ge_ZSS_UIMainBottomButtonType_BottomButtonEvolution) {
        autoB514CCD6_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
        autoB514CCD6_ai = 1;
        while (autoB514CCD6_ai <= autoB514CCD6_ae) {
            lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoB514CCD6_ai);
            if ((libSwaC_gf_StoryArmyCategoryStateCheck(lv_indexCategory, c_armyCategoryStateUnlocked) == true) && (CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "Flags[Hidden]", 1) == "0")) {
                lv_upgradeChosen = false;
                auto3BB88340_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray", 1);
                auto3BB88340_ai = 1;
                while (auto3BB88340_ai <= auto3BB88340_ae) {
                    lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray["+IntToString(auto3BB88340_ai-1)+"]", 1);
                    if ((libSwaC_gf_ZS_StoryArmyUpgradeState(lv_indexUpgrade) == c_armyUpgradeStatePurchased)) {
                        lv_upgradeChosen = true;
                        break;
                    }
                    else {
                    }
                    auto3BB88340_ai = auto3BB88340_ai + 1;
                }
                if ((lv_upgradeChosen == false)) {
                    return true;
                }
                else {
                }
            }
            else {
            }
            autoB514CCD6_ai = autoB514CCD6_ai + 1;
        }
        auto31596AEB_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
        auto31596AEB_ai = 1;
        while (auto31596AEB_ai <= auto31596AEB_ae) {
            lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto31596AEB_ai);
            if ((CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "Flags[Hidden]", 1) == "0") && (libSwaC_gf_MissionStatusCheck(libSwaC_gf_StoryArmyCategoryEvolutionMission(lv_indexCategory), libSwaC_ge_MissionStatus_Available) == true)) {
                return true;
            }
            else {
            }
            auto31596AEB_ai = auto31596AEB_ai + 1;
        }
    }
    else {
    }
    return false;
}

void lib281DEC45_gf_ZSS_UIKerriganShow () {
    // Implementation
    SoundPlay(SoundLink("UI_KerriganUpgrades_Enter", -1), PlayerGroupAll(), 100.0, 0.0);
    if ((libSwaC_gf_StoryInSimulation() == false)) {
        if (((UserDataGetInt("WriterStates", "KerriganFirstTier", "Value", 1) == 1) || (UserDataGetInt("WriterStates", "KerriganFirstVisit", "Value", 1) == 1) || (UserDataGetInt("WriterStates", "KerriganPrimalColumn", "Value", 1) == 1) || (libSwaC_gf_StoryKerriganHasNewAbilities() == true))) {
            ConversationDataRun("zSM_Kerrigan", PlayerGroupAll(), c_conversationSkipNone, false);
            UserDataSetInt("StoryStates", "Kerrigan UI Visited", "value", 1, 1);
        }
        else {
        }
    }
    else {
    }
    libSwaC_gf_DisplayKerriganTierCustomizationWindow(null, lib281DEC45_gt_ZSS_UIKerriganExited);
    if ((libSwaC_gf_StoryInSimulation() == false)) {
        UserDataSetInt("WriterStates", "KerriganFirstVisit", "Value", 1, 2);
        if ((UserDataGetInt("WriterStates", "KerriganFirstTier", "Value", 1) == 1)) {
            UserDataSetInt("WriterStates", "KerriganFirstTier", "Value", 1, 2);
        }
        else {
        }
        if ((UserDataGetInt("WriterStates", "KerriganPrimalColumn", "Value", 1) == 1)) {
            UserDataSetInt("WriterStates", "KerriganPrimalColumn", "Value", 1, 2);
        }
        else {
        }
    }
    else {
    }
}

void lib281DEC45_gf_ZSS_UIArchivesArmyShow () {
    // Implementation
    libSwaC_gf_StoryArmyUIArchivesDisplay();
    if ((lib281DEC45_gv_zSS_RetailArmyCheatUsed == false)) {
        lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomMissionScreen);
    }
    else {
    }
}

void lib281DEC45_gf_ZSS_UIArmyShow () {
    unitgroup autoE1815EB8_g;
    int autoE1815EB8_u;
    unitgroup auto4D646238_g;
    int auto4D646238_u;

    // Variable Declarations
    unit lv_indexUnit;

    // Variable Initialization

    // Implementation
    if ((GameIsExaminable() == true)) {
        UISetWorldVisible(PlayerGroupAll(), false);
        Wait(0.3, c_timeGame);
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_281DEC45_0861B6F7"), true);
        ConsoleCommand("resourcedump", true, true);
        CameraApplyInfo(1, CameraInfoDefault(), 0.0, -1, 10, true);
        CameraPan(1, RegionGetCenter(RegionEntireMap()), 0.0, -1, 10, false);
        Wait(0.3, c_timeGame);
        autoE1815EB8_g = lib281DEC45_gv_zSS_PlanetSetUnits;
        autoE1815EB8_u = 1;
        for ( ; autoE1815EB8_u <= UnitGroupCount(autoE1815EB8_g, c_unitCountAll) ; autoE1815EB8_u += BoolToInt(lv_indexUnit == UnitGroupUnit(autoE1815EB8_g, autoE1815EB8_u)) ) {
            lv_indexUnit = UnitGroupUnit(autoE1815EB8_g, autoE1815EB8_u);
            UnitUnloadModel(lv_indexUnit);
        }
        Wait(1.0, c_timeGame);
        ConsoleCommand("resourceclean", true, true);
        Wait(0.1, c_timeGame);
        UISetWorldVisible(PlayerGroupAll(), true);
    }
    else {
    }
    TriggerStop(lib281DEC45_gt_ZSS_EggRoomEvoMasterClicked);
    lib281DEC45_gv_zSS_InEggRoom = true;
    libSwaC_gf_DisplayEggRoom();
    lib281DEC45_gv_zSS_InEggRoom = false;
    if ((GameIsExaminable() == true)) {
        UISetWorldVisible(PlayerGroupAll(), false);
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_281DEC45_AA898655"), true);
        ConsoleCommand("resourcedump", true, true);
        CameraApplyInfo(1, CameraInfoDefault(), 0.0, -1, 10, true);
        CameraPan(1, RegionGetCenter(RegionEntireMap()), 0.0, -1, 10, false);
        Wait(0.3, c_timeGame);
        ConsoleCommand("resourceclean", true, true);
        Wait(0.1, c_timeGame);
        auto4D646238_g = lib281DEC45_gv_zSS_PlanetSetUnits;
        auto4D646238_u = 1;
        for ( ; auto4D646238_u <= UnitGroupCount(auto4D646238_g, c_unitCountAll) ; auto4D646238_u += BoolToInt(lv_indexUnit == UnitGroupUnit(auto4D646238_g, auto4D646238_u)) ) {
            lv_indexUnit = UnitGroupUnit(auto4D646238_g, auto4D646238_u);
            UnitLoadModel(lv_indexUnit);
        }
        UISetWorldVisible(PlayerGroupAll(), true);
    }
    else {
    }
    if ((libSwaC_gf_StoryInSimulation() == true)) {
        lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomMissionScreen);
        libSwaC_gf_CinematicFade(true, 0.0, Color(0.00, 0.00, 0.00), true);
    }
    else {
        lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomMainSet);
        libSwaC_gf_CinematicFade(true, 0.5, Color(0.00, 0.00, 0.00), true);
    }
}

void lib281DEC45_gf_ZSS_UIEvolutionMissionShow () {
    // Variable Declarations
    unit lv_indexUnit;

    // Variable Initialization

    // Implementation
    libSwaC_gf_StoryDisplayEvolutionMissionScreen(libSwaC_gf_MissionArmyCategoryUnlocked(lib281DEC45_gv_zSS_NextMission));
    if ((libSwaC_gf_StoryInSimulation() == true)) {
        libSwaC_gf_StorySimulationEnd();
        lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomMissionArchives);
    }
    else {
        lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomMainSet);
    }
}

void lib281DEC45_gf_ZSS_SMTipsInit () {
    // Implementation
    lib281DEC45_gf_ZSS_SMTipAddIf("Characters", true);
    lib281DEC45_gf_ZSS_SMTipAddIf("How To Start Missions", true);
    lib281DEC45_gf_ZSS_SMTipAddIf("How To Army", true);
    lib281DEC45_gf_ZSS_SMTipAddIf("How To Archives", (libSwaC_gf_NumberOfMissions(libSwaC_ge_MissionCountOptions_Completed) >= 4));
    lib281DEC45_gf_ZSS_SMTipAddIf("New Abilities", (libSwaC_gf_NumberOfMissions(libSwaC_ge_MissionCountOptions_Completed) >= 4));
    lib281DEC45_gf_ZSS_SMTipAddIf("How To Kerrigan", (libSwaC_gf_NumberOfMissions(libSwaC_ge_MissionCountOptions_Completed) >= 4));
    lib281DEC45_gf_ZSS_SMTipAddIf("New Units", (libSwaC_gf_NumberOfMissions(libSwaC_ge_MissionCountOptions_Completed) >= 4));
    lib281DEC45_gf_ZSS_SMTipAddIf("Evolution Missions", (libSwaC_gf_NumberOfMissions(libSwaC_ge_MissionCountOptions_Completed) >= 5));
    lib281DEC45_gf_ZSS_SMTipAddIf("How To Travel", (libSwaC_gf_NumberOfMissions(libSwaC_ge_MissionCountOptions_Completed) >= 6));
}

void lib281DEC45_gf_ZSS_SMTipAddIf (string lp_tip, bool lp_condition) {
    // Implementation
    if ((lp_condition == false)) {
        return ;
    }
    else {
    }
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(UserDataGetText("CampaignTips", lp_tip, "Name", 1), libNtve_ge_TipType_NormalTip), UserDataGetText("CampaignTips", lp_tip, "Description", 1), UserDataGetText("CampaignTips", lp_tip, "Name", 1), UserDataGetImagePath("CampaignTips", lp_tip, "Icon", 1));
    HelpPanelSetHelpItemDarkenedWhenViewed(HelpPanelLastCreatedHelpItem(), false);
}

void lib281DEC45_gf_ZSS_DebugSceneItemInit (int lp_index, string lp_scene, bool lp_animaticEnabled, bool lp_renderEnabled) {
    // Variable Declarations
    text lv_label;

    // Variable Initialization

    // Implementation
    lib281DEC45_gv_zSS_DebugSceneCount += 1;
    lib281DEC45_gv_zSS_DebugSceneList[lib281DEC45_gv_zSS_DebugSceneCount] = lp_scene;
    if ((lp_index == 0)) {
        lv_label = libSwaC_gf_StorySceneName(lp_scene);
    }
    else {
        lv_label = libSwaC_gf_StorySceneName(lp_scene);
    }
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 630, 50, c_anchorTopLeft, 60, lib281DEC45_gv_zSS_DebugSceneButtonY, StringToText(""), lv_label, "");
    if ((lp_animaticEnabled == true)) {
        lib281DEC45_gv_zSS_DebugSceneAnimaticButtons[lib281DEC45_gv_zSS_DebugSceneCount] = DialogControlLastCreated();
    }
    else {
        if ((lp_renderEnabled == true)) {
            lib281DEC45_gv_zSS_DebugSceneRenderButtons[lib281DEC45_gv_zSS_DebugSceneCount] = DialogControlLastCreated();
        }
        else {
        }
    }
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize24", PlayerGroupAll());
    lib281DEC45_gv_zSS_DebugSceneButtonY += 55;
}

void lib281DEC45_gf_ZSS_DebugSceneOpen () {
    // Implementation
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    lib281DEC45_gv_zSS_DebugScenePreviousRoom = lib281DEC45_gv_zSS_LastUniqueRoom;
    if ((lib281DEC45_gv_zSS_LastUniqueRoom == lib281DEC45_ge_Rooms_StoryRoomEggRoom)) {
        libSwaC_gf_HideEggRoom();
    }
    else {
    }
    TriggerExecute(lib281DEC45_gt_ZSS_DebugSceneInit, true, true);
    libSwaC_gf_CinematicFade(true, 0.0, Color(0.00, 0.00, 0.00), true);
    DialogSetVisible(lib281DEC45_gv_zSS_DebugSceneDialog, PlayerGroupAll(), true);
}

void lib281DEC45_gf_ZSS_DebugScenePerfTestStart (text lp_sceneName) {
    // Implementation
    TriggerExecute(lib281DEC45_gt_ZSS_DebugPerfTestFPSPoll, true, false);
    PerfTestStart(lp_sceneName);
}

void lib281DEC45_gf_ZSS_DebugPerfTestStop () {
    // Implementation
    TriggerStop(lib281DEC45_gt_ZSS_DebugPerfTestFPSPoll);
    PerfTestStop();
}

void lib281DEC45_gf_ZSS_DebugProgressRunAllPlanetConvos (string lp_planet) {
    int auto7D6EB66D_ai;
    int auto7D6EB66D_ae;

    // Variable Declarations
    string lv_indexCharacter;
    string lv_originalMap;

    // Variable Initialization

    // Implementation
    lv_originalMap = libSwaC_gf_CurrentMap();
    lib281DEC45_gf_ZSS_SetStoryMap(libSwaC_gf_StoryPlanetMap(lp_planet));
    lib281DEC45_gf_ZSS_CharacterDataUpdate();
    auto7D6EB66D_ai = 1;
    auto7D6EB66D_ae = UserDataInstanceCount("Character")+1;
    while (auto7D6EB66D_ai < auto7D6EB66D_ae) {
        lv_indexCharacter = UserDataInstance("Character", auto7D6EB66D_ai);
        if ((lib281DEC45_gf_CharacterKnown(lv_indexCharacter) == true)) {
            if ((ConversationDataCanRun(lib281DEC45_gf_ZSS_CharacterConversation(lv_indexCharacter), false) == false)) {
                ConversationDataSimulateRun(lib281DEC45_gf_ZSS_CharacterAmbientConversation(lv_indexCharacter));
            }
            else {
                ConversationDataSimulateRun(lib281DEC45_gf_ZSS_CharacterConversation(lv_indexCharacter));
            }
        }
        else {
        }
        auto7D6EB66D_ai = auto7D6EB66D_ai+1;
    }
    lib281DEC45_gf_ZSS_SetStoryMap(lv_originalMap);
}

void lib281DEC45_gf_ZSS_DebugStoryCheatDisplay () {
    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    TriggerExecute(lib281DEC45_gt_ZSS_DebugStoryCheatInit, true, false);
    lib281DEC45_gf_ZSS_DebugStoryCheatUpdate();
    libSwaC_gf_CinematicFade(true, 0.0, Color(0.00, 0.00, 0.00), true);
    CutsceneFade(true, 0.0, Color(0,0,0), 100.0, PlayerGroupAll(), false);
    DialogSetVisible(lib281DEC45_gv_zSS_DebugStoryDialog, PlayerGroupAll(), true);
}

void lib281DEC45_gf_ZSS_DebugStoryCheatHide () {
    // Implementation
    DialogSetVisible(lib281DEC45_gv_zSS_DebugStoryDialog, PlayerGroupAll(), false);
}

void lib281DEC45_gf_ZSS_DebugStoryCheatUpdate () {
    int auto2749AB36_ae;
    int auto2749AB36_ai;
    int auto278E2963_ae;
    int auto278E2963_ai;

    // Variable Declarations
    int lv_index;
    int lv_typeIndex;
    string lv_indexScene;

    // Variable Initialization

    // Implementation
    if ((lib281DEC45_gv_zSS_DebugStoryCheatInUpdate == true)) {
        return ;
    }
    else {
    }
    lib281DEC45_gv_zSS_DebugStoryCheatInUpdate = true;
    lib281DEC45_gf_ZSS_CharacterDataUpdate();
    if ((DialogControlGetSelectedItem(lib281DEC45_gv_zSS_DebugStoryTypeList, 1) == 0)) {
        DialogControlSelectItem(lib281DEC45_gv_zSS_DebugStoryTypeList, PlayerGroupAll(), 1);
    }
    else {
    }
    if ((DialogControlGetSelectedItem(lib281DEC45_gv_zSS_DebugStoryStateList, 1) == 0)) {
        DialogControlSelectItem(lib281DEC45_gv_zSS_DebugStoryStateList, PlayerGroupAll(), 1);
    }
    else {
    }
    lib281DEC45_gv_zSS_DebugStoryCurrentStateIndex = DialogControlGetSelectedItem(lib281DEC45_gv_zSS_DebugStoryStateList, 1);
    if ((DialogControlGetSelectedItem(lib281DEC45_gv_zSS_DebugStoryTypeList, 1) != lib281DEC45_gv_zSS_DebugStoryCurrentTypeIndex)) {
        lib281DEC45_gv_zSS_DebugStoryCurrentTypeIndex = DialogControlGetSelectedItem(lib281DEC45_gv_zSS_DebugStoryTypeList, 1);
        DialogControlRemoveAllItems(lib281DEC45_gv_zSS_DebugStorySceneList, PlayerGroupAll());
        auto2749AB36_ae = UserDataInstanceCount("ScriptedScenes");
        auto2749AB36_ai = 1;
        lv_index = 1;
        for ( ; ( (auto2749AB36_ai >= 0 && lv_index <= auto2749AB36_ae) || (auto2749AB36_ai <= 0 && lv_index >= auto2749AB36_ae) ) ; lv_index += auto2749AB36_ai ) {
            lv_indexScene = UserDataInstance("ScriptedScenes", lv_index);
            if ((UserDataGetString("ScriptedScenes", lv_indexScene, "Type", 1) == lib281DEC45_gv_zSS_DebugStorySceneTypes[DialogControlGetSelectedItem(lib281DEC45_gv_zSS_DebugStoryTypeList, 1)])) {
                DialogControlAddItem(lib281DEC45_gv_zSS_DebugStorySceneList, PlayerGroupAll(), StringToText(UserDataGetString("ScriptedScenes", lv_indexScene, "DisplayName", 1)));
                lv_typeIndex += 1;
                if ((lib281DEC45_gv_zSSX_DebugStoryScene != null) && (lib281DEC45_gv_zSSX_DebugStoryScene == lv_indexScene)) {
                    DialogControlSelectItem(lib281DEC45_gv_zSS_DebugStorySceneList, PlayerGroupAll(), lv_typeIndex);
                    lib281DEC45_gv_zSSX_DebugStoryScene = null;
                }
                else {
                }
            }
            else {
            }
        }
    }
    else {
    }
    if ((DialogControlGetSelectedItem(lib281DEC45_gv_zSS_DebugStoryStateList, 1) > UserDataInstanceCount("WriterStates"))) {
        libNtve_gf_SetDialogItemEditorValue(lib281DEC45_gv_zSS_DebugStoryStateEditBox, IntToString(UserDataGetInt("StoryStates", UserDataInstance("StoryStates", (DialogControlGetSelectedItem(lib281DEC45_gv_zSS_DebugStoryStateList, 1)-UserDataInstanceCount("WriterStates"))), "value", 1)), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemEditorValue(lib281DEC45_gv_zSS_DebugStoryStateEditBox, IntToString(UserDataGetInt("WriterStates", UserDataInstance("WriterStates", DialogControlGetSelectedItem(lib281DEC45_gv_zSS_DebugStoryStateList, 1)), "Value", 1)), PlayerGroupAll());
    }
    auto278E2963_ae = lib281DEC45_gv_zSS_DebugStoryInteractiveCount;
    auto278E2963_ai = 1;
    lv_index = 1;
    for ( ; ( (auto278E2963_ai >= 0 && lv_index <= auto278E2963_ae) || (auto278E2963_ai <= 0 && lv_index >= auto278E2963_ae) ) ; lv_index += auto278E2963_ai ) {
        if ((lib281DEC45_gv_zSS_DebugStoryInteractiveType[lv_index] == "Character") && ((lib281DEC45_gf_ZSS_CharacterIsAmbient(lib281DEC45_gv_zSS_DebugStoryInteractiveInstance[lv_index]) == true) || (ConversationDataCanRun(lib281DEC45_gf_ZSS_CharacterConversation(lib281DEC45_gv_zSS_DebugStoryInteractiveInstance[lv_index]), false) == false))) {
            libNtve_gf_SetDialogItemChecked(lib281DEC45_gv_zSS_DebugStoryAmbientCheckbox[lv_index], true, PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemChecked(lib281DEC45_gv_zSS_DebugStoryAmbientCheckbox[lv_index], false, PlayerGroupAll());
        }
        if ((lib281DEC45_gv_zSS_DebugStoryInteractiveType[lv_index] == "Character") && (lib281DEC45_gf_CharacterIsEnabled(lib281DEC45_gv_zSS_DebugStoryInteractiveInstance[lv_index]) == true)) {
            libNtve_gf_SetDialogItemChecked(lib281DEC45_gv_zSS_DebugStoryEnabledCheckbox[lv_index], true, PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemChecked(lib281DEC45_gv_zSS_DebugStoryEnabledCheckbox[lv_index], false, PlayerGroupAll());
        }
    }
    if ((lib281DEC45_gf_ZSS_DebugStoryCheatSelectedScene() == null)) {
        DialogControlSetEnabled(lib281DEC45_gv_zSS_DebugStoryPlayButton, PlayerGroupAll(), false);
    }
    else {
        DialogControlSetEnabled(lib281DEC45_gv_zSS_DebugStoryPlayButton, PlayerGroupAll(), true);
    }
    lib281DEC45_gv_zSS_DebugStoryCheatInUpdate = false;
}

void lib281DEC45_gf_ZSS_DebugStoryCheatInitInteractive (string lp_userType, string lp_userInstance) {
    // Variable Declarations
    text lv_name;

    // Variable Initialization

    // Implementation
    if ((lp_userType == "Character")) {
        if ((lib281DEC45_gf_CharacterUnit(lp_userInstance) == null)) {
            return ;
        }
        else {
        }
        if ((UserDataGetGameLink("Character", lp_userInstance, "Game Link", 1) != null)) {
            lv_name = StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, UserDataGetGameLink("Character", lp_userInstance, "Game Link", 1), "Name", c_playerAny));
        }
        else {
            lv_name = UserDataGetText("Character", lp_userInstance, "Name", 1);
        }
    }
    lib281DEC45_gv_zSS_DebugStoryInteractiveCount += 1;
    lib281DEC45_gv_zSS_DebugStoryInteractiveInstance[lib281DEC45_gv_zSS_DebugStoryInteractiveCount] = lp_userInstance;
    lib281DEC45_gv_zSS_DebugStoryInteractiveType[lib281DEC45_gv_zSS_DebugStoryInteractiveCount] = lp_userType;
    libNtve_gf_CreateDialogItemLabel(lib281DEC45_gv_zSS_DebugStoryDialog, lib281DEC45_gv_zSSC_DebugStoryNameWidth, 50, c_anchorTopLeft, 50, 50, lv_name, Color(100,100,100), false, 2.0);
    lib281DEC45_gv_zSS_DebugStoryInteractiveLabel[lib281DEC45_gv_zSS_DebugStoryInteractiveCount] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20", PlayerGroupAll());
    DialogControlSetPositionRelative(lib281DEC45_gv_zSS_DebugStoryInteractiveLabel[lib281DEC45_gv_zSS_DebugStoryInteractiveCount], PlayerGroupAll(), c_anchorTopRight, lib281DEC45_gv_zSS_DebugStoryEnabledLabel, c_anchorTopLeft, lib281DEC45_gv_zSSC_DebugStoryMargin, (((lib281DEC45_gv_zSS_DebugStoryInteractiveCount-1)*50)+50));
    DialogControlCreate(lib281DEC45_gv_zSS_DebugStoryDialog, c_triggerControlTypeCheckBox);
    lib281DEC45_gv_zSS_DebugStoryEnabledCheckbox[lib281DEC45_gv_zSS_DebugStoryInteractiveCount] = DialogControlLastCreated();
    DialogControlSetPositionRelative(lib281DEC45_gv_zSS_DebugStoryEnabledCheckbox[lib281DEC45_gv_zSS_DebugStoryInteractiveCount], PlayerGroupAll(), c_anchorTop, lib281DEC45_gv_zSS_DebugStoryEnabledLabel, c_anchorTop, 0, (((lib281DEC45_gv_zSS_DebugStoryInteractiveCount-1)*50)+50));
    DialogControlCreate(lib281DEC45_gv_zSS_DebugStoryDialog, c_triggerControlTypeCheckBox);
    lib281DEC45_gv_zSS_DebugStoryAmbientCheckbox[lib281DEC45_gv_zSS_DebugStoryInteractiveCount] = DialogControlLastCreated();
    DialogControlSetPositionRelative(lib281DEC45_gv_zSS_DebugStoryAmbientCheckbox[lib281DEC45_gv_zSS_DebugStoryInteractiveCount], PlayerGroupAll(), c_anchorTop, lib281DEC45_gv_zSS_DebugStoryAmbientLabel, c_anchorTop, 0, (((lib281DEC45_gv_zSS_DebugStoryInteractiveCount-1)*50)+50));
    libNtve_gf_CreateDialogItemButton(lib281DEC45_gv_zSS_DebugStoryDialog, 150, 50, c_anchorTopLeft, 50, 50, StringToText(""), StringExternal("Param/Value/lib_281DEC45_D6CDD844"), "");
    lib281DEC45_gv_zSS_DebugStoryInteractiveReset[lib281DEC45_gv_zSS_DebugStoryInteractiveCount] = DialogControlLastCreated();
    DialogControlSetPositionRelative(lib281DEC45_gv_zSS_DebugStoryInteractiveReset[lib281DEC45_gv_zSS_DebugStoryInteractiveCount], PlayerGroupAll(), c_anchorTopLeft, lib281DEC45_gv_zSS_DebugStoryAmbientLabel, c_anchorTopRight, lib281DEC45_gv_zSSC_DebugStoryMargin, (((lib281DEC45_gv_zSS_DebugStoryInteractiveCount-1)*50)+50));
}

string lib281DEC45_gf_ZSS_DebugStoryCheatSelectedScene () {
    int autoDCE900EE_ae;
    int autoDCE900EE_ai;

    // Variable Declarations
    string lv_scene;
    int lv_index;
    int lv_typeIndex;

    // Variable Initialization

    // Implementation
    autoDCE900EE_ae = UserDataInstanceCount("ScriptedScenes");
    autoDCE900EE_ai = 1;
    lv_index = 1;
    for ( ; ( (autoDCE900EE_ai >= 0 && lv_index <= autoDCE900EE_ae) || (autoDCE900EE_ai <= 0 && lv_index >= autoDCE900EE_ae) ) ; lv_index += autoDCE900EE_ai ) {
        lv_scene = UserDataInstance("ScriptedScenes", lv_index);
        if ((UserDataGetString("ScriptedScenes", lv_scene, "Type", 1) == lib281DEC45_gv_zSS_DebugStorySceneTypes[DialogControlGetSelectedItem(lib281DEC45_gv_zSS_DebugStoryTypeList, 1)])) {
            lv_typeIndex += 1;
            if ((lv_typeIndex == DialogControlGetSelectedItem(lib281DEC45_gv_zSS_DebugStorySceneList, 1))) {
                return lv_scene;
            }
            else {
            }
        }
        else {
        }
    }
    return null;
}

void lib281DEC45_gf_StoryPlayMainSetSound (soundlink lp_soundLink, int lp_index) {
    // Implementation
    if ((lib281DEC45_gv_zSS_MainSetSounds[lp_index] != null)) {
        return ;
    }
    else {
    }
    SoundPlay(lp_soundLink, PlayerGroupAll(), 100.0, 0.0);
    lib281DEC45_gv_zSS_MainSetSounds[lp_index] = SoundLastPlayed();
}

void lib281DEC45_gf_SetAllSoundChannelVolumesStory (int lp_mode, fixed lp_duration) {
    int autoF900780B_val;

    // Implementation
    lib281DEC45_gv_zSS_CurrentSoundMode = lp_mode;
    libNtve_gf_SetAllSoundChannelVolumes(lp_mode, PlayerGroupAll(), lp_duration);
    autoF900780B_val = lp_mode;
    if (autoF900780B_val == libNtve_ge_VolumeChannelMode_Game) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, lp_duration);
    }
    else if (autoF900780B_val == libNtve_ge_VolumeChannelMode_Cinematic) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 100.0, lp_duration);
    }
    else {
    }
}

void lib281DEC45_gf_ZSS_SoundMainSetStop () {
    int auto5F46BE03_ae;
    int auto5F46BE03_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    auto5F46BE03_ae = 2;
    auto5F46BE03_ai = 1;
    lv_index = 1;
    for ( ; ( (auto5F46BE03_ai >= 0 && lv_index <= auto5F46BE03_ae) || (auto5F46BE03_ai <= 0 && lv_index >= auto5F46BE03_ae) ) ; lv_index += auto5F46BE03_ai ) {
        SoundStop(lib281DEC45_gv_zSS_MainSetSounds[lv_index], true);
        lib281DEC45_gv_zSS_MainSetSounds[lv_index] = null;
    }
}

void lib281DEC45_gf_ZSS_SoundFadeAll (fixed lp_duration, bool lp_wait) {
    // Implementation
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, lp_duration);
    if ((lp_wait == true)) {
        Wait(lp_duration, c_timeReal);
    }
    else {
    }
}

void lib281DEC45_gf_ZSS_SoundFadeAllExceptMusic (fixed lp_duration, bool lp_wait) {
    // Implementation
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, lp_duration);
    if ((lp_wait == true)) {
        Wait(lp_duration, c_timeReal);
    }
    else {
    }
}

void lib281DEC45_gf_ShowHideStoryUnits (bool lp_showHide) {
    unitgroup autoBF1D72FD_g;
    int autoBF1D72FD_u;

    // Variable Declarations
    unit lv_indexUnit;

    // Variable Initialization

    // Implementation
    lib281DEC45_gv_zSS_StoryUnitsVisible = lp_showHide;
    autoBF1D72FD_g = lib281DEC45_gv_zSS_VisibleUnits;
    autoBF1D72FD_u = 1;
    for ( ; autoBF1D72FD_u <= UnitGroupCount(autoBF1D72FD_g, c_unitCountAll) ; autoBF1D72FD_u += BoolToInt(lv_indexUnit == UnitGroupUnit(autoBF1D72FD_g, autoBF1D72FD_u)) ) {
        lv_indexUnit = UnitGroupUnit(autoBF1D72FD_g, autoBF1D72FD_u);
        if ((libNtve_gf_UnitIsHidden(lv_indexUnit) == true) && (lp_showHide == true)) {
            libNtve_gf_ShowHideUnit(lv_indexUnit, lp_showHide);
        }
        else {
        }
        if ((libNtve_gf_UnitIsHidden(lv_indexUnit) == false) && (lp_showHide == false)) {
            libNtve_gf_ShowHideUnit(lv_indexUnit, lp_showHide);
        }
        else {
        }
    }
}

void lib281DEC45_gf_ShowHideUnitAbs (bool lp_showHide, unit lp_unit) {
    // Implementation
    if ((lp_showHide == true)) {
        if ((UnitGroupHasUnit(lib281DEC45_gv_zSS_VisibleUnits, lp_unit) == false)) {
            UnitGroupAdd(lib281DEC45_gv_zSS_VisibleUnits, lp_unit);
        }
        else {
        }
    }
    else {
        UnitGroupRemove(lib281DEC45_gv_zSS_VisibleUnits, lp_unit);
    }
    if ((lp_showHide == false) && (libNtve_gf_UnitIsHidden(lp_unit) == true)) {
        return ;
    }
    else {
    }
    if ((lp_showHide == true) && ((libNtve_gf_UnitIsHidden(lp_unit) == false) || (lib281DEC45_gv_zSS_StoryUnitsVisible == false))) {
        return ;
    }
    else {
    }
    libNtve_gf_ShowHideUnit(lp_unit, lp_showHide);
}

void lib281DEC45_gf_StorySetUnitLocation (unit lp_unit, point lp_point) {
    // Implementation
    if ((lp_unit == null)) {
        return ;
    }
    else {
    }
    UnitIssueOrder(lp_unit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetState(lp_unit, c_unitStateMoveSuppressed, false);
    lib281DEC45_gf_ClearAnimationwithblendtime(c_animNameDefault, lp_unit, 0.0);
    UnitSetPosition(lp_unit, lp_point, false);
    UnitSetFacing(lp_unit, PointGetFacing(lp_point), 0.0);
    UnitSetState(lp_unit, c_unitStateMoveSuppressed, true);
}

void lib281DEC45_gf_StoryCreateSetUnit (string lp_unitType, point lp_location, fixed lp_facing) {
    // Implementation
    UnitCreate(1, lp_unitType, c_unitCreateIgnorePlacement, 0, lp_location, lp_facing);
    if ((lib281DEC45_gv_zSS_UnitsLoaded == false)) {
        UnitUnloadModel(UnitLastCreated());
    }
    else {
    }
    lib281DEC45_gf_ZSS_SetUnitAddRemove(true, UnitLastCreated());
}

void lib281DEC45_gf_StoryAddAliasedUnit (unit lp_unit, string lp_alias) {
    // Implementation
    lib281DEC45_gv_zSS_AliasedUnitCount += 1;
    lib281DEC45_gv_zSS_Aliases[lib281DEC45_gv_zSS_AliasedUnitCount] = lp_alias;
    lib281DEC45_gv_zSS_AliasedUnits[lib281DEC45_gv_zSS_AliasedUnitCount] = lp_unit;
}

void lib281DEC45_gf_ZSS_SetUnitAddRemove (bool lp_addRemove, unit lp_unit) {
    // Implementation
    if ((lp_addRemove == true)) {
        UnitSetCursor(lp_unit, "Arrow_Zerg");
        UnitGroupAdd(lib281DEC45_gv_zSS_PlanetSetUnits, lp_unit);
        UnitGroupAdd(lib281DEC45_gv_zSS_VisibleUnits, lp_unit);
        if ((lib281DEC45_gv_zSS_StoryUnitsVisible == false) && (libNtve_gf_UnitIsVisibleToPlayer(lp_unit, 1) == true)) {
            libNtve_gf_ShowHideUnit(lp_unit, false);
        }
        else if ((lib281DEC45_gv_zSS_StoryUnitsVisible == true) && (libNtve_gf_UnitIsVisibleToPlayer(lp_unit, 1) == false)) {
            libNtve_gf_ShowHideUnit(lp_unit, true);
        }
        else if (true) {
        }
    }
    else {
        UnitUnloadModel(lp_unit);
        UnitGroupRemove(lib281DEC45_gv_zSS_PlanetSetUnits, lp_unit);
        UnitGroupRemove(lib281DEC45_gv_zSS_VisibleUnits, lp_unit);
    }
}

void lib281DEC45_gf_ZSS_SetUnitShowHide (bool lp_showHide) {
    unitgroup auto2FA83878_g;
    int auto2FA83878_u;

    // Variable Declarations
    unit lv_indexUnit;

    // Variable Initialization

    // Implementation
    auto2FA83878_g = lib281DEC45_gv_zSS_PlanetSetUnits;
    auto2FA83878_u = 1;
    for ( ; auto2FA83878_u <= UnitGroupCount(auto2FA83878_g, c_unitCountAll) ; auto2FA83878_u += BoolToInt(lv_indexUnit == UnitGroupUnit(auto2FA83878_g, auto2FA83878_u)) ) {
        lv_indexUnit = UnitGroupUnit(auto2FA83878_g, auto2FA83878_u);
        lib281DEC45_gf_ShowHideUnitAbs(lp_showHide, lv_indexUnit);
    }
}

void lib281DEC45_gf_ZSS_LoadSetModels (bool lp_loadUnload) {
    unitgroup auto665EA1FF_g;
    int auto665EA1FF_u;
    unitgroup auto53373C7C_g;
    int auto53373C7C_u;

    // Variable Declarations
    unit lv_indexUnit;
    string lv_indexCharacter;
    bool lv_unitEnabled;

    // Variable Initialization

    // Implementation
    if ((lp_loadUnload == lib281DEC45_gv_zSS_UnitsLoaded)) {
        return ;
    }
    else {
    }
    lib281DEC45_gv_zSS_UnitsLoaded = lp_loadUnload;
    auto665EA1FF_g = lib281DEC45_gv_zSS_PlanetSetUnits;
    auto665EA1FF_u = 1;
    for ( ; auto665EA1FF_u <= UnitGroupCount(auto665EA1FF_g, c_unitCountAll) ; auto665EA1FF_u += BoolToInt(lv_indexUnit == UnitGroupUnit(auto665EA1FF_g, auto665EA1FF_u)) ) {
        lv_indexUnit = UnitGroupUnit(auto665EA1FF_g, auto665EA1FF_u);
        if ((lv_indexUnit != lib281DEC45_gf_CharacterUnit("Evolution Master")) && (lv_indexUnit != lib281DEC45_gf_CharacterUnit("Kerrigan"))) {
            if ((lp_loadUnload == true)) {
                UnitLoadModel(lv_indexUnit);
                libNtve_gf_SendActorMessageToUnit(lv_indexUnit, "AnimCancelActiveBlends Default");
            }
            else {
                UnitUnloadModel(lv_indexUnit);
            }
        }
        else {
        }
    }
    if ((lp_loadUnload == true)) {
        auto53373C7C_g = lib281DEC45_gv_zSS_PlanetSetUnits;
        auto53373C7C_u = 1;
        for ( ; auto53373C7C_u <= UnitGroupCount(auto53373C7C_g, c_unitCountAll) ; auto53373C7C_u += BoolToInt(lv_indexUnit == UnitGroupUnit(auto53373C7C_g, auto53373C7C_u)) ) {
            lv_indexUnit = UnitGroupUnit(auto53373C7C_g, auto53373C7C_u);
            libNtve_gf_SendActorMessageToUnit(lv_indexUnit, "AnimSetTime ::GL_BSD");
        }
    }
    else {
    }
    lib281DEC45_gf_ZSS_ApplyAliases();
}

void lib281DEC45_gf_ZSS_ApplyAliases () {
    int auto8E2EE723_ae;
    int auto8E2EE723_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    auto8E2EE723_ae = lib281DEC45_gv_zSS_AliasedUnitCount;
    auto8E2EE723_ai = 1;
    lv_index = 1;
    for ( ; ( (auto8E2EE723_ai >= 0 && lv_index <= auto8E2EE723_ae) || (auto8E2EE723_ai <= 0 && lv_index >= auto8E2EE723_ae) ) ; lv_index += auto8E2EE723_ai ) {
        libNtve_gf_SendActorMessageToUnit(lib281DEC45_gv_zSS_AliasedUnits[lv_index], "ExternalFinderAdd");
        libNtve_gf_SendActorMessageToUnit(lib281DEC45_gv_zSS_AliasedUnits[lv_index], (("AliasAdd " + lib281DEC45_gv_zSS_Aliases[lv_index])));
    }
}

string lib281DEC45_gf_ZSS_MissionOnLocation (string lp_planet, int lp_index) {
    // Implementation
    lp_index -= 1;
    if ((CatalogFieldValueCount(c_gameCatalogLocation, (lp_planet), "MissionCategoryArray", c_playerAny) <= lp_index)) {
        return null;
    }
    else {
    }
    return (CatalogFieldValueGet(c_gameCatalogLocation, (lp_planet), ("MissionCategoryArray[" + IntToString(lp_index) + "].Map"), c_playerAny));
}

int lib281DEC45_gf_ZSS_TravelAvailableCount () {
    int auto1DAFFE31_ae;
    int auto1DAFFE31_ai;

    // Variable Declarations
    string lv_planet;
    int lv_available;

    // Variable Initialization

    // Implementation
    auto1DAFFE31_ae = CatalogEntryCount(c_gameCatalogLocation);
    auto1DAFFE31_ai = 1;
    while (auto1DAFFE31_ai <= auto1DAFFE31_ae) {
        lv_planet = CatalogEntryGet(c_gameCatalogLocation, auto1DAFFE31_ai);
        if ((libSwaC_gf_StoryPlanetIsAvailable(lv_planet) == true)) {
            lv_available += 1;
        }
        else {
        }
        auto1DAFFE31_ai = auto1DAFFE31_ai + 1;
    }
    return lv_available;
}

string lib281DEC45_gf_ZSS_MissionNextAvailable (string lp_planet) {
    int autoEF954F25_ae;
    int autoEF954F25_ai;

    // Variable Declarations
    string lv_mission;

    // Variable Initialization

    // Implementation
    autoEF954F25_ae = CatalogEntryCount(c_gameCatalogMap);
    autoEF954F25_ai = 1;
    while (autoEF954F25_ai <= autoEF954F25_ae) {
        lv_mission = CatalogEntryGet(c_gameCatalogMap, autoEF954F25_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_mission, "Kind", 1) == "Mission" && libSwaC_gf_StoryMapPlanet(lv_mission) == lp_planet) {
            if ((libSwaC_gf_MissionStatusCheck(lv_mission, libSwaC_ge_MissionStatus_Available) == true)) {
                return lv_mission;
            }
            else {
            }
        }
        autoEF954F25_ai = autoEF954F25_ai + 1;
    }
    return null;
}

string lib281DEC45_gf_ZSS_SetLightingCutsceneFile () {
    string auto1A8818D9_val;

    // Implementation
    auto1A8818D9_val = libSwaC_gf_StoryMapPlanet(libSwaC_gf_CurrentMap());
    if (auto1A8818D9_val == "Char") {
        return "Cutscenes\\StorymodeSet_Char.SC2Cutscene";
    }
    else if (auto1A8818D9_val == "Expedition") {
        return "Cutscenes\\StorymodeSet_Ice.SC2Cutscene";
    }
    else if (auto1A8818D9_val == "Zerus") {
        return "Cutscenes\\StorymodeSet_Zerus.SC2Cutscene";
    }
    else if (auto1A8818D9_val == "Hybrid") {
        if ((libSwaC_gf_MissionStatusCheck("ZHybrid2", libSwaC_ge_MissionStatus_Completed) == true)) {
            return "Cutscenes\\StorymodeSet_HybridB.SC2Cutscene";
        }
        else {
            return "Cutscenes\\StorymodeSet_Hybrid.SC2Cutscene";
        }
    }
    else if (auto1A8818D9_val == "ZSpace1") {
        return "Cutscenes\\StorymodeSet_DominionSpace.SC2Cutscene";
    }
    else if (auto1A8818D9_val == "Korhal") {
        if ((libSwaC_gf_MissionStatusCheck("ZKorhal1", libSwaC_ge_MissionStatus_Completed) == true)) {
            return "Cutscenes\\StorymodeSet_Korhal.SC2Cutscene";
        }
        else {
            return "Cutscenes\\StorymodeSet_KorhalSpace.SC2Cutscene";
        }
    }
    else {
    }
    return null;
}

void lib281DEC45_gf_ZSS_LightSetStopAll () {
    // Implementation
    lib281DEC45_gf_ZSS_LightSetPrimaryStop();
    lib281DEC45_gf_ZSS_CharacterAllStopSetLighting();
}

void lib281DEC45_gf_ZSS_LightSetPrimaryPlay () {
    // Implementation
    if ((lib281DEC45_gf_ZSS_SetLightingCutsceneFile() == null)) {
        return ;
    }
    else {
    }
    if ((lib281DEC45_gv_zSS_StorySetLightingCutscene == c_cutsceneNone)) {
        CutsceneCreateNew(lib281DEC45_gf_ZSS_SetLightingCutsceneFile(), lib281DEC45_gv_zSS_ConversationCutscenePosition, 0.0, PlayerGroupAll(), false);
        lib281DEC45_gv_zSS_StorySetLightingCutscene = CutsceneLastCreated();
        CutsceneGoToBookmark(lib281DEC45_gv_zSS_StorySetLightingCutscene, "World Light Start");
        CutscenePause(lib281DEC45_gv_zSS_StorySetLightingCutscene);
    }
    else {
    }
    CutsceneShow(lib281DEC45_gv_zSS_StorySetLightingCutscene, true);
}

void lib281DEC45_gf_ZSS_LightSetPrimaryStop () {
    // Implementation
    if ((lib281DEC45_gf_ZSS_SetLightingCutsceneFile() == null)) {
        return ;
    }
    else {
    }
    if ((lib281DEC45_gv_zSS_StorySetLightingCutscene == c_cutsceneNone)) {
        CutsceneCreateNew(lib281DEC45_gf_ZSS_SetLightingCutsceneFile(), lib281DEC45_gv_zSS_ConversationCutscenePosition, 0.0, PlayerGroupAll(), false);
        lib281DEC45_gv_zSS_StorySetLightingCutscene = CutsceneLastCreated();
        CutscenePause(lib281DEC45_gv_zSS_StorySetLightingCutscene);
    }
    else {
    }
    CutsceneShow(lib281DEC45_gv_zSS_StorySetLightingCutscene, false);
}

void lib281DEC45_gf_ToggleAllUnitsHighlightable (bool lp_onOff) {
    int auto1D4B9A90_ai;
    int auto1D4B9A90_ae;

    // Variable Declarations
    string lv_character;

    // Variable Initialization

    // Implementation
    if ((lp_onOff == true) && (lib281DEC45_gv_zSS_ScreenDialog != c_invalidDialogId) && (DialogIsVisible(lib281DEC45_gv_zSS_ScreenDialog, 1) == false) && (lib281DEC45_gf_CurrentRoom() != lib281DEC45_ge_Rooms_StoryRoomEggRoom)) {
        return ;
    }
    else {
    }
    auto1D4B9A90_ai = 1;
    auto1D4B9A90_ae = UserDataInstanceCount("Character")+1;
    while (auto1D4B9A90_ai < auto1D4B9A90_ae) {
        lv_character = UserDataInstance("Character", auto1D4B9A90_ai);
        UnitSetState(lib281DEC45_gf_CharacterUnit(lv_character), c_unitStateHighlightable, lp_onOff);
        lib281DEC45_gf_ZSS_CharacterDisplayUpdate(lv_character);
        if ((lp_onOff == false)) {
            lib281DEC45_gf_ZSS_CharacterCalloutShowHide(false, lv_character);
        }
        else {
        }
        auto1D4B9A90_ai = auto1D4B9A90_ai+1;
    }
}

void lib281DEC45_gf_ToggleInteractives (bool lp_onOff) {
    // Implementation
    lib281DEC45_gv_zSS_InteractionOn = (lp_onOff == true);
    lib281DEC45_gf_ToggleAllUnitsHighlightable(lp_onOff);
}

void lib281DEC45_gf_StoryCinematicMode (bool lp_onOff) {
    // Implementation
    libNtve_gf_CinematicMode(lp_onOff, PlayerGroupAll(), c_transitionDurationImmediate);
    lib281DEC45_gf_SetAllSoundChannelVolumesStory(lib281DEC45_gv_zSS_CurrentSoundMode, 1.0);
}

void lib281DEC45_gf_TurnAnimationPropertiesOnOff (unit lp_unit, string lp_property, bool lp_onOff, fixed lp_blend) {
    // Implementation
    libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_AnimBlendTimeApply(lp_blend));
    if ((lp_onOff == true)) {
        libNtve_gf_TurnAnimationPropertiesOn(libNtve_gf_MainActorofUnit(lp_unit), lp_property);
    }
    else {
        libNtve_gf_TurnAnimationPropertiesOff(libNtve_gf_MainActorofUnit(lp_unit), lp_property);
    }
    libNtve_gf_SendActorMessageToUnit(lp_unit, "AnimBlendTimeRemove");
}

void lib281DEC45_gf_StoryCreateKerrigan (point lp_point) {
    // Implementation
    libSwaC_gf_StoryCreateKerrigan(lp_point, 1, libSwaC_ge_KerriganPhase_DefaultKerriganPhase, PointGetFacing(lp_point), c_unitCreateIgnorePlacement);
    lib281DEC45_gf_SetCharacterUnit("Kerrigan", UnitLastCreated());
    lib281DEC45_gf_ZSS_CharacterSetAmbient("Kerrigan", true);
    lib281DEC45_gf_StorySetUnitLocation(lib281DEC45_gf_CharacterUnit("Kerrigan"), lp_point);
}

void lib281DEC45_gf_ClearAnimationwithblendtime (string lp_identifier, unit lp_unit, fixed lp_blendTime) {
    // Implementation
    libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_AnimClear(lp_identifier, lp_blendTime));
}

void lib281DEC45_gf_FadeStoryUITransparency (fixed lp_transparency, fixed lp_time) {
    int auto59811957_ai;
    int auto59811957_ae;

    // Variable Declarations
    string lv_indexCharacter;

    // Variable Initialization

    // Implementation
    DialogControlFadeTransparency(lib281DEC45_gv_zSS_StoryPanel, PlayerGroupAll(), (lp_time/2), lp_transparency);
    auto59811957_ai = 1;
    auto59811957_ae = UserDataInstanceCount("Character")+1;
    while (auto59811957_ai < auto59811957_ae) {
        lv_indexCharacter = UserDataInstance("Character", auto59811957_ai);
        if ((lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lv_indexCharacter)].lv_callout != c_invalidDialogControlId)) {
            DialogControlFadeTransparency(lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lv_indexCharacter)].lv_callout, PlayerGroupAll(), lp_time, lp_transparency);
        }
        else {
        }
        auto59811957_ai = auto59811957_ai+1;
    }
}

void lib281DEC45_gf_StoryCutsceneFade (bool lp_fadeInOut, fixed lp_duration, bool lp_waitDontWait) {
    // Implementation
    if ((lp_fadeInOut == true) && (lp_duration > 0.0)) {
        lib281DEC45_gv_zSS_StoryFadeDuration = lp_duration;
        TriggerExecute(lib281DEC45_gt_ZSS_StoryPerformFadeIn, true, lp_waitDontWait);
    }
    else {
        CutsceneFade(lp_fadeInOut, lp_duration, Color(0,0,0), 100.0, PlayerGroupAll(), lp_waitDontWait);
    }
}

point lib281DEC45_gf_StoryModeDefaultPosition () {
    // Implementation
    return lib281DEC45_gv_zSS_ConversationCutscenePosition;
}

void lib281DEC45_gf_StoryCreateUnitForCutsceneAliasing (string lp_unitType, string lp_alias) {
    // Implementation
    UnitCreate(1, lp_unitType, 0, 1, lib281DEC45_gf_StoryModeDefaultPosition(), 270.0);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "AliasAdd " + lp_alias);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ExternalFinderAdd");
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
}

void lib281DEC45_gf_ZSS_TurnAllFidgetsOnOff (bool lp_onOff) {
    int auto1B72A9D0_ai;
    int auto1B72A9D0_ae;

    // Variable Declarations
    string lv_indexCharacter;

    // Variable Initialization

    // Implementation
    PlayerSetState(1, c_playerStateFidgetingEnabled, lp_onOff);
    if ((lp_onOff == false)) {
        auto1B72A9D0_ai = 1;
        auto1B72A9D0_ae = UserDataInstanceCount("Character")+1;
        while (auto1B72A9D0_ai < auto1B72A9D0_ae) {
            lv_indexCharacter = UserDataInstance("Character", auto1B72A9D0_ai);
            lib281DEC45_gf_ClearAnimationwithblendtime("Fidget", lib281DEC45_gf_CharacterUnit(lv_indexCharacter), 0.0);
            auto1B72A9D0_ai = auto1B72A9D0_ai+1;
        }
    }
    else {
    }
}

bool lib281DEC45_gf_ZSS_CampaignCompleted () {
    // Implementation
    return (libSwaC_gf_NumberOfMissions(libSwaC_ge_MissionCountOptions_Completed) == libSwaC_gf_NumberOfMissions(libSwaC_ge_MissionCountOptions_All));
}

void lib281DEC45_gf_ZSS_StopStoryActivitiy (int lp_activity) {
    int autoF7560143_val;

    // Implementation
    autoF7560143_val = lp_activity;
    if (autoF7560143_val == lib281DEC45_ge_StoryActivities_Conversation) {
        lib281DEC45_gf_ZSS_StopActivityConversation();
    }
    else if (autoF7560143_val == lib281DEC45_ge_StoryActivities_ViewingRoom) {
        lib281DEC45_gf_ZSS_StopActivityViewRoom();
    }
    else if (autoF7560143_val == lib281DEC45_ge_StoryActivities_ScriptedScene) {
        lib281DEC45_gf_ZSS_StopActivityScriptedScene();
    }
    else if (autoF7560143_val == lib281DEC45_ge_StoryActivities_Cinematic) {
        lib281DEC45_gf_ZSS_StopActivityCinematic();
    }
    else {
    }
}

void lib281DEC45_gf_StartStoryActivity (int lp_activity) {
    int auto11668A73_val;

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_281DEC45_AE8DA698", "A", IntToText((lp_activity)));
    TextExpressionSetToken("Param/Expression/lib_281DEC45_AE8DA698", "B", IntToText((lib281DEC45_gv_zSS_CurrentStoryActivity)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_281DEC45_AE8DA698"), false);
    lib281DEC45_gf_ZSS_StopStoryActivitiy(lib281DEC45_gv_zSS_CurrentStoryActivity);
    if ((lib281DEC45_gv_zSS_CurrentStoryActivity != lib281DEC45_ge_StoryActivities_None)) {
        lib281DEC45_gv_zSS_LastStoryActivity = lib281DEC45_gv_zSS_CurrentStoryActivity;
    }
    else {
    }
    lib281DEC45_gv_zSS_CurrentStoryActivity = lp_activity;
    auto11668A73_val = lp_activity;
    if (auto11668A73_val == lib281DEC45_ge_StoryActivities_Conversation) {
        lib281DEC45_gf_ZSS_StartActivityConversation();
    }
    else if (auto11668A73_val == lib281DEC45_ge_StoryActivities_ViewingRoom) {
        lib281DEC45_gf_ZSS_StartActivityViewRoom();
    }
    else if (auto11668A73_val == lib281DEC45_ge_StoryActivities_ScriptedScene) {
        lib281DEC45_gf_ZSS_StartActivityScriptedScene();
    }
    else if (auto11668A73_val == lib281DEC45_ge_StoryActivities_Cinematic) {
        lib281DEC45_gf_ZSS_StartActivityCinematic();
    }
    else {
    }
}

int lib281DEC45_gf_CurrentStoryActivity () {
    // Implementation
    return lib281DEC45_gv_zSS_CurrentStoryActivity;
}

void lib281DEC45_gf_ZSS_StartActivityConversation () {
    // Implementation
    TriggerQueuePause(true);
    lib281DEC45_gf_ToggleInteractives(false);
    ConversationDataStop();
    TransmissionClearAll();
    lib281DEC45_gf_ZSS_TurnAllFidgetsOnOff(false);
    lib281DEC45_gf_ShowHideStoryUnits(true);
    lib281DEC45_gf_ZSS_AmbientSceneShowForConvo();
    lib281DEC45_gf_SetAllSoundChannelVolumesStory(libNtve_ge_VolumeChannelMode_Cinematic, 0.5);
    DialogSetSubtitlePositionOverride(c_invalidDialogId);
    DialogClearSubtitlePositionOverrideControl();
}

void lib281DEC45_gf_ZSS_StopActivityConversation () {
    // Implementation
    lib281DEC45_gf_SetAllSoundChannelVolumesStory(libNtve_ge_VolumeChannelMode_Game, 1.5);
    SoundSetReverb("Off", 1.0, true, true);
    DialogSetSubtitlePositionOverride(c_invalidDialogId);
}

void lib281DEC45_gf_ZSS_StartActivityScriptedScene () {
    // Implementation
    TriggerQueuePause(true);
    lib281DEC45_gf_ToggleInteractives(false);
    ConversationDataStop();
    TransmissionClearAll();
    lib281DEC45_gf_ShowHideStoryUI(false);
    lib281DEC45_gf_StoryCinematicMode(true);
    lib281DEC45_gf_ZSS_TurnAllFidgetsOnOff(false);
    lib281DEC45_gf_ShowHideStoryUnits(true);
    libSwaC_gf_CinematicFade(true, 0.0, Color(0.00, 0.00, 0.00), false);
    UISetWorldVisible(PlayerGroupAll(), true);
    lib281DEC45_gf_SetAllSoundChannelVolumesStory(libNtve_ge_VolumeChannelMode_Cinematic, 0.5);
    DialogClearSubtitlePositionOverride();
    DialogClearSubtitlePositionOverrideControl();
}

void lib281DEC45_gf_ZSS_StopActivityScriptedScene () {
    // Implementation
    SoundSetReverb("Off", 1.0, true, true);
    lib281DEC45_gf_StoryCinematicMode(false);
    lib281DEC45_gf_SetAllSoundChannelVolumesStory(libNtve_ge_VolumeChannelMode_Game, 1.5);
}

void lib281DEC45_gf_ZSS_StartActivityCinematic () {
    // Implementation
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    ConversationDataStop();
    TransmissionClearAll();
    lib281DEC45_gf_SetAllSoundChannelVolumesStory(libNtve_ge_VolumeChannelMode_Cinematic, 0.5);
    DialogClearSubtitlePositionOverride();
    DialogClearSubtitlePositionOverrideControl();
}

void lib281DEC45_gf_ZSS_StopActivityCinematic () {
    // Implementation
    lib281DEC45_gf_SetAllSoundChannelVolumesStory(libNtve_ge_VolumeChannelMode_Game, 0.5);
}

void lib281DEC45_gf_ZSS_StartActivityViewRoom () {
    int auto5B000CE1_val;

    // Implementation
    GameCheatAllow(c_gameCheatProgress, false);
    GameCheatAllow(c_gameCheatScene, false);
    GameCheatAllow(c_gameCheatCredits, false);
    GameCheatAllow(c_gameCheatResearch, false);
    lib281DEC45_gf_ZSS_TurnAllFidgetsOnOff(true);
    lib281DEC45_gf_ZSS_PreloadRoomConversations(lib281DEC45_gv_zSS_CurrentRoom);
    auto5B000CE1_val = lib281DEC45_gv_zSS_CurrentRoom;
    if (auto5B000CE1_val == lib281DEC45_ge_Rooms_StoryRoomMainSet) {
        GameCheatAllow(c_gameCheatProgress, true);
        GameCheatAllow(c_gameCheatScene, true);
        GameCheatAllow(c_gameCheatCredits, true);
        GameCheatAllow(c_gameCheatResearch, true);
        lib281DEC45_gf_ZSS_LightSetPrimaryPlay();
        lib281DEC45_gf_ShowHideAllAmbientScenes(true);
        DialogClearSubtitlePositionOverride();
        DialogSetSubtitlePositionOverride(c_invalidDialogId);
        DialogSetSubtitlePositionOverrideControl(lib281DEC45_gv_zSS_UIMainSetSubtitleAnchor);
        lib281DEC45_gf_ToggleInteractives(true);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, true);
        lib281DEC45_gf_ShowHideStoryUI(true);
        lib281DEC45_gf_ZSS_UIMainUpdate();
        UIClearBattleNetButtonOffset(PlayerGroupAll());
        TriggerExecute(lib281DEC45_gt_ZSS_PlayIdleLines, true, false);
        libSwaC_gf_DispatchStoryEvent(libSwaC_ge_ZS_Event_StoryUtilViewMainSet, "", "", false);
        libSwaC_gf_CinematicFade(true, 0.5, Color(0.00, 0.00, 0.00), false);
    }
    else if (auto5B000CE1_val == lib281DEC45_ge_Rooms_StoryRoomEggRoom) {
        DialogClearSubtitlePositionOverride();
        DialogClearSubtitlePositionOverrideControl();
        lib281DEC45_gf_ShowHideStoryUnits(false);
        lib281DEC45_gf_ShowHideStoryUI(false);
        if ((lib281DEC45_gv_zSS_InEggRoom == true)) {
            libSwaC_gf_ViewEggRoom();
        }
        else {
            lib281DEC45_gf_ZSS_UIArmyShow();
        }
    }
    else if (auto5B000CE1_val == lib281DEC45_ge_Rooms_StoryRoomEvolutionMissionScreen) {
        DialogClearSubtitlePositionOverride();
        DialogClearSubtitlePositionOverrideControl();
        lib281DEC45_gf_ShowHideStoryUnits(false);
        lib281DEC45_gf_ShowHideStoryUI(false);
        lib281DEC45_gf_ZSS_UIEvolutionMissionShow();
    }
    else if (auto5B000CE1_val == lib281DEC45_ge_Rooms_StoryRoomTravelScreen) {
        lib281DEC45_gf_ToggleInteractives(false);
        lib281DEC45_gf_ShowHideStoryUI(false);
        DialogSetSubtitlePositionOverride(c_invalidDialogId);
        lib281DEC45_gf_ZSS_UITravelDisplay();
    }
    else if (auto5B000CE1_val == lib281DEC45_ge_Rooms_StoryRoomMissionScreen) {
        lib281DEC45_gf_ToggleInteractives(false);
        lib281DEC45_gf_ShowHideStoryUI(false);
        DialogSetSubtitlePositionOverride(c_invalidDialogId);
        lib281DEC45_gf_ZSS_UIMissionDisplay();
    }
    else if (auto5B000CE1_val == lib281DEC45_ge_Rooms_StoryRoomMissionArchives) {
        lib281DEC45_gf_ToggleInteractives(false);
        lib281DEC45_gf_ShowHideStoryUI(false);
        DialogClearSubtitlePositionOverride();
        DialogClearSubtitlePositionOverrideControl();
        lib281DEC45_gf_ZSS_UIArchivesDisplay();
    }
    else if (auto5B000CE1_val == lib281DEC45_ge_Rooms_StoryRoomKerriganScreen) {
        lib281DEC45_gf_ToggleInteractives(false);
        lib281DEC45_gf_ShowHideStoryUI(false);
        DialogSetSubtitlePositionOverride(c_invalidDialogId);
        lib281DEC45_gf_ZSS_UIKerriganShow();
    }
    else if (auto5B000CE1_val == lib281DEC45_ge_Rooms_StoryRoomArchivesArmyScreen) {
        lib281DEC45_gf_ToggleInteractives(false);
        lib281DEC45_gf_ShowHideStoryUI(false);
        DialogSetSubtitlePositionOverride(c_invalidDialogId);
        lib281DEC45_gf_ZSS_UIArchivesArmyShow();
    }
    else if (auto5B000CE1_val == lib281DEC45_ge_Rooms_StoryRoomDebugStoryCheat) {
        lib281DEC45_gf_ToggleInteractives(false);
        lib281DEC45_gf_ShowHideStoryUI(false);
        DialogSetSubtitlePositionOverride(c_invalidDialogId);
        UIClearBattleNetButtonOffset(PlayerGroupAll());
        lib281DEC45_gf_ZSS_DebugStoryCheatDisplay();
    }
    else if (auto5B000CE1_val == lib281DEC45_ge_Rooms_StoryRoomDebugSceneCheat) {
        lib281DEC45_gf_ToggleInteractives(false);
        lib281DEC45_gf_ShowHideStoryUI(false);
        DialogSetSubtitlePositionOverride(c_invalidDialogId);
        UIClearBattleNetButtonOffset(PlayerGroupAll());
        lib281DEC45_gf_ZSS_DebugSceneOpen();
    }
    else if (auto5B000CE1_val == lib281DEC45_ge_Rooms_StoryRoomDebugProgressCheat) {
        lib281DEC45_gf_ToggleInteractives(false);
        lib281DEC45_gf_ShowHideStoryUI(false);
        DialogSetSubtitlePositionOverride(c_invalidDialogId);
        UIClearBattleNetButtonOffset(PlayerGroupAll());
    }
    else {
    }
}

void lib281DEC45_gf_ZSS_StopActivityViewRoom () {
    int auto5E79F816_val;

    // Implementation
    auto5E79F816_val = lib281DEC45_gf_CurrentRoom();
    if (auto5E79F816_val == lib281DEC45_ge_Rooms_StoryRoomMainSet) {
        TriggerStop(lib281DEC45_gt_ZSS_IzshaPeriodicArmyReminder);
        TriggerStop(lib281DEC45_gt_ZSS_PlayIdleLines);
        lib281DEC45_gf_ZSS_LightSetStopAll();
        lib281DEC45_gf_ShowHideAllAmbientScenes(false);
    }
    else if (auto5E79F816_val == lib281DEC45_ge_Rooms_StoryRoomEggRoom) {
        ConversationDataRegisterUnit("char_EvolutionMaster", lib281DEC45_gf_CharacterUnit("Evolution Master"));
    }
    else {
    }
}

void lib281DEC45_gf_EnterRoom (int lp_room) {
    // Implementation
    if ((lib281DEC45_gf_CurrentStoryActivity() == lib281DEC45_ge_StoryActivities_ViewingRoom) && (lib281DEC45_gf_CurrentRoom() == lib281DEC45_ge_Rooms_StoryRoomMainSet) && (lp_room != lib281DEC45_ge_Rooms_StoryRoomMainSet)) {
        lib281DEC45_gf_ShowHideStoryUI(false);
        lib281DEC45_gf_ToggleInteractives(false);
        TransmissionClearAll();
        ConversationDataStop();
        libSwaC_gf_CinematicFade(false, 0.5, Color(0.00, 0.00, 0.00), true);
    }
    else {
    }
    lib281DEC45_gf_StartStoryActivity(lib281DEC45_ge_StoryActivities_None);
    if ((lp_room != lib281DEC45_gf_CurrentRoom())) {
        TransmissionClearAll();
        ConversationDataStop();
        lib281DEC45_gf_ZSS_PlayRoomChangeScene(lp_room);
    }
    else {
    }
    lib281DEC45_gf_ChangeRoom(lp_room);
    lib281DEC45_gf_StartStoryActivity(lib281DEC45_ge_StoryActivities_ViewingRoom);
}

void lib281DEC45_gf_ChangeRoom (int lp_room) {
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_281DEC45_C832C8D9", "A", IntToText((lp_room)));
    TextExpressionSetToken("Param/Expression/lib_281DEC45_C832C8D9", "B", IntToText((lib281DEC45_gv_zSS_CurrentRoom)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_281DEC45_C832C8D9"), false);
    lib281DEC45_gv_zSS_LastRoom = lib281DEC45_gv_zSS_CurrentRoom;
    if ((lp_room != lib281DEC45_gv_zSS_CurrentRoom)) {
        StorySetChange();
        lib281DEC45_gf_ZSS_LeaveRoom();
        lib281DEC45_gv_zSS_LastUniqueRoom = lib281DEC45_gv_zSS_CurrentRoom;
        lib281DEC45_gv_zSS_CurrentRoom = lp_room;
    }
    else {
    }
    lib281DEC45_gf_ZSS_PrepareRoom();
    if ((lp_room == lib281DEC45_gv_zSS_LastRoom)) {
        return ;
    }
    else {
    }
}

int lib281DEC45_gf_CurrentRoom () {
    // Implementation
    return lib281DEC45_gv_zSS_CurrentRoom;
}

void lib281DEC45_gf_ZSS_PrepareRoom () {
    int auto0D8868E4_val;

    // Implementation
    auto0D8868E4_val = lib281DEC45_gv_zSS_CurrentRoom;
    if (auto0D8868E4_val == lib281DEC45_ge_Rooms_StoryRoomMainSet) {
        lib281DEC45_gf_ZSS_LoadSetModels(true);
        SoundSetReverb("Reverb_LeviathanMouth01", 1.0, true, true);
        libSwaC_gf_DispatchStoryEvent(libSwaC_ge_ZS_Event_StoryUtilPrepareMainSet, "", "", false);
        UISetWorldVisible(PlayerGroupAll(), true);
        lib281DEC45_gf_ShowHideStoryUnits(true);
    }
    else if (auto0D8868E4_val == lib281DEC45_ge_Rooms_StoryRoomEggRoom) {
        UnitLoadModel(lib281DEC45_gf_CharacterUnit("Evolution Master"));
        lib281DEC45_gf_ZSS_ApplyAliases();
        SoundSetReverb("Reverb_EggRoom", 1.0, true, true);
        UISetWorldVisible(PlayerGroupAll(), true);
        lib281DEC45_gf_ZSS_SetUnitShowHide(false);
        libSwaC_gf_PrepareEggRoom();
        TriggerQueuePause(true);
    }
    else if (auto0D8868E4_val == lib281DEC45_ge_Rooms_StoryRoomVoid) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
        UISetWorldVisible(PlayerGroupAll(), true);
        lib281DEC45_gf_ShowHideStoryUnits(false);
    }
    else if (auto0D8868E4_val == lib281DEC45_ge_Rooms_StoryRoomKorhalPalace) {
        UISetWorldVisible(PlayerGroupAll(), true);
        lib281DEC45_gf_ShowHideStoryUnits(false);
    }
    else if (auto0D8868E4_val == lib281DEC45_ge_Rooms_StoryRoomTravelScreen) {
        UISetWorldVisible(PlayerGroupAll(), false);
        lib281DEC45_gf_ShowHideStoryUnits(false);
    }
    else if (auto0D8868E4_val == lib281DEC45_ge_Rooms_StoryRoomMissionScreen) {
        UISetWorldVisible(PlayerGroupAll(), false);
        lib281DEC45_gf_ShowHideStoryUnits(false);
    }
    else if (auto0D8868E4_val == lib281DEC45_ge_Rooms_StoryRoomMissionArchives) {
        UISetWorldVisible(PlayerGroupAll(), false);
        lib281DEC45_gf_ShowHideStoryUnits(false);
    }
    else if (auto0D8868E4_val == lib281DEC45_ge_Rooms_StoryRoomKerriganScreen) {
        UISetWorldVisible(PlayerGroupAll(), true);
        lib281DEC45_gf_ShowHideStoryUnits(false);
    }
    else if (auto0D8868E4_val == lib281DEC45_ge_Rooms_StoryRoomEvolutionMissionScreen) {
        UISetWorldVisible(PlayerGroupAll(), false);
        lib281DEC45_gf_ShowHideStoryUnits(false);
    }
    else if (auto0D8868E4_val == lib281DEC45_ge_Rooms_StoryRoomArchivesArmyScreen) {
        UISetWorldVisible(PlayerGroupAll(), false);
        lib281DEC45_gf_ShowHideStoryUnits(false);
    }
    else if (auto0D8868E4_val == lib281DEC45_ge_Rooms_StoryRoomDebugStoryCheat) {
        UISetWorldVisible(PlayerGroupAll(), false);
        lib281DEC45_gf_ShowHideStoryUnits(false);
    }
    else if (auto0D8868E4_val == lib281DEC45_ge_Rooms_StoryRoomDebugSceneCheat) {
        UISetWorldVisible(PlayerGroupAll(), true);
        lib281DEC45_gf_ShowHideStoryUnits(false);
    }
    else {
    }
}

void lib281DEC45_gf_ZSS_LeaveRoom () {
    int auto2C44F216_val;

    // Implementation
    SoundSetReverb("Off", 1.0, true, true);
    auto2C44F216_val = lib281DEC45_gf_CurrentRoom();
    if (auto2C44F216_val == lib281DEC45_ge_Rooms_StoryRoomMissionScreen) {
        lib281DEC45_gf_ZSS_UIMissionClose();
    }
    else if (auto2C44F216_val == lib281DEC45_ge_Rooms_StoryRoomTravelScreen) {
        lib281DEC45_gf_ZSS_UITravelClose();
    }
    else if (auto2C44F216_val == lib281DEC45_ge_Rooms_StoryRoomMissionArchives) {
        lib281DEC45_gf_ZSS_UIArchivesClosed();
    }
    else if (auto2C44F216_val == lib281DEC45_ge_Rooms_StoryRoomDebugSceneCheat) {
        DialogSetVisible(lib281DEC45_gv_zSS_DebugSceneDialog, PlayerGroupAll(), false);
    }
    else if (auto2C44F216_val == lib281DEC45_ge_Rooms_StoryRoomDebugStoryCheat) {
    }
    else if (auto2C44F216_val == lib281DEC45_ge_Rooms_StoryRoomMainSet) {
        CameraApplyInfo(1, CameraInfoDefault(), 0.0, -1, 10.0, true);
        FogSetEnabled(false);
        lib281DEC45_gf_ZSS_SoundMainSetStop();
        lib281DEC45_gf_ZSS_LoadSetModels(false);
    }
    else if (auto2C44F216_val == lib281DEC45_ge_Rooms_StoryRoomEggRoom) {
        UnitLoadModel(lib281DEC45_gf_CharacterUnit("Evolution Master"));
    }
    else {
    }
}

int lib281DEC45_gf_ZSS_RoomFromIndex (int lp_index) {
    int auto99D99EC0_val;

    // Implementation
    auto99D99EC0_val = lp_index;
    if (auto99D99EC0_val == lib281DEC45_ge_Rooms_StoryRoomVoid) {
        return lib281DEC45_ge_Rooms_StoryRoomVoid;
    }
    else if (auto99D99EC0_val == lib281DEC45_ge_Rooms_StoryRoomTravelScreen) {
        return lib281DEC45_ge_Rooms_StoryRoomTravelScreen;
    }
    else if (auto99D99EC0_val == lib281DEC45_ge_Rooms_StoryRoomMissionScreen) {
        return lib281DEC45_ge_Rooms_StoryRoomMissionScreen;
    }
    else if (auto99D99EC0_val == lib281DEC45_ge_Rooms_StoryRoomMissionArchives) {
        return lib281DEC45_ge_Rooms_StoryRoomMissionArchives;
    }
    else if (auto99D99EC0_val == lib281DEC45_ge_Rooms_StoryRoomMainSet) {
        return lib281DEC45_ge_Rooms_StoryRoomMainSet;
    }
    else if (auto99D99EC0_val == lib281DEC45_ge_Rooms_StoryRoomKerriganScreen) {
        return lib281DEC45_ge_Rooms_StoryRoomKerriganScreen;
    }
    else if (auto99D99EC0_val == lib281DEC45_ge_Rooms_StoryRoomEggRoom) {
        return lib281DEC45_ge_Rooms_StoryRoomEggRoom;
    }
    else if (auto99D99EC0_val == lib281DEC45_ge_Rooms_StoryRoomDebugStoryCheat) {
        return lib281DEC45_ge_Rooms_StoryRoomDebugStoryCheat;
    }
    else {
    }
    return lib281DEC45_ge_Rooms_StoryRoomVoid;
}

void lib281DEC45_gf_ZSS_PreloadRoomConversations (int lp_room) {
    int autoCDCBB29A_val;
    int auto8770F5D4_ai;
    int auto8770F5D4_ae;

    // Variable Declarations
    string lv_indexCharacter;

    // Variable Initialization

    // Implementation
    autoCDCBB29A_val = lp_room;
    if (autoCDCBB29A_val == lib281DEC45_ge_Rooms_StoryRoomMainSet) {
        auto8770F5D4_ai = 1;
        auto8770F5D4_ae = UserDataInstanceCount("Character")+1;
        while (auto8770F5D4_ai < auto8770F5D4_ae) {
            lv_indexCharacter = UserDataInstance("Character", auto8770F5D4_ai);
            if ((lib281DEC45_gf_CharacterIsEnabled(lv_indexCharacter) == true) && (lv_indexCharacter != "Evolution Master")) {
                ConversationDataPreloadLines(lib281DEC45_gf_ZSS_CharacterConversation(lv_indexCharacter));
            }
            else {
            }
            auto8770F5D4_ai = auto8770F5D4_ai+1;
        }
    }
    else if (autoCDCBB29A_val == lib281DEC45_ge_Rooms_StoryRoomEggRoom) {
        ConversationDataPreloadLines(lib281DEC45_gf_ZSS_CharacterConversation("Evolution Master"));
    }
    else {
    }
}

void lib281DEC45_gf_SetEnterMainSetCallback (trigger lp_callback) {
    // Implementation
    lib281DEC45_gv_zSS_MainSetCallback = lp_callback;
}

void lib281DEC45_gf_ShowHideAllAmbientScenes (bool lp_showHide) {
    int auto2A4EE372_ae;
    int auto2A4EE372_ai;
    int auto368B6600_ae;
    int auto368B6600_ai;

    // Variable Declarations
    int lv_indexScene;
    int lv_indexCutscene;

    // Variable Initialization

    // Implementation
    if ((lp_showHide == true)) {
        lib281DEC45_gv_zSS_AmbientScenesHidden = false;
    }
    else {
        lib281DEC45_gv_zSS_AmbientScenesHidden = true;
    }
    auto2A4EE372_ae = lib281DEC45_gv_zSSC_MAXAMBIENTCUTSCENES;
    auto2A4EE372_ai = 1;
    lv_indexScene = 1;
    for ( ; ( (auto2A4EE372_ai >= 0 && lv_indexScene <= auto2A4EE372_ae) || (auto2A4EE372_ai <= 0 && lv_indexScene >= auto2A4EE372_ae) ) ; lv_indexScene += auto2A4EE372_ai ) {
        auto368B6600_ae = 4;
        auto368B6600_ai = 1;
        lv_indexCutscene = 1;
        for ( ; ( (auto368B6600_ai >= 0 && lv_indexCutscene <= auto368B6600_ae) || (auto368B6600_ai <= 0 && lv_indexCutscene >= auto368B6600_ae) ) ; lv_indexCutscene += auto368B6600_ai ) {
            CutsceneShow(lib281DEC45_gv_zSS_AmbientScenes[lv_indexScene][lv_indexCutscene], lp_showHide);
        }
    }
}

void lib281DEC45_gf_ZSS_AmbientSceneShowForConvo () {
    int autoF1082FBA_ae;
    int autoF1082FBA_ai;
    int auto4D6F7500_ae;
    int auto4D6F7500_ai;

    // Variable Declarations
    int lv_indexScene;
    int lv_indexCutscene;

    // Variable Initialization

    // Implementation
    if ((lib281DEC45_gf_CurrentRoom() != lib281DEC45_ge_Rooms_StoryRoomMainSet)) {
        return ;
    }
    else {
    }
    autoF1082FBA_ae = lib281DEC45_gv_zSSC_MAXAMBIENTCUTSCENES;
    autoF1082FBA_ai = 1;
    lv_indexScene = 1;
    for ( ; ( (autoF1082FBA_ai >= 0 && lv_indexScene <= autoF1082FBA_ae) || (autoF1082FBA_ai <= 0 && lv_indexScene >= autoF1082FBA_ae) ) ; lv_indexScene += autoF1082FBA_ai ) {
        if ((UserDataGetInt("AmbientScenes", lib281DEC45_gv_zSS_AmbientSceneInstance[lv_indexScene], "ActiveInConvo", 1) == 1)) {
            auto4D6F7500_ae = 4;
            auto4D6F7500_ai = 1;
            lv_indexCutscene = 1;
            for ( ; ( (auto4D6F7500_ai >= 0 && lv_indexCutscene <= auto4D6F7500_ae) || (auto4D6F7500_ai <= 0 && lv_indexCutscene >= auto4D6F7500_ae) ) ; lv_indexCutscene += auto4D6F7500_ai ) {
                CutsceneShow(lib281DEC45_gv_zSS_AmbientScenes[lv_indexScene][lv_indexCutscene], true);
            }
        }
        else {
        }
    }
}

trigger auto_lib281DEC45_gf_PlayAmbientScene_Trigger = null;
string auto_lib281DEC45_gf_PlayAmbientScene_lp_scene;

void lib281DEC45_gf_PlayAmbientScene (string lp_scene) {
    auto_lib281DEC45_gf_PlayAmbientScene_lp_scene = lp_scene;

    if (auto_lib281DEC45_gf_PlayAmbientScene_Trigger == null) {
        auto_lib281DEC45_gf_PlayAmbientScene_Trigger = TriggerCreate("auto_lib281DEC45_gf_PlayAmbientScene_TriggerFunc");
    }

    TriggerExecute(auto_lib281DEC45_gf_PlayAmbientScene_Trigger, false, false);
}

bool auto_lib281DEC45_gf_PlayAmbientScene_TriggerFunc (bool testConds, bool runActions) {
    string lp_scene = auto_lib281DEC45_gf_PlayAmbientScene_lp_scene;

    // Implementation
    lib281DEC45_gf_ZSS_AmbientScenePlay(lp_scene);
    return true;
}

void lib281DEC45_gf_ZSS_AmbientScenePlay (string lp_scene) {
    int auto5DF0C063_ae;
    int auto5DF0C063_ai;
    int auto8ECDB4C8_ae;
    int auto8ECDB4C8_ai;

    // Variable Declarations
    int lv_startingBookmark;
    int lv_sceneIndex;
    int lv_index;
    fixed lv_timerduration;

    // Variable Initialization

    // Implementation
    if ((lib281DEC45_gv_zSS_AmbientSceneCount == lib281DEC45_gv_zSSC_MAXAMBIENTCUTSCENES)) {
        TextExpressionSetToken("Param/Expression/lib_281DEC45_31A824A1", "A", StringToText((lp_scene)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_281DEC45_31A824A1"), false);
        return ;
    }
    else {
    }
    lib281DEC45_gv_zSS_AmbientSceneCount += 1;
    auto5DF0C063_ae = lib281DEC45_gv_zSSC_MAXAMBIENTCUTSCENES;
    auto5DF0C063_ai = 1;
    lv_index = 1;
    for ( ; ( (auto5DF0C063_ai >= 0 && lv_index <= auto5DF0C063_ae) || (auto5DF0C063_ai <= 0 && lv_index >= auto5DF0C063_ae) ) ; lv_index += auto5DF0C063_ai ) {
        if ((lib281DEC45_gv_zSS_AmbientSceneStatus[lv_index] == lib281DEC45_ge_ZSS_AmbientSceneStatusType_ZSS_AmbientSceneUnused)) {
            lv_sceneIndex = lv_index;
            break;
        }
        else {
        }
    }
    lib281DEC45_gv_zSS_AmbientSceneInstance[lv_sceneIndex] = lp_scene;
    lib281DEC45_gv_zSS_AmbientSceneStatus[lv_sceneIndex] = lib281DEC45_ge_ZSS_AmbientSceneStatusType_ZSS_AmbientSceneWaiting;
    auto8ECDB4C8_ae = 4;
    auto8ECDB4C8_ai = 1;
    lv_index = 1;
    for ( ; ( (auto8ECDB4C8_ai >= 0 && lv_index <= auto8ECDB4C8_ae) || (auto8ECDB4C8_ai <= 0 && lv_index >= auto8ECDB4C8_ae) ) ; lv_index += auto8ECDB4C8_ai ) {
        if ((UserDataGetString("AmbientScenes", lp_scene, "Bookmarks", lv_index) != "")) {
            TimerStart(lib281DEC45_gv_zSS_AmbientSceneTimer[lv_sceneIndex][lv_index], UserDataGetFixed("AmbientScenes", lp_scene, "LeadInTimes", lv_index), false, c_timeReal);
        }
        else {
        }
    }
    if ((UserDataGetInt("AmbientScenes", lp_scene, "Sequence From Start", 1) == 1)) {
        TimerStart(lib281DEC45_gv_zSS_AmbientSceneTimer[lv_sceneIndex][0], UserDataGetFixed("AmbientScenes", lp_scene, "SequenceTime", 1), false, c_timeReal);
    }
    else {
    }
}

void lib281DEC45_gf_ZSS_AmbientScenePlayCutscene (int lp_sceneIndex, int lp_bookmarkIndex) {
    // Variable Declarations
    string lv_sceneinstance;

    // Variable Initialization

    // Implementation
    lib281DEC45_gv_zSS_AmbientSceneStatus[lp_sceneIndex] = lib281DEC45_ge_ZSS_AmbientSceneStatusType_ZSS_AmbientScenePlaying;
    lv_sceneinstance = lib281DEC45_gv_zSS_AmbientSceneInstance[lp_sceneIndex];
    CutsceneCreateNew(UserDataGetString("AmbientScenes",lv_sceneinstance,"CutsceneFile",1), lib281DEC45_gv_zSS_ConversationCutscenePosition, 0.0, PlayerGroupAll(), false);
    lib281DEC45_gv_zSS_AmbientScenes[lp_sceneIndex][lp_bookmarkIndex] = CutsceneLastCreated();
    if ((UserDataGetString("AmbientScenes", lib281DEC45_gv_zSS_AmbientSceneInstance[lp_sceneIndex], "Bookmarks", lp_bookmarkIndex) != "")) {
        CutsceneGoToBookmark(lib281DEC45_gv_zSS_AmbientScenes[lp_sceneIndex][lp_bookmarkIndex], UserDataGetString("AmbientScenes", lib281DEC45_gv_zSS_AmbientSceneInstance[lp_sceneIndex], "Bookmarks", lp_bookmarkIndex));
    }
    else {
    }
    if ((lib281DEC45_gv_zSS_AmbientScenesHidden == true)) {
        CutsceneShow(CutsceneLastCreated(), false);
    }
    else {
    }
    CutscenePlay(CutsceneLastCreated());
}

void lib281DEC45_gf_ZSS_AmbientSceneOver (int lp_sceneIndex, int lp_bookmarkIndex) {
    int auto0B5E2FF4_ae;
    int auto0B5E2FF4_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    lib281DEC45_gv_zSS_AmbientScenes[lp_sceneIndex][lp_bookmarkIndex] = c_cutsceneNone;
    auto0B5E2FF4_ae = 4;
    auto0B5E2FF4_ai = 1;
    lv_index = 1;
    for ( ; ( (auto0B5E2FF4_ai >= 0 && lv_index <= auto0B5E2FF4_ae) || (auto0B5E2FF4_ai <= 0 && lv_index >= auto0B5E2FF4_ae) ) ; lv_index += auto0B5E2FF4_ai ) {
        if ((lib281DEC45_gv_zSS_AmbientScenes[lp_sceneIndex][lv_index] != c_cutsceneNone)) {
            return ;
        }
        else {
        }
    }
    if (((UserDataGetUserInstance("AmbientScenes", lib281DEC45_gv_zSS_AmbientSceneInstance[lp_sceneIndex], "Sequence Scene", 1) == null) || ((UserDataGetInt("AmbientScenes", lib281DEC45_gv_zSS_AmbientSceneInstance[lp_sceneIndex], "Sequence From Start", 1) == 1) && (TimerGetRemaining(lib281DEC45_gv_zSS_AmbientSceneTimer[lp_sceneIndex][0]) == 0.0)))) {
        lib281DEC45_gv_zSS_AmbientSceneStatus[lp_sceneIndex] = lib281DEC45_ge_ZSS_AmbientSceneStatusType_ZSS_AmbientSceneUnused;
        lib281DEC45_gv_zSS_AmbientSceneCount -= 1;
    }
    else {
        lib281DEC45_gv_zSS_AmbientSceneStatus[lp_sceneIndex] = lib281DEC45_ge_ZSS_AmbientSceneStatusType_ZSS_AmbientSceneSequencing;
        TimerStart(lib281DEC45_gv_zSS_AmbientSceneTimer[lp_sceneIndex][0], UserDataGetFixed("AmbientScenes", lib281DEC45_gv_zSS_AmbientSceneInstance[lp_sceneIndex], "SequenceTime", 1), false, c_timeReal);
    }
}

void lib281DEC45_gf_ZSS_ApplyEyeDarts () {
    // Implementation
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lib281DEC45_gf_CharacterUnit("Kerrigan")), "ZSS_EyeDart", "Eye Detect 00", c_animFlagPlayForever, c_animTimeDefault);
}

void lib281DEC45_gf_ZSS_RemoveEyeDarts () {
    // Implementation
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(lib281DEC45_gf_CharacterUnit("Kerrigan")), "ZSS_EyeDart");
}

void lib281DEC45_gf_ZSS_PlayCharacterConversation (string lp_character) {
    int auto6A80680F_ai;
    int auto6A80680F_ae;

    // Variable Declarations
    string lv_indexCharacter;

    // Variable Initialization

    // Implementation
    if ((lib281DEC45_gf_ZSS_CharacterIsAmbient(lp_character) == true)) {
        lib281DEC45_gf_PlayAmbientLine(lp_character, null, false);
        return ;
    }
    else {
    }
    lib281DEC45_gv_zSS_LastConversationSkipped = false;
    ConversationDataPreloadLines(lib281DEC45_gf_ZSS_CharacterConversation(lp_character));
    SoundLengthQueryWait();
    ConversationDataSaveNodeState(lib281DEC45_gf_ZSS_CharacterConversation(lp_character), lib281DEC45_gf_ZSS_TempConversationBank(), ("StoryConversations"));
    ConversationDataResetNodeState(lib281DEC45_gf_ZSS_CharacterConversation(lp_character));
    ConversationDataLoadNodeState(lib281DEC45_gf_ZSS_CharacterConversation(lp_character), libSwaC_gf_StoryBank(), ("ConversationSnapshot"));
    lib281DEC45_gf_ZSS_BackupWriterStates();
    lib281DEC45_gf_ZSS_LoadSnapshotWriterStates();
    lib281DEC45_gv_zSS_ActiveConvoBookmarkToken = lib281DEC45_gf_CharacterSceneNameToken(lp_character);
    if (((lp_character == "Hotspot - Space - Hyperion") || (lp_character == "Primal Ancient"))) {
        lib281DEC45_gf_ShowHideStoryUI(false);
        lib281DEC45_gf_ToggleInteractives(false);
        TransmissionClearAll();
        ConversationDataStop();
        lib281DEC45_gf_StoryCutsceneFade(false, 0.5, true);
    }
    else {
    }
    lib281DEC45_gf_StartStoryActivity(lib281DEC45_ge_StoryActivities_Conversation);
    lib281DEC45_gf_ZSS_PrepareRoom();
    TriggerExecute(lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lp_character)].lv_preCallback, true, true);
    lib281DEC45_gv_zSS_CurrentConvoChar = lp_character;
    libSwaC_gf_DisplayConversationTimestamp(lib281DEC45_gf_ZSS_CharacterConversation(lp_character));
    lib281DEC45_gf_ZSS_ParseCameraInfoString2();
    lib281DEC45_gf_ZSS_ApplyEyeDarts();
    lib281DEC45_gf_ShowHideStoryUI(false);
    lib281DEC45_gv_zSS_ConvoActive = true;
    lib281DEC45_gf_StoryCinematicMode(true);
    ConversationDataRun(lib281DEC45_gf_ZSS_CharacterConversation(lp_character), PlayerGroupAll(), c_conversationSkipFull, true);
    lib281DEC45_gv_zSS_LastConversationSkipped = ConversationDataWasSkipped();
    lib281DEC45_gv_zSS_CurrentConvoChar = null;
    lib281DEC45_gv_zSS_ConvoActive = false;
    if ((ConversationDataWasSkipped() == true)) {
        ConversationDataLoadNodeState(lib281DEC45_gf_ZSS_CharacterConversation(lp_character), lib281DEC45_gf_ZSS_TempConversationBank(), ("StoryConversations"));
    }
    else {
        lib281DEC45_gf_SetCharacterNew(lp_character, false);
    }
    lib281DEC45_gf_ZSS_RestoreWriterStates();
    lib281DEC45_gf_ZSS_EggRoomConvoCleanup();
    lib281DEC45_gf_ZSS_RemoveEyeDarts();
    lib281DEC45_gf_ZSS_CloseConversationScene();
    auto6A80680F_ai = 1;
    auto6A80680F_ae = UserDataInstanceCount("Character")+1;
    while (auto6A80680F_ai < auto6A80680F_ae) {
        lv_indexCharacter = UserDataInstance("Character", auto6A80680F_ai);
        libNtve_gf_SimpleLookAtStop(lib281DEC45_gf_CharacterUnit(lv_indexCharacter), "InstantHeadOnly");
        libNtve_gf_SimpleLookAtStop(lib281DEC45_gf_CharacterUnit(lv_indexCharacter), "Turret_Right");
        libNtve_gf_SimpleLookAtStop(lib281DEC45_gf_CharacterUnit("Kerrigan"), "Turret_Left");
        libNtve_gf_SimpleLookAtStop(lib281DEC45_gf_CharacterUnit(lv_indexCharacter), "InstantHeadOnlySubtle");
        libNtve_gf_SendActorMessageToUnit(lib281DEC45_gf_CharacterUnit(lv_indexCharacter), "AnimCancelActiveBlends ::Conversation");
        auto6A80680F_ai = auto6A80680F_ai+1;
    }
    lib281DEC45_gf_StoryCinematicMode(false);
    if ((ConversationDataWasSkipped() == true)) {
        CutsceneFade(true, 0.0, Color(0,0,0), 100.0, PlayerGroupAll(), false);
    }
    else {
        CutsceneFade(true, 0.5, Color(0,0,0), 100.0, PlayerGroupAll(), false);
    }
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    TriggerExecute(lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lp_character)].lv_postCallback, true, false);
}

void lib281DEC45_gf_PlayScriptedConversation (string lp_conversation, int lp_skipping, int lp_fadeStyle, trigger lp_lineCallback) {
    int autoDFC7E73B_ai;
    int autoDFC7E73B_ae;

    // Variable Declarations
    string lv_indexCharacter;
    int lv_skipMode;

    // Variable Initialization

    // Implementation
    ConversationDataStop();
    lib281DEC45_gv_zSS_ConvoActive = true;
    lib281DEC45_gv_zSS_LastConversationSkipped = false;
    lib281DEC45_gv_zSS_LastScenePlayedFull = true;
    lib281DEC45_gv_zSS_ScriptedLineCallback = lp_lineCallback;
    lib281DEC45_gf_ShowHideStoryUI(false);
    lv_skipMode = lp_skipping;
    lib281DEC45_gf_StoryCinematicMode(true);
    libSwaC_gf_DisplayConversationTimestamp(lp_conversation);
    if ((lv_skipMode != c_conversationSkipNone) && ((lp_fadeStyle & lib281DEC45_ge_SwarmStoryFadeStyle_FadeOutOnSkip) != 0)) {
        TriggerExecute(lib281DEC45_gt_ZSS_CustomConvoSkipping, true, false);
        lv_skipMode = c_conversationSkipNone;
    }
    else {
    }
    lib281DEC45_gf_ZSS_ApplyEyeDarts();
    if (((lp_fadeStyle & lib281DEC45_ge_SwarmStoryFadeStyle_FadeInAtStart) != 0)) {
        lib281DEC45_gf_StoryCutsceneFade(true, 1.0, false);
    }
    else {
    }
    if (((lp_fadeStyle & lib281DEC45_ge_SwarmStoryFadeStyle_BlockingFadeInAtStart) != 0)) {
        lib281DEC45_gf_StoryCutsceneFade(true, 2.0, true);
    }
    else {
    }
    if ((lib281DEC45_gv_zSS_LastConversationSkipped == false)) {
        ConversationDataRun(lp_conversation, PlayerGroupAll(), lv_skipMode, true);
    }
    else {
    }
    if ((TriggerActiveCount(lib281DEC45_gt_ZSS_CustomConvoSkipping) > 0)) {
        TriggerStop(lib281DEC45_gt_ZSS_CustomConvoSkipping);
        if (((lp_fadeStyle & lib281DEC45_ge_SwarmStoryFadeStyle_FadeOutAfter) != 0)) {
            lib281DEC45_gf_StoryCutsceneFade(false, 1.0, true);
        }
        else {
        }
    }
    else {
    }
    TriggerStop(lp_lineCallback);
    if ((ConversationDataWasSkipped() == true)) {
        lib281DEC45_gv_zSS_LastConversationSkipped = true;
        lib281DEC45_gv_zSS_LastScenePlayedFull = false;
    }
    else {
    }
    lib281DEC45_gf_ZSS_CloseConversationScene();
    lib281DEC45_gf_ZSS_RemoveEyeDarts();
    autoDFC7E73B_ai = 1;
    autoDFC7E73B_ae = UserDataInstanceCount("Character")+1;
    while (autoDFC7E73B_ai < autoDFC7E73B_ae) {
        lv_indexCharacter = UserDataInstance("Character", autoDFC7E73B_ai);
        libNtve_gf_SimpleLookAtStop(lib281DEC45_gf_CharacterUnit(lv_indexCharacter), "InstantHeadOnly");
        libNtve_gf_SimpleLookAtStop(lib281DEC45_gf_CharacterUnit(lv_indexCharacter), "InstantHeadOnlySubtle");
        libNtve_gf_SimpleLookAtStop(lib281DEC45_gf_CharacterUnit(lv_indexCharacter), "Turret_Right");
        libNtve_gf_SimpleLookAtStop(lib281DEC45_gf_CharacterUnit("Kerrigan"), "Turret_Left");
        libNtve_gf_SimpleLookAtStop(lib281DEC45_gf_CharacterUnit(lv_indexCharacter), "InstantEyesOnly");
        libNtve_gf_SendActorMessageToUnit(lib281DEC45_gf_CharacterUnit(lv_indexCharacter), "AnimCancelActiveBlends ::Conversation");
        autoDFC7E73B_ai = autoDFC7E73B_ai+1;
    }
    lib281DEC45_gf_StoryCinematicMode(false);
    lib281DEC45_gv_zSS_ConvoActive = false;
    lib281DEC45_gv_zSS_ScriptedLineCallback = null;
    TriggerStop(lib281DEC45_gt_ZSS_DebugHideAfterLine);
    if (((lp_fadeStyle & lib281DEC45_ge_SwarmStoryFadeStyle_FadeInAfter) != 0)) {
        lib281DEC45_gf_StoryCutsceneFade(true, 0.5, false);
    }
    else if (((lp_fadeStyle & lib281DEC45_ge_SwarmStoryFadeStyle_InstantFadeInAfter) != 0)) {
        lib281DEC45_gf_StoryCutsceneFade(true, 0.0, false);
    }
}

void lib281DEC45_gf_PreloadScriptedConversation (string lp_conversation, bool lp_fade) {
    // Implementation
    if ((lp_fade == true)) {
        libSwaC_gf_CinematicFade(false, 0.0, Color(0.00, 0.00, 0.00), true);
    }
    else {
    }
    ConversationDataPreloadLines(lp_conversation);
    SoundLengthQueryWait();
    if ((lp_fade == true)) {
        libSwaC_gf_CinematicFade(true, 0.0, Color(0.00, 0.00, 0.00), true);
    }
    else {
    }
}

void lib281DEC45_gf_PlayAmbientLine (string lp_character, string lp_conversation, bool lp_waitOption) {
    // Implementation
    if ((lib281DEC45_gv_zSS_AmbientCharacter == lp_character)) {
        return ;
    }
    else {
    }
    ConversationDataStop();
    TransmissionClearAll();
    lib281DEC45_gv_zSS_AmbientCharacter = lp_character;
    if ((lp_conversation == null)) {
        lib281DEC45_gv_zSS_AmbientConversation = lib281DEC45_gf_ZSS_CharacterAmbientConversation(lp_character);
    }
    else {
        lib281DEC45_gv_zSS_AmbientConversation = lp_conversation;
    }
    TriggerExecute(lib281DEC45_gt_ZSS_RunAmbientConversation, true, lp_waitOption);
}

void lib281DEC45_gf_PlayAmbientTransmission (string lp_character, string lp_line, bool lp_waitOption) {
    // Implementation
    if ((lib281DEC45_gv_zSS_AmbientCharacter == lp_character)) {
        return ;
    }
    else {
    }
    lib281DEC45_gv_zSS_AmbientCharacter = lp_character;
    lib281DEC45_gv_zSS_AmbientLine = lp_line;
    TriggerExecute(lib281DEC45_gt_ZSS_RunAmbientTransmission, true, lp_waitOption);
}

void lib281DEC45_gf_SetConversationListener (string lp_listenerCharacter) {
    // Implementation
    lib281DEC45_gv_zSS_ConvoListener = lp_listenerCharacter;
}

void lib281DEC45_gf_ZSS_OpenConversationScene () {
    string auto98D82297_val;

    // Implementation
    if ((lib281DEC45_gv_zSS_ConversationScene == c_cutsceneNone)) {
        if ((lib281DEC45_gf_CurrentRoom() == lib281DEC45_ge_Rooms_StoryRoomEggRoom)) {
            CutsceneCreateNew("Cutscenes\\Conversations_EggRoom.SC2Cutscene", lib281DEC45_gv_zSS_EggRoomCutscenePosition, 0.0, PlayerGroupAll(), false);
        }
        else {
            auto98D82297_val = libSwaC_gf_StoryMapPlanet(libSwaC_gf_CurrentMap());
            if (auto98D82297_val == "Char") {
                CutsceneCreateNew("Cutscenes\\Conversations_Char.SC2Cutscene", lib281DEC45_gv_zSS_ConversationCutscenePosition, 0.0, PlayerGroupAll(), false);
            }
            else if (auto98D82297_val == "Expedition") {
                CutsceneCreateNew("Cutscenes\\Conversations_Ice.SC2Cutscene", lib281DEC45_gv_zSS_ConversationCutscenePosition, 0.0, PlayerGroupAll(), false);
            }
            else if (auto98D82297_val == "Zerus") {
                CutsceneCreateNew("Cutscenes\\Conversations_Zerus.SC2Cutscene", lib281DEC45_gv_zSS_ConversationCutscenePosition, 0.0, PlayerGroupAll(), false);
            }
            else if (auto98D82297_val == "Hybrid") {
                if ((libSwaC_gf_MissionStatusCheck("ZHybrid2", libSwaC_ge_MissionStatus_Completed) == true)) {
                    CutsceneCreateNew("Cutscenes\\Conversations_HybridB.SC2Cutscene", lib281DEC45_gv_zSS_ConversationCutscenePosition, 0.0, PlayerGroupAll(), false);
                }
                else {
                    CutsceneCreateNew("Cutscenes\\Conversations_Hybrid.SC2Cutscene", lib281DEC45_gv_zSS_ConversationCutscenePosition, 0.0, PlayerGroupAll(), false);
                }
            }
            else if (auto98D82297_val == "Korhal") {
                if ((libSwaC_gf_MissionStatusCheck("ZKorhal1", libSwaC_ge_MissionStatus_Completed) == true)) {
                    CutsceneCreateNew("Cutscenes\\Conversations_Korhal.SC2Cutscene", lib281DEC45_gv_zSS_ConversationCutscenePosition, 0.0, PlayerGroupAll(), false);
                }
                else {
                    CutsceneCreateNew("Cutscenes\\Conversations_KorhalSpace.SC2Cutscene", lib281DEC45_gv_zSS_ConversationCutscenePosition, 0.0, PlayerGroupAll(), false);
                }
            }
            else if (auto98D82297_val == "ZSpace1") {
                CutsceneCreateNew("Cutscenes\\Conversations_DominionSpace.SC2Cutscene", lib281DEC45_gv_zSS_ConversationCutscenePosition, 0.0, PlayerGroupAll(), false);
            }
            else {
                return ;
            }
        }
        lib281DEC45_gv_zSS_ConversationScene = CutsceneLastCreated();
    }
    else {
    }
    CutsceneSetTime(lib281DEC45_gv_zSS_ConversationScene, 0);
    CutscenePause(lib281DEC45_gv_zSS_ConversationScene);
}

void lib281DEC45_gf_ZSS_CloseConversationScene () {
    // Implementation
    if ((lib281DEC45_gv_zSS_ConversationScene == c_cutsceneNone)) {
        return ;
    }
    else {
    }
    CutsceneStop(lib281DEC45_gv_zSS_ConversationScene);
    lib281DEC45_gv_zSS_ConversationScene = c_cutsceneNone;
}

bool lib281DEC45_gf_StoryLastConversationWasSkipped () {
    // Implementation
    return lib281DEC45_gv_zSS_LastConversationSkipped;
}

void lib281DEC45_gf_ZSS_ConversationAchievementCheck (string lp_character) {
    string autoA9CD1361_val;

    // Implementation
    autoA9CD1361_val = lp_character;
    if (autoA9CD1361_val == "Zagara") {
        if ((ConversationDataStateGetValue("GrantStoryAchievement|Visionary") == 1)) {
            libSwaC_gf_CampaignAwardAchievement("KerriganTeachesZagara", 1);
        }
        else if ((ConversationDataStateGetValue("GrantStoryAchievement|RallyTroopsZagara") == 1)) {
            AchievementTermQuantitySet(1, "ZStory_Rally_Zagara", 1);
        }
    }
    else if (autoA9CD1361_val == "Evolution Master") {
        if ((ConversationDataStateGetValue("GrantStoryAchievement|FashionStatementEvo") == 1)) {
            AchievementTermQuantitySet(1, "ZStoryConversation_Abathur_NewLook", 1);
        }
        else if ((ConversationDataStateGetValue("GrantStoryAchievement|RallyTroopsAbathur") == 1)) {
            AchievementTermQuantitySet(1, "ZStory_Rally_Abathur", 1);
        }
    }
    else if (autoA9CD1361_val == "Zerg Adjutant") {
        if ((ConversationDataStateGetValue("GrantStoryAchievement|FashionStatementIzsha") == 1)) {
            AchievementTermQuantitySet(1, "ZStoryConversation_Izsha_NewLook", 1);
        }
        else if ((ConversationDataStateGetValue("GrantStoryAchievement|RallyTroopsIzsha") == 1)) {
            AchievementTermQuantitySet(1, "ZStory_Rally_Izsha", 1);
        }
    }
    else if (autoA9CD1361_val == "Primal Ancient") {
        AchievementTermQuantitySet(1, "ZStoryConversation_AncientOne", 1);
        if ((ConversationDataStateGetValue("GrantStoryAchievement|FashionStatementZurvan") == 1)) {
            AchievementTermQuantitySet(1, "ZStoryConversation_Zurvan_NewLook", 1);
        }
    }
    else if (autoA9CD1361_val == "Stukov") {
        if ((ConversationDataStateGetValue("GrantStoryAchievement|Xelnaga Secrets") == 1)) {
            libSwaC_gf_CampaignAwardAchievement("SkygeirrLearnXelnagaPurpose", 1);
        }
        else if ((ConversationDataStateGetValue("GrantStoryAchievement|RallyTroopsStukov") == 1)) {
            AchievementTermQuantitySet(1, "ZStory_Rally_Stukov", 1);
        }
    }
    else if (autoA9CD1361_val == "Primal Advisor") {
        if ((ConversationDataStateGetValue("GrantStoryAchievement|RallyTroopsDehaka") == 1)) {
            AchievementTermQuantitySet(1, "ZStory_Rally_Dehaka", 1);
        }
    }
    else if (autoA9CD1361_val == "Hotspot - Char - Warfield's Compound") {
        AchievementTermQuantitySet(1, "ZStoryConversation_WarfieldFortress", 1);
    }
    else if (autoA9CD1361_val == "Hotspot - Expedition - Hatchery") {
        AchievementTermQuantitySet(1, "ZStoryConversation_NafashHatchery", 1);
    }
    else if (autoA9CD1361_val == "Hotspot - Hybrid - Station") {
        AchievementTermQuantitySet(1, "ZStoryConversation_SkygeirrStation", 1);
    }
    else if (autoA9CD1361_val == "Hotspot - Korhal - Palace") {
        AchievementTermQuantitySet(1, "ZStoryConversation_ImperialPalace", 1);
    }
    else if (autoA9CD1361_val == "Hotspot - Korhal - Planet") {
        AchievementTermQuantitySet(1, "ZStoryConversation_CommunicationsRelay", 1);
    }
    else if (autoA9CD1361_val == "Hotspot - Space - Hyperion") {
        AchievementTermQuantitySet(1, "ZStoryConversation_Hyperion", 1);
    }
    else {
    }
}

void lib281DEC45_gf_UseCharacterCamera (string lp_character, int lp_cameratype) {
    int auto66742BCB_ai;
    int auto66742BCB_ae;

    // Variable Declarations
    string lv_indexCharacter;
    trigger lv_callback;
    string lv_listener;

    // Variable Initialization

    // Implementation
    if ((lib281DEC45_gv_zSS_ConvoActive == false)) {
        return ;
    }
    else {
    }
    if ((lib281DEC45_gv_zSS_DebugConvToggleVisibility == true)) {
        lib281DEC45_gf_ShowHideStoryUnits(true);
        TriggerStop(lib281DEC45_gt_ZSS_DebugHideAfterLine);
        lib281DEC45_gv_zSS_DebugConvCurrentLine = ConversationDataActiveLine();
        TriggerExecute(lib281DEC45_gt_ZSS_DebugHideAfterLine, true, false);
    }
    else {
    }
    lib281DEC45_gv_zSS_CurrentCamera = lp_cameratype;
    lib281DEC45_gv_zSS_CurrentSpeaker = lp_character;
    lib281DEC45_gv_zSS_SkipConversationCamera = false;
    lib281DEC45_gv_zSS_SkipConversationLookAt = false;
    if ((lib281DEC45_gv_zSS_CurrentConvoChar != null) && (lib281DEC45_gf_ZSS_CharacterCameraCallback(lib281DEC45_gv_zSS_CurrentConvoChar) != null)) {
        TriggerStop(lib281DEC45_gf_ZSS_CharacterCameraCallback(lib281DEC45_gv_zSS_CurrentConvoChar));
        TriggerExecute(lib281DEC45_gf_ZSS_CharacterCameraCallback(lib281DEC45_gv_zSS_CurrentConvoChar), true, true);
        if ((lib281DEC45_gv_zSS_SkipConversationCamera == true)) {
            return ;
        }
        else {
        }
    }
    else {
    }
    if ((lib281DEC45_gv_zSS_SkipConversationLookAt == false)) {
        auto66742BCB_ai = 1;
        auto66742BCB_ae = UserDataInstanceCount("Character")+1;
        while (auto66742BCB_ai < auto66742BCB_ae) {
            lv_indexCharacter = UserDataInstance("Character", auto66742BCB_ai);
            lib281DEC45_gf_ZSS_ApplyConversationLookAt(lv_indexCharacter);
            auto66742BCB_ai = auto66742BCB_ai+1;
        }
    }
    else {
    }
    if ((lib281DEC45_gv_zSS_ScriptedLineCallback != null)) {
        TriggerStop(lib281DEC45_gv_zSS_ScriptedLineCallback);
        lib281DEC45_gv_zSS_SkipConversationCamera = false;
        TriggerExecute(lib281DEC45_gv_zSS_ScriptedLineCallback, true, true);
        if ((lib281DEC45_gv_zSS_SkipConversationCamera == true)) {
            return ;
        }
        else {
        }
    }
    else {
    }
    if (((lib281DEC45_gv_zSS_CurrentSpeaker == lib281DEC45_gv_zSS_CurrentConvoChar) || (lib281DEC45_gv_zSS_CurrentConvoChar == null))) {
        lv_listener = lib281DEC45_gv_zSS_ConvoListener;
    }
    else {
        lv_listener = lib281DEC45_gv_zSS_CurrentConvoChar;
    }
    if ((lv_listener != null) && ((lp_cameratype == lib281DEC45_ge_CameraType_FarListener) || (lp_cameratype == lib281DEC45_ge_CameraType_CloseUpListener) || (lp_cameratype == lib281DEC45_ge_CameraType_MediumListener) || (lp_cameratype == lib281DEC45_ge_CameraType_OverShoulderReverse) || (lp_cameratype == lib281DEC45_ge_CameraType_Custom01Listener) || (lp_cameratype == lib281DEC45_ge_CameraType_Custom02Listener) || (lp_cameratype == lib281DEC45_ge_CameraType_Custom03Listener) || (lp_cameratype == lib281DEC45_ge_CameraType_Custom04Listener))) {
        lib281DEC45_gf_ApplyCutsceneCamera(lib281DEC45_gf_OppositeCameraShot(lp_cameratype), lv_listener);
        return ;
    }
    else {
    }
    lib281DEC45_gf_ApplyCutsceneCamera(lp_cameratype, lp_character);
}

void lib281DEC45_gf_ZSS_ApplyConversationLookAt (string lp_lookingCharacter) {
    // Variable Declarations
    string lv_targetCharacter;

    // Variable Initialization

    // Implementation
    if (((lib281DEC45_gf_CharacterUnit(lp_lookingCharacter) == null) || (libNtve_gf_UnitIsVisibleToPlayer(lib281DEC45_gf_CharacterUnit(lp_lookingCharacter), 1) == false))) {
        return ;
    }
    else {
    }
    if ((lp_lookingCharacter != lib281DEC45_gv_zSS_CurrentSpeaker)) {
        lv_targetCharacter = lib281DEC45_gv_zSS_CurrentSpeaker;
    }
    else {
        if ((lp_lookingCharacter == lib281DEC45_gv_zSS_CurrentConvoChar)) {
            lv_targetCharacter = "Kerrigan";
        }
        else {
            lv_targetCharacter = lib281DEC45_gv_zSS_CurrentConvoChar;
        }
    }
    if ((lv_targetCharacter == lp_lookingCharacter)) {
        return ;
    }
    else {
    }
    libNtve_gf_SimpleLookAtStop(lib281DEC45_gf_CharacterUnit(lp_lookingCharacter), "InstantHeadOnly");
    libNtve_gf_SimpleLookAtStop(lib281DEC45_gf_CharacterUnit(lp_lookingCharacter), "InstantHeadOnlySubtle");
    libNtve_gf_SimpleLookAtStop(lib281DEC45_gf_CharacterUnit(lp_lookingCharacter), "InstantEyesOnly");
    if ((lp_lookingCharacter == "Zerg Adjutant")) {
        libNtve_gf_MakeUnitLookAtUnit(lib281DEC45_gf_CharacterUnit(lp_lookingCharacter), "InstantEyesOnly", lib281DEC45_gf_CharacterUnit(lv_targetCharacter), "Ref_Head");
    }
    else if ((lv_targetCharacter == "Evolution Master")) {
        libNtve_gf_MakeUnitLookAtUnit(lib281DEC45_gf_CharacterUnit(lp_lookingCharacter), "InstantHeadOnlySubtle", lib281DEC45_gf_CharacterUnit(lv_targetCharacter), "Ref_Head");
    }
    else if (true) {
        libNtve_gf_MakeUnitLookAtUnit(lib281DEC45_gf_CharacterUnit(lp_lookingCharacter), "InstantHeadOnly", lib281DEC45_gf_CharacterUnit(lv_targetCharacter), "Ref_Head");
    }
}

void lib281DEC45_gf_ZSS_ApplyKerriganWingLookAt (int lp_camera, string lp_speaker) {
    string auto5F0151E1_val;

    // Implementation
    if ((libSwaC_gf_KerriganPhaseCheck(libSwaC_ge_KerriganPhase_KerriganPhaseGhost) == true)) {
        return ;
    }
    else {
    }
    libNtve_gf_SimpleLookAtStop(lib281DEC45_gf_CharacterUnit("Kerrigan"), "Turret_Right");
    auto5F0151E1_val = lib281DEC45_gv_zSS_CurrentConvoChar;
    if (auto5F0151E1_val == "Evolution Master") {
        if ((((lp_camera == lib281DEC45_ge_CameraType_OverShoulder) && (lp_speaker == "Evolution Master")) || ((lp_camera == lib281DEC45_ge_CameraType_OverShoulderReverse) && (lp_speaker == "Kerrigan")))) {
        }
        else {
            return ;
        }
    }
    else if (auto5F0151E1_val == "Protoss Prisoner") {
        if ((((lp_camera == lib281DEC45_ge_CameraType_OverShoulder) && (lp_speaker == "Protoss Prisoner")) || ((lp_camera == lib281DEC45_ge_CameraType_OverShoulderReverse) && (lp_speaker == "Kerrigan")))) {
        }
        else {
            return ;
        }
    }
    else {
        return ;
    }
    libNtve_gf_SimpleLookAtStart(lib281DEC45_gf_CharacterUnit("Kerrigan"), "Turret_Right", ActorFrom(lib281DEC45_gv_zSS_LookAtWingActorRef));
}

void lib281DEC45_gf_ZSS_ApplyKerriganHairLookAt (int lp_camera, string lp_speaker) {
    string auto27D647AD_val;

    // Variable Declarations
    bool lv_useCutscene;

    // Variable Initialization

    // Implementation
    if ((libSwaC_gf_KerriganPhaseCheck(libSwaC_ge_KerriganPhase_KerriganPhaseGhost) == true)) {
        return ;
    }
    else {
    }
    libNtve_gf_SimpleLookAtStop(lib281DEC45_gf_CharacterUnit("Kerrigan"), "Turret_Left");
    auto27D647AD_val = lib281DEC45_gv_zSS_CurrentConvoChar;
    if (auto27D647AD_val == "Primal Advisor") {
        if ((lp_camera == lib281DEC45_ge_CameraType_TwoShot)) {
            lv_useCutscene = true;
        }
        else {
        }
    }
    else if (auto27D647AD_val == "Zagara") {
        if (((lp_camera == lib281DEC45_ge_CameraType_Custom03) || ((lp_camera == lib281DEC45_ge_CameraType_OverShoulder) && (lp_speaker == "Zagara")) || ((lp_camera == lib281DEC45_ge_CameraType_OverShoulderReverse) && (lp_speaker == "Kerrigan")))) {
            lv_useCutscene = true;
        }
        else {
        }
    }
    else {
    }
    if ((lv_useCutscene == true)) {
        libNtve_gf_SimpleLookAtStart(lib281DEC45_gf_CharacterUnit("Kerrigan"), "Turret_Left", ActorFrom(lib281DEC45_gv_zSS_LookAtHairActorRef));
    }
    else {
        libNtve_gf_MakeUnitLookAtUnit(lib281DEC45_gf_CharacterUnit("Kerrigan"), "Turret_Left", lib281DEC45_gf_CharacterUnit("Kerrigan"), "Ref_Hardpoint");
    }
}

void lib281DEC45_gf_ZSS_ApplyKerriganEyeLookAt (int lp_camera) {
    // Implementation
    if (((libSwaC_gf_KerriganPhaseCheck(libSwaC_ge_KerriganPhase_KerriganPhaseGhost) == true) || (lib281DEC45_gv_zSS_CurrentConvoChar == "Evolution Master"))) {
        return ;
    }
    else {
    }
    libNtve_gf_SimpleLookAtStop(lib281DEC45_gf_CharacterUnit("Kerrigan"), "InstantEyesOnly");
    libNtve_gf_SimpleLookAtStart(lib281DEC45_gf_CharacterUnit("Kerrigan"), "InstantEyesOnly", ActorFrom(lib281DEC45_gv_zSS_LookAtEyePrimalActorRef));
}

void lib281DEC45_gf_ZSS_ApplyKerriganHeadLookAt (int lp_camera) {
    // Implementation
    if ((lib281DEC45_gv_zSS_CurrentConvoChar != "Primal Advisor")) {
        return ;
    }
    else {
    }
    libNtve_gf_SimpleLookAtStop(lib281DEC45_gf_CharacterUnit("Kerrigan"), "InstantHeadOnly");
    libNtve_gf_SimpleLookAtStart(lib281DEC45_gf_CharacterUnit("Kerrigan"), "InstantHeadOnly", ActorFrom(lib281DEC45_gv_zSS_LookAtHeadActorRef));
}

void lib281DEC45_gf_ApplyCutsceneCamera (int lp_cameraType, string lp_speaker) {
    int auto92D67A97_ai;
    int auto92D67A97_ae;

    // Variable Declarations
    actor lv_sceneActor;
    fixed lv_lineDuration;
    string lv_indexCharacter;

    // Variable Initialization

    // Implementation
    if ((lib281DEC45_gv_zSS_ConversationScene == c_cutsceneNone)) {
        lib281DEC45_gf_ZSS_OpenConversationScene();
    }
    else {
    }
    SoundLengthQuery(SoundLink(ConversationDataActiveSound(), c_soundIndexAny));
    if (((ConversationDataActiveSound() == null) || (SoundLengthSync(SoundLink(ConversationDataActiveSound(), c_soundIndexAny)) == 0.0))) {
        lv_lineDuration = 10.0;
    }
    else {
        lv_lineDuration = SoundLengthSync(SoundLink(ConversationDataActiveSound(), c_soundIndexAny));
    }
    CutscenePlayCutsceneRangeOverTime(lib281DEC45_gv_zSS_ConversationScene, lib281DEC45_gf_ZSS_SceneCameraBookmark(lp_speaker, lp_cameraType, "Start"), lib281DEC45_gf_ZSS_SceneCameraBookmark(lp_speaker, lp_cameraType, "End"), lv_lineDuration);
    auto92D67A97_ai = 1;
    auto92D67A97_ae = UserDataInstanceCount("Character")+1;
    while (auto92D67A97_ai < auto92D67A97_ae) {
        lv_indexCharacter = UserDataInstance("Character", auto92D67A97_ai);
        lv_sceneActor = ActorFrom(("::external." + lib281DEC45_gf_ZSS_CharacterSceneFinderTag(lv_indexCharacter)));
        ActorSend(lv_sceneActor, "SetTintColor 255,0,0");
        ActorSend(lv_sceneActor, "SetVisibility");
        libNtve_gf_SendActorMessageToUnit(lib281DEC45_gf_CharacterUnit(lv_indexCharacter), "HostSiteOpsSet ::Host");
        ActorSend(ActorFrom(("::external." + lib281DEC45_gf_ZSS_CharacterActorAlias(lv_indexCharacter))), (("SetBearingsFrom ::external." + lib281DEC45_gf_ZSS_CharacterSceneFinderTag(lv_indexCharacter))));
        auto92D67A97_ai = auto92D67A97_ai+1;
    }
    lib281DEC45_gf_ZSS_ApplyKerriganWingLookAt(lp_cameraType, lp_speaker);
    lib281DEC45_gf_ZSS_ApplyKerriganEyeLookAt(lp_cameraType);
    lib281DEC45_gf_ZSS_ApplyKerriganHairLookAt(lp_cameraType, lp_speaker);
    lib281DEC45_gf_ZSS_ApplyKerriganHeadLookAt(lp_cameraType);
}

void lib281DEC45_gf_ApplyCutsceneCameraFull (int lp_cameraType, string lp_speaker, string lp_convoChar) {
    // Variable Declarations
    string lv_backupToken;
    string lv_backupConvoChar;
    string lv_backupSpeaker;

    // Variable Initialization
    lv_backupToken = "";

    // Implementation
    lv_backupConvoChar = lib281DEC45_gv_zSS_CurrentConvoChar;
    lv_backupSpeaker = lib281DEC45_gv_zSS_CurrentSpeaker;
    lv_backupToken = lib281DEC45_gv_zSS_ActiveConvoBookmarkToken;
    lib281DEC45_gv_zSS_CurrentSpeaker = lp_speaker;
    lib281DEC45_gv_zSS_CurrentConvoChar = lp_convoChar;
    lib281DEC45_gv_zSS_ActiveConvoBookmarkToken = lib281DEC45_gf_CharacterSceneNameToken(lp_convoChar);
    lib281DEC45_gf_ApplyCutsceneCamera(lp_cameraType, lp_speaker);
    lib281DEC45_gv_zSS_ActiveConvoBookmarkToken = lv_backupToken;
    lib281DEC45_gv_zSS_CurrentSpeaker = lv_backupSpeaker;
    lib281DEC45_gv_zSS_CurrentConvoChar = lv_backupConvoChar;
}

void lib281DEC45_gf_SkipConversationCamera () {
    // Implementation
    lib281DEC45_gv_zSS_SkipConversationCamera = true;
}

void lib281DEC45_gf_SkipConversationLookAt () {
    // Implementation
    lib281DEC45_gv_zSS_SkipConversationLookAt = true;
}

string lib281DEC45_gf_ZSS_SceneCameraBookmark (string lp_speaker, int lp_camera, string lp_startEnd) {
    // Variable Declarations
    string lv_bookmarkString;

    // Variable Initialization
    lv_bookmarkString = "";

    // Implementation
    lv_bookmarkString = (lib281DEC45_gv_zSS_ActiveConvoBookmarkToken + " - " + lib281DEC45_gf_CharacterSceneNameToken(lp_speaker) + " " + lib281DEC45_gf_ZSS_CameraAsString(lp_camera) + " " + (lp_startEnd));
    return lv_bookmarkString;
}

string lib281DEC45_gf_ZSS_CameraAsString (int lp_cameraType) {
    int auto82A03920_val;

    // Implementation
    auto82A03920_val = lp_cameraType;
    if (auto82A03920_val == lib281DEC45_ge_CameraType_CloseUp) {
        return "Closeup";
    }
    else if (auto82A03920_val == lib281DEC45_ge_CameraType_CloseUpListener) {
        return "Closeup Listener";
    }
    else if (auto82A03920_val == lib281DEC45_ge_CameraType_ExtremeCloseup) {
        return "Extreme Closeup";
    }
    else if (auto82A03920_val == lib281DEC45_ge_CameraType_ExtremeCloseupListener) {
        return "Extreme Closeup Listener";
    }
    else if (auto82A03920_val == lib281DEC45_ge_CameraType_Far) {
        return "Far";
    }
    else if (auto82A03920_val == lib281DEC45_ge_CameraType_FarListener) {
        return "Far Listener";
    }
    else if (auto82A03920_val == lib281DEC45_ge_CameraType_Medium) {
        return "Medium";
    }
    else if (auto82A03920_val == lib281DEC45_ge_CameraType_MediumListener) {
        return "Medium Listener";
    }
    else if (auto82A03920_val == lib281DEC45_ge_CameraType_OverShoulder) {
        return "Double";
    }
    else if (auto82A03920_val == lib281DEC45_ge_CameraType_OverShoulderReverse) {
        return "Double";
    }
    else if (auto82A03920_val == lib281DEC45_ge_CameraType_TwoShot) {
        return "Two Shot";
    }
    else if (auto82A03920_val == lib281DEC45_ge_CameraType_Custom01) {
        return "Custom 01";
    }
    else if (auto82A03920_val == lib281DEC45_ge_CameraType_Custom02) {
        return "Custom 02";
    }
    else if (auto82A03920_val == lib281DEC45_ge_CameraType_Custom03) {
        return "Custom 03";
    }
    else if (auto82A03920_val == lib281DEC45_ge_CameraType_Custom04) {
        return "Custom 04";
    }
    else {
    }
    return "Unknown";
}

int lib281DEC45_gf_CurrentConversationCamera () {
    // Implementation
    return lib281DEC45_gv_zSS_CurrentCamera;
}

string lib281DEC45_gf_CurrentCameraCharacter () {
    // Implementation
    return lib281DEC45_gv_zSS_CurrentSpeaker;
}

int lib281DEC45_gf_OppositeCameraShot (int lp_camera) {
    int autoDD455EA9_val;

    // Implementation
    autoDD455EA9_val = lp_camera;
    if (autoDD455EA9_val == lib281DEC45_ge_CameraType_CloseUp) {
        return lib281DEC45_ge_CameraType_CloseUpListener;
    }
    else if (autoDD455EA9_val == lib281DEC45_ge_CameraType_ExtremeCloseup) {
        return lib281DEC45_ge_CameraType_ExtremeCloseupListener;
    }
    else if (autoDD455EA9_val == lib281DEC45_ge_CameraType_Medium) {
        return lib281DEC45_ge_CameraType_MediumListener;
    }
    else if (autoDD455EA9_val == lib281DEC45_ge_CameraType_OverShoulder) {
        return lib281DEC45_ge_CameraType_OverShoulderReverse;
    }
    else if (autoDD455EA9_val == lib281DEC45_ge_CameraType_Far) {
        return lib281DEC45_ge_CameraType_FarListener;
    }
    else if (autoDD455EA9_val == lib281DEC45_ge_CameraType_TwoShot) {
        return lib281DEC45_ge_CameraType_TwoShot;
    }
    else if (autoDD455EA9_val == lib281DEC45_ge_CameraType_CloseUpListener) {
        return lib281DEC45_ge_CameraType_CloseUp;
    }
    else if (autoDD455EA9_val == lib281DEC45_ge_CameraType_ExtremeCloseupListener) {
        return lib281DEC45_ge_CameraType_ExtremeCloseup;
    }
    else if (autoDD455EA9_val == lib281DEC45_ge_CameraType_MediumListener) {
        return lib281DEC45_ge_CameraType_Medium;
    }
    else if (autoDD455EA9_val == lib281DEC45_ge_CameraType_OverShoulderReverse) {
        return lib281DEC45_ge_CameraType_OverShoulder;
    }
    else if (autoDD455EA9_val == lib281DEC45_ge_CameraType_FarListener) {
        return lib281DEC45_ge_CameraType_Far;
    }
    else if (autoDD455EA9_val == lib281DEC45_ge_CameraType_Custom01Listener) {
        return lib281DEC45_ge_CameraType_Custom01;
    }
    else if (autoDD455EA9_val == lib281DEC45_ge_CameraType_Custom02Listener) {
        return lib281DEC45_ge_CameraType_Custom02;
    }
    else if (autoDD455EA9_val == lib281DEC45_ge_CameraType_Custom03Listener) {
        return lib281DEC45_ge_CameraType_Custom03;
    }
    else if (autoDD455EA9_val == lib281DEC45_ge_CameraType_Custom04Listener) {
        return lib281DEC45_ge_CameraType_Custom04;
    }
    else {
    }
    return lib281DEC45_ge_CameraType_LastCameraType;
}

void lib281DEC45_gf_ZSS_ParseCameraInfoString2 () {
    int autoBD73C094_ae;
    int autoBD73C094_ai;

    // Variable Declarations
    camerainfo lv_camera;
    string lv_evoMasterCharacter;
    string lv_indexCategory;

    // Variable Initialization

    // Implementation
    if ((lib281DEC45_gf_CurrentRoom() != lib281DEC45_ge_Rooms_StoryRoomEggRoom)) {
        return ;
    }
    else {
    }
    lib281DEC45_gf_ShowHideUnitAbs(true, lib281DEC45_gf_CharacterUnit("Evolution Master"));
    lib281DEC45_gf_ShowHideUnitAbs(true, lib281DEC45_gf_CharacterUnit("Kerrigan"));
    autoBD73C094_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoBD73C094_ai = 1;
    while (autoBD73C094_ai <= autoBD73C094_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoBD73C094_ai);
        if ((libSwaC_gf_ArmyCategoryEggUnitInEggRoom(lv_indexCategory) != null)) {
            libSwaC_gf_ArmyCategoryEggUnitShowHide(lv_indexCategory, false);
        }
        else {
        }
        autoBD73C094_ai = autoBD73C094_ai + 1;
    }
    lib281DEC45_gf_SetCharacterCameraCallback("Evolution Master", lib281DEC45_gt_ZSS_EggRoomLineHandle);
    lib281DEC45_gf_TurnAnimationPropertiesOnOff(lib281DEC45_gf_CharacterUnit("Kerrigan"), "Turn Cover", false, 0.0);
    if ((libSwaC_gf_MissionStatusCheck("ZZerus3", libSwaC_ge_MissionStatus_Available) == true)) {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "zSM_EvolutionMaster_Zerus03", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }
    else {
    }
}

void lib281DEC45_gf_ZSS_EggRoomConvoCleanup () {
    // Variable Declarations
    string lv_indexCategory;

    // Variable Initialization

    // Implementation
    if ((lib281DEC45_gf_CurrentRoom() != lib281DEC45_ge_Rooms_StoryRoomEggRoom)) {
        return ;
    }
    else {
    }
    lib281DEC45_gf_ShowHideUnitAbs(false, lib281DEC45_gf_CharacterUnit("Evolution Master"));
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(lib281DEC45_gf_CharacterUnit("Kerrigan")), lib281DEC45_gv_zSS_CONVANIMID);
    libNtve_gf_SimpleLookAtStop(lib281DEC45_gf_CharacterUnit("Kerrigan"), "InstantEyesOnly");
    SoundStop(lib281DEC45_gv_zSS_EggRoomConvoSound, true);
}

unit lib281DEC45_gf_CharacterUnit (string lp_character) {
    // Implementation
    return lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lp_character)].lv_unit;
}

bool lib281DEC45_gf_CharacterHasNewInfo (string lp_character) {
    // Implementation
    return (UserDataGetInt("Character", lp_character, "New", 1) == 1);
}

bool lib281DEC45_gf_CharacterKnown (string lp_character) {
    // Implementation
    return (UserDataGetInt("Character", lp_character, "Unlocked", 1) == 1);
}

bool lib281DEC45_gf_CharacterIsEnabled (string lp_character) {
    // Implementation
    return (UserDataGetInt("Character", lp_character, "Enabled", 1) == 1);
}

string lib281DEC45_gf_CharacterSceneNameToken (string lp_character) {
    // Implementation
    return UserDataGetString("Character", lp_character, "SceneToken", 1);
}

bool lib281DEC45_gf_KerriganUsesAltPosition () {
    // Implementation
    return lib281DEC45_gv_zSS_UseAltKerriganPosition;
}

int lib281DEC45_gf_ZSS_CharacterIndex (string lp_character) {
    // Implementation
    return UserDataGetInt("Character", lp_character, "Index", 1);
}

text lib281DEC45_gf_ZSS_CharacterName (string lp_character) {
    // Implementation
    if ((UserDataGetGameLink("Character", lp_character, "Game Link", 1) == null)) {
        return UserDataGetText("Character", lp_character, "Name", 1);
    }
    else {
    }
    return StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, (UserDataGetGameLink("Character", lp_character, "Game Link", 1)), "Name", c_playerAny));
}

text lib281DEC45_gf_ZSS_CharacterSubtitle (string lp_character) {
    // Implementation
    return UserDataGetText("Character", lp_character, "Callout Subtitle", 1);
}

text lib281DEC45_gf_ZSS_CharacterPrompt (string lp_character, int lp_index) {
    // Implementation
    return UserDataGetText("Character", lp_character, "Callout Prompts", lp_index);
}

bool lib281DEC45_gf_ZSS_CharacterIsAmbient (string lp_character) {
    // Implementation
    return (UserDataGetInt("Character", lp_character, "Ambient", 1) == 1);
}

bool lib281DEC45_gf_ZSS_CharacterIsBackground (string lp_character) {
    // Implementation
    return (UserDataGetInt("Character", lp_character, "Background", 1) == 1);
}

string lib281DEC45_gf_ZSS_CharacterActorAlias (string lp_character) {
    // Implementation
    return UserDataGetString("Character", lp_character, "Alias", 1);
}

string lib281DEC45_gf_ZSS_CharacterSceneFinderTag (string lp_character) {
    // Implementation
    return UserDataGetString("Character", lp_character, "SceneFinderTag", 1);
}

string lib281DEC45_gf_ZSS_CharacterConversation (string lp_character) {
    // Implementation
    return lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lp_character)].lv_conversation;
}

string lib281DEC45_gf_ZSS_CharacterAmbientConversation (string lp_character) {
    // Implementation
    return lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lp_character)].lv_ambientConversation;
}

trigger lib281DEC45_gf_ZSS_CharacterCustomCallback (string lp_character) {
    // Implementation
    return lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lp_character)].lv_customCallback;
}

trigger lib281DEC45_gf_ZSS_CharacterPreCallback (string lp_character) {
    // Implementation
    return lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lp_character)].lv_preCallback;
}

trigger lib281DEC45_gf_ZSS_CharacterPostCallback (string lp_character) {
    // Implementation
    return lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lp_character)].lv_postCallback;
}

trigger lib281DEC45_gf_ZSS_CharacterCameraCallback (string lp_character) {
    // Implementation
    return lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lp_character)].lv_cameraCallback;
}

string lib281DEC45_gf_ZSS_CharacterCalloutData (string lp_character) {
    string auto4B19AC90_val;

    // Implementation
    auto4B19AC90_val = lp_character;
    if (auto4B19AC90_val == "Kerrigan") {
        if ((libSwaC_gf_KerriganPhaseCheck(libSwaC_ge_KerriganPhase_KerriganPhaseGhost) == false)) {
            return "Leviathan - Kerrigan Primal";
        }
        else if ((lib281DEC45_gv_zSS_UseAltKerriganPosition == true)) {
            return "Leviathan - Kerrigan Left";
        }
        else if (true) {
            return "Leviathan - Kerrigan";
        }
    }
    else if (auto4B19AC90_val == "Zerg Adjutant") {
        return "Leviathan - Zerg Adjutant";
    }
    else if (auto4B19AC90_val == "Primal Advisor") {
        return "Leviathan - Dehaka";
    }
    else if (auto4B19AC90_val == "Zagara") {
        return "Leviathan - Za'gara";
    }
    else if (auto4B19AC90_val == "Stukov") {
        return "Leviathan - Stukov";
    }
    else if (auto4B19AC90_val == "Primal Ancient") {
        return "Leviathan - Zurvan";
    }
    else if (auto4B19AC90_val == "Protoss Prisoner") {
        return "Leviathan - Protoss Prisoner";
    }
    else if (auto4B19AC90_val == "Zeratul") {
        return "Leviathan - Zeratul";
    }
    else if (auto4B19AC90_val == "Hotspot - Char - Warfield's Compound") {
        return "Leviathan - Char Hotspot";
    }
    else if (auto4B19AC90_val == "Hotspot - Expedition - Hatchery") {
        if (((libSwaC_gf_MissionStatusCheck("ZExpedition1", libSwaC_ge_MissionStatus_Completed) == true) || (lib281DEC45_gf_CharacterIsEnabled("Zagara") == true) || (lib281DEC45_gf_CharacterIsEnabled("Primal Advisor") == true))) {
            return "Leviathan - Expedition Hotspot Far";
        }
        else {
            return "Leviathan - Expedition Hotspot";
        }
    }
    else if (auto4B19AC90_val == "Hotspot - Hybrid - Station") {
        return "Leviathan - Hybrid Hotspot";
    }
    else if (auto4B19AC90_val == "Hotspot - Korhal - Palace") {
        return "Leviathan - Korhal Palace Hotspot";
    }
    else if (auto4B19AC90_val == "Hotspot - Korhal - Planet") {
        return "Leviathan - Korhal Hotspot";
    }
    else if (auto4B19AC90_val == "Hotspot - Space - Hyperion") {
        return "Leviathan - Space Hotspot";
    }
    else if (auto4B19AC90_val == "Hotspot - Zerus - Void Seeker") {
        return "Leviathan - Void Seeker Hotspot";
    }
    else {
    }
    return "Leviathan - Kerrigan";
}

void lib281DEC45_gf_SetCharacterUnit (string lp_character, unit lp_charUnit) {
    // Implementation
    if ((lib281DEC45_gf_CharacterUnit(lp_character) != null)) {
        return ;
    }
    else {
    }
    lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lp_character)].lv_unit = lp_charUnit;
    if ((UnitGroupHasUnit(lib281DEC45_gv_zSS_PlanetSetUnits, lp_charUnit) == false)) {
        lib281DEC45_gf_ZSS_SetUnitAddRemove(true, lp_charUnit);
    }
    else {
    }
    lib281DEC45_gf_ZSS_CharacterDataUpdate();
    ConversationDataRegisterUnit(lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lp_character)].lv_conversationLink, lp_charUnit);
    if ((lib281DEC45_gf_ZSS_CharacterActorAlias(lp_character) != null)) {
        lib281DEC45_gf_StoryAddAliasedUnit(lp_charUnit, lib281DEC45_gf_ZSS_CharacterActorAlias(lp_character));
    }
    else {
    }
}

void lib281DEC45_gf_SetCharacterCustomCallback (string lp_characterID, trigger lp_callback) {
    // Implementation
    lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lp_characterID)].lv_customCallback = lp_callback;
}

void lib281DEC45_gf_SetCharacterPreCallback (string lp_characterID, trigger lp_callback) {
    // Implementation
    lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lp_characterID)].lv_preCallback = lp_callback;
}

void lib281DEC45_gf_SetCharacterPostCallback (string lp_characterID, trigger lp_callback) {
    // Implementation
    lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lp_characterID)].lv_postCallback = lp_callback;
}

void lib281DEC45_gf_SetCharacterCameraCallback (string lp_character, trigger lp_callback) {
    // Implementation
    lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lp_character)].lv_cameraCallback = lp_callback;
}

void lib281DEC45_gf_SetCharacterNew (string lp_character, bool lp_isNew) {
    // Implementation
    UserDataSetInt("Character", lp_character, "New", 1, BoolToInt(lp_isNew));
    lib281DEC45_gf_ZSS_CharacterDisplayUpdate(lp_character);
}

void lib281DEC45_gf_EnableDisableCharacter (string lp_character, bool lp_enabledDisabled) {
    // Implementation
    UserDataSetInt("Character", lp_character, "Enabled", 1, BoolToInt((lp_enabledDisabled == true)));
}

void lib281DEC45_gf_PlaySetLighting (string lp_character, string lp_token) {
    string auto141BEE92_val;

    // Variable Declarations
    string lv_setString;

    // Variable Initialization
    lv_setString = "";

    // Implementation
    if ((lib281DEC45_gf_ZSS_SetLightingCutsceneFile() == null)) {
        return ;
    }
    else {
    }
    auto141BEE92_val = libSwaC_gf_StoryMapPlanet(libSwaC_gf_CurrentMap());
    if (auto141BEE92_val == "Char") {
        lv_setString = "Char";
    }
    else if (auto141BEE92_val == "Expedition") {
        lv_setString = "Ice";
    }
    else if (auto141BEE92_val == "Zerus") {
        lv_setString = "Zerus";
    }
    else if (auto141BEE92_val == "Hybrid") {
        lv_setString = "Hybrid";
    }
    else if (auto141BEE92_val == "ZSpace1") {
        lv_setString = "DominionSpace";
    }
    else if (auto141BEE92_val == "Korhal") {
        if ((libSwaC_gf_MissionStatusCheck("ZKorhal1", libSwaC_ge_MissionStatus_Completed) == true)) {
            lv_setString = "Korhal";
        }
        else {
            lv_setString = "KorhalSpace";
        }
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_281DEC45_4277695B"), false);
    }
    if ((lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lp_character)].lv_lightingCutscene == c_cutsceneNone)) {
        CutsceneCreateNew(lib281DEC45_gf_ZSS_SetLightingCutsceneFile(), lib281DEC45_gv_zSS_ConversationCutscenePosition, 0.0, PlayerGroupAll(), false);
        lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lp_character)].lv_lightingCutscene = CutsceneLastCreated();
        CutsceneGoToBookmark(lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lp_character)].lv_lightingCutscene, (lv_setString + " - " + lp_token + " Start"));
        CutscenePause(lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lp_character)].lv_lightingCutscene);
    }
    else {
    }
    CutsceneShow(lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lp_character)].lv_lightingCutscene, true);
}

void lib281DEC45_gf_UseAltKerriganPosition (bool lp_alt) {
    // Implementation
    lib281DEC45_gv_zSS_UseAltKerriganPosition = lp_alt;
}

void lib281DEC45_gf_CreateStoryCharacter (string lp_character, string lp_unitType, point lp_location) {
    // Variable Declarations
    string lv_unitType;

    // Variable Initialization

    // Implementation
    UnitCreate(1, lp_unitType, c_unitCreateIgnorePlacement, 1, lp_location, 270.0);
    if ((lib281DEC45_gv_zSS_UnitsLoaded == false)) {
        UnitUnloadModel(UnitLastCreated());
    }
    else {
    }
    lib281DEC45_gf_SetCharacterUnit(lp_character, UnitLastCreated());
}

void lib281DEC45_gf_ZSS_CharacterAllStopSetLighting () {
    int autoD10BA178_ai;
    int autoD10BA178_ae;

    // Variable Declarations
    string lv_indexCharacter;

    // Variable Initialization

    // Implementation
    autoD10BA178_ai = 1;
    autoD10BA178_ae = UserDataInstanceCount("Character")+1;
    while (autoD10BA178_ai < autoD10BA178_ae) {
        lv_indexCharacter = UserDataInstance("Character", autoD10BA178_ai);
        lib281DEC45_gf_ZSS_CharacterStopSetLighting(lv_indexCharacter);
        autoD10BA178_ai = autoD10BA178_ai+1;
    }
}

void lib281DEC45_gf_ZSS_CharacterActionRun (string lp_character) {
    // Variable Declarations
    int lv_initialRoom;

    // Variable Initialization

    // Implementation
    lv_initialRoom = lib281DEC45_gf_CurrentRoom();
    if ((lib281DEC45_gf_ZSS_CharacterCustomCallback(lp_character) != null)) {
        TriggerExecute(lib281DEC45_gf_ZSS_CharacterCustomCallback(lp_character), true, true);
    }
    else if (true) {
        lib281DEC45_gf_ZSS_PlayCharacterConversation(lp_character);
        lib281DEC45_gf_ZSS_ConversationAchievementCheck(lp_character);
    }
    if (((lib281DEC45_gf_CurrentStoryActivity() != lib281DEC45_ge_StoryActivities_ViewingRoom) || (lib281DEC45_gf_CurrentRoom() != lv_initialRoom))) {
        lib281DEC45_gf_EnterRoom(lib281DEC45_gf_CurrentRoom());
        lib281DEC45_gf_ZSS_CharacterDataUpdate();
    }
    else {
    }
}

void lib281DEC45_gf_ZSS_CharacterStopSetLighting (string lp_character) {
    // Implementation
    if ((lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lp_character)].lv_lightingCutscene == c_cutsceneNone)) {
        return ;
    }
    else {
    }
    CutsceneShow(lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lp_character)].lv_lightingCutscene, false);
}

void lib281DEC45_gf_ZSS_CharacterPortraitPitchPlay (string lp_pitch, int lp_portrait) {
    int auto37799D8C_ai;
    int auto37799D8C_ae;
    int auto1018928D_ai;
    int auto1018928D_ae;

    // Variable Declarations
    string lv_indexCharacter;

    // Variable Initialization

    // Implementation
    auto37799D8C_ai = 1;
    auto37799D8C_ae = UserDataInstanceCount("Character")+1;
    while (auto37799D8C_ai < auto37799D8C_ae) {
        lv_indexCharacter = UserDataInstance("Character", auto37799D8C_ai);
        ConversationDataRegisterPortrait(lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lv_indexCharacter)].lv_conversationLink, lp_portrait);
        ConversationDataRegisterUnit(lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lv_indexCharacter)].lv_conversationLink, null);
        auto37799D8C_ai = auto37799D8C_ai+1;
    }
    ConversationDataRegisterPortrait("char_Stukov02", lp_portrait);
    ConversationDataRegisterPortrait("char_DropShipAdjutant", lp_portrait);
    ConversationDataRun(lp_pitch, PlayerGroupAll(), c_conversationSkipNone, true);
    auto1018928D_ai = 1;
    auto1018928D_ae = UserDataInstanceCount("Character")+1;
    while (auto1018928D_ai < auto1018928D_ae) {
        lv_indexCharacter = UserDataInstance("Character", auto1018928D_ai);
        ConversationDataRegisterPortrait(lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lv_indexCharacter)].lv_conversationLink, c_invalidPortraitId);
        ConversationDataRegisterUnit(lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lv_indexCharacter)].lv_conversationLink, lib281DEC45_gf_CharacterUnit(lv_indexCharacter));
        auto1018928D_ai = auto1018928D_ai+1;
    }
}

void lib281DEC45_gf_ZSS_CharacterSetAmbient (string lp_character, bool lp_ambient) {
    // Implementation
    UserDataSetInt("Character", lp_character, "Ambient", 1, BoolToInt(lp_ambient));
}

void lib281DEC45_gf_ZSS_CharacterCursorUpdate (string lp_character) {
    // Implementation
    if ((lib281DEC45_gf_CharacterUnit(lp_character) == null)) {
        return ;
    }
    else {
    }
    if ((lib281DEC45_gf_CharacterIsEnabled(lp_character) == false)) {
        UnitSetCursor(lib281DEC45_gf_CharacterUnit(lp_character), "Arrow_Zerg");
    }
    else if ((lib281DEC45_gf_ZSS_CharacterIsBackground(lp_character) == true)) {
        UnitSetCursor(lib281DEC45_gf_CharacterUnit(lp_character), "InteractiveLook");
    }
    else if ((lib281DEC45_gf_ZSS_CharacterIsAmbient(lp_character) == true)) {
        UnitSetCursor(lib281DEC45_gf_CharacterUnit(lp_character), "InteractiveLook");
    }
    else if (true) {
        UnitSetCursor(lib281DEC45_gf_CharacterUnit(lp_character), "InteractiveTalk");
    }
}

void lib281DEC45_gf_ZSS_CharacterLinkSet (string lp_character, string lp_link) {
    // Implementation
    lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lp_character)].lv_conversationLink = lp_link;
}

void lib281DEC45_gf_ZSS_CharacterDisplayUpdate (string lp_character) {
    // Implementation
    if ((lib281DEC45_gf_CharacterUnit(lp_character) == null)) {
        return ;
    }
    else {
    }
    if ((lp_character == "Evolution Master")) {
        return ;
    }
    else {
    }
    if (((lib281DEC45_gv_zSS_InteractionOn == false) || (lib281DEC45_gf_CharacterIsEnabled(lp_character) == false))) {
        UnitSetState(lib281DEC45_gf_CharacterUnit(lp_character), c_unitStateHighlightable, false);
    }
    else {
        UnitSetState(lib281DEC45_gf_CharacterUnit(lp_character), c_unitStateHighlightable, true);
    }
    lib281DEC45_gf_ZSS_CharacterCalloutUpdate(lp_character);
    if ((lib281DEC45_gf_CharacterHasNewInfo(lp_character) == true) && (lib281DEC45_gf_CharacterIsEnabled(lp_character) == true) && (lib281DEC45_gf_CurrentRoom() == lib281DEC45_ge_Rooms_StoryRoomMainSet) && (lib281DEC45_gv_zSS_InteractionOn == true)) {
        lib281DEC45_gf_ZSS_CharacterCalloutShowHide(true, lp_character);
    }
    else {
        lib281DEC45_gf_ZSS_CharacterCalloutShowHide(false, lp_character);
    }
    lib281DEC45_gf_ZSS_CharacterCursorUpdate(lp_character);
}

void lib281DEC45_gf_ZSS_CharacterDisplayUpdateAll () {
    int auto1435E889_ai;
    int auto1435E889_ae;

    // Variable Declarations
    string lv_indexCharacter;

    // Variable Initialization

    // Implementation
    auto1435E889_ai = 1;
    auto1435E889_ae = UserDataInstanceCount("Character")+1;
    while (auto1435E889_ai < auto1435E889_ae) {
        lv_indexCharacter = UserDataInstance("Character", auto1435E889_ai);
        lib281DEC45_gf_ZSS_CharacterDisplayUpdate(lv_indexCharacter);
        auto1435E889_ai = auto1435E889_ai+1;
    }
}

void lib281DEC45_gf_ZSS_CharacterCalloutShowHide (bool lp_showHide, string lp_character) {
    // Variable Declarations
    int lv_callout;

    // Variable Initialization
    lv_callout = lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lp_character)].lv_callout;

    // Implementation
    if ((lv_callout == c_invalidDialogControlId)) {
        return ;
    }
    else {
    }
    DialogControlSetVisible(lv_callout, PlayerGroupAll(), lp_showHide);
}

void lib281DEC45_gf_ZSS_CharacterSetKnown (string lp_character, bool lp_known) {
    // Implementation
    UserDataSetInt("Character", lp_character, "Unlocked", 1, BoolToInt(lp_known));
}

void lib281DEC45_gf_ZSS_CharacterConversationSet (string lp_character, string lp_conversation) {
    // Implementation
    lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lp_character)].lv_conversation = lp_conversation;
}

void lib281DEC45_gf_ZSS_CharacterAmbientConversationSet (string lp_character, string lp_conversation) {
    // Implementation
    lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lp_character)].lv_ambientConversation = lp_conversation;
}

void lib281DEC45_gf_ZSS_CharacterLoadModel (int lp_untitledParameter001) {
}

void lib281DEC45_gf_ZSS_CharacterCalloutUpdate (string lp_character) {
    unitgroup auto9B2BC715_g;
    int auto9B2BC715_u;
    int autoD3F9E7EF_val;

    // Variable Declarations
    unit lv_indexUnit;

    // Variable Initialization

    // Implementation
    if ((lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lp_character)].lv_callout == c_invalidDialogControlId)) {
        auto9B2BC715_g = lib281DEC45_gv_zSS_AttachmentUnits;
        auto9B2BC715_u = 1;
        for ( ; auto9B2BC715_u <= UnitGroupCount(auto9B2BC715_g, c_unitCountAll) ; auto9B2BC715_u += BoolToInt(lv_indexUnit == UnitGroupUnit(auto9B2BC715_g, auto9B2BC715_u)) ) {
            lv_indexUnit = UnitGroupUnit(auto9B2BC715_g, auto9B2BC715_u);
            if ((UnitGetType(lv_indexUnit) == UserDataGetUnit("CalloutAttachment", lib281DEC45_gf_ZSS_CharacterCalloutData(lp_character), "Attach Unit", 1))) {
                DialogCreate(400, 400, c_anchorCenter, 0, 0, true);
                DialogSetImageVisible(DialogLastCreated(), false);
                autoD3F9E7EF_val = UserDataGetImageEdge("CalloutAttachment", lib281DEC45_gf_ZSS_CharacterCalloutData(lp_character), "Attachment", 1);
                if (autoD3F9E7EF_val == c_textTagEdgeLeft) {
                    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "HotS_Callouts/UnitCalloutStoryFrameLeftTemplate");
                    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, 0, 0);
                    DialogSetPositionRelativeToUnit(DialogLastCreated(), lv_indexUnit, UserDataGetImageAttachPoint("CalloutAttachment", lib281DEC45_gf_ZSS_CharacterCalloutData(lp_character), "Attachment", 1), 0, (0 - (DialogGetHeight(DialogLastCreated()) / 2)));
                }
                else if (autoD3F9E7EF_val == c_textTagEdgeRight) {
                    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "HotS_Callouts/UnitCalloutStoryFrameRightTemplate");
                    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorRight, 0, 0);
                    DialogSetPositionRelativeToUnit(DialogLastCreated(), lv_indexUnit, UserDataGetImageAttachPoint("CalloutAttachment", lib281DEC45_gf_ZSS_CharacterCalloutData(lp_character), "Attachment", 1), (0 - DialogGetWidth(DialogLastCreated())), (0 - (DialogGetHeight(DialogLastCreated()) / 2)));
                }
                else {
                }
                lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lp_character)].lv_callout = DialogControlLastCreated();
                DialogControlHookup(lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lp_character)].lv_callout, c_triggerControlTypeLabel, "NameLabel");
                libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lib281DEC45_gf_ZSS_CharacterName(lp_character), PlayerGroupAll());
                DialogControlDestroy(DialogControlLastCreated());
                DialogControlHookup(lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lp_character)].lv_callout, c_triggerControlTypeLabel, "SubNameLabel");
                lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lp_character)].lv_calloutSubtitle = DialogControlLastCreated();
                libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_281DEC45_95AB7156"), PlayerGroupAll());
                DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
                break;
            }
            else {
            }
        }
    }
    else {
    }
    if ((lib281DEC45_gf_CharacterHasNewInfo(lp_character) == false)) {
        DialogControlSetVisible(lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lp_character)].lv_calloutSubtitle, PlayerGroupAll(), false);
    }
    else {
        DialogControlSetVisible(lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lp_character)].lv_calloutSubtitle, PlayerGroupAll(), true);
    }
}

void lib281DEC45_gf_ZSS_CharacterDataInit () {
    int autoD4B6F118_ai;
    int autoD4B6F118_ae;

    // Variable Declarations
    int lv_count;
    string lv_character;

    // Variable Initialization
    lv_count = 1;

    // Implementation
    autoD4B6F118_ai = 1;
    autoD4B6F118_ae = UserDataInstanceCount("Character")+1;
    while (autoD4B6F118_ai < autoD4B6F118_ae) {
        lv_character = UserDataInstance("Character", autoD4B6F118_ai);
        UserDataSetInt("Character", lv_character, "Index", 1, lv_count);
        lv_count += 1;
        lib281DEC45_gf_SetCharacterNew(lv_character, true);
        autoD4B6F118_ai = autoD4B6F118_ai+1;
    }
    lib281DEC45_gf_ZSS_CharacterLinkSet("Kerrigan", "char_Kerrigan");
    lib281DEC45_gf_ZSS_CharacterLinkSet("Zerg Adjutant", "char_ZergAdjutant");
    lib281DEC45_gf_ZSS_CharacterLinkSet("Evolution Master", "char_EvolutionMaster");
    lib281DEC45_gf_ZSS_CharacterLinkSet("Zagara", "char_RogueQueen");
    lib281DEC45_gf_ZSS_CharacterLinkSet("Raynor", "char_Raynor");
    lib281DEC45_gf_ZSS_CharacterLinkSet("Protoss Prisoner", "char_ProtossPrisoner");
    lib281DEC45_gf_ZSS_CharacterLinkSet("Zeratul", "char_Zeratul");
    lib281DEC45_gf_ZSS_CharacterLinkSet("Primal Advisor", "char_PrimalZergAdvisor");
    lib281DEC45_gf_ZSS_CharacterLinkSet("Stukov", "char_Stukov");
    lib281DEC45_gf_ZSS_CharacterLinkSet("Horner", "char_Horner");
    lib281DEC45_gf_ZSS_CharacterLinkSet("Valerian", "char_Valerian");
    lib281DEC45_gf_ZSS_CharacterLinkSet("Primal Ancient", "char_AncientOneNamed");
    lib281DEC45_gf_ZSS_CharacterLinkSet("Arcturus Mengsk", "char_Mengsk");
    lib281DEC45_gf_ZSS_CharacterConversationSet("Evolution Master", "zSM_EvolutionMaster");
    lib281DEC45_gf_ZSS_CharacterConversationSet("Zerg Adjutant", "zSM_ZergAdjutant");
    lib281DEC45_gf_ZSS_CharacterConversationSet("Zagara", "zSM_RogueQueen");
    lib281DEC45_gf_ZSS_CharacterConversationSet("Protoss Prisoner", "zSM_ProtossPrisoner");
    lib281DEC45_gf_ZSS_CharacterConversationSet("Zeratul", "zSM_Zeratul");
    lib281DEC45_gf_ZSS_CharacterConversationSet("Primal Advisor", "zSM_PrimalZergAdvisor");
    lib281DEC45_gf_ZSS_CharacterConversationSet("Stukov", "zSM_Stukov");
    lib281DEC45_gf_ZSS_CharacterConversationSet("Primal Ancient", "zSM_ZerusAncientOne");
    lib281DEC45_gf_ZSS_CharacterConversationSet("Hotspot - Char - Warfield's Compound", "zSM_CharFortress");
    lib281DEC45_gf_ZSS_CharacterConversationSet("Hotspot - Expedition - Hatchery", "zSM_ExpeditionHatchery");
    lib281DEC45_gf_ZSS_CharacterConversationSet("Hotspot - Hybrid - Station", "zSM_HybridLab");
    lib281DEC45_gf_ZSS_CharacterConversationSet("Hotspot - Korhal - Palace", "zSM_KorhalPalace");
    lib281DEC45_gf_ZSS_CharacterConversationSet("Hotspot - Korhal - Planet", "zSM_KorhalWorld");
    lib281DEC45_gf_ZSS_CharacterConversationSet("Hotspot - Space - Hyperion", "zSM_Valerian");
    lib281DEC45_gf_ZSS_CharacterConversationSet("Hotspot - Zerus - Void Seeker", "zSM_Zeratul");
    lib281DEC45_gf_ZSS_CharacterAmbientConversationSet("Kerrigan", "zSMAmbient_Kerrigan");
    lib281DEC45_gf_ZSS_CharacterAmbientConversationSet("Zerg Adjutant", "zSMAmbient_ZergAdjutant");
    lib281DEC45_gf_ZSS_CharacterAmbientConversationSet("Zeratul", "zSMAmbient_Zeratul");
    lib281DEC45_gf_ZSS_CharacterAmbientConversationSet("Stukov", "zSMAmbient_Stukov");
    lib281DEC45_gf_ZSS_CharacterAmbientConversationSet("Zagara", "zSMAmbient_RogueQueen");
    lib281DEC45_gf_ZSS_CharacterAmbientConversationSet("Primal Advisor", "zSMAmbient_PrimalZergAdvisor");
    lib281DEC45_gf_ZSS_CharacterAmbientConversationSet("Evolution Master", "zSMAmbient_EvolutionMaster");
    ConversationDataRegisterCamera("Cameras|Medium", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Kerrigan")].lv_conversationLink, null, lib281DEC45_gt_UseKerriganCameraMedium, true);
    ConversationDataRegisterCamera("Cameras|MediumListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Kerrigan")].lv_conversationLink, null, lib281DEC45_gt_UseKerriganCameraMediumListener, true);
    ConversationDataRegisterCamera("Cameras|Far", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Kerrigan")].lv_conversationLink, null, lib281DEC45_gt_UseKerriganCameraFar, true);
    ConversationDataRegisterCamera("Cameras|FarListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Kerrigan")].lv_conversationLink, null, lib281DEC45_gt_UseKerriganCameraFarListener, true);
    ConversationDataRegisterCamera("Cameras|CloseUp", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Kerrigan")].lv_conversationLink, null, lib281DEC45_gt_UseKerriganCameraCloseUp, true);
    ConversationDataRegisterCamera("Cameras|CloseUpListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Kerrigan")].lv_conversationLink, null, lib281DEC45_gt_UseKerriganCameraCloseUpListener, true);
    ConversationDataRegisterCamera("Cameras|Shoulder", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Kerrigan")].lv_conversationLink, null, lib281DEC45_gt_UseKerriganCameraShoulder, true);
    ConversationDataRegisterCamera("Cameras|ReverseShoulder", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Kerrigan")].lv_conversationLink, null, lib281DEC45_gt_UseKerriganCameraShoulderReverse, true);
    ConversationDataRegisterCamera("Cameras|ExtremeCloseup", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Kerrigan")].lv_conversationLink, null, lib281DEC45_gt_UseKerriganCameraExtremeCloseup, true);
    ConversationDataRegisterCamera("Cameras|ExtremeCloseupListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Kerrigan")].lv_conversationLink, null, lib281DEC45_gt_UseKerriganCameraCloseUpListener, true);
    ConversationDataRegisterCamera("Cameras|TwoShot", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Kerrigan")].lv_conversationLink, null, lib281DEC45_gt_UseKerriganCameraTwoShot, true);
    ConversationDataRegisterCamera("Cameras|CustomCamera01", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Kerrigan")].lv_conversationLink, null, lib281DEC45_gt_UseKerriganCameraCustom01, true);
    ConversationDataRegisterCamera("Cameras|CustomCamera02", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Kerrigan")].lv_conversationLink, null, lib281DEC45_gt_UseKerriganCameraCustom02, true);
    ConversationDataRegisterCamera("Cameras|CustomCamera03", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Kerrigan")].lv_conversationLink, null, lib281DEC45_gt_UseKerriganCameraCustom03, true);
    ConversationDataRegisterCamera("Cameras|CustomCamera04", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Kerrigan")].lv_conversationLink, null, lib281DEC45_gt_UseKerriganCameraCustom04, true);
    ConversationDataRegisterCamera("Cameras|CustomCamera01Listener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Kerrigan")].lv_conversationLink, null, lib281DEC45_gt_UseKerriganCameraCustom01Listener, true);
    ConversationDataRegisterCamera("Cameras|CustomCamera02Listener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Kerrigan")].lv_conversationLink, null, lib281DEC45_gt_UseKerriganCameraCustom02Listener, true);
    ConversationDataRegisterCamera("Cameras|CustomCamera03Listener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Kerrigan")].lv_conversationLink, null, lib281DEC45_gt_UseKerriganCameraCustom03Listener, true);
    ConversationDataRegisterCamera("Cameras|CustomCamera04Listener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Kerrigan")].lv_conversationLink, null, lib281DEC45_gt_UseKerriganCameraCustom04Listener, true);
    ConversationDataRegisterCamera("Cameras|Medium", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Evolution Master")].lv_conversationLink, null, lib281DEC45_gt_UseEvoMasterCameraMedium, true);
    ConversationDataRegisterCamera("Cameras|MediumListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Evolution Master")].lv_conversationLink, null, lib281DEC45_gt_UseEvoMasterCameraMediumListener, true);
    ConversationDataRegisterCamera("Cameras|Far", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Evolution Master")].lv_conversationLink, null, lib281DEC45_gt_UseEvoMasterCameraFar, true);
    ConversationDataRegisterCamera("Cameras|FarListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Evolution Master")].lv_conversationLink, null, lib281DEC45_gt_UseEvoMasterCameraFarListener, true);
    ConversationDataRegisterCamera("Cameras|CloseUp", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Evolution Master")].lv_conversationLink, null, lib281DEC45_gt_UseEvoMasterCameraCloseUp, true);
    ConversationDataRegisterCamera("Cameras|CloseUpListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Evolution Master")].lv_conversationLink, null, lib281DEC45_gt_UseEvoMasterCameraCloseUpListener, true);
    ConversationDataRegisterCamera("Cameras|Shoulder", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Evolution Master")].lv_conversationLink, null, lib281DEC45_gt_UseEvoMasterCameraShoulder, true);
    ConversationDataRegisterCamera("Cameras|ReverseShoulder", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Evolution Master")].lv_conversationLink, null, lib281DEC45_gt_UseEvoMasterCameraShoulderReverse, true);
    ConversationDataRegisterCamera("Cameras|ExtremeCloseup", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Evolution Master")].lv_conversationLink, null, lib281DEC45_gt_UseEvoMasterCameraExtremeCloseup, true);
    ConversationDataRegisterCamera("Cameras|ExtremeCloseupListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Evolution Master")].lv_conversationLink, null, lib281DEC45_gt_UseEvoMasterCameraExtremeCloseupListener, true);
    ConversationDataRegisterCamera("Cameras|TwoShot", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Evolution Master")].lv_conversationLink, null, lib281DEC45_gt_UseEvoMasterCameraTwoShot, true);
    ConversationDataRegisterCamera("Cameras|CustomCamera01", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Evolution Master")].lv_conversationLink, null, lib281DEC45_gt_UseEvoMasterCameraCustom01, true);
    ConversationDataRegisterCamera("Cameras|CustomCamera02", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Evolution Master")].lv_conversationLink, null, lib281DEC45_gt_UseEvoMasterCameraCustom02, true);
    ConversationDataRegisterCamera("Cameras|Medium", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zagara")].lv_conversationLink, null, lib281DEC45_gt_UseZagaraCameraMedium, true);
    ConversationDataRegisterCamera("Cameras|MediumListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zagara")].lv_conversationLink, null, lib281DEC45_gt_UseZagaraCameraMediumListener, true);
    ConversationDataRegisterCamera("Cameras|Far", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zagara")].lv_conversationLink, null, lib281DEC45_gt_UseZagaraCameraFar, true);
    ConversationDataRegisterCamera("Cameras|FarListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zagara")].lv_conversationLink, null, lib281DEC45_gt_UseZagaraCameraFarListener, true);
    ConversationDataRegisterCamera("Cameras|CloseUp", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zagara")].lv_conversationLink, null, lib281DEC45_gt_UseZagaraCameraCloseUp, true);
    ConversationDataRegisterCamera("Cameras|CloseUpListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zagara")].lv_conversationLink, null, lib281DEC45_gt_UseZagaraCameraCloseUpListener, true);
    ConversationDataRegisterCamera("Cameras|Shoulder", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zagara")].lv_conversationLink, null, lib281DEC45_gt_UseZagaraCameraShoulder, true);
    ConversationDataRegisterCamera("Cameras|ReverseShoulder", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zagara")].lv_conversationLink, null, lib281DEC45_gt_UseZagaraCameraShoulderReverse, true);
    ConversationDataRegisterCamera("Cameras|ExtremeCloseup", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zagara")].lv_conversationLink, null, lib281DEC45_gt_UseZagaraCameraExtremeCloseup, true);
    ConversationDataRegisterCamera("Cameras|ExtremeCloseupListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zagara")].lv_conversationLink, null, lib281DEC45_gt_UseZagaraCameraExtremeCloseupListener, true);
    ConversationDataRegisterCamera("Cameras|TwoShot", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zagara")].lv_conversationLink, null, lib281DEC45_gt_UseZagaraCameraTwoShot, true);
    ConversationDataRegisterCamera("Cameras|CustomCamera01", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zagara")].lv_conversationLink, null, lib281DEC45_gt_UseZagaraCameraCustom01, true);
    ConversationDataRegisterCamera("Cameras|CustomCamera02", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zagara")].lv_conversationLink, null, lib281DEC45_gt_UseZagaraCameraCustom02, true);
    ConversationDataRegisterCamera("Cameras|CustomCamera03", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zagara")].lv_conversationLink, null, lib281DEC45_gt_UseZagaraCameraCustom03, true);
    ConversationDataRegisterCamera("Cameras|CustomCamera04", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zagara")].lv_conversationLink, null, lib281DEC45_gt_UseZagaraCameraCustom04, true);
    ConversationDataRegisterCamera("Cameras|CustomCamera01Listener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zagara")].lv_conversationLink, null, lib281DEC45_gt_UseZagaraCameraCustom01Listener, true);
    ConversationDataRegisterCamera("Cameras|CustomCamera02Listener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zagara")].lv_conversationLink, null, lib281DEC45_gt_UseZagaraCameraCustom02Listener, true);
    ConversationDataRegisterCamera("Cameras|CustomCamera03Listener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zagara")].lv_conversationLink, null, lib281DEC45_gt_UseZagaraCameraCustom03Listener, true);
    ConversationDataRegisterCamera("Cameras|CustomCamera04Listener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zagara")].lv_conversationLink, null, lib281DEC45_gt_UseZagaraCameraCustom04Listener, true);
    ConversationDataRegisterCamera("Cameras|Medium", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zerg Adjutant")].lv_conversationLink, null, lib281DEC45_gt_UseKaviCameraMedium, true);
    ConversationDataRegisterCamera("Cameras|MediumListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zerg Adjutant")].lv_conversationLink, null, lib281DEC45_gt_UseKaviCameraMediumListener, true);
    ConversationDataRegisterCamera("Cameras|Far", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zerg Adjutant")].lv_conversationLink, null, lib281DEC45_gt_UseKaviCameraFar, true);
    ConversationDataRegisterCamera("Cameras|FarListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zerg Adjutant")].lv_conversationLink, null, lib281DEC45_gt_UseKaviCameraFarListener, true);
    ConversationDataRegisterCamera("Cameras|CloseUp", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zerg Adjutant")].lv_conversationLink, null, lib281DEC45_gt_UseKaviCameraCloseUp, true);
    ConversationDataRegisterCamera("Cameras|CloseUpListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zerg Adjutant")].lv_conversationLink, null, lib281DEC45_gt_UseEvoMasterCameraCloseUpListener, true);
    ConversationDataRegisterCamera("Cameras|Shoulder", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zerg Adjutant")].lv_conversationLink, null, lib281DEC45_gt_UseKaviCameraShoulder, true);
    ConversationDataRegisterCamera("Cameras|ReverseShoulder", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zerg Adjutant")].lv_conversationLink, null, lib281DEC45_gt_UseKaviCameraShoulderReverse, true);
    ConversationDataRegisterCamera("Cameras|ExtremeCloseup", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zerg Adjutant")].lv_conversationLink, null, lib281DEC45_gt_UseKaviCameraExtremeCloseup, true);
    ConversationDataRegisterCamera("Cameras|ExtremeCloseupListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zerg Adjutant")].lv_conversationLink, null, lib281DEC45_gt_UseKaviCameraExtremeCloseupListener, true);
    ConversationDataRegisterCamera("Cameras|TwoShot", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zerg Adjutant")].lv_conversationLink, null, lib281DEC45_gt_UseKaviCameraTwoShot, true);
    ConversationDataRegisterCamera("Cameras|CustomCamera01", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zerg Adjutant")].lv_conversationLink, null, lib281DEC45_gt_UseKaviCameraCustom01, true);
    ConversationDataRegisterCamera("Cameras|Medium", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Raynor")].lv_conversationLink, null, lib281DEC45_gt_UseRaynorCameraMedium, true);
    ConversationDataRegisterCamera("Cameras|MediumListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Raynor")].lv_conversationLink, null, lib281DEC45_gt_UseRaynorCameraMediumListener, true);
    ConversationDataRegisterCamera("Cameras|Far", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Raynor")].lv_conversationLink, null, lib281DEC45_gt_UseRaynorCameraFar, true);
    ConversationDataRegisterCamera("Cameras|FarListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Raynor")].lv_conversationLink, null, lib281DEC45_gt_UseRaynorCameraFarListener, true);
    ConversationDataRegisterCamera("Cameras|CloseUp", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Raynor")].lv_conversationLink, null, lib281DEC45_gt_UseRaynorCameraCloseUp, true);
    ConversationDataRegisterCamera("Cameras|CloseUpListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Raynor")].lv_conversationLink, null, lib281DEC45_gt_UseRaynorCameraCloseUpListener, true);
    ConversationDataRegisterCamera("Cameras|Shoulder", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Raynor")].lv_conversationLink, null, lib281DEC45_gt_UseRaynorCameraShoulder, true);
    ConversationDataRegisterCamera("Cameras|ReverseShoulder", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Raynor")].lv_conversationLink, null, lib281DEC45_gt_UseRaynorCameraShoulderReverse, true);
    ConversationDataRegisterCamera("Cameras|ExtremeCloseup", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Raynor")].lv_conversationLink, null, lib281DEC45_gt_UseRaynorCameraExtremeCloseup, true);
    ConversationDataRegisterCamera("Cameras|ExtremeCloseupListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Raynor")].lv_conversationLink, null, lib281DEC45_gt_UseRaynorCameraExtremeCloseupListener, true);
    ConversationDataRegisterCamera("Cameras|TwoShot", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Raynor")].lv_conversationLink, null, lib281DEC45_gt_UseRaynorCameraTwoShot, true);
    ConversationDataRegisterCamera("Cameras|Medium", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Protoss Prisoner")].lv_conversationLink, null, lib281DEC45_gt_UseProtossPrisonerCameraMedium, true);
    ConversationDataRegisterCamera("Cameras|MediumListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Protoss Prisoner")].lv_conversationLink, null, lib281DEC45_gt_UseProtossPrisonerCameraMediumListener, true);
    ConversationDataRegisterCamera("Cameras|Far", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Protoss Prisoner")].lv_conversationLink, null, lib281DEC45_gt_UseProtossPrisonerCameraFar, true);
    ConversationDataRegisterCamera("Cameras|FarListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Protoss Prisoner")].lv_conversationLink, null, lib281DEC45_gt_UseProtossPrisonerCameraFarListener, true);
    ConversationDataRegisterCamera("Cameras|CloseUp", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Protoss Prisoner")].lv_conversationLink, null, lib281DEC45_gt_UseProtossPrisonerCameraCloseUp, true);
    ConversationDataRegisterCamera("Cameras|CloseUpListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Protoss Prisoner")].lv_conversationLink, null, lib281DEC45_gt_UseProtossPrisonerCameraCloseUpListener, true);
    ConversationDataRegisterCamera("Cameras|Shoulder", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Protoss Prisoner")].lv_conversationLink, null, lib281DEC45_gt_UseProtossPrisonerCameraShoulder, true);
    ConversationDataRegisterCamera("Cameras|ReverseShoulder", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Protoss Prisoner")].lv_conversationLink, null, lib281DEC45_gt_UseProtossPrisonerCameraShoulderReverse, true);
    ConversationDataRegisterCamera("Cameras|ExtremeCloseup", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Protoss Prisoner")].lv_conversationLink, null, lib281DEC45_gt_UseProtossPrisonerCameraExtremeCloseup, true);
    ConversationDataRegisterCamera("Cameras|ExtremeCloseupListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Protoss Prisoner")].lv_conversationLink, null, lib281DEC45_gt_UseProtossPrisonerCameraExtremeCloseupListener, true);
    ConversationDataRegisterCamera("Cameras|TwoShot", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Protoss Prisoner")].lv_conversationLink, null, lib281DEC45_gt_UseProtossPrisonerCameraTwoShot, true);
    ConversationDataRegisterCamera("Cameras|CustomCamera01", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Protoss Prisoner")].lv_conversationLink, null, lib281DEC45_gt_UseProtossPrisonerCameraCustom01, true);
    ConversationDataRegisterCamera("Cameras|Medium", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zeratul")].lv_conversationLink, null, lib281DEC45_gt_UseZeratulCameraMedium, true);
    ConversationDataRegisterCamera("Cameras|MediumListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zeratul")].lv_conversationLink, null, lib281DEC45_gt_UseZeratulCameraMediumListener, true);
    ConversationDataRegisterCamera("Cameras|Far", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zeratul")].lv_conversationLink, null, lib281DEC45_gt_UseZeratulCameraFar, true);
    ConversationDataRegisterCamera("Cameras|FarListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zeratul")].lv_conversationLink, null, lib281DEC45_gt_UseZeratulCameraFarListener, true);
    ConversationDataRegisterCamera("Cameras|CloseUp", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zeratul")].lv_conversationLink, null, lib281DEC45_gt_UseZeratulCameraCloseUp, true);
    ConversationDataRegisterCamera("Cameras|CloseUpListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zeratul")].lv_conversationLink, null, lib281DEC45_gt_UseZeratulCameraCloseUpListener, true);
    ConversationDataRegisterCamera("Cameras|Shoulder", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zeratul")].lv_conversationLink, null, lib281DEC45_gt_UseZeratulCameraShoulder, true);
    ConversationDataRegisterCamera("Cameras|ReverseShoulder", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zeratul")].lv_conversationLink, null, lib281DEC45_gt_UseZeratulCameraShoulderReverse, true);
    ConversationDataRegisterCamera("Cameras|ExtremeCloseup", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zeratul")].lv_conversationLink, null, lib281DEC45_gt_UseZeratulCameraExtremeCloseup, true);
    ConversationDataRegisterCamera("Cameras|ExtremeCloseupListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zeratul")].lv_conversationLink, null, lib281DEC45_gt_UseZeratulCameraExtremeCloseupListener, true);
    ConversationDataRegisterCamera("Cameras|TwoShot", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Zeratul")].lv_conversationLink, null, lib281DEC45_gt_UseZeratulCameraTwoShot, true);
    ConversationDataRegisterCamera("Cameras|Medium", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Primal Advisor")].lv_conversationLink, null, lib281DEC45_gt_UsePrimalAdvisorCameraMedium, true);
    ConversationDataRegisterCamera("Cameras|MediumListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Primal Advisor")].lv_conversationLink, null, lib281DEC45_gt_UsePrimalAdvisorCameraMediumListener, true);
    ConversationDataRegisterCamera("Cameras|Far", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Primal Advisor")].lv_conversationLink, null, lib281DEC45_gt_UsePrimalAdvisorCameraFar, true);
    ConversationDataRegisterCamera("Cameras|FarListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Primal Advisor")].lv_conversationLink, null, lib281DEC45_gt_UsePrimalAdvisorCameraFarListener, true);
    ConversationDataRegisterCamera("Cameras|CloseUp", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Primal Advisor")].lv_conversationLink, null, lib281DEC45_gt_UsePrimalAdvisorCameraCloseUp, true);
    ConversationDataRegisterCamera("Cameras|CloseUpListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Primal Advisor")].lv_conversationLink, null, lib281DEC45_gt_UsePrimalAdvisorCameraCloseUpListener, true);
    ConversationDataRegisterCamera("Cameras|Shoulder", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Primal Advisor")].lv_conversationLink, null, lib281DEC45_gt_UsePrimalAdvisorCameraShoulder, true);
    ConversationDataRegisterCamera("Cameras|ReverseShoulder", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Primal Advisor")].lv_conversationLink, null, lib281DEC45_gt_UsePrimalAdvisorCameraShoulderReverse, true);
    ConversationDataRegisterCamera("Cameras|ExtremeCloseup", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Primal Advisor")].lv_conversationLink, null, lib281DEC45_gt_UsePrimalAdvisorCameraExtremeCloseup, true);
    ConversationDataRegisterCamera("Cameras|ExtremeCloseupListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Primal Advisor")].lv_conversationLink, null, lib281DEC45_gt_UsePrimalAdvisorCameraExtremeCloseupListener, true);
    ConversationDataRegisterCamera("Cameras|TwoShot", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Primal Advisor")].lv_conversationLink, null, lib281DEC45_gt_UsePrimalAdvisorCameraTwoShot, true);
    ConversationDataRegisterCamera("Cameras|CustomCamera01", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Primal Advisor")].lv_conversationLink, null, lib281DEC45_gt_UsePrimalAdvisorCameraCustom01, true);
    ConversationDataRegisterCamera("Cameras|Medium", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Stukov")].lv_conversationLink, null, lib281DEC45_gt_UseStukovCameraMedium, true);
    ConversationDataRegisterCamera("Cameras|MediumListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Stukov")].lv_conversationLink, null, lib281DEC45_gt_UseStukovCameraMediumListener, true);
    ConversationDataRegisterCamera("Cameras|Far", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Stukov")].lv_conversationLink, null, lib281DEC45_gt_UseStukovCameraFar, true);
    ConversationDataRegisterCamera("Cameras|FarListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Stukov")].lv_conversationLink, null, lib281DEC45_gt_UseStukovCameraFarListener, true);
    ConversationDataRegisterCamera("Cameras|CloseUp", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Stukov")].lv_conversationLink, null, lib281DEC45_gt_UseStukovCameraCloseUp, true);
    ConversationDataRegisterCamera("Cameras|CloseUpListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Stukov")].lv_conversationLink, null, lib281DEC45_gt_UseStukovCameraCloseUpListener, true);
    ConversationDataRegisterCamera("Cameras|Shoulder", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Stukov")].lv_conversationLink, null, lib281DEC45_gt_UseStukovCameraShoulder, true);
    ConversationDataRegisterCamera("Cameras|ReverseShoulder", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Stukov")].lv_conversationLink, null, lib281DEC45_gt_UseStukovCameraShoulderReverse, true);
    ConversationDataRegisterCamera("Cameras|ExtremeCloseup", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Stukov")].lv_conversationLink, null, lib281DEC45_gt_UseStukovCameraExtremeCloseup, true);
    ConversationDataRegisterCamera("Cameras|ExtremeCloseupListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Stukov")].lv_conversationLink, null, lib281DEC45_gt_UseStukovCameraExtremeCloseupListener, true);
    ConversationDataRegisterCamera("Cameras|TwoShot", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Stukov")].lv_conversationLink, null, lib281DEC45_gt_UseStukovCameraTwoShot, true);
    ConversationDataRegisterCamera("Cameras|CustomCamera01", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Stukov")].lv_conversationLink, null, lib281DEC45_gt_UseStukovCameraCustom01, true);
    ConversationDataRegisterCamera("Cameras|Medium", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Horner")].lv_conversationLink, null, lib281DEC45_gt_UseHornerCameraMedium, true);
    ConversationDataRegisterCamera("Cameras|MediumListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Horner")].lv_conversationLink, null, lib281DEC45_gt_UseHornerCameraMediumListener, true);
    ConversationDataRegisterCamera("Cameras|Far", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Horner")].lv_conversationLink, null, lib281DEC45_gt_UseHornerCameraFar, true);
    ConversationDataRegisterCamera("Cameras|FarListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Horner")].lv_conversationLink, null, lib281DEC45_gt_UseHornerCameraFarListener, true);
    ConversationDataRegisterCamera("Cameras|CloseUp", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Horner")].lv_conversationLink, null, lib281DEC45_gt_UseHornerCameraCloseUp, true);
    ConversationDataRegisterCamera("Cameras|CloseUpListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Horner")].lv_conversationLink, null, lib281DEC45_gt_UseHornerCameraCloseUpListener, true);
    ConversationDataRegisterCamera("Cameras|Shoulder", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Horner")].lv_conversationLink, null, lib281DEC45_gt_UseHornerCameraShoulder, true);
    ConversationDataRegisterCamera("Cameras|ReverseShoulder", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Horner")].lv_conversationLink, null, lib281DEC45_gt_UseHornerCameraShoulderReverse, true);
    ConversationDataRegisterCamera("Cameras|ExtremeCloseup", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Horner")].lv_conversationLink, null, lib281DEC45_gt_UseHornerCameraExtremeCloseup, true);
    ConversationDataRegisterCamera("Cameras|ExtremeCloseupListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Horner")].lv_conversationLink, null, lib281DEC45_gt_UseHornerCameraExtremeCloseupListener, true);
    ConversationDataRegisterCamera("Cameras|TwoShot", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Horner")].lv_conversationLink, null, lib281DEC45_gt_UseHornerCameraTwoShot, true);
    ConversationDataRegisterCamera("Cameras|Medium", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Valerian")].lv_conversationLink, null, lib281DEC45_gt_UseValerianCameraMedium, true);
    ConversationDataRegisterCamera("Cameras|MediumListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Valerian")].lv_conversationLink, null, lib281DEC45_gt_UseValerianCameraMediumListener, true);
    ConversationDataRegisterCamera("Cameras|Far", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Valerian")].lv_conversationLink, null, lib281DEC45_gt_UseValerianCameraFar, true);
    ConversationDataRegisterCamera("Cameras|FarListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Valerian")].lv_conversationLink, null, lib281DEC45_gt_UseValerianCameraFarListener, true);
    ConversationDataRegisterCamera("Cameras|CloseUp", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Valerian")].lv_conversationLink, null, lib281DEC45_gt_UseValerianCameraCloseUp, true);
    ConversationDataRegisterCamera("Cameras|CloseUpListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Valerian")].lv_conversationLink, null, lib281DEC45_gt_UseValerianCameraCloseUpListener, true);
    ConversationDataRegisterCamera("Cameras|Shoulder", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Valerian")].lv_conversationLink, null, lib281DEC45_gt_UseValerianCameraShoulder, true);
    ConversationDataRegisterCamera("Cameras|ReverseShoulder", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Valerian")].lv_conversationLink, null, lib281DEC45_gt_UseValerianCameraShoulderReverse, true);
    ConversationDataRegisterCamera("Cameras|ExtremeCloseup", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Valerian")].lv_conversationLink, null, lib281DEC45_gt_UseValerianCameraExtremeCloseup, true);
    ConversationDataRegisterCamera("Cameras|ExtremeCloseupListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Valerian")].lv_conversationLink, null, lib281DEC45_gt_UseValerianCameraExtremeCloseupListener, true);
    ConversationDataRegisterCamera("Cameras|TwoShot", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Valerian")].lv_conversationLink, null, lib281DEC45_gt_UseValerianCameraTwoShot, true);
    ConversationDataRegisterCamera("Cameras|Medium", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Primal Ancient")].lv_conversationLink, null, lib281DEC45_gt_UseZurvanCameraMedium, true);
    ConversationDataRegisterCamera("Cameras|MediumListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Primal Ancient")].lv_conversationLink, null, lib281DEC45_gt_UseZurvanCameraMediumListener, true);
    ConversationDataRegisterCamera("Cameras|Far", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Primal Ancient")].lv_conversationLink, null, lib281DEC45_gt_UseZurvanCameraFar, true);
    ConversationDataRegisterCamera("Cameras|FarListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Primal Ancient")].lv_conversationLink, null, lib281DEC45_gt_UseZurvanCameraFarListener, true);
    ConversationDataRegisterCamera("Cameras|CloseUp", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Primal Ancient")].lv_conversationLink, null, lib281DEC45_gt_UseZurvanCameraCloseUp, true);
    ConversationDataRegisterCamera("Cameras|CloseUpListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Primal Ancient")].lv_conversationLink, null, lib281DEC45_gt_UseZurvanCameraCloseUpListener, true);
    ConversationDataRegisterCamera("Cameras|Shoulder", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Primal Ancient")].lv_conversationLink, null, lib281DEC45_gt_UseZurvanCameraShoulder, true);
    ConversationDataRegisterCamera("Cameras|ReverseShoulder", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Primal Ancient")].lv_conversationLink, null, lib281DEC45_gt_UseZurvanCameraShoulderReverse, true);
    ConversationDataRegisterCamera("Cameras|ExtremeCloseup", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Primal Ancient")].lv_conversationLink, null, lib281DEC45_gt_UseZurvanCameraExtremeCloseup, true);
    ConversationDataRegisterCamera("Cameras|ExtremeCloseupListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Primal Ancient")].lv_conversationLink, null, lib281DEC45_gt_UseZurvanCameraExtremeCloseupListener, true);
    ConversationDataRegisterCamera("Cameras|TwoShot", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Primal Ancient")].lv_conversationLink, null, lib281DEC45_gt_UseZurvanCameraTwoShot, true);
    ConversationDataRegisterCamera("Cameras|Medium", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Arcturus Mengsk")].lv_conversationLink, null, lib281DEC45_gt_UseMengskCameraMedium, true);
    ConversationDataRegisterCamera("Cameras|MediumListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Arcturus Mengsk")].lv_conversationLink, null, lib281DEC45_gt_UseMengskCameraMediumListener, true);
    ConversationDataRegisterCamera("Cameras|Far", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Arcturus Mengsk")].lv_conversationLink, null, lib281DEC45_gt_UseMengskCameraFar, true);
    ConversationDataRegisterCamera("Cameras|FarListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Arcturus Mengsk")].lv_conversationLink, null, lib281DEC45_gt_UseMengskCameraFarListener, true);
    ConversationDataRegisterCamera("Cameras|CloseUp", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Arcturus Mengsk")].lv_conversationLink, null, lib281DEC45_gt_UseMengskCameraCloseUp, true);
    ConversationDataRegisterCamera("Cameras|CloseUpListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Arcturus Mengsk")].lv_conversationLink, null, lib281DEC45_gt_UseMengskCameraCloseUpListener, true);
    ConversationDataRegisterCamera("Cameras|Shoulder", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Arcturus Mengsk")].lv_conversationLink, null, lib281DEC45_gt_UseMengskCameraShoulder, true);
    ConversationDataRegisterCamera("Cameras|ReverseShoulder", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Arcturus Mengsk")].lv_conversationLink, null, lib281DEC45_gt_UseMengskCameraShoulderReverse, true);
    ConversationDataRegisterCamera("Cameras|ExtremeCloseup", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Arcturus Mengsk")].lv_conversationLink, null, lib281DEC45_gt_UseMengskCameraExtremeCloseup, true);
    ConversationDataRegisterCamera("Cameras|ExtremeCloseupListener", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Arcturus Mengsk")].lv_conversationLink, null, lib281DEC45_gt_UseMengskCameraExtremeCloseupListener, true);
    ConversationDataRegisterCamera("Cameras|TwoShot", lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Arcturus Mengsk")].lv_conversationLink, null, lib281DEC45_gt_UseMengskCameraTwoShot, true);
}

void lib281DEC45_gf_ZSS_CharacterDataUpdate () {
    // Variable Declarations
    string lv_character;

    // Variable Initialization

    // Implementation
    lib281DEC45_gf_ZSS_CharacterSetKnown("Kerrigan", true);
    lib281DEC45_gf_ZSS_CharacterSetKnown("Raynor", true);
    lib281DEC45_gf_ZSS_CharacterSetKnown("Valerian", true);
    lib281DEC45_gf_ZSS_CharacterSetKnown("Horner", true);
    lib281DEC45_gf_ZSS_CharacterSetKnown("Arcturus Mengsk", true);
    if ((libSwaC_gf_MissionStatusCheck("ZLab3", libSwaC_ge_MissionStatus_Completed) == true) && (libSwaC_gf_StoryMapPlanet(libSwaC_gf_CurrentMap()) != "DominionLab")) {
        lib281DEC45_gf_ZSS_CharacterSetKnown("Evolution Master", true);
        lib281DEC45_gf_ZSS_CharacterSetKnown("Zerg Adjutant", true);
    }
    else {
    }
    if ((libSwaC_gf_MissionStatusCheck("ZChar1", libSwaC_ge_MissionStatus_Completed) == true)) {
        lib281DEC45_gf_ZSS_CharacterSetKnown("Zagara", true);
    }
    else {
        lib281DEC45_gf_ZSS_CharacterSetKnown("Zagara", false);
    }
    if ((libSwaC_gf_MissionStatusCheck("ZExpedition1", libSwaC_ge_MissionStatus_Completed) == true)) {
        lib281DEC45_gf_ZSS_CharacterSetKnown("Protoss Prisoner", true);
    }
    else {
        lib281DEC45_gf_ZSS_CharacterSetKnown("Protoss Prisoner", false);
    }
    if ((libSwaC_gf_MissionStatusCheck("ZZerus1", libSwaC_ge_MissionStatus_Completed) == true)) {
        lib281DEC45_gf_ZSS_CharacterSetKnown("Primal Ancient", true);
    }
    else {
        lib281DEC45_gf_ZSS_CharacterSetKnown("Primal Ancient", false);
    }
    if ((libSwaC_gf_MissionStatusCheck("ZZerus2", libSwaC_ge_MissionStatus_Completed) == true)) {
        lib281DEC45_gf_ZSS_CharacterSetKnown("Primal Advisor", true);
    }
    else {
        lib281DEC45_gf_ZSS_CharacterSetKnown("Primal Advisor", false);
    }
    if ((libSwaC_gf_StoryScenePlayed("Zerg07 - Now Zerus") == true)) {
        lib281DEC45_gf_ZSS_CharacterSetKnown("Zeratul", true);
    }
    else {
        lib281DEC45_gf_ZSS_CharacterSetKnown("Zeratul", false);
    }
    if ((libSwaC_gf_MissionStatusCheck("ZLab2", libSwaC_ge_MissionStatus_Completed) == true)) {
        lib281DEC45_gf_ZSS_CharacterSetKnown("Nova", true);
    }
    else {
        lib281DEC45_gf_ZSS_CharacterSetKnown("Nova", false);
    }
    if (((libSwaC_gf_MissionStatusCheck("ZHybrid1", libSwaC_ge_MissionStatus_Completed) == true) || (libSwaC_gf_StoryMapPlanet(lib281DEC45_gv_zSS_CurrentMap) == "Hybrid"))) {
        lib281DEC45_gf_ZSS_CharacterSetKnown("Stukov", true);
    }
    else {
        lib281DEC45_gf_ZSS_CharacterSetKnown("Stukov", false);
    }
    if ((libSwaC_gf_StoryMapPlanet(libSwaC_gf_CurrentMap()) == "Char")) {
        lib281DEC45_gf_ZSS_CharacterSetKnown("Hotspot - Char - Warfield's Compound", true);
    }
    else {
        lib281DEC45_gf_ZSS_CharacterSetKnown("Hotspot - Char - Warfield's Compound", false);
    }
    if ((libSwaC_gf_StoryMapPlanet(libSwaC_gf_CurrentMap()) == "Expedition")) {
        lib281DEC45_gf_ZSS_CharacterSetKnown("Hotspot - Expedition - Hatchery", true);
    }
    else {
        lib281DEC45_gf_ZSS_CharacterSetKnown("Hotspot - Expedition - Hatchery", false);
    }
    if ((libSwaC_gf_StoryMapPlanet(libSwaC_gf_CurrentMap()) == "Korhal") && (libSwaC_gf_MissionStatusCheck("ZKorhal1", libSwaC_ge_MissionStatus_Completed) == true)) {
        lib281DEC45_gf_ZSS_CharacterSetKnown("Hotspot - Korhal - Palace", true);
    }
    else {
        lib281DEC45_gf_ZSS_CharacterSetKnown("Hotspot - Korhal - Palace", false);
    }
    if ((libSwaC_gf_StoryMapPlanet(libSwaC_gf_CurrentMap()) == "Korhal") && (libSwaC_gf_MissionStatusCheck("ZKorhal1", libSwaC_ge_MissionStatus_Completed) == false)) {
        lib281DEC45_gf_ZSS_CharacterSetKnown("Hotspot - Korhal - Planet", true);
    }
    else {
        lib281DEC45_gf_ZSS_CharacterSetKnown("Hotspot - Korhal - Planet", false);
    }
    if ((libSwaC_gf_StoryMapPlanet(libSwaC_gf_CurrentMap()) == "Hybrid")) {
        lib281DEC45_gf_ZSS_CharacterSetKnown("Hotspot - Hybrid - Station", true);
    }
    else {
        lib281DEC45_gf_ZSS_CharacterSetKnown("Hotspot - Hybrid - Station", false);
    }
    if ((libSwaC_gf_StoryMapPlanet(libSwaC_gf_CurrentMap()) == "ZSpace1") && (libSwaC_gf_MissionStatusCheck("ZSpace1", libSwaC_ge_MissionStatus_Completed) == true)) {
        lib281DEC45_gf_ZSS_CharacterSetKnown("Hotspot - Space - Hyperion", true);
    }
    else {
        lib281DEC45_gf_ZSS_CharacterSetKnown("Hotspot - Space - Hyperion", false);
    }
}

void lib281DEC45_gf_PlayCinematicOnce (string lp_scene) {
    // Variable Declarations
    string lv_cinematicScene;

    // Variable Initialization

    // Implementation
    if ((libSwaC_gf_StoryScenePlayed(lp_scene) == false)) {
        if ((lp_scene == "Zerg05 - Char Arc") && (libSwaC_gf_MissionStatusCheck("ZZerus2", libSwaC_ge_MissionStatus_Completed) == true) && (libSwaC_gf_MissionStatusAge("ZChar3", libSwaC_ge_MissionStatus_Completed) < libSwaC_gf_MissionStatusAge("ZZerus3", libSwaC_ge_MissionStatus_Completed))) {
            lv_cinematicScene = "Zerg06 - Char Arc Alt";
        }
        else {
            lv_cinematicScene = lp_scene;
        }
        lib281DEC45_gf_ChangeRoom(lib281DEC45_ge_Rooms_StoryRoomVoid);
        lib281DEC45_gf_StartStoryActivity(lib281DEC45_ge_StoryActivities_Cinematic);
        CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
        libSwaC_gf_PlayCinematic(lv_cinematicScene, true);
        libSwaC_gf_SetStoryScenePlayed(lp_scene, true);
    }
    else {
    }
}

void lib281DEC45_gf_ZSS_PlayPreMissionCinematic (string lp_nextMission) {
    string auto7C026022_val;

    // Implementation
    if ((libSwaC_gf_StoryInSimulation() == true)) {
        return ;
    }
    else {
    }
    lib281DEC45_gf_ShowHideStoryUI(false);
    auto7C026022_val = lp_nextMission;
    if (auto7C026022_val == "ZLab2") {
        lib281DEC45_gf_PlayCinematicOnce("Zerg02 - Dominion Calling");
        return ;
    }
    else if (auto7C026022_val == "ZExpedition3") {
        lib281DEC45_gf_PlayScriptedScene("Scene20");
    }
    else if (auto7C026022_val == "ZZerus1") {
        lib281DEC45_gf_PlayScriptedScene("Scene24");
    }
    else if (auto7C026022_val == "ZHybrid2") {
        lib281DEC45_gf_PlayScriptedScene("Scene28");
    }
    else if (auto7C026022_val == "ZSpace2") {
        lib281DEC45_gf_PlayScriptedScene("Scene25");
    }
    else if (auto7C026022_val == "ZKorhal1") {
        lib281DEC45_gf_PlayScriptedScene("Scene21");
    }
    else if (auto7C026022_val == "ZKorhal2") {
        lib281DEC45_gf_PlayScriptedScene("Scene22");
    }
    else if (auto7C026022_val == "ZKorhal3") {
        lib281DEC45_gf_PlayScriptedScene("Scene23");
    }
    else {
    }
    lib281DEC45_gf_ZSS_SoundFadeAll(0.5, true);
}

bool lib281DEC45_gf_ZSS_HasPreMissionCinematic (string lp_nextMission) {
    string auto72E37ADF_val;

    // Implementation
    if ((libSwaC_gf_StoryInSimulation() == true)) {
        return false;
    }
    else {
    }
    auto72E37ADF_val = lp_nextMission;
    if (auto72E37ADF_val == "ZLab2") {
        return true;
    }
    else if (auto72E37ADF_val == "ZExpedition3") {
        return true;
    }
    else if (auto72E37ADF_val == "ZZerus1") {
        return true;
    }
    else if (auto72E37ADF_val == "ZHybrid2") {
        return true;
    }
    else if (auto72E37ADF_val == "ZSpace2") {
        return true;
    }
    else if (auto72E37ADF_val == "ZKorhal1") {
        return true;
    }
    else if (auto72E37ADF_val == "ZKorhal2") {
        return true;
    }
    else if (auto72E37ADF_val == "ZKorhal3") {
        return true;
    }
    else {
    }
    return false;
}

void lib281DEC45_gf_ZSS_PlayStoryModeEntryScenes () {
    string auto9BF8F4B3_val;
    string auto5010FB5A_val;

    // Implementation
    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_LastMap(), c_mapKindMission) == true) && (libSwaC_gf_LastMissionConditionCheck(libSwaC_ge_MissionCondition_Simulation) == false) && (libSwaC_gf_LastMissionConditionCheck(libSwaC_ge_MissionCondition_Sucessful) == true)) {
        auto9BF8F4B3_val = libSwaC_gf_LastMap();
        if (auto9BF8F4B3_val == "ZLab1") {
            lib281DEC45_gf_PlayScriptedScene("Scene07");
        }
        else if (auto9BF8F4B3_val == "ZLab2") {
            lib281DEC45_gf_PlayCinematicOnce("Zerg03 - Choices");
        }
        else if (auto9BF8F4B3_val == "ZLab3") {
            lib281DEC45_gf_PlayCinematicOnce("Zerg04 - New Beginnings");
        }
        else if (auto9BF8F4B3_val == "ZChar1") {
            lib281DEC45_gf_PlayScriptedScene("Scene01");
        }
        else if (auto9BF8F4B3_val == "ZChar2") {
            if ((libSwaC_gf_NumberOfMissionArcsCompleted() == 1)) {
                lib281DEC45_gf_PlayScriptedScene("Scene34");
            }
            else if ((libSwaC_gf_NumberOfMissionArcsCompleted() == 3)) {
                lib281DEC45_gf_PlayScriptedScene("Scene11");
            }
        }
        else if (auto9BF8F4B3_val == "ZChar3") {
            if ((libSwaC_gf_NumberOfMissionArcsCompleted() == 2)) {
                lib281DEC45_gf_PlayScriptedScene("Scene31");
            }
            else {
            }
        }
        else if (auto9BF8F4B3_val == "ZExpedition1") {
            lib281DEC45_gf_PlayScriptedScene("Scene02");
        }
        else if (auto9BF8F4B3_val == "ZExpedition2") {
            if ((libSwaC_gf_NumberOfMissionArcsCompleted() == 1)) {
                lib281DEC45_gf_PlayScriptedScene("Scene34");
            }
            else if ((libSwaC_gf_NumberOfMissionArcsCompleted() == 3)) {
                lib281DEC45_gf_PlayScriptedScene("Scene11");
            }
        }
        else if (auto9BF8F4B3_val == "ZExpedition3") {
            if ((libSwaC_gf_NumberOfMissionArcsCompleted() == 2)) {
                lib281DEC45_gf_PlayScriptedScene("Scene31");
            }
            else {
            }
        }
        else if (auto9BF8F4B3_val == "ZZerus1") {
        }
        else if (auto9BF8F4B3_val == "ZZerus2") {
            lib281DEC45_gf_PlayScriptedScene("Scene09");
        }
        else if (auto9BF8F4B3_val == "ZZerus3") {
            if ((libSwaC_gf_NumberOfMissionArcsCompleted() == 4)) {
                lib281DEC45_gf_PlayScriptedScene("Scene11");
            }
            else {
            }
        }
        else if (auto9BF8F4B3_val == "ZHybrid1") {
            if ((libSwaC_gf_NumberOfMissionArcsCompleted() == 4)) {
                lib281DEC45_gf_PlayScriptedScene("Scene12");
            }
            else if ((libSwaC_gf_NumberOfMissionArcsCompleted() == 5)) {
                lib281DEC45_gf_PlayScriptedScene("Scene13");
            }
        }
        else if (auto9BF8F4B3_val == "ZHybrid2") {
            lib281DEC45_gf_PlayScriptedScene("Scene04");
        }
        else if (auto9BF8F4B3_val == "ZHybrid3") {
            lib281DEC45_gf_PlayScriptedScene("Scene05");
        }
        else if (auto9BF8F4B3_val == "ZSpace1") {
            if ((libSwaC_gf_NumberOfMissionArcsCompleted() == 4)) {
                lib281DEC45_gf_PlayScriptedScene("Scene12");
            }
            else if ((libSwaC_gf_NumberOfMissionArcsCompleted() == 5)) {
                lib281DEC45_gf_PlayScriptedScene("Scene13");
            }
        }
        else if (auto9BF8F4B3_val == "ZSpace2") {
        }
        else if (auto9BF8F4B3_val == "ZKorhal1") {
            lib281DEC45_gf_PlayScriptedScene("Scene06");
        }
        else if (auto9BF8F4B3_val == "ZKorhal2") {
        }
        else if (auto9BF8F4B3_val == "ZKorhal3") {
        }
        else {
        }
    }
    else {
    }
    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_LastMap(), c_mapKindStory) == true)) {
        if ((libSwaC_gf_LastMap() == "ZStoryLab")) {
            lib281DEC45_gf_PlayScriptedScene("Scene18");
        }
        else {
        }
        lib281DEC45_gf_PlayScriptedScene("Scene32");
        auto5010FB5A_val = libSwaC_gf_CurrentMap();
        if (auto5010FB5A_val == "ZStoryZerus") {
            lib281DEC45_gf_PlayScriptedScene("Scene19");
        }
        else if (auto5010FB5A_val == "ZStoryHybrid") {
            if ((libSwaC_gf_MissionStatusCheck("ZHybrid1", libSwaC_ge_MissionStatus_Available) == true)) {
                lib281DEC45_gf_PlayScriptedScene("Scene27");
            }
            else {
            }
        }
        else if (auto5010FB5A_val == "ZStoryKorhal") {
            lib281DEC45_gf_PlayScriptedScene("Scene14");
        }
        else {
        }
    }
    else {
    }
}

void lib281DEC45_gf_ZSS_PlayRoomChangeScene (int lp_targetRoom) {
    int autoED65E9FB_val;
    int auto64B34819_ae;
    int auto64B34819_ai;

    // Variable Declarations
    string lv_indexCategory;

    // Variable Initialization

    // Implementation
    autoED65E9FB_val = lp_targetRoom;
    if (autoED65E9FB_val == lib281DEC45_ge_Rooms_StoryRoomEggRoom) {
        if ((ConversationDataCanRun("zScripted_EvolutionMaster_First", true) == true) && (UserDataGetInt("StoryStates", "Army UI Visited", "value", 1) == 0)) {
            lib281DEC45_gf_PlayScriptedScene("Scene26");
        }
        else {
        }
        if ((UserDataGetInt("StoryStates", "Evolution Scene Played", "value", 1) == 0)) {
            auto64B34819_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
            auto64B34819_ai = 1;
            while (auto64B34819_ai <= auto64B34819_ae) {
                lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto64B34819_ai);
                if ((CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "Flags[Hidden]", 1) == "0") && (libSwaC_gf_MissionStatusCheck(libSwaC_gf_StoryArmyCategoryEvolutionMission(lv_indexCategory), libSwaC_ge_MissionStatus_Available) == true)) {
                    UserDataSetInt("StoryStates", "Evolution Scene Played", "value", 1, 1);
                    lib281DEC45_gf_PlayScriptedScene("Scene16");
                    break;
                }
                else {
                }
                auto64B34819_ai = auto64B34819_ai + 1;
            }
        }
        else {
        }
        UserDataSetInt("StoryStates", "Army UI Visited", "value", 1, 1);
        if ((UserDataGetInt("StoryStates", "Unit Upgrade UI Visited", "value", 1) == 0)) {
            lib281DEC45_gf_PlayAmbientLine("Evolution Master", lib281DEC45_gf_ZSS_CharacterAmbientConversation("Evolution Master"), false);
        }
        else {
        }
    }
    else if (autoED65E9FB_val == lib281DEC45_ge_Rooms_StoryRoomTravelScreen) {
        if ((lib281DEC45_gf_ZSS_UITravelPlanetVisibleInScreen("Zerus") == true)) {
            if ((UserDataGetInt("Scenes", "Zerg07 - Now Zerus", "played", 1) == 0)) {
                lib281DEC45_gf_PlayScriptedScene("Scene33");
            }
            else {
            }
            lib281DEC45_gf_PlayCinematicOnce("Zerg07 - Now Zerus");
        }
        else {
        }
        if ((libSwaC_gf_NumberOfMissionArcsCompleted() == 4) && (UserDataGetInt("StoryStates", "FourthArcAfter Scene Played", "value", 1) == 0)) {
            UserDataSetInt("StoryStates", "FourthArcAfter Scene Played", "value", 1, 1);
            lib281DEC45_gf_PlayScriptedScene("Scene30");
        }
        else {
        }
        if ((libSwaC_gf_LastSuccessfulMission() == "ZHybrid3") && (UserDataGetInt("StoryStates", "AfterHybrid Scene Played", "value", 1) == 0)) {
            UserDataSetInt("StoryStates", "AfterHybrid Scene Played", "value", 1, 1);
            lib281DEC45_gf_PlayScriptedScene("Scene29");
        }
        else {
        }
    }
    else {
    }
}

void lib281DEC45_gf_PlayScriptedScene (string lp_scene) {
    // Variable Declarations
    trigger lv_callback;

    // Variable Initialization

    // Implementation
    lib281DEC45_gv_zSS_ConvoActive = true;
    lib281DEC45_gv_zSS_LastScenePlayedFull = false;
    lv_callback = DataTableGetTrigger(true, (lib281DEC45_gv_zSS_ScriptedScenePrefix + (lp_scene)));
    if ((lv_callback == null)) {
        TextExpressionSetToken("Param/Expression/lib_281DEC45_7F4626A3", "A", StringToText(UserDataGetString("ScriptedScenes", lp_scene, "DisplayName", 1)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_281DEC45_7F4626A3"), false);
    }
    else {
    }
    lib281DEC45_gv_zSS_ActiveConvoBookmarkToken = UserDataGetString("ScriptedScenes", lp_scene, "ConversationToken", 1);
    lib281DEC45_gv_zSS_CurrentConvoChar = UserDataGetUserInstance("ScriptedScenes", lp_scene, "ConvoCharacter", 1);
    lib281DEC45_gf_StartStoryActivity(lib281DEC45_ge_StoryActivities_ScriptedScene);
    UserDataSetInt("ScriptedScenes", lp_scene, "Started", 1, 1);
    TriggerExecute(lv_callback, true, true);
    if (((lib281DEC45_gf_StoryLastConversationWasSkipped() == false) || (lib281DEC45_gv_zSS_LastScenePlayedFull == true))) {
        UserDataSetInt("ScriptedScenes", lp_scene, "FullyPlayed", 1, 1);
    }
    else {
    }
    lib281DEC45_gv_zSS_ConvoActive = false;
}

void lib281DEC45_gf_SetScriptedSceneCallback (string lp_scene, trigger lp_callback) {
    // Implementation
    DataTableSetTrigger(true, (lib281DEC45_gv_zSS_ScriptedScenePrefix + (lp_scene)), lp_callback);
}

void lib281DEC45_gf_ZSS_InitSceneData () {
    // Implementation
    lib281DEC45_gf_SetScriptedSceneCallback("Scene26", lib281DEC45_gt_zScripted_EvolutionMaster_First);
    lib281DEC45_gf_SetScriptedSceneCallback("Scene16", lib281DEC45_gt_zScripted_EvoMissionsUnlock);
    lib281DEC45_gf_SetScriptedSceneCallback("Scene17", lib281DEC45_gt_zScripted_Space01Travel);
    lib281DEC45_gf_SetScriptedSceneCallback("Scene15", lib281DEC45_gt_zScripted_KorhalArcBefore);
    lib281DEC45_gf_SetScriptedSceneCallback("Scene14", lib281DEC45_gt_zLD_KorhalIntro);
}

void lib281DEC45_gf_PlayStorymodeCutscene (string lp_cutscene) {
    // Implementation
    lib281DEC45_gv_zSS_LastScenePlayedFull = true;
    CutsceneCreateNew(lp_cutscene, Point(64.0, 64.0), 0.0, PlayerGroupAll(), true);
    lib281DEC45_gv_zSS_Cutscene = CutsceneLastCreated();
    TriggerExecute(lib281DEC45_gt_ZSS_CutsceneDetectSkipping, true, false);
    WaitForCutsceneToEnd(lib281DEC45_gv_zSS_Cutscene);
    lib281DEC45_gf_StoryCutsceneFade(true, 0.0, false);
    TriggerStop(lib281DEC45_gt_ZSS_CutsceneDetectSkipping);
    TriggerStop(lib281DEC45_gt_ZSS_CutsceneSkipped);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_DebugEnterEggRoom
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_DebugEnterEggRoom_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomEggRoom);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_DebugEnterEggRoom_Init () {
    lib281DEC45_gt_ZSS_DebugEnterEggRoom = TriggerCreate("lib281DEC45_gt_ZSS_DebugEnterEggRoom_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_ResetStoryData
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_ResetStoryData_Func (bool testConds, bool runActions) {
    int auto6DF3941C_ai;
    int auto6DF3941C_ae;

    // Variable Declarations
    string lv_indexCharacter;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UserDataResetType("StoryStates");
    lib281DEC45_gf_ZSS_CharacterDataInit();
    auto6DF3941C_ai = 1;
    auto6DF3941C_ae = UserDataInstanceCount("Character")+1;
    while (auto6DF3941C_ai < auto6DF3941C_ae) {
        lv_indexCharacter = UserDataInstance("Character", auto6DF3941C_ai);
        ConversationDataResetNodeState(lib281DEC45_gf_ZSS_CharacterConversation(lv_indexCharacter));
        ConversationDataResetNodeState(lib281DEC45_gf_ZSS_CharacterAmbientConversation(lv_indexCharacter));
        UserDataResetValue("Character", lv_indexCharacter, "Unlocked", 1);
        auto6DF3941C_ai = auto6DF3941C_ai+1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_ResetStoryData_Init () {
    lib281DEC45_gt_ZSS_ResetStoryData = TriggerCreate("lib281DEC45_gt_ZSS_ResetStoryData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_SaveStoryDataCallback
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_SaveStoryDataCallback_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gv_zSS_IsLeavingMap = true;
    lib281DEC45_gf_ZSS_SaveStoryData();
    if ((libSwaC_gf_StoryEventParameter(libSwaC_ge_ZS_Event_TransitionFromStoryMap, 1) == "Mission") && (libSwaC_gf_CurrentMap() != "ZStoryLab")) {
        lib281DEC45_gf_ZSS_SaveForExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_SaveStoryDataCallback_Init () {
    lib281DEC45_gt_ZSS_SaveStoryDataCallback = TriggerCreate("lib281DEC45_gt_ZSS_SaveStoryDataCallback_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_StoryModeMenuQuit
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_StoryModeMenuQuit_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_ShowHideStoryUI(false);
    lib281DEC45_gf_ToggleInteractives(false);
    lib281DEC45_gf_StoryCutsceneFade(false, 0.1, false);
    Wait(0.0625, c_timeGame);
    lib281DEC45_gf_ZSS_SaveForExit();
    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_StoryModeMenuQuit_Init () {
    lib281DEC45_gt_ZSS_StoryModeMenuQuit = TriggerCreate("lib281DEC45_gt_ZSS_StoryModeMenuQuit_Func");
    TriggerAddEventGameMenuItemSelected(lib281DEC45_gt_ZSS_StoryModeMenuQuit, c_playerAny, c_gameMenuDialogQuitButton);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_StoryModeStatisticsSave
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_StoryModeStatisticsSave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bank lv_statisticsBank;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    BankLoad("\"ZCampaignStats\"", 1);
    if ((BankLastCreated() == null)) {
        return true;
    }
    else {
    }
    lv_statisticsBank = BankLastCreated();
    BankOptionSet(lv_statisticsBank, c_bankOptionSignature, true);
    UserDataSaveType("ScriptedScenes", lv_statisticsBank, "StoryScenes");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_StoryModeStatisticsSave_Init () {
    lib281DEC45_gt_ZSS_StoryModeStatisticsSave = TriggerCreate("lib281DEC45_gt_ZSS_StoryModeStatisticsSave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_SaveGameStart
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_SaveGameStart_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_PrepareForStoryModeTransitionalSave();
    lib281DEC45_gf_ZSS_SaveStoryData();
    lib281DEC45_gf_ZSS_TransitionalSave();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_SaveGameStart_Init () {
    lib281DEC45_gt_ZSS_SaveGameStart = TriggerCreate("lib281DEC45_gt_ZSS_SaveGameStart_Func");
    TriggerAddEventSaveGame(lib281DEC45_gt_ZSS_SaveGameStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_SaveGameEnd
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_SaveGameEnd_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib281DEC45_gv_zSS_TransitionBank != null)) {
        BankRemove(lib281DEC45_gv_zSS_TransitionBank);
        lib281DEC45_gv_zSS_TransitionBank = null;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_SaveGameEnd_Init () {
    lib281DEC45_gt_ZSS_SaveGameEnd = TriggerCreate("lib281DEC45_gt_ZSS_SaveGameEnd_Func");
    TriggerAddEventSaveGameDone(lib281DEC45_gt_ZSS_SaveGameEnd);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_UIStoryInit
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_UIStoryInit_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_RegisterStoryEvent(libSwaC_ge_ZS_Event_ArmyCheatStarts, lib281DEC45_gt_ZSS_UILibraryWindowOpened);
    libSwaC_gf_RegisterStoryEvent(libSwaC_ge_ZS_Event_KerriganCheatStarts, lib281DEC45_gt_ZSS_UILibraryWindowOpened);
    libSwaC_gf_RegisterStoryEvent(libSwaC_ge_ZS_Event_ArmyCheatEnds, lib281DEC45_gt_ZSS_UILibraryWindowClosed);
    libSwaC_gf_RegisterStoryEvent(libSwaC_ge_ZS_Event_KerriganCheatEnds, lib281DEC45_gt_ZSS_UILibraryWindowClosed);
    libSwaC_gf_RegisterStoryEvent(libSwaC_ge_ZS_Event_ArmyEnteredSubUI, lib281DEC45_gt_ZSS_UIArmySubscreenExited);
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTipAlertPanel, false);
    lib281DEC45_gv_zSS_ScreenDialog = DialogLastCreated();
    TriggerExecute(lib281DEC45_gt_ZSS_UIMainInit, true, false);
    lib281DEC45_gf_ZSS_UIMainUpdate();
    lib281DEC45_gf_ShowHideStoryUI(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_UIStoryInit_Init () {
    lib281DEC45_gt_ZSS_UIStoryInit = TriggerCreate("lib281DEC45_gt_ZSS_UIStoryInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_UIWaitForSelection
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_UIWaitForSelection_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(2.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_UIWaitForSelection_Init () {
    lib281DEC45_gt_ZSS_UIWaitForSelection = TriggerCreate("lib281DEC45_gt_ZSS_UIWaitForSelection_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_UIArchivesCreate
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_UIArchivesCreate_Func (bool testConds, bool runActions) {
    int auto7172965F_ae;
    int auto7172965F_ai;
    int auto6E46D5BD_ae;
    int auto6E46D5BD_ai;
    int auto0B56D757_ai;
    int auto0B56D757_ae;

    // Variable Declarations
    string lv_mission;
    string lv_scene;
    bool lv_defaultSelection;
    int lv_bestPriority;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lib281DEC45_gv_zSS_MissionArchiveOverlayCreated == false)) {
        lib281DEC45_gf_ZSS_UIArchivesOverlayCreate();
    }
    else {
    }
    if ((BattleReportPanelGetSelectedBattleReport(1) == c_invalidBattleReportId) && (libSwaC_gf_LastMapConditionCheck(libSwaC_ge_MissionCondition_Simulation) == false)) {
        if ((lib281DEC45_gv_zSS_CampaignComplete == true)) {
            lv_bestPriority = 0;
        }
        else {
            lv_bestPriority = 1000;
        }
        lv_defaultSelection = true;
    }
    else {
    }
    auto7172965F_ae = CatalogEntryCount(c_gameCatalogMap);
    auto7172965F_ai = 1;
    while (auto7172965F_ai <= auto7172965F_ae) {
        lv_mission = CatalogEntryGet(c_gameCatalogMap, auto7172965F_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_mission, "Kind", 1) == "Mission") {
            if ((libSwaC_gf_MissionStatusCheck(lv_mission, libSwaC_ge_MissionStatus_Completed) == true)) {
                BattleReportCreate(PlayerGroupAll(), libSwaC_gf_StoryMapName(lv_mission), c_battleReportTypeMission, c_battleReportStateCompleted);
                BattleReportSetPriority(BattleReportLastCreated(), lib281DEC45_gf_ZSS_UIArchivesMissionPriority(lv_mission));
                BattleReportSetDifficultyLevelCompleted(BattleReportLastCreated(), 1, true);
                BattleReportSetMissionText(BattleReportLastCreated(), libSwaC_gf_StoryMapName(lv_mission));
            }
            else {
                BattleReportCreate(PlayerGroupAll(), libSwaC_gf_StoryMapName(lv_mission), c_battleReportTypeMission, c_battleReportStateHidden);
            }
            DataTableSetString(true, lib281DEC45_gf_ZSS_UIArchivesDataString(BattleReportLastCreated()), (lv_mission));
            DataTableSetInt(true, lib281DEC45_gf_ZSS_UIArchivesDataTypeString(BattleReportLastCreated()), (lib281DEC45_ge_ZSS_UIArchivesType_Mission));
            if ((lib281DEC45_gv_zSS_CampaignComplete == false) && (lv_defaultSelection == true) && (lib281DEC45_gf_ZSS_UIArchivesMissionPriority(lv_mission) <= lv_bestPriority)) {
                lv_bestPriority = lib281DEC45_gf_ZSS_UIArchivesMissionPriority(lv_mission);
                BattleReportPanelSetSelectedBattleReport(PlayerGroupAll(), BattleReportLastCreated());
            }
            else if ((libSwaC_gf_LastMap() == lv_mission) && (libSwaC_gf_LastMapConditionCheck(libSwaC_ge_MissionCondition_Simulation) == true)) {
                BattleReportPanelSetSelectedBattleReport(PlayerGroupAll(), BattleReportLastCreated());
            }
        }
        auto7172965F_ai = auto7172965F_ai + 1;
    }
    auto6E46D5BD_ae = CatalogEntryCount(c_gameCatalogMap);
    auto6E46D5BD_ai = 1;
    while (auto6E46D5BD_ai <= auto6E46D5BD_ae) {
        lv_mission = CatalogEntryGet(c_gameCatalogMap, auto6E46D5BD_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_mission, "Kind", 1) == "Upgrade") {
            if (((lib281DEC45_gv_zSS_CampaignComplete == true) || (libSwaC_gf_MissionStatusCheck(lv_mission, libSwaC_ge_MissionStatus_Completed) == true))) {
                if ((libSwaC_gf_MissionStatusCheck(lv_mission, libSwaC_ge_MissionStatus_Completed) == true)) {
                    BattleReportCreate(PlayerGroupAll(), libSwaC_gf_StoryMapName(lv_mission), c_battleReportTypeMission, c_battleReportStateCompleted);
                }
                else {
                    BattleReportCreate(PlayerGroupAll(), libSwaC_gf_StoryMapName(lv_mission), c_battleReportTypeMission, c_battleReportStateNormal);
                }
                BattleReportSetPriority(BattleReportLastCreated(), lib281DEC45_gf_ZSS_UIArchivesMissionPriority(lv_mission));
                BattleReportSetMissionText(BattleReportLastCreated(), libSwaC_gf_StoryMapName(lv_mission));
            }
            else {
                BattleReportCreate(PlayerGroupAll(), libSwaC_gf_StoryMapName(lv_mission), c_battleReportTypeMission, c_battleReportStateHidden);
            }
            if ((lib281DEC45_gv_zSS_CampaignComplete == false) && (lv_defaultSelection == true) && (lib281DEC45_gf_ZSS_UIArchivesMissionPriority(lv_mission) <= lv_bestPriority)) {
                lv_bestPriority = lib281DEC45_gf_ZSS_UIArchivesMissionPriority(lv_mission);
                BattleReportPanelSetSelectedBattleReport(PlayerGroupAll(), BattleReportLastCreated());
            }
            else if ((libSwaC_gf_LastMap() == lv_mission) && (libSwaC_gf_LastMapConditionCheck(libSwaC_ge_MissionCondition_Simulation) == true)) {
                BattleReportPanelSetSelectedBattleReport(PlayerGroupAll(), BattleReportLastCreated());
            }
            DataTableSetString(true, lib281DEC45_gf_ZSS_UIArchivesDataString(BattleReportLastCreated()), (lv_mission));
            DataTableSetInt(true, lib281DEC45_gf_ZSS_UIArchivesDataTypeString(BattleReportLastCreated()), (lib281DEC45_ge_ZSS_UIArchivesType_Mission));
        }
        auto6E46D5BD_ai = auto6E46D5BD_ai + 1;
    }
    auto0B56D757_ai = 1;
    auto0B56D757_ae = UserDataInstanceCount("Scenes")+1;
    while (auto0B56D757_ai < auto0B56D757_ae) {
        lv_scene = UserDataInstance("Scenes", auto0B56D757_ai);
        if ((lib281DEC45_gf_ZSS_UIArchivesScenePriority(lv_scene) < 1000)) {
            BattleReportCreate(PlayerGroupAll(), libSwaC_gf_StorySceneName(lv_scene), c_battleReportTypeScene, c_battleReportStateCompleted);
            BattleReportSetPriority(BattleReportLastCreated(), lib281DEC45_gf_ZSS_UIArchivesScenePriority(lv_scene));
            DataTableSetString(true, lib281DEC45_gf_ZSS_UIArchivesDataString(BattleReportLastCreated()), ("Scenes" + ";" + (lv_scene)));
            DataTableSetInt(true, lib281DEC45_gf_ZSS_UIArchivesDataTypeString(BattleReportLastCreated()), (lib281DEC45_ge_ZSS_UIArchivesType_Scene));
            BattleReportSetSceneText(BattleReportLastCreated(), libSwaC_gf_StorySceneName(lv_scene));
            if ((lib281DEC45_gv_zSS_CampaignComplete == true) && (lv_defaultSelection == true) && (lib281DEC45_gf_ZSS_UIArchivesScenePriority(lv_scene) >= lv_bestPriority)) {
                lv_bestPriority = lib281DEC45_gf_ZSS_UIArchivesScenePriority(lv_scene);
                BattleReportPanelSetSelectedBattleReport(PlayerGroupAll(), BattleReportLastCreated());
            }
            else if ((lib281DEC45_gv_zSS_CampaignComplete == false) && (lv_defaultSelection == true) && (lib281DEC45_gf_ZSS_UIArchivesScenePriority(lv_scene) <= lv_bestPriority)) {
                lv_bestPriority = lib281DEC45_gf_ZSS_UIArchivesScenePriority(lv_scene);
                BattleReportPanelSetSelectedBattleReport(PlayerGroupAll(), BattleReportLastCreated());
            }
        }
        else {
        }
        auto0B56D757_ai = auto0B56D757_ai+1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_UIArchivesCreate_Init () {
    lib281DEC45_gt_ZSS_UIArchivesCreate = TriggerCreate("lib281DEC45_gt_ZSS_UIArchivesCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_UIArchivesSelectionChanged
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_UIArchivesSelectionChanged_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_ZSS_UIArchivesUpdate();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_UIArchivesSelectionChanged_Init () {
    lib281DEC45_gt_ZSS_UIArchivesSelectionChanged = TriggerCreate("lib281DEC45_gt_ZSS_UIArchivesSelectionChanged_Func");
    TriggerEnable(lib281DEC45_gt_ZSS_UIArchivesSelectionChanged, false);
    TriggerAddEventBattleReportPanelSelectionChanged(lib281DEC45_gt_ZSS_UIArchivesSelectionChanged, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_UIArchivesMissionPlayClicked
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_UIArchivesMissionPlayClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_mission;
    int lv_index;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib281DEC45_gv_zSS_UIArchivesMissionPlayButton != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == lib281DEC45_gv_zSS_UIArchivesMissionPlayButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gv_zSS_NextMission = (DataTableGetString(true, lib281DEC45_gf_ZSS_UIArchivesDataString(BattleReportPanelGetSelectedBattleReport(1))));
    libSwaC_gf_StorySetSimulationMission(lib281DEC45_gv_zSS_NextMission);
    if ((libSwaC_gf_StoryMapTypeCheck(lib281DEC45_gv_zSS_NextMission, c_mapKindUpgrade) == true)) {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Leviathan_EggRoom", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomEvolutionMissionScreen);
    }
    else {
        lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomMissionScreen);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_UIArchivesMissionPlayClicked_Init () {
    lib281DEC45_gt_ZSS_UIArchivesMissionPlayClicked = TriggerCreate("lib281DEC45_gt_ZSS_UIArchivesMissionPlayClicked_Func");
    TriggerEnable(lib281DEC45_gt_ZSS_UIArchivesMissionPlayClicked, false);
    TriggerAddEventDialogControl(lib281DEC45_gt_ZSS_UIArchivesMissionPlayClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_UIArchivesScenePlayClicked
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_UIArchivesScenePlayClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_scene;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib281DEC45_gv_zSS_UIArchivesScenePlayButton != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == lib281DEC45_gv_zSS_UIArchivesScenePlayButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_scene = UserDataInstanceFromReference(DataTableGetString(true, lib281DEC45_gf_ZSS_UIArchivesDataString(BattleReportPanelGetSelectedBattleReport(1))));
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleReportPanel, false);
    libSwaC_gf_PlayCinematic(lv_scene, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleReportPanel, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_UIArchivesScenePlayClicked_Init () {
    lib281DEC45_gt_ZSS_UIArchivesScenePlayClicked = TriggerCreate("lib281DEC45_gt_ZSS_UIArchivesScenePlayClicked_Func");
    TriggerEnable(lib281DEC45_gt_ZSS_UIArchivesScenePlayClicked, false);
    TriggerAddEventDialogControl(lib281DEC45_gt_ZSS_UIArchivesScenePlayClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_UIArchivesCloseClicked
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_UIArchivesCloseClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == lib281DEC45_gv_zSS_UIArchivesBackButton) || (EventDialogControl() == lib281DEC45_gv_zSS_UIArchivesQuitButton)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib281DEC45_gf_ZSS_CampaignCompleted() == true)) {
        lib281DEC45_gf_ZSS_SaveForExit();
        GameOver(1, c_gameOverVictory, false, false);
    }
    else {
        libSwaC_gf_CinematicFade(false, 0.0, Color(0.00, 0.00, 0.00), true);
        lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomMainSet);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_UIArchivesCloseClicked_Init () {
    lib281DEC45_gt_ZSS_UIArchivesCloseClicked = TriggerCreate("lib281DEC45_gt_ZSS_UIArchivesCloseClicked_Func");
    TriggerEnable(lib281DEC45_gt_ZSS_UIArchivesCloseClicked, false);
    TriggerAddEventDialogControl(lib281DEC45_gt_ZSS_UIArchivesCloseClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_UIArchivesSynced
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_UIArchivesSynced_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gv_zSS_ArchivesSynced = true;
    lib281DEC45_gf_ZSS_UIArchivesUpdate();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_UIArchivesSynced_Init () {
    lib281DEC45_gt_ZSS_UIArchivesSynced = TriggerCreate("lib281DEC45_gt_ZSS_UIArchivesSynced_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_UITravelInit
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_UITravelInit_Func (bool testConds, bool runActions) {
    int auto176D03CC_ae;
    int auto176D03CC_ai;
    int autoA5284BEA_ae;
    int autoA5284BEA_ai;

    // Variable Declarations
    int lv_missionIndex;
    string lv_planet;
    int lv_index;

    // Variable Initialization
    lv_index = 1;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogCreate(1620, 1220, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    lib281DEC45_gv_zSS_UITravelDialog = DialogLastCreated();
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "HotS_TravelPanel/TravelPanelTemplate");
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    lib281DEC45_gv_zSS_UITravelPanel = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UITravelPanel, c_triggerControlTypeButton, "CloseButton");
    lib281DEC45_gv_zSS_UITravelBackButton = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UITravelPanel, c_triggerControlTypeButton, "QuitButton");
    lib281DEC45_gv_zSS_UITravelQuitButton = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UITravelPanel, c_triggerControlTypeButton, "LaunchButton");
    lib281DEC45_gv_zSS_UITravelLaunchButton = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UITravelPanel, c_triggerControlTypeButton, "ContactPlayButton");
    lib281DEC45_gv_zSS_UITravelContactPlayButton = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UITravelPanel, c_triggerControlTypeButton, "ContactStopButton");
    lib281DEC45_gv_zSS_UITravelContactStopButton = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UITravelPanel, c_triggerControlTypePortrait, "ContactPortrait");
    lib281DEC45_gv_zSS_UITravelContactPortrait = DialogControlLastCreated();
    DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelContactPortrait, PlayerGroupAll(), true);
    DialogControlHookup(lib281DEC45_gv_zSS_UITravelPanel, c_triggerControlTypePanel, "ContactPortraitFrame");
    lib281DEC45_gv_zSS_UITravelContactPortraitFrame = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UITravelPanel, c_triggerControlTypePortrait, "BackgroundPortrait");
    lib281DEC45_gv_zSS_UITravelBGPortrait = DialogControlLastCreated();
    DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelBGPortrait, PlayerGroupAll(), true);
    DialogControlHookup(lib281DEC45_gv_zSS_UITravelPanel, c_triggerControlTypeLabel, "MissionTextLabel");
    lib281DEC45_gv_zSS_UITravelPlanetBigText = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UITravelPanel, c_triggerControlTypeLabel, "MissionTitleLabel");
    lib281DEC45_gv_zSS_UITravelPlanetBigTitle = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UITravelPanel, c_triggerControlTypePanel, "ScreenTitleFrame");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "ScreenTitleLabel");
    lib281DEC45_gv_zSS_UITravelMainTitle = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UITravelPanel, c_triggerControlTypeLabel, "ObjectiveTextLabel");
    lib281DEC45_gv_zSS_UITravelPlanetObjectiveText = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UITravelPanel, c_triggerControlTypeImage, "OrbitImage");
    lib281DEC45_gv_zSS_UITravelOrbitImage = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_UITravelPanel, c_triggerControlTypePanel, "SubtitleAnchor");
    lib281DEC45_gv_zSS_UITravelSubtitleAnchor = DialogControlLastCreated();
    DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelContactPlayButton, PlayerGroupAll(), false);
    DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelContactStopButton, PlayerGroupAll(), false);
    DialogControlHookup(lib281DEC45_gv_zSS_UITravelPanel, c_triggerControlTypePanel, "SelectPlanetLabel");
    lib281DEC45_gv_zSS_UITravelSelectLabel = DialogControlLastCreated();
    auto176D03CC_ae = lib281DEC45_gv_zSSC_PLANETPANELMAXPLANETS;
    auto176D03CC_ai = 1;
    lv_index = 1;
    for ( ; ( (auto176D03CC_ai >= 0 && lv_index <= auto176D03CC_ae) || (auto176D03CC_ai <= 0 && lv_index >= auto176D03CC_ae) ) ; lv_index += auto176D03CC_ai ) {
        DialogControlHookup(lib281DEC45_gv_zSS_UITravelPanel, c_triggerControlTypePanel, "PlanetFrame"+IntToString(lv_index-1));
        lib281DEC45_gv_zSS_UITravelPlanetFrame[lv_index] = DialogControlLastCreated();
        DialogControlHookup(lib281DEC45_gv_zSS_UITravelPlanetFrame[lv_index], c_triggerControlTypePortrait, "Portrait");
        lib281DEC45_gv_zSS_UITravelPlanetPortrait[lv_index] = DialogControlLastCreated();
        DialogControlHookup(lib281DEC45_gv_zSS_UITravelPlanetFrame[lv_index], c_triggerControlTypePortrait, "SelectedPortrait");
        lib281DEC45_gv_zSS_UITravelPlanetSelectedPortrait[lv_index] = DialogControlLastCreated();
        DialogControlHookup(lib281DEC45_gv_zSS_UITravelPlanetFrame[lv_index], c_triggerControlTypeLabel, "SelectedNameLabel");
        lib281DEC45_gv_zSS_UITravelPlanetSelectedName[lv_index] = DialogControlLastCreated();
        DialogControlHookup(lib281DEC45_gv_zSS_UITravelPlanetFrame[lv_index], c_triggerControlTypeImage, "SelectedBorderImage");
        lib281DEC45_gv_zSS_UITravelPlanetSelectedBorder[lv_index] = DialogControlLastCreated();
        DialogControlHookup(lib281DEC45_gv_zSS_UITravelPlanetFrame[lv_index], c_triggerControlTypeLabel, "NameLabel");
        lib281DEC45_gv_zSS_UITravelPlanetName[lv_index] = DialogControlLastCreated();
        DialogControlHookup(lib281DEC45_gv_zSS_UITravelPlanetFrame[lv_index], c_triggerControlTypeButton, "Button");
        lib281DEC45_gv_zSS_UITravelPlanetButton[lv_index] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemToggled(lib281DEC45_gv_zSS_UITravelPlanetButton[lv_index], false, PlayerGroupAll());
    }
    DialogControlHookup(lib281DEC45_gv_zSS_UITravelPanel, c_triggerControlTypePanel, "MissionRewardUnitFrameTemplate");
    lib281DEC45_gv_zSS_UITravelUnitRewardFrame = DialogControlLastCreated();
    autoA5284BEA_ae = lib281DEC45_gv_zSSC_PLANETPANELMAXMISSIONS;
    autoA5284BEA_ai = 1;
    lv_index = 1;
    for ( ; ( (autoA5284BEA_ai >= 0 && lv_index <= autoA5284BEA_ae) || (autoA5284BEA_ai <= 0 && lv_index >= autoA5284BEA_ae) ) ; lv_index += autoA5284BEA_ai ) {
        DialogControlHookup(lib281DEC45_gv_zSS_UITravelUnitRewardFrame, c_triggerControlTypePanel, "RewardUnit"+IntToString(lv_index));
        lib281DEC45_gv_zSS_UITravelRewardUnitPanel[lv_index] = DialogControlLastCreated();
        DialogControlHookup(lib281DEC45_gv_zSS_UITravelRewardUnitPanel[lv_index], c_triggerControlTypeUnitModel, "RewardUnitFrame");
        lib281DEC45_gv_zSS_UITravelRewardUnit[lv_index] = DialogControlLastCreated();
        DialogControlHookup(lib281DEC45_gv_zSS_UITravelRewardUnitPanel[lv_index], c_triggerControlTypeLabel, "RewardUnitNameLabel");
        lib281DEC45_gv_zSS_UITravelRewardUnitLabel[lv_index] = DialogControlLastCreated();
    }
    lib281DEC45_gf_ZSS_UITravelLocationSelect(0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_UITravelInit_Init () {
    lib281DEC45_gt_ZSS_UITravelInit = TriggerCreate("lib281DEC45_gt_ZSS_UITravelInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_UITravelQuitSelected
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_UITravelQuitSelected_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib281DEC45_gv_zSS_UITravelQuitButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIShowCustomDialog(PlayerGroupAll(), libNtve_ge_CustomDialogType_c_customDialogTypeQuery, StringExternal("Param/Value/lib_281DEC45_5ADD08C4"), StringToText(""), true);
    TriggerEnable(lib281DEC45_gt_ZSS_UITravelCustomDialogDismiss, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_UITravelQuitSelected_Init () {
    lib281DEC45_gt_ZSS_UITravelQuitSelected = TriggerCreate("lib281DEC45_gt_ZSS_UITravelQuitSelected_Func");
    TriggerAddEventDialogControl(lib281DEC45_gt_ZSS_UITravelQuitSelected, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_UITravelBackSelected
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_UITravelBackSelected_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib281DEC45_gv_zSS_UITravelBackButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(lib281DEC45_gt_ZSS_UITravelLaunchSelected, false);
    TriggerEnable(lib281DEC45_gt_ZSS_UITravelBackSelected, false);
    TriggerEnable(lib281DEC45_gt_ZSS_UITravelPlanetSelected, false);
    libSwaC_gf_CinematicFade(false, 0.0, Color(0.00, 0.00, 0.00), true);
    lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomMainSet);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_UITravelBackSelected_Init () {
    lib281DEC45_gt_ZSS_UITravelBackSelected = TriggerCreate("lib281DEC45_gt_ZSS_UITravelBackSelected_Func");
    TriggerEnable(lib281DEC45_gt_ZSS_UITravelBackSelected, false);
    TriggerAddEventDialogControl(lib281DEC45_gt_ZSS_UITravelBackSelected, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_UITravelCustomDialogDismiss
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_UITravelCustomDialogDismiss_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_UITravelCustomDialogDismiss_Init () {
    lib281DEC45_gt_ZSS_UITravelCustomDialogDismiss = TriggerCreate("lib281DEC45_gt_ZSS_UITravelCustomDialogDismiss_Func");
    TriggerEnable(lib281DEC45_gt_ZSS_UITravelCustomDialogDismiss, false);
    TriggerAddEventCustomDialogDismissed(lib281DEC45_gt_ZSS_UITravelCustomDialogDismiss, c_playerAny, libNtve_ge_CustomDialogResult_c_customDialogResultYes);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_UITravelLaunchSelected
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_UITravelLaunchSelected_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((lib281DEC45_gv_zSS_UITravelLaunchButton != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == lib281DEC45_gv_zSS_UITravelLaunchButton))) {
            return false;
        }

        if (!((lib281DEC45_gf_CurrentRoom() == lib281DEC45_ge_Rooms_StoryRoomTravelScreen))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_ZSS_TravelLocationLaunch(lib281DEC45_gv_zSS_UITravelMaps[lib281DEC45_gv_zSS_UITravelSelectedPlanet]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_UITravelLaunchSelected_Init () {
    lib281DEC45_gt_ZSS_UITravelLaunchSelected = TriggerCreate("lib281DEC45_gt_ZSS_UITravelLaunchSelected_Func");
    TriggerEnable(lib281DEC45_gt_ZSS_UITravelLaunchSelected, false);
    TriggerAddEventDialogControl(lib281DEC45_gt_ZSS_UITravelLaunchSelected, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_UITravelPlanetSelected
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_UITravelPlanetSelected_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    IntLoopBegin(1, 4);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((lib281DEC45_gv_zSS_UITravelPlanetButton[IntLoopCurrent()] != c_invalidDialogControlId) && (lib281DEC45_gv_zSS_UITravelPlanetButton[IntLoopCurrent()] == EventDialogControl())) {
            if ((lib281DEC45_gv_zSS_UITravelSelectedPlanet != IntLoopCurrent())) {
                lib281DEC45_gf_ZSS_UITravelLocationSelect(IntLoopCurrent());
                lib281DEC45_gf_ZSS_UITravelAmbiencePlay(IntLoopCurrent());
            }
            else {
            }
            return true;
        }
        else {
        }
    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_UITravelPlanetSelected_Init () {
    lib281DEC45_gt_ZSS_UITravelPlanetSelected = TriggerCreate("lib281DEC45_gt_ZSS_UITravelPlanetSelected_Func");
    TriggerAddEventDialogControl(lib281DEC45_gt_ZSS_UITravelPlanetSelected, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_UITravelPlayPitch
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_UITravelPlayPitch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_pitch;
    string lv_mission;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib281DEC45_gv_zSS_UITravelContactPlayButton != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == lib281DEC45_gv_zSS_UITravelContactPlayButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib281DEC45_gv_zSS_UITravelSelectedPlanet == 0)) {
        return true;
    }
    else {
    }
    IntLoopBegin(1, 4);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((IntLoopCurrent() == lib281DEC45_gv_zSS_UITravelSelectedPlanet)) {
            lv_mission = lib281DEC45_gf_ZSS_MissionNextAvailable(libSwaC_gf_StoryMapPlanet(lib281DEC45_gv_zSS_UITravelMaps[IntLoopCurrent()]));
            lib281DEC45_gv_zSS_UITravelPitchPlayed[IntLoopCurrent()] = true;
            break;
        }
        else {
        }
    }
    IntLoopEnd();
    if ((lib281DEC45_gv_zSS_UITravelUseTerranPitch == true) && (lv_mission == "ZChar1")) {
        lv_pitch = "zPitch_TAdjutantChar";
    }
    else if ((lib281DEC45_gv_zSS_UITravelUseTerranPitch == true) && (lv_mission == "ZExpedition1")) {
        lv_pitch = "zPitch_TAdjutantExpedition";
    }
    else if ((lv_mission == null)) {
        lv_pitch = libSwaC_gf_StoryPlanetNonmissionPitch(libSwaC_gf_StoryMapPlanet(lib281DEC45_gv_zSS_UITravelMaps[lib281DEC45_gv_zSS_UITravelSelectedPlanet]));
    }
    else if (true) {
        lv_pitch = libSwaC_gf_TravelPitch(lv_mission);
    }
    if ((lv_pitch == null)) {
        return true;
    }
    else {
    }
    DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelContactPlayButton, PlayerGroupAll(), false);
    DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelContactStopButton, PlayerGroupAll(), true);
    lib281DEC45_gv_zSS_PitchPlaying = true;
    lib281DEC45_gf_ZSS_CharacterPortraitPitchPlay(lv_pitch, PortraitGetTriggerControl(lib281DEC45_gv_zSS_UITravelContactPortrait));
    lib281DEC45_gv_zSS_PitchPlaying = false;
    DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelContactPlayButton, PlayerGroupAll(), true);
    DialogControlSetVisible(lib281DEC45_gv_zSS_UITravelContactStopButton, PlayerGroupAll(), false);
    lib281DEC45_gf_ZSS_UITravelUpdate();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_UITravelPlayPitch_Init () {
    lib281DEC45_gt_ZSS_UITravelPlayPitch = TriggerCreate("lib281DEC45_gt_ZSS_UITravelPlayPitch_Func");
    TriggerAddEventDialogControl(lib281DEC45_gt_ZSS_UITravelPlayPitch, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_UITravelStopPitch
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_UITravelStopPitch_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((lib281DEC45_gv_zSS_UITravelContactStopButton != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == lib281DEC45_gv_zSS_UITravelContactStopButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ConversationDataStop();
    lib281DEC45_gv_zSS_PitchPlaying = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_UITravelStopPitch_Init () {
    lib281DEC45_gt_ZSS_UITravelStopPitch = TriggerCreate("lib281DEC45_gt_ZSS_UITravelStopPitch_Func");
    TriggerAddEventDialogControl(lib281DEC45_gt_ZSS_UITravelStopPitch, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_UIMissionCreate
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_UIMissionCreate_Func (bool testConds, bool runActions) {
    int auto37DA3AF5_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogCreate(1620, 1220, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    lib281DEC45_gv_zSS_MissionDialog = DialogLastCreated();
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "HotS_MissionPanel/MissionPanelTemplate");
    lib281DEC45_gv_zSS_MissionPanel = DialogControlLastCreated();
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookup(lib281DEC45_gv_zSS_MissionPanel, c_triggerControlTypePortrait, "ContactPortrait");
    lib281DEC45_gv_zSS_MissionContactPortrait = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_MissionPanel, c_triggerControlTypeImage, "BackgroundImage");
    lib281DEC45_gv_zSS_MissionBackgroundImage = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_MissionPanel, c_triggerControlTypeLabel, "MissionTextLabel");
    lib281DEC45_gv_zSS_MissionTextLabel = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_MissionPanel, c_triggerControlTypeLabel, "ObjectiveTextLabel");
    lib281DEC45_gv_zSS_MissionPrimaryObjectiveText = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_MissionPanel, c_triggerControlTypePanel, "MissionRewardKerriganLevel");
    lib281DEC45_gv_zSS_MissionRewardKerriganLevelPanel = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_MissionRewardKerriganLevelPanel, c_triggerControlTypeLabel, "RewardTextLabel");
    lib281DEC45_gv_zSS_MissionRewardText = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_MissionPanel, c_triggerControlTypePanel, "MissionRewardEvolutionUnlocks");
    lib281DEC45_gv_zSS_MissionRewardEvolutionUnlocksPanel = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_MissionRewardEvolutionUnlocksPanel, c_triggerControlTypeLabel, "RewardEvolutionMissionTextLabel");
    lib281DEC45_gv_zSS_MissionRewardEvolutionUnlockText = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_MissionRewardEvolutionUnlocksPanel, c_triggerControlTypeLabel, "RewardTitleLabel");
    lib281DEC45_gv_zSS_MissionRewardEvolutionUnlockTitle = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_MissionPanel, c_triggerControlTypePanel, "BonusMissionReward");
    lib281DEC45_gv_zSS_MissionBonusMissionRewardPanel = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_MissionBonusMissionRewardPanel, c_triggerControlTypeLabel, "BonusRewardTextLabel");
    lib281DEC45_gv_zSS_MissionBonusText = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_MissionPanel, c_triggerControlTypePanel, "NewUnitFrame");
    lib281DEC45_gv_zSS_MissionNewUnitFramePanel = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_MissionNewUnitFramePanel, c_triggerControlTypeUnitModel, "TechnologyUnitModelFrame");
    lib281DEC45_gv_zSS_MissionUnit = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_MissionNewUnitFramePanel, c_triggerControlTypeLabel, "TechnologyTextLabel");
    lib281DEC45_gv_zSS_MissionTechnologyText = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_MissionNewUnitFramePanel, c_triggerControlTypeLabel, "TechnologyTitleLabel");
    lib281DEC45_gv_zSS_MissionTechnologyTitle = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_MissionNewUnitFramePanel, c_triggerControlTypeImage, "TechnologyBorderImage");
    lib281DEC45_gv_zSS_MissionTechnologyBorder = DialogControlLastCreated();
    lib281DEC45_gv_zSS_MissionUnitTooltipHolder = lib281DEC45_gv_zSS_MissionTechnologyBorder;
    DialogControlHookup(lib281DEC45_gv_zSS_MissionNewUnitFramePanel, c_triggerControlTypeLabel, "TechnologyDescriptionLabel");
    lib281DEC45_gv_zSS_MissionTechnologyDescriptionLabel = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_MissionPanel, c_triggerControlTypeButton, "LaunchButton");
    lib281DEC45_gv_zSS_MissionLaunchButton = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_MissionPanel, c_triggerControlTypeButton, "CloseButton");
    lib281DEC45_gv_zSS_MissionBackButton = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_MissionPanel, c_triggerControlTypeButton, "QuitButton");
    lib281DEC45_gv_zSS_MissionQuitButton = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_MissionPanel, c_triggerControlTypeButton, "ContactPlayButton");
    lib281DEC45_gv_zSS_MissionContactPlayButton = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_MissionPanel, c_triggerControlTypeButton, "ContactStopButton");
    lib281DEC45_gv_zSS_MissionContactStopButton = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_MissionPanel, c_triggerControlTypePulldown, "DifficultyPulldown");
    lib281DEC45_gv_zSS_MissionDifficultyDropdown = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_MissionPanel, c_triggerControlTypePanel, "SubtitleAnchor");
    lib281DEC45_gv_zSS_MissionSubtitleAnchor = DialogControlLastCreated();
    DialogControlAddItem(lib281DEC45_gv_zSS_MissionDifficultyDropdown, PlayerGroupAll(), StringExternal("UI/Difficulty01Campaign"));
    DialogControlAddItem(lib281DEC45_gv_zSS_MissionDifficultyDropdown, PlayerGroupAll(), StringExternal("UI/Difficulty02Campaign"));
    DialogControlAddItem(lib281DEC45_gv_zSS_MissionDifficultyDropdown, PlayerGroupAll(), StringExternal("UI/Difficulty03Campaign"));
    DialogControlAddItem(lib281DEC45_gv_zSS_MissionDifficultyDropdown, PlayerGroupAll(), StringExternal("UI/Difficulty04Campaign"));
    auto37DA3AF5_val = PlayerDifficulty(1);
    if (auto37DA3AF5_val == 1) {
        DialogControlSelectItem(lib281DEC45_gv_zSS_MissionDifficultyDropdown, PlayerGroupAll(), 1);
    }
    else if (auto37DA3AF5_val == 2) {
        DialogControlSelectItem(lib281DEC45_gv_zSS_MissionDifficultyDropdown, PlayerGroupAll(), 2);
    }
    else if (auto37DA3AF5_val == 3) {
        DialogControlSelectItem(lib281DEC45_gv_zSS_MissionDifficultyDropdown, PlayerGroupAll(), 3);
    }
    else if (auto37DA3AF5_val == 4) {
        DialogControlSelectItem(lib281DEC45_gv_zSS_MissionDifficultyDropdown, PlayerGroupAll(), 4);
    }
    else {
    }
    DialogControlHookup(lib281DEC45_gv_zSS_MissionPanel, c_triggerControlTypeButton, "ArmyButton");
    lib281DEC45_gv_zSS_MissionArmyButton = DialogControlLastCreated();
    DialogControlHookup(lib281DEC45_gv_zSS_MissionPanel, c_triggerControlTypeButton, "KerriganButton");
    lib281DEC45_gv_zSS_MissionKerriganButton = DialogControlLastCreated();
    DialogControlSetVisible(lib281DEC45_gv_zSS_MissionContactPlayButton, PlayerGroupAll(), true);
    DialogControlSetVisible(lib281DEC45_gv_zSS_MissionContactStopButton, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_UIMissionCreate_Init () {
    lib281DEC45_gt_ZSS_UIMissionCreate = TriggerCreate("lib281DEC45_gt_ZSS_UIMissionCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_UIMissionQuitOKClicked
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_UIMissionQuitOKClicked_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_UIMissionQuitOKClicked_Init () {
    lib281DEC45_gt_ZSS_UIMissionQuitOKClicked = TriggerCreate("lib281DEC45_gt_ZSS_UIMissionQuitOKClicked_Func");
    TriggerEnable(lib281DEC45_gt_ZSS_UIMissionQuitOKClicked, false);
    TriggerAddEventCustomDialogDismissed(lib281DEC45_gt_ZSS_UIMissionQuitOKClicked, c_playerAny, libNtve_ge_CustomDialogResult_c_customDialogResultYes);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_UIMissionQuitCancelClicked
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_UIMissionQuitCancelClicked_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gv_zSS_MissionQuitToggle = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_UIMissionQuitCancelClicked_Init () {
    lib281DEC45_gt_ZSS_UIMissionQuitCancelClicked = TriggerCreate("lib281DEC45_gt_ZSS_UIMissionQuitCancelClicked_Func");
    TriggerAddEventCustomDialogDismissed(lib281DEC45_gt_ZSS_UIMissionQuitCancelClicked, c_playerAny, libNtve_ge_CustomDialogResult_c_customDialogResultNo);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_UIMissionLaunchClicked
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_UIMissionLaunchClicked_Func (bool testConds, bool runActions) {
    int auto9461A71B_val;

    // Variable Declarations
    int lv_selectedDifficulty;
    bool lv_isSimulation;

    // Variable Initialization
    lv_selectedDifficulty = 2;

    // Conditions
    if (testConds) {
        if (!((lib281DEC45_gv_zSS_MissionLaunchButton != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == lib281DEC45_gv_zSS_MissionLaunchButton))) {
            return false;
        }

        if (!((lib281DEC45_gv_zSS_MissionQuitToggle == false))) {
            return false;
        }

        if (!((lib281DEC45_gf_CurrentRoom() == lib281DEC45_ge_Rooms_StoryRoomMissionScreen))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gv_zSS_MissionLaunchedToggle = true;
    ConversationDataStop();
    TransmissionClearAll();
    TriggerEnable(lib281DEC45_gt_ZSS_UIMissionLaunchClicked, false);
    TriggerEnable(lib281DEC45_gt_ZSS_UIMissionBackClicked, false);
    TriggerEnable(lib281DEC45_gt_ZSS_UIMissionPitchPlayClicked, false);
    TriggerEnable(lib281DEC45_gt_ZSS_UIMissionPitchStopClicked, false);
    DialogControlSetEnabled(lib281DEC45_gv_zSS_MissionDifficultyDropdown, PlayerGroupAll(), false);
    if ((lib281DEC45_gf_ZSS_HasPreMissionCinematic(lib281DEC45_gv_zSS_NextMission) == false)) {
        lib281DEC45_gf_ZSS_SoundFadeAll(1.0, false);
    }
    else {
    }
    libSwaC_gf_CinematicFade(false, 1.0, Color(0.00, 0.00, 0.00), true);
    DialogSetVisible(lib281DEC45_gv_zSS_MissionDialog, PlayerGroupAll(), false);
    Wait(0.0625, c_timeGame);
    libSwaC_gf_CinematicFade(true, 0.0, Color(0.00, 0.00, 0.00), true);
    lib281DEC45_gf_ZSS_PlayPreMissionCinematic(lib281DEC45_gv_zSS_NextMission);
    auto9461A71B_val = DialogControlGetSelectedItem(lib281DEC45_gv_zSS_MissionDifficultyDropdown, 1);
    if (auto9461A71B_val == 1) {
        lv_selectedDifficulty = 1;
    }
    else if (auto9461A71B_val == 2) {
        lv_selectedDifficulty = 2;
    }
    else if (auto9461A71B_val == 3) {
        lv_selectedDifficulty = 3;
    }
    else if (auto9461A71B_val == 4) {
        lv_selectedDifficulty = 4;
    }
    else {
    }
    if ((libSwaC_gf_StoryInSimulation() == true)) {
        lv_isSimulation = true;
        libSwaC_gf_StorySimulationEnd();
    }
    else {
    }
    libSwaC_gf_LaunchMissionFromStoryMode(lib281DEC45_gv_zSS_NextMission, lv_selectedDifficulty, lv_isSimulation);
    libSwaC_gf_LaunchMission(lib281DEC45_gv_zSS_NextMission, lv_isSimulation, lv_selectedDifficulty);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_UIMissionLaunchClicked_Init () {
    lib281DEC45_gt_ZSS_UIMissionLaunchClicked = TriggerCreate("lib281DEC45_gt_ZSS_UIMissionLaunchClicked_Func");
    TriggerAddEventDialogControl(lib281DEC45_gt_ZSS_UIMissionLaunchClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_UIMissionBackClicked
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_UIMissionBackClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib281DEC45_gv_zSS_MissionBackButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(lib281DEC45_gt_ZSS_UIMissionQuitOKClicked, false);
    if ((libSwaC_gf_StoryInSimulation() == true)) {
        libSwaC_gf_StorySimulationEnd();
        lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomMissionArchives);
    }
    else {
        libSwaC_gf_CinematicFade(false, 0.0, Color(0.00, 0.00, 0.00), true);
        lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomMainSet);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_UIMissionBackClicked_Init () {
    lib281DEC45_gt_ZSS_UIMissionBackClicked = TriggerCreate("lib281DEC45_gt_ZSS_UIMissionBackClicked_Func");
    TriggerAddEventDialogControl(lib281DEC45_gt_ZSS_UIMissionBackClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_UIMissionQuitClicked
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_UIMissionQuitClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib281DEC45_gv_zSS_MissionQuitButton))) {
            return false;
        }

        if (!((lib281DEC45_gv_zSS_MissionLaunchedToggle == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gv_zSS_MissionQuitToggle = true;
    TriggerEnable(lib281DEC45_gt_ZSS_UIMissionQuitOKClicked, true);
    UIShowCustomDialog(PlayerGroupAll(), libNtve_ge_CustomDialogType_c_customDialogTypeQuery, StringExternal("Param/Value/lib_281DEC45_501B0A5D"), StringToText(""), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_UIMissionQuitClicked_Init () {
    lib281DEC45_gt_ZSS_UIMissionQuitClicked = TriggerCreate("lib281DEC45_gt_ZSS_UIMissionQuitClicked_Func");
    TriggerAddEventDialogControl(lib281DEC45_gt_ZSS_UIMissionQuitClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_UIMissionPitchPlayClicked
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_UIMissionPitchPlayClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((lib281DEC45_gv_zSS_MissionContactPlayButton != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == lib281DEC45_gv_zSS_MissionContactPlayButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSwaC_gf_StoryInSimulation() == false)) {
        lib281DEC45_gv_zSS_MissionPitchPlayed = true;
    }
    else {
    }
    if ((libSwaC_gf_MissionPitch(lib281DEC45_gv_zSS_NextMission) == null)) {
        return true;
    }
    else {
    }
    lib281DEC45_gv_zSS_PitchPlaying = true;
    DialogControlSetVisible(lib281DEC45_gv_zSS_MissionContactPlayButton, PlayerGroupAll(), false);
    DialogControlSetVisible(lib281DEC45_gv_zSS_MissionContactStopButton, PlayerGroupAll(), true);
    lib281DEC45_gf_ZSS_CharacterPortraitPitchPlay(libSwaC_gf_MissionPitch(lib281DEC45_gv_zSS_NextMission), PortraitGetTriggerControl(lib281DEC45_gv_zSS_MissionContactPortrait));
    lib281DEC45_gv_zSS_PitchPlaying = false;
    DialogControlSetVisible(lib281DEC45_gv_zSS_MissionContactPlayButton, PlayerGroupAll(), true);
    DialogControlSetVisible(lib281DEC45_gv_zSS_MissionContactStopButton, PlayerGroupAll(), false);
    lib281DEC45_gf_ZSS_UIMissionUpdatePortrait();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_UIMissionPitchPlayClicked_Init () {
    lib281DEC45_gt_ZSS_UIMissionPitchPlayClicked = TriggerCreate("lib281DEC45_gt_ZSS_UIMissionPitchPlayClicked_Func");
    TriggerAddEventDialogControl(lib281DEC45_gt_ZSS_UIMissionPitchPlayClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_UIMissionPitchStopClicked
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_UIMissionPitchStopClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((lib281DEC45_gv_zSS_MissionContactStopButton != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == lib281DEC45_gv_zSS_MissionContactStopButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ConversationDataStop();
    lib281DEC45_gv_zSS_PitchPlaying = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_UIMissionPitchStopClicked_Init () {
    lib281DEC45_gt_ZSS_UIMissionPitchStopClicked = TriggerCreate("lib281DEC45_gt_ZSS_UIMissionPitchStopClicked_Func");
    TriggerAddEventDialogControl(lib281DEC45_gt_ZSS_UIMissionPitchStopClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_UIMissionArmyClicked
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_UIMissionArmyClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((lib281DEC45_gv_zSS_MissionArmyButton != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == lib281DEC45_gv_zSS_MissionArmyButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomArchivesArmyScreen);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_UIMissionArmyClicked_Init () {
    lib281DEC45_gt_ZSS_UIMissionArmyClicked = TriggerCreate("lib281DEC45_gt_ZSS_UIMissionArmyClicked_Func");
    TriggerEnable(lib281DEC45_gt_ZSS_UIMissionArmyClicked, false);
    TriggerAddEventDialogControl(lib281DEC45_gt_ZSS_UIMissionArmyClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_UIMissionKerriganClicked
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_UIMissionKerriganClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((lib281DEC45_gv_zSS_MissionKerriganButton != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == lib281DEC45_gv_zSS_MissionKerriganButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomKerriganScreen);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_UIMissionKerriganClicked_Init () {
    lib281DEC45_gt_ZSS_UIMissionKerriganClicked = TriggerCreate("lib281DEC45_gt_ZSS_UIMissionKerriganClicked_Func");
    TriggerEnable(lib281DEC45_gt_ZSS_UIMissionKerriganClicked, false);
    TriggerAddEventDialogControl(lib281DEC45_gt_ZSS_UIMissionKerriganClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_UIMainInit
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_UIMainInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__ButtonIndex;

    // Variable Initialization
    lv__ButtonIndex = lib281DEC45_ge_ZSS_UIMainBottomButtonType_BottomButtonNone;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogControlCreateFromTemplate(lib281DEC45_gv_zSS_ScreenDialog, c_triggerControlTypePanel, "StorySet/StorySetTemplate");
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    lib281DEC45_gv_zSS_StoryPanel = DialogControlLastCreated();
    lib281DEC45_gf_ZSS_UIMainCreateBottomButtons();
    DialogControlHookup(lib281DEC45_gv_zSS_StoryPanel, c_triggerControlTypePanel, "ScreenTitleFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lib281DEC45_gv_zSS_StoryPanel, c_triggerControlTypePanel, "SubtitleAnchor");
    lib281DEC45_gv_zSS_UIMainSetSubtitleAnchor = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_UIMainInit_Init () {
    lib281DEC45_gt_ZSS_UIMainInit = TriggerCreate("lib281DEC45_gt_ZSS_UIMainInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_UIMainBottomButtonClicked
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_UIMainBottomButtonClicked_Func (bool testConds, bool runActions) {
    int autoBD0C2743_val;

    // Variable Declarations
    int lv_buttonIndex;

    // Variable Initialization
    lv_buttonIndex = lib281DEC45_ge_ZSS_UIMainBottomButtonType_BottomButtonNone;

    // Conditions
    if (testConds) {
        if (!((lib281DEC45_gf_CurrentStoryActivity() == lib281DEC45_ge_StoryActivities_ViewingRoom))) {
            return false;
        }

        if (!((lib281DEC45_gf_CurrentRoom() == lib281DEC45_ge_Rooms_StoryRoomMainSet))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoBD0C2743_val = EventDialogControl();
    if (autoBD0C2743_val == lib281DEC45_gv_zSS_UIMainBottomButtons[(lib281DEC45_ge_ZSS_UIMainBottomButtonType_BottomButtonMission)]) {
        UserDataSetInt("StoryStates", "Bottom Bar Mission Clicked", "value", 1, 1);
        lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomMissionScreen);
    }
    else if (autoBD0C2743_val == lib281DEC45_gv_zSS_UIMainBottomButtons[(lib281DEC45_ge_ZSS_UIMainBottomButtonType_BottomButtonTravel)]) {
        UserDataSetInt("StoryStates", "Bottom Bar Travel Clicked", "value", 1, 1);
        lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomTravelScreen);
    }
    else if (autoBD0C2743_val == lib281DEC45_gv_zSS_UIMainBottomButtons[(lib281DEC45_ge_ZSS_UIMainBottomButtonType_BottomButtonEvolution)]) {
        UserDataSetInt("StoryStates", "Bottom Bar Evolution Clicked", "value", 1, 1);
        lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomEggRoom);
    }
    else if (autoBD0C2743_val == lib281DEC45_gv_zSS_UIMainBottomButtons[(lib281DEC45_ge_ZSS_UIMainBottomButtonType_BottomButtonKerrigan)]) {
        UserDataSetInt("StoryStates", "Bottom Bar Kerrigan Clicked", "value", 1, 1);
        lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomKerriganScreen);
    }
    else if (autoBD0C2743_val == lib281DEC45_gv_zSS_UIMainBottomButtons[(lib281DEC45_ge_ZSS_UIMainBottomButtonType_BottomButtonArchives)]) {
        UserDataSetInt("StoryStates", "Bottom Bar Swarm Clicked", "value", 1, 1);
        lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomMissionArchives);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_UIMainBottomButtonClicked_Init () {
    lib281DEC45_gt_ZSS_UIMainBottomButtonClicked = TriggerCreate("lib281DEC45_gt_ZSS_UIMainBottomButtonClicked_Func");
    TriggerAddEventDialogControl(lib281DEC45_gt_ZSS_UIMainBottomButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_UIKerriganExited
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_UIKerriganExited_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSwaC_gf_StoryInSimulation() == true)) {
        lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomMissionScreen);
    }
    else {
        lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomMainSet);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_UIKerriganExited_Init () {
    lib281DEC45_gt_ZSS_UIKerriganExited = TriggerCreate("lib281DEC45_gt_ZSS_UIKerriganExited_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_UIArmySubscreenExited
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_UIArmySubscreenExited_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_UIArmySubscreenExited_Init () {
    lib281DEC45_gt_ZSS_UIArmySubscreenExited = TriggerCreate("lib281DEC45_gt_ZSS_UIArmySubscreenExited_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_UILibraryWindowOpened
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_UILibraryWindowOpened_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_ShowHideStoryUI(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_UILibraryWindowOpened_Init () {
    lib281DEC45_gt_ZSS_UILibraryWindowOpened = TriggerCreate("lib281DEC45_gt_ZSS_UILibraryWindowOpened_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_UILibraryWindowClosed
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_UILibraryWindowClosed_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_ShowHideStoryUI(true);
    lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomMainSet);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_UILibraryWindowClosed_Init () {
    lib281DEC45_gt_ZSS_UILibraryWindowClosed = TriggerCreate("lib281DEC45_gt_ZSS_UILibraryWindowClosed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_DebugSceneInit
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_DebugSceneInit_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogCreate(750, 850, c_anchorCenter, 0, 0, true);
    lib281DEC45_gv_zSS_DebugSceneDialog = DialogLastCreated();
    lib281DEC45_gf_ZSS_DebugSceneItemInit(0, "Pre-render - Zerg Intro", true, true);
    lib281DEC45_gf_ZSS_DebugSceneItemInit(1, "Zerg01 - Identity Crisis", true, true);
    lib281DEC45_gf_ZSS_DebugSceneItemInit(2, "Zerg02 - Dominion Calling", true, true);
    lib281DEC45_gf_ZSS_DebugSceneItemInit(3, "Zerg03 - Choices", true, true);
    lib281DEC45_gf_ZSS_DebugSceneItemInit(4, "Zerg04 - New Beginnings", true, true);
    lib281DEC45_gf_ZSS_DebugSceneItemInit(5, "Zerg05 - Char Arc", true, true);
    lib281DEC45_gf_ZSS_DebugSceneItemInit(6, "Zerg06 - Char Arc Alt", true, true);
    lib281DEC45_gf_ZSS_DebugSceneItemInit(7, "Zerg07 - Now Zerus", true, true);
    lib281DEC45_gf_ZSS_DebugSceneItemInit(8, "Zerg08 - Wings", true, true);
    lib281DEC45_gf_ZSS_DebugSceneItemInit(9, "Zerg09 - Hybrid Arc", true, true);
    lib281DEC45_gf_ZSS_DebugSceneItemInit(10, "Zerg10 - Reunited", true, true);
    lib281DEC45_gf_ZSS_DebugSceneItemInit(0, "Pre-render - Kerrigan Ascendant", true, true);
    libNtve_gf_CreateDialogItemButton(lib281DEC45_gv_zSS_DebugSceneDialog, 200, 50, c_anchorBottom, 0, 50, StringToText(""), StringExternal("Param/Value/lib_281DEC45_11F60812"), "");
    lib281DEC45_gv_zSS_DebugSceneCloseButton = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_DebugSceneInit_Init () {
    lib281DEC45_gt_ZSS_DebugSceneInit = TriggerCreate("lib281DEC45_gt_ZSS_DebugSceneInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_DebugSceneUsed
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_DebugSceneUsed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((lib281DEC45_gf_CurrentStoryActivity() == lib281DEC45_ge_StoryActivities_ViewingRoom))) {
            return false;
        }

        if (!((lib281DEC45_gf_CurrentRoom() == lib281DEC45_ge_Rooms_StoryRoomMainSet))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomDebugSceneCheat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_DebugSceneUsed_Init () {
    lib281DEC45_gt_ZSS_DebugSceneUsed = TriggerCreate("lib281DEC45_gt_ZSS_DebugSceneUsed_Func");
    TriggerAddEventCheatUsed(lib281DEC45_gt_ZSS_DebugSceneUsed, c_playerAny, c_gameCheatScene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_DebugSceneButtonPushed
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_DebugSceneButtonPushed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((lib281DEC45_gv_zSS_DebugSceneDialog != c_invalidDialogId))) {
            return false;
        }

        if (!((DialogIsVisible(lib281DEC45_gv_zSS_DebugSceneDialog, 1) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == lib281DEC45_gv_zSS_DebugSceneCloseButton)) {
        DialogSetVisible(lib281DEC45_gv_zSS_DebugSceneDialog, PlayerGroupAll(), false);
        libNtve_gf_HideGameUI(true, PlayerGroupAll());
        lib281DEC45_gf_EnterRoom(lib281DEC45_gv_zSS_DebugScenePreviousRoom);
        return true;
    }
    else {
    }
    IntLoopBegin(1, lib281DEC45_gv_zSS_DebugSceneCount);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((EventDialogControl() == lib281DEC45_gv_zSS_DebugSceneAnimaticButtons[IntLoopCurrent()])) {
            DialogSetVisible(lib281DEC45_gv_zSS_DebugSceneDialog, PlayerGroupAll(), false);
            libSwaC_gf_PlayCinematic(lib281DEC45_gv_zSS_DebugSceneList[IntLoopCurrent()], true);
            DialogSetVisible(lib281DEC45_gv_zSS_DebugSceneDialog, PlayerGroupAll(), true);
            return true;
        }
        else {
        }
    }
    IntLoopEnd();
    IntLoopBegin(1, lib281DEC45_gv_zSS_DebugSceneCount);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((EventDialogControl() == lib281DEC45_gv_zSS_DebugSceneRenderButtons[IntLoopCurrent()])) {
            DialogSetVisible(lib281DEC45_gv_zSS_DebugSceneDialog, PlayerGroupAll(), false);
            lib281DEC45_gf_ZSS_DebugScenePerfTestStart(UserDataGetText("Scenes", lib281DEC45_gv_zSS_DebugSceneList[IntLoopCurrent()], "name", 1));
            libSwaC_gf_PlayCinematic(lib281DEC45_gv_zSS_DebugSceneList[IntLoopCurrent()], false);
            lib281DEC45_gf_ZSS_DebugPerfTestStop();
            DialogSetVisible(lib281DEC45_gv_zSS_DebugSceneDialog, PlayerGroupAll(), true);
            return true;
        }
        else {
        }
    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_DebugSceneButtonPushed_Init () {
    lib281DEC45_gt_ZSS_DebugSceneButtonPushed = TriggerCreate("lib281DEC45_gt_ZSS_DebugSceneButtonPushed_Func");
    TriggerAddEventDialogControl(lib281DEC45_gt_ZSS_DebugSceneButtonPushed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_DebugPerfTestFPSPoll
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_DebugPerfTestFPSPoll_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        PerfTestGetFPS();
        Wait(0.06, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_DebugPerfTestFPSPoll_Init () {
    lib281DEC45_gt_ZSS_DebugPerfTestFPSPoll = TriggerCreate("lib281DEC45_gt_ZSS_DebugPerfTestFPSPoll_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_DebugProgressMapComplete
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_DebugProgressMapComplete_Func (bool testConds, bool runActions) {
    string auto6147AA0C_val;
    string autoEE78933C_val;

    // Variable Declarations
    string lv_indexCharacter;
    string lv_indexHotspot;
    string lv_completedMission;
    string lv_lastCompleted;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSwaC_gf_StoryMapTypeCheck(libSwaC_gf_CurrentMap(), c_mapKindStory) == true)) {
        lv_lastCompleted = libSwaC_gf_LastSuccessfulMission();
    }
    else {
        lv_lastCompleted = libSwaC_gf_CurrentMap();
    }
    lv_completedMission = (libSwaC_gf_StoryEventParameter(libSwaC_ge_ZS_Event_ProgressMapCompleted, 1));
    lib281DEC45_gf_ZSS_DebugProgressRunAllPlanetConvos(libSwaC_gf_StoryMapPlanet(libSwaC_gf_CurrentMap()));
    if ((libSwaC_gf_StoryMapPlanet(libSwaC_gf_CurrentMap()) != libSwaC_gf_StoryMapPlanet(lv_completedMission))) {
        lib281DEC45_gf_ZSS_DebugProgressRunAllPlanetConvos(libSwaC_gf_StoryMapPlanet(lv_completedMission));
    }
    else {
    }
    auto6147AA0C_val = lv_completedMission;
    if (auto6147AA0C_val == "ZLab1") {
        libSwaC_gf_SetStoryScenePlayed("Pre-render - Zerg Intro", true);
        libSwaC_gf_SetStoryScenePlayed("Zerg01 - Identity Crisis", true);
    }
    else if (auto6147AA0C_val == "ZLab2") {
        ConversationDataSimulateRun("zDebrief_Lab01");
        libSwaC_gf_SetStoryScenePlayed("Zerg02 - Dominion Calling", true);
    }
    else if (auto6147AA0C_val == "ZLab3") {
        libSwaC_gf_SetStoryScenePlayed("Zerg03 - Choices", true);
    }
    else if (auto6147AA0C_val == "ZChar1") {
        UserDataSetInt("StoryStates", "Bottom Bar Mission Clicked", "value", 1, 1);
    }
    else if (auto6147AA0C_val == "ZChar2") {
        UserDataSetInt("StoryStates", "Bottom Bar Kerrigan Clicked", "value", 1, 1);
        ConversationDataSimulateRun("zDebrief_Char01");
    }
    else if (auto6147AA0C_val == "ZChar3") {
        ConversationDataSimulateRun("zScripted_EvoMissionsUnlock");
        UserDataSetInt("StoryStates", "Evolution Scene Played", "value", 1, 1);
    }
    else if (auto6147AA0C_val == "ZExpedition1") {
        UserDataSetInt("StoryStates", "Bottom Bar Mission Clicked", "value", 1, 1);
    }
    else if (auto6147AA0C_val == "ZExpedition2") {
        UserDataSetInt("StoryStates", "Bottom Bar Kerrigan Clicked", "value", 1, 1);
        ConversationDataSimulateRun("zDebrief_Expedition01");
    }
    else if (auto6147AA0C_val == "ZExpedition3") {
        ConversationDataSimulateRun("zScripted_EvoMissionsUnlock");
        UserDataSetInt("StoryStates", "Evolution Scene Played", "value", 1, 1);
    }
    else if (auto6147AA0C_val == "ZHybrid1") {
        ConversationDataSimulateRun("zScripted_HybridArcBefore");
    }
    else if (auto6147AA0C_val == "ZHybrid3") {
        ConversationDataSimulateRun("zDebrief_Hybrid02");
    }
    else if (auto6147AA0C_val == "ZKorhal1") {
        ConversationDataSimulateRun("zScripted_KorhalArcBefore");
    }
    else if (auto6147AA0C_val == "ZKorhal2") {
        ConversationDataSimulateRun("zDebrief_Korhal01");
    }
    else if (auto6147AA0C_val == "ZZerus1") {
        ConversationDataSimulateRun("zScripted_Zerus01Before");
    }
    else if (auto6147AA0C_val == "ZSpace1") {
        ConversationDataSimulateRun("zScripted_Space01Travel");
    }
    else {
    }
    autoEE78933C_val = lv_lastCompleted;
    if (autoEE78933C_val == "ZLab3") {
        UserDataSetInt("StoryStates", "Army UI Visited", "value", 1, 1);
        UserDataSetInt("StoryStates", "Bottom Bar Evolution Clicked", "value", 1, 1);
        libSwaC_gf_SetStoryScenePlayed("Zerg04 - New Beginnings", true);
        ConversationDataSimulateRun("zScripted_ZAdjutantIntro");
        ConversationDataSimulateRun("zScripted_EvolutionMaster_First");
    }
    else if (autoEE78933C_val == "ZChar3") {
        libSwaC_gf_SetStoryScenePlayed("Zerg05 - Char Arc", true);
        libSwaC_gf_SetStoryScenePlayed("Zerg07 - Now Zerus", true);
        UserDataSetInt("StoryStates", "Bottom Bar Swarm Clicked", "value", 1, 1);
        UserDataSetInt("StoryStates", "Bottom Bar Travel Clicked", "value", 1, 1);
    }
    else if (autoEE78933C_val == "ZExpedition3") {
        libSwaC_gf_SetStoryScenePlayed("Zerg07 - Now Zerus", true);
        UserDataSetInt("StoryStates", "Bottom Bar Swarm Clicked", "value", 1, 1);
        UserDataSetInt("StoryStates", "Bottom Bar Travel Clicked", "value", 1, 1);
    }
    else if (autoEE78933C_val == "ZZerus2") {
        libSwaC_gf_SetStoryScenePlayed("Zerg08 - Wings", true);
    }
    else if (autoEE78933C_val == "ZHybrid3") {
        libSwaC_gf_SetStoryScenePlayed("Zerg09 - Hybrid Arc", true);
        ConversationDataSimulateRun("zDebrief_Hybrid03");
    }
    else if (autoEE78933C_val == "ZSpace2") {
        libSwaC_gf_SetStoryScenePlayed("Zerg10 - Reunited", true);
    }
    else if (autoEE78933C_val == "ZZerus3") {
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_DebugProgressMapComplete_Init () {
    lib281DEC45_gt_ZSS_DebugProgressMapComplete = TriggerCreate("lib281DEC45_gt_ZSS_DebugProgressMapComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_DebugProgressSave
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_DebugProgressSave_Func (bool testConds, bool runActions) {
    int auto9E31730B_ai;
    int auto9E31730B_ae;

    // Variable Declarations
    string lv_indexCharacter;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    BankLoad(libSwaC_gf_StoryEventParameter(libSwaC_ge_ZS_Event_ProgressCheatSave, 1), 1);
    UserDataSaveType("Character", BankLastCreated(), "Characters");
    auto9E31730B_ai = 1;
    auto9E31730B_ae = UserDataInstanceCount("Character")+1;
    while (auto9E31730B_ai < auto9E31730B_ae) {
        lv_indexCharacter = UserDataInstance("Character", auto9E31730B_ai);
        ConversationDataSaveNodeState(lib281DEC45_gf_ZSS_CharacterConversation(lv_indexCharacter), BankLastCreated(), "Conversations");
        auto9E31730B_ai = auto9E31730B_ai+1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_DebugProgressSave_Init () {
    lib281DEC45_gt_ZSS_DebugProgressSave = TriggerCreate("lib281DEC45_gt_ZSS_DebugProgressSave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_DebugProgressLoad
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_DebugProgressLoad_Func (bool testConds, bool runActions) {
    int auto3B640459_ai;
    int auto3B640459_ae;

    // Variable Declarations
    string lv_indexCharacter;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    BankLoad(libSwaC_gf_StoryEventParameter(libSwaC_ge_ZS_Event_ProgressCheatLoad, 1), 1);
    UserDataLoadType("Character", BankLastCreated(), "Characters");
    auto3B640459_ai = 1;
    auto3B640459_ae = UserDataInstanceCount("Character")+1;
    while (auto3B640459_ai < auto3B640459_ae) {
        lv_indexCharacter = UserDataInstance("Character", auto3B640459_ai);
        ConversationDataResetNodeState(lib281DEC45_gf_ZSS_CharacterConversation(lv_indexCharacter));
        ConversationDataLoadNodeState(lib281DEC45_gf_ZSS_CharacterConversation(lv_indexCharacter), BankLastCreated(), "Conversations");
        auto3B640459_ai = auto3B640459_ai+1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_DebugProgressLoad_Init () {
    lib281DEC45_gt_ZSS_DebugProgressLoad = TriggerCreate("lib281DEC45_gt_ZSS_DebugProgressLoad_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_DebugProgressCheatUsed
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_DebugProgressCheatUsed_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    lib281DEC45_gf_ShowHideStoryUI(false);
    if ((lib281DEC45_gf_CurrentRoom() == lib281DEC45_ge_Rooms_StoryRoomKerriganScreen)) {
        libSwaC_gf_ZS_CloseKerriganCustomizationWindow();
    }
    else {
    }
    if ((lib281DEC45_gf_CurrentRoom() == lib281DEC45_ge_Rooms_StoryRoomEggRoom)) {
        libSwaC_gf_HideEggRoom();
    }
    else {
    }
    lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomDebugProgressCheat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_DebugProgressCheatUsed_Init () {
    lib281DEC45_gt_ZSS_DebugProgressCheatUsed = TriggerCreate("lib281DEC45_gt_ZSS_DebugProgressCheatUsed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_DebugProgressCheatCancelled
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_DebugProgressCheatCancelled_Func (bool testConds, bool runActions) {
    int auto26759A66_val;

    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_ZSS_SetStoryMap(libSwaC_gf_CurrentMap());
    auto26759A66_val = lib281DEC45_gv_zSS_LastUniqueRoom;
    if (auto26759A66_val == lib281DEC45_ge_Rooms_StoryRoomTravelScreen) {
        lib281DEC45_gf_EnterRoom(lib281DEC45_gv_zSS_LastUniqueRoom);
    }
    else if (auto26759A66_val == lib281DEC45_ge_Rooms_StoryRoomMissionScreen) {
        lib281DEC45_gf_EnterRoom(lib281DEC45_gv_zSS_LastUniqueRoom);
    }
    else if (auto26759A66_val == lib281DEC45_ge_Rooms_StoryRoomEggRoom) {
        lib281DEC45_gf_EnterRoom(lib281DEC45_gv_zSS_LastUniqueRoom);
    }
    else {
        lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomMainSet);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_DebugProgressCheatCancelled_Init () {
    lib281DEC45_gt_ZSS_DebugProgressCheatCancelled = TriggerCreate("lib281DEC45_gt_ZSS_DebugProgressCheatCancelled_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_DebugStoryCheat
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_DebugStoryCheat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(lib281DEC45_gt_ZSS_DebugStoryCheatListSelection, true);
    TriggerEnable(lib281DEC45_gt_ZSS_DebugStoryCheatSceneListSelect, true);
    TriggerEnable(lib281DEC45_gt_ZSS_DebugStoryCheatStateChange, true);
    TriggerEnable(lib281DEC45_gt_ZSS_DebugStoryCheatChecked, true);
    TriggerEnable(lib281DEC45_gt_ZSS_DebugStoryInteractiveReset, true);
    TriggerEnable(lib281DEC45_gt_ZSS_DebugStoryCheatPlay, true);
    TriggerEnable(lib281DEC45_gt_ZSS_DebugStoryCheatLoad, true);
    TriggerEnable(lib281DEC45_gt_ZSS_DebugStoryCheatClose, true);
    lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomDebugStoryCheat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_DebugStoryCheat_Init () {
    lib281DEC45_gt_ZSS_DebugStoryCheat = TriggerCreate("lib281DEC45_gt_ZSS_DebugStoryCheat_Func");
    TriggerAddEventChatMessage(lib281DEC45_gt_ZSS_DebugStoryCheat, c_playerAny, "story", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_DebugStoryCheatInit
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_DebugStoryCheatInit_Func (bool testConds, bool runActions) {
    int auto46F413A7_ae;
    int auto46F413A7_ai;
    int auto9113118B_ae;
    int auto9113118B_ai;
    int auto4A0C1B53_ae;
    int auto4A0C1B53_ai;

    // Variable Declarations
    int lv_index;
    int lv_y;
    const int lv_titleWidth = 150;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogCreate(1400, 1000, c_anchorCenter, 0, 0, true);
    lib281DEC45_gv_zSS_DebugStoryDialog = DialogLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    lib281DEC45_gv_zSS_DebugStoryTypeList = DialogControlLastCreated();
    DialogControlSetSize(lib281DEC45_gv_zSS_DebugStoryTypeList, PlayerGroupAll(), 200, 50);
    DialogControlSetPosition(lib281DEC45_gv_zSS_DebugStoryTypeList, PlayerGroupAll(), c_anchorTopLeft, 50, 50);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeListBox);
    lib281DEC45_gv_zSS_DebugStorySceneList = DialogControlLastCreated();
    DialogControlSetSize(lib281DEC45_gv_zSS_DebugStorySceneList, PlayerGroupAll(), 400, 300);
    DialogControlSetPositionRelative(lib281DEC45_gv_zSS_DebugStorySceneList, PlayerGroupAll(), c_anchorTopLeft, lib281DEC45_gv_zSS_DebugStoryTypeList, c_anchorTopRight, 50, 0);
    lib281DEC45_gv_zSS_DebugStorySceneTypes[(lib281DEC45_ge_ZSS_DebugStoryType_ZSS_DebugStoryTypeScriptedScene)] = "Scripted Scene";
    lib281DEC45_gv_zSS_DebugStorySceneTypes[(lib281DEC45_ge_ZSS_DebugStoryType_ZSS_DebugStoryTypeDebrief)] = "Debrief";
    lib281DEC45_gv_zSS_DebugStorySceneTypes[(lib281DEC45_ge_ZSS_DebugStoryType_ZSS_DebugStoryTypeConversation)] = "Conversation";
    lib281DEC45_gv_zSS_DebugStorySceneTypes[(lib281DEC45_ge_ZSS_DebugStoryType_ZSS_DebugStoryTypeBriefing)] = "Briefing";
    auto46F413A7_ae = ((lib281DEC45_ge_ZSS_DebugStoryType_ZSS_DebugStoryTypeLast) - 1);
    auto46F413A7_ai = 1;
    lv_index = 1;
    for ( ; ( (auto46F413A7_ai >= 0 && lv_index <= auto46F413A7_ae) || (auto46F413A7_ai <= 0 && lv_index >= auto46F413A7_ae) ) ; lv_index += auto46F413A7_ai ) {
        DialogControlAddItem(lib281DEC45_gv_zSS_DebugStoryTypeList, PlayerGroupAll(), StringToText(lib281DEC45_gv_zSS_DebugStorySceneTypes[lv_index]));
    }
    libNtve_gf_CreateDialogItemButton(lib281DEC45_gv_zSS_DebugStoryDialog, 200, 50, c_anchorBottomLeft, 50, 50, StringToText(""), StringExternal("Param/Value/lib_281DEC45_E71A5EF8"), "");
    lib281DEC45_gv_zSS_DebugStoryPlayButton = DialogControlLastCreated();
    DialogControlSetPositionRelative(lib281DEC45_gv_zSS_DebugStoryPlayButton, PlayerGroupAll(), c_anchorTopLeft, lib281DEC45_gv_zSS_DebugStoryTypeList, c_anchorTopLeft, 0, 350);
    libNtve_gf_CreateDialogItemButton(lib281DEC45_gv_zSS_DebugStoryDialog, 200, 50, c_anchorBottomRight, 50, 50, StringToText(""), StringExternal("Param/Value/lib_281DEC45_3FDA3873"), "");
    lib281DEC45_gv_zSS_DebugStoryCloseButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(lib281DEC45_gv_zSS_DebugStoryDialog, 200, 50, c_anchorBottomLeft, 50, 50, StringToText(""), StringExternal("Param/Value/lib_281DEC45_9185878E"), "");
    lib281DEC45_gv_zSS_DebugStoryLoadButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(lib281DEC45_gv_zSS_DebugStoryDialog, 200, 50, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/lib_281DEC45_EBC1823B"), Color(100,100,100), false, 2.0);
    lib281DEC45_gv_zSS_DebugStoryKerriganTypeLabel = DialogControlLastCreated();
    DialogControlSetPositionRelative(lib281DEC45_gv_zSS_DebugStoryKerriganTypeLabel, PlayerGroupAll(), c_anchorLeft, lib281DEC45_gv_zSS_DebugStoryPlayButton, c_anchorRight, 20, 15);
    DialogControlCreate(lib281DEC45_gv_zSS_DebugStoryDialog, c_triggerControlTypeCheckBox);
    lib281DEC45_gv_zSS_DebugStoryKerriganTypeCheckbox = DialogControlLastCreated();
    DialogControlSetPositionRelative(lib281DEC45_gv_zSS_DebugStoryKerriganTypeCheckbox, PlayerGroupAll(), c_anchorLeft, lib281DEC45_gv_zSS_DebugStoryKerriganTypeLabel, c_anchorRight, 0, -15);
    DialogControlCreate(lib281DEC45_gv_zSS_DebugStoryDialog, c_triggerControlTypeListBox);
    lib281DEC45_gv_zSS_DebugStoryStateList = DialogControlLastCreated();
    DialogControlSetSize(lib281DEC45_gv_zSS_DebugStoryStateList, PlayerGroupAll(), 400, 400);
    DialogControlSetPositionRelative(lib281DEC45_gv_zSS_DebugStoryStateList, PlayerGroupAll(), c_anchorTopLeft, lib281DEC45_gv_zSS_DebugStoryPlayButton, c_anchorBottomLeft, 0, 50);
    auto9113118B_ae = UserDataInstanceCount("WriterStates");
    auto9113118B_ai = 1;
    lv_index = 1;
    for ( ; ( (auto9113118B_ai >= 0 && lv_index <= auto9113118B_ae) || (auto9113118B_ai <= 0 && lv_index >= auto9113118B_ae) ) ; lv_index += auto9113118B_ai ) {
        DialogControlAddItem(lib281DEC45_gv_zSS_DebugStoryStateList, PlayerGroupAll(), StringToText((UserDataInstance("WriterStates", lv_index))));
    }
    auto4A0C1B53_ae = UserDataInstanceCount("StoryStates");
    auto4A0C1B53_ai = 1;
    lv_index = 1;
    for ( ; ( (auto4A0C1B53_ai >= 0 && lv_index <= auto4A0C1B53_ae) || (auto4A0C1B53_ai <= 0 && lv_index >= auto4A0C1B53_ae) ) ; lv_index += auto4A0C1B53_ai ) {
        DialogControlAddItem(lib281DEC45_gv_zSS_DebugStoryStateList, PlayerGroupAll(), StringToText((UserDataInstance("StoryStates", lv_index))));
    }
    DialogControlCreate(lib281DEC45_gv_zSS_DebugStoryDialog, c_triggerControlTypeEditBox);
    lib281DEC45_gv_zSS_DebugStoryStateEditBox = DialogControlLastCreated();
    DialogControlSetSize(lib281DEC45_gv_zSS_DebugStoryStateEditBox, PlayerGroupAll(), 100, 50);
    DialogControlSetPositionRelative(lib281DEC45_gv_zSS_DebugStoryStateEditBox, PlayerGroupAll(), c_anchorTopLeft, lib281DEC45_gv_zSS_DebugStoryStateList, c_anchorTopRight, 50, 0);
    libNtve_gf_CreateDialogItemLabel(lib281DEC45_gv_zSS_DebugStoryDialog, lv_titleWidth, 50, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/lib_281DEC45_393257D8"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20Bold", PlayerGroupAll());
    lib281DEC45_gv_zSS_DebugStoryEnabledLabel = DialogControlLastCreated();
    DialogControlSetPositionRelative(lib281DEC45_gv_zSS_DebugStoryEnabledLabel, PlayerGroupAll(), c_anchorBottomLeft, lib281DEC45_gv_zSS_DebugStoryStateEditBox, c_anchorTopRight, (lib281DEC45_gv_zSSC_DebugStoryNameWidth+(lib281DEC45_gv_zSSC_DebugStoryMargin*2)), 0);
    libNtve_gf_CreateDialogItemLabel(lib281DEC45_gv_zSS_DebugStoryDialog, 150, 50, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/lib_281DEC45_140E5644"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20Bold", PlayerGroupAll());
    lib281DEC45_gv_zSS_DebugStoryAmbientLabel = DialogControlLastCreated();
    DialogControlSetPositionRelative(lib281DEC45_gv_zSS_DebugStoryAmbientLabel, PlayerGroupAll(), c_anchorTopLeft, lib281DEC45_gv_zSS_DebugStoryEnabledLabel, c_anchorTopRight, lib281DEC45_gv_zSSC_DebugStoryMargin, 0);
    lv_y = 0;
    lv_index = 1;
    lib281DEC45_gf_ZSS_DebugStoryCheatInitInteractive("Character", "Kerrigan");
    lib281DEC45_gf_ZSS_DebugStoryCheatInitInteractive("Character", "Zerg Adjutant");
    lib281DEC45_gf_ZSS_DebugStoryCheatInitInteractive("Character", "Zagara");
    lib281DEC45_gf_ZSS_DebugStoryCheatInitInteractive("Character", "Primal Advisor");
    lib281DEC45_gf_ZSS_DebugStoryCheatInitInteractive("Character", "Primal Ancient");
    lib281DEC45_gf_ZSS_DebugStoryCheatInitInteractive("Character", "Stukov");
    lib281DEC45_gf_ZSS_DebugStoryCheatInitInteractive("Character", "Protoss Prisoner");
    lib281DEC45_gf_ZSS_DebugStoryCheatInitInteractive("Character", "Evolution Master");
    lib281DEC45_gf_ZSS_DebugStoryCheatInitInteractive("Character", "Hotspot - Char - Warfield's Compound");
    lib281DEC45_gf_ZSS_DebugStoryCheatInitInteractive("Character", "Hotspot - Expedition - Hatchery");
    lib281DEC45_gf_ZSS_DebugStoryCheatInitInteractive("Character", "Hotspot - Hybrid - Station");
    lib281DEC45_gf_ZSS_DebugStoryCheatInitInteractive("Character", "Hotspot - Korhal - Palace");
    lib281DEC45_gf_ZSS_DebugStoryCheatInitInteractive("Character", "Hotspot - Korhal - Planet");
    lib281DEC45_gf_ZSS_DebugStoryCheatInitInteractive("Character", "Hotspot - Space - Hyperion");
    lib281DEC45_gv_zSS_DebugStoryOriginalZ2Age = libSwaC_gf_MissionStatusAge("ZZerus2", libSwaC_ge_MissionStatus_Completed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_DebugStoryCheatInit_Init () {
    lib281DEC45_gt_ZSS_DebugStoryCheatInit = TriggerCreate("lib281DEC45_gt_ZSS_DebugStoryCheatInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_DebugStoryCheatListSelection
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_DebugStoryCheatListSelection_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((((lib281DEC45_gv_zSS_DebugStoryTypeList != c_invalidDialogControlId) && (EventDialogControl() == lib281DEC45_gv_zSS_DebugStoryTypeList)) || ((lib281DEC45_gv_zSS_DebugStoryStateList != c_invalidDialogControlId) && (EventDialogControl() == lib281DEC45_gv_zSS_DebugStoryStateList))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((((EventDialogControl() == lib281DEC45_gv_zSS_DebugStoryStateList) && (DialogControlGetSelectedItem(EventDialogControl(), 1) == lib281DEC45_gv_zSS_DebugStoryCurrentStateIndex)) || ((EventDialogControl() == lib281DEC45_gv_zSS_DebugStoryTypeList) && (DialogControlGetSelectedItem(EventDialogControl(), 1) == lib281DEC45_gv_zSS_DebugStoryCurrentTypeIndex)))) {
        return true;
    }
    else {
    }
    lib281DEC45_gf_ZSS_DebugStoryCheatUpdate();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_DebugStoryCheatListSelection_Init () {
    lib281DEC45_gt_ZSS_DebugStoryCheatListSelection = TriggerCreate("lib281DEC45_gt_ZSS_DebugStoryCheatListSelection_Func");
    TriggerEnable(lib281DEC45_gt_ZSS_DebugStoryCheatListSelection, false);
    TriggerAddEventDialogControl(lib281DEC45_gt_ZSS_DebugStoryCheatListSelection, 1, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_DebugStoryCheatSceneListSelect
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_DebugStoryCheatSceneListSelect_Func (bool testConds, bool runActions) {
    int auto4F3AE0F7_val;

    // Variable Declarations
    string lv_selectedScene;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((((lib281DEC45_gv_zSS_DebugStorySceneList != c_invalidDialogControlId) && (EventDialogControl() == lib281DEC45_gv_zSS_DebugStorySceneList))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_selectedScene = lib281DEC45_gf_ZSS_DebugStoryCheatSelectedScene();
    auto4F3AE0F7_val = UserDataGetInt("ScriptedScenes", lv_selectedScene, "KerriganPrimal", 1);
    if (auto4F3AE0F7_val == 0) {
        libNtve_gf_SetDialogItemChecked(lib281DEC45_gv_zSS_DebugStoryKerriganTypeCheckbox, false, PlayerGroupAll());
    }
    else if (auto4F3AE0F7_val == 1) {
        libNtve_gf_SetDialogItemChecked(lib281DEC45_gv_zSS_DebugStoryKerriganTypeCheckbox, true, PlayerGroupAll());
    }
    else if (auto4F3AE0F7_val == 2) {
        if ((libSwaC_gf_KerriganPhaseCheck(libSwaC_ge_KerriganPhase_KerriganPhaseGhost) == true)) {
            libNtve_gf_SetDialogItemChecked(lib281DEC45_gv_zSS_DebugStoryKerriganTypeCheckbox, false, PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemChecked(lib281DEC45_gv_zSS_DebugStoryKerriganTypeCheckbox, true, PlayerGroupAll());
        }
    }
    else {
    }
    DialogControlSetEnabled(lib281DEC45_gv_zSS_DebugStoryPlayButton, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_DebugStoryCheatSceneListSelect_Init () {
    lib281DEC45_gt_ZSS_DebugStoryCheatSceneListSelect = TriggerCreate("lib281DEC45_gt_ZSS_DebugStoryCheatSceneListSelect_Func");
    TriggerEnable(lib281DEC45_gt_ZSS_DebugStoryCheatSceneListSelect, false);
    TriggerAddEventDialogControl(lib281DEC45_gt_ZSS_DebugStoryCheatSceneListSelect, 1, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_DebugStoryCheatStateChange
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_DebugStoryCheatStateChange_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((lib281DEC45_gv_zSS_DebugStoryStateEditBox != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == lib281DEC45_gv_zSS_DebugStoryStateEditBox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogControlGetSelectedItem(lib281DEC45_gv_zSS_DebugStoryStateList, 1) > UserDataInstanceCount("WriterStates"))) {
        UserDataSetInt("StoryStates", UserDataInstance("StoryStates", (DialogControlGetSelectedItem(lib281DEC45_gv_zSS_DebugStoryStateList, 1)-UserDataInstanceCount("WriterStates"))), "value", 1, StringToInt(libNtve_gf_DialogItemEditValue(EventDialogControl(), 1)));
    }
    else {
        UserDataSetInt("WriterStates", UserDataInstance("WriterStates", DialogControlGetSelectedItem(lib281DEC45_gv_zSS_DebugStoryStateList, 1)), "Value", 1, StringToInt(libNtve_gf_DialogItemEditValue(EventDialogControl(), 1)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_DebugStoryCheatStateChange_Init () {
    lib281DEC45_gt_ZSS_DebugStoryCheatStateChange = TriggerCreate("lib281DEC45_gt_ZSS_DebugStoryCheatStateChange_Func");
    TriggerEnable(lib281DEC45_gt_ZSS_DebugStoryCheatStateChange, false);
    TriggerAddEventDialogControl(lib281DEC45_gt_ZSS_DebugStoryCheatStateChange, 1, c_invalidDialogControlId, c_triggerControlEventTypeTextChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_DebugStoryCheatChecked
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_DebugStoryCheatChecked_Func (bool testConds, bool runActions) {
    int auto4A9F5655_ae;
    int auto4A9F5655_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto4A9F5655_ae = lib281DEC45_gv_zSS_DebugStoryInteractiveCount;
    auto4A9F5655_ai = 1;
    lv_index = 1;
    for ( ; ( (auto4A9F5655_ai >= 0 && lv_index <= auto4A9F5655_ae) || (auto4A9F5655_ai <= 0 && lv_index >= auto4A9F5655_ae) ) ; lv_index += auto4A9F5655_ai ) {
        if ((EventDialogControl() == lib281DEC45_gv_zSS_DebugStoryEnabledCheckbox[lv_index])) {
            if ((lib281DEC45_gv_zSS_DebugStoryInteractiveType[lv_index] == "Character")) {
                if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1) != lib281DEC45_gf_CharacterIsEnabled(lib281DEC45_gv_zSS_DebugStoryInteractiveInstance[lv_index]))) {
                    if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1) == true)) {
                        lib281DEC45_gf_EnableDisableCharacter(lib281DEC45_gv_zSS_DebugStoryInteractiveInstance[lv_index], true);
                    }
                    else {
                        lib281DEC45_gf_EnableDisableCharacter(lib281DEC45_gv_zSS_DebugStoryInteractiveInstance[lv_index], false);
                    }
                    lib281DEC45_gf_ZSS_DebugStoryCheatUpdate();
                }
                else {
                }
                return true;
            }
            else {
            }
        }
        else {
        }
        if ((EventDialogControl() == lib281DEC45_gv_zSS_DebugStoryAmbientCheckbox[lv_index])) {
            if ((lib281DEC45_gv_zSS_DebugStoryInteractiveType[lv_index] == "Character") && (libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1) != lib281DEC45_gf_ZSS_CharacterIsAmbient(lib281DEC45_gv_zSS_DebugStoryInteractiveInstance[lv_index]))) {
                lib281DEC45_gf_ZSS_CharacterSetAmbient(lib281DEC45_gv_zSS_DebugStoryInteractiveInstance[lv_index], libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1));
                lib281DEC45_gf_ZSS_DebugStoryCheatUpdate();
            }
            else {
            }
            return true;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_DebugStoryCheatChecked_Init () {
    lib281DEC45_gt_ZSS_DebugStoryCheatChecked = TriggerCreate("lib281DEC45_gt_ZSS_DebugStoryCheatChecked_Func");
    TriggerEnable(lib281DEC45_gt_ZSS_DebugStoryCheatChecked, false);
    TriggerAddEventDialogControl(lib281DEC45_gt_ZSS_DebugStoryCheatChecked, 1, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_DebugStoryCustomDialogDismiss
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_DebugStoryCustomDialogDismiss_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_StoryMapSwitch(lib281DEC45_gv_zSS_DebugStoryNextMap);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_DebugStoryCustomDialogDismiss_Init () {
    lib281DEC45_gt_ZSS_DebugStoryCustomDialogDismiss = TriggerCreate("lib281DEC45_gt_ZSS_DebugStoryCustomDialogDismiss_Func");
    TriggerEnable(lib281DEC45_gt_ZSS_DebugStoryCustomDialogDismiss, false);
    TriggerAddEventCustomDialogDismissed(lib281DEC45_gt_ZSS_DebugStoryCustomDialogDismiss, c_playerAny, libNtve_ge_CustomDialogResult_c_customDialogResultYes);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_DebugStoryInteractiveReset
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_DebugStoryInteractiveReset_Func (bool testConds, bool runActions) {
    int autoB81449F3_ae;
    int autoB81449F3_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoB81449F3_ae = lib281DEC45_gv_zSS_DebugStoryInteractiveCount;
    autoB81449F3_ai = 1;
    lv_index = 1;
    for ( ; ( (autoB81449F3_ai >= 0 && lv_index <= autoB81449F3_ae) || (autoB81449F3_ai <= 0 && lv_index >= autoB81449F3_ae) ) ; lv_index += autoB81449F3_ai ) {
        if ((EventDialogControl() == lib281DEC45_gv_zSS_DebugStoryInteractiveReset[lv_index])) {
            if ((lib281DEC45_gv_zSS_DebugStoryInteractiveType[lv_index] == "Character")) {
                ConversationDataResetNodeState(lib281DEC45_gf_ZSS_CharacterConversation(lib281DEC45_gv_zSS_DebugStoryInteractiveInstance[lv_index]));
                lib281DEC45_gf_ZSS_CharacterSetAmbient(lib281DEC45_gv_zSS_DebugStoryInteractiveInstance[lv_index], false);
            }
            else {
            }
            lib281DEC45_gf_ZSS_DebugStoryCheatUpdate();
            return true;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_DebugStoryInteractiveReset_Init () {
    lib281DEC45_gt_ZSS_DebugStoryInteractiveReset = TriggerCreate("lib281DEC45_gt_ZSS_DebugStoryInteractiveReset_Func");
    TriggerEnable(lib281DEC45_gt_ZSS_DebugStoryInteractiveReset, false);
    TriggerAddEventDialogControl(lib281DEC45_gt_ZSS_DebugStoryInteractiveReset, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_DebugStoryCheatPlay
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_DebugStoryCheatPlay_Func (bool testConds, bool runActions) {
    int auto9BFA1FE3_ae;
    int auto9BFA1FE3_ai;

    // Variable Declarations
    trigger lv_callback;
    string lv_scene;
    int lv_index;
    int lv_typeIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib281DEC45_gv_zSS_DebugStoryPlayButton != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == lib281DEC45_gv_zSS_DebugStoryPlayButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9BFA1FE3_ae = UserDataInstanceCount("ScriptedScenes");
    auto9BFA1FE3_ai = 1;
    lv_index = 1;
    for ( ; ( (auto9BFA1FE3_ai >= 0 && lv_index <= auto9BFA1FE3_ae) || (auto9BFA1FE3_ai <= 0 && lv_index >= auto9BFA1FE3_ae) ) ; lv_index += auto9BFA1FE3_ai ) {
        lv_scene = UserDataInstance("ScriptedScenes", lv_index);
        if ((UserDataGetString("ScriptedScenes", lv_scene, "Type", 1) == lib281DEC45_gv_zSS_DebugStorySceneTypes[DialogControlGetSelectedItem(lib281DEC45_gv_zSS_DebugStoryTypeList, 1)])) {
            lv_typeIndex += 1;
            if ((lv_typeIndex == DialogControlGetSelectedItem(lib281DEC45_gv_zSS_DebugStorySceneList, 1))) {
                break;
            }
            else {
            }
        }
        else {
        }
    }
    if ((UserDataGetString("ScriptedScenes", lv_scene, "Type", 1) == "Conversation")) {
        return true;
    }
    else {
    }
    lib281DEC45_gv_zSSX_DebugStoryScene = lv_scene;
    lv_callback = DataTableGetTrigger(true, (lib281DEC45_gv_zSS_ScriptedScenePrefix + (lv_scene)));
    if ((lv_callback != null)) {
        lib281DEC45_gf_ZSS_DebugStoryCheatHide();
        UnitRemove(lib281DEC45_gf_CharacterUnit("Kerrigan"));
        lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex("Kerrigan")].lv_unit = null;
        if ((libNtve_gf_DialogItemIsChecked(lib281DEC45_gv_zSS_DebugStoryKerriganTypeCheckbox, 1) == true)) {
            libSwaC_gf_StoryCreateKerrigan(RegionGetCenter(RegionEntireMap()), 1, libSwaC_ge_KerriganPhase_KerriganPhaseQueenOfBlade, 270.0, 0);
            UserDataSetInt("Maps", "ZZerus2", "CompletedAge", 1, 1);
        }
        else {
            libSwaC_gf_StoryCreateKerrigan(RegionGetCenter(RegionEntireMap()), 1, libSwaC_ge_KerriganPhase_KerriganPhaseGhost, 270.0, 0);
            UserDataSetInt("Maps", "ZZerus2", "CompletedAge", 1, 0);
        }
        lib281DEC45_gf_SetCharacterUnit("Kerrigan", UnitLastCreated());
        lib281DEC45_gf_PlayScriptedScene(lv_scene);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        lib281DEC45_gf_StoryCutsceneFade(true, 0.0, false);
        lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomDebugStoryCheat);
        return true;
    }
    else {
    }
    lib281DEC45_gv_zSS_DebugStoryNextMap = UserDataGetGameLink("ScriptedScenes", lv_scene, "Default Map", 1);
    if ((lib281DEC45_gv_zSS_DebugStoryNextMap == null)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_281DEC45_B492BF55"), true);
        return true;
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/lib_281DEC45_AB263B6E", "A", libSwaC_gf_StoryMapName(lib281DEC45_gv_zSS_DebugStoryNextMap));
    TextExpressionSetToken("Param/Expression/lib_281DEC45_AB263B6E", "B", StringToText(UserDataGetString("ScriptedScenes", lv_scene, "DisplayName", 1)));
    UIShowCustomDialog(PlayerGroupAll(), libNtve_ge_CustomDialogType_c_customDialogTypeQuery, TextExpressionAssemble("Param/Expression/lib_281DEC45_AB263B6E"), StringToText(""), true);
    TriggerEnable(lib281DEC45_gt_ZSS_DebugStoryCustomDialogDismiss, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_DebugStoryCheatPlay_Init () {
    lib281DEC45_gt_ZSS_DebugStoryCheatPlay = TriggerCreate("lib281DEC45_gt_ZSS_DebugStoryCheatPlay_Func");
    TriggerEnable(lib281DEC45_gt_ZSS_DebugStoryCheatPlay, false);
    TriggerAddEventDialogControl(lib281DEC45_gt_ZSS_DebugStoryCheatPlay, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_DebugStoryCheatClose
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_DebugStoryCheatClose_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((lib281DEC45_gv_zSS_DebugStoryCloseButton != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == lib281DEC45_gv_zSS_DebugStoryCloseButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_ZSS_DebugStoryCheatUpdate();
    lib281DEC45_gf_ZSS_DebugStoryCheatHide();
    lib281DEC45_gf_StoryCreateKerrigan(RegionGetCenter(RegionEntireMap()));
    lib281DEC45_gv_zSSX_DebugStoryScene = null;
    UserDataSetInt("Maps", "ZZerus2", "CompletedAge", 1, lib281DEC45_gv_zSS_DebugStoryOriginalZ2Age);
    TriggerEnable(lib281DEC45_gt_ZSS_DebugStoryCheatListSelection, false);
    TriggerEnable(lib281DEC45_gt_ZSS_DebugStoryCheatSceneListSelect, false);
    TriggerEnable(lib281DEC45_gt_ZSS_DebugStoryCheatStateChange, false);
    TriggerEnable(lib281DEC45_gt_ZSS_DebugStoryCheatChecked, false);
    TriggerEnable(lib281DEC45_gt_ZSS_DebugStoryInteractiveReset, false);
    TriggerEnable(lib281DEC45_gt_ZSS_DebugStoryCheatPlay, false);
    TriggerEnable(lib281DEC45_gt_ZSS_DebugStoryCheatLoad, false);
    TriggerEnable(lib281DEC45_gt_ZSS_DebugStoryCheatClose, false);
    lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomMainSet);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_DebugStoryCheatClose_Init () {
    lib281DEC45_gt_ZSS_DebugStoryCheatClose = TriggerCreate("lib281DEC45_gt_ZSS_DebugStoryCheatClose_Func");
    TriggerEnable(lib281DEC45_gt_ZSS_DebugStoryCheatClose, false);
    TriggerAddEventDialogControl(lib281DEC45_gt_ZSS_DebugStoryCheatClose, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_DebugStoryCheatLoad
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_DebugStoryCheatLoad_Func (bool testConds, bool runActions) {
    int autoC24CAF3A_ai;
    int autoC24CAF3A_ae;

    // Variable Declarations
    bank lv_campaignBank;
    string lv_indexCharacter;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib281DEC45_gv_zSS_DebugStoryLoadButton != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == lib281DEC45_gv_zSS_DebugStoryLoadButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC24CAF3A_ai = 1;
    autoC24CAF3A_ae = UserDataInstanceCount("Character")+1;
    while (autoC24CAF3A_ai < autoC24CAF3A_ae) {
        lv_indexCharacter = UserDataInstance("Character", autoC24CAF3A_ai);
        ConversationDataResetNodeState(lib281DEC45_gf_ZSS_CharacterConversation(lv_indexCharacter));
        autoC24CAF3A_ai = autoC24CAF3A_ai+1;
    }
    libSwaC_gf_ULoadCampaignData(libSwaC_gf_CurrentMap());
    lib281DEC45_gf_ZSS_LoadStoryData();
    lib281DEC45_gf_ZSS_DebugStoryCheatUpdate();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_DebugStoryCheatLoad_Init () {
    lib281DEC45_gt_ZSS_DebugStoryCheatLoad = TriggerCreate("lib281DEC45_gt_ZSS_DebugStoryCheatLoad_Func");
    TriggerEnable(lib281DEC45_gt_ZSS_DebugStoryCheatLoad, false);
    TriggerAddEventDialogControl(lib281DEC45_gt_ZSS_DebugStoryCheatLoad, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_DebugLightsShow
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_DebugLightsShow_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "on")) {
        lib281DEC45_gf_ZSS_LightSetPrimaryPlay();
    }
    else {
        lib281DEC45_gf_ZSS_LightSetPrimaryStop();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_DebugLightsShow_Init () {
    lib281DEC45_gt_ZSS_DebugLightsShow = TriggerCreate("lib281DEC45_gt_ZSS_DebugLightsShow_Func");
    TriggerAddEventChatMessage(lib281DEC45_gt_ZSS_DebugLightsShow, c_playerAny, "setlight", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_DebugLightsReset
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_DebugLightsReset_Func (bool testConds, bool runActions) {
    int autoBC90F651_ai;
    int autoBC90F651_ae;

    // Variable Declarations
    string lv_indexCharacter;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((lib281DEC45_gf_CurrentRoom() != lib281DEC45_ge_Rooms_StoryRoomMainSet) || (lib281DEC45_gf_CurrentStoryActivity() != lib281DEC45_ge_StoryActivities_ViewingRoom))) {
        return true;
    }
    else {
    }
    autoBC90F651_ai = 1;
    autoBC90F651_ae = UserDataInstanceCount("Character")+1;
    while (autoBC90F651_ai < autoBC90F651_ae) {
        lv_indexCharacter = UserDataInstance("Character", autoBC90F651_ai);
        CutsceneStop(lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lv_indexCharacter)].lv_lightingCutscene);
        lib281DEC45_gv_zSS_Characters[lib281DEC45_gf_ZSS_CharacterIndex(lv_indexCharacter)].lv_lightingCutscene = c_cutsceneNone;
        autoBC90F651_ai = autoBC90F651_ai+1;
    }
    CutsceneStop(lib281DEC45_gv_zSS_StorySetLightingCutscene);
    lib281DEC45_gv_zSS_StorySetLightingCutscene = c_cutsceneNone;
    lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomMainSet);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_DebugLightsReset_Init () {
    lib281DEC45_gt_ZSS_DebugLightsReset = TriggerCreate("lib281DEC45_gt_ZSS_DebugLightsReset_Func");
    TriggerAddEventChatMessage(lib281DEC45_gt_ZSS_DebugLightsReset, c_playerAny, "resetlights", true);
    TriggerAddEventChatMessage(lib281DEC45_gt_ZSS_DebugLightsReset, c_playerAny, "rl", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_DebugUnitClickedDisplay
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_DebugUnitClickedDisplay_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, UnitTypeGetName(UnitGetType(EventUnit())), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_DebugUnitClickedDisplay_Init () {
    lib281DEC45_gt_ZSS_DebugUnitClickedDisplay = TriggerCreate("lib281DEC45_gt_ZSS_DebugUnitClickedDisplay_Func");
    TriggerEnable(lib281DEC45_gt_ZSS_DebugUnitClickedDisplay, false);
    TriggerAddEventUnitClick(lib281DEC45_gt_ZSS_DebugUnitClickedDisplay, null, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_DebugUnitClickedDisplayToggle
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_DebugUnitClickedDisplayToggle_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(lib281DEC45_gt_ZSS_DebugUnitClickedDisplay) == true)) {
        TriggerEnable(lib281DEC45_gt_ZSS_DebugUnitClickedDisplay, false);
    }
    else {
        TriggerEnable(lib281DEC45_gt_ZSS_DebugUnitClickedDisplay, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_DebugUnitClickedDisplayToggle_Init () {
    lib281DEC45_gt_ZSS_DebugUnitClickedDisplayToggle = TriggerCreate("lib281DEC45_gt_ZSS_DebugUnitClickedDisplayToggle_Func");
    TriggerAddEventChatMessage(lib281DEC45_gt_ZSS_DebugUnitClickedDisplayToggle, c_playerAny, "debugclick", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_DebugPanelToggle
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_DebugPanelToggle_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSwaC_gf_DisplayCampaignProgressInfo(lib281DEC45_gv_zSS_ScreenDialog);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_DebugPanelToggle_Init () {
    lib281DEC45_gt_ZSS_DebugPanelToggle = TriggerCreate("lib281DEC45_gt_ZSS_DebugPanelToggle_Func");
    TriggerEnable(lib281DEC45_gt_ZSS_DebugPanelToggle, false);
    TriggerAddEventChatMessage(lib281DEC45_gt_ZSS_DebugPanelToggle, c_playerAny, "showdebuginfo", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_DebugKerriganCheatEnds
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_DebugKerriganCheatEnds_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_StoryCutsceneFade(true, 0.5, false);
    libSwaC_gf_CinematicFade(true, 0.5, Color(0.00, 0.00, 0.00), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_DebugKerriganCheatEnds_Init () {
    lib281DEC45_gt_ZSS_DebugKerriganCheatEnds = TriggerCreate("lib281DEC45_gt_ZSS_DebugKerriganCheatEnds_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_DebugKerriganCheatRetail
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_DebugKerriganCheatRetail_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((lib281DEC45_gf_CurrentStoryActivity() == lib281DEC45_ge_StoryActivities_ViewingRoom))) {
            return false;
        }

        if (!((lib281DEC45_gf_CurrentRoom() == lib281DEC45_ge_Rooms_StoryRoomMainSet))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomKerriganScreen);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_DebugKerriganCheatRetail_Init () {
    lib281DEC45_gt_ZSS_DebugKerriganCheatRetail = TriggerCreate("lib281DEC45_gt_ZSS_DebugKerriganCheatRetail_Func");
    TriggerAddEventCheatUsed(lib281DEC45_gt_ZSS_DebugKerriganCheatRetail, c_playerAny, c_gameCheatResearch);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_DebugArmyCheatRetail
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_DebugArmyCheatRetail_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_room;

    // Variable Initialization
    lv_room = lib281DEC45_ge_Rooms_StoryRoomMainSet;

    // Conditions
    if (testConds) {
        if (!((lib281DEC45_gf_CurrentStoryActivity() == lib281DEC45_ge_StoryActivities_ViewingRoom))) {
            return false;
        }

        if (!((lib281DEC45_gf_CurrentRoom() == lib281DEC45_ge_Rooms_StoryRoomMainSet))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gv_zSS_RetailArmyCheatUsed = true;
    lv_room = lib281DEC45_gf_CurrentRoom();
    lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomArchivesArmyScreen);
    lib281DEC45_gv_zSS_RetailArmyCheatUsed = false;
    lib281DEC45_gf_EnterRoom(lv_room);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_DebugArmyCheatRetail_Init () {
    lib281DEC45_gt_ZSS_DebugArmyCheatRetail = TriggerCreate("lib281DEC45_gt_ZSS_DebugArmyCheatRetail_Func");
    TriggerAddEventCheatUsed(lib281DEC45_gt_ZSS_DebugArmyCheatRetail, c_playerAny, c_gameCheatCredits);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TEMP OMG REMOVE
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_TEMPOMGREMOVE_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    BankSave(libSwaC_gf_StoryBank());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_TEMPOMGREMOVE_Init () {
    lib281DEC45_gt_TEMPOMGREMOVE = TriggerCreate("lib281DEC45_gt_TEMPOMGREMOVE_Func");
    TriggerAddEventChatMessage(lib281DEC45_gt_TEMPOMGREMOVE, c_playerAny, "-tempsave", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_StoryPerformFadeIn
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_StoryPerformFadeIn_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CutsceneFade(false, 0.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    Wait(0.0625, c_timeGame);
    CutsceneFade(true, lib281DEC45_gv_zSS_StoryFadeDuration, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_StoryPerformFadeIn_Init () {
    lib281DEC45_gt_ZSS_StoryPerformFadeIn = TriggerCreate("lib281DEC45_gt_ZSS_StoryPerformFadeIn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_AmbientSceneEnded
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_AmbientSceneEnded_Func (bool testConds, bool runActions) {
    int autoCB9D3C63_ae;
    int autoCB9D3C63_ai;
    int auto80BAA897_ae;
    int auto80BAA897_ai;

    // Variable Declarations
    int lv_indexScene;
    int lv_indexCutscene;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoCB9D3C63_ae = lib281DEC45_gv_zSSC_MAXAMBIENTCUTSCENES;
    autoCB9D3C63_ai = 1;
    lv_indexScene = 1;
    for ( ; ( (autoCB9D3C63_ai >= 0 && lv_indexScene <= autoCB9D3C63_ae) || (autoCB9D3C63_ai <= 0 && lv_indexScene >= autoCB9D3C63_ae) ) ; lv_indexScene += autoCB9D3C63_ai ) {
        if ((lib281DEC45_gv_zSS_AmbientSceneStatus[lv_indexScene] == lib281DEC45_ge_ZSS_AmbientSceneStatusType_ZSS_AmbientScenePlaying)) {
            auto80BAA897_ae = 4;
            auto80BAA897_ai = 1;
            lv_indexCutscene = 1;
            for ( ; ( (auto80BAA897_ai >= 0 && lv_indexCutscene <= auto80BAA897_ae) || (auto80BAA897_ai <= 0 && lv_indexCutscene >= auto80BAA897_ae) ) ; lv_indexCutscene += auto80BAA897_ai ) {
                if ((EventCutsceneId() == lib281DEC45_gv_zSS_AmbientScenes[lv_indexScene][lv_indexCutscene])) {
                    lib281DEC45_gf_ZSS_AmbientSceneOver(lv_indexScene, lv_indexCutscene);
                    return true;
                }
                else {
                }
            }
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_AmbientSceneEnded_Init () {
    lib281DEC45_gt_ZSS_AmbientSceneEnded = TriggerCreate("lib281DEC45_gt_ZSS_AmbientSceneEnded_Func");
    TriggerAddEventCutsceneEndSceneFired(lib281DEC45_gt_ZSS_AmbientSceneEnded, c_cutsceneNone);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_AmbientSceneTimerExpired
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_AmbientSceneTimerExpired_Func (bool testConds, bool runActions) {
    int auto15694A7F_ae;
    int auto15694A7F_ai;
    int auto3A4B144E_ae;
    int auto3A4B144E_ai;

    // Variable Declarations
    int lv_index;
    int lv_indexCutscene;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto15694A7F_ae = lib281DEC45_gv_zSSC_MAXAMBIENTCUTSCENES;
    auto15694A7F_ai = 1;
    lv_index = 1;
    for ( ; ( (auto15694A7F_ai >= 0 && lv_index <= auto15694A7F_ae) || (auto15694A7F_ai <= 0 && lv_index >= auto15694A7F_ae) ) ; lv_index += auto15694A7F_ai ) {
        if ((lib281DEC45_gv_zSS_AmbientSceneStatus[lv_index] != lib281DEC45_ge_ZSS_AmbientSceneStatusType_ZSS_AmbientSceneUnused)) {
            if ((EventTimer() == lib281DEC45_gv_zSS_AmbientSceneTimer[lv_index][0])) {
                if ((lib281DEC45_gv_zSS_AmbientSceneStatus[lv_index] == lib281DEC45_ge_ZSS_AmbientSceneStatusType_ZSS_AmbientSceneSequencing)) {
                    lib281DEC45_gv_zSS_AmbientSceneCount -= 1;
                    lib281DEC45_gv_zSS_AmbientSceneStatus[lv_index] = lib281DEC45_ge_ZSS_AmbientSceneStatusType_ZSS_AmbientSceneUnused;
                }
                else {
                }
                lib281DEC45_gf_ZSS_AmbientScenePlay(UserDataGetUserInstance("AmbientScenes", lib281DEC45_gv_zSS_AmbientSceneInstance[lv_index], "Sequence Scene", 1));
                return true;
            }
            else {
            }
            auto3A4B144E_ae = 4;
            auto3A4B144E_ai = 1;
            lv_indexCutscene = 1;
            for ( ; ( (auto3A4B144E_ai >= 0 && lv_indexCutscene <= auto3A4B144E_ae) || (auto3A4B144E_ai <= 0 && lv_indexCutscene >= auto3A4B144E_ae) ) ; lv_indexCutscene += auto3A4B144E_ai ) {
                if ((EventTimer() == lib281DEC45_gv_zSS_AmbientSceneTimer[lv_index][lv_indexCutscene])) {
                    lib281DEC45_gf_ZSS_AmbientScenePlayCutscene(lv_index, lv_indexCutscene);
                    return true;
                }
                else {
                }
            }
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_AmbientSceneTimerExpired_Init () {
    lib281DEC45_gt_ZSS_AmbientSceneTimerExpired = TriggerCreate("lib281DEC45_gt_ZSS_AmbientSceneTimerExpired_Func");
    TriggerAddEventTimer(lib281DEC45_gt_ZSS_AmbientSceneTimerExpired, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_DebugAmbientSceneAdvance
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_DebugAmbientSceneAdvance_Func (bool testConds, bool runActions) {
    int autoFF27F779_ae;
    int autoFF27F779_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoFF27F779_ae = lib281DEC45_gv_zSSC_MAXAMBIENTCUTSCENES;
    autoFF27F779_ai = 1;
    lv_index = 1;
    for ( ; ( (autoFF27F779_ai >= 0 && lv_index <= autoFF27F779_ae) || (autoFF27F779_ai <= 0 && lv_index >= autoFF27F779_ae) ) ; lv_index += autoFF27F779_ai ) {
        if ((lib281DEC45_gv_zSS_AmbientSceneStatus[lv_index] == lib281DEC45_ge_ZSS_AmbientSceneStatusType_ZSS_AmbientSceneSequencing)) {
            TimerStart(lib281DEC45_gv_zSS_AmbientSceneTimer[lv_index][0], 1.0, false, c_timeReal);
        }
        else {
        }
        if ((lib281DEC45_gv_zSS_AmbientSceneStatus[lv_index] == lib281DEC45_ge_ZSS_AmbientSceneStatusType_ZSS_AmbientSceneWaiting)) {
            TimerStart(lib281DEC45_gv_zSS_AmbientSceneTimer[lv_index][lv_index], 1.0, false, c_timeReal);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_DebugAmbientSceneAdvance_Init () {
    lib281DEC45_gt_ZSS_DebugAmbientSceneAdvance = TriggerCreate("lib281DEC45_gt_ZSS_DebugAmbientSceneAdvance_Func");
    TriggerAddEventChatMessage(lib281DEC45_gt_ZSS_DebugAmbientSceneAdvance, c_playerAny, "-zadvance", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_CustomConvoSkipping
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_CustomConvoSkipping_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, lib281DEC45_gt_ZSS_CancelAndFadeConvo, true, false);
    while (true) {
        Wait(20.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_CustomConvoSkipping_Init () {
    lib281DEC45_gt_ZSS_CustomConvoSkipping = TriggerCreate("lib281DEC45_gt_ZSS_CustomConvoSkipping_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_DebugHideAfterLine
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_DebugHideAfterLine_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((lib281DEC45_gv_zSS_DebugConvCurrentLine != ConversationDataActiveLine()))) {
        Wait(0.1, c_timeGame);
    }
    lib281DEC45_gf_ShowHideStoryUnits(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_DebugHideAfterLine_Init () {
    lib281DEC45_gt_ZSS_DebugHideAfterLine = TriggerCreate("lib281DEC45_gt_ZSS_DebugHideAfterLine_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_RunAmbientConversation
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_RunAmbientConversation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_originalCharacter;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_originalCharacter = lib281DEC45_gv_zSS_AmbientCharacter;
    ConversationDataRun(lib281DEC45_gv_zSS_AmbientConversation, PlayerGroupAll(), c_conversationSkipSimple, true);
    if ((lib281DEC45_gv_zSS_AmbientCharacter == lv_originalCharacter)) {
        lib281DEC45_gv_zSS_AmbientCharacter = null;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_RunAmbientConversation_Init () {
    lib281DEC45_gt_ZSS_RunAmbientConversation = TriggerCreate("lib281DEC45_gt_ZSS_RunAmbientConversation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_RunAmbientTransmission
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_RunAmbientTransmission_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_originalCharacter;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_originalCharacter = lib281DEC45_gv_zSS_AmbientCharacter;
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(lib281DEC45_gf_CharacterUnit(lib281DEC45_gv_zSS_AmbientCharacter), false, false, "Talk"), c_invalidPortraitId, SoundLink(ConversationDataGetSound(lib281DEC45_gv_zSS_AmbientLine, false), c_soundIndexAny), 0.0, c_transmissionDurationAdd, true);
    if ((lib281DEC45_gv_zSS_AmbientCharacter == lv_originalCharacter)) {
        lib281DEC45_gv_zSS_AmbientCharacter = null;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_RunAmbientTransmission_Init () {
    lib281DEC45_gt_ZSS_RunAmbientTransmission = TriggerCreate("lib281DEC45_gt_ZSS_RunAmbientTransmission_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_CancelAndFadeConvo
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_CancelAndFadeConvo_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gv_zSS_LastConversationSkipped = true;
    lib281DEC45_gv_zSS_LastScenePlayedFull = false;
    lib281DEC45_gf_ZSS_SoundFadeAllExceptMusic(0.8, false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    lib281DEC45_gf_StoryCutsceneFade(false, 1.0, true);
    ConversationDataStop();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_CancelAndFadeConvo_Init () {
    lib281DEC45_gt_ZSS_CancelAndFadeConvo = TriggerCreate("lib281DEC45_gt_ZSS_CancelAndFadeConvo_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Kerrigan Camera CloseUp
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseKerriganCameraCloseUp_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Kerrigan", lib281DEC45_ge_CameraType_CloseUp);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseKerriganCameraCloseUp_Init () {
    lib281DEC45_gt_UseKerriganCameraCloseUp = TriggerCreate("lib281DEC45_gt_UseKerriganCameraCloseUp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Kerrigan Camera CloseUp Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseKerriganCameraCloseUpListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Kerrigan", lib281DEC45_ge_CameraType_CloseUpListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseKerriganCameraCloseUpListener_Init () {
    lib281DEC45_gt_UseKerriganCameraCloseUpListener = TriggerCreate("lib281DEC45_gt_UseKerriganCameraCloseUpListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Kerrigan Camera Medium
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseKerriganCameraMedium_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Kerrigan", lib281DEC45_ge_CameraType_Medium);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseKerriganCameraMedium_Init () {
    lib281DEC45_gt_UseKerriganCameraMedium = TriggerCreate("lib281DEC45_gt_UseKerriganCameraMedium_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Kerrigan Camera Far
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseKerriganCameraFar_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Kerrigan", lib281DEC45_ge_CameraType_Far);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseKerriganCameraFar_Init () {
    lib281DEC45_gt_UseKerriganCameraFar = TriggerCreate("lib281DEC45_gt_UseKerriganCameraFar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Kerrigan Camera Far Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseKerriganCameraFarListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Kerrigan", lib281DEC45_ge_CameraType_FarListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseKerriganCameraFarListener_Init () {
    lib281DEC45_gt_UseKerriganCameraFarListener = TriggerCreate("lib281DEC45_gt_UseKerriganCameraFarListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Kerrigan Camera Medium Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseKerriganCameraMediumListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Kerrigan", lib281DEC45_ge_CameraType_MediumListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseKerriganCameraMediumListener_Init () {
    lib281DEC45_gt_UseKerriganCameraMediumListener = TriggerCreate("lib281DEC45_gt_UseKerriganCameraMediumListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Kerrigan Camera Shoulder Reverse
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseKerriganCameraShoulderReverse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Kerrigan", lib281DEC45_ge_CameraType_OverShoulderReverse);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseKerriganCameraShoulderReverse_Init () {
    lib281DEC45_gt_UseKerriganCameraShoulderReverse = TriggerCreate("lib281DEC45_gt_UseKerriganCameraShoulderReverse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Kerrigan Camera Shoulder
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseKerriganCameraShoulder_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Kerrigan", lib281DEC45_ge_CameraType_OverShoulder);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseKerriganCameraShoulder_Init () {
    lib281DEC45_gt_UseKerriganCameraShoulder = TriggerCreate("lib281DEC45_gt_UseKerriganCameraShoulder_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Kerrigan Camera Extreme Closeup
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseKerriganCameraExtremeCloseup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Kerrigan", lib281DEC45_ge_CameraType_ExtremeCloseup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseKerriganCameraExtremeCloseup_Init () {
    lib281DEC45_gt_UseKerriganCameraExtremeCloseup = TriggerCreate("lib281DEC45_gt_UseKerriganCameraExtremeCloseup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Kerrigan Camera Extreme Closeup Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseKerriganCameraExtremeCloseupListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Kerrigan", lib281DEC45_ge_CameraType_ExtremeCloseupListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseKerriganCameraExtremeCloseupListener_Init () {
    lib281DEC45_gt_UseKerriganCameraExtremeCloseupListener = TriggerCreate("lib281DEC45_gt_UseKerriganCameraExtremeCloseupListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Kerrigan Camera Two Shot
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseKerriganCameraTwoShot_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Kerrigan", lib281DEC45_ge_CameraType_TwoShot);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseKerriganCameraTwoShot_Init () {
    lib281DEC45_gt_UseKerriganCameraTwoShot = TriggerCreate("lib281DEC45_gt_UseKerriganCameraTwoShot_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Kerrigan Camera Custom 01
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseKerriganCameraCustom01_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Kerrigan", lib281DEC45_ge_CameraType_Custom01);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseKerriganCameraCustom01_Init () {
    lib281DEC45_gt_UseKerriganCameraCustom01 = TriggerCreate("lib281DEC45_gt_UseKerriganCameraCustom01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Kerrigan Camera Custom 02
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseKerriganCameraCustom02_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Kerrigan", lib281DEC45_ge_CameraType_Custom02);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseKerriganCameraCustom02_Init () {
    lib281DEC45_gt_UseKerriganCameraCustom02 = TriggerCreate("lib281DEC45_gt_UseKerriganCameraCustom02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Kerrigan Camera Custom 03
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseKerriganCameraCustom03_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Kerrigan", lib281DEC45_ge_CameraType_Custom03);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseKerriganCameraCustom03_Init () {
    lib281DEC45_gt_UseKerriganCameraCustom03 = TriggerCreate("lib281DEC45_gt_UseKerriganCameraCustom03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Kerrigan Camera Custom 04
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseKerriganCameraCustom04_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Kerrigan", lib281DEC45_ge_CameraType_Custom04);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseKerriganCameraCustom04_Init () {
    lib281DEC45_gt_UseKerriganCameraCustom04 = TriggerCreate("lib281DEC45_gt_UseKerriganCameraCustom04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Kerrigan Camera Custom 01 Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseKerriganCameraCustom01Listener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Kerrigan", lib281DEC45_ge_CameraType_Custom01Listener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseKerriganCameraCustom01Listener_Init () {
    lib281DEC45_gt_UseKerriganCameraCustom01Listener = TriggerCreate("lib281DEC45_gt_UseKerriganCameraCustom01Listener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Kerrigan Camera Custom 02 Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseKerriganCameraCustom02Listener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Kerrigan", lib281DEC45_ge_CameraType_Custom02Listener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseKerriganCameraCustom02Listener_Init () {
    lib281DEC45_gt_UseKerriganCameraCustom02Listener = TriggerCreate("lib281DEC45_gt_UseKerriganCameraCustom02Listener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Kerrigan Camera Custom 03 Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseKerriganCameraCustom03Listener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Kerrigan", lib281DEC45_ge_CameraType_Custom03Listener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseKerriganCameraCustom03Listener_Init () {
    lib281DEC45_gt_UseKerriganCameraCustom03Listener = TriggerCreate("lib281DEC45_gt_UseKerriganCameraCustom03Listener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Kerrigan Camera Custom 04 Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseKerriganCameraCustom04Listener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Kerrigan", lib281DEC45_ge_CameraType_Custom04Listener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseKerriganCameraCustom04Listener_Init () {
    lib281DEC45_gt_UseKerriganCameraCustom04Listener = TriggerCreate("lib281DEC45_gt_UseKerriganCameraCustom04Listener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Kavi Camera CloseUp
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseKaviCameraCloseUp_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zerg Adjutant", lib281DEC45_ge_CameraType_CloseUp);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseKaviCameraCloseUp_Init () {
    lib281DEC45_gt_UseKaviCameraCloseUp = TriggerCreate("lib281DEC45_gt_UseKaviCameraCloseUp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Kavi Camera CloseUp Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseKaviCameraCloseUpListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zerg Adjutant", lib281DEC45_ge_CameraType_CloseUpListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseKaviCameraCloseUpListener_Init () {
    lib281DEC45_gt_UseKaviCameraCloseUpListener = TriggerCreate("lib281DEC45_gt_UseKaviCameraCloseUpListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Kavi Camera Medium
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseKaviCameraMedium_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zerg Adjutant", lib281DEC45_ge_CameraType_Medium);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseKaviCameraMedium_Init () {
    lib281DEC45_gt_UseKaviCameraMedium = TriggerCreate("lib281DEC45_gt_UseKaviCameraMedium_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Kavi Camera Medium Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseKaviCameraMediumListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zerg Adjutant", lib281DEC45_ge_CameraType_MediumListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseKaviCameraMediumListener_Init () {
    lib281DEC45_gt_UseKaviCameraMediumListener = TriggerCreate("lib281DEC45_gt_UseKaviCameraMediumListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Kavi Camera Far
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseKaviCameraFar_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zerg Adjutant", lib281DEC45_ge_CameraType_Far);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseKaviCameraFar_Init () {
    lib281DEC45_gt_UseKaviCameraFar = TriggerCreate("lib281DEC45_gt_UseKaviCameraFar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Kavi Camera Far Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseKaviCameraFarListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zerg Adjutant", lib281DEC45_ge_CameraType_FarListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseKaviCameraFarListener_Init () {
    lib281DEC45_gt_UseKaviCameraFarListener = TriggerCreate("lib281DEC45_gt_UseKaviCameraFarListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Kavi Camera Shoulder Reverse
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseKaviCameraShoulderReverse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zerg Adjutant", lib281DEC45_ge_CameraType_OverShoulderReverse);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseKaviCameraShoulderReverse_Init () {
    lib281DEC45_gt_UseKaviCameraShoulderReverse = TriggerCreate("lib281DEC45_gt_UseKaviCameraShoulderReverse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Kavi Camera Shoulder
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseKaviCameraShoulder_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zerg Adjutant", lib281DEC45_ge_CameraType_OverShoulder);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseKaviCameraShoulder_Init () {
    lib281DEC45_gt_UseKaviCameraShoulder = TriggerCreate("lib281DEC45_gt_UseKaviCameraShoulder_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Kavi Camera Extreme Closeup
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseKaviCameraExtremeCloseup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zerg Adjutant", lib281DEC45_ge_CameraType_ExtremeCloseup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseKaviCameraExtremeCloseup_Init () {
    lib281DEC45_gt_UseKaviCameraExtremeCloseup = TriggerCreate("lib281DEC45_gt_UseKaviCameraExtremeCloseup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Kavi Camera Extreme Closeup Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseKaviCameraExtremeCloseupListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zerg Adjutant", lib281DEC45_ge_CameraType_ExtremeCloseupListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseKaviCameraExtremeCloseupListener_Init () {
    lib281DEC45_gt_UseKaviCameraExtremeCloseupListener = TriggerCreate("lib281DEC45_gt_UseKaviCameraExtremeCloseupListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Kavi Camera Two Shot
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseKaviCameraTwoShot_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zerg Adjutant", lib281DEC45_ge_CameraType_TwoShot);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseKaviCameraTwoShot_Init () {
    lib281DEC45_gt_UseKaviCameraTwoShot = TriggerCreate("lib281DEC45_gt_UseKaviCameraTwoShot_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Kavi Camera Custom 01
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseKaviCameraCustom01_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zerg Adjutant", lib281DEC45_ge_CameraType_Custom01);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseKaviCameraCustom01_Init () {
    lib281DEC45_gt_UseKaviCameraCustom01 = TriggerCreate("lib281DEC45_gt_UseKaviCameraCustom01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Evo Master Camera CloseUp
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseEvoMasterCameraCloseUp_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Evolution Master", lib281DEC45_ge_CameraType_CloseUp);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseEvoMasterCameraCloseUp_Init () {
    lib281DEC45_gt_UseEvoMasterCameraCloseUp = TriggerCreate("lib281DEC45_gt_UseEvoMasterCameraCloseUp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Evo Master Camera CloseUp Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseEvoMasterCameraCloseUpListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Evolution Master", lib281DEC45_ge_CameraType_CloseUpListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseEvoMasterCameraCloseUpListener_Init () {
    lib281DEC45_gt_UseEvoMasterCameraCloseUpListener = TriggerCreate("lib281DEC45_gt_UseEvoMasterCameraCloseUpListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Evo Master Camera Medium
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseEvoMasterCameraMedium_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Evolution Master", lib281DEC45_ge_CameraType_Medium);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseEvoMasterCameraMedium_Init () {
    lib281DEC45_gt_UseEvoMasterCameraMedium = TriggerCreate("lib281DEC45_gt_UseEvoMasterCameraMedium_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Evo Master Camera Medium Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseEvoMasterCameraMediumListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Evolution Master", lib281DEC45_ge_CameraType_MediumListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseEvoMasterCameraMediumListener_Init () {
    lib281DEC45_gt_UseEvoMasterCameraMediumListener = TriggerCreate("lib281DEC45_gt_UseEvoMasterCameraMediumListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Evo Master Camera Far
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseEvoMasterCameraFar_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Evolution Master", lib281DEC45_ge_CameraType_Far);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseEvoMasterCameraFar_Init () {
    lib281DEC45_gt_UseEvoMasterCameraFar = TriggerCreate("lib281DEC45_gt_UseEvoMasterCameraFar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Evo Master Camera Far Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseEvoMasterCameraFarListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Evolution Master", lib281DEC45_ge_CameraType_FarListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseEvoMasterCameraFarListener_Init () {
    lib281DEC45_gt_UseEvoMasterCameraFarListener = TriggerCreate("lib281DEC45_gt_UseEvoMasterCameraFarListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Evo Master Camera Shoulder Reverse
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseEvoMasterCameraShoulderReverse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Evolution Master", lib281DEC45_ge_CameraType_OverShoulderReverse);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseEvoMasterCameraShoulderReverse_Init () {
    lib281DEC45_gt_UseEvoMasterCameraShoulderReverse = TriggerCreate("lib281DEC45_gt_UseEvoMasterCameraShoulderReverse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Evo Master Camera Shoulder
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseEvoMasterCameraShoulder_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Evolution Master", lib281DEC45_ge_CameraType_OverShoulder);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseEvoMasterCameraShoulder_Init () {
    lib281DEC45_gt_UseEvoMasterCameraShoulder = TriggerCreate("lib281DEC45_gt_UseEvoMasterCameraShoulder_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Evo Master Camera Extreme Closeup
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseEvoMasterCameraExtremeCloseup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Evolution Master", lib281DEC45_ge_CameraType_ExtremeCloseup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseEvoMasterCameraExtremeCloseup_Init () {
    lib281DEC45_gt_UseEvoMasterCameraExtremeCloseup = TriggerCreate("lib281DEC45_gt_UseEvoMasterCameraExtremeCloseup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Evo Master Camera Extreme Closeup Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseEvoMasterCameraExtremeCloseupListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Evolution Master", lib281DEC45_ge_CameraType_ExtremeCloseupListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseEvoMasterCameraExtremeCloseupListener_Init () {
    lib281DEC45_gt_UseEvoMasterCameraExtremeCloseupListener = TriggerCreate("lib281DEC45_gt_UseEvoMasterCameraExtremeCloseupListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Evo Master Camera Two Shot
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseEvoMasterCameraTwoShot_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Evolution Master", lib281DEC45_ge_CameraType_TwoShot);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseEvoMasterCameraTwoShot_Init () {
    lib281DEC45_gt_UseEvoMasterCameraTwoShot = TriggerCreate("lib281DEC45_gt_UseEvoMasterCameraTwoShot_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Evo Master Camera Custom 01
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseEvoMasterCameraCustom01_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Evolution Master", lib281DEC45_ge_CameraType_Custom01);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseEvoMasterCameraCustom01_Init () {
    lib281DEC45_gt_UseEvoMasterCameraCustom01 = TriggerCreate("lib281DEC45_gt_UseEvoMasterCameraCustom01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Evo Master Camera Custom 02
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseEvoMasterCameraCustom02_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Evolution Master", lib281DEC45_ge_CameraType_Custom02);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseEvoMasterCameraCustom02_Init () {
    lib281DEC45_gt_UseEvoMasterCameraCustom02 = TriggerCreate("lib281DEC45_gt_UseEvoMasterCameraCustom02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zagara Camera CloseUp
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZagaraCameraCloseUp_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zagara", lib281DEC45_ge_CameraType_CloseUp);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZagaraCameraCloseUp_Init () {
    lib281DEC45_gt_UseZagaraCameraCloseUp = TriggerCreate("lib281DEC45_gt_UseZagaraCameraCloseUp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zagara Camera CloseUp Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZagaraCameraCloseUpListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zagara", lib281DEC45_ge_CameraType_CloseUpListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZagaraCameraCloseUpListener_Init () {
    lib281DEC45_gt_UseZagaraCameraCloseUpListener = TriggerCreate("lib281DEC45_gt_UseZagaraCameraCloseUpListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zagara Camera Medium
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZagaraCameraMedium_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zagara", lib281DEC45_ge_CameraType_Medium);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZagaraCameraMedium_Init () {
    lib281DEC45_gt_UseZagaraCameraMedium = TriggerCreate("lib281DEC45_gt_UseZagaraCameraMedium_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zagara Camera Medium Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZagaraCameraMediumListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zagara", lib281DEC45_ge_CameraType_MediumListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZagaraCameraMediumListener_Init () {
    lib281DEC45_gt_UseZagaraCameraMediumListener = TriggerCreate("lib281DEC45_gt_UseZagaraCameraMediumListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zagara Camera Far
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZagaraCameraFar_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zagara", lib281DEC45_ge_CameraType_Far);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZagaraCameraFar_Init () {
    lib281DEC45_gt_UseZagaraCameraFar = TriggerCreate("lib281DEC45_gt_UseZagaraCameraFar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zagara Camera Far Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZagaraCameraFarListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zagara", lib281DEC45_ge_CameraType_FarListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZagaraCameraFarListener_Init () {
    lib281DEC45_gt_UseZagaraCameraFarListener = TriggerCreate("lib281DEC45_gt_UseZagaraCameraFarListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zagara Camera Shoulder Reverse
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZagaraCameraShoulderReverse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zagara", lib281DEC45_ge_CameraType_OverShoulderReverse);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZagaraCameraShoulderReverse_Init () {
    lib281DEC45_gt_UseZagaraCameraShoulderReverse = TriggerCreate("lib281DEC45_gt_UseZagaraCameraShoulderReverse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zagara Camera Shoulder
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZagaraCameraShoulder_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zagara", lib281DEC45_ge_CameraType_OverShoulder);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZagaraCameraShoulder_Init () {
    lib281DEC45_gt_UseZagaraCameraShoulder = TriggerCreate("lib281DEC45_gt_UseZagaraCameraShoulder_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zagara Camera Extreme Closeup
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZagaraCameraExtremeCloseup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zagara", lib281DEC45_ge_CameraType_ExtremeCloseup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZagaraCameraExtremeCloseup_Init () {
    lib281DEC45_gt_UseZagaraCameraExtremeCloseup = TriggerCreate("lib281DEC45_gt_UseZagaraCameraExtremeCloseup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zagara Camera Extreme Closeup Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZagaraCameraExtremeCloseupListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zagara", lib281DEC45_ge_CameraType_ExtremeCloseupListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZagaraCameraExtremeCloseupListener_Init () {
    lib281DEC45_gt_UseZagaraCameraExtremeCloseupListener = TriggerCreate("lib281DEC45_gt_UseZagaraCameraExtremeCloseupListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zagara Camera Two Shot
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZagaraCameraTwoShot_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zagara", lib281DEC45_ge_CameraType_TwoShot);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZagaraCameraTwoShot_Init () {
    lib281DEC45_gt_UseZagaraCameraTwoShot = TriggerCreate("lib281DEC45_gt_UseZagaraCameraTwoShot_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zagara Camera Custom 01
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZagaraCameraCustom01_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zagara", lib281DEC45_ge_CameraType_Custom01);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZagaraCameraCustom01_Init () {
    lib281DEC45_gt_UseZagaraCameraCustom01 = TriggerCreate("lib281DEC45_gt_UseZagaraCameraCustom01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zagara Camera Custom 02
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZagaraCameraCustom02_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zagara", lib281DEC45_ge_CameraType_Custom02);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZagaraCameraCustom02_Init () {
    lib281DEC45_gt_UseZagaraCameraCustom02 = TriggerCreate("lib281DEC45_gt_UseZagaraCameraCustom02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zagara Camera Custom 03
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZagaraCameraCustom03_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zagara", lib281DEC45_ge_CameraType_Custom03);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZagaraCameraCustom03_Init () {
    lib281DEC45_gt_UseZagaraCameraCustom03 = TriggerCreate("lib281DEC45_gt_UseZagaraCameraCustom03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zagara Camera Custom 04
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZagaraCameraCustom04_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zagara", lib281DEC45_ge_CameraType_Custom04);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZagaraCameraCustom04_Init () {
    lib281DEC45_gt_UseZagaraCameraCustom04 = TriggerCreate("lib281DEC45_gt_UseZagaraCameraCustom04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zagara Camera Custom 01 Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZagaraCameraCustom01Listener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zagara", lib281DEC45_ge_CameraType_Custom01Listener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZagaraCameraCustom01Listener_Init () {
    lib281DEC45_gt_UseZagaraCameraCustom01Listener = TriggerCreate("lib281DEC45_gt_UseZagaraCameraCustom01Listener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zagara Camera Custom 02 Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZagaraCameraCustom02Listener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zagara", lib281DEC45_ge_CameraType_Custom02Listener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZagaraCameraCustom02Listener_Init () {
    lib281DEC45_gt_UseZagaraCameraCustom02Listener = TriggerCreate("lib281DEC45_gt_UseZagaraCameraCustom02Listener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zagara Camera Custom 03 Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZagaraCameraCustom03Listener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zagara", lib281DEC45_ge_CameraType_Custom03Listener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZagaraCameraCustom03Listener_Init () {
    lib281DEC45_gt_UseZagaraCameraCustom03Listener = TriggerCreate("lib281DEC45_gt_UseZagaraCameraCustom03Listener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zagara Camera Custom 04 Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZagaraCameraCustom04Listener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zagara", lib281DEC45_ge_CameraType_Custom04Listener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZagaraCameraCustom04Listener_Init () {
    lib281DEC45_gt_UseZagaraCameraCustom04Listener = TriggerCreate("lib281DEC45_gt_UseZagaraCameraCustom04Listener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Raynor Camera CloseUp
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseRaynorCameraCloseUp_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Raynor", lib281DEC45_ge_CameraType_CloseUp);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseRaynorCameraCloseUp_Init () {
    lib281DEC45_gt_UseRaynorCameraCloseUp = TriggerCreate("lib281DEC45_gt_UseRaynorCameraCloseUp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Raynor Camera CloseUp Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseRaynorCameraCloseUpListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Raynor", lib281DEC45_ge_CameraType_CloseUpListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseRaynorCameraCloseUpListener_Init () {
    lib281DEC45_gt_UseRaynorCameraCloseUpListener = TriggerCreate("lib281DEC45_gt_UseRaynorCameraCloseUpListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Raynor Camera Medium
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseRaynorCameraMedium_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Raynor", lib281DEC45_ge_CameraType_Medium);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseRaynorCameraMedium_Init () {
    lib281DEC45_gt_UseRaynorCameraMedium = TriggerCreate("lib281DEC45_gt_UseRaynorCameraMedium_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Raynor Camera Medium Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseRaynorCameraMediumListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Raynor", lib281DEC45_ge_CameraType_MediumListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseRaynorCameraMediumListener_Init () {
    lib281DEC45_gt_UseRaynorCameraMediumListener = TriggerCreate("lib281DEC45_gt_UseRaynorCameraMediumListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Raynor Camera Far
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseRaynorCameraFar_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Raynor", lib281DEC45_ge_CameraType_Far);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseRaynorCameraFar_Init () {
    lib281DEC45_gt_UseRaynorCameraFar = TriggerCreate("lib281DEC45_gt_UseRaynorCameraFar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Raynor Camera Far Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseRaynorCameraFarListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Raynor", lib281DEC45_ge_CameraType_FarListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseRaynorCameraFarListener_Init () {
    lib281DEC45_gt_UseRaynorCameraFarListener = TriggerCreate("lib281DEC45_gt_UseRaynorCameraFarListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Raynor Camera Shoulder Reverse
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseRaynorCameraShoulderReverse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Raynor", lib281DEC45_ge_CameraType_OverShoulderReverse);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseRaynorCameraShoulderReverse_Init () {
    lib281DEC45_gt_UseRaynorCameraShoulderReverse = TriggerCreate("lib281DEC45_gt_UseRaynorCameraShoulderReverse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Raynor Camera Shoulder
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseRaynorCameraShoulder_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Raynor", lib281DEC45_ge_CameraType_OverShoulder);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseRaynorCameraShoulder_Init () {
    lib281DEC45_gt_UseRaynorCameraShoulder = TriggerCreate("lib281DEC45_gt_UseRaynorCameraShoulder_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Raynor Camera Extreme Closeup
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseRaynorCameraExtremeCloseup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Raynor", lib281DEC45_ge_CameraType_ExtremeCloseup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseRaynorCameraExtremeCloseup_Init () {
    lib281DEC45_gt_UseRaynorCameraExtremeCloseup = TriggerCreate("lib281DEC45_gt_UseRaynorCameraExtremeCloseup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Raynor Camera Extreme Closeup Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseRaynorCameraExtremeCloseupListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Raynor", lib281DEC45_ge_CameraType_ExtremeCloseupListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseRaynorCameraExtremeCloseupListener_Init () {
    lib281DEC45_gt_UseRaynorCameraExtremeCloseupListener = TriggerCreate("lib281DEC45_gt_UseRaynorCameraExtremeCloseupListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Raynor Camera Two Shot
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseRaynorCameraTwoShot_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Raynor", lib281DEC45_ge_CameraType_TwoShot);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseRaynorCameraTwoShot_Init () {
    lib281DEC45_gt_UseRaynorCameraTwoShot = TriggerCreate("lib281DEC45_gt_UseRaynorCameraTwoShot_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Protoss Prisoner Camera CloseUp
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseProtossPrisonerCameraCloseUp_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Protoss Prisoner", lib281DEC45_ge_CameraType_CloseUp);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseProtossPrisonerCameraCloseUp_Init () {
    lib281DEC45_gt_UseProtossPrisonerCameraCloseUp = TriggerCreate("lib281DEC45_gt_UseProtossPrisonerCameraCloseUp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Protoss Prisoner Camera CloseUp Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseProtossPrisonerCameraCloseUpListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Protoss Prisoner", lib281DEC45_ge_CameraType_CloseUpListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseProtossPrisonerCameraCloseUpListener_Init () {
    lib281DEC45_gt_UseProtossPrisonerCameraCloseUpListener = TriggerCreate("lib281DEC45_gt_UseProtossPrisonerCameraCloseUpListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Protoss Prisoner Camera Medium
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseProtossPrisonerCameraMedium_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Protoss Prisoner", lib281DEC45_ge_CameraType_Medium);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseProtossPrisonerCameraMedium_Init () {
    lib281DEC45_gt_UseProtossPrisonerCameraMedium = TriggerCreate("lib281DEC45_gt_UseProtossPrisonerCameraMedium_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Protoss Prisoner Camera Medium Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseProtossPrisonerCameraMediumListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Protoss Prisoner", lib281DEC45_ge_CameraType_MediumListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseProtossPrisonerCameraMediumListener_Init () {
    lib281DEC45_gt_UseProtossPrisonerCameraMediumListener = TriggerCreate("lib281DEC45_gt_UseProtossPrisonerCameraMediumListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Protoss Prisoner Camera Far
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseProtossPrisonerCameraFar_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Protoss Prisoner", lib281DEC45_ge_CameraType_Far);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseProtossPrisonerCameraFar_Init () {
    lib281DEC45_gt_UseProtossPrisonerCameraFar = TriggerCreate("lib281DEC45_gt_UseProtossPrisonerCameraFar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Protoss Prisoner Camera Far Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseProtossPrisonerCameraFarListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Protoss Prisoner", lib281DEC45_ge_CameraType_FarListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseProtossPrisonerCameraFarListener_Init () {
    lib281DEC45_gt_UseProtossPrisonerCameraFarListener = TriggerCreate("lib281DEC45_gt_UseProtossPrisonerCameraFarListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Protoss Prisoner Camera Shoulder Reverse
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseProtossPrisonerCameraShoulderReverse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Protoss Prisoner", lib281DEC45_ge_CameraType_OverShoulderReverse);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseProtossPrisonerCameraShoulderReverse_Init () {
    lib281DEC45_gt_UseProtossPrisonerCameraShoulderReverse = TriggerCreate("lib281DEC45_gt_UseProtossPrisonerCameraShoulderReverse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Protoss Prisoner Camera Shoulder
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseProtossPrisonerCameraShoulder_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Protoss Prisoner", lib281DEC45_ge_CameraType_OverShoulder);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseProtossPrisonerCameraShoulder_Init () {
    lib281DEC45_gt_UseProtossPrisonerCameraShoulder = TriggerCreate("lib281DEC45_gt_UseProtossPrisonerCameraShoulder_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Protoss Prisoner Camera Extreme Closeup
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseProtossPrisonerCameraExtremeCloseup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Protoss Prisoner", lib281DEC45_ge_CameraType_ExtremeCloseup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseProtossPrisonerCameraExtremeCloseup_Init () {
    lib281DEC45_gt_UseProtossPrisonerCameraExtremeCloseup = TriggerCreate("lib281DEC45_gt_UseProtossPrisonerCameraExtremeCloseup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Protoss Prisoner Camera Extreme Closeup Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseProtossPrisonerCameraExtremeCloseupListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Protoss Prisoner", lib281DEC45_ge_CameraType_ExtremeCloseupListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseProtossPrisonerCameraExtremeCloseupListener_Init () {
    lib281DEC45_gt_UseProtossPrisonerCameraExtremeCloseupListener = TriggerCreate("lib281DEC45_gt_UseProtossPrisonerCameraExtremeCloseupListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Protoss Prisoner Camera Two Shot
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseProtossPrisonerCameraTwoShot_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Protoss Prisoner", lib281DEC45_ge_CameraType_TwoShot);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseProtossPrisonerCameraTwoShot_Init () {
    lib281DEC45_gt_UseProtossPrisonerCameraTwoShot = TriggerCreate("lib281DEC45_gt_UseProtossPrisonerCameraTwoShot_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Protoss Prisoner Camera Custom 01
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseProtossPrisonerCameraCustom01_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Protoss Prisoner", lib281DEC45_ge_CameraType_Custom01);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseProtossPrisonerCameraCustom01_Init () {
    lib281DEC45_gt_UseProtossPrisonerCameraCustom01 = TriggerCreate("lib281DEC45_gt_UseProtossPrisonerCameraCustom01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zeratul Camera CloseUp
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZeratulCameraCloseUp_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zeratul", lib281DEC45_ge_CameraType_CloseUp);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZeratulCameraCloseUp_Init () {
    lib281DEC45_gt_UseZeratulCameraCloseUp = TriggerCreate("lib281DEC45_gt_UseZeratulCameraCloseUp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zeratul Camera CloseUp Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZeratulCameraCloseUpListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zeratul", lib281DEC45_ge_CameraType_CloseUpListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZeratulCameraCloseUpListener_Init () {
    lib281DEC45_gt_UseZeratulCameraCloseUpListener = TriggerCreate("lib281DEC45_gt_UseZeratulCameraCloseUpListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zeratul Camera Medium 
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZeratulCameraMedium_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zeratul", lib281DEC45_ge_CameraType_Medium);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZeratulCameraMedium_Init () {
    lib281DEC45_gt_UseZeratulCameraMedium = TriggerCreate("lib281DEC45_gt_UseZeratulCameraMedium_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zeratul Camera Medium Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZeratulCameraMediumListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zeratul", lib281DEC45_ge_CameraType_MediumListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZeratulCameraMediumListener_Init () {
    lib281DEC45_gt_UseZeratulCameraMediumListener = TriggerCreate("lib281DEC45_gt_UseZeratulCameraMediumListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zeratul Camera Far
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZeratulCameraFar_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zeratul", lib281DEC45_ge_CameraType_Far);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZeratulCameraFar_Init () {
    lib281DEC45_gt_UseZeratulCameraFar = TriggerCreate("lib281DEC45_gt_UseZeratulCameraFar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zeratul Camera Far Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZeratulCameraFarListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zeratul", lib281DEC45_ge_CameraType_FarListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZeratulCameraFarListener_Init () {
    lib281DEC45_gt_UseZeratulCameraFarListener = TriggerCreate("lib281DEC45_gt_UseZeratulCameraFarListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zeratul Camera Shoulder Reverse
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZeratulCameraShoulderReverse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zeratul", lib281DEC45_ge_CameraType_OverShoulderReverse);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZeratulCameraShoulderReverse_Init () {
    lib281DEC45_gt_UseZeratulCameraShoulderReverse = TriggerCreate("lib281DEC45_gt_UseZeratulCameraShoulderReverse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zeratul Camera Shoulder
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZeratulCameraShoulder_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zeratul", lib281DEC45_ge_CameraType_OverShoulder);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZeratulCameraShoulder_Init () {
    lib281DEC45_gt_UseZeratulCameraShoulder = TriggerCreate("lib281DEC45_gt_UseZeratulCameraShoulder_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zeratul Camera Extreme Closeup
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZeratulCameraExtremeCloseup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zeratul", lib281DEC45_ge_CameraType_ExtremeCloseup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZeratulCameraExtremeCloseup_Init () {
    lib281DEC45_gt_UseZeratulCameraExtremeCloseup = TriggerCreate("lib281DEC45_gt_UseZeratulCameraExtremeCloseup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zeratul Camera Extreme Closeup Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZeratulCameraExtremeCloseupListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zeratul", lib281DEC45_ge_CameraType_ExtremeCloseupListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZeratulCameraExtremeCloseupListener_Init () {
    lib281DEC45_gt_UseZeratulCameraExtremeCloseupListener = TriggerCreate("lib281DEC45_gt_UseZeratulCameraExtremeCloseupListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zeratul Camera Two Shot
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZeratulCameraTwoShot_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Zeratul", lib281DEC45_ge_CameraType_TwoShot);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZeratulCameraTwoShot_Init () {
    lib281DEC45_gt_UseZeratulCameraTwoShot = TriggerCreate("lib281DEC45_gt_UseZeratulCameraTwoShot_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Primal Advisor Camera CloseUp
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UsePrimalAdvisorCameraCloseUp_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Primal Advisor", lib281DEC45_ge_CameraType_CloseUp);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UsePrimalAdvisorCameraCloseUp_Init () {
    lib281DEC45_gt_UsePrimalAdvisorCameraCloseUp = TriggerCreate("lib281DEC45_gt_UsePrimalAdvisorCameraCloseUp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Primal Advisor Camera CloseUp Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UsePrimalAdvisorCameraCloseUpListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Primal Advisor", lib281DEC45_ge_CameraType_CloseUpListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UsePrimalAdvisorCameraCloseUpListener_Init () {
    lib281DEC45_gt_UsePrimalAdvisorCameraCloseUpListener = TriggerCreate("lib281DEC45_gt_UsePrimalAdvisorCameraCloseUpListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Primal Advisor Camera Medium
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UsePrimalAdvisorCameraMedium_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Primal Advisor", lib281DEC45_ge_CameraType_Medium);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UsePrimalAdvisorCameraMedium_Init () {
    lib281DEC45_gt_UsePrimalAdvisorCameraMedium = TriggerCreate("lib281DEC45_gt_UsePrimalAdvisorCameraMedium_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Primal Advisor Camera Medium Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UsePrimalAdvisorCameraMediumListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Primal Advisor", lib281DEC45_ge_CameraType_MediumListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UsePrimalAdvisorCameraMediumListener_Init () {
    lib281DEC45_gt_UsePrimalAdvisorCameraMediumListener = TriggerCreate("lib281DEC45_gt_UsePrimalAdvisorCameraMediumListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Primal Advisor Camera Far
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UsePrimalAdvisorCameraFar_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Primal Advisor", lib281DEC45_ge_CameraType_Far);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UsePrimalAdvisorCameraFar_Init () {
    lib281DEC45_gt_UsePrimalAdvisorCameraFar = TriggerCreate("lib281DEC45_gt_UsePrimalAdvisorCameraFar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Primal Advisor Camera Far Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UsePrimalAdvisorCameraFarListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Primal Advisor", lib281DEC45_ge_CameraType_FarListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UsePrimalAdvisorCameraFarListener_Init () {
    lib281DEC45_gt_UsePrimalAdvisorCameraFarListener = TriggerCreate("lib281DEC45_gt_UsePrimalAdvisorCameraFarListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Primal Advisor Camera Shoulder Reverse
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UsePrimalAdvisorCameraShoulderReverse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Primal Advisor", lib281DEC45_ge_CameraType_OverShoulderReverse);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UsePrimalAdvisorCameraShoulderReverse_Init () {
    lib281DEC45_gt_UsePrimalAdvisorCameraShoulderReverse = TriggerCreate("lib281DEC45_gt_UsePrimalAdvisorCameraShoulderReverse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Primal Advisor Camera Shoulder
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UsePrimalAdvisorCameraShoulder_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Primal Advisor", lib281DEC45_ge_CameraType_OverShoulder);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UsePrimalAdvisorCameraShoulder_Init () {
    lib281DEC45_gt_UsePrimalAdvisorCameraShoulder = TriggerCreate("lib281DEC45_gt_UsePrimalAdvisorCameraShoulder_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Primal Advisor Camera Extreme Closeup
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UsePrimalAdvisorCameraExtremeCloseup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Primal Advisor", lib281DEC45_ge_CameraType_ExtremeCloseup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UsePrimalAdvisorCameraExtremeCloseup_Init () {
    lib281DEC45_gt_UsePrimalAdvisorCameraExtremeCloseup = TriggerCreate("lib281DEC45_gt_UsePrimalAdvisorCameraExtremeCloseup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Primal Advisor Camera Extreme Closeup Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UsePrimalAdvisorCameraExtremeCloseupListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Primal Advisor", lib281DEC45_ge_CameraType_ExtremeCloseupListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UsePrimalAdvisorCameraExtremeCloseupListener_Init () {
    lib281DEC45_gt_UsePrimalAdvisorCameraExtremeCloseupListener = TriggerCreate("lib281DEC45_gt_UsePrimalAdvisorCameraExtremeCloseupListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Primal Advisor Camera Two Shot
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UsePrimalAdvisorCameraTwoShot_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Primal Advisor", lib281DEC45_ge_CameraType_TwoShot);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UsePrimalAdvisorCameraTwoShot_Init () {
    lib281DEC45_gt_UsePrimalAdvisorCameraTwoShot = TriggerCreate("lib281DEC45_gt_UsePrimalAdvisorCameraTwoShot_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Primal Advisor Camera Custom 01
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UsePrimalAdvisorCameraCustom01_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Primal Advisor", lib281DEC45_ge_CameraType_Custom01);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UsePrimalAdvisorCameraCustom01_Init () {
    lib281DEC45_gt_UsePrimalAdvisorCameraCustom01 = TriggerCreate("lib281DEC45_gt_UsePrimalAdvisorCameraCustom01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Stukov Camera CloseUp
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseStukovCameraCloseUp_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Stukov", lib281DEC45_ge_CameraType_CloseUp);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseStukovCameraCloseUp_Init () {
    lib281DEC45_gt_UseStukovCameraCloseUp = TriggerCreate("lib281DEC45_gt_UseStukovCameraCloseUp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Stukov Camera CloseUp Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseStukovCameraCloseUpListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Stukov", lib281DEC45_ge_CameraType_CloseUpListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseStukovCameraCloseUpListener_Init () {
    lib281DEC45_gt_UseStukovCameraCloseUpListener = TriggerCreate("lib281DEC45_gt_UseStukovCameraCloseUpListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Stukov Camera Medium
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseStukovCameraMedium_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Stukov", lib281DEC45_ge_CameraType_Medium);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseStukovCameraMedium_Init () {
    lib281DEC45_gt_UseStukovCameraMedium = TriggerCreate("lib281DEC45_gt_UseStukovCameraMedium_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Stukov Camera Medium Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseStukovCameraMediumListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Stukov", lib281DEC45_ge_CameraType_MediumListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseStukovCameraMediumListener_Init () {
    lib281DEC45_gt_UseStukovCameraMediumListener = TriggerCreate("lib281DEC45_gt_UseStukovCameraMediumListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Stukov Camera Far
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseStukovCameraFar_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Stukov", lib281DEC45_ge_CameraType_Far);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseStukovCameraFar_Init () {
    lib281DEC45_gt_UseStukovCameraFar = TriggerCreate("lib281DEC45_gt_UseStukovCameraFar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Stukov Camera Far Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseStukovCameraFarListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Stukov", lib281DEC45_ge_CameraType_FarListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseStukovCameraFarListener_Init () {
    lib281DEC45_gt_UseStukovCameraFarListener = TriggerCreate("lib281DEC45_gt_UseStukovCameraFarListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Stukov Camera Shoulder Reverse
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseStukovCameraShoulderReverse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Stukov", lib281DEC45_ge_CameraType_OverShoulderReverse);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseStukovCameraShoulderReverse_Init () {
    lib281DEC45_gt_UseStukovCameraShoulderReverse = TriggerCreate("lib281DEC45_gt_UseStukovCameraShoulderReverse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Stukov Camera Shoulder
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseStukovCameraShoulder_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Stukov", lib281DEC45_ge_CameraType_OverShoulder);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseStukovCameraShoulder_Init () {
    lib281DEC45_gt_UseStukovCameraShoulder = TriggerCreate("lib281DEC45_gt_UseStukovCameraShoulder_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Stukov Camera Extreme Closeup
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseStukovCameraExtremeCloseup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Stukov", lib281DEC45_ge_CameraType_ExtremeCloseup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseStukovCameraExtremeCloseup_Init () {
    lib281DEC45_gt_UseStukovCameraExtremeCloseup = TriggerCreate("lib281DEC45_gt_UseStukovCameraExtremeCloseup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Stukov Camera Extreme Closeup Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseStukovCameraExtremeCloseupListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Stukov", lib281DEC45_ge_CameraType_ExtremeCloseupListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseStukovCameraExtremeCloseupListener_Init () {
    lib281DEC45_gt_UseStukovCameraExtremeCloseupListener = TriggerCreate("lib281DEC45_gt_UseStukovCameraExtremeCloseupListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Stukov Camera Two Shot
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseStukovCameraTwoShot_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Stukov", lib281DEC45_ge_CameraType_TwoShot);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseStukovCameraTwoShot_Init () {
    lib281DEC45_gt_UseStukovCameraTwoShot = TriggerCreate("lib281DEC45_gt_UseStukovCameraTwoShot_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Stukov Camera Custom 01
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseStukovCameraCustom01_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Stukov", lib281DEC45_ge_CameraType_Custom01);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseStukovCameraCustom01_Init () {
    lib281DEC45_gt_UseStukovCameraCustom01 = TriggerCreate("lib281DEC45_gt_UseStukovCameraCustom01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Nova Camera CloseUp
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseNovaCameraCloseUp_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Nova", lib281DEC45_ge_CameraType_CloseUp);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseNovaCameraCloseUp_Init () {
    lib281DEC45_gt_UseNovaCameraCloseUp = TriggerCreate("lib281DEC45_gt_UseNovaCameraCloseUp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Nova Camera CloseUp Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseNovaCameraCloseUpListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Nova", lib281DEC45_ge_CameraType_CloseUpListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseNovaCameraCloseUpListener_Init () {
    lib281DEC45_gt_UseNovaCameraCloseUpListener = TriggerCreate("lib281DEC45_gt_UseNovaCameraCloseUpListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Nova Camera Medium
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseNovaCameraMedium_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Nova", lib281DEC45_ge_CameraType_Medium);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseNovaCameraMedium_Init () {
    lib281DEC45_gt_UseNovaCameraMedium = TriggerCreate("lib281DEC45_gt_UseNovaCameraMedium_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Nova Camera Medium Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseNovaCameraMediumListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Nova", lib281DEC45_ge_CameraType_MediumListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseNovaCameraMediumListener_Init () {
    lib281DEC45_gt_UseNovaCameraMediumListener = TriggerCreate("lib281DEC45_gt_UseNovaCameraMediumListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Nova Camera Shoulder Reverse
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseNovaCameraShoulderReverse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Nova", lib281DEC45_ge_CameraType_OverShoulderReverse);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseNovaCameraShoulderReverse_Init () {
    lib281DEC45_gt_UseNovaCameraShoulderReverse = TriggerCreate("lib281DEC45_gt_UseNovaCameraShoulderReverse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Nova Camera Shoulder
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseNovaCameraShoulder_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Nova", lib281DEC45_ge_CameraType_OverShoulder);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseNovaCameraShoulder_Init () {
    lib281DEC45_gt_UseNovaCameraShoulder = TriggerCreate("lib281DEC45_gt_UseNovaCameraShoulder_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Nova Camera Extreme Closeup
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseNovaCameraExtremeCloseup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Nova", lib281DEC45_ge_CameraType_ExtremeCloseup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseNovaCameraExtremeCloseup_Init () {
    lib281DEC45_gt_UseNovaCameraExtremeCloseup = TriggerCreate("lib281DEC45_gt_UseNovaCameraExtremeCloseup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Nova Camera Extreme Closeup Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseNovaCameraExtremeCloseupListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Nova", lib281DEC45_ge_CameraType_ExtremeCloseupListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseNovaCameraExtremeCloseupListener_Init () {
    lib281DEC45_gt_UseNovaCameraExtremeCloseupListener = TriggerCreate("lib281DEC45_gt_UseNovaCameraExtremeCloseupListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Nova Camera Two Shot
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseNovaCameraTwoShot_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Nova", lib281DEC45_ge_CameraType_TwoShot);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseNovaCameraTwoShot_Init () {
    lib281DEC45_gt_UseNovaCameraTwoShot = TriggerCreate("lib281DEC45_gt_UseNovaCameraTwoShot_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Horner Camera CloseUp
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseHornerCameraCloseUp_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Horner", lib281DEC45_ge_CameraType_CloseUp);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseHornerCameraCloseUp_Init () {
    lib281DEC45_gt_UseHornerCameraCloseUp = TriggerCreate("lib281DEC45_gt_UseHornerCameraCloseUp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Horner Camera CloseUp Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseHornerCameraCloseUpListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Horner", lib281DEC45_ge_CameraType_CloseUpListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseHornerCameraCloseUpListener_Init () {
    lib281DEC45_gt_UseHornerCameraCloseUpListener = TriggerCreate("lib281DEC45_gt_UseHornerCameraCloseUpListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Horner Camera Medium
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseHornerCameraMedium_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Horner", lib281DEC45_ge_CameraType_Medium);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseHornerCameraMedium_Init () {
    lib281DEC45_gt_UseHornerCameraMedium = TriggerCreate("lib281DEC45_gt_UseHornerCameraMedium_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Horner Camera Medium Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseHornerCameraMediumListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Horner", lib281DEC45_ge_CameraType_MediumListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseHornerCameraMediumListener_Init () {
    lib281DEC45_gt_UseHornerCameraMediumListener = TriggerCreate("lib281DEC45_gt_UseHornerCameraMediumListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Horner Camera Far
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseHornerCameraFar_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Horner", lib281DEC45_ge_CameraType_Far);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseHornerCameraFar_Init () {
    lib281DEC45_gt_UseHornerCameraFar = TriggerCreate("lib281DEC45_gt_UseHornerCameraFar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Horner Camera Far Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseHornerCameraFarListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Horner", lib281DEC45_ge_CameraType_FarListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseHornerCameraFarListener_Init () {
    lib281DEC45_gt_UseHornerCameraFarListener = TriggerCreate("lib281DEC45_gt_UseHornerCameraFarListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Horner Camera Shoulder Reverse
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseHornerCameraShoulderReverse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Horner", lib281DEC45_ge_CameraType_OverShoulderReverse);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseHornerCameraShoulderReverse_Init () {
    lib281DEC45_gt_UseHornerCameraShoulderReverse = TriggerCreate("lib281DEC45_gt_UseHornerCameraShoulderReverse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Horner Camera Shoulder
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseHornerCameraShoulder_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Horner", lib281DEC45_ge_CameraType_OverShoulder);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseHornerCameraShoulder_Init () {
    lib281DEC45_gt_UseHornerCameraShoulder = TriggerCreate("lib281DEC45_gt_UseHornerCameraShoulder_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Horner Camera Extreme Closeup
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseHornerCameraExtremeCloseup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Horner", lib281DEC45_ge_CameraType_ExtremeCloseup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseHornerCameraExtremeCloseup_Init () {
    lib281DEC45_gt_UseHornerCameraExtremeCloseup = TriggerCreate("lib281DEC45_gt_UseHornerCameraExtremeCloseup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Horner Camera Extreme Closeup Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseHornerCameraExtremeCloseupListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Horner", lib281DEC45_ge_CameraType_ExtremeCloseupListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseHornerCameraExtremeCloseupListener_Init () {
    lib281DEC45_gt_UseHornerCameraExtremeCloseupListener = TriggerCreate("lib281DEC45_gt_UseHornerCameraExtremeCloseupListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Horner Camera Two Shot
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseHornerCameraTwoShot_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Horner", lib281DEC45_ge_CameraType_TwoShot);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseHornerCameraTwoShot_Init () {
    lib281DEC45_gt_UseHornerCameraTwoShot = TriggerCreate("lib281DEC45_gt_UseHornerCameraTwoShot_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Valerian Camera CloseUp
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseValerianCameraCloseUp_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Valerian", lib281DEC45_ge_CameraType_CloseUp);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseValerianCameraCloseUp_Init () {
    lib281DEC45_gt_UseValerianCameraCloseUp = TriggerCreate("lib281DEC45_gt_UseValerianCameraCloseUp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Valerian Camera CloseUp Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseValerianCameraCloseUpListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Valerian", lib281DEC45_ge_CameraType_CloseUpListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseValerianCameraCloseUpListener_Init () {
    lib281DEC45_gt_UseValerianCameraCloseUpListener = TriggerCreate("lib281DEC45_gt_UseValerianCameraCloseUpListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Valerian Camera Medium
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseValerianCameraMedium_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Valerian", lib281DEC45_ge_CameraType_Medium);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseValerianCameraMedium_Init () {
    lib281DEC45_gt_UseValerianCameraMedium = TriggerCreate("lib281DEC45_gt_UseValerianCameraMedium_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Valerian Camera Medium Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseValerianCameraMediumListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Valerian", lib281DEC45_ge_CameraType_MediumListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseValerianCameraMediumListener_Init () {
    lib281DEC45_gt_UseValerianCameraMediumListener = TriggerCreate("lib281DEC45_gt_UseValerianCameraMediumListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Valerian Camera Far
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseValerianCameraFar_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Valerian", lib281DEC45_ge_CameraType_Far);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseValerianCameraFar_Init () {
    lib281DEC45_gt_UseValerianCameraFar = TriggerCreate("lib281DEC45_gt_UseValerianCameraFar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Valerian Camera Far Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseValerianCameraFarListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Valerian", lib281DEC45_ge_CameraType_FarListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseValerianCameraFarListener_Init () {
    lib281DEC45_gt_UseValerianCameraFarListener = TriggerCreate("lib281DEC45_gt_UseValerianCameraFarListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Valerian Camera Shoulder Reverse
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseValerianCameraShoulderReverse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Valerian", lib281DEC45_ge_CameraType_OverShoulderReverse);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseValerianCameraShoulderReverse_Init () {
    lib281DEC45_gt_UseValerianCameraShoulderReverse = TriggerCreate("lib281DEC45_gt_UseValerianCameraShoulderReverse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Valerian Camera Shoulder
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseValerianCameraShoulder_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Valerian", lib281DEC45_ge_CameraType_OverShoulder);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseValerianCameraShoulder_Init () {
    lib281DEC45_gt_UseValerianCameraShoulder = TriggerCreate("lib281DEC45_gt_UseValerianCameraShoulder_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Valerian Camera Extreme Closeup
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseValerianCameraExtremeCloseup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Valerian", lib281DEC45_ge_CameraType_ExtremeCloseup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseValerianCameraExtremeCloseup_Init () {
    lib281DEC45_gt_UseValerianCameraExtremeCloseup = TriggerCreate("lib281DEC45_gt_UseValerianCameraExtremeCloseup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Valerian Camera Extreme Closeup Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseValerianCameraExtremeCloseupListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Valerian", lib281DEC45_ge_CameraType_ExtremeCloseupListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseValerianCameraExtremeCloseupListener_Init () {
    lib281DEC45_gt_UseValerianCameraExtremeCloseupListener = TriggerCreate("lib281DEC45_gt_UseValerianCameraExtremeCloseupListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Valerian Camera Two Shot
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseValerianCameraTwoShot_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Valerian", lib281DEC45_ge_CameraType_TwoShot);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseValerianCameraTwoShot_Init () {
    lib281DEC45_gt_UseValerianCameraTwoShot = TriggerCreate("lib281DEC45_gt_UseValerianCameraTwoShot_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zurvan Camera CloseUp
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZurvanCameraCloseUp_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Primal Ancient", lib281DEC45_ge_CameraType_CloseUp);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZurvanCameraCloseUp_Init () {
    lib281DEC45_gt_UseZurvanCameraCloseUp = TriggerCreate("lib281DEC45_gt_UseZurvanCameraCloseUp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zurvan Camera CloseUp Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZurvanCameraCloseUpListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Primal Ancient", lib281DEC45_ge_CameraType_CloseUpListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZurvanCameraCloseUpListener_Init () {
    lib281DEC45_gt_UseZurvanCameraCloseUpListener = TriggerCreate("lib281DEC45_gt_UseZurvanCameraCloseUpListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zurvan Camera Medium
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZurvanCameraMedium_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Primal Ancient", lib281DEC45_ge_CameraType_Medium);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZurvanCameraMedium_Init () {
    lib281DEC45_gt_UseZurvanCameraMedium = TriggerCreate("lib281DEC45_gt_UseZurvanCameraMedium_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zurvan Camera Medium Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZurvanCameraMediumListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Primal Ancient", lib281DEC45_ge_CameraType_MediumListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZurvanCameraMediumListener_Init () {
    lib281DEC45_gt_UseZurvanCameraMediumListener = TriggerCreate("lib281DEC45_gt_UseZurvanCameraMediumListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zurvan Camera Far
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZurvanCameraFar_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Primal Ancient", lib281DEC45_ge_CameraType_Far);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZurvanCameraFar_Init () {
    lib281DEC45_gt_UseZurvanCameraFar = TriggerCreate("lib281DEC45_gt_UseZurvanCameraFar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zurvan Camera Far Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZurvanCameraFarListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Primal Ancient", lib281DEC45_ge_CameraType_FarListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZurvanCameraFarListener_Init () {
    lib281DEC45_gt_UseZurvanCameraFarListener = TriggerCreate("lib281DEC45_gt_UseZurvanCameraFarListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zurvan Camera Shoulder Reverse
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZurvanCameraShoulderReverse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Primal Ancient", lib281DEC45_ge_CameraType_OverShoulderReverse);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZurvanCameraShoulderReverse_Init () {
    lib281DEC45_gt_UseZurvanCameraShoulderReverse = TriggerCreate("lib281DEC45_gt_UseZurvanCameraShoulderReverse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zurvan Camera Shoulder
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZurvanCameraShoulder_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Primal Ancient", lib281DEC45_ge_CameraType_OverShoulder);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZurvanCameraShoulder_Init () {
    lib281DEC45_gt_UseZurvanCameraShoulder = TriggerCreate("lib281DEC45_gt_UseZurvanCameraShoulder_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zurvan Camera Extreme Closeup
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZurvanCameraExtremeCloseup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Primal Ancient", lib281DEC45_ge_CameraType_ExtremeCloseup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZurvanCameraExtremeCloseup_Init () {
    lib281DEC45_gt_UseZurvanCameraExtremeCloseup = TriggerCreate("lib281DEC45_gt_UseZurvanCameraExtremeCloseup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zurvan Camera Extreme Closeup Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZurvanCameraExtremeCloseupListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Primal Ancient", lib281DEC45_ge_CameraType_ExtremeCloseupListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZurvanCameraExtremeCloseupListener_Init () {
    lib281DEC45_gt_UseZurvanCameraExtremeCloseupListener = TriggerCreate("lib281DEC45_gt_UseZurvanCameraExtremeCloseupListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Zurvan Camera Two Shot
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseZurvanCameraTwoShot_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Primal Ancient", lib281DEC45_ge_CameraType_TwoShot);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseZurvanCameraTwoShot_Init () {
    lib281DEC45_gt_UseZurvanCameraTwoShot = TriggerCreate("lib281DEC45_gt_UseZurvanCameraTwoShot_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Mengsk Camera CloseUp
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseMengskCameraCloseUp_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Arcturus Mengsk", lib281DEC45_ge_CameraType_CloseUp);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseMengskCameraCloseUp_Init () {
    lib281DEC45_gt_UseMengskCameraCloseUp = TriggerCreate("lib281DEC45_gt_UseMengskCameraCloseUp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Mengsk Camera CloseUp Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseMengskCameraCloseUpListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Arcturus Mengsk", lib281DEC45_ge_CameraType_CloseUpListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseMengskCameraCloseUpListener_Init () {
    lib281DEC45_gt_UseMengskCameraCloseUpListener = TriggerCreate("lib281DEC45_gt_UseMengskCameraCloseUpListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Mengsk Camera Medium
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseMengskCameraMedium_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Arcturus Mengsk", lib281DEC45_ge_CameraType_Medium);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseMengskCameraMedium_Init () {
    lib281DEC45_gt_UseMengskCameraMedium = TriggerCreate("lib281DEC45_gt_UseMengskCameraMedium_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Mengsk Camera Medium Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseMengskCameraMediumListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Arcturus Mengsk", lib281DEC45_ge_CameraType_MediumListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseMengskCameraMediumListener_Init () {
    lib281DEC45_gt_UseMengskCameraMediumListener = TriggerCreate("lib281DEC45_gt_UseMengskCameraMediumListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Mengsk Camera Far
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseMengskCameraFar_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Arcturus Mengsk", lib281DEC45_ge_CameraType_Far);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseMengskCameraFar_Init () {
    lib281DEC45_gt_UseMengskCameraFar = TriggerCreate("lib281DEC45_gt_UseMengskCameraFar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Mengsk Camera Far Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseMengskCameraFarListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Arcturus Mengsk", lib281DEC45_ge_CameraType_FarListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseMengskCameraFarListener_Init () {
    lib281DEC45_gt_UseMengskCameraFarListener = TriggerCreate("lib281DEC45_gt_UseMengskCameraFarListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Mengsk Camera Shoulder Reverse
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseMengskCameraShoulderReverse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Arcturus Mengsk", lib281DEC45_ge_CameraType_OverShoulderReverse);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseMengskCameraShoulderReverse_Init () {
    lib281DEC45_gt_UseMengskCameraShoulderReverse = TriggerCreate("lib281DEC45_gt_UseMengskCameraShoulderReverse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Mengsk Camera Shoulder
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseMengskCameraShoulder_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Arcturus Mengsk", lib281DEC45_ge_CameraType_OverShoulder);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseMengskCameraShoulder_Init () {
    lib281DEC45_gt_UseMengskCameraShoulder = TriggerCreate("lib281DEC45_gt_UseMengskCameraShoulder_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Mengsk Camera Extreme Closeup
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseMengskCameraExtremeCloseup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Arcturus Mengsk", lib281DEC45_ge_CameraType_ExtremeCloseup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseMengskCameraExtremeCloseup_Init () {
    lib281DEC45_gt_UseMengskCameraExtremeCloseup = TriggerCreate("lib281DEC45_gt_UseMengskCameraExtremeCloseup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Mengsk Camera Extreme Closeup Listener
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseMengskCameraExtremeCloseupListener_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Arcturus Mengsk", lib281DEC45_ge_CameraType_ExtremeCloseupListener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseMengskCameraExtremeCloseupListener_Init () {
    lib281DEC45_gt_UseMengskCameraExtremeCloseupListener = TriggerCreate("lib281DEC45_gt_UseMengskCameraExtremeCloseupListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Mengsk Camera Two Shot
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_UseMengskCameraTwoShot_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_UseCharacterCamera("Arcturus Mengsk", lib281DEC45_ge_CameraType_TwoShot);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_UseMengskCameraTwoShot_Init () {
    lib281DEC45_gt_UseMengskCameraTwoShot = TriggerCreate("lib281DEC45_gt_UseMengskCameraTwoShot_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_Egg Room Evo Master Clicked
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_EggRoomEvoMasterClicked_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_ToggleAllUnitsHighlightable(false);
    lib281DEC45_gf_ZSS_CharacterActionRun("Evolution Master");
    lib281DEC45_gf_ToggleAllUnitsHighlightable(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_EggRoomEvoMasterClicked_Init () {
    lib281DEC45_gt_ZSS_EggRoomEvoMasterClicked = TriggerCreate("lib281DEC45_gt_ZSS_EggRoomEvoMasterClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_EggRoomPostDisplayCutScene
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_EggRoomPostDisplayCutScene_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_EggRoomPostDisplayCutScene_Init () {
    lib281DEC45_gt_ZSS_EggRoomPostDisplayCutScene = TriggerCreate("lib281DEC45_gt_ZSS_EggRoomPostDisplayCutScene_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_EggRoomLineHandle
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_EggRoomLineHandle_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((ConversationDataActiveLine() == "zSM_EvolutionMaster|Line00067")) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lib281DEC45_gf_CharacterUnit("Kerrigan")), lib281DEC45_gv_zSS_CONVANIMID, "Spell Alternate End", 0, 0.0);
    }
    else if ((ConversationDataActiveLine() == "zSM_EvolutionMaster|Line00070")) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lib281DEC45_gf_CharacterUnit("Kerrigan")), lib281DEC45_gv_zSS_CONVANIMID, "Eye Glow", c_animFlagPlayForever, c_animTimeDefault);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lib281DEC45_gf_CharacterUnit("Kerrigan")), c_animNameDefault, "Stand Angry", 0, c_animTimeDefault);
        SoundPlay(SoundLink("Cut_Conversation_Kerrigan_Psi_Abathur_01", 0), PlayerGroupAll(), 80.0, 0.0);
    }
    else if ((ConversationDataActiveLine() == "zSM_EvolutionMaster|Line00110")) {
        libNtve_gf_SimpleLookAtStart(lib281DEC45_gf_CharacterUnit("Kerrigan"), "InstantHeadOnly", ActorFrom(lib281DEC45_gv_zSS_LookAtHeadActorRef));
        libNtve_gf_SimpleLookAtStart(lib281DEC45_gf_CharacterUnit("Kerrigan"), "InstantEyesOnly", ActorFrom(lib281DEC45_gv_zSS_LookAtEyeActorRef));
        lib281DEC45_gf_ClearAnimationwithblendtime(lib281DEC45_gv_zSS_CONVANIMID, lib281DEC45_gf_CharacterUnit("Kerrigan"), 0.8);
        lib281DEC45_gf_SkipConversationLookAt();
    }
    else if (((ConversationDataActiveLine() == "zSM_EvolutionMaster|Line00199") || (ConversationDataActiveLine() == "zSM_EvolutionMaster|Line00203"))) {
        lib281DEC45_gf_ApplyCutsceneCamera(lib281DEC45_ge_CameraType_Medium, "Kerrigan");
        libNtve_gf_SendActorMessageToUnit(lib281DEC45_gf_CharacterUnit("Kerrigan"), "AnimPlay Default Stand,Turn,Cover,End 0 0.000000 -1.000000 -1.000000 AsAutomatic 0.000000 1000");
        SoundPlay(SoundLink("Cut_zerglings_tortured", 0), PlayerGroupAll(), 100.0, 0.0);
        lib281DEC45_gv_zSS_EggRoomConvoSound = SoundLastPlayed();
        SoundWait(SoundLastPlayed(), 0.3, c_soundOffsetEnd);
    }
    else if ((ConversationDataActiveLine() == "zSM_EvolutionMaster|Line00200")) {
        lib281DEC45_gf_ClearAnimationwithblendtime(c_animNameDefault, lib281DEC45_gf_CharacterUnit("Kerrigan"), 0.0);
        SoundStop(lib281DEC45_gv_zSS_EggRoomConvoSound, true);
    }
    else if ((ConversationDataActiveLine() == "zSM_EvolutionMaster|Line00262")) {
        ActorLookAtStop(libNtve_gf_MainActorofUnit(lib281DEC45_gf_CharacterUnit("Kerrigan")), "Head", 100, 0.7);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lib281DEC45_gf_CharacterUnit("Kerrigan")), lib281DEC45_gv_zSS_CONVANIMID, "Stand Turn Cover Start", c_animFlagPlayForever, c_animTimeDefault);
        Wait(1.2, c_timeGame);
        libNtve_gf_ShowHideUnit(lib281DEC45_gf_CharacterUnit("Kerrigan"), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_EggRoomLineHandle_Init () {
    lib281DEC45_gt_ZSS_EggRoomLineHandle = TriggerCreate("lib281DEC45_gt_ZSS_EggRoomLineHandle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_CharacterClicked
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_CharacterClicked_Func (bool testConds, bool runActions) {
    int auto696F1B38_ai;
    int auto696F1B38_ae;

    // Variable Declarations
    string lv_character;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib281DEC45_gv_zSS_InteractionOn == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto696F1B38_ai = 1;
    auto696F1B38_ae = UserDataInstanceCount("Character")+1;
    while (auto696F1B38_ai < auto696F1B38_ae) {
        lv_character = UserDataInstance("Character", auto696F1B38_ai);
        if ((lib281DEC45_gf_CharacterIsEnabled(lv_character) == true) && (lib281DEC45_gf_CharacterUnit(lv_character) == EventUnit())) {
            lib281DEC45_gf_ZSS_CharacterActionRun(lv_character);
            return true;
        }
        else {
        }
        auto696F1B38_ai = auto696F1B38_ai+1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_CharacterClicked_Init () {
    lib281DEC45_gt_ZSS_CharacterClicked = TriggerCreate("lib281DEC45_gt_ZSS_CharacterClicked_Func");
    TriggerAddEventUnitClick(lib281DEC45_gt_ZSS_CharacterClicked, null, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_InteractiveHighlightStart
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_InteractiveHighlightStart_Func (bool testConds, bool runActions) {
    int autoB487479E_ai;
    int autoB487479E_ae;

    // Variable Declarations
    string lv_character;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib281DEC45_gv_zSS_InteractionOn == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB487479E_ai = 1;
    autoB487479E_ae = UserDataInstanceCount("Character")+1;
    while (autoB487479E_ai < autoB487479E_ae) {
        lv_character = UserDataInstance("Character", autoB487479E_ai);
        if ((lib281DEC45_gf_CharacterUnit(lv_character) == EventUnit()) && (lib281DEC45_gf_CharacterIsEnabled(lv_character) == true)) {
            lib281DEC45_gf_ZSS_CharacterCalloutShowHide(true, lv_character);
            return true;
        }
        else {
        }
        autoB487479E_ai = autoB487479E_ai+1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_InteractiveHighlightStart_Init () {
    lib281DEC45_gt_ZSS_InteractiveHighlightStart = TriggerCreate("lib281DEC45_gt_ZSS_InteractiveHighlightStart_Func");
    TriggerAddEventUnitHighlight(lib281DEC45_gt_ZSS_InteractiveHighlightStart, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_InteractiveHighlightStop
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_InteractiveHighlightStop_Func (bool testConds, bool runActions) {
    int autoF33062A8_ai;
    int autoF33062A8_ae;

    // Variable Declarations
    string lv_character;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib281DEC45_gv_zSS_InteractionOn == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF33062A8_ai = 1;
    autoF33062A8_ae = UserDataInstanceCount("Character")+1;
    while (autoF33062A8_ai < autoF33062A8_ae) {
        lv_character = UserDataInstance("Character", autoF33062A8_ai);
        if ((lib281DEC45_gf_CharacterUnit(lv_character) == EventUnit()) && (lib281DEC45_gf_CharacterHasNewInfo(lv_character) == false)) {
            lib281DEC45_gf_ZSS_CharacterCalloutShowHide(false, lv_character);
            return true;
        }
        else {
        }
        autoF33062A8_ai = autoF33062A8_ai+1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_InteractiveHighlightStop_Init () {
    lib281DEC45_gt_ZSS_InteractiveHighlightStop = TriggerCreate("lib281DEC45_gt_ZSS_InteractiveHighlightStop_Func");
    TriggerAddEventUnitHighlight(lib281DEC45_gt_ZSS_InteractiveHighlightStop, null, c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_IzshaPeriodicArmyReminder
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_IzshaPeriodicArmyReminder_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UserDataGetInt("StoryStates", "Army UI Visited", "value", 1) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(lib281DEC45_gv_zSSC_IdleLineWaitTime, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_IzshaPeriodicArmyReminder_Init () {
    lib281DEC45_gt_ZSS_IzshaPeriodicArmyReminder = TriggerCreate("lib281DEC45_gt_ZSS_IzshaPeriodicArmyReminder_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_PlayIdleLines
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_PlayIdleLines_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_waitTime;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((UserDataGetInt("StoryStates", "Army UI Visited", "value", 1) == 0)) {
            lv_waitTime = 60.0;
        }
        else if ((libSwaC_gf_NumberOfMissions(libSwaC_ge_MissionCountOptions_Completed) == 6) && (UserDataGetInt("StoryStates", "Bottom Bar Travel Clicked", "value", 1) == 0)) {
            lv_waitTime = 60.0;
        }
        else if (true) {
            lv_waitTime = lib281DEC45_gv_zSSC_IdleLineWaitTime;
        }
        Wait(lv_waitTime, c_timeReal);
        if ((UserDataGetInt("StoryStates", "Army UI Visited", "value", 1) == 0)) {
            lib281DEC45_gf_PlayAmbientLine("Zerg Adjutant", "zSMAmbient_ZergAdjutant", true);
        }
        else if ((lib281DEC45_gf_ZSS_TravelAvailableCount() > 1) && (UserDataGetInt("StoryStates", "Bottom Bar Travel Clicked", "value", 1) == 0)) {
            lib281DEC45_gf_PlayAmbientLine("Zerg Adjutant", "zSMAmbient_TravelFirst", true);
        }
        else if (true) {
            lib281DEC45_gf_PlayAmbientLine("Zerg Adjutant", "zSMAmbient_Idles", true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_PlayIdleLines_Init () {
    lib281DEC45_gt_ZSS_PlayIdleLines = TriggerCreate("lib281DEC45_gt_ZSS_PlayIdleLines_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_PlayEntryAmbientLine
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_PlayEntryAmbientLine_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libNtve_gf_PlayerInCinematicMode(1) == false) && (lib281DEC45_gf_CurrentRoom() == lib281DEC45_ge_Rooms_StoryRoomMainSet) && (lib281DEC45_gf_CurrentStoryActivity() == lib281DEC45_ge_StoryActivities_ViewingRoom))) {
        Wait(0.1, c_timeGame);
    }
    Wait(1.0, c_timeGame);
    if (((lib281DEC45_gf_CurrentRoom() != lib281DEC45_ge_Rooms_StoryRoomMainSet) || (lib281DEC45_gf_CurrentStoryActivity() != lib281DEC45_ge_StoryActivities_ViewingRoom))) {
        return true;
    }
    else {
    }
    if ((libSwaC_gf_NumberOfMissions(libSwaC_ge_MissionCountOptions_Completed) > 3) && (UserDataGetInt("StoryStates", "Army UI Visited", "value", 1) == 0)) {
        lib281DEC45_gf_PlayAmbientLine("Zerg Adjutant", "zSMAmbient_ZergAdjutant", true);
    }
    else if ((libSwaC_gf_NumberOfMissions(libSwaC_ge_MissionCountOptions_Completed) == 6) && (UserDataGetInt("StoryStates", "Bottom Bar Travel Clicked", "value", 1) == 0)) {
        lib281DEC45_gf_PlayAmbientLine("Zerg Adjutant", "zSMAmbient_TravelFirst", true);
    }
    else if ((libSwaC_gf_MissionStatusCheck("ZZerus3", libSwaC_ge_MissionStatus_Available) == true)) {
        return true;
    }
    else if ((libSwaC_gf_NumberOfMissions(libSwaC_ge_MissionCountOptions_Completed) == 4) && (libSwaC_gf_LastMapConditionCheck(libSwaC_ge_MissionCondition_Sucessful) == true) && (libSwaC_gf_LastMapConditionCheck(libSwaC_ge_MissionCondition_Simulation) == false)) {
        lib281DEC45_gf_PlayAmbientTransmission("Zerg Adjutant", "zSM_Kerrigan|Line00034", true);
    }
    else if ((libSwaC_gf_LastMapConditionCheck(libSwaC_ge_MissionCondition_Sucessful) == true) && (libSwaC_gf_LastMapConditionCheck(libSwaC_ge_MissionCondition_Simulation) == false) && (libSwaC_gf_LastMap() == "ZZerus3")) {
        lib281DEC45_gf_PlayAmbientTransmission("Zerg Adjutant", "zSM_Kerrigan|Line00054", true);
    }
    else if ((libSwaC_gf_StoryKerriganLevel() >= 10) && (libSwaC_gf_StoryKerriganLevel() < 20) && (libSwaC_gf_StoryKerriganNewTierUnlocked() == true)) {
        lib281DEC45_gf_PlayAmbientTransmission("Zerg Adjutant", "zSM_Kerrigan|Line00035", true);
    }
    else if ((libSwaC_gf_StoryKerriganLevel() >= 20) && (libSwaC_gf_StoryKerriganLevel() < 30) && (libSwaC_gf_StoryKerriganNewTierUnlocked() == true)) {
        lib281DEC45_gf_PlayAmbientTransmission("Zerg Adjutant", "zSM_Kerrigan|Line00036", true);
    }
    else if ((libSwaC_gf_StoryKerriganLevel() >= 30) && (libSwaC_gf_StoryKerriganLevel() < 40) && (libSwaC_gf_StoryKerriganNewTierUnlocked() == true)) {
        lib281DEC45_gf_PlayAmbientTransmission("Zerg Adjutant", "zSM_Kerrigan|Line00037", true);
    }
    else if ((libSwaC_gf_StoryKerriganLevel() >= 40) && (libSwaC_gf_StoryKerriganLevel() < 50) && (libSwaC_gf_StoryKerriganNewTierUnlocked() == true)) {
        lib281DEC45_gf_PlayAmbientTransmission("Zerg Adjutant", "zSM_Kerrigan|Line00041", true);
    }
    else if ((libSwaC_gf_StoryKerriganLevel() >= 50) && (libSwaC_gf_StoryKerriganLevel() < 60) && (libSwaC_gf_StoryKerriganNewTierUnlocked() == true)) {
        lib281DEC45_gf_PlayAmbientTransmission("Zerg Adjutant", "zSM_Kerrigan|Line00042", true);
    }
    else if ((libSwaC_gf_StoryKerriganHasNewAbilities() == true)) {
        lib281DEC45_gf_PlayAmbientTransmission("Zerg Adjutant", "zSM_Kerrigan|Line00060", true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_PlayEntryAmbientLine_Init () {
    lib281DEC45_gt_ZSS_PlayEntryAmbientLine = TriggerCreate("lib281DEC45_gt_ZSS_PlayEntryAmbientLine_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: zScripted_EvoMissionsUnlock
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_zScripted_EvoMissionsUnlock_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_StoryCutsceneFade(false, 0.0, true);
    lib281DEC45_gf_ChangeRoom(lib281DEC45_ge_Rooms_StoryRoomEggRoom);
    lib281DEC45_gf_ToggleAllUnitsHighlightable(false);
    lib281DEC45_gf_ZSS_ParseCameraInfoString2();
    libSwaC_gf_StoryDisableEggRoomEvoMasterBirth();
    lib281DEC45_gf_ApplyCutsceneCameraFull(lib281DEC45_ge_CameraType_OverShoulder, "Evolution Master", "Evolution Master");
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lib281DEC45_gf_CharacterUnit("Evolution Master")), c_animNameDefault, "Birth", 0, 0.0);
    libNtve_gf_MakeUnitLookAtUnit(lib281DEC45_gf_CharacterUnit("Evolution Master"), "InstantHeadOnly", lib281DEC45_gf_CharacterUnit("Kerrigan"), "Ref_Head");
    libNtve_gf_MakeUnitLookAtUnit(lib281DEC45_gf_CharacterUnit("Kerrigan"), "InstantHeadOnlySubtle", lib281DEC45_gf_CharacterUnit("Evolution Master"), "Ref_Head");
    lib281DEC45_gf_PreloadScriptedConversation("zScripted_EvoMissionsUnlock", true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "zScripted_EvoMissionsUnlock", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    lib281DEC45_gf_PlayScriptedConversation("zScripted_EvoMissionsUnlock", c_conversationSkipSimple, lib281DEC45_ge_SwarmStoryFadeStyle_FadeOutOnSkip | lib281DEC45_ge_SwarmStoryFadeStyle_FadeInAfter | lib281DEC45_ge_SwarmStoryFadeStyle_FadeOutAfter | lib281DEC45_ge_SwarmStoryFadeStyle_BlockingFadeInAtStart, null);
    if ((lib281DEC45_gf_StoryLastConversationWasSkipped() == false)) {
        SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    }
    else {
    }
    lib281DEC45_gf_ZSS_EggRoomConvoCleanup();
    lib281DEC45_gf_ToggleAllUnitsHighlightable(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_zScripted_EvoMissionsUnlock_Init () {
    lib281DEC45_gt_zScripted_EvoMissionsUnlock = TriggerCreate("lib281DEC45_gt_zScripted_EvoMissionsUnlock_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: zScripted_EvolutionMaster_First
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_zScripted_EvolutionMaster_First_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_ChangeRoom(lib281DEC45_ge_Rooms_StoryRoomEggRoom);
    lib281DEC45_gf_ToggleAllUnitsHighlightable(false);
    lib281DEC45_gf_ShowHideStoryUnits(false);
    libSwaC_gf_StoryDisableEggRoomEvoMasterBirth();
    lib281DEC45_gf_ZSS_ParseCameraInfoString2();
    lib281DEC45_gf_ShowHideUnitAbs(false, lib281DEC45_gf_CharacterUnit("Evolution Master"));
    lib281DEC45_gf_PreloadScriptedConversation("zScripted_EvoMissionsUnlock", true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "zScripted_EvolutionMaster_First", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    lib281DEC45_gf_PlayScriptedConversation("zScripted_EvolutionMaster_First", c_conversationSkipSimple, lib281DEC45_ge_SwarmStoryFadeStyle_FadeOutOnSkip | lib281DEC45_ge_SwarmStoryFadeStyle_FadeInAfter | lib281DEC45_ge_SwarmStoryFadeStyle_FadeOutAfter, null);
    lib281DEC45_gf_ZSS_EggRoomConvoCleanup();
    lib281DEC45_gf_ToggleAllUnitsHighlightable(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_zScripted_EvolutionMaster_First_Init () {
    lib281DEC45_gt_zScripted_EvolutionMaster_First = TriggerCreate("lib281DEC45_gt_zScripted_EvolutionMaster_First_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: zScripted_Space01Travel
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_zScripted_Space01Travel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_restoreUI;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UserDataSetInt("StoryStates", "Space Scene Played", "value", 1, 1);
    lib281DEC45_gf_ChangeRoom(lib281DEC45_ge_Rooms_StoryRoomVoid);
    lib281DEC45_gf_PreloadScriptedConversation("zScripted_EvoMissionsUnlock", true);
    lib281DEC45_gf_StoryCutsceneFade(false, 0.0, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZSpace01MusicCutscene02_MissionIntro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    lib281DEC45_gf_PlayScriptedConversation("zScripted_Space01Travel", c_conversationSkipSimple, lib281DEC45_ge_SwarmStoryFadeStyle_FadeOutOnSkip, null);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    Wait(1.5, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_zScripted_Space01Travel_Init () {
    lib281DEC45_gt_zScripted_Space01Travel = TriggerCreate("lib281DEC45_gt_zScripted_Space01Travel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: zLD_KorhalIntro
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_zLD_KorhalIntro_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_EnterRoom(lib281DEC45_ge_Rooms_StoryRoomVoid);
    lib281DEC45_gf_PreloadScriptedConversation("zScripted_EvoMissionsUnlock", true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "zLD_Korhal1_LeviathanCutscene", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    lib281DEC45_gf_PlayStorymodeCutscene("Cutscenes\\zLD_Korhal1_LeviathanCutscene.SC2Cutscene");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_zLD_KorhalIntro_Init () {
    lib281DEC45_gt_zLD_KorhalIntro = TriggerCreate("lib281DEC45_gt_zLD_KorhalIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: zScripted_KorhalArcBefore
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_zScripted_KorhalArcBefore_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_ShowHideStoryUI(false);
    lib281DEC45_gf_ShowHideStoryUnits(false);
    lib281DEC45_gf_PreloadScriptedConversation("zScripted_EvoMissionsUnlock", true);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "zScripted_KorhalArcBefore", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    lib281DEC45_gf_PlayScriptedConversation("zScripted_KorhalArcBefore", c_conversationSkipSimple, lib281DEC45_ge_SwarmStoryFadeStyle_FadeOutOnSkip | lib281DEC45_ge_SwarmStoryFadeStyle_FadeInAfter, null);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    Wait(1.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_zScripted_KorhalArcBefore_Init () {
    lib281DEC45_gt_zScripted_KorhalArcBefore = TriggerCreate("lib281DEC45_gt_zScripted_KorhalArcBefore_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_CutsceneDetectSkipping
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_CutsceneDetectSkipping_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, lib281DEC45_gt_ZSS_CutsceneSkipped, true, false);
    while (true) {
        Wait(20.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_CutsceneDetectSkipping_Init () {
    lib281DEC45_gt_ZSS_CutsceneDetectSkipping = TriggerCreate("lib281DEC45_gt_ZSS_CutsceneDetectSkipping_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_CutsceneSkipped
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_CutsceneSkipped_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib281DEC45_gf_ZSS_SoundFadeAllExceptMusic(0.8, false);
    lib281DEC45_gv_zSS_LastScenePlayedFull = false;
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    lib281DEC45_gf_StoryCutsceneFade(false, 1.0, true);
    CutsceneStop(lib281DEC45_gv_zSS_Cutscene);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_CutsceneSkipped_Init () {
    lib281DEC45_gt_ZSS_CutsceneSkipped = TriggerCreate("lib281DEC45_gt_ZSS_CutsceneSkipped_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_UITravelPlayMusic
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_UITravelPlayMusic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSwaC_gf_NumberOfMissionArcsCompleted() == 1)) {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZSwarmMusicPlanetChoice", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }
    else if ((libSwaC_gf_CurrentMap() == "ZStoryHybrid") && (libSwaC_gf_NumberOfMissionArcsCompleted() == 5)) {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZSwarmMusicPlanetChoice", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }
    else if (true) {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZSwarmMusicPlanetChoice", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_UITravelPlayMusic_Init () {
    lib281DEC45_gt_ZSS_UITravelPlayMusic = TriggerCreate("lib281DEC45_gt_ZSS_UITravelPlayMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZSS_UIMissionPlayMusic
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_gt_ZSS_UIMissionPlayMusic_Func (bool testConds, bool runActions) {
    string autoE4EAAA40_val;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSwaC_gf_StoryInSimulation() == true)) {
        return true;
    }
    else {
    }
    autoE4EAAA40_val = lib281DEC45_gv_zSS_NextMission;
    if (autoE4EAAA40_val == "ZLab3") {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZLab03MusicRendezvous", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }
    else if (autoE4EAAA40_val == "ZLab2") {
        SoundtrackWait("ZLab02MusicCutscene_PreMission");
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZLab02MusicBackInTheSaddle", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }
    else if (autoE4EAAA40_val == "ZChar1") {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZCharXXMissionPitch", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }
    else if (autoE4EAAA40_val == "ZChar2") {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZCharXXMissionPitch", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }
    else if (autoE4EAAA40_val == "ZChar3") {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZCharXXMissionPitch", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }
    else if (autoE4EAAA40_val == "ZExpedition1") {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZExpeditionXXMissionPitch", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }
    else if (autoE4EAAA40_val == "ZExpedition2") {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZExpeditionXXMissionPitch", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }
    else if (autoE4EAAA40_val == "ZExpedition3") {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZExpeditionXXMissionPitch", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }
    else if (autoE4EAAA40_val == "ZZerus1") {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZZerusXXMissionPitch", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }
    else if (autoE4EAAA40_val == "ZZerus2") {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZZerusXXMissionPitch", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }
    else if (autoE4EAAA40_val == "ZZerus3") {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZZerusXXMissionPitch", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }
    else if (autoE4EAAA40_val == "ZHybrid1") {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZHybridXXMissionPitch", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }
    else if (autoE4EAAA40_val == "ZHybrid2") {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZHybridXXMissionPitch", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }
    else if (autoE4EAAA40_val == "ZHybrid3") {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZHybridXXMissionPitch", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }
    else if (autoE4EAAA40_val == "ZSpace1") {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZSpaceXXMissionPitch", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }
    else if (autoE4EAAA40_val == "ZSpace2") {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZSpaceXXMissionPitch", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }
    else if (autoE4EAAA40_val == "ZKorhal1") {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZKorhalXXMissionPitch", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }
    else if (autoE4EAAA40_val == "ZKorhal2") {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZKorhalXXMissionPitch", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }
    else if (autoE4EAAA40_val == "ZKorhal3") {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZKorhalXXMissionPitch", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib281DEC45_gt_ZSS_UIMissionPlayMusic_Init () {
    lib281DEC45_gt_ZSS_UIMissionPlayMusic = TriggerCreate("lib281DEC45_gt_ZSS_UIMissionPlayMusic_Func");
}

void lib281DEC45_InitTriggers () {
    lib281DEC45_gt_ZSS_DebugEnterEggRoom_Init();
    lib281DEC45_gt_ZSS_ResetStoryData_Init();
    lib281DEC45_gt_ZSS_SaveStoryDataCallback_Init();
    lib281DEC45_gt_ZSS_StoryModeMenuQuit_Init();
    lib281DEC45_gt_ZSS_StoryModeStatisticsSave_Init();
    lib281DEC45_gt_ZSS_SaveGameStart_Init();
    lib281DEC45_gt_ZSS_SaveGameEnd_Init();
    lib281DEC45_gt_ZSS_UIStoryInit_Init();
    lib281DEC45_gt_ZSS_UIWaitForSelection_Init();
    lib281DEC45_gt_ZSS_UIArchivesCreate_Init();
    lib281DEC45_gt_ZSS_UIArchivesSelectionChanged_Init();
    lib281DEC45_gt_ZSS_UIArchivesMissionPlayClicked_Init();
    lib281DEC45_gt_ZSS_UIArchivesScenePlayClicked_Init();
    lib281DEC45_gt_ZSS_UIArchivesCloseClicked_Init();
    lib281DEC45_gt_ZSS_UIArchivesSynced_Init();
    lib281DEC45_gt_ZSS_UITravelInit_Init();
    lib281DEC45_gt_ZSS_UITravelQuitSelected_Init();
    lib281DEC45_gt_ZSS_UITravelBackSelected_Init();
    lib281DEC45_gt_ZSS_UITravelCustomDialogDismiss_Init();
    lib281DEC45_gt_ZSS_UITravelLaunchSelected_Init();
    lib281DEC45_gt_ZSS_UITravelPlanetSelected_Init();
    lib281DEC45_gt_ZSS_UITravelPlayPitch_Init();
    lib281DEC45_gt_ZSS_UITravelStopPitch_Init();
    lib281DEC45_gt_ZSS_UIMissionCreate_Init();
    lib281DEC45_gt_ZSS_UIMissionQuitOKClicked_Init();
    lib281DEC45_gt_ZSS_UIMissionQuitCancelClicked_Init();
    lib281DEC45_gt_ZSS_UIMissionLaunchClicked_Init();
    lib281DEC45_gt_ZSS_UIMissionBackClicked_Init();
    lib281DEC45_gt_ZSS_UIMissionQuitClicked_Init();
    lib281DEC45_gt_ZSS_UIMissionPitchPlayClicked_Init();
    lib281DEC45_gt_ZSS_UIMissionPitchStopClicked_Init();
    lib281DEC45_gt_ZSS_UIMissionArmyClicked_Init();
    lib281DEC45_gt_ZSS_UIMissionKerriganClicked_Init();
    lib281DEC45_gt_ZSS_UIMainInit_Init();
    lib281DEC45_gt_ZSS_UIMainBottomButtonClicked_Init();
    lib281DEC45_gt_ZSS_UIKerriganExited_Init();
    lib281DEC45_gt_ZSS_UIArmySubscreenExited_Init();
    lib281DEC45_gt_ZSS_UILibraryWindowOpened_Init();
    lib281DEC45_gt_ZSS_UILibraryWindowClosed_Init();
    lib281DEC45_gt_ZSS_DebugSceneInit_Init();
    lib281DEC45_gt_ZSS_DebugSceneUsed_Init();
    lib281DEC45_gt_ZSS_DebugSceneButtonPushed_Init();
    lib281DEC45_gt_ZSS_DebugPerfTestFPSPoll_Init();
    lib281DEC45_gt_ZSS_DebugProgressMapComplete_Init();
    lib281DEC45_gt_ZSS_DebugProgressSave_Init();
    lib281DEC45_gt_ZSS_DebugProgressLoad_Init();
    lib281DEC45_gt_ZSS_DebugProgressCheatUsed_Init();
    lib281DEC45_gt_ZSS_DebugProgressCheatCancelled_Init();
    lib281DEC45_gt_ZSS_DebugStoryCheat_Init();
    lib281DEC45_gt_ZSS_DebugStoryCheatInit_Init();
    lib281DEC45_gt_ZSS_DebugStoryCheatListSelection_Init();
    lib281DEC45_gt_ZSS_DebugStoryCheatSceneListSelect_Init();
    lib281DEC45_gt_ZSS_DebugStoryCheatStateChange_Init();
    lib281DEC45_gt_ZSS_DebugStoryCheatChecked_Init();
    lib281DEC45_gt_ZSS_DebugStoryCustomDialogDismiss_Init();
    lib281DEC45_gt_ZSS_DebugStoryInteractiveReset_Init();
    lib281DEC45_gt_ZSS_DebugStoryCheatPlay_Init();
    lib281DEC45_gt_ZSS_DebugStoryCheatClose_Init();
    lib281DEC45_gt_ZSS_DebugStoryCheatLoad_Init();
    lib281DEC45_gt_ZSS_DebugLightsShow_Init();
    lib281DEC45_gt_ZSS_DebugLightsReset_Init();
    lib281DEC45_gt_ZSS_DebugUnitClickedDisplay_Init();
    lib281DEC45_gt_ZSS_DebugUnitClickedDisplayToggle_Init();
    lib281DEC45_gt_ZSS_DebugPanelToggle_Init();
    lib281DEC45_gt_ZSS_DebugKerriganCheatEnds_Init();
    lib281DEC45_gt_ZSS_DebugKerriganCheatRetail_Init();
    lib281DEC45_gt_ZSS_DebugArmyCheatRetail_Init();
    lib281DEC45_gt_TEMPOMGREMOVE_Init();
    lib281DEC45_gt_ZSS_StoryPerformFadeIn_Init();
    lib281DEC45_gt_ZSS_AmbientSceneEnded_Init();
    lib281DEC45_gt_ZSS_AmbientSceneTimerExpired_Init();
    lib281DEC45_gt_ZSS_DebugAmbientSceneAdvance_Init();
    lib281DEC45_gt_ZSS_CustomConvoSkipping_Init();
    lib281DEC45_gt_ZSS_DebugHideAfterLine_Init();
    lib281DEC45_gt_ZSS_RunAmbientConversation_Init();
    lib281DEC45_gt_ZSS_RunAmbientTransmission_Init();
    lib281DEC45_gt_ZSS_CancelAndFadeConvo_Init();
    lib281DEC45_gt_UseKerriganCameraCloseUp_Init();
    lib281DEC45_gt_UseKerriganCameraCloseUpListener_Init();
    lib281DEC45_gt_UseKerriganCameraMedium_Init();
    lib281DEC45_gt_UseKerriganCameraFar_Init();
    lib281DEC45_gt_UseKerriganCameraFarListener_Init();
    lib281DEC45_gt_UseKerriganCameraMediumListener_Init();
    lib281DEC45_gt_UseKerriganCameraShoulderReverse_Init();
    lib281DEC45_gt_UseKerriganCameraShoulder_Init();
    lib281DEC45_gt_UseKerriganCameraExtremeCloseup_Init();
    lib281DEC45_gt_UseKerriganCameraExtremeCloseupListener_Init();
    lib281DEC45_gt_UseKerriganCameraTwoShot_Init();
    lib281DEC45_gt_UseKerriganCameraCustom01_Init();
    lib281DEC45_gt_UseKerriganCameraCustom02_Init();
    lib281DEC45_gt_UseKerriganCameraCustom03_Init();
    lib281DEC45_gt_UseKerriganCameraCustom04_Init();
    lib281DEC45_gt_UseKerriganCameraCustom01Listener_Init();
    lib281DEC45_gt_UseKerriganCameraCustom02Listener_Init();
    lib281DEC45_gt_UseKerriganCameraCustom03Listener_Init();
    lib281DEC45_gt_UseKerriganCameraCustom04Listener_Init();
    lib281DEC45_gt_UseKaviCameraCloseUp_Init();
    lib281DEC45_gt_UseKaviCameraCloseUpListener_Init();
    lib281DEC45_gt_UseKaviCameraMedium_Init();
    lib281DEC45_gt_UseKaviCameraMediumListener_Init();
    lib281DEC45_gt_UseKaviCameraFar_Init();
    lib281DEC45_gt_UseKaviCameraFarListener_Init();
    lib281DEC45_gt_UseKaviCameraShoulderReverse_Init();
    lib281DEC45_gt_UseKaviCameraShoulder_Init();
    lib281DEC45_gt_UseKaviCameraExtremeCloseup_Init();
    lib281DEC45_gt_UseKaviCameraExtremeCloseupListener_Init();
    lib281DEC45_gt_UseKaviCameraTwoShot_Init();
    lib281DEC45_gt_UseKaviCameraCustom01_Init();
    lib281DEC45_gt_UseEvoMasterCameraCloseUp_Init();
    lib281DEC45_gt_UseEvoMasterCameraCloseUpListener_Init();
    lib281DEC45_gt_UseEvoMasterCameraMedium_Init();
    lib281DEC45_gt_UseEvoMasterCameraMediumListener_Init();
    lib281DEC45_gt_UseEvoMasterCameraFar_Init();
    lib281DEC45_gt_UseEvoMasterCameraFarListener_Init();
    lib281DEC45_gt_UseEvoMasterCameraShoulderReverse_Init();
    lib281DEC45_gt_UseEvoMasterCameraShoulder_Init();
    lib281DEC45_gt_UseEvoMasterCameraExtremeCloseup_Init();
    lib281DEC45_gt_UseEvoMasterCameraExtremeCloseupListener_Init();
    lib281DEC45_gt_UseEvoMasterCameraTwoShot_Init();
    lib281DEC45_gt_UseEvoMasterCameraCustom01_Init();
    lib281DEC45_gt_UseEvoMasterCameraCustom02_Init();
    lib281DEC45_gt_UseZagaraCameraCloseUp_Init();
    lib281DEC45_gt_UseZagaraCameraCloseUpListener_Init();
    lib281DEC45_gt_UseZagaraCameraMedium_Init();
    lib281DEC45_gt_UseZagaraCameraMediumListener_Init();
    lib281DEC45_gt_UseZagaraCameraFar_Init();
    lib281DEC45_gt_UseZagaraCameraFarListener_Init();
    lib281DEC45_gt_UseZagaraCameraShoulderReverse_Init();
    lib281DEC45_gt_UseZagaraCameraShoulder_Init();
    lib281DEC45_gt_UseZagaraCameraExtremeCloseup_Init();
    lib281DEC45_gt_UseZagaraCameraExtremeCloseupListener_Init();
    lib281DEC45_gt_UseZagaraCameraTwoShot_Init();
    lib281DEC45_gt_UseZagaraCameraCustom01_Init();
    lib281DEC45_gt_UseZagaraCameraCustom02_Init();
    lib281DEC45_gt_UseZagaraCameraCustom03_Init();
    lib281DEC45_gt_UseZagaraCameraCustom04_Init();
    lib281DEC45_gt_UseZagaraCameraCustom01Listener_Init();
    lib281DEC45_gt_UseZagaraCameraCustom02Listener_Init();
    lib281DEC45_gt_UseZagaraCameraCustom03Listener_Init();
    lib281DEC45_gt_UseZagaraCameraCustom04Listener_Init();
    lib281DEC45_gt_UseRaynorCameraCloseUp_Init();
    lib281DEC45_gt_UseRaynorCameraCloseUpListener_Init();
    lib281DEC45_gt_UseRaynorCameraMedium_Init();
    lib281DEC45_gt_UseRaynorCameraMediumListener_Init();
    lib281DEC45_gt_UseRaynorCameraFar_Init();
    lib281DEC45_gt_UseRaynorCameraFarListener_Init();
    lib281DEC45_gt_UseRaynorCameraShoulderReverse_Init();
    lib281DEC45_gt_UseRaynorCameraShoulder_Init();
    lib281DEC45_gt_UseRaynorCameraExtremeCloseup_Init();
    lib281DEC45_gt_UseRaynorCameraExtremeCloseupListener_Init();
    lib281DEC45_gt_UseRaynorCameraTwoShot_Init();
    lib281DEC45_gt_UseProtossPrisonerCameraCloseUp_Init();
    lib281DEC45_gt_UseProtossPrisonerCameraCloseUpListener_Init();
    lib281DEC45_gt_UseProtossPrisonerCameraMedium_Init();
    lib281DEC45_gt_UseProtossPrisonerCameraMediumListener_Init();
    lib281DEC45_gt_UseProtossPrisonerCameraFar_Init();
    lib281DEC45_gt_UseProtossPrisonerCameraFarListener_Init();
    lib281DEC45_gt_UseProtossPrisonerCameraShoulderReverse_Init();
    lib281DEC45_gt_UseProtossPrisonerCameraShoulder_Init();
    lib281DEC45_gt_UseProtossPrisonerCameraExtremeCloseup_Init();
    lib281DEC45_gt_UseProtossPrisonerCameraExtremeCloseupListener_Init();
    lib281DEC45_gt_UseProtossPrisonerCameraTwoShot_Init();
    lib281DEC45_gt_UseProtossPrisonerCameraCustom01_Init();
    lib281DEC45_gt_UseZeratulCameraCloseUp_Init();
    lib281DEC45_gt_UseZeratulCameraCloseUpListener_Init();
    lib281DEC45_gt_UseZeratulCameraMedium_Init();
    lib281DEC45_gt_UseZeratulCameraMediumListener_Init();
    lib281DEC45_gt_UseZeratulCameraFar_Init();
    lib281DEC45_gt_UseZeratulCameraFarListener_Init();
    lib281DEC45_gt_UseZeratulCameraShoulderReverse_Init();
    lib281DEC45_gt_UseZeratulCameraShoulder_Init();
    lib281DEC45_gt_UseZeratulCameraExtremeCloseup_Init();
    lib281DEC45_gt_UseZeratulCameraExtremeCloseupListener_Init();
    lib281DEC45_gt_UseZeratulCameraTwoShot_Init();
    lib281DEC45_gt_UsePrimalAdvisorCameraCloseUp_Init();
    lib281DEC45_gt_UsePrimalAdvisorCameraCloseUpListener_Init();
    lib281DEC45_gt_UsePrimalAdvisorCameraMedium_Init();
    lib281DEC45_gt_UsePrimalAdvisorCameraMediumListener_Init();
    lib281DEC45_gt_UsePrimalAdvisorCameraFar_Init();
    lib281DEC45_gt_UsePrimalAdvisorCameraFarListener_Init();
    lib281DEC45_gt_UsePrimalAdvisorCameraShoulderReverse_Init();
    lib281DEC45_gt_UsePrimalAdvisorCameraShoulder_Init();
    lib281DEC45_gt_UsePrimalAdvisorCameraExtremeCloseup_Init();
    lib281DEC45_gt_UsePrimalAdvisorCameraExtremeCloseupListener_Init();
    lib281DEC45_gt_UsePrimalAdvisorCameraTwoShot_Init();
    lib281DEC45_gt_UsePrimalAdvisorCameraCustom01_Init();
    lib281DEC45_gt_UseStukovCameraCloseUp_Init();
    lib281DEC45_gt_UseStukovCameraCloseUpListener_Init();
    lib281DEC45_gt_UseStukovCameraMedium_Init();
    lib281DEC45_gt_UseStukovCameraMediumListener_Init();
    lib281DEC45_gt_UseStukovCameraFar_Init();
    lib281DEC45_gt_UseStukovCameraFarListener_Init();
    lib281DEC45_gt_UseStukovCameraShoulderReverse_Init();
    lib281DEC45_gt_UseStukovCameraShoulder_Init();
    lib281DEC45_gt_UseStukovCameraExtremeCloseup_Init();
    lib281DEC45_gt_UseStukovCameraExtremeCloseupListener_Init();
    lib281DEC45_gt_UseStukovCameraTwoShot_Init();
    lib281DEC45_gt_UseStukovCameraCustom01_Init();
    lib281DEC45_gt_UseNovaCameraCloseUp_Init();
    lib281DEC45_gt_UseNovaCameraCloseUpListener_Init();
    lib281DEC45_gt_UseNovaCameraMedium_Init();
    lib281DEC45_gt_UseNovaCameraMediumListener_Init();
    lib281DEC45_gt_UseNovaCameraShoulderReverse_Init();
    lib281DEC45_gt_UseNovaCameraShoulder_Init();
    lib281DEC45_gt_UseNovaCameraExtremeCloseup_Init();
    lib281DEC45_gt_UseNovaCameraExtremeCloseupListener_Init();
    lib281DEC45_gt_UseNovaCameraTwoShot_Init();
    lib281DEC45_gt_UseHornerCameraCloseUp_Init();
    lib281DEC45_gt_UseHornerCameraCloseUpListener_Init();
    lib281DEC45_gt_UseHornerCameraMedium_Init();
    lib281DEC45_gt_UseHornerCameraMediumListener_Init();
    lib281DEC45_gt_UseHornerCameraFar_Init();
    lib281DEC45_gt_UseHornerCameraFarListener_Init();
    lib281DEC45_gt_UseHornerCameraShoulderReverse_Init();
    lib281DEC45_gt_UseHornerCameraShoulder_Init();
    lib281DEC45_gt_UseHornerCameraExtremeCloseup_Init();
    lib281DEC45_gt_UseHornerCameraExtremeCloseupListener_Init();
    lib281DEC45_gt_UseHornerCameraTwoShot_Init();
    lib281DEC45_gt_UseValerianCameraCloseUp_Init();
    lib281DEC45_gt_UseValerianCameraCloseUpListener_Init();
    lib281DEC45_gt_UseValerianCameraMedium_Init();
    lib281DEC45_gt_UseValerianCameraMediumListener_Init();
    lib281DEC45_gt_UseValerianCameraFar_Init();
    lib281DEC45_gt_UseValerianCameraFarListener_Init();
    lib281DEC45_gt_UseValerianCameraShoulderReverse_Init();
    lib281DEC45_gt_UseValerianCameraShoulder_Init();
    lib281DEC45_gt_UseValerianCameraExtremeCloseup_Init();
    lib281DEC45_gt_UseValerianCameraExtremeCloseupListener_Init();
    lib281DEC45_gt_UseValerianCameraTwoShot_Init();
    lib281DEC45_gt_UseZurvanCameraCloseUp_Init();
    lib281DEC45_gt_UseZurvanCameraCloseUpListener_Init();
    lib281DEC45_gt_UseZurvanCameraMedium_Init();
    lib281DEC45_gt_UseZurvanCameraMediumListener_Init();
    lib281DEC45_gt_UseZurvanCameraFar_Init();
    lib281DEC45_gt_UseZurvanCameraFarListener_Init();
    lib281DEC45_gt_UseZurvanCameraShoulderReverse_Init();
    lib281DEC45_gt_UseZurvanCameraShoulder_Init();
    lib281DEC45_gt_UseZurvanCameraExtremeCloseup_Init();
    lib281DEC45_gt_UseZurvanCameraExtremeCloseupListener_Init();
    lib281DEC45_gt_UseZurvanCameraTwoShot_Init();
    lib281DEC45_gt_UseMengskCameraCloseUp_Init();
    lib281DEC45_gt_UseMengskCameraCloseUpListener_Init();
    lib281DEC45_gt_UseMengskCameraMedium_Init();
    lib281DEC45_gt_UseMengskCameraMediumListener_Init();
    lib281DEC45_gt_UseMengskCameraFar_Init();
    lib281DEC45_gt_UseMengskCameraFarListener_Init();
    lib281DEC45_gt_UseMengskCameraShoulderReverse_Init();
    lib281DEC45_gt_UseMengskCameraShoulder_Init();
    lib281DEC45_gt_UseMengskCameraExtremeCloseup_Init();
    lib281DEC45_gt_UseMengskCameraExtremeCloseupListener_Init();
    lib281DEC45_gt_UseMengskCameraTwoShot_Init();
    lib281DEC45_gt_ZSS_EggRoomEvoMasterClicked_Init();
    lib281DEC45_gt_ZSS_EggRoomPostDisplayCutScene_Init();
    lib281DEC45_gt_ZSS_EggRoomLineHandle_Init();
    lib281DEC45_gt_ZSS_CharacterClicked_Init();
    lib281DEC45_gt_ZSS_InteractiveHighlightStart_Init();
    lib281DEC45_gt_ZSS_InteractiveHighlightStop_Init();
    lib281DEC45_gt_ZSS_IzshaPeriodicArmyReminder_Init();
    lib281DEC45_gt_ZSS_PlayIdleLines_Init();
    lib281DEC45_gt_ZSS_PlayEntryAmbientLine_Init();
    lib281DEC45_gt_zScripted_EvoMissionsUnlock_Init();
    lib281DEC45_gt_zScripted_EvolutionMaster_First_Init();
    lib281DEC45_gt_zScripted_Space01Travel_Init();
    lib281DEC45_gt_zLD_KorhalIntro_Init();
    lib281DEC45_gt_zScripted_KorhalArcBefore_Init();
    lib281DEC45_gt_ZSS_CutsceneDetectSkipping_Init();
    lib281DEC45_gt_ZSS_CutsceneSkipped_Init();
    lib281DEC45_gt_ZSS_UITravelPlayMusic_Init();
    lib281DEC45_gt_ZSS_UIMissionPlayMusic_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib281DEC45_InitLib_completed = false;

void lib281DEC45_InitLib () {
    if (lib281DEC45_InitLib_completed) {
        return;
    }

    lib281DEC45_InitLib_completed = true;

    lib281DEC45_InitLibraries();
    lib281DEC45_InitVariables();
    lib281DEC45_InitTriggers();
}

