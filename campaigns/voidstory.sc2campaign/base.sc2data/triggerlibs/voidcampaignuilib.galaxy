include "TriggerLibs/NativeLib"
include "TriggerLibs/VoidLib"
include "TriggerLibs/VoidCampaignLib_h"
include "TriggerLibs/VoidCampaignMissionLib_h"
include "TriggerLibs/VoidCampaignStoryLib_h"

include "TriggerLibs/VoidCampaignUILib_h"

//--------------------------------------------------------------------------------------------------
// Library: UI (Void)
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libVCUI_InitLibraries () {
    libNtve_InitVariables();
    libVoiC_InitVariables();
    libVCMI_InitVariables();
    libVCST_InitVariables();
}

// Variable Initialization
bool libVCUI_InitVariables_completed = false;

void libVCUI_InitVariables () {
    int init_i;
    int init_j;

    if (libVCUI_InitVariables_completed) {
        return;
    }

    libVCUI_InitVariables_completed = true;

    libVCUI_gv_pU_ArmyCategoryCount = 10;
    for (init_i = 0; init_i <= libVCUI_gv_pUC_ArmyCategoryCountMax; init_i += 1) {
        libVCUI_gv_pU_ArmyCategoryButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_ArmyCategoryCountMax; init_i += 1) {
        libVCUI_gv_pU_ArmyCategoryButtonHighlight[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_ArmyCategoryCountMax; init_i += 1) {
        libVCUI_gv_pU_ArmyCategoryUnitIcon[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_ArmyCategoryCountMax; init_i += 1) {
        libVCUI_gv_pU_ArmyCategoryFactionIcon[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_ArmyCategoryCountMax; init_i += 1) {
        libVCUI_gv_pU_ArmyCategoryChooseIcon[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_ArmyCategoryCountMax; init_i += 1) {
        libVCUI_gv_pU_ArmyCategoryFlash[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_ArmyCategoryCountMax; init_i += 1) {
        libVCUI_gv_pU_ArmyCategoryLockedLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_ArmyCategoryCountMax; init_i += 1) {
        libVCUI_gv_pU_ArmyCategoryNewLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_ArmyCategoryCountMax; init_i += 1) {
        libVCUI_gv_pU_ArmyCategoryNames[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_ArmyCategoryCountMax; init_i += 1) {
        libVCUI_gv_pU_ArmyCategoryRoles[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_ArmyCategoryCountMax; init_i += 1) {
        libVCUI_gv_pU_ArmyCategoryLockIcon[init_i] = c_invalidDialogControlId;
    }
    libVCUI_gv_pU_ArmyFactionPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libVCUI_gv_pUC_ArmyChoiceCount; init_i += 1) {
        libVCUI_gv_pU_ArmyFactionButtons[init_i] = c_invalidDialogControlId;
    }
    libVCUI_gv_pU_ArmyFactionLockedImage = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libVCUI_gv_pUC_ArmyChoiceCount; init_i += 1) {
        libVCUI_gv_pU_ArmyFactionPortrait[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_ArmyChoiceCount; init_i += 1) {
        libVCUI_gv_pU_ArmyFactionButtonHighlight[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_ArmyChoiceCount; init_i += 1) {
        libVCUI_gv_pU_ArmyFactionNameLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_ArmyChoiceCount; init_i += 1) {
        libVCUI_gv_pU_ArmyFactionUnitTitle[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_ArmyChoiceCount; init_i += 1) {
        libVCUI_gv_pU_ArmyFactionDetail[init_i] = c_invalidDialogControlId;
    }
    libVCUI_gv_pU_ArmyInfoPanel = c_invalidDialogControlId;
    libVCUI_gv_pU_ArmyInfoDescriptionLabel = c_invalidDialogControlId;
    libVCUI_gv_pU_ArmyInfoLoreLabel = c_invalidDialogControlId;
    libVCUI_gv_pU_ArmyInfoMovie = c_invalidDialogControlId;
    libVCUI_gv_pU_ArmyInfoAbilitiesHeading = c_invalidDialogControlId;
    libVCUI_gv_pU_ArmyInfoAbilitiesPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        libVCUI_gv_pU_ArmyInfoAbility[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        libVCUI_gv_pU_ArmyInfoAbility2[init_i] = c_invalidDialogControlId;
    }
    libVCUI_gv_pU_ArmyDialog = c_invalidDialogId;
    libVCUI_gv_pU_ArmyPanel = c_invalidDialogControlId;
    libVCUI_gv_pU_ArmyUpgradeConfirmButton = c_invalidDialogControlId;
    libVCUI_gv_pU_ArmyCutscene = c_cutsceneNone;
    libVCUI_gv_pU_ArmyFactionPrompt = c_invalidDialogControlId;
    libVCUI_gv_pU_ArmyUnitRotateFinderTag = "";
    libVCUI_gv_pU_ArmyUnitReminderTransmission = c_invalidTransmissionId;
    libVCUI_gv_pU_BottomBarDialog = c_invalidDialogId;
    libVCUI_gv_pU_BottomBarPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libVCUI_gv_pUC_BOTTOMBUTTONCOUNT; init_i += 1) {
        libVCUI_gv_pU_BottomBarButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_BOTTOMBUTTONCOUNT; init_i += 1) {
        libVCUI_gv_pU_BottomBarButtonSelectedDecoration[init_i] = c_invalidDialogControlId;
    }
    libVCUI_gv_pU_BottomBarBridgeButton = c_invalidDialogControlId;
    libVCUI_gv_pU_BottomBarCouncilButton = c_invalidDialogControlId;
    libVCUI_gv_pU_BottomBarSolarCoreButton = c_invalidDialogControlId;
    libVCUI_gv_pU_BottomBarMissionArchive = c_invalidDialogControlId;
    libVCUI_gv_pU_BottomBarStatusIcon = c_invalidDialogControlId;
    libVCUI_gv_pU_BottomBarStatusTooltip = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libVCUI_gv_pUC_BOTTOMBUTTONCOUNT; init_i += 1) {
        libVCUI_gv_pU_BottomBarStatusActionLabels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_BOTTOMBUTTONCOUNT; init_i += 1) {
        libVCUI_gv_pU_BottomBarStatusConvLabels[init_i] = c_invalidDialogControlId;
    }
    libVCUI_gv_pU_BottomBarOn = true;
    libVCUI_gv_pU_BottomBarSubtitleAnchor = c_invalidDialogControlId;
    libVCUI_gv_pU_ArchivesPanel = c_invalidDialogControlId;
    libVCUI_gv_pU_ArchivesTitle = c_invalidDialogControlId;
    libVCUI_gv_pU_ArchivesBackButton = c_invalidDialogControlId;
    libVCUI_gv_pU_ArchivesQuitButton = c_invalidDialogControlId;
    libVCUI_gv_pU_ArchivesMissionPanel = c_invalidDialogControlId;
    libVCUI_gv_pU_ArchivesMissionTitle = c_invalidDialogControlId;
    libVCUI_gv_pU_ArchivesMissionBonusLabel = c_invalidDialogControlId;
    libVCUI_gv_pU_ArchivesMissionImage = c_invalidDialogControlId;
    libVCUI_gv_pU_ArchivesAchievementPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libVCUI_gv_pU_ArchivesAchievements[init_i] = c_invalidDialogControlId;
    }
    libVCUI_gv_pU_ArchivesDifficultyPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        libVCUI_gv_pU_ArchivesDifficultyLabels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        libVCUI_gv_pU_ArchivesDifficultyTimes[init_i] = c_invalidDialogControlId;
    }
    libVCUI_gv_pU_ArchivesMissionPlayButton = c_invalidDialogControlId;
    libVCUI_gv_pU_ArchivesScenePanel = c_invalidDialogControlId;
    libVCUI_gv_pU_ArchivesSceneTitle = c_invalidDialogControlId;
    libVCUI_gv_pU_ArchivesSceneImage = c_invalidDialogControlId;
    libVCUI_gv_pU_ArchivesScenePlayButton = c_invalidDialogControlId;
    libVCUI_gv_pU_ArchivesLoadingDialog = c_invalidDialogId;
    libVCUI_gv_pU_ArchivesLoadingLabel = c_invalidDialogControlId;
    libVCUI_gv_pU_ArchivesFirstOpen = true;
    libVCUI_gv_pUC_ArchivesMissionLoadingWidth = 1920;
    libVCUI_gv_pUC_ArchivesMissionLoadingHeight = 1080;
    libVCUI_gv_pUC_ArchivesMissionTargetWidth = 960;
    libVCUI_gv_pUC_ArchivesMissionTargetHeight = 851;
    libVCUI_gv_pU_MissionDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        libVCUI_gv_pU_MissionAttachDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        libVCUI_gv_pU_MissionAttachPanel[init_i] = c_invalidDialogControlId;
    }
    libVCUI_gv_pU_MissionPanel = c_invalidDialogControlId;
    libVCUI_gv_pU_Mission2DBackground = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        libVCUI_gv_pU_MissionCalloutLines[init_i] = c_invalidDialogControlId;
    }
    libVCUI_gv_pU_MissionPortraitFrame = c_invalidDialogControlId;
    libVCUI_gv_pU_MissionPortraitFluffLabel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libVCUI_gv_pU_MissionVignetteScene[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libVCUI_gv_pU_MissionVignetteFrame[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libVCUI_gv_pU_MissionFluffLabels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libVCUI_gv_pU_MissionAchievementFrame[init_i] = c_invalidDialogControlId;
    }
    libVCUI_gv_pU_MissionAchievementPanel = c_invalidDialogControlId;
    libVCUI_gv_pU_MissionRewardPanel = c_invalidDialogControlId;
    libVCUI_gv_pU_MissionRewardPrimaryContainer = c_invalidDialogControlId;
    libVCUI_gv_pU_MissionRewardPrimaryHeadingLabel = c_invalidDialogControlId;
    libVCUI_gv_pU_MissionRewardPrimaryCurrencyLabel = c_invalidDialogControlId;
    libVCUI_gv_pU_MissionRewardPrimaryFactionLabel = c_invalidDialogControlId;
    libVCUI_gv_pU_MissionRewardBonusContainer = c_invalidDialogControlId;
    libVCUI_gv_pU_MissionRewardBonusHeadingLabel = c_invalidDialogControlId;
    libVCUI_gv_pU_MissionRewardBonusCurrencyLabel = c_invalidDialogControlId;
    libVCUI_gv_pU_MissionRewardUnitPanel = c_invalidDialogControlId;
    libVCUI_gv_pU_MissionRewardUnitModel = c_invalidDialogControlId;
    libVCUI_gv_pU_MissionRewardUnitName = c_invalidDialogControlId;
    libVCUI_gv_pU_MissionRewardUnitPanel2 = c_invalidDialogControlId;
    libVCUI_gv_pU_MissionRewardUnitModel2 = c_invalidDialogControlId;
    libVCUI_gv_pU_MissionRewardUnitName2 = c_invalidDialogControlId;
    libVCUI_gv_pU_MissionTitleLabel = c_invalidDialogControlId;
    libVCUI_gv_pU_MissionObjectiveLabel = c_invalidDialogControlId;
    libVCUI_gv_pU_MissionLaunchButton = c_invalidDialogControlId;
    libVCUI_gv_pU_MissionBackButton = c_invalidDialogControlId;
    libVCUI_gv_pU_MissionQuitButton = c_invalidDialogControlId;
    libVCUI_gv_pU_MissionPitchPlayButton = c_invalidDialogControlId;
    libVCUI_gv_pU_MissionPitchStopButton = c_invalidDialogControlId;
    libVCUI_gv_pU_MissionDifficultyDropdown = c_invalidDialogControlId;
    libVCUI_gv_pU_MissionSubtitleAnchor = c_invalidDialogControlId;
    libVCUI_gv_pU_MissionArmyButton = c_invalidDialogControlId;
    libVCUI_gv_pU_MissionShipButton = c_invalidDialogControlId;
    libVCUI_gv_pU_MissionEasterEggButton = c_invalidDialogControlId;
    libVCUI_gv_pU_MissionCutscene = c_cutsceneNone;
    libVCUI_gv_pU_MissionAliasedUnitGroup = UnitGroupEmpty();
    for (init_i = 0; init_i <= libVCUI_gv_pUC_SoAGroupCount; init_i += 1) {
        libVCUI_gv_pU_SoAInventory[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_SoAGroupCount; init_i += 1) {
        libVCUI_gv_pU_SoAInventoryTitle[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_SoAGroupCount; init_i += 1) {
        libVCUI_gv_pU_SoAInventorySelectedItemName[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_SoAGroupCount; init_i += 1) {
        for (init_j = 0; init_j <= libVCUI_gv_pUC_SoAInventoryItemCount; init_j += 1) {
            libVCUI_gv_pU_SoAInventoryLockIcon[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_SoAGroupCount; init_i += 1) {
        for (init_j = 0; init_j <= libVCUI_gv_pUC_SoAInventoryItemCount; init_j += 1) {
            libVCUI_gv_pU_SoAInventoryItemFrames[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_SoAGroupCount; init_i += 1) {
        for (init_j = 0; init_j <= libVCUI_gv_pUC_SoAInventoryItemCount; init_j += 1) {
            libVCUI_gv_pU_SoAInventoryButtons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_SoAGroupCount; init_i += 1) {
        for (init_j = 0; init_j <= libVCUI_gv_pUC_SoAInventoryItemCount; init_j += 1) {
            libVCUI_gv_pU_SoAInventoryImages[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_SoAGroupCount; init_i += 1) {
        for (init_j = 0; init_j <= libVCUI_gv_pUC_SoAInventoryItemCount; init_j += 1) {
            libVCUI_gv_pU_SoAInventoryShimmers[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_SoAGroupCount; init_i += 1) {
        for (init_j = 0; init_j <= libVCUI_gv_pUC_SoAInventoryItemCount; init_j += 1) {
            libVCUI_gv_pU_SoAInventoryLabels[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_SoAGroupCount; init_i += 1) {
        for (init_j = 0; init_j <= libVCUI_gv_pUC_SoAInventoryItemCount; init_j += 1) {
            libVCUI_gv_pU_SoAInventoryCurrencyLabels[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_SoAAuxiliaryCount; init_i += 1) {
        libVCUI_gv_pU_SoAAuxiliaryFrame[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_SoAAuxiliaryCount; init_i += 1) {
        for (init_j = 0; init_j <= libVCUI_gv_pUC_SoAAuxiliaryMaxCurrency; init_j += 1) {
            libVCUI_gv_pU_SoAAuxiliaryCurrencyImages[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_SoAAuxiliaryCount; init_i += 1) {
        for (init_j = 0; init_j <= libVCUI_gv_pUC_SoAAuxiliaryMaxCurrency; init_j += 1) {
            libVCUI_gv_pU_SoAAuxiliaryCurrencyFrames[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_SoAAuxiliaryCount; init_i += 1) {
        libVCUI_gv_pU_SoAAuxiliaryPlusButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_SoAAuxiliaryCount; init_i += 1) {
        libVCUI_gv_pU_SoAAuxiliaryMinusButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_SoAAuxiliaryCount; init_i += 1) {
        libVCUI_gv_pU_SoAAuxiliaryTitleLabel[init_i] = c_invalidDialogControlId;
    }
    libVCUI_gv_pU_SoACurrencyStatusLabel = c_invalidDialogControlId;
    libVCUI_gv_pU_SoACurrencyRemainingLabel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libVCUI_gv_pUC_SoAGroupCount; init_i += 1) {
        libVCUI_gv_pU_SoAInventoryHighlight[init_i] = c_invalidDialogControlId;
    }
    libVCUI_gv_pU_SoAAuxiliaryHighlight = c_invalidDialogControlId;
    libVCUI_gv_pU_SoACurrencyHighlight = c_invalidDialogControlId;
    libVCUI_gv_pU_SoABackgroundCutscene = c_cutsceneNone;
    for (init_i = 0; init_i <= libVCUI_gv_pUC_SoAGroupCount; init_i += 1) {
        libVCUI_gv_pU_SoAAttachPanels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_SoAGroupCount; init_i += 1) {
        libVCUI_gv_pU_SoAAttachDialogs[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_SoAGroupCount; init_i += 1) {
        libVCUI_gv_pU_SoACalloutPanels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_SoAGroupCount; init_i += 1) {
        libVCUI_gv_pU_SoACalloutTitleLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_SoAGroupCount; init_i += 1) {
        libVCUI_gv_pU_SoACalloutSubtitleLabel[init_i] = c_invalidDialogControlId;
    }
    libVCUI_gv_pU_SoAPanel = c_invalidDialogControlId;
    libVCUI_gv_pU_SoASubtitleAnchor = c_invalidDialogControlId;
    libVCUI_gv_pU_SoACutsceneFrame = c_invalidDialogControlId;
    libVCUI_gv_pU_SoADialog = c_invalidDialogId;
    libVCUI_gv_pU_SoAResetButton = c_invalidDialogControlId;
    libVCUI_gv_pU_SoABackButton = c_invalidDialogControlId;
    libVCUI_gv_pU_StarmapCutscene = c_cutsceneNone;
    libVCUI_gv_pU_StarmapPlanetFluffRight = c_invalidDialogControlId;
    libVCUI_gv_pU_StarmapPlanetFluffLeft = c_invalidDialogControlId;
    libVCUI_gv_pU_StarmapSelectedPlanetNameLabel = c_invalidDialogControlId;
    libVCUI_gv_pU_StarmapSelectedPlanetNameLabelCallout = c_invalidDialogControlId;
    libVCUI_gv_pU_StarmapNewUnitCallout = c_invalidDialogControlId;
    libVCUI_gv_pU_StarmapMissionRewards2 = c_invalidDialogControlId;
    libVCUI_gv_pU_StarmapMissionRewards = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libVCUI_gv_pU_StarmapPlanetButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libVCUI_gv_pU_StarmapPlanetButtonDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libVCUI_gv_pU_StarmapPlanetAttachPanel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libVCUI_gv_pU_StarmapPlanetAttachDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libVCUI_gv_pU_StarmapUnitLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libVCUI_gv_pU_StarmapUnitPanel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libVCUI_gv_pU_StarmapUnitModels[init_i] = c_invalidDialogControlId;
    }
    libVCUI_gv_pU_StarmapPitchStopButton = c_invalidDialogControlId;
    libVCUI_gv_pU_StarmapPitchPlayButton = c_invalidDialogControlId;
    libVCUI_gv_pU_StarmapPitchFrame = c_invalidDialogControlId;
    libVCUI_gv_pU_StarmapQuitButton = c_invalidDialogControlId;
    libVCUI_gv_pU_StarmapBackButton = c_invalidDialogControlId;
    libVCUI_gv_pU_StarmapLaunchButton = c_invalidDialogControlId;
    libVCUI_gv_pU_StarmapPromptLabel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libVCUI_gv_pU_StarmapPlanetTitleName[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libVCUI_gv_pU_StarmapPlanetTitleCallout[init_i] = c_invalidDialogControlId;
    }
    libVCUI_gv_pU_StarmapSubtitlePanel = c_invalidDialogControlId;
    libVCUI_gv_pU_StarmapPanel = c_invalidDialogControlId;
    libVCUI_gv_pU_StarmapDialog = c_invalidDialogId;
    libVCUI_gv_pU_ArtanisAnimScene = c_cutsceneNone;
    libVCUI_gv_pU_ArmyButton = c_invalidDialogControlId;
    libVCUI_gv_pU_ArmyButtonTipPanel = c_invalidDialogControlId;
    libVCUI_gv_pU_ArmyButtonTimer = TimerCreate();
    libVCUI_gv_pU_DirectiveDialog = c_invalidDialogId;
    libVCUI_gv_pU_DirectivePanel = c_invalidDialogControlId;
    libVCUI_gv_pU_DirectiveLabel = c_invalidDialogControlId;
    libVCUI_gv_pU_BB_Style = libVCUI_ge_SingularBossBarStyle_Objective;
    libVCUI_gv_pU_BB_Panel = c_invalidDialogControlId;
    libVCUI_gv_pU_BB_ClickableAreaHealthBar = c_invalidDialogControlId;
    libVCUI_gv_pU_BB_ClickableAreaNameLabel = c_invalidDialogControlId;
    libVCUI_gv_pU_BB_TitleLabel = c_invalidDialogControlId;
    libVCUI_gv_pU_BB_HpLabel = c_invalidDialogControlId;
    libVCUI_gv_pU_BB_HpFullImage = c_invalidDialogControlId;
    libVCUI_gv_pU_BB_HpCurrentImage = c_invalidDialogControlId;
    libVCUI_gv_pU_BB_BossBG = c_invalidDialogControlId;
    libVCUI_gv_pU_BB_ObjectiveBG = c_invalidDialogControlId;
    libVCUI_gv_pUC_HEROUILIFEBARHEIGHT = 20;
    libVCUI_gv_pUC_HEROUISHIELDBARHEIGHT = 8;
    libVCUI_gv_pUC_HEROUIENERGYBARHEIGHT = 8;
    libVCUI_gv_pUC_HEROUIBARWIDTH = 200;
    libVCUI_gv_pU_ChampionReviveTimer = 180.0;
    libVCUI_gv_pU_ChampionCooldownTime = 60.0;
    for (init_i = 0; init_i <= libVCUI_gv_pUC_VoidHerioUIMaxHeroCount; init_i += 1) {
        libVCUI_gv_pU_VoidHeroUIShowLevel[init_i] = true;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_VoidHerioUIMaxHeroCount; init_i += 1) {
        libVCUI_gv_pU_VoidHeroUIPanel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_VoidHerioUIMaxHeroCount; init_i += 1) {
        libVCUI_gv_pU_VoidHeroUIDialogBorderImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_VoidHerioUIMaxHeroCount; init_i += 1) {
        libVCUI_gv_pU_VoidHeroUIDialogBorderImageNoEnergy[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_VoidHerioUIMaxHeroCount; init_i += 1) {
        libVCUI_gv_pU_VoidHeroUIDialogIconImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_VoidHerioUIMaxHeroCount; init_i += 1) {
        libVCUI_gv_pU_VoidHeroUIDialogCooldownImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_VoidHerioUIMaxHeroCount; init_i += 1) {
        libVCUI_gv_pU_VoidHeroUIDialogDamageTakenImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_VoidHerioUIMaxHeroCount; init_i += 1) {
        libVCUI_gv_pU_VoidHeroUIDialogDamageTakenLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_VoidHerioUIMaxHeroCount; init_i += 1) {
        libVCUI_gv_pU_VoidHeroUIDialogNameLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_VoidHerioUIMaxHeroCount; init_i += 1) {
        libVCUI_gv_pU_VoidHeroUIDialogLevelLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_VoidHerioUIMaxHeroCount; init_i += 1) {
        libVCUI_gv_pU_VoidHeroUIDialogHealthBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_VoidHerioUIMaxHeroCount; init_i += 1) {
        libVCUI_gv_pU_VoidHeroUIDialogHealthBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_VoidHerioUIMaxHeroCount; init_i += 1) {
        libVCUI_gv_pU_VoidHeroUIDialogShieldBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_VoidHerioUIMaxHeroCount; init_i += 1) {
        libVCUI_gv_pU_VoidHeroUIDialogShieldBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_VoidHerioUIMaxHeroCount; init_i += 1) {
        libVCUI_gv_pU_VoidHeroUIDialogEnergyBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_VoidHerioUIMaxHeroCount; init_i += 1) {
        libVCUI_gv_pU_VoidHeroUIDialogEnergyBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_VoidHerioUIMaxHeroCount; init_i += 1) {
        libVCUI_gv_pU_VoidHeroUIDialogHealthLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_VoidHerioUIMaxHeroCount; init_i += 1) {
        libVCUI_gv_pU_VoidHeroUIDialogEnergyLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_VoidHerioUIMaxHeroCount; init_i += 1) {
        libVCUI_gv_pU_VoidHeroUIDialogShieldLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_VoidHerioUIMaxHeroCount; init_i += 1) {
        libVCUI_gv_pU_VoidHeroUIDialogButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_VoidHerioUIMaxHeroCount; init_i += 1) {
        libVCUI_gv_pU_VoidHeroUIDialogLevelBox[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libVCUI_gv_pUC_VoidHerioUIMaxHeroCount; init_i += 1) {
        libVCUI_gv_pU_VoidHeroUIRevivable[init_i] = true;
    }
    libVCUI_gv_pU_VoidHeroUIAutomaticIndex = 1;
    libVCUI_gv_pU_HealthWatchDialog = c_invalidDialogId;
    libVCUI_gv_pU_HealthWatchImage = c_invalidDialogControlId;
    libVCUI_gv_pU_MissionUIContainer = c_invalidDialogControlId;
    libVCUI_gv_pU_ObjectivePanel = c_invalidDialogControlId;
    libVCUI_gv_pU_ProgressBarPanel = c_invalidDialogControlId;
    libVCUI_gv_pU_ProgressBarLabelTitle = c_invalidDialogControlId;
    libVCUI_gv_pU_ProgressBarLabelBarLeft = c_invalidDialogControlId;
    libVCUI_gv_pU_ProgressBarImageBar = c_invalidDialogControlId;
    libVCUI_gv_pU_ProgressBarMax = 100;
    libVCUI_gv_pUC_ProgressBarWidth = 280;
    libVCUI_gv_pUC_ProgressBarHeight = 20;
    libVCUI_gv_pU_UnitProgressBarPanel = c_invalidDialogControlId;
    libVCUI_gv_pU_GPCasterGroup = UnitGroupEmpty();
    libVCUI_gv_pU_GPPanel = c_invalidDialogControlId;
    libVCUI_gv_pU_GPHolder = c_invalidDialogControlId;
    libVCUI_gv_pU_GPCutscene = c_invalidDialogControlId;
    libVCUI_gv_pU_GPEnergyBarScene = c_invalidDialogControlId;
    libVCUI_gv_pU_GPEnergyGlassScene = c_invalidDialogControlId;
    libVCUI_gv_pU_GPEnergyBar = c_invalidDialogControlId;
    libVCUI_gv_pU_GPEnergyLabel = c_invalidDialogControlId;
    libVCUI_gv_pU_GPRequestedVisible = true;
    libVCUI_gv_pU_GPCmdPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        libVCUI_gv_pU_GPCmdButtons[init_i] = c_invalidDialogControlId;
    }
    libVCUI_gv_pU_GPBlackTooltipAnchor = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        libVCUI_gv_pU_GPAbilityArrows[init_i] = c_invalidDialogControlId;
    }
    libVCUI_gv_pU_TargetingOverlayDialog = c_invalidDialogId;
    libVCUI_gv_pU_TargetingOverlayPortrait = c_invalidDialogControlId;
    libVCUI_gv_pU_TargetingAbilityDialog = c_invalidDialogId;
    libVCUI_gv_pU_TargetingPanel = c_invalidDialogControlId;
    libVCUI_gv_pU_TargetingCancelButton = c_invalidDialogControlId;
    libVCUI_gv_pU_TargetingChargesPanel = c_invalidDialogControlId;
    libVCUI_gv_pU_TargetingInstructionsLabel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        libVCUI_gv_pU_TargetingChargeSinglePanel[init_i] = c_invalidDialogControlId;
    }
    libVCUI_gv_pU_TimerWindowHighlightFrame = c_invalidDialogControlId;
    libVCUI_gv_pU_TimerWindowDangerThreshold = 180.0;
    libVCUI_gv_pU_TimerWindowTimer = TimerCreate();
    libVCUI_gv_pU_LoreCreditsMaxItems = UserDataInstanceCount("LoreCredits");
    libVCUI_gv_pU_LoreCreditsTimer = TimerCreate();
    libVCUI_gv_pU_LoreCreditsDialog = c_invalidDialogId;
    libVCUI_gv_pU_LoreCreditsPanel = c_invalidDialogControlId;
    libVCUI_gv_pU_LoreCreditsImage = c_invalidDialogControlId;
    libVCUI_gv_pU_LoreCreditsText = c_invalidDialogControlId;
    libVCUI_gv_pU_VSDialog = c_invalidDialogId;
    libVCUI_gv_pU_VSPanel = c_invalidDialogControlId;
    libVCUI_gv_pU_VSMainPanel = c_invalidDialogControlId;
    libVCUI_gv_pU_VSBackgroundImage = c_invalidDialogControlId;
    libVCUI_gv_pU_VSLabelMissionTitle = c_invalidDialogControlId;
    libVCUI_gv_pU_VSLabelVictoryTitle = c_invalidDialogControlId;
    libVCUI_gv_pU_VSLabelTime = c_invalidDialogControlId;
    libVCUI_gv_pU_VSBtnContinue = c_invalidDialogControlId;
    libVCUI_gv_pU_VSBtnPlayAgain = c_invalidDialogControlId;
    libVCUI_gv_pU_VSRestartPanel = c_invalidDialogControlId;
    libVCUI_gv_pU_VSRestartDifficultyPulldown = c_invalidDialogControlId;
    libVCUI_gv_pU_VSRestartRestartButton = c_invalidDialogControlId;
    libVCUI_gv_pU_VSRestartCancelButton = c_invalidDialogControlId;
    libVCUI_gv_pU_VSBackgroundCover = c_invalidDialogControlId;
    libVCUI_gv_pU_VSRewardBonusLevelPanel = c_invalidDialogControlId;
    libVCUI_gv_pU_VSRewardBonusLevelTextLabel = c_invalidDialogControlId;
    libVCUI_gv_pU_VSRewardPrimaryPanel = c_invalidDialogControlId;
    libVCUI_gv_pU_VSRewardPrimaryTextLabel = c_invalidDialogControlId;
    libVCUI_gv_pU_VSRewardNewUnitPanel = c_invalidDialogControlId;
    libVCUI_gv_pU_VSRewardNewUnitTextLabel = c_invalidDialogControlId;
    libVCUI_gv_pU_VSRewardNewFactionPanel = c_invalidDialogControlId;
    libVCUI_gv_pU_VSRewardNewFactionTextLabel = c_invalidDialogControlId;
    libVCUI_gv_pU_VSRewardHeadingLabel = c_invalidDialogControlId;
    libVCUI_gv_pU_VSRewardHeadingUnderline = c_invalidDialogControlId;
    libVCUI_gv_pU_VSAchievementTitle = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libVCUI_gv_zS_VSAchievementTitle2[init_i] = c_invalidDialogControlId;
    }
}

// Presets
// Functions
void libVCUI_gf_PU_ArmyUpdateData () {
    // Variable Declarations
    int lv_categoryIndex;
    int lv_unitIndex;
    string lv_indexUpgrade;

    // Automatic Variable Declarations
    const int autoB625618D_ae = libVCUI_gv_pUC_ArmyCategoryCountMax;
    const int autoB625618D_ai = 1;
    const int auto9951471B_ae = libVCUI_gv_pUC_ArmyChoiceCount;
    const int auto9951471B_ai = 1;

    // Variable Initialization

    // Implementation
    lv_categoryIndex = 1;
    for ( ; ( (autoB625618D_ai >= 0 && lv_categoryIndex <= autoB625618D_ae) || (autoB625618D_ai < 0 && lv_categoryIndex >= autoB625618D_ae) ) ; lv_categoryIndex += autoB625618D_ai ) {
        if ((libVoiC_gf_PC_ArmyCategoryState(libVCUI_gv_pU_ArmyCategories[lv_categoryIndex]) == c_armyCategoryStateLocked)) {
            continue;
        }

        lv_unitIndex = 1;
        for ( ; ( (auto9951471B_ai >= 0 && lv_unitIndex <= auto9951471B_ae) || (auto9951471B_ai < 0 && lv_unitIndex >= auto9951471B_ae) ) ; lv_unitIndex += auto9951471B_ai ) {
            if ((libVCUI_gv_pU_ArmyUnitSelectedIndex[lv_categoryIndex] == lv_unitIndex)) {
                libVoiC_gf_PC_SetArmyUnitState(libVCUI_gv_pU_ArmyUnits[lv_categoryIndex][lv_unitIndex], c_armyUnitStatePurchased);
            }
            else {
                if ((libVoiC_gf_PC_StoryArmyUnitState(libVCUI_gv_pU_ArmyUnits[lv_categoryIndex][lv_unitIndex]) != c_armyUnitStateLocked)) {
                    libVoiC_gf_PC_SetArmyUnitState(libVCUI_gv_pU_ArmyUnits[lv_categoryIndex][lv_unitIndex], c_armyUnitStateUnlocked);
                }

            }
        }
    }
}

void libVCUI_gf_PU_ArmyCreateDialog (bool lp_debugOn) {
    // Variable Declarations
    int lv_categoryIndex;
    int lv_factionIndex;
    int lv_abilityIndex;
    int lv_hookupFrame;

    // Automatic Variable Declarations
    const int auto22BBD85E_ae = libVCUI_gv_pUC_ArmyCategoryCountMax;
    const int auto22BBD85E_ai = 1;
    const int auto10945390_ae = 4;
    const int auto10945390_ai = 1;
    const int auto19BE2DDC_ae = libVCUI_gv_pUC_ArmyChoiceCount;
    const int auto19BE2DDC_ai = 1;

    // Variable Initialization
    lv_hookupFrame = c_invalidDialogControlId;

    // Implementation
    if ((libVCUI_gv_pU_ArmyDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libVCUI_gv_pU_ArmyDialog = DialogLastCreated();
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "LotV_ArmyUpgradeUI/ArmyUpgradeTemplate");
    libVCUI_gv_pU_ArmyPanel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_ArmyPanel, c_triggerControlTypeButton, "ConfirmButton");
    libVCUI_gv_pU_ArmyUpgradeConfirmButton = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_ArmyPanel, c_triggerControlTypeLabel, "ArmyFactionPrompt");
    libVCUI_gv_pU_ArmyFactionPrompt = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_ArmyPanel, c_triggerControlTypePanel, "CategoryList");
    lv_hookupFrame = DialogControlLastCreated();
    lv_categoryIndex = 1;
    for ( ; ( (auto22BBD85E_ai >= 0 && lv_categoryIndex <= auto22BBD85E_ae) || (auto22BBD85E_ai < 0 && lv_categoryIndex >= auto22BBD85E_ae) ) ; lv_categoryIndex += auto22BBD85E_ai ) {
        DialogControlHookup(lv_hookupFrame, c_triggerControlTypeButton, "CategoryButton" + IntToString(lv_categoryIndex));
        libVCUI_gv_pU_ArmyCategoryButtons[lv_categoryIndex] = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_ArmyCategoryButtons[lv_categoryIndex], c_triggerControlTypeImage, "Highlight");
        libVCUI_gv_pU_ArmyCategoryButtonHighlight[lv_categoryIndex] = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_ArmyCategoryButtons[lv_categoryIndex], c_triggerControlTypeImage, "FactionIcon");
        libVCUI_gv_pU_ArmyCategoryFactionIcon[lv_categoryIndex] = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_ArmyCategoryButtons[lv_categoryIndex], c_triggerControlTypeImage, "CategoryFlash");
        DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupAll(), "Start");
        libVCUI_gv_pU_ArmyCategoryFlash[lv_categoryIndex] = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_ArmyCategoryButtons[lv_categoryIndex], c_triggerControlTypeLabel, "SelectLabel");
        libVCUI_gv_pU_ArmyCategoryLockedLabel[lv_categoryIndex] = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_ArmyCategoryButtons[lv_categoryIndex], c_triggerControlTypeLabel, "Name");
        libVCUI_gv_pU_ArmyCategoryNames[lv_categoryIndex] = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_ArmyCategoryButtons[lv_categoryIndex], c_triggerControlTypeLabel, "Role");
        libVCUI_gv_pU_ArmyCategoryRoles[lv_categoryIndex] = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_ArmyCategoryButtons[lv_categoryIndex], c_triggerControlTypeImage, "LockIcon");
        libVCUI_gv_pU_ArmyCategoryLockIcon[lv_categoryIndex] = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_ArmyCategoryButtons[lv_categoryIndex], c_triggerControlTypeLabel, "New");
        libVCUI_gv_pU_ArmyCategoryNewLabel[lv_categoryIndex] = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_ArmyCategoryButtons[lv_categoryIndex], c_triggerControlTypeImage, "ChooseFactionIcon");
        libVCUI_gv_pU_ArmyCategoryChooseIcon[lv_categoryIndex] = DialogControlLastCreated();
    }
    DialogControlHookup(libVCUI_gv_pU_ArmyPanel, c_triggerControlTypePanel, "ArmyUpgradeInfoFrame");
    libVCUI_gv_pU_ArmyInfoPanel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_ArmyInfoPanel, c_triggerControlTypeLabel, "ArmyUpgradeInfoDescription");
    libVCUI_gv_pU_ArmyInfoDescriptionLabel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_ArmyInfoPanel, c_triggerControlTypeLabel, "ArmyUpgradeInfoLore");
    libVCUI_gv_pU_ArmyInfoLoreLabel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_ArmyInfoPanel, c_triggerControlTypePanel, "ArmyUpgradeInfoMovieHolder");
    lv_hookupFrame = DialogControlLastCreated();
    DialogControlHookup(lv_hookupFrame, c_triggerControlTypeMovie, "ArmyUpgradeInfoMovie");
    libVCUI_gv_pU_ArmyInfoMovie = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_ArmyInfoPanel, c_triggerControlTypePanel, "ArmyUpgradeAbilityHeading");
    libVCUI_gv_pU_ArmyInfoAbilitiesHeading = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_ArmyInfoPanel, c_triggerControlTypePanel, "ArmyUpgradeInfoAbilityFrame");
    libVCUI_gv_pU_ArmyInfoAbilitiesPanel = DialogControlLastCreated();
    lv_abilityIndex = 1;
    for ( ; ( (auto10945390_ai >= 0 && lv_abilityIndex <= auto10945390_ae) || (auto10945390_ai < 0 && lv_abilityIndex >= auto10945390_ae) ) ; lv_abilityIndex += auto10945390_ai ) {
        DialogControlHookup(libVCUI_gv_pU_ArmyInfoAbilitiesPanel, c_triggerControlTypePanel, "ArmyUpgradeInfoAbility" + IntToString(lv_abilityIndex));
        libVCUI_gv_pU_ArmyInfoAbility2[lv_abilityIndex] = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_ArmyInfoAbility2[lv_abilityIndex], c_triggerControlTypeImage, "AbilityIcon");
        libVCUI_gv_pU_ArmyInfoAbility[lv_abilityIndex] = DialogControlLastCreated();
    }
    DialogControlHookup(libVCUI_gv_pU_ArmyPanel, c_triggerControlTypePanel, "FactionChoiceFrame");
    libVCUI_gv_pU_ArmyFactionPanel = DialogControlLastCreated();
    lv_factionIndex = 1;
    for ( ; ( (auto19BE2DDC_ai >= 0 && lv_factionIndex <= auto19BE2DDC_ae) || (auto19BE2DDC_ai < 0 && lv_factionIndex >= auto19BE2DDC_ae) ) ; lv_factionIndex += auto19BE2DDC_ai ) {
        DialogControlHookup(libVCUI_gv_pU_ArmyFactionPanel, c_triggerControlTypeButton, "FactionButton" + IntToString(lv_factionIndex));
        libVCUI_gv_pU_ArmyFactionButtons[lv_factionIndex] = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_ArmyFactionPanel, c_triggerControlTypePortrait, "FactionButtonPortrait" + IntToString(lv_factionIndex));
        libVCUI_gv_pU_ArmyFactionPortrait[lv_factionIndex] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemModel(DialogControlLastCreated(), "UI_ArmyRoom_FactionButton", PlayerGroupAll());
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(libVCUI_gv_pU_ArmyFactionButtons[lv_factionIndex], c_triggerControlTypeLabel, "UnitTitle");
        libVCUI_gv_pU_ArmyFactionUnitTitle[lv_factionIndex] = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_ArmyFactionButtons[lv_factionIndex], c_triggerControlTypeLabel, "Detail");
        libVCUI_gv_pU_ArmyFactionDetail[lv_factionIndex] = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_ArmyFactionButtons[lv_factionIndex], c_triggerControlTypeLabel, "UnitFaction");
        libVCUI_gv_pU_ArmyFactionNameLabel[lv_factionIndex] = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_ArmyFactionButtons[lv_factionIndex], c_triggerControlTypeImage, "Highlight");
        libVCUI_gv_pU_ArmyFactionButtonHighlight[lv_factionIndex] = DialogControlLastCreated();
    }
    DialogControlHookup(libVCUI_gv_pU_ArmyFactionPanel, c_triggerControlTypeImage, "Faction3LockedImage");
    libVCUI_gv_pU_ArmyFactionLockedImage = DialogControlLastCreated();
    CutsceneCreateNew("Cutscenes\\UI_ArmyUnits.SC2Cutscene", libNtve_gf_PointFromXYZ(16.0, 16.0, 8.0), 0.0, PlayerGroupAll(), true);
    libVCUI_gv_pU_ArmyCutscene = CutsceneLastCreated();
    CutscenePlay(libVCUI_gv_pU_ArmyCutscene);
    CutsceneGoToBookmark(libVCUI_gv_pU_ArmyCutscene, "LoopStart");
}

void libVCUI_gf_PU_ArmyInitDialogFromData (bool lp_debugOn) {
    // Variable Declarations
    int lv_unitIndex;
    int lv_categoryIndex;
    int lv_missionIndex;
    string lv_indexArmyCategory;
    string lv_indexArmyUnit;
    string lv_indexMission;

    // Automatic Variable Declarations
    int auto413EA25C_ae;
    int auto413EA25C_ai;
    const int auto4DFCCE40_ae = libVCUI_gv_pUC_ArmyCategoryCountMax;
    const int auto4DFCCE40_ai = 1;
    int autoE3DA5434_ae;
    const int autoE3DA5434_ai = 1;
    int auto364B23CB_ae;
    int auto364B23CB_ai;
    const int auto2DB1F250_ae = 1;
    const int auto2DB1F250_ai = -1;

    // Variable Initialization

    // Implementation
    libVCUI_gv_pU_ArmyCategoryCount = libVCUI_gf_PU_ArmyCategoryCount();
    auto413EA25C_ae = libVoiC_gf_NumberOfMissions(2);
    auto413EA25C_ai = 1;
    while (auto413EA25C_ai <= auto413EA25C_ae) {
        lv_indexMission = libVoiC_gv_pC_MissionCompleted[auto413EA25C_ai];
        lv_indexArmyCategory = libVoiC_gf_MissionArmyCategoryUnlocked(lv_indexMission);
        if ((lv_indexArmyCategory != null) && (libVoiC_gf_PC_ArmyCategoryUsedInUI(lv_indexArmyCategory) == true)) {
            lv_categoryIndex += 1;
            if ((lv_categoryIndex > libVCUI_gv_pUC_ArmyCategoryCountMax)) {
                break;
            }

            libVCUI_gv_pU_ArmyCategories[lv_categoryIndex] = lv_indexArmyCategory;
            DialogControlSetVisible(libVCUI_gv_pU_ArmyCategoryButtons[lv_categoryIndex], PlayerGroupAll(), true);
            DialogControlSetEnabled(libVCUI_gv_pU_ArmyCategoryButtons[lv_categoryIndex], PlayerGroupAll(), true);
        }

        auto413EA25C_ai += 1;
    }
    lv_categoryIndex = (libVCUI_gv_pU_ArmyCategoryCount+1);
    for ( ; ( (auto4DFCCE40_ai >= 0 && lv_categoryIndex <= auto4DFCCE40_ae) || (auto4DFCCE40_ai < 0 && lv_categoryIndex >= auto4DFCCE40_ae) ) ; lv_categoryIndex += auto4DFCCE40_ai ) {
        DialogControlSetEnabled(libVCUI_gv_pU_ArmyCategoryButtons[lv_categoryIndex], PlayerGroupAll(), false);
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_ArmyCategoryLockedLabel[lv_categoryIndex], StringExternal("Param/Value/lib_VCUI_31012181"), PlayerGroupAll());
        DialogControlSetVisible(libVCUI_gv_pU_ArmyCategoryNames[lv_categoryIndex], PlayerGroupAll(), false);
        DialogControlSetVisible(libVCUI_gv_pU_ArmyCategoryRoles[lv_categoryIndex], PlayerGroupAll(), false);
        DialogControlSetVisible(libVCUI_gv_pU_ArmyCategoryLockedLabel[lv_categoryIndex], PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemTooltip(libVCUI_gv_pU_ArmyCategoryButtons[lv_categoryIndex], StringExternal("Param/Value/lib_VCUI_0E2F9EB7"), PlayerGroupAll());
        DialogControlSetVisible(libVCUI_gv_pU_ArmyCategoryLockIcon[lv_categoryIndex], PlayerGroupAll(), true);
    }
    autoE3DA5434_ae = libVCUI_gv_pU_ArmyCategoryCount;
    lv_categoryIndex = 1;
    for ( ; ( (autoE3DA5434_ai >= 0 && lv_categoryIndex <= autoE3DA5434_ae) || (autoE3DA5434_ai < 0 && lv_categoryIndex >= autoE3DA5434_ae) ) ; lv_categoryIndex += autoE3DA5434_ai ) {
        libVCUI_gv_pU_ArmyUnitSelectedIndex[lv_categoryIndex] = 0;
        lv_unitIndex = 0;
        auto364B23CB_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, libVCUI_gv_pU_ArmyCategories[lv_categoryIndex], "ArmyUnitArray", 1);
        auto364B23CB_ai = 1;
        while (auto364B23CB_ai <= auto364B23CB_ae) {
            lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, libVCUI_gv_pU_ArmyCategories[lv_categoryIndex], "ArmyUnitArray["+IntToString(auto364B23CB_ai-1)+"]", 1);
            lv_unitIndex += 1;
            libVCUI_gv_pU_ArmyUnits[lv_categoryIndex][lv_unitIndex] = lv_indexArmyUnit;
            if ((libVoiC_gf_PC_StoryArmyUnitState(lv_indexArmyUnit) == c_armyUnitStatePurchased)) {
                libVCUI_gv_pU_ArmyUnitSelectedIndex[lv_categoryIndex] = lv_unitIndex;
            }

            auto364B23CB_ai = auto364B23CB_ai + 1;
        }
        if ((libVCUI_gv_pU_ArmyUnitSelectedIndex[lv_categoryIndex] == 0)) {
            DialogControlSendAnimationEvent(libVCUI_gv_pU_ArmyCategoryNames[lv_categoryIndex], PlayerGroupAll(), "HighlightOn");
        }

    }
    if ((libVCUI_gv_pU_ArmyUnitSelectedIndex[libVCUI_gv_pU_ArmyCategorySelectedIndex] != 0) && (UserDataGetInt("StoryStates", "Army UI Visited", "Value", 1) != 0)) {
        lv_categoryIndex = libVCUI_gv_pU_ArmyCategoryCount;
        for ( ; ( (auto2DB1F250_ai >= 0 && lv_categoryIndex <= auto2DB1F250_ae) || (auto2DB1F250_ai < 0 && lv_categoryIndex >= auto2DB1F250_ae) ) ; lv_categoryIndex += auto2DB1F250_ai ) {
            if ((libVCUI_gv_pU_ArmyUnitSelectedIndex[lv_categoryIndex] == 0)) {
                libVCUI_gv_pU_ArmyCategorySelectedIndex = lv_categoryIndex;
                break;
            }

        }
    }

    if ((libVCUI_gv_pU_ArmyCategorySelectedIndex > libVCUI_gv_pU_ArmyCategoryCount)) {
        libVCUI_gv_pU_ArmyCategorySelectedIndex = libVCUI_gv_pU_ArmyCategoryCount;
    }

    libVCUI_gf_PU_ArmyCategorySelect(libVCUI_gv_pU_ArmyCategorySelectedIndex);
}

void libVCUI_gf_PU_ArmyUpdateDialog () {
    // Variable Declarations
    int lv_categoryIndex;
    int lv_unitIndex;
    int lv_factionIndex;

    // Automatic Variable Declarations
    int auto87C7E4B2_ae;
    const int auto87C7E4B2_ai = 1;
    const int autoD2C9F9C4_ae = libVCUI_gv_pUC_ArmyChoiceCount;
    const int autoD2C9F9C4_ai = 1;
    const int auto12B1B119_ae = libVCUI_gv_pUC_ArmyChoiceCount;
    const int auto12B1B119_ai = 1;

    // Variable Initialization

    // Implementation
    TriggerExecute(libVCUI_gt_PU_ArmySelectionReminders, true, false);
    auto87C7E4B2_ae = libVCUI_gv_pU_ArmyCategoryCount;
    lv_categoryIndex = 1;
    for ( ; ( (auto87C7E4B2_ai >= 0 && lv_categoryIndex <= auto87C7E4B2_ae) || (auto87C7E4B2_ai < 0 && lv_categoryIndex >= auto87C7E4B2_ae) ) ; lv_categoryIndex += auto87C7E4B2_ai ) {
        if ((libVoiC_gf_ArmyCategoryStateCheck(libVCUI_gv_pU_ArmyCategories[lv_categoryIndex], c_armyCategoryStateUnlocked) == false)) {
            continue;
        }

        DialogControlSetVisible(libVCUI_gv_pU_ArmyCategoryNames[lv_categoryIndex], PlayerGroupAll(), true);
        DialogControlSetVisible(libVCUI_gv_pU_ArmyCategoryRoles[lv_categoryIndex], PlayerGroupAll(), true);
        DialogControlSetVisible(libVCUI_gv_pU_ArmyCategoryLockedLabel[lv_categoryIndex], PlayerGroupAll(), false);
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_ArmyCategoryRoles[lv_categoryIndex], libVoiC_gf_PC_ArmyCategoryTitle(libVCUI_gv_pU_ArmyCategories[lv_categoryIndex]), PlayerGroupAll());
        if ((libVCUI_gv_pU_ArmyCategorySelectedIndex == lv_categoryIndex)) {
            libNtve_gf_SetDialogItemToggled(libVCUI_gv_pU_ArmyCategoryButtons[lv_categoryIndex], true, PlayerGroupAll());
            DialogControlSetVisible(libVCUI_gv_pU_ArmyCategoryButtonHighlight[lv_categoryIndex], PlayerGroupAll(), true);
            libNtve_gf_SetDialogItemStyle(libVCUI_gv_pU_ArmyCategoryNames[lv_categoryIndex], "Void_ArmyCategoryNameSelected", PlayerGroupAll());
            libNtve_gf_SetDialogItemStyle(libVCUI_gv_pU_ArmyCategoryRoles[lv_categoryIndex], "Void_ArmyCategoryRoleSelected", PlayerGroupAll());
        }
        else {
            DialogControlSetVisible(libVCUI_gv_pU_ArmyCategoryButtonHighlight[lv_categoryIndex], PlayerGroupAll(), false);
            libNtve_gf_SetDialogItemToggled(libVCUI_gv_pU_ArmyCategoryButtons[lv_categoryIndex], false, PlayerGroupAll());
            libNtve_gf_SetDialogItemStyle(libVCUI_gv_pU_ArmyCategoryNames[lv_categoryIndex], "Void_ArmyCategoryName", PlayerGroupAll());
            libNtve_gf_SetDialogItemStyle(libVCUI_gv_pU_ArmyCategoryRoles[lv_categoryIndex], "Void_ArmyCategoryRole", PlayerGroupAll());
        }
        if ((libVCUI_gv_pU_ArmyUnitSelectedIndex[lv_categoryIndex] == 0)) {
            libNtve_gf_SetDialogItemText(libVCUI_gv_pU_ArmyCategoryNames[lv_categoryIndex], StringExternal("Param/Value/lib_VCUI_5E53E6DC"), PlayerGroupAll());
            DialogControlSendAnimationEvent(libVCUI_gv_pU_ArmyCategoryButtons[lv_categoryIndex], PlayerGroupAll(), "Highlight");
            DialogControlSetVisible(libVCUI_gv_pU_ArmyCategoryFlash[lv_categoryIndex], PlayerGroupAll(), true);
            DialogControlSetVisible(libVCUI_gv_pU_ArmyCategoryFactionIcon[lv_categoryIndex], PlayerGroupAll(), false);
            DialogControlSetVisible(libVCUI_gv_pU_ArmyCategoryChooseIcon[lv_categoryIndex], PlayerGroupAll(), true);
            DialogControlSetVisible(libVCUI_gv_pU_ArmyCategoryNewLabel[lv_categoryIndex], PlayerGroupAll(), false);
        }
        else {
            DialogControlSendAnimationEvent(libVCUI_gv_pU_ArmyCategoryNames[lv_categoryIndex], PlayerGroupAll(), "HighlightOff");
            DialogControlSetVisible(libVCUI_gv_pU_ArmyCategoryFactionIcon[lv_categoryIndex], PlayerGroupAll(), true);
            DialogControlSetVisible(libVCUI_gv_pU_ArmyCategoryChooseIcon[lv_categoryIndex], PlayerGroupAll(), false);
            DialogControlSetVisible(libVCUI_gv_pU_ArmyCategoryFlash[lv_categoryIndex], PlayerGroupAll(), false);
            libNtve_gf_SetDialogItemText(libVCUI_gv_pU_ArmyCategoryNames[lv_categoryIndex], libVoiC_gf_StoryArmyUnitName(libVCUI_gv_pU_ArmyUnits[lv_categoryIndex][libVCUI_gv_pU_ArmyUnitSelectedIndex[lv_categoryIndex]]), PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(libVCUI_gv_pU_ArmyCategoryFactionIcon[lv_categoryIndex], libVoiC_gf_PC_ArmyUnitFactionCategoryImage(libVCUI_gv_pU_ArmyUnits[lv_categoryIndex][libVCUI_gv_pU_ArmyUnitSelectedIndex[lv_categoryIndex]]), PlayerGroupAll());
            if ((libVCUI_gf_PU_ArmyCategoryHasNewFaction(libVCUI_gv_pU_ArmyCategories[lv_categoryIndex]) == true)) {
                DialogControlSendAnimationEvent(libVCUI_gv_pU_ArmyCategoryButtons[lv_categoryIndex], PlayerGroupAll(), "Highlight");
                DialogControlSetVisible(libVCUI_gv_pU_ArmyCategoryFlash[lv_categoryIndex], PlayerGroupAll(), true);
            }
            else {
                DialogControlSendAnimationEvent(libVCUI_gv_pU_ArmyCategoryButtons[lv_categoryIndex], PlayerGroupAll(), "HighlightStop");
                DialogControlSetVisible(libVCUI_gv_pU_ArmyCategoryFlash[lv_categoryIndex], PlayerGroupAll(), false);
            }
            if ((libVCUI_gf_PU_ArmyCategoryHasNewFaction(libVCUI_gv_pU_ArmyCategories[lv_categoryIndex]) == true)) {
                DialogControlSetVisible(libVCUI_gv_pU_ArmyCategoryNewLabel[lv_categoryIndex], PlayerGroupAll(), true);
            }
            else {
                DialogControlSetVisible(libVCUI_gv_pU_ArmyCategoryNewLabel[lv_categoryIndex], PlayerGroupAll(), false);
            }
        }
    }
    if ((libVCUI_gv_pU_ArmyCategorySelectedIndex == 0)) {
        DialogControlSetVisible(libVCUI_gv_pU_ArmyFactionPanel, PlayerGroupAll(), false);
        DialogControlSetVisible(libVCUI_gv_pU_ArmyFactionPrompt, PlayerGroupAll(), false);
        DialogControlSetVisible(libVCUI_gv_pU_ArmyInfoPanel, PlayerGroupAll(), false);
        CutsceneAddFilter(libVCUI_gv_pU_ArmyCutscene, "Noselect");
        return ;
    }

    DialogControlSetVisible(libVCUI_gv_pU_ArmyInfoPanel, PlayerGroupAll(), true);
    DialogControlSetVisible(libVCUI_gv_pU_ArmyFactionPanel, PlayerGroupAll(), true);
    lv_factionIndex = 1;
    for ( ; ( (autoD2C9F9C4_ai >= 0 && lv_factionIndex <= autoD2C9F9C4_ae) || (autoD2C9F9C4_ai < 0 && lv_factionIndex >= autoD2C9F9C4_ae) ) ; lv_factionIndex += autoD2C9F9C4_ai ) {
        if ((libVoiC_gf_PC_StoryArmyUnitState(libVCUI_gv_pU_ArmyUnits[libVCUI_gv_pU_ArmyCategorySelectedIndex][lv_factionIndex]) == c_armyUnitStateLocked)) {
            DialogControlSetEnabled(libVCUI_gv_pU_ArmyFactionButtons[lv_factionIndex], PlayerGroupAll(), false);
            DialogControlSetVisible(libVCUI_gv_pU_ArmyFactionDetail[lv_factionIndex], PlayerGroupAll(), false);
            DialogControlSetVisible(libVCUI_gv_pU_ArmyFactionButtonHighlight[lv_factionIndex], PlayerGroupAll(), false);
            DialogControlSetVisible(libVCUI_gv_pU_ArmyFactionNameLabel[lv_factionIndex], PlayerGroupAll(), false);
            DialogControlSetVisible(libVCUI_gv_pU_ArmyFactionUnitTitle[lv_factionIndex], PlayerGroupAll(), false);
            DialogControlSetVisible(libVCUI_gv_pU_ArmyFactionPortrait[lv_factionIndex], PlayerGroupAll(), false);
            DialogControlSetVisible(libVCUI_gv_pU_ArmyFactionButtons[lv_factionIndex], PlayerGroupAll(), false);
            DialogControlSetVisible(libVCUI_gv_pU_ArmyFactionLockedImage, PlayerGroupAll(), true);
            libNtve_gf_SetDialogItemTooltip(libVCUI_gv_pU_ArmyFactionLockedImage, StringExternal("Param/Value/lib_VCUI_D9C74198"), PlayerGroupAll());
            continue;
        }

        DialogControlSetVisible(libVCUI_gv_pU_ArmyFactionButtons[lv_factionIndex], PlayerGroupAll(), true);
        DialogControlSetVisible(libVCUI_gv_pU_ArmyFactionLockedImage, PlayerGroupAll(), false);
        DialogControlSendAnimationEvent(libVCUI_gv_pU_ArmyFactionButtons[lv_factionIndex], PlayerGroupAll(), libVCUI_gf_PU_ArmyFactionEvent(libVoiC_gf_PC_ArmyUnitFaction(libVCUI_gv_pU_ArmyUnits[libVCUI_gv_pU_ArmyCategorySelectedIndex][lv_factionIndex])));
        libNtve_gf_SetDialogItemTooltip(libVCUI_gv_pU_ArmyFactionButtons[lv_factionIndex], StringToText(""), PlayerGroupAll());
        DialogControlSetVisible(libVCUI_gv_pU_ArmyFactionDetail[lv_factionIndex], PlayerGroupAll(), true);
        DialogControlSetVisible(libVCUI_gv_pU_ArmyFactionNameLabel[lv_factionIndex], PlayerGroupAll(), true);
        DialogControlSetVisible(libVCUI_gv_pU_ArmyFactionUnitTitle[lv_factionIndex], PlayerGroupAll(), true);
        DialogControlSetEnabled(libVCUI_gv_pU_ArmyFactionButtons[lv_factionIndex], PlayerGroupAll(), true);
        if ((libVCUI_gv_pU_ArmyUnitSelectedIndex[libVCUI_gv_pU_ArmyCategorySelectedIndex] == 0)) {
            DialogControlSetVisible(libVCUI_gv_pU_ArmyFactionButtonHighlight[lv_factionIndex], PlayerGroupAll(), true);
            DialogControlSendAnimationEvent(libVCUI_gv_pU_ArmyFactionButtonHighlight[lv_factionIndex], PlayerGroupAll(), libVCUI_gf_PU_ArmyFactionEvent(libVoiC_gf_PC_ArmyUnitFaction(libVCUI_gv_pU_ArmyUnits[libVCUI_gv_pU_ArmyCategorySelectedIndex][lv_factionIndex])));
        }
        else {
            DialogControlSetVisible(libVCUI_gv_pU_ArmyFactionButtonHighlight[lv_factionIndex], PlayerGroupAll(), false);
        }
        DialogControlSetVisible(libVCUI_gv_pU_ArmyFactionButtons[lv_factionIndex], PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemStyle(libVCUI_gv_pU_ArmyFactionNameLabel[lv_factionIndex], libVCUI_gf_PU_ArmyFactionStyle("Void_ArmyFactionName", libVoiC_gf_PC_ArmyUnitFaction(libVCUI_gv_pU_ArmyUnits[libVCUI_gv_pU_ArmyCategorySelectedIndex][lv_factionIndex]), false), PlayerGroupAll());
        if ((libVCUI_gv_pU_ArmyUnitSelectedIndex[libVCUI_gv_pU_ArmyCategorySelectedIndex] == lv_factionIndex)) {
            libNtve_gf_SetDialogItemImage(libVCUI_gv_pU_ArmyFactionButtons[lv_factionIndex], libVoiC_gf_PC_ArmyUnitFactionHoverImage(libVCUI_gv_pU_ArmyUnits[libVCUI_gv_pU_ArmyCategorySelectedIndex][lv_factionIndex]), PlayerGroupAll());
            libNtve_gf_SetDialogItemImage2(libVCUI_gv_pU_ArmyFactionButtons[lv_factionIndex], libVoiC_gf_PC_ArmyUnitFactionHoverImage(libVCUI_gv_pU_ArmyUnits[libVCUI_gv_pU_ArmyCategorySelectedIndex][lv_factionIndex]), PlayerGroupAll());
            libNtve_gf_SetDialogItemStyle(libVCUI_gv_pU_ArmyFactionUnitTitle[lv_factionIndex], libVCUI_gf_PU_ArmyFactionStyle("Void_ArmyFactionUnitTitle", libVoiC_gf_PC_ArmyUnitFaction(libVCUI_gv_pU_ArmyUnits[libVCUI_gv_pU_ArmyCategorySelectedIndex][lv_factionIndex]), true), PlayerGroupAll());
            libNtve_gf_SetDialogItemStyle(libVCUI_gv_pU_ArmyFactionDetail[lv_factionIndex], libVCUI_gf_PU_ArmyFactionStyle("Void_ArmyFactionDetail", libVoiC_gf_PC_ArmyUnitFaction(libVCUI_gv_pU_ArmyUnits[libVCUI_gv_pU_ArmyCategorySelectedIndex][lv_factionIndex]), true), PlayerGroupAll());
            DialogControlSetVisible(libVCUI_gv_pU_ArmyFactionNameLabel[lv_factionIndex], PlayerGroupAll(), true);
            libNtve_gf_SetDialogItemToggled(libVCUI_gv_pU_ArmyFactionButtons[lv_factionIndex], true, PlayerGroupAll());
            DialogControlSendAnimationEvent(libVCUI_gv_pU_ArmyFactionButtons[lv_factionIndex], PlayerGroupAll(), "Selected");
            libNtve_gf_SetDialogItemModel(libVCUI_gv_pU_ArmyFactionPortrait[lv_factionIndex], libVCUI_gf_PU_ArmyFactionGlowModel(libVoiC_gf_PC_ArmyUnitFaction(libVCUI_gv_pU_ArmyUnits[libVCUI_gv_pU_ArmyCategorySelectedIndex][lv_factionIndex])), PlayerGroupAll());
            DialogControlSetVisible(libVCUI_gv_pU_ArmyFactionPortrait[lv_factionIndex], PlayerGroupAll(), true);
        }
        else {
            libNtve_gf_SetDialogItemImage(libVCUI_gv_pU_ArmyFactionButtons[lv_factionIndex], libVoiC_gf_PC_ArmyUnitFactionImage(libVCUI_gv_pU_ArmyUnits[libVCUI_gv_pU_ArmyCategorySelectedIndex][lv_factionIndex]), PlayerGroupAll());
            libNtve_gf_SetDialogItemImage2(libVCUI_gv_pU_ArmyFactionButtons[lv_factionIndex], libVoiC_gf_PC_ArmyUnitFactionHoverImage(libVCUI_gv_pU_ArmyUnits[libVCUI_gv_pU_ArmyCategorySelectedIndex][lv_factionIndex]), PlayerGroupAll());
            libNtve_gf_SetDialogItemStyle(libVCUI_gv_pU_ArmyFactionUnitTitle[lv_factionIndex], libVCUI_gf_PU_ArmyFactionStyle("Void_ArmyFactionUnitTitle", libVoiC_gf_PC_ArmyUnitFaction(libVCUI_gv_pU_ArmyUnits[libVCUI_gv_pU_ArmyCategorySelectedIndex][lv_factionIndex]), false), PlayerGroupAll());
            libNtve_gf_SetDialogItemStyle(libVCUI_gv_pU_ArmyFactionDetail[lv_factionIndex], libVCUI_gf_PU_ArmyFactionStyle("Void_ArmyFactionDetail", libVoiC_gf_PC_ArmyUnitFaction(libVCUI_gv_pU_ArmyUnits[libVCUI_gv_pU_ArmyCategorySelectedIndex][lv_factionIndex]), false), PlayerGroupAll());
            DialogControlSetVisible(libVCUI_gv_pU_ArmyFactionNameLabel[lv_factionIndex], PlayerGroupAll(), true);
            libNtve_gf_SetDialogItemToggled(libVCUI_gv_pU_ArmyFactionButtons[lv_factionIndex], false, PlayerGroupAll());
            DialogControlSetVisible(libVCUI_gv_pU_ArmyFactionPortrait[lv_factionIndex], PlayerGroupAll(), false);
        }
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_ArmyFactionUnitTitle[lv_factionIndex], libVoiC_gf_StoryArmyUnitName(libVCUI_gv_pU_ArmyUnits[libVCUI_gv_pU_ArmyCategorySelectedIndex][lv_factionIndex]), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_ArmyFactionNameLabel[lv_factionIndex], libVoiC_gf_PC_ArmyUnitFactionName(libVCUI_gv_pU_ArmyUnits[libVCUI_gv_pU_ArmyCategorySelectedIndex][lv_factionIndex]), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_ArmyFactionDetail[lv_factionIndex], libVoiC_gf_PC_ArmyUnitTitle(libVCUI_gv_pU_ArmyUnits[libVCUI_gv_pU_ArmyCategorySelectedIndex][lv_factionIndex]), PlayerGroupAll());
    }
    CutsceneClearFilters(libVCUI_gv_pU_ArmyCutscene);
    if ((libVCUI_gv_pU_ArmyUnitSelectedIndex[libVCUI_gv_pU_ArmyCategorySelectedIndex] == 0)) {
        libNtve_gf_SetDialogItemMovie(libVCUI_gv_pU_ArmyInfoMovie, (""), PlayerGroupAll());
        DialogControlSetVisible(libVCUI_gv_pU_ArmyInfoPanel, PlayerGroupAll(), false);
        DialogControlSetVisible(libVCUI_gv_pU_ArmyFactionPrompt, PlayerGroupAll(), true);
        CutsceneAddFilter(libVCUI_gv_pU_ArmyCutscene, libVoiC_gf_PC_ArmyCategoryCutsceneFilter(libVCUI_gv_pU_ArmyCategories[libVCUI_gv_pU_ArmyCategorySelectedIndex]));
        CutsceneAddFilter(libVCUI_gv_pU_ArmyCutscene, "Noselect");
        libVCUI_gv_pU_ArmyUnitRotateFinderTag = "NONE";
    }
    else {
        DialogControlSetVisible(libVCUI_gv_pU_ArmyFactionPrompt, PlayerGroupAll(), false);
        DialogControlSetVisible(libVCUI_gv_pU_ArmyInfoPanel, PlayerGroupAll(), true);
        DialogControlSetVisible(libVCUI_gv_pU_ArmyInfoMovie, PlayerGroupAll(), true);
        CutsceneAddFilter(libVCUI_gv_pU_ArmyCutscene, libVoiC_gf_PC_ArmyUnitCutsceneFilter(libVCUI_gv_pU_ArmyUnits[libVCUI_gv_pU_ArmyCategorySelectedIndex][libVCUI_gv_pU_ArmyUnitSelectedIndex[libVCUI_gv_pU_ArmyCategorySelectedIndex]]));
        CutsceneAddFilter(libVCUI_gv_pU_ArmyCutscene, libVoiC_gf_PC_ArmyCategoryCutsceneFilter(libVCUI_gv_pU_ArmyCategories[libVCUI_gv_pU_ArmyCategorySelectedIndex]));
        libVCUI_gv_pU_ArmyUnitRotateFinderTag = ("UnitRotate" + libVoiC_gf_PC_ArmyCategoryCutsceneFilter(libVCUI_gv_pU_ArmyCategories[libVCUI_gv_pU_ArmyCategorySelectedIndex]) + libVoiC_gf_PC_ArmyUnitCutsceneFilter(libVCUI_gv_pU_ArmyUnits[libVCUI_gv_pU_ArmyCategorySelectedIndex][libVCUI_gv_pU_ArmyUnitSelectedIndex[libVCUI_gv_pU_ArmyCategorySelectedIndex]]));
        ActorSend(ActorFrom(("::external." + libVCUI_gv_pU_ArmyUnitRotateFinderTag)), "SetRotationYPR -17.000000");
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_ArmyInfoDescriptionLabel, libVoiC_gf_PC_ArmyUnitDescription(libVCUI_gv_pU_ArmyUnits[libVCUI_gv_pU_ArmyCategorySelectedIndex][libVCUI_gv_pU_ArmyUnitSelectedIndex[libVCUI_gv_pU_ArmyCategorySelectedIndex]]), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_ArmyInfoLoreLabel, UserDataGetText("TechUnit", libVoiC_gf_PC_TechUnitOfArmyUnit(libVCUI_gv_pU_ArmyUnits[libVCUI_gv_pU_ArmyCategorySelectedIndex][libVCUI_gv_pU_ArmyUnitSelectedIndex[libVCUI_gv_pU_ArmyCategorySelectedIndex]]), "ArmyInfoFluffText", 1), PlayerGroupAll());
        libNtve_gf_SetDialogItemMovie(libVCUI_gv_pU_ArmyInfoMovie, libVoiC_gf_PC_ArmyUnitMovie(libVCUI_gv_pU_ArmyUnits[libVCUI_gv_pU_ArmyCategorySelectedIndex][libVCUI_gv_pU_ArmyUnitSelectedIndex[libVCUI_gv_pU_ArmyCategorySelectedIndex]]), PlayerGroupAll());
        libVCUI_gf_PU_ArmyUpdateStatsAbilityTooltips(libVoiC_gf_PC_TechUnitOfArmyUnit(libVCUI_gv_pU_ArmyUnits[libVCUI_gv_pU_ArmyCategorySelectedIndex][libVCUI_gv_pU_ArmyUnitSelectedIndex[libVCUI_gv_pU_ArmyCategorySelectedIndex]]));
    }
    lv_unitIndex = 1;
    for ( ; ( (auto12B1B119_ai >= 0 && lv_unitIndex <= auto12B1B119_ae) || (auto12B1B119_ai < 0 && lv_unitIndex >= auto12B1B119_ae) ) ; lv_unitIndex += auto12B1B119_ai ) {
        if ((libVoiC_gf_PC_StoryArmyUnitState(libVCUI_gv_pU_ArmyUnits[libVCUI_gv_pU_ArmyCategorySelectedIndex][lv_unitIndex]) != c_armyUnitStateLocked)) {
            libVoiC_gf_PC_ArmyUnitSetNew(libVCUI_gv_pU_ArmyUnits[libVCUI_gv_pU_ArmyCategorySelectedIndex][lv_unitIndex], false);
        }

    }
}

void libVCUI_gf_PU_ArmyUpdateStatsAbilityTooltips (string lp_campaignTechUnit) {
    // Variable Declarations
    int lv_abilityIndex;
    string lv_ability;

    // Automatic Variable Declarations
    const int auto4949E9FE_ae = 4;
    const int auto4949E9FE_ai = 1;

    // Variable Initialization
    lv_abilityIndex = 1;

    // Implementation
    lv_abilityIndex = 1;
    for ( ; ( (auto4949E9FE_ai >= 0 && lv_abilityIndex <= auto4949E9FE_ae) || (auto4949E9FE_ai < 0 && lv_abilityIndex >= auto4949E9FE_ae) ) ; lv_abilityIndex += auto4949E9FE_ai ) {
        if ((UserDataGetUserInstance("TechUnit", lp_campaignTechUnit, "ArmyInfoAbilities", lv_abilityIndex) != null)) {
            lv_ability = UserDataGetUserInstance("TechUnit", lp_campaignTechUnit, "ArmyInfoAbilities", lv_abilityIndex);
            DialogControlSetVisible(libVCUI_gv_pU_ArmyInfoAbility2[lv_abilityIndex], PlayerGroupAll(), true);
            libNtve_gf_SetDialogItemImage(libVCUI_gv_pU_ArmyInfoAbility[lv_abilityIndex], UserDataGetImagePath("CampaignUnitAbilities", lv_ability, "Icon", 1), PlayerGroupAll());
            TextExpressionSetToken("Param/Expression/lib_VCUI_A5C497EB", "A", UserDataGetText("CampaignUnitAbilities", lv_ability, "Name", 1));
            TextExpressionSetToken("Param/Expression/lib_VCUI_A5C497EB", "B", UserDataGetText("CampaignUnitAbilities", lv_ability, "TooltipDescription", 1));
            libNtve_gf_SetDialogItemTooltip(libVCUI_gv_pU_ArmyInfoAbility[lv_abilityIndex], TextExpressionAssemble("Param/Expression/lib_VCUI_A5C497EB"), PlayerGroupAll());
        }
        else {
            DialogControlSetVisible(libVCUI_gv_pU_ArmyInfoAbility2[lv_abilityIndex], PlayerGroupAll(), false);
        }
    }
}

void libVCUI_gf_PU_ArmyDisplay (bool lp_debugOn) {
    // Variable Declarations
    int lv_categoryIndex;

    // Automatic Variable Declarations
    int auto72753C79_ae;
    const int auto72753C79_ai = 1;

    // Variable Initialization

    // Implementation
    libVCUI_gv_pU_ArmyDebugMode = lp_debugOn;
    libVCUI_gv_pU_ArmyCategorySelectedReminderComplete = false;
    auto72753C79_ae = libVCUI_gv_pU_ArmyCategoryCount;
    lv_categoryIndex = 1;
    for ( ; ( (auto72753C79_ai >= 0 && lv_categoryIndex <= auto72753C79_ae) || (auto72753C79_ai < 0 && lv_categoryIndex >= auto72753C79_ae) ) ; lv_categoryIndex += auto72753C79_ai ) {
        libVCUI_gv_pU_ArmyCategoryReminderComplete[lv_categoryIndex] = false;
        libVCUI_gv_pU_ArmyFactionReminderComplete[lv_categoryIndex] = false;
    }
    if ((lp_debugOn == true) && (libVoiC_gf_PC_CampaignMapTypeCheck(libVoiC_gf_CurrentMap(), c_mapKindStory) == false)) {
        libVoiC_gf_ShowHideWorldCover(true, 0.0);
        UISetMode(PlayerGroupAll(), c_uiModeFullscreen, c_transitionDurationImmediate);
    }

    libVCUI_gf_PU_ArmyCreateDialog(lp_debugOn);
    libVCUI_gf_PU_ArmyInitDialogFromData(lp_debugOn);
    DialogControlFadeTransparency(libVCUI_gv_pU_ArmyPanel, PlayerGroupAll(), 0.0, 100.0);
    GameSetLighting("SMX2SetArmyRoom", 0.0);
    libVCUI_gf_PU_ArmyUpdateDialog();
    DialogSetVisible(libVCUI_gv_pU_ArmyDialog, PlayerGroupAll(), true);
    TriggerEnable(libVCUI_gt_PU_ArmyCutsceneReady, true);
}

void libVCUI_gf_PU_ArmyPreload () {
    // Automatic Variable Declarations
    // Implementation
    PreloadLayout("UI\\Layout\\Custom\\LotV_ArmyUpgradeUI.SC2Layout", false);
    PreloadAsset("Cutscenes\\UI_ArmyUnits.SC2Cutscene", false);
}

void libVCUI_gf_PU_ArmyClose () {
    // Automatic Variable Declarations
    // Implementation
    ConversationDataStop();
    DialogDestroy(libVCUI_gv_pU_ArmyDialog);
    CutsceneStop(libVCUI_gv_pU_ArmyCutscene);
    TriggerStop(libVCUI_gt_PU_ArmyTutorial);
    TransmissionClearAll();
    libVoiC_gf_PC_AchievementAwardArmy();
    if ((libVCUI_gv_pU_ArmyTutorialStage == 4)) {
        libVCUI_gv_pU_ArmyTutorialStage = 3;
    }

    libVCUI_gv_pU_ArmyDialog = c_invalidDialogId;
    TriggerEnable(libVCUI_gt_PU_ArmyConfirm, false);
    TriggerEnable(libVCUI_gt_PU_ArmyCategorySelected, false);
    TriggerEnable(libVCUI_gt_PU_ArmyFactionSelected, false);
    TriggerEnable(libVCUI_gt_PU_ArmyFactionHoverStart, false);
    TriggerEnable(libVCUI_gt_PU_ArmyFactionHoverEnd, false);
    TriggerEnable(libVCUI_gt_PU_ArmyCategoryHoverStart, false);
    TriggerEnable(libVCUI_gt_PU_ArmyCategoryHoverEnd, false);
    TriggerEnable(libVCUI_gt_PU_ArmyRotateUnitStart, false);
}

void libVCUI_gf_PU_ArmyCategorySelect (int lp_categoryIndex) {
    // Variable Declarations
    int lv_factionIndex;

    // Automatic Variable Declarations
    const int auto5C3E4FC9_ae = libVCUI_gv_pUC_ArmyChoiceCount;
    const int auto5C3E4FC9_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libVCUI_gv_pU_ArmyCategorySelectedIndex != lp_categoryIndex) && (lp_categoryIndex != 0)) {
        lv_factionIndex = 1;
        for ( ; ( (auto5C3E4FC9_ai >= 0 && lv_factionIndex <= auto5C3E4FC9_ae) || (auto5C3E4FC9_ai < 0 && lv_factionIndex >= auto5C3E4FC9_ae) ) ; lv_factionIndex += auto5C3E4FC9_ai ) {
            if ((libVCUI_gv_pU_ArmyUnitSelectedIndex[lp_categoryIndex] == lv_factionIndex)) {
                DialogControlSendAnimationEvent(libVCUI_gv_pU_ArmyFactionButtons[lv_factionIndex], PlayerGroupAll(), "OnSelectionInstant");
            }
            else {
                DialogControlSendAnimationEvent(libVCUI_gv_pU_ArmyFactionButtons[lv_factionIndex], PlayerGroupAll(), "OnDeselectionInstant");
            }
        }
    }

    libVCUI_gv_pU_ArmyCategorySelectedIndex = lp_categoryIndex;
}

fixed libVCUI_gf_PU_ArmyRotateNormalize (fixed lp_value, fixed lp_minAmount, fixed lp_maxAmount) {
    // Variable Declarations
    fixed lv_width;
    fixed lv_OffsetValue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_width = (lp_maxAmount - lp_minAmount);
    lv_OffsetValue = (lp_value - lp_minAmount);
    return ((lv_OffsetValue - (Floor((lv_OffsetValue / lv_width)) * lv_width)) + lp_minAmount);
}

int libVCUI_gf_PU_ArmyCategoryCount () {
    // Variable Declarations
    string lv_indexCategory;
    int lv_categoryCount;

    // Automatic Variable Declarations
    int auto8399F208_ae;
    int auto8399F208_ai;

    // Variable Initialization

    // Implementation
    auto8399F208_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto8399F208_ai = 1;
    while (auto8399F208_ai <= auto8399F208_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto8399F208_ai);
        if ((libVoiC_gf_PC_ArmyCategoryUsedInUI(lv_indexCategory) == true) && (libVoiC_gf_ArmyCategoryStateCheck(lv_indexCategory, c_armyCategoryStateUnlocked) == true)) {
            lv_categoryCount += 1;
        }

        auto8399F208_ai = auto8399F208_ai + 1;
    }
    return lv_categoryCount;
}

bool libVCUI_gf_PU_ArmyCategoryHasNewFaction (string lp_armyCategory) {
    // Variable Declarations
    string lv_indexUnit;

    // Automatic Variable Declarations
    int autoDEC317F3_ae;
    int autoDEC317F3_ai;

    // Variable Initialization

    // Implementation
    autoDEC317F3_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUnitArray", 1);
    autoDEC317F3_ai = 1;
    while (autoDEC317F3_ai <= autoDEC317F3_ae) {
        lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUnitArray["+IntToString(autoDEC317F3_ai-1)+"]", 1);
        if ((libVoiC_gf_PC_StoryArmyUnitState(lv_indexUnit) != c_armyUnitStateLocked) && (libVoiC_gf_PC_StoryArmyUnitState2(lv_indexUnit) == true)) {
            return true;
        }

        autoDEC317F3_ai = autoDEC317F3_ai + 1;
    }
    return false;
}

string libVCUI_gf_PU_ArmyUnitTableID (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return ("PU_CatUnit_" + (lp_armyCategory));
}

string libVCUI_gf_PU_ArmyFactionStyle (string lp_baseStyle, string lp_faction, bool lp_selected) {
    // Variable Declarations
    string lv_factionStyle;
    string lv_finalStyle;
    string lv_state;

    // Automatic Variable Declarations
    string auto01E02A5D_val;

    // Variable Initialization
    lv_factionStyle = "";
    lv_finalStyle = "";
    lv_state = "";

    // Implementation
    auto01E02A5D_val = lp_faction;
    if (auto01E02A5D_val == "UpgradeCategory1") {
        lv_factionStyle = "Aiur";
    }
    else if (auto01E02A5D_val == "UpgradeCategory2") {
        lv_factionStyle = "Nerazim";
    }
    else if (auto01E02A5D_val == "UpgradeCategory3") {
        lv_factionStyle = "Purifier";
    }
    else if (auto01E02A5D_val == "UpgradeCategory4") {
        lv_factionStyle = "Taldarim";
    }
    else {
    }
    if ((lp_selected == true)) {
        lv_state = "SelectHover";
    }

    lv_finalStyle = ((lp_baseStyle) + lv_factionStyle + lv_state);
    return lv_finalStyle;
}

string libVCUI_gf_PU_ArmyFactionEvent (string lp_faction) {
    // Automatic Variable Declarations
    string auto60DCBCAB_val;

    // Implementation
    auto60DCBCAB_val = lp_faction;
    if (auto60DCBCAB_val == "UpgradeCategory1") {
        return "FactionAiur";
    }
    else if (auto60DCBCAB_val == "UpgradeCategory2") {
        return "FactionNerazim";
    }
    else if (auto60DCBCAB_val == "UpgradeCategory3") {
        return "FactionPurifier";
    }
    else if (auto60DCBCAB_val == "UpgradeCategory4") {
        return "FactionTaldarim";
    }
    else {
    }
    return "";
}

string libVCUI_gf_PU_ArmyFactionGlowModel (string lp_faction) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("ArmyUpgradeCategories", lp_faction, "GlowModel", 1);
}

void libVCUI_gf_PU_ArmyClosed (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libVCUI_gv_pUC_ArmyUIEventClosed);
}

void libVCUI_gf_PU_BottomBarShowHide (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    TriggerExecute(libVCUI_gt_PU_BottomBarInit, true, false);
    DialogSetVisible(libVCUI_gv_pU_BottomBarDialog, PlayerGroupAll(), lp_showHide);
    if ((lp_showHide == true)) {
        TriggerEnable(libVCUI_gt_PU_BottomBarButtonClicked, true);
        DialogSetSubtitlePositionOverrideControl(libVCUI_gv_pU_BottomBarSubtitleAnchor);
    }
    else {
        TriggerEnable(libVCUI_gt_PU_BottomBarButtonClicked, false);
    }
}

void libVCUI_gf_PU_BottomBarToggleOnOff (bool lp_onOff) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TriggerExecute(libVCUI_gt_PU_BottomBarInit, true, false);
    if ((lp_onOff == true)) {
        libVCUI_gv_pU_BottomBarOn = true;
        DialogControlFadeTransparency(libVCUI_gv_pU_BottomBarPanel, PlayerGroupAll(), 0.5, 0.0);
    }
    else {
        libVCUI_gv_pU_BottomBarOn = false;
        DialogControlFadeTransparency(libVCUI_gv_pU_BottomBarPanel, PlayerGroupAll(), 0.5, 100.0);
    }
}

void libVCUI_gf_PU_BottomBarButtonEnable (int lp_button, bool lp_enableDisable) {
    // Automatic Variable Declarations
    // Implementation
    TriggerExecute(libVCUI_gt_PU_BottomBarInit, true, false);
    DialogControlSetEnabled(libVCUI_gv_pU_BottomBarButton[(lp_button)], PlayerGroupAll(), lp_enableDisable);
}

void libVCUI_gf_PU_BottomBarButtonToggle (int lp_button, bool lp_toggled) {
    // Automatic Variable Declarations
    // Implementation
    TriggerExecute(libVCUI_gt_PU_BottomBarInit, true, false);
    libVCUI_gv_pU_BottomBarButtonToggled[(lp_button)] = lp_toggled;
    if ((lp_toggled == true)) {
        DialogControlSetEnabled(libVCUI_gv_pU_BottomBarButton[(lp_button)], PlayerGroupAll(), true);
        DialogControlSetVisible(libVCUI_gv_pU_BottomBarButtonSelectedDecoration[(lp_button)], PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(libVCUI_gv_pU_BottomBarButtonSelectedDecoration[(lp_button)], PlayerGroupAll(), false);
    }
    libNtve_gf_SetDialogItemToggled(libVCUI_gv_pU_BottomBarButton[(lp_button)], lp_toggled, PlayerGroupAll());
}

trigger auto_libVCUI_gf_PU_BottomBarButtonHighlight_Trigger = null;
int auto_libVCUI_gf_PU_BottomBarButtonHighlight_lp_button;
bool auto_libVCUI_gf_PU_BottomBarButtonHighlight_lp_showHide;

void libVCUI_gf_PU_BottomBarButtonHighlight (int lp_button, bool lp_showHide) {
    auto_libVCUI_gf_PU_BottomBarButtonHighlight_lp_button = lp_button;
    auto_libVCUI_gf_PU_BottomBarButtonHighlight_lp_showHide = lp_showHide;

    if (auto_libVCUI_gf_PU_BottomBarButtonHighlight_Trigger == null) {
        auto_libVCUI_gf_PU_BottomBarButtonHighlight_Trigger = TriggerCreate("auto_libVCUI_gf_PU_BottomBarButtonHighlight_TriggerFunc");
    }

    TriggerExecute(auto_libVCUI_gf_PU_BottomBarButtonHighlight_Trigger, false, false);
}

bool auto_libVCUI_gf_PU_BottomBarButtonHighlight_TriggerFunc (bool testConds, bool runActions) {
    int lp_button = auto_libVCUI_gf_PU_BottomBarButtonHighlight_lp_button;
    bool lp_showHide = auto_libVCUI_gf_PU_BottomBarButtonHighlight_lp_showHide;

    // Automatic Variable Declarations
    // Implementation
    TriggerExecute(libVCUI_gt_PU_BottomBarInit, true, false);
    if ((lp_showHide == true)) {
        DialogControlSendAnimationEvent(libVCUI_gv_pU_BottomBarButton[(lp_button)], PlayerGroupAll(), "Highlight");
    }
    else {
        DialogControlSendAnimationEvent(libVCUI_gv_pU_BottomBarButton[(lp_button)], PlayerGroupAll(), "HighlightStop");
    }
    return true;
}

void libVCUI_gf_PU_BottomBarSetExtendedTooltip (int lp_button, text lp_tooltipText) {
    // Variable Declarations
    text lv_buttonTooltip;

    // Automatic Variable Declarations
    int auto14B9BE19_val;

    // Variable Initialization

    // Implementation
    auto14B9BE19_val = lp_button;
    if (auto14B9BE19_val == libVCUI_ge_PU_BottomBarButton_BridgeRoom) {
        lv_buttonTooltip = ConversationDataStateText("CampaignText|BottomBarBridgeTooltip", "Value");
    }
    else if (auto14B9BE19_val == libVCUI_ge_PU_BottomBarButton_ArmyRoom) {
        lv_buttonTooltip = ConversationDataStateText("CampaignText|BottomBarArmyTooltip", "Value");
    }
    else if (auto14B9BE19_val == libVCUI_ge_PU_BottomBarButton_ShipRoom) {
        lv_buttonTooltip = ConversationDataStateText("CampaignText|BottomBarShipTooltip", "Value");
    }
    else {
    }
    if (((lp_tooltipText != null) == true)) {
        if (((lv_buttonTooltip != null) == true)) {
            TextExpressionSetToken("Param/Expression/lib_VCUI_395995D8", "BOTTOMBARTOOLTIP", lv_buttonTooltip);
            TextExpressionSetToken("Param/Expression/lib_VCUI_395995D8", "EXTENDEDTIP", lp_tooltipText);
            libNtve_gf_SetDialogItemTooltip(libVCUI_gv_pU_BottomBarButton[(lp_button)], TextExpressionAssemble("Param/Expression/lib_VCUI_395995D8"), PlayerGroupAll());
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_VCUI_9DEA3931", "A", lp_tooltipText);
            libNtve_gf_SetDialogItemTooltip(libVCUI_gv_pU_BottomBarButton[(lp_button)], TextExpressionAssemble("Param/Expression/lib_VCUI_9DEA3931"), PlayerGroupAll());
        }
    }
    else {
        if ((lp_button == libVCUI_ge_PU_BottomBarButton_ShipRoom) && (libVCST_gf_RoomIsUnlocked(libVCST_ge_Rooms_StoryRoomShip) == false)) {
            libNtve_gf_SetDialogItemTooltip(libVCUI_gv_pU_BottomBarButton[(lp_button)], StringExternal("Param/Value/lib_VCUI_8ED4DD62"), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemTooltip(libVCUI_gv_pU_BottomBarButton[(lp_button)], lv_buttonTooltip, PlayerGroupAll());
        }
    }
}

string libVCUI_gf_PU_ArchivesDataString (int lp_missionarchive) {
    // Automatic Variable Declarations
    // Implementation
    return ("ZSS_Archive_" + IntToString((lp_missionarchive)));
}

string libVCUI_gf_PU_ArchivesDataTypeString (int lp_missionarchive) {
    // Automatic Variable Declarations
    // Implementation
    return ("ZSS_ArchiveType_" + IntToString((lp_missionarchive)));
}

void libVCUI_gf_PU_ArchivesOverlayCreate () {
    // Automatic Variable Declarations
    // Implementation
    libVCUI_gv_pU_MissionArchiveOverlayCreated = true;
    libVCUI_gv_pU_ArchivesPanel = BattleReportGetDialogControl();
    DialogControlHookup(libVCUI_gv_pU_ArchivesPanel, c_triggerControlTypePanel, "ScreenTitleFrame");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "ScreenTitleLabel");
    libVCUI_gv_pU_ArchivesTitle = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_ArchivesPanel, c_triggerControlTypeButton, "CloseButton");
    libVCUI_gv_pU_ArchivesBackButton = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_ArchivesPanel, c_triggerControlTypeButton, "QuitButton");
    libVCUI_gv_pU_ArchivesQuitButton = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_ArchivesPanel, c_triggerControlTypePanel, "MissionSummaryContainer");
    libVCUI_gv_pU_ArchivesMissionPanel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_ArchivesMissionPanel, c_triggerControlTypeLabel, "MissionTitleLabel");
    libVCUI_gv_pU_ArchivesMissionTitle = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_ArchivesMissionPanel, c_triggerControlTypeLabel, "MissionBonusObjectivesLabel");
    libVCUI_gv_pU_ArchivesMissionBonusLabel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_ArchivesMissionPanel, c_triggerControlTypeImage, "MissionImage");
    libVCUI_gv_pU_ArchivesMissionImage = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_ArchivesMissionPanel, c_triggerControlTypePanel, "AchievementSummaryContainer");
    libVCUI_gv_pU_ArchivesAchievementPanel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_ArchivesAchievementPanel, c_triggerControlTypeAchievement, "AchievementFrame0");
    libVCUI_gv_pU_ArchivesAchievements[1] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_ArchivesAchievementPanel, c_triggerControlTypeAchievement, "AchievementFrame1");
    libVCUI_gv_pU_ArchivesAchievements[2] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_ArchivesAchievementPanel, c_triggerControlTypeAchievement, "AchievementFrame2");
    libVCUI_gv_pU_ArchivesAchievements[3] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_ArchivesMissionPanel, c_triggerControlTypePanel, "DifficultySummaryContainer");
    libVCUI_gv_pU_ArchivesDifficultyPanel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_ArchivesDifficultyPanel, c_triggerControlTypeLabel, "DifficultyCasualLabel");
    libVCUI_gv_pU_ArchivesDifficultyLabels[1] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_ArchivesDifficultyPanel, c_triggerControlTypeLabel, "DifficultyCasualTimeLabel");
    libVCUI_gv_pU_ArchivesDifficultyTimes[1] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_ArchivesDifficultyPanel, c_triggerControlTypeLabel, "DifficultyNormalLabel");
    libVCUI_gv_pU_ArchivesDifficultyLabels[2] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_ArchivesDifficultyPanel, c_triggerControlTypeLabel, "DifficultyNormalTimeLabel");
    libVCUI_gv_pU_ArchivesDifficultyTimes[2] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_ArchivesDifficultyPanel, c_triggerControlTypeLabel, "DifficultyHardLabel");
    libVCUI_gv_pU_ArchivesDifficultyLabels[3] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_ArchivesDifficultyPanel, c_triggerControlTypeLabel, "DifficultyHardTimeLabel");
    libVCUI_gv_pU_ArchivesDifficultyTimes[3] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_ArchivesDifficultyPanel, c_triggerControlTypeLabel, "DifficultyBrutalLabel");
    libVCUI_gv_pU_ArchivesDifficultyLabels[4] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_ArchivesDifficultyPanel, c_triggerControlTypeLabel, "DifficultyBrutalTimeLabel");
    libVCUI_gv_pU_ArchivesDifficultyTimes[4] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_ArchivesMissionPanel, c_triggerControlTypeButton, "ReplayMissionButton");
    libVCUI_gv_pU_ArchivesMissionPlayButton = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_ArchivesPanel, c_triggerControlTypePanel, "CinematicSummaryContainer");
    libVCUI_gv_pU_ArchivesScenePanel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_ArchivesScenePanel, c_triggerControlTypeLabel, "CinematicTitleLabel");
    libVCUI_gv_pU_ArchivesSceneTitle = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_ArchivesScenePanel, c_triggerControlTypeImage, "CinematicImage");
    libVCUI_gv_pU_ArchivesSceneImage = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_ArchivesScenePanel, c_triggerControlTypeButton, "PlayCinematicButton");
    libVCUI_gv_pU_ArchivesScenePlayButton = DialogControlLastCreated();
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    libVCUI_gv_pU_ArchivesLoadingDialog = DialogLastCreated();
    DialogSetFullscreen(libVCUI_gv_pU_ArchivesLoadingDialog, true);
    DialogSetImageVisible(libVCUI_gv_pU_ArchivesLoadingDialog, false);
    libNtve_gf_CreateDialogItemLabel(libVCUI_gv_pU_ArchivesLoadingDialog, 200, 50, c_anchorBottomLeft, 0, 0, StringExternal("Param/Value/lib_VCUI_8DFE4298"), Color(254*100/255,138*100/255,14*100/255), false, 2.0);
    libVCUI_gv_pU_ArchivesLoadingLabel = DialogControlLastCreated();
    DialogControlSetPositionRelative(libVCUI_gv_pU_ArchivesLoadingLabel, PlayerGroupAll(), c_anchorTopRight, libVCUI_gv_pU_ArchivesMissionPanel, c_anchorBottomRight, 0, 0);
    DialogControlSendAnimationEvent(libVCUI_gv_pU_ArchivesPanel, PlayerGroupAll(), "Birth");
    SoundPlayForPlayer(SoundLink("UI_Archive_Birth", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
}

void libVCUI_gf_PU_ArchivesClosed () {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(libVCUI_gt_PU_ArchivesSelectionChanged, false);
    TriggerEnable(libVCUI_gt_PU_ArchivesScenePlayClicked, false);
    TriggerEnable(libVCUI_gt_PU_ArchivesMissionPlayClicked, false);
    TriggerEnable(libVCUI_gt_PU_ArchivesCloseClicked, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleReportPanel, false);
}

void libVCUI_gf_PU_ArchivesDisplay () {
    // Automatic Variable Declarations
    // Implementation
    TriggerExecute(libVCUI_gt_PU_ArchivesCreate, true, false);
    TriggerEnable(libVCUI_gt_PU_ArchivesSelectionChanged, true);
    TriggerEnable(libVCUI_gt_PU_ArchivesScenePlayClicked, true);
    TriggerEnable(libVCUI_gt_PU_ArchivesMissionPlayClicked, true);
    TriggerEnable(libVCUI_gt_PU_ArchivesCloseClicked, true);
    if ((PlayerRace(1) != "Prot")) {
        PlayerSetRace(1, "Prot");
    }

    if ((libVoiC_gf_PC_CampaignIsComplete() == false)) {
        libVCUI_gv_pU_ArchivesSynced = true;
    }

    libVCUI_gf_PU_ArchivesUpdate();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleReportPanel, true);
    if ((libVoiC_gf_PC_CampaignIsComplete() == true) && (libVoiC_gf_PC_ArchivesMasterVisited() == false) && (libVCUI_gv_pU_ArchivesFirstOpen == true)) {
        TextExpressionSetToken("Param/Expression/lib_VCUI_F859D055", "A", ConversationDataStateText("StoryModeText|MasterArchivesIntroText", "Description"));
        TextExpressionSetToken("Param/Expression/lib_VCUI_F859D055", "B", ConversationDataStateText("StoryModeText|MasterArchivesIntroText2", "Description"));
        UIShowCustomDialog(PlayerGroupAll(), libNtve_ge_CustomDialogType_c_customDialogTypeMessage, ConversationDataStateText("StoryModeText|MasterArchivesIntroTitle", "Description"), TextExpressionAssemble("Param/Expression/lib_VCUI_F859D055"), true);
    }

    libVCUI_gv_pU_ArchivesFirstOpen = false;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "pAmbience_MissionArchives", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libVoiC_gf_CinematicFade(true, 0.5, Color(0.00, 0.00, 0.00), false);
}

string libVCUI_gf_PU_ArchivesLastMissionSelected () {
    // Automatic Variable Declarations
    // Implementation
    return (DataTableGetString(true, libVCUI_gf_PU_ArchivesDataString(BattleReportPanelGetSelectedBattleReport(1))));
}

void libVCUI_gf_PU_ArchivesUpdate () {
    // Variable Declarations
    int lv_index;
    int lv_difficultyIndex;
    string lv_selectedMission;
    string lv_selectedScene;

    // Automatic Variable Declarations
    const int auto6A391340_ae = 4;
    const int auto6A391340_ai = 1;
    const int auto9C012B84_ae = 3;
    const int auto9C012B84_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libVCUI_gv_pU_ArchivesSynced == true)) {
        DialogSetVisible(libVCUI_gv_pU_ArchivesLoadingDialog, PlayerGroupAll(), false);
    }
    else {
        DialogSetVisible(libVCUI_gv_pU_ArchivesLoadingDialog, PlayerGroupAll(), true);
    }
    if ((libVoiC_gf_PC_CampaignIsComplete() == true)) {
        DialogControlSetVisible(libVCUI_gv_pU_ArchivesQuitButton, PlayerGroupAll(), true);
        DialogControlSetVisible(libVCUI_gv_pU_ArchivesBackButton, PlayerGroupAll(), false);
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_ArchivesTitle, ConversationDataStateText("StoryModeText|MasterArchivesIntroTitle", "Description"), PlayerGroupAll());
    }
    else {
        DialogControlSetVisible(libVCUI_gv_pU_ArchivesQuitButton, PlayerGroupAll(), false);
        DialogControlSetVisible(libVCUI_gv_pU_ArchivesBackButton, PlayerGroupAll(), true);
    }
    if ((BattleReportPanelGetSelectedBattleReport(1) == c_invalidBattleReportId)) {
        DialogControlSetVisible(libVCUI_gv_pU_ArchivesScenePanel, PlayerGroupAll(), false);
        DialogControlSetVisible(libVCUI_gv_pU_ArchivesMissionPanel, PlayerGroupAll(), false);
    }
    else if ((DataTableGetInt(true, libVCUI_gf_PU_ArchivesDataTypeString(BattleReportPanelGetSelectedBattleReport(1))) == libVCUI_ge_PU_ArchivesType_Mission)) {
        lv_selectedMission = (DataTableGetString(true, libVCUI_gf_PU_ArchivesDataString(BattleReportPanelGetSelectedBattleReport(1))));
        DialogControlSetVisible(libVCUI_gv_pU_ArchivesScenePanel, PlayerGroupAll(), false);
        DialogControlSetVisible(libVCUI_gv_pU_ArchivesMissionPanel, PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_ArchivesMissionTitle, libVoiC_gf_PC_CampaignMapName(lv_selectedMission), PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(libVCUI_gv_pU_ArchivesMissionImage, libVoiC_gf_PC_CampaignMapMissionArchiveBackgroundImage(lv_selectedMission), PlayerGroupAll());
        libVCUI_gf_PU_ArchivesSetUVs(UserDataGetFixed("Maps", libVoiC_gf_PC_MapUserDataInstance(lv_selectedMission), "ArchivesImageSettings", 1), UserDataGetFixed("Maps", libVoiC_gf_PC_MapUserDataInstance(lv_selectedMission), "ArchivesImageSettings", 2), UserDataGetFixed("Maps", libVoiC_gf_PC_MapUserDataInstance(lv_selectedMission), "ArchivesImageSettings", 3));
        if ((libVCUI_gv_pU_ArchivesSynced == true) && (libVoiC_gf_PC_MissionRewardsBonusPossible(lv_selectedMission, "ShipEnergy") > 0)) {
            DialogControlSetVisible(libVCUI_gv_pU_ArchivesMissionBonusLabel, PlayerGroupAll(), true);
            TextExpressionSetToken("Param/Expression/lib_VCUI_C0C86648", "EnergyEarned", IntToText(libVoiC_gf_PC_MissionRewardsBonusEarned(lv_selectedMission, "ShipEnergy")));
            TextExpressionSetToken("Param/Expression/lib_VCUI_C0C86648", "EnergyPossible", IntToText(libVoiC_gf_PC_MissionRewardsBonusPossible(lv_selectedMission, "ShipEnergy")));
            libNtve_gf_SetDialogItemText(libVCUI_gv_pU_ArchivesMissionBonusLabel, TextExpressionAssemble("Param/Expression/lib_VCUI_C0C86648"), PlayerGroupAll());
        }
        else {
            DialogControlSetVisible(libVCUI_gv_pU_ArchivesMissionBonusLabel, PlayerGroupAll(), false);
        }
        if ((libVoiC_gf_PC_CampaignMapTypeCheck(lv_selectedMission, c_mapKindMission) == true)) {
            if ((libVCUI_gv_pU_ArchivesSynced == true)) {
                DialogControlSetVisible(libVCUI_gv_pU_ArchivesDifficultyPanel, PlayerGroupAll(), true);
                lv_difficultyIndex = 1;
                for ( ; ( (auto6A391340_ai >= 0 && lv_difficultyIndex <= auto6A391340_ae) || (auto6A391340_ai < 0 && lv_difficultyIndex >= auto6A391340_ae) ) ; lv_difficultyIndex += auto6A391340_ai ) {
                    if ((libVoiC_gf_MissionCompleteBestTime(lv_selectedMission, libVoiC_gf_PC_DifficultyFromIndex(lv_difficultyIndex)) == 0)) {
                        libNtve_gf_SetDialogItemStyle(libVCUI_gv_pU_ArchivesDifficultyLabels[lv_difficultyIndex], "VoidMissionArchiveDifficultyLabel", PlayerGroupAll());
                        libNtve_gf_SetDialogItemStyle(libVCUI_gv_pU_ArchivesDifficultyTimes[lv_difficultyIndex], "VoidMissionArchiveDifficultyTimeLabel", PlayerGroupAll());
                    }
                    else {
                        libNtve_gf_SetDialogItemStyle(libVCUI_gv_pU_ArchivesDifficultyLabels[lv_difficultyIndex], "VoidMissionArchiveDifficultyCompletedLabel", PlayerGroupAll());
                        libNtve_gf_SetDialogItemStyle(libVCUI_gv_pU_ArchivesDifficultyTimes[lv_difficultyIndex], "VoidMissionArchiveDifficultyTimeCompletedLabel", PlayerGroupAll());
                    }
                }
                libNtve_gf_SetDialogItemText(libVCUI_gv_pU_ArchivesDifficultyLabels[1], DifficultyNameCampaign(1), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(libVCUI_gv_pU_ArchivesDifficultyTimes[1], libVoiC_gf_FormatTimeCampaign(libVoiC_gf_MissionCompleteBestTime(lv_selectedMission, 1)), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(libVCUI_gv_pU_ArchivesDifficultyLabels[2], DifficultyNameCampaign(2), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(libVCUI_gv_pU_ArchivesDifficultyTimes[2], libVoiC_gf_FormatTimeCampaign(libVoiC_gf_MissionCompleteBestTime(lv_selectedMission, 2)), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(libVCUI_gv_pU_ArchivesDifficultyLabels[3], DifficultyNameCampaign(3), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(libVCUI_gv_pU_ArchivesDifficultyTimes[3], libVoiC_gf_FormatTimeCampaign(libVoiC_gf_MissionCompleteBestTime(lv_selectedMission, 3)), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(libVCUI_gv_pU_ArchivesDifficultyLabels[4], DifficultyNameCampaign(4), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(libVCUI_gv_pU_ArchivesDifficultyTimes[4], libVoiC_gf_FormatTimeCampaign(libVoiC_gf_MissionCompleteBestTime(lv_selectedMission, 4)), PlayerGroupAll());
            }
            else {
                DialogControlSetVisible(libVCUI_gv_pU_ArchivesDifficultyPanel, PlayerGroupAll(), false);
            }
            DialogControlSetVisible(libVCUI_gv_pU_ArchivesAchievementPanel, PlayerGroupAll(), true);
            lv_index = 1;
            for ( ; ( (auto9C012B84_ai >= 0 && lv_index <= auto9C012B84_ae) || (auto9C012B84_ai < 0 && lv_index >= auto9C012B84_ae) ) ; lv_index += auto9C012B84_ai ) {
                libNtve_gf_SetDialogItemAchievement(libVCUI_gv_pU_ArchivesAchievements[lv_index], UserDataGetGameLink("Maps", libVoiC_gf_PC_MapUserDataInstance(lv_selectedMission), "Achievements", lv_index), PlayerGroupAll());
            }
        }
        else {
            if ((libVoiC_gf_MissionStatusCheck("PAiur06", libVoiC_ge_MissionStatus_Completed) == true) && (libVoiC_gf_MissionStatusCheck(lv_selectedMission, libVoiC_ge_MissionStatus_Completed) == false) && (libVCUI_gv_pU_ArchivesSynced == true)) {
                DialogControlSetVisible(libVCUI_gv_pU_ArchivesMissionBonusLabel, PlayerGroupAll(), true);
                libNtve_gf_SetDialogItemText(libVCUI_gv_pU_ArchivesMissionBonusLabel, StringExternal("Param/Value/lib_VCUI_D3588EDE"), PlayerGroupAll());
            }
            else {
                DialogControlSetVisible(libVCUI_gv_pU_ArchivesMissionBonusLabel, PlayerGroupAll(), false);
            }
            DialogControlSetVisible(libVCUI_gv_pU_ArchivesDifficultyPanel, PlayerGroupAll(), false);
            DialogControlSetVisible(libVCUI_gv_pU_ArchivesAchievementPanel, PlayerGroupAll(), false);
        }
    }
    else if ((DataTableGetInt(true, libVCUI_gf_PU_ArchivesDataTypeString(BattleReportPanelGetSelectedBattleReport(1))) == libVCUI_ge_PU_ArchivesType_Scene)) {
        lv_selectedScene = UserDataInstanceFromReference(DataTableGetString(true, libVCUI_gf_PU_ArchivesDataString(BattleReportPanelGetSelectedBattleReport(1))));
        DialogControlSetVisible(libVCUI_gv_pU_ArchivesScenePanel, PlayerGroupAll(), true);
        DialogControlSetVisible(libVCUI_gv_pU_ArchivesMissionPanel, PlayerGroupAll(), false);
        libNtve_gf_SetDialogItemImage(libVCUI_gv_pU_ArchivesSceneImage, UserDataGetImagePath("Scenes", lv_selectedScene, "Image", 1), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_ArchivesSceneTitle, libVoiC_gf_StorySceneName(lv_selectedScene), PlayerGroupAll());
    }
}

int libVCUI_gf_PU_ArchivesScenePriority (string lp_scene) {
    // Automatic Variable Declarations
    string autoAF2BCFA5_val;
    string autoDE48A603_val;

    // Implementation
    if ((libVoiC_gf_PC_CampaignInEpilogue() == true)) {
        autoDE48A603_val = lp_scene;
        if (autoDE48A603_val == "EpilogueStart") {
            return (libVCUI_gf_PU_ArchivesMissionPriority("SC2Epilogue01")+1);
        }
        else if (autoDE48A603_val == "Epilogue01Debrief") {
            return (libVCUI_gf_PU_ArchivesMissionPriority("SC2Epilogue01")-1);
        }
        else if (autoDE48A603_val == "XelNagaKerrigan") {
            return (libVCUI_gf_PU_ArchivesMissionPriority("SC2Epilogue02")-1);
        }
        else if (autoDE48A603_val == "EpilogueEnd") {
            return (libVCUI_gf_PU_ArchivesMissionPriority("SC2Epilogue03")-1);
        }
        else {
        }
    }
    else {
        autoAF2BCFA5_val = lp_scene;
        if (autoAF2BCFA5_val == "CampaignIntro") {
            return 950;
        }
        else if (autoAF2BCFA5_val == "AiurIntro") {
            return 949;
        }
        else if (autoAF2BCFA5_val == "Aiur01Debrief") {
            return (libVCUI_gf_PU_ArchivesMissionPriority("PAiur01")-1);
        }
        else if (autoAF2BCFA5_val == "Protoss02") {
            return (libVCUI_gf_PU_ArchivesMissionPriority("PAiur02")-1);
        }
        else if (autoAF2BCFA5_val == "Aiur02Debrief") {
            return (libVCUI_gf_PU_ArchivesMissionPriority("PAiur02")-2);
        }
        else if (autoAF2BCFA5_val == "Aiur03Debrief") {
            return (libVCUI_gf_PU_ArchivesMissionPriority("PAiur03")-1);
        }
        else if (autoAF2BCFA5_val == "KorhalEnd") {
            return (libVCUI_gf_PU_ArchivesMissionPriority("PKorhal02")-1);
        }
        else if (autoAF2BCFA5_val == "ShakurasEnd") {
            return (libVCUI_gf_PU_ArchivesMissionPriority("PShakuras02")-1);
        }
        else if (autoAF2BCFA5_val == "KerriganIntro") {
            return (libVCUI_gf_PU_ArchivesMissionPriority("PUlnar02")+1);
        }
        else if (autoAF2BCFA5_val == "Protoss06") {
            return (libVCUI_gf_PU_ArchivesMissionPriority("PUlnar02")-1);
        }
        else if (autoAF2BCFA5_val == "AiurUnlock") {
            if ((libVoiC_gf_MissionStatusCheck("PAiur04", libVoiC_ge_MissionStatus_Locked) == true)) {
                return 1000;
            }

            if ((libVoiC_gf_MissionStatusAge("PPurifier03", libVoiC_ge_MissionStatus_Completed) < libVoiC_gf_MissionStatusAge("PMoebius01", libVoiC_ge_MissionStatus_Completed)) && (libVoiC_gf_MissionStatusAge("PPurifier03", libVoiC_ge_MissionStatus_Completed) < libVoiC_gf_MissionStatusAge("PTaldarim02", libVoiC_ge_MissionStatus_Completed))) {
                return (libVCUI_gf_PU_ArchivesMissionPriority("PPurifier03")-1);
            }
            else if ((libVoiC_gf_MissionStatusAge("PMoebius01", libVoiC_ge_MissionStatus_Completed) < libVoiC_gf_MissionStatusAge("PPurifier03", libVoiC_ge_MissionStatus_Completed)) && (libVoiC_gf_MissionStatusAge("PMoebius01", libVoiC_ge_MissionStatus_Completed) < libVoiC_gf_MissionStatusAge("PTaldarim02", libVoiC_ge_MissionStatus_Completed))) {
                return (libVCUI_gf_PU_ArchivesMissionPriority("PMoebius01")-1);
            }
            else if ((libVoiC_gf_MissionStatusAge("PTaldarim02", libVoiC_ge_MissionStatus_Completed) < libVoiC_gf_MissionStatusAge("PPurifier03", libVoiC_ge_MissionStatus_Completed)) && (libVoiC_gf_MissionStatusAge("PTaldarim02", libVoiC_ge_MissionStatus_Completed) < libVoiC_gf_MissionStatusAge("PMoebius01", libVoiC_ge_MissionStatus_Completed))) {
                return (libVCUI_gf_PU_ArchivesMissionPriority("PTaldarim02")-1);
            }
        }
        else if (autoAF2BCFA5_val == "Aiur06Briefing") {
            return (libVCUI_gf_PU_ArchivesMissionPriority("PAiur06")+1);
        }
        else if (autoAF2BCFA5_val == "Liberation") {
            return (libVCUI_gf_PU_ArchivesMissionPriority("PAiur06")-1);
        }
        else {
        }
    }
    return 1000;
}

int libVCUI_gf_PU_ArchivesMissionPriority (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    if ((libVoiC_gf_MissionStatusCheck(lp_mission, libVoiC_ge_MissionStatus_Completed) == false) && (libVoiC_gf_MissionStatusCheck("PAiur06", libVoiC_ge_MissionStatus_Completed) == false)) {
        return 1500;
    }

    if ((libVoiC_gf_MissionStatusCheck(lp_mission, libVoiC_ge_MissionStatus_Completed) == true) && (libVoiC_gf_PC_CampaignMapTypeCheck(lp_mission, c_mapKindMission) == true)) {
        return (500+((libVoiC_gf_MissionStatusAge(lp_mission, libVoiC_ge_MissionStatus_Completed)+1)*5));
    }

    return 0;
}

string libVCUI_gf_PU_ArchivesSelectedScene () {
    // Automatic Variable Declarations
    // Implementation
    return UserDataInstanceFromReference(DataTableGetString(true, libVCUI_gf_PU_ArchivesDataString(BattleReportPanelGetSelectedBattleReport(1))));
}

void libVCUI_gf_PU_ArchivesSetUV (string lp_side, fixed lp_value) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSendAnimationEvent(libVCUI_gv_pU_ArchivesMissionImage, PlayerGroupAll(), ("Scroll" + lp_side + "Play"));
    DialogControlSetAnimationTime(libVCUI_gv_pU_ArchivesMissionImage, PlayerGroupAll(), ("Scroll" + lp_side), lp_value);
    DialogControlSendAnimationEvent(libVCUI_gv_pU_ArchivesMissionImage, PlayerGroupAll(), ("Scroll" + lp_side + "Pause"));
}

void libVCUI_gf_PU_ArchivesSetUVs (fixed lp_centerX, fixed lp_centerY, fixed lp_scale) {
    // Variable Declarations
    fixed lv_ratioX;
    fixed lv_ratioY;
    fixed lv_top;
    fixed lv_bottom;
    fixed lv_left;
    fixed lv_right;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_ratioX = (IntToFixed(libVCUI_gv_pUC_ArchivesMissionTargetWidth) / IntToFixed(libVCUI_gv_pUC_ArchivesMissionLoadingWidth));
    lv_ratioY = (IntToFixed(libVCUI_gv_pUC_ArchivesMissionTargetHeight) / IntToFixed(libVCUI_gv_pUC_ArchivesMissionLoadingHeight));
    lv_top = (lp_centerY-(lv_ratioY*lp_scale/2.0));
    lv_bottom = (lp_centerY+(lv_ratioY*lp_scale/2.0));
    lv_left = (lp_centerX-(lv_ratioX*lp_scale/2.0));
    lv_right = (lp_centerX+(lv_ratioX*lp_scale/2.0));
    if (((lv_left <= 0.0) || (lv_right >= 1.0) || (lv_top <= 0.0) || (lv_bottom >= 1.0))) {
        return ;
    }

    libVCUI_gf_PU_ArchivesSetUV("Top", lv_top);
    libVCUI_gf_PU_ArchivesSetUV("Bottom", lv_bottom);
    libVCUI_gf_PU_ArchivesSetUV("Left", lv_left);
    libVCUI_gf_PU_ArchivesSetUV("Right", lv_right);
}

void libVCUI_gf_PU_MissionDisplayTerran (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerRace(1) != "Terr")) {
        PlayerSetRace(1, "Terr");
        Wait(0.1, c_timeGame);
        if ((libVoiC_gf_StoryInSimulation() == true)) {
            UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleReportPanel, true);
            UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleReportPanel, false);
        }

    }

    StoryCreatePlanetPanel();
    PlanetCreate(PlayerGroupAll(), c_planetStateHidden);
    if ((libVoiC_gf_StoryInSimulation() == true)) {
        PlanetPanelSetBackButtonText(PlayerGroupAll(), StringExternal("UI/VoidStoryBack"));
        PlanetPanelSetBackButtonShortcut(PlayerGroupAll(), StringExternalHotkey("Button/Hotkey/MissionPanelBack"));
    }
    else {
        PlanetPanelSetBackButtonText(PlayerGroupAll(), StringExternal("UI/VoidStoryQuit"));
        PlanetPanelSetBackButtonShortcut(PlayerGroupAll(), StringExternalHotkey("UI/Hotkey/StoryQuit"));
        PlanetPanelSetBackButtonTooltip(PlayerGroupAll(), StringExternal("ConversationState/MissionPanelTooltips/Quit_Button/Info/Description"));
    }
    libVCUI_gv_pU_MissionNextMap = lp_mission;
    PlanetSetMissionName(PlanetLastCreated(), libVoiC_gf_PC_CampaignMapName(libVCUI_gv_pU_MissionNextMap));
    PlanetSetPrimaryObjectiveText(PlanetLastCreated(), StringExternal(libVCUI_gf_PU_MissionProperty("PrimaryObjectiveText")));
    PlanetSetBackgroundModelLink(PlanetLastCreated(), "SMX2_UI_Screens_Loading_Epilogue02");
    PlanetSetContactModelLink(PlanetLastCreated(), libVoiC_gf_PC_CampaignMapContactPortrait(lp_mission));
    PlanetSetContactName(PlanetLastCreated(), libVoiC_gf_PC_CampaignMapContactName(lp_mission));
    PlanetSetContactActorLink(PlanetLastCreated(), libVoiC_gf_PC_CampaignMapContactActor(lp_mission));
    PlanetSetTechnologyTitle(PlanetLastCreated(), StringExternal("Param/Value/lib_VCUI_899CD639"));
    PlanetSetTechnologyTooltipText(PlanetLastCreated(), StringToText(""));
    PlanetSetSelected(PlayerGroupAll(), PlanetLastCreated());
    ConversationDataRegisterPortrait(libVoiC_gf_PC_ClickableConversationLink("Artanis"), PortraitGetPlanetPanel());
    PlanetPanelSetBackgroundImage(PlayerGroupAll(), "Assets\\Textures\\ui_planetpanel_frame_backdrop_space.dds");
    ConversationDataPreloadLines("pPitch_Epilogue02");
    SoundLengthQueryWait();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePlanetPanel, true);
    libVoiC_gf_CinematicFade(true, 0.2, Color(0.00, 0.00, 0.00), true);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_MissionLaunchUI);
    if ((libVCUI_gv_pU_MissionPitchPlayed == false) && (libVoiC_gf_CurrentMissionIsSimulation() == false)) {
        TriggerExecute(libVCUI_gt_PU_MissionTerranPitchPlayStop, true, false);
    }

    TriggerEnable(libVCUI_gt_PU_MissionTerranPitchPlayStop, true);
    TriggerEnable(libVCUI_gt_PU_MissionTerranQuitClicked, true);
    TriggerEnable(libVCUI_gt_PU_MissionTerranLaunchClicked, true);
}

void libVCUI_gf_PU_MissionCloseTerran () {
    // Automatic Variable Declarations
    // Implementation
    ConversationDataStop();
    TransmissionClearAll();
    PlanetDestroyAll(PlayerGroupAll());
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePlanetPanel, false);
}

void libVCUI_gf_PU_MissionInitFromData (string lp_mission) {
    // Variable Declarations
    int lv_clickableIndex;
    int lv_fluffIndex;

    // Automatic Variable Declarations
    int autoE665DE91_ae;
    const int autoE665DE91_ai = 1;
    string autoA5F88546_val;
    const int auto10D29055_ae = 3;
    const int auto10D29055_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libVoiC_gf_StoryInSimulation() == true)) {
        TriggerEnable(libVCUI_gt_PU_MissionArmyClicked, true);
        TriggerEnable(libVCUI_gt_PU_MissionShipClicked, true);
    }
    else {
        TriggerEnable(libVCUI_gt_PU_MissionArmyClicked, false);
        TriggerEnable(libVCUI_gt_PU_MissionShipClicked, false);
    }
    libVCUI_gv_pU_MissionNextMap = lp_mission;
    libNtve_gf_SetDialogItemModel(libVCUI_gv_pU_MissionPortraitFrame, libVoiC_gf_PC_CampaignMapContactPortrait(lp_mission), PlayerGroupAll());
    if ((libVoiC_gf_PC_CampaignMapContactActor(lp_mission) == null)) {
        libNtve_gf_SetDialogItemActor(libVCUI_gv_pU_MissionPortraitFrame, "PortraitActor", PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemActor(libVCUI_gv_pU_MissionPortraitFrame, libVoiC_gf_PC_CampaignMapContactActor(lp_mission), PlayerGroupAll());
    }
    autoE665DE91_ae = UserDataInstanceCount("Clickable");
    lv_clickableIndex = 1;
    for ( ; ( (autoE665DE91_ai >= 0 && lv_clickableIndex <= autoE665DE91_ae) || (autoE665DE91_ai < 0 && lv_clickableIndex >= autoE665DE91_ae) ) ; lv_clickableIndex += autoE665DE91_ai ) {
        if ((((libVoiC_gf_PC_ClickableConversationLink(UserDataInstance("Clickable", lv_clickableIndex)) == "char_Artanis") && (lp_mission != "PMoebius01") && (lp_mission != "PAiur02") && (lp_mission != "SC2Epilogue02") && (lp_mission != "SC2Epilogue03")) || ((libVoiC_gf_PC_ClickableConversationLink(UserDataInstance("Clickable", lv_clickableIndex)) == "char_Smith") && (lp_mission == "PMoebius01")))) {
            ConversationDataRegisterPortrait(libVoiC_gf_PC_ClickableConversationLink(UserDataInstance("Clickable", lv_clickableIndex)), c_invalidPortraitId);
        }
        else {
            ConversationDataRegisterPortrait(libVoiC_gf_PC_ClickableConversationLink(UserDataInstance("Clickable", lv_clickableIndex)), PortraitGetTriggerControl(libVCUI_gv_pU_MissionPortraitFrame));
        }
        ConversationDataRegisterUnit(libVoiC_gf_PC_ClickableConversationLink(UserDataInstance("Clickable", lv_clickableIndex)), null);
    }
    if ((libVCUI_gv_pU_Mission2DBackground != c_invalidDialogControlId)) {
        libNtve_gf_SetDialogItemImage(libVCUI_gv_pU_Mission2DBackground, libVoiC_gf_PC_CampaignMapLoadingScreenImage(lp_mission), PlayerGroupAll());
    }

    if ((libVCUI_gf_PU_MissionIs2D(lp_mission) == true)) {
        return ;
    }

    autoA5F88546_val = lp_mission;
    if (autoA5F88546_val == "PUlnar03") {
        CutsceneAddFilter(libVCUI_gv_pU_MissionCutscene, "Vorazun");
    }
    else if (autoA5F88546_val == "PMoebius01") {
        CutsceneAddFilter(libVCUI_gv_pU_MissionCutscene, "Karax");
    }
    else {
        CutsceneAddFilter(libVCUI_gv_pU_MissionCutscene, "Artanis");
    }
    if ((libVCUI_gf_PU_MissionUIFilter(lp_mission) != null)) {
        CutsceneAddFilter(libVCUI_gv_pU_MissionCutscene, libVCUI_gf_PU_MissionUIFilter(lp_mission));
    }

    libNtve_gf_SetDialogItemCutscene(libVCUI_gv_pU_MissionVignetteScene[1], libVoiC_gf_PC_MissionVignetteCutscene(lp_mission), PlayerGroupAll());
    CutscenePlay(CutsceneGetTriggerControl(libVCUI_gv_pU_MissionVignetteScene[1]));
    CutsceneGoToBookmark(CutsceneGetTriggerControl(libVCUI_gv_pU_MissionVignetteScene[1]), "Section1Start");
    libNtve_gf_SetDialogItemCutscene(libVCUI_gv_pU_MissionVignetteScene[2], libVoiC_gf_PC_MissionVignetteCutscene(lp_mission), PlayerGroupAll());
    CutscenePlay(CutsceneGetTriggerControl(libVCUI_gv_pU_MissionVignetteScene[2]));
    CutsceneGoToBookmark(CutsceneGetTriggerControl(libVCUI_gv_pU_MissionVignetteScene[2]), "Section2Start");
    lv_fluffIndex = 1;
    for ( ; ( (auto10D29055_ai >= 0 && lv_fluffIndex <= auto10D29055_ae) || (auto10D29055_ai < 0 && lv_fluffIndex >= auto10D29055_ae) ) ; lv_fluffIndex += auto10D29055_ai ) {
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_MissionFluffLabels[lv_fluffIndex], libVCUI_gf_PU_MissionUIFluffText(lp_mission, lv_fluffIndex), PlayerGroupAll());
    }
    libNtve_gf_SetDialogItemText(libVCUI_gv_pU_MissionPortraitFluffLabel, libVoiC_gf_PC_CampaignMapContactTitle(lp_mission), PlayerGroupAll());
}

void libVCUI_gf_PU_MissionDisplay (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    libVoiC_gf_CinematicFade(false, 0.0, Color(0.00, 0.00, 0.00), true);
    if (((lp_mission == "PAiur01") || (lp_mission == "PAiur02") || (lp_mission == "PAiur03") || (lp_mission == "SC2Epilogue01"))) {
        TriggerExecute(libVCUI_gt_PU_MissionCreate2D, true, true);
    }
    else if ((lp_mission == "SC2Epilogue03")) {
        TriggerExecute(libVCUI_gt_PU_MissionCreateZerg, true, true);
    }
    else if ((lp_mission == "SC2Epilogue02")) {
        libVCUI_gf_PU_MissionDisplayTerran(lp_mission);
        return ;
    }
    else if (true) {
        TriggerExecute(libVCUI_gt_PU_MissionCreate, true, true);
    }
    libVCUI_gf_PU_MissionInitFromData(lp_mission);
    if ((libVCUI_gf_PU_MissionIs2D(lp_mission) == false)) {
        if ((libVoiC_gf_StoryInSimulation() == false) && (libVCUI_gv_pU_MissionPitchPlayed == false)) {
            TriggerEnable(libVCUI_gt_PU_MissionBirthCallouts, true);
            if ((libVoiC_gf_StoryMapPlanet(libVoiC_gf_LastMission()) == libVoiC_gf_StoryMapPlanet(libVCST_gf_NextAvailableMission(libVoiC_gf_CurrentLocation())))) {
                CutsceneGoToBookmark(libVCUI_gv_pU_MissionCutscene, "NoAnimateBirth");
            }
            else {
                CutsceneGoToBookmark(libVCUI_gv_pU_MissionCutscene, "Birth");
            }
        }
        else {
            if ((libVoiC_gf_MissionArmyCategoryUnlocked(libVCUI_gv_pU_MissionNextMap) != null) && (libVoiC_gf_ArmyCategoryStateCheck(libVoiC_gf_MissionArmyCategoryUnlocked(libVCUI_gv_pU_MissionNextMap), c_armyCategoryStateUnlocked) == false)) {
                DialogControlSendAnimationEvent(libVCUI_gv_pU_MissionCalloutLines[1], PlayerGroupAll(), "InstantBirth");
            }

            DialogControlSendAnimationEvent(libVCUI_gv_pU_MissionCalloutLines[2], PlayerGroupAll(), "InstantBirth");
            DialogControlSendAnimationEvent(libVCUI_gv_pU_MissionCalloutLines[3], PlayerGroupAll(), "InstantBirth");
            DialogControlSendAnimationEvent(libVCUI_gv_pU_MissionCalloutLines[4], PlayerGroupAll(), "InstantBirth");
            CutsceneGoToBookmark(libVCUI_gv_pU_MissionCutscene, "Stand");
            TriggerEnable(libVCUI_gt_PU_MissionVignetteClicked, true);
        }
        CutscenePlay(libVCUI_gv_pU_MissionCutscene);
        libVCUI_gf_PU_RouteArtanisAnims(libVCUI_gv_pU_MissionCutscene);
    }

    libVoiC_gf_CinematicFade(true, 0.0, Color(0.00, 0.00, 0.00), true);
    libVCUI_gf_PU_MissionPreload(lp_mission);
    libVCUI_gf_PU_MissionUpdate();
    DialogSetVisible(libVCUI_gv_pU_MissionDialog, PlayerGroupAll(), true);
    if ((libVCUI_gf_PU_MissionIs2D(lp_mission) == true)) {
        UISetWorldVisible(PlayerGroupAll(), false);
        if ((libVoiC_gf_StoryInSimulation() == false)) {
            TriggerExecute(libVCUI_gt_PU_MissionPitchPlayClicked, false, false);
        }

    }
    else {
        UISetWorldVisible(PlayerGroupAll(), true);
    }
    if ((libVoiC_gf_PC_CampaignMapTypeCheck(libVoiC_gf_CurrentMap(), c_mapKindMission) == true)) {
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_MissionLaunchUI);
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, UserDataGetGameLink("Maps", libVoiC_gf_PC_MapUserDataInstance(libVCUI_gv_pU_MissionNextMap), "UIAmbience", 1), c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libVCUI_gf_PU_MissionAddAliasedUnits();
    libVCUI_gv_pU_MissionEasterEggVignetteEnabled = false;
    TriggerEnable(libVCUI_gt_PU_MissionLaunchClicked, true);
    TriggerEnable(libVCUI_gt_PU_MissionBackClicked, true);
    TriggerEnable(libVCUI_gt_PU_MissionPitchPlayClicked, true);
    TriggerEnable(libVCUI_gt_PU_MissionPitchStopClicked, true);
    TriggerExecute(libVCUI_gt_PU_MissionWaitForSelection, true, true);
}

void libVCUI_gf_PU_MissionClose () {
    // Variable Declarations
    int lv_achievementIndex;

    // Automatic Variable Declarations
    const int auto05CFC2B6_ae = 3;
    const int auto05CFC2B6_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libVCUI_gv_pU_MissionNextMap == "SC2Epilogue02")) {
        libVCUI_gf_PU_MissionCloseTerran();
        return ;
    }

    ConversationDataStop();
    TransmissionClearAll();
    DialogClearSubtitlePositionOverrideControl();
    DialogDestroy(libVCUI_gv_pU_MissionDialog);
    libVCUI_gv_pU_MissionDialog = c_invalidDialogId;
    lv_achievementIndex = 1;
    for ( ; ( (auto05CFC2B6_ai >= 0 && lv_achievementIndex <= auto05CFC2B6_ae) || (auto05CFC2B6_ai < 0 && lv_achievementIndex >= auto05CFC2B6_ae) ) ; lv_achievementIndex += auto05CFC2B6_ai ) {
        libVCUI_gv_pU_MissionAchievementFrame[lv_achievementIndex] = c_invalidDialogControlId;
    }
    libVCUI_gv_pU_MissionCalloutLines[1] = c_invalidDialogControlId;
    libVCUI_gv_pU_Mission2DBackground = c_invalidDialogControlId;
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    CutsceneStop(libVCUI_gv_pU_MissionCutscene);
    TriggerStop(libVCUI_gt_PU_MissionBirthCallouts);
    TriggerEnable(libVCUI_gt_PU_MissionLaunchClicked, false);
    TriggerEnable(libVCUI_gt_PU_MissionBackClicked, false);
    TriggerEnable(libVCUI_gt_PU_MissionPitchPlayClicked, false);
    TriggerEnable(libVCUI_gt_PU_MissionPitchStopClicked, false);
    TriggerEnable(libVCUI_gt_PU_MissionArmyClicked, false);
    TriggerEnable(libVCUI_gt_PU_MissionShipClicked, false);
    TriggerEnable(libVCUI_gt_PU_MissionBirthCallouts, false);
    TriggerEnable(libVCUI_gt_PU_MissionLaunchClicked, false);
    TriggerStop(libVCUI_gt_PU_MissionWaitForSelection);
}

void libVCUI_gf_PU_MissionUpdate () {
    // Variable Declarations
    string lv_rewardCategory;
    int lv_rewardCount;
    int lv_mainObjectiveRewardCount;
    int lv_achievementIndex;

    // Automatic Variable Declarations
    const int autoD4BA0498_ae = 3;
    const int autoD4BA0498_ai = 1;

    // Variable Initialization

    // Implementation
    libNtve_gf_SetDialogItemText(libVCUI_gv_pU_MissionTitleLabel, libVoiC_gf_PC_CampaignMapName(libVCUI_gv_pU_MissionNextMap), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libVCUI_gv_pU_MissionObjectiveLabel, StringExternal(libVCUI_gf_PU_MissionProperty("PrimaryObjectiveText")), PlayerGroupAll());
    libNtve_gf_SetDialogItemLight(libVCUI_gv_pU_MissionPortraitFrame, "MissionLaunchPortrait", PlayerGroupAll());
    if ((libVCUI_gv_pU_MissionNextMap != "PAiur01") && (libVCUI_gv_pU_MissionNextMap != "PAiur02")) {
        lv_rewardCategory = libVoiC_gf_MissionArmyCategoryUnlocked(libVCUI_gv_pU_MissionNextMap);
    }

    lv_achievementIndex = 1;
    for ( ; ( (autoD4BA0498_ai >= 0 && lv_achievementIndex <= autoD4BA0498_ae) || (autoD4BA0498_ai < 0 && lv_achievementIndex >= autoD4BA0498_ae) ) ; lv_achievementIndex += autoD4BA0498_ai ) {
        if ((libVCUI_gv_pU_MissionAchievementFrame[lv_achievementIndex] != c_invalidDialogControlId)) {
            libNtve_gf_SetDialogItemAchievement(libVCUI_gv_pU_MissionAchievementFrame[lv_achievementIndex], UserDataGetGameLink("Maps", libVoiC_gf_PC_MapUserDataInstance(libVCUI_gv_pU_MissionNextMap), "Achievements", lv_achievementIndex), PlayerGroupAll());
        }

    }
    lv_mainObjectiveRewardCount = libVoiC_gf_PC_MissionRewardsArmy(libVCUI_gv_pU_MissionNextMap);
    if ((lv_mainObjectiveRewardCount > 0)) {
        DialogControlSetVisible(libVCUI_gv_pU_MissionRewardPrimaryContainer, PlayerGroupAll(), true);
        DialogControlSetVisible(libVCUI_gv_pU_MissionRewardPrimaryHeadingLabel, PlayerGroupAll(), true);
        DialogControlSetVisible(libVCUI_gv_pU_MissionRewardPrimaryCurrencyLabel, PlayerGroupAll(), true);
        if ((libVoiC_gf_NumberOfMissions(libVoiC_ge_MissionCountOptions_Completed) == 3) && (libVoiC_gf_CurrentMissionIsSimulation() == false)) {
            libNtve_gf_SetDialogItemText(libVCUI_gv_pU_MissionRewardPrimaryCurrencyLabel, StringExternal("Param/Value/lib_VCUI_971EB66A"), PlayerGroupAll());
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_VCUI_849AE5CF", "Count", IntToText(lv_mainObjectiveRewardCount));
            libNtve_gf_SetDialogItemText(libVCUI_gv_pU_MissionRewardPrimaryCurrencyLabel, TextExpressionAssemble("Param/Expression/lib_VCUI_849AE5CF"), PlayerGroupAll());
        }
    }
    else {
        if ((libVCUI_gv_pU_MissionRewardPrimaryContainer != c_invalidDialogControlId)) {
            DialogControlSetVisible(libVCUI_gv_pU_MissionRewardPrimaryContainer, PlayerGroupAll(), false);
        }

        DialogControlSetVisible(libVCUI_gv_pU_MissionRewardPrimaryCurrencyLabel, PlayerGroupAll(), false);
        DialogControlSetVisible(libVCUI_gv_pU_MissionRewardPrimaryHeadingLabel, PlayerGroupAll(), false);
    }
    if ((lv_rewardCategory != null) && (libVoiC_gf_ArmyCategoryStateCheck(lv_rewardCategory, c_armyCategoryStateUnlocked) == false)) {
        DialogControlSetVisible(libVCUI_gv_pU_MissionRewardUnitPanel, PlayerGroupAll(), true);
        DialogControlSetVisible(libVCUI_gv_pU_MissionRewardUnitModel, PlayerGroupAll(), true);
        DialogControlSetVisible(libVCUI_gv_pU_MissionRewardUnitName, PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemUnitLink(libVCUI_gv_pU_MissionRewardUnitModel, libVoiC_gf_PC_ArmyCategoryUnitType(lv_rewardCategory), PlayerGroupAll());
        libNtve_gf_SetDialogItemCamera(libVCUI_gv_pU_MissionRewardUnitModel, libVoiC_gf_PC_ArmyCategoryPlanetCamera(lv_rewardCategory), PlayerGroupAll());
        libNtve_gf_SetDialogItemTeamColor(libVCUI_gv_pU_MissionRewardUnitModel, libNtve_gf_ConvertPlayerColorToColor(libVCMI_gf_CampaignPlayerColor()), PlayerGroupAll());
        TextExpressionSetToken("Param/Expression/lib_VCUI_225AD1C1", "A", libVoiC_gf_PC_ArmyCategoryName(lv_rewardCategory));
        TextExpressionSetToken("Param/Expression/lib_VCUI_225AD1C1", "B", libVoiC_gf_PC_ArmyCategoryUnitDescription(lv_rewardCategory));
        libNtve_gf_SetDialogItemTooltip(libVCUI_gv_pU_MissionRewardUnitPanel, TextExpressionAssemble("Param/Expression/lib_VCUI_225AD1C1"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_MissionRewardUnitName, libVoiC_gf_PC_ArmyCategoryName(lv_rewardCategory), PlayerGroupAll());
        if ((libVCST_gf_NextAvailableMission(libVoiC_gf_CurrentLocation()) == "PAiur03")) {
            DialogControlSetVisible(libVCUI_gv_pU_MissionRewardUnitPanel2, PlayerGroupAll(), true);
            DialogControlSetVisible(libVCUI_gv_pU_MissionRewardUnitModel2, PlayerGroupAll(), true);
            DialogControlSetVisible(libVCUI_gv_pU_MissionRewardUnitName2, PlayerGroupAll(), true);
            libNtve_gf_SetDialogItemUnitLink(libVCUI_gv_pU_MissionRewardUnitModel2, "ShieldBattery", PlayerGroupAll());
            libNtve_gf_SetDialogItemCamera(libVCUI_gv_pU_MissionRewardUnitModel2, libVoiC_gf_PC_ArmyCategoryPlanetCamera("ShieldBattery"), PlayerGroupAll());
            libNtve_gf_SetDialogItemTeamColor(libVCUI_gv_pU_MissionRewardUnitModel2, libNtve_gf_ConvertPlayerColorToColor(libVCMI_gf_CampaignPlayerColor()), PlayerGroupAll());
            TextExpressionSetToken("Param/Expression/lib_VCUI_2A34C43A", "A", libVoiC_gf_PC_ArmyCategoryName("ShieldBattery"));
            TextExpressionSetToken("Param/Expression/lib_VCUI_2A34C43A", "B", libVoiC_gf_PC_ArmyCategoryUnitDescription("ShieldBattery"));
            libNtve_gf_SetDialogItemTooltip(libVCUI_gv_pU_MissionRewardUnitPanel2, TextExpressionAssemble("Param/Expression/lib_VCUI_2A34C43A"), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libVCUI_gv_pU_MissionRewardUnitName2, StringExternal("Param/Value/lib_VCUI_8202FC07"), PlayerGroupAll());
            libNtve_gf_SetDialogItemLight(libVCUI_gv_pU_MissionRewardUnitModel2, "NoLight", PlayerGroupAll());
        }

    }
    else {
        DialogControlSetVisible(libVCUI_gv_pU_MissionRewardUnitPanel, PlayerGroupAll(), false);
        if ((libVCUI_gv_pU_MissionCalloutLines[1] != c_invalidDialogControlId)) {
            DialogControlSetVisible(libVCUI_gv_pU_MissionCalloutLines[1], PlayerGroupAll(), false);
        }

    }
    lv_rewardCount = libVoiC_gf_PC_MissionRewardsBonusPossible(libVCUI_gv_pU_MissionNextMap, "ShipEnergy");
    if ((lv_rewardCount > 0) && ((libVoiC_gf_NumberOfMissions(libVoiC_ge_MissionCountOptions_Completed) != 3) || (libVoiC_gf_CurrentMissionIsSimulation() == true))) {
        TextExpressionSetToken("Param/Expression/lib_VCUI_55CEDFEF", "Count", IntToText(lv_rewardCount));
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_MissionRewardBonusCurrencyLabel, TextExpressionAssemble("Param/Expression/lib_VCUI_55CEDFEF"), PlayerGroupAll());
        DialogControlSetVisible(libVCUI_gv_pU_MissionRewardBonusContainer, PlayerGroupAll(), true);
        DialogControlSetVisible(libVCUI_gv_pU_MissionRewardBonusCurrencyLabel, PlayerGroupAll(), true);
        DialogControlSetVisible(libVCUI_gv_pU_MissionRewardBonusHeadingLabel, PlayerGroupAll(), true);
    }
    else {
        if ((libVCUI_gv_pU_MissionRewardBonusContainer != c_invalidDialogControlId)) {
            DialogControlSetVisible(libVCUI_gv_pU_MissionRewardBonusContainer, PlayerGroupAll(), false);
        }

        DialogControlSetVisible(libVCUI_gv_pU_MissionRewardBonusHeadingLabel, PlayerGroupAll(), false);
        DialogControlSetVisible(libVCUI_gv_pU_MissionRewardBonusCurrencyLabel, PlayerGroupAll(), false);
    }
    if ((libVoiC_gf_StoryInSimulation() == false) && ((libVoiC_gf_MissionStatusCheck("PAiur03", libVoiC_ge_MissionStatus_Completed) == false) || (libVCUI_gv_pU_MissionNextMap == "PMoebius01") || (libVoiC_gf_MissionStatusCheck("PAiur06", libVoiC_ge_MissionStatus_Completed) == true))) {
        DialogControlSetVisible(libVCUI_gv_pU_MissionQuitButton, PlayerGroupAll(), true);
        DialogControlSetVisible(libVCUI_gv_pU_MissionBackButton, PlayerGroupAll(), false);
    }
    else {
        DialogControlSetVisible(libVCUI_gv_pU_MissionQuitButton, PlayerGroupAll(), false);
        DialogControlSetVisible(libVCUI_gv_pU_MissionBackButton, PlayerGroupAll(), true);
    }
    if ((libVoiC_gf_StoryInSimulation() == true)) {
        libNtve_gf_SetDialogItemTooltip(libVCUI_gv_pU_MissionBackButton, ConversationDataStateText("StoryModeText|ArchivesMissionBackTooltip", "Description"), PlayerGroupAll());
        if ((libVCUI_gv_pU_MissionNextMap != "PAiur01") && (libVCUI_gv_pU_MissionNextMap != "PAiur02") && (libVCUI_gv_pU_MissionNextMap != "PAiur03") && (libVCUI_gv_pU_MissionNextMap != "PUlnar02") && (libVCUI_gv_pU_MissionNextMap != "PAiur04") && (libVoiC_gf_PC_CampaignMapIsEpilogue(libVCUI_gv_pU_MissionNextMap) == false)) {
            DialogControlSetVisible(libVCUI_gv_pU_MissionArmyButton, PlayerGroupAll(), true);
            DialogControlSetVisible(libVCUI_gv_pU_MissionShipButton, PlayerGroupAll(), true);
        }
        else {
            DialogControlSetVisible(libVCUI_gv_pU_MissionArmyButton, PlayerGroupAll(), false);
            DialogControlSetVisible(libVCUI_gv_pU_MissionShipButton, PlayerGroupAll(), false);
        }
    }
    else {
        libNtve_gf_SetDialogItemTooltip(libVCUI_gv_pU_MissionBackButton, StringExternal("ConversationState/MissionPanelTooltips/Close_Button/Info/Description"), PlayerGroupAll());
        DialogControlSetVisible(libVCUI_gv_pU_MissionArmyButton, PlayerGroupAll(), false);
        DialogControlSetVisible(libVCUI_gv_pU_MissionShipButton, PlayerGroupAll(), false);
    }
    DialogSetSubtitlePositionOverrideControl(libVCUI_gv_pU_MissionSubtitleAnchor);
}

void libVCUI_gf_PU_MissionPreload (string lp_mission) {
    // Automatic Variable Declarations
    string autoA2F1B4E5_val;

    // Implementation
    if ((libVoiC_gf_MissionArmyCategoryUnlocked(lp_mission) != null)) {
        libNtve_gf_PreloadUnit(libVoiC_gf_PC_ArmyCategoryUnitType(libVoiC_gf_MissionArmyCategoryUnlocked(lp_mission)), false);
    }

    if ((libVoiC_gf_PC_CampaignMapContactPortrait(lp_mission) != null)) {
        libNtve_gf_PreloadModelObject(libVoiC_gf_PC_CampaignMapContactPortrait(lp_mission), false);
    }

    if ((libVoiC_gf_PC_CampaignMapContactActor(lp_mission) != null)) {
        libNtve_gf_PreloadModelObject(libVoiC_gf_PC_CampaignMapContactPortrait(lp_mission), false);
    }

    ConversationDataPreloadLines(libVoiC_gf_MissionPitch(lp_mission));
    if ((lp_mission == "PAiur01") && (lp_mission == "PAiur02") && (lp_mission == "PAiur03") && (lp_mission == "SC2Epilogue01")) {
        PreloadLayout("UI\\Layout\\Custom\\VoidShared_MissionLaunchUI2D.SC2Layout", false);
    }
    else if ((lp_mission == "SC2Epilogue03")) {
        PreloadLayout("UI\\Layout\\Custom\\HotS_MissionPanel.SC2Layout", false);
    }
    else if ((lp_mission == "SC2Epilogue02")) {
        PreloadLayout("UI\\Layout\\UI\\PlanetPanel.SC2Layout", false);
    }
    else if (true) {
        PreloadLayout("UI\\Layout\\Custom\\LotV_SoAMissionUIPanel.SC2Layout", false);
        PreloadAsset("Cutscenes\\UI_MissionLaunch.SC2Cutscene", false);
        PreloadAsset(("Cutscenes\\" + UserDataGetString("Maps", libVoiC_gf_PC_MapUserDataInstance(lp_mission), "VignetteScene", 1) + ".SC2Cutscene"), false);
        autoA2F1B4E5_val = lp_mission;
        if (autoA2F1B4E5_val == "PKorhal01") {
            libNtve_gf_PreloadModelObject("SMX2_StarMap_UI_Mission_Planets00", false);
            libNtve_gf_PreloadModelObject("SMX2_PlanetView_Nebula_Korhal01", false);
        }
        else if (autoA2F1B4E5_val == "PKorhal02") {
            libNtve_gf_PreloadModelObject("SMX2_StarMap_UI_Mission_Planets00", false);
            libNtve_gf_PreloadModelObject("SMX2_PlanetView_Nebula_Korhal01", false);
        }
        else if (autoA2F1B4E5_val == "PShakuras01") {
            libNtve_gf_PreloadModelObject("SMX2_StarMap_UI_Mission_Planets01", false);
            libNtve_gf_PreloadModelObject("SMX2_Background_Shakuras_Nebula_Cloud", false);
        }
        else if (autoA2F1B4E5_val == "PShakuras02") {
            libNtve_gf_PreloadModelObject("SMX2_StarMap_UI_Mission_Planets01", false);
            libNtve_gf_PreloadModelObject("SMX2_Background_Shakuras_Nebula_Cloud", false);
        }
        else if (autoA2F1B4E5_val == "PPurifier01") {
            libNtve_gf_PreloadModelObject("SMX2_StarMap_UI_Mission_Planets02", false);
            libNtve_gf_PreloadModelObject("SMX2_Purifier_Nebula", false);
        }
        else if (autoA2F1B4E5_val == "PPurifier02") {
            libNtve_gf_PreloadModelObject("SMX2_StarMap_UI_Mission_Planets05", false);
            libNtve_gf_PreloadModelObject("SMX2_Purifier02_Nebula", false);
        }
        else if (autoA2F1B4E5_val == "PPurifier03") {
            libNtve_gf_PreloadModelObject("SMX2_StarMap_UI_Mission_Planets06", false);
            libNtve_gf_PreloadModelObject("SMX2_Purifier02_Nebula", false);
        }
        else if (autoA2F1B4E5_val == "PUlnar01") {
            libNtve_gf_PreloadModelObject("SMX2_StarMap_UI_Mission_Planets03", false);
            libNtve_gf_PreloadModelObject("SMX2_Background_Ulnar_Clouds", false);
        }
        else if (autoA2F1B4E5_val == "PUlnar02") {
            libNtve_gf_PreloadModelObject("SMX2_StarMap_UI_Mission_Planets03", false);
            libNtve_gf_PreloadModelObject("SMX2_Background_Ulnar_Clouds", false);
        }
        else if (autoA2F1B4E5_val == "PUlnar03") {
            libNtve_gf_PreloadModelObject("SMX2_StarMap_UI_Mission_Planets03", false);
            libNtve_gf_PreloadModelObject("SMX2_Background_Ulnar_Clouds", false);
        }
        else if (autoA2F1B4E5_val == "PTaldarim01") {
            libNtve_gf_PreloadModelObject("SMX2_StarMap_UI_Mission_Planets04", false);
            libNtve_gf_PreloadModelObject("SMX2_Slayn_Nebula", false);
        }
        else if (autoA2F1B4E5_val == "PTaldarim02") {
            libNtve_gf_PreloadModelObject("SMX2_StarMap_UI_Mission_Planets04", false);
            libNtve_gf_PreloadModelObject("SMX2_Slayn_Nebula", false);
        }
        else if (autoA2F1B4E5_val == "PMoebius01") {
            libNtve_gf_PreloadModelObject("SMX2_StarMap_UI_Mission_Planets08", false);
            libNtve_gf_PreloadModelObject("SMX2_Mobius_Asteroid_Nebula", false);
        }
        else if (autoA2F1B4E5_val == "PAiur04") {
            libNtve_gf_PreloadModelObject("SMX2_StarMap_UI_Mission_Planets09", false);
            libNtve_gf_PreloadModelObject("SMX2_Aiur_Nebula", false);
        }
        else if (autoA2F1B4E5_val == "PAiur05") {
            libNtve_gf_PreloadModelObject("SMX2_StarMap_UI_Mission_Planets09", false);
            libNtve_gf_PreloadModelObject("SMX2_Aiur_Nebula", false);
        }
        else if (autoA2F1B4E5_val == "PAiur06") {
            libNtve_gf_PreloadModelObject("SMX2_StarMap_UI_Mission_Planets09", false);
            libNtve_gf_PreloadModelObject("SMX2_Aiur_Nebula", false);
        }
        else {
        }
    }
}

void libVCUI_gf_PU_MissionAddAliasedUnits () {
    // Automatic Variable Declarations
    // Implementation
    if ((libVCUI_gf_PU_MissionIs2D(libVCST_gf_NextAvailableMission(libVoiC_gf_CurrentLocation())) == false)) {
        libVCST_gf_StoryCreateUnitForCutsceneAliasingForPlayer("Marine", "PMoebiusMarine", 2);
        UnitGroupAdd(libVCUI_gv_pU_MissionAliasedUnitGroup, UnitLastCreated());
        libVCST_gf_StoryCreateUnitForCutsceneAliasingForPlayer("Reaper", "PMoebiusReaper", 2);
        UnitGroupAdd(libVCUI_gv_pU_MissionAliasedUnitGroup, UnitLastCreated());
    }

}

void libVCUI_gf_PU_MissionRemoveAliasedUnits () {
    // Automatic Variable Declarations
    // Implementation
    UnitGroupClear(libVCUI_gv_pU_MissionAliasedUnitGroup);
}

string libVCUI_gf_PU_MissionUIFilter (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetString("Maps", libVoiC_gf_PC_MapUserDataInstance(lp_map), "UILaunchFilter", 1);
}

text libVCUI_gf_PU_MissionUIFluffText (string lp_map, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("Maps", libVoiC_gf_PC_MapUserDataInstance(lp_map), "UIFluffText", lp_index);
}

text libVCUI_gf_PU_MissionUIEasterEggFluffText (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("Maps", libVoiC_gf_PC_MapUserDataInstance(lp_map), "VignetteEasterEggText", 1);
}

string libVCUI_gf_PU_MissionProperty (string lp_field) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogMap, (libVCUI_gv_pU_MissionNextMap), lp_field, c_playerAny);
}

int libVCUI_gf_PU_MissionSelectedDifficulty () {
    // Automatic Variable Declarations
    int autoC93DCDD8_val;

    // Implementation
    if ((libVCUI_gv_pU_MissionNextMap == "SC2Epilogue02")) {
        return EventPlanetPanelDifficultySelected();
    }

    autoC93DCDD8_val = DialogControlGetSelectedItem(libVCUI_gv_pU_MissionDifficultyDropdown, 1);
    if (autoC93DCDD8_val == 1) {
        return 1;
    }
    else if (autoC93DCDD8_val == 2) {
        return 2;
    }
    else if (autoC93DCDD8_val == 3) {
        return 3;
    }
    else if (autoC93DCDD8_val == 4) {
        return 4;
    }
    else {
    }
    return 1;
}

bool libVCUI_gf_PU_MissionIs2D (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_mission == "PAiur01") || (lp_mission == "PAiur02") || (lp_mission == "PAiur03") || (lp_mission == "SC2Epilogue01") || (lp_mission == "SC2Epilogue02") || (lp_mission == "SC2Epilogue03"))) {
        return true;
    }

    return false;
}

void libVCUI_gf_PU_MissionSoALaunch (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libVCUI_gv_pUC_MissionEventSoALaunch);
}

void libVCUI_gf_PU_MissionArmyLaunch (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libVCUI_gv_pUC_MissionEventArmyLaunch);
}

void libVCUI_gf_PU_SoACreateDialog (bool lp_debugOn) {
    // Variable Declarations
    int lv_groupIndex;
    int lv_itemIndex;
    int lv_auxiliaryIndex;
    int lv_currencyIndex;
    int lv_rightSideItemIndex;
    int lv_lastFrame;
    int lv_bottomPanel;
    int lv_inventoryPanel;
    int lv_auxiliaryPanel;

    // Automatic Variable Declarations
    const int autoF228819D_ae = libVCUI_gv_pUC_SoAGroupCount;
    const int autoF228819D_ai = 1;
    const int auto2EF61D0B_ae = libVCUI_gv_pUC_SoAInventoryItemCount;
    const int auto2EF61D0B_ai = 1;
    const int auto587546C7_ae = libVCUI_gv_pUC_SoAAuxiliaryCount;
    const int auto587546C7_ai = 1;
    const int auto95535041_ae = libVCUI_gv_pUC_SoAAuxiliaryMaxCurrency;
    const int auto95535041_ai = 1;
    const int autoA2032405_ae = libVCUI_gv_pUC_SoAGroupCount;
    const int autoA2032405_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;
    lv_bottomPanel = c_invalidDialogControlId;
    lv_inventoryPanel = c_invalidDialogControlId;
    lv_auxiliaryPanel = c_invalidDialogControlId;

    // Implementation
    if ((libVCUI_gv_pU_SoADialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libVCUI_gv_pU_SoADialog = DialogLastCreated();
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "LotV_ShipUpgradeUI/ShipUpgradeTemplate");
    libVCUI_gv_pU_SoAPanel = DialogControlLastCreated();
    CutsceneCreateNew("Cutscenes\\UI_ShipUpgrade.SC2Cutscene", libNtve_gf_PointFromXYZ(16.0, 16.0, 8.0), 0.0, PlayerGroupAll(), true);
    libVCUI_gv_pU_SoABackgroundCutscene = CutsceneLastCreated();
    CutsceneGoToBookmark(libVCUI_gv_pU_SoABackgroundCutscene, "Main");
    DialogControlHookup(libVCUI_gv_pU_SoAPanel, c_triggerControlTypePanel, "BottomPanel");
    lv_bottomPanel = DialogControlLastCreated();
    DialogControlHookup(lv_bottomPanel, c_triggerControlTypePanel, "InventoryPanel");
    lv_inventoryPanel = DialogControlLastCreated();
    DialogControlHookup(lv_inventoryPanel, c_triggerControlTypePanel, "AuxiliaryPanel");
    lv_auxiliaryPanel = DialogControlLastCreated();
    lv_groupIndex = 1;
    for ( ; ( (autoF228819D_ai >= 0 && lv_groupIndex <= autoF228819D_ae) || (autoF228819D_ai < 0 && lv_groupIndex >= autoF228819D_ae) ) ; lv_groupIndex += autoF228819D_ai ) {
        DialogControlHookup(lv_inventoryPanel, c_triggerControlTypePanel, "ShipInventory" + IntToString(lv_groupIndex));
        libVCUI_gv_pU_SoAInventory[lv_groupIndex] = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_SoAInventory[lv_groupIndex], c_triggerControlTypeLabel, "TierName");
        libVCUI_gv_pU_SoAInventoryTitle[lv_groupIndex] = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_SoAInventory[lv_groupIndex], c_triggerControlTypeLabel, "SelectedItemName");
        libVCUI_gv_pU_SoAInventorySelectedItemName[lv_groupIndex] = DialogControlLastCreated();
        lv_itemIndex = 1;
        for ( ; ( (auto2EF61D0B_ai >= 0 && lv_itemIndex <= auto2EF61D0B_ae) || (auto2EF61D0B_ai < 0 && lv_itemIndex >= auto2EF61D0B_ae) ) ; lv_itemIndex += auto2EF61D0B_ai ) {
            DialogControlHookup(libVCUI_gv_pU_SoAInventory[lv_groupIndex], c_triggerControlTypeImage, "LockedIcon" + IntToString(lv_itemIndex));
            libVCUI_gv_pU_SoAInventoryLockIcon[lv_groupIndex][lv_itemIndex] = DialogControlLastCreated();
            DialogControlHookup(libVCUI_gv_pU_SoAInventory[lv_groupIndex], c_triggerControlTypePanel, "Item" + IntToString(lv_itemIndex));
            libVCUI_gv_pU_SoAInventoryItemFrames[lv_groupIndex][lv_itemIndex] = DialogControlLastCreated();
            DialogControlHookup(libVCUI_gv_pU_SoAInventoryItemFrames[lv_groupIndex][lv_itemIndex], c_triggerControlTypeButton, "Button");
            libVCUI_gv_pU_SoAInventoryButtons[lv_groupIndex][lv_itemIndex] = DialogControlLastCreated();
            DialogControlHookup(libVCUI_gv_pU_SoAInventoryItemFrames[lv_groupIndex][lv_itemIndex], c_triggerControlTypeLabel, "Name");
            libVCUI_gv_pU_SoAInventoryLabels[lv_groupIndex][lv_itemIndex] = DialogControlLastCreated();
            DialogControlHookup(libVCUI_gv_pU_SoAInventoryButtons[lv_groupIndex][lv_itemIndex], c_triggerControlTypeImage, "ShipButtonIcon");
            libVCUI_gv_pU_SoAInventoryImages[lv_groupIndex][lv_itemIndex] = DialogControlLastCreated();
            DialogControlHookup(libVCUI_gv_pU_SoAInventoryButtons[lv_groupIndex][lv_itemIndex], c_triggerControlTypeImage, "Shimmer");
            libVCUI_gv_pU_SoAInventoryShimmers[lv_groupIndex][lv_itemIndex] = DialogControlLastCreated();
            DialogControlHookup(libVCUI_gv_pU_SoAInventoryItemFrames[lv_groupIndex][lv_itemIndex], c_triggerControlTypeLabel, "Power");
            libVCUI_gv_pU_SoAInventoryCurrencyLabels[lv_groupIndex][lv_itemIndex] = DialogControlLastCreated();
        }
        DialogControlHookup(libVCUI_gv_pU_SoAInventory[lv_groupIndex], c_triggerControlTypeImage, "Highlight");
        libVCUI_gv_pU_SoAInventoryHighlight[lv_groupIndex] = DialogControlLastCreated();
    }
    lv_auxiliaryIndex = 1;
    for ( ; ( (auto587546C7_ai >= 0 && lv_auxiliaryIndex <= auto587546C7_ae) || (auto587546C7_ai < 0 && lv_auxiliaryIndex >= auto587546C7_ae) ) ; lv_auxiliaryIndex += auto587546C7_ai ) {
        DialogControlHookup(lv_auxiliaryPanel, c_triggerControlTypePanel, "ShipAuxiliaryFrame" + IntToString(lv_auxiliaryIndex));
        libVCUI_gv_pU_SoAAuxiliaryFrame[lv_auxiliaryIndex] = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_SoAAuxiliaryFrame[lv_auxiliaryIndex], c_triggerControlTypeButton, "AuxiliaryMinusButton");
        libVCUI_gv_pU_SoAAuxiliaryMinusButton[lv_auxiliaryIndex] = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_SoAAuxiliaryFrame[lv_auxiliaryIndex], c_triggerControlTypeButton, "AuxiliaryPlusButton");
        libVCUI_gv_pU_SoAAuxiliaryPlusButton[lv_auxiliaryIndex] = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_SoAAuxiliaryFrame[lv_auxiliaryIndex], c_triggerControlTypeLabel, "AuxiliaryTitleLabel");
        libVCUI_gv_pU_SoAAuxiliaryTitleLabel[lv_auxiliaryIndex] = DialogControlLastCreated();
        lv_currencyIndex = 1;
        for ( ; ( (auto95535041_ai >= 0 && lv_currencyIndex <= auto95535041_ae) || (auto95535041_ai < 0 && lv_currencyIndex >= auto95535041_ae) ) ; lv_currencyIndex += auto95535041_ai ) {
            DialogControlHookup(libVCUI_gv_pU_SoAAuxiliaryFrame[lv_auxiliaryIndex], c_triggerControlTypePanel, "AuxiliaryPip" + IntToString(lv_currencyIndex));
            libVCUI_gv_pU_SoAAuxiliaryCurrencyFrames[lv_auxiliaryIndex][lv_currencyIndex] = DialogControlLastCreated();
            DialogControlHookup(libVCUI_gv_pU_SoAAuxiliaryCurrencyFrames[lv_auxiliaryIndex][lv_currencyIndex], c_triggerControlTypeImage, "PowerFill");
            libVCUI_gv_pU_SoAAuxiliaryCurrencyImages[lv_auxiliaryIndex][lv_currencyIndex] = DialogControlLastCreated();
        }
    }
    DialogControlHookup(lv_bottomPanel, c_triggerControlTypeImage, "PowerHighlight");
    libVCUI_gv_pU_SoACurrencyHighlight = DialogControlLastCreated();
    DialogControlHookup(lv_auxiliaryPanel, c_triggerControlTypeImage, "AuxiliaryHighlight");
    libVCUI_gv_pU_SoAAuxiliaryHighlight = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_SoAPanel, c_triggerControlTypeButton, "BackButton");
    libVCUI_gv_pU_SoABackButton = DialogControlLastCreated();
    DialogControlHookup(lv_bottomPanel, c_triggerControlTypePanel, "ShipPowerInfoFrame");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlHookup(lv_lastFrame, c_triggerControlTypeLabel, "ShipPowerStatusLabel");
    libVCUI_gv_pU_SoACurrencyStatusLabel = DialogControlLastCreated();
    DialogControlHookup(lv_lastFrame, c_triggerControlTypeLabel, "ShipPowerRemainingHeader");
    libVCUI_gv_pU_SoACurrencyRemainingLabel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_SoAPanel, c_triggerControlTypeButton, "ResetButton");
    libVCUI_gv_pU_SoAResetButton = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_SoAPanel, c_triggerControlTypePanel, "SubtitleFrame");
    libVCUI_gv_pU_SoASubtitleAnchor = DialogControlLastCreated();
    lv_groupIndex = 1;
    for ( ; ( (autoA2032405_ai >= 0 && lv_groupIndex <= autoA2032405_ae) || (autoA2032405_ai < 0 && lv_groupIndex >= autoA2032405_ae) ) ; lv_groupIndex += autoA2032405_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, 0, libNtve_gf_PointFromXYZ(16.0, 16.0, 8.0));
        UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
        UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
        UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
        UnitSetState(UnitLastCreated(), c_unitStateDetectable, false);
        libVCUI_gv_pU_SoAAttachUnits[lv_groupIndex] = UnitLastCreated();
        DialogCreate(1, 1, c_anchorCenter, 0, 0, true);
        DialogSetImageVisible(DialogLastCreated(), false);
        libVCUI_gv_pU_SoAAttachDialogs[lv_groupIndex] = DialogLastCreated();
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
        libVCUI_gv_pU_SoAAttachPanels[lv_groupIndex] = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_SoAPanel, c_triggerControlTypePanel, "Callout" + IntToString(lv_groupIndex));
        libVCUI_gv_pU_SoACalloutPanels[lv_groupIndex] = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_SoACalloutPanels[lv_groupIndex], c_triggerControlTypeLabel, "Title");
        libVCUI_gv_pU_SoACalloutTitleLabel[lv_groupIndex] = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_SoACalloutPanels[lv_groupIndex], c_triggerControlTypeLabel, "Subtitle");
        libVCUI_gv_pU_SoACalloutSubtitleLabel[lv_groupIndex] = DialogControlLastCreated();
    }
}

void libVCUI_gf_PU_SoAInitDialogFromData (bool lp_debugOn) {
    // Variable Declarations
    int lv_groupIndex;
    int lv_upgradeIndex;
    int lv_perkIndex;
    int lv_auxCurrencyIndex;
    string lv_indexPerk;
    string lv_indexUpgrade;
    string lv_indexGroup;
    int lv_missionIndex;
    string lv_indexMission;
    int lv_missionIter;

    // Automatic Variable Declarations
    int autoF43AEDEA_ai;
    int autoF43AEDEA_ae;
    const int autoD71EA4E3_ae = libVCUI_gv_pUC_SoAAuxiliaryMaxCurrency;
    const int autoD71EA4E3_ai = 1;
    const int autoD9890005_ae = libVCUI_gv_pUC_SoAAuxiliaryCount;
    const int autoD9890005_ai = 1;
    int autoAD50C843_ai;
    int autoAD50C843_ae;
    int auto52E4901E_ai;
    int auto52E4901E_ae;
    const int auto316FBC23_ae = libVCUI_gv_pUC_SoAGroupCount;
    const int auto316FBC23_ai = 1;

    // Variable Initialization

    // Implementation
    Wait(0.1, c_timeGame);
    libVoiC_gf_PC_SoACalculateCurrency();
    libVCUI_gv_pU_SoACurrencyMax = libVoiC_gf_PC_SoACurrencyMax();
    libVCUI_gv_pU_SoACurrencyCurrent = libVoiC_gf_PC_SoACurrencyAvail();
    autoF43AEDEA_ai = 1;
    autoF43AEDEA_ae = UserDataInstanceCount("SpearofAdunUpgrade")+1;
    while (autoF43AEDEA_ai < autoF43AEDEA_ae) {
        lv_indexUpgrade = UserDataInstance("SpearofAdunUpgrade", autoF43AEDEA_ai);
        autoF43AEDEA_ai = autoF43AEDEA_ai+1;
        if ((libVoiC_gf_PC_SoAUpgradeSlotUnlocked(lv_indexUpgrade) == false)) {
            libVCUI_gv_pU_SoAUpgradeLevels[(lv_upgradeIndex+1)] = 0;
            continue;
        }

        lv_upgradeIndex += 1;
        libVCUI_gv_pU_SoAUpgradeLevels[lv_upgradeIndex] = libVoiC_gf_PC_SoAUpgradeLevel(lv_indexUpgrade);
        libVCUI_gv_pU_SoAUpgrades[lv_upgradeIndex] = lv_indexUpgrade;
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_SoAAuxiliaryTitleLabel[lv_upgradeIndex], libVoiC_gf_PC_SoAUpgradeTitle(lv_indexUpgrade), PlayerGroupAll());
        lv_auxCurrencyIndex = (libVoiC_gf_PC_SoAUpgradeLevelMax(lv_indexUpgrade)+1);
        for ( ; ( (autoD71EA4E3_ai >= 0 && lv_auxCurrencyIndex <= autoD71EA4E3_ae) || (autoD71EA4E3_ai < 0 && lv_auxCurrencyIndex >= autoD71EA4E3_ae) ) ; lv_auxCurrencyIndex += autoD71EA4E3_ai ) {
            DialogControlSetVisible(libVCUI_gv_pU_SoAAuxiliaryCurrencyFrames[lv_upgradeIndex][lv_auxCurrencyIndex], PlayerGroupAll(), false);
        }
    }
    lv_upgradeIndex = (lv_upgradeIndex+1);
    for ( ; ( (autoD9890005_ai >= 0 && lv_upgradeIndex <= autoD9890005_ae) || (autoD9890005_ai < 0 && lv_upgradeIndex >= autoD9890005_ae) ) ; lv_upgradeIndex += autoD9890005_ai ) {
        libVCUI_gv_pU_SoAUpgrades[lv_upgradeIndex] = lv_indexUpgrade;
        DialogControlSetVisible(libVCUI_gv_pU_SoAAuxiliaryFrame[lv_upgradeIndex], PlayerGroupAll(), false);
    }
    autoAD50C843_ai = 1;
    autoAD50C843_ae = UserDataInstanceCount("CampaignPerkGroup")+1;
    while (autoAD50C843_ai < autoAD50C843_ae) {
        lv_indexGroup = UserDataInstance("CampaignPerkGroup", autoAD50C843_ai);
        autoAD50C843_ai = autoAD50C843_ai+1;
        lv_groupIndex = libVoiC_gf_PC_PerkGroupUIOrderX(lv_indexGroup);
        if ((lv_groupIndex == 0)) {
            continue;
        }

        if ((libVoiC_gf_PC_PerkGroupUnlocked(lv_indexGroup) == false)) {
            DialogControlSetEnabled(libVCUI_gv_pU_SoAInventory[lv_groupIndex], PlayerGroupAll(), false);
        }
        else {
            DialogControlSetEnabled(libVCUI_gv_pU_SoAInventory[lv_groupIndex], PlayerGroupAll(), true);
        }
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_SoAInventoryTitle[lv_groupIndex], libVoiC_gf_PC_PerkGroupName(lv_indexGroup), PlayerGroupAll());
        auto52E4901E_ai = 1;
        auto52E4901E_ae = UserDataInstanceCount("CampaignPerk")+1;
        while (auto52E4901E_ai < auto52E4901E_ae) {    
            lv_indexPerk = UserDataInstance("CampaignPerk", auto52E4901E_ai);
            auto52E4901E_ai = auto52E4901E_ai+1;
            if( libVoiC_gf_PC_PerkGroupOfPerk(lv_indexPerk) == lv_indexGroup ) {
                lv_perkIndex = libVoiC_gf_PC_PerkUISlot(lv_indexPerk);
                if ((lv_perkIndex == 0)) {
                    continue;
                }

                libVCUI_gv_pU_SoAInventoryItems[lv_groupIndex][lv_perkIndex] = lv_indexPerk;
                libNtve_gf_SetDialogItemImage(libVCUI_gv_pU_SoAInventoryImages[lv_groupIndex][lv_perkIndex], UserDataGetImagePath("CampaignPerk", lv_indexPerk, "Icon", 1), PlayerGroupAll());
                libNtve_gf_SetDialogItemTooltip(libVCUI_gv_pU_SoAInventoryButtons[lv_groupIndex][lv_perkIndex], libVCUI_gf_PU_SoAPerkTooltip(lv_indexPerk), PlayerGroupAll());
                if ((libVoiC_gf_PC_PerkCost(lv_indexPerk) != 0)) {
                    TextExpressionSetToken("Param/Expression/lib_VCUI_D4727D8E", "A", IntToText(libVoiC_gf_PC_PerkCost(lv_indexPerk)));
                    libNtve_gf_SetDialogItemText(libVCUI_gv_pU_SoAInventoryCurrencyLabels[lv_groupIndex][lv_perkIndex], TextExpressionAssemble("Param/Expression/lib_VCUI_D4727D8E"), PlayerGroupAll());
                }

                if ((libVoiC_gf_PC_PerkStateCheck(lv_indexPerk, libVoiC_ge_PC_PerkState_Locked) == false)) {
                    DialogControlSetVisible(libVCUI_gv_pU_SoAInventoryItemFrames[lv_groupIndex][lv_perkIndex], PlayerGroupAll(), true);
                    DialogControlSetEnabled(libVCUI_gv_pU_SoAInventoryButtons[lv_groupIndex][lv_perkIndex], PlayerGroupAll(), true);
                    DialogControlSetEnabled(libVCUI_gv_pU_SoAInventoryImages[lv_groupIndex][lv_perkIndex], PlayerGroupAll(), true);
                    DialogControlSetVisible(libVCUI_gv_pU_SoAInventoryLockIcon[lv_groupIndex][lv_perkIndex], PlayerGroupAll(), false);
                    libNtve_gf_SetDialogItemText(libVCUI_gv_pU_SoAInventoryLabels[lv_groupIndex][lv_perkIndex], libVoiC_gf_PC_PerkName(lv_indexPerk), PlayerGroupAll());
                    if ((libVoiC_gf_PC_PerkStateCheck(lv_indexPerk, libVoiC_ge_PC_PerkState_Active) == true)) {
                        libVCUI_gv_pU_SoAActivePerks[lv_groupIndex] = lv_indexPerk;
                    }

                }
                else {
                    DialogControlSetVisible(libVCUI_gv_pU_SoAInventoryLockIcon[lv_groupIndex][lv_perkIndex], PlayerGroupAll(), true);
                    DialogControlSetVisible(libVCUI_gv_pU_SoAInventoryItemFrames[lv_groupIndex][lv_perkIndex], PlayerGroupAll(), false);
                    DialogControlSetEnabled(libVCUI_gv_pU_SoAInventoryButtons[lv_groupIndex][lv_perkIndex], PlayerGroupAll(), false);
                    DialogControlSetEnabled(libVCUI_gv_pU_SoAInventoryImages[lv_groupIndex][lv_perkIndex], PlayerGroupAll(), false);
                }
            }    
        }

    }
    lv_groupIndex = 1;
    for ( ; ( (auto316FBC23_ai >= 0 && lv_groupIndex <= auto316FBC23_ae) || (auto316FBC23_ai < 0 && lv_groupIndex >= auto316FBC23_ae) ) ; lv_groupIndex += auto316FBC23_ai ) {
        libNtve_gf_SendActorMessageToUnit(libVCUI_gv_pU_SoAAttachUnits[lv_groupIndex], "RefClear ::Host");
        ActorSend(libNtve_gf_MainActorofUnit(libVCUI_gv_pU_SoAAttachUnits[lv_groupIndex]), (("RefSet ::Host ::external.UIAttachT" + IntToString(lv_groupIndex))));
        DialogSetPositionRelativeToUnit(libVCUI_gv_pU_SoAAttachDialogs[lv_groupIndex], libVCUI_gv_pU_SoAAttachUnits[lv_groupIndex], "Ref_Origin", 0, 0);
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_SoACalloutTitleLabel[lv_groupIndex], libVoiC_gf_PC_PerkGroupName(libVoiC_gf_PC_PerkGroupOfPerk(libVCUI_gv_pU_SoAInventoryItems[lv_groupIndex][1])), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_SoACalloutSubtitleLabel[lv_groupIndex], libVoiC_gf_PC_PerkName(libVCUI_gv_pU_SoAActivePerks[lv_groupIndex]), PlayerGroupAll());
    }
    DialogControlSetPositionRelative(libVCUI_gv_pU_SoACalloutPanels[1], PlayerGroupAll(), c_anchorLeft, libVCUI_gv_pU_SoAAttachPanels[1], c_anchorBottom, 0, 0);
    DialogControlSetPositionRelative(libVCUI_gv_pU_SoACalloutPanels[2], PlayerGroupAll(), c_anchorLeft, libVCUI_gv_pU_SoAAttachPanels[2], c_anchorBottom, 0, 0);
    DialogControlSetPositionRelative(libVCUI_gv_pU_SoACalloutPanels[3], PlayerGroupAll(), c_anchorLeft, libVCUI_gv_pU_SoAAttachPanels[3], c_anchorBottom, 0, 0);
    DialogControlSetPositionRelative(libVCUI_gv_pU_SoACalloutPanels[4], PlayerGroupAll(), c_anchorLeft, libVCUI_gv_pU_SoAAttachPanels[4], c_anchorBottom, 0, 0);
    DialogControlSetPositionRelative(libVCUI_gv_pU_SoACalloutPanels[5], PlayerGroupAll(), c_anchorLeft, libVCUI_gv_pU_SoAAttachPanels[5], c_anchorBottom, 0, 0);
    DialogControlSetPositionRelative(libVCUI_gv_pU_SoACalloutPanels[6], PlayerGroupAll(), c_anchorRight, libVCUI_gv_pU_SoAAttachPanels[6], c_anchorBottom, 0, 0);
}

void libVCUI_gf_PU_SoAUpdateData () {
    // Variable Declarations
    int lv_groupIndex;
    int lv_itemIndex;
    int lv_auxiliaryIndex;
    string lv_indexPerk;

    // Automatic Variable Declarations
    const int auto3FCA3707_ae = libVCUI_gv_pUC_SoAGroupCount;
    const int auto3FCA3707_ai = 1;
    const int auto01690947_ae = libVCUI_gv_pUC_SoAInventoryItemCount;
    const int auto01690947_ai = 1;
    const int auto26B0FD25_ae = libVCUI_gv_pUC_SoAAuxiliaryCount;
    const int auto26B0FD25_ai = 1;

    // Variable Initialization

    // Implementation
    lv_groupIndex = 1;
    for ( ; ( (auto3FCA3707_ai >= 0 && lv_groupIndex <= auto3FCA3707_ae) || (auto3FCA3707_ai < 0 && lv_groupIndex >= auto3FCA3707_ae) ) ; lv_groupIndex += auto3FCA3707_ai ) {
        lv_itemIndex = 1;
        for ( ; ( (auto01690947_ai >= 0 && lv_itemIndex <= auto01690947_ae) || (auto01690947_ai < 0 && lv_itemIndex >= auto01690947_ae) ) ; lv_itemIndex += auto01690947_ai ) {
            if ((libVoiC_gf_PC_PerkStateCheck(libVCUI_gv_pU_SoAInventoryItems[lv_groupIndex][lv_itemIndex], libVoiC_ge_PC_PerkState_Locked) != true)) {
                if ((libVCUI_gv_pU_SoAInventoryItems[lv_groupIndex][lv_itemIndex] == libVCUI_gv_pU_SoAActivePerks[lv_groupIndex])) {
                    libVoiC_gf_PC_PerkStateSet(libVCUI_gv_pU_SoAInventoryItems[lv_groupIndex][lv_itemIndex], libVoiC_ge_PC_PerkState_Active);
                }
                else {
                    libVoiC_gf_PC_PerkStateSet(libVCUI_gv_pU_SoAInventoryItems[lv_groupIndex][lv_itemIndex], libVoiC_ge_PC_PerkState_Unlocked);
                }
            }

        }
    }
    lv_auxiliaryIndex = 1;
    for ( ; ( (auto26B0FD25_ai >= 0 && lv_auxiliaryIndex <= auto26B0FD25_ae) || (auto26B0FD25_ai < 0 && lv_auxiliaryIndex >= auto26B0FD25_ae) ) ; lv_auxiliaryIndex += auto26B0FD25_ai ) {
        if ((libVCUI_gv_pU_SoAUpgrades[lv_auxiliaryIndex] != null)) {
            libVoiC_gf_PC_SoAUpgradeLevelSet(libVCUI_gv_pU_SoAUpgrades[lv_auxiliaryIndex], libVCUI_gv_pU_SoAUpgradeLevels[lv_auxiliaryIndex]);
        }

    }
}

void libVCUI_gf_PU_SoADisplay (bool lp_debugOn) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_debugOn == true) && (libVoiC_gf_PC_CampaignMapTypeCheck(libVoiC_gf_CurrentMap(), c_mapKindStory) == false)) {
        libVoiC_gf_ShowHideWorldCover(true, 0.0);
    }

    libVCUI_gv_pU_SoAViewedTier = 0;
    libVCUI_gv_pU_SoAQueuedItem = 0;
    libVCUI_gv_pU_SoAQueuedTier = 0;
    libVCUI_gf_PU_SoACreateDialog(lp_debugOn);
    libVCUI_gf_PU_SoAInitDialogFromData(lp_debugOn);
    libVCUI_gf_PU_SoAUpdateDialog();
    DialogSetVisible(libVCUI_gv_pU_SoADialog, PlayerGroupAll(), true);
    DialogSetSubtitlePositionOverrideControl(libVCUI_gv_pU_SoASubtitleAnchor);
    if ((lp_debugOn == false) && (UserDataGetInt("StoryStates", "Ship UI Visited", "Value", 1) == 0)) {
        TriggerExecute(libVCUI_gt_PU_SoATutorial, true, false);
    }

    TriggerEnable(libVCUI_gt_PU_SoAMeterPlusOrMinusClicked, true);
    TriggerEnable(libVCUI_gt_PU_SoAInventoryItemClicked, true);
    TriggerEnable(libVCUI_gt_PU_SoABackClicked, true);
    TriggerEnable(libVCUI_gt_PU_SoAResetClicked, true);
    TriggerEnable(libVCUI_gt_PU_SoAInventoryHoverStart, true);
    TriggerEnable(libVCUI_gt_PU_SoAInventoryHoverStop, true);
}

void libVCUI_gf_PU_SoAClose () {
    // Automatic Variable Declarations
    // Implementation
    TriggerStop(libVCUI_gt_PU_SoATutorial);
    DialogClearSubtitlePositionOverrideControl();
    TransmissionClear(TransmissionLastSent());
    if ((UserDataGetInt("StoryStates", "Ship UI Visited", "Value", 1) == 0)) {
        UserDataSetInt("StoryStates", "Ship UI Visited", "Value", 1, 1);
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, SoundLink(ConversationDataGetSound("Tutorial_Ship|Line00011", true), c_soundIndexAny), 0.0, c_transmissionDurationAdd, false);
    }

    DialogDestroy(libVCUI_gv_pU_SoADialog);
    CutsceneStop(libVCUI_gv_pU_SoABackgroundCutscene);
    libVCUI_gv_pU_SoADialog = c_invalidDialogId;
    TriggerEnable(libVCUI_gt_PU_SoAMeterPlusOrMinusClicked, false);
    TriggerEnable(libVCUI_gt_PU_SoAInventoryItemClicked, false);
    TriggerEnable(libVCUI_gt_PU_SoABackClicked, false);
    TriggerEnable(libVCUI_gt_PU_SoAResetClicked, false);
    TriggerEnable(libVCUI_gt_PU_SoAInventoryHoverStart, false);
    TriggerEnable(libVCUI_gt_PU_SoAInventoryHoverStop, false);
}

void libVCUI_gf_PU_SoAPreload () {
    // Automatic Variable Declarations
    // Implementation
    PreloadLayout("UI\\Layout\\Custom\\LotV_ShipUpgradeUI.SC2Layout", false);
    PreloadAsset("Cutscenes\\UI_ShipUpgrade.SC2Cutscene", false);
}

void libVCUI_gf_PU_SoAUpdateDialog () {
    // Variable Declarations
    int lv_groupIndex;
    int lv_itemIndex;
    int lv_auxiliaryIndex;
    int lv_auxCurrencyIndex;
    int lv_meterPossible;
    int lv_oldCost;

    // Automatic Variable Declarations
    const int auto2145F7C9_ae = libVCUI_gv_pUC_SoAGroupCount;
    const int auto2145F7C9_ai = 1;
    const int autoE630ACCE_ae = libVCUI_gv_pUC_SoAInventoryItemCount;
    const int autoE630ACCE_ai = 1;
    const int autoEBCFA7DB_ae = libVCUI_gv_pUC_SoAGroupCount;
    const int autoEBCFA7DB_ai = 1;
    const int auto4131750B_ae = libVCUI_gv_pUC_SoAAuxiliaryCount;
    const int auto4131750B_ai = 1;
    int autoE2C44BAB_ae;
    const int autoE2C44BAB_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libVCUI_gv_pU_SoACurrencyCurrent == 0)) {
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_SoACurrencyStatusLabel, StringExternal("Param/Value/lib_VCUI_B5F93D66"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_SoACurrencyRemainingLabel, StringExternal("Param/Value/lib_VCUI_68164921"), PlayerGroupAll());
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_VCUI_C4B6499C", "A", IntToText(libVCUI_gv_pU_SoACurrencyCurrent));
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_SoACurrencyStatusLabel, TextExpressionAssemble("Param/Expression/lib_VCUI_C4B6499C"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_SoACurrencyRemainingLabel, StringExternal("Param/Value/lib_VCUI_697C3682"), PlayerGroupAll());
    }
    lv_groupIndex = 1;
    for ( ; ( (auto2145F7C9_ai >= 0 && lv_groupIndex <= auto2145F7C9_ae) || (auto2145F7C9_ai < 0 && lv_groupIndex >= auto2145F7C9_ae) ) ; lv_groupIndex += auto2145F7C9_ai ) {
        if ((libVoiC_gf_PC_PerkGroupUnlocked(libVoiC_gf_PC_PerkGroupOfPerk(libVCUI_gv_pU_SoAInventoryItems[lv_groupIndex][1])) == false)) {
            continue;
        }

        lv_itemIndex = 1;
        for ( ; ( (autoE630ACCE_ai >= 0 && lv_itemIndex <= autoE630ACCE_ae) || (autoE630ACCE_ai < 0 && lv_itemIndex >= autoE630ACCE_ae) ) ; lv_itemIndex += autoE630ACCE_ai ) {
            DialogControlSetEnabled(libVCUI_gv_pU_SoAInventoryButtons[lv_groupIndex][lv_itemIndex], PlayerGroupAll(), true);
            libNtve_gf_SetDialogItemTooltip(libVCUI_gv_pU_SoAInventoryButtons[lv_groupIndex][lv_itemIndex], libVCUI_gf_PU_SoAPerkTooltip(libVCUI_gv_pU_SoAInventoryItems[lv_groupIndex][lv_itemIndex]), PlayerGroupAll());
            if ((libVCUI_gv_pU_SoAInventoryItems[lv_groupIndex][lv_itemIndex] == libVCUI_gv_pU_SoAActivePerks[lv_groupIndex])) {
                libNtve_gf_SetDialogItemTooltip(libVCUI_gv_pU_SoAInventoryButtons[lv_groupIndex][lv_itemIndex], libVCUI_gf_PU_SoAPerkTooltip(libVCUI_gv_pU_SoAInventoryItems[lv_groupIndex][lv_itemIndex]), PlayerGroupAll());
                libNtve_gf_SetDialogItemToggled(libVCUI_gv_pU_SoAInventoryButtons[lv_groupIndex][lv_itemIndex], true, PlayerGroupAll());
                libNtve_gf_SetDialogItemText(libVCUI_gv_pU_SoAInventorySelectedItemName[lv_groupIndex], libVoiC_gf_PC_PerkName(libVCUI_gv_pU_SoAInventoryItems[lv_groupIndex][lv_itemIndex]), PlayerGroupAll());
                DialogControlSetVisible(libVCUI_gv_pU_SoAInventoryShimmers[lv_groupIndex][lv_itemIndex], PlayerGroupAll(), true);
                DialogControlSendAnimationEvent(libVCUI_gv_pU_SoAInventoryItemFrames[lv_groupIndex][lv_itemIndex], PlayerGroupAll(), "Selected");
            }
            else {
                libNtve_gf_SetDialogItemToggled(libVCUI_gv_pU_SoAInventoryButtons[lv_groupIndex][lv_itemIndex], false, PlayerGroupAll());
                DialogControlSetVisible(libVCUI_gv_pU_SoAInventoryShimmers[lv_groupIndex][lv_itemIndex], PlayerGroupAll(), false);
                if ((libVCUI_gv_pU_SoAInventoryItems[lv_groupIndex][lv_itemIndex] != null)) {
                    lv_oldCost = libVoiC_gf_PC_PerkCost(libVCUI_gv_pU_SoAActivePerks[lv_groupIndex]);
                }

                if ((libVoiC_gf_PC_PerkCost(libVCUI_gv_pU_SoAInventoryItems[lv_groupIndex][lv_itemIndex]) > (lv_oldCost+libVCUI_gv_pU_SoACurrencyCurrent))) {
                    DialogControlSetEnabled(libVCUI_gv_pU_SoAInventoryButtons[lv_groupIndex][lv_itemIndex], PlayerGroupAll(), false);
                    TextExpressionSetToken("Param/Expression/lib_VCUI_D2719519", "TOOLTIP", libVCUI_gf_PU_SoAPerkTooltip(libVCUI_gv_pU_SoAInventoryItems[lv_groupIndex][lv_itemIndex]));
                    libNtve_gf_SetDialogItemTooltip(libVCUI_gv_pU_SoAInventoryButtons[lv_groupIndex][lv_itemIndex], TextExpressionAssemble("Param/Expression/lib_VCUI_D2719519"), PlayerGroupAll());
                }
                else {
                    DialogControlSendAnimationEvent(libVCUI_gv_pU_SoAInventoryItemFrames[lv_groupIndex][lv_itemIndex], PlayerGroupAll(), "Available");
                }
            }
        }
    }
    lv_groupIndex = 1;
    for ( ; ( (autoEBCFA7DB_ai >= 0 && lv_groupIndex <= autoEBCFA7DB_ae) || (autoEBCFA7DB_ai < 0 && lv_groupIndex >= autoEBCFA7DB_ae) ) ; lv_groupIndex += autoEBCFA7DB_ai ) {
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_SoACalloutSubtitleLabel[lv_groupIndex], libVoiC_gf_PC_PerkName(libVCUI_gv_pU_SoAActivePerks[lv_groupIndex]), PlayerGroupAll());
        if ((libVCUI_gv_pU_SoAViewedTier == lv_groupIndex)) {
            DialogControlSetVisible(libVCUI_gv_pU_SoACalloutPanels[lv_groupIndex], PlayerGroupAll(), true);
        }
        else {
            DialogControlSetVisible(libVCUI_gv_pU_SoACalloutPanels[lv_groupIndex], PlayerGroupAll(), false);
        }
    }
    lv_auxiliaryIndex = 1;
    for ( ; ( (auto4131750B_ai >= 0 && lv_auxiliaryIndex <= auto4131750B_ae) || (auto4131750B_ai < 0 && lv_auxiliaryIndex >= auto4131750B_ae) ) ; lv_auxiliaryIndex += auto4131750B_ai ) {
        if ((libVCUI_gv_pU_SoAUpgrades[lv_auxiliaryIndex] == null)) {
            continue;
        }

        libNtve_gf_SetUpgradeLevelForPlayer(0, UserDataGetUpgrade("SpearofAdunUpgrade", libVCUI_gv_pU_SoAUpgrades[lv_auxiliaryIndex], "Upgrade", 1), libVCUI_gv_pU_SoAUpgradeLevels[lv_auxiliaryIndex]);
        TextExpressionSetToken("Param/Expression/lib_VCUI_F211695B", "TITLE", libVoiC_gf_PC_SoAUpgradeTitle(libVCUI_gv_pU_SoAUpgrades[lv_auxiliaryIndex]));
        TextExpressionSetToken("Param/Expression/lib_VCUI_F211695B", "DETAILS", libVCUI_gf_PU_SoAAuxiliaryDetail(libVCUI_gv_pU_SoAUpgrades[lv_auxiliaryIndex]));
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_SoAAuxiliaryTitleLabel[lv_auxiliaryIndex], TextExpressionAssemble("Param/Expression/lib_VCUI_F211695B"), PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(libVCUI_gv_pU_SoAAuxiliaryFrame[lv_auxiliaryIndex], libVoiC_gf_PC_SoAUpgradeTooltip(libVCUI_gv_pU_SoAUpgrades[lv_auxiliaryIndex]), PlayerGroupAll());
        if ((libVCUI_gv_pU_SoAUpgradeLevels[lv_auxiliaryIndex] == libVoiC_gf_PC_SoAUpgradeLevelMax(libVCUI_gv_pU_SoAUpgrades[lv_auxiliaryIndex]))) {
            DialogControlSetEnabled(libVCUI_gv_pU_SoAAuxiliaryPlusButton[lv_auxiliaryIndex], PlayerGroupAll(), false);
            TextExpressionSetToken("Param/Expression/lib_VCUI_A4E39DC3", "TOOLTIP", libVoiC_gf_PC_SoAUpgradeTooltip(libVCUI_gv_pU_SoAUpgrades[lv_auxiliaryIndex]));
            libNtve_gf_SetDialogItemTooltip(libVCUI_gv_pU_SoAAuxiliaryPlusButton[lv_auxiliaryIndex], TextExpressionAssemble("Param/Expression/lib_VCUI_A4E39DC3"), PlayerGroupAll());
        }
        else if ((libVCUI_gv_pU_SoACurrencyCurrent == 0)) {
            DialogControlSetEnabled(libVCUI_gv_pU_SoAAuxiliaryPlusButton[lv_auxiliaryIndex], PlayerGroupAll(), false);
            TextExpressionSetToken("Param/Expression/lib_VCUI_A0F1F90D", "TOOLTIP", libVoiC_gf_PC_SoAUpgradeTooltip(libVCUI_gv_pU_SoAUpgrades[lv_auxiliaryIndex]));
            libNtve_gf_SetDialogItemTooltip(libVCUI_gv_pU_SoAAuxiliaryPlusButton[lv_auxiliaryIndex], TextExpressionAssemble("Param/Expression/lib_VCUI_A0F1F90D"), PlayerGroupAll());
        }
        else if (true) {
            DialogControlSetEnabled(libVCUI_gv_pU_SoAAuxiliaryPlusButton[lv_auxiliaryIndex], PlayerGroupAll(), true);
            TextExpressionSetToken("Param/Expression/lib_VCUI_B3529E0D", "TOOLTIP", libVoiC_gf_PC_SoAUpgradeTooltip(libVCUI_gv_pU_SoAUpgrades[lv_auxiliaryIndex]));
            libNtve_gf_SetDialogItemTooltip(libVCUI_gv_pU_SoAAuxiliaryPlusButton[lv_auxiliaryIndex], TextExpressionAssemble("Param/Expression/lib_VCUI_B3529E0D"), PlayerGroupAll());
        }
        if ((libVCUI_gv_pU_SoAUpgradeLevels[lv_auxiliaryIndex] == 0)) {
            DialogControlSetEnabled(libVCUI_gv_pU_SoAAuxiliaryMinusButton[lv_auxiliaryIndex], PlayerGroupAll(), false);
            TextExpressionSetToken("Param/Expression/lib_VCUI_7857424F", "TOOLTIP", libVoiC_gf_PC_SoAUpgradeTooltip(libVCUI_gv_pU_SoAUpgrades[lv_auxiliaryIndex]));
            libNtve_gf_SetDialogItemTooltip(libVCUI_gv_pU_SoAAuxiliaryMinusButton[lv_auxiliaryIndex], TextExpressionAssemble("Param/Expression/lib_VCUI_7857424F"), PlayerGroupAll());
        }
        else {
            DialogControlSetEnabled(libVCUI_gv_pU_SoAAuxiliaryMinusButton[lv_auxiliaryIndex], PlayerGroupAll(), true);
            TextExpressionSetToken("Param/Expression/lib_VCUI_6B0215C6", "TOOLTIP", libVoiC_gf_PC_SoAUpgradeTooltip(libVCUI_gv_pU_SoAUpgrades[lv_auxiliaryIndex]));
            libNtve_gf_SetDialogItemTooltip(libVCUI_gv_pU_SoAAuxiliaryMinusButton[lv_auxiliaryIndex], TextExpressionAssemble("Param/Expression/lib_VCUI_6B0215C6"), PlayerGroupAll());
        }
        autoE2C44BAB_ae = libVoiC_gf_PC_SoAUpgradeLevelMax(libVCUI_gv_pU_SoAUpgrades[lv_auxiliaryIndex]);
        lv_auxCurrencyIndex = 1;
        for ( ; ( (autoE2C44BAB_ai >= 0 && lv_auxCurrencyIndex <= autoE2C44BAB_ae) || (autoE2C44BAB_ai < 0 && lv_auxCurrencyIndex >= autoE2C44BAB_ae) ) ; lv_auxCurrencyIndex += autoE2C44BAB_ai ) {
            if ((libVCUI_gv_pU_SoAUpgradeLevels[lv_auxiliaryIndex] >= lv_auxCurrencyIndex)) {
                DialogControlSetVisible(libVCUI_gv_pU_SoAAuxiliaryCurrencyImages[lv_auxiliaryIndex][lv_auxCurrencyIndex], PlayerGroupAll(), true);
            }
            else {
                DialogControlSetVisible(libVCUI_gv_pU_SoAAuxiliaryCurrencyImages[lv_auxiliaryIndex][lv_auxCurrencyIndex], PlayerGroupAll(), false);
            }
        }
    }
}

void libVCUI_gf_PU_SoAAssignPerk (string lp_perk, int lp_group) {
    // Variable Declarations
    int lv_oldCost;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libVCUI_gv_pU_SoAActivePerks[lp_group] != null)) {
        lv_oldCost = libVoiC_gf_PC_PerkCost(libVCUI_gv_pU_SoAActivePerks[lp_group]);
    }

    if ((lp_perk == null)) {
        libVCUI_gv_pU_SoAActivePerks[lp_group] = null;
        libVCUI_gv_pU_SoACurrencyCurrent += lv_oldCost;
        return ;
    }

    if ((libVoiC_gf_PC_PerkCost(lp_perk) > (lv_oldCost+libVCUI_gv_pU_SoACurrencyCurrent))) {
        return ;
    }

    libVCUI_gv_pU_SoAActivePerks[lp_group] = lp_perk;
    libVCUI_gv_pU_SoACurrencyCurrent += lv_oldCost;
    libVCUI_gv_pU_SoACurrencyCurrent -= libVoiC_gf_PC_PerkCost(lp_perk);
    libVCUI_gf_PU_SoAUpdateDialog();
}

trigger auto_libVCUI_gf_PU_SoAUpdateCutscene_Trigger = null;
int auto_libVCUI_gf_PU_SoAUpdateCutscene_lp_itemIndex;
int auto_libVCUI_gf_PU_SoAUpdateCutscene_lp_newTier;

void libVCUI_gf_PU_SoAUpdateCutscene (int lp_itemIndex, int lp_newTier) {
    auto_libVCUI_gf_PU_SoAUpdateCutscene_lp_itemIndex = lp_itemIndex;
    auto_libVCUI_gf_PU_SoAUpdateCutscene_lp_newTier = lp_newTier;

    if (auto_libVCUI_gf_PU_SoAUpdateCutscene_Trigger == null) {
        auto_libVCUI_gf_PU_SoAUpdateCutscene_Trigger = TriggerCreate("auto_libVCUI_gf_PU_SoAUpdateCutscene_TriggerFunc");
    }

    TriggerExecute(auto_libVCUI_gf_PU_SoAUpdateCutscene_Trigger, false, false);
}

bool auto_libVCUI_gf_PU_SoAUpdateCutscene_TriggerFunc (bool testConds, bool runActions) {
    int lp_itemIndex = auto_libVCUI_gf_PU_SoAUpdateCutscene_lp_itemIndex;
    int lp_newTier = auto_libVCUI_gf_PU_SoAUpdateCutscene_lp_newTier;

    // Automatic Variable Declarations
    // Implementation
    if ((libVCUI_gv_pU_SoAViewedTier == lp_newTier)) {
        if ((libVCUI_gv_pU_SoACutsceneUIFinishedIntro == true)) {
            ActorSend(ActorFrom(("::external.SoASection" + IntToString(lp_newTier))), "AnimPlay Glow Stand,Work,End");
            SoundPlayForPlayer(SoundLink("UI_ShipUpgrade_BG_YellowFlash", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        }

        return true;
    }

    if ((libVCUI_gv_pU_SoAQueuedTier != 0)) {
        libVCUI_gv_pU_SoAQueuedTier = lp_newTier;
        libVCUI_gv_pU_SoAQueuedItem = lp_itemIndex;
        return true;
    }

    libVCUI_gv_pU_SoAQueuedTier = lp_newTier;
    libVCUI_gv_pU_SoAQueuedItem = lp_itemIndex;
    if ((libVCUI_gv_pU_SoAViewedTier == 0)) {
        libVCST_gf_StoryCutsceneFade(false, 0.5, true);
        libVCUI_gv_pU_SoACutsceneUIFinishedIntro = false;
        TriggerEnable(libVCUI_gt_PU_SoACutsceneUIFinishedIntro, true);
        TriggerExecute(libVCUI_gt_PU_SoAFadeOutComplete, false, false);
    }
    else {
        DialogControlSendAnimationEvent(libVCUI_gv_pU_SoACalloutPanels[libVCUI_gv_pU_SoAViewedTier], PlayerGroupAll(), "Death");
        libVCST_gf_StoryCutsceneFade(false, 0.5, true);
        libVCUI_gv_pU_SoACutsceneUIFinishedIntro = false;
        TriggerEnable(libVCUI_gt_PU_SoACutsceneUIFinishedIntro, true);
        TriggerExecute(libVCUI_gt_PU_SoAFadeOutComplete, false, false);
    }
    return true;
}

text libVCUI_gf_PU_SoAPerkTooltip (string lp_campaignPerk) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_campaignPerk == "GPTier4Power3") && (UserDataGetInt("StoryStates", "FenixNameChange", "Value", 1) == 1)) {
        TextExpressionSetToken("Param/Expression/lib_VCUI_5F70C1F3", "NAME", StringExternal("Button/Name/SOAFenixUpgraded"));
        TextExpressionSetToken("Param/Expression/lib_VCUI_5F70C1F3", "DESCRIPTION", StringExternal("Button/Tooltip/SOAFenixUpgraded"));
        return TextExpressionAssemble("Param/Expression/lib_VCUI_5F70C1F3");
    }

    TextExpressionSetToken("Param/Expression/lib_VCUI_A0E93B3D", "NAME", libVoiC_gf_PC_PerkName(lp_campaignPerk));
    TextExpressionSetToken("Param/Expression/lib_VCUI_A0E93B3D", "DESCRIPTION", libVoiC_gf_PC_PerkTooltip(lp_campaignPerk));
    return TextExpressionAssemble("Param/Expression/lib_VCUI_A0E93B3D");
}

text libVCUI_gf_PU_SoAAuxiliaryDetail (string lp_upgrade) {
    // Automatic Variable Declarations
    string auto9A8F3378_val;

    // Implementation
    auto9A8F3378_val = lp_upgrade;
    if (auto9A8F3378_val == "ShipStructureBuildUpgrade") {
        TextExpressionSetToken("Param/Expression/lib_VCUI_3BEC692E", "UPGRADE", IntToText((TechTreeUpgradeCount(0, UserDataGetUpgrade("SpearofAdunUpgrade", lp_upgrade, "Upgrade", 1), c_techCountQueuedOrBetter)*5)));
        return TextExpressionAssemble("Param/Expression/lib_VCUI_3BEC692E");
    }
    else if (auto9A8F3378_val == "ShipShieldUpgrades") {
        TextExpressionSetToken("Param/Expression/lib_VCUI_667BE8C1", "UPGRADE", IntToText((TechTreeUpgradeCount(0, UserDataGetUpgrade("SpearofAdunUpgrade", lp_upgrade, "Upgrade", 1), c_techCountQueuedOrBetter)*5)));
        return TextExpressionAssemble("Param/Expression/lib_VCUI_667BE8C1");
    }
    else if (auto9A8F3378_val == "ShipSupplyUpgrade") {
        TextExpressionSetToken("Param/Expression/lib_VCUI_74345D94", "UPGRADE", StringToText(CatalogReferenceGet("Unit,SoACaster,Food", 0)));
        return TextExpressionAssemble("Param/Expression/lib_VCUI_74345D94");
    }
    else {
    }
    return libVoiC_gf_PC_SoAUpgradeTooltip(lp_upgrade);
}

void libVCUI_gf_PU_SoAClosed (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libVCUI_gv_pUC_SoAEventClosed);
}

void libVCUI_gf_PU_StarmapDisplay () {
    // Variable Declarations
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UISetWorldVisible(PlayerGroupAll(), false);
    TriggerExecute(libVCUI_gt_PU_StarmapInit, true, false);
    libVCUI_gf_PU_StarmapInitFromData();
    CutsceneShow(libVCUI_gv_pU_StarmapCutscene, true);
    libVCUI_gf_PU_RouteArtanisAnims(libVCUI_gv_pU_StarmapCutscene);
    DialogSetSubtitlePositionOverrideControl(libVCUI_gv_pU_StarmapSubtitlePanel);
    if ((libVCUI_gv_pU_StarmapSelection == 0)) {
        DialogControlFadeTransparency(libVCUI_gv_pU_StarmapPlanetTitleCallout[1], PlayerGroupAll(), 0.0, 100.0);
        DialogControlFadeTransparency(libVCUI_gv_pU_StarmapPlanetTitleName[1], PlayerGroupAll(), 0.0, 100.0);
        DialogControlFadeTransparency(libVCUI_gv_pU_StarmapPlanetTitleCallout[2], PlayerGroupAll(), 0.0, 100.0);
        DialogControlFadeTransparency(libVCUI_gv_pU_StarmapPlanetTitleName[2], PlayerGroupAll(), 0.0, 100.0);
        CutsceneGoToBookmark(libVCUI_gv_pU_StarmapCutscene, "DoubleSelect");
    }
    else if ((libVCUI_gv_pU_StarmapSelection == 1)) {
        CutsceneGoToBookmark(libVCUI_gv_pU_StarmapCutscene, "ASelected");
        CutsceneAddFilter(libVCUI_gv_pU_StarmapCutscene, ("Starmap" + libVoiC_gf_PC_LocationCutsceneFilter(libVCUI_gv_pU_StarmapLocations[1])));
    }
    else if ((libVCUI_gv_pU_StarmapSelection == 2)) {
        CutsceneGoToBookmark(libVCUI_gv_pU_StarmapCutscene, "BSelected");
        CutsceneAddFilter(libVCUI_gv_pU_StarmapCutscene, ("Starmap" + libVoiC_gf_PC_LocationCutsceneFilter(libVCUI_gv_pU_StarmapLocations[2])));
    }
    UISetWorldVisible(PlayerGroupAll(), true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "pAmbience_TravelScreen", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_Protoss_Storymode_Entry", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libVCUI_gf_PU_StarmapUpdateDisplay();
    TriggerEnable(libVCUI_gt_PU_StarmapBackSelected, true);
    TriggerEnable(libVCUI_gt_PU_StarmapQuitSelected, true);
    TriggerEnable(libVCUI_gt_PU_StarmapLaunchSelected, true);
    TriggerEnable(libVCUI_gt_PU_StarmapPlanetClicked, true);
    TriggerEnable(libVCUI_gt_PU_StarmapFadeInStarmapItems, true);
    TriggerEnable(libVCUI_gt_PU_StarmapPlanetHighlightOn, true);
    TriggerEnable(libVCUI_gt_PU_StarmapPlanetHighlightOff, true);
    TriggerEnable(libVCUI_gt_PU_StarmapFilterSwap, true);
}

void libVCUI_gf_PU_StarmapInitFromData () {
    // Variable Declarations
    string lv_indexLocation;
    int lv_index;
    string lv_swapLocation;

    // Automatic Variable Declarations
    int auto07AC2721_ae;
    int auto07AC2721_ai;

    // Variable Initialization

    // Implementation
    libVCUI_gv_pU_StarmapLocations[1] = null;
    libVCUI_gv_pU_StarmapLocations[2] = null;
    lv_index = 1;
    auto07AC2721_ae = CatalogEntryCount(c_gameCatalogLocation);
    auto07AC2721_ai = 1;
    while (auto07AC2721_ai <= auto07AC2721_ae) {
        lv_indexLocation = CatalogEntryGet(c_gameCatalogLocation, auto07AC2721_ai);
        if ((lv_index > 2)) {
            break;
        }

        if ((libVCUI_gf_PU_StarmapPlanetVisibleInScreen(lv_indexLocation) == true)) {
            libVCUI_gv_pU_StarmapLocations[lv_index] = lv_indexLocation;
            lv_index += 1;
        }

        auto07AC2721_ai = auto07AC2721_ai + 1;
    }
    if ((libVCUI_gv_pU_StarmapLocations[2] != null) && (libVCUI_gf_PU_StarmapLocationSortIndex(libVCUI_gv_pU_StarmapLocations[2]) < libVCUI_gf_PU_StarmapLocationSortIndex(libVCUI_gv_pU_StarmapLocations[1]))) {
        lv_swapLocation = libVCUI_gv_pU_StarmapLocations[1];
        libVCUI_gv_pU_StarmapLocations[1] = libVCUI_gv_pU_StarmapLocations[2];
        libVCUI_gv_pU_StarmapLocations[2] = lv_swapLocation;
    }

    Wait(0.2, c_timeGame);
    ActorSend(libNtve_gf_MainActorofUnit(libVCUI_gv_pU_StarmapPlanetAttachUnit[1]), ("RefClear ::Host"));
    ActorSend(libNtve_gf_MainActorofUnit(libVCUI_gv_pU_StarmapPlanetAttachUnit[1]), ("RefSet ::Host ::external.UITextA"));
    ActorSend(libNtve_gf_MainActorofUnit(libVCUI_gv_pU_StarmapPlanetAttachUnit[1]), ("HostSiteOpsSet ::Host {SOpAttachOrigin}"));
    ActorSend(libNtve_gf_MainActorofUnit(libVCUI_gv_pU_StarmapPlanetAttachUnit[2]), ("RefClear ::Host"));
    ActorSend(libNtve_gf_MainActorofUnit(libVCUI_gv_pU_StarmapPlanetAttachUnit[2]), ("RefSet ::Host ::external.UITextB"));
    ActorSend(libNtve_gf_MainActorofUnit(libVCUI_gv_pU_StarmapPlanetAttachUnit[2]), ("HostSiteOpsSet ::Host {SOpAttachOrigin}"));
    ActorSend(libNtve_gf_MainActorofUnit(libVCUI_gv_pU_StarmapPlanetAttachUnit[3]), ("RefClear ::Host"));
    ActorSend(libNtve_gf_MainActorofUnit(libVCUI_gv_pU_StarmapPlanetAttachUnit[3]), ("RefSet ::Host ::external.UISelection"));
    ActorSend(libNtve_gf_MainActorofUnit(libVCUI_gv_pU_StarmapPlanetAttachUnit[3]), ("HostSiteOpsSet ::Host {SOpAttachOrigin}"));
    if ((libVoiC_gf_LastSuccessfulMission() == "PAiur03")) {
        DialogControlSetVisible(libVCUI_gv_pU_StarmapQuitButton, PlayerGroupAll(), true);
        DialogControlSetVisible(libVCUI_gv_pU_StarmapBackButton, PlayerGroupAll(), false);
    }

    if ((libVCUI_gv_pU_StarmapLocations[2] == null)) {
        libVCUI_gv_pU_StarmapSelection = 1;
        if ((libVCUI_gv_pU_StarmapPitchPlayed[1] == false)) {
            TriggerExecute(libVCUI_gt_PU_StarmapPlayPitch, false, false);
        }

    }
    else {
        CutsceneAddFilter(libVCUI_gv_pU_StarmapCutscene, "TwoPlanets");
    }
}

void libVCUI_gf_PU_StarmapUpdateDisplay () {
    // Variable Declarations
    string lv_indexMission;
    int lv_index;
    string lv_indexObjective;
    int lv_shipCoreAvailable;
    int lv_clickableIndex;

    // Automatic Variable Declarations
    int auto0A36738A_ae;
    int auto0A36738A_ai;

    // Variable Initialization

    // Implementation
    DialogSetVisible(libVCUI_gv_pU_StarmapDialog, PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(libVCUI_gv_pU_StarmapPlanetTitleName[1], libVoiC_gf_StoryUIPlanetName(libVCUI_gv_pU_StarmapLocations[1]), PlayerGroupAll());
    if ((libVCUI_gv_pU_StarmapSelection == 2)) {
        DialogSetPositionRelativeToUnit(libVCUI_gv_pU_StarmapPlanetAttachDialog[1], libVCUI_gv_pU_StarmapPlanetAttachUnit[2], "Ref_Center", 0, 0);
        DialogSetPositionRelativeToUnit(libVCUI_gv_pU_StarmapPlanetAttachDialog[2], libVCUI_gv_pU_StarmapPlanetAttachUnit[1], "Ref_Center", 0, 0);
        DialogControlSetVisible(libVCUI_gv_pU_StarmapPlanetButton[2], PlayerGroupAll(), false);
        DialogControlSetVisible(libVCUI_gv_pU_StarmapPlanetButton[1], PlayerGroupAll(), true);
    }
    else {
        DialogSetPositionRelativeToUnit(libVCUI_gv_pU_StarmapPlanetAttachDialog[1], libVCUI_gv_pU_StarmapPlanetAttachUnit[1], "Ref_Center", 0, 0);
        DialogSetPositionRelativeToUnit(libVCUI_gv_pU_StarmapPlanetAttachDialog[2], libVCUI_gv_pU_StarmapPlanetAttachUnit[2], "Ref_Center", 0, 0);
        DialogControlSetVisible(libVCUI_gv_pU_StarmapPlanetButton[2], PlayerGroupAll(), true);
        if ((libVCUI_gv_pU_StarmapSelection != 0)) {
            DialogControlSetVisible(libVCUI_gv_pU_StarmapPlanetButton[1], PlayerGroupAll(), false);
        }
        else {
            DialogControlSetVisible(libVCUI_gv_pU_StarmapPlanetButton[1], PlayerGroupAll(), true);
        }
    }
    DialogControlSetPositionRelative(libVCUI_gv_pU_StarmapPlanetTitleCallout[1], PlayerGroupAll(), c_anchorBottomLeft, libVCUI_gv_pU_StarmapPlanetAttachPanel[1], c_anchorBottom, 0, 0);
    DialogControlSetPositionRelative(libVCUI_gv_pU_StarmapPlanetTitleCallout[2], PlayerGroupAll(), c_anchorBottomLeft, libVCUI_gv_pU_StarmapPlanetAttachPanel[2], c_anchorBottom, 0, 0);
    DialogSetPositionRelative(libVCUI_gv_pU_StarmapPlanetButtonDialog[1], c_anchorCenter, libVCUI_gv_pU_StarmapPlanetAttachDialog[1], c_anchorBottom, 0, 0);
    DialogSetPositionRelative(libVCUI_gv_pU_StarmapPlanetButtonDialog[2], c_anchorCenter, libVCUI_gv_pU_StarmapPlanetAttachDialog[2], c_anchorBottom, 0, 0);
    DialogSetPositionRelativeToUnit(libVCUI_gv_pU_StarmapPlanetAttachDialog[3], libVCUI_gv_pU_StarmapPlanetAttachUnit[3], "Ref_Center", 0, 0);
    DialogControlSetPositionRelative(libVCUI_gv_pU_StarmapSelectedPlanetNameLabelCallout, PlayerGroupAll(), c_anchorBottomRight, libVCUI_gv_pU_StarmapPlanetAttachPanel[3], c_anchorBottom, 0, 0);
    if ((libVCUI_gv_pU_StarmapLocations[2] != null)) {
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_StarmapPlanetTitleName[2], libVoiC_gf_StoryUIPlanetName(libVCUI_gv_pU_StarmapLocations[2]), PlayerGroupAll());
    }

    if ((libVCUI_gv_pU_StarmapSelection == 0)) {
        DialogControlSetVisible(libVCUI_gv_pU_StarmapLaunchButton, PlayerGroupAll(), false);
        DialogControlSetVisible(libVCUI_gv_pU_StarmapMissionRewards, PlayerGroupAll(), false);
        DialogControlSetVisible(libVCUI_gv_pU_StarmapSelectedPlanetNameLabel, PlayerGroupAll(), false);
        DialogControlSetVisible(libVCUI_gv_pU_StarmapPromptLabel, PlayerGroupAll(), true);
        DialogControlSetVisible(libVCUI_gv_pU_StarmapPlanetTitleCallout[1], PlayerGroupAll(), true);
        if ((libVCUI_gv_pU_StarmapLocations[2] != null)) {
            DialogControlSetVisible(libVCUI_gv_pU_StarmapPlanetTitleCallout[2], PlayerGroupAll(), true);
        }
        else {
            DialogControlSetVisible(libVCUI_gv_pU_StarmapPlanetTitleCallout[2], PlayerGroupAll(), false);
        }
        DialogControlSetVisible(libVCUI_gv_pU_StarmapSelectedPlanetNameLabelCallout, PlayerGroupAll(), false);
        DialogControlSetVisible(libVCUI_gv_pU_StarmapNewUnitCallout, PlayerGroupAll(), false);
        return ;
    }

    if ((libVCUI_gv_pU_StarmapSelection == 1)) {
        DialogControlSetVisible(libVCUI_gv_pU_StarmapPlanetTitleCallout[1], PlayerGroupAll(), false);
        DialogControlSetVisible(libVCUI_gv_pU_StarmapPlanetTitleName[1], PlayerGroupAll(), false);
        if ((libVCUI_gv_pU_StarmapLocations[2] != null)) {
            DialogControlSetVisible(libVCUI_gv_pU_StarmapPlanetTitleCallout[2], PlayerGroupAll(), true);
            DialogControlSetVisible(libVCUI_gv_pU_StarmapPlanetTitleName[2], PlayerGroupAll(), true);
        }
        else {
            DialogControlSetVisible(libVCUI_gv_pU_StarmapPlanetTitleCallout[2], PlayerGroupAll(), false);
            DialogControlSetVisible(libVCUI_gv_pU_StarmapPlanetTitleName[2], PlayerGroupAll(), false);
            DialogControlSetVisible(libVCUI_gv_pU_StarmapPlanetButton[1], PlayerGroupAll(), false);
            DialogControlSetVisible(libVCUI_gv_pU_StarmapPlanetButton[2], PlayerGroupAll(), false);
        }
    }
    else {
        DialogControlSetVisible(libVCUI_gv_pU_StarmapPlanetTitleCallout[1], PlayerGroupAll(), true);
        DialogControlSetVisible(libVCUI_gv_pU_StarmapPlanetTitleName[1], PlayerGroupAll(), true);
        DialogControlSetVisible(libVCUI_gv_pU_StarmapPlanetTitleCallout[2], PlayerGroupAll(), false);
        DialogControlSetVisible(libVCUI_gv_pU_StarmapPlanetTitleName[2], PlayerGroupAll(), false);
    }
    libNtve_gf_SetDialogItemText(libVCUI_gv_pU_StarmapSelectedPlanetNameLabel, libVoiC_gf_StoryUIPlanetName(libVCUI_gv_pU_StarmapLocations[libVCUI_gv_pU_StarmapSelection]), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libVCUI_gv_pU_StarmapPlanetFluffLeft, libVoiC_gf_PC_LocationCategoriesFluffText(libVCUI_gv_pU_StarmapLocations[libVCUI_gv_pU_StarmapSelection]), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libVCUI_gv_pU_StarmapPlanetFluffRight, libVoiC_gf_PC_LocationDataFluffText(libVCUI_gv_pU_StarmapLocations[libVCUI_gv_pU_StarmapSelection]), PlayerGroupAll());
    DialogControlSetVisible(libVCUI_gv_pU_StarmapPromptLabel, PlayerGroupAll(), true);
    DialogControlSetVisible(libVCUI_gv_pU_StarmapMissionRewards, PlayerGroupAll(), true);
    DialogControlSetVisible(libVCUI_gv_pU_StarmapMissionRewards2, PlayerGroupAll(), true);
    DialogControlSetVisible(libVCUI_gv_pU_StarmapLaunchButton, PlayerGroupAll(), true);
    DialogControlSetVisible(libVCUI_gv_pU_StarmapSelectedPlanetNameLabelCallout, PlayerGroupAll(), true);
    DialogControlSetVisible(libVCUI_gv_pU_StarmapSelectedPlanetNameLabel, PlayerGroupAll(), true);
    DialogControlSetVisible(libVCUI_gv_pU_StarmapNewUnitCallout, PlayerGroupAll(), true);
    DialogControlSetVisible(libVCUI_gv_pU_StarmapUnitPanel[1], PlayerGroupAll(), false);
    DialogControlSetVisible(libVCUI_gv_pU_StarmapUnitPanel[2], PlayerGroupAll(), false);
    if ((libVCUI_gv_pU_PitchPlaying == false)) {
        DialogControlSetVisible(libVCUI_gv_pU_StarmapPitchPlayButton, PlayerGroupAll(), true);
        DialogControlSetVisible(libVCUI_gv_pU_StarmapPitchStopButton, PlayerGroupAll(), false);
    }

    lv_index = 1;
    auto0A36738A_ae = CatalogEntryCount(c_gameCatalogMap);
    auto0A36738A_ai = 1;
    while (auto0A36738A_ai <= auto0A36738A_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto0A36738A_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission" && libVoiC_gf_StoryMapPlanet(lv_indexMission) == libVCUI_gv_pU_StarmapLocations[libVCUI_gv_pU_StarmapSelection]) {
            if ((libVoiC_gf_MissionArmyCategoryUnlocked(lv_indexMission) != null)) {
                libNtve_gf_SetDialogItemUnitLink(libVCUI_gv_pU_StarmapUnitModels[lv_index], libVoiC_gf_PC_ArmyCategoryUnitType(libVoiC_gf_MissionArmyCategoryUnlocked(lv_indexMission)), PlayerGroupAll());
                libNtve_gf_SetDialogItemCamera(libVCUI_gv_pU_StarmapUnitModels[lv_index], libVoiC_gf_PC_ArmyCategoryPlanetCamera(libVoiC_gf_MissionArmyCategoryUnlocked(lv_indexMission)), PlayerGroupAll());
                TextExpressionSetToken("Param/Expression/lib_VCUI_560481B1", "Name", UnitTypeGetName(libVoiC_gf_PC_ArmyCategoryUnitType(libVoiC_gf_MissionArmyCategoryUnlocked(lv_indexMission))));
                libNtve_gf_SetDialogItemText(libVCUI_gv_pU_StarmapUnitLabel[lv_index], TextExpressionAssemble("Param/Expression/lib_VCUI_560481B1"), PlayerGroupAll());
                TextExpressionSetToken("Param/Expression/lib_VCUI_9EBBFBCF", "NAME", libVoiC_gf_PC_ArmyCategoryName(libVoiC_gf_MissionArmyCategoryUnlocked(lv_indexMission)));
                TextExpressionSetToken("Param/Expression/lib_VCUI_9EBBFBCF", "DESC", libVoiC_gf_PC_ArmyCategoryUnitDescription(libVoiC_gf_MissionArmyCategoryUnlocked(lv_indexMission)));
                libNtve_gf_SetDialogItemTooltip(libVCUI_gv_pU_StarmapUnitPanel[lv_index], TextExpressionAssemble("Param/Expression/lib_VCUI_9EBBFBCF"), PlayerGroupAll());
                DialogControlSetVisible(libVCUI_gv_pU_StarmapUnitPanel[lv_index], PlayerGroupAll(), true);
                lv_index += 1;
            }

        }
        auto0A36738A_ai = auto0A36738A_ai + 1;
    }
    if ((lv_index == 1)) {
        DialogControlSetVisible(libVCUI_gv_pU_StarmapMissionRewards, PlayerGroupAll(), false);
        DialogControlSetVisible(libVCUI_gv_pU_StarmapNewUnitCallout, PlayerGroupAll(), false);
        DialogControlSetVisible(libVCUI_gv_pU_StarmapMissionRewards2, PlayerGroupAll(), false);
    }

}

bool libVCUI_gf_PU_StarmapPlanetVisibleInScreen (string lp_location) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_location != null) && (libVoiC_gf_StoryPlanetIsAvailable(lp_location) == true) && (lp_location != libVoiC_gf_CurrentLocation())) {
        return true;
    }

    return false;
}

int libVCUI_gf_PU_StarmapLocationSortIndex (string lp_location) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("Locations", UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogLocation, lp_location, "UserReference", 1)), "SortIndex", 1);
}

void libVCUI_gf_PU_StarmapSelectLocation (int lp_locationIndex) {
    // Automatic Variable Declarations
    // Implementation
    TriggerExecute(libVCUI_gt_PU_StarmapStopPitch, false, false);
    libVCUI_gv_pU_StarmapSelection = lp_locationIndex;
}

void libVCUI_gf_PU_StarmapPreload () {
    // Variable Declarations
    string lv_indexLocation;
    string lv_indexMission;

    // Automatic Variable Declarations
    int auto41CD678F_ae;
    int auto41CD678F_ai;
    int auto5CC1E984_ae;
    int auto5CC1E984_ai;
    string auto369378D5_val;

    // Variable Initialization

    // Implementation
    PreloadLayout("UI\\Layout\\Custom\\LotV_StarmapUI.SC2Layout", false);
    PreloadAsset("Cutscenes\\UI_Starmap.SC2Cutscene", false);
    auto41CD678F_ae = CatalogEntryCount(c_gameCatalogLocation);
    auto41CD678F_ai = 1;
    while (auto41CD678F_ai <= auto41CD678F_ae) {
        lv_indexLocation = CatalogEntryGet(c_gameCatalogLocation, auto41CD678F_ai);
        if ((libVoiC_gf_StoryPlanetIsAvailable(lv_indexLocation) == true)) {
            auto5CC1E984_ae = CatalogEntryCount(c_gameCatalogMap);
            auto5CC1E984_ai = 1;
            while (auto5CC1E984_ai <= auto5CC1E984_ae) {
                lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto5CC1E984_ai);
                if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission" && libVoiC_gf_StoryMapPlanet(lv_indexMission) == lv_indexLocation) {
                    if ((libVoiC_gf_MissionArmyCategoryUnlocked(lv_indexMission) != null)) {
                        libNtve_gf_PreloadUnit(libVoiC_gf_PC_ArmyCategoryUnitType(libVoiC_gf_MissionArmyCategoryUnlocked(lv_indexMission)), false);
                    }

                }
                auto5CC1E984_ai = auto5CC1E984_ai + 1;
            }
            ConversationDataPreloadLines(libVoiC_gf_StoryPlanetNonmissionPitch(lv_indexLocation));
            auto369378D5_val = lv_indexLocation;
            if (auto369378D5_val == "Korhal") {
                libNtve_gf_PreloadModelObject("SMX2_StarMap_UI_Travel_Planets00", false);
                libNtve_gf_PreloadModelObject("SMX2_PlanetView_Nebula_Korhal01", false);
            }
            else if (auto369378D5_val == "Shakuras") {
                libNtve_gf_PreloadModelObject("SMX2_StarMap_UI_Travel_Planets01", false);
                libNtve_gf_PreloadModelObject("SMX2_Background_Shakuras_Nebula_Cloud", false);
            }
            else if (auto369378D5_val == "PurifierA") {
                libNtve_gf_PreloadModelObject("SMX2_Purifier_Nebula", false);
                libNtve_gf_PreloadModelObject("SMX2_StarMap_UI_Travel_Planets02", false);
            }
            else if (auto369378D5_val == "Ulnar") {
                libNtve_gf_PreloadModelObject("SMX2_StarMap_UI_Travel_Planets03", false);
                libNtve_gf_PreloadModelObject("SMX2_Background_Ulnar_Clouds", false);
            }
            else if (auto369378D5_val == "PurifierB") {
                libNtve_gf_PreloadModelObject("SMX2_StarMap_UI_Travel_Planets05", false);
                libNtve_gf_PreloadModelObject("SMX2_Purifier02_Nebula", false);
            }
            else if (auto369378D5_val == "Taldarim") {
                libNtve_gf_PreloadModelObject("SMX2_StarMap_UI_Travel_Planets04", false);
                libNtve_gf_PreloadModelObject("SMX2_Slayn_Nebula", false);
            }
            else if (auto369378D5_val == "Moebius") {
                libNtve_gf_PreloadModelObject("SMX2_StarMap_UI_Travel_Planets06", false);
                libNtve_gf_PreloadModelObject("SMX2_Mobius_Asteroid_Nebula", false);
            }
            else if (auto369378D5_val == "AiurB") {
                libNtve_gf_PreloadModelObject("SMX2_StarMap_UI_Travel_Planets07", false);
                libNtve_gf_PreloadModelObject("SMX2_Aiur_Nebula", false);
            }
            else {
            }
        }

        auto41CD678F_ai = auto41CD678F_ai + 1;
    }
}

void libVCUI_gf_PU_StarmapClose () {
    // Automatic Variable Declarations
    // Implementation
    DialogDestroy(libVCUI_gv_pU_StarmapDialog);
    libVCUI_gv_pU_StarmapDialog = c_invalidDialogId;
    CutsceneStop(libVCUI_gv_pU_StarmapCutscene);
    UnitRemove(libVCUI_gv_pU_StarmapPlanetAttachUnit[1]);
    UnitRemove(libVCUI_gv_pU_StarmapPlanetAttachUnit[2]);
    libVCUI_gv_pU_StarmapPlanetAttachUnit[1] = null;
    libVCUI_gv_pU_StarmapPlanetAttachUnit[2] = null;
    DialogDestroy(libVCUI_gv_pU_StarmapPlanetButtonDialog[1]);
    DialogDestroy(libVCUI_gv_pU_StarmapPlanetButtonDialog[2]);
    DialogDestroy(libVCUI_gv_pU_StarmapPlanetAttachDialog[1]);
    DialogDestroy(libVCUI_gv_pU_StarmapPlanetAttachDialog[2]);
    DialogDestroy(libVCUI_gv_pU_StarmapPlanetAttachDialog[3]);
    TriggerEnable(libVCUI_gt_PU_StarmapBackSelected, false);
    TriggerEnable(libVCUI_gt_PU_StarmapQuitSelected, false);
    TriggerEnable(libVCUI_gt_PU_StarmapLaunchSelected, false);
    TriggerEnable(libVCUI_gt_PU_StarmapPlanetClicked, false);
    TriggerEnable(libVCUI_gt_PU_StarmapCustomDialogDismiss, false);
    TriggerEnable(libVCUI_gt_PU_StarmapFadeInStarmapItems, false);
    TriggerEnable(libVCUI_gt_PU_StarmapPlanetHighlightOn, false);
    TriggerEnable(libVCUI_gt_PU_StarmapPlanetHighlightOff, false);
    TriggerEnable(libVCUI_gt_PU_StarmapFilterSwap, false);
}

void libVCUI_gf_PU_StarmapFadeOutUIItems () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libVCUI_gv_pU_StarmapPlanetButton[1], PlayerGroupAll(), false);
    DialogControlSetVisible(libVCUI_gv_pU_StarmapPlanetButton[2], PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemAcceptMouse(libVCUI_gv_pU_StarmapPlanetTitleName[1], false, PlayerGroupAll());
    libNtve_gf_SetDialogItemAcceptMouse(libVCUI_gv_pU_StarmapPlanetTitleName[2], false, PlayerGroupAll());
    DialogControlFadeTransparency(libVCUI_gv_pU_StarmapMissionRewards2, PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(libVCUI_gv_pU_StarmapMissionRewards, PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(libVCUI_gv_pU_StarmapNewUnitCallout, PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(libVCUI_gv_pU_StarmapSelectedPlanetNameLabelCallout, PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(libVCUI_gv_pU_StarmapPlanetTitleCallout[1], PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(libVCUI_gv_pU_StarmapPlanetTitleName[1], PlayerGroupAll(), 0.0, 100.0);
    if ((libVCUI_gv_pU_StarmapLocations[2] != null)) {
        DialogControlFadeTransparency(libVCUI_gv_pU_StarmapPlanetTitleCallout[2], PlayerGroupAll(), 0.0, 100.0);
        DialogControlFadeTransparency(libVCUI_gv_pU_StarmapPlanetTitleName[2], PlayerGroupAll(), 0.0, 100.0);
    }

}

string libVCUI_gf_PU_StarmapLaunchLocation () {
    // Automatic Variable Declarations
    // Implementation
    return libVCUI_gv_pU_StarmapLaunchLocation;
}

void libVCUI_gf_PU_PlayPortraitPitch (string lp_pitch, int lp_portrait) {
    // Variable Declarations
    string lv_indexClickable;

    // Automatic Variable Declarations
    int auto8B731360_ai;
    int auto8B731360_ae;

    // Variable Initialization

    // Implementation
    auto8B731360_ai = 1;
    auto8B731360_ae = UserDataInstanceCount("Clickable")+1;
    while (auto8B731360_ai < auto8B731360_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto8B731360_ai);
        ConversationDataRegisterPortrait(libVoiC_gf_PC_ClickableConversationLink(lv_indexClickable), lp_portrait);
        ConversationDataRegisterUnit(libVoiC_gf_PC_ClickableConversationLink(lv_indexClickable), null);
        auto8B731360_ai = auto8B731360_ai+1;
    }
    ConversationDataRun(lp_pitch, PlayerGroupAll(), c_conversationSkipNone, true);
}

void libVCUI_gf_PU_RouteArtanisAnims (int lp_animCutscene) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto68A62B65_ae;
    const int auto68A62B65_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libVCST_gf_NextAvailableMission(libVoiC_gf_CurrentLocation()) != "PAiur02") && (libVCST_gf_NextAvailableMission(libVoiC_gf_CurrentLocation()) != "SC2Epilogue02") && (libVCST_gf_NextAvailableMission(libVoiC_gf_CurrentLocation()) != "SC2Epilogue03")) {
        libVCUI_gv_pU_ArtanisAnimScene = lp_animCutscene;
        auto68A62B65_ae = ConversationDataStateIndexCount("Cameras");
        lv_index = 1;
        for ( ; ( (auto68A62B65_ai >= 0 && lv_index <= auto68A62B65_ae) || (auto68A62B65_ai < 0 && lv_index >= auto68A62B65_ae) ) ; lv_index += auto68A62B65_ai ) {
            if ((libVCST_gf_NextAvailableMission(libVoiC_gf_CurrentLocation()) == "PMoebius01")) {
                ConversationDataRegisterCamera(ConversationDataStateIndex("Cameras", lv_index), "char_Smith", null, libVCUI_gt_PU_ArtanisAnim, true);
            }
            else {
                ConversationDataRegisterCamera(ConversationDataStateIndex("Cameras", lv_index), "char_Artanis", null, libVCUI_gt_PU_ArtanisAnim, true);
                ConversationDataRegisterCamera(ConversationDataStateIndex("Cameras", lv_index), "char_DTLeader", null, libVCUI_gt_PU_ArtanisAnimStop, true);
            }
        }
    }

}

void libVCUI_gf_PU_StopArtanisAnims () {
    // Variable Declarations
    actor lv_sceneActor;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libVCST_gf_NextAvailableMission(libVoiC_gf_CurrentLocation()) == "PMoebius01")) {
        lv_sceneActor = ActorFrom("::external.StarmapKarax");
    }
    else {
        lv_sceneActor = ActorFrom("::external.StarmapArtanis");
    }
    libVoiC_gf_PC_ClearAnimationFromActor("STARMAPTALK", lv_sceneActor, 1.0);
}

trigger auto_libVCUI_gf_DisplayArmyButton_Trigger = null;
bool auto_libVCUI_gf_DisplayArmyButton_lp_doDoNot;

void libVCUI_gf_DisplayArmyButton (bool lp_doDoNot) {
    auto_libVCUI_gf_DisplayArmyButton_lp_doDoNot = lp_doDoNot;

    if (auto_libVCUI_gf_DisplayArmyButton_Trigger == null) {
        auto_libVCUI_gf_DisplayArmyButton_Trigger = TriggerCreate("auto_libVCUI_gf_DisplayArmyButton_TriggerFunc");
    }

    TriggerExecute(auto_libVCUI_gf_DisplayArmyButton_Trigger, false, false);
}

bool auto_libVCUI_gf_DisplayArmyButton_TriggerFunc (bool testConds, bool runActions) {
    bool lp_doDoNot = auto_libVCUI_gf_DisplayArmyButton_lp_doDoNot;

    // Automatic Variable Declarations
    // Implementation
    libVCUI_gf_PU_ArmyButtonHookup();
    TriggerEnable(libVCUI_gt_PU_ArmyButtonUsed, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, true);
    if ((lp_doDoNot == true)) {
        libVCUI_gf_ToggleArmyButtonFlashing(true);
    }

    return true;
}

void libVCUI_gf_PU_ArmyButtonHookup () {
    // Automatic Variable Declarations
    // Implementation
    if ((libVCUI_gv_pU_ArmyButton != c_invalidDialogControlId)) {
        return ;
    }

    DialogControlHookupStandard(c_triggerControlTypeFlash, "UIContainer/ConsoleUIContainer/ArmyButtonTipEffects");
    libVCUI_gv_pU_ArmyButtonTipPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/ArmyButton");
    libVCUI_gv_pU_ArmyButton = DialogControlLastCreated();
}

void libVCUI_gf_ToggleArmyButtonFlashing (bool lp_onOff) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_onOff == true)) {
        libVCUI_gf_PU_ArmyButtonHookup();
        TriggerEnable(libVCUI_gt_PU_ArmyButtonUsed, true);
        libVCUI_gv_pU_ArmyButtonUsed = false;
        TriggerQueueEnter();
        TriggerExecute(libVCUI_gt_PU_FlashArmyButtonHelpTip, true, false);
        TriggerQueueExit();
    }
    else {
        TriggerExecute(libVCUI_gt_PU_ArmyButtonFlashingOff, true, false);
    }
}

void libVCUI_gf_SelectArmyButtonUsed (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libVCUI_gv_pUC_SelectArmyEventUsed);
}

void libVCUI_gf_DisplayCampaignDirective (text lp_directiveText) {
    // Automatic Variable Declarations
    // Implementation
    if ((libVCUI_gv_pU_DirectiveDialog == c_invalidDialogId)) {
        libVCUI_gf_PU_DirectiveInit();
    }

    DialogControlSetVisible(libVCUI_gv_pU_DirectivePanel, PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(libVCUI_gv_pU_DirectiveLabel, lp_directiveText, PlayerGroupAll());
}

void libVCUI_gf_HideCampaignDirective () {
    // Automatic Variable Declarations
    // Implementation
    if ((libVCUI_gv_pU_DirectiveDialog == c_invalidDialogId)) {
        return ;
    }

    DialogControlSetVisible(libVCUI_gv_pU_DirectivePanel, PlayerGroupAll(), false);
}

void libVCUI_gf_PU_DirectiveInit () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libVCUI_gv_pU_DirectiveDialog = DialogLastCreated();
    DialogSetVisible(libVCUI_gv_pU_DirectiveDialog, PlayerGroupAll(), true);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/CampaignDirectiveDisplay");
    libVCUI_gv_pU_DirectivePanel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_DirectivePanel, c_triggerControlTypeLabel, "DirectiveLabel");
    libVCUI_gv_pU_DirectiveLabel = DialogControlLastCreated();
}

int libVCUI_gf_PU_BB_HPBarCurrentWidth () {
    // Variable Declarations
    fixed lv_current;
    fixed lv_max;
    int lv_width;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libVCUI_gv_pU_BB_Boss == null)) {
        lv_current = libVCUI_gv_pU_BB_CurrentValue;
        lv_max = libVCUI_gv_pU_BB_MaxValue;
    }
    else {
        lv_current = (UnitGetPropertyFixed(libVCUI_gv_pU_BB_Boss, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(libVCUI_gv_pU_BB_Boss, c_unitPropShields, c_unitPropCurrent));
        lv_max = (UnitGetPropertyFixed(libVCUI_gv_pU_BB_Boss, c_unitPropLifeMax, c_unitPropCurrent) + UnitGetPropertyFixed(libVCUI_gv_pU_BB_Boss, c_unitPropShieldsMax, c_unitPropCurrent));
    }
    if ((lv_max <= 0.0)) {
        lv_max = 1.0;
    }

    if ((lv_current > lv_max)) {
        lv_current = lv_max;
    }

    lv_width = FixedToInt((libVCUI_gv_pUC_BB_HPBarWidth * (lv_current / lv_max)));
    return lv_width;
}

text libVCUI_gf_PU_BB_HPBarFormatLabel () {
    // Variable Declarations
    fixed lv_current;
    fixed lv_max;
    text lv_label;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libVCUI_gv_pU_BB_Boss == null)) {
        lv_current = libVCUI_gv_pU_BB_CurrentValue;
        lv_max = libVCUI_gv_pU_BB_MaxValue;
    }
    else {
        lv_current = (UnitGetPropertyFixed(libVCUI_gv_pU_BB_Boss, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(libVCUI_gv_pU_BB_Boss, c_unitPropShields, c_unitPropCurrent));
        lv_max = (UnitGetPropertyFixed(libVCUI_gv_pU_BB_Boss, c_unitPropLifeMax, c_unitPropCurrent) + UnitGetPropertyFixed(libVCUI_gv_pU_BB_Boss, c_unitPropShieldsMax, c_unitPropCurrent));
    }
    lv_label = (IntToText(FixedToInt(lv_current)) + StringExternal("Param/Value/lib_VCUI_A8DB4967") + IntToText(FixedToInt(lv_max)));
    return lv_label;
}

trigger auto_libVCUI_gf_PU_BB_HPBarChange_Trigger = null;

void libVCUI_gf_PU_BB_HPBarChange () {
    if (auto_libVCUI_gf_PU_BB_HPBarChange_Trigger == null) {
        auto_libVCUI_gf_PU_BB_HPBarChange_Trigger = TriggerCreate("auto_libVCUI_gf_PU_BB_HPBarChange_TriggerFunc");
    }

    TriggerExecute(auto_libVCUI_gf_PU_BB_HPBarChange_Trigger, false, false);
}

bool auto_libVCUI_gf_PU_BB_HPBarChange_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_newWidth;
    int lv_width;
    int lv_damageBar;
    fixed lv_oldPct;
    fixed lv_newPct;
    string lv_iMAGE;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_damageBar = c_invalidDialogControlId;

    // Implementation
    lv_newWidth = libVCUI_gf_PU_BB_HPBarCurrentWidth();
    lv_width = (libVCUI_gv_pU_BB_HPOldWidth - lv_newWidth);
    lv_oldPct = (libVCUI_gv_pU_BB_HPOldWidth / libVCUI_gv_pUC_BB_HPBarWidth);
    lv_newPct = (lv_newWidth / libVCUI_gv_pUC_BB_HPBarWidth);
    libVCUI_gv_pU_BB_HPOldWidth = lv_newWidth;
    if ((((lv_newPct <= 0.75) && (lv_oldPct > 0.75)) || ((lv_newPct <= 0.5) && (lv_oldPct > 0.5)) || ((lv_newPct <= 0.25) && (lv_oldPct > 0.25)))) {
        DialogControlSendAnimationEvent(libVCUI_gv_pU_BB_Panel, PlayerGroupAll(), "Highlight");
    }
    else if ((lv_newPct < 0.25)) {
        DialogControlSendAnimationEvent(libVCUI_gv_pU_BB_Panel, PlayerGroupAll(), "Danger");
    }
    else if (true) {
        DialogControlSendAnimationEvent(libVCUI_gv_pU_BB_Panel, PlayerGroupAll(), "DangerStop");
    }
    if ((lv_width > 0)) {
        DialogControlCreateInPanelFromTemplate(libVCUI_gv_pU_BB_Panel, c_triggerControlTypeImage, "LotV_GameUnitFrame/BossHealthBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, libVCUI_gv_pU_BB_HpCurrentImage, c_anchorLeft, 0, 0);
        lv_damageBar = DialogControlLastCreated();
        DialogControlSetSize(lv_damageBar, PlayerGroupAll(), (libVCUI_gv_pU_BB_HPOldWidth + lv_width), libVCUI_gv_pUC_BB_HPBarHeight);
        libNtve_gf_SetDialogItemRenderPriority(lv_damageBar, 507, PlayerGroupAll());
        DialogControlSetVisible(lv_damageBar, PlayerGroupAll(), true);
        Wait(1.0, c_timeReal);
        DialogControlFadeTransparency(lv_damageBar, PlayerGroupAll(), 1.0, 100.0);
        Wait(1.1, c_timeReal);
        DialogControlDestroy(lv_damageBar);
    }

    return true;
}

void libVCUI_gf_DisplaySingularBossBarVoidCampaign (string lp_portrait, text lp_title, int lp_max) {
    // Automatic Variable Declarations
    // Implementation
    libVCUI_gv_pU_BB_Portraits = lp_portrait;
    libVCUI_gv_pU_BB_Title = lp_title;
    libVCUI_gv_pU_BB_Boss = null;
    libVCUI_gf_SetSingularBossBarMaximumValueVoidCampaign(lp_max, true);
    libVCUI_gf_SetSingularBossBarCurrentValueVoidCampaign(lp_max, true);
    libVCUI_gv_pU_BB_HPOldWidth = -1;
    if ((libVCUI_gv_pU_BB_Panel == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/VoidBossUnitFrame");
        libVCUI_gv_pU_BB_Panel = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_BB_Panel, c_triggerControlTypeButton, "ClickableAreaHealthBar");
        libVCUI_gv_pU_BB_ClickableAreaHealthBar = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_BB_Panel, c_triggerControlTypeButton, "ClickableAreaNameLabel");
        libVCUI_gv_pU_BB_ClickableAreaNameLabel = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_BB_Panel, c_triggerControlTypeLabel, "NameLabel");
        libVCUI_gv_pU_BB_TitleLabel = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_BB_Panel, c_triggerControlTypeImage, "HealthBarImage");
        libVCUI_gv_pU_BB_HpCurrentImage = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_BB_Panel, c_triggerControlTypeLabel, "HealthLabel");
        libVCUI_gv_pU_BB_HpLabel = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_BB_Panel, c_triggerControlTypeImage, "ObjectiveBarBorder");
        libVCUI_gv_pU_BB_ObjectiveBG = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_BB_Panel, c_triggerControlTypeImage, "BossBarBorder");
        libVCUI_gv_pU_BB_BossBG = DialogControlLastCreated();
    }

    DialogControlSetVisible(libVCUI_gv_pU_BB_Panel, PlayerGroupAll(), true);
    libVCUI_gf_RefreshSingularBossBarVoidCampaign();
}

void libVCUI_gf_SetSingularBossBarMaximumValueVoidCampaign (int lp_max, bool lp_refresh) {
    // Automatic Variable Declarations
    // Implementation
    libVCUI_gv_pU_BB_MaxValue = IntToFixed(lp_max);
    if ((libVCUI_gv_pU_BB_MaxValue <= 0.0)) {
        libVCUI_gv_pU_BB_MaxValue = 1.0;
    }

    libVCUI_gv_pU_BB_Boss = null;
    if ((lp_refresh == true)) {
        libVCUI_gf_RefreshSingularBossBarVoidCampaign();
    }

}

void libVCUI_gf_SetSingularBossBarCurrentValueVoidCampaign (int lp_current, bool lp_refresh) {
    // Automatic Variable Declarations
    // Implementation
    libVCUI_gv_pU_BB_CurrentValue = IntToFixed(lp_current);
    if ((libVCUI_gv_pU_BB_CurrentValue < 0.0)) {
        libVCUI_gv_pU_BB_CurrentValue = 0.0;
    }

    libVCUI_gv_pU_BB_Boss = null;
    if ((lp_refresh == true)) {
        libVCUI_gf_RefreshSingularBossBarVoidCampaign();
    }

}

void libVCUI_gf_SetSingularBossBarBossVoidCampaign (unit lp_boss, bool lp_refresh) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_boss != null)) {
        TriggerEnable(libVCUI_gt_PU_BB_BossHPChanged, true);
        TriggerEnable(libVCUI_gt_PU_BossBarFocusOnTarget, true);
        TriggerEnable(libVCUI_gt_PU_BB_LoadUpdate, true);
    }

    libVCUI_gv_pU_BB_Boss = lp_boss;
    libVCUI_gv_pU_BB_MaxValue = 0.0;
    libVCUI_gv_pU_BB_CurrentValue = 0.0;
    if ((lp_refresh == true)) {
        libVCUI_gf_RefreshSingularBossBarVoidCampaign();
    }

}

void libVCUI_gf_ShowHideSingularBossBarVoidCampaign (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    if ((libVCUI_gv_pU_BB_Panel == c_invalidDialogControlId)) {
        return ;
    }

    DialogControlSetVisible(libVCUI_gv_pU_BB_Panel, PlayerGroupAll(), lp_showHide);
}

void libVCUI_gf_RefreshSingularBossBarVoidCampaign () {
    // Automatic Variable Declarations
    // Implementation
    if ((libVCUI_gv_pU_BB_Panel == c_invalidDialogControlId)) {
        return ;
    }

    libNtve_gf_SetDialogItemText(libVCUI_gv_pU_BB_TitleLabel, libVCUI_gv_pU_BB_Title, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libVCUI_gv_pU_BB_HpLabel, libVCUI_gf_PU_BB_HPBarFormatLabel(), PlayerGroupAll());
    DialogControlSetSize(libVCUI_gv_pU_BB_HpCurrentImage, PlayerGroupSingle(1), libVCUI_gf_PU_BB_HPBarCurrentWidth(), libVCUI_gv_pUC_BB_HPBarHeight);
    libVCUI_gf_PU_BB_HPBarChange();
    if ((libVCUI_gv_pU_BB_Style == libVCUI_ge_SingularBossBarStyle_Objective)) {
        DialogControlSetVisible(libVCUI_gv_pU_BB_BossBG, PlayerGroupAll(), false);
        DialogControlSetVisible(libVCUI_gv_pU_BB_ObjectiveBG, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(libVCUI_gv_pU_BB_BossBG, PlayerGroupAll(), true);
        DialogControlSetVisible(libVCUI_gv_pU_BB_ObjectiveBG, PlayerGroupAll(), false);
    }
}

void libVCUI_gf_SetSingularBossBarColor (color lp_color) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemColor(libVCUI_gv_pU_BB_HpCurrentImage, lp_color, PlayerGroupAll());
}

void libVCUI_gf_SetSingularBossBarTitleColor (color lp_color) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemColor(libVCUI_gv_pU_BB_TitleLabel, lp_color, PlayerGroupAll());
}

void libVCUI_gf_SetSingularBossBarStyle (int lp_style) {
    // Automatic Variable Declarations
}

void libVCUI_gf_SetHeroPanelUnit (int lp_index, unit lp_heroUnit) {
    // Variable Declarations
    bool lv_noValidHeroes;
    int lv_heroHotkey;

    // Automatic Variable Declarations
    int auto29980022_val;
    const int auto1832E0F2_ae = libVCUI_gv_pUC_VoidHerioUIMaxHeroCount;
    int auto1832E0F2_var;

    // Variable Initialization

    // Implementation
    libVCUI_gv_pU_VoidHeroUIUnit[lp_index] = lp_heroUnit;
    libVCUI_gv_pU_VoidHeroUIType[lp_index] = libVCUI_gf_PU_VoidHeroTypeFromUnitType(UnitGetType(lp_heroUnit));
    libVCUI_gf_EnableLowHealthWarning(lp_index, lp_heroUnit);
    libVCUI_gv_pU_VoidHeroUIShowLevel[lp_index] = false;
    libVCUI_gf_PU_UpdateHeroPanel(lp_index);
    TriggerEnable(libVCUI_gt_PU_VoidHeroUILoadUpdate, true);
    if (((libVCUI_gv_pU_VoidHeroUIType[lp_index] == libVCUI_ge_CampaignHeroes_Kerrigan) || (libVCUI_gv_pU_VoidHeroUIType[lp_index] == libVCUI_ge_CampaignHeroes_KerriganXN))) {
        if ((libVoiC_gf_CurrentMap() == "SC2Epilogue02")) {
            TriggerEnable(libVCUI_gt_PU_VoidHeroUIHandleEpilogue02RaceSwap, true);
        }

        DialogControlSendAnimationEvent(libVCUI_gv_pU_VoidHeroUIPanel[lp_index], PlayerGroupAll(), "SwitchZerg");
    }

    if ((libVCUI_gv_pU_VoidHeroUIUnit[lp_index] == null)) {
        lv_noValidHeroes = true;
        auto1832E0F2_var = 1;
        for ( ; auto1832E0F2_var <= auto1832E0F2_ae; auto1832E0F2_var += 1 ) {
            if ((libVCUI_gv_pU_VoidHeroUIUnit[auto1832E0F2_var] == null)) {
            }
            else {
                lv_noValidHeroes = false;
                break;
            }
        }
        if ((lv_noValidHeroes == true)) {
            TriggerEnable(libVCUI_gt_PU_HeroPanelUpdate, false);
            TriggerEnable(libVCUI_gt_PU_VoidHeroUIUnitDamaged, false);
        }

    }
    else {
        TriggerEnable(libVCUI_gt_PU_HeroPanelUpdate, true);
        TriggerEnable(libVCUI_gt_PU_VoidHeroUIUnitDamaged, true);
        TriggerEnable(libVCUI_gt_PU_VoidHeroUIMouseHoverText, true);
        TriggerEnable(libVCUI_gt_ZS_SwarmHeroUIUnitVitalChange, true);
        libNtve_gf_SetDialogItemAnimationDuration(libVCUI_gv_pU_VoidHeroUIDialogCooldownImage[lp_index], 60.0, PlayerGroupAll());
        auto29980022_val = lp_index;
        if (auto29980022_val == 1) {
            lv_heroHotkey = c_hotkeyHeroSelect0;
        }
        else if (auto29980022_val == 2) {
            lv_heroHotkey = c_hotkeyHeroSelect1;
        }
        else {
        }
        if ((lp_index <= libVCUI_gv_pUC_VoidHerioUIMaxHeroCount)) {
            libNtve_gf_SetDialogItemHotkey(libVCUI_gv_pU_VoidHeroUIDialogButton[lp_index], lv_heroHotkey, PlayerGroupSingle(UnitGetOwner(lp_heroUnit)));
        }
        else {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_VCUI_07D69887"), false);
        }
    }
}

void libVCUI_gf_PU_ShowHideHeroPanel (bool lp_showHide) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoAB7E06F9_ae = libVCUI_gv_pUC_VoidHerioUIMaxHeroCount;
    const int autoAB7E06F9_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (autoAB7E06F9_ai >= 0 && lv_index <= autoAB7E06F9_ae) || (autoAB7E06F9_ai < 0 && lv_index >= autoAB7E06F9_ae) ) ; lv_index += autoAB7E06F9_ai ) {
        if ((libVCUI_gv_pU_VoidHeroUIPanel[lv_index] != c_invalidDialogControlId)) {
            DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIPanel[lv_index], PlayerGroupAll(), lp_showHide);
        }

    }
}

void libVCUI_gf_PU_CreateHeroPanel (int lp_index) {
    // Automatic Variable Declarations
    int auto2536CC65_val;

    // Implementation
    if ((lp_index == 1)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/VoidHeroUnitFrame");
    }
    else {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/SecondaryVoidHeroUnitFrame");
    }
    libVCUI_gv_pU_VoidHeroUIPanel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VoidHeroUIPanel[lp_index], c_triggerControlTypeImage, "BorderImage");
    libVCUI_gv_pU_VoidHeroUIDialogBorderImage[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(libVCUI_gv_pU_VoidHeroUIPanel[lp_index], c_triggerControlTypeImage, "BorderNoEnergyImage");
    libVCUI_gv_pU_VoidHeroUIDialogBorderImageNoEnergy[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(libVCUI_gv_pU_VoidHeroUIPanel[lp_index], c_triggerControlTypeImage, "LevelBox");
    libVCUI_gv_pU_VoidHeroUIDialogLevelBox[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogLevelBox[lp_index], PlayerGroupAll(), true);
    DialogControlHookup(libVCUI_gv_pU_VoidHeroUIPanel[lp_index], c_triggerControlTypeImage, "CooldownImage");
    libVCUI_gv_pU_VoidHeroUIDialogCooldownImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VoidHeroUIPanel[lp_index], c_triggerControlTypeImage, "DamageTakenImage");
    libVCUI_gv_pU_VoidHeroUIDialogDamageTakenImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VoidHeroUIPanel[lp_index], c_triggerControlTypeImage, "EnergyBarImage");
    libVCUI_gv_pU_VoidHeroUIDialogEnergyBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VoidHeroUIPanel[lp_index], c_triggerControlTypeImage, "EnergyBarBackground");
    libVCUI_gv_pU_VoidHeroUIDialogEnergyBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VoidHeroUIPanel[lp_index], c_triggerControlTypeImage, "HealthBarImage");
    libVCUI_gv_pU_VoidHeroUIDialogHealthBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VoidHeroUIPanel[lp_index], c_triggerControlTypeImage, "BarBackground");
    libVCUI_gv_pU_VoidHeroUIDialogHealthBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VoidHeroUIPanel[lp_index], c_triggerControlTypeImage, "IconImage");
    libVCUI_gv_pU_VoidHeroUIDialogIconImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VoidHeroUIPanel[lp_index], c_triggerControlTypeLabel, "DamageTakenLabel");
    libVCUI_gv_pU_VoidHeroUIDialogDamageTakenLabel[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(libVCUI_gv_pU_VoidHeroUIDialogDamageTakenLabel[lp_index], StringToText(""), PlayerGroupAll());
    DialogControlHookup(libVCUI_gv_pU_VoidHeroUIPanel[lp_index], c_triggerControlTypeLabel, "EnergyLabel");
    libVCUI_gv_pU_VoidHeroUIDialogEnergyLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VoidHeroUIPanel[lp_index], c_triggerControlTypeLabel, "HealthLabel");
    libVCUI_gv_pU_VoidHeroUIDialogHealthLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VoidHeroUIPanel[lp_index], c_triggerControlTypeLabel, "LevelLabel");
    libVCUI_gv_pU_VoidHeroUIDialogLevelLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VoidHeroUIPanel[lp_index], c_triggerControlTypeLabel, "NameLabel");
    libVCUI_gv_pU_VoidHeroUIDialogNameLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VoidHeroUIPanel[lp_index], c_triggerControlTypeImage, "ShieldBarImage");
    libVCUI_gv_pU_VoidHeroUIDialogShieldBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VoidHeroUIPanel[lp_index], c_triggerControlTypeImage, "ShieldBarBackground");
    libVCUI_gv_pU_VoidHeroUIDialogShieldBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VoidHeroUIPanel[lp_index], c_triggerControlTypeLabel, "ShieldLabel");
    libVCUI_gv_pU_VoidHeroUIDialogShieldLabel[lp_index] = DialogControlLastCreated();
    auto2536CC65_val = lp_index;
    if (auto2536CC65_val == 1) {
        DialogControlHookupStandard(c_triggerControlTypeUnitTarget, "UIContainer/ConsoleUIContainer/VoidHeroUnitFrame/UnitTargetFrame");
        libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyHeroSelect0, PlayerGroupAll());
    }
    else if (auto2536CC65_val == 2) {
        DialogControlHookupStandard(c_triggerControlTypeUnitTarget, "UIContainer/ConsoleUIContainer/SecondaryVoidHeroUnitFrame/UnitTargetFrame");
        libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyHeroSelect1, PlayerGroupAll());
    }
    else {
    }
    libVCUI_gv_pU_VoidHeroUIDialogButton[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogDamageTakenImage[lp_index], PlayerGroupAll(), false);
    DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogCooldownImage[lp_index], PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemRenderPriority(libVCUI_gv_pU_VoidHeroUIDialogEnergyBarBackground[lp_index], 505, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(libVCUI_gv_pU_VoidHeroUIDialogHealthBarBackground[lp_index], 505, PlayerGroupAll());
    if ((PlayerRace(1) == "Prot")) {
        libNtve_gf_SetDialogItemRenderPriority(libVCUI_gv_pU_VoidHeroUIDialogShieldBarBackground[lp_index], 505, PlayerGroupAll());
        libNtve_gf_SetDialogItemRenderPriority(libVCUI_gv_pU_VoidHeroUIDialogShieldBarImage[lp_index], 507, PlayerGroupAll());
    }

}

int libVCUI_gf_PU_VoidHeroTypeFromUnitType (string lp_unitType) {
    // Automatic Variable Declarations
    string auto066DA9BE_val;

    // Implementation
    auto066DA9BE_val = lp_unitType;
    if (auto066DA9BE_val == "ZeratulVoidAiur01") {
        return libVCUI_ge_CampaignHeroes_Zeratul;
    }
    else if (auto066DA9BE_val == "ZeratulVoid") {
        return libVCUI_ge_CampaignHeroes_Zeratul;
    }
    else if (auto066DA9BE_val == "ArtanisVoid") {
        return libVCUI_ge_CampaignHeroes_Artanis;
    }
    else if (auto066DA9BE_val == "FenixChampion") {
        return libVCUI_ge_CampaignHeroes_Fenix;
    }
    else if (auto066DA9BE_val == "AlarakChampion") {
        return libVCUI_ge_CampaignHeroes_Alarak;
    }
    else if (auto066DA9BE_val == "KaraxChampion") {
        return libVCUI_ge_CampaignHeroes_Karax;
    }
    else if (auto066DA9BE_val == "VorazunChampion") {
        return libVCUI_ge_CampaignHeroes_Vorazun;
    }
    else if (auto066DA9BE_val == "KerriganVoid") {
        return libVCUI_ge_CampaignHeroes_Kerrigan;
    }
    else if (auto066DA9BE_val == "K5Kerrigan") {
        return libVCUI_ge_CampaignHeroes_Kerrigan;
    }
    else if (auto066DA9BE_val == "KerriganVoidUlnar02") {
        return libVCUI_ge_CampaignHeroes_Kerrigan;
    }
    else if (auto066DA9BE_val == "KerriganEpilogue03") {
        return libVCUI_ge_CampaignHeroes_KerriganXN;
    }
    else if (auto066DA9BE_val == "KerriganXelNagaReviveCocoon") {
        return libVCUI_ge_CampaignHeroes_KerriganXNReviving;
    }
    else if (auto066DA9BE_val == "KerriganEpilogue02") {
        return libVCUI_ge_CampaignHeroes_Kerrigan;
    }
    else if (auto066DA9BE_val == "Nova") {
        return libVCUI_ge_CampaignHeroes_Nova;
    }
    else {
    }
    return libVCUI_ge_CampaignHeroes_None;
}

string libVCUI_gf_PU_VoidHeroIcon (int lp_heroType) {
    // Automatic Variable Declarations
    int autoBEEE9A57_val;

    // Implementation
    autoBEEE9A57_val = lp_heroType;
    if (autoBEEE9A57_val == libVCUI_ge_CampaignHeroes_Kerrigan) {
        return "Assets\\Textures\\btn-hero-kerriganqueenofblades.dds";
    }
    else if (autoBEEE9A57_val == libVCUI_ge_CampaignHeroes_KerriganXN) {
        return "Assets\\Textures\\btn-hero-kerriganascended.dds";
    }
    else if (autoBEEE9A57_val == libVCUI_ge_CampaignHeroes_KerriganXNReviving) {
        return "Assets\\Textures\\btn-hero-kerriganascended.dds";
    }
    else if (autoBEEE9A57_val == libVCUI_ge_CampaignHeroes_Zeratul) {
        return "Assets\\Textures\\ui-heroicon-zeratul.dds";
    }
    else if (autoBEEE9A57_val == libVCUI_ge_CampaignHeroes_Vorazun) {
        return "Assets\\Textures\\btn-hero-vorazun.dds";
    }
    else if (autoBEEE9A57_val == libVCUI_ge_CampaignHeroes_Artanis) {
        return "Assets\\Textures\\btn-hero-artanis.dds";
    }
    else if (autoBEEE9A57_val == libVCUI_ge_CampaignHeroes_Fenix) {
        return "Assets\\Textures\\btn-hero-fenix.dds";
    }
    else if (autoBEEE9A57_val == libVCUI_ge_CampaignHeroes_Alarak) {
        return "Assets\\Textures\\btn-hero-alarak.dds";
    }
    else if (autoBEEE9A57_val == libVCUI_ge_CampaignHeroes_Karax) {
        return "Assets\\Textures\\btn-hero-karax.dds";
    }
    else if (autoBEEE9A57_val == libVCUI_ge_CampaignHeroes_Nova) {
        return "Assets\\Textures\\ui-heroicon-nova.dds";
    }
    else {
    }
    return "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds";
}

void libVCUI_gf_PU_UpdateHeroPanel (int lp_index) {
    // Variable Declarations
    text lv_hotkey;
    int lv_life;
    int lv_shields;
    int lv_energy;

    // Automatic Variable Declarations
    int autoCE8EC21A_val;

    // Variable Initialization

    // Implementation
    if ((libVCUI_gv_pU_VoidHeroUIUnit[lp_index] == null)) {
        if ((libVCUI_gv_pU_VoidHeroUIPanel[lp_index] != c_invalidDialogControlId)) {
            DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIPanel[lp_index], PlayerGroupAll(), false);
        }

        return ;
    }

    if ((libVCUI_gv_pU_VoidHeroUIPanel[lp_index] == c_invalidDialogControlId)) {
        libVCUI_gf_PU_CreateHeroPanel(lp_index);
    }

    DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIPanel[lp_index], PlayerGroupAll(), true);
    autoCE8EC21A_val = lp_index;
    if (autoCE8EC21A_val == 1) {
        lv_hotkey = StringExternal("Param/Value/lib_VCUI_DD1F6DE6");
    }
    else if (autoCE8EC21A_val == 2) {
        lv_hotkey = StringExternal("Param/Value/lib_VCUI_AC02B287");
    }
    else {
    }
    if ((libVCUI_gv_pU_VoidHeroUIType[lp_index] == libVCUI_ge_CampaignHeroes_KerriganXNReviving)) {
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_VoidHeroUIDialogNameLabel[lp_index], UnitTypeGetName(UnitGetType(libVCUI_gv_pU_VoidHeroUIUnit[lp_index])), PlayerGroupAll());
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_VCUI_A27EDFDB", "A", UnitTypeGetName(UnitGetType(libVCUI_gv_pU_VoidHeroUIUnit[lp_index])));
        TextExpressionSetToken("Param/Expression/lib_VCUI_A27EDFDB", "B", lv_hotkey);
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_VoidHeroUIDialogNameLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_VCUI_A27EDFDB"), PlayerGroupAll());
    }
    libNtve_gf_SetDialogItemImage(libVCUI_gv_pU_VoidHeroUIDialogIconImage[lp_index], libVCUI_gf_PU_VoidHeroIcon(libVCUI_gv_pU_VoidHeroUIType[lp_index]), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_VCUI_8EF0FE86", "CurrentLife", FixedToText(UnitGetPropertyFixed(libVCUI_gv_pU_VoidHeroUIUnit[lp_index], c_unitPropLife, c_unitPropCurrent), 0));
    TextExpressionSetToken("Param/Expression/lib_VCUI_8EF0FE86", "MaxLife", FixedToText(UnitGetPropertyFixed(libVCUI_gv_pU_VoidHeroUIUnit[lp_index], c_unitPropLifeMax, c_unitPropCurrent), 0));
    libNtve_gf_SetDialogItemText(libVCUI_gv_pU_VoidHeroUIDialogHealthLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_VCUI_8EF0FE86"), PlayerGroupAll());
    lv_life = FixedToInt((UnitGetPropertyFixed(libVCUI_gv_pU_VoidHeroUIUnit[lp_index], c_unitPropLifePercent, c_unitPropCurrent) * (IntToFixed(libVCUI_gv_pUC_HEROUIBARWIDTH) / 100.0)));
    if ((lv_life > 0)) {
        DialogControlSetSize(libVCUI_gv_pU_VoidHeroUIDialogHealthBarImage[lp_index], PlayerGroupAll(), lv_life, libVCUI_gv_pUC_HEROUILIFEBARHEIGHT);
        DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogHealthBarImage[lp_index], PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogHealthBarImage[lp_index], PlayerGroupAll(), false);
    }
    if ((PlayerRace(1) == "Prot")) {
        if (((UnitGetPropertyFixed(libVCUI_gv_pU_VoidHeroUIUnit[lp_index], c_unitPropShieldsMax, c_unitPropCurrent) > 0) || (libVCUI_gf_PU_HeroHasShields(libVCUI_gv_pU_VoidHeroUIType[lp_index]) == true))) {
            DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogShieldBarBackground[lp_index], PlayerGroupAll(), true);
            TextExpressionSetToken("Param/Expression/lib_VCUI_B73F5C5A", "CurrentLife", FixedToText(UnitGetPropertyFixed(libVCUI_gv_pU_VoidHeroUIUnit[lp_index], c_unitPropShields, c_unitPropCurrent), 0));
            TextExpressionSetToken("Param/Expression/lib_VCUI_B73F5C5A", "MaxLife", FixedToText(UnitGetPropertyFixed(libVCUI_gv_pU_VoidHeroUIUnit[lp_index], c_unitPropShieldsMax, c_unitPropCurrent), 0));
            libNtve_gf_SetDialogItemText(libVCUI_gv_pU_VoidHeroUIDialogShieldLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_VCUI_B73F5C5A"), PlayerGroupAll());
            lv_shields = FixedToInt((UnitGetPropertyFixed(libVCUI_gv_pU_VoidHeroUIUnit[lp_index], c_unitPropShieldsPercent, c_unitPropCurrent) * (IntToFixed(libVCUI_gv_pUC_HEROUIBARWIDTH) / 100.0)));
            if ((lv_shields > 0)) {
                DialogControlSetSize(libVCUI_gv_pU_VoidHeroUIDialogShieldBarImage[lp_index], PlayerGroupAll(), lv_shields, libVCUI_gv_pUC_HEROUISHIELDBARHEIGHT);
                DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogShieldBarImage[lp_index], PlayerGroupAll(), true);
            }
            else {
                DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogShieldBarImage[lp_index], PlayerGroupAll(), false);
            }
        }
        else {
            DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogShieldBarImage[lp_index], PlayerGroupAll(), false);
            DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogShieldBarBackground[lp_index], PlayerGroupAll(), false);
        }
    }
    else {
        DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogShieldBarImage[lp_index], PlayerGroupAll(), false);
        DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogShieldBarBackground[lp_index], PlayerGroupAll(), false);
    }
    TextExpressionSetToken("Param/Expression/lib_VCUI_2C92FDA7", "CurrentEnergy", FixedToText(UnitGetPropertyFixed(libVCUI_gv_pU_VoidHeroUIUnit[lp_index], c_unitPropEnergy, c_unitPropCurrent), 0));
    TextExpressionSetToken("Param/Expression/lib_VCUI_2C92FDA7", "MaxEnergy", FixedToText(UnitGetPropertyFixed(libVCUI_gv_pU_VoidHeroUIUnit[lp_index], c_unitPropEnergyMax, c_unitPropCurrent), 0));
    libNtve_gf_SetDialogItemText(libVCUI_gv_pU_VoidHeroUIDialogEnergyLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_VCUI_2C92FDA7"), PlayerGroupAll());
    if ((UnitGetPropertyFixed(libVCUI_gv_pU_VoidHeroUIUnit[lp_index], c_unitPropEnergyMax, c_unitPropCurrent) == 0)) {
        lv_energy = 0;
        DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogBorderImageNoEnergy[lp_index], PlayerGroupAll(), true);
        DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogBorderImage[lp_index], PlayerGroupAll(), false);
        DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogEnergyBarBackground[lp_index], PlayerGroupAll(), false);
    }
    else {
        lv_energy = FixedToInt((UnitGetPropertyFixed(libVCUI_gv_pU_VoidHeroUIUnit[lp_index], c_unitPropEnergyPercent, c_unitPropCurrent) * (IntToFixed(libVCUI_gv_pUC_HEROUIBARWIDTH) / 100.0)));
        DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogBorderImage[lp_index], PlayerGroupAll(), true);
        DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogEnergyBarBackground[lp_index], PlayerGroupAll(), true);
    }
    if ((lv_energy > 0)) {
        DialogControlSetSize(libVCUI_gv_pU_VoidHeroUIDialogEnergyBarImage[lp_index], PlayerGroupAll(), lv_energy, libVCUI_gv_pUC_HEROUIENERGYBARHEIGHT);
        DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogEnergyBarImage[lp_index], PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogEnergyBarImage[lp_index], PlayerGroupAll(), false);
    }
    libNtve_gf_SetDialogItemText(libVCUI_gv_pU_VoidHeroUIDialogLevelLabel[lp_index], StringToText(""), PlayerGroupAll());
    DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogLevelBox[lp_index], PlayerGroupAll(), false);
    if ((libVCUI_gv_pU_VoidHeroUIDamageTimer[lp_index] > 0.0)) {
        libVCUI_gv_pU_VoidHeroUIDamageTimer[lp_index] -= libVCUI_gv_pUC_VoidHeroUIUpdateFrequency;
        if ((libVCUI_gv_pU_VoidHeroUIDamageTimer[lp_index] <= 0.0)) {
            DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogDamageTakenLabel[lp_index], PlayerGroupAll(), false);
            DialogControlFadeTransparency(libVCUI_gv_pU_VoidHeroUIDialogDamageTakenImage[lp_index], PlayerGroupAll(), 1.0, 100.0);
        }

    }

    if ((UnitIsAlive(libVCUI_gv_pU_VoidHeroUIUnit[lp_index]) == false) && (libVCMI_gf_GameIsOver() == false)) {
        if ((libVCUI_gv_pU_VoidHeroUIRevivable[lp_index] == true) && (PlayerGetCooldown(1, libVoiC_gf_PC_ChampResAbility(libVCUI_gf_PU_PresetToHeroGameLink(libVCUI_gv_pU_VoidHeroUIType[lp_index]))) > 0.0)) {
            libNtve_gf_SetDialogItemAnimationTime(libVCUI_gv_pU_VoidHeroUIDialogCooldownImage[lp_index], (60.0 * (1 - PlayerGetCooldown(1, libVoiC_gf_PC_ChampResAbility(libVCUI_gf_PU_PresetToHeroGameLink(libVCUI_gv_pU_VoidHeroUIType[lp_index])))/libVCUI_gv_pU_ChampionReviveTimer) ), PlayerGroupAll());
            DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogCooldownImage[lp_index], PlayerGroupAll(), true);
        }
        else if (true) {
            DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogCooldownImage[lp_index], PlayerGroupAll(), false);
        }
        if ((UnitGetPropertyFixed(libVCUI_gv_pU_VoidHeroUIUnit[lp_index], c_unitPropEnergyMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogEnergyBarImage[lp_index], PlayerGroupAll(), false);
        }

    }
    else {
        DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogCooldownImage[lp_index], PlayerGroupAll(), false);
    }
    libNtve_gf_SetDialogItemUnit(libVCUI_gv_pU_VoidHeroUIDialogButton[lp_index], libVCUI_gv_pU_VoidHeroUIUnit[lp_index], PlayerGroupAll());
}

string libVCUI_gf_PU_PresetToHeroGameLink (int lp_championPreset) {
    // Automatic Variable Declarations
    int auto7A2827D5_val;

    // Implementation
    auto7A2827D5_val = lp_championPreset;
    if (auto7A2827D5_val == libVCUI_ge_CampaignHeroes_Alarak) {
        return "Alarak";
    }
    else if (auto7A2827D5_val == libVCUI_ge_CampaignHeroes_Artanis) {
        return "Artanis";
    }
    else if (auto7A2827D5_val == libVCUI_ge_CampaignHeroes_Fenix) {
        return "Fenix";
    }
    else if (auto7A2827D5_val == libVCUI_ge_CampaignHeroes_Karax) {
        return "Karax";
    }
    else if (auto7A2827D5_val == libVCUI_ge_CampaignHeroes_Vorazun) {
        return "Mohandar";
    }
    else {
        return null;
    }
}

bool libVCUI_gf_PU_HeroHasShields (int lp_champion) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_champion == libVCUI_ge_CampaignHeroes_Kerrigan) || (lp_champion == libVCUI_ge_CampaignHeroes_KerriganXN))) {
        return false;
    }
    else {
        return true;
    }
}

void libVCUI_gf_EnableLowHealthWarning (int lp_slotIndex, unit lp_watchedUnit) {
    // Automatic Variable Declarations
    // Implementation
    libVCUI_gv_pU_HealthWatchUnit[lp_slotIndex] = lp_watchedUnit;
    libVCUI_gv_pU_HealthWatchLastHP[lp_slotIndex] = (UnitGetPropertyFixed(lp_watchedUnit, c_unitPropLife, c_unitPropCurrent)+UnitGetPropertyFixed(lp_watchedUnit, c_unitPropShields, c_unitPropCurrent));
    TriggerEnable(libVCUI_gt_PU_HealthWatchLifeCheck, true);
    TriggerEnable(libVCUI_gt_PU_HealthWatchUnitDies, true);
}

void libVCUI_gf_PU_HealthWatchCreate () {
    // Automatic Variable Declarations
    // Implementation
    if ((libVCUI_gv_pU_HealthWatchDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(1600, 1200, c_anchorCenter, 0, 0, false);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    libVCUI_gv_pU_HealthWatchDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1600, 1200, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_ingame_effects_splash2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libVCUI_gv_pU_HealthWatchImage = DialogControlLastCreated();
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
}

bool libVCUI_gf_PU_HealthWatchUnitBelowThreshold (unit lp_watchUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((libVCUI_gv_pUC_HealthWatchThreshold > ((UnitGetPropertyFixed(lp_watchUnit, c_unitPropLife, c_unitPropCurrent)+UnitGetPropertyFixed(lp_watchUnit, c_unitPropShields, c_unitPropCurrent))/(UnitGetPropertyFixed(lp_watchUnit, c_unitPropLifeMax, c_unitPropCurrent)+UnitGetPropertyFixed(lp_watchUnit, c_unitPropShieldsMax, c_unitPropCurrent))))) {
        return true;
    }

    return false;
}

void libVCUI_gf_PM_StopHeroLowHPSound () {
    // Automatic Variable Declarations
    // Implementation
    if ((libVCUI_gv_pU_HealthWatchSoundStart != null)) {
        SoundStop(libVCUI_gv_pU_HealthWatchSoundStart, true);
        libVCUI_gv_pU_HealthWatchSoundStart = null;
    }

    if ((libVCUI_gv_pU_HealthWatchSoundBreath != null)) {
        SoundStop(libVCUI_gv_pU_HealthWatchSoundBreath, true);
        libVCUI_gv_pU_HealthWatchSoundBreath = null;
    }

    if ((libVCUI_gv_pU_HealthWatchSoundHeartbeat != null)) {
        SoundStop(libVCUI_gv_pU_HealthWatchSoundHeartbeat, true);
        libVCUI_gv_pU_HealthWatchSoundHeartbeat = null;
    }

    TriggerStop(libVCUI_gt_PU_HealthWatchBreathLoop);
    TriggerStop(libVCUI_gt_PU_HealthWatchHeartLoop);
    TriggerEnable(libVCUI_gt_PU_HealthWatchStartSound, true);
    TriggerEnable(libVCUI_gt_PU_HealthWatchBreathLoop, true);
    TriggerEnable(libVCUI_gt_PU_HealthWatchHeartLoop, true);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_LowHealthEnd);
}

trigger auto_libVCUI_gf_PU_UpdateObjectivePanel_Trigger = null;

void libVCUI_gf_PU_UpdateObjectivePanel () {
    if (auto_libVCUI_gf_PU_UpdateObjectivePanel_Trigger == null) {
        auto_libVCUI_gf_PU_UpdateObjectivePanel_Trigger = TriggerCreate("auto_libVCUI_gf_PU_UpdateObjectivePanel_TriggerFunc");
    }

    TriggerExecute(auto_libVCUI_gf_PU_UpdateObjectivePanel_Trigger, false, false);
}

bool auto_libVCUI_gf_PU_UpdateObjectivePanel_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    while (true) {
        if ((libVCUI_gv_pU_ObjectivePanel != c_invalidDialogControlId) && (libNtve_gf_PlayerInCinematicMode(1) == false)) {
            if ((PortraitVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), 1) == true) && (libVCUI_gv_pU_VoidHeroUIPanel[1] != c_invalidDialogControlId) && (DialogControlIsVisible(libVCUI_gv_pU_VoidHeroUIPanel[1], 1) == true) && (libVCUI_gv_pU_VoidHeroUIPanel[2] != c_invalidDialogControlId) && (DialogControlIsVisible(libVCUI_gv_pU_VoidHeroUIPanel[2], 1) == true)) {
                libNtve_gf_SetDialogItemAlphaMask(libVCUI_gv_pU_ObjectivePanel, "@UI/ObjectivePanelMaskTwoHeroes", PlayerGroupAll());
            }
            else if ((PortraitVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), 1) == true) && (((libVCUI_gv_pU_VoidHeroUIPanel[1] != c_invalidDialogControlId) && (DialogControlIsVisible(libVCUI_gv_pU_VoidHeroUIPanel[1], 1) == true)) || ((libVCUI_gv_pU_VoidHeroUIPanel[2] != c_invalidDialogControlId) && (DialogControlIsVisible(libVCUI_gv_pU_VoidHeroUIPanel[2], 1) == true)))) {
                libNtve_gf_SetDialogItemAlphaMask(libVCUI_gv_pU_ObjectivePanel, "", PlayerGroupAll());
            }
            else if (((PortraitVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), 1) == false) || (((libVCUI_gv_pU_VoidHeroUIPanel[1] == c_invalidDialogControlId) || (DialogControlIsVisible(libVCUI_gv_pU_VoidHeroUIPanel[1], 1) == false)) && ((libVCUI_gv_pU_VoidHeroUIPanel[2] == c_invalidDialogControlId) || (DialogControlIsVisible(libVCUI_gv_pU_VoidHeroUIPanel[2], 1) == false))))) {
                libNtve_gf_SetDialogItemAlphaMask(libVCUI_gv_pU_ObjectivePanel, "", PlayerGroupAll());
            }
        }

        Wait(0.5, c_timeGame);
    }
    return true;
}

trigger auto_libVCUI_gf_DisplayProgressBar_Trigger = null;
text auto_libVCUI_gf_DisplayProgressBar_lp_title;
int auto_libVCUI_gf_DisplayProgressBar_lp_min;
int auto_libVCUI_gf_DisplayProgressBar_lp_max;

void libVCUI_gf_DisplayProgressBar (text lp_title, int lp_min, int lp_max) {
    auto_libVCUI_gf_DisplayProgressBar_lp_title = lp_title;
    auto_libVCUI_gf_DisplayProgressBar_lp_min = lp_min;
    auto_libVCUI_gf_DisplayProgressBar_lp_max = lp_max;

    if (auto_libVCUI_gf_DisplayProgressBar_Trigger == null) {
        auto_libVCUI_gf_DisplayProgressBar_Trigger = TriggerCreate("auto_libVCUI_gf_DisplayProgressBar_TriggerFunc");
    }

    TriggerExecute(auto_libVCUI_gf_DisplayProgressBar_Trigger, false, false);
}

bool auto_libVCUI_gf_DisplayProgressBar_TriggerFunc (bool testConds, bool runActions) {
    text lp_title = auto_libVCUI_gf_DisplayProgressBar_lp_title;
    int lp_min = auto_libVCUI_gf_DisplayProgressBar_lp_min;
    int lp_max = auto_libVCUI_gf_DisplayProgressBar_lp_max;

    // Variable Declarations
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_image = "Assets\\Textures\\ui_loadingbar_metalframe_protoss.dds";

    // Implementation
    if ((libVCUI_gv_pU_ProgressBarPanel == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/ProgressFrameTemplate");
        libVCUI_gv_pU_ProgressBarPanel = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_ProgressBarPanel, c_triggerControlTypeLabel, "NameLabel");
        libVCUI_gv_pU_ProgressBarLabelTitle = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_ProgressBarPanel, c_triggerControlTypeImage, "BarImage");
        libVCUI_gv_pU_ProgressBarImageBar = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_ProgressBarPanel, c_triggerControlTypeLabel, "BarLabel");
        libVCUI_gv_pU_ProgressBarLabelBarLeft = DialogControlLastCreated();
    }

    libVCUI_gf_SetProgressBarTitle(lp_title);
    libVCUI_gf_SetProgressBarValueRange(lp_min, lp_max);
    DialogControlSetVisible(libVCUI_gv_pU_ProgressBarPanel, PlayerGroupAll(), true);
    libVCUI_gv_pU_ProgressBarShowing = true;
    while (true) {
        if ((libVCUI_gv_pU_ProgressBarPanel == c_invalidDialogControlId)) {
            return true;
        }

        if ((DialogControlIsVisible(libVCUI_gv_pU_ProgressBarPanel, 1) == true)) {
            libVCUI_gf_PU_UpdateProgressBar();
        }

        Wait(0.25, c_timeGame);
    }
    return true;
}

void libVCUI_gf_SetProgressBarTitle (text lp_title) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libVCUI_gv_pU_ProgressBarLabelTitle, lp_title, PlayerGroupAll());
}

void libVCUI_gf_SetProgressBarValueRange (int lp_min, int lp_max) {
    // Automatic Variable Declarations
    // Implementation
    libVCUI_gv_pU_ProgressBarMin = lp_min;
    libVCUI_gv_pU_ProgressBarMax = lp_max;
}

void libVCUI_gf_SetProgressBarLabel (text lp_label) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libVCUI_gv_pU_ProgressBarLabelBarLeft, lp_label, PlayerGroupAll());
}

void libVCUI_gf_SetProgressBarProgress (int lp_progress) {
    // Automatic Variable Declarations
    // Implementation
    libVCUI_gv_pU_ProgressBarProgress = lp_progress;
}

void libVCUI_gf_SetProgressBarColor (color lp_color) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemColor(libVCUI_gv_pU_ProgressBarImageBar, lp_color, PlayerGroupAll());
}

void libVCUI_gf_ShowHideProgressBar (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    if ((libVCUI_gv_pU_ProgressBarPanel == c_invalidDialogControlId)) {
        return ;
    }

    if ((lp_showHide == true)) {
        libVCUI_gf_PU_UpdateProgressBar();
    }

    DialogControlSetVisible(libVCUI_gv_pU_ProgressBarPanel, PlayerGroupAll(), lp_showHide);
}

void libVCUI_gf_PU_UpdateProgressBar () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogControlSetSize(libVCUI_gv_pU_ProgressBarImageBar, PlayerGroupAll(), MaxI(FixedToInt((IntToFixed(libVCUI_gv_pUC_ProgressBarWidth) * (IntToFixed(libVCUI_gv_pU_ProgressBarProgress) / IntToFixed(libVCUI_gv_pU_ProgressBarMax)))), 1), libVCUI_gv_pUC_ProgressBarHeight);
    DialogControlSetVisible(libVCUI_gv_pU_ProgressBarImageBar, PlayerGroupAll(), true);
}

color libVCUI_gf_GetProgressBarColorCampaign () {
    // Automatic Variable Declarations
    // Implementation
    return Color(23.53, 86.67, 100.00);
}

trigger auto_libVCUI_gf_DisplayProgressBarUnitOld_Trigger = null;
unit auto_libVCUI_gf_DisplayProgressBarUnitOld_lp_unit;
int auto_libVCUI_gf_DisplayProgressBarUnitOld_lp_minValue;
int auto_libVCUI_gf_DisplayProgressBarUnitOld_lp_maxValue;
text auto_libVCUI_gf_DisplayProgressBarUnitOld_lp_labelText;
int auto_libVCUI_gf_DisplayProgressBarUnitOld_lp_offsetX;
int auto_libVCUI_gf_DisplayProgressBarUnitOld_lp_offsetY;
string auto_libVCUI_gf_DisplayProgressBarUnitOld_lp_attachment;

void libVCUI_gf_DisplayProgressBarUnitOld (unit lp_unit, int lp_minValue, int lp_maxValue, text lp_labelText, int lp_offsetX, int lp_offsetY, string lp_attachment) {
    auto_libVCUI_gf_DisplayProgressBarUnitOld_lp_unit = lp_unit;
    auto_libVCUI_gf_DisplayProgressBarUnitOld_lp_minValue = lp_minValue;
    auto_libVCUI_gf_DisplayProgressBarUnitOld_lp_maxValue = lp_maxValue;
    auto_libVCUI_gf_DisplayProgressBarUnitOld_lp_labelText = lp_labelText;
    auto_libVCUI_gf_DisplayProgressBarUnitOld_lp_offsetX = lp_offsetX;
    auto_libVCUI_gf_DisplayProgressBarUnitOld_lp_offsetY = lp_offsetY;
    auto_libVCUI_gf_DisplayProgressBarUnitOld_lp_attachment = lp_attachment;

    if (auto_libVCUI_gf_DisplayProgressBarUnitOld_Trigger == null) {
        auto_libVCUI_gf_DisplayProgressBarUnitOld_Trigger = TriggerCreate("auto_libVCUI_gf_DisplayProgressBarUnitOld_TriggerFunc");
    }

    TriggerExecute(auto_libVCUI_gf_DisplayProgressBarUnitOld_Trigger, false, false);
}

bool auto_libVCUI_gf_DisplayProgressBarUnitOld_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_libVCUI_gf_DisplayProgressBarUnitOld_lp_unit;
    int lp_minValue = auto_libVCUI_gf_DisplayProgressBarUnitOld_lp_minValue;
    int lp_maxValue = auto_libVCUI_gf_DisplayProgressBarUnitOld_lp_maxValue;
    text lp_labelText = auto_libVCUI_gf_DisplayProgressBarUnitOld_lp_labelText;
    int lp_offsetX = auto_libVCUI_gf_DisplayProgressBarUnitOld_lp_offsetX;
    int lp_offsetY = auto_libVCUI_gf_DisplayProgressBarUnitOld_lp_offsetY;
    string lp_attachment = auto_libVCUI_gf_DisplayProgressBarUnitOld_lp_attachment;

    // Variable Declarations
    int lv_progressBarDialog;
    int lv_progressBarPanel;
    int lv_progressBarLabel;
    int lv_progressBarValue;
    int lv_progressBarProgressBar;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarDialog = c_invalidDialogId;
    lv_progressBarPanel = c_invalidDialogControlId;
    lv_progressBarLabel = c_invalidDialogControlId;
    lv_progressBarValue = c_invalidDialogControlId;
    lv_progressBarProgressBar = c_invalidDialogControlId;

    // Implementation
    if ((DataTableGetDialog(true, ("ProgressBar_" + IntToString((libVCUI_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog)) + "_" + IntToString(UnitGetTag(lp_unit)))) != c_invalidDialogId)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_VCUI_FB61F536"), true);
        libVCUI_gf_DestroyProgressBarUnitOld(lp_unit);
    }

    DialogCreate(210, 75, c_anchorCenter, 0, 0, true);
    lv_progressBarDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetPositionRelativeToUnit(DialogLastCreated(), lp_unit, lp_attachment, lp_offsetX, lp_offsetY);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "HotS_GameUnitFrame/SmallProgressUnitFrameTemplate");
    lv_progressBarPanel = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookup(lv_progressBarPanel, c_triggerControlTypeLabel, "NameLabel");
    lv_progressBarLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lv_progressBarLabel, lp_labelText, PlayerGroupAll());
    DialogControlHookup(lv_progressBarPanel, c_triggerControlTypeLabel, "ValueLabel");
    lv_progressBarValue = DialogControlLastCreated();
    DialogControlHookup(lv_progressBarPanel, c_triggerControlTypeImage, "BarImage");
    lv_progressBarProgressBar = DialogControlLastCreated();
    DialogSetVisible(lv_progressBarDialog, PlayerGroupAll(), true);
    DataTableSetDialog(true, libVCUI_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog), lv_progressBarDialog);
    libNtve_gf_SaveDataTableValueDialogItem(true, libVCUI_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Panel), lv_progressBarPanel);
    libNtve_gf_SaveDataTableValueDialogItem(true, libVCUI_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_ProgressBar), lv_progressBarProgressBar);
    libNtve_gf_SaveDataTableValueDialogItem(true, libVCUI_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Label), lv_progressBarLabel);
    libNtve_gf_SaveDataTableValueDialogItem(true, libVCUI_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Value), lv_progressBarValue);
    DataTableSetInt(true, libVCUI_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnitStoredValuesOld_MinValue), lp_minValue);
    DataTableSetInt(true, libVCUI_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnitStoredValuesOld_MaxValue), lp_maxValue);
    DataTableSetInt(true, libVCUI_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnitStoredValuesOld_OffsetX), lp_offsetX);
    DataTableSetInt(true, libVCUI_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnitStoredValuesOld_OffsetY), lp_offsetY);
    DataTableSetString(true, libVCUI_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnitStoredValuesOld_Attachment), (lp_attachment));
    while ((lp_unit != null) && (lv_progressBarDialog != c_invalidDialogId)) {
        libVCUI_gf_PU_UpdateProgressBarUnitOld(lp_unit);
        lv_progressBarDialog = DataTableGetDialog(true, libVCUI_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog));
        Wait(0.25, c_timeReal);
    }
    return true;
}

void libVCUI_gf_DestroyProgressBarUnitOld (unit lp_unit) {
    // Variable Declarations
    int lv_progressBarDialog;
    int lv_progressBarPanel;
    int lv_progressBarLabel;
    int lv_progressBarValue;
    int lv_progressBarProgressBar;
    int lv_noDialog;
    int lv_noDialogItem;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarDialog = c_invalidDialogId;
    lv_progressBarPanel = c_invalidDialogControlId;
    lv_progressBarLabel = c_invalidDialogControlId;
    lv_progressBarValue = c_invalidDialogControlId;
    lv_progressBarProgressBar = c_invalidDialogControlId;
    lv_noDialog = c_invalidDialogId;
    lv_noDialogItem = c_invalidDialogControlId;

    // Implementation
    lv_progressBarDialog = DataTableGetDialog(true, libVCUI_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog));
    lv_progressBarProgressBar = libNtve_gf_ValueFromDataTableDialogItem(true, libVCUI_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_ProgressBar));
    lv_progressBarValue = libNtve_gf_ValueFromDataTableDialogItem(true, libVCUI_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Value));
    lv_progressBarLabel = libNtve_gf_ValueFromDataTableDialogItem(true, libVCUI_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Value));
    lv_progressBarPanel = libNtve_gf_ValueFromDataTableDialogItem(true, libVCUI_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Panel));
    DialogControlDestroy(lv_progressBarPanel);
    DialogControlDestroy(lv_progressBarProgressBar);
    DialogControlDestroy(lv_progressBarValue);
    DialogControlDestroy(lv_progressBarLabel);
    DialogDestroy(lv_progressBarDialog);
    DataTableSetDialog(true, libVCUI_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog), lv_noDialog);
    libNtve_gf_SaveDataTableValueDialogItem(true, libVCUI_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Panel), lv_noDialogItem);
    libNtve_gf_SaveDataTableValueDialogItem(true, libVCUI_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_ProgressBar), lv_noDialogItem);
    libNtve_gf_SaveDataTableValueDialogItem(true, libVCUI_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Value), lv_noDialogItem);
    libNtve_gf_SaveDataTableValueDialogItem(true, libVCUI_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Label), lv_noDialogItem);
}

void libVCUI_gf_SetProgressBarProgressUnitOld (unit lp_unit, int lp_value) {
    // Variable Declarations
    int lv_minValue;
    int lv_maxValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_minValue = DataTableGetInt(true, libVCUI_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnitStoredValuesOld_MinValue));
    lv_maxValue = DataTableGetInt(true, libVCUI_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnitStoredValuesOld_MaxValue));

    // Implementation
    if (((lp_value >= lv_minValue) && (lp_value <= lv_maxValue))) {
        DataTableSetInt(true, libVCUI_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnitStoredValuesOld_CurValue), lp_value);
    }
    else {
        TriggerDebugOutput(1, StringToText(("Progress Bar (Unit) Value (" + IntToString(lp_value) + ") outside of set Min (" + IntToString(lv_minValue) + ") and Max (" + IntToString(lv_maxValue) + ").")), true);
    }
    libVCUI_gf_PU_UpdateProgressBarUnitOld(lp_unit);
}

void libVCUI_gf_MoveProgressBarUnitOld (unit lp_unit, int lp_offsetX, int lp_offsetY) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, libVCUI_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnitStoredValuesOld_OffsetX), lp_offsetX);
    DataTableSetInt(true, libVCUI_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnitStoredValuesOld_OffsetY), lp_offsetY);
    libVCUI_gf_PU_UpdateProgressBarUnitOld(lp_unit);
}

void libVCUI_gf_SetProgresBarTitleUnitOld (unit lp_unit, text lp_titleText) {
    // Variable Declarations
    int lv_progressBarLabel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarLabel = c_invalidDialogControlId;

    // Implementation
    lv_progressBarLabel = libNtve_gf_ValueFromDataTableDialogItem(true, libVCUI_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Label));
    libNtve_gf_SetDialogItemText(lv_progressBarLabel, lp_titleText, PlayerGroupAll());
}

void libVCUI_gf_SetProgressBarValueRangeUnitOld (unit lp_unit, int lp_minValue, int lp_maxValue) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, libVCUI_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnitStoredValuesOld_MinValue), lp_minValue);
    DataTableSetInt(true, libVCUI_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnitStoredValuesOld_MaxValue), lp_maxValue);
    libVCUI_gf_PU_UpdateProgressBarUnitOld(lp_unit);
}

void libVCUI_gf_ShowHideProgressBarUnitOld (unit lp_unit, bool lp_showHide) {
    // Variable Declarations
    int lv_progressBarDialog;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarDialog = c_invalidDialogId;

    // Implementation
    lv_progressBarDialog = DataTableGetDialog(true, libVCUI_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog));
    DialogSetVisible(lv_progressBarDialog, PlayerGroupAll(), lp_showHide);
    libVCUI_gf_PU_UpdateProgressBarUnitOld(lp_unit);
}

void libVCUI_gf_PU_UpdateProgressBarUnitOld (unit lp_unit) {
    // Variable Declarations
    int lv_progressBarDialog;
    int lv_progressBarPanel;
    int lv_progressBarLabel;
    int lv_progressBarValue;
    int lv_progressBarProgressBar;
    const int lv_c_Width = 180;
    const int lv_c_Height = 12;
    string lv_dataTableString;
    string lv_attachmentPreset;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarDialog = c_invalidDialogId;
    lv_progressBarPanel = c_invalidDialogControlId;
    lv_progressBarLabel = c_invalidDialogControlId;
    lv_progressBarValue = c_invalidDialogControlId;
    lv_progressBarProgressBar = c_invalidDialogControlId;
    lv_dataTableString = DataTableGetString(true, libVCUI_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnitStoredValuesOld_Attachment));
    lv_attachmentPreset = lv_dataTableString;

    // Implementation
    if (((lp_unit == null) || (UnitIsAlive(lp_unit) == false))) {
        libVCUI_gf_DestroyProgressBarUnitOld(lp_unit);
        return ;
    }

    lv_progressBarDialog = DataTableGetDialog(true, libVCUI_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog));
    if ((lv_progressBarDialog == c_invalidDialogId)) {
        return ;
    }

    lv_progressBarDialog = DataTableGetDialog(true, libVCUI_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog));
    lv_progressBarProgressBar = libNtve_gf_ValueFromDataTableDialogItem(true, libVCUI_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_ProgressBar));
    lv_progressBarValue = libNtve_gf_ValueFromDataTableDialogItem(true, libVCUI_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Value));
    DialogSetPositionRelativeToUnit(lv_progressBarDialog, lp_unit, lv_attachmentPreset, DataTableGetInt(true, libVCUI_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnitStoredValuesOld_OffsetX)), DataTableGetInt(true, libVCUI_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnitStoredValuesOld_OffsetY)));
    libNtve_gf_SetDialogItemText(lv_progressBarValue, TextTimeFormat(StringToText("<sectotal/>"), DataTableGetInt(true, libVCUI_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnitStoredValuesOld_CurValue))), PlayerGroupAll());
    DialogControlSetSize(lv_progressBarProgressBar, PlayerGroupAll(), FixedToInt((lv_c_Width * ( (IntToFixed(DataTableGetInt(true, libVCUI_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnitStoredValuesOld_CurValue))) - IntToFixed(DataTableGetInt(true, libVCUI_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnitStoredValuesOld_MinValue)))) / (IntToFixed(DataTableGetInt(true, libVCUI_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnitStoredValuesOld_MaxValue))) - IntToFixed(DataTableGetInt(true, libVCUI_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libVCUI_ge_PU_ProgressBarUnitStoredValuesOld_MinValue)))) ))), lv_c_Height);
    libNtve_gf_SetDialogItemColor(lv_progressBarProgressBar, libVCUI_gf_GetProgressBarColorCampaign(), PlayerGroupAll());
}

string libVCUI_gf_PU_ProgressBarUnit_DataNameOld (unit lp_unit, int lp_type) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    int autoFD907BC3_val;

    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = "ProgressBar_DataName_";
    autoFD907BC3_val = lp_type;
    if (autoFD907BC3_val == libVCUI_ge_PU_ProgressBarUnitStoredValuesOld_Attachment) {
        lv_name = (lv_name + "_" + "Attachment");
    }
    else if (autoFD907BC3_val == libVCUI_ge_PU_ProgressBarUnitStoredValuesOld_CurValue) {
        lv_name = (lv_name + "_" + "CurValue");
    }
    else if (autoFD907BC3_val == libVCUI_ge_PU_ProgressBarUnitStoredValuesOld_MaxValue) {
        lv_name = (lv_name + "_" + "MaxValue");
    }
    else if (autoFD907BC3_val == libVCUI_ge_PU_ProgressBarUnitStoredValuesOld_MinValue) {
        lv_name = (lv_name + "_" + "MinValue");
    }
    else if (autoFD907BC3_val == libVCUI_ge_PU_ProgressBarUnitStoredValuesOld_OffsetX) {
        lv_name = (lv_name + "_" + "OffsetX");
    }
    else if (autoFD907BC3_val == libVCUI_ge_PU_ProgressBarUnitStoredValuesOld_OffsetY) {
        lv_name = (lv_name + "_" + "OffsetY");
    }
    else {
    }
    lv_name = (lv_name + "_" + IntToString(UnitGetTag(lp_unit)));
    return lv_name;
}

string libVCUI_gf_PU_ProgressBarUnit_DialogNameOld (unit lp_unit, int lp_type) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    int auto4249BB71_val;

    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = "ProgressBar_DialogType_";
    auto4249BB71_val = lp_type;
    if (auto4249BB71_val == libVCUI_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog) {
        lv_name = (lv_name + "_" + "Dialog");
    }
    else if (auto4249BB71_val == libVCUI_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Label) {
        lv_name = (lv_name + "_" + "Label");
    }
    else if (auto4249BB71_val == libVCUI_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Panel) {
        lv_name = (lv_name + "_" + "Panel");
    }
    else if (auto4249BB71_val == libVCUI_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_ProgressBar) {
        lv_name = (lv_name + "_" + "ProgressBar");
    }
    else if (auto4249BB71_val == libVCUI_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Value) {
        lv_name = (lv_name + "_" + "Value");
    }
    else {
    }
    lv_name = (lv_name + "_" + IntToString(UnitGetTag(lp_unit)));
    return lv_name;
}

trigger auto_libVCUI_gf_DisplayUnitProgressBar_Trigger = null;
unit auto_libVCUI_gf_DisplayUnitProgressBar_lp_unit;
text auto_libVCUI_gf_DisplayUnitProgressBar_lp_title;
int auto_libVCUI_gf_DisplayUnitProgressBar_lp_minValue;
int auto_libVCUI_gf_DisplayUnitProgressBar_lp_maxValue;

void libVCUI_gf_DisplayUnitProgressBar (unit lp_unit, text lp_title, int lp_minValue, int lp_maxValue) {
    auto_libVCUI_gf_DisplayUnitProgressBar_lp_unit = lp_unit;
    auto_libVCUI_gf_DisplayUnitProgressBar_lp_title = lp_title;
    auto_libVCUI_gf_DisplayUnitProgressBar_lp_minValue = lp_minValue;
    auto_libVCUI_gf_DisplayUnitProgressBar_lp_maxValue = lp_maxValue;

    if (auto_libVCUI_gf_DisplayUnitProgressBar_Trigger == null) {
        auto_libVCUI_gf_DisplayUnitProgressBar_Trigger = TriggerCreate("auto_libVCUI_gf_DisplayUnitProgressBar_TriggerFunc");
    }

    TriggerExecute(auto_libVCUI_gf_DisplayUnitProgressBar_Trigger, false, false);
}

bool auto_libVCUI_gf_DisplayUnitProgressBar_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_libVCUI_gf_DisplayUnitProgressBar_lp_unit;
    text lp_title = auto_libVCUI_gf_DisplayUnitProgressBar_lp_title;
    int lp_minValue = auto_libVCUI_gf_DisplayUnitProgressBar_lp_minValue;
    int lp_maxValue = auto_libVCUI_gf_DisplayUnitProgressBar_lp_maxValue;

    // Variable Declarations
    int lv_progressBar;
    int lv_progressBarLabel;
    int lv_progressBarValue;
    int lv_progressBarBorder;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBar = c_invalidDialogControlId;
    lv_progressBarLabel = c_invalidDialogControlId;
    lv_progressBarValue = c_invalidDialogControlId;
    lv_progressBarBorder = c_invalidDialogControlId;

    // Implementation
    if (((libNtve_gf_ValueFromDataTableDialogItem(true, libVCUI_gf_PU_UnitProgressBar_Dialog(lp_unit, libVCUI_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Bar)) != c_invalidDialogControlId) || (libNtve_gf_ValueFromDataTableDialogItem(true, libVCUI_gf_PU_UnitProgressBar_Dialog(lp_unit, libVCUI_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Broder)) != c_invalidDialogControlId) || (libNtve_gf_ValueFromDataTableDialogItem(true, libVCUI_gf_PU_UnitProgressBar_Dialog(lp_unit, libVCUI_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Label)) != c_invalidDialogControlId) || (libNtve_gf_ValueFromDataTableDialogItem(true, libVCUI_gf_PU_UnitProgressBar_Dialog(lp_unit, libVCUI_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Value)) != c_invalidDialogControlId))) {
        DialogControlDestroy(libNtve_gf_ValueFromDataTableDialogItem(true, libVCUI_gf_PU_UnitProgressBar_Dialog(lp_unit, libVCUI_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Bar)));
        DialogControlDestroy(libNtve_gf_ValueFromDataTableDialogItem(true, libVCUI_gf_PU_UnitProgressBar_Dialog(lp_unit, libVCUI_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Broder)));
        DialogControlDestroy(libNtve_gf_ValueFromDataTableDialogItem(true, libVCUI_gf_PU_UnitProgressBar_Dialog(lp_unit, libVCUI_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Label)));
        DialogControlDestroy(libNtve_gf_ValueFromDataTableDialogItem(true, libVCUI_gf_PU_UnitProgressBar_Dialog(lp_unit, libVCUI_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Value)));
    }

    UnitStatusBarOverride(lp_unit, c_unitStatusGroupAll);
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "NameLabel", lp_unit);
    lv_progressBarLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lv_progressBarLabel, lp_title, PlayerGroupAll());
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "ValueLabel", lp_unit);
    lv_progressBarValue = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "BarImage", lp_unit);
    lv_progressBar = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "BorderImage", lp_unit);
    lv_progressBarBorder = DialogControlLastCreated();
    libNtve_gf_SaveDataTableValueDialogItem(true, libVCUI_gf_PU_UnitProgressBar_Dialog(lp_unit, libVCUI_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Label), lv_progressBarLabel);
    libNtve_gf_SaveDataTableValueDialogItem(true, libVCUI_gf_PU_UnitProgressBar_Dialog(lp_unit, libVCUI_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Value), lv_progressBarValue);
    libNtve_gf_SaveDataTableValueDialogItem(true, libVCUI_gf_PU_UnitProgressBar_Dialog(lp_unit, libVCUI_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Bar), lv_progressBar);
    libNtve_gf_SaveDataTableValueDialogItem(true, libVCUI_gf_PU_UnitProgressBar_Dialog(lp_unit, libVCUI_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Broder), lv_progressBarBorder);
    DataTableSetInt(true, libVCUI_gf_PU_UnitProgressBar_Data(lp_unit, libVCUI_ge_PU_UnitProgressBarDataName_MinValue), lp_minValue);
    DataTableSetInt(true, libVCUI_gf_PU_UnitProgressBar_Data(lp_unit, libVCUI_ge_PU_UnitProgressBarDataName_MaxValue), lp_maxValue);
    DataTableSetInt(true, libVCUI_gf_PU_UnitProgressBar_Data(lp_unit, libVCUI_ge_PU_UnitProgressBarDataName_CurValue), lp_minValue);
    libVCUI_gf_ShowHideUnitProgressBar(lp_unit, true);
    libVCUI_gf_PU_UpdateUnitProgressBar(lp_unit);
    return true;
}

void libVCUI_gf_SetUnitProgressBarProgress (unit lp_unit, int lp_value) {
    // Variable Declarations
    int lv_realValue;
    int lv_realValue2;
    int lv_minValue;
    int lv_maxValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_minValue = DataTableGetInt(true, libVCUI_gf_PU_UnitProgressBar_Data(lp_unit, libVCUI_ge_PU_UnitProgressBarDataName_MinValue));
    lv_maxValue = DataTableGetInt(true, libVCUI_gf_PU_UnitProgressBar_Data(lp_unit, libVCUI_ge_PU_UnitProgressBarDataName_MaxValue));

    // Implementation
    lv_realValue = lp_value;
    if ((lv_minValue > lv_maxValue)) {
        lv_realValue2 = lv_minValue;
        lv_minValue = lv_maxValue;
        lv_maxValue = lv_realValue2;
    }

    if ((lp_value < lv_minValue)) {
        lv_realValue = lv_minValue;
    }
    else {
        if ((lp_value > lv_maxValue)) {
            lv_realValue = lv_maxValue;
        }

    }
    DataTableSetInt(true, libVCUI_gf_PU_UnitProgressBar_Data(lp_unit, libVCUI_ge_PU_UnitProgressBarDataName_CurValue), lv_realValue);
    libVCUI_gf_PU_UpdateUnitProgressBar(lp_unit);
}

void libVCUI_gf_SetUnitProgresBarTitle (unit lp_unit, text lp_titleText) {
    // Variable Declarations
    int lv_progressBarLabel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarLabel = c_invalidDialogControlId;

    // Implementation
    lv_progressBarLabel = libNtve_gf_ValueFromDataTableDialogItem(true, libVCUI_gf_PU_UnitProgressBar_Dialog(lp_unit, libVCUI_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Label));
    libNtve_gf_SetDialogItemText(lv_progressBarLabel, lp_titleText, PlayerGroupAll());
}

void libVCUI_gf_SetUnitProgressBarValueRange (unit lp_unit, int lp_minValue, int lp_maxValue) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, libVCUI_gf_PU_UnitProgressBar_Data(lp_unit, libVCUI_ge_PU_UnitProgressBarDataName_MinValue), lp_minValue);
    DataTableSetInt(true, libVCUI_gf_PU_UnitProgressBar_Data(lp_unit, libVCUI_ge_PU_UnitProgressBarDataName_MaxValue), lp_maxValue);
    libVCUI_gf_SetUnitProgressBarProgress(lp_unit, DataTableGetInt(true, libVCUI_gf_PU_UnitProgressBar_Dialog(lp_unit, libVCUI_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Value)));
}

void libVCUI_gf_ShowHideUnitProgressBar (unit lp_unit, bool lp_showHide) {
    // Variable Declarations
    int lv_progressBarLabel;
    int lv_progressBarValue;
    int lv_progressBarBar;
    int lv_progressBarBorder;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarLabel = c_invalidDialogControlId;
    lv_progressBarValue = c_invalidDialogControlId;
    lv_progressBarBar = c_invalidDialogControlId;
    lv_progressBarBorder = c_invalidDialogControlId;

    // Implementation
    UnitStatusBarOverride(lp_unit, c_unitStatusGroupAll);
    lv_progressBarLabel = libNtve_gf_ValueFromDataTableDialogItem(true, libVCUI_gf_PU_UnitProgressBar_Dialog(lp_unit, libVCUI_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Label));
    DialogControlSetVisible(lv_progressBarLabel, PlayerGroupAll(), lp_showHide);
    lv_progressBarValue = libNtve_gf_ValueFromDataTableDialogItem(true, libVCUI_gf_PU_UnitProgressBar_Dialog(lp_unit, libVCUI_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Value));
    DialogControlSetVisible(lv_progressBarValue, PlayerGroupAll(), lp_showHide);
    lv_progressBarBar = libNtve_gf_ValueFromDataTableDialogItem(true, libVCUI_gf_PU_UnitProgressBar_Dialog(lp_unit, libVCUI_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Bar));
    DialogControlSetVisible(lv_progressBarBar, PlayerGroupAll(), lp_showHide);
    lv_progressBarBorder = libNtve_gf_ValueFromDataTableDialogItem(true, libVCUI_gf_PU_UnitProgressBar_Dialog(lp_unit, libVCUI_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Broder));
    DialogControlSetVisible(lv_progressBarBorder, PlayerGroupAll(), lp_showHide);
    libVCUI_gf_PU_UpdateUnitProgressBar(lp_unit);
}

void libVCUI_gf_PU_UpdateUnitProgressBar (unit lp_unit) {
    // Variable Declarations
    int lv_progressBarLabel;
    int lv_progressBarValue;
    int lv_progressBarProgressBar;
    const int lv_c_Width = 252;
    const int lv_c_Height = 12;
    string lv_dataTableString;
    string lv_attachmentPreset;
    fixed lv_progressBarWidth;
    int lv_minValue;
    int lv_curValue;
    int lv_maxValue;
    int lv_swapValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarLabel = c_invalidDialogControlId;
    lv_progressBarValue = c_invalidDialogControlId;
    lv_progressBarProgressBar = c_invalidDialogControlId;
    lv_attachmentPreset = lv_dataTableString;

    // Implementation
    lv_minValue = DataTableGetInt(true, libVCUI_gf_PU_UnitProgressBar_Data(lp_unit, libVCUI_ge_PU_UnitProgressBarDataName_MinValue));
    lv_maxValue = DataTableGetInt(true, libVCUI_gf_PU_UnitProgressBar_Data(lp_unit, libVCUI_ge_PU_UnitProgressBarDataName_MaxValue));
    lv_curValue = DataTableGetInt(true, libVCUI_gf_PU_UnitProgressBar_Data(lp_unit, libVCUI_ge_PU_UnitProgressBarDataName_CurValue));
    lv_progressBarProgressBar = libNtve_gf_ValueFromDataTableDialogItem(true, libVCUI_gf_PU_UnitProgressBar_Dialog(lp_unit, libVCUI_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Bar));
    lv_progressBarValue = libNtve_gf_ValueFromDataTableDialogItem(true, libVCUI_gf_PU_UnitProgressBar_Dialog(lp_unit, libVCUI_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Value));
    if (((lv_progressBarProgressBar == c_invalidDialogControlId) || (lv_progressBarValue == c_invalidDialogControlId))) {
        return ;
    }

    libNtve_gf_SetDialogItemText(lv_progressBarValue, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lv_curValue), PlayerGroupAll());
    if ((lv_minValue > lv_maxValue)) {
        lv_swapValue = lv_minValue;
        lv_minValue = lv_maxValue;
        lv_maxValue = lv_swapValue;
        lv_curValue = (lv_maxValue-lv_curValue);
    }

    lv_progressBarWidth = (lv_c_Width * ( (IntToFixed(lv_curValue) - IntToFixed(lv_minValue)) / (IntToFixed(lv_maxValue) - IntToFixed(lv_minValue)) ));
    DialogControlSetSize(lv_progressBarProgressBar, PlayerGroupAll(), MaxI(FixedToInt(lv_progressBarWidth), 1), lv_c_Height);
    libNtve_gf_SetDialogItemColor(lv_progressBarProgressBar, libVCUI_gf_GetProgressBarColorCampaign(), PlayerGroupAll());
}

string libVCUI_gf_PU_UnitProgressBar_Data (unit lp_unit, int lp_type) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    int autoB85C2953_val;

    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = "ProgressBar_DataName_";
    autoB85C2953_val = lp_type;
    if (autoB85C2953_val == libVCUI_ge_PU_UnitProgressBarDataName_CurValue) {
        lv_name = (lv_name + "_" + "CurValue");
    }
    else if (autoB85C2953_val == libVCUI_ge_PU_UnitProgressBarDataName_MaxValue) {
        lv_name = (lv_name + "_" + "MaxValue");
    }
    else if (autoB85C2953_val == libVCUI_ge_PU_UnitProgressBarDataName_MinValue) {
        lv_name = (lv_name + "_" + "MinValue");
    }
    else {
    }
    lv_name = (lv_name + "_" + IntToString(UnitGetTag(lp_unit)));
    return lv_name;
}

string libVCUI_gf_PU_UnitProgressBar_Dialog (unit lp_unit, int lp_type) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    int autoEA1D1BB3_val;

    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = "ProgressBar_DialogType_";
    autoEA1D1BB3_val = lp_type;
    if (autoEA1D1BB3_val == libVCUI_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Label) {
        lv_name = (lv_name + "_" + "Label");
    }
    else if (autoEA1D1BB3_val == libVCUI_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Value) {
        lv_name = (lv_name + "_" + "Value");
    }
    else if (autoEA1D1BB3_val == libVCUI_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Bar) {
        lv_name = (lv_name + "_" + "ProgressBar");
    }
    else if (autoEA1D1BB3_val == libVCUI_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Broder) {
        lv_name = (lv_name + "_" + "ProgressBarBorder");
    }
    else {
    }
    lv_name = (lv_name + "_" + IntToString(UnitGetTag(lp_unit)));
    return lv_name;
}

void libVCUI_gf_PU_GPSetUnit (unit lp_casterUnit) {
    // Variable Declarations
    string lv_indexPerk;

    // Automatic Variable Declarations
    unitgroup autoF6E18BBD_g;
    int autoF6E18BBD_u;
    unit autoF6E18BBD_var;

    // Variable Initialization

    // Implementation
    if ((libVCUI_gv_pU_GPPanel == c_invalidDialogControlId)) {
        TriggerExecute(libVCUI_gt_PU_GPInit, true, true);
    }

    libVCUI_gv_pU_GPUnit = lp_casterUnit;
    autoF6E18BBD_g = libVCUI_gv_pU_GPCasterGroup;
    autoF6E18BBD_u = UnitGroupCount(autoF6E18BBD_g, c_unitCountAll);
    for (;; autoF6E18BBD_u -= 1) {
        autoF6E18BBD_var = UnitGroupUnitFromEnd(autoF6E18BBD_g, autoF6E18BBD_u);
        if (autoF6E18BBD_var == null) { break; }
        UnitGroupRemove(libVCUI_gv_pU_GPCasterGroup, autoF6E18BBD_var);
    }
    UnitGroupAdd(libVCUI_gv_pU_GPCasterGroup, lp_casterUnit);
    libNtve_gf_SetDialogItemUnitGroup(libVCUI_gv_pU_GPCmdPanel, libVCUI_gv_pU_GPCasterGroup, PlayerGroupAll());
    libVCUI_gf_PU_GPVitalsUpdate();
}

void libVCUI_gf_ShowSpearofAdunUI (bool lp_showHide, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    libVCUI_gv_pU_GPRequestedVisible = (lp_showHide == true);
    libVCUI_gf_PU_GPVisibilitySet(lp_showHide, lp_duration);
}

void libVCUI_gf_PU_GPVisibilityAutoUpdate (bool lp_showHide, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    if (((libVCUI_gv_pU_GPRequestedVisible == false) || ((libVoiC_gf_PC_CampaignMapTypeCheck(libVoiC_gf_CurrentMap(), c_mapKindStory) == true) && (lp_showHide == true)))) {
        return ;
    }

    libVCUI_gf_PU_GPVisibilitySet(lp_showHide, lp_duration);
}

void libVCUI_gf_PU_GPVisibilitySet (bool lp_showHide, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    if ((libVCUI_gv_pU_GPPanel == c_invalidDialogControlId)) {
        TriggerExecute(libVCUI_gt_PU_GPInit, true, true);
    }

    if ((lp_showHide == true)) {
        libVCUI_gv_pU_GPActuallyVisible = true;
        DialogControlSetVisible(libVCUI_gv_pU_GPPanel, PlayerGroupAll(), lp_showHide);
        DialogControlSetVisible(libVCUI_gv_pU_GPHolder, PlayerGroupAll(), lp_showHide);
        libNtve_gf_SetDialogItemCutscene(libVCUI_gv_pU_GPCutscene, "Cutscenes\\UI_SoAMission.SC2Cutscene", PlayerGroupAll());
        CutsceneSetTime(CutsceneGetTriggerControl(libVCUI_gv_pU_GPEnergyGlassScene), 0);
        CutsceneSetTime(CutsceneGetTriggerControl(libVCUI_gv_pU_GPEnergyBarScene), 0);
        CutsceneSetTime(CutsceneGetTriggerControl(libVCUI_gv_pU_GPCutscene), 0);
        CutscenePlay(CutsceneGetTriggerControl(libVCUI_gv_pU_GPCutscene));
        DialogControlSetVisible(libVCUI_gv_pU_GPCutscene, PlayerGroupAll(), true);
        if ((lp_duration == c_transitionDurationImmediate)) {
            CutsceneGoToBookmark(CutsceneGetTriggerControl(libVCUI_gv_pU_GPCutscene), "LoopStart");
            CutsceneGoToBookmark(CutsceneGetTriggerControl(libVCUI_gv_pU_GPEnergyGlassScene), "LoopStart");
            CutsceneGoToBookmark(CutsceneGetTriggerControl(libVCUI_gv_pU_GPEnergyBarScene), "LoopStart");
            DialogControlSetVisible(libVCUI_gv_pU_GPCmdPanel, PlayerGroupAll(), lp_showHide);
            DialogControlSetVisible(libVCUI_gv_pU_GPEnergyLabel, PlayerGroupAll(), lp_showHide);
        }
        else {
            libVCUI_gv_pU_GPWaitingForBirth = true;
            TriggerEnable(libVCUI_gt_PU_GPBirthFinished, true);
            DialogControlSetVisible(libVCUI_gv_pU_GPCmdPanel, PlayerGroupAll(), false);
            DialogControlSetVisible(libVCUI_gv_pU_GPEnergyLabel, PlayerGroupAll(), false);
        }
    }
    else {
        libVCUI_gv_pU_GPActuallyVisible = false;
        if ((lp_duration == c_transitionDurationImmediate)) {
            DialogControlSetVisible(libVCUI_gv_pU_GPPanel, PlayerGroupAll(), lp_showHide);
            DialogControlSetVisible(libVCUI_gv_pU_GPHolder, PlayerGroupAll(), lp_showHide);
            DialogControlSetVisible(libVCUI_gv_pU_GPCmdPanel, PlayerGroupAll(), lp_showHide);
            DialogControlSetVisible(libVCUI_gv_pU_GPEnergyLabel, PlayerGroupAll(), lp_showHide);
        }
        else {
            TriggerEnable(libVCUI_gt_PU_GPDeathRemove2D, true);
            CutsceneGoToBookmark(CutsceneGetTriggerControl(libVCUI_gv_pU_GPCutscene), "Death");
            CutsceneGoToBookmark(CutsceneGetTriggerControl(libVCUI_gv_pU_GPEnergyBarScene), "Death");
            CutsceneGoToBookmark(CutsceneGetTriggerControl(libVCUI_gv_pU_GPEnergyGlassScene), "Death");
        }
    }
}

void libVCUI_gf_TurnSpearofAdunSlotHighlightOnOff (int lp_slot, bool lp_onOff) {
    // Variable Declarations
    string lv_indexPerkGroup;
    string lv_indexPerk;
    abilcmd lv_indexCommand;

    // Automatic Variable Declarations
    int auto4958AC6C_ai;
    int auto4958AC6C_ae;
    int auto51705059_ai;
    int auto51705059_ae;

    // Variable Initialization

    // Implementation
    if ((lp_onOff == true)) {
        DialogControlSetVisible(libVCUI_gv_pU_GPAbilityArrows[lp_slot], PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(libVCUI_gv_pU_GPAbilityArrows[lp_slot], PlayerGroupAll(), false);
    }
    auto4958AC6C_ai = 1;
    auto4958AC6C_ae = UserDataInstanceCount("CampaignPerkGroup")+1;
    while (auto4958AC6C_ai < auto4958AC6C_ae) {
        lv_indexPerkGroup = UserDataInstance("CampaignPerkGroup", auto4958AC6C_ai);
        auto4958AC6C_ai = auto4958AC6C_ai+1;
        if ((libVoiC_gf_PC_PerkGroupMissionUIOrder(lv_indexPerkGroup) == lp_slot)) {
            auto51705059_ai = 1;
            auto51705059_ae = UserDataInstanceCount("CampaignPerk")+1;
            while (auto51705059_ai < auto51705059_ae) {    
                lv_indexPerk = UserDataInstance("CampaignPerk", auto51705059_ai);
                auto51705059_ai = auto51705059_ai+1;
                if( libVoiC_gf_PC_PerkGroupOfPerk(lv_indexPerk) == lv_indexPerkGroup ) {
                    lv_indexCommand = UserDataGetAbilCmd("CampaignPerk", lv_indexPerk, "AbilityCommand", 1);
                    if ((UnitAbilityCheck(libVCUI_gv_pU_GPUnit, AbilityCommandGetAbility(lv_indexCommand), true) == true) && (UnitCheckAbilCmdState(libVCUI_gv_pU_GPUnit, lv_indexCommand, c_cmdStateDisabled) == false)) {
                        UISetButtonHighlighted(PlayerGroupAll(), lv_indexCommand, lp_onOff);
                    }

                }    
            }
            break;
        }

    }
}

void libVCUI_gf_PU_GPVitalsUpdate () {
    // Variable Declarations
    fixed lv_energyFloored;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_energyFloored = Floor(UnitGetPropertyFixed(libVCUI_gv_pU_GPUnit, c_unitPropEnergy, c_unitPropCurrent));
    if ((lv_energyFloored == libVCUI_gv_pU_GPLastEnergyUpdate)) {
        return ;
    }

    libVCUI_gv_pU_GPLastEnergyUpdate = lv_energyFloored;
    libNtve_gf_SetDialogItemText(libVCUI_gv_pU_GPEnergyLabel, IntToText(FixedToInt(lv_energyFloored)), PlayerGroupAll());
    DialogControlSendAnimationEvent(libVCUI_gv_pU_GPEnergyBarScene, PlayerGroupAll(), "SetEnergyPlay");
    DialogControlSetAnimationTime(libVCUI_gv_pU_GPEnergyBarScene, PlayerGroupAll(), "EnergyLevel", UnitGetPropertyFixed(libVCUI_gv_pU_GPUnit, c_unitPropEnergyPercent, c_unitPropCurrent));
    DialogControlSendAnimationEvent(libVCUI_gv_pU_GPEnergyBarScene, PlayerGroupAll(), "SetEnergyPause");
    if ((UnitGetPropertyFixed(libVCUI_gv_pU_GPUnit, c_unitPropEnergyPercent, c_unitPropCurrent) == 100.0)) {
        libVoiC_gf_PC_StatRecordSoAEnergyCapStart();
        libVCUI_gf_PU_GPEnergyHighlight(true);
    }
    else {
        libVoiC_gf_PC_StatRecordSoAEnergyCapStop();
        libVCUI_gf_PU_GPEnergyHighlight(false);
    }
}

void libVCUI_gf_PU_GPEnergyHighlight (bool lp_enable) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_enable == true)) {
        libVCUI_gv_pU_GPEnergyHighlighting = true;
        if ((libVCUI_gv_pU_GPWaitingForBirth == false) && (libVCUI_gv_pU_GPActuallyVisible == true)) {
            CutsceneGoToBookmark(CutsceneGetTriggerControl(libVCUI_gv_pU_GPEnergyGlassScene), "PowerUp");
            CutsceneGoToBookmark(CutsceneGetTriggerControl(libVCUI_gv_pU_GPEnergyBarScene), "PowerUp");
            CutsceneGoToBookmark(CutsceneGetTriggerControl(libVCUI_gv_pU_GPCutscene), "PowerUp");
        }

    }
    else {
        if ((libVCUI_gv_pU_GPEnergyHighlighting == true)) {
            if ((libVCUI_gv_pU_GPWaitingForBirth == false) && (libVCUI_gv_pU_GPActuallyVisible == true)) {
                CutsceneGoToBookmark(CutsceneGetTriggerControl(libVCUI_gv_pU_GPEnergyGlassScene), "PowerDown");
                CutsceneGoToBookmark(CutsceneGetTriggerControl(libVCUI_gv_pU_GPEnergyBarScene), "PowerDown");
                CutsceneGoToBookmark(CutsceneGetTriggerControl(libVCUI_gv_pU_GPCutscene), "PowerDown");
            }

            libVCUI_gv_pU_GPEnergyHighlighting = false;
        }

    }
}

trigger auto_libVCUI_gf_PU_SoAAbilityTimerCreate_Trigger = null;
string auto_libVCUI_gf_PU_SoAAbilityTimerCreate_lp_abilityIcon;
fixed auto_libVCUI_gf_PU_SoAAbilityTimerCreate_lp_duration;

void libVCUI_gf_PU_SoAAbilityTimerCreate (string lp_abilityIcon, fixed lp_duration) {
    auto_libVCUI_gf_PU_SoAAbilityTimerCreate_lp_abilityIcon = lp_abilityIcon;
    auto_libVCUI_gf_PU_SoAAbilityTimerCreate_lp_duration = lp_duration;

    if (auto_libVCUI_gf_PU_SoAAbilityTimerCreate_Trigger == null) {
        auto_libVCUI_gf_PU_SoAAbilityTimerCreate_Trigger = TriggerCreate("auto_libVCUI_gf_PU_SoAAbilityTimerCreate_TriggerFunc");
    }

    TriggerExecute(auto_libVCUI_gf_PU_SoAAbilityTimerCreate_Trigger, false, false);
}

bool auto_libVCUI_gf_PU_SoAAbilityTimerCreate_TriggerFunc (bool testConds, bool runActions) {
    string lp_abilityIcon = auto_libVCUI_gf_PU_SoAAbilityTimerCreate_lp_abilityIcon;
    fixed lp_duration = auto_libVCUI_gf_PU_SoAAbilityTimerCreate_lp_duration;

    // Variable Declarations
    fixed lv_updatewidth;
    int lv_startwidth;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogCreate(260, 100, c_anchorCenter, 0, -450, true);
    libVCMI_gv_sOA_TimeFreezeUI = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    lv_startwidth = 150;
    lv_updatewidth = 150.0;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 55, 55, c_anchorLeft, 26, 3, StringToText(""), lp_abilityIcon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_startwidth, 47, c_anchorLeft, 79, 3, StringToText(""), "", c_triggerImageTypeNormal, false, ColorWithAlpha(0.00, 0.00, 62.75, 74.90), c_triggerBlendModeNormal);
    while ((DialogControlGetWidth(DialogControlLastCreated(), 1) > 0)) {
        Wait(0.0625, c_timeGame);
        lv_updatewidth -= ((lv_startwidth/lp_duration)*0.0625);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), FixedToInt(lv_updatewidth), 47);
    }
    DialogDestroy(libVCMI_gv_sOA_TimeFreezeUI);
    return true;
}

void libVCUI_gf_PU_TargetingUI_EnterTargetingMode (bool lp_showHide, bool lp_instant) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libVCUI_gf_PU_TargetingCreate();
    if ((lp_showHide == true)) {
        libVCMI_gf_SetScreenModeCampaign(c_uiModeFullscreen, 0.35);
        DialogSetVisible(libVCUI_gv_pU_TargetingOverlayDialog, PlayerGroupAll(), true);
        DialogSetVisible(libVCUI_gv_pU_TargetingAbilityDialog, PlayerGroupAll(), true);
        libNtve_gf_PlayAnimation(ActorFromDialogControl(libVCUI_gv_pU_TargetingOverlayPortrait), c_animNameDefault, "Birth", 0, 0.0);
        TriggerEnable(libVCUI_gt_PU_TargetingCancelButtonUsed, true);
        libVCUI_gv_pU_TargetingActive = true;
    }
    else {
        libVCUI_gv_pU_TargetingCurrentCharges = 0;
        if ((lp_instant == false)) {
            libVCMI_gf_SetScreenModeCampaign(c_uiModeConsole, 0.25);
        }

        TriggerEnable(libVCUI_gt_PU_TargetingCancelButtonUsed, false);
        DialogSetVisible(libVCUI_gv_pU_TargetingOverlayDialog, PlayerGroupAll(), false);
        DialogSetVisible(libVCUI_gv_pU_TargetingAbilityDialog, PlayerGroupAll(), false);
        libVCUI_gv_pU_TargetingActive = false;
    }
}

void libVCUI_gf_PU_TargetingCreate () {
    // Automatic Variable Declarations
    // Implementation
    if ((libVCUI_gv_pU_TargetingAbilityDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(500, 150, c_anchorBottom, 3, 160, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    libVCUI_gv_pU_TargetingAbilityDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "LotV_GameUI/SoATargetingUITemplate");
    libVCUI_gv_pU_TargetingPanel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_TargetingPanel, c_triggerControlTypeLabel, "Instructions");
    libVCUI_gv_pU_TargetingInstructionsLabel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_TargetingPanel, c_triggerControlTypeButton, "CancelButton");
    libVCUI_gv_pU_TargetingCancelButton = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_TargetingPanel, c_triggerControlTypePanel, "ChargesContainer");
    libVCUI_gv_pU_TargetingChargesPanel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_TargetingChargesPanel, c_triggerControlTypePanel, "Charge1");
    libVCUI_gv_pU_TargetingChargeSinglePanel[1] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_TargetingChargesPanel, c_triggerControlTypePanel, "Charge2");
    libVCUI_gv_pU_TargetingChargeSinglePanel[2] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_TargetingChargesPanel, c_triggerControlTypePanel, "Charge3");
    libVCUI_gv_pU_TargetingChargeSinglePanel[3] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_TargetingChargesPanel, c_triggerControlTypePanel, "Charge4");
    libVCUI_gv_pU_TargetingChargeSinglePanel[4] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_TargetingChargesPanel, c_triggerControlTypePanel, "Charge5");
    libVCUI_gv_pU_TargetingChargeSinglePanel[5] = DialogControlLastCreated();
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    libVCUI_gv_pU_TargetingOverlayDialog = DialogLastCreated();
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePortrait, "LotV_GameUI/SoAOverlayTemplate");
    PortraitUseTransition(PortraitGetTriggerControl(DialogControlLastCreated()), false);
    libNtve_gf_SetDialogItemModel(DialogControlLastCreated(), "SOA_Calldown_UI", PlayerGroupAll());
    libVCUI_gv_pU_TargetingOverlayPortrait = DialogControlLastCreated();
}

void libVCUI_gf_PU_TargetingSetCharges (int lp_current, int lp_max) {
    // Variable Declarations
    int lv_indexCharge;

    // Automatic Variable Declarations
    int autoF0DE3D5C_ae;
    const int autoF0DE3D5C_ai = 1;
    int auto5D1725D9_ae;
    const int auto5D1725D9_ai = 1;
    const int autoB0278222_ae = libVCMI_gv_pMC_SOATARGETCOUNTMAX;
    const int autoB0278222_ai = 1;

    // Variable Initialization

    // Implementation
    libVCUI_gf_PU_TargetingCreate();
    autoF0DE3D5C_ae = lp_current;
    lv_indexCharge = 1;
    for ( ; ( (autoF0DE3D5C_ai >= 0 && lv_indexCharge <= autoF0DE3D5C_ae) || (autoF0DE3D5C_ai < 0 && lv_indexCharge >= autoF0DE3D5C_ae) ) ; lv_indexCharge += autoF0DE3D5C_ai ) {
        if ((libVCUI_gv_pU_TargetingCurrentCharges < lv_indexCharge)) {
            DialogControlSetVisible(libVCUI_gv_pU_TargetingChargeSinglePanel[(lp_max-lv_indexCharge+1)], PlayerGroupAll(), false);
            DialogControlSetVisible(libVCUI_gv_pU_TargetingChargeSinglePanel[(lp_max-lv_indexCharge+1)], PlayerGroupAll(), true);
        }

    }
    auto5D1725D9_ae = lp_max;
    lv_indexCharge = (lp_current+1);
    for ( ; ( (auto5D1725D9_ai >= 0 && lv_indexCharge <= auto5D1725D9_ae) || (auto5D1725D9_ai < 0 && lv_indexCharge >= auto5D1725D9_ae) ) ; lv_indexCharge += auto5D1725D9_ai ) {
        if ((lv_indexCharge <= libVCUI_gv_pU_TargetingCurrentCharges)) {
            DialogControlSendAnimationEvent(libVCUI_gv_pU_TargetingChargeSinglePanel[(lp_max-lv_indexCharge+1)], PlayerGroupAll(), "Consume");
        }

    }
    lv_indexCharge = (lp_max+1);
    for ( ; ( (autoB0278222_ai >= 0 && lv_indexCharge <= autoB0278222_ae) || (autoB0278222_ai < 0 && lv_indexCharge >= autoB0278222_ae) ) ; lv_indexCharge += autoB0278222_ai ) {
        DialogControlSetVisible(libVCUI_gv_pU_TargetingChargeSinglePanel[lv_indexCharge], PlayerGroupAll(), false);
    }
    if ((lp_max == 3)) {
        DialogControlSendAnimationEvent(libVCUI_gv_pU_TargetingChargesPanel, PlayerGroupAll(), "ThreeCharges");
    }
    else {
        DialogControlSendAnimationEvent(libVCUI_gv_pU_TargetingChargesPanel, PlayerGroupAll(), "FiveCharges");
    }
    libVCUI_gv_pU_TargetingCurrentCharges = lp_current;
}

void libVCUI_gf_PU_TargetingSetInstructionText (text lp_instructions) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libVCUI_gv_pU_TargetingInstructionsLabel, lp_instructions, PlayerGroupAll());
}

void libVCUI_gf_PU_TargetingCancel (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libVCUI_gv_pUC_TargetingEventCancel);
}

bool libVCUI_gf_TargetingUIisActive () {
    // Automatic Variable Declarations
    // Implementation
    return libVCUI_gv_pU_TargetingActive;
}

void libVCUI_gf_TimerWindowCreate (timer lp_timer, text lp_title, bool lp_visible, bool lp_elapsed) {
    // Variable Declarations
    string lv_image;

    // Automatic Variable Declarations
    string auto2D681054_val;

    // Variable Initialization

    // Implementation
    TimerWindowCreate(lp_timer, lp_title, lp_visible, lp_elapsed);
    TimerWindowShowBorder(TimerWindowLastCreated(), true);
    TimerWindowSetImageType(TimerWindowLastCreated(), c_timerWindowImageBackground, c_triggerImageTypeNineSlice);
    TimerWindowSetImageType(TimerWindowLastCreated(), c_timerWindowImageProgressFill, c_triggerImageTypeNineSlice);
    TimerWindowSetImageType(TimerWindowLastCreated(), c_timerWindowImageBorder, c_triggerImageTypeNineSlice);
    TimerWindowSetImageType(TimerWindowLastCreated(), c_timerWindowImageProgressFrame, c_triggerImageTypeNineSlice);
    TimerWindowSetStyle(TimerWindowLastCreated(), c_timerWindowStyleVerticalTitleTime, false);
    TimerWindowSetFixedHeight(TimerWindowLastCreated(), 80);
    libVCUI_gf_RepositionTimerWindow(TimerWindowLastCreated());
    if ((libVCUI_gv_pU_TimerWindowHighlightFrame != c_invalidDialogControlId)) {
        DialogControlDestroy(libVCUI_gv_pU_TimerWindowHighlightFrame);
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer\\ConsoleUIContainer\\TriggerWindowPanel\\TimerWindowTemplate");
    libVCUI_gv_pU_TimerWindowHighlightFrame = DialogControlLastCreated();
    libVCUI_gv_pU_TimerWindowTimer = lp_timer;
    libVCUI_gv_pU_TimerWindowInDanger = false;
    TriggerEnable(libVCUI_gt_PU_TimerWindowThresholdCrossed, true);
    TriggerEnable(libVCUI_gt_PU_TimerWindowLoadUpdate, true);
    libVCUI_gf_FlashTimerWindow(8.0, false);
    auto2D681054_val = PlayerRace(1);
    if (auto2D681054_val == "Prot") {
        TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(100.00, 100.00, 0.00), 1);
    }
    else if (auto2D681054_val == "Terr") {
        TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(42.75, 68.24, 16.86), 1);
    }
    else if (auto2D681054_val == "Zerg") {
        TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(100.00, 50.20, 0.00), 1);
    }
    else {
    }
}

void libVCUI_gf_RepositionTimerWindow (int lp_timerWindow) {
    // Automatic Variable Declarations
    // Implementation
    TimerWindowSetAnchor(lp_timerWindow, c_anchorTopRight, 0, 50);
}

void libVCUI_gf_FlashTimerWindow (fixed lp_duration, bool lp_waitOption) {
    // Automatic Variable Declarations
    // Implementation
    libVCUI_gv_pU_TimerWindowHighlightDuration = lp_duration;
    TriggerExecute(libVCUI_gt_PU_TimerWindowFlash, true, lp_waitOption);
}

void libVCUI_gf_SetTimerWindowDangerThreshold (fixed lp_thresholdTime) {
    // Automatic Variable Declarations
    // Implementation
    libVCUI_gv_pU_TimerWindowDangerThreshold = lp_thresholdTime;
}

void libVCUI_gf_PU_AddTip (text lp_tipName, int lp_tipType, text lp_tipDescription, text lp_tipAlertText, string lp_tipIcon) {
    // Automatic Variable Declarations
    // Implementation
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(lp_tipName, lp_tipType), lp_tipDescription, lp_tipAlertText, lp_tipIcon);
}

void libVCUI_gf_PU_CreditsEpilogueDisplay () {
    // Automatic Variable Declarations
    // Implementation
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "pCredits_Lore", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    libVCUI_gf_PU_LoreCreditsSetup();
    while (!((libVCUI_gv_pU_LoreCreditsFinished == true))) {
        Wait(0.2, c_timeReal);
    }
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    Wait(2.2, c_timeReal);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, c_transitionDurationImmediate);
    UISetCursorVisible(PlayerGroupAll(), true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, false);
    TriggerExecute(libVCUI_gt_PU_EndCredits, true, true);
}

void libVCUI_gf_PU_CreditsVoidDisplay () {
    // Variable Declarations
    int lv_creditsDialog;
    int lv_creditsPanel;
    int lv_title;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_creditsDialog = c_invalidDialogId;
    lv_creditsPanel = c_invalidDialogControlId;
    lv_title = c_invalidDialogControlId;

    // Implementation
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_creditsDialog = DialogLastCreated();
    DialogControlCreateFromTemplate(lv_creditsDialog, c_triggerControlTypePanel, "LotV_VoidCredits/VoidCreditsTemplate");
    lv_creditsPanel = DialogControlLastCreated();
    DialogControlHookup(lv_creditsPanel, c_triggerControlTypeLabel, "TitleLabel");
    lv_title = DialogControlLastCreated();
    DialogControlFadeTransparency(lv_creditsPanel, PlayerGroupAll(), 0.0, 100.0);
    DialogSetVisible(lv_creditsDialog, PlayerGroupAll(), true);
    DialogControlFadeTransparency(lv_creditsPanel, PlayerGroupAll(), 2.0, 0.0);
    Wait(6.0, c_timeGame);
    DialogControlFadeTransparency(lv_creditsPanel, PlayerGroupAll(), 2.0, 100.0);
    Wait(2.0, c_timeGame);
    DialogDestroy(lv_creditsDialog);
}

void libVCUI_gf_PU_LoreCreditsSetup () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libVCUI_gv_pU_LoreCreditsDialog = DialogLastCreated();
    DialogSetVisible(libVCUI_gv_pU_LoreCreditsDialog, PlayerGroupAll(), true);
    DialogControlCreateFromTemplate(libVCUI_gv_pU_LoreCreditsDialog, c_triggerControlTypePanel, "LotV_LoreCredits/LoreCreditsTemplate");
    libVCUI_gv_pU_LoreCreditsPanel = DialogControlLastCreated();
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookup(libVCUI_gv_pU_LoreCreditsPanel, c_triggerControlTypeImage, "LoreImage");
    libVCUI_gv_pU_LoreCreditsImage = DialogControlLastCreated();
    DialogControlFadeTransparency(libVCUI_gv_pU_LoreCreditsImage, PlayerGroupAll(), 0.0, 100.0);
    DialogControlHookup(libVCUI_gv_pU_LoreCreditsPanel, c_triggerControlTypeLabel, "LoreText");
    libVCUI_gv_pU_LoreCreditsText = DialogControlLastCreated();
    DialogControlFadeTransparency(libVCUI_gv_pU_LoreCreditsText, PlayerGroupAll(), 0.0, 100.0);
    TimerStart(libVCUI_gv_pU_LoreCreditsTimer, 3.0, false, c_timeReal);
    TriggerEnable(libVCUI_gt_PU_LoreCreditsTimerUpdate, true);
    TriggerEnable(libVCUI_gt_PU_LoreCreditsSkip, true);
}

void libVCUI_gf_PU_VictoryCreateZerg () {
    // Variable Declarations
    int lv_panel;
    int lv_index;

    // Automatic Variable Declarations
    const int auto4B7C0D3C_ae = 3;
    const int auto4B7C0D3C_ai = 1;

    // Variable Initialization
    lv_panel = c_invalidDialogControlId;

    // Implementation
    if ((libVCUI_gv_pU_VSDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(1920, 1200, c_anchorCenter, 0, 0, true);
    libVCUI_gv_pU_VSDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "HotS_ScoreScreen/ScoreScreenTemplate");
    libVCUI_gv_pU_VSPanel = DialogControlLastCreated();
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookup(libVCUI_gv_pU_VSPanel, c_triggerControlTypePanel, "MainPanel");
    libVCUI_gv_pU_VSMainPanel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VSMainPanel, c_triggerControlTypeLabel, "VictoryTextLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_VCUI_6EB1BB9A"), PlayerGroupAll());
    libVCUI_gv_pU_VSLabelVictoryTitle = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VSMainPanel, c_triggerControlTypePanel, "ScreenTitleFrame");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "ScreenTitleLabel");
    libVCUI_gv_pU_VSLabelMissionTitle = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VSMainPanel, c_triggerControlTypeLabel, "TimeTextLabel");
    libVCUI_gv_pU_VSLabelTime = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VSMainPanel, c_triggerControlTypeImage, "BackgroundPortrait");
    libVCUI_gv_pU_VSBackgroundImage = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VSMainPanel, c_triggerControlTypeImage, "BackgroundCover");
    libVCUI_gv_pU_VSBackgroundCover = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VSMainPanel, c_triggerControlTypePanel, "MissionRewardKerriganLevel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libVCUI_gv_pU_VSMainPanel, c_triggerControlTypePanel, "BonusMissionReward");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libVCUI_gv_pU_VSMainPanel, c_triggerControlTypePanel, "NewUnitFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libVCUI_gv_pU_VSMainPanel, c_triggerControlTypePanel, "MissionRewardEvolutionUnlocks");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libVCUI_gv_pU_VSMainPanel, c_triggerControlTypeLabel, "SummaryEmptyLabel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libVCUI_gv_pU_VSMainPanel, c_triggerControlTypeLabel, "SummaryHeadingLabel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libVCUI_gv_pU_VSMainPanel, c_triggerControlTypeImage, "SummaryTitleLabelUnderline");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libVCUI_gv_pU_VSMainPanel, c_triggerControlTypeImage, "MissionSectionBg");
    lv_panel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VSMainPanel, c_triggerControlTypeLabel, "MissionRecapHeadingLabel");
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lv_panel, c_anchorTop, 20, 70);
    lv_index = 1;
    for ( ; ( (auto4B7C0D3C_ai >= 0 && lv_index <= auto4B7C0D3C_ae) || (auto4B7C0D3C_ai < 0 && lv_index >= auto4B7C0D3C_ae) ) ; lv_index += auto4B7C0D3C_ai ) {
        DialogControlHookup(libVCUI_gv_pU_VSMainPanel, c_triggerControlTypeAchievement, "AchievementFrame"+IntToString(lv_index-1));
        libVCUI_gv_zS_VSAchievementTitle2[lv_index] = DialogControlLastCreated();
    }
    DialogControlHookup(libVCUI_gv_pU_VSMainPanel, c_triggerControlTypeButton, "PlayAgainButton");
    libVCUI_gv_pU_VSBtnPlayAgain = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VSMainPanel, c_triggerControlTypeButton, "CloseButton");
    libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), "HotS_VictoryPanel_ContinueButton", PlayerGroupAll());
    libVCUI_gv_pU_VSBtnContinue = DialogControlLastCreated();
}

void libVCUI_gf_PU_VictoryUpdateZerg (string lp_mission) {
    // Variable Declarations
    string lv_factionUnlocked;
    string lv_championUnlocked;
    int lv_bonusHeroLevelsGained;
    int lv_bonusHeroLevelsPossible;
    int lv_bonusShipEnergyGained;
    int lv_bonusShipEnergyPossible;
    string lv_indexObjective;
    int lv_index;
    bool lv_rewardsAvailable;

    // Automatic Variable Declarations
    const int autoE51A1D67_ae = 3;
    const int autoE51A1D67_ai = 1;

    // Variable Initialization

    // Implementation
    libNtve_gf_SetDialogItemText(libVCUI_gv_pU_VSLabelMissionTitle, libVoiC_gf_PC_CampaignMapName(lp_mission), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_VCUI_AC0833B3", "MISSIONTITLE", libVoiC_gf_PC_CampaignMapName(lp_mission));
    TextExpressionSetToken("Param/Expression/lib_VCUI_AC0833B3", "DIFFICULTYTITLE", DifficultyNameCampaign(PlayerDifficulty(1)));
    libNtve_gf_SetDialogItemText(libVCUI_gv_pU_VSLabelMissionTitle, TextExpressionAssemble("Param/Expression/lib_VCUI_AC0833B3"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libVCUI_gv_pU_VSLabelTime, libVoiC_gf_FormatTimeCampaign(libVCMI_gv_pM_MissionCompleteTime), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(libVCUI_gv_pU_VSBackgroundImage, libVCUI_gf_PU_VictoryBackgroundZerg(lp_mission), PlayerGroupAll());
    if (((libVoiC_gv_pCX_IsSimulation == true))) {
        libNtve_gf_SetDialogItemTooltip(libVCUI_gv_pU_VSBtnContinue, StringExternal("Param/Value/lib_VCUI_9C7FC355"), PlayerGroupAll());
    }

    lv_index = 1;
    for ( ; ( (autoE51A1D67_ai >= 0 && lv_index <= autoE51A1D67_ae) || (autoE51A1D67_ai < 0 && lv_index >= autoE51A1D67_ae) ) ; lv_index += autoE51A1D67_ai ) {
        libNtve_gf_SetDialogItemAchievement(libVCUI_gv_zS_VSAchievementTitle2[lv_index], UserDataGetGameLink("Maps", libVoiC_gf_PC_MapUserDataInstance(lp_mission), "Achievements", lv_index), PlayerGroupAll());
    }
}

string libVCUI_gf_PU_VictoryBackgroundZerg (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return libVoiC_gf_PC_CampaignMapLoadingScreenImage(lp_map);
}

void libVCUI_gf_PU_VictoryCreateTerran (string lp_mission) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto79B1147E_ae = 3;
    const int auto79B1147E_ai = 1;

    // Variable Initialization

    // Implementation
    VictoryPanelSetMissionTimeTitle(StringExternal("Param/Value/lib_VCUI_F5A56375"));
    VictoryPanelSetSummaryBackgroundFilePath("Assets\\Textures\\ui_void_loading_epilogue02.dds");
    VictoryPanelSetVictoryText(StringExternal("Param/Value/lib_VCUI_D687F260"));
    VictoryPanelSetMissionTimeText(libVoiC_gf_FormatTimeCampaign(libVCMI_gv_pM_MissionCompleteTime));
    VictoryPanelSetRewardTitle(StringToText(""));
    VictoryPanelSetAchievementsTitle(StringExternal("Param/Value/lib_VCUI_04B0AC51"));
    lv_index = 1;
    for ( ; ( (auto79B1147E_ai >= 0 && lv_index <= auto79B1147E_ae) || (auto79B1147E_ai < 0 && lv_index >= auto79B1147E_ae) ) ; lv_index += auto79B1147E_ai ) {
        VictoryPanelAddAchievement(UserDataGetGameLink("Maps", libVoiC_gf_PC_MapUserDataInstance(lp_mission), "Achievements", lv_index));
    }
    VictoryPanelSetMissionTitle(StringExternal("Param/Value/lib_VCUI_972F2FBA"));
    TextExpressionSetToken("Param/Expression/lib_VCUI_6A4DE49F", "MISSIONTITLE", libVoiC_gf_PC_CampaignMapName(lp_mission));
    TextExpressionSetToken("Param/Expression/lib_VCUI_6A4DE49F", "DIFFICULTYTITLE", DifficultyNameCampaign(PlayerDifficulty(1)));
    VictoryPanelSetMissionText(TextExpressionAssemble("Param/Expression/lib_VCUI_6A4DE49F"));
    VictoryPanelSetStatisticsTitle(StringExternal("Param/Value/lib_VCUI_B1A0AC53"));
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeVictoryPanel, true);
    TriggerEnable(libVCUI_gt_PU_VictoryContinueTerran, true);
    TriggerEnable(libVCUI_gt_PU_VictoryPlayAgainTerran, true);
}

void libVCUI_gf_DisplayCampaignVictoryScoreScreen (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    if ((libNtve_gf_PlayerInCinematicMode(1) == true)) {
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    }

    CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UISetWorldVisible(PlayerGroupAll(), false);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    libVCUI_gf_PU_GPVisibilityAutoUpdate(false, c_transitionDurationImmediate);
    libVCUI_gf_HideCampaignDirective();
    UISetCursorVisible(PlayerGroupAll(), true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, true);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    TransmissionClearAll();
    ConversationDataStop();
    if (((lp_mission == "PAiur02") || (lp_mission == "PKorhal02") || (lp_mission == "PShakuras02") || (lp_mission == "PUlnar02") || (lp_mission == "PAiur06") || (lp_mission == "SC2Epilogue02") || (lp_mission == "SC2Epilogue03"))) {
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_VictoryInstant);
    }
    else {
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Victory);
    }
    if ((libVCUI_gv_pU_VictoryMusicOverride == false)) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_Silence", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

    if ((lp_mission == "SC2Epilogue02")) {
        libVCUI_gf_PU_VictoryCreateTerran(lp_mission);
    }
    else if ((lp_mission == "SC2Epilogue03")) {
        libVCUI_gf_PU_VictoryCreateZerg();
        libVCUI_gf_PU_VictoryUpdateZerg(lp_mission);
        DialogSetVisible(libVCUI_gv_pU_VSDialog, PlayerGroupAll(), true);
    }
    else if (true) {
        libVCUI_gf_PU_CreateVictoryScreen();
        libVCUI_gf_PU_UpdateVictoryScreen(lp_mission);
        DialogSetVisible(libVCUI_gv_pU_VSDialog, PlayerGroupAll(), true);
        DialogControlSendAnimationEvent(libVCUI_gv_pU_VSMainPanel, PlayerGroupAll(), "Birth");
    }
    TriggerEnable(libVCUI_gt_PU_VictoryContinue, true);
    TriggerEnable(libVCUI_gt_PU_VictoryPlayAgain, true);
}

void libVCUI_gf_PU_CreateVictoryScreen () {
    // Variable Declarations
    string[5] lv_kerriganKitAbilityPanelID;
    string[6] lv_kerriganUpgradeIconPanelID;
    int lv_panel;
    int lv_index;

    // Automatic Variable Declarations
    const int auto9E95B4FC_ae = 3;
    const int auto9E95B4FC_ai = 1;

    // Variable Initialization
    lv_panel = c_invalidDialogControlId;

    // Implementation
    if ((libVCUI_gv_pU_VSDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(1920, 1200, c_anchorCenter, 0, 0, true);
    libVCUI_gv_pU_VSDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "VoidShared_ScoreScreen/ScoreScreenTemplate");
    libVCUI_gv_pU_VSPanel = DialogControlLastCreated();
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookup(libVCUI_gv_pU_VSPanel, c_triggerControlTypePanel, "MainPanel");
    libVCUI_gv_pU_VSMainPanel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VSMainPanel, c_triggerControlTypeLabel, "VictoryTextLabel");
    libVCUI_gv_pU_VSLabelVictoryTitle = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VSMainPanel, c_triggerControlTypePanel, "ScreenTitleFrame");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "ScreenTitleLabel");
    libVCUI_gv_pU_VSLabelMissionTitle = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VSMainPanel, c_triggerControlTypeLabel, "TimeTextLabel");
    libVCUI_gv_pU_VSLabelTime = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VSMainPanel, c_triggerControlTypeImage, "BackgroundPortrait");
    libVCUI_gv_pU_VSBackgroundImage = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VSMainPanel, c_triggerControlTypeImage, "BackgroundCover");
    libVCUI_gv_pU_VSBackgroundCover = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VSMainPanel, c_triggerControlTypePanel, "PrimaryMissionReward");
    libVCUI_gv_pU_VSRewardPrimaryPanel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VSRewardPrimaryPanel, c_triggerControlTypeLabel, "RewardTextLabel");
    libVCUI_gv_pU_VSRewardPrimaryTextLabel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VSMainPanel, c_triggerControlTypePanel, "BonusMissionReward");
    libVCUI_gv_pU_VSRewardBonusLevelPanel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VSRewardBonusLevelPanel, c_triggerControlTypeLabel, "BonusRewardTextLabel");
    libVCUI_gv_pU_VSRewardBonusLevelTextLabel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VSMainPanel, c_triggerControlTypePanel, "NewUnitFrame");
    libVCUI_gv_pU_VSRewardNewUnitPanel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VSRewardNewUnitPanel, c_triggerControlTypeLabel, "TechnologyTextLabel");
    libVCUI_gv_pU_VSRewardNewUnitTextLabel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VSMainPanel, c_triggerControlTypePanel, "MissionFactionSpecializationUnlocks");
    libVCUI_gv_pU_VSRewardNewFactionPanel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VSRewardNewFactionPanel, c_triggerControlTypeLabel, "RewardFactionSpecializationTextLabel");
    libVCUI_gv_pU_VSRewardNewFactionTextLabel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VSRewardNewFactionPanel, c_triggerControlTypeLabel, "RewardTitleLabel");
    DialogControlHookup(libVCUI_gv_pU_VSMainPanel, c_triggerControlTypeLabel, "SummaryHeadingLabel");
    libVCUI_gv_pU_VSRewardHeadingLabel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VSMainPanel, c_triggerControlTypeImage, "SummaryTitleLabelUnderline");
    libVCUI_gv_pU_VSRewardHeadingUnderline = DialogControlLastCreated();
    lv_index = 1;
    for ( ; ( (auto9E95B4FC_ai >= 0 && lv_index <= auto9E95B4FC_ae) || (auto9E95B4FC_ai < 0 && lv_index >= auto9E95B4FC_ae) ) ; lv_index += auto9E95B4FC_ai ) {
        DialogControlHookup(libVCUI_gv_pU_VSMainPanel, c_triggerControlTypeAchievement, "AchievementFrame"+IntToString(lv_index-1));
        libVCUI_gv_zS_VSAchievementTitle2[lv_index] = DialogControlLastCreated();
    }
    DialogControlHookup(libVCUI_gv_pU_VSMainPanel, c_triggerControlTypeButton, "PlayAgainButton");
    libVCUI_gv_pU_VSBtnPlayAgain = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_VSMainPanel, c_triggerControlTypeButton, "CloseButton");
    libVCUI_gv_pU_VSBtnContinue = DialogControlLastCreated();
}

void libVCUI_gf_PU_UpdateVictoryScreen (string lp_mission) {
    // Variable Declarations
    string lv_championUnlocked;
    int lv_bonusShipEnergyGained;
    int lv_bonusShipEnergyPossible;
    string lv_indexObjective;
    int lv_index;
    bool lv_rewardsAvailable;
    string lv_unit3rdFactionUnlocked;

    // Automatic Variable Declarations
    int auto98CDB859_ae;
    int auto98CDB859_ai;
    const int autoD4D88451_ae = 3;
    const int autoD4D88451_ai = 1;

    // Variable Initialization

    // Implementation
    libNtve_gf_SetDialogItemText(libVCUI_gv_pU_VSLabelMissionTitle, libVoiC_gf_PC_CampaignMapName(lp_mission), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_VCUI_1D6AD694", "MISSIONTITLE", libVoiC_gf_PC_CampaignMapName(lp_mission));
    TextExpressionSetToken("Param/Expression/lib_VCUI_1D6AD694", "DIFFICULTYTITLE", DifficultyNameCampaign(PlayerDifficulty(1)));
    libNtve_gf_SetDialogItemText(libVCUI_gv_pU_VSLabelMissionTitle, TextExpressionAssemble("Param/Expression/lib_VCUI_1D6AD694"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libVCUI_gv_pU_VSLabelTime, libVoiC_gf_FormatTimeCampaign(libVCMI_gv_pM_MissionCompleteTime), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(libVCUI_gv_pU_VSBackgroundImage, libVCUI_gf_PU_VictoryScreenBackground(lp_mission), PlayerGroupAll());
    if (((libVoiC_gv_pCX_IsSimulation == true) || ((libVoiC_gf_MissionStatusCheck("PAiur03", libVoiC_ge_MissionStatus_Completed) == true) && (libVoiC_gf_PC_CampaignInEpilogue() == false)))) {
        if ((libVoiC_gf_LastMission() == "PAiur06")) {
            libNtve_gf_SetDialogItemTooltip(libVCUI_gv_pU_VSBtnContinue, StringExternal("Param/Value/lib_VCUI_8DD0F0DE"), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemTooltip(libVCUI_gv_pU_VSBtnContinue, StringExternal("Param/Value/lib_VCUI_5101B237"), PlayerGroupAll());
        }
    }

    if ((lp_mission == "PAiur02")) {
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_VSLabelVictoryTitle, StringExternal("Param/Value/lib_VCUI_BB8EC59F"), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_VSLabelVictoryTitle, StringExternal("Param/Value/lib_VCUI_BD1D498C"), PlayerGroupAll());
    }
    if ((libVoiC_gf_PC_MissionRewardsArmy(lp_mission) > 0)) {
        TextExpressionSetToken("Param/Expression/lib_VCUI_357F95E2", "Count", IntToText(libVoiC_gf_PC_MissionRewardsArmy(lp_mission)));
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_VSRewardPrimaryTextLabel, TextExpressionAssemble("Param/Expression/lib_VCUI_357F95E2"), PlayerGroupAll());
        lv_rewardsAvailable = true;
    }
    else {
        DialogControlSetVisible(libVCUI_gv_pU_VSRewardPrimaryPanel, PlayerGroupAll(), false);
    }
    lv_bonusShipEnergyGained = 0;
    auto98CDB859_ae = CatalogFieldValueCount(c_gameCatalogMap, lp_mission, "ObjectiveArray", 1);
    auto98CDB859_ai = 1;
    while (auto98CDB859_ai <= auto98CDB859_ae) {
        lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, lp_mission, "ObjectiveArray["+IntToString(auto98CDB859_ai-1)+"]", 1);
        auto98CDB859_ai = auto98CDB859_ai + 1;
        if ((libVoiC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
            lv_bonusShipEnergyPossible += libVoiC_gf_MissionObjectiveRewardsAvailable2(lv_indexObjective, "ShipEnergy");
            lv_bonusShipEnergyGained += libVoiC_gf_MissionObjectiveRewardsEarned(lv_indexObjective, "ShipEnergy");
        }

    }
    if ((lv_bonusShipEnergyPossible > 0)) {
        DialogControlSetVisible(libVCUI_gv_pU_VSRewardBonusLevelPanel, PlayerGroupAll(), true);
        TextExpressionSetToken("Param/Expression/lib_VCUI_4A8A19B5", "GAINED", IntToText(lv_bonusShipEnergyGained));
        TextExpressionSetToken("Param/Expression/lib_VCUI_4A8A19B5", "POSSIBLE", IntToText(lv_bonusShipEnergyPossible));
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_VSRewardBonusLevelTextLabel, TextExpressionAssemble("Param/Expression/lib_VCUI_4A8A19B5"), PlayerGroupAll());
        lv_rewardsAvailable = true;
    }
    else {
        DialogControlSetVisible(libVCUI_gv_pU_VSRewardBonusLevelPanel, PlayerGroupAll(), false);
    }
    if ((lp_mission != "PAiur01") && (lp_mission != "PAiur02") && (libVoiC_gf_MissionArmyCategoryUnlocked(lp_mission) != null)) {
        DialogControlSetVisible(libVCUI_gv_pU_VSRewardNewUnitPanel, PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_VSRewardNewUnitTextLabel, libVoiC_gf_PC_ArmyCategoryName(libVoiC_gf_MissionArmyCategoryUnlocked(lp_mission)), PlayerGroupAll());
        lv_rewardsAvailable = true;
    }
    else {
        DialogControlSetVisible(libVCUI_gv_pU_VSRewardNewUnitPanel, PlayerGroupAll(), false);
    }
    lv_unit3rdFactionUnlocked = libVoiC_gf_PC_ArmyUnitSpecializationUnlockedAfterLastMission();
    if ((lv_unit3rdFactionUnlocked != null) && (libVoiC_gv_pCX_IsSimulation == false)) {
        DialogControlSetVisible(libVCUI_gv_pU_VSRewardNewFactionPanel, PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_VSRewardNewFactionTextLabel, libVoiC_gf_PC_ArmyUnitFactionName(lv_unit3rdFactionUnlocked), PlayerGroupAll());
        lv_rewardsAvailable = true;
    }
    else {
        DialogControlSetVisible(libVCUI_gv_pU_VSRewardNewFactionPanel, PlayerGroupAll(), false);
    }
    if ((lv_rewardsAvailable == false)) {
        DialogControlSetVisible(libVCUI_gv_pU_VSRewardHeadingLabel, PlayerGroupAll(), false);
        DialogControlSetVisible(libVCUI_gv_pU_VSRewardHeadingUnderline, PlayerGroupAll(), false);
    }
    else {
        DialogControlSetVisible(libVCUI_gv_pU_VSRewardHeadingLabel, PlayerGroupAll(), true);
        DialogControlSetVisible(libVCUI_gv_pU_VSRewardHeadingUnderline, PlayerGroupAll(), true);
    }
    lv_index = 1;
    for ( ; ( (autoD4D88451_ai >= 0 && lv_index <= autoD4D88451_ae) || (autoD4D88451_ai < 0 && lv_index >= autoD4D88451_ae) ) ; lv_index += autoD4D88451_ai ) {
        libNtve_gf_SetDialogItemAchievement(libVCUI_gv_zS_VSAchievementTitle2[lv_index], UserDataGetGameLink("Maps", libVoiC_gf_PC_MapUserDataInstance(lp_mission), "Achievements", lv_index), PlayerGroupAll());
    }
}

void libVCUI_gf_PU_VSDisplayRestartDialog () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoD44AF647_ae = libVoiC_gv_pCC_DifficultyCount;
    const int autoD44AF647_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libVCUI_gv_pU_VSRestartPanel == c_invalidDialogControlId)) {
        DialogControlHookup(libVCUI_gv_pU_VSPanel, c_triggerControlTypePanel, "RestartPanel");
        libVCUI_gv_pU_VSRestartPanel = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_VSRestartPanel, c_triggerControlTypePanel, "DifficultyPulldownContainer");
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePulldown, "DifficultyPulldown");
        libVCUI_gv_pU_VSRestartDifficultyPulldown = DialogControlLastCreated();
        lv_index = 1;
        for ( ; ( (autoD44AF647_ai >= 0 && lv_index <= autoD44AF647_ae) || (autoD44AF647_ai < 0 && lv_index >= autoD44AF647_ae) ) ; lv_index += autoD44AF647_ai ) {
            DialogControlAddItem(libVCUI_gv_pU_VSRestartDifficultyPulldown, PlayerGroupAll(), DifficultyNameCampaign(libVoiC_gf_PC_DifficultyFromIndex(lv_index)));
        }
        DialogControlHookup(libVCUI_gv_pU_VSRestartPanel, c_triggerControlTypePanel, "RestartButton");
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeButton, "Button");
        libVCUI_gv_pU_VSRestartRestartButton = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_VSRestartPanel, c_triggerControlTypePanel, "CancelButton");
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeButton, "Button");
        libVCUI_gv_pU_VSRestartCancelButton = DialogControlLastCreated();
    }

    TriggerEnable(libVCUI_gt_PU_VictoryRestartCancel, true);
    TriggerEnable(libVCUI_gt_PU_VictoryRestartRestart, true);
    DialogControlSelectItem(libVCUI_gv_pU_VSRestartDifficultyPulldown, PlayerGroupAll(), libVoiC_gf_PC_DifficultyIndex(PlayerDifficulty(1)));
    DialogControlSetVisible(libVCUI_gv_pU_VSRestartPanel, PlayerGroupAll(), true);
    DialogControlSetVisible(libVCUI_gv_pU_VSMainPanel, PlayerGroupAll(), false);
}

string libVCUI_gf_PU_VictoryScreenBackground (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return "Assets\\Textures\\ui_temp_victorybackground.dds";
}

void libVCUI_gf_PU_VictoryClosed (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libVCUI_gv_pUC_VictoryEventClosed);
}

void libVCUI_gf_OverrideScorescreenMusic () {
    // Automatic Variable Declarations
    // Implementation
    libVCUI_gv_pU_VictoryMusicOverride = true;
}

color libVCUI_gf_ProgressColor (int lp_minValue, int lp_maxValue, int lp_progress, color lp_color1, color lp_color2, color lp_color3, int lp_steps) {
    // Variable Declarations
    int lv_middle;
    fixed lv_r;
    fixed lv_g;
    fixed lv_b;

    // Automatic Variable Declarations
    int auto627A717C_val;

    // Variable Initialization

    // Implementation
    auto627A717C_val = lp_steps;
    if (auto627A717C_val == 1) {
        return lp_color1;
    }
    else if (auto627A717C_val == 2) {
        lv_r = (ColorGetComponent(lp_color1, c_colorComponentRed)+(ColorGetComponent(lp_color2, c_colorComponentRed)-ColorGetComponent(lp_color1, c_colorComponentRed))*(lp_progress - lp_minValue)/(lp_maxValue - lp_minValue));
        lv_g = (ColorGetComponent(lp_color1, c_colorComponentGreen)+(ColorGetComponent(lp_color2, c_colorComponentGreen)-ColorGetComponent(lp_color1, c_colorComponentGreen))*(lp_progress - lp_minValue)/(lp_maxValue - lp_minValue));
        lv_b = (ColorGetComponent(lp_color1, c_colorComponentBlue)+(ColorGetComponent(lp_color2, c_colorComponentBlue)-ColorGetComponent(lp_color1, c_colorComponentBlue))*(lp_progress - lp_minValue)/(lp_maxValue - lp_minValue));
        return Color(lv_r, lv_g, lv_b);
    }
    else if (auto627A717C_val == 3) {
        lv_middle = ((lp_minValue+lp_maxValue)/2);
        if ((lp_progress < lv_middle)) {
            return libVCUI_gf_ProgressColor(lp_minValue, lv_middle, lp_progress, lp_color1, lp_color2, Color(0,0,0), 2);
        }
        else if ((lp_progress == lv_middle)) {
            return lp_color2;
        }
        else if ((lp_progress > lv_middle)) {
            return libVCUI_gf_ProgressColor(lv_middle, lp_maxValue, lp_progress, lp_color2, lp_color3, Color(0,0,0), 2);
        }
    }
    else {
    }
    return lp_color1;
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: PU_DebugArmy
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_DebugArmy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVCUI_gv_pU_ArmyDialog != c_invalidDialogId)) {
        return true;
    }

    TriggerEnable(libVCUI_gt_PU_DebugArmyClosed, true);
    libVCUI_gf_PU_ArmyDisplay(true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_DebugArmy_Init () {
    libVCUI_gt_PU_DebugArmy = TriggerCreate("libVCUI_gt_PU_DebugArmy_Func");
    TriggerAddEventChatMessage(libVCUI_gt_PU_DebugArmy, c_playerAny, "ARMY", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_DebugArmyClosed
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_DebugArmyClosed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexArmyUnit;
    string lv_unitUsed;
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCUI_gf_PU_ArmyClose();
    libVoiC_gf_PC_ApplyArmyTech(1);
    TriggerExecute(libVoiC_gv_pC_TechLimitsCallback, true, false);
    UISetWorldVisible(PlayerGroupAll(), true);
    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    libVoiC_gf_ShowHideWorldCover(false, 0.0);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_DebugArmyClosed_Init () {
    libVCUI_gt_PU_DebugArmyClosed = TriggerCreate("libVCUI_gt_PU_DebugArmyClosed_Func");
    TriggerEnable(libVCUI_gt_PU_DebugArmyClosed, false);
    libVCUI_gf_PU_ArmyClosed(libVCUI_gt_PU_DebugArmyClosed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_DebugSoACheat
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_DebugSoACheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libVCUI_gt_PU_DebugSoAClosed, true);
    libVCUI_gf_PU_SoADisplay(true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_DebugSoACheat_Init () {
    libVCUI_gt_PU_DebugSoACheat = TriggerCreate("libVCUI_gt_PU_DebugSoACheat_Func");
    TriggerAddEventChatMessage(libVCUI_gt_PU_DebugSoACheat, c_playerAny, "soa", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_DebugSoAClosed
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_DebugSoAClosed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCUI_gf_PU_SoAClose();
    libVoiC_gf_PC_ApplyPerkTech();
    libVoiC_gf_ShowHideWorldCover(false, 100.0);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_DebugSoAClosed_Init () {
    libVCUI_gt_PU_DebugSoAClosed = TriggerCreate("libVCUI_gt_PU_DebugSoAClosed_Func");
    TriggerEnable(libVCUI_gt_PU_DebugSoAClosed, false);
    libVCUI_gf_PU_SoAClosed(libVCUI_gt_PU_DebugSoAClosed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_DebugResetGPScene
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_DebugResetGPScene_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CutsceneStop(CutsceneGetTriggerControl(libVCUI_gv_pU_GPCutscene));
    libNtve_gf_SetDialogItemCutscene(libVCUI_gv_pU_GPCutscene, "Cutscenes\\UI_SoAMission.SC2Cutscene", PlayerGroupAll());
    CutscenePlay(CutsceneGetTriggerControl(libVCUI_gv_pU_GPCutscene));
    CutsceneStop(CutsceneGetTriggerControl(libVCUI_gv_pU_GPEnergyBarScene));
    libNtve_gf_SetDialogItemCutscene(libVCUI_gv_pU_GPEnergyBarScene, "Cutscenes\\UI_SoAMissionEnergy.SC2Cutscene", PlayerGroupAll());
    CutscenePlay(CutsceneGetTriggerControl(libVCUI_gv_pU_GPEnergyBarScene));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_DebugResetGPScene_Init () {
    libVCUI_gt_PU_DebugResetGPScene = TriggerCreate("libVCUI_gt_PU_DebugResetGPScene_Func");
    TriggerAddEventChatMessage(libVCUI_gt_PU_DebugResetGPScene, c_playerAny, "-soareload", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_DebugTogGPVis
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_DebugTogGPVis_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVCUI_gv_pU_GPRequestedVisible == true)) {
        libVCUI_gf_ShowSpearofAdunUI(false, c_transitionDurationDefault);
    }
    else {
        libVCUI_gf_ShowSpearofAdunUI(true, c_transitionDurationDefault);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_DebugTogGPVis_Init () {
    libVCUI_gt_PU_DebugTogGPVis = TriggerCreate("libVCUI_gt_PU_DebugTogGPVis_Func");
    TriggerAddEventChatMessage(libVCUI_gt_PU_DebugTogGPVis, c_playerAny, "-togsoa", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_DebugSoATutorial
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_DebugSoATutorial_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UserDataSetInt("StoryStates", "Ship UI Visited", "Value", 1, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_DebugSoATutorial_Init () {
    libVCUI_gt_PU_DebugSoATutorial = TriggerCreate("libVCUI_gt_PU_DebugSoATutorial_Func");
    TriggerAddEventChatMessage(libVCUI_gt_PU_DebugSoATutorial, c_playerAny, "-soatutorial", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_DebugScreenMode
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_DebugScreenMode_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_duration;

    // Automatic Variable Declarations
    string autoFECC37CE_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 3) == "0")) {
        lv_duration = c_transitionDurationImmediate;
    }
    else {
        lv_duration = c_transitionDurationDefault;
    }
    autoFECC37CE_val = StringWord(EventChatMessage(false), 2);
    if (autoFECC37CE_val == "full") {
        libVCMI_gf_SetScreenModeCampaign(c_uiModeFullscreen, lv_duration);
    }
    else if (autoFECC37CE_val == "normal") {
        libVCMI_gf_SetScreenModeCampaign(c_uiModeConsole, lv_duration);
    }
    else if (autoFECC37CE_val == "letter") {
        libVCMI_gf_SetScreenModeCampaign(c_uiModeLetterboxed, lv_duration);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_DebugScreenMode_Init () {
    libVCUI_gt_PU_DebugScreenMode = TriggerCreate("libVCUI_gt_PU_DebugScreenMode_Func");
    TriggerAddEventChatMessage(libVCUI_gt_PU_DebugScreenMode, c_playerAny, "screenmode", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_DebugCinematicMode
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_DebugCinematicMode_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_duration;

    // Automatic Variable Declarations
    string autoFD84E73E_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 3) == "0")) {
        lv_duration = c_transitionDurationImmediate;
    }
    else {
        lv_duration = c_transitionDurationDefault;
    }
    autoFD84E73E_val = StringWord(EventChatMessage(false), 2);
    if (autoFD84E73E_val == "on") {
        libVCMI_gf_CinematicModeCampaign(true, lv_duration, true);
    }
    else {
        libVCMI_gf_CinematicModeCampaign(false, lv_duration, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_DebugCinematicMode_Init () {
    libVCUI_gt_PU_DebugCinematicMode = TriggerCreate("libVCUI_gt_PU_DebugCinematicMode_Func");
    TriggerAddEventChatMessage(libVCUI_gt_PU_DebugCinematicMode, c_playerAny, "cinmode", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_DebugHighlightAbility
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_DebugHighlightAbility_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iD;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_iD = StringToInt(StringSub(EventChatMessage(false), 10, 10));

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gf_TurnSpearofAdunSlotHighlightOnOff(lv_iD, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_DebugHighlightAbility_Init () {
    libVCUI_gt_PU_DebugHighlightAbility = TriggerCreate("libVCUI_gt_PU_DebugHighlightAbility_Func");
    TriggerAddEventChatMessage(libVCUI_gt_PU_DebugHighlightAbility, c_playerAny, "Highlight1", true);
    TriggerAddEventChatMessage(libVCUI_gt_PU_DebugHighlightAbility, c_playerAny, "Highlight2", true);
    TriggerAddEventChatMessage(libVCUI_gt_PU_DebugHighlightAbility, c_playerAny, "Highlight3", true);
    TriggerAddEventChatMessage(libVCUI_gt_PU_DebugHighlightAbility, c_playerAny, "Highlight4", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_DebugAchievement
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_DebugAchievement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AchievementPanelSetVisible(PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_DebugAchievement_Init () {
    libVCUI_gt_PU_DebugAchievement = TriggerCreate("libVCUI_gt_PU_DebugAchievement_Func");
    TriggerAddEventChatMessage(libVCUI_gt_PU_DebugAchievement, c_playerAny, "-ach", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_ArmyFactionSelected
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_ArmyFactionSelected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_factionIndex;

    // Automatic Variable Declarations
    const int autoC1A94C19_ae = libVCUI_gv_pUC_ArmyChoiceCount;
    const int autoC1A94C19_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_factionIndex = 1;
    for ( ; ( (autoC1A94C19_ai >= 0 && lv_factionIndex <= autoC1A94C19_ae) || (autoC1A94C19_ai < 0 && lv_factionIndex >= autoC1A94C19_ae) ) ; lv_factionIndex += autoC1A94C19_ai ) {
        if ((EventDialogControl() == libVCUI_gv_pU_ArmyFactionButtons[lv_factionIndex])) {
            if ((libVCUI_gv_pU_ArmyUnitSelectedIndex[libVCUI_gv_pU_ArmyCategorySelectedIndex] == lv_factionIndex)) {
                return true;
            }

            if ((libVCUI_gv_pU_ArmyUnitSelectedIndex[libVCUI_gv_pU_ArmyCategorySelectedIndex] != 0)) {
                DialogControlSendAnimationEvent(libVCUI_gv_pU_ArmyFactionButtons[libVCUI_gv_pU_ArmyUnitSelectedIndex[libVCUI_gv_pU_ArmyCategorySelectedIndex]], PlayerGroupAll(), "OnDeselection");
            }

            libVCUI_gv_pU_ArmyUnitSelectedIndex[libVCUI_gv_pU_ArmyCategorySelectedIndex] = lv_factionIndex;
            DialogControlSendAnimationEvent(EventDialogControl(), PlayerGroupAll(), "OnSelection");
            libVCUI_gf_PU_ArmyUpdateDialog();
            TriggerExecute(libVCUI_gt_PU_ArmyTutorial, true, false);
            CutsceneGoToBookmark(libVCUI_gv_pU_ArmyCutscene, "LeadIn");
            SoundPlayForPlayer(SoundLink("SMX2ArmyUISwitchUnit", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            libVCUI_gv_pU_ArmyCategorySelectedReminderComplete = true;
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_ArmyFactionSelected_Init () {
    libVCUI_gt_PU_ArmyFactionSelected = TriggerCreate("libVCUI_gt_PU_ArmyFactionSelected_Func");
    TriggerEnable(libVCUI_gt_PU_ArmyFactionSelected, false);
    TriggerAddEventDialogControl(libVCUI_gt_PU_ArmyFactionSelected, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_ArmyCategorySelected
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_ArmyCategorySelected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_categoryIndex;

    // Automatic Variable Declarations
    const int auto726E2244_ae = libVCUI_gv_pUC_ArmyCategoryCountMax;
    const int auto726E2244_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_categoryIndex = 1;
    for ( ; ( (auto726E2244_ai >= 0 && lv_categoryIndex <= auto726E2244_ae) || (auto726E2244_ai < 0 && lv_categoryIndex >= auto726E2244_ae) ) ; lv_categoryIndex += auto726E2244_ai ) {
        if ((EventDialogControl() == libVCUI_gv_pU_ArmyCategoryButtons[lv_categoryIndex])) {
            libVCUI_gv_pU_ArmyCategorySelectedReminderComplete = false;
            libVCUI_gf_PU_ArmyCategorySelect(lv_categoryIndex);
            CutsceneGoToBookmark(libVCUI_gv_pU_ArmyCutscene, "LoopStart");
            libVCUI_gf_PU_ArmyUpdateDialog();
            TriggerExecute(libVCUI_gt_PU_ArmyTutorial, true, false);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_ArmyCategorySelected_Init () {
    libVCUI_gt_PU_ArmyCategorySelected = TriggerCreate("libVCUI_gt_PU_ArmyCategorySelected_Func");
    TriggerEnable(libVCUI_gt_PU_ArmyCategorySelected, false);
    TriggerAddEventDialogControl(libVCUI_gt_PU_ArmyCategorySelected, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_ArmyCategoryHoverStart
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_ArmyCategoryHoverStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_categoryIndex;

    // Automatic Variable Declarations
    const int auto9E0B9A9D_ae = libVCUI_gv_pUC_ArmyCategoryCountMax;
    const int auto9E0B9A9D_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_categoryIndex = 1;
    for ( ; ( (auto9E0B9A9D_ai >= 0 && lv_categoryIndex <= auto9E0B9A9D_ae) || (auto9E0B9A9D_ai < 0 && lv_categoryIndex >= auto9E0B9A9D_ae) ) ; lv_categoryIndex += auto9E0B9A9D_ai ) {
        if ((EventDialogControl() == libVCUI_gv_pU_ArmyCategoryButtons[lv_categoryIndex])) {
            if ((libVCUI_gv_pU_ArmyCategorySelectedIndex != lv_categoryIndex)) {
                if ((libVoiC_gf_PC_ArmyCategoryState(libVCUI_gv_pU_ArmyCategories[lv_categoryIndex]) != c_armyCategoryStateLocked)) {
                    SoundPlayForPlayer(SoundLink("UI_Void_Army_Category_Hover", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                }

                libNtve_gf_SetDialogItemStyle(libVCUI_gv_pU_ArmyCategoryNames[lv_categoryIndex], "Void_ArmyCategoryNameSelected", PlayerGroupAll());
            }

            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_ArmyCategoryHoverStart_Init () {
    libVCUI_gt_PU_ArmyCategoryHoverStart = TriggerCreate("libVCUI_gt_PU_ArmyCategoryHoverStart_Func");
    TriggerEnable(libVCUI_gt_PU_ArmyCategoryHoverStart, false);
    TriggerAddEventDialogControl(libVCUI_gt_PU_ArmyCategoryHoverStart, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_ArmyCategoryHoverEnd
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_ArmyCategoryHoverEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_categoryIndex;

    // Automatic Variable Declarations
    const int auto46A4DC73_ae = libVCUI_gv_pUC_ArmyCategoryCountMax;
    const int auto46A4DC73_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_categoryIndex = 1;
    for ( ; ( (auto46A4DC73_ai >= 0 && lv_categoryIndex <= auto46A4DC73_ae) || (auto46A4DC73_ai < 0 && lv_categoryIndex >= auto46A4DC73_ae) ) ; lv_categoryIndex += auto46A4DC73_ai ) {
        if ((EventDialogControl() == libVCUI_gv_pU_ArmyCategoryButtons[lv_categoryIndex])) {
            if ((libVCUI_gv_pU_ArmyCategorySelectedIndex != lv_categoryIndex)) {
                libNtve_gf_SetDialogItemStyle(libVCUI_gv_pU_ArmyCategoryNames[lv_categoryIndex], "Void_ArmyCategoryName", PlayerGroupAll());
            }

            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_ArmyCategoryHoverEnd_Init () {
    libVCUI_gt_PU_ArmyCategoryHoverEnd = TriggerCreate("libVCUI_gt_PU_ArmyCategoryHoverEnd_Func");
    TriggerEnable(libVCUI_gt_PU_ArmyCategoryHoverEnd, false);
    TriggerAddEventDialogControl(libVCUI_gt_PU_ArmyCategoryHoverEnd, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_ArmyFactionHoverStart
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_ArmyFactionHoverStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexFactionUnit;

    // Automatic Variable Declarations
    const int autoE71E44E1_ae = libVCUI_gv_pUC_ArmyChoiceCount;
    const int autoE71E44E1_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_indexFactionUnit = 1;
    for ( ; ( (autoE71E44E1_ai >= 0 && lv_indexFactionUnit <= autoE71E44E1_ae) || (autoE71E44E1_ai < 0 && lv_indexFactionUnit >= autoE71E44E1_ae) ) ; lv_indexFactionUnit += autoE71E44E1_ai ) {
        if ((EventDialogControl() == libVCUI_gv_pU_ArmyFactionButtons[lv_indexFactionUnit])) {
            if ((libVCUI_gv_pU_ArmyUnitSelectedIndex[libVCUI_gv_pU_ArmyCategorySelectedIndex] != lv_indexFactionUnit) && (libVoiC_gf_PC_StoryArmyUnitState(libVCUI_gv_pU_ArmyUnits[libVCUI_gv_pU_ArmyCategorySelectedIndex][lv_indexFactionUnit]) != c_armyUnitStateLocked)) {
                SoundPlayForPlayer(SoundLink("UI_Void_Army_Faction_Hover", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                libNtve_gf_SetDialogItemStyle(libVCUI_gv_pU_ArmyFactionUnitTitle[lv_indexFactionUnit], libVCUI_gf_PU_ArmyFactionStyle("Void_ArmyFactionUnitTitle", libVoiC_gf_PC_ArmyUnitFaction(libVCUI_gv_pU_ArmyUnits[libVCUI_gv_pU_ArmyCategorySelectedIndex][lv_indexFactionUnit]), true), PlayerGroupAll());
                libNtve_gf_SetDialogItemStyle(libVCUI_gv_pU_ArmyFactionDetail[lv_indexFactionUnit], libVCUI_gf_PU_ArmyFactionStyle("Void_ArmyFactionDetail", libVoiC_gf_PC_ArmyUnitFaction(libVCUI_gv_pU_ArmyUnits[libVCUI_gv_pU_ArmyCategorySelectedIndex][lv_indexFactionUnit]), true), PlayerGroupAll());
                DialogControlSetVisible(libVCUI_gv_pU_ArmyFactionNameLabel[lv_indexFactionUnit], PlayerGroupAll(), true);
            }

            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_ArmyFactionHoverStart_Init () {
    libVCUI_gt_PU_ArmyFactionHoverStart = TriggerCreate("libVCUI_gt_PU_ArmyFactionHoverStart_Func");
    TriggerEnable(libVCUI_gt_PU_ArmyFactionHoverStart, false);
    TriggerAddEventDialogControl(libVCUI_gt_PU_ArmyFactionHoverStart, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_ArmyFactionHoverEnd
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_ArmyFactionHoverEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexFactionUnit;

    // Automatic Variable Declarations
    const int auto882CC9CD_ae = libVCUI_gv_pUC_ArmyChoiceCount;
    const int auto882CC9CD_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_indexFactionUnit = 1;
    for ( ; ( (auto882CC9CD_ai >= 0 && lv_indexFactionUnit <= auto882CC9CD_ae) || (auto882CC9CD_ai < 0 && lv_indexFactionUnit >= auto882CC9CD_ae) ) ; lv_indexFactionUnit += auto882CC9CD_ai ) {
        if ((EventDialogControl() == libVCUI_gv_pU_ArmyFactionButtons[lv_indexFactionUnit])) {
            if ((libVCUI_gv_pU_ArmyUnitSelectedIndex[libVCUI_gv_pU_ArmyCategorySelectedIndex] != lv_indexFactionUnit) && (libVoiC_gf_PC_StoryArmyUnitState(libVCUI_gv_pU_ArmyUnits[libVCUI_gv_pU_ArmyCategorySelectedIndex][lv_indexFactionUnit]) != c_armyUnitStateLocked)) {
                libNtve_gf_SetDialogItemStyle(libVCUI_gv_pU_ArmyFactionUnitTitle[lv_indexFactionUnit], libVCUI_gf_PU_ArmyFactionStyle("Void_ArmyFactionUnitTitle", libVoiC_gf_PC_ArmyUnitFaction(libVCUI_gv_pU_ArmyUnits[libVCUI_gv_pU_ArmyCategorySelectedIndex][lv_indexFactionUnit]), false), PlayerGroupAll());
                libNtve_gf_SetDialogItemStyle(libVCUI_gv_pU_ArmyFactionDetail[lv_indexFactionUnit], libVCUI_gf_PU_ArmyFactionStyle("Void_ArmyFactionDetail", libVoiC_gf_PC_ArmyUnitFaction(libVCUI_gv_pU_ArmyUnits[libVCUI_gv_pU_ArmyCategorySelectedIndex][lv_indexFactionUnit]), false), PlayerGroupAll());
                DialogControlSetVisible(libVCUI_gv_pU_ArmyFactionNameLabel[lv_indexFactionUnit], PlayerGroupAll(), true);
            }

            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_ArmyFactionHoverEnd_Init () {
    libVCUI_gt_PU_ArmyFactionHoverEnd = TriggerCreate("libVCUI_gt_PU_ArmyFactionHoverEnd_Func");
    TriggerEnable(libVCUI_gt_PU_ArmyFactionHoverEnd, false);
    TriggerAddEventDialogControl(libVCUI_gt_PU_ArmyFactionHoverEnd, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_ArmyConfirm
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_ArmyConfirm_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libVCUI_gv_pU_ArmyUpgradeConfirmButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gf_PU_ArmyUpdateData();
    TriggerSendEvent(libVCUI_gv_pUC_ArmyUIEventClosed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_ArmyConfirm_Init () {
    libVCUI_gt_PU_ArmyConfirm = TriggerCreate("libVCUI_gt_PU_ArmyConfirm_Func");
    TriggerEnable(libVCUI_gt_PU_ArmyConfirm, false);
    TriggerAddEventDialogControl(libVCUI_gt_PU_ArmyConfirm, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_ArmyCutsceneReady
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_ArmyCutsceneReady_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_CinematicFade(true, 0.3, Color(0.00, 0.00, 0.00), false);
    DialogControlFadeTransparency(libVCUI_gv_pU_ArmyPanel, PlayerGroupAll(), 0.3, 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "pAmbience_ArmyScreen", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerEnable(libVCUI_gt_PU_ArmyConfirm, true);
    TriggerEnable(libVCUI_gt_PU_ArmyCategorySelected, true);
    TriggerEnable(libVCUI_gt_PU_ArmyFactionSelected, true);
    TriggerEnable(libVCUI_gt_PU_ArmyFactionHoverStart, true);
    TriggerEnable(libVCUI_gt_PU_ArmyFactionHoverEnd, true);
    TriggerEnable(libVCUI_gt_PU_ArmyCategoryHoverStart, true);
    TriggerEnable(libVCUI_gt_PU_ArmyCategoryHoverEnd, true);
    TriggerEnable(libVCUI_gt_PU_ArmyRotateUnitStart, true);
    if ((libVCUI_gv_pU_ArmyDebugMode == false) && (libVoiC_gf_StoryInSimulation() == false)) {
        TriggerExecute(libVCUI_gt_PU_ArmyEntranceReminders, true, false);
        TriggerExecute(libVCUI_gt_PU_ArmyTutorial, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_ArmyCutsceneReady_Init () {
    libVCUI_gt_PU_ArmyCutsceneReady = TriggerCreate("libVCUI_gt_PU_ArmyCutsceneReady_Func");
    TriggerEnable(libVCUI_gt_PU_ArmyCutsceneReady, false);
    TriggerAddEventCutsceneBookmarkFired(libVCUI_gt_PU_ArmyCutsceneReady, c_cutsceneNone, "Ready");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_ArmyRotateUnitStart
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_ArmyRotateUnitStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCUI_gv_pU_ArmyUnitRotateFinderTag != "NONE"))) {
            return false;
        }

        if (!((EventMouseClickedPosXUI() >= 430))) {
            return false;
        }

        if (!((EventMouseClickedPosXUI() <= 1120))) {
            return false;
        }

        if (!((EventMouseClickedPosYUI() >= 250))) {
            return false;
        }

        if (!((EventMouseClickedPosYUI() <= 795))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gv_pU_ArmyUnitRotateOldMouseXPos = EventMouseClickedPosXUI();
    TriggerEnable(libVCUI_gt_PU_ArmyRotateUnit, true);
    TriggerEnable(libVCUI_gt_PU_ArmyRotateUnitEnd, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_ArmyRotateUnitStart_Init () {
    libVCUI_gt_PU_ArmyRotateUnitStart = TriggerCreate("libVCUI_gt_PU_ArmyRotateUnitStart_Func");
    TriggerEnable(libVCUI_gt_PU_ArmyRotateUnitStart, false);
    TriggerAddEventMouseClicked(libVCUI_gt_PU_ArmyRotateUnitStart, c_playerAny, c_mouseButtonLeft, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_ArmyRotateUnit
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_ArmyRotateUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_newMouseXPos;
    fixed lv_rotationAmount;
    const fixed lv_rotationSensitivity = 0.35;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_newMouseXPos = EventMouseMovedPosXUI();
    lv_rotationAmount = (libVCUI_gf_PU_ArmyRotateNormalize(((lv_newMouseXPos - libVCUI_gv_pU_ArmyUnitRotateOldMouseXPos) * lv_rotationSensitivity), -180.0, 180.0) * -1.0);
    libVCUI_gv_pU_ArmyUnitRotateOldMouseXPos = lv_newMouseXPos;
    ActorSend(ActorFrom(("::external." + libVCUI_gv_pU_ArmyUnitRotateFinderTag)), (("AddYaw " + FixedToString(lv_rotationAmount, c_fixedPrecisionAny))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_ArmyRotateUnit_Init () {
    libVCUI_gt_PU_ArmyRotateUnit = TriggerCreate("libVCUI_gt_PU_ArmyRotateUnit_Func");
    TriggerEnable(libVCUI_gt_PU_ArmyRotateUnit, false);
    TriggerAddEventMouseMoved(libVCUI_gt_PU_ArmyRotateUnit, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_ArmyRotateUnitEnd
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_ArmyRotateUnitEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libVCUI_gt_PU_ArmyRotateUnit, false);
    TriggerEnable(libVCUI_gt_PU_ArmyRotateUnitStart, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_ArmyRotateUnitEnd_Init () {
    libVCUI_gt_PU_ArmyRotateUnitEnd = TriggerCreate("libVCUI_gt_PU_ArmyRotateUnitEnd_Func");
    TriggerEnable(libVCUI_gt_PU_ArmyRotateUnitEnd, false);
    TriggerAddEventMouseClicked(libVCUI_gt_PU_ArmyRotateUnitEnd, c_playerAny, c_mouseButtonNone, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_ArmyTutorial
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_ArmyTutorial_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_categoryIndex;

    // Automatic Variable Declarations
    const int autoA330FE8E_ae = libVCUI_gv_pUC_ArmyCategoryCountMax;
    const int autoA330FE8E_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UserDataGetInt("StoryStates", "Army UI Visited", "Value", 1) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_categoryIndex = 1;
    for ( ; ( (autoA330FE8E_ai >= 0 && lv_categoryIndex <= autoA330FE8E_ae) || (autoA330FE8E_ai < 0 && lv_categoryIndex >= autoA330FE8E_ae) ) ; lv_categoryIndex += autoA330FE8E_ai ) {
        if ((libVCUI_gv_pU_ArmyUnitSelectedIndex[lv_categoryIndex] != 0)) {
            libVCUI_gv_pU_ArmyTutorialStage = 5;
            UserDataSetInt("StoryStates", "Army UI Visited", "Value", 1, 1);
            DialogControlSendAnimationEvent(libVCUI_gv_pU_ArmyFactionPanel, PlayerGroupAll(), "HighlightStop");
            return true;
        }

    }
    if ((libVCUI_gv_pU_ArmyTutorialStage < 4)) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 12.5, 0.25);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 12.5, 0.25);
    }

    if ((libVCUI_gv_pU_ArmyCategorySelectedIndex == 0)) {
        TransmissionClearAll();
        if ((libVCUI_gv_pU_ArmyTutorialStage == 0)) {
            libVCUI_gv_pU_ArmyTutorialStage = 1;
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, SoundLink(ConversationDataGetSound("pTutorial_Army|Line00001", true), c_soundIndexAny), 0.0, c_transmissionDurationAdd, true);
        }

        if ((libVCUI_gv_pU_ArmyTutorialStage == 1)) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, SoundLink(ConversationDataGetSound("pTutorial_Army|Line00007", true), c_soundIndexAny), 0.0, c_transmissionDurationAdd, true);
            DialogControlSetVisible(libVCUI_gv_pU_ArmyCategoryFlash[1], PlayerGroupAll(), true);
            DialogControlSetVisible(libVCUI_gv_pU_ArmyCategoryFlash[2], PlayerGroupAll(), true);
        }

        return true;
    }

    if ((libVCUI_gv_pU_ArmyTutorialStage < 2)) {
        libVCUI_gv_pU_ArmyTutorialStage = 2;
        DialogControlSendAnimationEvent(libVCUI_gv_pU_ArmyFactionPanel, PlayerGroupAll(), "Highlight");
        TransmissionClearAll();
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, SoundLink(ConversationDataGetSound("pTutorial_Army|Line00002", true), c_soundIndexAny), 0.0, c_transmissionDurationAdd, true);
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, SoundLink(ConversationDataGetSound("pTutorial_Army|Line00008", true), c_soundIndexAny), 0.0, c_transmissionDurationAdd, true);
        if ((libVCUI_gv_pU_ArmyTutorialStage == 2)) {
            libVCUI_gv_pU_ArmyTutorialStage = 3;
        }

    }

    if ((libVCUI_gv_pU_ArmyTutorialStage == 3)) {
        libVCUI_gv_pU_ArmyTutorialStage = 4;
        TransmissionClearAll();
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, SoundLink(ConversationDataGetSound("pTutorial_Army|Line00004", true), c_soundIndexAny), 0.0, c_transmissionDurationAdd, true);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 100.0, 1.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 1.5);
    }

    if ((libVCUI_gv_pU_ArmyTutorialStage == 5)) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 100.0, 1.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 1.5);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_ArmyTutorial_Init () {
    libVCUI_gt_PU_ArmyTutorial = TriggerCreate("libVCUI_gt_PU_ArmyTutorial_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_ArmyEntranceReminders
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_ArmyEntranceReminders_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_categoryIndex;
    string lv_reminderCategory;

    // Automatic Variable Declarations
    const int auto380B06B9_ae = 1;
    const int auto380B06B9_ai = -1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UserDataGetInt("StoryStates", "Army UI Visited", "Value", 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVoiC_gf_StoryInSimulation() == true)) {
        return true;
    }

    lv_categoryIndex = libVCUI_gv_pUC_ArmyCategoryCountMax;
    for ( ; ( (auto380B06B9_ai >= 0 && lv_categoryIndex <= auto380B06B9_ae) || (auto380B06B9_ai < 0 && lv_categoryIndex >= auto380B06B9_ae) ) ; lv_categoryIndex += auto380B06B9_ai ) {
        lv_reminderCategory = libVCUI_gv_pU_ArmyCategories[lv_categoryIndex];
        if ((libVoiC_gf_ArmyCategoryStateCheck(lv_reminderCategory, c_armyCategoryStateUnlocked) == false)) {
            continue;
        }

        if ((libVCUI_gv_pU_ArmyUnitSelectedIndex[lv_categoryIndex] == 0) && (libVCUI_gv_pU_ArmyCategoryReminderComplete[lv_categoryIndex] == false) && (libVCUI_gv_pU_ArmyCategorySelectedReminderComplete == false)) {
            libVCUI_gv_pU_ArmyCategoryReminderComplete[lv_categoryIndex] = true;
            TransmissionClearAll();
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, libVoiC_gf_PC_ArmyCategoryUnlockedVO(lv_reminderCategory), 0.0, c_transmissionDurationAdd, true);
            return true;
        }

        if ((lv_categoryIndex != libVCUI_gv_pU_ArmyCategorySelectedIndex) && (libVCUI_gf_PU_ArmyCategoryHasNewFaction(lv_reminderCategory) == true) && (libVCUI_gv_pU_ArmyUnitSelectedIndex[lv_categoryIndex] != 0) && (libVCUI_gv_pU_ArmyFactionReminderComplete[lv_categoryIndex] == false) && (libVCUI_gv_pU_ArmyCategorySelectedReminderComplete == false)) {
            libVCUI_gv_pU_ArmyFactionReminderComplete[lv_categoryIndex] = true;
            TransmissionClearAll();
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, libVoiC_gf_PC_ArmyCategoryNewFactionVO(lv_reminderCategory), 0.0, c_transmissionDurationAdd, true);
            return true;
        }

    }
    TriggerExecute(libVCUI_gt_PU_ArmySelectionReminders, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_ArmyEntranceReminders_Init () {
    libVCUI_gt_PU_ArmyEntranceReminders = TriggerCreate("libVCUI_gt_PU_ArmyEntranceReminders_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_ArmySelectionReminders
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_ArmySelectionReminders_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexUnit;
    string lv_reminderCategory;

    // Automatic Variable Declarations
    int auto8C735F74_ae;
    int auto8C735F74_ai;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UserDataGetInt("StoryStates", "Army UI Visited", "Value", 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVoiC_gf_StoryInSimulation() == true)) {
        return true;
    }

    if ((libVCUI_gv_pU_ArmyCategorySelectedIndex == 0)) {
        return true;
    }

    if ((TransmissionPlayerHasActiveTransmission(1) == true)) {
        return true;
    }

    lv_reminderCategory = libVCUI_gv_pU_ArmyCategories[libVCUI_gv_pU_ArmyCategorySelectedIndex];
    if ((libVCUI_gv_pU_ArmyUnitSelectedIndex[libVCUI_gv_pU_ArmyCategorySelectedIndex] != 0) && (libVCUI_gf_PU_ArmyCategoryHasNewFaction(lv_reminderCategory) == true)) {
        auto8C735F74_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_reminderCategory, "ArmyUnitArray", 1);
        auto8C735F74_ai = 1;
        while (auto8C735F74_ai <= auto8C735F74_ae) {
            lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_reminderCategory, "ArmyUnitArray["+IntToString(auto8C735F74_ai-1)+"]", 1);
            if ((libVoiC_gf_PC_StoryArmyUnitState2(lv_indexUnit) == true)) {
                DialogControlSendAnimationEvent(libVCUI_gv_pU_ArmyFactionButtons[3], PlayerGroupAll(), "Unlock");
                if ((libVCUI_gv_pU_ArmyFactionReminderComplete[libVCUI_gv_pU_ArmyCategorySelectedIndex] == false)) {
                    libVCUI_gv_pU_ArmyFactionReminderComplete[libVCUI_gv_pU_ArmyCategorySelectedIndex] = true;
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, libVoiC_gf_PC_ArmyCategoryNewFactionVO(lv_reminderCategory), 0.0, c_transmissionDurationAdd, true);
                }

                break;
            }

            auto8C735F74_ai = auto8C735F74_ai + 1;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_ArmySelectionReminders_Init () {
    libVCUI_gt_PU_ArmySelectionReminders = TriggerCreate("libVCUI_gt_PU_ArmySelectionReminders_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_BottomBarInit
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_BottomBarInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libVCUI_gv_pU_BottomBarDialog = DialogLastCreated();
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "LotV_StorySet/StorySetTemplate");
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libVCUI_gv_pU_BottomBarPanel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_BottomBarPanel, c_triggerControlTypePanel, "SubtitleAnchor");
    DialogControlHookup(libVCUI_gv_pU_BottomBarPanel, c_triggerControlTypeButton, "BridgeButton");
    libVCUI_gv_pU_BottomBarButton[1] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_BottomBarPanel, c_triggerControlTypePanel, "BridgeButtonScanLines");
    libVCUI_gv_pU_BottomBarButtonSelectedDecoration[1] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_BottomBarPanel, c_triggerControlTypeButton, "ArmyRoomButton");
    libVCUI_gv_pU_BottomBarButton[2] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_BottomBarPanel, c_triggerControlTypePanel, "ArmyButtonScanLines");
    libVCUI_gv_pU_BottomBarButtonSelectedDecoration[2] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_BottomBarPanel, c_triggerControlTypeButton, "ShipRoomButton");
    libVCUI_gv_pU_BottomBarButton[3] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_BottomBarPanel, c_triggerControlTypePanel, "ShipButtonScanLines");
    libVCUI_gv_pU_BottomBarButtonSelectedDecoration[3] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_BottomBarPanel, c_triggerControlTypeButton, "MissionArchiveRoomButton");
    libVCUI_gv_pU_BottomBarButton[4] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_BottomBarPanel, c_triggerControlTypePanel, "SubtitleAnchor");
    libVCUI_gv_pU_BottomBarSubtitleAnchor = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_BottomBarInit_Init () {
    libVCUI_gt_PU_BottomBarInit = TriggerCreate("libVCUI_gt_PU_BottomBarInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_BottomBarButtonClicked
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_BottomBarButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int auto917490C6_ae = libVCUI_gv_pUC_BOTTOMBUTTONCOUNT;
    const int auto917490C6_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVCUI_gv_pU_BottomBarOn == false)) {
        return true;
    }

    lv_buttonIndex = 1;
    for ( ; ( (auto917490C6_ai >= 0 && lv_buttonIndex <= auto917490C6_ae) || (auto917490C6_ai < 0 && lv_buttonIndex >= auto917490C6_ae) ) ; lv_buttonIndex += auto917490C6_ai ) {
        if ((EventDialogControl() == libVCUI_gv_pU_BottomBarButton[lv_buttonIndex])) {
            if ((libVCUI_gv_pU_BottomBarButtonToggled[lv_buttonIndex] == false)) {
                libVoiC_gf_DispatchCampaignEvent(libVoiC_ge_PC_Event_UIBottomBarRoomChange, IntToString(lv_buttonIndex), "", false);
            }

            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_BottomBarButtonClicked_Init () {
    libVCUI_gt_PU_BottomBarButtonClicked = TriggerCreate("libVCUI_gt_PU_BottomBarButtonClicked_Func");
    TriggerAddEventDialogControl(libVCUI_gt_PU_BottomBarButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_ArchivesCreate
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_ArchivesCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexMission;
    string lv_indexScene;
    bool lv_defaultSelection;
    int lv_bestPriority;

    // Automatic Variable Declarations
    int autoD556D0B3_ae;
    int autoD556D0B3_ai;
    int auto50C6B8D0_ai;
    int auto50C6B8D0_ae;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libVCUI_gv_pU_MissionArchiveOverlayCreated == false)) {
        libVCUI_gf_PU_ArchivesOverlayCreate();
    }

    if ((BattleReportPanelGetSelectedBattleReport(1) == c_invalidBattleReportId) && (libVoiC_gf_LastMissionConditionCheck(libVoiC_ge_MissionCondition_Simulation) == false)) {
        if ((libVoiC_gf_PC_CampaignIsComplete() == true)) {
            lv_bestPriority = 0;
        }
        else {
            lv_bestPriority = 1000;
        }
        lv_defaultSelection = true;
    }

    autoD556D0B3_ae = CatalogEntryCount(c_gameCatalogMap);
    autoD556D0B3_ai = 1;
    while (autoD556D0B3_ai <= autoD556D0B3_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoD556D0B3_ai);
        autoD556D0B3_ai = autoD556D0B3_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((libVoiC_gf_PC_CampaignMapIsEpilogue(lv_indexMission) != libVoiC_gf_PC_CampaignInEpilogue())) {
                continue;
            }

            if ((libVoiC_gf_MissionStatusCheck(lv_indexMission, libVoiC_ge_MissionStatus_Completed) == true)) {
                BattleReportCreate(PlayerGroupAll(), libVoiC_gf_PC_CampaignMapName(lv_indexMission), c_battleReportTypeMission, c_battleReportStateCompleted);
                BattleReportSetPriority(BattleReportLastCreated(), libVCUI_gf_PU_ArchivesMissionPriority(lv_indexMission));
                BattleReportSetDifficultyLevelCompleted(BattleReportLastCreated(), 1, true);
                BattleReportSetMissionText(BattleReportLastCreated(), libVoiC_gf_PC_CampaignMapName(lv_indexMission));
            }
            else {
                BattleReportCreate(PlayerGroupAll(), libVoiC_gf_PC_CampaignMapName(lv_indexMission), c_battleReportTypeMission, c_battleReportStateHidden);
            }
            DataTableSetString(true, libVCUI_gf_PU_ArchivesDataString(BattleReportLastCreated()), (lv_indexMission));
            DataTableSetInt(true, libVCUI_gf_PU_ArchivesDataTypeString(BattleReportLastCreated()), (libVCUI_ge_PU_ArchivesType_Mission));
            if ((libVCUI_gv_pU_MasterArchivesEnabled == false) && (lv_defaultSelection == true) && (libVCUI_gf_PU_ArchivesMissionPriority(lv_indexMission) <= lv_bestPriority)) {
                lv_bestPriority = libVCUI_gf_PU_ArchivesMissionPriority(lv_indexMission);
                BattleReportPanelSetSelectedBattleReport(PlayerGroupAll(), BattleReportLastCreated());
            }
            else if ((libVoiC_gf_LastMap() == lv_indexMission) && (libVoiC_gf_LastMapConditionCheck(libVoiC_ge_MissionCondition_Simulation) == true)) {
                BattleReportPanelSetSelectedBattleReport(PlayerGroupAll(), BattleReportLastCreated());
            }
        }    
    }
    auto50C6B8D0_ai = 1;
    auto50C6B8D0_ae = UserDataInstanceCount("Scenes")+1;
    while (auto50C6B8D0_ai < auto50C6B8D0_ae) {
        lv_indexScene = UserDataInstance("Scenes", auto50C6B8D0_ai);
        if ((libVCUI_gf_PU_ArchivesScenePriority(lv_indexScene) < 1000)) {
            BattleReportCreate(PlayerGroupAll(), libVoiC_gf_StorySceneName(lv_indexScene), c_battleReportTypeScene, c_battleReportStateCompleted);
            BattleReportSetPriority(BattleReportLastCreated(), libVCUI_gf_PU_ArchivesScenePriority(lv_indexScene));
            DataTableSetString(true, libVCUI_gf_PU_ArchivesDataString(BattleReportLastCreated()), ("Scenes;" + (lv_indexScene)));
            DataTableSetInt(true, libVCUI_gf_PU_ArchivesDataTypeString(BattleReportLastCreated()), (libVCUI_ge_PU_ArchivesType_Scene));
            if ((libVCUI_gv_pU_MasterArchivesEnabled == true) && (lv_defaultSelection == true) && (libVCUI_gf_PU_ArchivesScenePriority(lv_indexScene) >= lv_bestPriority)) {
                lv_bestPriority = libVCUI_gf_PU_ArchivesMissionPriority(lv_indexMission);
                BattleReportPanelSetSelectedBattleReport(PlayerGroupAll(), BattleReportLastCreated());
            }
            else if ((libVCUI_gv_pU_MasterArchivesEnabled == false) && (lv_defaultSelection == true) && (libVCUI_gf_PU_ArchivesScenePriority(lv_indexScene) <= lv_bestPriority)) {
                BattleReportPanelSetSelectedBattleReport(PlayerGroupAll(), BattleReportLastCreated());
            }
        }

        auto50C6B8D0_ai = auto50C6B8D0_ai+1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_ArchivesCreate_Init () {
    libVCUI_gt_PU_ArchivesCreate = TriggerCreate("libVCUI_gt_PU_ArchivesCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_ArchivesSelectionChanged
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_ArchivesSelectionChanged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gf_PU_ArchivesUpdate();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_ArchivesSelectionChanged_Init () {
    libVCUI_gt_PU_ArchivesSelectionChanged = TriggerCreate("libVCUI_gt_PU_ArchivesSelectionChanged_Func");
    TriggerEnable(libVCUI_gt_PU_ArchivesSelectionChanged, false);
    TriggerAddEventBattleReportPanelSelectionChanged(libVCUI_gt_PU_ArchivesSelectionChanged, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_ArchivesMissionPlayClicked
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_ArchivesMissionPlayClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCUI_gv_pU_ArchivesMissionPlayButton != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == libVCUI_gv_pU_ArchivesMissionPlayButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_DispatchCampaignEvent(libVoiC_ge_PC_Event_UIArchivesPlayMission, "", "", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_ArchivesMissionPlayClicked_Init () {
    libVCUI_gt_PU_ArchivesMissionPlayClicked = TriggerCreate("libVCUI_gt_PU_ArchivesMissionPlayClicked_Func");
    TriggerEnable(libVCUI_gt_PU_ArchivesMissionPlayClicked, false);
    TriggerAddEventDialogControl(libVCUI_gt_PU_ArchivesMissionPlayClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_ArchivesScenePlayClicked
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_ArchivesScenePlayClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCUI_gv_pU_ArchivesScenePlayButton != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == libVCUI_gv_pU_ArchivesScenePlayButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_DispatchCampaignEvent(libVoiC_ge_PC_Event_UIArchivesPlayScene, "", "", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_ArchivesScenePlayClicked_Init () {
    libVCUI_gt_PU_ArchivesScenePlayClicked = TriggerCreate("libVCUI_gt_PU_ArchivesScenePlayClicked_Func");
    TriggerEnable(libVCUI_gt_PU_ArchivesScenePlayClicked, false);
    TriggerAddEventDialogControl(libVCUI_gt_PU_ArchivesScenePlayClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_ArchivesCloseClicked
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_ArchivesCloseClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libVCUI_gv_pU_ArchivesBackButton) || (EventDialogControl() == libVCUI_gv_pU_ArchivesQuitButton)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_DispatchCampaignEvent(libVoiC_ge_PC_Event_UIArchivesQuit, "", "", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_ArchivesCloseClicked_Init () {
    libVCUI_gt_PU_ArchivesCloseClicked = TriggerCreate("libVCUI_gt_PU_ArchivesCloseClicked_Func");
    TriggerEnable(libVCUI_gt_PU_ArchivesCloseClicked, false);
    TriggerAddEventDialogControl(libVCUI_gt_PU_ArchivesCloseClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_ArchivesSynced
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_ArchivesSynced_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gv_pU_ArchivesSynced = true;
    libVCUI_gf_PU_ArchivesUpdate();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_ArchivesSynced_Init () {
    libVCUI_gt_PU_ArchivesSynced = TriggerCreate("libVCUI_gt_PU_ArchivesSynced_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_MissionTerranLaunchClicked
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_MissionTerranLaunchClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_DispatchCampaignEvent(libVoiC_ge_PC_Event_UIMissionLaunch, "", "", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_MissionTerranLaunchClicked_Init () {
    libVCUI_gt_PU_MissionTerranLaunchClicked = TriggerCreate("libVCUI_gt_PU_MissionTerranLaunchClicked_Func");
    TriggerAddEventPlanetMissionLaunched(libVCUI_gt_PU_MissionTerranLaunchClicked, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_MissionTerranPitchPlayStop
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_MissionTerranPitchPlayStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVCUI_gv_pU_PitchPlaying == true)) {
        ConversationDataStop();
        return true;
    }

    if ((libVoiC_gf_StoryInSimulation() == false)) {
        libVCUI_gv_pU_MissionPitchPlayed = true;
    }

    if ((libVoiC_gf_MissionPitch(libVCUI_gv_pU_MissionNextMap) == null)) {
        return true;
    }

    libVCUI_gv_pU_MissionPitchPlayed = true;
    PlanetPanelSetContactButtonState(PlayerGroupAll(), c_planetPanelContactButtonStatePause);
    libVCUI_gv_pU_PitchPlaying = true;
    ConversationDataRun(libVoiC_gf_MissionPitch(libVCUI_gv_pU_MissionNextMap), PlayerGroupAll(), c_conversationSkipNone, true);
    libVCUI_gv_pU_PitchPlaying = false;
    PlanetPanelSetContactButtonState(PlayerGroupAll(), c_planetPanelContactButtonStatePlay);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_MissionTerranPitchPlayStop_Init () {
    libVCUI_gt_PU_MissionTerranPitchPlayStop = TriggerCreate("libVCUI_gt_PU_MissionTerranPitchPlayStop_Func");
    TriggerEnable(libVCUI_gt_PU_MissionTerranPitchPlayStop, false);
    TriggerAddEventPlanetPanelReplayPressed(libVCUI_gt_PU_MissionTerranPitchPlayStop, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_MissionTerranQuitOKClicked
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_MissionTerranQuitOKClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_DispatchCampaignEvent(libVoiC_ge_PC_Event_UIMissionQuit, "", "", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_MissionTerranQuitOKClicked_Init () {
    libVCUI_gt_PU_MissionTerranQuitOKClicked = TriggerCreate("libVCUI_gt_PU_MissionTerranQuitOKClicked_Func");
    TriggerEnable(libVCUI_gt_PU_MissionTerranQuitOKClicked, false);
    TriggerAddEventCustomDialogDismissed(libVCUI_gt_PU_MissionTerranQuitOKClicked, c_playerAny, libNtve_ge_CustomDialogResult_c_customDialogResultYes);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_MissionTerranQuitCancelClicked
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_MissionTerranQuitCancelClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gv_pU_MissionQuitToggle = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_MissionTerranQuitCancelClicked_Init () {
    libVCUI_gt_PU_MissionTerranQuitCancelClicked = TriggerCreate("libVCUI_gt_PU_MissionTerranQuitCancelClicked_Func");
    TriggerEnable(libVCUI_gt_PU_MissionTerranQuitCancelClicked, false);
    TriggerAddEventCustomDialogDismissed(libVCUI_gt_PU_MissionTerranQuitCancelClicked, c_playerAny, libNtve_ge_CustomDialogResult_c_customDialogResultNo);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_MissionTerranQuitClicked
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_MissionTerranQuitClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCUI_gv_pU_MissionLaunchedToggle == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVoiC_gf_StoryInSimulation() == true)) {
        libVoiC_gf_DispatchCampaignEvent(libVoiC_ge_PC_Event_UIMissionQuit, "", "", false);
        return true;
    }

    libVCUI_gv_pU_MissionQuitToggle = true;
    TriggerEnable(libVCUI_gt_PU_MissionTerranQuitOKClicked, true);
    TriggerEnable(libVCUI_gt_PU_MissionTerranQuitClicked, true);
    UIShowCustomDialog(PlayerGroupAll(), libNtve_ge_CustomDialogType_c_customDialogTypeQuery, StringExternal("Param/Value/lib_VCUI_8ADEBB47"), StringToText(""), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_MissionTerranQuitClicked_Init () {
    libVCUI_gt_PU_MissionTerranQuitClicked = TriggerCreate("libVCUI_gt_PU_MissionTerranQuitClicked_Func");
    TriggerEnable(libVCUI_gt_PU_MissionTerranQuitClicked, false);
    TriggerAddEventPlanetPanelCanceled(libVCUI_gt_PU_MissionTerranQuitClicked, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_MissionCreate
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_MissionCreate_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_lastFrame;
    int lv_attachIndex;
    int[5] lv_aspectRatioAttachment;

    // Automatic Variable Declarations
    int auto72FB2041_val;
    const int auto6F2152F7_ae = 4;
    const int auto6F2152F7_ai = 1;
    const int auto011A2634_ae = 4;
    const int auto011A2634_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lv_aspectRatioAttachment[init_i] = c_invalidDialogControlId;
    }

    // Conditions
    if (testConds) {
        if (!((libVCUI_gv_pU_MissionDialog == c_invalidDialogId))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(1620, 1220, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libVCUI_gv_pU_MissionDialog = DialogLastCreated();
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "LotV_MissionLaunchUI/MissionTemplate");
    libVCUI_gv_pU_MissionPanel = DialogControlLastCreated();
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    CutsceneCreateNew("Cutscenes\\UI_MissionLaunch.SC2Cutscene", libNtve_gf_PointFromXYZ(16.0, 16.0, 32.0), 0.0, PlayerGroupAll(), false);
    libVCUI_gv_pU_MissionCutscene = CutsceneLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypePanel, "RewardsFrame");
    libVCUI_gv_pU_MissionRewardPanel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionRewardPanel, c_triggerControlTypePanel, "PrimaryRewardContainer");
    libVCUI_gv_pU_MissionRewardPrimaryContainer = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionRewardPrimaryContainer, c_triggerControlTypeLabel, "PrimaryRewardHeading");
    libVCUI_gv_pU_MissionRewardPrimaryHeadingLabel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionRewardPrimaryContainer, c_triggerControlTypeLabel, "PrimaryRewardCurrencyLabel");
    libVCUI_gv_pU_MissionRewardPrimaryCurrencyLabel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionRewardPanel, c_triggerControlTypePanel, "BonusRewardContainer");
    libVCUI_gv_pU_MissionRewardBonusContainer = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionRewardBonusContainer, c_triggerControlTypeLabel, "BonusRewardHeading");
    libVCUI_gv_pU_MissionRewardBonusHeadingLabel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionRewardBonusContainer, c_triggerControlTypeLabel, "BonusRewardCurrencyLabel");
    libVCUI_gv_pU_MissionRewardBonusCurrencyLabel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypePanel, "AchievementFrame");
    libVCUI_gv_pU_MissionAchievementPanel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionAchievementPanel, c_triggerControlTypeAchievement, "Achievement1");
    libVCUI_gv_pU_MissionAchievementFrame[1] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionAchievementPanel, c_triggerControlTypeAchievement, "Achievement2");
    libVCUI_gv_pU_MissionAchievementFrame[2] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionAchievementPanel, c_triggerControlTypeAchievement, "Achievement3");
    libVCUI_gv_pU_MissionAchievementFrame[3] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypePanel, "Vignette1");
    libVCUI_gv_pU_MissionVignetteFrame[1] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionVignetteFrame[1], c_triggerControlTypeCutscene, "VignetteScene");
    libVCUI_gv_pU_MissionVignetteScene[1] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionVignetteFrame[1], c_triggerControlTypeButton, "EasterEggButton");
    libVCUI_gv_pU_MissionEasterEggButton = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypePanel, "Vignette2");
    libVCUI_gv_pU_MissionVignetteFrame[2] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionVignetteFrame[2], c_triggerControlTypeCutscene, "VignetteScene");
    libVCUI_gv_pU_MissionVignetteScene[2] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypeButton, "LaunchButton");
    libVCUI_gv_pU_MissionLaunchButton = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypeButton, "BackButton");
    libVCUI_gv_pU_MissionBackButton = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypeButton, "QuitButton");
    libVCUI_gv_pU_MissionQuitButton = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypePulldown, "DifficultyPulldown");
    libVCUI_gv_pU_MissionDifficultyDropdown = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypePanel, "SubtitleFrame");
    libVCUI_gv_pU_MissionSubtitleAnchor = DialogControlLastCreated();
    DialogControlAddItem(libVCUI_gv_pU_MissionDifficultyDropdown, PlayerGroupAll(), StringExternal("UI/Difficulty01Campaign"));
    DialogControlAddItem(libVCUI_gv_pU_MissionDifficultyDropdown, PlayerGroupAll(), StringExternal("UI/Difficulty02Campaign"));
    DialogControlAddItem(libVCUI_gv_pU_MissionDifficultyDropdown, PlayerGroupAll(), StringExternal("UI/Difficulty03Campaign"));
    DialogControlAddItem(libVCUI_gv_pU_MissionDifficultyDropdown, PlayerGroupAll(), StringExternal("UI/Difficulty04Campaign"));
    auto72FB2041_val = PlayerDifficulty(1);
    if (auto72FB2041_val == 1) {
        DialogControlSelectItem(libVCUI_gv_pU_MissionDifficultyDropdown, PlayerGroupAll(), 1);
    }
    else if (auto72FB2041_val == 2) {
        DialogControlSelectItem(libVCUI_gv_pU_MissionDifficultyDropdown, PlayerGroupAll(), 2);
    }
    else if (auto72FB2041_val == 3) {
        DialogControlSelectItem(libVCUI_gv_pU_MissionDifficultyDropdown, PlayerGroupAll(), 3);
    }
    else if (auto72FB2041_val == 4) {
        DialogControlSelectItem(libVCUI_gv_pU_MissionDifficultyDropdown, PlayerGroupAll(), 4);
    }
    else {
    }
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypeButton, "ArchivesArmyButton");
    libVCUI_gv_pU_MissionArmyButton = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypeButton, "ArchivesShipButton");
    libVCUI_gv_pU_MissionShipButton = DialogControlLastCreated();
    lv_attachIndex = 1;
    for ( ; ( (auto6F2152F7_ai >= 0 && lv_attachIndex <= auto6F2152F7_ae) || (auto6F2152F7_ai < 0 && lv_attachIndex >= auto6F2152F7_ae) ) ; lv_attachIndex += auto6F2152F7_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, 1, libNtve_gf_PointFromXYZ(16.0, 16.0, 8.0));
        libVCUI_gv_pU_MissionAttachUnits[lv_attachIndex] = UnitLastCreated();
    }
    Wait(0.2, c_timeGame);
    lv_attachIndex = 1;
    for ( ; ( (auto011A2634_ai >= 0 && lv_attachIndex <= auto011A2634_ae) || (auto011A2634_ai < 0 && lv_attachIndex >= auto011A2634_ae) ) ; lv_attachIndex += auto011A2634_ai ) {
        DialogCreate(1, 1, c_anchorCenter, 0, 0, true);
        DialogSetImageVisible(DialogLastCreated(), false);
        libVCUI_gv_pU_MissionAttachDialog[lv_attachIndex] = DialogLastCreated();
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
        libVCUI_gv_pU_MissionAttachPanel[lv_attachIndex] = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypePanel, "Callout" + IntToString(lv_attachIndex) + "Attachment");
        lv_aspectRatioAttachment[lv_attachIndex] = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypePanel, "Callout" + IntToString(lv_attachIndex));
        libVCUI_gv_pU_MissionCalloutLines[lv_attachIndex] = DialogControlLastCreated();
        libNtve_gf_SendActorMessageToUnit(libVCUI_gv_pU_MissionAttachUnits[lv_attachIndex], "RefClear ::Host");
        ActorSend(libNtve_gf_MainActorofUnit(libVCUI_gv_pU_MissionAttachUnits[lv_attachIndex]), (("RefSet ::Host ::external.StarmapAttach" + IntToString(lv_attachIndex))));
        DialogSetPositionRelativeToUnit(libVCUI_gv_pU_MissionAttachDialog[lv_attachIndex], libVCUI_gv_pU_MissionAttachUnits[lv_attachIndex], "Ref_Origin", 0, 0);
    }
    DialogControlSetPositionRelative(lv_aspectRatioAttachment[1], PlayerGroupAll(), c_anchorTopRight, libVCUI_gv_pU_MissionAttachPanel[1], c_anchorBottomLeft, 0, 0);
    DialogControlSetPositionRelative(lv_aspectRatioAttachment[2], PlayerGroupAll(), c_anchorBottomRight, libVCUI_gv_pU_MissionAttachPanel[2], c_anchorTopLeft, 0, 0);
    DialogControlSetPositionRelative(lv_aspectRatioAttachment[3], PlayerGroupAll(), c_anchorBottomLeft, libVCUI_gv_pU_MissionAttachPanel[3], c_anchorTopLeft, 0, 0);
    DialogControlSetPositionRelative(lv_aspectRatioAttachment[4], PlayerGroupAll(), c_anchorBottomLeft, libVCUI_gv_pU_MissionAttachPanel[4], c_anchorTopLeft, 0, 0);
    DialogControlHookup(libVCUI_gv_pU_MissionCalloutLines[2], c_triggerControlTypeLabel, "FluffLabel");
    libVCUI_gv_pU_MissionFluffLabels[1] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionCalloutLines[3], c_triggerControlTypeLabel, "FluffLabel");
    libVCUI_gv_pU_MissionFluffLabels[2] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionCalloutLines[4], c_triggerControlTypeLabel, "FluffLabel");
    libVCUI_gv_pU_MissionFluffLabels[3] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionCalloutLines[1], c_triggerControlTypePanel, "RewardUnitFrame");
    libVCUI_gv_pU_MissionRewardUnitPanel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionRewardUnitPanel, c_triggerControlTypeUnitModel, "RewardUnitFrame");
    libVCUI_gv_pU_MissionRewardUnitModel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionRewardUnitPanel, c_triggerControlTypeLabel, "RewardUnitNameLabel");
    libVCUI_gv_pU_MissionRewardUnitName = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionCalloutLines[2], c_triggerControlTypePortrait, "ContactPortrait");
    libVCUI_gv_pU_MissionPortraitFrame = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionCalloutLines[2], c_triggerControlTypeLabel, "ContactFluff");
    libVCUI_gv_pU_MissionPortraitFluffLabel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionCalloutLines[2], c_triggerControlTypePanel, "PitchFrame");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlHookup(lv_lastFrame, c_triggerControlTypeButton, "PlayButton");
    libVCUI_gv_pU_MissionPitchPlayButton = DialogControlLastCreated();
    DialogControlHookup(lv_lastFrame, c_triggerControlTypeButton, "StopButton");
    libVCUI_gv_pU_MissionPitchStopButton = DialogControlLastCreated();
    DialogControlSetVisible(libVCUI_gv_pU_MissionPitchPlayButton, PlayerGroupAll(), true);
    DialogControlSetVisible(libVCUI_gv_pU_MissionPitchStopButton, PlayerGroupAll(), false);
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypeLabel, "Title");
    libVCUI_gv_pU_MissionTitleLabel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypeLabel, "Objective");
    libVCUI_gv_pU_MissionObjectiveLabel = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_MissionCreate_Init () {
    libVCUI_gt_PU_MissionCreate = TriggerCreate("libVCUI_gt_PU_MissionCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_MissionCreate2D
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_MissionCreate2D_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_attachIndex;

    // Automatic Variable Declarations
    int autoFF646F7D_val;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((libVCUI_gv_pU_MissionDialog == c_invalidDialogId))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(1620, 1220, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libVCUI_gv_pU_MissionDialog = DialogLastCreated();
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "VoidShared_MissionLaunchUI2D/Mission2DTemplate");
    libVCUI_gv_pU_MissionPanel = DialogControlLastCreated();
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypeLabel, "Title");
    libVCUI_gv_pU_MissionTitleLabel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypeLabel, "Objective");
    libVCUI_gv_pU_MissionObjectiveLabel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypeImage, "BackgroundImage");
    libVCUI_gv_pU_Mission2DBackground = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypePortrait, "ContactPortrait");
    libVCUI_gv_pU_MissionPortraitFrame = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypePanel, "RewardsFrame");
    libVCUI_gv_pU_MissionRewardPanel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionRewardPanel, c_triggerControlTypeLabel, "PrimaryRewardHeading");
    libVCUI_gv_pU_MissionRewardPrimaryHeadingLabel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionRewardPanel, c_triggerControlTypeLabel, "PrimaryRewardCurrencyLabel");
    libVCUI_gv_pU_MissionRewardPrimaryCurrencyLabel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionRewardPanel, c_triggerControlTypeLabel, "BonusRewardHeading");
    libVCUI_gv_pU_MissionRewardBonusHeadingLabel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionRewardPanel, c_triggerControlTypeLabel, "BonusRewardCurrencyLabel");
    libVCUI_gv_pU_MissionRewardBonusCurrencyLabel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionRewardPanel, c_triggerControlTypePanel, "RewardUnitFrame");
    libVCUI_gv_pU_MissionRewardUnitPanel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionRewardUnitPanel, c_triggerControlTypeUnitModel, "RewardUnitFrame");
    libVCUI_gv_pU_MissionRewardUnitModel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionRewardUnitPanel, c_triggerControlTypeLabel, "RewardUnitNameLabel");
    libVCUI_gv_pU_MissionRewardUnitName = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionRewardPanel, c_triggerControlTypePanel, "RewardUnitFrame2");
    libVCUI_gv_pU_MissionRewardUnitPanel2 = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionRewardUnitPanel2, c_triggerControlTypeUnitModel, "RewardUnitFrame2");
    libVCUI_gv_pU_MissionRewardUnitModel2 = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionRewardUnitPanel2, c_triggerControlTypeLabel, "RewardUnitNameLabel2");
    libVCUI_gv_pU_MissionRewardUnitName2 = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypePanel, "AchievementFrame");
    libVCUI_gv_pU_MissionAchievementPanel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionAchievementPanel, c_triggerControlTypeAchievement, "Achievement1");
    libVCUI_gv_pU_MissionAchievementFrame[1] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionAchievementPanel, c_triggerControlTypeAchievement, "Achievement2");
    libVCUI_gv_pU_MissionAchievementFrame[2] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionAchievementPanel, c_triggerControlTypeAchievement, "Achievement3");
    libVCUI_gv_pU_MissionAchievementFrame[3] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypeButton, "LaunchButton");
    libVCUI_gv_pU_MissionLaunchButton = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypeButton, "BackButton");
    libVCUI_gv_pU_MissionBackButton = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypeButton, "QuitButton");
    libVCUI_gv_pU_MissionQuitButton = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypePanel, "PitchFrame");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlHookup(lv_lastFrame, c_triggerControlTypeButton, "PlayButton");
    libVCUI_gv_pU_MissionPitchPlayButton = DialogControlLastCreated();
    DialogControlHookup(lv_lastFrame, c_triggerControlTypeButton, "StopButton");
    libVCUI_gv_pU_MissionPitchStopButton = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypePulldown, "DifficultyPulldown");
    libVCUI_gv_pU_MissionDifficultyDropdown = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypePanel, "SubtitleFrame");
    libVCUI_gv_pU_MissionSubtitleAnchor = DialogControlLastCreated();
    DialogControlAddItem(libVCUI_gv_pU_MissionDifficultyDropdown, PlayerGroupAll(), StringExternal("UI/Difficulty01Campaign"));
    DialogControlAddItem(libVCUI_gv_pU_MissionDifficultyDropdown, PlayerGroupAll(), StringExternal("UI/Difficulty02Campaign"));
    DialogControlAddItem(libVCUI_gv_pU_MissionDifficultyDropdown, PlayerGroupAll(), StringExternal("UI/Difficulty03Campaign"));
    DialogControlAddItem(libVCUI_gv_pU_MissionDifficultyDropdown, PlayerGroupAll(), StringExternal("UI/Difficulty04Campaign"));
    autoFF646F7D_val = PlayerDifficulty(1);
    if (autoFF646F7D_val == 1) {
        DialogControlSelectItem(libVCUI_gv_pU_MissionDifficultyDropdown, PlayerGroupAll(), 1);
    }
    else if (autoFF646F7D_val == 2) {
        DialogControlSelectItem(libVCUI_gv_pU_MissionDifficultyDropdown, PlayerGroupAll(), 2);
    }
    else if (autoFF646F7D_val == 3) {
        DialogControlSelectItem(libVCUI_gv_pU_MissionDifficultyDropdown, PlayerGroupAll(), 3);
    }
    else if (autoFF646F7D_val == 4) {
        DialogControlSelectItem(libVCUI_gv_pU_MissionDifficultyDropdown, PlayerGroupAll(), 4);
    }
    else {
    }
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypeButton, "ArchivesArmyButton");
    libVCUI_gv_pU_MissionArmyButton = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypeButton, "ArchivesShipButton");
    libVCUI_gv_pU_MissionShipButton = DialogControlLastCreated();
    DialogControlSetVisible(libVCUI_gv_pU_MissionPitchPlayButton, PlayerGroupAll(), true);
    DialogControlSetVisible(libVCUI_gv_pU_MissionPitchStopButton, PlayerGroupAll(), false);
    libVCUI_gv_pU_MissionRewardPrimaryContainer = c_invalidDialogControlId;
    libVCUI_gv_pU_MissionRewardBonusContainer = c_invalidDialogControlId;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_MissionCreate2D_Init () {
    libVCUI_gt_PU_MissionCreate2D = TriggerCreate("libVCUI_gt_PU_MissionCreate2D_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_MissionCreateZerg
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_MissionCreateZerg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_attachIndex;

    // Automatic Variable Declarations
    int autoDC0EC3D2_val;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((libVCUI_gv_pU_MissionDialog == c_invalidDialogId))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerSetRace(1, "Zerg");
    DialogCreate(1620, 1220, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libVCUI_gv_pU_MissionDialog = DialogLastCreated();
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "HotS_MissionPanel/MissionPanelTemplate");
    libVCUI_gv_pU_MissionPanel = DialogControlLastCreated();
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypeLabel, "MissionTextLabel");
    libVCUI_gv_pU_MissionTitleLabel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypeLabel, "ObjectiveTextLabel");
    libVCUI_gv_pU_MissionObjectiveLabel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypeImage, "BackgroundImage");
    libVCUI_gv_pU_Mission2DBackground = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypePortrait, "ContactPortrait");
    libVCUI_gv_pU_MissionPortraitFrame = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypePanel, "MissionRewardKerriganLevel");
    libVCUI_gv_pU_MissionRewardPanel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libVCUI_gv_pU_MissionRewardPanel, c_triggerControlTypeLabel, "RewardTitleLabel");
    libVCUI_gv_pU_MissionRewardPrimaryHeadingLabel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionRewardPanel, c_triggerControlTypeLabel, "RewardTextLabel");
    libVCUI_gv_pU_MissionRewardPrimaryCurrencyLabel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypePanel, "BonusMissionReward");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_lastFrame, c_triggerControlTypeLabel, "BonusRewardTitleLabel");
    libVCUI_gv_pU_MissionRewardBonusHeadingLabel = DialogControlLastCreated();
    DialogControlHookup(lv_lastFrame, c_triggerControlTypeLabel, "BonusRewardTextLabel");
    libVCUI_gv_pU_MissionRewardBonusCurrencyLabel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypePanel, "MissionRewardEvolutionUnlocks");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypePanel, "NewUnitFrame");
    libVCUI_gv_pU_MissionRewardUnitPanel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionRewardUnitPanel, c_triggerControlTypeUnitModel, "TechnologyUnitModelFrame");
    libVCUI_gv_pU_MissionRewardUnitModel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionRewardUnitPanel, c_triggerControlTypeLabel, "TechnologyTitleLabel");
    libVCUI_gv_pU_MissionRewardUnitName = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypeButton, "LaunchButton");
    libVCUI_gv_pU_MissionLaunchButton = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypeButton, "CloseButton");
    libVCUI_gv_pU_MissionBackButton = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypeButton, "QuitButton");
    libVCUI_gv_pU_MissionQuitButton = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypeButton, "ContactPlayButton");
    libVCUI_gv_pU_MissionPitchPlayButton = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypeButton, "ContactStopButton");
    libVCUI_gv_pU_MissionPitchStopButton = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypePulldown, "DifficultyPulldown");
    libVCUI_gv_pU_MissionDifficultyDropdown = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypePanel, "SubtitleAnchor");
    libVCUI_gv_pU_MissionSubtitleAnchor = DialogControlLastCreated();
    DialogControlAddItem(libVCUI_gv_pU_MissionDifficultyDropdown, PlayerGroupAll(), StringExternal("UI/Difficulty01Campaign"));
    DialogControlAddItem(libVCUI_gv_pU_MissionDifficultyDropdown, PlayerGroupAll(), StringExternal("UI/Difficulty02Campaign"));
    DialogControlAddItem(libVCUI_gv_pU_MissionDifficultyDropdown, PlayerGroupAll(), StringExternal("UI/Difficulty03Campaign"));
    DialogControlAddItem(libVCUI_gv_pU_MissionDifficultyDropdown, PlayerGroupAll(), StringExternal("UI/Difficulty04Campaign"));
    autoDC0EC3D2_val = PlayerDifficulty(1);
    if (autoDC0EC3D2_val == 1) {
        DialogControlSelectItem(libVCUI_gv_pU_MissionDifficultyDropdown, PlayerGroupAll(), 1);
    }
    else if (autoDC0EC3D2_val == 2) {
        DialogControlSelectItem(libVCUI_gv_pU_MissionDifficultyDropdown, PlayerGroupAll(), 2);
    }
    else if (autoDC0EC3D2_val == 3) {
        DialogControlSelectItem(libVCUI_gv_pU_MissionDifficultyDropdown, PlayerGroupAll(), 3);
    }
    else if (autoDC0EC3D2_val == 4) {
        DialogControlSelectItem(libVCUI_gv_pU_MissionDifficultyDropdown, PlayerGroupAll(), 4);
    }
    else {
    }
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypeButton, "ArmyButton");
    libVCUI_gv_pU_MissionArmyButton = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_MissionPanel, c_triggerControlTypeButton, "KerriganButton");
    libVCUI_gv_pU_MissionShipButton = DialogControlLastCreated();
    DialogControlSetVisible(libVCUI_gv_pU_MissionPitchPlayButton, PlayerGroupAll(), true);
    DialogControlSetVisible(libVCUI_gv_pU_MissionPitchStopButton, PlayerGroupAll(), false);
    Wait(0.1, c_timeGame);
    if ((libVoiC_gf_StoryInSimulation() == true)) {
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleReportPanel, true);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleReportPanel, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_MissionCreateZerg_Init () {
    libVCUI_gt_PU_MissionCreateZerg = TriggerCreate("libVCUI_gt_PU_MissionCreateZerg_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_MissionVignetteClicked
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_MissionVignetteClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCUI_gv_pU_MissionEasterEggButton != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == libVCUI_gv_pU_MissionEasterEggButton))) {
            return false;
        }

        if (!((libVCUI_gv_pU_MissionQuitToggle == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVCUI_gv_pU_MissionEasterEggVignetteEnabled == false)) {
        DialogControlSendAnimationEvent(libVCUI_gv_pU_MissionCalloutLines[3], PlayerGroupAll(), "EasterEggBirth");
        libVCUI_gv_pU_MissionEasterEggVignetteEnabled = true;
        libNtve_gf_SetDialogItemCutscene(libVCUI_gv_pU_MissionVignetteScene[1], libVoiC_gf_PC_MissionVignetteEasterEggCutscene(libVCUI_gv_pU_MissionNextMap), PlayerGroupAll());
        CutscenePlay(CutsceneGetTriggerControl(libVCUI_gv_pU_MissionVignetteScene[1]));
        CutsceneGoToBookmark(CutsceneGetTriggerControl(libVCUI_gv_pU_MissionVignetteScene[1]), "Section1Start");
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_MissionFluffLabels[2], libVCUI_gf_PU_MissionUIEasterEggFluffText(libVCUI_gv_pU_MissionNextMap), PlayerGroupAll());
    }
    else {
        DialogControlSendAnimationEvent(libVCUI_gv_pU_MissionCalloutLines[3], PlayerGroupAll(), "EasterEggBirth");
        libVCUI_gv_pU_MissionEasterEggVignetteEnabled = false;
        libNtve_gf_SetDialogItemCutscene(libVCUI_gv_pU_MissionVignetteScene[1], libVoiC_gf_PC_MissionVignetteCutscene(libVCUI_gv_pU_MissionNextMap), PlayerGroupAll());
        CutscenePlay(CutsceneGetTriggerControl(libVCUI_gv_pU_MissionVignetteScene[1]));
        CutsceneGoToBookmark(CutsceneGetTriggerControl(libVCUI_gv_pU_MissionVignetteScene[1]), "Section1Start");
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_MissionFluffLabels[2], libVCUI_gf_PU_MissionUIFluffText(libVCUI_gv_pU_MissionNextMap, 2), PlayerGroupAll());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_MissionVignetteClicked_Init () {
    libVCUI_gt_PU_MissionVignetteClicked = TriggerCreate("libVCUI_gt_PU_MissionVignetteClicked_Func");
    TriggerEnable(libVCUI_gt_PU_MissionVignetteClicked, false);
    TriggerAddEventDialogControl(libVCUI_gt_PU_MissionVignetteClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeDoubleClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_MissionQuitOKClicked
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_MissionQuitOKClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_DispatchCampaignEvent(libVoiC_ge_PC_Event_UIMissionQuit, "", "", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_MissionQuitOKClicked_Init () {
    libVCUI_gt_PU_MissionQuitOKClicked = TriggerCreate("libVCUI_gt_PU_MissionQuitOKClicked_Func");
    TriggerEnable(libVCUI_gt_PU_MissionQuitOKClicked, false);
    TriggerAddEventCustomDialogDismissed(libVCUI_gt_PU_MissionQuitOKClicked, c_playerAny, libNtve_ge_CustomDialogResult_c_customDialogResultYes);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_MissionQuitCancelClicked
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_MissionQuitCancelClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gv_pU_MissionQuitToggle = false;
    TriggerEnable(libVCUI_gt_PU_MissionQuitOKClicked, false);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_MissionQuitCancelClicked_Init () {
    libVCUI_gt_PU_MissionQuitCancelClicked = TriggerCreate("libVCUI_gt_PU_MissionQuitCancelClicked_Func");
    TriggerEnable(libVCUI_gt_PU_MissionQuitCancelClicked, false);
    TriggerAddEventCustomDialogDismissed(libVCUI_gt_PU_MissionQuitCancelClicked, c_playerAny, libNtve_ge_CustomDialogResult_c_customDialogResultNo);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_MissionLaunchClicked
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_MissionLaunchClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCUI_gv_pU_MissionLaunchButton != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == libVCUI_gv_pU_MissionLaunchButton))) {
            return false;
        }

        if (!((libVCUI_gv_pU_MissionQuitToggle == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gv_pU_MissionLaunchedToggle = true;
    DialogControlSetEnabled(libVCUI_gv_pU_MissionDifficultyDropdown, PlayerGroupAll(), false);
    libVoiC_gf_DispatchCampaignEvent(libVoiC_ge_PC_Event_UIMissionLaunch, "", "", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_MissionLaunchClicked_Init () {
    libVCUI_gt_PU_MissionLaunchClicked = TriggerCreate("libVCUI_gt_PU_MissionLaunchClicked_Func");
    TriggerAddEventDialogControl(libVCUI_gt_PU_MissionLaunchClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_MissionBackClicked
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_MissionBackClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libVCUI_gv_pU_MissionBackButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libVCUI_gt_PU_MissionQuitOKClicked, false);
    PlayerSetDifficulty(1, libVCUI_gf_PU_MissionSelectedDifficulty());
    libVCUI_gf_PU_MissionRemoveAliasedUnits();
    libVoiC_gf_DispatchCampaignEvent(libVoiC_ge_PC_Event_UIMissionQuit, "", "", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_MissionBackClicked_Init () {
    libVCUI_gt_PU_MissionBackClicked = TriggerCreate("libVCUI_gt_PU_MissionBackClicked_Func");
    TriggerAddEventDialogControl(libVCUI_gt_PU_MissionBackClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_MissionQuitClicked
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_MissionQuitClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libVCUI_gv_pU_MissionQuitButton))) {
            return false;
        }

        if (!((libVCUI_gv_pU_MissionLaunchedToggle == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gv_pU_MissionQuitToggle = true;
    TriggerEnable(libVCUI_gt_PU_MissionQuitOKClicked, true);
    TriggerEnable(libVCUI_gt_PU_MissionQuitCancelClicked, true);
    UIShowCustomDialog(PlayerGroupAll(), libNtve_ge_CustomDialogType_c_customDialogTypeQuery, StringExternal("Param/Value/lib_VCUI_5C3EE85B"), StringToText(""), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_MissionQuitClicked_Init () {
    libVCUI_gt_PU_MissionQuitClicked = TriggerCreate("libVCUI_gt_PU_MissionQuitClicked_Func");
    TriggerAddEventDialogControl(libVCUI_gt_PU_MissionQuitClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_MissionPitchPlayClicked
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_MissionPitchPlayClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCUI_gv_pU_MissionPitchPlayButton != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == libVCUI_gv_pU_MissionPitchPlayButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVoiC_gf_StoryInSimulation() == false)) {
        libVCUI_gv_pU_MissionPitchPlayed = true;
    }

    if (((libVoiC_gf_MissionPitch(libVCUI_gv_pU_MissionNextMap) == null) || (libVCUI_gv_pU_MissionAiur05SequenceTriggered == true))) {
        return true;
    }

    DialogControlSetVisible(libVCUI_gv_pU_MissionPitchPlayButton, PlayerGroupAll(), false);
    DialogControlSetVisible(libVCUI_gv_pU_MissionPitchStopButton, PlayerGroupAll(), true);
    libVCUI_gv_pU_PitchPlaying = true;
    ConversationDataRun(libVoiC_gf_MissionPitch(libVCUI_gv_pU_MissionNextMap), PlayerGroupAll(), c_conversationSkipNone, true);
    libVCUI_gv_pU_PitchPlaying = false;
    libVCUI_gf_PU_StopArtanisAnims();
    if ((libVCUI_gv_pU_MissionDialog != c_invalidDialogId) && (libVCUI_gv_pU_MissionAiur05SequenceTriggered == false)) {
        DialogControlSetVisible(libVCUI_gv_pU_MissionPitchPlayButton, PlayerGroupAll(), true);
        DialogControlSetVisible(libVCUI_gv_pU_MissionPitchStopButton, PlayerGroupAll(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_MissionPitchPlayClicked_Init () {
    libVCUI_gt_PU_MissionPitchPlayClicked = TriggerCreate("libVCUI_gt_PU_MissionPitchPlayClicked_Func");
    TriggerAddEventDialogControl(libVCUI_gt_PU_MissionPitchPlayClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_MissionPitchStopClicked
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_MissionPitchStopClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCUI_gv_pU_MissionPitchStopButton != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == libVCUI_gv_pU_MissionPitchStopButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ConversationDataStop();
    libVCUI_gv_pU_PitchPlaying = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_MissionPitchStopClicked_Init () {
    libVCUI_gt_PU_MissionPitchStopClicked = TriggerCreate("libVCUI_gt_PU_MissionPitchStopClicked_Func");
    TriggerAddEventDialogControl(libVCUI_gt_PU_MissionPitchStopClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_MissionArmyClicked
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_MissionArmyClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCUI_gv_pU_MissionArmyButton != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == libVCUI_gv_pU_MissionArmyButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSendEvent(libVCUI_gv_pUC_MissionEventArmyLaunch);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_MissionArmyClicked_Init () {
    libVCUI_gt_PU_MissionArmyClicked = TriggerCreate("libVCUI_gt_PU_MissionArmyClicked_Func");
    TriggerEnable(libVCUI_gt_PU_MissionArmyClicked, false);
    TriggerAddEventDialogControl(libVCUI_gt_PU_MissionArmyClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_MissionShipClicked
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_MissionShipClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCUI_gv_pU_MissionShipButton != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == libVCUI_gv_pU_MissionShipButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSendEvent(libVCUI_gv_pUC_MissionEventSoALaunch);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_MissionShipClicked_Init () {
    libVCUI_gt_PU_MissionShipClicked = TriggerCreate("libVCUI_gt_PU_MissionShipClicked_Func");
    TriggerEnable(libVCUI_gt_PU_MissionShipClicked, false);
    TriggerAddEventDialogControl(libVCUI_gt_PU_MissionShipClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_MissionBirthCallouts
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_MissionBirthCallouts_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto526A692A_ae = 4;
    const int auto526A692A_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libVoiC_gf_MissionArmyCategoryUnlocked(libVCUI_gv_pU_MissionNextMap) != null) && (libVoiC_gf_ArmyCategoryStateCheck(libVoiC_gf_MissionArmyCategoryUnlocked(libVCUI_gv_pU_MissionNextMap), c_armyCategoryStateUnlocked) == false)) {
        DialogControlSendAnimationEvent(libVCUI_gv_pU_MissionCalloutLines[1], PlayerGroupAll(), "Birth");
    }

    lv_index = 2;
    for ( ; ( (auto526A692A_ai >= 0 && lv_index <= auto526A692A_ae) || (auto526A692A_ai < 0 && lv_index >= auto526A692A_ae) ) ; lv_index += auto526A692A_ai ) {
        DialogControlSendAnimationEvent(libVCUI_gv_pU_MissionCalloutLines[lv_index], PlayerGroupAll(), "Birth");
    }
    Wait(1.0, c_timeGame);
    TriggerEnable(libVCUI_gt_PU_MissionVignetteClicked, true);
    TriggerExecute(libVCUI_gt_PU_MissionPitchPlayClicked, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_MissionBirthCallouts_Init () {
    libVCUI_gt_PU_MissionBirthCallouts = TriggerCreate("libVCUI_gt_PU_MissionBirthCallouts_Func");
    TriggerAddEventCutsceneBookmarkFired(libVCUI_gt_PU_MissionBirthCallouts, c_cutsceneNone, "BirthUI");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_MissionWaitForSelection
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_MissionWaitForSelection_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(2.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_MissionWaitForSelection_Init () {
    libVCUI_gt_PU_MissionWaitForSelection = TriggerCreate("libVCUI_gt_PU_MissionWaitForSelection_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_MissionAiur05UIElementOff
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_MissionAiur05UIElementOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoD91013DE_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoD91013DE_val = libVCUI_gv_pU_MissionAiur05UIOffCounter;
    if (autoD91013DE_val == 0) {
        DialogControlSetVisible(libVCUI_gv_pU_MissionRewardPanel, PlayerGroupAll(), false);
        DialogControlSetVisible(libVCUI_gv_pU_MissionTitleLabel, PlayerGroupAll(), false);
        DialogControlSetVisible(libVCUI_gv_pU_MissionObjectiveLabel, PlayerGroupAll(), false);
        DialogControlSetVisible(libVCUI_gv_pU_MissionCalloutLines[1], PlayerGroupAll(), false);
    }
    else if (autoD91013DE_val == 1) {
        DialogControlSetVisible(libVCUI_gv_pU_MissionVignetteFrame[1], PlayerGroupAll(), false);
        DialogControlSetVisible(libVCUI_gv_pU_MissionCalloutLines[3], PlayerGroupAll(), false);
    }
    else if (autoD91013DE_val == 2) {
        DialogControlSetVisible(libVCUI_gv_pU_MissionVignetteFrame[2], PlayerGroupAll(), false);
        DialogControlSetVisible(libVCUI_gv_pU_MissionCalloutLines[4], PlayerGroupAll(), false);
    }
    else if (autoD91013DE_val == 3) {
        DialogControlSetVisible(libVCUI_gv_pU_MissionPortraitFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libVCUI_gv_pU_MissionCalloutLines[2], PlayerGroupAll(), false);
        DialogControlSetVisible(libVCUI_gv_pU_MissionAchievementPanel, PlayerGroupAll(), false);
    }
    else if (autoD91013DE_val == 4) {
        DialogControlSetVisible(libVCUI_gv_pU_MissionPanel, PlayerGroupAll(), false);
    }
    else {
    }
    libVCUI_gv_pU_MissionAiur05UIOffCounter += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_MissionAiur05UIElementOff_Init () {
    libVCUI_gt_PU_MissionAiur05UIElementOff = TriggerCreate("libVCUI_gt_PU_MissionAiur05UIElementOff_Func");
    TriggerEnable(libVCUI_gt_PU_MissionAiur05UIElementOff, false);
    TriggerAddEventCutsceneBookmarkFired(libVCUI_gt_PU_MissionAiur05UIElementOff, c_cutsceneNone, "UIOff");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_MissionAiur05UIPortraitChange
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_MissionAiur05UIPortraitChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVCUI_gv_pU_MissionAiur05UIPortraitChanged == false)) {
        libNtve_gf_SetDialogItemModel(libVCUI_gv_pU_MissionPortraitFrame, "AmonDarkEx2Portrait", PlayerGroupAll());
        libVCUI_gv_pU_MissionAiur05UIPortraitChanged = true;
    }
    else {
        libNtve_gf_SetDialogItemModel(libVCUI_gv_pU_MissionPortraitFrame, "RohanaEx2PortraitNoBraids3D", PlayerGroupAll());
        libVCUI_gv_pU_MissionAiur05UIPortraitChanged = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_MissionAiur05UIPortraitChange_Init () {
    libVCUI_gt_PU_MissionAiur05UIPortraitChange = TriggerCreate("libVCUI_gt_PU_MissionAiur05UIPortraitChange_Func");
    TriggerEnable(libVCUI_gt_PU_MissionAiur05UIPortraitChange, false);
    TriggerAddEventCutsceneBookmarkFired(libVCUI_gt_PU_MissionAiur05UIPortraitChange, c_cutsceneNone, "UIPortraitChange");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_SoATutorial
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_SoATutorial_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_groupIndex;

    // Automatic Variable Declarations
    const int autoADA9E6B6_ae = libVCUI_gv_pUC_SoAGroupCount;
    const int autoADA9E6B6_ai = 1;
    const int autoEA63FC88_ae = libVCUI_gv_pUC_SoAGroupCount;
    const int autoEA63FC88_ai = 1;
    const int auto43B83B38_ae = libVCUI_gv_pUC_SoAGroupCount;
    const int auto43B83B38_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_groupIndex = 1;
    for ( ; ( (autoADA9E6B6_ai >= 0 && lv_groupIndex <= autoADA9E6B6_ae) || (autoADA9E6B6_ai < 0 && lv_groupIndex >= autoADA9E6B6_ae) ) ; lv_groupIndex += autoADA9E6B6_ai ) {
        DialogControlSetEnabled(libVCUI_gv_pU_SoAInventoryHighlight[lv_groupIndex], PlayerGroupAll(), true);
    }
    DialogControlSetEnabled(libVCUI_gv_pU_SoACurrencyHighlight, PlayerGroupAll(), true);
    DialogControlSetEnabled(libVCUI_gv_pU_SoAAuxiliaryHighlight, PlayerGroupAll(), true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, SoundLink(ConversationDataGetSound("Tutorial_Ship|Line00005", true), c_soundIndexAny), 0.0, c_transmissionDurationAdd, true);
    lv_groupIndex = 1;
    for ( ; ( (autoEA63FC88_ai >= 0 && lv_groupIndex <= autoEA63FC88_ae) || (autoEA63FC88_ai < 0 && lv_groupIndex >= autoEA63FC88_ae) ) ; lv_groupIndex += autoEA63FC88_ai ) {
        if ((libVoiC_gf_PC_PerkGroupUnlocked(libVoiC_gf_PC_PerkGroupOfPerk(libVCUI_gv_pU_SoAInventoryItems[lv_groupIndex][1])) == true)) {
            DialogControlSetVisible(libVCUI_gv_pU_SoAInventoryHighlight[lv_groupIndex], PlayerGroupAll(), true);
        }

    }
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, SoundLink(ConversationDataGetSound("Tutorial_Ship|Line00008", true), c_soundIndexAny), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, SoundLink(ConversationDataGetSound("Tutorial_Ship|Line00013", true), c_soundIndexAny), 0.4, c_transmissionDurationAdd, true);
    lv_groupIndex = 1;
    for ( ; ( (auto43B83B38_ai >= 0 && lv_groupIndex <= auto43B83B38_ae) || (auto43B83B38_ai < 0 && lv_groupIndex >= auto43B83B38_ae) ) ; lv_groupIndex += auto43B83B38_ai ) {
        DialogControlSetEnabled(libVCUI_gv_pU_SoAInventoryHighlight[lv_groupIndex], PlayerGroupAll(), false);
    }
    DialogControlSetVisible(libVCUI_gv_pU_SoACurrencyHighlight, PlayerGroupAll(), true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, SoundLink(ConversationDataGetSound("Tutorial_Ship|Line00007", true), c_soundIndexAny), 1.0, c_transmissionDurationAdd, true);
    DialogControlSetEnabled(libVCUI_gv_pU_SoACurrencyHighlight, PlayerGroupAll(), false);
    DialogControlSetVisible(libVCUI_gv_pU_SoAAuxiliaryHighlight, PlayerGroupAll(), true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, SoundLink(ConversationDataGetSound("Tutorial_Ship|Line00009", true), c_soundIndexAny), 0.0, c_transmissionDurationAdd, true);
    DialogControlSetEnabled(libVCUI_gv_pU_SoAAuxiliaryHighlight, PlayerGroupAll(), false);
    if ((libVCUI_gv_pU_SoAButtonsPressed == false)) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, SoundLink(ConversationDataGetSound("Tutorial_Ship|Line00012", true), c_soundIndexAny), 0.0, c_transmissionDurationAdd, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_SoATutorial_Init () {
    libVCUI_gt_PU_SoATutorial = TriggerCreate("libVCUI_gt_PU_SoATutorial_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_SoABackClicked
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_SoABackClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libVCUI_gv_pU_SoABackButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gf_PU_SoAUpdateData();
    libVoiC_gv_pCX_SoAPreviousTotalPower = libVoiC_gv_pC_SoACurrency;
    TriggerSendEvent(libVCUI_gv_pUC_SoAEventClosed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_SoABackClicked_Init () {
    libVCUI_gt_PU_SoABackClicked = TriggerCreate("libVCUI_gt_PU_SoABackClicked_Func");
    TriggerEnable(libVCUI_gt_PU_SoABackClicked, false);
    TriggerAddEventDialogControl(libVCUI_gt_PU_SoABackClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_SoAResetClicked
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_SoAResetClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_auxiliaryIndex;
    int lv_groupIndex;
    int lv_perkIndex;

    // Automatic Variable Declarations
    const int auto7FC54DEF_ae = libVCUI_gv_pUC_SoAGroupCount;
    const int auto7FC54DEF_ai = 1;
    const int auto66032E81_ae = libVCUI_gv_pUC_SoAInventoryItemCount;
    const int auto66032E81_ai = 1;
    const int autoFEC8EB35_ae = libVCUI_gv_pUC_SoAAuxiliaryCount;
    const int autoFEC8EB35_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libVCUI_gv_pU_SoAResetButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_groupIndex = 1;
    for ( ; ( (auto7FC54DEF_ai >= 0 && lv_groupIndex <= auto7FC54DEF_ae) || (auto7FC54DEF_ai < 0 && lv_groupIndex >= auto7FC54DEF_ae) ) ; lv_groupIndex += auto7FC54DEF_ai ) {
        lv_perkIndex = 1;
        for ( ; ( (auto66032E81_ai >= 0 && lv_perkIndex <= auto66032E81_ae) || (auto66032E81_ai < 0 && lv_perkIndex >= auto66032E81_ae) ) ; lv_perkIndex += auto66032E81_ai ) {
            if ((libVoiC_gf_PC_PerkStateCheck(libVCUI_gv_pU_SoAInventoryItems[lv_groupIndex][lv_perkIndex], libVoiC_ge_PC_PerkState_Locked) == false) && (libVoiC_gf_PC_PerkCost(libVCUI_gv_pU_SoAInventoryItems[lv_groupIndex][lv_perkIndex]) == 0)) {
                libVCUI_gf_PU_SoAAssignPerk(libVCUI_gv_pU_SoAInventoryItems[lv_groupIndex][lv_perkIndex], lv_groupIndex);
                break;
            }

        }
    }
    lv_auxiliaryIndex = 1;
    for ( ; ( (autoFEC8EB35_ai >= 0 && lv_auxiliaryIndex <= autoFEC8EB35_ae) || (autoFEC8EB35_ai < 0 && lv_auxiliaryIndex >= autoFEC8EB35_ae) ) ; lv_auxiliaryIndex += autoFEC8EB35_ai ) {
        libVCUI_gv_pU_SoACurrencyCurrent += (libVCUI_gv_pU_SoAUpgradeLevels[lv_auxiliaryIndex]*libVoiC_gv_pCC_SoACurrencyPerUpgrade);
        libVCUI_gv_pU_SoAUpgradeLevels[lv_auxiliaryIndex] = 0;
    }
    libVCUI_gf_PU_SoAUpdateDialog();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_SoAResetClicked_Init () {
    libVCUI_gt_PU_SoAResetClicked = TriggerCreate("libVCUI_gt_PU_SoAResetClicked_Func");
    TriggerEnable(libVCUI_gt_PU_SoAResetClicked, false);
    TriggerAddEventDialogControl(libVCUI_gt_PU_SoAResetClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_SoAInventoryItemClicked
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_SoAInventoryItemClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itemIndex;
    int lv_groupIndex;

    // Automatic Variable Declarations
    const int autoF0ED14EB_ae = libVCUI_gv_pUC_SoAGroupCount;
    const int autoF0ED14EB_ai = 1;
    const int auto7CE61807_ae = libVCUI_gv_pUC_SoAInventoryItemCount;
    const int auto7CE61807_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_groupIndex = 1;
    for ( ; ( (autoF0ED14EB_ai >= 0 && lv_groupIndex <= autoF0ED14EB_ae) || (autoF0ED14EB_ai < 0 && lv_groupIndex >= autoF0ED14EB_ae) ) ; lv_groupIndex += autoF0ED14EB_ai ) {
        lv_itemIndex = 1;
        for ( ; ( (auto7CE61807_ai >= 0 && lv_itemIndex <= auto7CE61807_ae) || (auto7CE61807_ai < 0 && lv_itemIndex >= auto7CE61807_ae) ) ; lv_itemIndex += auto7CE61807_ai ) {
            if ((EventDialogControl() == libVCUI_gv_pU_SoAInventoryButtons[lv_groupIndex][lv_itemIndex])) {
                if ((libVCUI_gv_pU_SoAInventoryItems[lv_groupIndex][lv_itemIndex] == libVCUI_gv_pU_SoAActivePerks[lv_groupIndex])) {
                    return true;
                }

                libVCUI_gv_pU_SoAButtonsPressed = true;
                libVCUI_gf_PU_SoAUpdateCutscene(lv_itemIndex, lv_groupIndex);
                libVCUI_gf_PU_SoAAssignPerk(libVCUI_gv_pU_SoAInventoryItems[lv_groupIndex][lv_itemIndex], lv_groupIndex);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_SoAInventoryItemClicked_Init () {
    libVCUI_gt_PU_SoAInventoryItemClicked = TriggerCreate("libVCUI_gt_PU_SoAInventoryItemClicked_Func");
    TriggerEnable(libVCUI_gt_PU_SoAInventoryItemClicked, false);
    TriggerAddEventDialogControl(libVCUI_gt_PU_SoAInventoryItemClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_SoAInventoryHoverStart
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_SoAInventoryHoverStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_groupIndex;
    int lv_itemIndex;

    // Automatic Variable Declarations
    const int auto3890A59B_ae = libVCUI_gv_pUC_SoAGroupCount;
    const int auto3890A59B_ai = 1;
    const int auto762D2BC8_ae = libVCUI_gv_pUC_SoAInventoryItemCount;
    const int auto762D2BC8_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_groupIndex = 1;
    for ( ; ( (auto3890A59B_ai >= 0 && lv_groupIndex <= auto3890A59B_ae) || (auto3890A59B_ai < 0 && lv_groupIndex >= auto3890A59B_ae) ) ; lv_groupIndex += auto3890A59B_ai ) {
        if ((EventDialogControl() == libVCUI_gv_pU_SoAInventory[lv_groupIndex])) {
            CutsceneAddFilter(libVCUI_gv_pU_SoABackgroundCutscene, ("UIHighlightT" + IntToString(lv_groupIndex)));
            return true;
        }

        lv_itemIndex = 1;
        for ( ; ( (auto762D2BC8_ai >= 0 && lv_itemIndex <= auto762D2BC8_ae) || (auto762D2BC8_ai < 0 && lv_itemIndex >= auto762D2BC8_ae) ) ; lv_itemIndex += auto762D2BC8_ai ) {
            if ((EventDialogControl() == libVCUI_gv_pU_SoAInventoryButtons[lv_groupIndex][lv_itemIndex])) {
                CutsceneAddFilter(libVCUI_gv_pU_SoABackgroundCutscene, ("UIHighlightT" + IntToString(lv_groupIndex)));
                return true;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_SoAInventoryHoverStart_Init () {
    libVCUI_gt_PU_SoAInventoryHoverStart = TriggerCreate("libVCUI_gt_PU_SoAInventoryHoverStart_Func");
    TriggerEnable(libVCUI_gt_PU_SoAInventoryHoverStart, false);
    TriggerAddEventDialogControl(libVCUI_gt_PU_SoAInventoryHoverStart, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_SoAInventoryHoverStop
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_SoAInventoryHoverStop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_groupIndex;
    int lv_itemIndex;

    // Automatic Variable Declarations
    const int autoC0F35625_ae = libVCUI_gv_pUC_SoAGroupCount;
    const int autoC0F35625_ai = 1;
    const int autoE96DD961_ae = libVCUI_gv_pUC_SoAInventoryItemCount;
    const int autoE96DD961_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_groupIndex = 1;
    for ( ; ( (autoC0F35625_ai >= 0 && lv_groupIndex <= autoC0F35625_ae) || (autoC0F35625_ai < 0 && lv_groupIndex >= autoC0F35625_ae) ) ; lv_groupIndex += autoC0F35625_ai ) {
        if ((EventDialogControl() == libVCUI_gv_pU_SoAInventory[lv_groupIndex])) {
            CutsceneRemoveFilter(libVCUI_gv_pU_SoABackgroundCutscene, ("UIHighlightT" + IntToString(lv_groupIndex)));
            return true;
        }

        lv_itemIndex = 1;
        for ( ; ( (autoE96DD961_ai >= 0 && lv_itemIndex <= autoE96DD961_ae) || (autoE96DD961_ai < 0 && lv_itemIndex >= autoE96DD961_ae) ) ; lv_itemIndex += autoE96DD961_ai ) {
            if ((EventDialogControl() == libVCUI_gv_pU_SoAInventoryButtons[lv_groupIndex][lv_itemIndex])) {
                CutsceneRemoveFilter(libVCUI_gv_pU_SoABackgroundCutscene, ("UIHighlightT" + IntToString(lv_groupIndex)));
                return true;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_SoAInventoryHoverStop_Init () {
    libVCUI_gt_PU_SoAInventoryHoverStop = TriggerCreate("libVCUI_gt_PU_SoAInventoryHoverStop_Func");
    TriggerEnable(libVCUI_gt_PU_SoAInventoryHoverStop, false);
    TriggerAddEventDialogControl(libVCUI_gt_PU_SoAInventoryHoverStop, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_SoACutsceneUIFinishedIntro
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_SoACutsceneUIFinishedIntro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gv_pU_SoACutsceneUIFinishedIntro = true;
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_SoACutsceneUIFinishedIntro_Init () {
    libVCUI_gt_PU_SoACutsceneUIFinishedIntro = TriggerCreate("libVCUI_gt_PU_SoACutsceneUIFinishedIntro_Func");
    TriggerEnable(libVCUI_gt_PU_SoACutsceneUIFinishedIntro, false);
    TriggerAddEventCutsceneBookmarkFired(libVCUI_gt_PU_SoACutsceneUIFinishedIntro, c_cutsceneNone, "SoAUIIntroFinished");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_SoAMeterPlusOrMinusClicked
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_SoAMeterPlusOrMinusClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_auxiliaryIndex;

    // Automatic Variable Declarations
    const int auto42F4E09B_ae = libVCUI_gv_pUC_SoAAuxiliaryCount;
    const int auto42F4E09B_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_auxiliaryIndex = 1;
    for ( ; ( (auto42F4E09B_ai >= 0 && lv_auxiliaryIndex <= auto42F4E09B_ae) || (auto42F4E09B_ai < 0 && lv_auxiliaryIndex >= auto42F4E09B_ae) ) ; lv_auxiliaryIndex += auto42F4E09B_ai ) {
        if ((EventDialogControl() == libVCUI_gv_pU_SoAAuxiliaryPlusButton[lv_auxiliaryIndex])) {
            if (((libVCUI_gv_pU_SoACurrencyCurrent <= 0) || (libVCUI_gv_pU_SoAUpgradeLevels[lv_auxiliaryIndex] >= libVCUI_gv_pUC_SoAAuxiliaryMaxCurrency))) {
                return true;
            }

            libVCUI_gv_pU_SoAUpgradeLevels[lv_auxiliaryIndex] += 1;
            libVCUI_gv_pU_SoACurrencyCurrent -= libVoiC_gv_pCC_SoACurrencyPerUpgrade;
            libVCUI_gv_pU_SoAButtonsPressed = true;
            libVCUI_gf_PU_SoAUpdateDialog();
            return true;
        }

        if ((EventDialogControl() == libVCUI_gv_pU_SoAAuxiliaryMinusButton[lv_auxiliaryIndex])) {
            if ((libVCUI_gv_pU_SoAUpgradeLevels[lv_auxiliaryIndex] <= 0)) {
                return true;
            }

            libVCUI_gv_pU_SoAUpgradeLevels[lv_auxiliaryIndex] -= 1;
            libVCUI_gv_pU_SoACurrencyCurrent += libVoiC_gv_pCC_SoACurrencyPerUpgrade;
            libVCUI_gf_PU_SoAUpdateDialog();
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_SoAMeterPlusOrMinusClicked_Init () {
    libVCUI_gt_PU_SoAMeterPlusOrMinusClicked = TriggerCreate("libVCUI_gt_PU_SoAMeterPlusOrMinusClicked_Func");
    TriggerEnable(libVCUI_gt_PU_SoAMeterPlusOrMinusClicked, false);
    TriggerAddEventDialogControl(libVCUI_gt_PU_SoAMeterPlusOrMinusClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_SoAFadeOutComplete
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_SoAFadeOutComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCST_gf_StoryCutsceneFade(true, 0.5, false);
    CutsceneGoToBookmark(libVCUI_gv_pU_SoABackgroundCutscene, ("T" + IntToString(libVCUI_gv_pU_SoAQueuedTier)));
    libVCUI_gv_pU_SoAViewedTier = libVCUI_gv_pU_SoAQueuedTier;
    libVCUI_gv_pU_SoAQueuedTier = 0;
    libVCUI_gf_PU_SoAUpdateDialog();
    DialogControlSendAnimationEvent(libVCUI_gv_pU_SoACalloutPanels[libVCUI_gv_pU_SoAViewedTier], PlayerGroupAll(), "Birth");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_SoAFadeOutComplete_Init () {
    libVCUI_gt_PU_SoAFadeOutComplete = TriggerCreate("libVCUI_gt_PU_SoAFadeOutComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_StarmapInit
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_StarmapInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_rewardIndex;
    int lv_index;

    // Automatic Variable Declarations
    const int auto6093054A_ae = 2;
    const int auto6093054A_ai = 1;
    const int auto9A9AA853_ae = 3;
    const int auto9A9AA853_ai = 1;
    const int autoB0ED53BF_ae = 2;
    const int autoB0ED53BF_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((libVCUI_gv_pU_StarmapDialog == c_invalidDialogId))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CutsceneCreateNew("Cutscenes\\UI_Starmap.SC2Cutscene", libNtve_gf_PointFromXYZ(16.0, 16.0, 32.0), 0.0, PlayerGroupAll(), true);
    libVCUI_gv_pU_StarmapCutscene = CutsceneLastCreated();
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libVCUI_gv_pU_StarmapDialog = DialogLastCreated();
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "LotV_StarmapUI/StarmapTemplate");
    libVCUI_gv_pU_StarmapPanel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_StarmapPanel, c_triggerControlTypeButton, "TravelButton");
    libVCUI_gv_pU_StarmapLaunchButton = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_StarmapPanel, c_triggerControlTypeButton, "BackButton");
    libVCUI_gv_pU_StarmapBackButton = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_StarmapPanel, c_triggerControlTypeButton, "QuitButton");
    libVCUI_gv_pU_StarmapQuitButton = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_StarmapPanel, c_triggerControlTypeLabel, "Prompt");
    libVCUI_gv_pU_StarmapPromptLabel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_StarmapPanel, c_triggerControlTypePanel, "SubtitleFrame");
    libVCUI_gv_pU_StarmapSubtitlePanel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_StarmapPanel, c_triggerControlTypePanel, "PlanetACallout");
    libVCUI_gv_pU_StarmapPlanetTitleCallout[1] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_StarmapPanel, c_triggerControlTypeButton, "PlanetATitle");
    libVCUI_gv_pU_StarmapPlanetTitleName[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\blank.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\blank.dds", PlayerGroupAll());
    DialogControlHookup(libVCUI_gv_pU_StarmapPanel, c_triggerControlTypePanel, "PlanetBCallout");
    libVCUI_gv_pU_StarmapPlanetTitleCallout[2] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_StarmapPanel, c_triggerControlTypeButton, "PlanetBTitle");
    libVCUI_gv_pU_StarmapPlanetTitleName[2] = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_StarmapPanel, c_triggerControlTypePanel, "NewUnitHeadingContainer");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlHookup(lv_lastFrame, c_triggerControlTypeLabel, "NewUnitHeading");
    libVCUI_gv_pU_StarmapMissionRewards2 = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_StarmapPanel, c_triggerControlTypePanel, "NewUnitFrame");
    libVCUI_gv_pU_StarmapMissionRewards = DialogControlLastCreated();
    lv_rewardIndex = 1;
    for ( ; ( (auto6093054A_ai >= 0 && lv_rewardIndex <= auto6093054A_ae) || (auto6093054A_ai < 0 && lv_rewardIndex >= auto6093054A_ae) ) ; lv_rewardIndex += auto6093054A_ai ) {
        DialogControlHookup(libVCUI_gv_pU_StarmapMissionRewards, c_triggerControlTypePanel, "RewardUnitFrame" + IntToString(lv_rewardIndex));
        libVCUI_gv_pU_StarmapUnitPanel[lv_rewardIndex] = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_StarmapUnitPanel[lv_rewardIndex], c_triggerControlTypePanel, "RewardUnitNameLabelContainer");
        lv_lastFrame = DialogControlLastCreated();
        DialogControlHookup(lv_lastFrame, c_triggerControlTypeLabel, "RewardUnitNameLabel");
        libVCUI_gv_pU_StarmapUnitLabel[lv_rewardIndex] = DialogControlLastCreated();
        DialogControlHookup(libVCUI_gv_pU_StarmapUnitPanel[lv_rewardIndex], c_triggerControlTypeUnitModel, "RewardUnitFrame");
        libVCUI_gv_pU_StarmapUnitModels[lv_rewardIndex] = DialogControlLastCreated();
    }
    lv_index = 1;
    for ( ; ( (auto9A9AA853_ai >= 0 && lv_index <= auto9A9AA853_ae) || (auto9A9AA853_ai < 0 && lv_index >= auto9A9AA853_ae) ) ; lv_index += auto9A9AA853_ai ) {
        DialogCreate(1, 1, c_anchorCenter, 0, 0, true);
        libVCUI_gv_pU_StarmapPlanetAttachDialog[lv_index] = DialogLastCreated();
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
        libVCUI_gv_pU_StarmapPlanetAttachPanel[lv_index] = DialogControlLastCreated();
        libNtve_gf_CreateUnitsAtPoint2(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, 1, Point(16.0, 16.0));
        libVCUI_gv_pU_StarmapPlanetAttachUnit[lv_index] = UnitLastCreated();
    }
    lv_index = 1;
    for ( ; ( (autoB0ED53BF_ai >= 0 && lv_index <= autoB0ED53BF_ae) || (autoB0ED53BF_ai < 0 && lv_index >= autoB0ED53BF_ae) ) ; lv_index += autoB0ED53BF_ai ) {
        DialogCreate(120, 120, c_anchorCenter, 0, 0, true);
        libVCUI_gv_pU_StarmapPlanetButtonDialog[lv_index] = DialogLastCreated();
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), ("StarmapPlanet" + IntToString(lv_index)), PlayerGroupAll());
        libVCUI_gv_pU_StarmapPlanetButton[lv_index] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\blank.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\blank.dds", PlayerGroupAll());
    }
    DialogControlHookup(libVCUI_gv_pU_StarmapPanel, c_triggerControlTypePanel, "StarmapNewUnitCallout");
    libVCUI_gv_pU_StarmapNewUnitCallout = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_StarmapPanel, c_triggerControlTypePanel, "StarmapSelectedPlanetNameCallout");
    libVCUI_gv_pU_StarmapSelectedPlanetNameLabelCallout = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_StarmapSelectedPlanetNameLabelCallout, c_triggerControlTypeLabel, "PlanetName");
    libVCUI_gv_pU_StarmapSelectedPlanetNameLabel = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_StarmapSelectedPlanetNameLabelCallout, c_triggerControlTypePanel, "PitchFrame");
    libVCUI_gv_pU_StarmapPitchFrame = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_StarmapPitchFrame, c_triggerControlTypeButton, "PlayButton");
    libVCUI_gv_pU_StarmapPitchPlayButton = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_StarmapPitchFrame, c_triggerControlTypeButton, "StopButton");
    libVCUI_gv_pU_StarmapPitchStopButton = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_StarmapSelectedPlanetNameLabelCallout, c_triggerControlTypePanel, "FluffHolder");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlHookup(lv_lastFrame, c_triggerControlTypeLabel, "FluffLeft");
    libVCUI_gv_pU_StarmapPlanetFluffLeft = DialogControlLastCreated();
    DialogControlHookup(lv_lastFrame, c_triggerControlTypeLabel, "FluffRight");
    libVCUI_gv_pU_StarmapPlanetFluffRight = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_StarmapInit_Init () {
    libVCUI_gt_PU_StarmapInit = TriggerCreate("libVCUI_gt_PU_StarmapInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_StarmapBackSelected
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_StarmapBackSelected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libVCUI_gv_pU_StarmapBackButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gv_pU_PitchPlaying = false;
    libVoiC_gf_DispatchCampaignEvent(libVoiC_ge_PC_Event_UITravelQuit, "", "", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_StarmapBackSelected_Init () {
    libVCUI_gt_PU_StarmapBackSelected = TriggerCreate("libVCUI_gt_PU_StarmapBackSelected_Func");
    TriggerEnable(libVCUI_gt_PU_StarmapBackSelected, false);
    TriggerAddEventDialogControl(libVCUI_gt_PU_StarmapBackSelected, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_StarmapQuitSelected
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_StarmapQuitSelected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libVCUI_gv_pU_StarmapQuitButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libVCUI_gt_PU_StarmapCustomDialogDismiss, true);
    UIShowCustomDialog(PlayerGroupAll(), libNtve_ge_CustomDialogType_c_customDialogTypeQuery, StringExternal("Param/Value/lib_VCUI_B359FEC6"), null, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_StarmapQuitSelected_Init () {
    libVCUI_gt_PU_StarmapQuitSelected = TriggerCreate("libVCUI_gt_PU_StarmapQuitSelected_Func");
    TriggerEnable(libVCUI_gt_PU_StarmapQuitSelected, false);
    TriggerAddEventDialogControl(libVCUI_gt_PU_StarmapQuitSelected, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_StarmapCustomDialogDismiss
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_StarmapCustomDialogDismiss_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_StarmapCustomDialogDismiss_Init () {
    libVCUI_gt_PU_StarmapCustomDialogDismiss = TriggerCreate("libVCUI_gt_PU_StarmapCustomDialogDismiss_Func");
    TriggerEnable(libVCUI_gt_PU_StarmapCustomDialogDismiss, false);
    TriggerAddEventCustomDialogDismissed(libVCUI_gt_PU_StarmapCustomDialogDismiss, c_playerAny, libNtve_ge_CustomDialogResult_c_customDialogResultYes);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_StarmapLaunchSelected
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_StarmapLaunchSelected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libVCUI_gv_pU_StarmapLaunchButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gv_pU_StarmapLaunchLocation = libVCUI_gv_pU_StarmapLocations[libVCUI_gv_pU_StarmapSelection];
    DialogControlSetEnabled(libVCUI_gv_pU_StarmapLaunchButton, PlayerGroupAll(), false);
    DialogControlSetEnabled(libVCUI_gv_pU_StarmapBackButton, PlayerGroupAll(), false);
    DialogControlSetEnabled(libVCUI_gv_pU_StarmapPitchPlayButton, PlayerGroupAll(), false);
    DialogControlSetEnabled(libVCUI_gv_pU_StarmapPitchStopButton, PlayerGroupAll(), false);
    libVoiC_gf_CinematicFade(false, 0.8, Color(0.00, 0.00, 0.00), true);
    libVoiC_gf_DispatchCampaignEvent(libVoiC_ge_PC_Event_UITravelLaunch, "", "", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_StarmapLaunchSelected_Init () {
    libVCUI_gt_PU_StarmapLaunchSelected = TriggerCreate("libVCUI_gt_PU_StarmapLaunchSelected_Func");
    TriggerEnable(libVCUI_gt_PU_StarmapLaunchSelected, false);
    TriggerAddEventDialogControl(libVCUI_gt_PU_StarmapLaunchSelected, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_StarmapPlanetClicked
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_StarmapPlanetClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((EventDialogControl() == libVCUI_gv_pU_StarmapPlanetTitleName[1]) || (EventDialogControl() == libVCUI_gv_pU_StarmapPlanetButton[1])) && (libVCUI_gv_pU_StarmapSelection != 1)) {
        if ((libVCUI_gv_pU_StarmapSelection == 0)) {
            CutsceneGoToBookmark(libVCUI_gv_pU_StarmapCutscene, "DoubleToA");
            CutsceneAddFilter(libVCUI_gv_pU_StarmapCutscene, ("Starmap" + libVoiC_gf_PC_LocationCutsceneFilter(libVCUI_gv_pU_StarmapLocations[1])));
            CutscenePlay(libVCUI_gv_pU_StarmapCutscene);
        }
        else {
            CutsceneGoToBookmark(libVCUI_gv_pU_StarmapCutscene, "BtoA");
            CutscenePlay(libVCUI_gv_pU_StarmapCutscene);
        }
        libVCUI_gf_PU_StarmapSelectLocation(1);
        libVCUI_gf_PU_StarmapUpdateDisplay();
        libVCUI_gf_PU_StarmapFadeOutUIItems();
    }

    if (((EventDialogControl() == libVCUI_gv_pU_StarmapPlanetTitleName[2]) || (EventDialogControl() == libVCUI_gv_pU_StarmapPlanetButton[2])) && (libVCUI_gv_pU_StarmapSelection != 2)) {
        if ((libVCUI_gv_pU_StarmapSelection == 0)) {
            CutsceneGoToBookmark(libVCUI_gv_pU_StarmapCutscene, "DoubleToB");
            CutsceneAddFilter(libVCUI_gv_pU_StarmapCutscene, ("Starmap" + libVoiC_gf_PC_LocationCutsceneFilter(libVCUI_gv_pU_StarmapLocations[2])));
            CutscenePlay(libVCUI_gv_pU_StarmapCutscene);
        }
        else {
            CutsceneGoToBookmark(libVCUI_gv_pU_StarmapCutscene, "AtoB");
            CutscenePlay(libVCUI_gv_pU_StarmapCutscene);
        }
        libVCUI_gf_PU_StarmapSelectLocation(2);
        libVCUI_gf_PU_StarmapUpdateDisplay();
        libVCUI_gf_PU_StarmapFadeOutUIItems();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_StarmapPlanetClicked_Init () {
    libVCUI_gt_PU_StarmapPlanetClicked = TriggerCreate("libVCUI_gt_PU_StarmapPlanetClicked_Func");
    TriggerEnable(libVCUI_gt_PU_StarmapPlanetClicked, false);
    TriggerAddEventDialogControl(libVCUI_gt_PU_StarmapPlanetClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_StarmapFadeInStarmapItems
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_StarmapFadeInStarmapItems_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVCUI_gv_pU_StarmapSelection == 0)) {
        DialogControlSetVisible(libVCUI_gv_pU_StarmapPlanetButton[1], PlayerGroupAll(), true);
        DialogControlSetVisible(libVCUI_gv_pU_StarmapPlanetButton[2], PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemAcceptMouse(libVCUI_gv_pU_StarmapPlanetTitleName[1], true, PlayerGroupAll());
        libNtve_gf_SetDialogItemAcceptMouse(libVCUI_gv_pU_StarmapPlanetTitleName[2], true, PlayerGroupAll());
        DialogControlFadeTransparency(libVCUI_gv_pU_StarmapPlanetTitleCallout[1], PlayerGroupAll(), 1.0, 0.0);
        DialogControlFadeTransparency(libVCUI_gv_pU_StarmapPlanetTitleName[1], PlayerGroupAll(), 1.0, 0.0);
        DialogControlFadeTransparency(libVCUI_gv_pU_StarmapPlanetTitleCallout[2], PlayerGroupAll(), 1.0, 0.0);
        DialogControlFadeTransparency(libVCUI_gv_pU_StarmapPlanetTitleName[2], PlayerGroupAll(), 1.0, 0.0);
        return true;
    }

    DialogControlFadeTransparency(libVCUI_gv_pU_StarmapMissionRewards, PlayerGroupAll(), 1.0, 0.0);
    DialogControlSendAnimationEvent(libVCUI_gv_pU_StarmapUnitModels[1], PlayerGroupAll(), "Birth");
    DialogControlSendAnimationEvent(libVCUI_gv_pU_StarmapUnitModels[2], PlayerGroupAll(), "Birth");
    DialogControlFadeTransparency(libVCUI_gv_pU_StarmapMissionRewards2, PlayerGroupAll(), 1.0, 0.0);
    DialogControlFadeTransparency(libVCUI_gv_pU_StarmapSelectedPlanetNameLabelCallout, PlayerGroupAll(), 0.0, 0.0);
    DialogControlSendAnimationEvent(libVCUI_gv_pU_StarmapSelectedPlanetNameLabelCallout, PlayerGroupAll(), "Birth");
    libNtve_gf_SetDialogItemText(libVCUI_gv_pU_StarmapSelectedPlanetNameLabel, libVoiC_gf_StoryUIPlanetName(libVCUI_gv_pU_StarmapLocations[libVCUI_gv_pU_StarmapSelection]), PlayerGroupAll());
    if ((libVCUI_gv_pU_StarmapSelection == 1)) {
        DialogControlSetVisible(libVCUI_gv_pU_StarmapPlanetButton[2], PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemAcceptMouse(libVCUI_gv_pU_StarmapPlanetTitleName[2], true, PlayerGroupAll());
        if ((libVCUI_gv_pU_StarmapLocations[2] != null)) {
            DialogControlFadeTransparency(libVCUI_gv_pU_StarmapPlanetTitleCallout[2], PlayerGroupAll(), 1.0, 0.0);
            DialogControlFadeTransparency(libVCUI_gv_pU_StarmapPlanetTitleName[2], PlayerGroupAll(), 1.0, 0.0);
        }

    }
    else {
        DialogControlSetVisible(libVCUI_gv_pU_StarmapPlanetButton[1], PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemAcceptMouse(libVCUI_gv_pU_StarmapPlanetTitleName[1], true, PlayerGroupAll());
        DialogControlFadeTransparency(libVCUI_gv_pU_StarmapPlanetTitleCallout[1], PlayerGroupAll(), 1.0, 0.0);
        DialogControlFadeTransparency(libVCUI_gv_pU_StarmapPlanetTitleName[1], PlayerGroupAll(), 1.0, 0.0);
    }
    DialogControlFadeTransparency(libVCUI_gv_pU_StarmapNewUnitCallout, PlayerGroupAll(), 1.0, 0.0);
    if ((libVCUI_gv_pU_StarmapPitchPlayed[libVCUI_gv_pU_StarmapSelection] == false)) {
        TriggerExecute(libVCUI_gt_PU_StarmapPlayPitch, false, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_StarmapFadeInStarmapItems_Init () {
    libVCUI_gt_PU_StarmapFadeInStarmapItems = TriggerCreate("libVCUI_gt_PU_StarmapFadeInStarmapItems_Func");
    TriggerEnable(libVCUI_gt_PU_StarmapFadeInStarmapItems, false);
    TriggerAddEventCutsceneBookmarkFired(libVCUI_gt_PU_StarmapFadeInStarmapItems, c_cutsceneNone, "FadeInStarmapItems");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_StarmapFilterSwap
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_StarmapFilterSwap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVCUI_gv_pU_StarmapSelection == 1) && (libVCUI_gv_pU_StarmapLocations[2] != null)) {
        CutsceneRemoveFilter(libVCUI_gv_pU_StarmapCutscene, ("Starmap" + libVoiC_gf_PC_LocationCutsceneFilter(libVCUI_gv_pU_StarmapLocations[2])));
    }

    if ((libVCUI_gv_pU_StarmapSelection == 2) && (libVCUI_gv_pU_StarmapLocations[1] != null)) {
        CutsceneRemoveFilter(libVCUI_gv_pU_StarmapCutscene, ("Starmap" + libVoiC_gf_PC_LocationCutsceneFilter(libVCUI_gv_pU_StarmapLocations[1])));
    }

    CutsceneAddFilter(libVCUI_gv_pU_StarmapCutscene, ("Starmap" + libVoiC_gf_PC_LocationCutsceneFilter(libVCUI_gv_pU_StarmapLocations[libVCUI_gv_pU_StarmapSelection])));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_StarmapFilterSwap_Init () {
    libVCUI_gt_PU_StarmapFilterSwap = TriggerCreate("libVCUI_gt_PU_StarmapFilterSwap_Func");
    TriggerEnable(libVCUI_gt_PU_StarmapFilterSwap, false);
    TriggerAddEventCutsceneBookmarkFired(libVCUI_gt_PU_StarmapFilterSwap, c_cutsceneNone, "SwapFilters");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_StarmapPlayPitch
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_StarmapPlayPitch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    string lv_pitch;
    int lv_noPortrait;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_noPortrait = c_invalidPortraitId;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libVCUI_gv_pU_StarmapPitchPlayButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVCUI_gv_pU_StarmapSelection == 0)) {
        return true;
    }

    if ((libVCUI_gv_pU_StarmapPitchPlayed[libVCUI_gv_pU_StarmapSelection] == true)) {
        UserDataSetInt("WriterStates", "Travel_FirstLine", "Value", 1, 0);
    }

    libVCUI_gv_pU_StarmapPitchPlayed[libVCUI_gv_pU_StarmapSelection] = true;
    lv_pitch = libVoiC_gf_StoryPlanetNonmissionPitch(libVCUI_gv_pU_StarmapLocations[libVCUI_gv_pU_StarmapSelection]);
    if ((lv_pitch == null)) {
        return true;
    }

    while (!((libVCUI_gv_pU_PitchPlaying == false))) {
        Wait(0.0625, c_timeGame);
    }
    DialogControlSetVisible(libVCUI_gv_pU_StarmapPitchPlayButton, PlayerGroupAll(), false);
    DialogControlSetVisible(libVCUI_gv_pU_StarmapPitchStopButton, PlayerGroupAll(), true);
    libVCUI_gv_pU_PitchPlaying = true;
    ConversationDataRun(lv_pitch, PlayerGroupAll(), c_conversationSkipNone, true);
    libVCUI_gv_pU_PitchPlaying = false;
    libVCUI_gf_PU_StopArtanisAnims();
    if ((libVCUI_gv_pU_StarmapDialog != c_invalidDialogId)) {
        DialogControlSetVisible(libVCUI_gv_pU_StarmapPitchPlayButton, PlayerGroupAll(), true);
        DialogControlSetVisible(libVCUI_gv_pU_StarmapPitchStopButton, PlayerGroupAll(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_StarmapPlayPitch_Init () {
    libVCUI_gt_PU_StarmapPlayPitch = TriggerCreate("libVCUI_gt_PU_StarmapPlayPitch_Func");
    TriggerAddEventDialogControl(libVCUI_gt_PU_StarmapPlayPitch, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_StarmapStopPitch
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_StarmapStopPitch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libVCUI_gv_pU_StarmapPitchStopButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gv_pU_PitchPlaying = false;
    ConversationDataStop();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_StarmapStopPitch_Init () {
    libVCUI_gt_PU_StarmapStopPitch = TriggerCreate("libVCUI_gt_PU_StarmapStopPitch_Func");
    TriggerAddEventDialogControl(libVCUI_gt_PU_StarmapStopPitch, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_StarmapPlanetHighlightOn
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_StarmapPlanetHighlightOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((EventDialogControl() == libVCUI_gv_pU_StarmapPlanetTitleName[1]) || (EventDialogControl() == libVCUI_gv_pU_StarmapPlanetButton[1]))) {
        libNtve_gf_SetDialogItemToggled(libVCUI_gv_pU_StarmapPlanetTitleName[1], true, PlayerGroupAll());
        DialogControlSendAnimationEvent(libVCUI_gv_pU_StarmapPlanetTitleCallout[1], PlayerGroupAll(), "Highlight");
        SoundPlayForPlayer(SoundLink("UI_Void_CelestialArray_PlanetHover", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        if ((libVCUI_gv_pU_StarmapSelection == 0)) {
            libNtve_gf_PlayAnimation(ActorFrom("::external.HoverA"), "STARMAPHOVER", "Ready", c_animFlagPlayForever, 0.0);
        }
        else {
            libNtve_gf_PlayAnimation(ActorFrom("::external.HoverAlt"), "STARMAPHOVER", "Ready", c_animFlagPlayForever, 0.0);
        }
    }
    else if (((EventDialogControl() == libVCUI_gv_pU_StarmapPlanetTitleName[2]) || (EventDialogControl() == libVCUI_gv_pU_StarmapPlanetButton[2]))) {
        libNtve_gf_SetDialogItemToggled(libVCUI_gv_pU_StarmapPlanetTitleName[2], true, PlayerGroupAll());
        SoundPlayForPlayer(SoundLink("UI_Void_CelestialArray_PlanetHover", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        DialogControlSendAnimationEvent(libVCUI_gv_pU_StarmapPlanetTitleCallout[2], PlayerGroupAll(), "Highlight");
        if ((libVCUI_gv_pU_StarmapSelection == 0)) {
            libNtve_gf_PlayAnimation(ActorFrom("::external.HoverB"), "STARMAPHOVER", "Ready", c_animFlagPlayForever, 0.0);
        }
        else {
            libNtve_gf_PlayAnimation(ActorFrom("::external.HoverAlt"), "STARMAPHOVER", "Ready", c_animFlagPlayForever, 0.0);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_StarmapPlanetHighlightOn_Init () {
    libVCUI_gt_PU_StarmapPlanetHighlightOn = TriggerCreate("libVCUI_gt_PU_StarmapPlanetHighlightOn_Func");
    TriggerAddEventDialogControl(libVCUI_gt_PU_StarmapPlanetHighlightOn, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_StarmapPlanetHighlightOff
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_StarmapPlanetHighlightOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((EventDialogControl() == libVCUI_gv_pU_StarmapPlanetTitleName[1]) || (EventDialogControl() == libVCUI_gv_pU_StarmapPlanetButton[1]))) {
        libNtve_gf_SetDialogItemToggled(libVCUI_gv_pU_StarmapPlanetTitleName[1], false, PlayerGroupAll());
        DialogControlSendAnimationEvent(libVCUI_gv_pU_StarmapPlanetTitleCallout[1], PlayerGroupAll(), "HighlightStop");
        libVoiC_gf_PC_ClearAnimationFromActor("STARMAPHOVER", ActorFrom("::external.HoverAlt"), 0.0);
        libVoiC_gf_PC_ClearAnimationFromActor("STARMAPHOVER", ActorFrom("::external.HoverA"), 0.0);
    }
    else if (((EventDialogControl() == libVCUI_gv_pU_StarmapPlanetTitleName[2]) || (EventDialogControl() == libVCUI_gv_pU_StarmapPlanetButton[2]))) {
        libNtve_gf_SetDialogItemToggled(libVCUI_gv_pU_StarmapPlanetTitleName[2], false, PlayerGroupAll());
        DialogControlSendAnimationEvent(libVCUI_gv_pU_StarmapPlanetTitleCallout[2], PlayerGroupAll(), "HighlightStop");
        libVoiC_gf_PC_ClearAnimationFromActor("STARMAPHOVER", ActorFrom("::external.HoverB"), 0.0);
        libVoiC_gf_PC_ClearAnimationFromActor("STARMAPHOVER", ActorFrom("::external.HoverAlt"), 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_StarmapPlanetHighlightOff_Init () {
    libVCUI_gt_PU_StarmapPlanetHighlightOff = TriggerCreate("libVCUI_gt_PU_StarmapPlanetHighlightOff_Func");
    TriggerAddEventDialogControl(libVCUI_gt_PU_StarmapPlanetHighlightOff, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_ArtanisAnim
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_ArtanisAnim_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_convLine;
    actor lv_sceneActor;

    // Automatic Variable Declarations
    string autoC6E9E6FB_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gf_PU_StopArtanisAnims();
    if ((libVCST_gf_NextAvailableMission(libVoiC_gf_CurrentLocation()) == "PMoebius01")) {
        lv_sceneActor = ActorFrom("::external.StarmapKarax");
    }
    else {
        lv_sceneActor = ActorFrom("::external.StarmapArtanis");
    }
    autoC6E9E6FB_val = ConversationDataActiveCamera();
    if (autoC6E9E6FB_val == "Cameras|CustomCamera01") {
        ActorSend(lv_sceneActor, "AnimPlay STARMAPTALK Talk PlayForever 1.000000 1.000000");
    }
    else if (autoC6E9E6FB_val == "Cameras|CustomCamera02") {
        ActorSend(lv_sceneActor, "AnimPlay STARMAPTALK Talk PlayForever 1.000000 1.000000");
    }
    else {
        ActorSend(lv_sceneActor, "AnimPlay STARMAPTALK Talk PlayForever 1.000000 1.000000");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_ArtanisAnim_Init () {
    libVCUI_gt_PU_ArtanisAnim = TriggerCreate("libVCUI_gt_PU_ArtanisAnim_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_ArtanisAnimStop
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_ArtanisAnimStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gf_PU_StopArtanisAnims();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_ArtanisAnimStop_Init () {
    libVCUI_gt_PU_ArtanisAnimStop = TriggerCreate("libVCUI_gt_PU_ArtanisAnimStop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_FlashArmyButtonHelpTip
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_FlashArmyButtonHelpTip_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoCFD98E36_val;

    // Conditions
    if (testConds) {
        if (!((libVCUI_gv_pU_ArmyButtonUsed == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        autoCFD98E36_val = PlayerRace(1);
        if (autoCFD98E36_val == "Prot") {
            DialogControlInvokeAsText(libVCUI_gv_pU_ArmyButtonTipPanel, PlayerGroupAll(), "PlayArmyTip_Prot", StringExternal("Param/Value/lib_VCUI_034F4713"), null, null, null);
        }
        else if (autoCFD98E36_val == "Zerg") {
            DialogControlInvokeAsText(libVCUI_gv_pU_ArmyButtonTipPanel, PlayerGroupAll(), "PlayArmyTip_Zerg", StringExternal("Param/Value/lib_VCUI_B4347E4E"), null, null, null);
        }
        else if (autoCFD98E36_val == "Terr") {
            DialogControlInvokeAsText(libVCUI_gv_pU_ArmyButtonTipPanel, PlayerGroupAll(), "PlayArmyTip_Terr", StringExternal("Param/Value/lib_VCUI_ED15A899"), null, null, null);
        }
        else {
        }
        TimerStart(libVCUI_gv_pU_ArmyButtonTimer, 5.0, false, c_timeGame);
        Wait(5.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_FlashArmyButtonHelpTip_Init () {
    libVCUI_gt_PU_FlashArmyButtonHelpTip = TriggerCreate("libVCUI_gt_PU_FlashArmyButtonHelpTip_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_ArmyButtonUsed
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_ArmyButtonUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == libVCUI_gv_pU_ArmyButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVCUI_gv_pU_ArmyButtonUsed == false) && (TimerGetRemaining(libVCUI_gv_pU_ArmyButtonTimer) >= 1.0)) {
        TriggerExecute(libVCUI_gt_PU_ArmyButtonFlashingOff, true, false);
        libVCUI_gv_pU_ArmyButtonUsed = true;
    }

    TriggerSendEvent(libVCUI_gv_pUC_SelectArmyEventUsed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_ArmyButtonUsed_Init () {
    libVCUI_gt_PU_ArmyButtonUsed = TriggerCreate("libVCUI_gt_PU_ArmyButtonUsed_Func");
    TriggerEnable(libVCUI_gt_PU_ArmyButtonUsed, false);
    TriggerAddEventDialogControl(libVCUI_gt_PU_ArmyButtonUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_ArmyButtonFlashingOff
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_ArmyButtonFlashingOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoBCDDD362_val;

    // Conditions
    if (testConds) {
        if (!((libVCUI_gv_pU_ArmyButtonTipPanel != c_invalidDialogControlId))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libVCUI_gt_PU_FlashArmyButtonHelpTip);
    autoBCDDD362_val = PlayerRace(1);
    if (autoBCDDD362_val == "Prot") {
        DialogControlInvokeAsText(libVCUI_gv_pU_ArmyButtonTipPanel, PlayerGroupAll(), "CloseArmyTip_Prot", StringExternal("Param/Value/lib_VCUI_F2711687"), null, null, null);
    }
    else if (autoBCDDD362_val == "Zerg") {
        DialogControlInvokeAsText(libVCUI_gv_pU_ArmyButtonTipPanel, PlayerGroupAll(), "CloseArmyTip_Zerg", StringExternal("Param/Value/lib_VCUI_5A02F843"), null, null, null);
    }
    else if (autoBCDDD362_val == "Terr") {
        DialogControlInvokeAsText(libVCUI_gv_pU_ArmyButtonTipPanel, PlayerGroupAll(), "CloseArmyTip_Terr", StringExternal("Param/Value/lib_VCUI_1B09ADE8"), null, null, null);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_ArmyButtonFlashingOff_Init () {
    libVCUI_gt_PU_ArmyButtonFlashingOff = TriggerCreate("libVCUI_gt_PU_ArmyButtonFlashingOff_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_ArmyButtonMissionInit
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PS_ArmyButtonMissionInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    TriggerEnable(libVCUI_gt_PU_ArmyButtonUsed, true);
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        Wait(1.0, c_timeGame);
        while (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            Wait(0.5, c_timeGame);
        }
        Wait(0.5, c_timeGame);
        libVCUI_gf_DisplayArmyButton(false);
    }
    else {
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, true);
    }
    Wait(0.5, c_timeGame);
    libVCUI_gf_PU_ArmyButtonHookup();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PS_ArmyButtonMissionInit_Init () {
    libVCUI_gt_PS_ArmyButtonMissionInit = TriggerCreate("libVCUI_gt_PS_ArmyButtonMissionInit_Func");
    TriggerEnable(libVCUI_gt_PS_ArmyButtonMissionInit, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_BossBarFocusOnTarget
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_BossBarFocusOnTarget_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libVCUI_gv_pU_BB_ClickableAreaHealthBar) || (EventDialogControl() == libVCUI_gv_pU_BB_ClickableAreaNameLabel)))) {
            return false;
        }

        if (!((libVCUI_gv_pU_BB_Boss != null))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(libVCUI_gv_pU_BB_Boss, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraPan(1, UnitGetPosition(libVCUI_gv_pU_BB_Boss), 0.0, 0.0, 0.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_BossBarFocusOnTarget_Init () {
    libVCUI_gt_PU_BossBarFocusOnTarget = TriggerCreate("libVCUI_gt_PU_BossBarFocusOnTarget_Func");
    TriggerEnable(libVCUI_gt_PU_BossBarFocusOnTarget, false);
    TriggerAddEventDialogControl(libVCUI_gt_PU_BossBarFocusOnTarget, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeDoubleClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_BB_BossHPChanged
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_BB_BossHPChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    bool lv_bossSet;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitIsAlive(libVCUI_gv_pU_BB_Boss) == false) || (libVCUI_gv_pU_BB_Boss == null))) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    if ((libVCUI_gv_pU_BB_Boss != null)) {
        libVCUI_gf_RefreshSingularBossBarVoidCampaign();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_BB_BossHPChanged_Init () {
    libVCUI_gt_PU_BB_BossHPChanged = TriggerCreate("libVCUI_gt_PU_BB_BossHPChanged_Func");
    TriggerEnable(libVCUI_gt_PU_BB_BossHPChanged, false);
    TriggerAddEventUnitProperty(libVCUI_gt_PU_BB_BossHPChanged, UnitRefFromVariable("libVCUI_gv_pU_BB_Boss"), c_unitPropLife);
    TriggerAddEventUnitProperty(libVCUI_gt_PU_BB_BossHPChanged, UnitRefFromVariable("libVCUI_gv_pU_BB_Boss"), c_unitPropShields);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_BB_LoadUpdate
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_BB_LoadUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gf_RefreshSingularBossBarVoidCampaign();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_BB_LoadUpdate_Init () {
    libVCUI_gt_PU_BB_LoadUpdate = TriggerCreate("libVCUI_gt_PU_BB_LoadUpdate_Func");
    TriggerEnable(libVCUI_gt_PU_BB_LoadUpdate, false);
    TriggerAddEventLoadGameDone(libVCUI_gt_PU_BB_LoadUpdate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_VoidHeroDebugSetWidth
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_VoidHeroDebugSetWidth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gv_pUC_HEROUIBARWIDTH = StringToInt(StringWord(EventChatMessage(false), 2));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_VoidHeroDebugSetWidth_Init () {
    libVCUI_gt_PU_VoidHeroDebugSetWidth = TriggerCreate("libVCUI_gt_PU_VoidHeroDebugSetWidth_Func");
    TriggerAddEventChatMessage(libVCUI_gt_PU_VoidHeroDebugSetWidth, c_playerAny, "herowidth", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_VoidHeroDebugSetHeightL
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_VoidHeroDebugSetHeightL_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gv_pUC_HEROUILIFEBARHEIGHT = StringToInt(StringWord(EventChatMessage(false), 2));
    libVCUI_gf_PU_UpdateHeroPanel(1);
    libVCUI_gf_PU_UpdateHeroPanel(2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_VoidHeroDebugSetHeightL_Init () {
    libVCUI_gt_PU_VoidHeroDebugSetHeightL = TriggerCreate("libVCUI_gt_PU_VoidHeroDebugSetHeightL_Func");
    TriggerAddEventChatMessage(libVCUI_gt_PU_VoidHeroDebugSetHeightL, c_playerAny, "lifeheight", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_VoidHeroDebugSetHeightS
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_VoidHeroDebugSetHeightS_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gv_pUC_HEROUISHIELDBARHEIGHT = StringToInt(StringWord(EventChatMessage(false), 2));
    libVCUI_gf_PU_UpdateHeroPanel(1);
    libVCUI_gf_PU_UpdateHeroPanel(2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_VoidHeroDebugSetHeightS_Init () {
    libVCUI_gt_PU_VoidHeroDebugSetHeightS = TriggerCreate("libVCUI_gt_PU_VoidHeroDebugSetHeightS_Func");
    TriggerAddEventChatMessage(libVCUI_gt_PU_VoidHeroDebugSetHeightS, c_playerAny, "shieldheight", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_VoidHeroDebugSetHeightE
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_VoidHeroDebugSetHeightE_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gv_pUC_HEROUIENERGYBARHEIGHT = StringToInt(StringWord(EventChatMessage(false), 2));
    libVCUI_gf_PU_UpdateHeroPanel(1);
    libVCUI_gf_PU_UpdateHeroPanel(2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_VoidHeroDebugSetHeightE_Init () {
    libVCUI_gt_PU_VoidHeroDebugSetHeightE = TriggerCreate("libVCUI_gt_PU_VoidHeroDebugSetHeightE_Func");
    TriggerAddEventChatMessage(libVCUI_gt_PU_VoidHeroDebugSetHeightE, c_playerAny, "energyheight", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_HeroPanelUpdate
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_HeroPanelUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto2796D1C4_ae = libVCUI_gv_pUC_VoidHerioUIMaxHeroCount;
    int auto2796D1C4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto2796D1C4_var = 1;
    for ( ; auto2796D1C4_var <= auto2796D1C4_ae; auto2796D1C4_var += 1 ) {
        libVCUI_gf_PU_UpdateHeroPanel(auto2796D1C4_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_HeroPanelUpdate_Init () {
    libVCUI_gt_PU_HeroPanelUpdate = TriggerCreate("libVCUI_gt_PU_HeroPanelUpdate_Func");
    TriggerEnable(libVCUI_gt_PU_HeroPanelUpdate, false);
    TriggerAddEventTimePeriodic(libVCUI_gt_PU_HeroPanelUpdate, libVCUI_gv_pUC_VoidHeroUIUpdateFrequency, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_VoidHeroUIUnitDamaged
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_VoidHeroUIUnitDamaged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnit() == libVCUI_gv_pU_VoidHeroUIUnit[1])) {
        lv_index = 1;
    }
    else if ((EventUnit() == libVCUI_gv_pU_VoidHeroUIUnit[2])) {
        lv_index = 2;
    }
    else if (true) {
        return true;
    }
    DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogDamageTakenImage[lv_index], PlayerGroupAll(), true);
    if ((libVCUI_gv_pU_VoidHeroUIDamageTimer[lv_index] <= 0.0)) {
    }
    else {
        DialogControlFadeTransparency(libVCUI_gv_pU_VoidHeroUIDialogDamageTakenImage[lv_index], PlayerGroupAll(), 0.25, 0.0);
    }
    if ((EventUnitDamageAmount() < 5.0)) {
        if ((libVCUI_gv_pU_VoidHeroUIDamageTimer[lv_index] <= 0.25)) {
            libVCUI_gv_pU_VoidHeroUIDamageTimer[lv_index] = 0.26;
            DialogControlFadeTransparency(libVCUI_gv_pU_VoidHeroUIDialogDamageTakenImage[lv_index], PlayerGroupAll(), 0.25, 0.0);
            libNtve_gf_SetDialogItemText(libVCUI_gv_pU_VoidHeroUIDialogDamageTakenLabel[lv_index], FixedToText(EventUnitDamageAmount(), 0), PlayerGroupAll());
            DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogDamageTakenLabel[lv_index], PlayerGroupAll(), true);
        }

    }
    else {
        if ((EventUnitDamageAmount() >= 5.0) && (EventUnitDamageAmount() <= 15.0)) {
            if ((libVCUI_gv_pU_VoidHeroUIDamageTimer[lv_index] <= 0.5)) {
                libVCUI_gv_pU_VoidHeroUIDamageTimer[lv_index] = 0.51;
                DialogControlFadeTransparency(libVCUI_gv_pU_VoidHeroUIDialogDamageTakenImage[lv_index], PlayerGroupAll(), 0.5, 0.0);
                libNtve_gf_SetDialogItemText(libVCUI_gv_pU_VoidHeroUIDialogDamageTakenLabel[lv_index], FixedToText(EventUnitDamageAmount(), 0), PlayerGroupAll());
                DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogDamageTakenLabel[lv_index], PlayerGroupAll(), true);
            }

        }
        else {
            if ((libVCUI_gv_pU_VoidHeroUIDamageTimer[lv_index] <= 1.0)) {
                libVCUI_gv_pU_VoidHeroUIDamageTimer[lv_index] = 1.01;
                DialogControlFadeTransparency(libVCUI_gv_pU_VoidHeroUIDialogDamageTakenImage[lv_index], PlayerGroupAll(), 1.0, 0.0);
                libNtve_gf_SetDialogItemText(libVCUI_gv_pU_VoidHeroUIDialogDamageTakenLabel[lv_index], FixedToText(EventUnitDamageAmount(), 0), PlayerGroupAll());
                DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogDamageTakenLabel[lv_index], PlayerGroupAll(), true);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_VoidHeroUIUnitDamaged_Init () {
    libVCUI_gt_PU_VoidHeroUIUnitDamaged = TriggerCreate("libVCUI_gt_PU_VoidHeroUIUnitDamaged_Func");
    TriggerEnable(libVCUI_gt_PU_VoidHeroUIUnitDamaged, false);
    TriggerAddEventUnitDamaged(libVCUI_gt_PU_VoidHeroUIUnitDamaged, UnitRefFromVariable("libVCUI_gv_pU_VoidHeroUIUnit[1]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libVCUI_gt_PU_VoidHeroUIUnitDamaged, UnitRefFromVariable("libVCUI_gv_pU_VoidHeroUIUnit[2]"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_VoidHeroUIUnitVitalChange
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_ZS_SwarmHeroUIUnitVitalChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_damageBar;
    int lv_damageBarWidth;
    int lv_damageBarHeight;

    // Automatic Variable Declarations
    unit auto948A9A7A_val;
    int autoB2BDD4C2_val;

    // Variable Initialization
    lv_damageBar = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((EventUnitPropertyChangeFixed() < 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto948A9A7A_val = EventUnit();
    if (auto948A9A7A_val == libVCUI_gv_pU_VoidHeroUIUnit[1]) {
        lv_index = 1;
    }
    else if (auto948A9A7A_val == libVCUI_gv_pU_VoidHeroUIUnit[2]) {
        lv_index = 2;
    }
    else {
        return true;
    }
    autoB2BDD4C2_val = EventUnitProperty();
    if (autoB2BDD4C2_val == c_unitPropEnergy) {
        DialogControlCreateInPanelFromTemplate(libVCUI_gv_pU_VoidHeroUIPanel[lv_index], c_triggerControlTypeImage, "VoidShared_StatusBarTemplates/HeroUnitFrameTemplate/HealthBarDamageImage");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, libVCUI_gv_pU_VoidHeroUIDialogEnergyBarImage[lv_index], c_anchorLeft, 0, 0);
        lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(libVCUI_gv_pU_VoidHeroUIUnit[lv_index], c_unitPropEnergy, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(libVCUI_gv_pU_VoidHeroUIUnit[lv_index], c_unitPropEnergyMax, c_unitPropCurrent)) * IntToFixed(libVCUI_gv_pUC_HEROUIBARWIDTH)));
        lv_damageBarHeight = DialogControlGetHeight(libVCUI_gv_pU_VoidHeroUIDialogEnergyBarImage[lv_index], 1);
    }
    else if (autoB2BDD4C2_val == c_unitPropLife) {
        DialogControlCreateInPanelFromTemplate(libVCUI_gv_pU_VoidHeroUIPanel[lv_index], c_triggerControlTypeImage, "VoidShared_StatusBarTemplates/HeroUnitFrameTemplate/EnergyBarDamageImage");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, libVCUI_gv_pU_VoidHeroUIDialogHealthBarImage[lv_index], c_anchorLeft, 0, 0);
        lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(libVCUI_gv_pU_VoidHeroUIUnit[lv_index], c_unitPropLife, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(libVCUI_gv_pU_VoidHeroUIUnit[lv_index], c_unitPropLifeMax, c_unitPropCurrent)) * IntToFixed(libVCUI_gv_pUC_HEROUIBARWIDTH)));
        lv_damageBarHeight = DialogControlGetHeight(libVCUI_gv_pU_VoidHeroUIDialogHealthBarImage[lv_index], 1);
    }
    else if (autoB2BDD4C2_val == c_unitPropShields) {
        DialogControlCreateInPanelFromTemplate(libVCUI_gv_pU_VoidHeroUIPanel[lv_index], c_triggerControlTypeImage, "VoidShared_StatusBarTemplates/HeroUnitFrameTemplate/ShieldBarDamageImage");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, libVCUI_gv_pU_VoidHeroUIDialogShieldBarImage[lv_index], c_anchorLeft, 0, 0);
        lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(libVCUI_gv_pU_VoidHeroUIUnit[lv_index], c_unitPropShields, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(libVCUI_gv_pU_VoidHeroUIUnit[lv_index], c_unitPropShieldsMax, c_unitPropCurrent)) * IntToFixed(libVCUI_gv_pUC_HEROUIBARWIDTH)));
        lv_damageBarHeight = DialogControlGetHeight(libVCUI_gv_pU_VoidHeroUIDialogShieldBarImage[lv_index], 1);
    }
    else {
    }
    lv_damageBar = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRenderPriority(lv_damageBar, 506, PlayerGroupAll());
    DialogControlSetVisible(lv_damageBar, PlayerGroupAll(), true);
    DialogControlSetSize(lv_damageBar, PlayerGroupAll(), MaxI(lv_damageBarWidth, 1), lv_damageBarHeight);
    Wait(1.0, c_timeReal);
    DialogControlFadeTransparency(lv_damageBar, PlayerGroupAll(), 1.0, 100.0);
    Wait(1.1, c_timeReal);
    DialogControlDestroy(lv_damageBar);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_ZS_SwarmHeroUIUnitVitalChange_Init () {
    libVCUI_gt_ZS_SwarmHeroUIUnitVitalChange = TriggerCreate("libVCUI_gt_ZS_SwarmHeroUIUnitVitalChange_Func");
    TriggerEnable(libVCUI_gt_ZS_SwarmHeroUIUnitVitalChange, false);
    TriggerAddEventUnitProperty(libVCUI_gt_ZS_SwarmHeroUIUnitVitalChange, UnitRefFromVariable("libVCUI_gv_pU_VoidHeroUIUnit[1]"), c_unitPropLife);
    TriggerAddEventUnitProperty(libVCUI_gt_ZS_SwarmHeroUIUnitVitalChange, UnitRefFromVariable("libVCUI_gv_pU_VoidHeroUIUnit[2]"), c_unitPropLife);
    TriggerAddEventUnitProperty(libVCUI_gt_ZS_SwarmHeroUIUnitVitalChange, UnitRefFromVariable("libVCUI_gv_pU_VoidHeroUIUnit[1]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(libVCUI_gt_ZS_SwarmHeroUIUnitVitalChange, UnitRefFromVariable("libVCUI_gv_pU_VoidHeroUIUnit[2]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(libVCUI_gt_ZS_SwarmHeroUIUnitVitalChange, UnitRefFromVariable("libVCUI_gv_pU_VoidHeroUIUnit[1]"), c_unitPropShields);
    TriggerAddEventUnitProperty(libVCUI_gt_ZS_SwarmHeroUIUnitVitalChange, UnitRefFromVariable("libVCUI_gv_pU_VoidHeroUIUnit[2]"), c_unitPropShields);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_VoidHeroUIMouseHoverText
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_VoidHeroUIMouseHoverText_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoF3A5F50D_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libVCUI_gv_pU_VoidHeroUIDialogBorderImage[1]) || (EventDialogControl() == libVCUI_gv_pU_VoidHeroUIDialogBorderImageNoEnergy[1]) || (EventDialogControl() == libVCUI_gv_pU_VoidHeroUIDialogBorderImage[2]) || (EventDialogControl() == libVCUI_gv_pU_VoidHeroUIDialogBorderImageNoEnergy[2]) || (EventDialogControl() == libVCUI_gv_pU_VoidHeroUIDialogButton[1]) || (EventDialogControl() == libVCUI_gv_pU_VoidHeroUIDialogButton[2])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((EventDialogControl() == libVCUI_gv_pU_VoidHeroUIDialogBorderImage[1]) || (EventDialogControl() == libVCUI_gv_pU_VoidHeroUIDialogBorderImageNoEnergy[1]) || (EventDialogControl() == libVCUI_gv_pU_VoidHeroUIDialogButton[1]))) {
        lv_index = 1;
    }
    else {
        if (((EventDialogControl() == libVCUI_gv_pU_VoidHeroUIDialogBorderImage[2]) || (EventDialogControl() == libVCUI_gv_pU_VoidHeroUIDialogBorderImageNoEnergy[2]) || (EventDialogControl() == libVCUI_gv_pU_VoidHeroUIDialogButton[2]))) {
            lv_index = 2;
        }
        else {
            return true;
        }
    }
    autoF3A5F50D_val = EventDialogControlEventType();
    if (autoF3A5F50D_val == c_triggerControlEventTypeMouseEnter) {
        if ((UnitGetPropertyFixed(libVCUI_gv_pU_VoidHeroUIUnit[lv_index], c_unitPropLifeMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogHealthLabel[lv_index], PlayerGroupAll(), true);
        }

        if ((UnitGetPropertyFixed(libVCUI_gv_pU_VoidHeroUIUnit[lv_index], c_unitPropEnergyMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogEnergyLabel[lv_index], PlayerGroupAll(), true);
        }

        if ((UnitGetPropertyFixed(libVCUI_gv_pU_VoidHeroUIUnit[lv_index], c_unitPropShieldsMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogShieldLabel[lv_index], PlayerGroupAll(), true);
        }

    }
    else if (autoF3A5F50D_val == c_triggerControlEventTypeMouseExit) {
        if ((UnitGetPropertyFixed(libVCUI_gv_pU_VoidHeroUIUnit[lv_index], c_unitPropLifeMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogHealthLabel[lv_index], PlayerGroupAll(), false);
        }

        if ((UnitGetPropertyFixed(libVCUI_gv_pU_VoidHeroUIUnit[lv_index], c_unitPropEnergyMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogEnergyLabel[lv_index], PlayerGroupAll(), false);
        }

        if ((UnitGetPropertyFixed(libVCUI_gv_pU_VoidHeroUIUnit[lv_index], c_unitPropShieldsMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libVCUI_gv_pU_VoidHeroUIDialogShieldLabel[lv_index], PlayerGroupAll(), false);
        }

    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_VoidHeroUIMouseHoverText_Init () {
    libVCUI_gt_PU_VoidHeroUIMouseHoverText = TriggerCreate("libVCUI_gt_PU_VoidHeroUIMouseHoverText_Func");
    TriggerEnable(libVCUI_gt_PU_VoidHeroUIMouseHoverText, false);
    TriggerAddEventDialogControl(libVCUI_gt_PU_VoidHeroUIMouseHoverText, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
    TriggerAddEventDialogControl(libVCUI_gt_PU_VoidHeroUIMouseHoverText, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_VoidHeroUILoadUpdate
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_VoidHeroUILoadUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_heroIndex;

    // Automatic Variable Declarations
    const int autoC6B8AA75_ae = libVCUI_gv_pUC_VoidHerioUIMaxHeroCount;
    const int autoC6B8AA75_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heroIndex = 1;
    for ( ; ( (autoC6B8AA75_ai >= 0 && lv_heroIndex <= autoC6B8AA75_ae) || (autoC6B8AA75_ai < 0 && lv_heroIndex >= autoC6B8AA75_ae) ) ; lv_heroIndex += autoC6B8AA75_ai ) {
        if (((libVCUI_gv_pU_VoidHeroUIType[lv_heroIndex] == libVCUI_ge_CampaignHeroes_KerriganXN) || (libVCUI_gv_pU_VoidHeroUIType[lv_heroIndex] == libVCUI_ge_CampaignHeroes_Kerrigan))) {
            DialogControlSendAnimationEvent(libVCUI_gv_pU_VoidHeroUIPanel[lv_heroIndex], PlayerGroupAll(), "SwitchZerg");
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_VoidHeroUILoadUpdate_Init () {
    libVCUI_gt_PU_VoidHeroUILoadUpdate = TriggerCreate("libVCUI_gt_PU_VoidHeroUILoadUpdate_Func");
    TriggerEnable(libVCUI_gt_PU_VoidHeroUILoadUpdate, false);
    TriggerAddEventLoadGameDone(libVCUI_gt_PU_VoidHeroUILoadUpdate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_VoidHeroUIHandleEpilogue02RaceSwap
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_VoidHeroUIHandleEpilogue02RaceSwap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVCUI_gv_pU_VoidHeroUIType[1] == libVCUI_ge_CampaignHeroes_Kerrigan) && (PlayerRace(1) == "Terr")) {
        DialogControlSendAnimationEvent(libVCUI_gv_pU_VoidHeroUIPanel[1], PlayerGroupAll(), "SwitchZerg");
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_VoidHeroUIHandleEpilogue02RaceSwap_Init () {
    libVCUI_gt_PU_VoidHeroUIHandleEpilogue02RaceSwap = TriggerCreate("libVCUI_gt_PU_VoidHeroUIHandleEpilogue02RaceSwap_Func");
    TriggerEnable(libVCUI_gt_PU_VoidHeroUIHandleEpilogue02RaceSwap, false);
    TriggerAddEventGeneric(libVCUI_gt_PU_VoidHeroUIHandleEpilogue02RaceSwap, "CinematicModeOff");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_HealthWatchLifeCheck
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_HealthWatchLifeCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_old;
    int lv_watchUnitIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((EventUnit() != null))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnit() == libVCUI_gv_pU_HealthWatchUnit[1])) {
        lv_watchUnitIndex = 1;
    }
    else {
        lv_watchUnitIndex = 2;
    }
    lv_old = libVCUI_gv_pU_HealthWatchLastHP[lv_watchUnitIndex];
    libVCUI_gv_pU_HealthWatchLastHP[lv_watchUnitIndex] = (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent)+UnitGetPropertyFixed(EventUnit(), c_unitPropShields, c_unitPropCurrent));
    if ((libVCUI_gv_pU_HealthWatchLastHP[lv_watchUnitIndex] < lv_old) && (libVCUI_gf_PU_HealthWatchUnitBelowThreshold(EventUnit()) == true) && (libVCUI_gv_pU_HealthWatchFlashing == false)) {
        libVCUI_gv_pU_HealthWatchFlashingUnit = EventUnit();
        TriggerExecute(libVCUI_gt_PU_HealthWatchFlash, true, false);
    }

    if ((libVCUI_gf_PU_HealthWatchUnitBelowThreshold(EventUnit()) == false)) {
        libVCUI_gf_PM_StopHeroLowHPSound();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_HealthWatchLifeCheck_Init () {
    libVCUI_gt_PU_HealthWatchLifeCheck = TriggerCreate("libVCUI_gt_PU_HealthWatchLifeCheck_Func");
    TriggerEnable(libVCUI_gt_PU_HealthWatchLifeCheck, false);
    TriggerAddEventUnitProperty(libVCUI_gt_PU_HealthWatchLifeCheck, UnitRefFromVariable("libVCUI_gv_pU_HealthWatchUnit[1]"), c_unitPropLife);
    TriggerAddEventUnitProperty(libVCUI_gt_PU_HealthWatchLifeCheck, UnitRefFromVariable("libVCUI_gv_pU_HealthWatchUnit[1]"), c_unitPropShields);
    TriggerAddEventUnitProperty(libVCUI_gt_PU_HealthWatchLifeCheck, UnitRefFromVariable("libVCUI_gv_pU_HealthWatchUnit[2]"), c_unitPropLife);
    TriggerAddEventUnitProperty(libVCUI_gt_PU_HealthWatchLifeCheck, UnitRefFromVariable("libVCUI_gv_pU_HealthWatchUnit[2]"), c_unitPropShields);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_HealthWatchUnitDies
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_HealthWatchUnitDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() != null))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gf_PM_StopHeroLowHPSound();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_HealthWatchUnitDies_Init () {
    libVCUI_gt_PU_HealthWatchUnitDies = TriggerCreate("libVCUI_gt_PU_HealthWatchUnitDies_Func");
    TriggerEnable(libVCUI_gt_PU_HealthWatchUnitDies, false);
    TriggerAddEventUnitDied(libVCUI_gt_PU_HealthWatchUnitDies, UnitRefFromVariable("libVCUI_gv_pU_HealthWatchUnit[1]"));
    TriggerAddEventUnitDied(libVCUI_gt_PU_HealthWatchUnitDies, UnitRefFromVariable("libVCUI_gv_pU_HealthWatchUnit[2]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_HealthWatchFlash
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_HealthWatchFlash_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto374950CA_n = 3;
    int auto374950CA_i;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libVCMI_gf_GameIsOver() == true) || (UnitIsAlive(libVCUI_gv_pU_HealthWatchFlashingUnit) == false) || (libVCUI_gv_pU_HealthWatchFlashing == true))) {
        return true;
    }

    libVCUI_gv_pU_HealthWatchFlashing = true;
    TriggerExecute(libVCUI_gt_PU_HealthWatchStartSound, true, false);
    libVCUI_gf_PU_HealthWatchCreate();
    for (auto374950CA_i = 1; auto374950CA_i <= auto374950CA_n; auto374950CA_i += 1) {
        if (((libVCMI_gf_GameIsOver() == true) || (libVCUI_gf_PU_HealthWatchUnitBelowThreshold(libVCUI_gv_pU_HealthWatchFlashingUnit) == false) || (UnitIsAlive(libVCUI_gv_pU_HealthWatchFlashingUnit) == false))) {
            break;
        }

        DialogControlFadeTransparency(libVCUI_gv_pU_HealthWatchImage, PlayerGroupSingle(1), 0.25, 30.0);
        Wait(0.3, c_timeGame);
        DialogControlFadeTransparency(libVCUI_gv_pU_HealthWatchImage, PlayerGroupSingle(1), 0.625, 100.0);
        Wait(0.8, c_timeGame);
    }
    DialogControlFadeTransparency(libVCUI_gv_pU_HealthWatchImage, PlayerGroupSingle(1), 0.0, 100.0);
    libVCUI_gv_pU_HealthWatchFlashing = false;
    Wait(2.0, c_timeReal);
    if ((libVCUI_gv_pU_HealthWatchFlashing == false)) {
        libVCUI_gf_PM_StopHeroLowHPSound();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_HealthWatchFlash_Init () {
    libVCUI_gt_PU_HealthWatchFlash = TriggerCreate("libVCUI_gt_PU_HealthWatchFlash_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_HealthWatchStartSound
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_HealthWatchStartSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_LowHealthBegin);
    if ((libVCUI_gv_pU_HealthWatchSoundStart == null)) {
        SoundPlay(SoundLink("UI_LowHealthWarning_Start", -1), PlayerGroupAll(), 100.0, 0.0);
        libVCUI_gv_pU_HealthWatchSoundStart = SoundLastPlayed();
    }

    TriggerExecute(libVCUI_gt_PU_HealthWatchBreathLoop, true, false);
    TriggerExecute(libVCUI_gt_PU_HealthWatchHeartLoop, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_HealthWatchStartSound_Init () {
    libVCUI_gt_PU_HealthWatchStartSound = TriggerCreate("libVCUI_gt_PU_HealthWatchStartSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_HealthWatchHeartLoop
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_HealthWatchHeartLoop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!(((libNtve_gf_PlayerInCinematicMode(1) == false) || (libVCMI_gf_GameIsOver() == true)))) {
        Wait(1.0, c_timeGame);
    }
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    SoundPlay(SoundLink("UI_LowHealthWarning_HeartBeatLoop", -1), PlayerGroupAll(), 100.0, 0.0);
    libVCUI_gv_pU_HealthWatchSoundHeartbeat = SoundLastPlayed();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_HealthWatchHeartLoop_Init () {
    libVCUI_gt_PU_HealthWatchHeartLoop = TriggerCreate("libVCUI_gt_PU_HealthWatchHeartLoop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_HealthWatchBreathLoop
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_HealthWatchBreathLoop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!(((libNtve_gf_PlayerInCinematicMode(1) == false) || (libVCMI_gf_GameIsOver() == true)))) {
        Wait(1.0, c_timeGame);
    }
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    SoundPlay(SoundLink("UI_LowHealthWarning_BreathLoop", -1), PlayerGroupAll(), 100.0, 0.0);
    libVCUI_gv_pU_HealthWatchSoundBreath = SoundLastPlayed();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_HealthWatchBreathLoop_Init () {
    libVCUI_gt_PU_HealthWatchBreathLoop = TriggerCreate("libVCUI_gt_PU_HealthWatchBreathLoop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_GPInit
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_GPInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int autoA310E3DE_ae = 4;
    const int autoA310E3DE_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/GlobalCastingPanel");
    libVCUI_gv_pU_GPHolder = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(libVCUI_gv_pU_GPHolder, c_triggerControlTypePanel, "LotV_SoAMissionUIPanel/SoAPanelTemplate");
    libVCUI_gv_pU_GPPanel = DialogControlLastCreated();
    DialogControlCreateInPanel(DialogControlLastCreated(), c_triggerControlTypeTooltip);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 1, 1);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, -100, -100);
    libVCUI_gv_pU_GPBlackTooltipAnchor = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_GPPanel, c_triggerControlTypeCutscene, "SoACommandCutscene");
    libVCUI_gv_pU_GPCutscene = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsolePanel");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_GPPanel, c_triggerControlTypePanel, "SoAButtonHolder");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_lastFrame, c_triggerControlTypeCommandPanel, "LotV_SoAMissionUIPanel/SoACommandPanelTemplate");
    libVCUI_gv_pU_GPCmdPanel = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (autoA310E3DE_ai >= 0 && lv_buttonIndex <= autoA310E3DE_ae) || (autoA310E3DE_ai < 0 && lv_buttonIndex >= autoA310E3DE_ae) ) ; lv_buttonIndex += autoA310E3DE_ai ) {
        DialogControlHookup(libVCUI_gv_pU_GPCmdPanel, c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        libVCUI_gv_pU_GPCmdButtons[lv_buttonIndex] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemModel(DialogControlLastCreated(), "UI_SOA_ButtonActivate", PlayerGroupAll());
        DialogControlHookup(libVCUI_gv_pU_GPPanel, c_triggerControlTypePanel, "SoAAbilityArrow0" + IntToString(lv_buttonIndex));
        libVCUI_gv_pU_GPAbilityArrows[lv_buttonIndex] = DialogControlLastCreated();
        DialogControlSetPositionRelative(libVCUI_gv_pU_GPAbilityArrows[lv_buttonIndex], PlayerGroupAll(), c_anchorTop, libVCUI_gv_pU_GPCmdButtons[lv_buttonIndex], c_anchorBottom, 0, 15);
    }
    DialogControlHookup(libVCUI_gv_pU_GPPanel, c_triggerControlTypePanel, "SoAEnergyBarFill");
    libVCUI_gv_pU_GPEnergyBar = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_GPEnergyBar, c_triggerControlTypeCutscene, "SoAFillScene");
    libVCUI_gv_pU_GPEnergyBarScene = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_GPPanel, c_triggerControlTypeCutscene, "SoAOverlayCutscene");
    libVCUI_gv_pU_GPEnergyGlassScene = DialogControlLastCreated();
    DialogControlHookup(libVCUI_gv_pU_GPPanel, c_triggerControlTypeLabel, "SoAEnergyLabel");
    libVCUI_gv_pU_GPEnergyLabel = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_GPInit_Init () {
    libVCUI_gt_PU_GPInit = TriggerCreate("libVCUI_gt_PU_GPInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_GPVitalChanges
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_GPVitalChanges_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gf_PU_GPVitalsUpdate();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_GPVitalChanges_Init () {
    libVCUI_gt_PU_GPVitalChanges = TriggerCreate("libVCUI_gt_PU_GPVitalChanges_Func");
    TriggerAddEventUnitProperty(libVCUI_gt_PU_GPVitalChanges, UnitRefFromVariable("libVCUI_gv_pU_GPUnit"), c_unitPropEnergy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_GPBirthFinished
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_GPBirthFinished_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libVCUI_gv_pU_GPCmdPanel, PlayerGroupAll(), true);
    DialogControlSetVisible(libVCUI_gv_pU_GPEnergyLabel, PlayerGroupAll(), true);
    libVCUI_gv_pU_GPWaitingForBirth = false;
    if ((libVCUI_gv_pU_GPEnergyHighlighting == true)) {
        libVCUI_gf_PU_GPEnergyHighlight(true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_GPBirthFinished_Init () {
    libVCUI_gt_PU_GPBirthFinished = TriggerCreate("libVCUI_gt_PU_GPBirthFinished_Func");
    TriggerAddEventCutsceneBookmarkFired(libVCUI_gt_PU_GPBirthFinished, c_cutsceneNone, "2DBirth");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_GPDeathRemove2D
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_GPDeathRemove2D_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libVCUI_gv_pU_GPCmdPanel, PlayerGroupAll(), false);
    DialogControlSetVisible(libVCUI_gv_pU_GPEnergyLabel, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_GPDeathRemove2D_Init () {
    libVCUI_gt_PU_GPDeathRemove2D = TriggerCreate("libVCUI_gt_PU_GPDeathRemove2D_Func");
    TriggerAddEventCutsceneBookmarkFired(libVCUI_gt_PU_GPDeathRemove2D, c_cutsceneNone, "2DDeath");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_TargetingCancelButtonUsed
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_TargetingCancelButtonUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libVCUI_gv_pU_TargetingCancelButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSendEvent(libVCUI_gv_pUC_TargetingEventCancel);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_TargetingCancelButtonUsed_Init () {
    libVCUI_gt_PU_TargetingCancelButtonUsed = TriggerCreate("libVCUI_gt_PU_TargetingCancelButtonUsed_Func");
    TriggerEnable(libVCUI_gt_PU_TargetingCancelButtonUsed, false);
    TriggerAddEventDialogControl(libVCUI_gt_PU_TargetingCancelButtonUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_TimerWindowFlash
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_TimerWindowFlash_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSendAnimationEvent(libVCUI_gv_pU_TimerWindowHighlightFrame, PlayerGroupAll(), "Highlight");
    Wait(libVCUI_gv_pU_TimerWindowHighlightDuration, c_timeReal);
    DialogControlSendAnimationEvent(libVCUI_gv_pU_TimerWindowHighlightFrame, PlayerGroupAll(), "HighlightStop");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_TimerWindowFlash_Init () {
    libVCUI_gt_PU_TimerWindowFlash = TriggerCreate("libVCUI_gt_PU_TimerWindowFlash_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_TimerWindowThresholdCrossed
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_TimerWindowThresholdCrossed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TimerGetRemaining(libVCUI_gv_pU_TimerWindowTimer) <= libVCUI_gv_pU_TimerWindowDangerThreshold) && (libVCUI_gv_pU_TimerWindowInDanger == false)) {
        libVCUI_gv_pU_TimerWindowInDanger = true;
        DialogControlSendAnimationEvent(libVCUI_gv_pU_TimerWindowHighlightFrame, PlayerGroupAll(), "Danger");
    }
    else if ((TimerGetRemaining(libVCUI_gv_pU_TimerWindowTimer) > libVCUI_gv_pU_TimerWindowDangerThreshold) && (libVCUI_gv_pU_TimerWindowInDanger == true)) {
        libVCUI_gv_pU_TimerWindowInDanger = false;
        DialogControlSendAnimationEvent(libVCUI_gv_pU_TimerWindowHighlightFrame, PlayerGroupAll(), "DangerStop");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_TimerWindowThresholdCrossed_Init () {
    libVCUI_gt_PU_TimerWindowThresholdCrossed = TriggerCreate("libVCUI_gt_PU_TimerWindowThresholdCrossed_Func");
    TriggerEnable(libVCUI_gt_PU_TimerWindowThresholdCrossed, false);
    TriggerAddEventTimePeriodic(libVCUI_gt_PU_TimerWindowThresholdCrossed, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_TimerWindowLoadUpdate
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_TimerWindowLoadUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gv_pU_TimerWindowInDanger = false;
    TriggerExecute(libVCUI_gt_PU_TimerWindowThresholdCrossed, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_TimerWindowLoadUpdate_Init () {
    libVCUI_gt_PU_TimerWindowLoadUpdate = TriggerCreate("libVCUI_gt_PU_TimerWindowLoadUpdate_Func");
    TriggerEnable(libVCUI_gt_PU_TimerWindowLoadUpdate, false);
    TriggerAddEventLoadGameDone(libVCUI_gt_PU_TimerWindowLoadUpdate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_EndCredits
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_EndCredits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    soundlink lv_loreCreditsMusic;
    string lv_loreCreditsSoundtrack;
    sound lv_loreMusicSound;
    unit lv_indexUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_loreCreditsMusic = SoundLink("EditorDefaultSound", -1);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    libVCUI_gv_pU_EndCreditFinished = false;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZVoid_Credits_Static", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCreditsPanel, true);
    TriggerEnable(libVCUI_gt_PU_EndCreditsEnds, true);
    while (!((libVCUI_gv_pU_EndCreditFinished == true))) {
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_EndCredits_Init () {
    libVCUI_gt_PU_EndCredits = TriggerCreate("libVCUI_gt_PU_EndCredits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_EndCreditsEnds
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_EndCreditsEnds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gv_pU_EndCreditFinished = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_EndCreditsEnds_Init () {
    libVCUI_gt_PU_EndCreditsEnds = TriggerCreate("libVCUI_gt_PU_EndCreditsEnds_Func");
    TriggerEnable(libVCUI_gt_PU_EndCreditsEnds, false);
    TriggerAddEventGameCreditsFinished(libVCUI_gt_PU_EndCreditsEnds, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_LoreCreditsTimerUpdate
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_LoreCreditsTimerUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVCUI_gv_pU_LoreCreditsItemDisplayCounter < libVCUI_gv_pU_LoreCreditsMaxItems)) {
        libVCUI_gv_pU_LoreCreditsItemDisplayCounter = (libVCUI_gv_pU_LoreCreditsItemDisplayCounter + 1);
        libNtve_gf_SetDialogItemImage(libVCUI_gv_pU_LoreCreditsImage, UserDataGetImagePath("LoreCredits", UserDataInstance("LoreCredits", libVCUI_gv_pU_LoreCreditsItemDisplayCounter), "Picture", 1), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libVCUI_gv_pU_LoreCreditsText, UserDataGetText("LoreCredits", UserDataInstance("LoreCredits", libVCUI_gv_pU_LoreCreditsItemDisplayCounter), "Description", 1), PlayerGroupAll());
        DialogControlFadeTransparency(libVCUI_gv_pU_LoreCreditsImage, PlayerGroupAll(), 2.0, 0.0);
        DialogControlFadeTransparency(libVCUI_gv_pU_LoreCreditsText, PlayerGroupAll(), 2.0, 0.0);
        Wait(15.0, c_timeReal);
        DialogControlFadeTransparency(libVCUI_gv_pU_LoreCreditsImage, PlayerGroupAll(), 2.0, 100.0);
        DialogControlFadeTransparency(libVCUI_gv_pU_LoreCreditsText, PlayerGroupAll(), 2.0, 100.0);
        TimerStart(libVCUI_gv_pU_LoreCreditsTimer, 4.0, false, c_timeReal);
    }
    else {
        libVCUI_gv_pU_LoreCreditsFinished = true;
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_LoreCreditsTimerUpdate_Init () {
    libVCUI_gt_PU_LoreCreditsTimerUpdate = TriggerCreate("libVCUI_gt_PU_LoreCreditsTimerUpdate_Func");
    TriggerEnable(libVCUI_gt_PU_LoreCreditsTimerUpdate, false);
    TriggerAddEventTimer(libVCUI_gt_PU_LoreCreditsTimerUpdate, libVCUI_gv_pU_LoreCreditsTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_LoreCreditsSkip
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_LoreCreditsSkip_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libVCUI_gt_PU_LoreCreditsTimerUpdate);
    TriggerEnable(libVCUI_gt_PU_LoreCreditsTimerUpdate, false);
    DialogControlFadeTransparency(libVCUI_gv_pU_LoreCreditsImage, PlayerGroupAll(), 2.0, 100.0);
    DialogControlFadeTransparency(libVCUI_gv_pU_LoreCreditsText, PlayerGroupAll(), 2.0, 100.0);
    libVCUI_gv_pU_LoreCreditsFinished = true;
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_LoreCreditsSkip_Init () {
    libVCUI_gt_PU_LoreCreditsSkip = TriggerCreate("libVCUI_gt_PU_LoreCreditsSkip_Func");
    TriggerEnable(libVCUI_gt_PU_LoreCreditsSkip, false);
    TriggerAddEventKeyPressed(libVCUI_gt_PU_LoreCreditsSkip, c_playerAny, c_keyEscape, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_VictoryContinueTerran
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_VictoryContinueTerran_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libVCUI_gt_PU_VictoryContinueTerran, false);
    TriggerEnable(libVCUI_gt_PU_VictoryPlayAgainTerran, false);
    libVoiC_gf_CinematicFade(false, 1.0, Color(0.00, 0.00, 0.00), true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeVictoryPanel, false);
    TriggerSendEvent(libVCUI_gv_pUC_VictoryEventClosed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_VictoryContinueTerran_Init () {
    libVCUI_gt_PU_VictoryContinueTerran = TriggerCreate("libVCUI_gt_PU_VictoryContinueTerran_Func");
    TriggerEnable(libVCUI_gt_PU_VictoryContinueTerran, false);
    TriggerAddEventVictoryPanelExit(libVCUI_gt_PU_VictoryContinueTerran, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_VictoryPlayAgainTerran
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_VictoryPlayAgainTerran_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_simulation;
    int lv_difficulty;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_simulation = true;
    lv_difficulty = 2;

    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_PrepareForMission(libVoiC_gf_CurrentMap(), libVoiC_gv_pCX_IsSimulation, true, EventVictoryPanelDifficultySelected());
    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_VictoryPlayAgainTerran_Init () {
    libVCUI_gt_PU_VictoryPlayAgainTerran = TriggerCreate("libVCUI_gt_PU_VictoryPlayAgainTerran_Func");
    TriggerEnable(libVCUI_gt_PU_VictoryPlayAgainTerran, false);
    TriggerAddEventVictoryPanelPlayMissionAgain(libVCUI_gt_PU_VictoryPlayAgainTerran, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_VictoryContinue
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_VictoryContinue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libVCUI_gv_pU_VSBtnContinue))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(libVCUI_gv_pU_VSBtnContinue, PlayerGroupAll(), false);
    DialogControlSetEnabled(libVCUI_gv_pU_VSBtnPlayAgain, PlayerGroupAll(), false);
    TriggerEnable(libVCUI_gt_PU_VictoryContinue, false);
    TriggerEnable(libVCUI_gt_PU_VictoryPlayAgain, false);
    if ((libVCUI_gv_pU_VictoryMusicOverride == true)) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_Silence", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

    libVoiC_gf_CinematicFade(false, 1.0, Color(0.00, 0.00, 0.00), true);
    DialogControlSetVisible(libVCUI_gv_pU_VSMainPanel, PlayerGroupAll(), false);
    TriggerSendEvent(libVCUI_gv_pUC_VictoryEventClosed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_VictoryContinue_Init () {
    libVCUI_gt_PU_VictoryContinue = TriggerCreate("libVCUI_gt_PU_VictoryContinue_Func");
    TriggerEnable(libVCUI_gt_PU_VictoryContinue, false);
    TriggerAddEventDialogControl(libVCUI_gt_PU_VictoryContinue, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_VictoryPlayAgain
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_VictoryPlayAgain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_simulation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_simulation = true;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libVCUI_gv_pU_VSBtnPlayAgain))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gf_PU_VSDisplayRestartDialog();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_VictoryPlayAgain_Init () {
    libVCUI_gt_PU_VictoryPlayAgain = TriggerCreate("libVCUI_gt_PU_VictoryPlayAgain_Func");
    TriggerEnable(libVCUI_gt_PU_VictoryPlayAgain, false);
    TriggerAddEventDialogControl(libVCUI_gt_PU_VictoryPlayAgain, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_VictoryRestartCancel
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_VictoryRestartCancel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libVCUI_gv_pU_VSRestartCancelButton))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libVCUI_gt_PU_VictoryRestartCancel, false);
    TriggerEnable(libVCUI_gt_PU_VictoryRestartRestart, false);
    DialogControlSetVisible(libVCUI_gv_pU_VSMainPanel, PlayerGroupAll(), true);
    DialogControlSetVisible(libVCUI_gv_pU_VSRestartPanel, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_VictoryRestartCancel_Init () {
    libVCUI_gt_PU_VictoryRestartCancel = TriggerCreate("libVCUI_gt_PU_VictoryRestartCancel_Func");
    TriggerEnable(libVCUI_gt_PU_VictoryRestartCancel, false);
    TriggerAddEventDialogControl(libVCUI_gt_PU_VictoryRestartCancel, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_VictoryRestartRestart
//--------------------------------------------------------------------------------------------------
bool libVCUI_gt_PU_VictoryRestartRestart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_difficulty;

    // Automatic Variable Declarations
    int auto119EE7F2_val;

    // Variable Initialization
    lv_difficulty = 2;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libVCUI_gv_pU_VSRestartRestartButton))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libVCUI_gt_PU_VictoryRestartCancel, false);
    TriggerEnable(libVCUI_gt_PU_VictoryRestartRestart, false);
    auto119EE7F2_val = DialogControlGetSelectedItem(libVCUI_gv_pU_VSRestartDifficultyPulldown, 1);
    if (auto119EE7F2_val == libVoiC_gf_PC_DifficultyIndex(1)) {
        lv_difficulty = 1;
    }
    else if (auto119EE7F2_val == libVoiC_gf_PC_DifficultyIndex(2)) {
        lv_difficulty = 2;
    }
    else if (auto119EE7F2_val == libVoiC_gf_PC_DifficultyIndex(3)) {
        lv_difficulty = 3;
    }
    else if (auto119EE7F2_val == libVoiC_gf_PC_DifficultyIndex(4)) {
        lv_difficulty = 4;
    }
    else {
        lv_difficulty = PlayerDifficulty(1);
    }
    libVoiC_gf_PrepareForMission(libVoiC_gf_CurrentMap(), libVoiC_gv_pCX_IsSimulation, true, lv_difficulty);
    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCUI_gt_PU_VictoryRestartRestart_Init () {
    libVCUI_gt_PU_VictoryRestartRestart = TriggerCreate("libVCUI_gt_PU_VictoryRestartRestart_Func");
    TriggerEnable(libVCUI_gt_PU_VictoryRestartRestart, false);
    TriggerAddEventDialogControl(libVCUI_gt_PU_VictoryRestartRestart, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

void libVCUI_InitTriggers () {
    libVCUI_gt_PU_DebugArmy_Init();
    libVCUI_gt_PU_DebugArmyClosed_Init();
    libVCUI_gt_PU_DebugSoACheat_Init();
    libVCUI_gt_PU_DebugSoAClosed_Init();
    libVCUI_gt_PU_DebugResetGPScene_Init();
    libVCUI_gt_PU_DebugTogGPVis_Init();
    libVCUI_gt_PU_DebugSoATutorial_Init();
    libVCUI_gt_PU_DebugScreenMode_Init();
    libVCUI_gt_PU_DebugCinematicMode_Init();
    libVCUI_gt_PU_DebugHighlightAbility_Init();
    libVCUI_gt_PU_DebugAchievement_Init();
    libVCUI_gt_PU_ArmyFactionSelected_Init();
    libVCUI_gt_PU_ArmyCategorySelected_Init();
    libVCUI_gt_PU_ArmyCategoryHoverStart_Init();
    libVCUI_gt_PU_ArmyCategoryHoverEnd_Init();
    libVCUI_gt_PU_ArmyFactionHoverStart_Init();
    libVCUI_gt_PU_ArmyFactionHoverEnd_Init();
    libVCUI_gt_PU_ArmyConfirm_Init();
    libVCUI_gt_PU_ArmyCutsceneReady_Init();
    libVCUI_gt_PU_ArmyRotateUnitStart_Init();
    libVCUI_gt_PU_ArmyRotateUnit_Init();
    libVCUI_gt_PU_ArmyRotateUnitEnd_Init();
    libVCUI_gt_PU_ArmyTutorial_Init();
    libVCUI_gt_PU_ArmyEntranceReminders_Init();
    libVCUI_gt_PU_ArmySelectionReminders_Init();
    libVCUI_gt_PU_BottomBarInit_Init();
    libVCUI_gt_PU_BottomBarButtonClicked_Init();
    libVCUI_gt_PU_ArchivesCreate_Init();
    libVCUI_gt_PU_ArchivesSelectionChanged_Init();
    libVCUI_gt_PU_ArchivesMissionPlayClicked_Init();
    libVCUI_gt_PU_ArchivesScenePlayClicked_Init();
    libVCUI_gt_PU_ArchivesCloseClicked_Init();
    libVCUI_gt_PU_ArchivesSynced_Init();
    libVCUI_gt_PU_MissionTerranLaunchClicked_Init();
    libVCUI_gt_PU_MissionTerranPitchPlayStop_Init();
    libVCUI_gt_PU_MissionTerranQuitOKClicked_Init();
    libVCUI_gt_PU_MissionTerranQuitCancelClicked_Init();
    libVCUI_gt_PU_MissionTerranQuitClicked_Init();
    libVCUI_gt_PU_MissionCreate_Init();
    libVCUI_gt_PU_MissionCreate2D_Init();
    libVCUI_gt_PU_MissionCreateZerg_Init();
    libVCUI_gt_PU_MissionVignetteClicked_Init();
    libVCUI_gt_PU_MissionQuitOKClicked_Init();
    libVCUI_gt_PU_MissionQuitCancelClicked_Init();
    libVCUI_gt_PU_MissionLaunchClicked_Init();
    libVCUI_gt_PU_MissionBackClicked_Init();
    libVCUI_gt_PU_MissionQuitClicked_Init();
    libVCUI_gt_PU_MissionPitchPlayClicked_Init();
    libVCUI_gt_PU_MissionPitchStopClicked_Init();
    libVCUI_gt_PU_MissionArmyClicked_Init();
    libVCUI_gt_PU_MissionShipClicked_Init();
    libVCUI_gt_PU_MissionBirthCallouts_Init();
    libVCUI_gt_PU_MissionWaitForSelection_Init();
    libVCUI_gt_PU_MissionAiur05UIElementOff_Init();
    libVCUI_gt_PU_MissionAiur05UIPortraitChange_Init();
    libVCUI_gt_PU_SoATutorial_Init();
    libVCUI_gt_PU_SoABackClicked_Init();
    libVCUI_gt_PU_SoAResetClicked_Init();
    libVCUI_gt_PU_SoAInventoryItemClicked_Init();
    libVCUI_gt_PU_SoAInventoryHoverStart_Init();
    libVCUI_gt_PU_SoAInventoryHoverStop_Init();
    libVCUI_gt_PU_SoACutsceneUIFinishedIntro_Init();
    libVCUI_gt_PU_SoAMeterPlusOrMinusClicked_Init();
    libVCUI_gt_PU_SoAFadeOutComplete_Init();
    libVCUI_gt_PU_StarmapInit_Init();
    libVCUI_gt_PU_StarmapBackSelected_Init();
    libVCUI_gt_PU_StarmapQuitSelected_Init();
    libVCUI_gt_PU_StarmapCustomDialogDismiss_Init();
    libVCUI_gt_PU_StarmapLaunchSelected_Init();
    libVCUI_gt_PU_StarmapPlanetClicked_Init();
    libVCUI_gt_PU_StarmapFadeInStarmapItems_Init();
    libVCUI_gt_PU_StarmapFilterSwap_Init();
    libVCUI_gt_PU_StarmapPlayPitch_Init();
    libVCUI_gt_PU_StarmapStopPitch_Init();
    libVCUI_gt_PU_StarmapPlanetHighlightOn_Init();
    libVCUI_gt_PU_StarmapPlanetHighlightOff_Init();
    libVCUI_gt_PU_ArtanisAnim_Init();
    libVCUI_gt_PU_ArtanisAnimStop_Init();
    libVCUI_gt_PU_FlashArmyButtonHelpTip_Init();
    libVCUI_gt_PU_ArmyButtonUsed_Init();
    libVCUI_gt_PU_ArmyButtonFlashingOff_Init();
    libVCUI_gt_PS_ArmyButtonMissionInit_Init();
    libVCUI_gt_PU_BossBarFocusOnTarget_Init();
    libVCUI_gt_PU_BB_BossHPChanged_Init();
    libVCUI_gt_PU_BB_LoadUpdate_Init();
    libVCUI_gt_PU_VoidHeroDebugSetWidth_Init();
    libVCUI_gt_PU_VoidHeroDebugSetHeightL_Init();
    libVCUI_gt_PU_VoidHeroDebugSetHeightS_Init();
    libVCUI_gt_PU_VoidHeroDebugSetHeightE_Init();
    libVCUI_gt_PU_HeroPanelUpdate_Init();
    libVCUI_gt_PU_VoidHeroUIUnitDamaged_Init();
    libVCUI_gt_ZS_SwarmHeroUIUnitVitalChange_Init();
    libVCUI_gt_PU_VoidHeroUIMouseHoverText_Init();
    libVCUI_gt_PU_VoidHeroUILoadUpdate_Init();
    libVCUI_gt_PU_VoidHeroUIHandleEpilogue02RaceSwap_Init();
    libVCUI_gt_PU_HealthWatchLifeCheck_Init();
    libVCUI_gt_PU_HealthWatchUnitDies_Init();
    libVCUI_gt_PU_HealthWatchFlash_Init();
    libVCUI_gt_PU_HealthWatchStartSound_Init();
    libVCUI_gt_PU_HealthWatchHeartLoop_Init();
    libVCUI_gt_PU_HealthWatchBreathLoop_Init();
    libVCUI_gt_PU_GPInit_Init();
    libVCUI_gt_PU_GPVitalChanges_Init();
    libVCUI_gt_PU_GPBirthFinished_Init();
    libVCUI_gt_PU_GPDeathRemove2D_Init();
    libVCUI_gt_PU_TargetingCancelButtonUsed_Init();
    libVCUI_gt_PU_TimerWindowFlash_Init();
    libVCUI_gt_PU_TimerWindowThresholdCrossed_Init();
    libVCUI_gt_PU_TimerWindowLoadUpdate_Init();
    libVCUI_gt_PU_EndCredits_Init();
    libVCUI_gt_PU_EndCreditsEnds_Init();
    libVCUI_gt_PU_LoreCreditsTimerUpdate_Init();
    libVCUI_gt_PU_LoreCreditsSkip_Init();
    libVCUI_gt_PU_VictoryContinueTerran_Init();
    libVCUI_gt_PU_VictoryPlayAgainTerran_Init();
    libVCUI_gt_PU_VictoryContinue_Init();
    libVCUI_gt_PU_VictoryPlayAgain_Init();
    libVCUI_gt_PU_VictoryRestartCancel_Init();
    libVCUI_gt_PU_VictoryRestartRestart_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libVCUI_InitLib_completed = false;

void libVCUI_InitLib () {
    if (libVCUI_InitLib_completed) {
        return;
    }

    libVCUI_InitLib_completed = true;

    libVCUI_InitLibraries();
    libVCUI_InitVariables();
    libVCUI_InitTriggers();
}

include "TriggerLibs/VoidCampaignLib"
include "TriggerLibs/VoidCampaignMissionLib"
include "TriggerLibs/VoidCampaignStoryLib"

