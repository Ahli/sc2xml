include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/VoidCampaignMissionLib_h"
include "TriggerLibs/VoidCampaignUILib_h"

include "TriggerLibs/VoidCampaignLib_h"

//--------------------------------------------------------------------------------------------------
// Library: Campaign (Void)
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libVoiC_InitLibraries () {
    libNtve_InitVariables();
    libLbty_InitVariables();
    libVCMI_InitVariables();
    libVCUI_InitVariables();
}

// Variable Initialization
bool libVoiC_InitVariables_completed = false;

void libVoiC_InitVariables () {
    int init_i;
    int init_j;

    if (libVoiC_InitVariables_completed) {
        return;
    }

    libVoiC_InitVariables_completed = true;

    libVoiC_gv_pC_DebugCampaignTechDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 20; init_i += 1) {
        libVoiC_gv_pC_DebugCampaignTechArmyCategoryCheck[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    libVoiC_gv_pC_DebugCampaignTechOK = c_invalidDialogControlId;
    libVoiC_gv_pC_DebugCampaignTechCancel = c_invalidDialogControlId;
    libVoiC_gv_pC_DebugCampaignTechSwitchToSoa = c_invalidDialogControlId;
    libVoiC_gv_pC_DebugCampaignTechSoADialog = c_invalidDialogId;
    libVoiC_gv_pC_DebugCampaignTechSoAOK = c_invalidDialogControlId;
    libVoiC_gv_pC_DebugCampaignTechSoACancel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            libVoiC_gv_pC_DebugCampaignTechSoAPowerCheck[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    libVoiC_gv_pC_DebugCampaignTechRandomizeTechButton = c_invalidDialogControlId;
    libVoiC_gv_pC_DebugProgressDialog = c_invalidDialogId;
    libVoiC_gv_pC_DebugProgressButtonOK = c_invalidDialogControlId;
    libVoiC_gv_pC_DebugProgressButtonCancel = c_invalidDialogControlId;
    libVoiC_gv_pC_DebugProgressButtonReset = c_invalidDialogControlId;
    libVoiC_gv_pC_DebugProgressButtonDirectSelect = c_invalidDialogControlId;
    libVoiC_gv_pC_DebugProgressLabelInfo = c_invalidDialogControlId;
    libVoiC_gv_pC_DebugProgressLabelExpeditionReq = c_invalidDialogControlId;
    libVoiC_gv_pC_DebugProgressLabelCharReq = c_invalidDialogControlId;
    libVoiC_gv_pC_DebugProgressLabelPurifierReq = c_invalidDialogControlId;
    libVoiC_gv_pC_DebugProgressLabelHybridReq = c_invalidDialogControlId;
    libVoiC_gv_pC_DebugProgressLabelZerusReq = c_invalidDialogControlId;
    libVoiC_gv_zS_DebugProgressLabelValerianReq = c_invalidDialogControlId;
    libVoiC_gv_zS_DebugProgressLabelValerianReq2 = c_invalidDialogControlId;
    libVoiC_gv_zS_DebugProgressLabelKohalReq = c_invalidDialogControlId;
    libVoiC_gv_pC_DebugProgressBonusObjectiveLevel = libVoiC_ge_DebugProgressBonusObjectiveAmount_HalfObjectives;
    libVoiC_gv_pC_DebugProgressButtonNoObjectives = c_invalidDialogControlId;
    libVoiC_gv_pC_DebugProgressButtonHalfObjectives = c_invalidDialogControlId;
    libVoiC_gv_pC_DebugProgressButtonAllObjectives = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        libVoiC_gv_pC_DebugCutscenes[init_i] = c_cutsceneNone;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        libVoiC_gv_pC_DebugCutsceneNames[init_i] = "";
    }
    libVoiC_gv_pC_DebugWatchBookmark = "";
    libVoiC_gv_pC_DebugCutsceneCin = true;
    libVoiC_gv_pCX_CampaignDifficulty = 2;
    for (init_i = 0; init_i <= 50; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            libVoiC_gv_pC_EventParameter[init_i][init_j] = "";
        }
    }
    libVoiC_gv_pC_CurrentCampaignCutscene = c_cutsceneNone;
    libVoiC_gv_pC_CampaignCutsceneDialog = c_invalidDialogId;
    libVoiC_gv_pC_SceneStatEvent = -1;
    libVoiC_gv_pC_MergedUnitsLabel = c_invalidDialogControlId;
    libVoiC_gv_pC_MergedUnitsImage = c_invalidDialogControlId;
    libVoiC_gv_pC_ArchonUnitsImage = c_invalidDialogControlId;
    libVoiC_gv_pC_ArchiveLotVBankName = "PArchive";
    libVoiC_gv_pC_ArchiveEpilogueBankName = "EpilogueArchive";
    libVoiC_gv_pC_CampaignLotVBankName = "PCampaign";
    libVoiC_gv_pC_CampaignEpilogueBankName = "SC2Epilogue";
    libVoiC_gv_pC_StatEventLastCampaign = -1;
    libVoiC_gv_pC_StatSoATimeEnergyCapped = TimerCreate();
    libVoiC_gv_pC_WorldCoverDlg = c_invalidDialogId;
    libVoiC_gv__FadeDialog = c_invalidDialogId;
    libVoiC_gv__FadeImage = c_invalidDialogControlId;
}

// Presets
// Functions
bool libVoiC_gf_CampaignDebugModeIsOn (string lp_mode) {
    // Automatic Variable Declarations
    // Implementation
    return GameIsDebugOptionSet((lp_mode), 1);
}

void libVoiC_gf_PC_DebugCampaignTechCreateDialog () {
    // Variable Declarations
    int lv_dlgBg;
    int lv_lastItem;
    int lv_frame;
    int lv_x;
    int lv_y;
    string lv_indexArmyCategory;
    string lv_indexArmyUnit;
    int lv_unitIndex;
    string lv_indexMission;

    // Automatic Variable Declarations
    int auto13D0B222_ae;
    int auto13D0B222_ai;
    int autoAC56682B_ae;
    int autoAC56682B_ai;

    // Variable Initialization
    lv_dlgBg = c_invalidDialogControlId;
    lv_lastItem = c_invalidDialogControlId;
    lv_frame = c_invalidDialogControlId;

    // Implementation
    if ((libVoiC_gv_pC_DebugCampaignTechDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(1200, 1000, c_anchorCenter, 0, 0, true);
    libVoiC_gv_pC_DebugCampaignTechDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    lv_dlgBg = DialogControlLastCreated();
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0,0,0), PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    lv_y = 50;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1000, 50, c_anchorTopLeft, 50, lv_y, StringExternal("Param/Value/lib_VoiC_1E7C2401"), Color(100.00, 50.20, 25.10), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize32Bold", PlayerGroupAll());
    lv_y += 50;
    libVoiC_gv_pC_DebugCampaignTechArmyCatCount = 0;
    auto13D0B222_ae = UserDataInstanceCount("Maps");
    auto13D0B222_ai = 1;
    while (auto13D0B222_ai <= auto13D0B222_ae) {
        lv_indexMission = libVoiC_gf_PC_MapDataFromUserDataInstance(UserDataInstance("Maps", auto13D0B222_ai));
        if (lv_indexMission != null && CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_indexArmyCategory = libVoiC_gf_MissionArmyCategoryUnlocked(lv_indexMission);
            if ((lv_indexArmyCategory != null) && (libVoiC_gf_PC_ArmyCategoryUsedInUI(lv_indexArmyCategory) == true) && (libVoiC_gf_PC_DebugCampaignTechIsDupe(lv_indexMission, lv_indexArmyCategory) == false)) {
                libVoiC_gv_pC_DebugCampaignTechArmyCatCount += 1;
                libVoiC_gv_pC_DebugCampaignTechArmyCategory[libVoiC_gv_pC_DebugCampaignTechArmyCatCount] = lv_indexArmyCategory;
                if ((ModI(libVoiC_gv_pC_DebugCampaignTechArmyCatCount, 2) == 1)) {
                    lv_x = 50;
                }
                else {
                    lv_x += 180;
                }
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 500, 100, c_anchorTopLeft, lv_x, lv_y, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
                lv_frame = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 60, c_anchorTopLeft, lv_x, lv_y, libVoiC_gf_PC_ArmyCategoryName(lv_indexArmyCategory), Color(100.00, 100.00, 100.00), false, 2.0);
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
                TextExpressionSetToken("Param/Expression/lib_VoiC_9214BE9C", "B", StringToText((libVoiC_gf_PC_ArmyCategoryUnitType(lv_indexArmyCategory))));
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_VoiC_9214BE9C"), PlayerGroupAll());
                lv_lastItem = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 0, lv_y, StringToText(""), true);
                libVoiC_gv_pC_DebugCampaignTechArmyCategoryCheck[libVoiC_gv_pC_DebugCampaignTechArmyCatCount] = DialogControlLastCreated();
                TextExpressionSetToken("Param/Expression/lib_VoiC_1844DDD4", "B", StringToText((libVoiC_gf_PC_ArmyCategoryUnitType(lv_indexArmyCategory))));
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_VoiC_1844DDD4"), PlayerGroupAll());
                DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lv_lastItem, c_anchorBottom, 0, -20);
                lv_x += 120;
                lv_unitIndex = 1;
                autoAC56682B_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexArmyCategory, "ArmyUnitArray", 1);
                autoAC56682B_ai = 1;
                while (autoAC56682B_ai <= autoAC56682B_ae) {
                    lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexArmyCategory, "ArmyUnitArray["+IntToString(autoAC56682B_ai-1)+"]", 1);
                    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 60, c_anchorTopLeft, lv_x, lv_y, libVoiC_gf_StoryArmyUnitName(lv_indexArmyUnit), Color(100.00, 100.00, 100.00), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
                    TextExpressionSetToken("Param/Expression/lib_VoiC_C4273795", "A", libVoiC_gf_PC_ArmyUnitDescription(lv_indexArmyUnit));
                    TextExpressionSetToken("Param/Expression/lib_VoiC_C4273795", "B", StringToText((libVoiC_gf_PC_StoryArmyUnitUnitType(lv_indexArmyUnit))));
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_VoiC_C4273795"), PlayerGroupAll());
                    lv_lastItem = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 0, lv_y, StringToText(""), true);
                    libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[libVoiC_gv_pC_DebugCampaignTechArmyCatCount][lv_unitIndex] = DialogControlLastCreated();
                    TextExpressionSetToken("Param/Expression/lib_VoiC_B0ABD7F6", "A", libVoiC_gf_PC_ArmyUnitDescription(lv_indexArmyUnit));
                    TextExpressionSetToken("Param/Expression/lib_VoiC_B0ABD7F6", "B", StringToText((libVoiC_gf_PC_StoryArmyUnitUnitType(lv_indexArmyUnit))));
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_VoiC_B0ABD7F6"), PlayerGroupAll());
                    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lv_lastItem, c_anchorBottom, 0, -20);
                    lv_x += 120;
                    lv_unitIndex += 1;
                    autoAC56682B_ai = autoAC56682B_ai + 1;
                }
                lv_x += (150 * (3 - lv_unitIndex));
                if ((ModI(libVoiC_gv_pC_DebugCampaignTechArmyCatCount, 2) == 0)) {
                    lv_y += 125;
                }

            }

        }
        auto13D0B222_ai = auto13D0B222_ai + 1;
    }
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorBottomRight, 200, 50, StringToText(""), StringExternal("Param/Value/lib_VoiC_447CE194"), "");
    libVoiC_gv_pC_DebugCampaignTechOK = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorBottomRight, 50, 50, StringToText(""), StringExternal("Param/Value/lib_VoiC_8D985BFF"), "");
    libVoiC_gv_pC_DebugCampaignTechCancel = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorBottomLeft, 50, 50, StringExternal("Param/Value/lib_VoiC_C4E15843"), StringExternal("Param/Value/lib_VoiC_F5A62B9A"), "");
    libVoiC_gv_pC_DebugCampaignTechRandomizeTechButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorTopRight, 50, 50, StringToText(""), StringExternal("Param/Value/lib_VoiC_39E8A069"), "");
    libVoiC_gv_pC_DebugCampaignTechSwitchToSoa = DialogControlLastCreated();
    DialogSetSize(DialogLastCreated(), 1150, (lv_y + 150));
    DialogControlSetSize(lv_dlgBg, PlayerGroupAll(), (DialogGetWidth(libVoiC_gv_pC_DebugCampaignTechDialog) - 60), (DialogGetHeight(libVoiC_gv_pC_DebugCampaignTechDialog) - 60));
}

void libVoiC_gf_PC_DebugCampaignTechCreateSoADialog () {
    // Variable Declarations
    string lv_indexPowerType;
    string lv_indexPower;
    int lv_lastItem;
    int lv_index;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    int autoC48AB1B0_ai;
    int autoC48AB1B0_ae;
    int auto640166B0_ai;
    int auto640166B0_ae;

    // Variable Initialization
    lv_lastItem = c_invalidDialogControlId;

    // Implementation
    if ((libVoiC_gv_pC_DebugCampaignTechSoADialog != c_invalidDialogId)) {
        return ;
    }

    TriggerEnable(libVoiC_gt_PC_DebugCampaignTechSoAOK, true);
    TriggerEnable(libVoiC_gt_PC_DebugCampaignTechSoACancel, true);
    TriggerEnable(libVoiC_gt_PC_DebugCampaignTechSoAPerkClicked, true);
    DialogSetVisible(libVoiC_gv_pC_DebugCampaignTechDialog, PlayerGroupAll(), false);
    if ((libVoiC_gv_pC_DebugCampaignTechSoADialog != c_invalidDialogId)) {
        DialogDestroy(libVoiC_gv_pC_DebugCampaignTechSoADialog);
        libVoiC_gv_pC_DebugCampaignTechSoADialog = c_invalidDialogId;
    }

    DialogCreate(1200, 1100, c_anchorCenter, 0, 0, true);
    libVoiC_gv_pC_DebugCampaignTechSoADialog = DialogLastCreated();
    lv_y = 50;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 600, 50, c_anchorTopLeft, 50, lv_y, StringExternal("Param/Value/lib_VoiC_55299EE6"), Color(100.00, 100.00, 100.00), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize24", PlayerGroupAll());
    lv_y += 50;
    libVoiC_gv_pC_DebugCampaignTechSoATypeCount = 0;
    autoC48AB1B0_ai = 1;
    autoC48AB1B0_ae = UserDataInstanceCount("CampaignPerkGroup")+1;
    while (autoC48AB1B0_ai < autoC48AB1B0_ae) {
        lv_indexPowerType = UserDataInstance("CampaignPerkGroup", autoC48AB1B0_ai);
        autoC48AB1B0_ai = autoC48AB1B0_ai+1;
        libVoiC_gv_pC_DebugCampaignTechSoATypeCount += 1;
        libVoiC_gv_pC_DebugCampaignTechSoAPowerType[libVoiC_gv_pC_DebugCampaignTechSoATypeCount] = lv_indexPowerType;
        lv_x = 50;
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 60, c_anchorTopLeft, lv_x, lv_y, libVoiC_gf_PC_PerkGroupName(lv_indexPowerType), Color(94.90, 94.90, 0.00), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize20", PlayerGroupAll());
        lv_y += 40;
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 850, 100, c_anchorTopLeft, lv_x, lv_y, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
        lv_lastItem = DialogControlLastCreated();
        lv_index = 1;
        auto640166B0_ai = 1;
        auto640166B0_ae = UserDataInstanceCount("CampaignPerk")+1;
        while (auto640166B0_ai < auto640166B0_ae) {    
            lv_indexPower = UserDataInstance("CampaignPerk", auto640166B0_ai);
            auto640166B0_ai = auto640166B0_ai+1;
            if( libVoiC_gf_PC_PerkGroupOfPerk(lv_indexPower) == lv_indexPowerType ) {
                if ((libVoiC_gf_PC_PerkUISlot(lv_indexPower) == 0)) {
                    continue;
                }

                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 220, 60, c_anchorTopLeft, lv_x, lv_y, libVoiC_gf_PC_PerkName(lv_indexPower), Color(100.00, 100.00, 100.00), false, 2.0);
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), libVCUI_gf_PU_SoAPerkTooltip(lv_indexPower), PlayerGroupAll());
                lv_lastItem = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 0, lv_y, StringToText(""), false);
                libVoiC_gv_pC_DebugCampaignTechSoAPowerCheck[libVoiC_gv_pC_DebugCampaignTechSoATypeCount][lv_index] = DialogControlLastCreated();
                DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lv_lastItem, c_anchorBottom, 0, -20);
                lv_x += 320;
                lv_index += 1;
            }    
        }
        lv_y += 100;

    }
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorBottomRight, 200, 50, StringToText(""), StringExternal("Param/Value/lib_VoiC_42542011"), "");
    libVoiC_gv_pC_DebugCampaignTechSoAOK = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorBottomRight, 50, 50, StringToText(""), StringExternal("Param/Value/lib_VoiC_EED2BB5F"), "");
    libVoiC_gv_pC_DebugCampaignTechSoACancel = DialogControlLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libVoiC_gf_PC_DebugCampaignTechUpdateSoADialog();
    while (!((libVoiC_gv_pC_DebugCampaignTechSoADialog == c_invalidDialogId))) {
        Wait(0.0625, c_timeReal);
    }
    TriggerEnable(libVoiC_gt_PC_DebugCampaignTechSoAOK, false);
    TriggerEnable(libVoiC_gt_PC_DebugCampaignTechSoACancel, false);
    TriggerEnable(libVoiC_gt_PC_DebugCampaignTechSoAPerkClicked, false);
    DialogSetVisible(libVoiC_gv_pC_DebugCampaignTechDialog, PlayerGroupAll(), true);
}

void libVoiC_gf_PC_DebugCampaignTechUpdateDialog () {
    // Variable Declarations
    string lv_indexCategory;
    int lv_categoryIndex;

    // Automatic Variable Declarations
    int autoF0150B0C_ae;
    const int autoF0150B0C_ai = 1;

    // Variable Initialization

    // Implementation
    autoF0150B0C_ae = libVoiC_gv_pC_DebugCampaignTechArmyCatCount;
    lv_categoryIndex = 1;
    for ( ; ( (autoF0150B0C_ai >= 0 && lv_categoryIndex <= autoF0150B0C_ae) || (autoF0150B0C_ai < 0 && lv_categoryIndex >= autoF0150B0C_ae) ) ; lv_categoryIndex += autoF0150B0C_ai ) {
        lv_indexCategory = libVoiC_gv_pC_DebugCampaignTechArmyCategory[lv_categoryIndex];
        if ((libVoiC_gf_ArmyCategoryStateCheck(lv_indexCategory, c_armyCategoryStateUnlocked) == true)) {
            if ((libVoiC_gf_PC_StoryArmyUnitState(libVoiC_gf_StoryArmyUnitInCategory(lv_indexCategory, 1)) == c_armyUnitStatePurchased)) {
                libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyCategoryCheck[lv_categoryIndex], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][1], true, PlayerGroupAll());
                libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][2], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][3], false, PlayerGroupAll());
            }
            else if ((libVoiC_gf_PC_StoryArmyUnitState(libVoiC_gf_StoryArmyUnitInCategory(lv_indexCategory, 2)) == c_armyUnitStatePurchased)) {
                libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyCategoryCheck[lv_categoryIndex], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][1], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][2], true, PlayerGroupAll());
                libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][3], false, PlayerGroupAll());
            }
            else if ((libVoiC_gf_PC_StoryArmyUnitState(libVoiC_gf_StoryArmyUnitInCategory(lv_indexCategory, 3)) == c_armyUnitStatePurchased)) {
                libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyCategoryCheck[lv_categoryIndex], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][1], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][2], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][3], true, PlayerGroupAll());
            }
            else if (true) {
                libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyCategoryCheck[lv_categoryIndex], true, PlayerGroupAll());
                libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][1], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][2], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][3], false, PlayerGroupAll());
            }
        }
        else {
            libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyCategoryCheck[lv_categoryIndex], false, PlayerGroupAll());
            libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][1], false, PlayerGroupAll());
            libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][2], false, PlayerGroupAll());
            libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][3], false, PlayerGroupAll());
        }
    }
}

void libVoiC_gf_PC_DebugCampaignTechUpdateSoADialog () {
    // Variable Declarations
    string lv_currentPower;
    int lv_powerTypeIndex;
    int lv_powerIndex;

    // Automatic Variable Declarations
    int auto82145B46_ae;
    const int auto82145B46_ai = 1;
    int auto125AB858_ai;
    int auto125AB858_ae;

    // Variable Initialization

    // Implementation
    auto82145B46_ae = libVoiC_gv_pC_DebugCampaignTechSoATypeCount;
    lv_powerTypeIndex = 1;
    for ( ; ( (auto82145B46_ai >= 0 && lv_powerTypeIndex <= auto82145B46_ae) || (auto82145B46_ai < 0 && lv_powerTypeIndex >= auto82145B46_ae) ) ; lv_powerTypeIndex += auto82145B46_ai ) {
        lv_powerIndex = 0;
        auto125AB858_ai = 1;
        auto125AB858_ae = UserDataInstanceCount("CampaignPerk")+1;
        while (auto125AB858_ai < auto125AB858_ae) {    
            lv_currentPower = UserDataInstance("CampaignPerk", auto125AB858_ai);
            auto125AB858_ai = auto125AB858_ai+1;
            if( libVoiC_gf_PC_PerkGroupOfPerk(lv_currentPower) == libVoiC_gv_pC_DebugCampaignTechSoAPowerType[lv_powerTypeIndex] ) {
                if ((libVoiC_gf_PC_PerkUISlot(lv_currentPower) == 0)) {
                    continue;
                }

                lv_powerIndex += 1;
                if ((libVoiC_gf_PC_PerkStateCheck(lv_currentPower, libVoiC_ge_PC_PerkState_Active) == true)) {
                    libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechSoAPowerCheck[lv_powerTypeIndex][lv_powerIndex], true, PlayerGroupAll());
                }
                else {
                    libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechSoAPowerCheck[lv_powerTypeIndex][lv_powerIndex], false, PlayerGroupAll());
                }
            }    
        }
    }
}

void libVoiC_gf_PC_DebugCampaignTechUpdateData () {
    // Variable Declarations
    string lv_indexCategory;
    int lv_categoryIndex;

    // Automatic Variable Declarations
    int autoDA806F86_ae;
    const int autoDA806F86_ai = 1;

    // Variable Initialization

    // Implementation
    autoDA806F86_ae = libVoiC_gv_pC_DebugCampaignTechArmyCatCount;
    lv_categoryIndex = 1;
    for ( ; ( (autoDA806F86_ai >= 0 && lv_categoryIndex <= autoDA806F86_ae) || (autoDA806F86_ai < 0 && lv_categoryIndex >= autoDA806F86_ae) ) ; lv_categoryIndex += autoDA806F86_ai ) {
        lv_indexCategory = libVoiC_gv_pC_DebugCampaignTechArmyCategory[lv_categoryIndex];
        if ((libNtve_gf_DialogItemIsChecked(libVoiC_gv_pC_DebugCampaignTechArmyCategoryCheck[lv_categoryIndex], 1) == true)) {
            libVoiC_gf_PC_SetArmyCategoryState(lv_indexCategory, c_armyCategoryStateUnlocked);
            libVoiC_gf_PC_SetArmyUnitState(libVoiC_gf_StoryArmyUnitInCategory(lv_indexCategory, 1), c_armyUnitStateUnlocked);
            libVoiC_gf_PC_SetArmyUnitState(libVoiC_gf_StoryArmyUnitInCategory(lv_indexCategory, 2), c_armyUnitStateUnlocked);
            libVoiC_gf_PC_SetArmyUnitState(libVoiC_gf_StoryArmyUnitInCategory(lv_indexCategory, 3), c_armyUnitStateUnlocked);
        }
        else if ((libNtve_gf_DialogItemIsChecked(libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][1], 1) == true)) {
            libVoiC_gf_PC_SetArmyCategoryState(lv_indexCategory, c_armyCategoryStateUnlocked);
            libVoiC_gf_PC_SetArmyUnitState(libVoiC_gf_StoryArmyUnitInCategory(lv_indexCategory, 1), c_armyUnitStatePurchased);
            libVoiC_gf_PC_SetArmyUnitState(libVoiC_gf_StoryArmyUnitInCategory(lv_indexCategory, 2), c_armyUnitStateLocked);
            libVoiC_gf_PC_SetArmyUnitState(libVoiC_gf_StoryArmyUnitInCategory(lv_indexCategory, 3), c_armyUnitStateLocked);
        }
        else if ((libNtve_gf_DialogItemIsChecked(libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][2], 1) == true)) {
            libVoiC_gf_PC_SetArmyCategoryState(lv_indexCategory, c_armyCategoryStateUnlocked);
            libVoiC_gf_PC_SetArmyUnitState(libVoiC_gf_StoryArmyUnitInCategory(lv_indexCategory, 1), c_armyUnitStateLocked);
            libVoiC_gf_PC_SetArmyUnitState(libVoiC_gf_StoryArmyUnitInCategory(lv_indexCategory, 2), c_armyUnitStatePurchased);
            libVoiC_gf_PC_SetArmyUnitState(libVoiC_gf_StoryArmyUnitInCategory(lv_indexCategory, 3), c_armyUnitStateLocked);
        }
        else if ((libNtve_gf_DialogItemIsChecked(libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][3], 1) == true)) {
            libVoiC_gf_PC_SetArmyCategoryState(lv_indexCategory, c_armyCategoryStateUnlocked);
            libVoiC_gf_PC_SetArmyUnitState(libVoiC_gf_StoryArmyUnitInCategory(lv_indexCategory, 1), c_armyUnitStateLocked);
            libVoiC_gf_PC_SetArmyUnitState(libVoiC_gf_StoryArmyUnitInCategory(lv_indexCategory, 2), c_armyUnitStateLocked);
            libVoiC_gf_PC_SetArmyUnitState(libVoiC_gf_StoryArmyUnitInCategory(lv_indexCategory, 3), c_armyUnitStatePurchased);
        }
        else if (true) {
            libVoiC_gf_PC_SetArmyCategoryState(lv_indexCategory, c_armyCategoryStateLocked);
            libVoiC_gf_PC_SetArmyUnitState(libVoiC_gf_StoryArmyUnitInCategory(lv_indexCategory, 1), c_armyUnitStateLocked);
            libVoiC_gf_PC_SetArmyUnitState(libVoiC_gf_StoryArmyUnitInCategory(lv_indexCategory, 2), c_armyUnitStateLocked);
            libVoiC_gf_PC_SetArmyUnitState(libVoiC_gf_StoryArmyUnitInCategory(lv_indexCategory, 3), c_armyUnitStateLocked);
        }
    }
}

void libVoiC_gf_PC_DebugCampaignTechUpdateSoAData () {
    // Variable Declarations
    int lv_groupIndex;
    int lv_perkIndex;
    string lv_indexPerk;

    // Automatic Variable Declarations
    int auto34648007_ae;
    const int auto34648007_ai = 1;
    int auto4718CF27_ai;
    int auto4718CF27_ae;

    // Variable Initialization

    // Implementation
    auto34648007_ae = libVoiC_gv_pC_DebugCampaignTechSoATypeCount;
    lv_groupIndex = 1;
    for ( ; ( (auto34648007_ai >= 0 && lv_groupIndex <= auto34648007_ae) || (auto34648007_ai < 0 && lv_groupIndex >= auto34648007_ae) ) ; lv_groupIndex += auto34648007_ai ) {
        lv_perkIndex = 0;
        auto4718CF27_ai = 1;
        auto4718CF27_ae = UserDataInstanceCount("CampaignPerk")+1;
        while (auto4718CF27_ai < auto4718CF27_ae) {    
            lv_indexPerk = UserDataInstance("CampaignPerk", auto4718CF27_ai);
            auto4718CF27_ai = auto4718CF27_ai+1;
            if( libVoiC_gf_PC_PerkGroupOfPerk(lv_indexPerk) == libVoiC_gv_pC_DebugCampaignTechSoAPowerType[lv_groupIndex] ) {
                if ((libVoiC_gf_PC_PerkUISlot(lv_indexPerk) == 0)) {
                    continue;
                }

                lv_perkIndex += 1;
                if ((libNtve_gf_DialogItemIsChecked(libVoiC_gv_pC_DebugCampaignTechSoAPowerCheck[lv_groupIndex][lv_perkIndex], 1) == true)) {
                    libVoiC_gf_PC_PerkStateSet(lv_indexPerk, libVoiC_ge_PC_PerkState_Active);
                }
                else {
                    libVoiC_gf_PC_PerkStateSet(lv_indexPerk, libVoiC_ge_PC_PerkState_Locked);
                }
            }    
        }
    }
}

void libVoiC_gf_PC_DebugCampaignTechCloseDialog () {
    // Automatic Variable Declarations
    // Implementation
    if ((libVoiC_gv_pC_DebugCampaignTechDialog == c_invalidDialogId)) {
        return ;
    }

    DialogDestroy(libVoiC_gv_pC_DebugCampaignTechDialog);
    libVoiC_gv_pC_DebugCampaignTechDialog = c_invalidDialogId;
    UISetWorldVisible(PlayerGroupAll(), true);
    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    UISetCursorVisible(PlayerGroupAll(), false);
}

void libVoiC_gf_PC_DebugCampaignTechDisplayDialog () {
    // Automatic Variable Declarations
    // Implementation
    if ((libVoiC_gv_pC_DebugCampaignTechDialog != c_invalidDialogId)) {
        return ;
    }

    UISetWorldVisible(PlayerGroupAll(), false);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    UISetCursorVisible(PlayerGroupAll(), true);
    libVoiC_gf_ShowHideWorldCover(true, 0);
    libVoiC_gf_PC_DebugCampaignTechStoreStates();
    libVoiC_gf_PC_DebugCampaignTechCreateDialog();
    libVoiC_gf_PC_DebugCampaignTechUpdateDialog();
    DialogSetVisible(libVoiC_gv_pC_DebugCampaignTechDialog, PlayerGroupAll(), true);
    TriggerEnable(libVoiC_gt_PC_DebugCampaignTechOK, true);
    TriggerEnable(libVoiC_gt_PC_DebugCampaignTechCancel, true);
    TriggerEnable(libVoiC_gt_PC_DebugCampaignTechArmyUnitClicked, true);
    TriggerEnable(libVoiC_gt_PC_DebugCampaignTechSoAButtonClicked, true);
    TriggerEnable(libVoiC_gt_PC_DebugCampaignTechRandomizeClicked, true);
    while (!((libVoiC_gv_pC_DebugCampaignTechDialog == c_invalidDialogId))) {
        Wait(0.25, c_timeReal);
    }
    TriggerEnable(libVoiC_gt_PC_DebugCampaignTechOK, false);
    TriggerEnable(libVoiC_gt_PC_DebugCampaignTechCancel, false);
    TriggerEnable(libVoiC_gt_PC_DebugCampaignTechArmyUnitClicked, false);
    TriggerEnable(libVoiC_gt_PC_DebugCampaignTechSoAButtonClicked, false);
    TriggerEnable(libVoiC_gt_PC_DebugCampaignTechRandomizeClicked, false);
    libVoiC_gf_ShowHideWorldCover(false, 0);
}

void libVoiC_gf_PC_DebugCampaignTechStoreStates () {
    // Variable Declarations
    string lv_indexCategory;

    // Automatic Variable Declarations
    int autoD272FB45_ae;
    int autoD272FB45_ai;

    // Variable Initialization

    // Implementation
    autoD272FB45_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoD272FB45_ai = 1;
    while (autoD272FB45_ai <= autoD272FB45_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoD272FB45_ai);
        if ((libVoiC_gf_PC_ArmyCategoryUsedInUI(lv_indexCategory) == true)) {
            DataTableSetInt(true, ("DebugTechSaveArmyCategory_" + (lv_indexCategory)), (libVoiC_gf_PC_ArmyCategoryState(lv_indexCategory)));
        }

        autoD272FB45_ai = autoD272FB45_ai + 1;
    }
}

void libVoiC_gf_PC_DebugCampaignTechRestoreStates () {
    // Variable Declarations
    string lv_indexCategory;
    int lv_stateValue;

    // Automatic Variable Declarations
    int autoC216F282_ae;
    int autoC216F282_ai;
    int auto87FA2ABA_val;

    // Variable Initialization

    // Implementation
    autoC216F282_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoC216F282_ai = 1;
    while (autoC216F282_ai <= autoC216F282_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoC216F282_ai);
        if ((libVoiC_gf_PC_ArmyCategoryUsedInUI(lv_indexCategory) == true)) {
            lv_stateValue = DataTableGetInt(true, ("DebugTechSaveArmyCategory_" + (lv_indexCategory)));
            auto87FA2ABA_val = lv_stateValue;
            if (auto87FA2ABA_val == (c_armyCategoryStateLocked)) {
                libVoiC_gf_PC_SetArmyCategoryState(lv_indexCategory, c_armyCategoryStateLocked);
            }
            else if (auto87FA2ABA_val == (c_armyCategoryStateUnlocked)) {
                libVoiC_gf_PC_SetArmyCategoryState(lv_indexCategory, c_armyCategoryStateUnlocked);
            }
            else {
            }
        }

        autoC216F282_ai = autoC216F282_ai + 1;
    }
}

bool libVoiC_gf_PC_DebugCampaignTechIsDupe (string lp_mission, string lp_category) {
    // Variable Declarations
    string lv_indexMission;

    // Automatic Variable Declarations
    int auto4BF17532_ae;
    int auto4BF17532_ai;

    // Variable Initialization

    // Implementation
    auto4BF17532_ae = UserDataInstanceCount("Maps");
    auto4BF17532_ai = 1;
    while (auto4BF17532_ai <= auto4BF17532_ae) {
        lv_indexMission = libVoiC_gf_PC_MapDataFromUserDataInstance(UserDataInstance("Maps", auto4BF17532_ai));
        if (lv_indexMission != null && CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((lv_indexMission == lp_mission)) {
                return false;
            }

            if ((libVoiC_gf_MissionArmyCategoryUnlocked(lv_indexMission) == lp_category)) {
                return true;
            }

        }
        auto4BF17532_ai = auto4BF17532_ai + 1;
    }
    return false;
}

void libVoiC_gf_SetTechRestrictionsCallback (trigger lp_callbackTrigger) {
    // Automatic Variable Declarations
    // Implementation
    libVoiC_gv_pC_TechLimitsCallback = lp_callbackTrigger;
}

void libVoiC_gf_PurchaseStorymodeTech () {
    // Variable Declarations
    string lv_indexMission;
    string lv_armyCategory;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((GameIsTransitionMap() == true)) {
        return ;
    }

    libVoiC_gf_PC_DefaultTechProgress(libVoiC_gf_CurrentMap());
    TriggerExecute(libVoiC_gv_pC_TechLimitsCallback, true, false);
}

void libVoiC_gf_PC_DefaultTechProgress (string lp_mission) {
    // Variable Declarations
    string lv_currentArc;
    string lv_indexMission;
    string lv_indexArc;
    const int lv_c_ArcCount = 9;
    string[11][4] lv_arcMissions;
    int lv_arcIndex;
    int lv_indexArcMission;
    string[10] lv_shortestPath;
    string lv_indexArmyCategory;
    string lv_indexArmyUpgrade2;
    string lv_indexPerkGroup;
    string lv_indexPerk;
    int lv_availableCurrency;
    string lv_topPerk;

    // Automatic Variable Declarations
    string auto561177DD_val;
    int autoF9C1F36E_ae;
    int autoF9C1F36E_ai;
    const int autoDC722854_ae = lv_c_ArcCount;
    const int autoDC722854_ai = 1;
    int auto275A2403_ae;
    int auto275A2403_ai;
    int autoD1710475_ae;
    int autoD1710475_ai;
    int autoD497A8FA_ai;
    int autoD497A8FA_ae;
    int auto250D5CDF_ai;
    int auto250D5CDF_ae;
    int autoC368E7AC_ai;
    int autoC368E7AC_ae;

    // Variable Initialization

    // Implementation
    if (((libVoiC_gf_PC_CampaignMapTypeCheck(lp_mission, c_mapKindMission) == false) || (libVoiC_gv_pC_InEpilogue == true))) {
        return ;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_VoiC_FAFCC3CA"), false);
    lv_currentArc = libVoiC_gf_StoryMapPlanet(lp_mission);
    TextExpressionSetToken("Param/Expression/lib_VoiC_A2BB3BDA", "A", StringToText((lv_currentArc)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_VoiC_A2BB3BDA"), false);
    auto561177DD_val = lv_currentArc;
    if (auto561177DD_val == "AiurA") {
    }
    else if (auto561177DD_val == "Shakuras") {
        lv_shortestPath[1] = "AiurA";
    }
    else if (auto561177DD_val == "Korhal") {
        lv_shortestPath[1] = "AiurA";
    }
    else if (auto561177DD_val == "PurifierA") {
        lv_shortestPath[1] = "AiurA";
        lv_shortestPath[2] = "Korhal";
    }
    else if (auto561177DD_val == "Ulnar") {
        lv_shortestPath[1] = "AiurA";
        lv_shortestPath[2] = "Korhal";
        lv_shortestPath[3] = "Shakuras";
        lv_shortestPath[4] = "PurifierA";
    }
    else if (auto561177DD_val == "Taldarim") {
        lv_shortestPath[1] = "AiurA";
        lv_shortestPath[2] = "Korhal";
        lv_shortestPath[3] = "Shakuras";
        lv_shortestPath[4] = "PurifierA";
        lv_shortestPath[5] = "Ulnar";
    }
    else if (auto561177DD_val == "Moebius") {
        lv_shortestPath[1] = "AiurA";
        lv_shortestPath[2] = "Korhal";
        lv_shortestPath[3] = "Shakuras";
        lv_shortestPath[4] = "PurifierA";
        lv_shortestPath[5] = "Ulnar";
    }
    else if (auto561177DD_val == "PurifierB") {
        lv_shortestPath[1] = "AiurA";
        lv_shortestPath[2] = "Korhal";
        lv_shortestPath[3] = "Shakuras";
        lv_shortestPath[4] = "PurifierA";
        lv_shortestPath[5] = "Ulnar";
        lv_shortestPath[6] = "Taldarim";
    }
    else if (auto561177DD_val == "AiurB") {
        lv_shortestPath[1] = "AiurA";
        lv_shortestPath[2] = "Korhal";
        lv_shortestPath[3] = "Shakuras";
        lv_shortestPath[4] = "PurifierA";
        lv_shortestPath[5] = "Ulnar";
        lv_shortestPath[6] = "Taldarim";
        lv_shortestPath[7] = "Moebius";
        lv_shortestPath[8] = "PurifierB";
    }
    else if (auto561177DD_val == "EpilogueArc") {
        lv_shortestPath[1] = "AiurA";
        lv_shortestPath[2] = "Korhal";
        lv_shortestPath[3] = "Shakuras";
        lv_shortestPath[4] = "PurifierA";
        lv_shortestPath[5] = "Ulnar";
        lv_shortestPath[6] = "Taldarim";
        lv_shortestPath[7] = "Moebius";
        lv_shortestPath[8] = "PurifierB";
        lv_shortestPath[9] = "AiurB";
    }
    else {
    }
    BankDeleteCampaignBanks(1, libVoiC_gf_PC_CampaignSaveIndex());
    libVoiC_gv_pC_StoryBank = null;
    libVoiC_gv_pC_CampaignBank = null;
    libVoiC_gv_pC_ArmyTechBank = null;
    libVoiC_gf_ResetCampaignData();
    autoF9C1F36E_ae = UserDataInstanceCount("Maps");
    autoF9C1F36E_ai = 1;
    while (autoF9C1F36E_ai <= autoF9C1F36E_ae) {
        lv_indexMission = libVoiC_gf_PC_MapDataFromUserDataInstance(UserDataInstance("Maps", autoF9C1F36E_ai));
        if (lv_indexMission != null && CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_indexArc = libVoiC_gf_StoryMapPlanet(lv_indexMission);
            if ((lv_indexArc == lv_currentArc)) {
                if ((lv_indexMission == lp_mission)) {
                    break;
                }

                libVoiC_gf_PC_CompleteMission(lv_indexMission);
                libVoiC_gv_pCX_LastSuccessfulMission = lv_indexMission;
            }
            else {
                lv_arcIndex = 1;
                for ( ; ( (autoDC722854_ai >= 0 && lv_arcIndex <= autoDC722854_ae) || (autoDC722854_ai < 0 && lv_arcIndex >= autoDC722854_ae) ) ; lv_arcIndex += autoDC722854_ai ) {
                    if ((lv_shortestPath[lv_arcIndex] != null) && (lv_indexArc == lv_shortestPath[lv_arcIndex])) {
                        libVoiC_gf_PC_CompleteMission(lv_indexMission);
                        libVoiC_gv_pCX_LastSuccessfulMission = lv_indexMission;
                        break;
                    }

                }
            }
        }
        autoF9C1F36E_ai = autoF9C1F36E_ai + 1;
    }
    if ((libVoiC_gf_MissionStatusCheck("PAiur03", libVoiC_ge_MissionStatus_Completed) == true)) {
        auto275A2403_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
        auto275A2403_ai = 1;
        while (auto275A2403_ai <= auto275A2403_ae) {
            lv_indexArmyCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto275A2403_ai);
            if ((libVoiC_gf_ArmyCategoryStateCheck(lv_indexArmyCategory, c_armyCategoryStateUnlocked) == true)) {
                autoD1710475_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexArmyCategory, "ArmyUnitArray", 1);
                autoD1710475_ai = 1;
                while (autoD1710475_ai <= autoD1710475_ae) {
                    lv_indexArmyUpgrade2 = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexArmyCategory, "ArmyUnitArray["+IntToString(autoD1710475_ai-1)+"]", 1);
                    libVoiC_gf_PC_SetArmyUnitState(lv_indexArmyUpgrade2, c_armyUnitStatePurchased);
                    break;
                    autoD1710475_ai = autoD1710475_ai + 1;
                }
            }

            auto275A2403_ai = auto275A2403_ai + 1;
        }
    }

    autoD497A8FA_ai = 1;
    autoD497A8FA_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (autoD497A8FA_ai < autoD497A8FA_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", autoD497A8FA_ai);
        autoD497A8FA_ai = autoD497A8FA_ai+1;
        if ((libVoiC_gf_PC_PerkStateCheck(lv_indexPerk, libVoiC_ge_PC_PerkState_Active) == true)) {
            libVoiC_gf_PC_PerkStateSet(lv_indexPerk, libVoiC_ge_PC_PerkState_Unlocked);
        }

    }
    auto250D5CDF_ai = 1;
    auto250D5CDF_ae = UserDataInstanceCount("CampaignPerkGroup")+1;
    while (auto250D5CDF_ai < auto250D5CDF_ae) {
        lv_indexPerkGroup = UserDataInstance("CampaignPerkGroup", auto250D5CDF_ai);
        auto250D5CDF_ai = auto250D5CDF_ai+1;
        if ((libVoiC_gf_PC_PerkGroupUnlocked(lv_indexPerkGroup) == true)) {
            lv_availableCurrency = libVoiC_gf_PC_SoACurrencyAvail();
            lv_topPerk = null;
            autoC368E7AC_ai = 1;
            autoC368E7AC_ae = UserDataInstanceCount("CampaignPerk")+1;
            while (autoC368E7AC_ai < autoC368E7AC_ae) {    
                lv_indexPerk = UserDataInstance("CampaignPerk", autoC368E7AC_ai);
                autoC368E7AC_ai = autoC368E7AC_ai+1;
                if( libVoiC_gf_PC_PerkGroupOfPerk(lv_indexPerk) == lv_indexPerkGroup ) {
                    if ((libVoiC_gf_PC_PerkUISlot(lv_indexPerk) != 0) && (libVoiC_gf_PC_PerkCost(lv_indexPerk) <= lv_availableCurrency) && (libVoiC_gf_PC_PerkCost(lv_topPerk) >= libVoiC_gf_PC_PerkCost(lv_indexPerk))) {
                        lv_topPerk = lv_indexPerk;
                    }

                }    
            }
            if ((lv_topPerk != null)) {
                libVoiC_gf_PC_PerkStateSet(lv_topPerk, libVoiC_ge_PC_PerkState_Active);
            }

        }

    }
    libVoiC_gf_PS_SaveAllTransitionData(false, false, false);
    libVoiC_gf_PC_SaveArmyTechBank(lp_mission, false);
    libVoiC_gf_PC_ApplyTech(1);
}

string libVoiC_gf_PC_DebugProgressDataTableID (string lp_type, string lp_name) {
    // Automatic Variable Declarations
    // Implementation
    return ("DebugProg" + lp_type + "&%&" + lp_name);
}

bool libVoiC_gf_PC_DebugProgressDialogOpened () {
    // Automatic Variable Declarations
    // Implementation
    return (libVoiC_gv_pC_DebugProgressDialog != c_invalidDialogId);
}

void libVoiC_gf_PC_DebugProgressSetFirstStorymodeEpisode (bool lp_state) {
    // Automatic Variable Declarations
    // Implementation
    libVoiC_gf_PC_OpenStoryBank();
    BankValueSetFromFlag(libVoiC_gf_StoryBank(), "Debug", "StartedFirstStorymodeEpisode", lp_state);
    BankSave(libVoiC_gf_StoryBank());
}

void libVoiC_gf_PC_DebugProgressAddMissionButton (string lp_mission, fixed lp_col, fixed lp_row) {
    // Variable Declarations
    int lv_xX;
    int lv_yY;
    int lv_width;
    int lv_height;
    int lv_marginX;
    int lv_marginY;
    int lv_index;
    int lv_button;
    int lv_button2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_button = c_invalidDialogControlId;
    lv_button2 = c_invalidDialogControlId;

    // Implementation
    lv_xX = FixedToInt((((lp_col - 1.0) * 285.0) + 40.0));
    lv_yY = FixedToInt((((lp_row - 1.0) * 70.0) + 35.0));
    lv_width = 320;
    lv_height = 75;
    lv_marginX = 15;
    lv_marginY = 10;
    DialogControlCreate(libVoiC_gv_pC_DebugProgressDialog, c_triggerControlTypeButton);
    libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), ("LotV_DebugProgress_MissionButton" + (lp_mission)), PlayerGroupAll());
    lv_button = DialogControlLastCreated();
    libNtve_gf_SaveDataTableValueDialogItem(true, libVoiC_gf_PC_DebugProgressDataTableID("Button", (lp_mission)), DialogControlLastCreated());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_width, lv_height);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_xX, lv_yY);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), libVoiC_gf_PC_DebugProgressMapName(lp_mission), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelMissionHotS", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    libNtve_gf_SaveDataTableValueDialogItem(true, libVoiC_gf_PC_DebugProgressDataTableID("StateLabel", (lp_mission)), DialogControlLastCreated());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), (lv_width - (lv_marginX * 2)), (lv_height - (lv_marginY * 2)));
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelLabelTopRight", PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopRight, lv_button, c_anchorTopRight, (-1 * lv_marginX), (1 * lv_marginY));
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    libNtve_gf_SaveDataTableValueDialogItem(true, libVoiC_gf_PC_DebugProgressDataTableID("TechLabel", (lp_mission)), DialogControlLastCreated());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), (lv_width - (lv_marginX * 2)), (lv_height - (lv_marginY * 2)));
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelLabelTopLeft", PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_button, c_anchorTopLeft, (1 * lv_marginX), (1 * lv_marginY));
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    libNtve_gf_SaveDataTableValueDialogItem(true, libVoiC_gf_PC_DebugProgressDataTableID("ChampionLabel", (lp_mission)), DialogControlLastCreated());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), (lv_width - (lv_marginX * 2)), (lv_height - (lv_marginY * 2)));
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelLabelBottomLeft", PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, lv_button, c_anchorBottomLeft, (1 * lv_marginX), (-1 * lv_marginY));
    DialogControlCreate(libVoiC_gv_pC_DebugProgressDialog, c_triggerControlTypeButton);
    lv_button2 = DialogControlLastCreated();
    libNtve_gf_SaveDataTableValueDialogItem(true, libVoiC_gf_PC_DebugProgressDataTableID("PlayButton", (lp_mission)), DialogControlLastCreated());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 48, 48);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorRight, lv_button, c_anchorLeft, 0, 0);
    TextExpressionSetToken("Param/Expression/lib_VoiC_9081F58A", "A", libVoiC_gf_PC_CampaignMapName(lp_mission));
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_VoiC_9081F58A"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(libVoiC_gv_pC_DebugProgressDialog, 32, 32, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\ui_btn_aicommand_commandcard_assault.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SaveDataTableValueDialogItem(true, libVoiC_gf_PC_DebugProgressDataTableID("PlayImage", (lp_mission)), DialogControlLastCreated());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_button2, c_anchorCenter, 0, 0);
}

void libVoiC_gf_PC_DebugProgressCreateDialog () {
    // Variable Declarations
    int lv_width;
    int lv_height;
    int lv_offsetX;
    int lv_offsetY;
    int lv_relativeButton;
    int lv_travelButton;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_relativeButton = c_invalidDialogControlId;
    lv_travelButton = c_invalidDialogControlId;

    // Implementation
    if ((libVoiC_gv_pC_DebugProgressDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(1500, 1100, c_anchorCenter, 0, 0, true);
    libVoiC_gv_pC_DebugProgressDialog = DialogLastCreated();
    libVoiC_gf_PC_DebugProgressAddMissionButton("PAiur01", 3.0, 1.0);
    libVoiC_gf_PC_DebugProgressAddMissionButton("PAiur02", 3.0, 2.0);
    libVoiC_gf_PC_DebugProgressAddMissionButton("PAiur03", 3.0, 3.0);
    libVoiC_gf_PC_DebugProgressAddMissionButton("PShakuras01", 4.5, 4.25);
    libVoiC_gf_PC_DebugProgressAddMissionButton("PShakuras02", 4.5, 5.25);
    libVoiC_gf_PC_DebugProgressAddMissionButton("PKorhal01", 1.5, 4.25);
    libVoiC_gf_PC_DebugProgressAddMissionButton("PKorhal02", 1.5, 5.25);
    libVoiC_gf_PC_DebugProgressAddMissionButton("PPurifier01", 3.0, 4.5);
    libVoiC_gf_PC_DebugProgressAddMissionButton("PUlnar01", 3.0, 6.25);
    libVoiC_gf_PC_DebugProgressAddMissionButton("PUlnar02", 3.0, 7.25);
    libVoiC_gf_PC_DebugProgressAddMissionButton("PUlnar03", 3.0, 8.25);
    libVoiC_gf_PC_DebugProgressAddMissionButton("PTaldarim01", 4.5, 9.25);
    libVoiC_gf_PC_DebugProgressAddMissionButton("PTaldarim02", 4.5, 10.25);
    libVoiC_gf_PC_DebugProgressAddMissionButton("PPurifier02", 1.5, 9.25);
    libVoiC_gf_PC_DebugProgressAddMissionButton("PPurifier03", 1.5, 10.25);
    libVoiC_gf_PC_DebugProgressAddMissionButton("PMoebius01", 3.0, 9.75);
    libVoiC_gf_PC_DebugProgressAddMissionButton("PAiur04", 3.0, 12.25);
    libVoiC_gf_PC_DebugProgressAddMissionButton("PAiur05", 3.0, 13.25);
    libVoiC_gf_PC_DebugProgressAddMissionButton("PAiur06", 3.0, 14.25);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorBottomRight, 190, 30, StringToText(""), StringExternal("Param/Value/lib_VoiC_7BCF9B13"), "");
    libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), "LotV_DebugProgress_OkButton", PlayerGroupAll());
    libVoiC_gv_pC_DebugProgressButtonOK = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorBottomRight, 40, 30, StringToText(""), StringExternal("Param/Value/lib_VoiC_208828FC"), "");
    libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), "LotV_DebugProgress_CancelButton", PlayerGroupAll());
    libVoiC_gv_pC_DebugProgressButtonCancel = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorBottomLeft, 40, 30, StringToText(""), StringExternal("Param/Value/lib_VoiC_87B797D4"), "");
    libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), "LotV_DebugProgress_ResetButton", PlayerGroupAll());
    libVoiC_gv_pC_DebugProgressButtonReset = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 60, c_anchorTopRight, 40, 40, StringExternal("Param/Value/lib_VoiC_1AC0C55D"), StringExternal("Param/Value/lib_VoiC_88E4833D"), "");
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), ColorWithAlpha(0,0,0,0), PlayerGroupAll());
    libVoiC_gv_pC_DebugProgressButtonDirectSelect = DialogControlLastCreated();
    if ((libVoiC_gv_pC_DebugProgressRetailMode == true)) {
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }
    else {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 450, 50, c_anchorTopLeft, 50, 130, StringExternal("Param/Value/lib_VoiC_A88CC51D"), ColorWithAlpha(0,0,0,0), false, 0.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize24", PlayerGroupAll());
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorTopLeft, 50, 170, StringToText(""), StringExternal("Param/Value/lib_VoiC_7E2017AF"), "");
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), ColorWithAlpha(0,0,0,0), PlayerGroupAll());
        libVoiC_gv_pC_DebugProgressButtonNoObjectives = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorTopLeft, 210, 170, StringToText(""), StringExternal("Param/Value/lib_VoiC_13BE3B05"), "");
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(254*100/255,138*100/255,14*100/255), PlayerGroupAll());
        libVoiC_gv_pC_DebugProgressButtonHalfObjectives = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorTopLeft, 370, 170, StringToText(""), StringExternal("Param/Value/lib_VoiC_C8262C22"), "");
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), ColorWithAlpha(0,0,0,0), PlayerGroupAll());
        libVoiC_gv_pC_DebugProgressButtonAllObjectives = DialogControlLastCreated();
    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 600, 400, c_anchorTopLeft, 50, 50, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    libVoiC_gv_pC_DebugProgressLabelInfo = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelCampaignProgress", PlayerGroupAll());
    lv_width = 300;
    lv_height = 60;
    lv_offsetX = 5;
    lv_offsetY = 0;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_width, lv_height, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/lib_VoiC_D79468A7"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelLabelRequirement", PlayerGroupAll());
    lv_relativeButton = libNtve_gf_ValueFromDataTableDialogItem(true, libVoiC_gf_PC_DebugProgressDataTableID("Button", ("PKorhal01")));
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, lv_relativeButton, c_anchorTopLeft, lv_offsetX, lv_offsetY);
    libVoiC_gv_pC_DebugProgressLabelExpeditionReq = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_width, lv_height, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/lib_VoiC_8E3EF1E5"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelLabelRequirement", PlayerGroupAll());
    lv_relativeButton = libNtve_gf_ValueFromDataTableDialogItem(true, libVoiC_gf_PC_DebugProgressDataTableID("Button", ("PShakuras01")));
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, lv_relativeButton, c_anchorTopLeft, lv_offsetX, lv_offsetY);
    libVoiC_gv_pC_DebugProgressLabelCharReq = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_width, lv_height, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/lib_VoiC_3347D5AE"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelLabelRequirement", PlayerGroupAll());
    lv_relativeButton = libNtve_gf_ValueFromDataTableDialogItem(true, libVoiC_gf_PC_DebugProgressDataTableID("Button", ("PPurifier01")));
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, lv_relativeButton, c_anchorTopLeft, lv_offsetX, lv_offsetY);
    libVoiC_gv_pC_DebugProgressLabelPurifierReq = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_width, lv_height, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/lib_VoiC_5708D36D"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelLabelRequirement", PlayerGroupAll());
    lv_relativeButton = libNtve_gf_ValueFromDataTableDialogItem(true, libVoiC_gf_PC_DebugProgressDataTableID("Button", ("PUlnar01")));
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, lv_relativeButton, c_anchorTopLeft, lv_offsetX, lv_offsetY);
    libVoiC_gv_pC_DebugProgressLabelZerusReq = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_width, lv_height, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/lib_VoiC_0D362EAF"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelLabelRequirement", PlayerGroupAll());
    lv_relativeButton = libNtve_gf_ValueFromDataTableDialogItem(true, libVoiC_gf_PC_DebugProgressDataTableID("Button", ("PTaldarim01")));
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, lv_relativeButton, c_anchorTopLeft, lv_offsetX, lv_offsetY);
    libVoiC_gv_zS_DebugProgressLabelValerianReq = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_width, lv_height, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/lib_VoiC_FC723C8E"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelLabelRequirement", PlayerGroupAll());
    lv_relativeButton = libNtve_gf_ValueFromDataTableDialogItem(true, libVoiC_gf_PC_DebugProgressDataTableID("Button", ("PPurifier02")));
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, lv_relativeButton, c_anchorTopLeft, lv_offsetX, lv_offsetY);
    libVoiC_gv_pC_DebugProgressLabelHybridReq = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_width, lv_height, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/lib_VoiC_9E2F08E5"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelLabelRequirement", PlayerGroupAll());
    lv_relativeButton = libNtve_gf_ValueFromDataTableDialogItem(true, libVoiC_gf_PC_DebugProgressDataTableID("Button", ("PMoebius01")));
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, lv_relativeButton, c_anchorTopLeft, lv_offsetX, lv_offsetY);
    libVoiC_gv_zS_DebugProgressLabelValerianReq2 = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_width, lv_height, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/lib_VoiC_EF36BB5B"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugProgressPanelLabelRequirement", PlayerGroupAll());
    lv_relativeButton = libNtve_gf_ValueFromDataTableDialogItem(true, libVoiC_gf_PC_DebugProgressDataTableID("Button", ("PAiur04")));
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, lv_relativeButton, c_anchorTopLeft, lv_offsetX, lv_offsetY);
    libVoiC_gv_zS_DebugProgressLabelKohalReq = DialogControlLastCreated();
}

void libVoiC_gf_PC_DebugProgressUpdateDialog () {
    // Variable Declarations
    string lv_indexMission;
    int lv_stateLabel;
    int lv_techLabel;
    int lv_championLabel;
    int lv_button;
    int lv_button2;
    int lv_button3;
    string lv_categoryUnlocked;
    string lv_championUnlocked;
    text lv_techText;
    int lv_tooltip;
    text lv_rewardText;
    text lv_championText;

    // Automatic Variable Declarations
    int auto53276695_ae;
    int auto53276695_ai;
    int auto8E338A48_val;

    // Variable Initialization
    lv_stateLabel = c_invalidDialogControlId;
    lv_techLabel = c_invalidDialogControlId;
    lv_championLabel = c_invalidDialogControlId;
    lv_button = c_invalidDialogControlId;
    lv_button2 = c_invalidDialogControlId;
    lv_button3 = c_invalidDialogControlId;
    lv_tooltip = c_invalidDialogControlId;

    // Implementation
    libVoiC_gf_PC_UpdateCompletedMissionArray();
    auto53276695_ae = CatalogEntryCount(c_gameCatalogMap);
    auto53276695_ai = 1;
    while (auto53276695_ai <= auto53276695_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto53276695_ai);
        auto53276695_ai = auto53276695_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((libVoiC_gf_PC_CampaignMapIsEpilogue(lv_indexMission) == true)) {
                continue;
            }

            lv_stateLabel = libNtve_gf_ValueFromDataTableDialogItem(true, libVoiC_gf_PC_DebugProgressDataTableID("StateLabel", (lv_indexMission)));
            lv_techLabel = libNtve_gf_ValueFromDataTableDialogItem(true, libVoiC_gf_PC_DebugProgressDataTableID("TechLabel", (lv_indexMission)));
            lv_championLabel = libNtve_gf_ValueFromDataTableDialogItem(true, libVoiC_gf_PC_DebugProgressDataTableID("ChampionLabel", (lv_indexMission)));
            lv_categoryUnlocked = libVoiC_gf_MissionArmyCategoryUnlocked(lv_indexMission);
            lv_championUnlocked = libVoiC_gf_PC_DebugProgressMissionSoATierUnlocked(lv_indexMission);
            if ((lv_categoryUnlocked != null)) {
                lv_techText = libVoiC_gf_PC_ArmyCategoryName(lv_categoryUnlocked);
            }
            else {
                lv_techText = StringToText("");
            }
            if ((lv_championUnlocked != null)) {
                lv_championText = libVoiC_gf_PC_PerkGroupName(lv_championUnlocked);
            }
            else {
                if ((libVoiC_gf_PC_PerkGroupUnlocked("GPType6") == false) && (libVoiC_gf_MissionUnlocksSpearofAdunTier(lv_indexMission) > 0)) {
                    lv_championText = StringExternal("Param/Value/lib_VoiC_7343EFEB");
                }
                else {
                    lv_championText = null;
                }
            }
            if ((libVoiC_gv_pC_DebugProgressShowRewards == true)) {
                TextExpressionSetToken("Param/Expression/lib_VoiC_0F62EC86", "SOAMAIN", IntToText(libVoiC_gf_PC_MissionRewardsArmy(lv_indexMission)));
                TextExpressionSetToken("Param/Expression/lib_VoiC_0F62EC86", "SOABONUS", IntToText(libVoiC_gf_PC_MissionRewardsArmy(lv_indexMission)));
                lv_rewardText = TextExpressionAssemble("Param/Expression/lib_VoiC_0F62EC86");
            }
            else {
                lv_rewardText = null;
            }
            lv_button = libNtve_gf_ValueFromDataTableDialogItem(true, libVoiC_gf_PC_DebugProgressDataTableID("Button", (lv_indexMission)));
            lv_button2 = libNtve_gf_ValueFromDataTableDialogItem(true, libVoiC_gf_PC_DebugProgressDataTableID("PlayButton", (lv_indexMission)));
            lv_button3 = libNtve_gf_ValueFromDataTableDialogItem(true, libVoiC_gf_PC_DebugProgressDataTableID("PlayImage", (lv_indexMission)));
            if ((lv_stateLabel != c_invalidDialogControlId)) {
                auto8E338A48_val = libVoiC_gf_MissionStatus(lv_indexMission);
                if (auto8E338A48_val == libVoiC_ge_MissionStatus_Locked) {
                    DialogControlSetEnabled(lv_button, PlayerGroupAll(), false);
                    DialogControlSetVisible(lv_button2, PlayerGroupAll(), false);
                    DialogControlSetVisible(lv_button3, PlayerGroupAll(), false);
                    DialogControlSetEnabled(lv_stateLabel, PlayerGroupAll(), true);
                    libNtve_gf_SetDialogItemText(lv_stateLabel, StringExternal("Param/Value/lib_VoiC_AD3F2E8D"), PlayerGroupAll());
                    TextExpressionSetToken("Param/Expression/lib_VoiC_02D0E02A", "A", libVoiC_gf_PC_DebugProgressMapName(lv_indexMission));
                    libNtve_gf_SetDialogItemText(lv_button, TextExpressionAssemble("Param/Expression/lib_VoiC_02D0E02A"), PlayerGroupAll());
                    TextExpressionSetToken("Param/Expression/lib_VoiC_43997B8A", "A", lv_techText);
                    libNtve_gf_SetDialogItemText(lv_techLabel, TextExpressionAssemble("Param/Expression/lib_VoiC_43997B8A"), PlayerGroupAll());
                    TextExpressionSetToken("Param/Expression/lib_VoiC_D8CBF153", "A", lv_championText);
                    libNtve_gf_SetDialogItemText(lv_championLabel, TextExpressionAssemble("Param/Expression/lib_VoiC_D8CBF153"), PlayerGroupAll());
                    libNtve_gf_SetDialogItemTooltip(lv_button, lv_rewardText, PlayerGroupAll());
                }
                else if (auto8E338A48_val == libVoiC_ge_MissionStatus_Available) {
                    DialogControlSetEnabled(lv_button, PlayerGroupAll(), true);
                    if ((libVoiC_gv_pC_DebugProgressRetailMode == false)) {
                        DialogControlSetVisible(lv_button2, PlayerGroupAll(), true);
                        DialogControlSetVisible(lv_button3, PlayerGroupAll(), true);
                    }
                    else {
                        DialogControlSetVisible(lv_button2, PlayerGroupAll(), false);
                        DialogControlSetVisible(lv_button3, PlayerGroupAll(), false);
                    }
                    DialogControlSetEnabled(lv_stateLabel, PlayerGroupAll(), true);
                    TextExpressionSetToken("Param/Expression/lib_VoiC_F82DB0D0", "A", IntToText(libVoiC_gf_MissionStatusAge(lv_indexMission, libVoiC_ge_MissionStatus_Available)));
                    libNtve_gf_SetDialogItemText(lv_stateLabel, TextExpressionAssemble("Param/Expression/lib_VoiC_F82DB0D0"), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(lv_button, libVoiC_gf_PC_DebugProgressMapName(lv_indexMission), PlayerGroupAll());
                    TextExpressionSetToken("Param/Expression/lib_VoiC_2BB80ACF", "A", lv_techText);
                    libNtve_gf_SetDialogItemText(lv_techLabel, TextExpressionAssemble("Param/Expression/lib_VoiC_2BB80ACF"), PlayerGroupAll());
                    TextExpressionSetToken("Param/Expression/lib_VoiC_884E6A43", "A", lv_championText);
                    libNtve_gf_SetDialogItemText(lv_championLabel, TextExpressionAssemble("Param/Expression/lib_VoiC_884E6A43"), PlayerGroupAll());
                    libNtve_gf_SetDialogItemTooltip(lv_button, lv_rewardText, PlayerGroupAll());
                }
                else if (auto8E338A48_val == libVoiC_ge_MissionStatus_Completed) {
                    DialogControlSetEnabled(lv_button, PlayerGroupAll(), false);
                    DialogControlSetVisible(lv_button2, PlayerGroupAll(), false);
                    DialogControlSetVisible(lv_button3, PlayerGroupAll(), false);
                    DialogControlSetEnabled(lv_stateLabel, PlayerGroupAll(), false);
                    TextExpressionSetToken("Param/Expression/lib_VoiC_010ABCE0", "A", IntToText(libVoiC_gf_MissionStatusAge(lv_indexMission, libVoiC_ge_MissionStatus_Completed)));
                    libNtve_gf_SetDialogItemText(lv_stateLabel, TextExpressionAssemble("Param/Expression/lib_VoiC_010ABCE0"), PlayerGroupAll());
                    TextExpressionSetToken("Param/Expression/lib_VoiC_2377F211", "A", libVoiC_gf_PC_DebugProgressMapName(lv_indexMission));
                    libNtve_gf_SetDialogItemText(lv_button, TextExpressionAssemble("Param/Expression/lib_VoiC_2377F211"), PlayerGroupAll());
                    TextExpressionSetToken("Param/Expression/lib_VoiC_3391F05F", "A", lv_techText);
                    libNtve_gf_SetDialogItemText(lv_techLabel, TextExpressionAssemble("Param/Expression/lib_VoiC_3391F05F"), PlayerGroupAll());
                    TextExpressionSetToken("Param/Expression/lib_VoiC_8957B073", "A", lv_championText);
                    libNtve_gf_SetDialogItemText(lv_championLabel, TextExpressionAssemble("Param/Expression/lib_VoiC_8957B073"), PlayerGroupAll());
                    libNtve_gf_SetDialogItemTooltip(lv_button, lv_rewardText, PlayerGroupAll());
                }
                else {
                }
            }

        }    
    }
    libVoiC_gf_PC_SoACalculateCurrency();
    TextExpressionSetToken("Param/Expression/lib_VoiC_021EA168", "A", IntToText(libVoiC_gf_NumberOfMissions(libVoiC_ge_MissionCountOptions_Completed)));
    TextExpressionSetToken("Param/Expression/lib_VoiC_021EA168", "B", IntToText(libVoiC_gf_NumberOfMissions(libVoiC_ge_MissionCountOptions_All)));
    TextExpressionSetToken("Param/Expression/lib_VoiC_021EA168", "C", IntToText(libVoiC_gf_NumberOfMissionArcsCompleted()));
    TextExpressionSetToken("Param/Expression/lib_VoiC_021EA168", "D", IntToText(libVoiC_gf_PC_SoACurrencyMax()));
    libNtve_gf_SetDialogItemText(libVoiC_gv_pC_DebugProgressLabelInfo, TextExpressionAssemble("Param/Expression/lib_VoiC_021EA168"), PlayerGroupAll());
    if ((libVoiC_gv_pC_DebugProgressRetailMode == true)) {
        DialogControlSetVisible(libVoiC_gv_pC_DebugProgressLabelInfo, PlayerGroupAll(), false);
    }

    libVoiC_gf_PC_DebugProgressUpdateRequirementLabel(libVoiC_gv_pC_DebugProgressLabelExpeditionReq, libVoiC_gf_MissionStatus("PKorhal01"));
    libVoiC_gf_PC_DebugProgressUpdateRequirementLabel(libVoiC_gv_pC_DebugProgressLabelCharReq, libVoiC_gf_MissionStatus("PShakuras01"));
    libVoiC_gf_PC_DebugProgressUpdateRequirementLabel(libVoiC_gv_pC_DebugProgressLabelPurifierReq, libVoiC_gf_MissionStatus("PPurifier01"));
    libVoiC_gf_PC_DebugProgressUpdateRequirementLabel(libVoiC_gv_pC_DebugProgressLabelZerusReq, libVoiC_gf_MissionStatus("PUlnar01"));
    libVoiC_gf_PC_DebugProgressUpdateRequirementLabel(libVoiC_gv_pC_DebugProgressLabelHybridReq, libVoiC_gf_MissionStatus("PPurifier02"));
    libVoiC_gf_PC_DebugProgressUpdateRequirementLabel(libVoiC_gv_zS_DebugProgressLabelValerianReq, libVoiC_gf_MissionStatus("PTaldarim01"));
    libVoiC_gf_PC_DebugProgressUpdateRequirementLabel(libVoiC_gv_zS_DebugProgressLabelValerianReq2, libVoiC_gf_MissionStatus("PMoebius01"));
    libVoiC_gf_PC_DebugProgressUpdateRequirementLabel(libVoiC_gv_zS_DebugProgressLabelKohalReq, libVoiC_gf_MissionStatus("PAiur04"));
}

void libVoiC_gf_PC_DebugProgressUpdateRequirementLabel (int lp_label, int lp_status) {
    // Automatic Variable Declarations
    int auto3A612039_val;

    // Implementation
    if ((lp_label != c_invalidDialogControlId)) {
        auto3A612039_val = lp_status;
        if (auto3A612039_val == libVoiC_ge_MissionStatus_Locked) {
            libNtve_gf_SetDialogItemColor(lp_label, Color(100.00, 0.00, 0.00), PlayerGroupAll());
        }
        else if (auto3A612039_val == libVoiC_ge_MissionStatus_Completed) {
            libNtve_gf_SetDialogItemColor(lp_label, Color(149*100/255,150*100/255,151*100/255), PlayerGroupAll());
        }
        else if (auto3A612039_val == libVoiC_ge_MissionStatus_Available) {
            libNtve_gf_SetDialogItemColor(lp_label, Color(19.61, 100.00, 19.61), PlayerGroupAll());
        }
        else {
        }
    }

}

void libVoiC_gf_PC_DebugProgressCloseDialog () {
    // Automatic Variable Declarations
    // Implementation
    if ((libVoiC_gv_pC_DebugProgressDialog == c_invalidDialogId)) {
        return ;
    }

    DialogDestroy(libVoiC_gv_pC_DebugProgressDialog);
    libVoiC_gv_pC_DebugProgressDialog = c_invalidDialogId;
    libVoiC_gf_ShowHideWorldCover(false, 0);
}

string libVoiC_gf_PC_DebugProgressMissionSoATierUnlocked (string lp_mission) {
    // Variable Declarations
    string lv_indexMission;
    string lv_indexPerkGroup;
    int lv_unlockCount;

    // Automatic Variable Declarations
    int auto7259797A_ae;
    int auto7259797A_ai;

    // Variable Initialization

    // Implementation
    if (((libVoiC_gf_MissionStatusCheck(lp_mission, libVoiC_ge_MissionStatus_Completed) == false) || (libVoiC_gf_MissionUnlocksSpearofAdunTier(lp_mission) == 0))) {
        return null;
    }

    auto7259797A_ae = libVoiC_gf_NumberOfMissions(2);
    auto7259797A_ai = 1;
    while (auto7259797A_ai <= auto7259797A_ae) {
        lv_indexMission = libVoiC_gv_pC_MissionCompleted[auto7259797A_ai];
        if ((libVoiC_gf_MissionUnlocksSpearofAdunTier(lv_indexMission) > 0)) {
            lv_unlockCount += 1;
            if ((lv_indexMission == lp_mission)) {
                return UserDataInstance("CampaignPerkGroup", lv_unlockCount);
            }

        }

        auto7259797A_ai += 1;
    }
    return null;
}

text libVoiC_gf_PC_DebugProgressMapName (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    if ((libVoiC_gv_pC_DebugProgressRetailMode == true)) {
        return libVoiC_gf_PC_CampaignMapName(lp_mission);
    }

    return StringToText(libVoiC_gf_PC_CampaignMapFile(lp_mission));
}

void libVoiC_gf_PC_DebugProgressDisplayDialog (string lp_currentMission, trigger lp_oKCallback, trigger lp_cancelCallback, bool lp_showRewards) {
    // Automatic Variable Declarations
    // Implementation
    if ((libVoiC_gv_pC_DebugProgressDialog != c_invalidDialogId)) {
        return ;
    }

    UISetWorldVisible(PlayerGroupAll(), false);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    libVCUI_gf_HideCampaignDirective();
    if ((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == false)) {
        libVoiC_gv_pC_DebugProgressRetailMode = true;
    }

    if ((libVoiC_gv_pC_DebugProgressRetailMode == true)) {
        libVoiC_gv_pC_DebugProgressBonusObjectiveLevel = libVoiC_ge_DebugProgressBonusObjectiveAmount_NoObjectives;
    }

    UISetCursorVisible(PlayerGroupAll(), true);
    libVoiC_gf_ShowHideWorldCover(true, 0);
    libVoiC_gv_pC_DebugProgressExitCallbackOK = lp_oKCallback;
    libVoiC_gv_pC_DebugProgressExitCallbackCancel = lp_cancelCallback;
    libVoiC_gv_pC_DebugProgressShowRewards = lp_showRewards;
    libVoiC_gv_pC_DebugProgressLastMission = libVoiC_gf_LastSuccessfulMission();
    libVoiC_gv_pC_DebugProgressLastCreditMission = null;
    libVoiC_gv_pC_DebugProgressCurrentMapBak = libVoiC_gf_CurrentMap();
    libVoiC_gf_PC_DebugProgressSaveStats();
    libVoiC_gf_PC_DebugProgressCreateDialog();
    libVoiC_gf_PC_DebugProgressUpdateDialog();
    DialogSetVisible(libVoiC_gv_pC_DebugProgressDialog, PlayerGroupAll(), true);
    TriggerEnable(libVoiC_gt_PC_DebugProgressMissionButtonClicked, true);
    TriggerEnable(libVoiC_gt_PC_DebugProgressLaunchMission, true);
    TriggerEnable(libVoiC_gt_PC_DebugProgressOK, true);
    TriggerEnable(libVoiC_gt_PC_DebugProgressCancel, true);
    TriggerEnable(libVoiC_gt_PC_DebugProgressReset, true);
    TriggerEnable(libVoiC_gt_PC_DebugProgressDirectSelectButtonClicked, true);
    TriggerEnable(libVoiC_gt_PC_DebugProgressDirectMissionButtonClicked, true);
    TriggerEnable(libVoiC_gt_PC_DebugProgressDirectLaunchMission, true);
    TriggerEnable(libVoiC_gt_PC_DebugProgressBonusObjectiveButtonClicked, true);
    while (!((libVoiC_gv_pC_DebugProgressDialog == c_invalidDialogId))) {
        Wait(0.25, c_timeReal);
    }
    TriggerEnable(libVoiC_gt_PC_DebugProgressMissionButtonClicked, false);
    TriggerEnable(libVoiC_gt_PC_DebugProgressLaunchMission, false);
    TriggerEnable(libVoiC_gt_PC_DebugProgressOK, false);
    TriggerEnable(libVoiC_gt_PC_DebugProgressCancel, false);
    TriggerEnable(libVoiC_gt_PC_DebugProgressReset, false);
    TriggerEnable(libVoiC_gt_PC_DebugProgressDirectSelectButtonClicked, false);
    TriggerEnable(libVoiC_gt_PC_DebugProgressDirectMissionButtonClicked, false);
    TriggerEnable(libVoiC_gt_PC_DebugProgressDirectLaunchMission, false);
    TriggerEnable(libVoiC_gt_PC_DebugProgressBonusObjectiveButtonClicked, false);
}

void libVoiC_gf_PC_DebugProgressSaveStats () {
    // Automatic Variable Declarations
    // Implementation
    BankLoad("ZDebugProgress", 1);
    libVoiC_gv_pC_DebugProgressBank = BankLastCreated();
    libVoiC_gf_PC_SaveTransitionVars(BankLastCreated(), null, libVoiC_gv_pCX_IsSimulation, libVoiC_gv_pCX_IsVictoryPlayAgain, false, false, false);
}

void libVoiC_gf_PC_DebugProgressRestoreStats () {
    // Variable Declarations
    string lv_indexMission;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libVoiC_gv_pC_DebugProgressBank == null)) {
        return ;
    }

    libVoiC_gf_PC_LoadTransitionVars(libVoiC_gv_pC_DebugProgressBank, null);
    libVoiC_gf_PC_SetCurrentMap("ZStoryLab");
    BankRemove(libVoiC_gv_pC_DebugProgressBank);
    libVoiC_gv_pC_DebugProgressBank = null;
}

void libVoiC_gf_PC_DebugProgressAdjustBonusObjectives () {
    // Variable Declarations
    string lv_indexMission;
    string lv_indexObjective;

    // Automatic Variable Declarations
    int autoD9A13FEE_ae;
    int autoD9A13FEE_ai;
    int autoE13612E9_ae;
    int autoE13612E9_ai;

    // Variable Initialization

    // Implementation
    libVoiC_gv_pC_DebugProgressObjectiveRoundUp = false;
    autoD9A13FEE_ae = libVoiC_gf_NumberOfMissions(2);
    autoD9A13FEE_ai = 1;
    while (autoD9A13FEE_ai <= autoD9A13FEE_ae) {
        lv_indexMission = libVoiC_gv_pC_MissionCompleted[autoD9A13FEE_ai];
        autoE13612E9_ae = CatalogFieldValueCount(c_gameCatalogMap, lv_indexMission, "ObjectiveArray", 1);
        autoE13612E9_ai = 1;
        while (autoE13612E9_ai <= autoE13612E9_ae) {
            lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "ObjectiveArray["+IntToString(autoE13612E9_ai-1)+"]", 1);
            autoE13612E9_ai = autoE13612E9_ai + 1;
            if ((libVoiC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
                libVoiC_gf_PC_DebugProgressSetObjectiveProgress(lv_indexObjective);
            }

        }
        autoD9A13FEE_ai += 1;
    }
    libVoiC_gf_PC_SoACalculateCurrency();
    TextExpressionSetToken("Param/Expression/lib_VoiC_331CB012", "A", IntToText(libVoiC_gf_NumberOfMissions(libVoiC_ge_MissionCountOptions_Completed)));
    TextExpressionSetToken("Param/Expression/lib_VoiC_331CB012", "B", IntToText(libVoiC_gf_NumberOfMissions(libVoiC_ge_MissionCountOptions_All)));
    TextExpressionSetToken("Param/Expression/lib_VoiC_331CB012", "C", IntToText(libVoiC_gf_NumberOfMissionArcsCompleted()));
    TextExpressionSetToken("Param/Expression/lib_VoiC_331CB012", "D", IntToText(libVoiC_gf_PC_SoACurrencyMax()));
    libNtve_gf_SetDialogItemText(libVoiC_gv_pC_DebugProgressLabelInfo, TextExpressionAssemble("Param/Expression/lib_VoiC_331CB012"), PlayerGroupAll());
}

void libVoiC_gf_PC_DebugProgressCompleteToMission (string lp_goalMission) {
    // Variable Declarations
    string lv_indexObjective;
    string[11][4] lv_arcMissions;
    int lv_currentArc;
    int lv_indexArc;
    int lv_indexArcMission;

    // Automatic Variable Declarations
    int auto4C6B796B_ae;
    const int auto4C6B796B_ai = 1;
    const int auto44DBE07C_ae = 3;
    const int auto44DBE07C_ai = 1;
    int auto01D194A4_ae;
    int auto01D194A4_ai;

    // Variable Initialization
    lv_currentArc = libVoiC_ge_PC_VoidArc_VoidArcNone;

    // Implementation
    lv_arcMissions[(libVoiC_ge_PC_VoidArc_VoidArcAuirA)][1] = "PAiur01";
    lv_arcMissions[(libVoiC_ge_PC_VoidArc_VoidArcAuirA)][2] = "PAiur02";
    lv_arcMissions[(libVoiC_ge_PC_VoidArc_VoidArcAuirA)][3] = "PAiur03";
    lv_arcMissions[(libVoiC_ge_PC_VoidArc_VoidArcKorhal)][1] = "PKorhal01";
    lv_arcMissions[(libVoiC_ge_PC_VoidArc_VoidArcKorhal)][2] = "PKorhal02";
    lv_arcMissions[(libVoiC_ge_PC_VoidArc_VoidArcShakuras)][1] = "PShakuras01";
    lv_arcMissions[(libVoiC_ge_PC_VoidArc_VoidArcShakuras)][2] = "PShakuras02";
    lv_arcMissions[(libVoiC_ge_PC_VoidArc_VoidArcPurifierA)][1] = "PPurifier01";
    lv_arcMissions[(libVoiC_ge_PC_VoidArc_VoidArcUlnar)][1] = "PUlnar01";
    lv_arcMissions[(libVoiC_ge_PC_VoidArc_VoidArcUlnar)][2] = "PUlnar02";
    lv_arcMissions[(libVoiC_ge_PC_VoidArc_VoidArcUlnar)][3] = "PUlnar03";
    lv_arcMissions[(libVoiC_ge_PC_VoidArc_VoidArcPurifierB)][1] = "PPurifier02";
    lv_arcMissions[(libVoiC_ge_PC_VoidArc_VoidArcPurifierB)][2] = "PPurifier03";
    lv_arcMissions[(libVoiC_ge_PC_VoidArc_VoidArcTaldarim)][1] = "PTaldarim01";
    lv_arcMissions[(libVoiC_ge_PC_VoidArc_VoidArcTaldarim)][2] = "PTaldarim02";
    lv_arcMissions[(libVoiC_ge_PC_VoidArc_VoidArcShadow)][1] = "PMoebius01";
    lv_arcMissions[(libVoiC_ge_PC_VoidArc_VoidArcAuirB)][1] = "PAiur04";
    lv_arcMissions[(libVoiC_ge_PC_VoidArc_VoidArcAuirB)][2] = "PAiur05";
    lv_arcMissions[(libVoiC_ge_PC_VoidArc_VoidArcAuirB)][3] = "PAiur06";
    lv_currentArc = libVoiC_ge_PC_VoidArc_VoidArcNone;
    libVoiC_gv_pC_DebugProgressObjectiveRoundUp = false;
    auto4C6B796B_ae = (libVoiC_ge_PC_VoidArc_VoidArcAuirB);
    lv_indexArc = 1;
    for ( ; ( (auto4C6B796B_ai >= 0 && lv_indexArc <= auto4C6B796B_ae) || (auto4C6B796B_ai < 0 && lv_indexArc >= auto4C6B796B_ae) ) ; lv_indexArc += auto4C6B796B_ai ) {
        lv_indexArcMission = 1;
        for ( ; ( (auto44DBE07C_ai >= 0 && lv_indexArcMission <= auto44DBE07C_ae) || (auto44DBE07C_ai < 0 && lv_indexArcMission >= auto44DBE07C_ae) ) ; lv_indexArcMission += auto44DBE07C_ai ) {
            if ((lv_arcMissions[lv_indexArc][lv_indexArcMission] == lp_goalMission)) {
                return ;
            }
            else if ((lv_arcMissions[lv_indexArc][lv_indexArcMission] != null)) {
                auto01D194A4_ae = CatalogFieldValueCount(c_gameCatalogMap, lv_arcMissions[lv_indexArc][lv_indexArcMission], "ObjectiveArray", 1);
                auto01D194A4_ai = 1;
                while (auto01D194A4_ai <= auto01D194A4_ae) {
                    lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, lv_arcMissions[lv_indexArc][lv_indexArcMission], "ObjectiveArray["+IntToString(auto01D194A4_ai-1)+"]", 1);
                    auto01D194A4_ai = auto01D194A4_ai + 1;
                    libVoiC_gf_PC_DebugProgressSetObjectiveProgress(lv_indexObjective);
                }
                libVoiC_gf_PC_CompleteMission(lv_arcMissions[lv_indexArc][lv_indexArcMission]);
                libVoiC_gf_PC_DebugProgressUpdateTutorialProgress(lv_arcMissions[lv_indexArc][lv_indexArcMission]);
                libVoiC_gf_PC_DebugProgressUpdateVariableCutsceneStates();
            }
        }
    }
}

void libVoiC_gf_PC_DebugProgressSetObjectiveProgress (string lp_missionObjective) {
    // Automatic Variable Declarations
    int autoB5021924_val;

    // Implementation
    if ((lp_missionObjective != null)) {
        if ((libVoiC_gf_MissionObjectiveIsPrimary(lp_missionObjective) == false)) {
            autoB5021924_val = libVoiC_gv_pC_DebugProgressBonusObjectiveLevel;
            if (autoB5021924_val == libVoiC_ge_DebugProgressBonusObjectiveAmount_NoObjectives) {
                libVoiC_gf_ZS_SetObjectiveProgressData(lp_missionObjective, 0);
                libVCMI_gf_ZS_SetMissionObjectiveState(lp_missionObjective, libVoiC_ge_MissionObjectiveState_Failed);
            }
            else if (autoB5021924_val == libVoiC_ge_DebugProgressBonusObjectiveAmount_HalfObjectives) {
                if ((libVoiC_gv_pC_DebugProgressObjectiveRoundUp == true)) {
                    libVoiC_gf_ZS_SetObjectiveProgressData(lp_missionObjective, FixedToInt(Ceiling((libVoiC_gf_MissionObjectiveItemCount(lp_missionObjective) / 2.0))));
                    libVoiC_gv_pC_DebugProgressObjectiveRoundUp = false;
                    libVCMI_gf_ZS_SetMissionObjectiveState(lp_missionObjective, libVoiC_ge_MissionObjectiveState_Available);
                }
                else {
                    libVoiC_gf_ZS_SetObjectiveProgressData(lp_missionObjective, FixedToInt(Floor((libVoiC_gf_MissionObjectiveItemCount(lp_missionObjective) / 2.0))));
                    libVoiC_gv_pC_DebugProgressObjectiveRoundUp = true;
                    libVCMI_gf_ZS_SetMissionObjectiveState(lp_missionObjective, libVoiC_ge_MissionObjectiveState_Available);
                }
            }
            else if (autoB5021924_val == libVoiC_ge_DebugProgressBonusObjectiveAmount_FullObjectives) {
                libVoiC_gf_ZS_SetObjectiveProgressData(lp_missionObjective, libVoiC_gf_MissionObjectiveItemCount(lp_missionObjective));
                libVCMI_gf_ZS_SetMissionObjectiveState(lp_missionObjective, libVoiC_ge_MissionObjectiveState_Completed);
            }
            else {
            }
        }
        else {
            libVoiC_gf_ZS_SetObjectiveProgressData(lp_missionObjective, libVoiC_gf_MissionObjectiveItemCount(lp_missionObjective));
            libVCMI_gf_ZS_SetMissionObjectiveState(lp_missionObjective, libVoiC_ge_MissionObjectiveState_Completed);
        }
    }

}

void libVoiC_gf_PC_DebugProgressUpdateTutorialProgress (string lp_currentMission) {
    // Automatic Variable Declarations
    // Implementation
    libVoiC_gf_PC_UpdateWeaponArmorUpgrades(1);
    if ((TechTreeUpgradeIsAllowed(1, "ProtossAirWeaponsLevel1") == true) && (libVoiC_gv_pCX_UpgradesTaught == false)) {
        libVoiC_gv_pCX_UpgradesTaught = true;
    }

    if (((libVoiC_gf_MissionStatusCheck("PKorhal01", libVoiC_ge_MissionStatus_Completed) == true) || (libVoiC_gf_MissionStatusCheck("PShakuras01", libVoiC_ge_MissionStatus_Completed) == true))) {
        libVoiC_gf_SetStoryScenePlayed("PreserverIntro", true);
        UserDataSetInt("StoryStates", "Army UI Visited", "Value", 1, 1);
        UserDataSetInt("StoryStates", "SoA OrbitalStrike Played", "Value", 1, 1);
    }

    if (((libVoiC_gf_MissionStatusCheck("PKorhal02", libVoiC_ge_MissionStatus_Completed) == true) || (libVoiC_gf_MissionStatusCheck("PShakuras02", libVoiC_ge_MissionStatus_Completed) == true))) {
        libVoiC_gf_SetStoryScenePlayed("ShipRoomIntro", true);
        UserDataSetInt("StoryStates", "Ship UI Visited", "Value", 1, 1);
    }

    if ((libVoiC_gf_MissionStatusCheck("PPurifier02", libVoiC_ge_MissionStatus_Completed) == true)) {
        libVoiC_gf_SetStoryScenePlayed("CoreUlnar03Post", true);
    }

}

void libVoiC_gf_PC_DebugProgressUpdateVariableCutsceneStates () {
    // Automatic Variable Declarations
    // Implementation
    if ((libVoiC_gf_MissionStatusCheck("PPurifier02", libVoiC_ge_MissionStatus_Completed) == true)) {
        libVoiC_gf_SetStoryScenePlayed("CoreUlnar03Post", true);
    }

}

int libVoiC_gf_PC_DebugCutsceneFromName (string lp_name) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoBD0AA8BC_ae = 5;
    const int autoBD0AA8BC_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (autoBD0AA8BC_ai >= 0 && lv_index <= autoBD0AA8BC_ae) || (autoBD0AA8BC_ai < 0 && lv_index >= autoBD0AA8BC_ae) ) ; lv_index += autoBD0AA8BC_ai ) {
        if ((libVoiC_gv_pC_DebugCutsceneNames[lv_index] == lp_name)) {
            return libVoiC_gv_pC_DebugCutscenes[lv_index];
        }

    }
    return c_cutsceneNone;
}

trigger auto_libVoiC_gf_CampaignAwardAchievement_Trigger = null;
string auto_libVoiC_gf_CampaignAwardAchievement_lp_achievement;
int auto_libVoiC_gf_CampaignAwardAchievement_lp_player;

void libVoiC_gf_CampaignAwardAchievement (string lp_achievement, int lp_player) {
    auto_libVoiC_gf_CampaignAwardAchievement_lp_achievement = lp_achievement;
    auto_libVoiC_gf_CampaignAwardAchievement_lp_player = lp_player;

    if (auto_libVoiC_gf_CampaignAwardAchievement_Trigger == null) {
        auto_libVoiC_gf_CampaignAwardAchievement_Trigger = TriggerCreate("auto_libVoiC_gf_CampaignAwardAchievement_TriggerFunc");
    }

    TriggerExecute(auto_libVoiC_gf_CampaignAwardAchievement_Trigger, false, false);
}

bool auto_libVoiC_gf_CampaignAwardAchievement_TriggerFunc (bool testConds, bool runActions) {
    string lp_achievement = auto_libVoiC_gf_CampaignAwardAchievement_lp_achievement;
    int lp_player = auto_libVoiC_gf_CampaignAwardAchievement_lp_player;

    // Variable Declarations
    int lv_achievementDialog;
    const fixed lv_durationRequired = 6.0;
    fixed lv_duration;
    int lv_panel;
    string lv_dataTableName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_achievementDialog = c_invalidDialogId;
    lv_panel = c_invalidDialogControlId;
    lv_dataTableName = "";

    // Implementation
    AchievementAward(1, lp_achievement);
    if (((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == false) || (GameIsOnline() == true) || (libVoiC_gv_pC_AchievementDebugToastSuppressed == true) || (libVoiC_gf_CampaignDebugModeIsOn("NoBattleNet") == false))) {
        return true;
    }

    libVoiC_gv_pC_AchievementsDisplayed += 1;
    lv_dataTableName = ("ACHIEVEOPENED_" + (lp_achievement));
    if ((DataTableValueExists(true, lv_dataTableName) == true)) {
        return true;
    }

    DataTableSetString(true, lv_dataTableName, "1");
    while (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
        Wait(0.25, c_timeGame);
    }
    TextExpressionSetToken("Param/Expression/lib_VoiC_0C185A62", "A", StringExternal(CatalogFieldValueGet(c_gameCatalogAchievement, lp_achievement, "Name", c_playerAny)));
    TextExpressionSetToken("Param/Expression/lib_VoiC_0C185A62", "B", StringToText((lp_achievement)));
    TextExpressionSetToken("Param/Expression/lib_VoiC_0C185A62", "C", StringExternal(CatalogFieldValueGet(c_gameCatalogAchievement, lp_achievement, "Description", c_playerAny)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_VoiC_0C185A62"), false);
    DialogCreate(1000, 400, c_anchorRight, -200, (libVoiC_gv_pC_AchievementPosition + 200), true);
    libVoiC_gv_pC_AchievementPosition -= 125;
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    lv_achievementDialog = DialogLastCreated();
    DialogSetRenderPriority(lv_achievementDialog, 550);
    DialogSetImageVisible(lv_achievementDialog, false);
    DialogControlCreateFromTemplate(lv_achievementDialog, c_triggerControlTypePanel, "LotV_Debug/AchievementFrameDebugTemplate");
    lv_panel = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    DialogControlHookup(lv_panel, c_triggerControlTypeLabel, "NameLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal(CatalogFieldValueGet(c_gameCatalogAchievement, lp_achievement, "Name", 1)), PlayerGroupAll());
    DialogControlHookup(lv_panel, c_triggerControlTypeLabel, "DescriptionLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal(CatalogFieldValueGet(c_gameCatalogAchievement, lp_achievement, "Description", 1)), PlayerGroupAll());
    DialogControlHookup(lv_panel, c_triggerControlTypeImage, "IconImage");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_tipicon_story-archives.dds", PlayerGroupAll());
    DialogControlHookup(lv_panel, c_triggerControlTypeLabel, "PointsLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(CatalogFieldValueGet(c_gameCatalogAchievement, lp_achievement, "Points", 1)), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(lv_achievementDialog, 200, 50, c_anchorTop, 0, 100, StringExternal("Param/Value/lib_VoiC_7C8EDD75"), Color(100.00, 0.00, 0.00), false, 2.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 60.0);
    while (true) {
        if ((libNtve_gf_PlayerInCinematicMode(1) == true)) {
            DialogSetVisible(lv_achievementDialog, PlayerGroupAll(), false);
        }
        else {
            DialogSetVisible(lv_achievementDialog, PlayerGroupAll(), true);
        }
        Wait(0.25, c_timeGame);
        lv_duration += 0.25;
        if ((lv_duration >= lv_durationRequired)) {
            break;
        }

    }
    DialogDestroy(lv_achievementDialog);
    libVoiC_gv_pC_AchievementsDisplayed -= 1;
    if ((libVoiC_gv_pC_AchievementsDisplayed <= 0)) {
        libVoiC_gv_pC_AchievementPosition = 0;
    }

    return true;
}

void libVoiC_gf_PC_AchievementCategorySet () {
    // Automatic Variable Declarations
    // Implementation
    if ((libVoiC_gf_PC_CampaignMapTypeCheck(libVoiC_gf_CurrentMap(), c_mapKindMission) == true)) {
        AchievementPanelSetCategory(PlayerGroupAll(), UserDataGetGameLink("Maps", libVoiC_gf_PC_MapUserDataInstance(libVoiC_gf_CurrentMap()), "Achievements", 1));
    }
    else {
        AchievementPanelSetCategory(PlayerGroupAll(), "PStoryTalk");
    }
}

void libVoiC_gf_PC_AchievementAwardEarned () {
    // Variable Declarations
    bool lv_allBonusesComplete;
    string lv_indexMission;

    // Automatic Variable Declarations
    int auto4A9584B2_ae;
    int auto4A9584B2_ai;

    // Variable Initialization

    // Implementation
    libVoiC_gv_pC_AchievementDebugToastSuppressed = true;
    auto4A9584B2_ae = CatalogEntryCount(c_gameCatalogMap);
    auto4A9584B2_ai = 1;
    while (auto4A9584B2_ai <= auto4A9584B2_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto4A9584B2_ai);
        auto4A9584B2_ai = auto4A9584B2_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((libVoiC_gf_MissionStatusCheck(lv_indexMission, libVoiC_ge_MissionStatus_Completed) == true)) {
                libVoiC_gf_PC_AchievementAwardMission(lv_indexMission);
            }

        }    
    }
    libVoiC_gf_PC_SoACalculateCurrency();
    AchievementTermQuantitySet(1, "SolarPowered50", libVoiC_gf_PC_SoACurrencyMax());
    AchievementTermQuantitySet(1, "SolarPowered100", libVoiC_gf_PC_SoACurrencyMax());
    AchievementTermQuantitySet(1, "SolarPowered150", libVoiC_gf_PC_SoACurrencyMax());
    AchievementTermQuantitySet(1, "SolarPowered200", libVoiC_gf_PC_SoACurrencyMax());
    AchievementTermQuantitySet(1, "SolarPowered250", libVoiC_gf_PC_SoACurrencyMax());
    AchievementTermQuantitySet(1, "SolarPowered300", libVoiC_gf_PC_SoACurrencyMax());
    libVoiC_gv_pC_AchievementDebugToastSuppressed = false;
}

void libVoiC_gf_PC_AchievementAwardMission (string lp_completedMission) {
    // Variable Declarations
    bool lv_allBonusesComplete;
    string lv_indexObjective;

    // Automatic Variable Declarations
    int auto98E993B0_ae;
    int auto98E993B0_ai;

    // Variable Initialization

    // Implementation
    if ((lp_completedMission == "PAiur06")) {
        libVoiC_gf_CampaignAwardAchievement("LegacyoftheVoid", 1);
        libVoiC_gf_CampaignAwardAchievement("VoidGlueFilterGauntletOff", 1);
    }

    if ((lp_completedMission == "SC2Epilogue03")) {
        libVoiC_gf_CampaignAwardAchievement("Story_Meta_PEpilogue_Complete", 1);
    }

    if ((lp_completedMission == "PAiur02")) {
        libVoiC_gf_CampaignAwardAchievement("VoidGlueFilterCord", 1);
    }

    if ((lp_completedMission == "PAiur03")) {
        libVoiC_gf_CampaignAwardAchievement("VoidGlueFilterGauntletOn", 1);
    }

    libVoiC_gf_CampaignAwardAchievement(UserDataGetGameLink("Maps", libVoiC_gf_PC_MapUserDataInstance(lp_completedMission), "Achievements", 1), 1);
    if ((UserDataGetGameLink("Maps", libVoiC_gf_PC_MapUserDataInstance(lp_completedMission), "CompletionAchievementTerms", 1) != null)) {
        AchievementTermQuantitySet(1, UserDataGetGameLink("Maps", libVoiC_gf_PC_MapUserDataInstance(lp_completedMission), "CompletionAchievementTerms", 1), 1);
    }

    if ((UserDataGetGameLink("Maps", libVoiC_gf_PC_MapUserDataInstance(lp_completedMission), "CompletionAchievementTerms", 2) != null) && ((libVoiC_gf_MissionCompletedOnDifficulty(lp_completedMission, 2) == true) || (libVoiC_gf_MissionCompletedOnDifficulty(lp_completedMission, 3) == true) || (libVoiC_gf_MissionCompletedOnDifficulty(lp_completedMission, 4) == true))) {
        AchievementTermQuantitySet(1, UserDataGetGameLink("Maps", libVoiC_gf_PC_MapUserDataInstance(lp_completedMission), "CompletionAchievementTerms", 2), 1);
    }

    if (((libVoiC_gf_MissionCompletedOnDifficulty(lp_completedMission, 3) == true) || (libVoiC_gf_MissionCompletedOnDifficulty(lp_completedMission, 4) == true)) && (UserDataGetGameLink("Maps", libVoiC_gf_PC_MapUserDataInstance(lp_completedMission), "CompletionAchievementTerms", 3) != null)) {
        AchievementTermQuantitySet(1, UserDataGetGameLink("Maps", libVoiC_gf_PC_MapUserDataInstance(lp_completedMission), "CompletionAchievementTerms", 3), 1);
    }

    if ((libVoiC_gf_MissionCompletedOnDifficulty(lp_completedMission, 4) == true) && (UserDataGetGameLink("Maps", libVoiC_gf_PC_MapUserDataInstance(lp_completedMission), "CompletionAchievementTerms", 4) != null)) {
        AchievementTermQuantitySet(1, UserDataGetGameLink("Maps", libVoiC_gf_PC_MapUserDataInstance(lp_completedMission), "CompletionAchievementTerms", 4), 1);
    }

    lv_allBonusesComplete = true;
    auto98E993B0_ae = CatalogFieldValueCount(c_gameCatalogMap, lp_completedMission, "ObjectiveArray", 1);
    auto98E993B0_ai = 1;
    while (auto98E993B0_ai <= auto98E993B0_ae) {
        lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, lp_completedMission, "ObjectiveArray["+IntToString(auto98E993B0_ai-1)+"]", 1);
        auto98E993B0_ai = auto98E993B0_ai + 1;
        if ((libVoiC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false) && (libVoiC_gf_MissionObjectiveStateCheck(lv_indexObjective, libVoiC_ge_MissionObjectiveState_Completed) == false)) {
            lv_allBonusesComplete = false;
            break;
        }

    }
    if ((lv_allBonusesComplete == true)) {
        AchievementTermQuantitySet(1, UserDataGetGameLink("Maps", libVoiC_gf_PC_MapUserDataInstance(lp_completedMission), "BonusAchievementTerm", 1), 1);
    }

}

void libVoiC_gf_PC_AchievementAwardArmy () {
    // Variable Declarations
    string lv_indexArmyCategory;

    // Automatic Variable Declarations
    int auto5AA06F65_ae;
    int auto5AA06F65_ai;

    // Variable Initialization

    // Implementation
    auto5AA06F65_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto5AA06F65_ai = 1;
    while (auto5AA06F65_ai <= auto5AA06F65_ae) {
        lv_indexArmyCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto5AA06F65_ai);
        if ((libVoiC_gf_PC_ArmyCategoryPurchasedUnit(lv_indexArmyCategory) != null)) {
            AchievementTermQuantitySet(1, UserDataGetGameLink("TechUnit", libVoiC_gf_PC_TechUnitOfArmyCategory(lv_indexArmyCategory), "AchievementTermUpgrade", 1), 1);
        }

        auto5AA06F65_ai = auto5AA06F65_ai + 1;
    }
}

int libVoiC_gf_PC_DifficultyIndex (int lp_difficulty) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto35BA92F5_val;

    // Variable Initialization

    // Implementation
    auto35BA92F5_val = lp_difficulty;
    if (auto35BA92F5_val == 1) {
        return 1;
    }
    else if (auto35BA92F5_val == 2) {
        return 2;
    }
    else if (auto35BA92F5_val == 3) {
        return 3;
    }
    else if (auto35BA92F5_val == 4) {
        return 4;
    }
    else {
        return 0;
    }
}

int libVoiC_gf_PC_DifficultyFromIndex (int lp_index) {
    // Automatic Variable Declarations
    int auto3A457F69_val;

    // Implementation
    auto3A457F69_val = lp_index;
    if (auto3A457F69_val == libVoiC_gf_PC_DifficultyIndex(1)) {
        return 1;
    }
    else if (auto3A457F69_val == libVoiC_gf_PC_DifficultyIndex(2)) {
        return 2;
    }
    else if (auto3A457F69_val == libVoiC_gf_PC_DifficultyIndex(3)) {
        return 3;
    }
    else if (auto3A457F69_val == libVoiC_gf_PC_DifficultyIndex(4)) {
        return 4;
    }
    else {
        return 2;
    }
}

void libVoiC_gf_PC_SetCampaignDifficulty (int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    libVoiC_gv_pCX_CampaignDifficulty = lp_difficulty;
}

void libVoiC_gf_DispatchCampaignEvent (int lp_event, string lp_param1, string lp_param2, bool lp_waitOption) {
    // Automatic Variable Declarations
    // Implementation
    if ((libVoiC_gv_pC_EventCallback[(lp_event)] != null)) {
        libVoiC_gv_pC_EventParameter[(lp_event)][1] = lp_param1;
        libVoiC_gv_pC_EventParameter[(lp_event)][2] = lp_param2;
        libVoiC_gv_pC_EventIsRunning = true;
        TriggerExecute(libVoiC_gv_pC_EventCallback[(lp_event)], true, lp_waitOption);
        libVoiC_gv_pC_EventIsRunning = false;
    }

}

void libVoiC_gf_RegisterCampaignEvent (int lp_event, trigger lp_callback) {
    // Automatic Variable Declarations
    // Implementation
    libVoiC_gv_pC_EventCallback[(lp_event)] = lp_callback;
}

string libVoiC_gf_CampaignEventParameter (int lp_event, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_index < 1) || (lp_index > 2))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_VoiC_6F26B79B"), true);
        return "<Error>";
    }

    return libVoiC_gv_pC_EventParameter[(lp_event)][lp_index];
}

void libVoiC_gf_CampaignMissionStarts (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libVoiC_gv_pCC_EVENT_MISSIONSTART);
}

void libVoiC_gf_RegisterFootageRecording (trigger lp_callback) {
    // Automatic Variable Declarations
    // Implementation
    libVoiC_gv_zS_FootageRecordingCallback = lp_callback;
    if ((GameIsTestMap(true) == true)) {
        libVoiC_gf_ZS_FootageRecording();
        ConsoleCommand("exit", true, true);
    }

}

void libVoiC_gf_ZS_FootageRecording () {
    // Automatic Variable Declarations
    // Implementation
    if (((libVoiC_gv_zS_FootageRecordingCallback == null) || (libVoiC_gf_PC_CampaignMapTypeCheck(libVoiC_gf_CurrentMap(), c_mapKindMission) == false))) {
        return ;
    }

    TriggerExecute(libVoiC_gv_zS_FootageRecordingCallback, true, true);
}

void libVoiC_gf_PS_UpdatePlanetData () {
    // Variable Declarations
    string lv_indexMission;
    string lv_indexLocation;

    // Automatic Variable Declarations
    int auto5AC394E2_ae;
    int auto5AC394E2_ai;
    int autoFD1B4A98_ae;
    int autoFD1B4A98_ai;

    // Variable Initialization

    // Implementation
    if ((libVoiC_gf_CurrentLocation() == null)) {
        if ((libVoiC_gf_PC_CampaignInEpilogue() == true)) {
            libVoiC_gf_PC_SetLocationActive("EpilogueArc");
        }
        else {
            libVoiC_gf_PC_SetLocationActive("AiurA");
        }
    }

    auto5AC394E2_ae = CatalogEntryCount(c_gameCatalogLocation);
    auto5AC394E2_ai = 1;
    while (auto5AC394E2_ai <= auto5AC394E2_ae) {
        lv_indexLocation = CatalogEntryGet(c_gameCatalogLocation, auto5AC394E2_ai);
        libVoiC_gf_SetPlanetAvailable(lv_indexLocation, false);
        auto5AC394E2_ai = auto5AC394E2_ai + 1;
    }
    autoFD1B4A98_ae = CatalogEntryCount(c_gameCatalogMap);
    autoFD1B4A98_ai = 1;
    while (autoFD1B4A98_ai <= autoFD1B4A98_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoFD1B4A98_ai);
        autoFD1B4A98_ai = autoFD1B4A98_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((libVoiC_gf_MissionStatusCheck(lv_indexMission, libVoiC_ge_MissionStatus_Available) == true)) {
                libVoiC_gf_SetPlanetAvailable(libVoiC_gf_StoryMapPlanet(lv_indexMission), true);
            }

        }    
    }
}

void libVoiC_gf_PC_SetLocationActive (string lp_planet) {
    // Variable Declarations
    string lv_indexPlanet;

    // Automatic Variable Declarations
    int auto932100AC_ae;
    int auto932100AC_ai;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_VoiC_542640F3", "A", StringToText((lp_planet)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_VoiC_542640F3"), false);
    libVoiC_gv_pCX_CurrentLocation = lp_planet;
    auto932100AC_ae = CatalogEntryCount(c_gameCatalogLocation);
    auto932100AC_ai = 1;
    while (auto932100AC_ai <= auto932100AC_ae) {
        lv_indexPlanet = CatalogEntryGet(c_gameCatalogLocation, auto932100AC_ai);
        UserDataSetInt("Locations", libVoiC_gf_PC_LocationUserData(lv_indexPlanet), "Active", 1, 0);
        auto932100AC_ai = auto932100AC_ai + 1;
    }
    UserDataSetInt("Locations", libVoiC_gf_PC_LocationUserData(lp_planet), "Active", 1, 1);
    if ((libVoiC_gf_PC_CampaignMapTypeCheck(libVoiC_gf_CurrentMap(), c_mapKindStory) == true) && (libVoiC_gf_MissionAvailableOnPlanet(lp_planet) == false)) {
        UserDataSetInt("StoryStates", "Can Travel", "Value", 1, 1);
    }
    else {
        UserDataSetInt("StoryStates", "Can Travel", "Value", 1, 0);
    }
}

string libVoiC_gf_PC_LocationUserData (string lp_planet) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogLocation, (lp_planet), "UserReference", c_playerAny));
}

string libVoiC_gf_PC_LocationDataString (string lp_planet) {
    // Automatic Variable Declarations
    // Implementation
    return ("PS_P_" + (lp_planet));
}

string libVoiC_gf_PC_StoryMapBankID2 (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_map);
}

string libVoiC_gf_PC_LocationUnit (string lp_location) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetUnit("Locations", libVoiC_gf_PC_LocationUserData(lp_location), "Unit", 1);
}

string libVoiC_gf_PC_LocationContactPortrait (string lp_location) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogLocation, (lp_location), "ContactModel", 1));
}

text libVoiC_gf_PC_LocationCategoriesFluffText (string lp_location) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("Locations", libVoiC_gf_PC_LocationUserData(lp_location), "UIFluffCategories", 1);
}

text libVoiC_gf_PC_LocationDataFluffText (string lp_location) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("Locations", libVoiC_gf_PC_LocationUserData(lp_location), "UIFluffData", 1);
}

string libVoiC_gf_PC_LocationLoadingImage (string lp_loadingLocation) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetImagePath("Locations", libVoiC_gf_PC_LocationUserData(lp_loadingLocation), "LoadingImage", 1);
}

void libVoiC_gf_SetPlanetAvailable (string lp_planet, bool lp_available) {
    // Automatic Variable Declarations
    // Implementation
    UserDataSetInt("Locations", libVoiC_gf_PC_LocationUserData(lp_planet), "Available", 1, BoolToInt(lp_available));
}

text libVoiC_gf_StoryPlanetName (string lp_planet) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogLocation, (lp_planet), "Name", c_playerAny));
}

text libVoiC_gf_StoryUIPlanetName (string lp_planet) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("Locations", libVoiC_gf_PC_LocationUserData(lp_planet), "StoryUI Name", 1);
}

bool libVoiC_gf_StoryPlanetIsAvailable (string lp_planet) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("Locations", libVoiC_gf_PC_LocationUserData(lp_planet), "Available", 1) == 1);
}

string libVoiC_gf_StoryPlanetNonmissionPitch (string lp_planet) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Locations", libVoiC_gf_PC_LocationUserData(lp_planet), "Pitch", 1);
}

bool libVoiC_gf_MissionAvailableOnPlanet (string lp_planet) {
    // Variable Declarations
    string lv_mission;

    // Automatic Variable Declarations
    int auto11EF2CBB_ae;
    int auto11EF2CBB_ai;

    // Variable Initialization

    // Implementation
    auto11EF2CBB_ae = CatalogEntryCount(c_gameCatalogMap);
    auto11EF2CBB_ai = 1;
    while (auto11EF2CBB_ai <= auto11EF2CBB_ae) {
        lv_mission = CatalogEntryGet(c_gameCatalogMap, auto11EF2CBB_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_mission, "Kind", 1) == "Mission" && libVoiC_gf_StoryMapPlanet(lv_mission) == lp_planet) {
            if ((libVoiC_gf_MissionStatusCheck(lv_mission, libVoiC_ge_MissionStatus_Available) == true)) {
                return true;
            }

        }
        auto11EF2CBB_ai = auto11EF2CBB_ai + 1;
    }
    return false;
}

string libVoiC_gf_CurrentLocation () {
    // Automatic Variable Declarations
    // Implementation
    return libVoiC_gv_pCX_CurrentLocation;
}

string libVoiC_gf_PC_LocationCutsceneFilter (string lp_location) {
    // Automatic Variable Declarations
    string auto824085BB_val;

    // Implementation
    auto824085BB_val = lp_location;
    if (auto824085BB_val == "Korhal") {
        return "Korhal";
    }
    else if (auto824085BB_val == "Shakuras") {
        return "Shakuras";
    }
    else if (auto824085BB_val == "AiurB") {
        return "FinalArc";
    }
    else if (auto824085BB_val == "PurifierA") {
        return "PurifierA";
    }
    else if (auto824085BB_val == "PurifierB") {
        return "PurifierB";
    }
    else if (auto824085BB_val == "Ulnar") {
        return "Ulnar";
    }
    else if (auto824085BB_val == "Moebius") {
        return "Moebius";
    }
    else if (auto824085BB_val == "Taldarim") {
        return "Taldarim";
    }
    else {
    }
    return null;
}

string libVoiC_gf_CurrentMap () {
    // Automatic Variable Declarations
    // Implementation
    return libVoiC_gv_pC_CurrentMap;
}

string libVoiC_gf_PC_CampaignMapLoadingScreenImage (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return "Assets\\Textures\\blank.dds";
    }

    if (((lp_map == "PStory01") || (lp_map == "EpilogueStory01")) && (libVoiC_gf_PC_LocationLoadingImage(libVoiC_gf_CurrentLocation()) != null)) {
        return libVoiC_gf_PC_LocationLoadingImage(libVoiC_gf_CurrentLocation());
    }

    return (CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "LoadingImage", c_playerAny));
}

text libVoiC_gf_PC_CampaignMapLoadingScreenTitle (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return StringExternal("Param/Value/lib_VoiC_F411053C");
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "Name", 1));
}

text libVoiC_gf_PC_CampaignMapLoadingScreenSubtitle (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return StringExternal("Param/Value/lib_VoiC_8A2E17CD");
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "LoadingSubtitle", 1));
}

text libVoiC_gf_PC_CampaignMapLoadingScreenBody (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return StringExternal("Param/Value/lib_VoiC_E4A4B715");
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "LoadingBody", 1));
}

text libVoiC_gf_PC_CampaignMapLoadingScreenVictoryTitle (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return StringExternal("Param/Value/lib_VoiC_E6822961");
    }

    return UserDataGetText("Maps", libVoiC_gf_PC_MapUserDataInstance(lp_map), "LoadingScreenVictoryTitle", 1);
}

text libVoiC_gf_PC_CampaignMapLoadingScreenVictorySubtitle (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return StringExternal("Param/Value/lib_VoiC_814BFDFA");
    }

    return UserDataGetText("Maps", libVoiC_gf_PC_MapUserDataInstance(lp_map), "LoadingScreenVictorySubtitle", 1);
}

text libVoiC_gf_PC_CampaignMapLoadingScreenVictoryBody (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return StringExternal("Param/Value/lib_VoiC_08299A3C");
    }

    return UserDataGetText("Maps", libVoiC_gf_PC_MapUserDataInstance(lp_map), "LoadingScreenVictoryBody", 1);
}

string libVoiC_gf_PC_CampaignMapLoadingScreenVictoryImage (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_map == null) || (libVoiC_gf_PC_CampaignMapTypeCheck(lp_map, c_mapKindStory) == true))) {
        return "Assets\\Textures\\blank.dds";
    }

    return UserDataGetImagePath("Maps", libVoiC_gf_PC_MapUserDataInstance(lp_map), "LoadingScreenVictoryImage", 1);
}

string libVoiC_gf_PC_CampaignMapMissionArchiveBackgroundImage (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return libVoiC_gf_PC_CampaignMapLoadingScreenImage(lp_map);
}

bool libVoiC_gf_PC_CampaignMapTypeCheck (string lp_map, int lp_mapType) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return false;
    }

    return (CatalogFieldValueGetAsInt(c_gameCatalogMap, (lp_map), "Kind", 1) == (lp_mapType));
}

text libVoiC_gf_PC_CampaignMapDescription (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return null;
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "Description", 1));
}

string libVoiC_gf_PC_CampaignMapFile (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return "";
    }

    return CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "File", 1);
}

text libVoiC_gf_PC_CampaignMapName (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return StringExternal("Param/Value/lib_VoiC_C28FFE1C");
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "Name", 1));
}

text libVoiC_gf_PC_CampaignMapHelp (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_map == null) || (libVoiC_gf_PC_CampaignMapTypeCheck(lp_map, c_mapKindStory) == true))) {
        return StringExternal("Param/Value/lib_VoiC_D0D2756E");
    }
    if ((((lp_map == "PKorhal01") && (libVoiC_gf_MissionStatusCheck("PShakuras01", libVoiC_ge_MissionStatus_Completed) == true)) || ((lp_map == "PShakuras01") && (libVoiC_gf_MissionStatusCheck("PKorhal01", libVoiC_ge_MissionStatus_Completed) == true)))) {
        return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "LoadingHelpAlternate", 1));
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "LoadingHelp", 1));
}

text libVoiC_gf_StoryMapHelp2 (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, lp_map, "Summary", 1));
}

string libVoiC_gf_PC_CampaignMapContactPortrait (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "ContactModelLink", 1));
}

string libVoiC_gf_PC_CampaignMapContactActor (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "ContactActor", 1));
}

text libVoiC_gf_PC_CampaignMapContactName (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return StringExternal("Param/Value/lib_VoiC_FD131225");
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "ContactNameText", 1));
}

text libVoiC_gf_PC_CampaignMapContactTitle (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return StringExternal("Param/Value/lib_VoiC_34BF09EB");
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "ContactTitle", 1));
}

bool libVoiC_gf_PC_CampaignMapIsEpilogue (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_map == "SC2Epilogue01") || (lp_map == "SC2Epilogue02") || (lp_map == "SC2Epilogue03") || (lp_map == "EpilogueStory01"))) {
        return true;
    }

    return false;
}

string libVoiC_gf_StoryMapPlanet (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "Location", c_playerAny));
}

int libVoiC_gf_PC_MissionRewardsBonusPossible (string lp_map, string lp_type) {
    // Variable Declarations
    string lv_indexObjective;
    int lv_count;

    // Automatic Variable Declarations
    int autoC7540D72_ae;
    int autoC7540D72_ai;

    // Variable Initialization

    // Implementation
    autoC7540D72_ae = CatalogFieldValueCount(c_gameCatalogMap, lp_map, "ObjectiveArray", 1);
    autoC7540D72_ai = 1;
    while (autoC7540D72_ai <= autoC7540D72_ae) {
        lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, lp_map, "ObjectiveArray["+IntToString(autoC7540D72_ai-1)+"]", 1);
        autoC7540D72_ai = autoC7540D72_ai + 1;
        lv_count += libVoiC_gf_MissionObjectiveRewardsAvailable2(lv_indexObjective, lp_type);
    }
    return lv_count;
}

int libVoiC_gf_PC_MissionRewardsBonusEarned (string lp_map, string lp_type) {
    // Variable Declarations
    string lv_indexObjective;
    int lv_count;

    // Automatic Variable Declarations
    int autoAB93CCE4_ae;
    int autoAB93CCE4_ai;

    // Variable Initialization

    // Implementation
    autoAB93CCE4_ae = CatalogFieldValueCount(c_gameCatalogMap, lp_map, "ObjectiveArray", 1);
    autoAB93CCE4_ai = 1;
    while (autoAB93CCE4_ai <= autoAB93CCE4_ae) {
        lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, lp_map, "ObjectiveArray["+IntToString(autoAB93CCE4_ai-1)+"]", 1);
        autoAB93CCE4_ai = autoAB93CCE4_ai + 1;
        lv_count += libVoiC_gf_MissionObjectiveRewardsEarned(lv_indexObjective, lp_type);
    }
    return lv_count;
}

int libVoiC_gf_PC_MissionRewardsArmy (string lp_map) {
    // Variable Declarations
    string lv_userInstance;
    int lv_rewardAmount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_userInstance = libVoiC_gf_PC_MapUserDataInstance(lp_map);
    lv_rewardAmount = UserDataGetInt("Maps", lv_userInstance, "RewardShip", 1);
    lv_rewardAmount += libVoiC_gf_PC_SoAShipRewardSpecialEarned(lp_map);
    return lv_rewardAmount;
}

int libVoiC_gf_PC_SoAShipRewardSpecialEarned (string lp_mission) {
    // Variable Declarations
    string lv_userInstance;
    int lv_extraPower;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_userInstance = libVoiC_gf_PC_MapUserDataInstance(lp_mission);
    if ((((libVoiC_gf_MissionStatus("PShakuras01") != libVoiC_ge_MissionStatus_Completed) && (lp_mission == "PKorhal01")) || ((libVoiC_gf_MissionStatus("PKorhal01") != libVoiC_ge_MissionStatus_Completed) && (lp_mission == "PShakuras01")) || ((libVoiC_gf_MissionStatus("PShakuras01") == libVoiC_ge_MissionStatus_Completed) && (libVoiC_gf_MissionStatus("PKorhal01") == libVoiC_ge_MissionStatus_Completed) && (lp_mission == "PKorhal01") && (libVoiC_gf_CurrentMap() != "PKorhal01")))) {
        lv_extraPower += UserDataGetInt("Maps", lv_userInstance, "RewardShipSpecial", 1);
    }

    return lv_extraPower;
}

bool libVoiC_gf_PC_MissionRewardsDynamicArmyUnit (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("Maps", libVoiC_gf_PC_MapUserDataInstance(lp_mission), "RewardsUnitDynamic", 1) == 1);
}

int libVoiC_gf_PC_MissionRewardsBonusArmy (string lp_map) {
    // Variable Declarations
    string lv_indexObjective;
    int lv_bonus;

    // Automatic Variable Declarations
    int auto6A1F0326_ae;
    int auto6A1F0326_ai;

    // Variable Initialization

    // Implementation
    auto6A1F0326_ae = CatalogFieldValueCount(c_gameCatalogMap, lp_map, "ObjectiveArray", 1);
    auto6A1F0326_ai = 1;
    while (auto6A1F0326_ai <= auto6A1F0326_ae) {
        lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, lp_map, "ObjectiveArray["+IntToString(auto6A1F0326_ai-1)+"]", 1);
        auto6A1F0326_ai = auto6A1F0326_ai + 1;
        lv_bonus = (libVoiC_gf_MissionObjectiveRewards(lv_indexObjective, "ShipEnergy")*libVoiC_gf_MissionObjectiveItemCount(lv_indexObjective));
        lv_bonus += libVoiC_gf_MissionObjectiveRewards2(lv_indexObjective, "ShipEnergy");
    }
    return lv_bonus;
}

string libVoiC_gf_PC_MissionVignetteCutscene (string lp_map) {
    // Variable Declarations
    string lv_sceneName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sceneName = "";

    // Implementation
    lv_sceneName = UserDataGetString("Maps", libVoiC_gf_PC_MapUserDataInstance(lp_map), "VignetteScene", 1);
    return "Cutscenes\\" + lv_sceneName + ".SC2Cutscene";
}

string libVoiC_gf_PC_MissionVignetteEasterEggCutscene (string lp_map) {
    // Variable Declarations
    string lv_sceneName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sceneName = "";

    // Implementation
    lv_sceneName = UserDataGetString("Maps", libVoiC_gf_PC_MapUserDataInstance(lp_map), "VignetteEasterEggScene", 1);
    return "Cutscenes\\" + lv_sceneName + ".SC2Cutscene";
}

int libVoiC_gf_MissionUnlocksSpearofAdunTier (string lp_map) {
    // Variable Declarations
    string lv_userInstance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_userInstance = libVoiC_gf_PC_MapUserDataInstance(lp_map);
    return UserDataGetInt("Maps", lv_userInstance, "RewardShipSlot", 1);
}

int libVoiC_gf_MissionStatus (string lp_mission) {
    // Automatic Variable Declarations
    string auto99F5063A_val;

    // Implementation
    if ((libVoiC_gf_MissionStatusAge(lp_mission, libVoiC_ge_MissionStatus_Completed) > 0)) {
        return libVoiC_ge_MissionStatus_Completed;
    }

    if ((libVoiC_gf_MissionStatusAge(lp_mission, libVoiC_ge_MissionStatus_Available) > 0)) {
        auto99F5063A_val = lp_mission;
        if (auto99F5063A_val == "PKorhal01") {
            if ((libVoiC_gf_LastSuccessfulMission() != "PAiur03") && (libVoiC_gf_LastSuccessfulMission() != "PPurifier01") && (libVoiC_gf_LastSuccessfulMission() != "PShakuras02")) {
                return libVoiC_ge_MissionStatus_Locked;
            }

        }
        else if (auto99F5063A_val == "PShakuras01") {
            if ((libVoiC_gf_LastSuccessfulMission() != "PAiur03") && (libVoiC_gf_LastSuccessfulMission() != "PKorhal02") && (libVoiC_gf_LastSuccessfulMission() != "PPurifier01")) {
                return libVoiC_ge_MissionStatus_Locked;
            }

        }
        else if (auto99F5063A_val == "PPurifier01") {
            if ((libVoiC_gf_LastSuccessfulMission() != "PKorhal02") && (libVoiC_gf_LastSuccessfulMission() != "PShakuras02")) {
                return libVoiC_ge_MissionStatus_Locked;
            }

        }
        else if (auto99F5063A_val == "PPurifier02") {
            if ((libVoiC_gf_LastSuccessfulMission() != "PUlnar03") && (libVoiC_gf_LastSuccessfulMission() != "PTaldarim02") && (libVoiC_gf_LastSuccessfulMission() != "PMoebius01")) {
                return libVoiC_ge_MissionStatus_Locked;
            }

        }
        else if (auto99F5063A_val == "PTaldarim01") {
            if ((libVoiC_gf_LastSuccessfulMission() != "PUlnar03") && (libVoiC_gf_LastSuccessfulMission() != "PPurifier03") && (libVoiC_gf_LastSuccessfulMission() != "PMoebius01")) {
                return libVoiC_ge_MissionStatus_Locked;
            }

        }
        else if (auto99F5063A_val == "PMoebius01") {
            if ((libVoiC_gf_LastSuccessfulMission() != "PUlnar03") && (libVoiC_gf_LastSuccessfulMission() != "PPurifier03") && (libVoiC_gf_LastSuccessfulMission() != "PTaldarim02")) {
                return libVoiC_ge_MissionStatus_Locked;
            }

        }
        else {
        }
        return libVoiC_ge_MissionStatus_Available;
    }

    return libVoiC_ge_MissionStatus_Locked;
}

int libVoiC_gf_MissionStatusAge (string lp_mission, int lp_status) {
    // Automatic Variable Declarations
    int autoF9E6C65E_val;

    // Implementation
    autoF9E6C65E_val = lp_status;
    if (autoF9E6C65E_val == libVoiC_ge_MissionStatus_Available) {
        return UserDataGetInt("Maps", libVoiC_gf_PC_MapUserDataInstance(lp_mission), "AvailableAge", 1);
    }
    else if (autoF9E6C65E_val == libVoiC_ge_MissionStatus_Completed) {
        return UserDataGetInt("Maps", libVoiC_gf_PC_MapUserDataInstance(lp_mission), "CompletedAge", 1);
    }
    else {
    }
    return 0;
}

bool libVoiC_gf_MissionStatusCheck (string lp_mission, int lp_status) {
    // Automatic Variable Declarations
    // Implementation
    return (libVoiC_gf_MissionStatus(lp_mission) == lp_status);
}

text libVoiC_gf_MissionDebriefingText (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("Maps", libVoiC_gf_PC_MapUserDataInstance(lp_mission), "Debrief", 1);
}

string libVoiC_gf_MissionPitch (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Maps", libVoiC_gf_PC_MapUserDataInstance(lp_mission), "Pitch", 1);
}

int libVoiC_gf_NumberOfMissions (int lp_options) {
    // Variable Declarations
    string lv_indexMission;
    int lv_total;

    // Automatic Variable Declarations
    int autoF66EEA27_ae;
    int autoF66EEA27_ai;
    int autoB801740C_val;

    // Variable Initialization

    // Implementation
    autoF66EEA27_ae = CatalogEntryCount(c_gameCatalogMap);
    autoF66EEA27_ai = 1;
    while (autoF66EEA27_ai <= autoF66EEA27_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoF66EEA27_ai);
        autoF66EEA27_ai = autoF66EEA27_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            autoB801740C_val = lp_options;
            if (autoB801740C_val == libVoiC_ge_MissionCountOptions_All) {
                lv_total += 1;
            }
            else if (autoB801740C_val == libVoiC_ge_MissionCountOptions_Available) {
                if ((libVoiC_gf_MissionStatusCheck(lv_indexMission, libVoiC_ge_MissionStatus_Available) == true)) {
                    lv_total += 1;
                }

            }
            else if (autoB801740C_val == libVoiC_ge_MissionCountOptions_Completed) {
                if ((libVoiC_gf_MissionStatusCheck(lv_indexMission, libVoiC_ge_MissionStatus_Completed) == true)) {
                    lv_total += 1;
                }

            }
            else if (autoB801740C_val == libVoiC_ge_MissionCountOptions_Locked) {
                if ((libVoiC_gf_MissionStatusCheck(lv_indexMission, libVoiC_ge_MissionStatus_Locked) == true)) {
                    lv_total += 1;
                }

            }
            else {
            }
        }    
    }
    return lv_total;
}

int libVoiC_gf_NumberOfLotVMissions (int lp_options) {
    // Variable Declarations
    string lv_indexMission;
    int lv_total;

    // Automatic Variable Declarations
    int autoE6B27295_ae;
    int autoE6B27295_ai;
    int auto3DC8F74E_val;

    // Variable Initialization

    // Implementation
    autoE6B27295_ae = CatalogEntryCount(c_gameCatalogMap);
    autoE6B27295_ai = 1;
    while (autoE6B27295_ai <= autoE6B27295_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoE6B27295_ai);
        autoE6B27295_ai = autoE6B27295_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if (((lv_indexMission == "SC2Epilogue01") || (lv_indexMission == "SC2Epilogue02") || (lv_indexMission == "SC2Epilogue03"))) {
                continue;
            }

            auto3DC8F74E_val = lp_options;
            if (auto3DC8F74E_val == libVoiC_ge_MissionCountOptions_All) {
                lv_total += 1;
            }
            else if (auto3DC8F74E_val == libVoiC_ge_MissionCountOptions_Available) {
                if ((libVoiC_gf_MissionStatusCheck(lv_indexMission, libVoiC_ge_MissionStatus_Available) == true)) {
                    lv_total += 1;
                }

            }
            else if (auto3DC8F74E_val == libVoiC_ge_MissionCountOptions_Completed) {
                if ((libVoiC_gf_MissionStatusCheck(lv_indexMission, libVoiC_ge_MissionStatus_Completed) == true)) {
                    lv_total += 1;
                }

            }
            else if (auto3DC8F74E_val == libVoiC_ge_MissionCountOptions_Locked) {
                if ((libVoiC_gf_MissionStatusCheck(lv_indexMission, libVoiC_ge_MissionStatus_Locked) == true)) {
                    lv_total += 1;
                }

            }
            else {
            }
        }    
    }
    return lv_total;
}

int libVoiC_gf_NumberOfEpilogueMissions (int lp_options) {
    // Variable Declarations
    string lv_indexMission;
    int lv_total;

    // Automatic Variable Declarations
    int auto5F08AC41_val;

    // Variable Initialization

    // Implementation
    auto5F08AC41_val = lp_options;
    if (auto5F08AC41_val == libVoiC_ge_MissionCountOptions_Locked) {
        if ((libVoiC_gf_MissionStatusCheck("SC2Epilogue01", libVoiC_ge_MissionStatus_Locked) == true)) {
            lv_total += 1;
        }

        if ((libVoiC_gf_MissionStatusCheck("SC2Epilogue02", libVoiC_ge_MissionStatus_Locked) == true)) {
            lv_total += 1;
        }

        if ((libVoiC_gf_MissionStatusCheck("SC2Epilogue03", libVoiC_ge_MissionStatus_Locked) == true)) {
            lv_total += 1;
        }

    }
    else if (auto5F08AC41_val == libVoiC_ge_MissionCountOptions_Completed) {
        if ((libVoiC_gf_MissionStatusCheck("SC2Epilogue01", libVoiC_ge_MissionStatus_Completed) == true)) {
            lv_total += 1;
        }

        if ((libVoiC_gf_MissionStatusCheck("SC2Epilogue02", libVoiC_ge_MissionStatus_Completed) == true)) {
            lv_total += 1;
        }

        if ((libVoiC_gf_MissionStatusCheck("SC2Epilogue03", libVoiC_ge_MissionStatus_Completed) == true)) {
            lv_total += 1;
        }

    }
    else if (auto5F08AC41_val == libVoiC_ge_MissionCountOptions_Available) {
        if ((libVoiC_gf_MissionStatusCheck("SC2Epilogue01", libVoiC_ge_MissionStatus_Available) == true)) {
            lv_total += 1;
        }

        if ((libVoiC_gf_MissionStatusCheck("SC2Epilogue02", libVoiC_ge_MissionStatus_Available) == true)) {
            lv_total += 1;
        }

        if ((libVoiC_gf_MissionStatusCheck("SC2Epilogue03", libVoiC_ge_MissionStatus_Available) == true)) {
            lv_total += 1;
        }

    }
    else if (auto5F08AC41_val == libVoiC_ge_MissionCountOptions_All) {
        return 3;
    }
    else {
    }
    return lv_total;
}

int libVoiC_gf_NumberOfMissionArcsCompleted () {
    // Variable Declarations
    int lv_total;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libVoiC_gf_MissionStatusCheck("PAiur03", libVoiC_ge_MissionStatus_Completed) == true)) {
        lv_total += 1;
    }

    if ((libVoiC_gf_MissionStatusCheck("PKorhal02", libVoiC_ge_MissionStatus_Completed) == true)) {
        lv_total += 1;
    }

    if ((libVoiC_gf_MissionStatusCheck("PPurifier01", libVoiC_ge_MissionStatus_Completed) == true)) {
        lv_total += 1;
    }

    if ((libVoiC_gf_MissionStatusCheck("PPurifier03", libVoiC_ge_MissionStatus_Completed) == true)) {
        lv_total += 1;
    }

    if ((libVoiC_gf_MissionStatusCheck("PShakuras02", libVoiC_ge_MissionStatus_Completed) == true)) {
        lv_total += 1;
    }

    if ((libVoiC_gf_MissionStatusCheck("PTaldarim02", libVoiC_ge_MissionStatus_Completed) == true)) {
        lv_total += 1;
    }

    if ((libVoiC_gf_MissionStatusCheck("PMoebius01", libVoiC_ge_MissionStatus_Completed) == true)) {
        lv_total += 1;
    }

    if ((libVoiC_gf_MissionStatusCheck("PUlnar03", libVoiC_ge_MissionStatus_Completed) == true)) {
        lv_total += 1;
    }

    if ((libVoiC_gf_MissionStatusCheck("PAiur06", libVoiC_ge_MissionStatus_Completed) == true)) {
        lv_total += 1;
    }

    return lv_total;
}

int libVoiC_gf_NumberOfMissionArcsVisited () {
    // Variable Declarations
    int lv_total;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_total = 1;

    // Implementation
    if ((libVoiC_gf_MissionStatusCheck("PKorhal01", libVoiC_ge_MissionStatus_Completed) == true)) {
        lv_total += 1;
    }

    if ((libVoiC_gf_MissionStatusCheck("PPurifier01", libVoiC_ge_MissionStatus_Completed) == true)) {
        lv_total += 1;
    }

    if ((libVoiC_gf_MissionStatusCheck("PShakuras01", libVoiC_ge_MissionStatus_Completed) == true)) {
        lv_total += 1;
    }

    if ((libVoiC_gf_MissionStatusCheck("PPurifier02", libVoiC_ge_MissionStatus_Completed) == true)) {
        lv_total += 1;
    }

    if ((libVoiC_gf_MissionStatusCheck("PTaldarim01", libVoiC_ge_MissionStatus_Completed) == true)) {
        lv_total += 1;
    }

    if ((libVoiC_gf_MissionStatusCheck("PMoebius01", libVoiC_ge_MissionStatus_Completed) == true)) {
        lv_total += 1;
    }

    if ((libVoiC_gf_MissionStatusCheck("PUlnar01", libVoiC_ge_MissionStatus_Completed) == true)) {
        lv_total += 1;
    }

    if ((libVoiC_gf_MissionStatusCheck("PAiur04", libVoiC_ge_MissionStatus_Completed) == true)) {
        lv_total += 1;
    }

    if ((libVoiC_gf_LastMission() != null)) {
        if ((libVoiC_gf_StoryMapPlanet(libVoiC_gf_LastMission()) != libVoiC_gf_CurrentLocation())) {
            lv_total += 1;
        }

    }

    return lv_total;
}

int libVoiC_gf_MissionCompleteBestTime (string lp_mission, int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("Maps", libVoiC_gf_PC_MapUserDataInstance(lp_mission), "BestTime", libVoiC_gf_PC_DifficultyIndex(lp_difficulty));
}

string libVoiC_gf_PC_MapUserDataInstance (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "UserReference", 1));
}

string libVoiC_gf_PC_MapDataFromUserDataInstance (string lp_map) {
    // Variable Declarations
    string lv_indexMap;

    // Automatic Variable Declarations
    int auto1CB5295B_ae;
    int auto1CB5295B_ai;

    // Variable Initialization

    // Implementation
    auto1CB5295B_ae = CatalogEntryCount(c_gameCatalogMap);
    auto1CB5295B_ai = 1;
    while (auto1CB5295B_ai <= auto1CB5295B_ae) {
        lv_indexMap = CatalogEntryGet(c_gameCatalogMap, auto1CB5295B_ai);
        if ((libVoiC_gf_PC_MapUserDataInstance(lv_indexMap) == lp_map)) {
            return lv_indexMap;
        }

        auto1CB5295B_ai = auto1CB5295B_ai + 1;
    }
    return null;
}

string libVoiC_gf_PC_StoryMapBankID (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_map);
}

string libVoiC_gf_MissionArmyCategoryUnlocked (string lp_mission) {
    // Variable Declarations
    string lv_category;
    string lv_value;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_value = "";

    // Implementation
    lv_value = CatalogFieldValueGet(c_gameCatalogMap, (lp_mission), "ArmyCategory", 1);
    return (lv_value);
}

int libVoiC_gf_PC_MissionPickupRewards (string lp_mission, int lp_type) {
    // Variable Declarations
    string lv_field;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    return UserDataGetInt("Maps", libVoiC_gf_PC_MapUserDataInstance(lp_mission), lv_field, 1);
}

int libVoiC_gf_MissionRewardTotalEarned (string lp_mission, string lp_type) {
    // Variable Declarations
    string lv_objective;
    int lv_count;

    // Automatic Variable Declarations
    string auto211168F7_val;
    int auto50EF5813_ae;
    int auto50EF5813_ai;

    // Variable Initialization

    // Implementation
    if ((libVoiC_gf_MissionStatusCheck(lp_mission, libVoiC_ge_MissionStatus_Completed) == false)) {
        return 0;
    }

    auto211168F7_val = lp_type;
    if (auto211168F7_val == "ShipEnergy") {
        lv_count = libVoiC_gf_PC_MissionRewardsArmy(lp_mission);
    }
    else {
    }
    auto50EF5813_ae = CatalogFieldValueCount(c_gameCatalogMap, lp_mission, "ObjectiveArray", 1);
    auto50EF5813_ai = 1;
    while (auto50EF5813_ai <= auto50EF5813_ae) {
        lv_objective = CatalogFieldValueGet(c_gameCatalogMap, lp_mission, "ObjectiveArray["+IntToString(auto50EF5813_ai-1)+"]", 1);
        auto50EF5813_ai = auto50EF5813_ai + 1;
        lv_count += libVoiC_gf_MissionObjectiveRewardsEarned(lv_objective, lp_type);
    }
    return lv_count;
}

int libVoiC_gf_MissionRewardTotal (string lp_mission, string lp_type) {
    // Variable Declarations
    string lv_objective;
    int lv_count;

    // Automatic Variable Declarations
    string auto6F78A0D9_val;
    int autoB05804E4_ae;
    int autoB05804E4_ai;

    // Variable Initialization

    // Implementation
    auto6F78A0D9_val = lp_type;
    if (auto6F78A0D9_val == "ShipEnergy") {
        lv_count = libVoiC_gf_PC_MissionRewardsArmy(lp_mission);
    }
    else {
    }
    autoB05804E4_ae = CatalogFieldValueCount(c_gameCatalogMap, lp_mission, "ObjectiveArray", 1);
    autoB05804E4_ai = 1;
    while (autoB05804E4_ai <= autoB05804E4_ae) {
        lv_objective = CatalogFieldValueGet(c_gameCatalogMap, lp_mission, "ObjectiveArray["+IntToString(autoB05804E4_ai-1)+"]", 1);
        autoB05804E4_ai = autoB05804E4_ai + 1;
        lv_count += ((libVoiC_gf_MissionObjectiveRewards(lv_objective, lp_type)*libVoiC_gf_MissionObjectiveItemCount(lv_objective))+libVoiC_gf_MissionObjectiveRewards2(lv_objective, lp_type));
    }
    return lv_count;
}

bool libVoiC_gf_PC_MissionisInstallation (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_mission == "PAiur01") || (lp_mission == "PUlnar02") || (lp_mission == "PAiur04"))) {
        return true;
    }

    return false;
}

bool libVoiC_gf_MissionCompletedOnDifficulty (string lp_mission, int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    return (libVoiC_gf_MissionCompleteBestTime(lp_mission, lp_difficulty) > 0);
}

int libVoiC_gf_PC_CompletedMissionCountOnDifficulty (int lp_difficulty) {
    // Variable Declarations
    string lv_indexMission;
    int lv_count;

    // Automatic Variable Declarations
    int auto337D2583_ae;
    int auto337D2583_ai;

    // Variable Initialization

    // Implementation
    auto337D2583_ae = CatalogEntryCount(c_gameCatalogMap);
    auto337D2583_ai = 1;
    while (auto337D2583_ai <= auto337D2583_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto337D2583_ai);
        auto337D2583_ai = auto337D2583_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((libVoiC_gf_MissionCompletedOnDifficulty(lv_indexMission, lp_difficulty) == true)) {
                lv_count += 1;
            }

        }    
    }
    return lv_count;
}

string libVoiC_gf_MissionArmyUpgradeTypeUnlocked (string lp_mission) {
    // Variable Declarations
    int lv_slotIndex;

    // Automatic Variable Declarations
    const int autoB07D4439_ae = 1;
    const int autoB07D4439_ai = -1;

    // Variable Initialization

    // Implementation
    lv_slotIndex = libVCUI_gv_pUC_ArmyFactionCount;
    for ( ; ( (autoB07D4439_ai >= 0 && lv_slotIndex <= autoB07D4439_ae) || (autoB07D4439_ai < 0 && lv_slotIndex >= autoB07D4439_ae) ) ; lv_slotIndex += autoB07D4439_ai ) {
        if ((UserDataGetInt("Maps", lp_mission, "RewardArmySlot", lv_slotIndex) >= 1)) {
            return UserDataInstance("ArmyUpgradeCategories", lv_slotIndex);
        }

    }
    return null;
}

void libVoiC_gf_LaunchMission (string lp_mission, bool lp_simulation, int lp_difficulty) {
    // Variable Declarations
    bool lv_useDebugDialog;
    string lv_nextMission;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libVoiC_gf_PrepareForMission(lp_mission, lp_simulation, false, lp_difficulty);
    GameOver(1, c_gameOverVictory, false, false);
}

void libVoiC_gf_StoryMapSwitch (string lp_nextMap) {
    // Automatic Variable Declarations
    // Implementation
    libVoiC_gf_PrepareForStoryMapSwitch(lp_nextMap);
    GameOver(1, c_gameOverVictory, false, false);
}

void libVoiC_gf_UpdateMissionFlow () {
    // Variable Declarations
    string lv_indexMission;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libVoiC_gf_PC_LockUnlockMissionIfCondition(false, "PAiur01", true);
    libVoiC_gf_PC_LockUnlockMissionIfCondition(false, "PAiur02", libVoiC_gf_MissionStatusCheck("PAiur01", libVoiC_ge_MissionStatus_Completed));
    libVoiC_gf_PC_LockUnlockMissionIfCondition(false, "PAiur03", libVoiC_gf_MissionStatusCheck("PAiur02", libVoiC_ge_MissionStatus_Completed));
    libVoiC_gf_PC_LockUnlockMissionIfCondition(false, "PKorhal01", libVoiC_gf_MissionStatusCheck("PAiur03", libVoiC_ge_MissionStatus_Completed));
    libVoiC_gf_PC_LockUnlockMissionIfCondition(false, "PKorhal02", libVoiC_gf_MissionStatusCheck("PKorhal01", libVoiC_ge_MissionStatus_Completed));
    libVoiC_gf_PC_LockUnlockMissionIfCondition(false, "PShakuras01", libVoiC_gf_MissionStatusCheck("PAiur03", libVoiC_ge_MissionStatus_Completed));
    libVoiC_gf_PC_LockUnlockMissionIfCondition(false, "PShakuras02", libVoiC_gf_MissionStatusCheck("PShakuras01", libVoiC_ge_MissionStatus_Completed));
    libVoiC_gf_PC_LockUnlockMissionIfCondition(false, "PPurifier01", (libVoiC_gf_NumberOfMissionArcsCompleted() >= 2));
    libVoiC_gf_PC_LockUnlockMissionIfCondition(false, "PUlnar01", (libVoiC_gf_NumberOfMissionArcsCompleted() >= 4));
    libVoiC_gf_PC_LockUnlockMissionIfCondition(false, "PUlnar02", libVoiC_gf_MissionStatusCheck("PUlnar01", libVoiC_ge_MissionStatus_Completed));
    libVoiC_gf_PC_LockUnlockMissionIfCondition(false, "PUlnar03", libVoiC_gf_MissionStatusCheck("PUlnar02", libVoiC_ge_MissionStatus_Completed));
    libVoiC_gf_PC_LockUnlockMissionIfCondition(false, "PPurifier02", libVoiC_gf_MissionStatusCheck("PUlnar03", libVoiC_ge_MissionStatus_Completed));
    libVoiC_gf_PC_LockUnlockMissionIfCondition(false, "PPurifier03", libVoiC_gf_MissionStatusCheck("PPurifier02", libVoiC_ge_MissionStatus_Completed));
    libVoiC_gf_PC_LockUnlockMissionIfCondition(false, "PTaldarim01", libVoiC_gf_MissionStatusCheck("PUlnar03", libVoiC_ge_MissionStatus_Completed));
    libVoiC_gf_PC_LockUnlockMissionIfCondition(false, "PTaldarim02", libVoiC_gf_MissionStatusCheck("PTaldarim01", libVoiC_ge_MissionStatus_Completed));
    libVoiC_gf_PC_LockUnlockMissionIfCondition(false, "PMoebius01", (libVoiC_gf_NumberOfMissionArcsCompleted() >= 6));
    libVoiC_gf_PC_LockUnlockMissionIfCondition(false, "PAiur04", (libVoiC_gf_NumberOfMissionArcsCompleted() >= 8));
    libVoiC_gf_PC_LockUnlockMissionIfCondition(false, "PAiur05", libVoiC_gf_MissionStatusCheck("PAiur04", libVoiC_ge_MissionStatus_Completed));
    libVoiC_gf_PC_LockUnlockMissionIfCondition(false, "PAiur06", libVoiC_gf_MissionStatusCheck("PAiur05", libVoiC_ge_MissionStatus_Completed));
    libVoiC_gf_PC_LockUnlockMissionIfCondition(false, "SC2Epilogue01", (libVoiC_gf_NumberOfMissionArcsCompleted() >= 9));
    libVoiC_gf_PC_LockUnlockMissionIfCondition(false, "SC2Epilogue02", libVoiC_gf_MissionStatusCheck("SC2Epilogue01", libVoiC_ge_MissionStatus_Completed));
    libVoiC_gf_PC_LockUnlockMissionIfCondition(false, "SC2Epilogue03", libVoiC_gf_MissionStatusCheck("SC2Epilogue02", libVoiC_ge_MissionStatus_Completed));
    UserDataSetInt("StoryStates", "MissionCompletedCount", "Value", 1, libVoiC_gf_NumberOfMissions(libVoiC_ge_MissionCountOptions_Completed));
    UserDataSetInt("StoryStates", "ArcsCompletedCount", "Value", 1, libVoiC_gf_NumberOfMissionArcsCompleted());
    UserDataSetInt("StoryStates", "ArcsVisitedCount", "Value", 1, libVoiC_gf_NumberOfMissionArcsVisited());
    libVoiC_gf_PC_UpdateCompletedMissionArray();
}

void libVoiC_gf_PC_UpdateCompletedMissionArray () {
    // Variable Declarations
    string lv_indexMision;
    int lv_count;
    int lv_indexOuter;
    int lv_indexInner;
    int lv_indexMin;
    string lv_missionSwap;

    // Automatic Variable Declarations
    int auto8EFDC5D4_ae;
    int auto8EFDC5D4_ai;
    int autoD6C0623A_ae;
    const int autoD6C0623A_ai = 1;
    int auto8CB1B5CF_ae;
    const int auto8CB1B5CF_ai = 1;

    // Variable Initialization

    // Implementation
    lv_count = 0;
    auto8EFDC5D4_ae = UserDataInstanceCount("Maps");
    auto8EFDC5D4_ai = 1;
    while (auto8EFDC5D4_ai <= auto8EFDC5D4_ae) {
        lv_indexMision = libVoiC_gf_PC_MapDataFromUserDataInstance(UserDataInstance("Maps", auto8EFDC5D4_ai));
        if (lv_indexMision != null && CatalogFieldValueGet(c_gameCatalogMap, lv_indexMision, "Kind", 1) == "Mission") {
            if ((libVoiC_gf_MissionStatusCheck(lv_indexMision, libVoiC_ge_MissionStatus_Completed) == true)) {
                lv_count += 1;
                libVoiC_gv_pC_MissionCompleted[lv_count] = lv_indexMision;
            }

        }
        auto8EFDC5D4_ai = auto8EFDC5D4_ai + 1;
    }
    autoD6C0623A_ae = (lv_count - 1);
    lv_indexOuter = 1;
    for ( ; ( (autoD6C0623A_ai >= 0 && lv_indexOuter <= autoD6C0623A_ae) || (autoD6C0623A_ai < 0 && lv_indexOuter >= autoD6C0623A_ae) ) ; lv_indexOuter += autoD6C0623A_ai ) {
        lv_indexMin = lv_indexOuter;
        auto8CB1B5CF_ae = lv_count;
        lv_indexInner = (lv_indexOuter + 1);
        for ( ; ( (auto8CB1B5CF_ai >= 0 && lv_indexInner <= auto8CB1B5CF_ae) || (auto8CB1B5CF_ai < 0 && lv_indexInner >= auto8CB1B5CF_ae) ) ; lv_indexInner += auto8CB1B5CF_ai ) {
            if ((libVoiC_gf_MissionStatusAge(libVoiC_gv_pC_MissionCompleted[lv_indexInner], libVoiC_ge_MissionStatus_Completed) > libVoiC_gf_MissionStatusAge(libVoiC_gv_pC_MissionCompleted[lv_indexMin], libVoiC_ge_MissionStatus_Completed))) {
                lv_indexMin = lv_indexInner;
            }

        }
        if ((lv_indexMin != lv_indexOuter)) {
            lv_missionSwap = libVoiC_gv_pC_MissionCompleted[lv_indexOuter];
            libVoiC_gv_pC_MissionCompleted[lv_indexOuter] = libVoiC_gv_pC_MissionCompleted[lv_indexMin];
            libVoiC_gv_pC_MissionCompleted[lv_indexMin] = lv_missionSwap;
        }

    }
}

void libVoiC_gf_PC_SetCurrentMap (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    libVoiC_gv_pC_CurrentMap = lp_map;
}

void libVoiC_gf_PC_SetMissionStatusAge (string lp_mission, int lp_status, int lp_age) {
    // Automatic Variable Declarations
    int auto473F3FDF_val;

    // Implementation
    auto473F3FDF_val = lp_status;
    if (auto473F3FDF_val == libVoiC_ge_MissionStatus_Available) {
        UserDataSetInt("Maps", libVoiC_gf_PC_MapUserDataInstance(lp_mission), "AvailableAge", 1, lp_age);
    }
    else if (auto473F3FDF_val == libVoiC_ge_MissionStatus_Completed) {
        UserDataSetInt("Maps", libVoiC_gf_PC_MapUserDataInstance(lp_mission), "CompletedAge", 1, lp_age);
    }
    else {
    }
}

void libVoiC_gf_PC_IncreaseMissionAge (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    if ((libVoiC_gf_MissionStatusAge(lp_mission, libVoiC_ge_MissionStatus_Available) > 0)) {
        libVoiC_gf_PC_SetMissionStatusAge(lp_mission, libVoiC_ge_MissionStatus_Available, (libVoiC_gf_MissionStatusAge(lp_mission, libVoiC_ge_MissionStatus_Available) + 1));
    }

    if ((libVoiC_gf_MissionStatusAge(lp_mission, libVoiC_ge_MissionStatus_Completed) > 0)) {
        libVoiC_gf_PC_SetMissionStatusAge(lp_mission, libVoiC_ge_MissionStatus_Completed, (libVoiC_gf_MissionStatusAge(lp_mission, libVoiC_ge_MissionStatus_Completed) + 1));
    }

}

void libVoiC_gf_PC_CompleteMission (string lp_mission) {
    // Variable Declarations
    string lv_indexMision;

    // Automatic Variable Declarations
    int auto62EF06C0_ae;
    int auto62EF06C0_ai;

    // Variable Initialization

    // Implementation
    if (((lp_mission == null) || (libVoiC_gf_MissionStatusCheck(lp_mission, libVoiC_ge_MissionStatus_Completed) == true))) {
        return ;
    }

    libVoiC_gf_PC_MarkMissionAsStatus(lp_mission, libVoiC_ge_MissionStatus_Completed);
    if ((libVoiC_gf_PC_CampaignMapTypeCheck(lp_mission, c_mapKindMission) != true)) {
        return ;
    }

    auto62EF06C0_ae = CatalogEntryCount(c_gameCatalogMap);
    auto62EF06C0_ai = 1;
    while (auto62EF06C0_ai <= auto62EF06C0_ae) {
        lv_indexMision = CatalogEntryGet(c_gameCatalogMap, auto62EF06C0_ai);
        auto62EF06C0_ai = auto62EF06C0_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMision, "Kind", 1) == "Mission") {
            if ((lv_indexMision != lp_mission)) {
                libVoiC_gf_PC_IncreaseMissionAge(lv_indexMision);
            }

        }    
    }
    libVoiC_gf_UpdateMissionFlow();
    libVoiC_gf_PC_UpdateTechStates(1);
}

void libVoiC_gf_PC_UpdateSimulationMissionAges (string lp_simulationMap) {
    // Variable Declarations
    bool lv_lockUlnar;
    bool lv_lockEarlyMissions;
    bool lv_lockLateMissions;
    bool lv_lockAiur;
    string lv_indexMission;

    // Automatic Variable Declarations
    string autoCC658ED3_val;

    // Variable Initialization

    // Implementation
    libVoiC_gf_PC_MarkMissionAsStatus(lp_simulationMap, libVoiC_ge_MissionStatus_Available);
    autoCC658ED3_val = lp_simulationMap;
    if (autoCC658ED3_val == "PAiur01") {
        lv_lockEarlyMissions = true;
        lv_lockUlnar = true;
        lv_lockLateMissions = true;
        lv_lockAiur = true;
        libVoiC_gf_PC_MarkMissionAsStatus("PAiur02", libVoiC_ge_MissionStatus_Locked);
        libVoiC_gf_PC_MarkMissionAsStatus("PAiur03", libVoiC_ge_MissionStatus_Locked);
    }
    else if (autoCC658ED3_val == "PAiur02") {
        libVoiC_gf_PC_MarkMissionAsStatus("PAiur03", libVoiC_ge_MissionStatus_Locked);
        lv_lockEarlyMissions = true;
        lv_lockUlnar = true;
        lv_lockLateMissions = true;
        lv_lockAiur = true;
    }
    else if (autoCC658ED3_val == "PAiur03") {
        lv_lockEarlyMissions = true;
        lv_lockUlnar = true;
        lv_lockLateMissions = true;
        lv_lockAiur = true;
    }
    else if (autoCC658ED3_val == "PKorhal01") {
        libVoiC_gf_PC_MarkMissionAsStatus("PKorhal02", libVoiC_ge_MissionStatus_Locked);
        lv_lockUlnar = true;
        lv_lockLateMissions = true;
        lv_lockAiur = true;
    }
    else if (autoCC658ED3_val == "PKorhal02") {
        lv_lockUlnar = true;
        lv_lockLateMissions = true;
        lv_lockAiur = true;
    }
    else if (autoCC658ED3_val == "PPurifier01") {
        lv_lockUlnar = true;
        lv_lockLateMissions = true;
        lv_lockAiur = true;
    }
    else if (autoCC658ED3_val == "PShakuras01") {
        libVoiC_gf_PC_MarkMissionAsStatus("PShakuras02", libVoiC_ge_MissionStatus_Locked);
        lv_lockUlnar = true;
        lv_lockLateMissions = true;
        lv_lockAiur = true;
    }
    else if (autoCC658ED3_val == "PShakuras02") {
        lv_lockUlnar = true;
        lv_lockLateMissions = true;
        lv_lockAiur = true;
    }
    else if (autoCC658ED3_val == "PUlnar01") {
        libVoiC_gf_PC_MarkMissionAsStatus("PUlnar02", libVoiC_ge_MissionStatus_Locked);
        libVoiC_gf_PC_MarkMissionAsStatus("PUlnar03", libVoiC_ge_MissionStatus_Locked);
        lv_lockLateMissions = true;
        lv_lockAiur = true;
    }
    else if (autoCC658ED3_val == "PUlnar02") {
        libVoiC_gf_PC_MarkMissionAsStatus("PUlnar03", libVoiC_ge_MissionStatus_Locked);
        lv_lockLateMissions = true;
        lv_lockAiur = true;
    }
    else if (autoCC658ED3_val == "PUlnar03") {
        lv_lockLateMissions = true;
        lv_lockAiur = true;
    }
    else if (autoCC658ED3_val == "PPurifier02") {
        libVoiC_gf_PC_MarkMissionAsStatus("PPurifier03", libVoiC_ge_MissionStatus_Locked);
        lv_lockAiur = true;
    }
    else if (autoCC658ED3_val == "PPurifier03") {
        lv_lockAiur = true;
    }
    else if (autoCC658ED3_val == "PTaldarim01") {
        libVoiC_gf_PC_MarkMissionAsStatus("PTaldarim02", libVoiC_ge_MissionStatus_Locked);
        lv_lockAiur = true;
    }
    else if (autoCC658ED3_val == "PTaldarim02") {
        lv_lockAiur = true;
    }
    else if (autoCC658ED3_val == "PMoebius01") {
        lv_lockAiur = true;
    }
    else if (autoCC658ED3_val == "PAiur04") {
        libVoiC_gf_PC_MarkMissionAsStatus("PAiur05", libVoiC_ge_MissionStatus_Locked);
        libVoiC_gf_PC_MarkMissionAsStatus("PAiur06", libVoiC_ge_MissionStatus_Locked);
    }
    else if (autoCC658ED3_val == "PAiur05") {
        libVoiC_gf_PC_MarkMissionAsStatus("PAiur06", libVoiC_ge_MissionStatus_Locked);
    }
    else {
    }
    if ((lv_lockEarlyMissions == true)) {
        libVoiC_gf_PC_MarkMissionAsStatus("PShakuras01", libVoiC_ge_MissionStatus_Locked);
        libVoiC_gf_PC_MarkMissionAsStatus("PShakuras02", libVoiC_ge_MissionStatus_Locked);
        libVoiC_gf_PC_MarkMissionAsStatus("PKorhal01", libVoiC_ge_MissionStatus_Locked);
        libVoiC_gf_PC_MarkMissionAsStatus("PKorhal02", libVoiC_ge_MissionStatus_Locked);
        libVoiC_gf_PC_MarkMissionAsStatus("PPurifier01", libVoiC_ge_MissionStatus_Locked);
    }

    if ((lv_lockUlnar == true)) {
        libVoiC_gf_PC_MarkMissionAsStatus("PUlnar01", libVoiC_ge_MissionStatus_Locked);
        libVoiC_gf_PC_MarkMissionAsStatus("PUlnar02", libVoiC_ge_MissionStatus_Locked);
        libVoiC_gf_PC_MarkMissionAsStatus("PUlnar03", libVoiC_ge_MissionStatus_Locked);
    }

    if ((lv_lockLateMissions == true)) {
        libVoiC_gf_PC_MarkMissionAsStatus("PPurifier02", libVoiC_ge_MissionStatus_Locked);
        libVoiC_gf_PC_MarkMissionAsStatus("PPurifier03", libVoiC_ge_MissionStatus_Locked);
        libVoiC_gf_PC_MarkMissionAsStatus("PMoebius01", libVoiC_ge_MissionStatus_Locked);
        libVoiC_gf_PC_MarkMissionAsStatus("PTaldarim01", libVoiC_ge_MissionStatus_Locked);
        libVoiC_gf_PC_MarkMissionAsStatus("PTaldarim02", libVoiC_ge_MissionStatus_Locked);
    }

    if ((lv_lockAiur == true)) {
        libVoiC_gf_PC_MarkMissionAsStatus("PAiur04", libVoiC_ge_MissionStatus_Locked);
        libVoiC_gf_PC_MarkMissionAsStatus("PAiur05", libVoiC_ge_MissionStatus_Locked);
        libVoiC_gf_PC_MarkMissionAsStatus("PAiur06", libVoiC_ge_MissionStatus_Locked);
    }

    libVoiC_gf_UpdateMissionFlow();
    libVoiC_gf_PC_UpdateTechStates(1);
    libVoiC_gf_PC_ClampSoAToMission();
    libVoiC_gf_PC_ApplyTech(1);
}

void libVoiC_gf_PC_MarkMissionAsStatus (string lp_mission, int lp_status) {
    // Automatic Variable Declarations
    int auto5D095F6A_val;

    // Implementation
    auto5D095F6A_val = lp_status;
    if (auto5D095F6A_val == libVoiC_ge_MissionStatus_Locked) {
        libVoiC_gf_PC_SetMissionStatusAge(lp_mission, libVoiC_ge_MissionStatus_Available, 0);
        libVoiC_gf_PC_SetMissionStatusAge(lp_mission, libVoiC_ge_MissionStatus_Completed, 0);
    }
    else if (auto5D095F6A_val == libVoiC_ge_MissionStatus_Available) {
        libVoiC_gf_PC_SetMissionStatusAge(lp_mission, libVoiC_ge_MissionStatus_Available, 1);
        libVoiC_gf_PC_SetMissionStatusAge(lp_mission, libVoiC_ge_MissionStatus_Completed, 0);
    }
    else if (auto5D095F6A_val == libVoiC_ge_MissionStatus_Completed) {
        libVoiC_gf_PC_SetMissionStatusAge(lp_mission, libVoiC_ge_MissionStatus_Available, 0);
        libVoiC_gf_PC_SetMissionStatusAge(lp_mission, libVoiC_ge_MissionStatus_Completed, 1);
    }
    else {
    }
}

void libVoiC_gf_PC_LockUnlockMissionIfCondition (bool lp_lockUnlock, string lp_mission, bool lp_condition) {
    // Variable Declarations
    text lv_label;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_lockUnlock == true)) {
        lv_label = StringExternal("Param/Value/lib_VoiC_F39E4A30");
    }
    else {
        lv_label = StringExternal("Param/Value/lib_VoiC_156DB19D");
    }
    TextExpressionSetToken("Param/Expression/lib_VoiC_95D73249", "A", lv_label);
    TextExpressionSetToken("Param/Expression/lib_VoiC_95D73249", "B", StringToText((lp_mission)));
    TextExpressionSetToken("Param/Expression/lib_VoiC_95D73249", "C", libNtve_gf_ConvertBooleanToText(lp_condition));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_VoiC_95D73249"), false);
    if ((lp_condition == true)) {
        if ((lp_lockUnlock == false)) {
            if ((libVoiC_gf_MissionStatusCheck(lp_mission, libVoiC_ge_MissionStatus_Locked) == true)) {
                libVoiC_gf_PC_MarkMissionAsStatus(lp_mission, libVoiC_ge_MissionStatus_Available);
            }

        }
        else {
            if ((libVoiC_gf_MissionStatusCheck(lp_mission, libVoiC_ge_MissionStatus_Available) == true)) {
                libVoiC_gf_PC_MarkMissionAsStatus(lp_mission, libVoiC_ge_MissionStatus_Locked);
            }

        }
    }

}

void libVoiC_gf_PC_SetMissionCompletionBestTime (string lp_mission, int lp_difficulty, int lp_time) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_time < 0)) {
        return ;
    }

    UserDataSetInt("Maps", libVoiC_gf_PC_MapUserDataInstance(lp_mission), "BestTime", libVoiC_gf_PC_DifficultyIndex(lp_difficulty), lp_time);
}

void libVoiC_gf_PC_SaveMapToBank (string lp_bankMap, bank lp_targetBank, bool lp_isSimulation) {
    // Variable Declarations
    string lv__SectionName;
    string lv_indexMission;
    string lv_indexObjective;
    int lv_difficulty;
    int lv_progressThisMission;

    // Automatic Variable Declarations
    int auto9151DF10_ae;
    int auto9151DF10_ai;
    int autoE587A7FB_ae;
    int autoE587A7FB_ai;
    int auto3A779D38_ae;
    int auto3A779D38_ai;
    int auto0DED59AB_ae;
    int auto0DED59AB_ai;
    int auto91FEB783_ae;
    int auto91FEB783_ai;

    // Variable Initialization
    lv__SectionName = "";
    lv_difficulty = 2;

    // Implementation
    if ((lp_bankMap == null)) {
        lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_bankMap, "MissionBestTime");
        auto9151DF10_ae = CatalogEntryCount(c_gameCatalogMap);
        auto9151DF10_ai = 1;
        while (auto9151DF10_ai <= auto9151DF10_ae) {
            lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto9151DF10_ai);
            auto9151DF10_ai = auto9151DF10_ai + 1;
            if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
                libVoiC_gf_PC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libVoiC_gf_PC_BankMissionDifficultyKey(lv_indexMission, 1), libVoiC_gf_MissionCompleteBestTime(lv_indexMission, 1), -1);
                libVoiC_gf_PC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libVoiC_gf_PC_BankMissionDifficultyKey(lv_indexMission, 2), libVoiC_gf_MissionCompleteBestTime(lv_indexMission, 2), -1);
                libVoiC_gf_PC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libVoiC_gf_PC_BankMissionDifficultyKey(lv_indexMission, 3), libVoiC_gf_MissionCompleteBestTime(lv_indexMission, 3), -1);
                libVoiC_gf_PC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libVoiC_gf_PC_BankMissionDifficultyKey(lv_indexMission, 4), libVoiC_gf_MissionCompleteBestTime(lv_indexMission, 4), -1);
            }    
        }
        libVoiC_gf_PC_ArchiveBankSave();
    }

    lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_bankMap, "MissionObjectives");
    if ((lp_isSimulation == true)) {
        autoE587A7FB_ae = CatalogFieldValueCount(c_gameCatalogMap, libVoiC_gf_CurrentMap(), "ObjectiveArray", 1);
        autoE587A7FB_ai = 1;
        while (autoE587A7FB_ai <= autoE587A7FB_ae) {
            lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, libVoiC_gf_CurrentMap(), "ObjectiveArray["+IntToString(autoE587A7FB_ai-1)+"]", 1);
            autoE587A7FB_ai = autoE587A7FB_ai + 1;
            if ((libVoiC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
                lv_progressThisMission = libVoiC_gf_MissionObjectiveProgress(lv_indexObjective);
                UserDataSetInt("MissionObjective", libVoiC_gf_PS_ObjectiveUserDataInstance(lv_indexObjective), "Progress", 1, libVoiC_gf_PS_MissionObjectivePreviousProgress(lv_indexObjective));
                UserDataSaveInstance("MissionObjective", libVoiC_gf_PS_ObjectiveUserDataInstance(lv_indexObjective), lp_targetBank, lv__SectionName);
                UserDataSetInt("MissionObjective", libVoiC_gf_PS_ObjectiveUserDataInstance(lv_indexObjective), "Progress", 1, lv_progressThisMission);
            }

        }
    }
    else {
        auto3A779D38_ae = CatalogEntryCount(c_gameCatalogObjective);
        auto3A779D38_ai = 1;
        while (auto3A779D38_ai <= auto3A779D38_ae) {
            lv_indexObjective = CatalogEntryGet(c_gameCatalogObjective, auto3A779D38_ai);
            auto3A779D38_ai = auto3A779D38_ai + 1;
            if ((libVoiC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
                UserDataSaveInstance("MissionObjective", libVoiC_gf_PS_ObjectiveUserDataInstance(lv_indexObjective), lp_targetBank, lv__SectionName);
            }

        }
    }
    if ((lp_isSimulation == true)) {
        return ;
    }

    if ((lp_bankMap == null)) {
        lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_bankMap, "MissionAvailableAge");
        auto0DED59AB_ae = CatalogEntryCount(c_gameCatalogMap);
        auto0DED59AB_ai = 1;
        while (auto0DED59AB_ai <= auto0DED59AB_ae) {
            lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto0DED59AB_ai);
            auto0DED59AB_ai = auto0DED59AB_ai + 1;
            if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
                libVoiC_gf_PC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libVoiC_gf_PC_StoryMapBankID(lv_indexMission), libVoiC_gf_MissionStatusAge(lv_indexMission, libVoiC_ge_MissionStatus_Available), 0);
            }    
        }
        lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_bankMap, "MissionCompletedAge");
        auto91FEB783_ae = CatalogEntryCount(c_gameCatalogMap);
        auto91FEB783_ai = 1;
        while (auto91FEB783_ai <= auto91FEB783_ae) {
            lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto91FEB783_ai);
            auto91FEB783_ai = auto91FEB783_ai + 1;
            if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
                libVoiC_gf_PC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libVoiC_gf_PC_StoryMapBankID(lv_indexMission), libVoiC_gf_MissionStatusAge(lv_indexMission, libVoiC_ge_MissionStatus_Completed), 0);
            }    
        }
    }

}

void libVoiC_gf_PC_LoadMapFromBank (string lp_bankMap, bank lp_sourceBank) {
    // Variable Declarations
    string lv__SectionName;
    string lv_indexMission;
    string lv_indexObjective;

    // Automatic Variable Declarations
    int auto26C5E377_ae;
    int auto26C5E377_ai;
    int autoF578A552_ae;
    int autoF578A552_ai;
    int auto0D63639B_ae;
    int auto0D63639B_ai;
    int auto0F43F678_ae;
    int auto0F43F678_ai;
    int autoC7E73029_ae;
    int autoC7E73029_ai;
    int autoFE45BAE8_ae;
    int autoFE45BAE8_ai;

    // Variable Initialization
    lv__SectionName = "";

    // Implementation
    if ((lp_bankMap == null)) {
        lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_bankMap, "MissionAvailableAge");
        autoF578A552_ae = CatalogEntryCount(c_gameCatalogMap);
        autoF578A552_ai = 1;
        while (autoF578A552_ai <= autoF578A552_ae) {
            lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoF578A552_ai);
            autoF578A552_ai = autoF578A552_ai + 1;
            if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
                libVoiC_gf_PC_SetMissionStatusAge(lv_indexMission, libVoiC_ge_MissionStatus_Available, libVoiC_gf_PC_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libVoiC_gf_PC_StoryMapBankID(lv_indexMission), 0));
            }    
        }
        lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_bankMap, "MissionCompletedAge");
        auto0D63639B_ae = CatalogEntryCount(c_gameCatalogMap);
        auto0D63639B_ai = 1;
        while (auto0D63639B_ai <= auto0D63639B_ae) {
            lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto0D63639B_ai);
            auto0D63639B_ai = auto0D63639B_ai + 1;
            if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
                libVoiC_gf_PC_SetMissionStatusAge(lv_indexMission, libVoiC_ge_MissionStatus_Completed, libVoiC_gf_PC_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libVoiC_gf_PC_StoryMapBankID(lv_indexMission), 0));
            }    
        }
        if ((((libVoiC_gf_PC_CampaignInEpilogue() == false) && (libVoiC_gf_NumberOfLotVMissions(libVoiC_ge_MissionCountOptions_Completed) == libVoiC_gf_NumberOfLotVMissions(libVoiC_ge_MissionCountOptions_All))) || ((libVoiC_gf_PC_CampaignInEpilogue() == true) && (libVoiC_gf_NumberOfEpilogueMissions(libVoiC_ge_MissionCountOptions_Completed) == libVoiC_gf_NumberOfEpilogueMissions(libVoiC_ge_MissionCountOptions_All))))) {
            libVoiC_gv_pC_InCompletedCampaign = true;
        }

        lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_bankMap, "MissionBestTime");
        auto0F43F678_ae = CatalogEntryCount(c_gameCatalogMap);
        auto0F43F678_ai = 1;
        while (auto0F43F678_ai <= auto0F43F678_ae) {
            lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto0F43F678_ai);
            auto0F43F678_ai = auto0F43F678_ai + 1;
            if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
                libVoiC_gf_PC_SetMissionCompletionBestTime(lv_indexMission, 1, libVoiC_gf_PC_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libVoiC_gf_PC_BankMissionDifficultyKey(lv_indexMission, 1), -1));
                libVoiC_gf_PC_SetMissionCompletionBestTime(lv_indexMission, 2, libVoiC_gf_PC_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libVoiC_gf_PC_BankMissionDifficultyKey(lv_indexMission, 2), -1));
                libVoiC_gf_PC_SetMissionCompletionBestTime(lv_indexMission, 3, libVoiC_gf_PC_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libVoiC_gf_PC_BankMissionDifficultyKey(lv_indexMission, 3), -1));
                libVoiC_gf_PC_SetMissionCompletionBestTime(lv_indexMission, 4, libVoiC_gf_PC_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libVoiC_gf_PC_BankMissionDifficultyKey(lv_indexMission, 4), -1));
            }    
        }
        lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_bankMap, "MissionObjectives");
        autoC7E73029_ae = CatalogEntryCount(c_gameCatalogObjective);
        autoC7E73029_ai = 1;
        while (autoC7E73029_ai <= autoC7E73029_ae) {
            lv_indexObjective = CatalogEntryGet(c_gameCatalogObjective, autoC7E73029_ai);
            autoC7E73029_ai = autoC7E73029_ai + 1;
            if ((libVoiC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
                UserDataLoadInstance("MissionObjective", libVoiC_gf_PS_ObjectiveUserDataInstance(lv_indexObjective), lp_sourceBank, lv__SectionName);
            }

        }
        libVoiC_gf_PC_ArchiveBankLoad();
        autoFE45BAE8_ae = CatalogFieldValueCount(c_gameCatalogMap, libVoiC_gf_CurrentMap(), "ObjectiveArray", 1);
        autoFE45BAE8_ai = 1;
        while (autoFE45BAE8_ai <= autoFE45BAE8_ae) {
            lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, libVoiC_gf_CurrentMap(), "ObjectiveArray["+IntToString(autoFE45BAE8_ai-1)+"]", 1);
            autoFE45BAE8_ai = autoFE45BAE8_ai + 1;
            if ((libVoiC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
                libVoiC_gf_PS_MissionObjectivePreviousProgressSet(lv_indexObjective, libVoiC_gf_MissionObjectiveProgress(lv_indexObjective));
            }

        }
    }
    else {
        if ((libVoiC_gf_PC_CampaignIsComplete() == false)) {
            lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_bankMap, "MissionObjectives");
            auto26C5E377_ae = CatalogFieldValueCount(c_gameCatalogMap, lp_bankMap, "ObjectiveArray", 1);
            auto26C5E377_ai = 1;
            while (auto26C5E377_ai <= auto26C5E377_ae) {
                lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, lp_bankMap, "ObjectiveArray["+IntToString(auto26C5E377_ai-1)+"]", 1);
                auto26C5E377_ai = auto26C5E377_ai + 1;
                if ((libVoiC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
                    UserDataResetInstance("MissionObjective", libVoiC_gf_PS_ObjectiveUserDataInstance(lv_indexObjective));
                    UserDataLoadInstance("MissionObjective", libVoiC_gf_PS_ObjectiveUserDataInstance(lv_indexObjective), lp_sourceBank, lv__SectionName);
                }

            }
        }

    }
    UserDataSetInt("StoryStates", "MissionCompletedCount", "Value", 1, libVoiC_gf_NumberOfMissions(libVoiC_ge_MissionCountOptions_Completed));
    UserDataSetInt("StoryStates", "ArcsCompletedCount", "Value", 1, libVoiC_gf_NumberOfMissionArcsCompleted());
}

void libVoiC_gf_ZS_SetObjectiveProgressData (string lp_objective, int lp_progress) {
    // Variable Declarations
    int lv_levelBefore;
    int lv_increase;
    int lv_currentXPLevel;
    int lv_actualProgress;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_actualProgress = lp_progress;
    if ((lv_actualProgress < 0)) {
        lv_actualProgress = 0;
        TextExpressionSetToken("Param/Expression/lib_VoiC_F246913F", "A", StringToText((lp_objective)));
        TextExpressionSetToken("Param/Expression/lib_VoiC_F246913F", "B", IntToText(lp_progress));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_VoiC_F246913F"), true);
    }

    if ((lv_actualProgress > libVoiC_gf_MissionObjectiveItemCount(lp_objective))) {
        lv_actualProgress = libVoiC_gf_MissionObjectiveItemCount(lp_objective);
        TextExpressionSetToken("Param/Expression/lib_VoiC_E44EA667", "A", StringToText((lp_objective)));
        TextExpressionSetToken("Param/Expression/lib_VoiC_E44EA667", "B", IntToText(lp_progress));
        TextExpressionSetToken("Param/Expression/lib_VoiC_E44EA667", "C", IntToText(libVoiC_gf_MissionObjectiveItemCount(lp_objective)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_VoiC_E44EA667"), true);
    }

    if ((libVoiC_gf_PS_ObjectiveCountsDown(lp_objective) == true)) {
        lp_progress = (libVoiC_gf_MissionObjectiveItemCount(lp_objective) - lp_progress);
    }

    lv_increase = (lp_progress - libVoiC_gf_MissionObjectiveProgress(lp_objective));
    UserDataSetInt("MissionObjective", libVoiC_gf_PS_ObjectiveUserDataInstance(lp_objective), "Progress", 1, lp_progress);
    if (((libVoiC_gf_MissionObjectiveIsPrimary(lp_objective) == true) || (lv_increase <= 0))) {
        return ;
    }

}

void libVoiC_gf_PS_MissionObjectivePreviousProgressSet (string lp_objective, int lp_progress) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, ("PC_BestObj_" + (lp_objective)), lp_progress);
}

void libVoiC_gf_PS_MissionObjectiveArchiveProgressSet (string lp_objective, int lp_progress) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_VoiC_4D7EC61D", "A", StringToText((lp_objective)));
    TextExpressionSetToken("Param/Expression/lib_VoiC_4D7EC61D", "B", IntToText(lp_progress));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_VoiC_4D7EC61D"), false);
    DataTableSetInt(true, ("ZC_ArchiveObj_" + (lp_objective)), lp_progress);
}

text libVoiC_gf_MissionObjectiveDescription (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogObjective, (lp_objective), "Description", c_playerAny));
}

bool libVoiC_gf_MissionObjectiveStateCheck (string lp_objective, int lp_state) {
    // Automatic Variable Declarations
    // Implementation
    if ((UserDataGetInt("MissionObjective", libVoiC_gf_PS_ObjectiveUserDataInstance(lp_objective), "Available", 1) == 1) && (lp_state == libVoiC_ge_MissionObjectiveState_Available)) {
        return true;
    }

    if ((UserDataGetInt("MissionObjective", libVoiC_gf_PS_ObjectiveUserDataInstance(lp_objective), "Complete", 1) == 1) && (lp_state == libVoiC_ge_MissionObjectiveState_Completed)) {
        return true;
    }

    if ((lp_state == libVoiC_ge_MissionObjectiveState_Undiscovered) && (UserDataGetInt("MissionObjective", libVoiC_gf_PS_ObjectiveUserDataInstance(lp_objective), "Available", 1) == 0) && (UserDataGetInt("MissionObjective", libVoiC_gf_PS_ObjectiveUserDataInstance(lp_objective), "Complete", 1) == 0)) {
        return true;
    }

    return false;
}

bool libVoiC_gf_MissionObjectiveIsPrimary (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return (libVoiC_gf_PS_GetObjectiveTypeInteger(lp_objective) == c_objectiveTypePrimary);
}

text libVoiC_gf_MissionObjectiveName (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogObjective, (lp_objective), "Name", c_playerAny));
}

int libVoiC_gf_MissionObjectiveRewardsEarned (string lp_objective, string lp_type) {
    // Variable Declarations
    int lv_rewards;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libVoiC_gf_MissionObjectiveIsPrimary(lp_objective) == true)) {
        return 0;
    }

    lv_rewards = (libVoiC_gf_MissionObjectiveRewards(lp_objective, lp_type) * libVoiC_gf_MissionObjectiveProgress(lp_objective));
    if ((libVoiC_gf_MissionObjectiveProgress(lp_objective) == libVoiC_gf_MissionObjectiveItemCount(lp_objective))) {
        lv_rewards += libVoiC_gf_MissionObjectiveRewards2(lp_objective, lp_type);
    }

    return lv_rewards;
}

int libVoiC_gf_MissionObjectiveRewardsAvailable2 (string lp_objective, string lp_type) {
    // Variable Declarations
    int lv_rewards;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    return ((libVoiC_gf_MissionObjectiveRewards(lp_objective, lp_type)*libVoiC_gf_MissionObjectiveItemCount(lp_objective))+libVoiC_gf_MissionObjectiveRewards2(lp_objective, "ShipEnergy"));
}

int libVoiC_gf_MissionObjectiveItemCount (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGetAsInt(c_gameCatalogObjective, (lp_objective), "RequiredCount", 1);
}

int libVoiC_gf_MissionObjectiveProgress (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("MissionObjective", libVoiC_gf_PS_ObjectiveUserDataInstance(lp_objective), "Progress", 1);
}

int libVoiC_gf_MissionObjectiveRewards (string lp_objective, string lp_type) {
    // Variable Declarations
    int lv_amount;

    // Automatic Variable Declarations
    string auto270C1A28_val;

    // Variable Initialization

    // Implementation
    auto270C1A28_val = lp_type;
    if (auto270C1A28_val == "ShipEnergy") {
        return UserDataGetInt("MissionObjective", libVoiC_gf_PS_ObjectiveUserDataInstance(lp_objective), "ShipRewardEach", 1);
    }
    else {
    }
    return 0;
}

int libVoiC_gf_MissionObjectiveRewards2 (string lp_objective, string lp_type) {
    // Variable Declarations
    int lv_amount;

    // Automatic Variable Declarations
    string auto4CF502E0_val;

    // Variable Initialization

    // Implementation
    auto4CF502E0_val = lp_type;
    if (auto4CF502E0_val == "ShipEnergy") {
        return UserDataGetInt("MissionObjective", libVoiC_gf_PS_ObjectiveUserDataInstance(lp_objective), "ShipRewardFinal", 1);
    }
    else {
    }
    return 0;
}

text libVoiC_gf_PS_CampaignObjectiveBonusText (string lp_objective) {
    // Variable Declarations
    text lv_bonusText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_bonusText = UserDataGetText("MissionObjective", libVoiC_gf_PS_ObjectiveUserDataInstance(lp_objective), "RewardText", 1);
    if (((lv_bonusText != null) == false) && (libVoiC_gf_MissionObjectiveIsPrimary(lp_objective) == false)) {
        if ((libVoiC_gf_MissionObjectiveRewards(lp_objective, "ShipEnergy") > 0)) {
            TextExpressionSetToken("Param/Expression/lib_VoiC_68515B52", "A", IntToText(libVoiC_gf_MissionObjectiveRewards(lp_objective, "ShipEnergy")));
            lv_bonusText = TextExpressionAssemble("Param/Expression/lib_VoiC_68515B52");
        }

        if ((libVoiC_gf_MissionObjectiveRewards2(lp_objective, "ShipEnergy") > 0)) {
            TextExpressionSetToken("Param/Expression/lib_VoiC_A5769BA3", "A", IntToText(libVoiC_gf_MissionObjectiveRewards2(lp_objective, "ShipEnergy")));
            lv_bonusText = TextExpressionAssemble("Param/Expression/lib_VoiC_A5769BA3");
        }

    }

    return lv_bonusText;
}

int libVoiC_gf_PS_GetObjectiveForData (string lp_objectiveData) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetObjective(true, libVoiC_gf_PS_ObjectiveTableString(lp_objectiveData));
}

string libVoiC_gf_PS_ObjectiveUserDataInstance (string lp_objective) {
    // Variable Declarations
    string lv_objectiveInstance;
    int lv_index;

    // Automatic Variable Declarations
    int autoFCDD7321_ae;
    const int autoFCDD7321_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = DataTableGetInt(true, ("PObjIndex_" + (lp_objective)));
    if ((lv_index == 0)) {
        lv_objectiveInstance = UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogObjective, (lp_objective), "UserReference", 1));
        autoFCDD7321_ae = UserDataInstanceCount("MissionObjective");
        lv_index = 1;
        for ( ; ( (autoFCDD7321_ai >= 0 && lv_index <= autoFCDD7321_ae) || (autoFCDD7321_ai < 0 && lv_index >= autoFCDD7321_ae) ) ; lv_index += autoFCDD7321_ai ) {
            if ((UserDataInstance("MissionObjective", lv_index) == lv_objectiveInstance)) {
                DataTableSetInt(true, ("PObjIndex_" + (lp_objective)), lv_index);
                break;
            }

        }
    }
    else {
        lv_objectiveInstance = UserDataInstance("MissionObjective", lv_index);
    }
    return lv_objectiveInstance;
}

int libVoiC_gf_PS_MissionObjectivePreviousProgress (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(true, ("PC_BestObj_" + (lp_objective)));
}

int libVoiC_gf_PS_MissionObjectiveArchiveProgress (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(true, ("ZC_ArchiveObj_" + (lp_objective)));
}

int libVoiC_gf_PS_GetObjectiveTypeInteger (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    if ((CatalogFieldValueGetAsInt(c_gameCatalogObjective, (lp_objective), "Type", c_playerAny) == (c_objectiveTypePrimary))) {
        return c_objectiveTypePrimary;
    }
    else {
        return c_objectiveTypeOptional;
    }
}

bool libVoiC_gf_PS_GetObjectiveTypeBoolean (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    if ((CatalogFieldValueGetAsInt(c_gameCatalogObjective, (lp_objective), "Type", c_playerAny) == (c_objectiveTypePrimary))) {
        return true;
    }
    else {
        return false;
    }
}

string libVoiC_gf_PS_ObjectiveTableString (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return ("PS_Obj_" + (lp_objective));
}

bool libVoiC_gf_PS_ObjectiveCountsDown (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("MissionObjective", libVoiC_gf_PS_ObjectiveUserDataInstance(lp_objective), "CountDown", 1) == 1);
}

void libVoiC_gf_PC_MovieStartRecording (string lp_fileName) {
    // Automatic Variable Declarations
    // Implementation
    libVoiC_gv_pC_MovieRecordingCount += 1;
    if ((libVoiC_gv_pC_MovieRecordingCount != 1)) {
        return ;
    }

    MovieStartRecording(lp_fileName);
}

void libVoiC_gf_PC_MovieStopRecording () {
    // Automatic Variable Declarations
    // Implementation
    libVoiC_gv_pC_MovieRecordingCount -= 1;
    if ((libVoiC_gv_pC_MovieRecordingCount == 0)) {
        MovieStopRecording();
    }

}

void libVoiC_gf_DisplayConversationTimestamp (string lp_conversation) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto597833BA_ae;
    const int auto597833BA_ai = 1;

    // Variable Initialization

    // Implementation
    auto597833BA_ae = UserDataInstanceCount("Timestamps");
    lv_index = 1;
    for ( ; ( (auto597833BA_ai >= 0 && lv_index <= auto597833BA_ae) || (auto597833BA_ai < 0 && lv_index >= auto597833BA_ae) ) ; lv_index += auto597833BA_ai ) {
        if ((UserDataGetGameLink("Timestamps", UserDataInstance("Timestamps", lv_index), "Conversation", 1) == lp_conversation)) {
            if ((UserDataGetInt("Timestamps", UserDataInstance("Timestamps", lv_index), "Wait", 1) == 1)) {
                libVoiC_gf_DisplayTimestamp(UserDataInstance("Timestamps", lv_index), true);
            }
            else {
                libVoiC_gf_DisplayTimestamp(UserDataInstance("Timestamps", lv_index), false);
            }
            return ;
        }

    }
}

void libVoiC_gf_DisplayTimestamp (string lp_timestamp, bool lp_waitDontWait) {
    // Variable Declarations
    bool lv_cinematicOn;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libVoiC_gv_pC_CutsceneTimestamp = lp_timestamp;
    if ((lp_waitDontWait == true)) {
        lv_cinematicOn = libNtve_gf_PlayerInCinematicMode(1);
        if ((lv_cinematicOn == false)) {
            libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
        }

        UISetWorldVisible(PlayerGroupAll(), false);
        TriggerExecute(libVoiC_gt_PC_DisplayTimestampSkippable, true, true);
        UIHideTextCrawl(PlayerGroupAll());
        Wait(0.625, c_timeGame);
        UISetWorldVisible(PlayerGroupAll(), true);
        if ((lv_cinematicOn == false)) {
            libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
        }

    }
    else {
        TriggerExecute(libVoiC_gt_PC_DisplayTimestamp, true, false);
    }
}

void libVoiC_gf_HaltTimestamp () {
    // Automatic Variable Declarations
    // Implementation
    TriggerStop(libVoiC_gt_PC_DisplayTimestampSkippable);
    TriggerStop(libVoiC_gt_PC_DisplayTimestamp);
    UIHideTextCrawl(PlayerGroupAll());
}

void libVoiC_gf_PC_DisplayCinematicTimestamp (string lp_scene) {
    // Automatic Variable Declarations
    string auto47640054_val;

    // Implementation
    auto47640054_val = lp_scene;
    if (auto47640054_val == "Aiur01Debrief") {
        libVoiC_gf_DisplayTimestamp("Aiur01Debrief", true);
        UISetWorldVisible(PlayerGroupAll(), false);
    }
    else if (auto47640054_val == "Aiur02Debrief") {
        libVoiC_gf_DisplayTimestamp("Aiur02Debrief", true);
        UISetWorldVisible(PlayerGroupAll(), false);
    }
    else {
    }
}

string libVoiC_gf_PC_SceneMovie (string lp_scene) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetMovie("Scenes", lp_scene, "SceneFile", 1);
}

string libVoiC_gf_PC_CinematicCutscene (string lp_scene) {
    // Automatic Variable Declarations
    string auto25CA10BD_val;

    // Implementation
    auto25CA10BD_val = lp_scene;
    if (auto25CA10BD_val == "Aiur01Debrief") {
        return "Cutscenes\\Cutscene_Aiur01Debrief.SC2Cutscene";
    }
    else if (auto25CA10BD_val == "Aiur02Debrief") {
        return "Cutscenes\\Cutscene_Aiur02Debrief.SC2Cutscene";
    }
    else if (auto25CA10BD_val == "Aiur03Debrief") {
        return "Cutscenes\\Cutscene_AiurComplete.SC2Cutscene";
    }
    else if (auto25CA10BD_val == "Ulnar03MissionEnd") {
        return "Cutscenes\\Cutscene_MissionUlnar03End.SC2Cutscene";
    }
    else if (auto25CA10BD_val == "Purifier03MissionEnd") {
        return "Cutscenes\\Cutscene_MissionPurifier03End.SC2Cutscene";
    }
    else if (auto25CA10BD_val == "ProtossStinger") {
        return "Cutscenes\\Cutscene_ProtossStinger.SC2Cutscene";
    }
    else if (auto25CA10BD_val == "EpilogueStart") {
        return "Cutscenes\\Cutscene_Epilogue01Arrival.SC2Cutscene";
    }
    else if (auto25CA10BD_val == "Epilogue01MissionStart") {
        return "Cutscenes\\Cutscene_MissionEpilogue01Start.SC2Cutscene";
    }
    else if (auto25CA10BD_val == "Epilogue01Debrief") {
        return "Cutscenes\\Cutscene_Epilogue01Post.SC2Cutscene";
    }
    else {
    }
    return null;
}

text libVoiC_gf_StorySceneName (string lp_scene) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("Scenes", lp_scene, "Name", 1);
}

bool libVoiC_gf_StoryScenePlayed (string lp_scene) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("Scenes", lp_scene, "Played", 1) > 0);
}

void libVoiC_gf_SetStoryScenePlayed (string lp_scene, bool lp_played) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_played == true)) {
        UserDataSetInt("Scenes", lp_scene, "Played", 1, 1);
    }
    else {
        UserDataSetInt("Scenes", lp_scene, "Played", 1, 0);
    }
}

void libVoiC_gf_CampaignPlayCutscene (string lp_file, point lp_position, bool lp_waitDontWait, bool lp_allowSkip) {
    // Automatic Variable Declarations
    // Implementation
    CutsceneCreateNew(lp_file, lp_position, 0.0, PlayerGroupAll(), true);
    libVoiC_gv_pC_CurrentCampaignCutscene = CutsceneLastCreated();
    libVoiC_gv_pC_CampaignCutsceneSkippable = (lp_allowSkip == true);
    TriggerExecute(libVoiC_gt_PC_WaitForCutscene, true, lp_waitDontWait);
}

void libVoiC_gf_CampaignPlayCutscene2 (string lp_file, bool lp_waitDontWait, bool lp_allowSkip) {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libVoiC_gv_pC_CampaignCutsceneDialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeCutscene);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCutscene(DialogControlLastCreated(), lp_file, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderType(DialogControlLastCreated(), c_triggerRenderTypeHDR, PlayerGroupAll());
    libVoiC_gv_pC_CurrentCampaignCutscene = CutsceneGetTriggerControl(DialogControlLastCreated());
    libVoiC_gv_pC_CampaignCutsceneSkippable = (lp_allowSkip == true);
    CutscenePlay(libVoiC_gv_pC_CurrentCampaignCutscene);
    TriggerExecute(libVoiC_gt_PC_WaitForDialogCutscene, true, lp_waitDontWait);
}

void libVoiC_gf_CampaignStopCutscene () {
    // Automatic Variable Declarations
    // Implementation
    if (((TriggerActiveCount(libVoiC_gt_PC_WaitForCutscene) > 0) || (TriggerActiveCount(libVoiC_gt_PC_WaitForDialogCutscene) > 0))) {
        TriggerStop(libVoiC_gt_PC_WaitForCutscene);
        TriggerStop(libVoiC_gt_PC_WaitForDialogCutscene);
        libVoiC_gf_PC_StatEventAddInt("Completed", 0, libVoiC_gv_pC_SceneStatEvent);
    }

    CutsceneStop(libVoiC_gv_pC_CurrentCampaignCutscene);
    DialogDestroy(libVoiC_gv_pC_CampaignCutsceneDialog);
}

void libVoiC_gf_PlayCinematic (string lp_scene, bool lp_animatic) {
    // Variable Declarations
    bool lv_wasStoryMode;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UserDataSetInt("Scenes", lp_scene, "Played", 1, 1);
    libVoiC_gf_PC_StatEventCreate("ScenePlay");
    libVoiC_gf_PC_StatEventAddStr("ID", (lp_scene), libVoiC_gf_PC_StatEventLast());
    libVoiC_gv_pC_SceneStatEvent = StatEventLastCreated();
    if ((libVoiC_gf_PC_CinematicCutscene(lp_scene) != null)) {
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, true, true);
        libVCUI_gf_PU_GPVisibilityAutoUpdate(false, c_transitionDurationImmediate);
        lv_wasStoryMode = libNtve_gf_PlayerInStoryMode(1);
        libNtve_gf_StoryMode(PlayerGroupAll(), true);
        libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
        libVoiC_gf_PC_MovieStartRecording(UserDataGetString("Scenes", lp_scene, "RecordFileName", 1));
        libVoiC_gf_PC_DisplayCinematicTimestamp(lp_scene);
        libVoiC_gf_CampaignPlayCutscene2(libVoiC_gf_PC_CinematicCutscene(lp_scene), true, true);
        libVoiC_gf_PC_MovieStopRecording();
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
        libVCUI_gf_PU_GPVisibilityAutoUpdate(true, c_transitionDurationImmediate);
        if ((lv_wasStoryMode == false)) {
            libNtve_gf_StoryMode(PlayerGroupAll(), false);
        }

        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, false, true);
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
        libVoiC_gf_PC_StatEventDone(libVoiC_gv_pC_SceneStatEvent);
        return ;
    }

    if ((libVoiC_gf_PC_SceneMovie(lp_scene) != null)) {
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, true, true);
        libVCUI_gf_PU_GPVisibilityAutoUpdate(false, c_transitionDurationImmediate);
        libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
        if ((libVoiC_gf_PC_CampaignMapTypeCheck(libVoiC_gf_CurrentMap(), c_mapKindMission) == true)) {
            UISetWorldVisible(PlayerGroupAll(), false);
        }

        libVoiC_gf_MuteUnmuteAllSoundChannelsExcept(true, c_soundCategoryMovie, PlayerGroupAll());
        SoundChannelMute(PlayerGroupAll(), c_soundCategoryMusic, false);
        if ((libVoiC_gv_pC_LoadingComplete == false)) {
            SoundChannelMute(PlayerGroupAll(), c_soundCategoryUI, false);
        }

        libVoiC_gv_pC_PlaySceneCurrentScene = lp_scene;
        libVoiC_gf_PC_DisplayCinematicTimestamp(lp_scene);
        TriggerExecute(libVoiC_gt_PC_PlaySceneSkippable, true, true);
        libVoiC_gf_HaltTimestamp();
        TransmissionClearAll();
        libVoiC_gf_MuteUnmuteAllSoundChannelsExcept(false, c_soundCategoryMovie, PlayerGroupAll());
        if ((libVoiC_gf_PC_CampaignMapTypeCheck(libVoiC_gf_CurrentMap(), c_mapKindMission) == true)) {
            UISetWorldVisible(PlayerGroupAll(), true);
        }

        libVoiC_gf_CinematicFade(true, 0.0, Color(0.00, 0.00, 0.00), true);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
        libVCUI_gf_PU_GPVisibilityAutoUpdate(true, c_transitionDurationImmediate);
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, false, true);
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
        libVoiC_gf_PC_StatEventDone(libVoiC_gv_pC_SceneStatEvent);
        return ;
    }

}

void libVoiC_gf_PC_FadeAllSoundsExceptMusic (fixed lp_duration, bool lp_wait) {
    // Automatic Variable Declarations
    // Implementation
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, lp_duration);
    if ((lp_wait == true)) {
        Wait(lp_duration, c_timeReal);
    }

}

void libVoiC_gf_PC_SoACalculateCurrency () {
    // Variable Declarations
    string lv_indexMission;
    int lv_currency;

    // Automatic Variable Declarations
    int auto230B2FD8_ae;
    int auto230B2FD8_ai;

    // Variable Initialization

    // Implementation
    auto230B2FD8_ae = CatalogEntryCount(c_gameCatalogMap);
    auto230B2FD8_ai = 1;
    while (auto230B2FD8_ai <= auto230B2FD8_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto230B2FD8_ai);
        auto230B2FD8_ai = auto230B2FD8_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((libVoiC_gf_MissionStatusCheck(lv_indexMission, libVoiC_ge_MissionStatus_Completed) == true)) {
                lv_currency += libVoiC_gf_MissionRewardTotalEarned(lv_indexMission, "ShipEnergy");
            }

        }    
    }
    lv_currency += libVoiC_gv_pCX_SoACheatCurrency;
    libVoiC_gv_pC_SoACurrency = lv_currency;
}

void libVoiC_gf_PC_SoAUpgradeLevelSet (string lp_soAUpgrade, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    UserDataSetInt("SpearofAdunUpgrade", lp_soAUpgrade, "Level", 1, lp_level);
}

bool libVoiC_gf_PC_SoAUpgradeSlotUnlocked (string lp_soAUpgrade) {
    // Automatic Variable Declarations
    string autoBB812DFE_val;

    // Implementation
    autoBB812DFE_val = lp_soAUpgrade;
    if (autoBB812DFE_val == "ShipShieldUpgrades") {
        return libVoiC_gf_PC_PerkGroupUnlocked("GPType4");
    }
    else {
    }
    return true;
}

int libVoiC_gf_PC_SoAUpgradeLevel (string lp_soAUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("SpearofAdunUpgrade", lp_soAUpgrade, "Level", 1);
}

int libVoiC_gf_PC_SoAUpgradeLevelMax (string lp_soAUpgrade) {
    // Variable Declarations
    int lv_levelBonus;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    return (UserDataGetInt("SpearofAdunUpgrade", lp_soAUpgrade, "MaxLevel", 1)+lv_levelBonus);
}

text libVoiC_gf_PC_SoAUpgradeTitle (string lp_soAUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("SpearofAdunUpgrade", lp_soAUpgrade, "Name", 1);
}

text libVoiC_gf_PC_SoAUpgradeTooltip (string lp_soAUpgrade) {
    // Variable Declarations
    text lv_tooltip;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_VoiC_DF94338A", "A", UserDataGetText("SpearofAdunUpgrade", lp_soAUpgrade, "Tooltip", 1));
    TextExpressionSetToken("Param/Expression/lib_VoiC_DF94338A", "B", IntToText(libVoiC_gv_pCC_SoACurrencyPerUpgrade));
    lv_tooltip = TextExpressionAssemble("Param/Expression/lib_VoiC_DF94338A");
    return lv_tooltip;
}

string libVoiC_gf_PC_SoAUpgradeIcon (string lp_soAUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetImagePath("SpearofAdunUpgrade", lp_soAUpgrade, "Icon", 1);
}

int libVoiC_gf_PC_SoACurrencyMax () {
    // Automatic Variable Declarations
    // Implementation
    return libVoiC_gv_pC_SoACurrency;
}

int libVoiC_gf_PC_SoACurrencyAvail () {
    // Variable Declarations
    int lv_avail;
    string lv_indexPerk;
    string lv_indexUpgrade;

    // Automatic Variable Declarations
    int auto2D4099A8_ai;
    int auto2D4099A8_ae;
    int auto28810986_ai;
    int auto28810986_ae;

    // Variable Initialization

    // Implementation
    lv_avail = libVoiC_gf_PC_SoACurrencyMax();
    auto2D4099A8_ai = 1;
    auto2D4099A8_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (auto2D4099A8_ai < auto2D4099A8_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", auto2D4099A8_ai);
        auto2D4099A8_ai = auto2D4099A8_ai+1;
        if ((libVoiC_gf_PC_PerkStateCheck(lv_indexPerk, libVoiC_ge_PC_PerkState_Active) == true)) {
            lv_avail -= UserDataGetInt("CampaignPerk", lv_indexPerk, "Cost", 1);
        }

    }
    auto28810986_ai = 1;
    auto28810986_ae = UserDataInstanceCount("SpearofAdunUpgrade")+1;
    while (auto28810986_ai < auto28810986_ae) {
        lv_indexUpgrade = UserDataInstance("SpearofAdunUpgrade", auto28810986_ai);
        auto28810986_ai = auto28810986_ai+1;
        lv_avail -= (libVoiC_gf_PC_SoAUpgradeLevel(lv_indexUpgrade)*libVoiC_gv_pCC_SoACurrencyPerUpgrade);
    }
    return lv_avail;
}

bool libVoiC_gf_PC_SoATierRequirementsMet (string lp_perkGroup) {
    // Variable Declarations
    string lv_indexMission;
    int lv_unlockCount;

    // Automatic Variable Declarations
    int autoCF6CD30E_ae;
    int autoCF6CD30E_ai;

    // Variable Initialization

    // Implementation
    autoCF6CD30E_ae = CatalogEntryCount(c_gameCatalogMap);
    autoCF6CD30E_ai = 1;
    while (autoCF6CD30E_ai <= autoCF6CD30E_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoCF6CD30E_ai);
        autoCF6CD30E_ai = autoCF6CD30E_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((libVoiC_gf_MissionStatusCheck(lv_indexMission, libVoiC_ge_MissionStatus_Completed) == true) && (libVoiC_gf_MissionUnlocksSpearofAdunTier(lv_indexMission) == 1)) {
                lv_unlockCount += 1;
            }

        }    
    }
    if ((libVoiC_gf_PC_PerkGroupUIOrderX(lp_perkGroup) <= lv_unlockCount)) {
        return true;
    }

    return false;
}

bool libVoiC_gf_SpearofAdunHasUnusedTech () {
    // Automatic Variable Declarations
    // Implementation
    libVoiC_gf_PC_SoACalculateCurrency();
    if ((libVoiC_gf_PC_SoACurrencyAvail() > 0)) {
        return true;
    }

    return false;
}

void libVoiC_gf_PC_UpdateSoAStates () {
    // Variable Declarations
    string lv_indexSoAUpgrade;

    // Automatic Variable Declarations
    int auto2E827490_ai;
    int auto2E827490_ae;

    // Variable Initialization

    // Implementation
    auto2E827490_ai = 1;
    auto2E827490_ae = UserDataInstanceCount("SpearofAdunUpgrade")+1;
    while (auto2E827490_ai < auto2E827490_ae) {
        lv_indexSoAUpgrade = UserDataInstance("SpearofAdunUpgrade", auto2E827490_ai);
        auto2E827490_ai = auto2E827490_ai+1;
        if ((libVoiC_gf_PC_SoAUpgradeSlotUnlocked(lv_indexSoAUpgrade) == false)) {
            libVoiC_gf_PC_SoAUpgradeLevelSet(lv_indexSoAUpgrade, 0);
        }

    }
}

void libVoiC_gf_PC_SaveSoAToBank (bank lp_bank, string lp_section) {
    // Automatic Variable Declarations
    // Implementation
    UserDataSaveType("SpearofAdunUpgrade", lp_bank, lp_section);
    libVoiC_gf_PC_SaveTransitionVarInteger(lp_bank, lp_section, "CheatCurrency", libVoiC_gv_pCX_SoACheatCurrency, 0);
    libVoiC_gf_PC_SaveTransitionVarInteger(lp_bank, lp_section, "PreviousTotalCurrency", libVoiC_gv_pCX_SoAPreviousTotalPower, 0);
}

void libVoiC_gf_PC_LoadSoAFromBank (bank lp_bank, string lp_section) {
    // Automatic Variable Declarations
    // Implementation
    UserDataLoadType("SpearofAdunUpgrade", lp_bank, lp_section);
    libVoiC_gv_pCX_SoACheatCurrency = libVoiC_gf_PC_LoadTransitionVarInteger(lp_bank, lp_section, "CheatCurrency", 0);
    libVoiC_gv_pCX_SoAPreviousTotalPower = libVoiC_gf_PC_LoadTransitionVarInteger(lp_bank, lp_section, "PreviousTotalCurrency", 0);
}

void libVoiC_gf_PC_ApplySoATech () {
    // Variable Declarations
    int lv_techIndex;
    string lv_indexUpgrade;

    // Automatic Variable Declarations
    int auto42A758F1_ai;
    int auto42A758F1_ae;
    int autoB818D9AD_ae;
    const int autoB818D9AD_ai = 1;

    // Variable Initialization

    // Implementation
    auto42A758F1_ai = 1;
    auto42A758F1_ae = UserDataInstanceCount("SpearofAdunUpgrade")+1;
    while (auto42A758F1_ai < auto42A758F1_ae) {
        lv_indexUpgrade = UserDataInstance("SpearofAdunUpgrade", auto42A758F1_ai);
        auto42A758F1_ai = auto42A758F1_ai+1;
        autoB818D9AD_ae = UserDataFieldValueCount("SpearofAdunUpgrade", "Upgrade");
        lv_techIndex = 1;
        for ( ; ( (autoB818D9AD_ai >= 0 && lv_techIndex <= autoB818D9AD_ae) || (autoB818D9AD_ai < 0 && lv_techIndex >= autoB818D9AD_ae) ) ; lv_techIndex += autoB818D9AD_ai ) {
            if ((UserDataGetUpgrade("SpearofAdunUpgrade", lv_indexUpgrade, "Upgrade", lv_techIndex) != null)) {
                libNtve_gf_SetUpgradeLevelForPlayer(libVoiC_gv_pCC_SoAPlayerSlot, UserDataGetUpgrade("SpearofAdunUpgrade", lv_indexUpgrade, "Upgrade", lv_techIndex), libVoiC_gf_PC_SoAUpgradeLevel(lv_indexUpgrade));
            }

        }
    }
}

void libVoiC_gf_PC_ResetSoATech () {
    // Variable Declarations
    string lv_indexSoAUpgrade;

    // Automatic Variable Declarations
    int auto0B36447A_ai;
    int auto0B36447A_ae;

    // Variable Initialization

    // Implementation
    auto0B36447A_ai = 1;
    auto0B36447A_ae = UserDataInstanceCount("SpearofAdunUpgrade")+1;
    while (auto0B36447A_ai < auto0B36447A_ae) {
        lv_indexSoAUpgrade = UserDataInstance("SpearofAdunUpgrade", auto0B36447A_ai);
        auto0B36447A_ai = auto0B36447A_ai+1;
        libVoiC_gf_PC_SoAUpgradeLevelSet(lv_indexSoAUpgrade, 0);
    }
    libVoiC_gf_PC_SoACalculateCurrency();
}

string libVoiC_gf_PC_TechUnitOfArmyCategory (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "UserReference", 1));
}

string libVoiC_gf_PC_ArmyCategoryOfTechUnit (string lp_techUnit) {
    // Variable Declarations
    string lv_indexCategory;

    // Automatic Variable Declarations
    int auto0502DF11_ae;
    int auto0502DF11_ai;

    // Variable Initialization

    // Implementation
    auto0502DF11_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto0502DF11_ai = 1;
    while (auto0502DF11_ai <= auto0502DF11_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto0502DF11_ai);
        if ((libVoiC_gf_PC_TechUnitOfArmyCategory(lv_indexCategory) == lp_techUnit)) {
            return lv_indexCategory;
        }

        auto0502DF11_ai = auto0502DF11_ai + 1;
    }
    return null;
}

text libVoiC_gf_PC_ArmyCategoryName (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Name", 1));
}

text libVoiC_gf_PC_ArmyCategoryTitle (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Title", 1));
}

text libVoiC_gf_PC_ArmyCategoryUnitDescription (string lp_armyCategory) {
    // Variable Declarations
    string lv_unitLink;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_unitLink = (CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_armyCategory, "Unit", 1));
    return StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, (lv_unitLink), "Description", 1));
}

string libVoiC_gf_PC_ArmyCategoryIcon (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Icon", c_playerAny));
}

string libVoiC_gf_PC_ArmyCategoryEvolutionIcon (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetImagePath("TechUnit", libVoiC_gf_PC_TechUnitOfArmyCategory(lp_armyCategory), "EvolutionMissionIcon", 1);
}

string libVoiC_gf_PC_ArmyCategoryUnitType (string lp_armyCategory) {
    // Variable Declarations
    string lv_value;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_value = "";

    // Implementation
    if ((lp_armyCategory == null)) {
        return null;
    }

    lv_value = CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Unit", 1);
    return (lv_value);
}

soundlink libVoiC_gf_PC_ArmyCategoryUnlockedVO (string lp_armyCategory) {
    // Automatic Variable Declarations
    string auto063108CE_val;

    // Implementation
    auto063108CE_val = libVoiC_gf_PC_TechUnitOfArmyCategory(lp_armyCategory);
    if (auto063108CE_val == "DarkTemplar") {
        return SoundLink(ConversationDataGetSound("pTutorial_Army|Line00009", true), c_soundIndexAny);
    }
    else if (auto063108CE_val == "HighTemplar") {
        return SoundLink(ConversationDataGetSound("pTutorial_Army|Line00013", true), c_soundIndexAny);
    }
    else if (auto063108CE_val == "Immortal") {
        return SoundLink(ConversationDataGetSound("pTutorial_Army|Line00011", true), c_soundIndexAny);
    }
    else if (auto063108CE_val == "Sentry") {
        return SoundLink(ConversationDataGetSound("pTutorial_Army|Line00010", true), c_soundIndexAny);
    }
    else if (auto063108CE_val == "Colossus") {
        return SoundLink(ConversationDataGetSound("pTutorial_Army|Line00016", true), c_soundIndexAny);
    }
    else if (auto063108CE_val == "Phoenix") {
        return SoundLink(ConversationDataGetSound("pTutorial_Army|Line00012", true), c_soundIndexAny);
    }
    else if (auto063108CE_val == "Void Ray") {
        return SoundLink(ConversationDataGetSound("pTutorial_Army|Line00014", true), c_soundIndexAny);
    }
    else if (auto063108CE_val == "Carrier") {
        return SoundLink(ConversationDataGetSound("pTutorial_Army|Line00015", true), c_soundIndexAny);
    }
    else {
        return null;
    }
}

soundlink libVoiC_gf_PC_ArmyCategoryNewFactionVO (string lp_armyCategory) {
    // Automatic Variable Declarations
    string auto95CC13F5_val;

    // Implementation
    auto95CC13F5_val = libVoiC_gf_PC_TechUnitOfArmyCategory(lp_armyCategory);
    if (auto95CC13F5_val == "Zealot") {
        return SoundLink(ConversationDataGetSound("pTutorial_Army|Line00031", true), c_soundIndexAny);
    }
    else if (auto95CC13F5_val == "Stalker") {
        return SoundLink(ConversationDataGetSound("pTutorial_Army|Line00034", true), c_soundIndexAny);
    }
    else if (auto95CC13F5_val == "DarkTemplar") {
        return SoundLink(ConversationDataGetSound("pTutorial_Army|Line00033", true), c_soundIndexAny);
    }
    else if (auto95CC13F5_val == "HighTemplar") {
        return SoundLink(ConversationDataGetSound("pTutorial_Army|Line00035", true), c_soundIndexAny);
    }
    else if (auto95CC13F5_val == "Immortal") {
        return SoundLink(ConversationDataGetSound("pTutorial_Army|Line00049", true), c_soundIndexAny);
    }
    else if (auto95CC13F5_val == "Sentry") {
        return SoundLink(ConversationDataGetSound("pTutorial_Army|Line00050", true), c_soundIndexAny);
    }
    else if (auto95CC13F5_val == "Colossus") {
        return SoundLink(ConversationDataGetSound("pTutorial_Army|Line00051", true), c_soundIndexAny);
    }
    else if (auto95CC13F5_val == "Phoenix") {
        return SoundLink(ConversationDataGetSound("pTutorial_Army|Line00034", true), c_soundIndexAny);
    }
    else if (auto95CC13F5_val == "Void Ray") {
        return SoundLink(ConversationDataGetSound("pTutorial_Army|Line00052", true), c_soundIndexAny);
    }
    else if (auto95CC13F5_val == "Carrier") {
        return SoundLink(ConversationDataGetSound("pTutorial_Army|Line00053", true), c_soundIndexAny);
    }
    else {
        return null;
    }
}

int libVoiC_gf_PC_ArmyCategoryState (string lp_armyCategory) {
    // Variable Declarations
    int lv_value;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_value = DataTableGetInt(true, (libVoiC_gv_pCC_ArmyCategoryStateKey + (lp_armyCategory)));
    return lv_value;
}

string libVoiC_gf_PC_ArmyCategoryCutsceneFilter (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetString("TechUnit", libVoiC_gf_PC_TechUnitOfArmyCategory(lp_armyCategory), "CutsceneFilters", 1);
}

string libVoiC_gf_PC_ArmyStringFromUnitType (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_unitType);
}

string libVoiC_gf_PC_ArmyStringFromArmyCategory (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return (libVoiC_gf_PC_ArmyCategoryUnitType(lp_armyCategory));
}

string libVoiC_gf_PC_ArmyStringFromArmyUnit (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return (libVoiC_gf_PC_StoryArmyUnitUnitType(lp_armyUnit));
}

void libVoiC_gf_PC_SetArmyCategoryState (string lp_armyCategory, int lp_state) {
    // Variable Declarations
    string lv_indexArmyUnit;

    // Automatic Variable Declarations
    int auto28EE512E_ae;
    int auto28EE512E_ai;

    // Variable Initialization

    // Implementation
    if ((libVoiC_gf_PC_ArmyCategoryState(lp_armyCategory) == lp_state)) {
        return ;
    }

    DataTableSetInt(true, (libVoiC_gv_pCC_ArmyCategoryStateKey + (lp_armyCategory)), (lp_state));
    if ((lp_state == c_armyCategoryStateLocked)) {
        auto28EE512E_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUnitArray", 1);
        auto28EE512E_ai = 1;
        while (auto28EE512E_ai <= auto28EE512E_ae) {
            lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUnitArray["+IntToString(auto28EE512E_ai-1)+"]", 1);
            libVoiC_gf_PC_SetArmyUnitState(lv_indexArmyUnit, c_armyUnitStateLocked);
            auto28EE512E_ai = auto28EE512E_ai + 1;
        }
    }

}

bool libVoiC_gf_ArmyCategoryStateCheck (string lp_armyCategory, int lp_state) {
    // Automatic Variable Declarations
    // Implementation
    return (libVoiC_gf_PC_ArmyCategoryState(lp_armyCategory) == lp_state);
}

string libVoiC_gf_EnabledUnitTypeforArmyCategory (string lp_armyCategory) {
    // Variable Declarations
    string lv_indexArmyUnit;

    // Automatic Variable Declarations
    int auto325B6519_ae;
    int auto325B6519_ai;

    // Variable Initialization

    // Implementation
    auto325B6519_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUnitArray", 1);
    auto325B6519_ai = 1;
    while (auto325B6519_ai <= auto325B6519_ae) {
        lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUnitArray["+IntToString(auto325B6519_ai-1)+"]", 1);
        if ((libVoiC_gf_CampaignTechUnitIsEnabled(libVoiC_gf_PC_TechUnitOfArmyUnit(lv_indexArmyUnit)) == true)) {
            return libVoiC_gf_PC_StoryArmyUnitUnitType(lv_indexArmyUnit);
        }

        auto325B6519_ai = auto325B6519_ai + 1;
    }
    return libVoiC_gf_PC_ArmyCategoryUnitType(lp_armyCategory);
}

string libVoiC_gf_PC_ArmyCategoryPlanetCamera (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetString("TechUnit", libVoiC_gf_PC_TechUnitOfArmyCategory(lp_armyCategory), "PlanetPanelCamera", 1);
}

string libVoiC_gf_PC_ArmyCategoryPurchasedUnit (string lp_armyCategory) {
    // Variable Declarations
    string lv_indexArmyUnit;

    // Automatic Variable Declarations
    int auto0AC66750_ae;
    int auto0AC66750_ai;

    // Variable Initialization

    // Implementation
    auto0AC66750_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUnitArray", 1);
    auto0AC66750_ai = 1;
    while (auto0AC66750_ai <= auto0AC66750_ae) {
        lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUnitArray["+IntToString(auto0AC66750_ai-1)+"]", 1);
        if ((libVoiC_gf_PC_StoryArmyUnitState(lv_indexArmyUnit) == c_armyUnitStatePurchased)) {
            return lv_indexArmyUnit;
        }

        auto0AC66750_ai = auto0AC66750_ai + 1;
    }
    return null;
}

void libVoiC_gf_PC_UpdateArmyCategoryStates (int lp_player) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexMission;
    string lv_missionCategory;
    string lv_missionCategoryExtra;
    string lv_requiredMission;
    int lv_index;

    // Automatic Variable Declarations
    int auto28EC32EC_ae;
    int auto28EC32EC_ai;
    int auto4E6D0E2C_ae;
    int auto4E6D0E2C_ai;
    const int autoC9238A4F_ae = 3;
    const int autoC9238A4F_ai = 1;
    int autoC8E789DF_ae;
    int autoC8E789DF_ai;

    // Variable Initialization

    // Implementation
    auto28EC32EC_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto28EC32EC_ai = 1;
    while (auto28EC32EC_ai <= auto28EC32EC_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto28EC32EC_ai);
        DataTableSetBool(false, (lv_indexCategory), false);
        auto28EC32EC_ai = auto28EC32EC_ai + 1;
    }
    auto4E6D0E2C_ae = CatalogEntryCount(c_gameCatalogMap);
    auto4E6D0E2C_ai = 1;
    while (auto4E6D0E2C_ai <= auto4E6D0E2C_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto4E6D0E2C_ai);
        auto4E6D0E2C_ai = auto4E6D0E2C_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((libVoiC_gf_MissionStatusCheck(lv_indexMission, libVoiC_ge_MissionStatus_Completed) == true)) {
                lv_missionCategory = libVoiC_gf_MissionArmyCategoryUnlocked(lv_indexMission);
                if ((lv_missionCategory != null)) {
                    DataTableSetBool(false, (lv_missionCategory), true);
                }

                lv_index = 1;
                for ( ; ( (autoC9238A4F_ai >= 0 && lv_index <= autoC9238A4F_ae) || (autoC9238A4F_ai < 0 && lv_index >= autoC9238A4F_ae) ) ; lv_index += autoC9238A4F_ai ) {
                    lv_missionCategoryExtra = UserDataGetGameLink("Maps", libVoiC_gf_PC_MapUserDataInstance(lv_indexMission), "ExtraArmyCategoryUnlock", lv_index);
                    if ((lv_missionCategoryExtra != null)) {
                        DataTableSetBool(false, (lv_missionCategoryExtra), true);
                    }

                }
            }

        }    
    }
    autoC8E789DF_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoC8E789DF_ai = 1;
    while (autoC8E789DF_ai <= autoC8E789DF_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoC8E789DF_ai);
        if ((DataTableGetBool(false, (lv_indexCategory)) == true)) {
            libVoiC_gf_PC_SetArmyCategoryState(lv_indexCategory, c_armyCategoryStateUnlocked);
        }
        else {
            libVoiC_gf_PC_SetArmyCategoryState(lv_indexCategory, c_armyCategoryStateLocked);
        }
        autoC8E789DF_ai = autoC8E789DF_ai + 1;
    }
}

bool libVoiC_gf_PC_ArmyCategoryUsedInUI (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Flags[Hidden]", 1) == "0");
}

bool libVoiC_gf_PC_ArmyCategoryToastShown (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_armyCategory == null)) {
        return false;
    }

    return (UserDataGetInt("TechUnit", libVoiC_gf_PC_TechUnitOfArmyCategory(lp_armyCategory), "IsNew", 1) > 0);
}

void libVoiC_gf_PC_SetArmyCategoryToastShown (string lp_armyCategory, bool lp_shown) {
    // Automatic Variable Declarations
    // Implementation
    UserDataSetInt("TechUnit", libVoiC_gf_PC_TechUnitOfArmyCategory(lp_armyCategory), "IsNew", 1, BoolToInt(lp_shown));
}

bool libVoiC_gf_ArmyHasUnusedTech () {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUpgrade;
    string lv_indexUnit;
    bool lv_categoryFilled;

    // Automatic Variable Declarations
    int auto06F724AF_ae;
    int auto06F724AF_ai;
    int auto7700F035_ae;
    int auto7700F035_ai;

    // Variable Initialization

    // Implementation
    auto06F724AF_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto06F724AF_ai = 1;
    while (auto06F724AF_ai <= auto06F724AF_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto06F724AF_ai);
        if ((libVoiC_gf_ArmyCategoryStateCheck(lv_indexCategory, c_armyCategoryStateUnlocked) == true) && (libVoiC_gf_PC_ArmyCategoryUsedInUI(lv_indexCategory) == true)) {
            lv_categoryFilled = false;
            auto7700F035_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
            auto7700F035_ai = 1;
            while (auto7700F035_ai <= auto7700F035_ae) {
                lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto7700F035_ai-1)+"]", 1);
                if ((libVoiC_gf_PC_StoryArmyUnitState(lv_indexUnit) != c_armyUnitStateLocked) && (libVoiC_gf_PC_StoryArmyUnitState2(lv_indexUnit) == true)) {
                    return true;
                }

                if ((libVoiC_gf_PC_StoryArmyUnitState(lv_indexUnit) == c_armyUnitStatePurchased)) {
                    lv_categoryFilled = true;
                }

                auto7700F035_ai = auto7700F035_ai + 1;
            }
            if ((lv_categoryFilled == false)) {
                return true;
            }

        }

        auto06F724AF_ai = auto06F724AF_ai + 1;
    }
    return false;
}

int libVoiC_gf_NumberOfUnupgradedArmyCategories () {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUpgrade;
    string lv_indexUnit;
    int lv_unupgradedCategoriesCount;

    // Automatic Variable Declarations
    int auto3E569C64_ae;
    int auto3E569C64_ai;

    // Variable Initialization

    // Implementation
    auto3E569C64_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto3E569C64_ai = 1;
    while (auto3E569C64_ai <= auto3E569C64_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto3E569C64_ai);
        if ((libVoiC_gf_ArmyCategoryStateCheck(lv_indexCategory, c_armyCategoryStateUnlocked) == true) && (libVoiC_gf_PC_ArmyCategoryUsedInUI(lv_indexCategory) == true)) {
            if ((libVoiC_gf_PC_StoryArmyUnitState(libVoiC_gf_StoryArmyUnitInCategory(lv_indexCategory, 1)) != c_armyUnitStatePurchased) && (libVoiC_gf_PC_StoryArmyUnitState(libVoiC_gf_StoryArmyUnitInCategory(lv_indexCategory, 2)) != c_armyUnitStatePurchased) && (libVoiC_gf_PC_StoryArmyUnitState(libVoiC_gf_StoryArmyUnitInCategory(lv_indexCategory, 3)) != c_armyUnitStatePurchased)) {
                lv_unupgradedCategoriesCount = (lv_unupgradedCategoriesCount + 1);
            }

        }

        auto3E569C64_ai = auto3E569C64_ai + 1;
    }
    return lv_unupgradedCategoriesCount;
}

string libVoiC_gf_PC_StoryArmyUnitUnitType (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_armyUnit), "Unit", 1));
}

string libVoiC_gf_PC_ArmyUnitOfTechUnit (string lp_armyUnit) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUnit;

    // Automatic Variable Declarations
    int auto08EA5277_ae;
    int auto08EA5277_ai;
    int auto53287F0D_ae;
    int auto53287F0D_ai;

    // Variable Initialization

    // Implementation
    auto08EA5277_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto08EA5277_ai = 1;
    while (auto08EA5277_ai <= auto08EA5277_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto08EA5277_ai);
        auto53287F0D_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        auto53287F0D_ai = 1;
        while (auto53287F0D_ai <= auto53287F0D_ae) {
            lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto53287F0D_ai-1)+"]", 1);
            if ((libVoiC_gf_PC_TechUnitOfArmyUnit(lv_indexUnit) == lp_armyUnit)) {
                return lv_indexUnit;
            }

            auto53287F0D_ai = auto53287F0D_ai + 1;
        }
        auto08EA5277_ai = auto08EA5277_ai + 1;
    }
    return null;
}

text libVoiC_gf_PC_ArmyUnitTitle (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("TechUnit", libVoiC_gf_PC_TechUnitOfArmyUnit(lp_armyUnit), "DescriptionShort", 1);
}

string libVoiC_gf_PC_TechUnitOfArmyUnit (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_armyUnit), "UserReference", 1));
}

string libVoiC_gf_StoryArmyUnitInCategory (string lp_category, int lp_index) {
    // Variable Declarations
    string lv_armyUnitString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_armyUnitString = "";

    // Implementation
    lv_armyUnitString = libVoiC_gf_PC_CatalogGetFieldArrayValue(c_gameCatalogArmyCategory, (lp_category), "ArmyUnitArray", lp_index, 1);
    return (lv_armyUnitString);
}

text libVoiC_gf_StoryArmyUnitName (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_armyUnit), "Name", 1));
}

text libVoiC_gf_PC_ArmyUnitDescription (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyUnit, lp_armyUnit, "Description", 1));
}

text libVoiC_gf_PC_ArmyUnitStats (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyUnit, lp_armyUnit, "Description", 1));
}

string libVoiC_gf_PC_ArmyUnitIcon (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_armyCategory), "Icon", c_playerAny));
}

string libVoiC_gf_PC_ArmyUnitMovie (string lp_armyUnit) {
    // Variable Declarations
    string lv_moviePath;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_moviePath = "";

    // Implementation
    lv_moviePath = CatalogFieldValueGet(c_gameCatalogArmyUnit, lp_armyUnit, "Movie", 1);
    return (lv_moviePath);
}

bool libVoiC_gf_PC_ArmyUnitFactionUnlocked (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_armyUnit == null)) {
        return false;
    }

    if ((UserDataGetGameLink("ArmyUpgradeCategories", libVoiC_gf_PC_ArmyUnitFaction(lp_armyUnit), "RequiredMission", 1) == null)) {
        return true;
    }

    return libVoiC_gf_MissionStatusCheck(UserDataGetGameLink("ArmyUpgradeCategories", libVoiC_gf_PC_ArmyUnitFaction(lp_armyUnit), "RequiredMission", 1), libVoiC_ge_MissionStatus_Completed);
}

bool libVoiC_gf_PC_ArmyUnitStartsLocked (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("TechUnit", libVoiC_gf_PC_TechUnitOfArmyUnit(lp_armyUnit), "StartsLocked", 1) == 1);
}

string libVoiC_gf_PC_ArmyUnitRequiredMission (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("TechUnit", libVoiC_gf_PC_TechUnitOfArmyUnit(lp_armyUnit), "RequiredMission", 1);
}

string libVoiC_gf_PC_ArmyCategoryOfArmyUnit (string lp_armyUnit) {
    // Variable Declarations
    string lv_indexUnit;
    string lv_indexCategory;

    // Automatic Variable Declarations
    int autoCE15C86D_ae;
    int autoCE15C86D_ai;
    int auto43B42A5A_ae;
    int auto43B42A5A_ai;

    // Variable Initialization

    // Implementation
    autoCE15C86D_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoCE15C86D_ai = 1;
    while (autoCE15C86D_ai <= autoCE15C86D_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoCE15C86D_ai);
        auto43B42A5A_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        auto43B42A5A_ai = 1;
        while (auto43B42A5A_ai <= auto43B42A5A_ae) {
            lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto43B42A5A_ai-1)+"]", 1);
            if ((lv_indexUnit == lp_armyUnit)) {
                return lv_indexCategory;
            }

            auto43B42A5A_ai = auto43B42A5A_ai + 1;
        }
        autoCE15C86D_ai = autoCE15C86D_ai + 1;
    }
    return null;
}

text libVoiC_gf_PC_ArmyUnitFactionName (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("ArmyUpgradeCategories", libVoiC_gf_PC_ArmyUnitFaction(lp_armyUnit), "Name", 1);
}

string libVoiC_gf_PC_ArmyUnitFactionImage (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetImagePath("ArmyUpgradeCategories", libVoiC_gf_PC_ArmyUnitFaction(lp_armyUnit), "Icon", 1);
}

string libVoiC_gf_PC_ArmyUnitFactionHoverImage (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetImagePath("ArmyUpgradeCategories", libVoiC_gf_PC_ArmyUnitFaction(lp_armyUnit), "HoverIcon", 1);
}

string libVoiC_gf_PC_ArmyUnitFactionCategoryImage (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetImagePath("ArmyUpgradeCategories", libVoiC_gf_PC_ArmyUnitFaction(lp_armyUnit), "CategoryIcon", 1);
}

string libVoiC_gf_PC_ArmyUnitFaction (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetUserInstance("TechUnit", libVoiC_gf_PC_TechUnitOfArmyUnit(lp_armyUnit), "Faction", 1);
}

string libVoiC_gf_PC_ArmyUnitSkin (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyUnit, lp_armyCategory, "Skin", 1));
}

int libVoiC_gf_PC_StoryArmyUnitState (string lp_armyUnit) {
    // Variable Declarations
    int lv_value;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_value = DataTableGetInt(true, (libVoiC_gv_pCC_ArmyUnitStateKey + (lp_armyUnit)));
    return lv_value;
}

bool libVoiC_gf_PC_StoryArmyUnitState2 (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("TechUnit", libVoiC_gf_PC_TechUnitOfArmyUnit(lp_armyUnit), "IsNew", 1) == 1);
}

string libVoiC_gf_PC_ArmyUnitCutsceneFilter (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetString("ArmyUpgradeCategories", libVoiC_gf_PC_ArmyUnitFaction(lp_armyUnit), "CutsceneFilter", 1);
}

string libVoiC_gf_PC_ArmyUnitSpecializationUnlockedAfterLastMission () {
    // Variable Declarations
    string lv_indexMission;
    string lv_indexCategory;
    string lv_indexArmyUnit;
    string lv_rewardCategory;
    string lv_mostRecentlyUnlockedUnit;

    // Automatic Variable Declarations
    int auto5CB48924_ae;
    int auto5CB48924_ai;
    int auto7083C172_ae;
    int auto7083C172_ai;

    // Variable Initialization

    // Implementation
    auto5CB48924_ae = libVoiC_gf_NumberOfMissions(2);
    auto5CB48924_ai = 1;
    while (auto5CB48924_ai <= auto5CB48924_ae) {
        lv_indexMission = libVoiC_gv_pC_MissionCompleted[auto5CB48924_ai];
        lv_rewardCategory = libVoiC_gf_MissionArmyCategoryUnlocked(lv_indexMission);
        if ((lv_rewardCategory != null) && (libVoiC_gf_PC_ArmyCategoryUsedInUI(lv_rewardCategory) == true)) {
            auto7083C172_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_rewardCategory, "ArmyUnitArray", 1);
            auto7083C172_ai = 1;
            while (auto7083C172_ai <= auto7083C172_ae) {
                lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_rewardCategory, "ArmyUnitArray["+IntToString(auto7083C172_ai-1)+"]", 1);
                if ((libVoiC_gf_PC_ArmyUnitStartsLocked(lv_indexArmyUnit) == true) && (libVoiC_gf_PC_ArmyUnitRequiredMission(lv_indexArmyUnit) == libVoiC_gf_LastSuccessfulMission())) {
                    return lv_indexArmyUnit;
                }

                if ((libVoiC_gf_PC_ArmyUnitStartsLocked(lv_indexArmyUnit) == true) && (libVoiC_gf_PC_ArmyUnitRequiredMission(lv_indexArmyUnit) == null) && (libVoiC_gf_PC_StoryArmyUnitState(lv_indexArmyUnit) != c_armyUnitStateLocked)) {
                    lv_mostRecentlyUnlockedUnit = lv_indexArmyUnit;
                }

                auto7083C172_ai = auto7083C172_ai + 1;
            }
        }

        auto5CB48924_ai += 1;
    }
    if ((UserDataGetInt("Maps", libVoiC_gf_PC_MapUserDataInstance(libVoiC_gf_LastSuccessfulMission()), "RewardsUnitDynamic", 1) != 1)) {
        lv_mostRecentlyUnlockedUnit = null;
    }

    return lv_mostRecentlyUnlockedUnit;
}

void libVoiC_gf_PC_SetArmyUnitState (string lp_armyUnit, int lp_state) {
    // Variable Declarations
    string lv_indexUpgrade;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DataTableSetInt(true, (libVoiC_gv_pCC_ArmyUnitStateKey + (lp_armyUnit)), (lp_state));
}

void libVoiC_gf_PC_ArmyUnitSetNew (string lp_armyUnit, bool lp_new) {
    // Automatic Variable Declarations
    // Implementation
    UserDataSetInt("TechUnit", libVoiC_gf_PC_TechUnitOfArmyUnit(lp_armyUnit), "IsNew", 1, BoolToInt(lp_new));
}

void libVoiC_gf_PC_UpdateArmyUnitStates () {
    // Variable Declarations
    string lv_indexMission;
    string lv_indexCategory;
    string lv_indexArmyUnit;
    string lv_indexCategory2;
    int lv_armyUnitUnlockCount;
    int lv_completedMissions;
    int lv_rewardIndex;

    // Automatic Variable Declarations
    int auto5C61A5BA_ae;
    int auto5C61A5BA_ai;
    int auto89CF4D4F_ae;
    int auto89CF4D4F_ai;
    int autoFEF42473_ae;
    int autoFEF42473_ai;
    int auto03198141_ae;
    int auto03198141_ai;
    int auto6B214DBC_ae;
    int auto6B214DBC_ai;
    int auto2852A76A_ae;
    int auto2852A76A_ai;

    // Variable Initialization

    // Implementation
    libVoiC_gf_PC_UpdateCompletedMissionArray();
    auto5C61A5BA_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto5C61A5BA_ai = 1;
    while (auto5C61A5BA_ai <= auto5C61A5BA_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto5C61A5BA_ai);
        DataTableSetBool(false, (lv_indexCategory), false);
        auto5C61A5BA_ai = auto5C61A5BA_ai + 1;
    }
    auto89CF4D4F_ae = libVoiC_gf_NumberOfMissions(2);
    auto89CF4D4F_ai = 1;
    while (auto89CF4D4F_ai <= auto89CF4D4F_ae) {
        lv_indexMission = libVoiC_gv_pC_MissionCompleted[auto89CF4D4F_ai];
        if ((libVoiC_gf_PC_MissionRewardsDynamicArmyUnit(lv_indexMission) == true)) {
            lv_armyUnitUnlockCount += 1;
        }

        auto89CF4D4F_ai += 1;
    }
    autoFEF42473_ae = libVoiC_gf_NumberOfMissions(2);
    autoFEF42473_ai = 1;
    while (autoFEF42473_ai <= autoFEF42473_ae) {
        lv_indexMission = libVoiC_gv_pC_MissionCompleted[autoFEF42473_ai];
        lv_indexCategory2 = libVoiC_gf_MissionArmyCategoryUnlocked(lv_indexMission);
        if ((lv_indexCategory2 != null) && (libVoiC_gf_PC_ArmyCategoryUsedInUI(lv_indexCategory2) == true) && (lv_armyUnitUnlockCount > 0)) {
            auto03198141_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory2, "ArmyUnitArray", 1);
            auto03198141_ai = 1;
            while (auto03198141_ai <= auto03198141_ae) {
                lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory2, "ArmyUnitArray["+IntToString(auto03198141_ai-1)+"]", 1);
                if ((libVoiC_gf_PC_ArmyUnitStartsLocked(lv_indexArmyUnit) == true) && (libVoiC_gf_PC_ArmyUnitRequiredMission(lv_indexArmyUnit) == null)) {
                    lv_armyUnitUnlockCount -= 1;
                    DataTableSetBool(false, (lv_indexCategory2), true);
                    break;
                }

                auto03198141_ai = auto03198141_ai + 1;
            }
        }

        autoFEF42473_ai += 1;
    }
    auto6B214DBC_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto6B214DBC_ai = 1;
    while (auto6B214DBC_ai <= auto6B214DBC_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto6B214DBC_ai);
        if ((libVoiC_gf_PC_ArmyCategoryUsedInUI(lv_indexCategory) == true)) {
            auto2852A76A_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
            auto2852A76A_ai = 1;
            while (auto2852A76A_ai <= auto2852A76A_ae) {
                lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto2852A76A_ai-1)+"]", 1);
                if ((libVoiC_gf_PC_ArmyUnitStartsLocked(lv_indexArmyUnit) == true) && ((libVoiC_gf_PC_ArmyCategoryState(lv_indexCategory) == c_armyCategoryStateLocked) || ((libVoiC_gf_PC_ArmyUnitRequiredMission(lv_indexArmyUnit) == null) && (DataTableGetBool(false, (lv_indexCategory)) == false)) || ((libVoiC_gf_PC_ArmyUnitRequiredMission(lv_indexArmyUnit) != null) && (libVoiC_gf_MissionStatusCheck(libVoiC_gf_PC_ArmyUnitRequiredMission(lv_indexArmyUnit), libVoiC_ge_MissionStatus_Completed) == false)))) {
                    libVoiC_gf_PC_SetArmyUnitState(lv_indexArmyUnit, c_armyUnitStateLocked);
                }
                else {
                    if ((libVoiC_gf_PC_StoryArmyUnitState(lv_indexArmyUnit) != c_armyUnitStatePurchased)) {
                        libVoiC_gf_PC_SetArmyUnitState(lv_indexArmyUnit, c_armyUnitStateUnlocked);
                    }

                }
                auto2852A76A_ai = auto2852A76A_ai + 1;
            }
        }

        auto6B214DBC_ai = auto6B214DBC_ai + 1;
    }
}

void libVoiC_gf_PC_SaveArmyCategoryToBank (bank lp_bank, string lp_section) {
    // Variable Declarations
    string lv_indexCategory;

    // Automatic Variable Declarations
    int auto6929ACA3_ae;
    int auto6929ACA3_ai;

    // Variable Initialization

    // Implementation
    auto6929ACA3_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto6929ACA3_ai = 1;
    while (auto6929ACA3_ai <= auto6929ACA3_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto6929ACA3_ai);
        libVoiC_gf_PC_SaveTransitionVarInteger(lp_bank, lp_section, (lv_indexCategory), (libVoiC_gf_PC_ArmyCategoryState(lv_indexCategory)), 0);
        auto6929ACA3_ai = auto6929ACA3_ai + 1;
    }
}

void libVoiC_gf_PC_SaveArmyUnitsToBank (bank lp_bank, string lp_section) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUpgrade;

    // Automatic Variable Declarations
    int autoC9B820C2_ae;
    int autoC9B820C2_ai;
    int autoA02710CE_ae;
    int autoA02710CE_ai;

    // Variable Initialization

    // Implementation
    autoC9B820C2_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoC9B820C2_ai = 1;
    while (autoC9B820C2_ai <= autoC9B820C2_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoC9B820C2_ai);
        autoA02710CE_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        autoA02710CE_ai = 1;
        while (autoA02710CE_ai <= autoA02710CE_ae) {
            lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(autoA02710CE_ai-1)+"]", 1);
            libVoiC_gf_PC_SaveTransitionVarInteger(lp_bank, lp_section, (lv_indexUpgrade), (libVoiC_gf_PC_StoryArmyUnitState(lv_indexUpgrade)), 0);
            libVoiC_gf_PC_SaveTransitionVarBoolean(lp_bank, lp_section, ((lv_indexUpgrade) + "New"), libVoiC_gf_PC_StoryArmyUnitState2(lv_indexUpgrade), true);
            autoA02710CE_ai = autoA02710CE_ai + 1;
        }
        autoC9B820C2_ai = autoC9B820C2_ai + 1;
    }
}

void libVoiC_gf_PC_LoadArmyCategoryFromBank (bank lp_bank, string lp_section) {
    // Variable Declarations
    string lv_indexCategory;
    int lv_stateInt;
    int lv_state;

    // Automatic Variable Declarations
    int autoA91440CA_ae;
    int autoA91440CA_ai;

    // Variable Initialization

    // Implementation
    autoA91440CA_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoA91440CA_ai = 1;
    while (autoA91440CA_ai <= autoA91440CA_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoA91440CA_ai);
        lv_stateInt = libVoiC_gf_PC_LoadTransitionVarInteger(lp_bank, lp_section, (lv_indexCategory), 0);
        lv_state = lv_stateInt;
        libVoiC_gf_PC_SetArmyCategoryState(lv_indexCategory, lv_state);
        autoA91440CA_ai = autoA91440CA_ai + 1;
    }
}

void libVoiC_gf_PC_LoadArmyUnitsFromBank (bank lp_bank, string lp_section) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUpgrade;
    int lv_stateInt;
    int lv_state;

    // Automatic Variable Declarations
    int autoD6E37B85_ae;
    int autoD6E37B85_ai;
    int auto8AEA5648_ae;
    int auto8AEA5648_ai;

    // Variable Initialization
    lv_state = c_armyUnitStateLocked;

    // Implementation
    autoD6E37B85_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoD6E37B85_ai = 1;
    while (autoD6E37B85_ai <= autoD6E37B85_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoD6E37B85_ai);
        auto8AEA5648_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        auto8AEA5648_ai = 1;
        while (auto8AEA5648_ai <= auto8AEA5648_ae) {
            lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto8AEA5648_ai-1)+"]", 1);
            lv_stateInt = libVoiC_gf_PC_LoadTransitionVarInteger(lp_bank, lp_section, (lv_indexUpgrade), 0);
            lv_state = lv_stateInt;
            libVoiC_gf_PC_SetArmyUnitState(lv_indexUpgrade, lv_state);
            libVoiC_gf_PC_ArmyUnitSetNew(lv_indexUpgrade, libVoiC_gf_PC_LoadTransitionVarBoolean(lp_bank, lp_section, ((lv_indexUpgrade) + "New"), true));
            auto8AEA5648_ai = auto8AEA5648_ai + 1;
        }
        autoD6E37B85_ai = autoD6E37B85_ai + 1;
    }
}

void libVoiC_gf_PC_ApplyArmyTech (int lp_player) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexCategory2;
    string lv_indexUpgrade;
    bool lv_categoryEnableDisable;
    bool lv_upgradeEnableDisable;

    // Automatic Variable Declarations
    int auto9EF57A55_ae;
    int auto9EF57A55_ai;
    int auto7AD1A88C_ae;
    int auto7AD1A88C_ai;
    int auto1D234705_ae;
    int auto1D234705_ai;
    int autoA7240716_ae;
    int autoA7240716_ai;

    // Variable Initialization
    lv_categoryEnableDisable = true;
    lv_upgradeEnableDisable = true;

    // Implementation
    auto9EF57A55_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto9EF57A55_ai = 1;
    while (auto9EF57A55_ai <= auto9EF57A55_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto9EF57A55_ai);
        libVoiC_gf_EnableCampaignTechUnit(false, libVoiC_gf_PC_TechUnitOfArmyCategory(lv_indexCategory), lp_player);
        auto7AD1A88C_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        auto7AD1A88C_ai = 1;
        while (auto7AD1A88C_ai <= auto7AD1A88C_ae) {
            lv_indexCategory2 = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto7AD1A88C_ai-1)+"]", 1);
            libVoiC_gf_EnableCampaignTechUnit(false, libVoiC_gf_PC_TechUnitOfArmyUnit(lv_indexCategory2), lp_player);
            auto7AD1A88C_ai = auto7AD1A88C_ai + 1;
        }
        auto9EF57A55_ai = auto9EF57A55_ai + 1;
    }
    auto1D234705_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto1D234705_ai = 1;
    while (auto1D234705_ai <= auto1D234705_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto1D234705_ai);
        if ((libVoiC_gf_ArmyCategoryStateCheck(lv_indexCategory, c_armyCategoryStateUnlocked) == true)) {
            lv_categoryEnableDisable = true;
            autoA7240716_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
            autoA7240716_ai = 1;
            while (autoA7240716_ai <= autoA7240716_ae) {
                lv_indexCategory2 = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(autoA7240716_ai-1)+"]", 1);
                if ((libVoiC_gf_PC_StoryArmyUnitState(lv_indexCategory2) == c_armyUnitStatePurchased)) {
                    libVoiC_gf_EnableCampaignTechUnit(true, libVoiC_gf_PC_TechUnitOfArmyUnit(lv_indexCategory2), lp_player);
                    lv_categoryEnableDisable = false;
                }

                autoA7240716_ai = autoA7240716_ai + 1;
            }
        }
        else {
            lv_categoryEnableDisable = false;
        }
        if ((lv_categoryEnableDisable == true)) {
            libVoiC_gf_EnableCampaignTechUnit(true, libVoiC_gf_PC_TechUnitOfArmyCategory(lv_indexCategory), lp_player);
        }

        auto1D234705_ai = auto1D234705_ai + 1;
    }
}

void libVoiC_gf_PC_ResetArmyTech () {
    // Variable Declarations
    string lv_indexCategory;

    // Automatic Variable Declarations
    int auto7517AB57_ae;
    int auto7517AB57_ai;

    // Variable Initialization

    // Implementation
    auto7517AB57_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto7517AB57_ai = 1;
    while (auto7517AB57_ai <= auto7517AB57_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto7517AB57_ai);
        libVoiC_gf_PC_SetArmyCategoryState(lv_indexCategory, c_armyCategoryStateLocked);
        auto7517AB57_ai = auto7517AB57_ai + 1;
    }
}

void libVoiC_gf_PC_PerkStateSet (string lp_campaignPerk, int lp_state) {
    // Automatic Variable Declarations
    // Implementation
    UserDataSetInt("CampaignPerk", lp_campaignPerk, "State", 1, (lp_state));
}

void libVoiC_gf_EnableDisableSpearofAdunAbility (bool lp_enableDisable, string lp_ability) {
    // Variable Declarations
    int lv_indexTech;
    bool lv_allowDisallow;
    int lv_upgradeLevel;

    // Automatic Variable Declarations
    int auto4087A5D1_ae;
    const int auto4087A5D1_ai = 1;
    int auto788D5897_ae;
    const int auto788D5897_ai = 1;

    // Variable Initialization
    lv_allowDisallow = true;

    // Implementation
    if ((lp_enableDisable == true)) {
        lv_allowDisallow = true;
        lv_upgradeLevel = 1;
    }
    else {
        lv_allowDisallow = false;
        lv_upgradeLevel = 0;
    }
    auto4087A5D1_ae = UserDataFieldValueCount("CampaignPerk", "AbilityCommand");
    lv_indexTech = 1;
    for ( ; ( (auto4087A5D1_ai >= 0 && lv_indexTech <= auto4087A5D1_ae) || (auto4087A5D1_ai < 0 && lv_indexTech >= auto4087A5D1_ae) ) ; lv_indexTech += auto4087A5D1_ai ) {
        if ((UserDataGetAbilCmd("CampaignPerk", lp_ability, "AbilityCommand", lv_indexTech) != null)) {
            TechTreeAbilityAllow(libVoiC_gv_pCC_SoAPlayerSlot, UserDataGetAbilCmd("CampaignPerk", lp_ability, "AbilityCommand", lv_indexTech), lv_allowDisallow);
        }

    }
    auto788D5897_ae = UserDataFieldValueCount("CampaignPerk", "Upgrade");
    lv_indexTech = 1;
    for ( ; ( (auto788D5897_ai >= 0 && lv_indexTech <= auto788D5897_ae) || (auto788D5897_ai < 0 && lv_indexTech >= auto788D5897_ae) ) ; lv_indexTech += auto788D5897_ai ) {
        if ((UserDataGetUpgrade("CampaignPerk", lp_ability, "Upgrade", lv_indexTech) != null)) {
            libNtve_gf_SetUpgradeLevelForPlayer(libVoiC_gv_pCC_SoAPlayerSlot, UserDataGetUpgrade("CampaignPerk", lp_ability, "Upgrade", lv_indexTech), lv_upgradeLevel);
        }

    }
}

void libVoiC_gf_EnableDisableSpearofAdunChosenAbilities (bool lp_enableDisable) {
    // Variable Declarations
    string lv_indexPerk;

    // Automatic Variable Declarations
    int auto66E3F101_ai;
    int auto66E3F101_ae;

    // Variable Initialization

    // Implementation
    auto66E3F101_ai = 1;
    auto66E3F101_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (auto66E3F101_ai < auto66E3F101_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", auto66E3F101_ai);
        auto66E3F101_ai = auto66E3F101_ai+1;
        if ((libVoiC_gf_PC_PerkStateCheck(lv_indexPerk, libVoiC_ge_PC_PerkState_Active) == true)) {
            libVoiC_gf_EnableDisableSpearofAdunAbility(lp_enableDisable, lv_indexPerk);
        }

    }
}

bool libVoiC_gf_SpearofAdunNewSystemReminderCheck () {
    // Variable Declarations
    string lv_indexMission;
    int lv_unlockCount;

    // Automatic Variable Declarations
    int auto8480AA1D_ae;
    int auto8480AA1D_ai;

    // Variable Initialization

    // Implementation
    auto8480AA1D_ae = CatalogEntryCount(c_gameCatalogMap);
    auto8480AA1D_ai = 1;
    while (auto8480AA1D_ai <= auto8480AA1D_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto8480AA1D_ai);
        auto8480AA1D_ai = auto8480AA1D_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((libVoiC_gf_MissionStatusCheck(lv_indexMission, libVoiC_ge_MissionStatus_Completed) == true) && (libVoiC_gf_MissionUnlocksSpearofAdunTier(lv_indexMission) == 1)) {
                lv_unlockCount += 1;
            }

        }    
    }
    if ((libVoiC_gf_MissionUnlocksSpearofAdunTier(libVoiC_gf_LastSuccessfulMission()) > 0) && (lv_unlockCount <= UserDataInstanceCount("CampaignPerkGroup"))) {
        return true;
    }
    else {
        return false;
    }
}

bool libVoiC_gf_SpearofAdunAbilityIsEnabled (string lp_ability) {
    // Variable Declarations
    bool lv_enabled;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((AbilityCommandGetAbility(UserDataGetAbilCmd("CampaignPerk", lp_ability, "AbilityCommand", 1)) != null)) {
        return TechTreeAbilityIsAllowed(1, UserDataGetAbilCmd("CampaignPerk", lp_ability, "AbilityCommand", 1));
    }
    else {
        return (TechTreeUpgradeCount(1, UserDataGetUpgrade("CampaignPerk", lp_ability, "Upgrade", 1), c_techCountQueuedOrBetter) == 1);
    }
}

bool libVoiC_gf_PC_PerkStateCheck (string lp_campaignPerk, int lp_perkState) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("CampaignPerk", lp_campaignPerk, "State", 1) == (lp_perkState));
}

int libVoiC_gf_PC_PerkUISlot (string lp_campaignPerk) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("CampaignPerk", lp_campaignPerk, "UISlot", 1);
}

int libVoiC_gf_PC_PerkGroupUIOrderX (string lp_perkGroup) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("CampaignPerkGroup", lp_perkGroup, "UIOrderX", 1);
}

int libVoiC_gf_PC_PerkGroupMissionUIOrder (string lp_perkGroup) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("CampaignPerkGroup", lp_perkGroup, "MissionUIOrder", 1);
}

bool libVoiC_gf_PC_PerkGroupUnlocked (string lp_perkGroup) {
    // Variable Declarations
    string lv_indexPerk;

    // Automatic Variable Declarations
    int auto78CF4033_ai;
    int auto78CF4033_ae;

    // Variable Initialization

    // Implementation
    auto78CF4033_ai = 1;
    auto78CF4033_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (auto78CF4033_ai < auto78CF4033_ae) {    
        lv_indexPerk = UserDataInstance("CampaignPerk", auto78CF4033_ai);
        auto78CF4033_ai = auto78CF4033_ai+1;
        if( libVoiC_gf_PC_PerkGroupOfPerk(lv_indexPerk) == lp_perkGroup ) {
            if ((libVoiC_gf_PC_PerkStateCheck(lv_indexPerk, libVoiC_ge_PC_PerkState_Locked) == true)) {
                return false;
            }

        }    
    }
    return true;
}

text libVoiC_gf_PC_PerkGroupName (string lp_perkGroup) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("CampaignPerkGroup", lp_perkGroup, "Name", 1);
}

string libVoiC_gf_PC_PerkGroupOfPerk (string lp_campaignPerk) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetUserInstance("CampaignPerk", lp_campaignPerk, "Group", 1);
}

int libVoiC_gf_PC_PerkCost (string lp_campaignPerk) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_campaignPerk == null)) {
        return 0;
    }

    return UserDataGetInt("CampaignPerk", lp_campaignPerk, "Cost", 1);
}

text libVoiC_gf_PC_PerkTargetingText (string lp_campaignPerk, int lp_stage) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("CampaignPerk", lp_campaignPerk, "TargetInstructions", lp_stage);
}

text libVoiC_gf_PC_PerkName (string lp_campaignPerk) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_campaignPerk == "GPTier4Power3") && (UserDataGetInt("StoryStates", "FenixNameChange", "Value", 1) == 1)) {
        return StringExternal("Button/Name/SOAFenixUpgraded");
    }

    return UserDataGetText("CampaignPerk", lp_campaignPerk, "Name", 1);
}

text libVoiC_gf_PC_PerkTooltip (string lp_campaignPerk) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("CampaignPerk", lp_campaignPerk, "Tooltip", 1);
}

int libVoiC_gf_PC_PerkActiveCost () {
    // Variable Declarations
    string lv_indexPerk;
    int lv_totalCost;

    // Automatic Variable Declarations
    int autoBC2FDCD3_ai;
    int autoBC2FDCD3_ae;

    // Variable Initialization

    // Implementation
    autoBC2FDCD3_ai = 1;
    autoBC2FDCD3_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (autoBC2FDCD3_ai < autoBC2FDCD3_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", autoBC2FDCD3_ai);
        autoBC2FDCD3_ai = autoBC2FDCD3_ai+1;
        if ((libVoiC_gf_PC_PerkStateCheck(lv_indexPerk, libVoiC_ge_PC_PerkState_Active) == true)) {
            lv_totalCost += libVoiC_gf_PC_PerkCost(lv_indexPerk);
        }

    }
    return lv_totalCost;
}

fixed libVoiC_gf_PC_PerkAbilityEnergyCost (string lp_campaignPerk) {
    // Automatic Variable Declarations
    // Implementation
    return libVoiC_gf_CostOfAbility(AbilityCommandGetAbility(UserDataGetAbilCmd("CampaignPerk", lp_campaignPerk, "AbilityCommand", 1)), "Energy");
}

fixed libVoiC_gf_CostOfAbility (string lp_ability, string lp_costType) {
    // Variable Declarations
    string lv_value;
    string lv_field;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_value = "";
    lv_field = "";

    // Implementation
    if (((lp_costType == "Minerals") || (lp_costType == "Gas"))) {
        if ((CatalogFieldExists(CatalogEntryScope(c_gameCatalogAbil, lp_ability), "Cost") == false)) {
            if ((CatalogFieldExists(CatalogEntryScope(c_gameCatalogAbil, lp_ability), "InfoArray") == false)) {
                return 0.0;
            }

            lv_field = ("InfoArray[Build1].Resource[" + lp_costType + "]");
        }
        else {
            lv_field = ("Cost." + lp_costType);
        }
    }
    else if (((lp_costType == "Energy") || (lp_costType == "Life") || (lp_costType == "Shields"))) {
        if ((CatalogFieldExists(CatalogEntryScope(c_gameCatalogAbil, lp_ability), "Cost") == false)) {
            if ((CatalogFieldExists(CatalogEntryScope(c_gameCatalogAbil, lp_ability), "InfoArray") == false)) {
                return 0.0;
            }

            lv_field = ("InfoArray[Build1].Vital[" + lp_costType + "]");
        }
        else {
            lv_field = ("Cost[0].Vital[" + lp_costType + "]");
        }
    }
    lv_value = CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, (lv_field), 1);
    return StringToFixed(lv_value);
}

void libVoiC_gf_PC_UpdatePerkStates () {
    // Variable Declarations
    string lv_indexPerk;
    string lv_indexGroup;
    string lv_activePerk;

    // Automatic Variable Declarations
    int autoBF906CEA_ai;
    int autoBF906CEA_ae;
    int auto0407EAAC_ai;
    int auto0407EAAC_ae;
    int auto9404DF00_ai;
    int auto9404DF00_ae;

    // Variable Initialization

    // Implementation
    autoBF906CEA_ai = 1;
    autoBF906CEA_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (autoBF906CEA_ai < autoBF906CEA_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", autoBF906CEA_ai);
        autoBF906CEA_ai = autoBF906CEA_ai+1;
        if ((libVoiC_gf_PC_SoATierRequirementsMet(libVoiC_gf_PC_PerkGroupOfPerk(lv_indexPerk)) == true)) {
            if ((libVoiC_gf_PC_PerkStateCheck(lv_indexPerk, libVoiC_ge_PC_PerkState_Active) == false)) {
                libVoiC_gf_PC_PerkStateSet(lv_indexPerk, libVoiC_ge_PC_PerkState_Unlocked);
            }

        }
        else {
            libVoiC_gf_PC_PerkStateSet(lv_indexPerk, libVoiC_ge_PC_PerkState_Locked);
        }
    }
    auto0407EAAC_ai = 1;
    auto0407EAAC_ae = UserDataInstanceCount("CampaignPerkGroup")+1;
    while (auto0407EAAC_ai < auto0407EAAC_ae) {
        lv_indexGroup = UserDataInstance("CampaignPerkGroup", auto0407EAAC_ai);
        auto0407EAAC_ai = auto0407EAAC_ai+1;
        if ((libVoiC_gf_PC_PerkGroupUnlocked(lv_indexGroup) == false)) {
            continue;
        }

        lv_activePerk = null;
        auto9404DF00_ai = 1;
        auto9404DF00_ae = UserDataInstanceCount("CampaignPerk")+1;
        while (auto9404DF00_ai < auto9404DF00_ae) {    
            lv_indexPerk = UserDataInstance("CampaignPerk", auto9404DF00_ai);
            auto9404DF00_ai = auto9404DF00_ai+1;
            if( libVoiC_gf_PC_PerkGroupOfPerk(lv_indexPerk) == lv_indexGroup ) {
                if ((lv_activePerk == null) && (libVoiC_gf_PC_PerkCost(lv_indexPerk) == 0) && (libVoiC_gf_PC_PerkUISlot(lv_indexPerk) != 0)) {
                    lv_activePerk = lv_indexPerk;
                }
                else if ((libVoiC_gf_PC_PerkStateCheck(lv_indexPerk, libVoiC_ge_PC_PerkState_Active) == true)) {
                    lv_activePerk = lv_indexPerk;
                }
            }    
        }
        if ((lv_activePerk != null)) {
            libVoiC_gf_PC_PerkStateSet(lv_activePerk, libVoiC_ge_PC_PerkState_Active);
        }

    }
}

void libVoiC_gf_PC_SavePerksToBank (bank lp_bank, string lp_section) {
    // Automatic Variable Declarations
    // Implementation
    UserDataSaveType("CampaignPerk", lp_bank, lp_section);
}

void libVoiC_gf_PC_LoadPerksFromBank (bank lp_bank, string lp_section) {
    // Automatic Variable Declarations
    // Implementation
    UserDataLoadType("CampaignPerk", lp_bank, lp_section);
}

void libVoiC_gf_PC_ApplyPerkTech () {
    // Variable Declarations
    string lv_indexPerk;

    // Automatic Variable Declarations
    int auto4F8B51F3_ai;
    int auto4F8B51F3_ae;
    int autoEC0E2BA4_ai;
    int autoEC0E2BA4_ae;

    // Variable Initialization

    // Implementation
    auto4F8B51F3_ai = 1;
    auto4F8B51F3_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (auto4F8B51F3_ai < auto4F8B51F3_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", auto4F8B51F3_ai);
        auto4F8B51F3_ai = auto4F8B51F3_ai+1;
        libVoiC_gf_EnableDisableSpearofAdunAbility(false, lv_indexPerk);
    }
    autoEC0E2BA4_ai = 1;
    autoEC0E2BA4_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (autoEC0E2BA4_ai < autoEC0E2BA4_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", autoEC0E2BA4_ai);
        autoEC0E2BA4_ai = autoEC0E2BA4_ai+1;
        if ((libVoiC_gf_PC_PerkStateCheck(lv_indexPerk, libVoiC_ge_PC_PerkState_Active) == true)) {
            libVoiC_gf_EnableDisableSpearofAdunAbility(true, lv_indexPerk);
        }

    }
}

void libVoiC_gf_PC_ResetPerkTech () {
    // Variable Declarations
    string lv_indexPerk;

    // Automatic Variable Declarations
    int auto1667F008_ai;
    int auto1667F008_ae;

    // Variable Initialization

    // Implementation
    auto1667F008_ai = 1;
    auto1667F008_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (auto1667F008_ai < auto1667F008_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", auto1667F008_ai);
        auto1667F008_ai = auto1667F008_ai+1;
        libVoiC_gf_PC_PerkStateSet(lv_indexPerk, libVoiC_ge_PC_PerkState_Locked);
    }
}

void libVoiC_gf_PC_ApplyTech (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;
    int lv_index;
    string lv_indexTechUnit;

    // Automatic Variable Declarations
    playergroup autoE52C82E9_g;

    // Variable Initialization

    // Implementation
    libVoiC_gv_pC_ApplyingCampaignTech = true;
    TechTreeRestrictionsEnable(lp_player, true);
    libVoiC_gf_PC_ApplyArmyTech(lp_player);
    libVoiC_gf_PC_ApplyPerkTech();
    libVoiC_gf_PC_ApplySoATech();
    libVoiC_gv_pC_ApplyingCampaignTech = false;
    libVoiC_gv_pC_CampaignTechApplied = true;
    if ((lp_player == 1)) {
        libVoiC_gf_TS_HelpTechTree_UpdatePanel();
        libVoiC_gf_ZS_HelpUnitsPanel_UpdatePanel();
        libVoiC_gf_TS_HelpTechTree_UpdatePanel2();
    }

    autoE52C82E9_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoE52C82E9_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) != c_playerTypeUser) && (PlayerStatus(lv_indexPlayer) == c_playerStatusActive)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "BansheeCloak", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "PersonalCloaking", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "WraithCloak", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "HunterSeeker", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "YamatoCannon", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "BattlecruiserEnableSpecializations", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "FactionTrainAI", 1);
        }

    }
    if ((UserDataGetInt("StoryStates", "FenixNameChange", "Value", 1) == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "FenixNameUpdate", 1);
    }

    if ((libVoiC_gf_CurrentMap() != "PAiur01") && (libVoiC_gf_CurrentMap() != "PAiur02")) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "SeveredCords", 1);
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "SeveredCords", 0);
    }
    if ((libVoiC_gv_pC_ArchonUnitsImage == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "/$parent/$parent/HelpMenuDialogGame/PanelFrame/TechTreePanel/CategoryFrame_Prot_Campaign/Archon");
        libVoiC_gv_pC_ArchonUnitsImage = DialogControlLastCreated();
    }

    if ((libVoiC_gv_pC_MergedUnitsImage == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "/$parent/$parent/HelpMenuDialogGame/PanelFrame/TechTreePanel/CategoryFrame_Prot_Campaign/MergedUnitsBorderImage");
        libVoiC_gv_pC_MergedUnitsImage = DialogControlLastCreated();
    }

    if ((libVoiC_gv_pC_MergedUnitsLabel == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "/$parent/$parent/HelpMenuDialogGame/PanelFrame/TechTreePanel/CategoryFrame_Prot_Campaign/MergedUnitsLabel");
        libVoiC_gv_pC_MergedUnitsLabel = DialogControlLastCreated();
    }

    if (((libVoiC_gf_CurrentMap() == "PUlnar03") || (libVoiC_gf_PC_StoryArmyUnitState("HighTemplarAiur") == c_armyUnitStatePurchased) || ((libVoiC_gf_ArmyCategoryStateCheck("HighTemplar", c_armyCategoryStateUnlocked) == true) && (libVoiC_gf_PC_StoryArmyUnitState("HighTemplarAiur") != c_armyUnitStatePurchased) && (libVoiC_gf_PC_StoryArmyUnitState("HighTemplarShakuras") != c_armyUnitStatePurchased) && (libVoiC_gf_PC_StoryArmyUnitState("HighTemplarTaldarim") != c_armyUnitStatePurchased)))) {
        DialogControlSetVisible(libVoiC_gv_pC_MergedUnitsLabel, PlayerGroupAll(), true);
        DialogControlSetVisible(libVoiC_gv_pC_MergedUnitsImage, PlayerGroupAll(), true);
        DialogControlSetVisible(libVoiC_gv_pC_ArchonUnitsImage, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(libVoiC_gv_pC_MergedUnitsLabel, PlayerGroupAll(), false);
        DialogControlSetVisible(libVoiC_gv_pC_MergedUnitsImage, PlayerGroupAll(), false);
        DialogControlSetVisible(libVoiC_gv_pC_ArchonUnitsImage, PlayerGroupAll(), false);
    }
}

void libVoiC_gf_PC_UpdateTechStates (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libVoiC_gf_PC_UpdateArmyCategoryStates(lp_player);
    libVoiC_gf_PC_UpdateArmyUnitStates();
    libVoiC_gf_PC_UpdatePerkStates();
    libVoiC_gf_PC_UpdateSoAStates();
}

void libVoiC_gf_PC_ResetTech () {
    // Automatic Variable Declarations
    // Implementation
    libVoiC_gf_PC_ResetArmyTech();
    libVoiC_gf_PC_ResetPerkTech();
    libVoiC_gf_PC_ResetSoATech();
}

void libVoiC_gf_PC_StoreTechBonusAtMissionBeginning () {
    // Automatic Variable Declarations
    // Implementation
}

void libVoiC_gf_AddUnitTypeToUnitHelpPanel (string lp_unitType, bool lp_saveInHistory, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_VoiC_72B16F45", "A", StringToText((lp_unitType)));
    TextExpressionSetToken("Param/Expression/lib_VoiC_72B16F45", "B", libNtve_gf_ConvertBooleanToText(lp_saveInHistory));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_VoiC_72B16F45"), false);
    TechTreeUnitHelp(lp_player, lp_unitType, true);
    if ((lp_saveInHistory == true)) {
        libVoiC_gf_ZS_HelpUnitsPanel_AddEnabledUnitType(lp_unitType);
    }

}

string libVoiC_gf_PS_HelpUnitsPanel_UnitTypeStringID (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_unitType);
}

bool libVoiC_gf_PS_HelpUnitsPanel_EnabledUnitTypeAlreadyExisted (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableValueExists(true, libVoiC_gf_PS_HelpUnitsPanel_UnitTypeStringID(lp_unitType));
}

void libVoiC_gf_ZS_HelpUnitsPanel_AddEnabledUnitType (string lp_unitType) {
    // Variable Declarations
    string lv_indexArmyCategory;
    string lv_indexArmyUnit;

    // Automatic Variable Declarations
    int auto7A097FBB_ae;
    int auto7A097FBB_ai;
    int autoE74A5121_ae;
    int autoE74A5121_ai;

    // Variable Initialization

    // Implementation
    if (((libVoiC_gv_pCX_HelpUnitPanel_EnabledUnitTypeCount == libVoiC_gv_pCC_HelpUnitPanel_EnabledUnitTypeCountMax) || (libVoiC_gf_PS_HelpUnitsPanel_EnabledUnitTypeAlreadyExisted(lp_unitType) == true))) {
        return ;
    }

    auto7A097FBB_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto7A097FBB_ai = 1;
    while (auto7A097FBB_ai <= auto7A097FBB_ae) {
        lv_indexArmyCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto7A097FBB_ai);
        if ((libVoiC_gf_PC_ArmyCategoryUnitType(lv_indexArmyCategory) == lp_unitType) && ((libVoiC_gf_PC_ArmyCategoryPurchasedUnit(lv_indexArmyCategory) != null) || (libVoiC_gf_PC_ArmyCategoryState(lv_indexArmyCategory) != c_armyCategoryStateUnlocked))) {
            return ;
        }

        autoE74A5121_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexArmyCategory, "ArmyUnitArray", 1);
        autoE74A5121_ai = 1;
        while (autoE74A5121_ai <= autoE74A5121_ae) {
            lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexArmyCategory, "ArmyUnitArray["+IntToString(autoE74A5121_ai-1)+"]", 1);
            if ((libVoiC_gf_PC_StoryArmyUnitUnitType(lv_indexArmyUnit) == lp_unitType) && ((libVoiC_gf_PC_ArmyCategoryPurchasedUnit(lv_indexArmyCategory) != null) || (libVoiC_gf_PC_StoryArmyUnitUnitType(libVoiC_gf_PC_ArmyCategoryPurchasedUnit(lv_indexArmyCategory)) != lp_unitType))) {
                return ;
            }

            autoE74A5121_ai = autoE74A5121_ai + 1;
        }
        auto7A097FBB_ai = auto7A097FBB_ai + 1;
    }
    libVoiC_gv_pCX_HelpUnitPanel_EnabledUnitTypeCount += 1;
    libVoiC_gv_pCX_HelpUnitPanel_EnabledUnitTypes[libVoiC_gv_pCX_HelpUnitPanel_EnabledUnitTypeCount] = lp_unitType;
    DataTableSetString(true, libVoiC_gf_PS_HelpUnitsPanel_UnitTypeStringID(lp_unitType), IntToString(libVoiC_gv_pCX_HelpUnitPanel_EnabledUnitTypeCount));
}

void libVoiC_gf_ZS_HelpUnitsPanel_ResetEnabledUnitTypes () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libVoiC_gv_pCX_HelpUnitPanel_EnabledUnitTypeCount = 0;
}

void libVoiC_gf_ZS_HelpUnitsPanel_UpdatePanel () {
    // Variable Declarations
    int lv_index;
    string lv_unitType;
    string lv_category;
    string lv_indexCategory;
    string lv_indexArmyUnit;

    // Automatic Variable Declarations
    int autoE68A29AA_ae;
    const int autoE68A29AA_ai = 1;
    int autoAA13B4AA_ae;
    int autoAA13B4AA_ai;

    // Variable Initialization

    // Implementation
    TechTreeUnitHelpDefault(1, false);
    if ((libVoiC_gf_PC_MissionisInstallation(libVoiC_gf_CurrentMap()) == true)) {
        return ;
    }

    if ((libVoiC_gf_CurrentMap() != "SC2Epilogue02") && (libVoiC_gf_CurrentMap() != "SC2Epilogue03")) {
        TechTreeUnitHelp(1, "Probe", true);
    }

    autoE68A29AA_ae = libVoiC_gv_pCX_HelpUnitPanel_EnabledUnitTypeCount;
    lv_index = 1;
    for ( ; ( (autoE68A29AA_ai >= 0 && lv_index <= autoE68A29AA_ae) || (autoE68A29AA_ai < 0 && lv_index >= autoE68A29AA_ae) ) ; lv_index += autoE68A29AA_ai ) {
        lv_unitType = libVoiC_gv_pCX_HelpUnitPanel_EnabledUnitTypes[lv_index];
        autoAA13B4AA_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
        autoAA13B4AA_ai = 1;
        while (autoAA13B4AA_ai <= autoAA13B4AA_ae) {
            lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoAA13B4AA_ai);
            if ((libVoiC_gf_PC_ArmyCategoryUnitType(lv_indexCategory) == lv_unitType)) {
                lv_category = lv_indexCategory;
                break;
            }

            autoAA13B4AA_ai = autoAA13B4AA_ai + 1;
        }
        TechTreeUnitHelp(1, lv_unitType, true);
    }
}

void libVoiC_gf_TS_HelpTechTree_UpdatePanel () {
    // Automatic Variable Declarations
    string autoE8331962_val;

    // Implementation
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Terr", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Prot", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Zerg", false);
    if (((libVoiC_gf_PC_CampaignMapTypeCheck(libVoiC_gf_CurrentMap(), c_mapKindMission) == false) || (libVoiC_gf_PC_MissionisInstallation(libVoiC_gf_CurrentMap()) == true))) {
        return ;
    }

    autoE8331962_val = libVoiC_gf_CurrentMap();
    if (autoE8331962_val == "SC2Epilogue03") {
        HelpPanelShowTechTreeRace(PlayerGroupAll(), "Zerg", true);
    }
    else if (autoE8331962_val == "SC2Epilogue02") {
        HelpPanelShowTechTreeRace(PlayerGroupAll(), "Terr", true);
    }
    else {
        HelpPanelShowTechTreeRace(PlayerGroupAll(), "Prot", true);
    }
}

void libVoiC_gf_EnableCampaignTechUnit (bool lp_enableDisable, string lp_techUnit, int lp_player) {
    // Variable Declarations
    string lv_armyCategory;
    string lv_armyCategory2;
    text lv_debugMessage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_enableDisable == true)) {
        UserDataSetInt("TechUnit", lp_techUnit, "Enabled", lp_player, 1);
        lv_debugMessage = StringExternal("Param/Value/lib_VoiC_39184915");
    }
    else {
        UserDataSetInt("TechUnit", lp_techUnit, "Enabled", lp_player, 0);
        lv_debugMessage = StringExternal("Param/Value/lib_VoiC_8773302A");
    }
    lv_armyCategory = libVoiC_gf_PC_ArmyCategoryOfTechUnit(lp_techUnit);
    if ((lv_armyCategory != null)) {
        libVoiC_gf_PC_EnableUpgradeAndAbilityCommandForTech(lp_enableDisable, c_gameCatalogArmyCategory, (lv_armyCategory), null, null, lp_player);
        CatalogLinkReplace(lp_player, c_gameCatalogUnit, (libVoiC_gf_PC_ArmyCategoryUnitType(lv_armyCategory)), (libVoiC_gf_PC_ArmyCategoryUnitType(lv_armyCategory)));
        TextExpressionSetToken("Param/Expression/lib_VoiC_5D41FBB9", "A", lv_debugMessage);
        TextExpressionSetToken("Param/Expression/lib_VoiC_5D41FBB9", "B", StringToText((lv_armyCategory)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_VoiC_5D41FBB9"), false);
    }

    lv_armyCategory2 = libVoiC_gf_PC_ArmyUnitOfTechUnit(lp_techUnit);
    if ((lv_armyCategory2 != null)) {
        libVoiC_gf_PC_EnableUpgradeAndAbilityCommandForTech(lp_enableDisable, c_gameCatalogArmyUnit, (lv_armyCategory2), null, null, lp_player);
        TextExpressionSetToken("Param/Expression/lib_VoiC_66073AC7", "A", lv_debugMessage);
        TextExpressionSetToken("Param/Expression/lib_VoiC_66073AC7", "B", StringToText((lv_armyCategory2)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_VoiC_66073AC7"), false);
        if ((lp_enableDisable == true)) {
            CatalogLinkReplace(lp_player, c_gameCatalogUnit, (libVoiC_gf_PC_ArmyCategoryUnitType(libVoiC_gf_PC_ArmyCategoryOfArmyUnit(lv_armyCategory2))), (libVoiC_gf_PC_StoryArmyUnitUnitType(lv_armyCategory2)));
            PlayerApplySkin(1, libVoiC_gf_PC_ArmyUnitSkin(lv_armyCategory2), true);
        }

    }

    libVoiC_gf_PC_UpdateWeaponArmorUpgrades(lp_player);
    if ((libVoiC_gf_PC_MissionisInstallation(libVoiC_gf_CurrentMap()) == false)) {
        if ((lp_enableDisable == true)) {
            if ((libVoiC_gv_pC_ApplyingCampaignTech == true)) {
                libVoiC_gf_AddUnitTypeToUnitHelpPanel(libVoiC_gf_PC_CampaignTechUnitType(lp_techUnit), true, lp_player);
            }
            else {
                libVoiC_gf_AddUnitTypeToUnitHelpPanel(libVoiC_gf_PC_CampaignTechUnitType(lp_techUnit), false, lp_player);
            }
        }
        else {
            TechTreeUnitHelp(lp_player, libVoiC_gf_PC_CampaignTechUnitType(lp_techUnit), false);
        }
    }

    libVoiC_gf_TS_HelpTechTree_UpdatePanel2();
}

bool libVoiC_gf_CampaignTechUnitIsEnabled (string lp_techUnit) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("TechUnit", lp_techUnit, "Enabled", 1) > 0);
}

string libVoiC_gf_PC_CampaignTechUnitType (string lp_techUnit) {
    // Variable Declarations
    string lv_armyCategory;
    string lv_armyCategory2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_armyCategory = libVoiC_gf_PC_ArmyCategoryOfTechUnit(lp_techUnit);
    if ((lv_armyCategory != null)) {
        return libVoiC_gf_PC_ArmyCategoryUnitType(lv_armyCategory);
    }

    lv_armyCategory2 = libVoiC_gf_PC_ArmyUnitOfTechUnit(lp_techUnit);
    if ((lv_armyCategory2 != null)) {
        return libVoiC_gf_PC_StoryArmyUnitUnitType(lv_armyCategory2);
    }

    return null;
}

void libVoiC_gf_PC_UpdateWeaponArmorUpgrades (int lp_player) {
    // Variable Declarations
    bool lv_groundWeapon1;
    bool lv_groundWeapon2;
    bool lv_groundWeapon3;
    bool lv_shields1;
    bool lv_shields2;
    bool lv_shields3;
    bool lv_groundArmor1;
    bool lv_groundArmor2;
    bool lv_groundArmor3;
    bool lv_airWeapon1;
    bool lv_airWeapon2;
    bool lv_airWeapon3;
    bool lv_airArmor1;
    bool lv_airArmor2;
    bool lv_airArmor3;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groundWeapon1 = true;
    lv_groundWeapon2 = true;
    lv_groundWeapon3 = true;
    lv_shields1 = true;
    lv_shields2 = true;
    lv_shields3 = true;
    lv_groundArmor1 = true;
    lv_groundArmor2 = true;
    lv_groundArmor3 = true;
    lv_airWeapon1 = true;
    lv_airWeapon2 = true;
    lv_airWeapon3 = true;
    lv_airArmor1 = true;
    lv_airArmor2 = true;
    lv_airArmor3 = true;

    // Implementation
    lv_shields1 = true;
    lv_groundArmor1 = true;
    lv_groundWeapon1 = true;
    lv_airWeapon1 = false;
    lv_airArmor1 = false;
    lv_shields2 = false;
    lv_groundWeapon2 = false;
    lv_groundArmor2 = false;
    lv_airWeapon2 = false;
    lv_airArmor2 = false;
    lv_shields3 = false;
    lv_groundWeapon3 = false;
    lv_groundArmor3 = false;
    lv_airWeapon3 = false;
    lv_airArmor3 = false;
    if (((libVoiC_gf_ArmyCategoryStateCheck("Phoenix", c_armyCategoryStateUnlocked) == true) || (libVoiC_gf_ArmyCategoryStateCheck("VoidRay", c_armyCategoryStateUnlocked) == true) || (libVoiC_gf_ArmyCategoryStateCheck("Carrier", c_armyCategoryStateUnlocked) == true) || (libVoiC_gf_CampaignTechUnitIsEnabled("Phoenix") == true) || (libVoiC_gf_CampaignTechUnitIsEnabled("Void Ray") == true) || (libVoiC_gf_CampaignTechUnitIsEnabled("Carrier") == true)) && (libVoiC_gf_NumberOfMissions(libVoiC_ge_MissionCountOptions_Completed) >= 8)) {
        lv_airWeapon1 = true;
        lv_airArmor1 = true;
    }

    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 0), lv_groundWeapon1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 6), lv_shields1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 3), lv_groundArmor1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 0), lv_airWeapon1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 3), lv_airArmor1);
    if ((libVoiC_gf_NumberOfMissions(libVoiC_ge_MissionCountOptions_Completed) >= 8)) {
        if ((lv_groundWeapon1 == true)) {
            lv_groundWeapon2 = true;
        }

        if ((lv_shields1 == true)) {
            lv_shields2 = true;
        }

        if ((lv_groundArmor1 == true)) {
            lv_groundArmor2 = true;
        }

    }

    if ((lv_airWeapon1 == true)) {
        lv_airWeapon2 = true;
    }

    if ((lv_airArmor1 == true)) {
        lv_airArmor2 = true;
    }

    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 1), lv_groundWeapon2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 7), lv_shields2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 4), lv_groundArmor2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 1), lv_airWeapon2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 4), lv_airArmor2);
    if ((libVoiC_gf_NumberOfMissions(libVoiC_ge_MissionCountOptions_Completed) >= 14)) {
        if ((lv_groundWeapon2 == true)) {
            lv_groundWeapon3 = true;
        }

        if ((lv_shields2 == true)) {
            lv_shields3 = true;
        }

        if ((lv_groundArmor2 == true)) {
            lv_groundArmor3 = true;
        }

        if ((lv_airWeapon2 == true)) {
            lv_airWeapon3 = true;
        }

        if ((lv_airArmor2 == true)) {
            lv_airArmor3 = true;
        }

    }

    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 2), lv_groundWeapon3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 8), lv_shields3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 5), lv_groundArmor3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 2), lv_airWeapon3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 5), lv_airArmor3);
}

void libVoiC_gf_PC_EnableUpgradeAndAbilityCommandForTech (bool lp_enableDisable, int lp_catalog, string lp_entry, string lp_upgradeField, string lp_abilCommandField, int lp_player) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUnit;
    string lv_indexUpgrade;
    int lv_index;
    int lv_unitIndex;
    string lv_upgrade;
    abilcmd lv_abilityCommand;
    string lv_uField;
    string lv_aField;

    // Automatic Variable Declarations
    int autoE9D8EB4A_ae;
    const int autoE9D8EB4A_ai = 1;
    int auto1BF728AC_ae;
    const int auto1BF728AC_ai = 1;

    // Variable Initialization
    lv_uField = "";
    lv_aField = "";

    // Implementation
    if ((lp_upgradeField == null)) {
        lv_uField = "UpgradeArray";
    }
    else {
        lv_uField = lp_upgradeField;
    }
    if ((lp_abilCommandField == null)) {
        lv_aField = "AbilCommandArray";
    }
    else {
        lv_aField = lp_abilCommandField;
    }
    autoE9D8EB4A_ae = CatalogFieldValueCount(lp_catalog, lp_entry, lv_uField, 1);
    lv_index = 1;
    for ( ; ( (autoE9D8EB4A_ai >= 0 && lv_index <= autoE9D8EB4A_ae) || (autoE9D8EB4A_ai < 0 && lv_index >= autoE9D8EB4A_ae) ) ; lv_index += autoE9D8EB4A_ai ) {
        lv_upgrade = (libVoiC_gf_PC_CatalogGetFieldArrayValue(lp_catalog, lp_entry, lv_uField, lv_index, lp_player));
        if ((lp_enableDisable == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lv_upgrade, 1);
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lv_upgrade, 0);
        }
    }
    auto1BF728AC_ae = CatalogFieldValueCount(lp_catalog, lp_entry, lv_aField, 1);
    lv_index = 1;
    for ( ; ( (auto1BF728AC_ai >= 0 && lv_index <= auto1BF728AC_ae) || (auto1BF728AC_ai < 0 && lv_index >= auto1BF728AC_ae) ) ; lv_index += auto1BF728AC_ai ) {
        lv_abilityCommand = StringToAbilCmd(libVoiC_gf_PC_CatalogGetFieldArrayValue(lp_catalog, lp_entry, lv_aField, lv_index, lp_player));
        if ((lp_enableDisable == true)) {
            TechTreeAbilityAllow(lp_player, lv_abilityCommand, true);
        }
        else {
            TechTreeAbilityAllow(lp_player, lv_abilityCommand, false);
        }
    }
}

void libVoiC_gf_TS_HelpTechTree_UpdatePanel2 () {
    // Automatic Variable Declarations
    // Implementation
    libVoiC_gf_PC_HelpTooltips_SingleUnit("Zealot", "Gateway", "Gateway", "Button/Tooltip/Gateway");
    libVoiC_gf_PC_HelpTooltips_SingleUnit("Zealot", "Gateway", "WarpGate", "Button/Tooltip/Gateway");
    libVoiC_gf_PC_HelpTooltips_DoubleUnit("Stalker", "Sentry", "CyberneticsCore", "CyberneticsCore", "Button/Tooltip/CyberneticsCore");
    libVoiC_gf_PC_HelpTooltips_SingleUnit("DarkTemplar", "DarkShrine", "DarkShrine", "Button/Tooltip/DarkShrine");
    libVoiC_gf_PC_HelpTooltips_SingleUnit("HighTemplar", "TemplarArchive", "TemplarArchive", "Button/Tooltip/TemplarArchive");
    libVoiC_gf_PC_HelpTooltips_SingleUnit("Immortal", "RoboticsFacility", "RoboticsFacility", "Button/Tooltip/RoboticsFacility");
    libVoiC_gf_PC_HelpTooltips_SingleUnit("Immortal", "RoboticsFacility", "RoboticsFacilityWarp", "Button/Tooltip/RoboticsFacility");
    libVoiC_gf_PC_HelpTooltips_SingleUnit("Colossus", "RoboticsBay", "RoboticsBay", "Button/Tooltip/RoboticsBay");
    libVoiC_gf_PC_HelpTooltips_DoubleUnit("Phoenix", "VoidRay", "Stargate", "Stargate", "Button/Tooltip/Stargate");
    libVoiC_gf_PC_HelpTooltips_DoubleUnit("Phoenix", "VoidRay", "Stargate", "StargateWarp", "Button/Tooltip/Stargate");
    libVoiC_gf_PC_HelpTooltips_SingleUnit("Carrier", "FleetBeacon", "FleetBeacon", "Button/Tooltip/FleetBeacon");
    libVoiC_gf_PC_HelpTooltips_SingleUnit("KhaydarinMonolith", "Forge", "Forge", "Button/Tooltip/Forge");
    libVoiC_gf_PC_HelpTooltips_DoubleUnit("Zealot", "Stalker", "SOAWarpInReinforcements", "SoACaster", "Button/Tooltip/SOAWarpInReinforcements");
}

void libVoiC_gf_PC_HelpTooltips_SingleUnit (string lp_techUnitCategory, string lp_buttonLink, string lp_unitLink, string lp_baseStringKey) {
    // Variable Declarations
    string lv_fullString;
    string lv_appendedString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fullString = "";
    lv_appendedString = "";

    // Implementation
    if ((libVoiC_gf_CampaignTechUnitIsEnabled(libVoiC_gf_PC_TechUnitOfArmyCategory(lp_techUnitCategory)) == true)) {
        lv_appendedString = (libVoiC_gf_EnabledUnitTypeforArmyCategory(lp_techUnitCategory));
    }

    if ((libVoiC_gf_PC_ArmyCategoryState(lp_techUnitCategory) == c_armyCategoryStateUnlocked)) {
        lv_appendedString = (libVoiC_gf_EnabledUnitTypeforArmyCategory(lp_techUnitCategory));
    }

    lv_fullString = (lp_baseStringKey + lv_appendedString);
    CatalogFieldValueSet(c_gameCatalogButton, lp_buttonLink, "Tooltip", 1, lv_fullString);
    CatalogFieldValueSet(c_gameCatalogUnit, lp_unitLink, "Description", 1, lv_fullString);
}

void libVoiC_gf_PC_HelpTooltips_DoubleUnit (string lp_techUnitCategoryA, string lp_techUnitCategoryB, string lp_buttonLink, string lp_unitLink, string lp_baseStringKey) {
    // Variable Declarations
    string lv_fullString;
    string lv_appendedStringA;
    string lv_appendedStringB;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fullString = "";
    lv_appendedStringA = "";
    lv_appendedStringB = "";

    // Implementation
    if ((libVoiC_gf_CampaignTechUnitIsEnabled(libVoiC_gf_PC_TechUnitOfArmyCategory(lp_techUnitCategoryA)) == true)) {
        lv_appendedStringA = (libVoiC_gf_EnabledUnitTypeforArmyCategory(lp_techUnitCategoryA));
    }

    if ((libVoiC_gf_CampaignTechUnitIsEnabled(libVoiC_gf_PC_TechUnitOfArmyCategory(lp_techUnitCategoryB)) == true)) {
        lv_appendedStringB = (libVoiC_gf_EnabledUnitTypeforArmyCategory(lp_techUnitCategoryB));
    }

    if ((libVoiC_gf_PC_ArmyCategoryState(lp_techUnitCategoryA) == c_armyCategoryStateUnlocked)) {
        lv_appendedStringA = (libVoiC_gf_EnabledUnitTypeforArmyCategory(lp_techUnitCategoryA));
    }

    if ((libVoiC_gf_PC_ArmyCategoryState(lp_techUnitCategoryB) == c_armyCategoryStateUnlocked)) {
        lv_appendedStringB = (libVoiC_gf_EnabledUnitTypeforArmyCategory(lp_techUnitCategoryB));
    }

    lv_fullString = (lp_baseStringKey + lv_appendedStringA + lv_appendedStringB);
    CatalogFieldValueSet(c_gameCatalogButton, lp_buttonLink, "Tooltip", 1, lv_fullString);
    CatalogFieldValueSet(c_gameCatalogUnit, lp_unitLink, "Description", 1, lv_fullString);
}

void libVoiC_gf_CreateStoryModeTransitionSave (text lp_name, text lp_transition) {
    // Variable Declarations
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libVoiC_gf_CurrentMap() == null)) {
        return ;
    }

    GameSetTransitionMap(("Campaign/Void/" + libVoiC_gf_PC_CampaignMapFile(libVoiC_gf_PostMissionStoryMap(libVoiC_gf_CurrentMap(), libVoiC_gv_pCX_IsSimulation, c_gameOverVictory, false))));
    if ((libVoiC_gf_PC_CampaignMapTypeCheck(libVoiC_gf_CurrentMap(), c_mapKindStory) == true)) {
        lv_image = libVoiC_gf_PC_CampaignMapLoadingScreenImage(libVoiC_gf_CurrentMap());
    }
    else {
        lv_image = libVoiC_gf_PC_CampaignMapLoadingScreenVictoryImage(libVoiC_gf_CurrentMap());
    }
    GameSaveCreate(lp_name, lp_transition, lv_image, true);
}

void libVoiC_gf_ULoadCampaignData (string lp_map) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto421010EF_g;
    playergroup autoF5A711DE_g;

    // Variable Initialization

    // Implementation
    CampaignMode(PlayerGroupAll(), true);
    libNtve_gf_AddRemoveUIFrameTypeForGlobalFilterList(true, c_syncFrameTypeTextTag);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    libVoiC_gf_PC_AutoHeatMapTestMode();
    TriggerDebugSetTypeFile(1, "StoryModeDebug.txt");
    TriggerDebugSetTypeFile(13, "CampaignStats.txt");
    libVoiC_gv_pC_CurrentMap = lp_map;
    if ((libVoiC_gf_PC_CampaignMapIsEpilogue(lp_map) == true)) {
        GameCheatAllow(c_gameCheatProgress, false);
        TriggerEnable(libVoiC_gt_PC_DebugProgress, false);
        libVoiC_gv_pC_InEpilogue = true;
    }
    else {
        libVoiC_gv_pC_InEpilogue = false;
    }
    UserDataSetInt("Maps", libVoiC_gf_PC_MapUserDataInstance(lp_map), "IsCurrent", 1, 1);
    libVoiC_gv_pC_InStoryMode = libVoiC_gf_PC_CampaignMapTypeCheck(libVoiC_gf_CurrentMap(), c_mapKindStory);
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_VoiC_0DC23CE3"), false);
    libVoiC_gf_PS_LoadAllTransitionData(lp_map);
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_VoiC_8DA2DEAD"), false);
    if ((libVoiC_gf_PC_CampaignIsComplete() == true) && ((libVoiC_gv_pCX_IsSimulation == true) || (libVoiC_gv_pCX_IsVictoryPlayAgain == true))) {
        libVoiC_gf_PC_UpdateSimulationMissionAges(lp_map);
    }

    libVoiC_gf_PC_UpdateCompletedMissionArray();
    libVoiC_gf_PS_UpdatePlanetData();
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_VoiC_5B69E500"), false);
    libVoiC_gf_PC_OpenArmyTechBank();
    libVoiC_gf_PC_OpenStoryBank();
    if ((libVoiC_gf_PC_CampaignIsComplete() == true) && (libVoiC_gf_PC_CampaignMapTypeCheck(lp_map, c_mapKindStory) == true)) {
        libVoiC_gf_PC_ArchivesBankSyncForLoad();
    }

    if ((libVoiC_gf_PC_CampaignMapTypeCheck(lp_map, c_mapKindStory) == false) && (libVoiC_gf_PC_CampaignIsComplete() == true)) {
        CampaignProgressEnableCampaignSaves(PlayerGroupAll(), false);
    }
    else {
        CampaignProgressEnableCampaignSaves(PlayerGroupAll(), true);
    }
    libVoiC_gf_PC_CampaignPreload();
    libVoiC_gf_PC_AchievementCategorySet();
    libVCMI_gf_PM_VoidCampaignMissionInit();
    libVoiC_gf_PC_StatRecordMapStart();
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_VoiC_7D5318A6"), false);
    libVoiC_gf_PC_ApplyTech(1);
    libVoiC_gf_PC_StoreTechBonusAtMissionBeginning();
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_VoiC_DD3C0FEA"), false);
    TransmissionSetOption(c_transmissionOptionHideAlertPanel, true);
    auto421010EF_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto421010EF_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) != c_playerTypeUser)) {
            PlayerSetState(lv_indexPlayer, c_playerStateDisplayInLeaderPanel, false);
            PlayerSetState(lv_indexPlayer, c_playerStateDisplayInViewMenu, false);
            PlayerSetState(lv_indexPlayer, c_playerStateShowScore, false);
        }

    }
    if ((libVoiC_gf_PC_CampaignMapTypeCheck(libVoiC_gf_CurrentMap(), c_mapKindStory) == true)) {
        PlayerSetColorIndex(1, libVCMI_gf_CampaignPlayerColor(), true);
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_VoiC_44175D41"), false);
    autoF5A711DE_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoF5A711DE_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        PlayerSetState(lv_indexPlayer, c_playerStateContinueEnabled, false);
    }
    if ((libVoiC_gv_pC_InStoryMode == false)) {
        UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogRestartButton, true);
    }
    else {
        UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogRestartButton, false);
    }
    if ((libVoiC_gv_pC_InStoryMode == false) && ((libVoiC_gv_pCX_IsSimulation == true) || ((libVoiC_gf_CurrentMap() != "PAiur01") && (libVoiC_gf_CurrentMap() != "PAiur02") && (libVoiC_gf_CurrentMap() != "PAiur03") && (libVoiC_gv_pC_InEpilogue == false)))) {
        UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogAbortButton, true);
        if ((libVoiC_gv_pCX_IsSimulation == true)) {
            UISetGameMenuItemText(PlayerGroupAll(), c_gameMenuDialogAbortButton, StringExternal("Param/Value/lib_VoiC_462A52E0"));
        }
    }
    else {
        UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogAbortButton, false);
    }
    if ((lp_map == "SC2Epilogue02")) {
        UISetAchievementToastStyle(PlayerGroupAll(), c_achievementToastStyleTerran);
    }
    else if ((lp_map == "SC2Epilogue03")) {
        UISetAchievementToastStyle(PlayerGroupAll(), c_achievementToastStyleZerg);
    }
    else if (true) {
        UISetAchievementToastStyle(PlayerGroupAll(), c_achievementToastStyleProtoss );
    }
    libVoiC_gf_PC_PrepareLoadingScreen(lp_map, true);
    if ((libVoiC_gf_LastMap() == null) && (libVoiC_gf_CampaignDebugModeIsOn("ProgressCheat") == true) && (libVoiC_gf_PC_CampaignMapTypeCheck(libVoiC_gf_CurrentMap(), c_mapKindStory) == true) && (libVoiC_gf_CurrentMap() == "PStory01")) {
        libVoiC_gv_pCX_DebugProgress = true;
        libVoiC_gf_PC_DebugProgressDisplayDialog(null, libVoiC_gt_PC_DebugProgressOKCallback, null, false);
        while (!((libVoiC_gv_pC_DebugProgressDialog == c_invalidDialogId))) {
            Wait(0.5, c_timeGame);
        }
    }

    TriggerSendEvent(libVoiC_gv_pCC_EVENT_MISSIONSTART);
}

void libVoiC_gf_PC_AutoHeatMapTestMode () {
    // Variable Declarations
    trigger lv_disableTrigger;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((GameTestConfigType() != 1)) {
        return ;
    }

    UnitPauseAll(true);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    while (true) {
        Wait(10.0, c_timeGame);
    }
}

void libVoiC_gf_PC_CampaignPreload () {
    // Automatic Variable Declarations
    // Implementation
    if ((libVoiC_gf_PC_CampaignMapTypeCheck(libVoiC_gf_CurrentMap(), c_mapKindMission) == true)) {
        libNtve_gf_PreloadSoundObject("UI_LowHealthWarning_Start", false);
        libNtve_gf_PreloadSoundObject("UI_LowHealthWarning_BreathLoop", false);
        libNtve_gf_PreloadSoundObject("UI_LowHealthWarning_HeartBeatLoop", false);
        SoundLengthQuery(SoundLink("UI_LowHealthWarning_BreathLoop", -1));
        SoundLengthQuery(SoundLink("UI_LowHealthWarning_HeartBeatLoop", -1));
    }

}

bool libVoiC_gf_PC_CampaignIsComplete () {
    // Automatic Variable Declarations
    // Implementation
    return libVoiC_gv_pC_InCompletedCampaign;
}

void libVoiC_gf_PrepareForMission (string lp_nextMission, bool lp_nextIsSimulation, bool lp_nextIsVictoryAgain, int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    SetNextMissionDifficulty(PlayerGroupAll(), lp_difficulty);
    if ((lp_nextIsSimulation == false)) {
        libVoiC_gf_PC_SetCampaignDifficulty(lp_difficulty);
    }

    if ((lp_nextIsVictoryAgain == false) && (libVoiC_gf_PC_CampaignMapTypeCheck(lp_nextMission, c_mapKindStory) == false)) {
        libVoiC_gf_PC_SaveArmyTechBank(lp_nextMission, lp_nextIsSimulation);
    }

    if ((libVoiC_gf_PC_CampaignMapTypeCheck(libVoiC_gf_CurrentMap(), c_mapKindStory) == true)) {
        libVoiC_gf_DispatchCampaignEvent(libVoiC_ge_PC_Event_CampaignMapTransition, "Mission", "", true);
    }

    libVoiC_gf_PS_SaveAllTransitionData(lp_nextIsSimulation, lp_nextIsVictoryAgain, false);
    libVoiC_gf_PC_PrepareLoadingScreen(lp_nextMission, false);
    GameSetNextMap(("Campaign/Void/" + libVoiC_gf_PC_CampaignMapFile(lp_nextMission)));
}

void libVoiC_gf_PrepareForStoryModeTransitionalSave () {
    // Automatic Variable Declarations
    // Implementation
    libVoiC_gf_PC_OpenCampaignBank();
    libVoiC_gf_PC_SaveTransitionVars(libVoiC_gv_pC_CampaignBank, null, false, false, false, false, false);
}

void libVoiC_gf_PrepareForStoryMode (int lp_victoryDefeat, int lp_difficulty) {
    // Variable Declarations
    string lv_planet;
    bool lv_isActuallyVictory;
    string lv_nextMap;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_isActuallyVictory = ((lp_victoryDefeat == c_gameOverVictory) || libVoiC_gv_pCX_IsVictoryPlayAgain);
    if ((libVoiC_gv_pCX_IsSimulation == false) && (libVoiC_gf_PC_CampaignMapTypeCheck(libVoiC_gf_CurrentMap(), c_mapKindMission) == true) && (lv_isActuallyVictory == true)) {
        libVoiC_gv_pCX_LastSuccessfulMission = libVoiC_gf_CurrentMap();
        libVoiC_gf_PC_CompleteMission(libVoiC_gf_CurrentMap());
        libVoiC_gf_PC_CopyWriterStatesToSnapshot();
        lv_nextMap = libVoiC_gf_PostMissionStoryMap(libVoiC_gf_CurrentMap(), libVoiC_gv_pCX_IsSimulation, c_gameOverVictory, false);
    }
    else {
        lv_nextMap = libVoiC_gf_PostMissionStoryMap(libVoiC_gf_CurrentMap(), libVoiC_gv_pCX_IsSimulation, lp_victoryDefeat, false);
    }
    SetNextMissionDifficulty(PlayerGroupSingle(1), lp_difficulty);
    libVoiC_gf_PS_SaveAllTransitionData(false, false, (lp_victoryDefeat == c_gameOverDefeat));
    libVoiC_gf_PC_PrepareLoadingScreen(lv_nextMap, false);
    GameSetNextMap(("Campaign/Void/" + libVoiC_gf_PC_CampaignMapFile(lv_nextMap)));
    TextExpressionSetToken("Param/Expression/lib_VoiC_02626E2A", "A", StringToText(("Campaign/Void/" + libVoiC_gf_PC_CampaignMapFile(lv_nextMap))));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_VoiC_02626E2A"), false);
}

string libVoiC_gf_PostMissionStoryMap (string lp_mission, bool lp_simulation, int lp_victoryDefeat, bool lp_isVictoryContinue) {
    // Automatic Variable Declarations
    string auto1A4A0C7B_val;

    // Implementation
    if ((lp_simulation == false) && (lp_victoryDefeat == c_gameOverVictory) && (lp_isVictoryContinue == true)) {
        auto1A4A0C7B_val = lp_mission;
        if (auto1A4A0C7B_val == "PAiur01") {
            return "PAiur02";
        }
        else if (auto1A4A0C7B_val == "PAiur02") {
            return "PAiur03";
        }
        else if (auto1A4A0C7B_val == "PAiur06") {
            return "SC2Epilogue01";
        }
        else if (auto1A4A0C7B_val == "SC2Epilogue01") {
            return "SC2Epilogue02";
        }
        else if (auto1A4A0C7B_val == "SC2Epilogue02") {
            return "SC2Epilogue03";
        }
        else {
        }
    }

    if ((libVoiC_gf_PC_CampaignInEpilogue() == true)) {
        return "EpilogueStory01";
    }

    return "PStory01";
}

void libVoiC_gf_PrepareForStoryMapSwitch (string lp_nextMap) {
    // Automatic Variable Declarations
    // Implementation
    libVoiC_gf_DispatchCampaignEvent(libVoiC_ge_PC_Event_CampaignMapTransition, "Story", "", true);
    libVoiC_gf_PS_SaveAllTransitionData(false, false, false);
    libVoiC_gf_PC_PrepareLoadingScreen(lp_nextMap, false);
    if ((libVoiC_gf_PC_DebugProgressDialogOpened() == false)) {
        libVoiC_gf_PC_UpdateCampaignScreen(lp_nextMap);
        GameSetNextMap(("Campaign/Void/" + libVoiC_gf_PC_CampaignMapFile(lp_nextMap)));
        GameSetTransitionMap(("Campaign/Void/" + libVoiC_gf_PC_CampaignMapFile(lp_nextMap)));
        TextExpressionSetToken("Param/Expression/lib_VoiC_37BD8C51", "A", libVoiC_gf_PC_CampaignMapName(lp_nextMap));
        GameSaveCreate(TextExpressionAssemble("Param/Expression/lib_VoiC_37BD8C51"), StringToText(""), "", true);
    }

    Wait(0.1, c_timeGame);
}

bool libVoiC_gf_CurrentMissionIsSimulation () {
    // Automatic Variable Declarations
    // Implementation
    return (libVoiC_gv_pCX_IsSimulation || libVoiC_gv_pCX_IsVictoryPlayAgain);
}

void libVoiC_gf_PC_CompletedSavesEnable () {
    // Automatic Variable Declarations
    // Implementation
    if ((AchievementsDisabled(1) == true)) {
        return ;
    }

    CampaignProgressEnableCampaignCompletedSaves(PlayerGroupAll(), true);
}

void libVoiC_gf_PC_UpdateCampaignScreen (string lp_mission) {
    // Variable Declarations
    int lv_index;
    const string lv_campaignID = "LegacyOfTheVoid";
    const string lv_campaignID2 = "LegacyOfTheVoidEpilogue";

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_mission == null)) {
        return ;
    }

    if ((libVoiC_gf_PC_CampaignInEpilogue() == false)) {
        if ((libVoiC_gf_MissionStatusCheck("PAiur06", libVoiC_ge_MissionStatus_Completed) == true)) {
            if ((libVoiC_gf_PC_CampaignIsComplete() == false)) {
                libVoiC_gv_pC_InCompletedCampaign = true;
                libVoiC_gf_PC_ArchiveBankLoad();
            }

            TextExpressionSetToken("Param/Expression/lib_VoiC_8B2DEB44", "SUMMARY", libVoiC_gf_StoryMapHelp2("PAiur06"));
            TextExpressionSetToken("Param/Expression/lib_VoiC_8B2DEB44", "MISSIONSCOMPLETE", IntToText(libVoiC_gf_NumberOfLotVMissions(libVoiC_ge_MissionCountOptions_Completed)));
            TextExpressionSetToken("Param/Expression/lib_VoiC_8B2DEB44", "DIFFICULTY", DifficultyNameCampaign(libVoiC_gv_pCX_CampaignDifficulty));
            CampaignProgressSetText(PlayerGroupAll(), lv_campaignID, TextExpressionAssemble("Param/Expression/lib_VoiC_8B2DEB44"));
            CampaignProgressSetImageFilePath(PlayerGroupAll(), lv_campaignID, "Assets\\Textures\\ui_battlenet_glue_campaign_mapicon_void_finish.dds");
            CampaignProgressSetCampaignFinished(PlayerGroupAll(), lv_campaignID, true);
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_VoiC_B282D0C8", "D", libVoiC_gf_PC_CampaignMapName(lp_mission));
            TextExpressionSetToken("Param/Expression/lib_VoiC_B282D0C8", "A", libVoiC_gf_StoryMapHelp2(lp_mission));
            TextExpressionSetToken("Param/Expression/lib_VoiC_B282D0C8", "B", IntToText(libVoiC_gf_NumberOfLotVMissions(libVoiC_ge_MissionCountOptions_Completed)));
            TextExpressionSetToken("Param/Expression/lib_VoiC_B282D0C8", "C", DifficultyNameCampaign(libVoiC_gv_pCX_CampaignDifficulty));
            CampaignProgressSetText(PlayerGroupAll(), lv_campaignID, TextExpressionAssemble("Param/Expression/lib_VoiC_B282D0C8"));
            CampaignProgressSetCampaignFinished(PlayerGroupAll(), lv_campaignID, false);
            if ((libVoiC_gf_PC_CampaignMapLoadingScreenVictoryImage(lp_mission) == null)) {
                CampaignProgressSetImageFilePath(PlayerGroupAll(), lv_campaignID, libVoiC_gf_PC_CampaignMapLoadingScreenImage(lp_mission));
            }
            else {
                CampaignProgressSetImageFilePath(PlayerGroupAll(), lv_campaignID, libVoiC_gf_PC_CampaignMapLoadingScreenVictoryImage(lp_mission));
            }
        }
    }
    else {
        if ((libVoiC_gf_MissionStatusCheck("SC2Epilogue03", libVoiC_ge_MissionStatus_Completed) == true)) {
            TextExpressionSetToken("Param/Expression/lib_VoiC_D9FD915B", "SUMMARY", libVoiC_gf_StoryMapHelp2("SC2Epilogue03"));
            TextExpressionSetToken("Param/Expression/lib_VoiC_D9FD915B", "MISSIONSCOMPLETE", IntToText(libVoiC_gf_NumberOfEpilogueMissions(libVoiC_ge_MissionCountOptions_Completed)));
            TextExpressionSetToken("Param/Expression/lib_VoiC_D9FD915B", "DIFFICULTY", DifficultyNameCampaign(libVoiC_gv_pCX_CampaignDifficulty));
            CampaignProgressSetText(PlayerGroupAll(), lv_campaignID2, TextExpressionAssemble("Param/Expression/lib_VoiC_D9FD915B"));
            CampaignProgressSetImageFilePath(PlayerGroupAll(), lv_campaignID2, "Assets\\Textures\\ui_battlenet_glue_campaign_mapicon_epilogue_finish.dds");
            CampaignProgressSetCampaignFinished(PlayerGroupAll(), lv_campaignID2, true);
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_VoiC_71A9CDC5", "D", libVoiC_gf_PC_CampaignMapName(lp_mission));
            TextExpressionSetToken("Param/Expression/lib_VoiC_71A9CDC5", "A", libVoiC_gf_StoryMapHelp2(lp_mission));
            TextExpressionSetToken("Param/Expression/lib_VoiC_71A9CDC5", "B", IntToText(libVoiC_gf_NumberOfEpilogueMissions(libVoiC_ge_MissionCountOptions_Completed)));
            TextExpressionSetToken("Param/Expression/lib_VoiC_71A9CDC5", "C", DifficultyNameCampaign(libVoiC_gv_pCX_CampaignDifficulty));
            CampaignProgressSetText(PlayerGroupAll(), lv_campaignID2, TextExpressionAssemble("Param/Expression/lib_VoiC_71A9CDC5"));
            CampaignProgressSetCampaignFinished(PlayerGroupAll(), lv_campaignID2, false);
            if ((libVoiC_gf_PC_CampaignMapLoadingScreenVictoryImage(lp_mission) == null)) {
                CampaignProgressSetImageFilePath(PlayerGroupAll(), lv_campaignID2, libVoiC_gf_PC_CampaignMapLoadingScreenImage(lp_mission));
            }
            else {
                CampaignProgressSetImageFilePath(PlayerGroupAll(), lv_campaignID2, libVoiC_gf_PC_CampaignMapLoadingScreenVictoryImage(lp_mission));
            }
        }
    }
}

void libVoiC_gf_PC_PrepareLoadingScreen (string lp_nextMap, bool lp_restart) {
    // Variable Declarations
    string lv_offsetString;
    int lv_offsetX;
    int lv_offsetY;
    text lv_title;
    text lv_subtitle;
    text lv_body;
    string lv_image;
    bool lv_waitForKey;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_offsetString = "";

    // Implementation
    if ((lp_restart == true)) {
        UISetRestartLoadingScreen(StringExternal(CatalogFieldValueGet(c_gameCatalogMap, lp_nextMap, "LoadingHelpRestart", c_playerAny)));
        return ;
    }

    lv_offsetString = CatalogFieldValueGet(c_gameCatalogMap, (lp_nextMap), "LoadingTextOffset", c_playerAny);
    lv_offsetString = StringReplaceWord(lv_offsetString, ",", " ", 1, c_stringCase);
    lv_waitForKey = !(libVoiC_gf_PC_CampaignMapTypeCheck(lp_nextMap, c_mapKindStory));
    UISetNextLoadingScreenImageScale(c_scaleAspect);
    if ((libVoiC_gf_LastMapConditionCheck(libVoiC_ge_MissionCondition_Sucessful) == true) && (libVoiC_gf_LastMapConditionCheck(libVoiC_ge_MissionCondition_Simulation) == false) && (libVoiC_gf_PC_CampaignMapTypeCheck(libVoiC_gf_LastMap(), c_mapKindMission) == true) && (libVoiC_gf_LastMap() != lp_nextMap)) {
        lv_image = libVoiC_gf_PC_CampaignMapLoadingScreenVictoryImage(libVoiC_gf_CurrentMap());
    }

    lv_offsetX = StringToInt(StringWord(lv_offsetString, 1));
    lv_offsetY = StringToInt(StringWord(lv_offsetString, 2));
    lv_offsetY += 240;
    lv_offsetX += 130;
    if ((lv_image == null)) {
        lv_image = libVoiC_gf_PC_CampaignMapLoadingScreenImage(lp_nextMap);
    }

    UISetNextLoadingScreen(lv_image, StringToText(""), lv_subtitle, lv_body, libVoiC_gf_PC_CampaignMapHelp(lp_nextMap), lv_waitForKey);
    UISetNextLoadingScreenTextPosition(c_anchorTopLeft, lv_offsetX, lv_offsetY, CatalogFieldValueGetAsInt(c_gameCatalogMap, (lp_nextMap), "LoadingTextWidth", c_playerAny), CatalogFieldValueGetAsInt(c_gameCatalogMap, (lp_nextMap), "LoadingTextHeight", c_playerAny));
}

string libVoiC_gf_LastMap () {
    // Automatic Variable Declarations
    // Implementation
    return libVoiC_gv_pCX_LastMap;
}

bool libVoiC_gf_LastMapConditionCheck (int lp_condition) {
    // Automatic Variable Declarations
    int auto0E68E9EB_val;

    // Implementation
    if ((libVoiC_gf_PC_CampaignMapTypeCheck(libVoiC_gf_LastMap(), c_mapKindMission) == true)) {
        return libVoiC_gf_LastMissionConditionCheck(lp_condition);
    }

    auto0E68E9EB_val = lp_condition;
    if (auto0E68E9EB_val == libVoiC_ge_MissionCondition_Sucessful) {
        return libVoiC_gv_pCX_LastMapSuccess;
    }
    else {
    }
    return false;
}

string libVoiC_gf_LastMission () {
    // Automatic Variable Declarations
    // Implementation
    return libVoiC_gv_pCX_LastMission;
}

bool libVoiC_gf_LastMissionConditionCheck (int lp_condition) {
    // Automatic Variable Declarations
    int auto2A9AF03D_val;

    // Implementation
    auto2A9AF03D_val = lp_condition;
    if (auto2A9AF03D_val == libVoiC_ge_MissionCondition_Sucessful) {
        return libVoiC_gv_pCX_LastMissionSuccess;
    }
    else if (auto2A9AF03D_val == libVoiC_ge_MissionCondition_Simulation) {
        return libVoiC_gv_pCX_LastMissionSimulation;
    }
    else {
    }
    return false;
}

string libVoiC_gf_LastSuccessfulMission () {
    // Automatic Variable Declarations
    // Implementation
    return libVoiC_gv_pCX_LastSuccessfulMission;
}

int libVoiC_gf_PC_CampaignSaveIndex () {
    // Automatic Variable Declarations
    // Implementation
    if (((libVoiC_gf_CurrentMap() == "SC2Epilogue01") || (libVoiC_gf_CurrentMap() == "SC2Epilogue02") || (libVoiC_gf_CurrentMap() == "SC2Epilogue03"))) {
        return libVoiC_gv_pCC_CampaignEpilogueIndex;
    }

    return libVoiC_gv_pCC_CampaignLotVIndex;
}

bool libVoiC_gf_PC_CampaignInEpilogue () {
    // Automatic Variable Declarations
    // Implementation
    return libVoiC_gv_pC_InEpilogue;
}

void libVoiC_gf_PS_SaveAllTransitionData (bool lp_nextIsSimulation, bool lp_nextIsVictoryPlayAgain, bool lp_resultFromDefeat) {
    // Variable Declarations
    int lv_saveType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libVoiC_gf_PC_OpenCampaignBank();
    libVoiC_gv_pCX_LastMap = libVoiC_gf_CurrentMap();
    if ((libVoiC_gv_pCX_IsVictoryPlayAgain == true)) {
        libVoiC_gv_pCX_LastMapSuccess = true;
    }
    else {
        libVoiC_gv_pCX_LastMapSuccess = (lp_resultFromDefeat == false);
    }
    if ((libVoiC_gf_PC_CampaignMapTypeCheck(libVoiC_gv_pCX_LastMap, c_mapKindMission) == true)) {
        libVoiC_gv_pCX_LastMission = libVoiC_gv_pCX_LastMap;
        libVoiC_gv_pCX_LastMissionSuccess = libVoiC_gv_pCX_LastMapSuccess;
        libVoiC_gv_pCX_LastMissionSimulation = libVoiC_gv_pCX_IsSimulation;
    }
    else if ((libVoiC_gf_PC_CampaignMapTypeCheck(libVoiC_gv_pCX_LastMap, c_mapKindUpgrade) == true)) {
        libVoiC_gv_pCX_LastMissionSimulation = libVoiC_gv_pCX_IsSimulation;
    }
    libVoiC_gf_PC_SaveTransitionVars(libVoiC_gv_pC_CampaignBank, null, lp_nextIsSimulation, lp_nextIsVictoryPlayAgain, lp_resultFromDefeat, libVoiC_gv_pCX_IsSimulation, libVoiC_gv_pCX_IsVictoryPlayAgain);
    libVoiC_gf_PC_SaveCampaignBank();
}

void libVoiC_gf_PS_LoadAllTransitionData (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((libVoiC_gf_PC_CampaignBankExists() == false)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_VoiC_253EB9C4"), false);
        libVoiC_gf_ResetCampaignData();
        libVoiC_gf_PC_SetCampaignDifficulty(PlayerDifficulty(1));
        return ;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_VoiC_6670EA63"), false);
    libVoiC_gf_PC_OpenCampaignBank();
    libVoiC_gf_PC_LoadTransitionVars(libVoiC_gv_pC_CampaignBank, null);
    if ((libVoiC_gf_PC_CampaignMapTypeCheck(lp_map, c_mapKindMission) == true)) {
        libVoiC_gv_pC_CampaignDataBackup_MissionBestTime = libVoiC_gf_MissionCompleteBestTime(lp_map, PlayerDifficulty(1));
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_VoiC_A0360684"), false);
    libVoiC_gf_PC_LoadMissionSections();
}

void libVoiC_gf_PC_SaveTransitionVars (bank lp_targetBank, string lp_map, bool lp_nextIsSimulation, bool lp_nextIsVictoryPlayAgain, bool lp_resultFromDefeat, bool lp_resultFromSimulation, bool lp_resultFromVictoryAgain) {
    // Variable Declarations
    int lv_indexScene;
    string lv__SectionName;
    int lv_difficulty;
    int lv_index;
    string lv_imagevar;

    // Automatic Variable Declarations
    int auto747DC697_ae;
    const int auto747DC697_ai = 1;

    // Variable Initialization
    lv__SectionName = "";
    lv_difficulty = 2;

    // Implementation
    if ((lp_map == null)) {
        lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_map, "CampaignLastInfo");
        libVoiC_gf_PC_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, ("Simulation"), lp_nextIsSimulation, false);
        libVoiC_gf_PC_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, ("VictoryPlayAgain"), lp_nextIsVictoryPlayAgain, false);
        libVoiC_gf_PC_SaveTransitionVarString(lp_targetBank, lv__SectionName, ("LastMap"), libVoiC_gf_PC_StoryMapBankID(libVoiC_gv_pCX_LastMap), "");
        libVoiC_gf_PC_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, ("LastMapSuccess"), libVoiC_gv_pCX_LastMapSuccess, false);
        libVoiC_gf_PC_SaveTransitionVarString(lp_targetBank, lv__SectionName, ("LastMission"), libVoiC_gf_PC_StoryMapBankID(libVoiC_gv_pCX_LastMission), "");
        libVoiC_gf_PC_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, ("LastMissionSuccess"), libVoiC_gv_pCX_LastMissionSuccess, false);
        libVoiC_gf_PC_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, ("LastMissionSimulation"), libVoiC_gv_pCX_LastMissionSimulation, false);
        libVoiC_gf_PC_SaveTransitionVarString(lp_targetBank, lv__SectionName, ("LastSuccessfulMission"), libVoiC_gf_PC_StoryMapBankID(libVoiC_gv_pCX_LastSuccessfulMission), "");
        libVoiC_gf_PC_SaveTransitionVarString(lp_targetBank, lv__SectionName, ("Location"), libVoiC_gf_PC_StoryMapBankID2(libVoiC_gv_pCX_CurrentLocation), "");
        lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_map, "CampaignSetting");
        libVoiC_gf_PC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, ("MapInstanceID"), libVoiC_gv_pCX_MapInstanceID, 0);
        libVoiC_gf_PC_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, ("AchievementsDisabled"), AchievementsDisabled(1), false);
        if ((lp_resultFromSimulation == false) && (lp_resultFromVictoryAgain == false)) {
            lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_map, "CampaignSetting");
            libVoiC_gf_PC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, ("Difficulty"), libVoiC_gf_PC_DifficultyIndex(libVoiC_gv_pCX_CampaignDifficulty), 0);
            libVoiC_gf_PC_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, ("DebugProgress"), libVoiC_gv_pCX_DebugProgress, false);
            libVoiC_gf_PC_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, ("UpgradesTaught"), libVoiC_gv_pCX_UpgradesTaught, false);
            lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_map, "CampaignCredits");
            lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_map, "Scenes");
            UserDataSaveType("Scenes", lp_targetBank, lv__SectionName);
            lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_map, "WriterStates");
            UserDataSaveType("WriterStates", lp_targetBank, lv__SectionName);
            lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_map, "StoryStates");
            UserDataSaveType("StoryStates", lp_targetBank, lv__SectionName);
            lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_map, "CampaignStats");
            libVoiC_gf_PC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, ("MissionCompletedCount"), libVoiC_gf_NumberOfMissions(libVoiC_ge_MissionCountOptions_Completed), 0);
            lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_map, "CampaignStats");
            libVoiC_gf_PC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, ("MissionCompletedCountNext"), (libVoiC_gf_NumberOfMissions(libVoiC_ge_MissionCountOptions_Completed)+1), 0);
            lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_map, "ArmyCategory");
            BankSectionCreate(lp_targetBank, lv__SectionName);
            libVoiC_gf_PC_SaveArmyCategoryToBank(lp_targetBank, lv__SectionName);
        }

    }

    if ((lp_resultFromDefeat == true)) {
        return ;
    }

    if ((lp_map != null) && (libVoiC_gf_PC_CampaignMapTypeCheck(lp_map, c_mapKindMission) == true)) {
        libVoiC_gf_PC_SetMissionSectionExists(lp_map, true);
    }

    if (((lp_map != null) || ((lp_resultFromSimulation == false) && (lp_resultFromVictoryAgain == false)))) {
        lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_map, "ArmyUnit");
        BankSectionCreate(lp_targetBank, lv__SectionName);
        libVoiC_gf_PC_SaveArmyUnitsToBank(lp_targetBank, lv__SectionName);
        lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_map, "Perks");
        BankSectionCreate(lp_targetBank, lv__SectionName);
        libVoiC_gf_PC_SavePerksToBank(lp_targetBank, lv__SectionName);
        lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_map, "SpearofAdun");
        BankSectionCreate(lp_targetBank, lv__SectionName);
        libVoiC_gf_PC_SaveSoAToBank(lp_targetBank, lv__SectionName);
    }

    libVoiC_gf_PC_SaveMapToBank(lp_map, lp_targetBank, (lp_resultFromSimulation || lp_resultFromVictoryAgain));
    if (((lp_resultFromSimulation == true) || (lp_resultFromVictoryAgain == true))) {
        return ;
    }

    lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_map, "HelpUnitsPanel");
    libVoiC_gf_PC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString(0), libVoiC_gv_pCX_HelpUnitPanel_EnabledUnitTypeCount, 0);
    auto747DC697_ae = libVoiC_gv_pCX_HelpUnitPanel_EnabledUnitTypeCount;
    lv_index = 1;
    for ( ; ( (auto747DC697_ai >= 0 && lv_index <= auto747DC697_ae) || (auto747DC697_ai < 0 && lv_index >= auto747DC697_ae) ) ; lv_index += auto747DC697_ai ) {
        libVoiC_gf_PC_SaveTransitionVarString(lp_targetBank, lv__SectionName, IntToString(lv_index), libVoiC_gf_PS_HelpUnitsPanel_UnitTypeStringID(libVoiC_gv_pCX_HelpUnitPanel_EnabledUnitTypes[lv_index]), "");
    }
    lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_map, "Tips");
    UserDataSaveType("CampaignTips", lp_targetBank, lv__SectionName);
}

void libVoiC_gf_PC_LoadTransitionVars (bank lp_sourceBank, string lp_map) {
    // Variable Declarations
    int lv_tipvalue;
    string lv_indexScene;
    string lv_indexObjective;
    int lv_kerriganExperience;
    string lv__SectionName;
    int lv_count;
    int lv_index;
    fixed lv_blizzconTiming;

    // Automatic Variable Declarations
    int autoE1BE8001_ae;
    const int autoE1BE8001_ai = 1;

    // Variable Initialization
    lv__SectionName = "";

    // Implementation
    libVoiC_gf_PC_LoadMapFromBank(lp_map, lp_sourceBank);
    if ((lp_map == null)) {
        lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_map, "CampaignLastInfo");
        libVoiC_gv_pCX_IsSimulation = libVoiC_gf_PC_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, ("Simulation"), false);
        libVoiC_gv_pCX_IsVictoryPlayAgain = libVoiC_gf_PC_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, ("VictoryPlayAgain"), false);
        libVoiC_gv_pCX_LastMap = (libVoiC_gf_PC_LoadTransitionVarString(lp_sourceBank, lv__SectionName, ("LastMap"), ""));
        libVoiC_gv_pCX_LastMapSuccess = libVoiC_gf_PC_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, ("LastMapSuccess"), false);
        libVoiC_gv_pCX_LastMission = (libVoiC_gf_PC_LoadTransitionVarString(lp_sourceBank, lv__SectionName, ("LastMission"), ""));
        libVoiC_gv_pCX_LastMissionSuccess = libVoiC_gf_PC_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, ("LastMissionSuccess"), false);
        libVoiC_gv_pCX_LastMissionSimulation = libVoiC_gf_PC_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, ("LastMissionSimulation"), false);
        libVoiC_gv_pCX_LastSuccessfulMission = (libVoiC_gf_PC_LoadTransitionVarString(lp_sourceBank, lv__SectionName, ("LastSuccessfulMission"), ""));
        lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_map, "CampaignCredits");
        lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_map, "CampaignSetting");
        libVoiC_gv_pCX_CampaignDifficulty = libVoiC_gf_PC_DifficultyFromIndex(libVoiC_gf_PC_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, ("Difficulty"), 0));
        libVoiC_gv_pCX_DebugProgress = libVoiC_gf_PC_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, ("DebugProgress"), false);
        libVoiC_gv_pCX_UpgradesTaught = libVoiC_gf_PC_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, ("UpgradesTaught"), false);
        libVoiC_gv_pCX_MapInstanceID = libVoiC_gf_PC_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, ("MapInstanceID"), 0);
        libVoiC_gv_pCX_MapInstanceID += 1;
        if ((libVoiC_gf_PC_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, ("AchievementsDisabled"), false) == true)) {
            AchievementsDisable(1);
        }

        lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_map, "Scenes");
        UserDataLoadType("Scenes", lp_sourceBank, lv__SectionName);
        lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_map, "WriterStates");
        UserDataLoadType("WriterStates", lp_sourceBank, lv__SectionName);
        lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_map, "StoryStates");
        UserDataLoadType("StoryStates", lp_sourceBank, lv__SectionName);
        lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_map, "CampaignLastInfo");
        libVoiC_gf_PC_SetLocationActive((libVoiC_gf_PC_LoadTransitionVarString(lp_sourceBank, lv__SectionName, ("Location"), "")));
        if ((libVoiC_gf_LastMission() == "PMoebius01") && (libVoiC_gf_CurrentLocation() == "Moebius") && (libVoiC_gf_MissionStatusCheck("PMoebius01", libVoiC_ge_MissionStatus_Completed) == false)) {
            if ((libVoiC_gf_MissionStatusAge("PTaldarim02", libVoiC_ge_MissionStatus_Completed) > 0) && (libVoiC_gf_MissionStatusAge("PTaldarim02", libVoiC_ge_MissionStatus_Completed) < libVoiC_gf_MissionStatusAge("PPurifier03", libVoiC_ge_MissionStatus_Completed))) {
                libVoiC_gv_pCX_LastMission = "PTaldarim02";
                libVoiC_gv_pCX_LastSuccessfulMission = "PTaldarim02";
            }
            else {
                libVoiC_gv_pCX_LastMission = "PPurifier03";
                libVoiC_gv_pCX_LastSuccessfulMission = "PPurifier03";
            }
            libVoiC_gv_pCX_LastMap = libVoiC_gv_pCX_LastMission;
            libVoiC_gf_PC_SetLocationActive(libVoiC_gf_StoryMapPlanet(libVoiC_gv_pCX_LastMission));
        }

        libVoiC_gf_PC_LoadLibertyInfo();
        libVoiC_gf_PC_UpdateCampaignScreen(libVoiC_gf_LastSuccessfulMission());
        UserDataSetInt("StoryStates", "ArcsVisitedCount", "Value", 1, libVoiC_gf_NumberOfMissionArcsVisited());
    }

    lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_map, "ArmyCategory");
    libVoiC_gf_PC_LoadArmyCategoryFromBank(lp_sourceBank, lv__SectionName);
    lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_map, "ArmyUnit");
    libVoiC_gf_PC_LoadArmyUnitsFromBank(lp_sourceBank, lv__SectionName);
    lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_map, "Perks");
    libVoiC_gf_PC_LoadPerksFromBank(lp_sourceBank, lv__SectionName);
    lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_map, "SpearofAdun");
    libVoiC_gf_PC_LoadSoAFromBank(lp_sourceBank, lv__SectionName);
    lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_map, "HelpUnitsPanel");
    lv_count = libVoiC_gf_PC_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString(0), 0);
    autoE1BE8001_ae = lv_count;
    lv_index = 1;
    for ( ; ( (autoE1BE8001_ai >= 0 && lv_index <= autoE1BE8001_ae) || (autoE1BE8001_ai < 0 && lv_index >= autoE1BE8001_ae) ) ; lv_index += autoE1BE8001_ai ) {
        libVoiC_gf_ZS_HelpUnitsPanel_AddEnabledUnitType(UnitTypeFromString(libVoiC_gf_PC_LoadTransitionVarString(lp_sourceBank, lv__SectionName, IntToString(lv_index), "")));
    }
    lv__SectionName = libVoiC_gf_PC_BankSectionName(lp_map, "Tips");
    UserDataLoadType("CampaignTips", lp_sourceBank, lv__SectionName);
}

void libVoiC_gf_ResetCampaignData () {
    // Variable Declarations
    string lv_indexMission;
    string lv_indexScene;

    // Automatic Variable Declarations
    int auto5F0C6AC9_ai;
    int auto5F0C6AC9_ae;
    int autoF3E471F1_ae;
    int autoF3E471F1_ai;
    int autoD79D72D0_ae;
    int autoD79D72D0_ai;

    // Variable Initialization

    // Implementation
    UserDataResetAll();
    libVoiC_gv_pCX_IsSimulation = false;
    libVoiC_gv_pCX_IsVictoryPlayAgain = false;
    libVoiC_gv_pCX_LastMap = null;
    libVoiC_gv_pCX_LastMapSuccess = false;
    libVoiC_gv_pCX_LastMission = null;
    libVoiC_gv_pCX_LastMissionSimulation = false;
    libVoiC_gv_pCX_LastMissionSuccess = false;
    libVoiC_gv_pCX_LastSuccessfulMission = null;
    if ((libVoiC_gf_PC_CampaignInEpilogue() == true)) {
        libVoiC_gv_pCX_CurrentLocation = "EpilogueArc";
    }
    else {
        libVoiC_gv_pCX_CurrentLocation = "AiurA";
    }
    libVoiC_gv_pCX_UpgradesTaught = false;
    libVoiC_gv_pCX_DebugProgress = false;
    libVoiC_gf_PC_ResetTech();
    auto5F0C6AC9_ai = 1;
    auto5F0C6AC9_ae = UserDataInstanceCount("Scenes")+1;
    while (auto5F0C6AC9_ai < auto5F0C6AC9_ae) {
        lv_indexScene = UserDataInstance("Scenes", auto5F0C6AC9_ai);
        libVoiC_gf_SetStoryScenePlayed(lv_indexScene, false);
        auto5F0C6AC9_ai = auto5F0C6AC9_ai+1;
    }
    if ((libVoiC_gf_PC_CampaignInEpilogue() == true)) {
        autoD79D72D0_ae = CatalogEntryCount(c_gameCatalogMap);
        autoD79D72D0_ai = 1;
        while (autoD79D72D0_ai <= autoD79D72D0_ae) {
            lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoD79D72D0_ai);
            autoD79D72D0_ai = autoD79D72D0_ai + 1;
            if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
                if ((lv_indexMission == "SC2Epilogue01")) {
                    libVoiC_gf_PC_MarkMissionAsStatus(lv_indexMission, libVoiC_ge_MissionStatus_Available);
                }
                else if (((lv_indexMission == "SC2Epilogue02") || (lv_indexMission == "SC2Epilogue03"))) {
                    libVoiC_gf_PC_MarkMissionAsStatus(lv_indexMission, libVoiC_ge_MissionStatus_Locked);
                }
                else if (true) {
                    libVoiC_gf_PC_MarkMissionAsStatus(lv_indexMission, libVoiC_ge_MissionStatus_Completed);
                }
            }    
        }
        libVoiC_gf_PC_UpdateCompletedMissionArray();
        libVoiC_gf_PC_UpdateTechStates(1);
    }
    else {
        autoF3E471F1_ae = CatalogEntryCount(c_gameCatalogMap);
        autoF3E471F1_ai = 1;
        while (autoF3E471F1_ai <= autoF3E471F1_ae) {
            lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoF3E471F1_ai);
            autoF3E471F1_ai = autoF3E471F1_ai + 1;
            if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
                libVoiC_gf_PC_MarkMissionAsStatus(lv_indexMission, libVoiC_ge_MissionStatus_Locked);
            }    
        }
        libVoiC_gf_PC_MarkMissionAsStatus("PAiur01", libVoiC_ge_MissionStatus_Available);
    }
    libVoiC_gf_DispatchCampaignEvent(libVoiC_ge_PC_Event_CampaignDataReset, "", "", false);
    libVoiC_gf_ZS_HelpUnitsPanel_ResetEnabledUnitTypes();
}

void libVoiC_gf_PC_SaveArmyTechBank (string lp_nextMission, bool lp_simulation) {
    // Variable Declarations
    string lv_indexCategory;
    int lv_categoryState;
    int lv_unitIndex;
    string lv_indexUnit;
    int lv_unitState;
    string lv_bankPath;
    string lv_section;
    string lv_key;
    string lv_categorySection;
    string lv_unitSection;

    // Automatic Variable Declarations
    int auto48774C10_ae;
    int auto48774C10_ai;
    int auto8D929E0C_ae;
    int auto8D929E0C_ai;
    int autoCDD6D710_ae;
    int autoCDD6D710_ai;
    int auto69FACFC2_ae;
    int auto69FACFC2_ai;
    int autoE0F96F5D_ae;
    int autoE0F96F5D_ai;
    int autoF698B290_ae;
    int autoF698B290_ai;

    // Variable Initialization
    lv_key = "";

    // Implementation
    if ((libVoiC_gf_PC_CampaignInEpilogue() == true)) {
        return ;
    }

    libVoiC_gf_PC_OpenArmyTechBank();
    if (((libVoiC_gv_pC_ArmyTechBank == null))) {
        return ;
    }

    auto48774C10_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto48774C10_ai = 1;
    while (auto48774C10_ai <= auto48774C10_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto48774C10_ai);
        lv_section = libVoiC_gf_PC_ArmyCategoryBankSection(lv_indexCategory);
        BankSectionRemove(libVoiC_gv_pC_ArmyTechBank, lv_section);
        auto8D929E0C_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        auto8D929E0C_ai = 1;
        while (auto8D929E0C_ai <= auto8D929E0C_ae) {
            lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto8D929E0C_ai-1)+"]", 1);
            lv_section = libVoiC_gf_PC_ArmyUnitBankSection(lv_indexUnit);
            BankSectionRemove(libVoiC_gv_pC_ArmyTechBank, lv_section);
            auto8D929E0C_ai = auto8D929E0C_ai + 1;
        }
        auto48774C10_ai = auto48774C10_ai + 1;
    }
    if ((lp_simulation == true)) {
        libVoiC_gf_PC_OpenCampaignBank();
        lv_categorySection = libVoiC_gf_PC_BankSectionName(null, "ArmyCategory");
        lv_unitSection = libVoiC_gf_PC_BankSectionName(lp_nextMission, "ArmyUnit");
        if (((lp_nextMission == "PAiur01") || ((BankSectionExists(libVoiC_gv_pC_CampaignBank, lv_categorySection) == true) && (BankSectionExists(libVoiC_gv_pC_CampaignBank, lv_unitSection) == true)))) {
            autoCDD6D710_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
            autoCDD6D710_ai = 1;
            while (autoCDD6D710_ai <= autoCDD6D710_ae) {
                lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoCDD6D710_ai);
                lv_categoryState = libVoiC_gf_PC_LoadTransitionVarInteger(libVoiC_gv_pC_CampaignBank, lv_categorySection, (lv_indexCategory), 0);
                lv_section = libVoiC_gf_PC_ArmyCategoryBankSection(lv_indexCategory);
                lv_key = libVoiC_gf_PC_ArmyCategoryBankKey(lv_indexCategory);
                libVoiC_gf_PC_SaveTransitionVarInteger(libVoiC_gv_pC_ArmyTechBank, lv_section, lv_key, lv_categoryState, 0);
                auto69FACFC2_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
                auto69FACFC2_ai = 1;
                while (auto69FACFC2_ai <= auto69FACFC2_ae) {
                    lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto69FACFC2_ai-1)+"]", 1);
                    lv_unitState = libVoiC_gf_PC_LoadTransitionVarInteger(libVoiC_gv_pC_CampaignBank, lv_unitSection, (lv_indexUnit), 0);
                    lv_section = libVoiC_gf_PC_ArmyUnitBankSection(lv_indexUnit);
                    lv_key = libVoiC_gf_PC_ArmyUnitBankKey(lv_indexUnit);
                    libVoiC_gf_PC_SaveTransitionVarInteger(libVoiC_gv_pC_ArmyTechBank, lv_section, lv_key, lv_unitState, 0);
                    auto69FACFC2_ai = auto69FACFC2_ai + 1;
                }
                autoCDD6D710_ai = autoCDD6D710_ai + 1;
            }
            BankSave(libVoiC_gv_pC_ArmyTechBank);
            return ;
        }

    }

    autoE0F96F5D_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoE0F96F5D_ai = 1;
    while (autoE0F96F5D_ai <= autoE0F96F5D_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoE0F96F5D_ai);
        lv_section = libVoiC_gf_PC_ArmyCategoryBankSection(lv_indexCategory);
        lv_key = libVoiC_gf_PC_ArmyCategoryBankKey(lv_indexCategory);
        libVoiC_gf_PC_SaveTransitionVarInteger(libVoiC_gv_pC_ArmyTechBank, lv_section, lv_key, (libVoiC_gf_PC_ArmyCategoryState(lv_indexCategory)), 0);
        autoF698B290_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        autoF698B290_ai = 1;
        while (autoF698B290_ai <= autoF698B290_ae) {
            lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(autoF698B290_ai-1)+"]", 1);
            lv_section = libVoiC_gf_PC_ArmyUnitBankSection(lv_indexUnit);
            lv_key = libVoiC_gf_PC_ArmyUnitBankKey(lv_indexUnit);
            libVoiC_gf_PC_SaveTransitionVarInteger(libVoiC_gv_pC_ArmyTechBank, lv_section, lv_key, (libVoiC_gf_PC_StoryArmyUnitState(lv_indexUnit)), 0);
            autoF698B290_ai = autoF698B290_ai + 1;
        }
        autoE0F96F5D_ai = autoE0F96F5D_ai + 1;
    }
    BankSave(libVoiC_gv_pC_ArmyTechBank);
    TextExpressionSetToken("Param/Expression/lib_VoiC_6F0FF8BB", "A", StringToText(lv_bankPath));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_VoiC_6F0FF8BB"), false);
}

void libVoiC_gf_PC_OpenArmyTechBank () {
    // Variable Declarations
    string lv_indexCategory;
    string lv_bankPath;

    // Automatic Variable Declarations
    int autoC4517888_ae;
    int autoC4517888_ai;

    // Variable Initialization

    // Implementation
    if ((libVoiC_gv_pC_ArmyTechBank != null)) {
        return ;
    }

    autoC4517888_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoC4517888_ai = 1;
    while (autoC4517888_ai <= autoC4517888_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoC4517888_ai);
        lv_bankPath = libVoiC_gf_PC_ArmyCategoryBankPath(lv_indexCategory);
        BankLoad(lv_bankPath, 1);
        libVoiC_gv_pC_ArmyTechBank = BankLastCreated();
        return ;
        autoC4517888_ai = autoC4517888_ai + 1;
    }
}

string libVoiC_gf_PC_ArmyCategoryBankPath (string lp_category) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_category), "BankPath.File", 1);
}

string libVoiC_gf_PC_ArmyCategoryBankSection (string lp_category) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_category), "BankPath.Section", 1);
}

string libVoiC_gf_PC_ArmyCategoryBankKey (string lp_category) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_category), "BankPath.Key", 1);
}

string libVoiC_gf_PC_ArmyUnitBankPath (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_unit), "BankPath.File", 1);
}

string libVoiC_gf_PC_ArmyUnitBankSection (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_unit), "BankPath.Section", 1);
}

string libVoiC_gf_PC_ArmyUnitBankKey (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_unit), "BankPath.Key", 1);
}

void libVoiC_gf_PC_OpenArchiveBank () {
    // Automatic Variable Declarations
    // Implementation
    if ((libVoiC_gv_pC_ArchivesBank != null)) {
        return ;
    }

    if ((libVoiC_gf_PC_CampaignInEpilogue() == true)) {
        BankLoad(libVoiC_gv_pC_ArchiveEpilogueBankName, 1);
    }
    else {
        BankLoad(libVoiC_gv_pC_ArchiveLotVBankName, 1);
    }
    libVoiC_gv_pC_ArchivesBank = BankLastCreated();
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
}

void libVoiC_gf_PC_ArchiveBankObjectiveSave (string lp_objective) {
    // Variable Declarations
    int lv_oldProgress;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_oldProgress = libVoiC_gf_PC_LoadTransitionVarInteger(libVoiC_gv_pC_ArchivesBank, libVoiC_gf_PC_BankSectionName(null, "MissionObjectives"), (lp_objective), 0);
    if ((lv_oldProgress < libVoiC_gf_MissionObjectiveProgress(lp_objective))) {
        libVoiC_gf_PC_SaveTransitionVarInteger(libVoiC_gv_pC_ArchivesBank, libVoiC_gf_PC_BankSectionName(null, "MissionObjectives"), (lp_objective), libVoiC_gf_MissionObjectiveProgress(lp_objective), 0);
    }
    else {
        libVoiC_gf_PC_SaveTransitionVarInteger(libVoiC_gv_pC_ArchivesBank, libVoiC_gf_PC_BankSectionName(null, "MissionObjectives"), (lp_objective), lv_oldProgress, 0);
    }
}

void libVoiC_gf_PC_ArchiveBankSave () {
    // Variable Declarations
    string lv_indexMission;
    string lv_indexObjective;

    // Automatic Variable Declarations
    int autoACAE0323_ae;
    int autoACAE0323_ai;
    int autoA79FDAA3_ae;
    int autoA79FDAA3_ai;

    // Variable Initialization

    // Implementation
    if (((AchievementsDisabled(1) == true) || (libVoiC_gv_pC_ArchivesReloading == true))) {
        return ;
    }

    libVoiC_gf_PC_OpenArchiveBank();
    autoACAE0323_ae = CatalogEntryCount(c_gameCatalogObjective);
    autoACAE0323_ai = 1;
    while (autoACAE0323_ai <= autoACAE0323_ae) {
        lv_indexObjective = CatalogEntryGet(c_gameCatalogObjective, autoACAE0323_ai);
        autoACAE0323_ai = autoACAE0323_ai + 1;
        libVoiC_gf_PC_ArchiveBankObjectiveSave(lv_indexObjective);
    }
    autoA79FDAA3_ae = CatalogEntryCount(c_gameCatalogMap);
    autoA79FDAA3_ai = 1;
    while (autoA79FDAA3_ai <= autoA79FDAA3_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoA79FDAA3_ai);
        autoA79FDAA3_ai = autoA79FDAA3_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            libVoiC_gf_PC_ArchiveBankMissionSave(lv_indexMission);
        }    
    }
    if ((((libVoiC_gf_PC_CampaignInEpilogue() == false) && (libVoiC_gf_MissionStatusCheck("PAiur06", libVoiC_ge_MissionStatus_Completed) == true)) || ((libVoiC_gf_PC_CampaignInEpilogue() == true) && (libVoiC_gf_MissionStatusCheck("SC2Epilogue03", libVoiC_ge_MissionStatus_Completed) == true)))) {
        BankValueSetFromFlag(libVoiC_gv_pC_ArchivesBank, "GlobalStates", "CampaignComplete", true);
    }

    if ((libVoiC_gf_PC_CampaignIsComplete() == true) && (libVoiC_gf_PC_CampaignMapTypeCheck(libVoiC_gf_CurrentMap(), c_mapKindStory) == true)) {
        BankValueSetFromFlag(libVoiC_gv_pC_ArchivesBank, "GlobalStates", "ArchivesVisited", true);
    }

    BankSave(libVoiC_gv_pC_ArchivesBank);
}

void libVoiC_gf_PC_ArchiveBankLoad () {
    // Variable Declarations
    string lv_indexMission;
    string lv_indexObjective;
    int lv_difficultyIndex;
    int lv_archivesBankProgress;

    // Automatic Variable Declarations
    int auto33593E0D_ae;
    int auto33593E0D_ai;
    int autoFF153C1A_ae;
    int autoFF153C1A_ai;
    const int auto5FC905B3_ae = 4;
    const int auto5FC905B3_ai = 1;

    // Variable Initialization

    // Implementation
    if (((libVoiC_gf_PC_CampaignIsComplete() == false) || (libVoiC_gv_pC_ArchivesReloading == true))) {
        return ;
    }

    libVoiC_gf_PC_OpenArchiveBank();
    libVoiC_gv_pC_ArchivesVisited = libVoiC_gf_PC_LoadTransitionVarBoolean(libVoiC_gv_pC_ArchivesBank, "GlobalStates", "ArchivesVisited", false);
    auto33593E0D_ae = CatalogEntryCount(c_gameCatalogObjective);
    auto33593E0D_ai = 1;
    while (auto33593E0D_ai <= auto33593E0D_ae) {
        lv_indexObjective = CatalogEntryGet(c_gameCatalogObjective, auto33593E0D_ai);
        auto33593E0D_ai = auto33593E0D_ai + 1;
        if ((libVoiC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
            lv_archivesBankProgress = libVoiC_gf_PC_LoadTransitionVarInteger(libVoiC_gv_pC_ArchivesBank, libVoiC_gf_PC_BankSectionName(null, "MissionObjectives"), (lv_indexObjective), 0);
            if ((lv_archivesBankProgress > UserDataGetInt("MissionObjective", libVoiC_gf_PS_ObjectiveUserDataInstance(lv_indexObjective), "Progress", 1))) {
                UserDataSetInt("MissionObjective", libVoiC_gf_PS_ObjectiveUserDataInstance(lv_indexObjective), "Progress", 1, lv_archivesBankProgress);
            }

        }

    }
    autoFF153C1A_ae = CatalogEntryCount(c_gameCatalogMap);
    autoFF153C1A_ai = 1;
    while (autoFF153C1A_ai <= autoFF153C1A_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoFF153C1A_ai);
        autoFF153C1A_ai = autoFF153C1A_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_difficultyIndex = 1;
            for ( ; ( (auto5FC905B3_ai >= 0 && lv_difficultyIndex <= auto5FC905B3_ae) || (auto5FC905B3_ai < 0 && lv_difficultyIndex >= auto5FC905B3_ae) ) ; lv_difficultyIndex += auto5FC905B3_ai ) {
                libVoiC_gf_PC_SetMissionCompletionBestTime(lv_indexMission, libVoiC_gf_PC_DifficultyFromIndex(lv_difficultyIndex), libVoiC_gf_PC_LoadTransitionVarInteger(libVoiC_gv_pC_ArchivesBank, libVoiC_gf_PC_BankSectionName(null, "MissionBestTime"), libVoiC_gf_PC_BankMissionDifficultyKey(lv_indexMission, libVoiC_gf_PC_DifficultyFromIndex(lv_difficultyIndex)), -1));
            }
        }    
    }
}

void libVoiC_gf_PC_ArchiveBankMissionSave (string lp_mission) {
    // Variable Declarations
    int lv_oldTime;
    int lv_difficultyIndex;

    // Automatic Variable Declarations
    const int auto1E4EDA69_ae = 4;
    const int auto1E4EDA69_ai = 1;

    // Variable Initialization

    // Implementation
    if ((((libVoiC_gf_CurrentMap() != lp_mission) || (libVoiC_gf_CurrentMissionIsSimulation() == false)) && (libVoiC_gf_MissionStatusCheck(lp_mission, libVoiC_ge_MissionStatus_Completed) == false))) {
        return ;
    }

    lv_difficultyIndex = 1;
    for ( ; ( (auto1E4EDA69_ai >= 0 && lv_difficultyIndex <= auto1E4EDA69_ae) || (auto1E4EDA69_ai < 0 && lv_difficultyIndex >= auto1E4EDA69_ae) ) ; lv_difficultyIndex += auto1E4EDA69_ai ) {
        lv_oldTime = libVoiC_gf_PC_LoadTransitionVarInteger(libVoiC_gv_pC_ArchivesBank, libVoiC_gf_PC_BankSectionName(null, "MissionBestTime"), libVoiC_gf_PC_BankMissionDifficultyKey(lp_mission, libVoiC_gf_PC_DifficultyFromIndex(lv_difficultyIndex)), -1);
        if (((lv_oldTime <= 0) || ((libVoiC_gf_MissionCompleteBestTime(lp_mission, libVoiC_gf_PC_DifficultyFromIndex(lv_difficultyIndex)) > 0) && (lv_oldTime > libVoiC_gf_MissionCompleteBestTime(lp_mission, libVoiC_gf_PC_DifficultyFromIndex(lv_difficultyIndex)))))) {
            libVoiC_gf_PC_SaveTransitionVarInteger(libVoiC_gv_pC_ArchivesBank, libVoiC_gf_PC_BankSectionName(null, "MissionBestTime"), libVoiC_gf_PC_BankMissionDifficultyKey(lp_mission, libVoiC_gf_PC_DifficultyFromIndex(lv_difficultyIndex)), libVoiC_gf_MissionCompleteBestTime(lp_mission, libVoiC_gf_PC_DifficultyFromIndex(lv_difficultyIndex)), -1);
        }

    }
}

void libVoiC_gf_PC_ArchivesBankSyncForLoad () {
    // Automatic Variable Declarations
    // Implementation
    libVoiC_gf_PC_OpenArchiveBank();
    BankReload(libVoiC_gv_pC_ArchivesBank);
    libVoiC_gv_pC_ArchivesReloading = true;
    TriggerExecute(libVoiC_gt_PC_ArchivesBankLoadSyncComplete, true, false);
}

void libVoiC_gf_PC_ArchivesBankSyncForSave () {
    // Automatic Variable Declarations
    // Implementation
    libVoiC_gf_PC_OpenArchiveBank();
    BankReload(libVoiC_gv_pC_ArchivesBank);
    libVoiC_gv_pC_ArchivesReloading = true;
    TriggerExecute(libVoiC_gt_PC_ArchivesBankSaveSyncComplete, true, false);
}

bool libVoiC_gf_PC_ArchivesMasterVisited () {
    // Automatic Variable Declarations
    // Implementation
    return libVoiC_gv_pC_ArchivesVisited;
}

void libVoiC_gf_PC_OpenCampaignBank () {
    // Automatic Variable Declarations
    // Implementation
    if ((libVoiC_gv_pC_CampaignBank != null)) {
        return ;
    }

    if ((libVoiC_gf_PC_CampaignInEpilogue() == true)) {
        BankLoad(libVoiC_gv_pC_CampaignEpilogueBankName, 1);
    }
    else {
        BankLoad(libVoiC_gv_pC_CampaignLotVBankName, 1);
    }
    libVoiC_gv_pC_CampaignBank = BankLastCreated();
}

bool libVoiC_gf_PC_CampaignBankExists () {
    // Automatic Variable Declarations
    // Implementation
    if ((libVoiC_gf_PC_CampaignInEpilogue() == true)) {
        return BankExists(libVoiC_gv_pC_CampaignEpilogueBankName, 1);
    }

    return BankExists(libVoiC_gv_pC_CampaignLotVBankName, 1);
}

void libVoiC_gf_PC_SaveCampaignBank () {
    // Automatic Variable Declarations
    // Implementation
    if ((libVoiC_gv_pC_CampaignBank == null)) {
        return ;
    }

    BankSave(libVoiC_gv_pC_CampaignBank);
}

bool libVoiC_gf_PC_MissionSectionExists (string lp_mission) {
    // Variable Declarations
    string lv_missionSectionName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_missionSectionName = "";

    // Implementation
    if ((libVoiC_gv_pC_CampaignBank == null)) {
        libVoiC_gf_PC_OpenCampaignBank();
    }

    return libVoiC_gf_PC_LoadTransitionVarBoolean(libVoiC_gv_pC_CampaignBank, libVoiC_gf_PC_BankSectionName(lp_mission, "MissionSectionExist"), "Value", false);
}

void libVoiC_gf_PC_SetMissionSectionExists (string lp_mission, bool lp_exist) {
    // Variable Declarations
    string lv_missionSectionName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_missionSectionName = "";

    // Implementation
    if ((libVoiC_gv_pC_CampaignBank == null)) {
        libVoiC_gf_PC_OpenCampaignBank();
    }

    libVoiC_gf_PC_SaveTransitionVarBoolean(libVoiC_gv_pC_CampaignBank, libVoiC_gf_PC_BankSectionName(lp_mission, "MissionSectionExist"), "Value", lp_exist, false);
}

void libVoiC_gf_PC_LoadMissionSections () {
    // Variable Declarations
    string lv_indexMission;

    // Automatic Variable Declarations
    int auto931DD63A_ae;
    int auto931DD63A_ai;

    // Variable Initialization

    // Implementation
    auto931DD63A_ae = CatalogEntryCount(c_gameCatalogMap);
    auto931DD63A_ai = 1;
    while (auto931DD63A_ai <= auto931DD63A_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto931DD63A_ai);
        auto931DD63A_ai = auto931DD63A_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((lv_indexMission == libVoiC_gf_CurrentMap())) {
                if (((GameIsTransitionMap() == false) || (libVoiC_gv_pCX_IsSimulation == true) || (libVoiC_gv_pCX_IsVictoryPlayAgain == true)) && (libVoiC_gf_PC_MissionSectionExists(lv_indexMission) == true)) {
                    TextExpressionSetToken("Param/Expression/lib_VoiC_A265CE09", "A", StringToText(libVoiC_gf_PC_CampaignMapFile(lv_indexMission)));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_VoiC_A265CE09"), false);
                    libVoiC_gf_PC_LoadTransitionVars(libVoiC_gv_pC_CampaignBank, lv_indexMission);
                    if ((libVoiC_gf_PC_CampaignIsComplete() == false)) {
                        libVoiC_gf_PC_ClampProgressToMission(lv_indexMission);
                    }

                }
                else {
                    if ((libVoiC_gf_PC_MissionSectionExists(lv_indexMission) == true)) {
                        libVoiC_gf_PC_SaveArmyTechBank(libVoiC_gf_CurrentMap(), libVoiC_gv_pCX_IsSimulation);
                        BankSave(libVoiC_gv_pC_ArmyTechBank);
                    }
                    else {
                        if ((libVoiC_gv_pCX_IsSimulation == true)) {
                            libVoiC_gf_PC_ClampProgressToMission(lv_indexMission);
                        }

                    }
                    libVoiC_gf_PC_SaveTransitionVars(libVoiC_gv_pC_CampaignBank, lv_indexMission, false, false, false, false, false);
                }
            }

        }    
    }
}

void libVoiC_gf_PC_ClampProgressToMission (string lp_mission) {
    // Variable Declarations
    string lv_indexMission;
    string lv_indexPerk;
    string lv_possibleAltPerk;
    string lv_indexPerkGroup;

    // Automatic Variable Declarations
    int auto25F254A2_ae;
    int auto25F254A2_ai;

    // Variable Initialization

    // Implementation
    auto25F254A2_ae = CatalogEntryCount(c_gameCatalogMap);
    auto25F254A2_ai = 1;
    while (auto25F254A2_ai <= auto25F254A2_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto25F254A2_ai);
        auto25F254A2_ai = auto25F254A2_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((libVoiC_gf_MissionStatusCheck(lv_indexMission, libVoiC_ge_MissionStatus_Available) == true)) {
                libVoiC_gf_PC_MarkMissionAsStatus(lv_indexMission, libVoiC_ge_MissionStatus_Locked);
            }
            else if ((libVoiC_gf_MissionStatusAge(lv_indexMission, libVoiC_ge_MissionStatus_Completed) < libVoiC_gf_MissionStatusAge(lp_mission, libVoiC_ge_MissionStatus_Completed))) {
                libVoiC_gf_PC_MarkMissionAsStatus(lv_indexMission, libVoiC_ge_MissionStatus_Locked);
            }
            else if ((lv_indexMission != lp_mission)) {
                libVoiC_gf_PC_SetMissionStatusAge(lv_indexMission, libVoiC_ge_MissionStatus_Completed, (libVoiC_gf_MissionStatusAge(lv_indexMission, libVoiC_ge_MissionStatus_Completed)-libVoiC_gf_MissionStatusAge(lp_mission, libVoiC_ge_MissionStatus_Completed)));
            }
        }    
    }
    libVoiC_gf_PC_MarkMissionAsStatus(lp_mission, libVoiC_ge_MissionStatus_Available);
    libVoiC_gf_PC_UpdateTechStates(1);
    libVoiC_gf_PC_ClampSoAToMission();
    libVoiC_gf_PC_ApplyTech(1);
}

void libVoiC_gf_PC_ClampSoAToMission () {
    // Variable Declarations
    string lv_indexPerk;
    string lv_possibleAltPerk;
    string lv_indexPerkGroup;

    // Automatic Variable Declarations
    int auto2484D857_ai;
    int auto2484D857_ae;
    int auto529D9EA0_ai;
    int auto529D9EA0_ae;

    // Variable Initialization

    // Implementation
    libVoiC_gf_PC_SoACalculateCurrency();
    if ((libVoiC_gf_PC_SoACurrencyAvail() < 0)) {
        libVoiC_gf_PC_SoAUpgradeLevelSet("ShipStructureBuildUpgrade", 0);
        libVoiC_gf_PC_SoAUpgradeLevelSet("ShipShieldUpgrades", 0);
        libVoiC_gf_PC_SoAUpgradeLevelSet("ShipSupplyUpgrade", 0);
    }

    auto2484D857_ai = 1;
    auto2484D857_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (auto2484D857_ai < auto2484D857_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", auto2484D857_ai);
        auto2484D857_ai = auto2484D857_ai+1;
        libVoiC_gf_PC_SoACalculateCurrency();
        if ((libVoiC_gf_PC_SoACurrencyAvail() >= 0)) {
            break;
        }

        if ((libVoiC_gf_PC_PerkStateCheck(lv_indexPerk, libVoiC_ge_PC_PerkState_Active) == true) && (libVoiC_gf_PC_PerkCost(lv_indexPerk) > 0)) {
            auto529D9EA0_ai = 1;
            auto529D9EA0_ae = UserDataInstanceCount("CampaignPerk")+1;
            while (auto529D9EA0_ai < auto529D9EA0_ae) {    
                lv_possibleAltPerk = UserDataInstance("CampaignPerk", auto529D9EA0_ai);
                auto529D9EA0_ai = auto529D9EA0_ai+1;
                if( libVoiC_gf_PC_PerkGroupOfPerk(lv_possibleAltPerk) == libVoiC_gf_PC_PerkGroupOfPerk(lv_indexPerk) ) {
                    if ((libVoiC_gf_PC_PerkCost(lv_possibleAltPerk) == 0)) {
                        libVoiC_gf_PC_PerkStateSet(lv_indexPerk, libVoiC_ge_PC_PerkState_Unlocked);
                        libVoiC_gf_PC_PerkStateSet(lv_possibleAltPerk, libVoiC_ge_PC_PerkState_Active);
                        break;
                    }

                }    
            }
        }

    }
}

void libVoiC_gf_PC_OpenStoryBank () {
    // Automatic Variable Declarations
    // Implementation
    if ((libVoiC_gv_pC_StoryBank != null)) {
        return ;
    }

    BankLoad(libVoiC_gv_pC_StoryBankName, 1);
    libVoiC_gv_pC_StoryBank = BankLastCreated();
}

void libVoiC_gf_PC_CopyWriterStatesToSnapshot () {
    // Automatic Variable Declarations
    // Implementation
    if ((libVoiC_gf_PC_CampaignInEpilogue() == true)) {
        return ;
    }

    libVoiC_gf_PC_OpenStoryBank();
    UserDataSaveType("WriterStates", libVoiC_gf_StoryBank(), "WriterStateSnapshot");
    BankSave(libVoiC_gf_StoryBank());
}

bank libVoiC_gf_StoryBank () {
    // Automatic Variable Declarations
    // Implementation
    libVoiC_gf_PC_OpenStoryBank();
    return libVoiC_gv_pC_StoryBank;
}

void libVoiC_gf_PC_LoadLibertyInfo () {
    // Variable Declarations
    const string lv_bankName = "TCampaign";
    const string lv__SectionName = "MissionCompletedAge";
    int lv_aAge;
    int lv_bAge;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_VoiC_12C40E9E"), false);
    if ((BankExists(lv_bankName, 1) == false)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_VoiC_55D097EB"), false);
        return ;
    }

    BankLoad(lv_bankName, 1);
    if ((BankLastCreated() == null)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_VoiC_BB484012"), false);
        return ;
    }

    libVoiC_gf_PC_LoadLibertyInfoIndividual(BankLastCreated(), libVoiC_ge_PC_LibertyMapID_MapTHanson03A, libVoiC_ge_PC_LibertyMapID_MapTHanson03B, "HansonChoice");
    libVoiC_gf_PC_LoadLibertyInfoIndividual(BankLastCreated(), libVoiC_ge_PC_LibertyMapID_MapTTosh03A, libVoiC_ge_PC_LibertyMapID_MapTTosh03B, "ToshChoice");
    libVoiC_gf_PC_LoadLibertyInfoIndividual(BankLastCreated(), libVoiC_ge_PC_LibertyMapID_MapTValerian02A, libVoiC_ge_PC_LibertyMapID_MapTValerian02B, "CharChoice");
}

void libVoiC_gf_PC_LoadLibertyInfoIndividual (bank lp_bank, int lp_missionA, int lp_missionB, string lp_choice) {
    // Variable Declarations
    string lv__SectionName;
    int lv_aAge;
    int lv_bAge;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__SectionName = "MissionCompletedAge";

    // Implementation
    if ((BankKeyExists(lp_bank, lv__SectionName, IntToString((lp_missionA))) == true)) {
        lv_aAge = BankValueGetAsInt(BankLastCreated(), lv__SectionName, IntToString((lp_missionA)));
    }
    else {
        lv_aAge = 0;
    }
    if ((BankKeyExists(lp_bank, lv__SectionName, IntToString((lp_missionB))) == true)) {
        lv_bAge = BankValueGetAsInt(BankLastCreated(), lv__SectionName, IntToString((lp_missionB)));
    }
    else {
        lv_bAge = 0;
    }
    TextExpressionSetToken("Param/Expression/lib_VoiC_C585AD1D", "A", IntToText(lv_aAge));
    TextExpressionSetToken("Param/Expression/lib_VoiC_C585AD1D", "B", IntToText(lv_bAge));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_VoiC_C585AD1D"), false);
    if (((lv_aAge > 0) || (lv_bAge > 0))) {
        if ((lv_aAge > lv_bAge)) {
            UserDataSetInt("WriterStates", lp_choice, "Value", 1, 1);
        }
        else {
            UserDataSetInt("WriterStates", lp_choice, "Value", 1, 2);
        }
    }

}

string libVoiC_gf_PC_BankMissionDifficultyKey (string lp_mission, int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    return (libVoiC_gf_PC_StoryMapBankID(lp_mission) + "-" + IntToString(libVoiC_gf_PC_DifficultyIndex(lp_difficulty)));
}

string libVoiC_gf_PC_BankSectionName (string lp_map, string lp_section) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return ("PCampaign" + "|" + (lp_section));
    }

    return (libVoiC_gf_PC_StoryMapBankID(lp_map) + "|" + (lp_section));
}

int libVoiC_gf_PC_LoadTransitionVarInteger (bank lp_bank, string lp_section, string lp_key, int lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((BankKeyExists(lp_bank, lp_section, lp_key) == false)) {
        return lp_default;
    }
    else {
        return BankValueGetAsInt(lp_bank, lp_section, lp_key);
    }
}

bool libVoiC_gf_PC_LoadTransitionVarBoolean (bank lp_bank, string lp_section, string lp_key, bool lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((BankKeyExists(lp_bank, lp_section, lp_key) == false)) {
        return lp_default;
    }
    else {
        return BankValueGetAsFlag(lp_bank, lp_section, lp_key);
    }
}

string libVoiC_gf_PC_LoadTransitionVarString (bank lp_bank, string lp_section, string lp_key, string lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((BankKeyExists(lp_bank, lp_section, lp_key) == false)) {
        return lp_default;
    }
    else {
        return BankValueGetAsString(lp_bank, lp_section, lp_key);
    }
}

void libVoiC_gf_PC_SaveTransitionVarInteger (bank lp_bank, string lp_section, string lp_key, int lp_value, int lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value == lp_default)) {
        BankKeyRemove(lp_bank, lp_section, lp_key);
    }
    else {
        BankValueSetFromInt(lp_bank, lp_section, lp_key, lp_value);
    }
}

void libVoiC_gf_PC_SaveTransitionVarBoolean (bank lp_bank, string lp_section, string lp_key, bool lp_value, bool lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value == lp_default)) {
        BankKeyRemove(lp_bank, lp_section, lp_key);
    }
    else {
        BankValueSetFromFlag(lp_bank, lp_section, lp_key, lp_value);
    }
}

void libVoiC_gf_PC_SaveTransitionVarString (bank lp_bank, string lp_section, string lp_key, string lp_value, string lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value == lp_default)) {
        BankKeyRemove(lp_bank, lp_section, lp_key);
    }
    else {
        BankValueSetFromString(lp_bank, lp_section, lp_key, lp_value);
    }
}

void libVoiC_gf_StorySetSimulationMission (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    if ((libVoiC_gv_pS_StorySimulationMission != null)) {
        libVoiC_gf_StorySimulationEnd();
    }

    BankLoad("PStorySimulation", 1);
    libVoiC_gv_pS_StorySimulationOriginalBank = BankLastCreated();
    libVoiC_gv_pS_StorySimulationMission = lp_mission;
    libVoiC_gf_PC_SaveMapToBank(null, libVoiC_gv_pS_StorySimulationOriginalBank, false);
    libVoiC_gf_PC_SaveTransitionVarString(libVoiC_gv_pS_StorySimulationOriginalBank, libVoiC_gf_PC_BankSectionName(null, "CampaignLastInfo"), ("Location"), libVoiC_gf_PC_StoryMapBankID2(libVoiC_gv_pCX_CurrentLocation), "");
    libVoiC_gf_PC_SaveArmyCategoryToBank(libVoiC_gv_pS_StorySimulationOriginalBank, libVoiC_gf_PC_BankSectionName(null, "ArmyCategory"));
    libVoiC_gf_PC_SaveArmyUnitsToBank(libVoiC_gv_pS_StorySimulationOriginalBank, libVoiC_gf_PC_BankSectionName(null, "ArmyUnit"));
    libVoiC_gf_PC_SavePerksToBank(libVoiC_gv_pS_StorySimulationOriginalBank, libVoiC_gf_PC_BankSectionName(null, "Perks"));
    libVoiC_gf_PC_SaveSoAToBank(libVoiC_gv_pS_StorySimulationOriginalBank, libVoiC_gf_PC_BankSectionName(null, "SpearofAdun"));
    libVoiC_gf_PC_OpenCampaignBank();
    if (((libVoiC_gf_PC_MissionSectionExists(lp_mission) == true) || (lp_mission == "PAiur01") || (lp_mission == "PAiur02") || (lp_mission == "PAiur03"))) {
        if ((libVoiC_gf_PC_CampaignIsComplete() == false)) {
            libVoiC_gf_PC_LoadMapFromBank(lp_mission, libVoiC_gv_pC_CampaignBank);
        }

        libVoiC_gf_PC_LoadArmyUnitsFromBank(libVoiC_gv_pC_CampaignBank, libVoiC_gf_PC_BankSectionName(lp_mission, "ArmyUnit"));
        libVoiC_gf_PC_LoadPerksFromBank(libVoiC_gv_pC_CampaignBank, libVoiC_gf_PC_BankSectionName(lp_mission, "Perks"));
        libVoiC_gf_PC_LoadSoAFromBank(libVoiC_gv_pC_CampaignBank, libVoiC_gf_PC_BankSectionName(lp_mission, "SpearofAdun"));
    }

    if ((libVoiC_gf_PC_CampaignIsComplete() == true)) {
        libVoiC_gf_PC_UpdateSimulationMissionAges(lp_mission);
    }
    else {
        libVoiC_gf_PC_ClampProgressToMission(lp_mission);
    }
}

void libVoiC_gf_StorySimulationEnd () {
    // Automatic Variable Declarations
    // Implementation
    libVoiC_gf_PC_SetMissionSectionExists(libVoiC_gv_pS_StorySimulationMission, true);
    libVoiC_gf_PC_SaveArmyUnitsToBank(libVoiC_gv_pC_CampaignBank, libVoiC_gf_PC_BankSectionName(libVoiC_gv_pS_StorySimulationMission, "ArmyUnit"));
    libVoiC_gf_PC_SavePerksToBank(libVoiC_gv_pC_CampaignBank, libVoiC_gf_PC_BankSectionName(libVoiC_gv_pS_StorySimulationMission, "Perks"));
    libVoiC_gf_PC_SaveSoAToBank(libVoiC_gv_pC_CampaignBank, libVoiC_gf_PC_BankSectionName(libVoiC_gv_pS_StorySimulationMission, "SpearofAdun"));
    libVoiC_gv_pS_StorySimulationMission = null;
    libVoiC_gf_PC_LoadMapFromBank(null, libVoiC_gv_pS_StorySimulationOriginalBank);
    libVoiC_gf_PC_SetLocationActive((libVoiC_gf_PC_LoadTransitionVarString(libVoiC_gv_pS_StorySimulationOriginalBank, libVoiC_gf_PC_BankSectionName(null, "CampaignLastInfo"), ("Location"), "")));
    libVoiC_gf_PC_LoadArmyCategoryFromBank(libVoiC_gv_pS_StorySimulationOriginalBank, libVoiC_gf_PC_BankSectionName(null, "ArmyCategory"));
    libVoiC_gf_PC_LoadArmyUnitsFromBank(libVoiC_gv_pS_StorySimulationOriginalBank, libVoiC_gf_PC_BankSectionName(null, "ArmyUnit"));
    libVoiC_gf_PC_LoadPerksFromBank(libVoiC_gv_pS_StorySimulationOriginalBank, libVoiC_gf_PC_BankSectionName(null, "Perks"));
    libVoiC_gf_PC_LoadSoAFromBank(libVoiC_gv_pS_StorySimulationOriginalBank, libVoiC_gf_PC_BankSectionName(null, "SpearofAdun"));
    libVoiC_gf_UpdateMissionFlow();
    libVoiC_gf_PC_UpdateTechStates(1);
    libVoiC_gf_PC_ApplyTech(1);
    BankRemove(libVoiC_gv_pS_StorySimulationOriginalBank);
}

bool libVoiC_gf_StoryInSimulation () {
    // Automatic Variable Declarations
    // Implementation
    return (libVoiC_gv_pS_StorySimulationMission != null);
}

string libVoiC_gf_PC_StorySimulationMission () {
    // Automatic Variable Declarations
    // Implementation
    return libVoiC_gv_pS_StorySimulationMission;
}

int libVoiC_gf_PC_StatEventLast () {
    // Automatic Variable Declarations
    // Implementation
    return libVoiC_gv_pC_StatEventLastCampaign;
}

void libVoiC_gf_PC_StatEventCreate (string lp_name) {
    // Automatic Variable Declarations
    // Implementation
    StatEventCreate(lp_name);
    TriggerDebugOutput(13, StringToText(lp_name), false);
    libVoiC_gv_pC_StatEventLastCampaign = StatEventLastCreated();
    libVoiC_gf_PC_StatEventAddInt("MapInstance", libVoiC_gv_pCX_MapInstanceID, libVoiC_gf_PC_StatEventLast());
}

void libVoiC_gf_PC_StatEventAddStr (string lp_key, string lp_value, int lp_event) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_VoiC_7C661C09", "A", StringToText(lp_key));
    TextExpressionSetToken("Param/Expression/lib_VoiC_7C661C09", "B", StringToText(lp_value));
    TriggerDebugOutput(13, TextExpressionAssemble("Param/Expression/lib_VoiC_7C661C09"), false);
    StatEventAddDataString(lp_event, lp_key, lp_value);
}

void libVoiC_gf_PC_StatEventAddInt (string lp_key, int lp_value, int lp_event) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_VoiC_BBF0E9B7", "A", StringToText(lp_key));
    TextExpressionSetToken("Param/Expression/lib_VoiC_BBF0E9B7", "B", IntToText(lp_value));
    TriggerDebugOutput(13, TextExpressionAssemble("Param/Expression/lib_VoiC_BBF0E9B7"), false);
    StatEventAddDataInt(lp_event, lp_key, lp_value);
}

void libVoiC_gf_PC_StatEventAddReal (string lp_key, fixed lp_value, int lp_event) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_VoiC_AD1ED9A3", "A", StringToText(lp_key));
    TextExpressionSetToken("Param/Expression/lib_VoiC_AD1ED9A3", "B", FixedToText(lp_value, c_fixedPrecisionAny));
    TriggerDebugOutput(13, TextExpressionAssemble("Param/Expression/lib_VoiC_AD1ED9A3"), false);
    StatEventAddDataFixed(lp_event, lp_key, lp_value);
}

void libVoiC_gf_PC_StatEventDone (int lp_statEvent) {
    // Automatic Variable Declarations
    // Implementation
    TriggerDebugOutput(13, StringToText(""), false);
    StatEventSend(lp_statEvent);
    if ((lp_statEvent == libVoiC_gv_pC_StatEventLastCampaign)) {
        libVoiC_gv_pC_StatEventLastCampaign = -1;
    }

}

void libVoiC_gf_PC_StatRecordMapStart () {
    // Automatic Variable Declarations
    // Implementation
    libVoiC_gf_PC_StatEventCreate("MapStart");
    libVoiC_gf_PC_StatEventAddStr("ID", (libVoiC_gf_CurrentMap()), libVoiC_gf_PC_StatEventLast());
    if ((libVoiC_gf_LastSuccessfulMission() == null)) {
        libVoiC_gf_PC_StatEventAddStr("LastMission", "None", libVoiC_gf_PC_StatEventLast());
    }
    else {
        libVoiC_gf_PC_StatEventAddStr("LastMission", (libVoiC_gf_LastSuccessfulMission()), libVoiC_gf_PC_StatEventLast());
    }
    libVoiC_gf_PC_StatEventAddInt("MissionCount", libVoiC_gf_NumberOfMissions(libVoiC_ge_MissionCountOptions_Completed), libVoiC_gf_PC_StatEventLast());
    libVoiC_gf_PC_StatEventAddInt("Version", libVoiC_gv_pCC_DataVersion, libVoiC_gf_PC_StatEventLast());
    libVoiC_gf_PC_StatEventDone(libVoiC_gf_PC_StatEventLast());
}

void libVoiC_gf_PC_StatRecordTargetingModeAbort () {
    // Automatic Variable Declarations
    // Implementation
    libVoiC_gv_pC_StatTargetingModeAborts += 1;
}

void libVoiC_gf_PC_StatRecordSoAEnergyCapStart () {
    // Automatic Variable Declarations
    // Implementation
    libVoiC_gv_pC_StatSoAEnergyCapped = true;
    TimerStart(libVoiC_gv_pC_StatSoATimeEnergyCapped, c_timerDurationInfinite, false, c_timeGame);
}

void libVoiC_gf_PC_StatRecordSoAEnergyCapStop () {
    // Automatic Variable Declarations
    // Implementation
    if ((libVoiC_gv_pC_StatSoAEnergyCapped == false)) {
        return ;
    }

    libVoiC_gv_pC_StatSoAEnergyCapped = false;
    libVoiC_gf_PC_StatEventCreate("SoAEnergyCapped");
    libVoiC_gf_PC_StatEventAddReal("Duration", TimerGetElapsed(libVoiC_gv_pC_StatSoATimeEnergyCapped), libVoiC_gf_PC_StatEventLast());
    libVoiC_gf_PC_StatEventDone(libVoiC_gf_PC_StatEventLast());
}

void libVoiC_gf_PC_StatRecordMiscAbilities () {
    // Automatic Variable Declarations
    // Implementation
    libVoiC_gf_PC_StatRecordMiscAbilitySingle(AbilityCommandGetAbility(AbilityCommand("Blink", 0)));
    libVoiC_gf_PC_StatRecordMiscAbilitySingle(AbilityCommandGetAbility(AbilityCommand("TimeWarp", 0)));
}

void libVoiC_gf_PC_StatRecordMiscAbilitySingle (string lp_ability) {
    // Variable Declarations
    string lv_abilityID;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_abilityID = "";

    // Implementation
    lv_abilityID = (lp_ability);
    libVoiC_gf_PC_StatEventCreate("AbilityStats");
    libVoiC_gf_PC_StatEventAddStr("AbilityID", lv_abilityID, libVoiC_gf_PC_StatEventLast());
    libVoiC_gf_PC_StatEventAddInt("TimesUsed", DataTableGetInt(true, ("AbilUsed_" + lv_abilityID)), libVoiC_gf_PC_StatEventLast());
    libVoiC_gf_PC_StatEventAddInt("DamageDone", DataTableGetInt(true, ("DmgDone_" + lv_abilityID)), libVoiC_gf_PC_StatEventLast());
    libVoiC_gf_PC_StatEventDone(libVoiC_gf_PC_StatEventLast());
}

void libVoiC_gf_PC_StatRecordMiscUnits () {
    // Automatic Variable Declarations
    // Implementation
    libVoiC_gf_PC_StatRecordMiscUnitSingle("Gateway");
    libVoiC_gf_PC_StatRecordMiscUnitSingle("Pylon");
    libVoiC_gf_PC_StatRecordMiscUnitSingle("Forge");
    libVoiC_gf_PC_StatRecordMiscUnitSingle("CyberneticsCore");
    libVoiC_gf_PC_StatRecordMiscUnitSingle("Stargate");
    libVoiC_gf_PC_StatRecordMiscUnitSingle("RoboticsFacility");
    libVoiC_gf_PC_StatRecordMiscUnitSingle("DarkShrine");
    libVoiC_gf_PC_StatRecordMiscUnitSingle("FleetBeacon");
    libVoiC_gf_PC_StatRecordMiscUnitSingle("RoboticsBay");
    libVoiC_gf_PC_StatRecordMiscUnitSingle("TemplarArchive");
}

void libVoiC_gf_PC_StatRecordMiscUnitSingle (string lp_unit) {
    // Variable Declarations
    string lv_unitID;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitID = "";

    // Implementation
    lv_unitID = (lp_unit);
    libVoiC_gf_PC_StatEventCreate("UnitStats");
    libVoiC_gf_PC_StatEventAddStr("UnitID", lv_unitID, libVoiC_gf_PC_StatEventLast());
    libVoiC_gf_PC_StatEventAddInt("UnitsMade", DataTableGetInt(true, ("UnitMade_" + lv_unitID)), libVoiC_gf_PC_StatEventLast());
    libVoiC_gf_PC_StatEventAddInt("UnitsLost", DataTableGetInt(true, ("UnitDied_" + lv_unitID)), libVoiC_gf_PC_StatEventLast());
    libVoiC_gf_PC_StatEventDone(libVoiC_gf_PC_StatEventLast());
}

void libVoiC_gf_PauseAITimeCampaign (bool lp_pauseUnpause) {
    // Automatic Variable Declarations
    // Implementation
    AITimePause(lp_pauseUnpause);
    libVoiC_gv_pC_TimeAIPaused = lp_pauseUnpause;
}

void libVoiC_gf_PC_TimeAITemporarySet (bool lp_pauseUnpause) {
    // Variable Declarations
    bool lv_originalPauseState;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_originalPauseState = true;

    // Implementation
    libVoiC_gv_pC_TimeAIOverrideCount += 1;
    lv_originalPauseState = libVoiC_gv_pC_TimeAIPaused;
    libVoiC_gf_PauseAITimeCampaign(lp_pauseUnpause);
    libVoiC_gv_pC_TimeAIPaused = lv_originalPauseState;
}

void libVoiC_gf_PC_TimeAITemporaryRestore () {
    // Automatic Variable Declarations
    // Implementation
    libVoiC_gv_pC_TimeAIOverrideCount -= 1;
    if ((libVoiC_gv_pC_TimeAIOverrideCount <= 0)) {
        libVoiC_gf_PauseAITimeCampaign(libVoiC_gv_pC_TimeAIPaused);
    }

}

void libVoiC_gf_PauseMissionTimeCampaign (bool lp_pauseUnpause) {
    // Automatic Variable Declarations
    // Implementation
    GameSetMissionTimePaused(lp_pauseUnpause);
    libVoiC_gv_pC_TimeMissionPaused = lp_pauseUnpause;
}

void libVoiC_gf_PC_TimeMissionTemporarySet (bool lp_pauseUnpause) {
    // Variable Declarations
    bool lv_originalPauseState;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_originalPauseState = true;

    // Implementation
    lv_originalPauseState = libVoiC_gv_pC_TimeMissionPaused;
    libVoiC_gf_PauseMissionTimeCampaign(lp_pauseUnpause);
    libVoiC_gv_pC_TimeMissionPaused = lv_originalPauseState;
}

void libVoiC_gf_PC_TimeMissionTemporaryRestore () {
    // Automatic Variable Declarations
    // Implementation
    libVoiC_gf_PauseMissionTimeCampaign(libVoiC_gv_pC_TimeMissionPaused);
}

void libVoiC_gf_ShowHideWorldCover (bool lp_showHide, fixed lp_transparency) {
    // Automatic Variable Declarations
    // Implementation
    if ((libVoiC_gv_pC_WorldCoverDlg == c_invalidDialogId)) {
        if ((lp_showHide == true)) {
            DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
            libVoiC_gv_pC_WorldCoverDlg = DialogLastCreated();
            DialogSetFullscreen(DialogLastCreated(), true);
            DialogSetImageVisible(DialogLastCreated(), false);
            DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
            libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
            DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\white32.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 0.00, 0.00), PlayerGroupAll());
            libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 1, PlayerGroupAll());
        }
        else {
            return ;
        }
    }

    if ((lp_showHide == true)) {
        DialogSetTransparency(libVoiC_gv_pC_WorldCoverDlg, lp_transparency);
    }

    DialogSetVisible(libVoiC_gv_pC_WorldCoverDlg, PlayerGroupAll(), lp_showHide);
}

void libVoiC_gf_CinematicFade (bool lp_fadeIn, fixed lp_duration, color lp_color, bool lp_waitUntilDone) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_waitUntilDone == true)) {
        libVoiC_gf_CinematicFade3(lp_fadeIn, lp_duration, lp_color);
    }
    else {
        libVoiC_gf_CinematicFade4(lp_fadeIn, lp_duration, lp_color);
    }
}

void libVoiC_gf_CinematicFade3 (bool lp_fadeIn, fixed lp_duration, color lp_color) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_fadeIn == true)) {
        if ((libVoiC_gv__FadeImage != c_invalidDialogControlId)) {
            libNtve_gf_SetDialogItemColor(libVoiC_gv__FadeImage, lp_color, PlayerGroupAll());
            DialogControlFadeTransparency(libVoiC_gv__FadeImage, PlayerGroupAll(), lp_duration, 100.0);
        }

    }
    else {
        libVoiC_gf__FadeCreateDialog();
        libNtve_gf_SetDialogItemColor(libVoiC_gv__FadeImage, lp_color, PlayerGroupAll());
        DialogControlFadeTransparency(libVoiC_gv__FadeImage, PlayerGroupAll(), 0.0, 100.0);
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
        DialogControlFadeTransparency(libVoiC_gv__FadeImage, PlayerGroupAll(), lp_duration, 0.0);
    }
    if ((lp_duration > 0.0)) {
        Wait(lp_duration, c_timeGame);
    }

}

trigger auto_libVoiC_gf_CinematicFade4_Trigger = null;
bool auto_libVoiC_gf_CinematicFade4_lp_fadeIn;
fixed auto_libVoiC_gf_CinematicFade4_lp_duration;
color auto_libVoiC_gf_CinematicFade4_lp_color;

void libVoiC_gf_CinematicFade4 (bool lp_fadeIn, fixed lp_duration, color lp_color) {
    auto_libVoiC_gf_CinematicFade4_lp_fadeIn = lp_fadeIn;
    auto_libVoiC_gf_CinematicFade4_lp_duration = lp_duration;
    auto_libVoiC_gf_CinematicFade4_lp_color = lp_color;

    if (auto_libVoiC_gf_CinematicFade4_Trigger == null) {
        auto_libVoiC_gf_CinematicFade4_Trigger = TriggerCreate("auto_libVoiC_gf_CinematicFade4_TriggerFunc");
    }

    TriggerExecute(auto_libVoiC_gf_CinematicFade4_Trigger, false, false);
}

bool auto_libVoiC_gf_CinematicFade4_TriggerFunc (bool testConds, bool runActions) {
    bool lp_fadeIn = auto_libVoiC_gf_CinematicFade4_lp_fadeIn;
    fixed lp_duration = auto_libVoiC_gf_CinematicFade4_lp_duration;
    color lp_color = auto_libVoiC_gf_CinematicFade4_lp_color;

    // Automatic Variable Declarations
    // Implementation
    libVoiC_gf_CinematicFade3(lp_fadeIn, lp_duration, lp_color);
    return true;
}

void libVoiC_gf__FadeCreateDialog () {
    // Automatic Variable Declarations
    // Implementation
    if ((libVoiC_gv__FadeDialog != c_invalidDialogId)) {
        DialogDestroy(libVoiC_gv__FadeDialog);
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    libVoiC_gv__FadeDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libVoiC_gv__FadeImage = DialogControlLastCreated();
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
}

actor libVoiC_gf_AttachModelToUnit (unit lp_unit, string lp_model, string lp_attachPoint) {
    // Variable Declarations
    actorscope lv_scope;
    actor lv_a;

    // Automatic Variable Declarations
    // Variable Initialization

    // Deprecated
    return libNtve_gf_AttachModelToUnitInheritVisibility(lp_unit, lp_model, lp_attachPoint);
}

void libVoiC_gf_ClearAnimationwithblendtime (string lp_identifier, unit lp_unit, fixed lp_blendTime) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_AnimClear(lp_identifier, lp_blendTime));
}

void libVoiC_gf_PC_ClearAnimationFromActor (string lp_identifier, actor lp_actor, fixed lp_blendTime) {
    // Automatic Variable Declarations
    // Implementation
    ActorSend(lp_actor, libNtve_gf_AnimClear(lp_identifier, lp_blendTime));
}

string libVoiC_gf_PC_CatalogGetFieldArrayValue (int lp_catalog, string lp_entry, string lp_field, int lp_index, int lp_player) {
    // Variable Declarations
    string lv_fieldPath;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fieldPath = "";

    // Implementation
    lv_fieldPath = (lp_field + "[" + IntToString((lp_index - 1)) + "]");
    return CatalogFieldValueGet(lp_catalog, lp_entry, lv_fieldPath, lp_player);
}

string libVoiC_gf_PC_GetDataIDFromUIID (int lp_type, int lp_uIItemID) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = libVoiC_gf_PC_StoryDataTableName(lp_type, ("U" + IntToString(lp_uIItemID)));
    return DataTableGetString(true, lv_name);
}

int libVoiC_gf_PC_GetUIIDFromDataID (int lp_type, string lp_dataID) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = libVoiC_gf_PC_StoryDataTableName(lp_type, ("D" + lp_dataID));
    return DataTableGetInt(true, lv_name);
}

void libVoiC_gf_PC_StoreDataUIIDIntoDataTable (int lp_type, string lp_dataID, int lp_uIItemID) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = libVoiC_gf_PC_StoryDataTableName(lp_type, ("D" + lp_dataID));
    DataTableSetInt(true, lv_name, lp_uIItemID);
    lv_name = libVoiC_gf_PC_StoryDataTableName(lp_type, ("U" + IntToString(lp_uIItemID)));
    DataTableSetString(true, lv_name, lp_dataID);
}

string libVoiC_gf_PC_StoryDataTableName (int lp_type, string lp_name) {
    // Automatic Variable Declarations
    // Implementation
    return ("SS_" + IntToString((lp_type)) + libVoiC_gv_pC_GameUIDataTableConnector + lp_name);
}

string libVoiC_gf_PC_ClickableConversationLink (string lp_characterInstance) {
    // Automatic Variable Declarations
    string auto14CACF2E_val;

    // Implementation
    auto14CACF2E_val = lp_characterInstance;
    if (auto14CACF2E_val == "Kerrigan") {
        return "char_Kerrigan";
    }
    else if (auto14CACF2E_val == "Artanis") {
        return "char_Artanis";
    }
    else if (auto14CACF2E_val == "DTLeader") {
        return "char_DTLeader";
    }
    else if (auto14CACF2E_val == "Preserver") {
        return "char_Preserver";
    }
    else if (auto14CACF2E_val == "ProtossAI") {
        return "char_ProtossAI";
    }
    else if (auto14CACF2E_val == "Smith") {
        return "char_Smith";
    }
    else if (auto14CACF2E_val == "TaldarimHero") {
        return "char_TaldarimHero";
    }
    else if (auto14CACF2E_val == "Zeratul") {
        return "char_Zeratul";
    }
    else if (auto14CACF2E_val == "Selendis") {
        return "char_SelendisVoid";
    }
    else if (auto14CACF2E_val == "Raynor") {
        return "char_Raynor";
    }
    else {
    }
    return "char_TerranAdjutant";
}

text libVoiC_gf_FormatTimeCampaign (int lp_second) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_second < 3600)) {
        return TextTimeFormat(StringExternal("Param/Value/lib_VoiC_A4F1A203"), lp_second);
    }
    else {
        return TextTimeFormat(StringExternal("Param/Value/lib_VoiC_4E67BE7A"), lp_second);
    }
}

string libVoiC_gf_PC_ChampResAbility (string lp_champion) {
    // Variable Declarations
    string lv_indexChampion;

    // Automatic Variable Declarations
    string auto1EC13B9D_val;

    // Variable Initialization

    // Implementation
    auto1EC13B9D_val = lp_champion;
    if (auto1EC13B9D_val == "Alarak") {
        return "Abil/ChampionWarpTrain4";
    }
    else if (auto1EC13B9D_val == "Mohandar") {
        return "Abil/ChampionWarpTrain2";
    }
    else if (auto1EC13B9D_val == "Fenix") {
        return "Abil/ChampionWarpTrain1";
    }
    else if (auto1EC13B9D_val == "Karax") {
        return "Abil/ChampionWarpTrain6";
    }
    else if (auto1EC13B9D_val == "Artanis") {
        return "Abil/ChampionWarpTrain7";
    }
    else if (auto1EC13B9D_val == "Mohandar") {
        return "Abil/ChampionWarpTrain8";
    }
    else {
    }
    return "";
}

void libVoiC_gf_SetAllSoundChannelVolumesCampaign (int lp_mode) {
    // Automatic Variable Declarations
    int auto2970F052_val;

    // Implementation
    auto2970F052_val = lp_mode;
    if (auto2970F052_val == libVoiC_ge_VolumeChannelModeCampaign_Cinematic) {
        libLbty_gf_SetAllSoundChannelVolumesStandardTiming(libNtve_ge_VolumeChannelMode_Cinematic, PlayerGroupAll());
    }
    else if (auto2970F052_val == libVoiC_ge_VolumeChannelModeCampaign_Game) {
        libVoiC_gv_pC_VolumeChannelModeInSpeech = false;
        if ((libVoiC_gv_pC_VolumeChannelModeInLowHP == true)) {
            libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_LowHealthBegin);
            return ;
        }

        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.5);
    }
    else if (auto2970F052_val == libVoiC_ge_VolumeChannelModeCampaign_Game2) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.25);
    }
    else if (auto2970F052_val == libVoiC_ge_VolumeChannelModeCampaign_Game3) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.25);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.1);
    }
    else if (auto2970F052_val == libVoiC_ge_VolumeChannelModeCampaign_LowHealthBegin) {
        libVoiC_gv_pC_VolumeChannelModeInLowHP = true;
        if ((libVoiC_gv_pC_VolumeChannelModeInSpeech == true)) {
            libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
            return ;
        }

        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 80.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 25.0, 2.0);
    }
    else if (auto2970F052_val == libVoiC_ge_VolumeChannelModeCampaign_LowHealthEnd) {
        libVoiC_gv_pC_VolumeChannelModeInLowHP = false;
        if ((libVoiC_gv_pC_VolumeChannelModeInSpeech == true)) {
            libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
            return ;
        }

        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 1.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 1.0);
    }
    else if (auto2970F052_val == libVoiC_ge_VolumeChannelModeCampaign_Speech) {
        libVoiC_gv_pC_VolumeChannelModeInSpeech = true;
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 2.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 0.5);
    }
    else if (auto2970F052_val == libVoiC_ge_VolumeChannelModeCampaign_Speech2) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 60.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 50.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto2970F052_val == libVoiC_ge_VolumeChannelModeCampaign_Speech3) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 60.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 50.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto2970F052_val == libVoiC_ge_VolumeChannelModeCampaign_SpeechAndMusicNoEffects) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 12.5, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 50.0, 0.05);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 3.125, 0.05);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 12.5, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 3.125, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto2970F052_val == libVoiC_ge_VolumeChannelModeCampaign_MissionLaunchUI) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Victory, PlayerGroupAll(), 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.5);
    }
    else if (auto2970F052_val == libVoiC_ge_VolumeChannelModeCampaign_Victory) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMessage, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpellOneshotImpact, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpellOneshotLaunch, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTest, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 1.0);
    }
    else if (auto2970F052_val == libVoiC_ge_VolumeChannelModeCampaign_VictoryInstant) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMessage, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpellOneshotImpact, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpellOneshotLaunch, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTest, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 100.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 0.0);
    }
    else {
    }
}

void libVoiC_gf_MuteUnmuteAllSoundChannelsExcept (bool lp_muteUnmute, int lp_ignoredChannel, playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    libVoiC_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryAlert, lp_ignoredChannel, lp_players);
    libVoiC_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryAmbient, lp_ignoredChannel, lp_players);
    libVoiC_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryBuild, lp_ignoredChannel, lp_players);
    libVoiC_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryCombat, lp_ignoredChannel, lp_players);
    libVoiC_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryDeath, lp_ignoredChannel, lp_players);
    libVoiC_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryDialogue, lp_ignoredChannel, lp_players);
    libVoiC_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryDoodad, lp_ignoredChannel, lp_players);
    libVoiC_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryFlames, lp_ignoredChannel, lp_players);
    libVoiC_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryFoley, lp_ignoredChannel, lp_players);
    libVoiC_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryGather, lp_ignoredChannel, lp_players);
    libVoiC_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryME, lp_ignoredChannel, lp_players);
    libVoiC_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryMission, lp_ignoredChannel, lp_players);
    libVoiC_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryMovement, lp_ignoredChannel, lp_players);
    libVoiC_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryMovie, lp_ignoredChannel, lp_players);
    libVoiC_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryMusic, lp_ignoredChannel, lp_players);
    libVoiC_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryOther, lp_ignoredChannel, lp_players);
    libVoiC_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryReady, lp_ignoredChannel, lp_players);
    libVoiC_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategorySAmbient, lp_ignoredChannel, lp_players);
    libVoiC_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategorySEmitters, lp_ignoredChannel, lp_players);
    libVoiC_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategorySPieces, lp_ignoredChannel, lp_players);
    libVoiC_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategorySpell, lp_ignoredChannel, lp_players);
    libVoiC_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryTV, lp_ignoredChannel, lp_players);
    libVoiC_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryUI, lp_ignoredChannel, lp_players);
    libVoiC_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryVoice, lp_ignoredChannel, lp_players);
}

void libVoiC_gf_PC_MuteUnmuteExclusive (bool lp_muteUnmute, int lp_muteChannel, int lp_ignoredChannel, playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_muteChannel != lp_ignoredChannel)) {
        SoundChannelMute(lp_players, lp_muteChannel, lp_muteUnmute);
    }

}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: PC_DebugCampaignTechOK
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_DebugCampaignTechOK_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexArmyUnit;
    string lv_unitUsed;
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libVoiC_gv_pC_DebugCampaignTechOK))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_PC_DebugCampaignTechUpdateData();
    libVoiC_gf_PC_ApplyTech(1);
    TriggerExecute(libVoiC_gv_pC_TechLimitsCallback, true, false);
    libVoiC_gf_PC_DebugCampaignTechCloseDialog();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_DebugCampaignTechOK_Init () {
    libVoiC_gt_PC_DebugCampaignTechOK = TriggerCreate("libVoiC_gt_PC_DebugCampaignTechOK_Func");
    TriggerEnable(libVoiC_gt_PC_DebugCampaignTechOK, false);
    TriggerAddEventDialogControl(libVoiC_gt_PC_DebugCampaignTechOK, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_DebugCampaignTechCancel
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_DebugCampaignTechCancel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libVoiC_gv_pC_DebugCampaignTechCancel))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_PC_DebugCampaignTechRestoreStates();
    libVoiC_gf_PC_DebugCampaignTechCloseDialog();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_DebugCampaignTechCancel_Init () {
    libVoiC_gt_PC_DebugCampaignTechCancel = TriggerCreate("libVoiC_gt_PC_DebugCampaignTechCancel_Func");
    TriggerEnable(libVoiC_gt_PC_DebugCampaignTechCancel, false);
    TriggerAddEventDialogControl(libVoiC_gt_PC_DebugCampaignTechCancel, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_DebugCampaignTechRandomizeClicked
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_DebugCampaignTechRandomizeClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_categoryIndex;
    int lv_perkIndex;
    string lv_currentPower;
    string lv_currentPower2;
    int lv_randomInterger;

    // Automatic Variable Declarations
    int autoC4B10C49_ae;
    const int autoC4B10C49_ai = 1;
    int auto132F6C14_ai;
    int auto132F6C14_ae;
    int auto571B5FF5_ai;
    int auto571B5FF5_ae;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libVoiC_gv_pC_DebugCampaignTechRandomizeTechButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC4B10C49_ae = libVoiC_gv_pC_DebugCampaignTechArmyCatCount;
    lv_categoryIndex = 1;
    for ( ; ( (autoC4B10C49_ai >= 0 && lv_categoryIndex <= autoC4B10C49_ae) || (autoC4B10C49_ai < 0 && lv_categoryIndex >= autoC4B10C49_ae) ) ; lv_categoryIndex += autoC4B10C49_ai ) {
        if (((libNtve_gf_DialogItemIsChecked(libVoiC_gv_pC_DebugCampaignTechArmyCategoryCheck[lv_categoryIndex], 1) == true) || (libNtve_gf_DialogItemIsChecked(libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][1], 1) == true) || (libNtve_gf_DialogItemIsChecked(libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][2], 1) == true) || (libNtve_gf_DialogItemIsChecked(libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][3], 1) == true))) {
            libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyCategoryCheck[lv_categoryIndex], false, PlayerGroupAll());
            libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][1], false, PlayerGroupAll());
            libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][2], false, PlayerGroupAll());
            libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][3], false, PlayerGroupAll());
            libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][RandomInt(1, 3)], true, PlayerGroupAll());
        }

    }
    auto132F6C14_ai = 1;
    auto132F6C14_ae = UserDataInstanceCount("CampaignPerkGroup")+1;
    while (auto132F6C14_ai < auto132F6C14_ae) {
        lv_currentPower2 = UserDataInstance("CampaignPerkGroup", auto132F6C14_ai);
        auto132F6C14_ai = auto132F6C14_ai+1;
        if ((libVoiC_gf_PC_PerkGroupUnlocked(lv_currentPower2) != true)) {
            continue;
        }

        lv_randomInterger = RandomInt(1, 3);
        lv_perkIndex = 0;
        auto571B5FF5_ai = 1;
        auto571B5FF5_ae = UserDataInstanceCount("CampaignPerk")+1;
        while (auto571B5FF5_ai < auto571B5FF5_ae) {    
            lv_currentPower = UserDataInstance("CampaignPerk", auto571B5FF5_ai);
            auto571B5FF5_ai = auto571B5FF5_ai+1;
            if( libVoiC_gf_PC_PerkGroupOfPerk(lv_currentPower) == lv_currentPower2 ) {
                lv_perkIndex += 1;
                if ((lv_perkIndex == lv_randomInterger)) {
                    libVoiC_gf_PC_PerkStateSet(lv_currentPower, libVoiC_ge_PC_PerkState_Active);
                }
                else {
                    libVoiC_gf_PC_PerkStateSet(lv_currentPower, libVoiC_ge_PC_PerkState_Unlocked);
                }
            }    
        }

    }
    libVoiC_gf_PC_ApplyPerkTech();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_DebugCampaignTechRandomizeClicked_Init () {
    libVoiC_gt_PC_DebugCampaignTechRandomizeClicked = TriggerCreate("libVoiC_gt_PC_DebugCampaignTechRandomizeClicked_Func");
    TriggerEnable(libVoiC_gt_PC_DebugCampaignTechRandomizeClicked, false);
    TriggerAddEventDialogControl(libVoiC_gt_PC_DebugCampaignTechRandomizeClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_DebugCampaignTechArmyUnitClicked
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_DebugCampaignTechArmyUnitClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_categoryIndex;
    string lv_indexCategory;
    string lv_clickedCategory;
    bool lv_enabled;

    // Automatic Variable Declarations
    int autoDBDF4CA3_ae;
    const int autoDBDF4CA3_ai = 1;

    // Variable Initialization
    lv_enabled = true;

    // Actions
    if (!runActions) {
        return true;
    }

    autoDBDF4CA3_ae = libVoiC_gv_pC_DebugCampaignTechArmyCatCount;
    lv_categoryIndex = 1;
    for ( ; ( (autoDBDF4CA3_ai >= 0 && lv_categoryIndex <= autoDBDF4CA3_ae) || (autoDBDF4CA3_ai < 0 && lv_categoryIndex >= autoDBDF4CA3_ae) ) ; lv_categoryIndex += autoDBDF4CA3_ai ) {
        lv_indexCategory = libVoiC_gv_pC_DebugCampaignTechArmyCategory[lv_categoryIndex];
        if ((EventDialogControl() == libVoiC_gv_pC_DebugCampaignTechArmyCategoryCheck[lv_categoryIndex])) {
            lv_clickedCategory = lv_indexCategory;
            if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1) == true)) {
                libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][1], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][2], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][3], false, PlayerGroupAll());
            }

            break;
        }

        if ((EventDialogControl() == libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][1])) {
            lv_clickedCategory = lv_indexCategory;
            if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1) == true)) {
                libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyCategoryCheck[lv_categoryIndex], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][2], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][3], false, PlayerGroupAll());
            }

            break;
        }

        if ((EventDialogControl() == libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][2])) {
            lv_clickedCategory = lv_indexCategory;
            if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1) == true)) {
                libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyCategoryCheck[lv_categoryIndex], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][1], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][3], false, PlayerGroupAll());
            }

            break;
        }

        if ((EventDialogControl() == libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][3])) {
            lv_clickedCategory = lv_indexCategory;
            if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1) == true)) {
                libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyCategoryCheck[lv_categoryIndex], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][1], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechArmyUnitCheck[lv_categoryIndex][2], false, PlayerGroupAll());
            }

            break;
        }

    }
    if ((lv_clickedCategory == null)) {
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_DebugCampaignTechArmyUnitClicked_Init () {
    libVoiC_gt_PC_DebugCampaignTechArmyUnitClicked = TriggerCreate("libVoiC_gt_PC_DebugCampaignTechArmyUnitClicked_Func");
    TriggerEnable(libVoiC_gt_PC_DebugCampaignTechArmyUnitClicked, false);
    TriggerAddEventDialogControl(libVoiC_gt_PC_DebugCampaignTechArmyUnitClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_DebugCampaignTechSoAButtonClicked
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_DebugCampaignTechSoAButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == libVoiC_gv_pC_DebugCampaignTechSwitchToSoa))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_PC_DebugCampaignTechCreateSoADialog();
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_DebugCampaignTechSoAButtonClicked_Init () {
    libVoiC_gt_PC_DebugCampaignTechSoAButtonClicked = TriggerCreate("libVoiC_gt_PC_DebugCampaignTechSoAButtonClicked_Func");
    TriggerEnable(libVoiC_gt_PC_DebugCampaignTechSoAButtonClicked, false);
    TriggerAddEventDialogControl(libVoiC_gt_PC_DebugCampaignTechSoAButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_DebugCampaignTechSoAOK
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_DebugCampaignTechSoAOK_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == libVoiC_gv_pC_DebugCampaignTechSoAOK))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_PC_DebugCampaignTechUpdateSoAData();
    libVoiC_gf_PC_ApplyPerkTech();
    DialogDestroy(libVoiC_gv_pC_DebugCampaignTechSoADialog);
    libVoiC_gv_pC_DebugCampaignTechSoADialog = c_invalidDialogId;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_DebugCampaignTechSoAOK_Init () {
    libVoiC_gt_PC_DebugCampaignTechSoAOK = TriggerCreate("libVoiC_gt_PC_DebugCampaignTechSoAOK_Func");
    TriggerEnable(libVoiC_gt_PC_DebugCampaignTechSoAOK, false);
    TriggerAddEventDialogControl(libVoiC_gt_PC_DebugCampaignTechSoAOK, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_DebugCampaignTechSoACancel
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_DebugCampaignTechSoACancel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == libVoiC_gv_pC_DebugCampaignTechSoACancel))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogDestroy(libVoiC_gv_pC_DebugCampaignTechSoADialog);
    libVoiC_gv_pC_DebugCampaignTechSoADialog = c_invalidDialogId;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_DebugCampaignTechSoACancel_Init () {
    libVoiC_gt_PC_DebugCampaignTechSoACancel = TriggerCreate("libVoiC_gt_PC_DebugCampaignTechSoACancel_Func");
    TriggerEnable(libVoiC_gt_PC_DebugCampaignTechSoACancel, false);
    TriggerAddEventDialogControl(libVoiC_gt_PC_DebugCampaignTechSoACancel, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_DebugCampaignTechSoAPerkClicked
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_DebugCampaignTechSoAPerkClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_categoryIndex;

    // Automatic Variable Declarations
    int auto1F7565DD_ae;
    const int auto1F7565DD_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto1F7565DD_ae = libVoiC_gv_pC_DebugCampaignTechSoATypeCount;
    lv_categoryIndex = 1;
    for ( ; ( (auto1F7565DD_ai >= 0 && lv_categoryIndex <= auto1F7565DD_ae) || (auto1F7565DD_ai < 0 && lv_categoryIndex >= auto1F7565DD_ae) ) ; lv_categoryIndex += auto1F7565DD_ai ) {
        if ((EventDialogControl() == libVoiC_gv_pC_DebugCampaignTechSoAPowerCheck[lv_categoryIndex][1])) {
            if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1) == true)) {
                libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechSoAPowerCheck[lv_categoryIndex][2], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechSoAPowerCheck[lv_categoryIndex][3], false, PlayerGroupAll());
            }

            break;
        }

        if ((EventDialogControl() == libVoiC_gv_pC_DebugCampaignTechSoAPowerCheck[lv_categoryIndex][2])) {
            if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1) == true)) {
                libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechSoAPowerCheck[lv_categoryIndex][1], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechSoAPowerCheck[lv_categoryIndex][3], false, PlayerGroupAll());
            }

            break;
        }

        if ((EventDialogControl() == libVoiC_gv_pC_DebugCampaignTechSoAPowerCheck[lv_categoryIndex][3])) {
            if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), 1) == true)) {
                libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechSoAPowerCheck[lv_categoryIndex][1], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemChecked(libVoiC_gv_pC_DebugCampaignTechSoAPowerCheck[lv_categoryIndex][2], false, PlayerGroupAll());
            }

            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_DebugCampaignTechSoAPerkClicked_Init () {
    libVoiC_gt_PC_DebugCampaignTechSoAPerkClicked = TriggerCreate("libVoiC_gt_PC_DebugCampaignTechSoAPerkClicked_Func");
    TriggerEnable(libVoiC_gt_PC_DebugCampaignTechSoAPerkClicked, false);
    TriggerAddEventDialogControl(libVoiC_gt_PC_DebugCampaignTechSoAPerkClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_DebugTech
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_DebugTech_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVoiC_gf_CurrentMap() == null)) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_PC_DebugCampaignTechDisplayDialog();
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_DebugTech_Init () {
    libVoiC_gt_PC_DebugTech = TriggerCreate("libVoiC_gt_PC_DebugTech_Func");
    TriggerAddEventChatMessage(libVoiC_gt_PC_DebugTech, c_playerAny, "tech", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_DebugProgressMissionButtonClicked
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_DebugProgressMissionButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexMission;
    string lv_clickedMission;
    int lv_bonusCount;
    string lv_indexObjective;

    // Automatic Variable Declarations
    int autoEB823222_ae;
    int autoEB823222_ai;
    int auto271DB62C_ae;
    int auto271DB62C_ai;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVoiC_gv_pC_DebugProgressDirectSelectEnabled == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_clickedMission = null;
    autoEB823222_ae = CatalogEntryCount(c_gameCatalogMap);
    autoEB823222_ai = 1;
    while (autoEB823222_ai <= autoEB823222_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoEB823222_ai);
        autoEB823222_ai = autoEB823222_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((EventDialogControl() == libNtve_gf_ValueFromDataTableDialogItem(true, libVoiC_gf_PC_DebugProgressDataTableID("Button", (lv_indexMission))))) {
                lv_clickedMission = lv_indexMission;
                break;
            }

        }    
    }
    if ((lv_clickedMission == null)) {
        return true;
    }

    if ((lv_clickedMission == "PAiur06")) {
        UIShowCustomDialog(PlayerGroupAll(), libNtve_ge_CustomDialogType_c_customDialogTypeMessage, StringExternal("Param/Value/lib_VoiC_8BDD7FCF"), null, false);
        return true;
    }

    libVoiC_gv_pC_DebugProgressDocDirty = true;
    libVoiC_gv_pC_DebugProgressLastMission = lv_clickedMission;
    auto271DB62C_ae = CatalogFieldValueCount(c_gameCatalogMap, lv_clickedMission, "ObjectiveArray", 1);
    auto271DB62C_ai = 1;
    while (auto271DB62C_ai <= auto271DB62C_ae) {
        lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, lv_clickedMission, "ObjectiveArray["+IntToString(auto271DB62C_ai-1)+"]", 1);
        auto271DB62C_ai = auto271DB62C_ai + 1;
        libVoiC_gf_PC_DebugProgressSetObjectiveProgress(lv_indexObjective);
    }
    libVoiC_gf_PC_CompleteMission(lv_clickedMission);
    libVoiC_gf_PC_DebugProgressUpdateTutorialProgress(lv_clickedMission);
    libVoiC_gf_PC_DebugProgressUpdateVariableCutsceneStates();
    libVoiC_gv_pCX_LastMap = lv_clickedMission;
    libVoiC_gv_pCX_LastMapSuccess = true;
    libVoiC_gv_pCX_LastMission = lv_clickedMission;
    libVoiC_gv_pCX_LastMissionSimulation = false;
    libVoiC_gv_pCX_LastMissionSuccess = true;
    libVoiC_gv_pCX_LastSuccessfulMission = lv_clickedMission;
    libVoiC_gf_PC_SetCurrentMap(lv_clickedMission);
    libVoiC_gf_PC_SetLocationActive(libVoiC_gf_StoryMapPlanet(lv_clickedMission));
    libVoiC_gf_DispatchCampaignEvent(libVoiC_ge_PC_Event_CampaignProgressMapCompleted, (lv_clickedMission), "", false);
    libVoiC_gf_PS_UpdatePlanetData();
    libVoiC_gf_PC_DebugProgressUpdateDialog();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_DebugProgressMissionButtonClicked_Init () {
    libVoiC_gt_PC_DebugProgressMissionButtonClicked = TriggerCreate("libVoiC_gt_PC_DebugProgressMissionButtonClicked_Func");
    TriggerEnable(libVoiC_gt_PC_DebugProgressMissionButtonClicked, false);
    TriggerAddEventDialogControl(libVoiC_gt_PC_DebugProgressMissionButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_DebugProgressDirectMissionButtonClicked
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_DebugProgressDirectMissionButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexMission;
    string lv_clickedMission;
    int lv_bonusCount;
    string lv_indexObjective;
    string[11][4] lv_arcMissions;
    int lv_currentArc;
    int lv_indexArc;
    int lv_indexArcMission;
    bool lv_foundMission;

    // Automatic Variable Declarations
    int auto5D39E77B_ae;
    int auto5D39E77B_ai;
    int autoA801895F_ae;
    int autoA801895F_ai;

    // Variable Initialization
    lv_currentArc = libVoiC_ge_PC_VoidArc_VoidArcNone;

    // Conditions
    if (testConds) {
        if (!((libVoiC_gv_pC_DebugProgressDirectSelectEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_clickedMission = null;
    auto5D39E77B_ae = CatalogEntryCount(c_gameCatalogMap);
    auto5D39E77B_ai = 1;
    while (auto5D39E77B_ai <= auto5D39E77B_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto5D39E77B_ai);
        auto5D39E77B_ai = auto5D39E77B_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((EventDialogControl() == libNtve_gf_ValueFromDataTableDialogItem(true, libVoiC_gf_PC_DebugProgressDataTableID("Button", (lv_indexMission))))) {
                lv_clickedMission = lv_indexMission;
                break;
            }

        }    
    }
    if ((lv_clickedMission == null)) {
        return true;
    }

    if ((lv_clickedMission == "PAiur06")) {
        UIShowCustomDialog(PlayerGroupAll(), libNtve_ge_CustomDialogType_c_customDialogTypeMessage, StringExternal("Param/Value/lib_VoiC_61FAE583"), null, false);
        return true;
    }

    libVoiC_gv_pC_DebugProgressDocDirty = true;
    libVoiC_gf_PC_DebugProgressCompleteToMission(lv_clickedMission);
    libVoiC_gv_pC_DebugProgressLastMission = lv_clickedMission;
    autoA801895F_ae = CatalogFieldValueCount(c_gameCatalogMap, lv_clickedMission, "ObjectiveArray", 1);
    autoA801895F_ai = 1;
    while (autoA801895F_ai <= autoA801895F_ae) {
        lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, lv_clickedMission, "ObjectiveArray["+IntToString(autoA801895F_ai-1)+"]", 1);
        autoA801895F_ai = autoA801895F_ai + 1;
        libVoiC_gf_PC_DebugProgressSetObjectiveProgress(lv_indexObjective);
    }
    libVoiC_gf_PC_CompleteMission(lv_clickedMission);
    libVoiC_gv_pCX_LastMap = lv_clickedMission;
    libVoiC_gv_pCX_LastMapSuccess = true;
    libVoiC_gv_pCX_LastMission = lv_clickedMission;
    libVoiC_gv_pCX_LastMissionSimulation = false;
    libVoiC_gv_pCX_LastMissionSuccess = true;
    libVoiC_gv_pCX_LastSuccessfulMission = lv_clickedMission;
    libVoiC_gf_PC_SetCurrentMap(lv_clickedMission);
    libVoiC_gf_PC_SetLocationActive(libVoiC_gf_StoryMapPlanet(lv_clickedMission));
    libVoiC_gf_DispatchCampaignEvent(libVoiC_ge_PC_Event_CampaignProgressMapCompleted, (lv_clickedMission), "", false);
    libVoiC_gf_PS_UpdatePlanetData();
    libVoiC_gf_PC_DebugProgressUpdateDialog();
    libVoiC_gv_pC_DebugProgressDirectSelectEnabled = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_DebugProgressDirectMissionButtonClicked_Init () {
    libVoiC_gt_PC_DebugProgressDirectMissionButtonClicked = TriggerCreate("libVoiC_gt_PC_DebugProgressDirectMissionButtonClicked_Func");
    TriggerEnable(libVoiC_gt_PC_DebugProgressDirectMissionButtonClicked, false);
    TriggerAddEventDialogControl(libVoiC_gt_PC_DebugProgressDirectMissionButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_DebugProgressDirectSelectButtonClicked
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_DebugProgressDirectSelectButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexMission;
    int lv_stateLabel;
    int lv_techLabel;
    int lv_championLabel;
    int lv_button;
    int lv_button2;
    int lv_button3;
    string lv_categoryUnlocked;
    string lv_championUnlocked;
    text lv_techText;
    int lv_indexKit;
    int lv_tooltip;
    int lv_bonus;
    text lv_rewardText;
    text lv_championText;
    text lv_levelLabel;
    string lv_indexPlanet;

    // Automatic Variable Declarations
    int autoF3F08BB7_ae;
    int autoF3F08BB7_ai;

    // Variable Initialization
    lv_stateLabel = c_invalidDialogControlId;
    lv_techLabel = c_invalidDialogControlId;
    lv_championLabel = c_invalidDialogControlId;
    lv_button = c_invalidDialogControlId;
    lv_button2 = c_invalidDialogControlId;
    lv_button3 = c_invalidDialogControlId;
    lv_tooltip = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libVoiC_gv_pC_DebugProgressButtonDirectSelect))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVoiC_gv_pC_DebugProgressDirectSelectEnabled == true)) {
        libVoiC_gv_pC_DebugProgressDirectSelectEnabled = false;
        libVoiC_gv_pC_DebugProgressDocDirty = true;
        libVoiC_gv_pC_DebugProgressResetUsed = true;
        libVoiC_gv_pC_DebugProgressLastMission = null;
        libVoiC_gv_pC_DebugProgressDirectSelectEnabled = false;
        libVoiC_gv_pC_DebugProgressObjectiveRoundUp = false;
        libVoiC_gf_ResetCampaignData();
        libVoiC_gf_UpdateMissionFlow();
        libVoiC_gf_PC_DebugProgressUpdateDialog();
    }
    else {
        libVoiC_gf_ResetCampaignData();
        libVoiC_gv_pC_DebugProgressDirectSelectEnabled = true;
        autoF3F08BB7_ae = CatalogEntryCount(c_gameCatalogMap);
        autoF3F08BB7_ai = 1;
        while (autoF3F08BB7_ai <= autoF3F08BB7_ae) {
            lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoF3F08BB7_ai);
            autoF3F08BB7_ai = autoF3F08BB7_ai + 1;
            if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
                lv_stateLabel = libNtve_gf_ValueFromDataTableDialogItem(true, libVoiC_gf_PC_DebugProgressDataTableID("StateLabel", (lv_indexMission)));
                lv_techLabel = libNtve_gf_ValueFromDataTableDialogItem(true, libVoiC_gf_PC_DebugProgressDataTableID("TechLabel", (lv_indexMission)));
                lv_championLabel = libNtve_gf_ValueFromDataTableDialogItem(true, libVoiC_gf_PC_DebugProgressDataTableID("ChampionLabel", (lv_indexMission)));
                lv_categoryUnlocked = libVoiC_gf_MissionArmyCategoryUnlocked(lv_indexMission);
                lv_championUnlocked = libVoiC_gf_PC_DebugProgressMissionSoATierUnlocked(lv_indexMission);
                if ((lv_categoryUnlocked != null)) {
                    lv_techText = libVoiC_gf_PC_ArmyCategoryName(lv_categoryUnlocked);
                }
                else {
                    lv_techText = StringToText("");
                }
                if ((lv_championUnlocked != null)) {
                    lv_championText = libVoiC_gf_PC_PerkGroupName(lv_championUnlocked);
                }
                else {
                    if ((libVoiC_gf_PC_PerkGroupUnlocked("GPType6") == false) && (libVoiC_gf_MissionUnlocksSpearofAdunTier(lv_indexMission) > 0)) {
                        lv_championText = StringExternal("Param/Value/lib_VoiC_B48635CC");
                    }
                    else {
                        lv_championText = null;
                    }
                }
                if ((libVoiC_gv_pC_DebugProgressShowRewards == true)) {
                    TextExpressionSetToken("Param/Expression/lib_VoiC_841E3BBA", "SOAMAIN", IntToText(libVoiC_gf_PC_MissionRewardsArmy(lv_indexMission)));
                    TextExpressionSetToken("Param/Expression/lib_VoiC_841E3BBA", "SOABONUS", IntToText(libVoiC_gf_PC_MissionRewardsArmy(lv_indexMission)));
                    lv_rewardText = TextExpressionAssemble("Param/Expression/lib_VoiC_841E3BBA");
                }
                else {
                    lv_rewardText = null;
                }
                lv_button = libNtve_gf_ValueFromDataTableDialogItem(true, libVoiC_gf_PC_DebugProgressDataTableID("Button", (lv_indexMission)));
                lv_button2 = libNtve_gf_ValueFromDataTableDialogItem(true, libVoiC_gf_PC_DebugProgressDataTableID("PlayButton", (lv_indexMission)));
                lv_button3 = libNtve_gf_ValueFromDataTableDialogItem(true, libVoiC_gf_PC_DebugProgressDataTableID("PlayImage", (lv_indexMission)));
                if ((lv_stateLabel != c_invalidDialogControlId)) {
                    DialogControlSetEnabled(lv_button, PlayerGroupAll(), true);
                    DialogControlSetVisible(lv_button2, PlayerGroupAll(), true);
                    DialogControlSetVisible(lv_button3, PlayerGroupAll(), true);
                    DialogControlSetEnabled(lv_stateLabel, PlayerGroupAll(), true);
                    TextExpressionSetToken("Param/Expression/lib_VoiC_BC414963", "A", IntToText(libVoiC_gf_MissionStatusAge(lv_indexMission, libVoiC_ge_MissionStatus_Available)));
                    libNtve_gf_SetDialogItemText(lv_stateLabel, TextExpressionAssemble("Param/Expression/lib_VoiC_BC414963"), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(lv_button, libVoiC_gf_PC_DebugProgressMapName(lv_indexMission), PlayerGroupAll());
                    TextExpressionSetToken("Param/Expression/lib_VoiC_CB912803", "A", lv_techText);
                    libNtve_gf_SetDialogItemText(lv_techLabel, TextExpressionAssemble("Param/Expression/lib_VoiC_CB912803"), PlayerGroupAll());
                    TextExpressionSetToken("Param/Expression/lib_VoiC_C2E1F27E", "A", lv_championText);
                    libNtve_gf_SetDialogItemText(lv_championLabel, TextExpressionAssemble("Param/Expression/lib_VoiC_C2E1F27E"), PlayerGroupAll());
                    libNtve_gf_SetDialogItemTooltip(lv_button, lv_rewardText, PlayerGroupAll());
                }

            }    
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_DebugProgressDirectSelectButtonClicked_Init () {
    libVoiC_gt_PC_DebugProgressDirectSelectButtonClicked = TriggerCreate("libVoiC_gt_PC_DebugProgressDirectSelectButtonClicked_Func");
    TriggerEnable(libVoiC_gt_PC_DebugProgressDirectSelectButtonClicked, false);
    TriggerAddEventDialogControl(libVoiC_gt_PC_DebugProgressDirectSelectButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_DebugProgressOK
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_DebugProgressOK_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libVoiC_gv_pC_DebugProgressButtonOK))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_PC_DebugProgressCloseDialog();
    if ((libVoiC_gf_CampaignDebugModeIsOn("ProgressCheat") == true) && (libVoiC_gv_pC_DebugProgressDocDirty == false)) {
        return true;
    }

    if ((libVoiC_gv_pC_DebugProgressResetUsed == true)) {
        BankDeleteCampaignBanks(1, libVoiC_gf_PC_CampaignSaveIndex());
        libVoiC_gv_pC_StoryBank = null;
        libVoiC_gv_pC_CampaignBank = null;
        libVoiC_gv_pC_ArmyTechBank = null;
    }

    if ((libVoiC_gv_pC_DebugProgressExitCallbackOK != null)) {
        TriggerExecute(libVoiC_gv_pC_DebugProgressExitCallbackOK, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_DebugProgressOK_Init () {
    libVoiC_gt_PC_DebugProgressOK = TriggerCreate("libVoiC_gt_PC_DebugProgressOK_Func");
    TriggerEnable(libVoiC_gt_PC_DebugProgressOK, false);
    TriggerAddEventDialogControl(libVoiC_gt_PC_DebugProgressOK, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_DebugProgressLaunchMission
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_DebugProgressLaunchMission_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexMission;
    string lv_clickedMission;

    // Automatic Variable Declarations
    int auto685E2F16_ae;
    int auto685E2F16_ai;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVoiC_gv_pC_DebugProgressDirectSelectEnabled == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_clickedMission = null;
    auto685E2F16_ae = CatalogEntryCount(c_gameCatalogMap);
    auto685E2F16_ai = 1;
    while (auto685E2F16_ai <= auto685E2F16_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto685E2F16_ai);
        auto685E2F16_ai = auto685E2F16_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((EventDialogControl() == libNtve_gf_ValueFromDataTableDialogItem(true, libVoiC_gf_PC_DebugProgressDataTableID("PlayButton", (lv_indexMission))))) {
                lv_clickedMission = lv_indexMission;
                break;
            }

        }    
    }
    if ((lv_clickedMission == null)) {
        return true;
    }

    libVoiC_gf_PC_DebugProgressCloseDialog();
    if ((libVoiC_gv_pC_DebugProgressResetUsed == true)) {
        BankDeleteCampaignBanks(1, libVoiC_gf_PC_CampaignSaveIndex());
        libVoiC_gv_pC_StoryBank = null;
        libVoiC_gv_pC_CampaignBank = null;
        libVoiC_gv_pC_ArmyTechBank = null;
    }

    libVoiC_gf_PC_DebugProgressSetFirstStorymodeEpisode(false);
    libVoiC_gf_PC_SetCurrentMap("PStory01");
    libVoiC_gf_PC_SetLocationActive(libVoiC_gf_StoryMapPlanet(lv_clickedMission));
    libVoiC_gf_PrepareForMission(lv_clickedMission, false, false, libVoiC_gv_pCX_CampaignDifficulty);
    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_DebugProgressLaunchMission_Init () {
    libVoiC_gt_PC_DebugProgressLaunchMission = TriggerCreate("libVoiC_gt_PC_DebugProgressLaunchMission_Func");
    TriggerEnable(libVoiC_gt_PC_DebugProgressLaunchMission, false);
    TriggerAddEventDialogControl(libVoiC_gt_PC_DebugProgressLaunchMission, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_DebugProgressDirectLaunchMission
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_DebugProgressDirectLaunchMission_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexMission;
    string lv_clickedMission;

    // Automatic Variable Declarations
    int auto56288153_ae;
    int auto56288153_ai;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVoiC_gv_pC_DebugProgressDirectSelectEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_clickedMission = null;
    auto56288153_ae = CatalogEntryCount(c_gameCatalogMap);
    auto56288153_ai = 1;
    while (auto56288153_ai <= auto56288153_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto56288153_ai);
        auto56288153_ai = auto56288153_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((EventDialogControl() == libNtve_gf_ValueFromDataTableDialogItem(true, libVoiC_gf_PC_DebugProgressDataTableID("PlayButton", (lv_indexMission))))) {
                lv_clickedMission = lv_indexMission;
                break;
            }

        }    
    }
    if ((lv_clickedMission == null)) {
        return true;
    }

    libVoiC_gf_PC_DebugProgressCloseDialog();
    if ((libVoiC_gv_pC_DebugProgressResetUsed == true)) {
        BankDeleteCampaignBanks(1, libVoiC_gf_PC_CampaignSaveIndex());
        libVoiC_gv_pC_StoryBank = null;
        libVoiC_gv_pC_CampaignBank = null;
        libVoiC_gv_pC_ArmyTechBank = null;
    }

    libVoiC_gf_PC_DebugProgressSetFirstStorymodeEpisode(false);
    libVoiC_gf_PC_DebugProgressCompleteToMission(lv_clickedMission);
    libVoiC_gf_PC_SetCurrentMap("PStory01");
    libVoiC_gf_PC_SetLocationActive(libVoiC_gf_StoryMapPlanet(lv_clickedMission));
    libVoiC_gf_PS_UpdatePlanetData();
    libVoiC_gf_PrepareForMission(lv_clickedMission, false, false, libVoiC_gv_pCX_CampaignDifficulty);
    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_DebugProgressDirectLaunchMission_Init () {
    libVoiC_gt_PC_DebugProgressDirectLaunchMission = TriggerCreate("libVoiC_gt_PC_DebugProgressDirectLaunchMission_Func");
    TriggerEnable(libVoiC_gt_PC_DebugProgressDirectLaunchMission, false);
    TriggerAddEventDialogControl(libVoiC_gt_PC_DebugProgressDirectLaunchMission, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_DebugProgressCancel
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_DebugProgressCancel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libVoiC_gv_pC_DebugProgressButtonCancel))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_PC_DebugProgressRestoreStats();
    libVoiC_gf_PC_SetCurrentMap(libVoiC_gv_pC_DebugProgressCurrentMapBak);
    libVoiC_gf_PC_DebugProgressCloseDialog();
    if ((libVoiC_gv_pC_DebugProgressExitCallbackCancel != null)) {
        TriggerExecute(libVoiC_gv_pC_DebugProgressExitCallbackCancel, true, false);
    }

    libVoiC_gf_DispatchCampaignEvent(libVoiC_ge_PC_Event_CampaignProgressCheatCancel, "", "", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_DebugProgressCancel_Init () {
    libVoiC_gt_PC_DebugProgressCancel = TriggerCreate("libVoiC_gt_PC_DebugProgressCancel_Func");
    TriggerEnable(libVoiC_gt_PC_DebugProgressCancel, false);
    TriggerAddEventDialogControl(libVoiC_gt_PC_DebugProgressCancel, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_DebugProgressReset
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_DebugProgressReset_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libVoiC_gv_pC_DebugProgressButtonReset))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gv_pC_DebugProgressDocDirty = true;
    libVoiC_gv_pC_DebugProgressResetUsed = true;
    libVoiC_gv_pC_DebugProgressLastMission = null;
    libVoiC_gv_pC_DebugProgressDirectSelectEnabled = false;
    libVoiC_gv_pC_DebugProgressObjectiveRoundUp = false;
    libVoiC_gf_ResetCampaignData();
    libVoiC_gf_UpdateMissionFlow();
    libVoiC_gf_PC_DebugProgressUpdateDialog();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_DebugProgressReset_Init () {
    libVoiC_gt_PC_DebugProgressReset = TriggerCreate("libVoiC_gt_PC_DebugProgressReset_Func");
    TriggerEnable(libVoiC_gt_PC_DebugProgressReset, false);
    TriggerAddEventDialogControl(libVoiC_gt_PC_DebugProgressReset, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_DebugProgressBonusObjectiveButtonClicked
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_DebugProgressBonusObjectiveButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto995BA578_val;

    // Conditions
    if (testConds) {
        if (!((libVoiC_gv_pC_DebugProgressRetailMode == false))) {
            return false;
        }

        if (!(((EventDialogControl() == libVoiC_gv_pC_DebugProgressButtonAllObjectives) || (EventDialogControl() == libVoiC_gv_pC_DebugProgressButtonHalfObjectives) || (EventDialogControl() == libVoiC_gv_pC_DebugProgressButtonNoObjectives)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto995BA578_val = EventDialogControl();
    if (auto995BA578_val == libVoiC_gv_pC_DebugProgressButtonNoObjectives) {
        libVoiC_gv_pC_DebugProgressBonusObjectiveLevel = libVoiC_ge_DebugProgressBonusObjectiveAmount_NoObjectives;
        libNtve_gf_SetDialogItemColor(libVoiC_gv_pC_DebugProgressButtonNoObjectives, Color(254*100/255,138*100/255,14*100/255), PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(libVoiC_gv_pC_DebugProgressButtonHalfObjectives, ColorWithAlpha(0,0,0,0), PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(libVoiC_gv_pC_DebugProgressButtonAllObjectives, ColorWithAlpha(0,0,0,0), PlayerGroupAll());
    }
    else if (auto995BA578_val == libVoiC_gv_pC_DebugProgressButtonHalfObjectives) {
        libVoiC_gv_pC_DebugProgressBonusObjectiveLevel = libVoiC_ge_DebugProgressBonusObjectiveAmount_HalfObjectives;
        libNtve_gf_SetDialogItemColor(libVoiC_gv_pC_DebugProgressButtonNoObjectives, ColorWithAlpha(0,0,0,0), PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(libVoiC_gv_pC_DebugProgressButtonHalfObjectives, Color(254*100/255,138*100/255,14*100/255), PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(libVoiC_gv_pC_DebugProgressButtonAllObjectives, ColorWithAlpha(0,0,0,0), PlayerGroupAll());
    }
    else if (auto995BA578_val == libVoiC_gv_pC_DebugProgressButtonAllObjectives) {
        libVoiC_gv_pC_DebugProgressBonusObjectiveLevel = libVoiC_ge_DebugProgressBonusObjectiveAmount_FullObjectives;
        libNtve_gf_SetDialogItemColor(libVoiC_gv_pC_DebugProgressButtonNoObjectives, ColorWithAlpha(0,0,0,0), PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(libVoiC_gv_pC_DebugProgressButtonHalfObjectives, ColorWithAlpha(0,0,0,0), PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(libVoiC_gv_pC_DebugProgressButtonAllObjectives, Color(254*100/255,138*100/255,14*100/255), PlayerGroupAll());
    }
    else {
    }
    libVoiC_gf_PC_DebugProgressAdjustBonusObjectives();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_DebugProgressBonusObjectiveButtonClicked_Init () {
    libVoiC_gt_PC_DebugProgressBonusObjectiveButtonClicked = TriggerCreate("libVoiC_gt_PC_DebugProgressBonusObjectiveButtonClicked_Func");
    TriggerEnable(libVoiC_gt_PC_DebugProgressBonusObjectiveButtonClicked, false);
    TriggerAddEventDialogControl(libVoiC_gt_PC_DebugProgressBonusObjectiveButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_DebugProgress
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_DebugProgress_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVoiC_gf_PC_CampaignInEpilogue() == true)) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gv_pC_DebugProgressResetUsed = false;
    libVoiC_gf_DispatchCampaignEvent(libVoiC_ge_PC_Event_CampaignProgressCheatStart, "", "", false);
    libVoiC_gf_PC_DebugProgressDisplayDialog(null, libVoiC_gt_PC_DebugProgressOKCallback, libVoiC_gt_PC_DebugProgressCancelCallback, false);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_DebugProgress_Init () {
    libVoiC_gt_PC_DebugProgress = TriggerCreate("libVoiC_gt_PC_DebugProgress_Func");
    TriggerAddEventCheatUsed(libVoiC_gt_PC_DebugProgress, c_playerAny, c_gameCheatProgress);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_DebugProgress Develop
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_DebugProgressDevelop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVoiC_gf_PC_CampaignInEpilogue() == true)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_VoiC_24CDEE60"), true);
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gv_pC_DebugProgressResetUsed = false;
    libVoiC_gf_DispatchCampaignEvent(libVoiC_ge_PC_Event_CampaignProgressCheatStart, "", "", false);
    libVoiC_gf_PC_DebugProgressDisplayDialog(null, libVoiC_gt_PC_DebugProgressOKCallback, libVoiC_gt_PC_DebugProgressCancelCallback, false);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_DebugProgressDevelop_Init () {
    libVoiC_gt_PC_DebugProgressDevelop = TriggerCreate("libVoiC_gt_PC_DebugProgressDevelop_Func");
    TriggerAddEventChatMessage(libVoiC_gt_PC_DebugProgressDevelop, c_playerAny, "PROGRESS", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_DebugProgressOKCallback
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_DebugProgressOKCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    if ((libVoiC_gv_pC_DebugProgressLastMission == null)) {
        libVoiC_gf_PC_SetLocationActive("AiurA");
        libVoiC_gf_PC_SetCurrentMap("PStory01");
        libVoiC_gf_PrepareForMission("PAiur01", false, false, libVoiC_gv_pCX_CampaignDifficulty);
        GameOver(1, c_gameOverVictory, false, false);
        return true;
    }

    libVoiC_gf_PC_SetCurrentMap(libVoiC_gv_pC_DebugProgressLastMission);
    libVoiC_gf_DispatchCampaignEvent(libVoiC_ge_PC_Event_CampaignMapTransition, "debug", "", true);
    libVoiC_gf_PrepareForStoryMode(c_gameOverVictory, libVoiC_gv_pCX_CampaignDifficulty);
    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_DebugProgressOKCallback_Init () {
    libVoiC_gt_PC_DebugProgressOKCallback = TriggerCreate("libVoiC_gt_PC_DebugProgressOKCallback_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_DebugProgressCancelCallback
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_DebugProgressCancelCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetWorldVisible(PlayerGroupAll(), true);
    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    UISetCursorVisible(PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_DebugProgressCancelCallback_Init () {
    libVoiC_gt_PC_DebugProgressCancelCallback = TriggerCreate("libVoiC_gt_PC_DebugProgressCancelCallback_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_DebugProgressRetailMode
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_DebugProgressRetailMode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gv_pC_DebugProgressRetailMode = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_DebugProgressRetailMode_Init () {
    libVoiC_gt_PC_DebugProgressRetailMode = TriggerCreate("libVoiC_gt_PC_DebugProgressRetailMode_Func");
    TriggerAddEventChatMessage(libVoiC_gt_PC_DebugProgressRetailMode, c_playerAny, "retailprogress", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_DebugCutscenePlay
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_DebugCutscenePlay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_file;
    point lv_position;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_position = Point(64.0, 64.0);

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVoiC_gv_pC_DebugCutsceneCin == true)) {
        libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.0);
    }

    lv_file = ("Cutscenes/" + StringWord(EventChatMessage(false), 2) + ".SC2Cutscene");
    if ((StringWord(EventChatMessage(false), 3) != null) && (StringWord(EventChatMessage(false), 4) != null)) {
        lv_position = Point(StringToFixed(StringWord(EventChatMessage(false), 3)), StringToFixed(StringWord(EventChatMessage(false), 4)));
    }

    CutsceneCreateNew(lv_file, lv_position, 0.0, PlayerGroupAll(), true);
    libVoiC_gv_pC_DebugCutsceneCount = (ModI(libVoiC_gv_pC_DebugCutsceneCount, 5) + 1);
    libVoiC_gv_pC_DebugActiveCutscene = libVoiC_gv_pC_DebugCutsceneCount;
    if ((libVoiC_gv_pC_DebugCutscenes[libVoiC_gv_pC_DebugCutsceneCount] != c_cutsceneNone)) {
        CutsceneStop(libVoiC_gv_pC_DebugCutscenes[libVoiC_gv_pC_DebugCutsceneCount]);
    }

    libVoiC_gv_pC_DebugCutscenes[libVoiC_gv_pC_DebugCutsceneCount] = CutsceneLastCreated();
    libVoiC_gv_pC_DebugScenePaused[libVoiC_gv_pC_DebugActiveCutscene] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_DebugCutscenePlay_Init () {
    libVoiC_gt_PC_DebugCutscenePlay = TriggerCreate("libVoiC_gt_PC_DebugCutscenePlay_Func");
    TriggerAddEventChatMessage(libVoiC_gt_PC_DebugCutscenePlay, c_playerAny, "csplay", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_DebugCutsceneStop
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_DebugCutsceneStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CutsceneStop(libVoiC_gv_pC_DebugCutscenes[libVoiC_gv_pC_DebugActiveCutscene]);
    if ((libVoiC_gv_pC_DebugCutsceneCin == true)) {
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    }

    libVoiC_gv_pC_DebugCutsceneNames[libVoiC_gv_pC_DebugActiveCutscene] = "";
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_DebugCutsceneStop_Init () {
    libVoiC_gt_PC_DebugCutsceneStop = TriggerCreate("libVoiC_gt_PC_DebugCutsceneStop_Func");
    TriggerAddEventChatMessage(libVoiC_gt_PC_DebugCutsceneStop, c_playerAny, "csstop", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_DebugCutscenePause
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_DebugCutscenePause_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVoiC_gv_pC_DebugScenePaused[libVoiC_gv_pC_DebugActiveCutscene] == false)) {
        CutscenePause(libVoiC_gv_pC_DebugCutscenes[libVoiC_gv_pC_DebugActiveCutscene]);
        libVoiC_gv_pC_DebugScenePaused[libVoiC_gv_pC_DebugActiveCutscene] = true;
    }
    else {
        CutscenePlay(libVoiC_gv_pC_DebugCutscenes[libVoiC_gv_pC_DebugActiveCutscene]);
        libVoiC_gv_pC_DebugScenePaused[libVoiC_gv_pC_DebugActiveCutscene] = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_DebugCutscenePause_Init () {
    libVoiC_gt_PC_DebugCutscenePause = TriggerCreate("libVoiC_gt_PC_DebugCutscenePause_Func");
    TriggerAddEventChatMessage(libVoiC_gt_PC_DebugCutscenePause, c_playerAny, "cspause", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_DebugCutsceneSelect
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_DebugCutsceneSelect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    string lv_name;

    // Automatic Variable Declarations
    const int auto4E75AD38_ae = 5;
    const int auto4E75AD38_ai = 1;

    // Variable Initialization
    lv_name = StringWord(EventChatMessage(false), 2);

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 1;
    for ( ; ( (auto4E75AD38_ai >= 0 && lv_index <= auto4E75AD38_ae) || (auto4E75AD38_ai < 0 && lv_index >= auto4E75AD38_ae) ) ; lv_index += auto4E75AD38_ai ) {
        if ((libVoiC_gv_pC_DebugCutsceneNames[lv_index] == lv_name)) {
            libVoiC_gv_pC_DebugActiveCutscene = lv_index;
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_DebugCutsceneSelect_Init () {
    libVoiC_gt_PC_DebugCutsceneSelect = TriggerCreate("libVoiC_gt_PC_DebugCutsceneSelect_Func");
    TriggerAddEventChatMessage(libVoiC_gt_PC_DebugCutsceneSelect, c_playerAny, "csuse", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_DebugCutsceneSeek
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_DebugCutsceneSeek_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_time;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_time = FixedToInt((StringToFixed(StringWord(EventChatMessage(false), 2)) * 1000.0));

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CutsceneSetTime(libVoiC_gv_pC_DebugCutscenes[libVoiC_gv_pC_DebugActiveCutscene], lv_time);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_DebugCutsceneSeek_Init () {
    libVoiC_gt_PC_DebugCutsceneSeek = TriggerCreate("libVoiC_gt_PC_DebugCutsceneSeek_Func");
    TriggerAddEventChatMessage(libVoiC_gt_PC_DebugCutsceneSeek, c_playerAny, "csseek", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_DebugCutsceneCinematicMode
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_DebugCutsceneCinematicMode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gv_pC_DebugCutsceneCin = !(libVoiC_gv_pC_DebugCutsceneCin);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_DebugCutsceneCinematicMode_Init () {
    libVoiC_gt_PC_DebugCutsceneCinematicMode = TriggerCreate("libVoiC_gt_PC_DebugCutsceneCinematicMode_Func");
    TriggerAddEventChatMessage(libVoiC_gt_PC_DebugCutsceneCinematicMode, c_playerAny, "csmode", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_DebugCutsceneGoToBookmark
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_DebugCutsceneGoToBookmark_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_bookmark;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bookmark = StringSub(EventChatMessage(false), 8, StringLength(EventChatMessage(false)));

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CutsceneGoToBookmark(libVoiC_gv_pC_DebugCutscenes[libVoiC_gv_pC_DebugActiveCutscene], lv_bookmark);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_DebugCutsceneGoToBookmark_Init () {
    libVoiC_gt_PC_DebugCutsceneGoToBookmark = TriggerCreate("libVoiC_gt_PC_DebugCutsceneGoToBookmark_Func");
    TriggerAddEventChatMessage(libVoiC_gt_PC_DebugCutsceneGoToBookmark, c_playerAny, "csgoto", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_AchievementShieldAbsorb
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_AchievementShieldAbsorb_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gv_pC_AchievementShieldAbsorbTotal += EventUnitDamageAbsorbed();
    if (((FixedToInt(libVoiC_gv_pC_AchievementShieldAbsorbTotal) - FixedToInt(libVoiC_gv_pC_AchievementShieldAbsorbLast)) > 5)) {
        AchievementTermQuantityAdd(1, "SOA_ShieldOvercharge", (FixedToInt(libVoiC_gv_pC_AchievementShieldAbsorbTotal) - FixedToInt(libVoiC_gv_pC_AchievementShieldAbsorbLast)));
        libVoiC_gv_pC_AchievementShieldAbsorbLast = libVoiC_gv_pC_AchievementShieldAbsorbTotal;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_AchievementShieldAbsorb_Init () {
    libVoiC_gt_PC_AchievementShieldAbsorb = TriggerCreate("libVoiC_gt_PC_AchievementShieldAbsorb_Func");
    TriggerAddEventUnitDamageAbsorbed(libVoiC_gt_PC_AchievementShieldAbsorb, null, "SOASuperShield");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_FootageRecording
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_ZS_FootageRecording_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVoiC_gv_zS_FootageRecordingCallback != null)) {
        libVoiC_gf_ZS_FootageRecording();
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/lib_VoiC_1AEBEC50"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_ZS_FootageRecording_Init () {
    libVoiC_gt_ZS_FootageRecording = TriggerCreate("libVoiC_gt_ZS_FootageRecording_Func");
    TriggerAddEventChatMessage(libVoiC_gt_ZS_FootageRecording, 1, "INTRO", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_DisplayTimestamp
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_DisplayTimestamp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_timestamp;
    text lv_title;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_timestamp = UserDataGetText("Timestamps", libVoiC_gv_pC_CutsceneTimestamp, "Description", 1);
    lv_title = UserDataGetText("Timestamps", libVoiC_gv_pC_CutsceneTimestamp, "Title", 1);
    Wait(UserDataGetFixed("Timestamps", libVoiC_gv_pC_CutsceneTimestamp, "StartDelay", 1), c_timeReal);
    UIShowTextCrawl(PlayerGroupAll(), lv_title, lv_timestamp, UserDataGetFixed("Timestamps", libVoiC_gv_pC_CutsceneTimestamp, "FlashDuration", 1), SoundLink("Silent", -1), SoundLink("UI_Void_TextCallout", -1));
    Wait(UserDataGetFixed("Timestamps", libVoiC_gv_pC_CutsceneTimestamp, "WaitDuration", 1), c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_DisplayTimestamp_Init () {
    libVoiC_gt_PC_DisplayTimestamp = TriggerCreate("libVoiC_gt_PC_DisplayTimestamp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_DisplayTimestampSkippable
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_DisplayTimestampSkippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_timestamp;
    text lv_title;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_timestamp = UserDataGetText("Timestamps", libVoiC_gv_pC_CutsceneTimestamp, "Description", 1);
    lv_title = UserDataGetText("Timestamps", libVoiC_gv_pC_CutsceneTimestamp, "Title", 1);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    Wait(UserDataGetFixed("Timestamps", libVoiC_gv_pC_CutsceneTimestamp, "StartDelay", 1), c_timeReal);
    UIShowTextCrawl(PlayerGroupAll(), lv_title, lv_timestamp, UserDataGetFixed("Timestamps", libVoiC_gv_pC_CutsceneTimestamp, "FlashDuration", 1), SoundLink("Silent", -1), SoundLink("TextCrawlType", -1));
    Wait(UserDataGetFixed("Timestamps", libVoiC_gv_pC_CutsceneTimestamp, "WaitDuration", 1), c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_DisplayTimestampSkippable_Init () {
    libVoiC_gt_PC_DisplayTimestampSkippable = TriggerCreate("libVoiC_gt_PC_DisplayTimestampSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_WaitForDialogCutscene
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_WaitForDialogCutscene_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVoiC_gv_pC_CampaignCutsceneSkippable == true)) {
        TriggerSkippableBegin(PlayerGroupAll(), 0, libVoiC_gt_PC_CampaignCutsceneEnded, false, false);
    }

    WaitForCutsceneToEnd(libVoiC_gv_pC_CurrentCampaignCutscene);
    libVoiC_gf_PC_StatEventAddInt("Completed", 1, libVoiC_gv_pC_SceneStatEvent);
    DialogDestroy(libVoiC_gv_pC_CampaignCutsceneDialog);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_WaitForDialogCutscene_Init () {
    libVoiC_gt_PC_WaitForDialogCutscene = TriggerCreate("libVoiC_gt_PC_WaitForDialogCutscene_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_WaitForCutscene
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_WaitForCutscene_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVoiC_gv_pC_CampaignCutsceneSkippable == true)) {
        TriggerSkippableBegin(PlayerGroupAll(), 0, libVoiC_gt_PC_CampaignCutsceneEnded, false, false);
    }

    WaitForCutsceneToEnd(libVoiC_gv_pC_CurrentCampaignCutscene);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_WaitForCutscene_Init () {
    libVoiC_gt_PC_WaitForCutscene = TriggerCreate("libVoiC_gt_PC_WaitForCutscene_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_CampaignCutsceneEnded
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_CampaignCutsceneEnded_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libVoiC_gt_PC_CampaignCutsceneEnded, false);
    libVoiC_gf_PC_StatEventAddInt("Completed", 0, libVoiC_gv_pC_SceneStatEvent);
    CutsceneStop(libVoiC_gv_pC_CurrentCampaignCutscene);
    DialogDestroy(libVoiC_gv_pC_CampaignCutsceneDialog);
    TriggerStop(libVoiC_gt_PC_WaitForCutscene);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_CampaignCutsceneEnded_Init () {
    libVoiC_gt_PC_CampaignCutsceneEnded = TriggerCreate("libVoiC_gt_PC_CampaignCutsceneEnded_Func");
    TriggerEnable(libVoiC_gt_PC_CampaignCutsceneEnded, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_PlaySceneSkippable
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_PlaySceneSkippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    transmissionsource lv_movieSource;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_movieSource = TransmissionSource();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVoiC_gf_PC_SceneMovie(libVoiC_gv_pC_PlaySceneCurrentScene) != null)) {
        lv_movieSource = TransmissionSourceFromMovie(libVoiC_gf_PC_SceneMovie(libVoiC_gv_pC_PlaySceneCurrentScene), true);
        TriggerExecute(libVoiC_gt_PC_CinematicDetectSkipping, true, false);
        TransmissionSourceSetStreamingAllowed(lv_movieSource, true);
        TransmissionSourceSetPauseAllowed(lv_movieSource, true);
        TransmissionSend(PlayerGroupAll(), lv_movieSource, libNtve_gf_FullscreenPortrait(), "", null, null, null, 0.0, c_transmissionDurationAdd, true);
        TriggerStop(libVoiC_gt_PC_CinematicDetectSkipping);
        TriggerStop(libVoiC_gt_PC_SceneSkipped);
        libVoiC_gf_PC_StatEventAddInt("Completed", 1, libVoiC_gv_pC_SceneStatEvent);
    }
    else {
        TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
        while (true) {
            Wait(5.0, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_PlaySceneSkippable_Init () {
    libVoiC_gt_PC_PlaySceneSkippable = TriggerCreate("libVoiC_gt_PC_PlaySceneSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_CinematicDetectSkipping
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_CinematicDetectSkipping_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, libVoiC_gt_PC_SceneSkipped, true, false);
    while (true) {
        Wait(5.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_CinematicDetectSkipping_Init () {
    libVoiC_gt_PC_CinematicDetectSkipping = TriggerCreate("libVoiC_gt_PC_CinematicDetectSkipping_Func");
    TriggerEnable(libVoiC_gt_PC_CinematicDetectSkipping, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_SceneSkipped
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_SceneSkipped_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_PC_FadeAllSoundsExceptMusic(0.8, false);
    libVoiC_gf_CinematicFade(false, 1.0, Color(0.00, 0.00, 0.00), true);
    libVoiC_gf_PC_StatEventAddInt("Completed", 0, libVoiC_gv_pC_SceneStatEvent);
    TriggerStop(libVoiC_gt_PC_PlaySceneSkippable);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_SceneSkipped_Init () {
    libVoiC_gt_PC_SceneSkipped = TriggerCreate("libVoiC_gt_PC_SceneSkipped_Func");
    TriggerEnable(libVoiC_gt_PC_SceneSkipped, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_TrackLoadingComplete
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_TrackLoadingComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.1, c_timeGame);
    libVoiC_gv_pC_LoadingComplete = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_TrackLoadingComplete_Init () {
    libVoiC_gt_PC_TrackLoadingComplete = TriggerCreate("libVoiC_gt_PC_TrackLoadingComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_ArchivesBankLoadSyncComplete
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_ArchivesBankLoadSyncComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    BankWait(libVoiC_gv_pC_ArchivesBank);
    libVoiC_gv_pC_ArchivesReloading = false;
    libVoiC_gf_PC_ArchiveBankLoad();
    libVoiC_gf_DispatchCampaignEvent(libVoiC_ge_PC_Event_CampaignArchivesSynced, "", "", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_ArchivesBankLoadSyncComplete_Init () {
    libVoiC_gt_PC_ArchivesBankLoadSyncComplete = TriggerCreate("libVoiC_gt_PC_ArchivesBankLoadSyncComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_ArchivesBankSaveSyncComplete
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_ArchivesBankSaveSyncComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    BankWait(libVoiC_gv_pC_ArchivesBank);
    libVoiC_gv_pC_ArchivesReloading = false;
    libVoiC_gf_PC_ArchiveBankSave();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_ArchivesBankSaveSyncComplete_Init () {
    libVoiC_gt_PC_ArchivesBankSaveSyncComplete = TriggerCreate("libVoiC_gt_PC_ArchivesBankSaveSyncComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_ArchivesHandleMissionLoad
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_ArchivesHandleMissionLoad_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVoiC_gf_PC_CampaignMapTypeCheck(libVoiC_gf_CurrentMap(), c_mapKindStory) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gv_pC_InLoadedMission = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_ArchivesHandleMissionLoad_Init () {
    libVoiC_gt_PC_ArchivesHandleMissionLoad = TriggerCreate("libVoiC_gt_PC_ArchivesHandleMissionLoad_Func");
    TriggerAddEventLoadGameDone(libVoiC_gt_PC_ArchivesHandleMissionLoad);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_StatUnitCreated
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_StatUnitCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_iD;
    string lv_indexCategory;
    string lv_indexArmyUnit;
    int lv_previousValue;
    fixed lv_mineralValue;
    fixed lv_vespeneValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_iD = "";

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnitCreatedUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCreatedUnit()) != "Larva"))) {
            return false;
        }

        if (!(((EventUnitCreatedAbil() != null) || (EventUnitCreatedBehavior() != null)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_iD = libVoiC_gf_PC_ArmyStringFromUnitType(UnitGetType(EventUnitCreatedUnit()));
    if ((lv_iD == null)) {
        if ((UnitFilterMatch(EventUnitCreatedUnit(), 1, UnitFilter((1 << c_targetFilterStructure), 0, 0, 0)) == true)) {
            lv_iD = (UnitGetType(EventUnitCreatedUnit()));
        }
        else {
            return true;
        }
    }

    lv_previousValue = DataTableGetInt(true, ("UnitMade_" + lv_iD));
    lv_previousValue += 1;
    DataTableSetInt(true, ("UnitMade_" + lv_iD), lv_previousValue);
    lv_previousValue = DataTableGetInt(true, ("MinSpent_" + lv_iD));
    DataTableSetInt(true, ("MinSpent_" + lv_iD), (lv_previousValue+UnitTypeGetCost(UnitGetType(EventUnitCreatedUnit()), c_unitCostMinerals)));
    lv_previousValue = DataTableGetInt(true, ("VesSpent_" + lv_iD));
    DataTableSetInt(true, ("VesSpent_" + lv_iD), (lv_previousValue+UnitTypeGetCost(UnitGetType(EventUnitCreatedUnit()), c_unitCostVespene)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_StatUnitCreated_Init () {
    libVoiC_gt_PC_StatUnitCreated = TriggerCreate("libVoiC_gt_PC_StatUnitCreated_Func");
    TriggerAddEventUnitCreated(libVoiC_gt_PC_StatUnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_StatDamageTaken
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_StatDamageTaken_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_triggeringArmyString;
    int lv_previousValue;
    fixed lv_mineralValue;
    fixed lv_vespeneValue;
    string lv_indexPerk;

    // Automatic Variable Declarations
    int auto150101B6_ai;
    int auto150101B6_ae;

    // Variable Initialization
    lv_triggeringArmyString = "";

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayer() == 1)) {
        lv_triggeringArmyString = libVoiC_gf_PC_ArmyStringFromUnitType(UnitGetType(EventUnit()));
        if ((lv_triggeringArmyString != null)) {
            lv_previousValue = DataTableGetInt(true, ("DmgTaken_" + lv_triggeringArmyString));
            DataTableSetInt(true, ("DmgTaken_" + lv_triggeringArmyString), (lv_previousValue+FixedToInt(EventUnitDamageAmount())));
            return true;
        }

    }
    else if ((EventUnitDamageSourcePlayer() == 1)) {
        lv_triggeringArmyString = libVoiC_gf_PC_ArmyStringFromUnitType(UnitGetType(EventUnitDamageSourceUnit()));
        if ((lv_triggeringArmyString != null)) {
            lv_previousValue = DataTableGetInt(true, ("DmgDone_" + lv_triggeringArmyString));
            DataTableSetInt(true, ("DmgDone_" + lv_triggeringArmyString), (lv_previousValue+FixedToInt(EventUnitDamageAmount())));
            lv_mineralValue = (EventUnitDamageAmount()*UnitTypeGetCost(UnitGetType(EventUnit()), c_unitCostMinerals)/UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent));
            lv_previousValue = DataTableGetInt(true, ("MinDone_" + lv_triggeringArmyString));
            DataTableSetInt(true, ("MinDone_" + lv_triggeringArmyString), (lv_previousValue+FixedToInt(lv_mineralValue)));
            lv_vespeneValue = (EventUnitDamageAmount()*UnitTypeGetCost(UnitGetType(EventUnit()), c_unitCostVespene)/UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent));
            lv_previousValue = DataTableGetInt(true, ("VesDone_" + lv_triggeringArmyString));
            DataTableSetInt(true, ("VesDone_" + lv_triggeringArmyString), (lv_previousValue+FixedToInt(lv_vespeneValue)));
            return true;
        }

        if ((EventUnitDamageEffect() != null)) {
            auto150101B6_ai = 1;
            auto150101B6_ae = UserDataInstanceCount("CampaignPerk")+1;
            while (auto150101B6_ai < auto150101B6_ae) {
                lv_indexPerk = UserDataInstance("CampaignPerk", auto150101B6_ai);
                auto150101B6_ai = auto150101B6_ai+1;
                if ((UserDataGetGameLink("CampaignPerk", lv_indexPerk, "Effect", 1) == EventUnitDamageEffect())) {
                    lv_previousValue = DataTableGetInt(true, ("DmgDone_" + (lv_indexPerk)));
                    DataTableSetInt(true, ("DmgDone_" + (lv_indexPerk)), (lv_previousValue+FixedToInt(EventUnitDamageAmount())));
                    return true;
                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_StatDamageTaken_Init () {
    libVoiC_gt_PC_StatDamageTaken = TriggerCreate("libVoiC_gt_PC_StatDamageTaken_Func");
    TriggerAddEventUnitDamaged(libVoiC_gt_PC_StatDamageTaken, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_StatDamageHealed
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_StatDamageHealed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexArmyUnit;
    int lv_previousValue;
    string lv_iD;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_iD = "";

    // Conditions
    if (testConds) {
        if (!((EventUnitHealLaunchPlayer() == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_iD = ("UnitHeal_" + libVoiC_gf_PC_ArmyStringFromUnitType(UnitGetType(EventUnitHealLaunchUnit())));
    if ((lv_iD != null)) {
        lv_previousValue = DataTableGetInt(true, lv_iD);
        DataTableSetInt(true, lv_iD, (lv_previousValue+FixedToInt(EventUnitHealAmount())));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_StatDamageHealed_Init () {
    libVoiC_gt_PC_StatDamageHealed = TriggerCreate("libVoiC_gt_PC_StatDamageHealed_Func");
    TriggerAddEventUnitHealed(libVoiC_gt_PC_StatDamageHealed, null, c_unitVitalAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_StatUnitDies
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_StatUnitDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_triggeringArmyString;
    int lv_previousValue;
    fixed lv_mineralValue;
    fixed lv_vespeneValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggeringArmyString = "";

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == 1)) {
        lv_triggeringArmyString = libVoiC_gf_PC_ArmyStringFromUnitType(UnitGetType(EventUnit()));
        if ((lv_triggeringArmyString == null) && (UnitFilterMatch(EventUnit(), 1, UnitFilter((1 << c_targetFilterStructure), 0, 0, 0)) == true)) {
            lv_triggeringArmyString = (UnitGetType(EventUnit()));
        }
        else {
            return true;
        }
        if ((lv_triggeringArmyString != null)) {
            lv_previousValue = DataTableGetInt(true, ("UnitDied_" + lv_triggeringArmyString));
            DataTableSetInt(true, ("UnitDied_" + lv_triggeringArmyString), (lv_previousValue+1));
            lv_previousValue = DataTableGetInt(true, ("MinLost_" + lv_triggeringArmyString));
            DataTableSetInt(true, ("MinLost_" + lv_triggeringArmyString), (lv_previousValue+UnitTypeGetCost(UnitGetType(EventUnit()), c_unitCostMinerals)));
            lv_previousValue = DataTableGetInt(true, ("VesLost_" + lv_triggeringArmyString));
            DataTableSetInt(true, ("VesLost_" + lv_triggeringArmyString), (lv_previousValue+UnitTypeGetCost(UnitGetType(EventUnit()), c_unitCostVespene)));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_StatUnitDies_Init () {
    libVoiC_gt_PC_StatUnitDies = TriggerCreate("libVoiC_gt_PC_StatUnitDies_Func");
    TriggerAddEventUnitDied(libVoiC_gt_PC_StatUnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PC_StatAbilityUsed
//--------------------------------------------------------------------------------------------------
bool libVoiC_gt_PC_StatAbilityUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((EventUnitAbility() == AbilityCommand("Blink", 0)) || (EventUnitAbility() == AbilityCommand("TimeWarp", 0)))) {
        DataTableSetInt(true, ("AbilUsed_" + (AbilityCommandGetAbility(EventUnitAbility()))), (DataTableGetInt(true, ("AbilUsed_" + (AbilityCommandGetAbility(EventUnitAbility()))))+1));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libVoiC_gt_PC_StatAbilityUsed_Init () {
    libVoiC_gt_PC_StatAbilityUsed = TriggerCreate("libVoiC_gt_PC_StatAbilityUsed_Func");
    TriggerAddEventUnitAbility(libVoiC_gt_PC_StatAbilityUsed, null, null, c_unitAbilStageComplete, false);
}

void libVoiC_InitTriggers () {
    libVoiC_gt_PC_DebugCampaignTechOK_Init();
    libVoiC_gt_PC_DebugCampaignTechCancel_Init();
    libVoiC_gt_PC_DebugCampaignTechRandomizeClicked_Init();
    libVoiC_gt_PC_DebugCampaignTechArmyUnitClicked_Init();
    libVoiC_gt_PC_DebugCampaignTechSoAButtonClicked_Init();
    libVoiC_gt_PC_DebugCampaignTechSoAOK_Init();
    libVoiC_gt_PC_DebugCampaignTechSoACancel_Init();
    libVoiC_gt_PC_DebugCampaignTechSoAPerkClicked_Init();
    libVoiC_gt_PC_DebugTech_Init();
    libVoiC_gt_PC_DebugProgressMissionButtonClicked_Init();
    libVoiC_gt_PC_DebugProgressDirectMissionButtonClicked_Init();
    libVoiC_gt_PC_DebugProgressDirectSelectButtonClicked_Init();
    libVoiC_gt_PC_DebugProgressOK_Init();
    libVoiC_gt_PC_DebugProgressLaunchMission_Init();
    libVoiC_gt_PC_DebugProgressDirectLaunchMission_Init();
    libVoiC_gt_PC_DebugProgressCancel_Init();
    libVoiC_gt_PC_DebugProgressReset_Init();
    libVoiC_gt_PC_DebugProgressBonusObjectiveButtonClicked_Init();
    libVoiC_gt_PC_DebugProgress_Init();
    libVoiC_gt_PC_DebugProgressDevelop_Init();
    libVoiC_gt_PC_DebugProgressOKCallback_Init();
    libVoiC_gt_PC_DebugProgressCancelCallback_Init();
    libVoiC_gt_PC_DebugProgressRetailMode_Init();
    libVoiC_gt_PC_DebugCutscenePlay_Init();
    libVoiC_gt_PC_DebugCutsceneStop_Init();
    libVoiC_gt_PC_DebugCutscenePause_Init();
    libVoiC_gt_PC_DebugCutsceneSelect_Init();
    libVoiC_gt_PC_DebugCutsceneSeek_Init();
    libVoiC_gt_PC_DebugCutsceneCinematicMode_Init();
    libVoiC_gt_PC_DebugCutsceneGoToBookmark_Init();
    libVoiC_gt_PC_AchievementShieldAbsorb_Init();
    libVoiC_gt_ZS_FootageRecording_Init();
    libVoiC_gt_PC_DisplayTimestamp_Init();
    libVoiC_gt_PC_DisplayTimestampSkippable_Init();
    libVoiC_gt_PC_WaitForDialogCutscene_Init();
    libVoiC_gt_PC_WaitForCutscene_Init();
    libVoiC_gt_PC_CampaignCutsceneEnded_Init();
    libVoiC_gt_PC_PlaySceneSkippable_Init();
    libVoiC_gt_PC_CinematicDetectSkipping_Init();
    libVoiC_gt_PC_SceneSkipped_Init();
    libVoiC_gt_PC_TrackLoadingComplete_Init();
    libVoiC_gt_PC_ArchivesBankLoadSyncComplete_Init();
    libVoiC_gt_PC_ArchivesBankSaveSyncComplete_Init();
    libVoiC_gt_PC_ArchivesHandleMissionLoad_Init();
    libVoiC_gt_PC_StatUnitCreated_Init();
    libVoiC_gt_PC_StatDamageTaken_Init();
    libVoiC_gt_PC_StatDamageHealed_Init();
    libVoiC_gt_PC_StatUnitDies_Init();
    libVoiC_gt_PC_StatAbilityUsed_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libVoiC_InitLib_completed = false;

void libVoiC_InitLib () {
    if (libVoiC_InitLib_completed) {
        return;
    }

    libVoiC_InitLib_completed = true;

    libVoiC_InitLibraries();
    libVoiC_InitVariables();
    libVoiC_InitTriggers();
}

include "TriggerLibs/VoidCampaignMissionLib"
include "TriggerLibs/VoidCampaignUILib"

