include "TriggerLibs/NativeLib"
include "TriggerLibs/VoidCampaignLib_h"
include "TriggerLibs/VoidCampaignMissionLib_h"
include "TriggerLibs/VoidCampaignUILib_h"

include "TriggerLibs/VoidCampaignStoryLib_h"

//--------------------------------------------------------------------------------------------------
// Library: Story (Void)
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libVCST_InitLibraries () {
    libNtve_InitVariables();
    libVoiC_InitVariables();
    libVCMI_InitVariables();
    libVCUI_InitVariables();
}

// Variable Initialization
bool libVCST_InitVariables_completed = false;

void libVCST_InitVariables () {
    int init_i;
    int init_j;
    int init_k;

    if (libVCST_InitVariables_completed) {
        return;
    }

    libVCST_InitVariables_completed = true;

    libVCST_gv_pS_DebugStoryDialog = c_invalidDialogId;
    libVCST_gv_pS_DebugStoryTypeList = c_invalidDialogControlId;
    libVCST_gv_pS_DebugStorySceneList = c_invalidDialogControlId;
    libVCST_gv_pS_DebugStoryConvoTypeCheckbox = c_invalidDialogControlId;
    libVCST_gv_pS_DebugStoryConvoTypeLabel = c_invalidDialogControlId;
    libVCST_gv_pS_DebugStorySceneTypeCheckbox = c_invalidDialogControlId;
    libVCST_gv_pS_DebugStorySceneTypeLabel = c_invalidDialogControlId;
    libVCST_gv_pS_DebugStoryFilterEditBox = c_invalidDialogControlId;
    libVCST_gv_pS_DebugStoryPreviewList = c_invalidDialogControlId;
    libVCST_gv_pS_DebugStoryFilterLabel = c_invalidDialogControlId;
    libVCST_gv_pS_DebugStoryPlayButton = c_invalidDialogControlId;
    libVCST_gv_pS_DebugStoryCloseButton = c_invalidDialogControlId;
    libVCST_gv_pS_CurrentSoundMode = libNtve_ge_VolumeChannelMode_Speech;
    libVCST_gv_pS_PlanetSetUnits = UnitGroupEmpty();
    for (init_i = 0; init_i <= libVCST_gv_pS_AliasedUnitsMaxCount; init_i += 1) {
        libVCST_gv_pS_Aliases[init_i] = "";
    }
    libVCST_gv_pS_VisibleUnits = UnitGroupEmpty();
    libVCST_gv_pS_StorySetLightingCutscene = c_cutsceneNone;
    libVCST_gv_pS_UIVisible = true;
    libVCST_gv_pS_InteractionOn = true;
    libVCST_gv_pS_CurrentStoryActivity = libVCST_ge_StoryActivities_None;
    libVCST_gv_pS_LastStoryActivity = libVCST_ge_StoryActivities_None;
    libVCST_gv_pS_CurrentRoom = libVCST_ge_Rooms_StoryRoomVoid;
    libVCST_gv_pS_LastRoom = libVCST_ge_Rooms_StoryRoomVoid;
    for (init_i = 0; init_i <= libVCST_gv_pSC_RoomCount; init_i += 1) {
        libVCST_gv_pS_RoomUnits[init_i] = UnitGroupEmpty();
    }
    libVCST_gv_pS_RoomUICutscene = c_cutsceneNone;
    libVCST_gv_pS_RoomBeforeArchives = libVCST_ge_Rooms_StoryRoomBridge;
    libVCST_gv_pS_NextRoom = libVCST_ge_Rooms_StoryRoomVoid;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libVCST_gv_pS_Backgrounds[init_i] = c_cutsceneNone;
    }
    libVCST_gv_pS_ActiveBackground = c_cutsceneNone;
    for (init_i = 0; init_i <= libVCST_gv_pSC_MaxAmbientRooms; init_i += 1) {
        for (init_j = 0; init_j <= libVCST_gv_pSC_MaxAmbientScenes; init_j += 1) {
            for (init_k = 0; init_k <= libVCST_gv_pSC_MaxAmbientEvents; init_k += 1) {
                libVCST_gv_pS_AmbientEvents[init_i][init_j][init_k] = c_cutsceneNone;
            }
        }
    }
    for (init_i = 0; init_i <= libVCST_gv_pSC_MaxAmbientRooms; init_i += 1) {
        for (init_j = 0; init_j <= libVCST_gv_pSC_MaxAmbientScenes; init_j += 1) {
            libVCST_gv_pS_AmbientSceneTimer[init_i][init_j] = TimerCreate();
        }
    }
    for (init_i = 0; init_i <= libVCST_gv_pSC_MaxAmbientRooms; init_i += 1) {
        for (init_j = 0; init_j <= libVCST_gv_pSC_MaxAmbientScenes; init_j += 1) {
            libVCST_gv_pS_AmbientSceneStatus[init_i][init_j] = libVCST_ge_PS_AmbientSceneStatusType_PS_AmbientSceneUnused;
        }
    }
    for (init_i = 0; init_i <= libVCST_gv_pSC_MaxAmbientRooms; init_i += 1) {
        libVCST_gv_pS_AmbientScenesHidden[init_i] = true;
    }
    libVCST_gv_pS_AmbientConversationTimer = TimerCreate();
    libVCST_gv_pS_KaraxPickupTimer = TimerCreate();
    libVCST_gv_pS_ConversationScene = c_cutsceneNone;
    libVCST_gv_pS_ConversationCutscenePosition = libNtve_gf_PointFromXYZ(32.0, 32.0, 8.0);
    libVCST_gv_pS_ActiveConvoBookmarkToken = "";
    for (init_i = 0; init_i <= 40; init_i += 1) {
        libVCST_gv_pS_Clickable[init_i].lv_stringID = "";
        libVCST_gv_pS_Clickable[init_i].lv_callout = c_invalidDialogControlId;
        libVCST_gv_pS_Clickable[init_i].lv_calloutDialog = c_invalidDialogId;
        libVCST_gv_pS_Clickable[init_i].lv_calloutSubtitle = c_invalidDialogControlId;
        libVCST_gv_pS_Clickable[init_i].lv_calloutName = c_invalidDialogControlId;
        libVCST_gv_pS_Clickable[init_i].lv_lightingCutscene = c_cutsceneNone;
    }
    libVCST_gv_pS_CutsceneStatEvent = -1;
    libVCST_gv_pS_Cutscene = c_cutsceneNone;
}

// Presets
// Functions
void libVCST_gf_PS_DebugStoryCheatDisplay () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TriggerExecute(libVCST_gt_PS_DebugStoryCheatInit, true, false);
    libVCST_gf_PS_DebugStoryCheatUpdateList();
    if ((libVCST_gv_pS_InStoryCheat == false)) {
        libVCST_gv_pS_DebugStoryOriginalRoom = libVCST_gf_PreviousRoom();
    }

    CutsceneFade(true, 0.0, Color(0,0,0), 100.0, PlayerGroupAll(), false);
    DialogSetVisible(libVCST_gv_pS_DebugStoryDialog, PlayerGroupAll(), true);
    TriggerEnable(libVCST_gt_PS_DebugStoryCheatSceneListSelect, true);
    TriggerEnable(libVCST_gt_PS_DebugStoryCheatFilterChange, true);
    TriggerEnable(libVCST_gt_PS_DebugStoryCheatPlay, true);
    TriggerEnable(libVCST_gt_PS_DebugStoryCheatClose, true);
    TriggerEnable(libVCST_gt_PS_DebugStoryCheatCheckbox, true);
    if ((libVCST_gv_pS_DebugStorySelectedIndex != 0)) {
        DialogControlSelectItem(libVCST_gv_pS_DebugStorySceneList, PlayerGroupAll(), libVCST_gv_pS_DebugStorySelectedIndex);
    }

}

void libVCST_gf_PS_DebugStoryCheatHide () {
    // Automatic Variable Declarations
    // Implementation
    DialogSetVisible(libVCST_gv_pS_DebugStoryDialog, PlayerGroupAll(), false);
}

void libVCST_gf_PS_DebugStoryCheatUpdateList () {
    // Variable Declarations
    string lv_indexScene;
    string lv_indexConvo;
    int lv_index;

    // Automatic Variable Declarations
    int auto88925A07_ae;
    const int auto88925A07_ai = 1;
    int auto34730C5A_ae;
    const int auto34730C5A_ai = 1;

    // Variable Initialization

    // Implementation
    libVCST_gv_pS_DebugStoryListCount = 0;
    DialogControlRemoveAllItems(libVCST_gv_pS_DebugStorySceneList, PlayerGroupAll());
    auto88925A07_ae = UserDataInstanceCount("Scenes");
    lv_index = 1;
    for ( ; ( (auto88925A07_ai >= 0 && lv_index <= auto88925A07_ae) || (auto88925A07_ai < 0 && lv_index >= auto88925A07_ae) ) ; lv_index += auto88925A07_ai ) {
        lv_indexScene = UserDataInstance("Scenes", lv_index);
        libVCST_gf_PS_DebugStoryAddListItem((lv_indexScene), lv_indexScene, "Scenes");
    }
    auto34730C5A_ae = UserDataInstanceCount("Conversations");
    lv_index = 1;
    for ( ; ( (auto34730C5A_ai >= 0 && lv_index <= auto34730C5A_ae) || (auto34730C5A_ai < 0 && lv_index >= auto34730C5A_ae) ) ; lv_index += auto34730C5A_ai ) {
        lv_indexConvo = UserDataInstance("Conversations", lv_index);
        libVCST_gf_PS_DebugStoryAddListItem(("(Conv) " + UserDataGetString("Conversations", lv_indexConvo, "Name", 1)), lv_indexConvo, "Conversations");
    }
}

void libVCST_gf_PS_DebugStoryCheatUpdateSelection () {
    // Variable Declarations
    int lv_indexGroup;
    int lv_indexParentGroup;
    int lv_indexChild;
    string lv_groupId;
    bool lv_passed;
    string lv_conversation;

    // Automatic Variable Declarations
    int autoF5938A13_ae;
    const int autoF5938A13_ai = 1;
    int auto8ADDF7C4_ae;
    const int auto8ADDF7C4_ai = 1;
    int auto453FBC04_ae;
    const int auto453FBC04_ai = 1;

    // Variable Initialization
    lv_groupId = "";

    // Implementation
    DialogControlRemoveAllItems(libVCST_gv_pS_DebugStoryPreviewList, PlayerGroupAll());
    if ((libVCST_gv_pS_DebugStoryListType[libVCST_gv_pS_DebugStorySelectedIndex] == null)) {
        return ;
    }

    if ((libVCST_gv_pS_DebugStoryListType[libVCST_gv_pS_DebugStorySelectedIndex] == "Scenes")) {
        lv_conversation = UserDataGetGameLink("Scenes", libVCST_gv_pS_DebugStoryListInstance[libVCST_gv_pS_DebugStorySelectedIndex], "Conversation", 1);
        if ((lv_conversation != null)) {
            libVCST_gf_PS_DebugStoryPreviewGroupRecursive(lv_conversation, "Group00001");
        }

        return ;
    }

    lv_conversation = UserDataGetGameLink("Conversations", libVCST_gv_pS_DebugStoryListInstance[libVCST_gv_pS_DebugStorySelectedIndex], "ConvoGameLink", 1);
    if ((lv_conversation == null)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_VCST_CAA1F39B"), true);
        return ;
    }

    libVCST_gf_PS_DebugStoryCheatPrepareConversation(libVCST_gv_pS_DebugStoryListInstance[libVCST_gv_pS_DebugStorySelectedIndex]);
    autoF5938A13_ae = (CatalogFieldValueCount(c_gameCatalogConversation, lv_conversation, "Groups", c_playerAny)-1);
    lv_indexGroup = 1;
    for ( ; ( (autoF5938A13_ai >= 0 && lv_indexGroup <= autoF5938A13_ae) || (autoF5938A13_ai < 0 && lv_indexGroup >= autoF5938A13_ae) ) ; lv_indexGroup += autoF5938A13_ai ) {
        lv_groupId = CatalogFieldValueGet(c_gameCatalogConversation, lv_conversation, "Groups[" + IntToString(lv_indexGroup) + "].Id", c_playerAny);
        lv_passed = true;
        auto8ADDF7C4_ae = (CatalogFieldValueCount(c_gameCatalogConversation, lv_conversation, "Groups", c_playerAny)-1);
        lv_indexParentGroup = 1;
        for ( ; ( (auto8ADDF7C4_ai >= 0 && lv_indexParentGroup <= auto8ADDF7C4_ae) || (auto8ADDF7C4_ai < 0 && lv_indexParentGroup >= auto8ADDF7C4_ae) ) ; lv_indexParentGroup += auto8ADDF7C4_ai ) {
            auto453FBC04_ae = (CatalogFieldValueCount(c_gameCatalogConversation, lv_conversation, "Groups[" + IntToString(lv_indexParentGroup) + "].Children", c_playerAny)-1);
            lv_indexChild = 0;
            for ( ; ( (auto453FBC04_ai >= 0 && lv_indexChild <= auto453FBC04_ae) || (auto453FBC04_ai < 0 && lv_indexChild >= auto453FBC04_ae) ) ; lv_indexChild += auto453FBC04_ai ) {
                if ((CatalogFieldValueGet(c_gameCatalogConversation, lv_conversation, "Groups[" + IntToString(lv_indexParentGroup) + "].Children[" + IntToString(lv_indexChild) + "]", c_playerAny) == lv_groupId)) {
                    lv_passed = false;
                }

            }
        }
        if ((lv_passed == true)) {
            libVCST_gf_PS_DebugStoryPreviewGroupRecursive(lv_conversation, lv_groupId);
        }

    }
}

void libVCST_gf_PS_DebugStoryCheatPrepareConversation (string lp_convoInstance) {
    // Variable Declarations
    int lv_indexMission;

    // Automatic Variable Declarations
    const int autoE1594938_ae = 3;
    const int autoE1594938_ai = 1;

    // Variable Initialization

    // Implementation
    libVoiC_gf_ResetCampaignData();
    UserDataResetType("Locations");
    lv_indexMission = 1;
    for ( ; ( (autoE1594938_ai >= 0 && lv_indexMission <= autoE1594938_ae) || (autoE1594938_ai < 0 && lv_indexMission >= autoE1594938_ae) ) ; lv_indexMission += autoE1594938_ai ) {
        if ((UserDataGetGameLink("Conversations", lp_convoInstance, "RequiredMission", lv_indexMission) != null)) {
            libVCST_gf_PS_DebugStoryCheatCompleteMission(UserDataGetGameLink("Conversations", lp_convoInstance, "RequiredMission", lv_indexMission));
        }

    }
    libVCST_gf_PS_DebugStoryCheatSetConditionRecursive(UserDataGetGameLink("Conversations", lp_convoInstance, "ConvoGameLink", 1), UserDataGetString("Conversations", lp_convoInstance, "Group", 1));
}

void libVCST_gf_PS_DebugStoryCheatCompleteMission (string lp_mission) {
    // Automatic Variable Declarations
    string auto8DC45DC9_val;

    // Implementation
    auto8DC45DC9_val = lp_mission;
    if (auto8DC45DC9_val == "PAiur02") {
        libVCST_gf_PS_DebugStoryCheatCompleteMission("PAiur01");
    }
    else if (auto8DC45DC9_val == "PAiur03") {
        libVCST_gf_PS_DebugStoryCheatCompleteMission("PAiur02");
    }
    else if (auto8DC45DC9_val == "PShakuras01") {
        libVCST_gf_PS_DebugStoryCheatCompleteMission("PAiur03");
    }
    else if (auto8DC45DC9_val == "PShakuras02") {
        libVCST_gf_PS_DebugStoryCheatCompleteMission("PShakuras01");
    }
    else if (auto8DC45DC9_val == "PKorhal01") {
        libVCST_gf_PS_DebugStoryCheatCompleteMission("PAiur03");
    }
    else if (auto8DC45DC9_val == "PKorhal02") {
        libVCST_gf_PS_DebugStoryCheatCompleteMission("PKorhal01");
    }
    else if (auto8DC45DC9_val == "PPurifier01") {
        libVCST_gf_PS_DebugStoryCheatCompleteMission("PAiur03");
    }
    else if (auto8DC45DC9_val == "PUlnar01") {
        libVCST_gf_PS_DebugStoryCheatCompleteMission("PShakuras02");
        libVCST_gf_PS_DebugStoryCheatCompleteMission("PPurifier01");
        libVCST_gf_PS_DebugStoryCheatCompleteMission("PKorhal02");
    }
    else if (auto8DC45DC9_val == "PUlnar02") {
        libVCST_gf_PS_DebugStoryCheatCompleteMission("PUlnar01");
    }
    else if (auto8DC45DC9_val == "PUlnar03") {
        libVCST_gf_PS_DebugStoryCheatCompleteMission("PUlnar02");
    }
    else if (auto8DC45DC9_val == "PTaldarim01") {
        libVCST_gf_PS_DebugStoryCheatCompleteMission("PUlnar03");
    }
    else if (auto8DC45DC9_val == "PTaldarim02") {
        libVCST_gf_PS_DebugStoryCheatCompleteMission("PTaldarim01");
    }
    else if (auto8DC45DC9_val == "PPurifier02") {
        libVCST_gf_PS_DebugStoryCheatCompleteMission("PUlnar03");
    }
    else if (auto8DC45DC9_val == "PPurifier03") {
        libVCST_gf_PS_DebugStoryCheatCompleteMission("PPurifier02");
    }
    else if (auto8DC45DC9_val == "PMoebius01") {
        libVCST_gf_PS_DebugStoryCheatCompleteMission("PUlnar03");
    }
    else if (auto8DC45DC9_val == "PAiur04") {
        libVCST_gf_PS_DebugStoryCheatCompleteMission("PMoebius01");
        libVCST_gf_PS_DebugStoryCheatCompleteMission("PTaldarim02");
        libVCST_gf_PS_DebugStoryCheatCompleteMission("PPurifier03");
    }
    else if (auto8DC45DC9_val == "PAiur05") {
        libVCST_gf_PS_DebugStoryCheatCompleteMission("PAiur04");
    }
    else if (auto8DC45DC9_val == "PAiur06") {
        libVCST_gf_PS_DebugStoryCheatCompleteMission("PAiur05");
    }
    else {
    }
    libVoiC_gf_PC_CompleteMission(lp_mission);
}

void libVCST_gf_PS_DebugStoryCheatSetConditionRecursive (string lp_conversationLink, string lp_groupID) {
    // Variable Declarations
    int lv_indexCondition;
    int lv_indexGroup;
    int lv_indexValue;
    int lv_indexChild;
    string lv_typeString;
    string lv_instanceString;
    string lv_fieldString;
    string lv_userType;
    string lv_userInstance;
    string lv_userField;
    int lv_currentValue;

    // Automatic Variable Declarations
    int auto5153B48E_ae;
    const int auto5153B48E_ai = 1;
    int auto6D6C6CD9_ae;
    const int auto6D6C6CD9_ai = 1;
    int auto2CDBFF2F_ae;
    const int auto2CDBFF2F_ai = 1;
    const int auto8A407701_ae = 101;
    const int auto8A407701_ai = 1;

    // Variable Initialization
    lv_typeString = "";
    lv_instanceString = "";
    lv_fieldString = "";

    // Implementation
    auto5153B48E_ae = (CatalogFieldValueCount(c_gameCatalogConversation, lp_conversationLink, "Groups", c_playerAny)-1);
    lv_indexGroup = 0;
    for ( ; ( (auto5153B48E_ai >= 0 && lv_indexGroup <= auto5153B48E_ae) || (auto5153B48E_ai < 0 && lv_indexGroup >= auto5153B48E_ae) ) ; lv_indexGroup += auto5153B48E_ai ) {
        if ((CatalogFieldValueGet(c_gameCatalogConversation, lp_conversationLink, "Groups[" + IntToString(lv_indexGroup) + "].Id", c_playerAny) == lp_groupID)) {
            auto2CDBFF2F_ae = (CatalogFieldValueCount(c_gameCatalogConversation, lp_conversationLink, "Groups[" + IntToString(lv_indexGroup) + "].Conditions", c_playerAny)-1);
            lv_indexCondition = 0;
            for ( ; ( (auto2CDBFF2F_ai >= 0 && lv_indexCondition <= auto2CDBFF2F_ae) || (auto2CDBFF2F_ai < 0 && lv_indexCondition >= auto2CDBFF2F_ae) ) ; lv_indexCondition += auto2CDBFF2F_ai ) {
                lv_typeString = CatalogFieldValueGet(c_gameCatalogConversation, lp_conversationLink, "Groups[" + IntToString(lv_indexGroup) + "].Conditions[" + IntToString(lv_indexCondition) + "].User.Type", c_playerAny);
                lv_instanceString = CatalogFieldValueGet(c_gameCatalogConversation, lp_conversationLink, "Groups[" + IntToString(lv_indexGroup) + "].Conditions[" + IntToString(lv_indexCondition) + "].User.Instance", c_playerAny);
                lv_fieldString = CatalogFieldValueGet(c_gameCatalogConversation, lp_conversationLink, "Groups[" + IntToString(lv_indexGroup) + "].Conditions[" + IntToString(lv_indexCondition) + "].User.Field", c_playerAny);
                lv_userType = (lv_typeString);
                lv_userInstance = (lv_instanceString);
                lv_userField = (lv_fieldString);
                lv_currentValue = 0;
                lv_indexValue = DataTableGetInt(false, (lv_typeString + "." + lv_instanceString + "." + lv_fieldString));
                for ( ; ( (auto8A407701_ai >= 0 && lv_indexValue <= auto8A407701_ae) || (auto8A407701_ai < 0 && lv_indexValue >= auto8A407701_ae) ) ; lv_indexValue += auto8A407701_ai ) {
                    if ((libVCST_gf_PS_DebugStoryConditionPassed(lv_typeString, lv_instanceString, lv_fieldString, "1", CatalogFieldValueGet(c_gameCatalogConversation, lp_conversationLink, "Groups[" + IntToString(lv_indexGroup) + "].Conditions[" + IntToString(lv_indexCondition) + "].Operation", c_playerAny), CatalogFieldValueGet(c_gameCatalogConversation, lp_conversationLink, "Groups[" + IntToString(lv_indexGroup) + "].Conditions[" + IntToString(lv_indexCondition) + "].Value", c_playerAny)) == true)) {
                        DataTableSetInt(false, (lv_typeString + "." + lv_instanceString + "." + lv_fieldString), UserDataGetInt(lv_userType, lv_userInstance, lv_userField, 1));
                        break;
                    }

                    UserDataSetInt(lv_userType, lv_userInstance, lv_userField, 1, lv_indexValue);
                }
            }
        }
        else {
            auto6D6C6CD9_ae = (CatalogFieldValueCount(c_gameCatalogConversation, lp_conversationLink, "Groups[" + IntToString(lv_indexGroup) + "].Children", c_playerAny)-1);
            lv_indexChild = 0;
            for ( ; ( (auto6D6C6CD9_ai >= 0 && lv_indexChild <= auto6D6C6CD9_ae) || (auto6D6C6CD9_ai < 0 && lv_indexChild >= auto6D6C6CD9_ae) ) ; lv_indexChild += auto6D6C6CD9_ai ) {
                if ((CatalogFieldValueGet(c_gameCatalogConversation, lp_conversationLink, "Groups[" + IntToString(lv_indexGroup) + "].Children[" + IntToString(lv_indexChild) + "]", c_playerAny) == lp_groupID)) {
                    libVCST_gf_PS_DebugStoryCheatSetConditionRecursive(lp_conversationLink, CatalogFieldValueGet(c_gameCatalogConversation, lp_conversationLink, "Groups[" + IntToString(lv_indexGroup) + "].Id", c_playerAny));
                }

            }
        }
    }
}

void libVCST_gf_PS_DebugStoryPreviewGroupRecursive (string lp_conversation, string lp_group) {
    // Variable Declarations
    int lv_indexCondition;
    int lv_indexGroup;
    int lv_indexChild;
    string lv_childStr;

    // Automatic Variable Declarations
    int auto46A2E312_ae;
    const int auto46A2E312_ai = 1;
    int auto0E703C23_ae;
    const int auto0E703C23_ai = 1;
    int autoD142832C_ae;
    const int autoD142832C_ai = 1;

    // Variable Initialization
    lv_childStr = "";

    // Implementation
    auto46A2E312_ae = (CatalogFieldValueCount(c_gameCatalogConversation, lp_conversation, "Groups", c_playerAny)-1);
    lv_indexGroup = 0;
    for ( ; ( (auto46A2E312_ai >= 0 && lv_indexGroup <= auto46A2E312_ae) || (auto46A2E312_ai < 0 && lv_indexGroup >= auto46A2E312_ae) ) ; lv_indexGroup += auto46A2E312_ai ) {
        if ((CatalogFieldValueGet(c_gameCatalogConversation, lp_conversation, "Groups[" + IntToString(lv_indexGroup) + "].Id", c_playerAny) == lp_group)) {
            auto0E703C23_ae = (CatalogFieldValueCount(c_gameCatalogConversation, lp_conversation, "Groups[" + IntToString(lv_indexGroup) + "].Conditions", c_playerAny)-1);
            lv_indexCondition = 0;
            for ( ; ( (auto0E703C23_ai >= 0 && lv_indexCondition <= auto0E703C23_ae) || (auto0E703C23_ai < 0 && lv_indexCondition >= auto0E703C23_ae) ) ; lv_indexCondition += auto0E703C23_ai ) {
                if ((libVCST_gf_PS_DebugStoryConditionPassed(CatalogFieldValueGet(c_gameCatalogConversation, lp_conversation, "Groups[" + IntToString(lv_indexGroup) + "].Conditions[" + IntToString(lv_indexCondition) + "].User.Type", c_playerAny), CatalogFieldValueGet(c_gameCatalogConversation, lp_conversation, "Groups[" + IntToString(lv_indexGroup) + "].Conditions[" + IntToString(lv_indexCondition) + "].User.Instance", c_playerAny), CatalogFieldValueGet(c_gameCatalogConversation, lp_conversation, "Groups[" + IntToString(lv_indexGroup) + "].Conditions[" + IntToString(lv_indexCondition) + "].User.Field", c_playerAny), CatalogFieldValueGet(c_gameCatalogConversation, lp_conversation, "Groups[" + IntToString(lv_indexGroup) + "].Conditions[" + IntToString(lv_indexCondition) + "].User.Index", c_playerAny), CatalogFieldValueGet(c_gameCatalogConversation, lp_conversation, "Groups[" + IntToString(lv_indexGroup) + "].Conditions[" + IntToString(lv_indexCondition) + "].Operation", c_playerAny), CatalogFieldValueGet(c_gameCatalogConversation, lp_conversation, "Groups[" + IntToString(lv_indexGroup) + "].Conditions[" + IntToString(lv_indexCondition) + "].Value", c_playerAny)) == false)) {
                    return ;
                }

            }
            autoD142832C_ae = (CatalogFieldValueCount(c_gameCatalogConversation, lp_conversation, "Groups[" + IntToString(lv_indexGroup) + "].Children", c_playerAny)-1);
            lv_indexChild = 0;
            for ( ; ( (autoD142832C_ai >= 0 && lv_indexChild <= autoD142832C_ae) || (autoD142832C_ai < 0 && lv_indexChild >= autoD142832C_ae) ) ; lv_indexChild += autoD142832C_ai ) {
                lv_childStr = CatalogFieldValueGet(c_gameCatalogConversation, lp_conversation, "Groups[" + IntToString(lv_indexGroup) + "].Children[" + IntToString(lv_indexChild) + "]", c_playerAny);
                if ((StringSub(lv_childStr, 1, 5) == "Group")) {
                    libVCST_gf_PS_DebugStoryPreviewGroupRecursive(lp_conversation, lv_childStr);
                }
                else if ((StringSub(lv_childStr, 1, 4) == "Line")) {
                    libVCST_gf_PS_DebugStoryPreviewLine(lp_conversation, lv_childStr);
                }
            }
            return ;
        }

    }
}

void libVCST_gf_PS_DebugStoryPreviewLine (string lp_conversation, string lp_line) {
    // Variable Declarations
    int lv_indexCondition;
    int lv_indexLine;

    // Automatic Variable Declarations
    int autoD5FF4448_ae;
    const int autoD5FF4448_ai = 1;
    int auto2118A0E5_ae;
    const int auto2118A0E5_ai = 1;

    // Variable Initialization

    // Implementation
    autoD5FF4448_ae = (CatalogFieldValueCount(c_gameCatalogConversation, lp_conversation, "Lines", c_playerAny)-1);
    lv_indexLine = 0;
    for ( ; ( (autoD5FF4448_ai >= 0 && lv_indexLine <= autoD5FF4448_ae) || (autoD5FF4448_ai < 0 && lv_indexLine >= autoD5FF4448_ae) ) ; lv_indexLine += autoD5FF4448_ai ) {
        if ((CatalogFieldValueGet(c_gameCatalogConversation, lp_conversation, "Lines[" + IntToString(lv_indexLine) + "].Id", c_playerAny) == lp_line)) {
            auto2118A0E5_ae = (CatalogFieldValueCount(c_gameCatalogConversation, lp_conversation, "Lines[" + IntToString(lv_indexLine) + "].Conditions", c_playerAny)-1);
            lv_indexCondition = 0;
            for ( ; ( (auto2118A0E5_ai >= 0 && lv_indexCondition <= auto2118A0E5_ae) || (auto2118A0E5_ai < 0 && lv_indexCondition >= auto2118A0E5_ae) ) ; lv_indexCondition += auto2118A0E5_ai ) {
                if ((libVCST_gf_PS_DebugStoryConditionPassed(CatalogFieldValueGet(c_gameCatalogConversation, lp_conversation, "Lines[" + IntToString(lv_indexLine) + "].Conditions[" + IntToString(lv_indexCondition) + "].User.Type", c_playerAny), CatalogFieldValueGet(c_gameCatalogConversation, lp_conversation, "Lines[" + IntToString(lv_indexLine) + "].Conditions[" + IntToString(lv_indexCondition) + "].User.Instance", c_playerAny), CatalogFieldValueGet(c_gameCatalogConversation, lp_conversation, "Lines[" + IntToString(lv_indexLine) + "].Conditions[" + IntToString(lv_indexCondition) + "].User.Field", c_playerAny), CatalogFieldValueGet(c_gameCatalogConversation, lp_conversation, "Lines[" + IntToString(lv_indexLine) + "].Conditions[" + IntToString(lv_indexCondition) + "].User.Index", c_playerAny), CatalogFieldValueGet(c_gameCatalogConversation, lp_conversation, "Lines[" + IntToString(lv_indexLine) + "].Conditions[" + IntToString(lv_indexCondition) + "].Operation", c_playerAny), CatalogFieldValueGet(c_gameCatalogConversation, lp_conversation, "Lines[" + IntToString(lv_indexLine) + "].Conditions[" + IntToString(lv_indexCondition) + "].Value", c_playerAny)) == false)) {
                    return ;
                }

            }
            TextExpressionSetToken("Param/Expression/lib_VCST_A03ACF50", "SPEAKER", StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, CatalogFieldValueGet(c_gameCatalogConversation, lp_conversation, "Lines[" + IntToString(lv_indexLine) + "].SpeakerCharacter", c_playerAny), "Name", c_playerAny)));
            TextExpressionSetToken("Param/Expression/lib_VCST_A03ACF50", "LINE", StringExternal(CatalogFieldValueGet(c_gameCatalogConversation, lp_conversation, "Lines[" + IntToString(lv_indexLine) + "].Text", c_playerAny)));
            DialogControlAddItem(libVCST_gv_pS_DebugStoryPreviewList, PlayerGroupAll(), TextExpressionAssemble("Param/Expression/lib_VCST_A03ACF50"));
            return ;
        }

    }
}

bool libVCST_gf_PS_DebugStoryConditionPassed (string lp_userType, string lp_userInstance, string lp_userField, string lp_userIndex, string lp_compare, string lp_value) {
    // Automatic Variable Declarations
    string auto08DEDB16_val;

    // Implementation
    auto08DEDB16_val = lp_compare;
    if (auto08DEDB16_val == "NotEqual") {
        if ((UserDataGetInt((lp_userType), (lp_userInstance), (lp_userField), 1) != StringToInt(lp_value))) {
            return true;
        }

    }
    else if (auto08DEDB16_val == "Equal") {
        if ((UserDataGetInt((lp_userType), (lp_userInstance), (lp_userField), 1) == StringToInt(lp_value))) {
            return true;
        }

    }
    else if (auto08DEDB16_val == "LessEqual") {
        if ((UserDataGetInt((lp_userType), (lp_userInstance), (lp_userField), 1) <= StringToInt(lp_value))) {
            return true;
        }

    }
    else if (auto08DEDB16_val == "GreaterEqual") {
        if ((UserDataGetInt((lp_userType), (lp_userInstance), (lp_userField), 1) >= StringToInt(lp_value))) {
            return true;
        }

    }
    else if (auto08DEDB16_val == "Greater") {
        if ((UserDataGetInt((lp_userType), (lp_userInstance), (lp_userField), 1) > StringToInt(lp_value))) {
            return true;
        }

    }
    else if (auto08DEDB16_val == "Less") {
        if ((UserDataGetInt((lp_userType), (lp_userInstance), (lp_userField), 1) < StringToInt(lp_value))) {
            return true;
        }

    }
    else {
    }
    return false;
}

void libVCST_gf_PS_DebugStoryAddListItem (string lp_name, string lp_listInstance, string lp_listType) {
    // Automatic Variable Declarations
    // Implementation
    if ((libNtve_gf_DialogItemEditValue(libVCST_gv_pS_DebugStoryFilterEditBox, 1) != "") && (StringContains(lp_name, libNtve_gf_DialogItemEditValue(libVCST_gv_pS_DebugStoryFilterEditBox, 1), c_stringAnywhere, c_stringNoCase) == false)) {
        return ;
    }

    if ((lp_listType == "Scenes") && (libNtve_gf_DialogItemIsChecked(libVCST_gv_pS_DebugStorySceneTypeCheckbox, 1) == false)) {
        return ;
    }

    if ((lp_listType == "Conversations") && (libNtve_gf_DialogItemIsChecked(libVCST_gv_pS_DebugStoryConvoTypeCheckbox, 1) == false)) {
        return ;
    }

    DialogControlAddItem(libVCST_gv_pS_DebugStorySceneList, PlayerGroupAll(), StringToText(lp_name));
    libVCST_gv_pS_DebugStoryListCount += 1;
    libVCST_gv_pS_DebugStoryListInstance[libVCST_gv_pS_DebugStoryListCount] = lp_listInstance;
    libVCST_gv_pS_DebugStoryListType[libVCST_gv_pS_DebugStoryListCount] = lp_listType;
}

void libVCST_gf_PC_DebugProgressSaveStats () {
    // Automatic Variable Declarations
    // Implementation
    BankLoad("ZDebugStory", 1);
    libVCST_gv_pS_DebugStoryBank = BankLastCreated();
    libVoiC_gf_PC_SaveTransitionVars(libVCST_gv_pS_DebugStoryBank, null, libVoiC_gv_pCX_IsSimulation, libVoiC_gv_pCX_IsVictoryPlayAgain, false, false, false);
}

void libVCST_gf_PC_DebugProgressRestoreStats () {
    // Variable Declarations
    string lv_indexMission;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libVCST_gv_pS_DebugStoryBank == null)) {
        return ;
    }

    libVoiC_gf_PC_LoadTransitionVars(libVCST_gv_pS_DebugStoryBank, null);
    BankRemove(libVCST_gv_pS_DebugStoryBank);
    libVCST_gv_pS_DebugStoryBank = null;
}

int libVCST_gf_PS_DebugRoomFromString (string lp_roomString) {
    // Automatic Variable Declarations
    string auto4DFAB3F4_val;

    // Implementation
    auto4DFAB3F4_val = StringCase(lp_roomString, false);
    if (auto4DFAB3F4_val == "bridge") {
        return libVCST_ge_Rooms_StoryRoomBridge;
    }
    else if (auto4DFAB3F4_val == "forge") {
        return libVCST_ge_Rooms_StoryRoomShip;
    }
    else if (auto4DFAB3F4_val == "sanctum") {
        return libVCST_ge_Rooms_StoryRoomWarCouncil;
    }
    else if (auto4DFAB3F4_val == "aiur") {
        return libVCST_ge_Rooms_StoryRoomAiur;
    }
    else {
    }
    return libVCST_ge_Rooms_StoryRoomVoid;
}

void libVCST_gf_InitializeVoidStorymode (string lp_storyMap) {
    // Variable Declarations
    int lv_episodeNumber;
    string lv_indexMission;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UISetMinimumLetterboxHeight(0);
    GameSetTransitionMap(("Campaign/Void/" + libVoiC_gf_PC_CampaignMapFile(lp_storyMap)));
    libNtve_gf_StoryMode(PlayerGroupAll(), true);
    GameSetSpeedValue(c_gameSpeedNormal);
    GameSetSpeedLocked(true);
    GameSetQuitOnQuitButton(false);
    SoundtrackSetContinuous(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
    SoundtrackSetContinuous(PlayerGroupAll(), c_soundtrackCategoryAmbience, false);
    libVoiC_gf_RegisterCampaignEvent(libVoiC_ge_PC_Event_CampaignDataReset, libVCST_gt_PS_EventCampaignResetData);
    libVoiC_gf_RegisterCampaignEvent(libVoiC_ge_PC_Event_CampaignMapTransition, libVCST_gt_PS_SaveStoryDataCallback);
    libVoiC_gf_RegisterCampaignEvent(libVoiC_ge_PC_Event_CampaignProgressCheatStart, libVCST_gt_PS_DebugProgressCheatUsed);
    libVoiC_gf_RegisterCampaignEvent(libVoiC_ge_PC_Event_CampaignProgressCheatLoad, libVCST_gt_PS_DebugProgressLoad);
    libVoiC_gf_RegisterCampaignEvent(libVoiC_ge_PC_Event_CampaignProgressCheatSave, libVCST_gt_PS_DebugProgressSave);
    libVoiC_gf_RegisterCampaignEvent(libVoiC_ge_PC_Event_CampaignProgressCheatCancel, libVCST_gt_PS_DebugProgressCheatCancelled);
    libVoiC_gf_RegisterCampaignEvent(libVoiC_ge_PC_Event_CampaignArchivesSynced, libVCUI_gt_PU_ArchivesSynced);
    libVoiC_gf_RegisterCampaignEvent(libVoiC_ge_PC_Event_UIArchivesQuit, libVCST_gt_PS_EventUIArchive_Quit);
    libVoiC_gf_RegisterCampaignEvent(libVoiC_ge_PC_Event_UIArchivesPlayMission, libVCST_gt_PS_EventUIArchive_PlayMission);
    libVoiC_gf_RegisterCampaignEvent(libVoiC_ge_PC_Event_UIArchivesPlayScene, libVCST_gt_PS_EventUIArchive_PlayScene);
    libVoiC_gf_RegisterCampaignEvent(libVoiC_ge_PC_Event_UIMissionLaunch, libVCST_gt_PS_EventUIMission_Launch);
    libVoiC_gf_RegisterCampaignEvent(libVoiC_ge_PC_Event_UIMissionQuit, libVCST_gt_PS_EventUIMission_Quit);
    libVoiC_gf_RegisterCampaignEvent(libVoiC_ge_PC_Event_UITravelLaunch, libVCST_gt_PS_EventUITravel_Launch);
    libVoiC_gf_RegisterCampaignEvent(libVoiC_ge_PC_Event_UITravelQuit, libVCST_gt_PS_EventUITravel_Quit);
    libVoiC_gf_RegisterCampaignEvent(libVoiC_ge_PC_Event_UIChampionQuit, libVCST_gt_PS_EventUIChampion_Quit);
    libVoiC_gf_RegisterCampaignEvent(libVoiC_ge_PC_Event_UIArmyQuit, libVCST_gt_PS_EventUIArmy_Quit);
    PointSetFacing(libVCST_gv_pS_ConversationCutscenePosition, 270.0);
    if ((lp_storyMap != "EpilogueStory01")) {
        libVCST_gf_PS_ClickableDataInit();
        libVCST_gf_PS_ConversationDataInit();
    }

    libVCST_gf_PS_RoomInit();
    libVoiC_gf_ULoadCampaignData(lp_storyMap);
    if ((lp_storyMap != "EpilogueStory01")) {
        libVCST_gf_PS_LoadStoryData();
        libVCST_gf_PS_ClickableDataUpdate();
    }

    libNtve_gf_SetCinematicTransitionStyle(libNtve_ge_CinematicTransitionStyle_Story);
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, null, c_soundtrackCueAny, c_soundtrackIndexAny);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, false);
    if ((libVoiC_gf_PC_LocationCutsceneFilter(libVoiC_gf_CurrentLocation()) != null) && (libVCST_gf_PS_CampaignCompleted() == false)) {
        CutsceneAddGlobalFilter(libVoiC_gf_PC_LocationCutsceneFilter(libVoiC_gf_CurrentLocation()));
    }

    libVCST_gf_PS_UpdateEpisodeFilter();
    libVCST_gf_PS_ApplyStorymodeEnvironment();
    libVoiC_gf_PC_AchievementAwardEarned();
}

void libVCST_gf_PS_ApplyStorymodeEnvironment () {
    // Automatic Variable Declarations
    // Implementation
    GameTimeOfDaySet("08:00:00");
    GameTimeOfDayPause(true);
    VisRevealArea(1, RegionEntireMap(), 0.0, false);
    CameraLockInput(1, true);
    CameraUseHeightSmoothing(1, false);
}

void libVCST_gf_PS_LoadStoryData () {
    // Variable Declarations
    bank lv_storyBank;
    bank lv_statisticsBank;
    string lv__SectionName;
    string lv_indexClickable;
    int lv_index;
    string lv_indexAbility;
    string lv_indexCategory;
    bool lv_debugIsFirstStorymodeEpisode;

    // Automatic Variable Declarations
    int auto792D16C3_ai;
    int auto792D16C3_ae;

    // Variable Initialization
    lv__SectionName = "";
    lv_debugIsFirstStorymodeEpisode = true;

    // Implementation
    if ((libVoiC_gf_PC_CampaignInEpilogue() == true)) {
        return ;
    }

    libVCST_gf_PS_TransitionalLoad();
    lv_storyBank = libVoiC_gf_StoryBank();
    auto792D16C3_ai = 1;
    auto792D16C3_ae = UserDataInstanceCount("Clickable")+1;
    while (auto792D16C3_ai < auto792D16C3_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto792D16C3_ai);
        lv__SectionName = "ClickableType";
        if ((libVCST_gf_PS_ClickableType(lv_indexClickable) != libVCST_ge_ClickableType_RoomChange) && (libVCST_gf_PS_ClickableType(lv_indexClickable) != libVCST_ge_ClickableType_Custom)) {
            libVCST_gf_ClickableSetType(lv_indexClickable, libVCST_gf_PS_ClickableIntToType(BankValueGetAsInt(lv_storyBank, lv__SectionName, (lv_indexClickable))));
        }

        lv__SectionName = "CharacterNew";
        libVCST_gf_ClickableSetNew(lv_indexClickable, (BankValueGetAsInt(lv_storyBank, lv__SectionName, (lv_indexClickable)) == 1));
        auto792D16C3_ai = auto792D16C3_ai+1;
    }
    libVCST_gf_PS_LoadConversations(lv_storyBank, "StoryConversations");
    lv__SectionName = "Debug";
    if ((BankValueGetAsFlag(libVoiC_gf_StoryBank(), lv__SectionName, "StartedFirstStorymodeEpisode") == true)) {
        lv_debugIsFirstStorymodeEpisode = false;
    }

    lv__SectionName = "Misc";
    if ((BankValueGetAsString(libVoiC_gf_StoryBank(), lv__SectionName, "CurrentLocation") != "")) {
    }

    if ((((libVCST_gv_pS_IsTransitionalLoad == false) && (libVoiC_gf_LastMapConditionCheck(libVoiC_ge_MissionCondition_Simulation) == false) && (libVoiC_gf_LastMapConditionCheck(libVoiC_ge_MissionCondition_Sucessful) == true) && (libVoiC_gf_PC_CampaignMapTypeCheck(libVoiC_gf_LastMap(), c_mapKindMission) == true)) || (lv_debugIsFirstStorymodeEpisode == true))) {
        libVCST_gf_PS_StartNewStorymodeEpisode();
    }

}

void libVCST_gf_PS_SaveStoryData () {
    // Variable Declarations
    bank lv_storyBank;
    string lv__SectionName;
    string lv_indexClickable;
    string lv_indexCategory;

    // Automatic Variable Declarations
    int auto741B8B93_ai;
    int auto741B8B93_ae;

    // Variable Initialization
    lv__SectionName = "";

    // Implementation
    if ((libVoiC_gf_PC_CampaignInEpilogue() == true)) {
        return ;
    }

    lv_storyBank = libVoiC_gf_StoryBank();
    auto741B8B93_ai = 1;
    auto741B8B93_ae = UserDataInstanceCount("Clickable")+1;
    while (auto741B8B93_ai < auto741B8B93_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto741B8B93_ai);
        lv__SectionName = "ClickableType";
        BankValueSetFromInt(lv_storyBank, lv__SectionName, (lv_indexClickable), UserDataGetInt("Clickable", lv_indexClickable, "Type", 1));
        lv__SectionName = "CharacterNew";
        BankValueSetFromInt(lv_storyBank, lv__SectionName, (lv_indexClickable), BoolToInt(libVCST_gf_PS_ClickableIsNew(lv_indexClickable)));
        auto741B8B93_ai = auto741B8B93_ai+1;
    }
    libVCST_gf_PS_SaveConversations(lv_storyBank, "StoryConversations");
    lv__SectionName = "Misc";
    BankSave(lv_storyBank);
}

void libVCST_gf_PS_SaveConversations (bank lp_bank, string lp_section) {
    // Variable Declarations
    string lv_indexClickable;

    // Automatic Variable Declarations
    int auto67314A6A_ai;
    int auto67314A6A_ae;

    // Variable Initialization

    // Implementation
    auto67314A6A_ai = 1;
    auto67314A6A_ae = UserDataInstanceCount("Clickable")+1;
    while (auto67314A6A_ai < auto67314A6A_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto67314A6A_ai);
        ConversationDataSaveNodeState(libVCST_gf_PS_ClickableConversation(lv_indexClickable), lp_bank, lp_section);
        ConversationDataSaveNodeState(libVCST_gf_PS_ClickableAmbientConversation(lv_indexClickable), lp_bank, lp_section);
        ConversationDataSaveNodeState(libVCST_gf_PS_ClickableGreetingConversation(lv_indexClickable), lp_bank, lp_section);
        auto67314A6A_ai = auto67314A6A_ai+1;
    }
}

void libVCST_gf_PS_LoadConversations (bank lp_bank, string lp_section) {
    // Variable Declarations
    string lv_indexClickable;

    // Automatic Variable Declarations
    int auto2104D7CD_ai;
    int auto2104D7CD_ae;

    // Variable Initialization

    // Implementation
    auto2104D7CD_ai = 1;
    auto2104D7CD_ae = UserDataInstanceCount("Clickable")+1;
    while (auto2104D7CD_ai < auto2104D7CD_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto2104D7CD_ai);
        ConversationDataLoadNodeState(libVCST_gf_PS_ClickableConversation(lv_indexClickable), lp_bank, lp_section);
        ConversationDataLoadNodeState(libVCST_gf_PS_ClickableAmbientConversation(lv_indexClickable), lp_bank, lp_section);
        ConversationDataLoadNodeState(libVCST_gf_PS_ClickableGreetingConversation(lv_indexClickable), lp_bank, lp_section);
        auto2104D7CD_ai = auto2104D7CD_ai+1;
    }
}

void libVCST_gf_PS_RestoreWriterStates () {
    // Variable Declarations
    int lv_stateIndex;
    string lv_indexState;
    int lv_newValue;

    // Automatic Variable Declarations
    int auto2637DB5C_ae;
    const int auto2637DB5C_ai = 1;

    // Variable Initialization

    // Implementation
    auto2637DB5C_ae = UserDataInstanceCount("WriterStates");
    lv_stateIndex = 1;
    for ( ; ( (auto2637DB5C_ai >= 0 && lv_stateIndex <= auto2637DB5C_ae) || (auto2637DB5C_ai < 0 && lv_stateIndex >= auto2637DB5C_ae) ) ; lv_stateIndex += auto2637DB5C_ai ) {
        lv_indexState = UserDataInstance("WriterStates", lv_stateIndex);
        if ((UserDataGetInt("StoryStates", lv_indexState, "Snapshot", 1) == 1)) {
            lv_newValue = UserDataGetInt("StoryStates", lv_indexState, "Value", 1);
            UserDataLoadInstance("WriterStates", lv_indexState, libVoiC_gf_StoryBank(), ("WriterStateSnapshot"));
            if ((UserDataGetInt("WriterStates", lv_indexState, "Value", 1) == lv_newValue)) {
                UserDataLoadInstance("WriterStates", lv_indexState, libVCST_gf_PS_TempConversationBank(), ("WriterStates"));
            }
            else {
                UserDataSetInt("StoryStates", lv_indexState, "Value", 1, lv_newValue);
            }
        }

    }
}

void libVCST_gf_PS_BackupSnapshotStates () {
    // Variable Declarations
    int lv_stateIndex;
    string lv_indexState;

    // Automatic Variable Declarations
    int auto36AC1F96_ae;
    const int auto36AC1F96_ai = 1;

    // Variable Initialization

    // Implementation
    auto36AC1F96_ae = UserDataInstanceCount("StoryStates");
    lv_stateIndex = 1;
    for ( ; ( (auto36AC1F96_ai >= 0 && lv_stateIndex <= auto36AC1F96_ae) || (auto36AC1F96_ai < 0 && lv_stateIndex >= auto36AC1F96_ae) ) ; lv_stateIndex += auto36AC1F96_ai ) {
        lv_indexState = UserDataInstance("StoryStates", lv_stateIndex);
        if ((UserDataGetInt("StoryStates", lv_indexState, "Snapshot", 1) == 1)) {
            UserDataSaveInstance("StoryStates", lv_indexState, libVCST_gf_PS_TempConversationBank(), ("WriterStates"));
        }

    }
}

void libVCST_gf_PS_SaveSnapshotStates () {
    // Variable Declarations
    int lv_stateIndex;
    string lv_indexState;

    // Automatic Variable Declarations
    int auto6F9608EF_ae;
    const int auto6F9608EF_ai = 1;

    // Variable Initialization

    // Implementation
    auto6F9608EF_ae = UserDataInstanceCount("StoryStates");
    lv_stateIndex = 1;
    for ( ; ( (auto6F9608EF_ai >= 0 && lv_stateIndex <= auto6F9608EF_ae) || (auto6F9608EF_ai < 0 && lv_stateIndex >= auto6F9608EF_ae) ) ; lv_stateIndex += auto6F9608EF_ai ) {
        lv_indexState = UserDataInstance("StoryStates", lv_stateIndex);
        if ((UserDataGetInt("StoryStates", lv_indexState, "Snapshot", 1) == 1)) {
            UserDataSaveInstance("StoryStates", lv_indexState, libVoiC_gf_StoryBank(), ("WriterStateSnapshot"));
        }

    }
}

void libVCST_gf_PS_LoadSnapshotStates () {
    // Variable Declarations
    int lv_stateIndex;
    string lv_indexState;

    // Automatic Variable Declarations
    int auto39AB0444_ae;
    const int auto39AB0444_ai = 1;

    // Variable Initialization

    // Implementation
    auto39AB0444_ae = UserDataInstanceCount("StoryStates");
    lv_stateIndex = 1;
    for ( ; ( (auto39AB0444_ai >= 0 && lv_stateIndex <= auto39AB0444_ae) || (auto39AB0444_ai < 0 && lv_stateIndex >= auto39AB0444_ae) ) ; lv_stateIndex += auto39AB0444_ai ) {
        lv_indexState = UserDataInstance("StoryStates", lv_stateIndex);
        if ((UserDataGetInt("StoryStates", lv_indexState, "Snapshot", 1) == 1)) {
            UserDataLoadInstance("StoryStates", lv_indexState, libVoiC_gf_StoryBank(), ("WriterStateSnapshot"));
        }

    }
}

bank libVCST_gf_PS_TempConversationBank () {
    // Variable Declarations
    const string lv_tempConvoBankName = "PSTempConvoBank";

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libVCST_gv_pS_TempConvoBank == null)) {
        BankLoad(lv_tempConvoBankName, 1);
        libVCST_gv_pS_TempConvoBank = BankLastCreated();
    }

    return libVCST_gv_pS_TempConvoBank;
}

void libVCST_gf_PS_StartNewStorymodeEpisode () {
    // Variable Declarations
    string lv_indexClickable;

    // Automatic Variable Declarations
    int autoCF818BE1_ai;
    int autoCF818BE1_ae;

    // Variable Initialization

    // Implementation
    autoCF818BE1_ai = 1;
    autoCF818BE1_ae = UserDataInstanceCount("Clickable")+1;
    while (autoCF818BE1_ai < autoCF818BE1_ae) {
        lv_indexClickable = UserDataInstance("Clickable", autoCF818BE1_ai);
        if (((libVCST_gf_PS_ClickableType(lv_indexClickable) == libVCST_ge_ClickableType_Ambient) || (libVCST_gf_PS_ClickableType(lv_indexClickable) == libVCST_ge_ClickableType_Conversation))) {
            if ((ConversationDataCanRun(libVCST_gf_PS_ClickableConversation(lv_indexClickable), true) == true)) {
                libVCST_gf_ClickableSetType(lv_indexClickable, libVCST_ge_ClickableType_Conversation);
                libVCST_gf_ClickableSetNew(lv_indexClickable, true);
            }
            else {
                libVCST_gf_ClickableSetType(lv_indexClickable, libVCST_ge_ClickableType_Ambient);
                libVCST_gf_ClickableSetNew(lv_indexClickable, false);
            }
        }

        autoCF818BE1_ai = autoCF818BE1_ai+1;
    }
    libVCST_gf_PS_SaveConversations(libVoiC_gf_StoryBank(), "ConversationSnapshot");
    libVCST_gf_ClickableSetNew("Starmap", true);
    libVoiC_gf_PC_DebugProgressSetFirstStorymodeEpisode(true);
}

void libVCST_gf_PS_SaveForExit () {
    // Variable Declarations
    string lv_transitionMap;
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_transitionMap = "";

    // Implementation
    libVCST_gv_pS_IsLeavingMap = true;
    if ((libVoiC_gf_PC_CampaignIsComplete() == true)) {
        libVoiC_gf_PC_CompletedSavesEnable();
    }

    libVoiC_gf_PrepareForStoryModeTransitionalSave();
    libVCST_gf_PS_SaveStoryData();
    libVCST_gf_PS_TransitionalSave();
    if ((libVoiC_gf_PC_CampaignInEpilogue() == false)) {
        lv_transitionMap = ("Campaign/Void/" + libVoiC_gf_PC_CampaignMapFile("PStory01"));
    }
    else {
        lv_transitionMap = ("Campaign/Void/" + libVoiC_gf_PC_CampaignMapFile("EpilogueStory01"));
    }
    GameSetTransitionMap(lv_transitionMap);
    lv_image = libVoiC_gf_PC_CampaignMapLoadingScreenVictoryImage(libVoiC_gf_CurrentMap());
    TextExpressionSetToken("Param/Expression/lib_VCST_9B920DB7", "A", libVoiC_gf_StoryPlanetName(libVoiC_gf_CurrentLocation()));
    GameSaveCreate(TextExpressionAssemble("Param/Expression/lib_VCST_9B920DB7"), StringToText(""), lv_image, true);
    Wait(0.1, c_timeGame);
}

void libVCST_gf_PS_TransitionalSave () {
    // Variable Declarations
    string lv__SectionName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__SectionName = "";

    // Implementation
    BankLoad(libVCST_gv_pS_TransitionBankName, 1);
    libVCST_gv_pS_TransitionBank = BankLastCreated();
    lv__SectionName = "StorySet";
    BankValueSetFromInt(BankLastCreated(), lv__SectionName, "CurrentRoom", (libVCST_gv_pS_CurrentRoom));
}

void libVCST_gf_PS_TransitionalLoad () {
    // Variable Declarations
    string lv__SectionName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__SectionName = "";

    // Implementation
    if ((BankExists(libVCST_gv_pS_TransitionBankName, 1) == false)) {
        return ;
    }

    libVCST_gv_pS_IsTransitionalLoad = true;
    BankLoad(libVCST_gv_pS_TransitionBankName, 1);
    lv__SectionName = "StorySet";
    libVCST_gv_pS_CurrentRoom = (BankValueGetAsInt(BankLastCreated(), lv__SectionName, "CurrentRoom"));
    if ((libVCST_gv_pS_CurrentRoom != libVCST_ge_Rooms_StoryRoomBridge) && (libVCST_gv_pS_CurrentRoom != libVCST_ge_Rooms_StoryRoomWarCouncil) && (libVCST_gv_pS_CurrentRoom != libVCST_ge_Rooms_StoryRoomShip)) {
        libVCST_gv_pS_CurrentRoom = libVCST_ge_Rooms_StoryRoomBridge;
    }

}

void libVCST_gf_StoryPlayMainSetSound (soundlink lp_soundLink, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    if ((libVCST_gv_pS_MainSetSounds[lp_index] != null)) {
        return ;
    }

    SoundPlay(lp_soundLink, PlayerGroupAll(), 100.0, 0.0);
    libVCST_gv_pS_MainSetSounds[lp_index] = SoundLastPlayed();
}

void libVCST_gf_SetAllSoundChannelVolumesStory (int lp_mode, fixed lp_duration) {
    // Automatic Variable Declarations
    int autoB3B25D2F_val;

    // Implementation
    libVCST_gv_pS_CurrentSoundMode = lp_mode;
    libNtve_gf_SetAllSoundChannelVolumes(lp_mode, PlayerGroupAll(), lp_duration);
    autoB3B25D2F_val = lp_mode;
    if (autoB3B25D2F_val == libNtve_ge_VolumeChannelMode_Game) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, lp_duration);
    }
    else if (autoB3B25D2F_val == libNtve_ge_VolumeChannelMode_Cinematic) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 50.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 100.0, lp_duration);
    }
    else {
    }
}

void libVCST_gf_PS_SoundMainSetStop () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto253CD6C5_ae = 2;
    const int auto253CD6C5_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto253CD6C5_ai >= 0 && lv_index <= auto253CD6C5_ae) || (auto253CD6C5_ai < 0 && lv_index >= auto253CD6C5_ae) ) ; lv_index += auto253CD6C5_ai ) {
        SoundStop(libVCST_gv_pS_MainSetSounds[lv_index], true);
        libVCST_gv_pS_MainSetSounds[lv_index] = null;
    }
}

void libVCST_gf_PS_SoundFadeAll (fixed lp_duration, bool lp_wait) {
    // Automatic Variable Declarations
    // Implementation
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, lp_duration);
    if ((lp_wait == true)) {
        Wait(lp_duration, c_timeReal);
    }

}

void libVCST_gf_PS_SoundFadeAllExceptMusic (fixed lp_duration, bool lp_wait) {
    // Automatic Variable Declarations
    // Implementation
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, lp_duration);
    if ((lp_wait == true)) {
        Wait(lp_duration, c_timeReal);
    }

}

void libVCST_gf_ShowHideStoryUnits (bool lp_showHide) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto4254474A_g;
    int auto4254474A_u;

    // Variable Initialization

    // Implementation
    libVCST_gv_pS_StoryUnitsVisible = lp_showHide;
    auto4254474A_g = libVCST_gv_pS_VisibleUnits;
    auto4254474A_u = UnitGroupCount(auto4254474A_g, c_unitCountAll);
    for (;; auto4254474A_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto4254474A_g, auto4254474A_u);
        if (lv_indexUnit == null) { break; }
        if ((libNtve_gf_UnitIsHidden(lv_indexUnit) == true) && (libVCST_gf_PS_RoomHasUnit(libVCST_gf_CurrentRoom(), lv_indexUnit) == true) && (lp_showHide == true)) {
            libNtve_gf_ShowHideUnit(lv_indexUnit, lp_showHide);
        }

        if ((libNtve_gf_UnitIsHidden(lv_indexUnit) == false) && (lp_showHide == false)) {
            libNtve_gf_ShowHideUnit(lv_indexUnit, lp_showHide);
        }

    }
}

void libVCST_gf_ShowHideUnitAbs (bool lp_showHide, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_showHide == true)) {
        if ((UnitGroupHasUnit(libVCST_gv_pS_VisibleUnits, lp_unit) == false)) {
            UnitGroupAdd(libVCST_gv_pS_VisibleUnits, lp_unit);
        }

    }
    else {
        UnitGroupRemove(libVCST_gv_pS_VisibleUnits, lp_unit);
    }
    if ((lp_showHide == false) && (libNtve_gf_UnitIsHidden(lp_unit) == true)) {
        return ;
    }

    if ((lp_showHide == true) && ((libNtve_gf_UnitIsHidden(lp_unit) == false) || (libVCST_gv_pS_StoryUnitsVisible == false) || (libVCST_gf_PS_RoomHasUnit(libVCST_gf_CurrentRoom(), lp_unit) == false))) {
        return ;
    }

    libNtve_gf_ShowHideUnit(lp_unit, lp_showHide);
}

void libVCST_gf_StorySetUnitLocation (unit lp_unit, point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_unit == null)) {
        return ;
    }

    UnitIssueOrder(lp_unit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetState(lp_unit, c_unitStateMoveSuppressed, false);
    libVCST_gf_ClearAnimationwithblendtime(c_animNameDefault, lp_unit, 0.0);
    UnitSetPosition(lp_unit, lp_point, false);
    UnitSetHeight(lp_unit, PointGetHeight(lp_point), 0.0);
    UnitSetFacing(lp_unit, PointGetFacing(lp_point), 0.0);
    UnitSetState(lp_unit, c_unitStateMoveSuppressed, true);
}

void libVCST_gf_StoryCreateUnit (string lp_unitType, point lp_location, fixed lp_facing) {
    // Automatic Variable Declarations
    // Implementation
    UnitCreate(1, lp_unitType, c_unitCreateIgnorePlacement, 0, lp_location, lp_facing);
    if ((PointGetHeight(lp_location) != 0.0)) {
        UnitSetHeight(UnitLastCreated(), PointGetHeight(lp_location), 0.0);
    }

    UnitUnloadModel(UnitLastCreated());
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
}

void libVCST_gf_StoryAddAliasedUnit (unit lp_unit, string lp_alias) {
    // Automatic Variable Declarations
    // Implementation
    libVCST_gv_pS_AliasedUnitCount += 1;
    libVCST_gv_pS_Aliases[libVCST_gv_pS_AliasedUnitCount] = lp_alias;
    libVCST_gv_pS_AliasedUnits[libVCST_gv_pS_AliasedUnitCount] = lp_unit;
}

void libVCST_gf_StoryReplaceAliasedUnit (unit lp_oldUnit, unit lp_newUnit) {
    // Variable Declarations
    int lv_indexUnit;

    // Automatic Variable Declarations
    int auto889F019C_ae;
    const int auto889F019C_ai = 1;

    // Variable Initialization

    // Implementation
    auto889F019C_ae = libVCST_gv_pS_AliasedUnitCount;
    lv_indexUnit = 1;
    for ( ; ( (auto889F019C_ai >= 0 && lv_indexUnit <= auto889F019C_ae) || (auto889F019C_ai < 0 && lv_indexUnit >= auto889F019C_ae) ) ; lv_indexUnit += auto889F019C_ai ) {
        if ((libVCST_gv_pS_AliasedUnits[lv_indexUnit] == lp_oldUnit)) {
            libVCST_gv_pS_AliasedUnits[lv_indexUnit] = lp_newUnit;
            return ;
        }

    }
}

void libVCST_gf_PS_ApplyAliases () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto3955D31C_ae;
    const int auto3955D31C_ai = 1;

    // Variable Initialization

    // Implementation
    auto3955D31C_ae = libVCST_gv_pS_AliasedUnitCount;
    lv_index = 1;
    for ( ; ( (auto3955D31C_ai >= 0 && lv_index <= auto3955D31C_ae) || (auto3955D31C_ai < 0 && lv_index >= auto3955D31C_ae) ) ; lv_index += auto3955D31C_ai ) {
        libNtve_gf_SendActorMessageToUnit(libVCST_gv_pS_AliasedUnits[lv_index], "ExternalFinderAdd");
        libNtve_gf_SendActorMessageToUnit(libVCST_gv_pS_AliasedUnits[lv_index], (("AliasAdd " + libVCST_gv_pS_Aliases[lv_index])));
    }
}

int libVCST_gf_PS_TravelAvailableCount () {
    // Variable Declarations
    string lv_indexLocation;
    int lv_numLocations;

    // Automatic Variable Declarations
    int autoA559A442_ae;
    int autoA559A442_ai;

    // Variable Initialization

    // Implementation
    autoA559A442_ae = CatalogEntryCount(c_gameCatalogLocation);
    autoA559A442_ai = 1;
    while (autoA559A442_ai <= autoA559A442_ae) {
        lv_indexLocation = CatalogEntryGet(c_gameCatalogLocation, autoA559A442_ai);
        if ((libVoiC_gf_StoryPlanetIsAvailable(lv_indexLocation) == true)) {
            lv_numLocations += 1;
        }

        autoA559A442_ai = autoA559A442_ai + 1;
    }
    return lv_numLocations;
}

string libVCST_gf_NextAvailableMission (string lp_location) {
    // Variable Declarations
    string lv_indexMission;

    // Automatic Variable Declarations
    int auto11BEB419_ae;
    int auto11BEB419_ai;

    // Variable Initialization

    // Implementation
    auto11BEB419_ae = CatalogEntryCount(c_gameCatalogMap);
    auto11BEB419_ai = 1;
    while (auto11BEB419_ai <= auto11BEB419_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto11BEB419_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission" && libVoiC_gf_StoryMapPlanet(lv_indexMission) == lp_location) {
            if ((libVoiC_gf_MissionStatusCheck(lv_indexMission, libVoiC_ge_MissionStatus_Available) == true)) {
                return lv_indexMission;
            }

        }
        auto11BEB419_ai = auto11BEB419_ai + 1;
    }
    return null;
}

string libVCST_gf_PS_SetLightingCutsceneFile () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void libVCST_gf_PS_LightSetStopAll () {
    // Automatic Variable Declarations
    // Implementation
    libVCST_gf_PS_LightSetPrimaryStop();
    libVCST_gf_PS_HideAllClickableLights();
}

void libVCST_gf_PS_LightSetPrimaryPlay () {
    // Automatic Variable Declarations
    // Implementation
    if ((libVCST_gf_PS_SetLightingCutsceneFile() == null)) {
        return ;
    }

    if ((libVCST_gv_pS_StorySetLightingCutscene == c_cutsceneNone)) {
        CutsceneCreateNew(libVCST_gf_PS_SetLightingCutsceneFile(), libVCST_gv_pS_ConversationCutscenePosition, 0.0, PlayerGroupAll(), false);
        libVCST_gv_pS_StorySetLightingCutscene = CutsceneLastCreated();
        CutsceneGoToBookmark(libVCST_gv_pS_StorySetLightingCutscene, "World Light Start");
        CutscenePause(libVCST_gv_pS_StorySetLightingCutscene);
    }

    CutsceneShow(libVCST_gv_pS_StorySetLightingCutscene, true);
}

void libVCST_gf_PS_LightSetPrimaryStop () {
    // Automatic Variable Declarations
    // Implementation
    if ((libVCST_gf_PS_SetLightingCutsceneFile() == null)) {
        return ;
    }

    if ((libVCST_gv_pS_StorySetLightingCutscene == c_cutsceneNone)) {
        CutsceneCreateNew(libVCST_gf_PS_SetLightingCutsceneFile(), libVCST_gv_pS_ConversationCutscenePosition, 0.0, PlayerGroupAll(), false);
        libVCST_gv_pS_StorySetLightingCutscene = CutsceneLastCreated();
        CutscenePause(libVCST_gv_pS_StorySetLightingCutscene);
    }

    CutsceneShow(libVCST_gv_pS_StorySetLightingCutscene, false);
}

void libVCST_gf_PS_TipsInit () {
    // Automatic Variable Declarations
    // Implementation
    libVCST_gf_PS_TipAddIf("PhotonCannon", false);
}

void libVCST_gf_PS_TipAddIf (string lp_tip, bool lp_condition) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_condition == false)) {
        return ;
    }

    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(UserDataGetText("CampaignTips", lp_tip, "Name", 1), libNtve_ge_TipType_NormalTip), UserDataGetText("CampaignTips", lp_tip, "Description", 1), UserDataGetText("CampaignTips", lp_tip, "Name", 1), UserDataGetImagePath("CampaignTips", lp_tip, "Icon", 1));
    HelpPanelSetHelpItemDarkenedWhenViewed(HelpPanelLastCreatedHelpItem(), false);
}

void libVCST_gf_PS_SetCurrentLocation (string lp_newLocation, bool lp_newEpisode) {
    // Variable Declarations
    int lv_episodeNumber;
    string lv_indexMission;
    string lv_indexLocation;

    // Automatic Variable Declarations
    int auto4D578797_ae;
    int auto4D578797_ai;

    // Variable Initialization

    // Implementation
    auto4D578797_ae = CatalogEntryCount(c_gameCatalogLocation);
    auto4D578797_ai = 1;
    while (auto4D578797_ai <= auto4D578797_ae) {
        lv_indexLocation = CatalogEntryGet(c_gameCatalogLocation, auto4D578797_ai);
        if ((libVoiC_gf_PC_LocationCutsceneFilter(lv_indexLocation) != null)) {
            CutsceneRemoveGlobalFilter(libVoiC_gf_PC_LocationCutsceneFilter(lv_indexLocation));
        }

        auto4D578797_ai = auto4D578797_ai + 1;
    }
    if ((libVoiC_gf_PC_LocationCutsceneFilter(lp_newLocation) != null)) {
        CutsceneAddGlobalFilter(libVoiC_gf_PC_LocationCutsceneFilter(lp_newLocation));
    }

    libVoiC_gf_PC_SetLocationActive(lp_newLocation);
    libVCST_gf_PS_UpdateEpisodeFilter();
    libVoiC_gf_PS_UpdatePlanetData();
    libVCST_gf_PS_ResetAllBackgrounds();
    if ((lp_newLocation == "Moebius") && (libVCST_gf_NextAvailableMission(lp_newLocation) == "PMoebius01")) {
    }
    else {
        if ((lp_newEpisode == true)) {
            libVCST_gf_PS_StartNewStorymodeEpisode();
        }

    }
}

void libVCST_gf_PS_UpdateEpisodeFilter () {
    // Variable Declarations
    int lv_episodeNumber;
    string lv_indexMission;

    // Automatic Variable Declarations
    int auto44D60EBD_ae;
    int auto44D60EBD_ai;

    // Variable Initialization

    // Implementation
    if ((libVCST_gf_PS_CampaignCompleted() == true)) {
        return ;
    }

    CutsceneRemoveGlobalFilter("Episode1");
    CutsceneRemoveGlobalFilter("Episode2");
    CutsceneRemoveGlobalFilter("Episode3");
    lv_episodeNumber = 1;
    auto44D60EBD_ae = CatalogEntryCount(c_gameCatalogMap);
    auto44D60EBD_ai = 1;
    while (auto44D60EBD_ai <= auto44D60EBD_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto44D60EBD_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission" && libVoiC_gf_StoryMapPlanet(lv_indexMission) == libVoiC_gf_CurrentLocation()) {
            if ((libVoiC_gf_MissionStatusCheck(lv_indexMission, libVoiC_ge_MissionStatus_Completed) == true)) {
                lv_episodeNumber += 1;
            }

        }
        auto44D60EBD_ai = auto44D60EBD_ai + 1;
    }
    CutsceneAddGlobalFilter(("Episode" + IntToString(lv_episodeNumber)));
}

void libVCST_gf_ToggleInteractives (bool lp_onOff) {
    // Variable Declarations
    string lv_indexClickable;

    // Automatic Variable Declarations
    int autoE6572FC6_ai;
    int autoE6572FC6_ae;

    // Variable Initialization

    // Implementation
    libVCST_gv_pS_InteractionOn = (lp_onOff == true);
    autoE6572FC6_ai = 1;
    autoE6572FC6_ae = UserDataInstanceCount("Clickable")+1;
    while (autoE6572FC6_ai < autoE6572FC6_ae) {
        lv_indexClickable = UserDataInstance("Clickable", autoE6572FC6_ai);
        UnitSetState(libVCST_gf_ClickableUnit(lv_indexClickable), c_unitStateHighlightable, lp_onOff);
        libVCST_gf_PS_ClickableDisplayUpdate(lv_indexClickable);
        if ((lp_onOff == false)) {
            libVCST_gf_PS_ClickableCalloutShowHide(false, lv_indexClickable);
        }

        autoE6572FC6_ai = autoE6572FC6_ai+1;
    }
}

void libVCST_gf_StoryCinematicMode (bool lp_onOff) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CinematicMode(lp_onOff, PlayerGroupAll(), c_transitionDurationImmediate);
    libVCST_gf_SetAllSoundChannelVolumesStory(libVCST_gv_pS_CurrentSoundMode, 1.0);
}

void libVCST_gf_TurnAnimationPropertiesOnOff (unit lp_unit, string lp_property, bool lp_onOff, fixed lp_blend) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_AnimBlendTimeApply(lp_blend));
    if ((lp_onOff == true)) {
        libNtve_gf_TurnAnimationPropertiesOn(libNtve_gf_MainActorofUnit(lp_unit), lp_property);
    }
    else {
        libNtve_gf_TurnAnimationPropertiesOff(libNtve_gf_MainActorofUnit(lp_unit), lp_property);
    }
    libNtve_gf_SendActorMessageToUnit(lp_unit, "AnimBlendTimeRemove");
}

void libVCST_gf_ClearAnimationwithblendtime (string lp_identifier, unit lp_unit, fixed lp_blendTime) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_AnimClear(lp_identifier, lp_blendTime));
}

void libVCST_gf_FadeStoryUITransparency (fixed lp_transparency, fixed lp_time) {
    // Variable Declarations
    string lv_indexClickable;

    // Automatic Variable Declarations
    int autoCAC6B2F3_ai;
    int autoCAC6B2F3_ae;

    // Variable Initialization

    // Implementation
    autoCAC6B2F3_ai = 1;
    autoCAC6B2F3_ae = UserDataInstanceCount("Clickable")+1;
    while (autoCAC6B2F3_ai < autoCAC6B2F3_ae) {
        lv_indexClickable = UserDataInstance("Clickable", autoCAC6B2F3_ai);
        if ((libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lv_indexClickable)].lv_callout != c_invalidDialogControlId)) {
            DialogControlFadeTransparency(libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lv_indexClickable)].lv_callout, PlayerGroupAll(), lp_time, lp_transparency);
        }

        autoCAC6B2F3_ai = autoCAC6B2F3_ai+1;
    }
}

void libVCST_gf_StoryCutsceneFade (bool lp_fadeInOut, fixed lp_duration, bool lp_waitDontWait) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_fadeInOut == true) && (lp_duration > 0.0)) {
        libVCST_gv_pS_StoryFadeDuration = lp_duration;
        TriggerExecute(libVCST_gt_PS_StoryPerformFadeIn, true, lp_waitDontWait);
    }
    else {
        CutsceneFade(lp_fadeInOut, lp_duration, Color(0,0,0), 100.0, PlayerGroupAll(), lp_waitDontWait);
    }
}

point libVCST_gf_StoryModeDefaultPosition () {
    // Automatic Variable Declarations
    // Implementation
    return libVCST_gv_pS_ConversationCutscenePosition;
}

void libVCST_gf_StoryCreateUnitForCutsceneAliasing (string lp_unitType, string lp_alias) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_unitType, 0, 1, libVCST_gf_StoryModeDefaultPosition());
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "AliasAdd " + lp_alias);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ExternalFinderAdd");
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
}

void libVCST_gf_StoryCreateUnitForCutsceneAliasingForPlayer (string lp_unitType, string lp_alias, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_unitType, 0, lp_player, libVCST_gf_StoryModeDefaultPosition());
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "AliasAdd " + lp_alias);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ExternalFinderAdd");
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
}

void libVCST_gf_ShowHideStoryUI (bool lp_hideShow) {
    // Automatic Variable Declarations
    // Implementation
    libVCST_gv_pS_UIVisible = (lp_hideShow == true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, lp_hideShow);
    libVCUI_gf_PU_BottomBarShowHide(lp_hideShow);
    if ((lp_hideShow == false)) {
        libVCST_gf_ToggleInteractives(false);
    }
    else {
        libVCST_gf_ToggleInteractives(true);
    }
}

void libVCST_gf_PS_TurnAllFidgetsOnOff (bool lp_onOff) {
    // Variable Declarations
    string lv_indexClickable;
    bool lv_sendSignals;

    // Automatic Variable Declarations
    int auto16BDDF3B_ai;
    int auto16BDDF3B_ae;

    // Variable Initialization

    // Implementation
    PlayerSetState(1, c_playerStateFidgetingEnabled, false);
    if ((lp_onOff == false) && (libVCST_gv_pS_FidgetsOn == true)) {
        lv_sendSignals = true;
        libVCST_gv_pS_FidgetsOn = false;
    }
    else if ((lp_onOff == true) && (libVCST_gv_pS_FidgetsOn == false)) {
        lv_sendSignals = true;
        libVCST_gv_pS_FidgetsOn = true;
    }
    else if (true) {
        lv_sendSignals = false;
    }
    auto16BDDF3B_ai = 1;
    auto16BDDF3B_ae = UserDataInstanceCount("Clickable")+1;
    while (auto16BDDF3B_ai < auto16BDDF3B_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto16BDDF3B_ai);
        if ((lp_onOff == true) && (lv_indexClickable == "Artanis") && (libVCST_gf_CurrentRoom() != libVCST_ge_Rooms_StoryRoomBridge)) {

        }

        if ((lp_onOff == false)) {
            if ((lv_sendSignals == true)) {
                libNtve_gf_SendActorMessageToUnit(libVCST_gf_ClickableUnit(lv_indexClickable), "Signal FidgetOff");
            }

            libVCST_gf_ClearAnimationwithblendtime("Fidget", libVCST_gf_ClickableUnit(lv_indexClickable), 0.0);
        }
        else {
            if ((lv_sendSignals == true)) {
                libNtve_gf_SendActorMessageToUnit(libVCST_gf_ClickableUnit(lv_indexClickable), "Signal FidgetOn");
            }

        }
        if ((UserDataGetInt("Clickable", lv_indexClickable, "AlternateAnimationsEnabled", 1) >= 1)) {
            if ((lp_onOff == false)) {
                if ((lv_sendSignals == true)) {
                    libNtve_gf_SendActorMessageToUnit(libVCST_gf_ClickableUnit(lv_indexClickable), "Signal AlternateOff");
                }

                libVCST_gf_ClearAnimationwithblendtime("Alternate", libVCST_gf_ClickableUnit(lv_indexClickable), 0.0);
            }
            else {
                if ((lv_sendSignals == true)) {
                    libNtve_gf_SendActorMessageToUnit(libVCST_gf_ClickableUnit(lv_indexClickable), "Signal AlternateOn");
                }

            }
        }

        auto16BDDF3B_ai = auto16BDDF3B_ai+1;
    }
}

void libVCST_gf_PS_TurnAllFidgetStatusOnOff (bool lp_onOff) {
    // Variable Declarations
    string lv_indexClickable;

    // Automatic Variable Declarations
    int auto729B8CDE_ai;
    int auto729B8CDE_ae;

    // Variable Initialization

    // Implementation
    auto729B8CDE_ai = 1;
    auto729B8CDE_ae = UserDataInstanceCount("Clickable")+1;
    while (auto729B8CDE_ai < auto729B8CDE_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto729B8CDE_ai);
        libVCST_gf_TurnFidgetStatusForClickableOnOff(lv_indexClickable, lp_onOff);
        auto729B8CDE_ai = auto729B8CDE_ai+1;
    }
}

void libVCST_gf_PS_TurnAllAlternateStatusOnOff (bool lp_onOff) {
    // Variable Declarations
    string lv_indexClickable;

    // Automatic Variable Declarations
    int auto5ABD5FF9_ai;
    int auto5ABD5FF9_ae;

    // Variable Initialization

    // Implementation
    auto5ABD5FF9_ai = 1;
    auto5ABD5FF9_ae = UserDataInstanceCount("Clickable")+1;
    while (auto5ABD5FF9_ai < auto5ABD5FF9_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto5ABD5FF9_ai);
        libVCST_gf_TurnAlternateStatusForClickableOnOff(lv_indexClickable, lp_onOff);
        auto5ABD5FF9_ai = auto5ABD5FF9_ai+1;
    }
}

void libVCST_gf_PS_ApplyAllFidgets () {
    // Variable Declarations
    string lv_indexClickable;

    // Automatic Variable Declarations
    int auto9136A3AF_ai;
    int auto9136A3AF_ae;

    // Variable Initialization

    // Implementation
    auto9136A3AF_ai = 1;
    auto9136A3AF_ae = UserDataInstanceCount("Clickable")+1;
    while (auto9136A3AF_ai < auto9136A3AF_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto9136A3AF_ai);
        if ((lv_indexClickable == "Artanis") && (libVCST_gf_CurrentRoom() != libVCST_ge_Rooms_StoryRoomBridge)) {
            libNtve_gf_SendActorMessageToUnit(libVCST_gf_ClickableUnit(lv_indexClickable), "Signal FidgetOff");
            libNtve_gf_SendActorMessageToUnit(libVCST_gf_ClickableUnit(lv_indexClickable), "Signal AlternateOff");
        }
        else {
            libNtve_gf_SendActorMessageToUnit(libVCST_gf_ClickableUnit(lv_indexClickable), "Signal FidgetOn");
            if ((UserDataGetInt("Clickable", lv_indexClickable, "AlternateAnimationsEnabled", 1) >= 1)) {
                libNtve_gf_SendActorMessageToUnit(libVCST_gf_ClickableUnit(lv_indexClickable), "Signal AlternateOn");
            }

        }
        auto9136A3AF_ai = auto9136A3AF_ai+1;
    }
}

bool libVCST_gf_PS_CampaignCompleted () {
    // Automatic Variable Declarations
    // Implementation
    return libVoiC_gf_PC_CampaignIsComplete();
}

void libVCST_gf_PS_StopStoryActivitiy (int lp_activity) {
    // Automatic Variable Declarations
    int auto47B069B5_val;

    // Implementation
    auto47B069B5_val = lp_activity;
    if (auto47B069B5_val == libVCST_ge_StoryActivities_Conversation) {
        libVCST_gf_PS_StopActivityConversation();
    }
    else if (auto47B069B5_val == libVCST_ge_StoryActivities_ViewingRoom) {
        libVCST_gf_PS_StopActivityViewRoom();
    }
    else if (auto47B069B5_val == libVCST_ge_StoryActivities_ScriptedScene) {
        libVCST_gf_PS_StopActivityScriptedScene();
    }
    else if (auto47B069B5_val == libVCST_ge_StoryActivities_Cinematic) {
        libVCST_gf_PS_StopActivityCinematic();
    }
    else {
    }
}

void libVCST_gf_RegisterRoom (int lp_room, trigger lp_prepareCallback, trigger lp_viewCallback, trigger lp_viewStopCallback, string lp_conversationScene, string lp_uIScene) {
    // Automatic Variable Declarations
    // Implementation
    libVCST_gv_pS_RoomPrepareCallbacks[(lp_room)] = lp_prepareCallback;
    libVCST_gv_pS_RoomViewCallbacks[(lp_room)] = lp_viewCallback;
    libVCST_gv_pS_RoomViewStopCallbacks[(lp_room)] = lp_viewStopCallback;
    libVCST_gv_pS_RoomConvoSceneFiles[(lp_room)] = lp_conversationScene;
    libVCST_gv_pS_RoomUISceneFiles[(lp_room)] = lp_uIScene;
}

void libVCST_gf_AddRemoveUnitForRoom (bool lp_addRemove, unit lp_unit, int lp_room) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGroupHasUnit(libVCST_gv_pS_RoomUnits[(lp_room)], lp_unit) == (lp_addRemove == true))) {
        return ;
    }

    if ((lp_addRemove == true)) {
        UnitGroupAdd(libVCST_gv_pS_RoomUnits[(lp_room)], lp_unit);
        if ((libVCST_gf_CurrentRoom() == lp_room)) {
            UnitLoadModel(lp_unit);
            libVCST_gf_PS_ApplyAliases();
            libVCST_gf_PS_ApplyAllFidgets();
        }

    }
    else {
        UnitGroupRemove(libVCST_gv_pS_RoomUnits[(lp_room)], lp_unit);
        if ((libVCST_gf_CurrentRoom() == lp_room)) {
            UnitUnloadModel(lp_unit);
        }

    }
    libVCST_gf_PS_RoomUpdateUnitVisibility();
    libVCST_gf_PS_RoomUpdateClickablesIsVisibleOnSet();
}

void libVCST_gf_StartStoryActivity (int lp_activity) {
    // Automatic Variable Declarations
    int auto17F960D6_val;

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_VCST_D4672859", "A", IntToText((lp_activity)));
    TextExpressionSetToken("Param/Expression/lib_VCST_D4672859", "B", IntToText((libVCST_gv_pS_CurrentStoryActivity)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_VCST_D4672859"), false);
    libVCST_gf_PS_StopStoryActivitiy(libVCST_gv_pS_CurrentStoryActivity);
    if ((libVCST_gv_pS_CurrentStoryActivity != libVCST_ge_StoryActivities_None)) {
        libVCST_gv_pS_LastStoryActivity = libVCST_gv_pS_CurrentStoryActivity;
    }

    libVCST_gv_pS_CurrentStoryActivity = lp_activity;
    auto17F960D6_val = lp_activity;
    if (auto17F960D6_val == libVCST_ge_StoryActivities_Conversation) {
        libVCST_gf_PS_StartActivityConversation();
    }
    else if (auto17F960D6_val == libVCST_ge_StoryActivities_ViewingRoom) {
        libVCST_gf_PS_StartActivityViewRoom();
    }
    else if (auto17F960D6_val == libVCST_ge_StoryActivities_ScriptedScene) {
        libVCST_gf_PS_StartActivityScriptedScene();
    }
    else if (auto17F960D6_val == libVCST_ge_StoryActivities_Cinematic) {
        libVCST_gf_PS_StartActivityCinematic();
    }
    else {
    }
}

int libVCST_gf_CurrentStoryActivity () {
    // Automatic Variable Declarations
    // Implementation
    return libVCST_gv_pS_CurrentStoryActivity;
}

void libVCST_gf_PS_StartActivityConversation () {
    // Variable Declarations
    string lv_indexClickable;

    // Automatic Variable Declarations
    int auto55442E7E_ai;
    int auto55442E7E_ae;

    // Variable Initialization

    // Implementation
    TriggerQueuePause(true);
    libVCST_gf_ToggleInteractives(false);
    ConversationDataStop();
    TransmissionClearAll();
    libVCST_gf_PS_TurnAllFidgetsOnOff(false);
    auto55442E7E_ai = 1;
    auto55442E7E_ae = UserDataInstanceCount("Clickable")+1;
    while (auto55442E7E_ai < auto55442E7E_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto55442E7E_ai);
        libVCST_gf_ClearAnimationwithblendtime("::Conversation", libVCST_gf_ClickableUnit(lv_indexClickable), 0.0);
        auto55442E7E_ai = auto55442E7E_ai+1;
    }
    libVCST_gf_ShowHideStoryUnits(true);
    libVCST_gf_ShowHideAmbientScenesInRoom(false, libVCST_gv_pS_CurrentRoom);
    libVCST_gf_PS_AmbientSetIsInConvoState(true);
    libVCST_gf_PS_AmbientSceneShowForConvo();
    libVCST_gf_SetAllSoundChannelVolumesStory(libNtve_ge_VolumeChannelMode_Cinematic, 0.5);
    DialogSetSubtitlePositionOverride(c_invalidDialogId);
    DialogClearSubtitlePositionOverrideControl();
}

void libVCST_gf_PS_StopActivityConversation () {
    // Automatic Variable Declarations
    // Implementation
    libVCST_gf_SetAllSoundChannelVolumesStory(libNtve_ge_VolumeChannelMode_Game, 1.5);
    SoundSetReverb("Off", 1.0, true, true);
    DialogSetSubtitlePositionOverride(c_invalidDialogId);
    libVCST_gf_PS_AmbientSetIsInConvoState(false);
}

void libVCST_gf_PS_StartActivityScriptedScene () {
    // Automatic Variable Declarations
    // Implementation
    TriggerQueuePause(true);
    libVCST_gf_ToggleInteractives(false);
    ConversationDataStop();
    TransmissionClearAll();
    libVCST_gf_ShowHideStoryUI(false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    libVCST_gf_ShowHideAmbientScenesInRoom(false, libVCST_gv_pS_CurrentRoom);
    libVCST_gf_PS_TurnAllFidgetsOnOff(false);
    libVCST_gf_ShowHideStoryUnits(true);
    UISetWorldVisible(PlayerGroupAll(), true);
    libVCST_gf_SetAllSoundChannelVolumesStory(libNtve_ge_VolumeChannelMode_Cinematic, 0.5);
    DialogClearSubtitlePositionOverride();
    DialogClearSubtitlePositionOverrideControl();
}

void libVCST_gf_PS_StopActivityScriptedScene () {
    // Automatic Variable Declarations
    // Implementation
    SoundSetReverb("Off", 1.0, true, true);
    libVCST_gf_StoryCinematicMode(false);
    libVCST_gf_SetAllSoundChannelVolumesStory(libNtve_ge_VolumeChannelMode_Game, 1.5);
}

void libVCST_gf_PS_StartActivityCinematic () {
    // Automatic Variable Declarations
    // Implementation
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    ConversationDataStop();
    TransmissionClearAll();
    libVCST_gf_ShowHideStoryUI(false);
    libVCST_gf_SetAllSoundChannelVolumesStory(libNtve_ge_VolumeChannelMode_Cinematic, 0.5);
    DialogClearSubtitlePositionOverride();
    DialogClearSubtitlePositionOverrideControl();
}

void libVCST_gf_PS_StopActivityCinematic () {
    // Automatic Variable Declarations
    // Implementation
    libVCST_gf_SetAllSoundChannelVolumesStory(libNtve_ge_VolumeChannelMode_Game, 0.5);
}

void libVCST_gf_PS_StartActivityViewRoom () {
    // Automatic Variable Declarations
    // Implementation
    GameCheatAllow(c_gameCheatProgress, false);
    GameCheatAllow(c_gameCheatScene, false);
    GameCheatAllow(c_gameCheatCredits, false);
    GameCheatAllow(c_gameCheatResearch, false);
    libVCST_gf_PS_TurnAllFidgetsOnOff(true);
    libVCST_gv_pS_ActivityViewRoomTarget = libVCST_gv_pS_CurrentRoom;
    TriggerExecute(libVCST_gv_pS_RoomViewCallbacks[(libVCST_gv_pS_CurrentRoom)], true, true);
    CutsceneStop(libVCST_gv_pS_RoomUICutscene);
    libVCST_gf_ShowHideAmbientScenesInRoom(true, libVCST_gv_pS_CurrentRoom);
    libVCST_gf_DisplayBackground(libVCST_gv_pS_CurrentRoom);
    if ((libVCST_gv_pS_RoomConvoSceneFiles[(libVCST_gf_CurrentRoom())] != null)) {
        CutsceneCreateNew(libVCST_gv_pS_RoomUISceneFiles[(libVCST_gf_CurrentRoom())], libVCST_gf_StoryModeDefaultPosition(), 0.0, PlayerGroupAll(), true);
        CutsceneGoToBookmark(CutsceneLastCreated(), "StartLoop");
        libVCST_gv_pS_RoomUICutscene = CutsceneLastCreated();
    }

    libVCST_gf_PS_RoomApplySceneFilters();
    libVCST_gf_PS_ClickableDisplayUpdateAll();
}

void libVCST_gf_PS_StopActivityViewRoom () {
    // Automatic Variable Declarations
    // Implementation
    TriggerExecute(libVCST_gv_pS_RoomViewStopCallbacks[(libVCST_gv_pS_ActivityViewRoomTarget)], true, true);
    CutsceneStop(libVCST_gv_pS_RoomUICutscene);
}

void libVCST_gf_EnterRoom (int lp_room) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_room != libVCST_gf_CurrentRoom())) {
        TransmissionClearAll();
        ConversationDataStop();
    }

    if ((lp_room != libVCST_gv_pS_NextRoom)) {
        libVCST_gv_pS_NextRoom = lp_room;
    }

    libVCST_gf_PS_PreloadRoomConversations(lp_room);
    TriggerExecute(libVCST_gv_pS_MovingToRoomCallback, true, true);
    libVCST_gf_ChangeRoom(lp_room);
    libVCST_gf_StartStoryActivity(libVCST_ge_StoryActivities_ViewingRoom);
    TriggerExecute(libVCST_gv_pS_RoomEnteredCallback, true, true);
    libVCST_gf_PS_UpdateBottomBar();
    libVCST_gf_PS_PreloadRoomUIs(lp_room);
}

void libVCST_gf_ChangeRoom (int lp_room) {
    // Variable Declarations
    string lv_indexClickable;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_VCST_78EFE760", "A", IntToText((lp_room)));
    TextExpressionSetToken("Param/Expression/lib_VCST_78EFE760", "B", IntToText((libVCST_gv_pS_CurrentRoom)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_VCST_78EFE760"), false);
    libVCST_gv_pS_LastRoom = libVCST_gv_pS_CurrentRoom;
    if ((lp_room != libVCST_gv_pS_CurrentRoom)) {
        StorySetChange();
        SoundSetReverb("Off", 1.0, true, true);
        libVCST_gf_ShowHideAmbientScenesInRoom(false, libVCST_gf_CurrentRoom());
        libVCST_gf_HideBackground(libVCST_gf_CurrentRoom());
        libVCST_gv_pS_LastUniqueRoom = libVCST_gv_pS_CurrentRoom;
        libVCST_gv_pS_CurrentRoom = lp_room;
    }

    libVCST_gf_PS_RoomUpdateUnitVisibility();
    libVCST_gf_PS_RoomUpdateClickablesIsVisibleOnSet();
    libVCST_gf_PS_RoomLoadUnits();
    libVCST_gf_PS_PrepareRoom();
}

void libVCST_gf_ClearRoom (int lp_room) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto300770A4_g;
    int auto300770A4_u;

    // Variable Initialization

    // Implementation
    auto300770A4_g = libVCST_gv_pS_RoomUnits[(lp_room)];
    auto300770A4_u = UnitGroupCount(auto300770A4_g, c_unitCountAll);
    for (;; auto300770A4_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto300770A4_g, auto300770A4_u);
        if (lv_indexUnit == null) { break; }
        libVCST_gf_AddRemoveUnitForRoom(false, lv_indexUnit, lp_room);
    }
}

void libVCST_gf_SetInArchives (bool lp_inArchives) {
    // Automatic Variable Declarations
    // Implementation
    libVCST_gv_pS_InArchives = lp_inArchives;
}

void libVCST_gf_SetEnterRoomCallback (trigger lp_roomEnterCallback) {
    // Automatic Variable Declarations
    // Implementation
    libVCST_gv_pS_RoomEnteredCallback = lp_roomEnterCallback;
}

void libVCST_gf_SetMovingToRoomCallback (trigger lp_movingToRoomCallback) {
    // Automatic Variable Declarations
    // Implementation
    libVCST_gv_pS_MovingToRoomCallback = lp_movingToRoomCallback;
}

int libVCST_gf_CurrentRoom () {
    // Automatic Variable Declarations
    // Implementation
    return libVCST_gv_pS_CurrentRoom;
}

int libVCST_gf_CurrentRoomCutscene () {
    // Automatic Variable Declarations
    // Implementation
    return libVCST_gv_pS_RoomUICutscene;
}

int libVCST_gf_NextRoom () {
    // Automatic Variable Declarations
    // Implementation
    return libVCST_gv_pS_NextRoom;
}

int libVCST_gf_PreviousRoom () {
    // Automatic Variable Declarations
    // Implementation
    return libVCST_gv_pS_LastRoom;
}

bool libVCST_gf_RoomIsUnlocked (int lp_room) {
    // Automatic Variable Declarations
    int autoC452F745_val;

    // Implementation
    autoC452F745_val = lp_room;
    if (autoC452F745_val == libVCST_ge_Rooms_StoryRoomBridge) {
        return (libVoiC_gf_NumberOfMissions(libVoiC_ge_MissionCountOptions_Completed) >= 3);
    }
    else if (autoC452F745_val == libVCST_ge_Rooms_StoryRoomWarCouncil) {
        return (libVoiC_gf_NumberOfMissions(libVoiC_ge_MissionCountOptions_Completed) >= 3);
    }
    else if (autoC452F745_val == libVCST_ge_Rooms_StoryRoomShip) {
        return (libVoiC_gf_NumberOfMissions(libVoiC_ge_MissionCountOptions_Completed) >= 4);
    }
    else {
    }
    return false;
}

bool libVCST_gf_IsInArchives () {
    // Automatic Variable Declarations
    // Implementation
    return libVCST_gv_pS_InArchives;
}

void libVCST_gf_PS_PreloadRoomUIs (int lp_room) {
    // Automatic Variable Declarations
    int auto6BF805D6_val;

    // Implementation
    auto6BF805D6_val = lp_room;
    if (auto6BF805D6_val == libVCST_ge_Rooms_StoryRoomBridge) {
        if ((libVoiC_gf_MissionAvailableOnPlanet(libVoiC_gf_CurrentLocation()) == true)) {
            libVCUI_gf_PU_MissionPreload(libVCST_gf_NextAvailableMission(libVoiC_gf_CurrentLocation()));
        }
        else {
            libVCUI_gf_PU_StarmapPreload();
        }
    }
    else if (auto6BF805D6_val == libVCST_ge_Rooms_StoryRoomShip) {
        libVCUI_gf_PU_SoAPreload();
    }
    else if (auto6BF805D6_val == libVCST_ge_Rooms_StoryRoomWarCouncil) {
        libVCUI_gf_PU_ArmyPreload();
    }
    else {
    }
}

void libVCST_gf_PS_UpdateBottomBar () {
    // Variable Declarations
    string lv_indexClickable;
    bool[4] lv_roomHasConvo;
    text lv_buttonTooltip;

    // Automatic Variable Declarations
    int autoBBB2DE8C_ai;
    int autoBBB2DE8C_ae;

    // Variable Initialization

    // Implementation
    if ((libVCST_gf_CurrentRoom() != libVCST_ge_Rooms_StoryRoomBridge) && (libVCST_gf_CurrentRoom() != libVCST_ge_Rooms_StoryRoomWarCouncil) && (libVCST_gf_CurrentRoom() != libVCST_ge_Rooms_StoryRoomShip)) {
        return ;
    }

    libVCUI_gf_PU_BottomBarButtonEnable(libVCUI_ge_PU_BottomBarButton_BridgeRoom, true);
    if ((libVCST_gf_CurrentRoom() != libVCST_ge_Rooms_StoryRoomBridge)) {
        libVCUI_gf_PU_BottomBarButtonToggle(libVCUI_ge_PU_BottomBarButton_BridgeRoom, false);
    }
    else {
        libVCUI_gf_PU_BottomBarButtonHighlight(libVCUI_ge_PU_BottomBarButton_BridgeRoom, false);
        libVCUI_gf_PU_BottomBarButtonToggle(libVCUI_ge_PU_BottomBarButton_BridgeRoom, true);
    }
    if ((libVCST_gf_CurrentRoom() != libVCST_ge_Rooms_StoryRoomWarCouncil)) {
        if ((libVoiC_gf_ArmyHasUnusedTech() == true)) {
            libVCUI_gf_PU_BottomBarButtonHighlight(libVCUI_ge_PU_BottomBarButton_ArmyRoom, true);
        }
        else {
            libVCUI_gf_PU_BottomBarButtonHighlight(libVCUI_ge_PU_BottomBarButton_ArmyRoom, false);
        }
        libVCUI_gf_PU_BottomBarButtonEnable(libVCUI_ge_PU_BottomBarButton_ArmyRoom, true);
        libVCUI_gf_PU_BottomBarButtonToggle(libVCUI_ge_PU_BottomBarButton_ArmyRoom, false);
    }
    else {
        libVCUI_gf_PU_BottomBarButtonHighlight(libVCUI_ge_PU_BottomBarButton_ArmyRoom, false);
        libVCUI_gf_PU_BottomBarButtonToggle(libVCUI_ge_PU_BottomBarButton_ArmyRoom, true);
    }
    if ((libVCST_gf_RoomIsUnlocked(libVCST_ge_Rooms_StoryRoomShip) == false)) {
        libVCUI_gf_PU_BottomBarButtonEnable(libVCUI_ge_PU_BottomBarButton_ShipRoom, false);
        libVCUI_gf_PU_BottomBarButtonHighlight(libVCUI_ge_PU_BottomBarButton_ShipRoom, false);
    }
    else if ((libVCST_gf_CurrentRoom() != libVCST_ge_Rooms_StoryRoomShip)) {
        if ((libVoiC_gf_SpearofAdunHasUnusedTech() == true) && (libVoiC_gv_pC_SoACurrency > libVoiC_gv_pCX_SoAPreviousTotalPower)) {
            libVCUI_gf_PU_BottomBarButtonHighlight(libVCUI_ge_PU_BottomBarButton_ShipRoom, true);
        }
        else {
            libVCUI_gf_PU_BottomBarButtonHighlight(libVCUI_ge_PU_BottomBarButton_ShipRoom, false);
        }
        libVCUI_gf_PU_BottomBarButtonEnable(libVCUI_ge_PU_BottomBarButton_ShipRoom, true);
        libVCUI_gf_PU_BottomBarButtonToggle(libVCUI_ge_PU_BottomBarButton_ShipRoom, false);
    }
    else if (true) {
        libVCUI_gf_PU_BottomBarButtonHighlight(libVCUI_ge_PU_BottomBarButton_ShipRoom, false);
        libVCUI_gf_PU_BottomBarButtonToggle(libVCUI_ge_PU_BottomBarButton_ShipRoom, true);
    }
    if ((libVCST_gf_CurrentRoom() != libVCST_ge_Rooms_StoryRoomMissionArchives)) {
        libVCUI_gf_PU_BottomBarButtonEnable(libVCUI_ge_PU_BottomBarButton_MissionArchivesRoom, true);
    }

    autoBBB2DE8C_ai = 1;
    autoBBB2DE8C_ae = UserDataInstanceCount("Clickable")+1;
    while (autoBBB2DE8C_ai < autoBBB2DE8C_ae) {
        lv_indexClickable = UserDataInstance("Clickable", autoBBB2DE8C_ai);
        if ((libVCST_gf_ClickableInRoom(lv_indexClickable, libVCST_ge_Rooms_StoryRoomBridge) == true) && (libVCST_gf_PS_ClickableIsNew(lv_indexClickable) == true) && (libVCST_gf_PS_ClickableType(lv_indexClickable) == libVCST_ge_ClickableType_Conversation)) {
            lv_roomHasConvo[libVCUI_ge_PU_BottomBarButton_BridgeRoom] = true;
        }

        if ((libVCST_gf_ClickableInRoom(lv_indexClickable, libVCST_ge_Rooms_StoryRoomWarCouncil) == true) && (libVCST_gf_PS_ClickableIsNew(lv_indexClickable) == true) && (libVCST_gf_PS_ClickableType(lv_indexClickable) == libVCST_ge_ClickableType_Conversation)) {
            lv_roomHasConvo[libVCUI_ge_PU_BottomBarButton_ArmyRoom] = true;
        }

        if ((libVCST_gf_ClickableInRoom(lv_indexClickable, libVCST_ge_Rooms_StoryRoomShip) == true) && (libVCST_gf_PS_ClickableIsNew(lv_indexClickable) == true) && (libVCST_gf_PS_ClickableType(lv_indexClickable) == libVCST_ge_ClickableType_Conversation)) {
            lv_roomHasConvo[libVCUI_ge_PU_BottomBarButton_ShipRoom] = true;
        }

        autoBBB2DE8C_ai = autoBBB2DE8C_ai+1;
    }
    if ((libVoiC_gf_MissionAvailableOnPlanet(libVoiC_gf_CurrentLocation()) == true)) {
        lv_buttonTooltip = StringExternal("Param/Value/lib_VCST_9FC7B77E");
    }
    else {
        lv_buttonTooltip = StringExternal("Param/Value/lib_VCST_66D216E0");
    }
    if ((lv_roomHasConvo[(libVCUI_ge_PU_BottomBarButton_BridgeRoom)] == true)) {
        TextExpressionSetToken("Param/Expression/lib_VCST_DA08AEFD", "A", lv_buttonTooltip);
        TextExpressionSetToken("Param/Expression/lib_VCST_DA08AEFD", "B", StringExternal("Param/Value/lib_VCST_527B01E9"));
        lv_buttonTooltip = TextExpressionAssemble("Param/Expression/lib_VCST_DA08AEFD");
    }

    libVCUI_gf_PU_BottomBarSetExtendedTooltip(libVCUI_ge_PU_BottomBarButton_BridgeRoom, lv_buttonTooltip);
    if ((libVoiC_gf_ArmyHasUnusedTech() == true)) {
        lv_buttonTooltip = StringExternal("Param/Value/lib_VCST_072AF21C");
    }
    else {
        lv_buttonTooltip = null;
    }
    if ((lv_roomHasConvo[(libVCUI_ge_PU_BottomBarButton_ArmyRoom)] == true)) {
        if (((lv_buttonTooltip != null) == true)) {
            TextExpressionSetToken("Param/Expression/lib_VCST_1DA5675D", "A", lv_buttonTooltip);
            TextExpressionSetToken("Param/Expression/lib_VCST_1DA5675D", "B", StringExternal("Param/Value/lib_VCST_F4E79A35"));
            lv_buttonTooltip = TextExpressionAssemble("Param/Expression/lib_VCST_1DA5675D");
        }
        else {
            lv_buttonTooltip = StringExternal("Param/Value/lib_VCST_40E36B28");
        }
    }

    libVCUI_gf_PU_BottomBarSetExtendedTooltip(libVCUI_ge_PU_BottomBarButton_ArmyRoom, lv_buttonTooltip);
    if ((libVoiC_gf_SpearofAdunHasUnusedTech() == true)) {
        lv_buttonTooltip = StringExternal("Param/Value/lib_VCST_54FF6F53");
    }
    else {
        lv_buttonTooltip = null;
    }
    if ((lv_roomHasConvo[(libVCUI_ge_PU_BottomBarButton_ShipRoom)] == true)) {
        if (((lv_buttonTooltip != null) == true)) {
            TextExpressionSetToken("Param/Expression/lib_VCST_5C3555AF", "A", lv_buttonTooltip);
            TextExpressionSetToken("Param/Expression/lib_VCST_5C3555AF", "B", StringExternal("Param/Value/lib_VCST_85CAAA90"));
            lv_buttonTooltip = TextExpressionAssemble("Param/Expression/lib_VCST_5C3555AF");
        }
        else {
            lv_buttonTooltip = StringExternal("Param/Value/lib_VCST_064A2DC3");
        }
    }

    libVCUI_gf_PU_BottomBarSetExtendedTooltip(libVCUI_ge_PU_BottomBarButton_ShipRoom, lv_buttonTooltip);
}

int libVCST_gf_PS_BottomBarButtonForRoom (int lp_room) {
    // Automatic Variable Declarations
    int auto8AB79A07_val;

    // Implementation
    auto8AB79A07_val = lp_room;
    if (auto8AB79A07_val == libVCST_ge_Rooms_StoryRoomBridge) {
        return libVCUI_ge_PU_BottomBarButton_BridgeRoom;
    }
    else if (auto8AB79A07_val == libVCST_ge_Rooms_StoryRoomWarCouncil) {
        return libVCUI_ge_PU_BottomBarButton_ArmyRoom;
    }
    else if (auto8AB79A07_val == libVCST_ge_Rooms_StoryRoomShip) {
        return libVCUI_ge_PU_BottomBarButton_ShipRoom;
    }
    else {
    }
    return libVCUI_ge_PU_BottomBarButton_None;
}

void libVCST_gf_PS_RoomLoadUnits () {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto8F428406_g;
    int auto8F428406_u;
    unitgroup auto4BA2BDE2_g;
    int auto4BA2BDE2_u;

    // Variable Initialization

    // Implementation
    auto8F428406_g = libVCST_gv_pS_RoomUnits[(libVCST_gv_pS_CurrentRoom)];
    auto8F428406_u = UnitGroupCount(auto8F428406_g, c_unitCountAll);
    for (;; auto8F428406_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto8F428406_g, auto8F428406_u);
        if (lv_indexUnit == null) { break; }
        if ((UnitGroupHasUnit(libVCST_gv_pS_RoomUnits[(libVCST_gv_pS_LastRoom)], lv_indexUnit) == false)) {
            UnitLoadModel(lv_indexUnit);
        }

    }
    auto4BA2BDE2_g = libVCST_gv_pS_RoomUnits[(libVCST_gv_pS_LastRoom)];
    auto4BA2BDE2_u = UnitGroupCount(auto4BA2BDE2_g, c_unitCountAll);
    for (;; auto4BA2BDE2_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto4BA2BDE2_g, auto4BA2BDE2_u);
        if (lv_indexUnit == null) { break; }
        if ((UnitGroupHasUnit(libVCST_gv_pS_RoomUnits[(libVCST_gv_pS_CurrentRoom)], lv_indexUnit) == false)) {
            UnitUnloadModel(lv_indexUnit);
        }

    }
    libVCST_gf_PS_ApplyAliases();
    libVCST_gf_PS_ApplyAllFidgets();
}

void libVCST_gf_PS_RoomUpdateUnitVisibility () {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup autoB1C4E56F_g;
    int autoB1C4E56F_u;

    // Variable Initialization

    // Implementation
    autoB1C4E56F_g = libVCST_gv_pS_VisibleUnits;
    autoB1C4E56F_u = UnitGroupCount(autoB1C4E56F_g, c_unitCountAll);
    for (;; autoB1C4E56F_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoB1C4E56F_g, autoB1C4E56F_u);
        if (lv_indexUnit == null) { break; }
        if ((libVCST_gf_PS_RoomHasUnit(libVCST_gv_pS_CurrentRoom, lv_indexUnit) == true)) {
            if ((libNtve_gf_UnitIsHidden(lv_indexUnit) == true)) {
                libNtve_gf_ShowHideUnit(lv_indexUnit, true);
            }

        }
        else {
            if ((libNtve_gf_UnitIsHidden(lv_indexUnit) == false)) {
                libNtve_gf_ShowHideUnit(lv_indexUnit, false);
            }

        }
    }
}

void libVCST_gf_PS_RoomUpdateClickablesIsVisibleOnSet () {
    // Variable Declarations
    unit lv_indexUnit;
    string lv_indexClickable;

    // Automatic Variable Declarations
    int auto67E2991E_ai;
    int auto67E2991E_ae;

    // Variable Initialization

    // Implementation
    auto67E2991E_ai = 1;
    auto67E2991E_ae = UserDataInstanceCount("Clickable")+1;
    while (auto67E2991E_ai < auto67E2991E_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto67E2991E_ai);
        if ((libVCST_gf_ClickableUnit(lv_indexClickable) != null)) {
            if ((libNtve_gf_UnitIsVisibleToPlayer(libVCST_gf_ClickableUnit(lv_indexClickable), 1) == true)) {
                libVCST_gf_PS_ClickableSetIsVisibleOnSet(lv_indexClickable, true);
            }
            else {
                libVCST_gf_PS_ClickableSetIsVisibleOnSet(lv_indexClickable, false);
            }
        }
        else {
            libVCST_gf_PS_ClickableSetIsVisibleOnSet(lv_indexClickable, false);
        }
        auto67E2991E_ai = auto67E2991E_ai+1;
    }
}

void libVCST_gf_PS_PrepareRoom () {
    // Automatic Variable Declarations
    int autoD705B45B_val;

    // Implementation
    TriggerExecute(libVCST_gv_pS_RoomPrepareCallbacks[(libVCST_gv_pS_CurrentRoom)], true, true);
    autoD705B45B_val = libVCST_gv_pS_CurrentRoom;
    if (autoD705B45B_val == libVCST_ge_Rooms_StoryRoomVoid) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
        UISetWorldVisible(PlayerGroupAll(), true);
        libVCST_gf_ShowHideStoryUnits(false);
    }
    else {
    }
}

bool libVCST_gf_PS_RoomHasUnit (int lp_room, unit lp_testUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupHasUnit(libVCST_gv_pS_RoomUnits[(lp_room)], lp_testUnit);
}

void libVCST_gf_PS_RoomInit () {
    // Automatic Variable Declarations
    // Implementation
    libVCST_gf_RegisterRoom(libVCST_ge_Rooms_StoryRoomMissionArchives, libVCST_gt_PS_RoomPrepareUI, libVCST_gt_PS_RoomViewArchives, libVCST_gt_PS_RoomViewStopArchives, null, null);
    libVCST_gf_RegisterRoom(libVCST_ge_Rooms_StoryRoomMissionScreen, libVCST_gt_PS_RoomPrepareMission, libVCST_gt_PS_RoomViewMission, libVCST_gt_PS_RoomViewStopMission, null, null);
    libVCST_gf_RegisterRoom(libVCST_ge_Rooms_StoryRoomTravelScreen, libVCST_gt_PS_RoomPrepareStarmap, libVCST_gt_PS_RoomViewTravel, libVCST_gt_PS_RoomViewStopTravel, null, null);
    libVCST_gf_RegisterRoom(libVCST_ge_Rooms_StoryRoomArmyUpgrade, libVCST_gt_PS_RoomPrepareArmyUpgrade, libVCST_gt_PS_RoomViewArmyUpgrade, libVCST_gt_PS_RoomViewStopArmyUpgrade, null, null);
    libVCST_gf_RegisterRoom(libVCST_ge_Rooms_StoryRoomShipUpgrade, libVCST_gt_PS_RoomPrepareShipUpgrade, libVCST_gt_PS_RoomViewShipUpgrade, libVCST_gt_PS_RoomViewStopShipUpgrade, null, null);
    libVCST_gf_RegisterRoom(libVCST_ge_Rooms_StoryRoomDebugStoryCheat, libVCST_gt_PS_RoomPrepareUI, libVCST_gt_PS_RoomViewStoryCheat, libVCST_gt_PS_RoomViewStopStoryCheat, null, null);
}

void libVCST_gf_PS_PreloadRoomConversations (int lp_room) {
    // Variable Declarations
    string lv_indexClickable;

    // Automatic Variable Declarations
    int autoE3F8C74A_ai;
    int autoE3F8C74A_ae;

    // Variable Initialization

    // Implementation
    autoE3F8C74A_ai = 1;
    autoE3F8C74A_ae = UserDataInstanceCount("Clickable")+1;
    while (autoE3F8C74A_ai < autoE3F8C74A_ae) {
        lv_indexClickable = UserDataInstance("Clickable", autoE3F8C74A_ai);
        if ((libVCST_gf_ClickableInRoom(lv_indexClickable, lp_room) == true) && (libVCST_gf_PS_ClickableIsEnabled(lv_indexClickable) == true)) {
            ConversationDataPreloadLines(libVCST_gf_PS_ClickableConversation(lv_indexClickable));
            ConversationDataPreloadLines(libVCST_gf_PS_ClickableResponse(lv_indexClickable));
        }

        autoE3F8C74A_ai = autoE3F8C74A_ai+1;
    }
}

void libVCST_gf_PS_RoomApplySceneFilters () {
    // Variable Declarations
    string lv_indexClickable;
    int lv_episodeNumber;
    string lv_indexMission;

    // Automatic Variable Declarations
    int autoFE31B176_ai;
    int autoFE31B176_ae;

    // Variable Initialization

    // Implementation
    autoFE31B176_ai = 1;
    autoFE31B176_ae = UserDataInstanceCount("Clickable")+1;
    while (autoFE31B176_ai < autoFE31B176_ae) {
        lv_indexClickable = UserDataInstance("Clickable", autoFE31B176_ai);
        if ((libVCST_gf_PS_ClickableSceneNameToken(lv_indexClickable) != null)) {
            if ((libVCST_gf_ClickableInRoom(lv_indexClickable, libVCST_gf_CurrentRoom()) == true) && (UnitGroupHasUnit(libVCST_gv_pS_VisibleUnits, libVCST_gf_ClickableUnit(lv_indexClickable)) == true)) {
                if ((libVCST_gf_NextAvailableMission(libVoiC_gf_CurrentLocation()) == "PUlnar03") && (lv_indexClickable == "DTLeader")) {
                    CutsceneAddFilter(libVCST_gv_pS_RoomUICutscene, "DTLeaderSpecial");
                }
                else {
                    CutsceneAddFilter(libVCST_gv_pS_RoomUICutscene, libVCST_gf_PS_ClickableSceneNameToken(lv_indexClickable));
                }
            }
            else {
                if ((libVCST_gf_NextAvailableMission(libVoiC_gf_CurrentLocation()) == "PUlnar03") && (lv_indexClickable == "DTLeader")) {
                    CutsceneRemoveFilter(libVCST_gv_pS_RoomUICutscene, "DTLeaderSpecial");
                }
                else {
                    CutsceneRemoveFilter(libVCST_gv_pS_RoomUICutscene, libVCST_gf_PS_ClickableSceneNameToken(lv_indexClickable));
                }
            }
        }

        autoFE31B176_ai = autoFE31B176_ai+1;
    }
}

string libVCST_gf_PS_SelectBackgroundCutscene (string lp_room) {
    // Variable Declarations
    string lv_sceneName;
    string lv_cutsceneFile;
    int lv_backgroundIndex;

    // Automatic Variable Declarations
    int autoDD527CDD_ae;
    const int autoDD527CDD_ai = 1;

    // Variable Initialization
    lv_sceneName = "";

    // Implementation
    if ((lp_room != "Invalid") && (lp_room != "")) {
        autoDD527CDD_ae = UserDataInstanceCount("Backgrounds");
        lv_backgroundIndex = 1;
        for ( ; ( (autoDD527CDD_ai >= 0 && lv_backgroundIndex <= autoDD527CDD_ae) || (autoDD527CDD_ai < 0 && lv_backgroundIndex >= autoDD527CDD_ae) ) ; lv_backgroundIndex += autoDD527CDD_ai ) {
            if ((libVoiC_gf_CurrentLocation() == UserDataGetGameLink("Backgrounds", UserDataInstance("Backgrounds", lv_backgroundIndex), "Location", 1)) && (UserDataGetString("Backgrounds", UserDataInstance("Backgrounds", lv_backgroundIndex), "Room", 1) == lp_room)) {
                if ((UserDataGetGameLink("Backgrounds", UserDataInstance("Backgrounds", lv_backgroundIndex), "Mission", 1) == libVCST_gf_NextAvailableMission(libVoiC_gf_CurrentLocation())) && (UserDataGetString("Backgrounds", UserDataInstance("Backgrounds", lv_backgroundIndex), "Occurance", 1) == "Pre")) {
                    lv_sceneName = UserDataGetString("Backgrounds", UserDataInstance("Backgrounds", lv_backgroundIndex), "Cutscene", 1);
                    lv_cutsceneFile = "Cutscenes\\" + lv_sceneName + ".SC2Cutscene";
                    break;
                }

                if ((UserDataGetGameLink("Backgrounds", UserDataInstance("Backgrounds", lv_backgroundIndex), "Mission", 1) == libVoiC_gf_LastSuccessfulMission()) && (UserDataGetString("Backgrounds", UserDataInstance("Backgrounds", lv_backgroundIndex), "Occurance", 1) == "Post")) {
                    lv_sceneName = UserDataGetString("Backgrounds", UserDataInstance("Backgrounds", lv_backgroundIndex), "Cutscene", 1);
                    lv_cutsceneFile = "Cutscenes\\" + lv_sceneName + ".SC2Cutscene";
                    break;
                }

                if ((UserDataGetString("Backgrounds", UserDataInstance("Backgrounds", lv_backgroundIndex), "Occurance", 1) == "Default")) {
                    lv_sceneName = UserDataGetString("Backgrounds", UserDataInstance("Backgrounds", lv_backgroundIndex), "Cutscene", 1);
                    lv_cutsceneFile = "Cutscenes\\" + lv_sceneName + ".SC2Cutscene";
                }

            }

        }
    }

    return lv_cutsceneFile;
}

string libVCST_gf_PS_ConvertRoomtoBackgroundRoomName (int lp_roomPreset) {
    // Automatic Variable Declarations
    int auto984B2137_val;

    // Implementation
    auto984B2137_val = lp_roomPreset;
    if (auto984B2137_val == libVCST_ge_Rooms_StoryRoomBridge) {
        return "Bridge";
    }
    else if (auto984B2137_val == libVCST_ge_Rooms_StoryRoomShip) {
        return "Solar Core";
    }
    else if (auto984B2137_val == libVCST_ge_Rooms_StoryRoomWarCouncil) {
        return "War Council";
    }
    else {
        return "Invalid";
    }
}

int libVCST_gf_PS_ConvertRoomtoBackgroundRoomNumber (int lp_roomPreset) {
    // Automatic Variable Declarations
    int autoB3D22A0C_val;

    // Implementation
    autoB3D22A0C_val = lp_roomPreset;
    if (autoB3D22A0C_val == libVCST_ge_Rooms_StoryRoomBridge) {
        return 1;
    }
    else if (autoB3D22A0C_val == libVCST_ge_Rooms_StoryRoomWarCouncil) {
        return 2;
    }
    else if (autoB3D22A0C_val == libVCST_ge_Rooms_StoryRoomShip) {
        return 3;
    }
    else {
        return 0;
    }
}

void libVCST_gf_PS_ResetAllBackgrounds () {
    // Automatic Variable Declarations
    // Implementation
    libVCST_gf_RemoveBackground(libVCST_ge_Rooms_StoryRoomBridge);
    libVCST_gf_RemoveBackground(libVCST_ge_Rooms_StoryRoomShip);
    libVCST_gf_RemoveBackground(libVCST_ge_Rooms_StoryRoomWarCouncil);
}

void libVCST_gf_PS_HideAllBackgrounds () {
    // Automatic Variable Declarations
    // Implementation
    libVCST_gf_HideBackground(libVCST_ge_Rooms_StoryRoomBridge);
    libVCST_gf_HideBackground(libVCST_ge_Rooms_StoryRoomShip);
    libVCST_gf_HideBackground(libVCST_ge_Rooms_StoryRoomWarCouncil);
}

void libVCST_gf_DisplayBackground (int lp_room) {
    // Variable Declarations
    string lv_backgroundCutscene;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_backgroundCutscene = libVCST_gf_PS_SelectBackgroundCutscene(libVCST_gf_PS_ConvertRoomtoBackgroundRoomName(lp_room));
    if ((lv_backgroundCutscene != null)) {
        if ((libVCST_gv_pS_Backgrounds[libVCST_gf_PS_ConvertRoomtoBackgroundRoomNumber(lp_room)] != c_cutsceneNone)) {
            CutsceneShow(libVCST_gv_pS_Backgrounds[libVCST_gf_PS_ConvertRoomtoBackgroundRoomNumber(lp_room)], true);
        }
        else {
            CutsceneCreateNew(lv_backgroundCutscene, libVCST_gf_StoryModeDefaultPosition(), 0.0, PlayerGroupAll(), true);
            CutsceneGoToBookmark(CutsceneLastCreated(), "LoopStart");
            libVCST_gv_pS_Backgrounds[libVCST_gf_PS_ConvertRoomtoBackgroundRoomNumber(lp_room)] = CutsceneLastCreated();
        }
        libVCST_gv_pS_ActiveBackground = libVCST_gv_pS_Backgrounds[libVCST_gf_PS_ConvertRoomtoBackgroundRoomNumber(lp_room)];
        libVCST_gf_SetBackgroundUIViewMode(true);
        libVCST_gf_SetBackgroundConversationViewMode(false);
        libVCST_gf_SetBackgroundScreenShake(true);
    }

}

void libVCST_gf_HideBackground (int lp_room) {
    // Variable Declarations
    int lv_roomNumber;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libVCST_gf_SetBackgroundUIViewMode(false);
    libVCST_gf_SetBackgroundConversationViewMode(false);
    lv_roomNumber = libVCST_gf_PS_ConvertRoomtoBackgroundRoomNumber(lp_room);
    if ((lv_roomNumber != 0)) {
        if ((libVCST_gv_pS_Backgrounds[lv_roomNumber] == libVCST_gv_pS_ActiveBackground)) {
            libVCST_gv_pS_ActiveBackground = c_cutsceneNone;
        }

        CutsceneShow(libVCST_gv_pS_Backgrounds[lv_roomNumber], false);
    }

    libVCST_gf_SetBackgroundScreenShake(false);
}

void libVCST_gf_RemoveBackground (int lp_room) {
    // Variable Declarations
    int lv_roomNumber;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libVCST_gf_SetBackgroundUIViewMode(false);
    libVCST_gf_SetBackgroundConversationViewMode(false);
    lv_roomNumber = libVCST_gf_PS_ConvertRoomtoBackgroundRoomNumber(lp_room);
    if ((lv_roomNumber != 0)) {
        if ((libVCST_gv_pS_Backgrounds[lv_roomNumber] == libVCST_gv_pS_ActiveBackground)) {
            libVCST_gv_pS_ActiveBackground = c_cutsceneNone;
        }

        CutsceneStop(libVCST_gv_pS_Backgrounds[lv_roomNumber]);
        libVCST_gv_pS_Backgrounds[lv_roomNumber] = c_cutsceneNone;
    }

    libVCST_gf_SetBackgroundScreenShake(false);
}

void libVCST_gf_SetBackgroundUIViewMode (bool lp_enabled) {
    // Automatic Variable Declarations
    // Implementation
    if ((libVCST_gv_pS_ActiveBackground != c_cutsceneNone)) {
        if ((lp_enabled == true)) {
            CutsceneAddFilter(libVCST_gv_pS_ActiveBackground, "UIView");
        }
        else {
            CutsceneRemoveFilter(libVCST_gv_pS_ActiveBackground, "UIView");
        }
    }

}

void libVCST_gf_SetBackgroundConversationViewMode (bool lp_enabled) {
    // Automatic Variable Declarations
    // Implementation
    if ((libVCST_gv_pS_ActiveBackground != c_cutsceneNone)) {
        if ((lp_enabled == true)) {
            CutsceneAddFilter(libVCST_gv_pS_ActiveBackground, "ConversationView");
        }
        else {
            CutsceneRemoveFilter(libVCST_gv_pS_ActiveBackground, "ConversationView");
        }
    }

}

void libVCST_gf_SetBackgroundScreenShake (bool lp_onOff) {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(libVCST_gt_PS_BackgroundScreenShake, lp_onOff);
}

void libVCST_gf_ShowHideAllAmbientScenes (bool lp_showHide) {
    // Variable Declarations
    int lv_indexRoom;
    int lv_indexScene;
    int lv_indexEvent;

    // Automatic Variable Declarations
    const int auto4D0A1FE0_ae = libVCST_gv_pSC_MaxAmbientRooms;
    const int auto4D0A1FE0_ai = 1;
    const int auto066F6A07_ae = libVCST_gv_pSC_MaxAmbientRooms;
    const int auto066F6A07_ai = 1;
    const int autoE741D42F_ae = libVCST_gv_pSC_MaxAmbientRooms;
    const int autoE741D42F_ai = 1;
    const int auto022AC773_ae = libVCST_gv_pSC_MaxAmbientScenes;
    const int auto022AC773_ai = 1;
    const int autoC28F0D64_ae = libVCST_gv_pSC_MaxAmbientEvents;
    const int autoC28F0D64_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_showHide == true)) {
        lv_indexRoom = 1;
        for ( ; ( (auto066F6A07_ai >= 0 && lv_indexRoom <= auto066F6A07_ae) || (auto066F6A07_ai < 0 && lv_indexRoom >= auto066F6A07_ae) ) ; lv_indexRoom += auto066F6A07_ai ) {
            libVCST_gv_pS_AmbientScenesHidden[lv_indexRoom] = false;
        }
    }
    else {
        lv_indexRoom = 1;
        for ( ; ( (auto4D0A1FE0_ai >= 0 && lv_indexRoom <= auto4D0A1FE0_ae) || (auto4D0A1FE0_ai < 0 && lv_indexRoom >= auto4D0A1FE0_ae) ) ; lv_indexRoom += auto4D0A1FE0_ai ) {
            libVCST_gv_pS_AmbientScenesHidden[lv_indexRoom] = true;
        }
    }
    lv_indexRoom = 0;
    lv_indexRoom = 1;
    for ( ; ( (autoE741D42F_ai >= 0 && lv_indexRoom <= autoE741D42F_ae) || (autoE741D42F_ai < 0 && lv_indexRoom >= autoE741D42F_ae) ) ; lv_indexRoom += autoE741D42F_ai ) {
        lv_indexScene = 1;
        for ( ; ( (auto022AC773_ai >= 0 && lv_indexScene <= auto022AC773_ae) || (auto022AC773_ai < 0 && lv_indexScene >= auto022AC773_ae) ) ; lv_indexScene += auto022AC773_ai ) {
            lv_indexEvent = 1;
            for ( ; ( (autoC28F0D64_ai >= 0 && lv_indexEvent <= autoC28F0D64_ae) || (autoC28F0D64_ai < 0 && lv_indexEvent >= autoC28F0D64_ae) ) ; lv_indexEvent += autoC28F0D64_ai ) {
                CutsceneShow(libVCST_gv_pS_AmbientEvents[lv_indexRoom][lv_indexScene][lv_indexEvent], lp_showHide);
            }
        }
    }
}

void libVCST_gf_ShowHideAmbientScenesInRoom (bool lp_showHide, int lp_room) {
    // Variable Declarations
    int lv_indexScene;
    int lv_indexEvent;

    // Automatic Variable Declarations
    const int autoF8306E8C_ae = libVCST_gv_pSC_MaxAmbientScenes;
    const int autoF8306E8C_ai = 1;
    const int auto9AE66909_ae = libVCST_gv_pSC_MaxAmbientEvents;
    const int auto9AE66909_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libVCST_gf_PS_AmbientGetRoomNumber(lp_room) == 0)) {
        return ;
    }

    if ((lp_showHide == true)) {
        libVCST_gv_pS_AmbientScenesHidden[libVCST_gf_PS_AmbientGetRoomNumber(lp_room)] = false;
    }
    else {
        libVCST_gv_pS_AmbientScenesHidden[libVCST_gf_PS_AmbientGetRoomNumber(lp_room)] = true;
    }
    lv_indexScene = 1;
    for ( ; ( (autoF8306E8C_ai >= 0 && lv_indexScene <= autoF8306E8C_ae) || (autoF8306E8C_ai < 0 && lv_indexScene >= autoF8306E8C_ae) ) ; lv_indexScene += autoF8306E8C_ai ) {
        lv_indexEvent = 1;
        for ( ; ( (auto9AE66909_ai >= 0 && lv_indexEvent <= auto9AE66909_ae) || (auto9AE66909_ai < 0 && lv_indexEvent >= auto9AE66909_ae) ) ; lv_indexEvent += auto9AE66909_ai ) {
            CutsceneShow(libVCST_gv_pS_AmbientEvents[libVCST_gf_PS_AmbientGetRoomNumber(lp_room)][lv_indexScene][lv_indexEvent], lp_showHide);
        }
    }
}

void libVCST_gf_PS_AmbientSceneShowForConvo () {
    // Variable Declarations
    int lv_indexScene;
    int lv_indexEvent;

    // Automatic Variable Declarations
    const int autoEEF3BC7B_ae = libVCST_gv_pSC_MaxAmbientScenes;
    const int autoEEF3BC7B_ai = 1;
    const int auto9AC7A288_ae = libVCST_gv_pSC_MaxAmbientEvents;
    const int auto9AC7A288_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libVCST_gf_PS_AmbientGetRoomNumber(libVCST_gv_pS_CurrentRoom) == 0)) {
        return ;
    }

    lv_indexScene = 1;
    for ( ; ( (autoEEF3BC7B_ai >= 0 && lv_indexScene <= autoEEF3BC7B_ae) || (autoEEF3BC7B_ai < 0 && lv_indexScene >= autoEEF3BC7B_ae) ) ; lv_indexScene += autoEEF3BC7B_ai ) {
        if ((UserDataGetInt("AmbientScenes", libVCST_gv_pS_AmbientSceneInstance[libVCST_gf_PS_AmbientGetRoomNumber(libVCST_gv_pS_CurrentRoom)][lv_indexScene], "ActiveInConvo", 1) == 1) && (libVCST_gv_pS_AmbientSceneStatus[libVCST_gf_PS_AmbientGetRoomNumber(libVCST_gv_pS_CurrentRoom)][lv_indexScene] == libVCST_ge_PS_AmbientSceneStatusType_PS_AmbientScenePlaying)) {
            lv_indexEvent = 1;
            for ( ; ( (auto9AC7A288_ai >= 0 && lv_indexEvent <= auto9AC7A288_ae) || (auto9AC7A288_ai < 0 && lv_indexEvent >= auto9AC7A288_ae) ) ; lv_indexEvent += auto9AC7A288_ai ) {
                CutsceneShow(libVCST_gv_pS_AmbientEvents[libVCST_gf_PS_AmbientGetRoomNumber(libVCST_gv_pS_CurrentRoom)][lv_indexScene][lv_indexEvent], true);
            }
        }

    }
}

trigger auto_libVCST_gf_PlayAmbientScene_Trigger = null;
int auto_libVCST_gf_PlayAmbientScene_lp_room;
string auto_libVCST_gf_PlayAmbientScene_lp_scene;

void libVCST_gf_PlayAmbientScene (int lp_room, string lp_scene) {
    auto_libVCST_gf_PlayAmbientScene_lp_room = lp_room;
    auto_libVCST_gf_PlayAmbientScene_lp_scene = lp_scene;

    if (auto_libVCST_gf_PlayAmbientScene_Trigger == null) {
        auto_libVCST_gf_PlayAmbientScene_Trigger = TriggerCreate("auto_libVCST_gf_PlayAmbientScene_TriggerFunc");
    }

    TriggerExecute(auto_libVCST_gf_PlayAmbientScene_Trigger, false, false);
}

bool auto_libVCST_gf_PlayAmbientScene_TriggerFunc (bool testConds, bool runActions) {
    int lp_room = auto_libVCST_gf_PlayAmbientScene_lp_room;
    string lp_scene = auto_libVCST_gf_PlayAmbientScene_lp_scene;

    // Automatic Variable Declarations
    // Implementation
    libVCST_gf_PS_AmbientScenePlay(libVCST_gf_PS_AmbientGetRoomNumber(lp_room), lp_scene);
    return true;
}

void libVCST_gf_PS_AmbientScenePlay (int lp_room, string lp_scene) {
    // Variable Declarations
    int lv_continuousSceneIndex;
    int lv_sceneIndex;
    int lv_eventIndex;

    // Automatic Variable Declarations
    const int auto308CD3B0_ae = libVCST_gv_pSC_MaxAmbientScenes;
    const int auto308CD3B0_ai = 1;
    const int autoB34D80F7_ae = libVCST_gv_pSC_MaxAmbientScenes;
    const int autoB34D80F7_ai = 1;
    const int auto054CD9AB_ae = libVCST_gv_pSC_MaxAmbientEvents;
    const int auto054CD9AB_ai = 1;
    const int autoF4041980_ae = libVCST_gv_pSC_MaxAmbientEvents;
    const int autoF4041980_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_scene == null)) {
        return ;
    }

    if ((libVCST_gf_PS_AmbientSceneIsContinuousScene(lp_scene) == true)) {
        if ((libVCST_gf_PS_AmbientSceneContinuousSceneIsPlaying(lp_scene) == true)) {
            lv_continuousSceneIndex = 1;
            for ( ; ( (auto308CD3B0_ai >= 0 && lv_continuousSceneIndex <= auto308CD3B0_ae) || (auto308CD3B0_ai < 0 && lv_continuousSceneIndex >= auto308CD3B0_ae) ) ; lv_continuousSceneIndex += auto308CD3B0_ai ) {
                if ((libVCST_gv_pS_AmbientSceneInstance[lp_room][lv_continuousSceneIndex] == lp_scene)) {
                    TimerStart(libVCST_gv_pS_AmbientSceneTimer[lp_room][lv_continuousSceneIndex], UserDataGetFixed("AmbientScenes", lp_scene, "NextSceneDelay", 1), false, c_timeReal);
                    return ;
                }

            }
        }
        else {
            libVCST_gf_PS_AmbientSceneSetContinuousScenePlaying(lp_scene, true);
        }
    }

    if ((libVCST_gv_pS_AmbientSceneCountPerRoom[lp_room] >= libVCST_gv_pSC_MaxAmbientScenes)) {
        TextExpressionSetToken("Param/Expression/lib_VCST_0814D95A", "A", IntToText(lp_room));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_VCST_0814D95A"), true);
        return ;
    }

    lv_sceneIndex = 1;
    for ( ; ( (autoB34D80F7_ai >= 0 && lv_sceneIndex <= autoB34D80F7_ae) || (autoB34D80F7_ai < 0 && lv_sceneIndex >= autoB34D80F7_ae) ) ; lv_sceneIndex += autoB34D80F7_ai ) {
        if ((libVCST_gv_pS_AmbientSceneStatus[lp_room][lv_sceneIndex] == libVCST_ge_PS_AmbientSceneStatusType_PS_AmbientSceneUnused)) {
            break;
        }

    }
    libVCST_gv_pS_AmbientSceneInstance[lp_room][lv_sceneIndex] = lp_scene;
    libVCST_gv_pS_AmbientSceneCountPerRoom[lp_room] += 1;
    lv_eventIndex = 1;
    for ( ; ( (auto054CD9AB_ai >= 0 && lv_eventIndex <= auto054CD9AB_ae) || (auto054CD9AB_ai < 0 && lv_eventIndex >= auto054CD9AB_ae) ) ; lv_eventIndex += auto054CD9AB_ai ) {
        if ((UserDataGetUserInstance("AmbientScenes", lp_scene, "AmbientEvents", lv_eventIndex) != null)) {
            libVCST_gf_PS_AmbientEventPlay(lp_room, lv_sceneIndex, lv_eventIndex, UserDataGetUserInstance("AmbientScenes", lp_scene, "AmbientEvents", lv_eventIndex));
        }

    }
    libVCST_gv_pS_AmbientSceneStatus[lp_room][lv_sceneIndex] = libVCST_ge_PS_AmbientSceneStatusType_PS_AmbientSceneFinished;
    lv_eventIndex = 0;
    lv_eventIndex = 1;
    for ( ; ( (autoF4041980_ai >= 0 && lv_eventIndex <= autoF4041980_ae) || (autoF4041980_ai < 0 && lv_eventIndex >= autoF4041980_ae) ) ; lv_eventIndex += autoF4041980_ai ) {
        if ((libVCST_gv_pS_AmbientEvents[lp_room][lv_sceneIndex][lv_eventIndex] != c_cutsceneNone)) {
            libVCST_gv_pS_AmbientSceneStatus[lp_room][lv_sceneIndex] = libVCST_ge_PS_AmbientSceneStatusType_PS_AmbientScenePlaying;
            break;
        }

    }
    if (((libVCST_gv_pS_AmbientSceneStatus[lp_room][lv_sceneIndex] == libVCST_ge_PS_AmbientSceneStatusType_PS_AmbientSceneFinished) || (libVCST_gf_PS_AmbientSceneWaitForEventsToFinish(lp_scene) != true))) {
        TimerStart(libVCST_gv_pS_AmbientSceneTimer[lp_room][lv_sceneIndex], UserDataGetFixed("AmbientScenes", lp_scene, "NextSceneDelay", 1), false, c_timeReal);
    }

}

void libVCST_gf_PS_AmbientSceneOver (int lp_room, int lp_scene) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libVCST_gf_PS_AmbientSceneWaitForEventsToFinish(libVCST_gv_pS_AmbientSceneInstance[lp_room][lp_scene]) == true)) {
        if ((UserDataGetUserInstance("AmbientScenes", libVCST_gv_pS_AmbientSceneInstance[lp_room][lp_scene], "NextScene", 1) != null)) {
            libVCST_gv_pS_AmbientSceneStatus[lp_room][lp_scene] = libVCST_ge_PS_AmbientSceneStatusType_PS_AmbientSceneFinished;
            TimerStart(libVCST_gv_pS_AmbientSceneTimer[lp_room][lp_scene], UserDataGetFixed("AmbientScenes", libVCST_gv_pS_AmbientSceneInstance[lp_room][lp_scene], "NextSceneDelay", 1), false, c_timeReal);
        }

    }
    else {
        if ((TimerGetRemaining(libVCST_gv_pS_AmbientSceneTimer[lp_room][lp_scene]) <= 0.0)) {
            libVCST_gf_PS_AmbientSceneRemove(lp_room, lp_scene);
        }
        else {
            libVCST_gv_pS_AmbientSceneStatus[lp_room][lp_scene] = libVCST_ge_PS_AmbientSceneStatusType_PS_AmbientSceneFinished;
        }
    }
}

void libVCST_gf_PS_AmbientSceneRemove (int lp_room, int lp_scene) {
    // Automatic Variable Declarations
    // Implementation
    libVCST_gv_pS_AmbientSceneInstance[lp_room][lp_scene] = null;
    libVCST_gv_pS_AmbientSceneCountPerRoom[lp_room] -= 1;
    libVCST_gv_pS_AmbientSceneStatus[lp_room][lp_scene] = libVCST_ge_PS_AmbientSceneStatusType_PS_AmbientSceneUnused;
}

void libVCST_gf_PS_AmbientSceneSetContinuousScenePlaying (string lp_ambientScene, bool lp_isPlaying) {
    // Automatic Variable Declarations
    // Implementation
    UserDataSetInt("AmbientScenes", lp_ambientScene, "ContinuousSceneIsPlaying", 1, BoolToInt(lp_isPlaying));
}

void libVCST_gf_PS_AmbientEventFinished (int lp_Room, int lp_scene) {
    // Variable Declarations
    int lv_indexEvent;

    // Automatic Variable Declarations
    const int autoB6868FC5_ae = libVCST_gv_pSC_MaxAmbientEvents;
    const int autoB6868FC5_ai = 1;

    // Variable Initialization

    // Implementation
    lv_indexEvent = 1;
    for ( ; ( (autoB6868FC5_ai >= 0 && lv_indexEvent <= autoB6868FC5_ae) || (autoB6868FC5_ai < 0 && lv_indexEvent >= autoB6868FC5_ae) ) ; lv_indexEvent += autoB6868FC5_ai ) {
        if ((libVCST_gv_pS_AmbientEvents[lp_Room][lp_scene][lv_indexEvent] != c_cutsceneNone)) {
            return ;
        }

    }
    libVCST_gf_PS_AmbientSceneOver(lp_Room, lp_scene);
}

void libVCST_gf_PS_AmbientEventPlay (int lp_room, int lp_scene, int lp_eventIndex, string lp_ambientEvent) {
    // Automatic Variable Declarations
    // Implementation
    if ((UserDataGetString("AmbientEvents", lp_ambientEvent, "CutsceneFile", 1) == "")) {
        return ;
    }

    if ((UserDataGetGameLink("AmbientEvents", lp_ambientEvent, "CategoryRequiredForEvent", 1) != "") && (libVoiC_gf_PC_ArmyCategoryState(UserDataGetGameLink("AmbientEvents", lp_ambientEvent, "CategoryRequiredForEvent", 1)) == c_armyCategoryStateLocked)) {
        return ;
    }

    CutsceneCreateNew(UserDataGetString("AmbientEvents",lp_ambientEvent,"CutsceneFile",1), libVCST_gv_pS_ConversationCutscenePosition, 0.0, PlayerGroupAll(), false);
    libVCST_gv_pS_AmbientEvents[lp_room][lp_scene][lp_eventIndex] = CutsceneLastCreated();
    if ((UserDataGetString("AmbientEvents", lp_ambientEvent, "Bookmark", 1) != "")) {
        CutsceneGoToBookmark(libVCST_gv_pS_AmbientEvents[lp_room][lp_scene][lp_eventIndex], UserDataGetString("AmbientEvents", lp_ambientEvent, "Bookmark", 1));
    }

    if ((libVCST_gv_pS_AmbientScenesHidden[lp_room] == true)) {
        if ((libVCST_gv_pS_AmbientIsInConvoState == true) && (UserDataGetInt("AmbientScenes", libVCST_gv_pS_AmbientSceneInstance[lp_room][lp_scene], "ActiveInConvo", 1) == 1) && (libVCST_gf_PS_AmbientGetRoomNumber(libVCST_gv_pS_CurrentRoom) == lp_room)) {
            CutsceneShow(CutsceneLastCreated(), true);
        }
        else {
            CutsceneShow(CutsceneLastCreated(), false);
        }
    }

    CutscenePlay(CutsceneLastCreated());
}

void libVCST_gf_PS_AmbientSetIsInConvoState (bool lp_isInConvoState) {
    // Automatic Variable Declarations
    // Implementation
    libVCST_gv_pS_AmbientIsInConvoState = lp_isInConvoState;
}

bool libVCST_gf_PS_AmbientSceneWaitForEventsToFinish (string lp_ambientSceneInstance) {
    // Automatic Variable Declarations
    // Implementation
    if ((UserDataGetInt("AmbientScenes", lp_ambientSceneInstance, "WaitUntilEventsFinish", 1) == 1)) {
        return true;
    }
    else {
        return false;
    }
}

bool libVCST_gf_PS_AmbientSceneIsContinuousScene (string lp_AmbientSceneInstance) {
    // Automatic Variable Declarations
    // Implementation
    if ((UserDataGetInt("AmbientScenes", lp_AmbientSceneInstance, "IsContinuousScene", 1) == 1)) {
        return true;
    }
    else {
        return false;
    }
}

bool libVCST_gf_PS_AmbientSceneContinuousSceneIsPlaying (string lp_ambientScene) {
    // Automatic Variable Declarations
    // Implementation
    if ((UserDataGetInt("AmbientScenes", lp_ambientScene, "ContinuousSceneIsPlaying", 1) == 1)) {
        return true;
    }
    else {
        return false;
    }
}

int libVCST_gf_PS_AmbientGetRoomNumber (int lp_room) {
    // Automatic Variable Declarations
    int auto9516A70F_val;

    // Implementation
    auto9516A70F_val = lp_room;
    if (auto9516A70F_val == libVCST_ge_Rooms_StoryRoomBridge) {
        return 1;
    }
    else if (auto9516A70F_val == libVCST_ge_Rooms_StoryRoomWarCouncil) {
        return 2;
    }
    else if (auto9516A70F_val == libVCST_ge_Rooms_StoryRoomShip) {
        return 3;
    }
    else {
        return 0;
    }
}

void libVCST_gf_StartAmbientConversationTimer () {
    // Automatic Variable Declarations
    // Implementation
    TimerStart(libVCST_gv_pS_AmbientConversationTimer, RandomInt(libVCST_gv_pS_AmbientConversationMinTimeToTrigger, libVCST_gv_pS_AmbientConversationMaxTimeToTrigger), false, c_timeGame);
}

void libVCST_gf_RegisterAmbientConversationRoom (int lp_room) {
    // Automatic Variable Declarations
    // Implementation
    libVCST_gv_pS_AmbientConversationValidRoom[(lp_room)] = true;
}

void libVCST_gf_PS_AmbientConversationTimerPauseUnpause (bool lp_pauseUnpause) {
    // Automatic Variable Declarations
    // Implementation
    TimerPause(libVCST_gv_pS_AmbientConversationTimer, lp_pauseUnpause);
}

void libVCST_gf_PS_AmbientConversationAnimationsOnOff (bool lp_onOff) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_onOff == true)) {
        if ((libVCST_gf_ClickableInRoom("DTLeader", libVCST_ge_Rooms_StoryRoomWarCouncil) == true) && (libVCST_gf_CurrentRoom() == libVCST_ge_Rooms_StoryRoomWarCouncil)) {
            ActorSend(libNtve_gf_MainActorofUnit(libVCST_gf_ClickableUnit("DTLeader")), "AnimGroupApply Left");
        }

    }
    else {
        if ((libVCST_gf_ClickableInRoom("DTLeader", libVCST_ge_Rooms_StoryRoomWarCouncil) == true) && (libVCST_gf_CurrentRoom() == libVCST_ge_Rooms_StoryRoomWarCouncil)) {
            if ((libVCST_gv_pS_ConvoActive == true)) {
                libVCST_gf_ClearAnimationwithblendtime("::Conversation", libVCST_gf_ClickableUnit("DTLeader"), 0.0);
                ActorSend(libNtve_gf_MainActorofUnit(libVCST_gf_ClickableUnit("DTLeader")), "AnimGroupRemove Left Instant 0.000000");
                libNtve_gf_SimpleLookAtStart(libVCST_gf_ClickableUnit("DTLeader"), "VerySlowStandingSubtle", libNtve_gf_MainActorofUnit(libVCST_gf_ClickableUnit("Preserver")));
                libNtve_gf_SimpleLookAtStop(libVCST_gf_ClickableUnit("DTLeader"), "InstantStandingSubtle");
                libNtve_gf_SendActorMessageToUnit(libVCST_gf_ClickableUnit("DTLeader"), "AnimCancelActiveBlends");
            }
            else {
                ActorSend(libNtve_gf_MainActorofUnit(libVCST_gf_ClickableUnit("DTLeader")), "AnimGroupRemove Left");
                libNtve_gf_SimpleLookAtStart(libVCST_gf_ClickableUnit("DTLeader"), "VerySlowStandingSubtle", libNtve_gf_MainActorofUnit(libVCST_gf_ClickableUnit("Preserver")));
                libNtve_gf_SimpleLookAtStop(libVCST_gf_ClickableUnit("DTLeader"), "VerySlowStandingSubtle");
            }
        }

    }
}

void libVCST_gf_PS_AmbientConversationStart () {
    // Automatic Variable Declarations
    // Implementation
    libVCST_gf_PS_KaraxPickupTimerPauseUnpause(true);
    libVCST_gf_PS_TurnAllFidgetStatusOnOff(false);
    libVCST_gf_PS_TurnAllAlternateStatusOnOff(false);
    if ((libVCST_gf_ClickableInRoom("DTLeader", libVCST_gf_CurrentRoom()) == true) && (libVCST_gf_CurrentRoom() == libVCST_ge_Rooms_StoryRoomWarCouncil)) {
        ActorSend(libNtve_gf_MainActorofUnit(libVCST_gf_ClickableUnit("DTLeader")), "AnimClear Fidget 0.750000");
    }

    libVCST_gf_PS_AmbientConversationAnimationsOnOff(true);
    libVCST_gv_pS_AmbientConversationRunning = true;
}

void libVCST_gf_PS_AmbientConversationEnd () {
    // Automatic Variable Declarations
    // Implementation
    if ((libVCST_gv_pS_AmbientConversationRunning == true)) {
        libVCST_gf_PS_AmbientConversationAnimationsOnOff(false);
        libVCST_gf_PS_TurnAllFidgetStatusOnOff(true);
        libVCST_gf_PS_TurnAllAlternateStatusOnOff(true);
        libVCST_gf_PS_KaraxPickupTimerPauseUnpause(false);
        libVCST_gf_StartAmbientConversationTimer();
        libVCST_gv_pS_AmbientConversationRunning = false;
    }

}

void libVCST_gf_StartKaraxDronePickupTimer () {
    // Automatic Variable Declarations
    // Implementation
    TimerStart(libVCST_gv_pS_KaraxPickupTimer, RandomInt(libVCST_gv_pS_KaraxPickupMinTimeToTrigger, libVCST_gv_pS_KaraxPickupMaxTimeToTrigger), false, c_timeGame);
    TriggerEnable(libVCST_gt_PS_KaraxPickupTimerExpired, true);
}

void libVCST_gf_StopKaraxDronePickupTimer () {
    // Automatic Variable Declarations
    // Implementation
    TriggerStop(libVCST_gt_PS_KaraxPickupTimerExpired);
    TriggerEnable(libVCST_gt_PS_KaraxPickupTimerExpired, false);
    libNtve_gf_StopTimer(libVCST_gv_pS_KaraxPickupTimer);
}

void libVCST_gf_PS_KaraxPickupTimerPauseUnpause (bool lp_pauseUnpause) {
    // Automatic Variable Declarations
    // Implementation
    TimerPause(libVCST_gv_pS_KaraxPickupTimer, lp_pauseUnpause);
}

void libVCST_gf_PS_ApplyEyeDarts () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(libVCST_gf_ClickableUnit("Artanis")), "PS_EyeDart", "Eye Detect 00", c_animFlagPlayForever, c_animTimeDefault);
}

void libVCST_gf_PS_RemoveEyeDarts () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(libVCST_gf_ClickableUnit(libVCST_gv_pS_CurrentConvoChar)), "PS_EyeDart");
}

void libVCST_gf_PS_ConversationPlayClickable (string lp_clickable) {
    // Variable Declarations
    string lv_indexClickable;

    // Automatic Variable Declarations
    int auto34F56E92_ai;
    int auto34F56E92_ae;

    // Variable Initialization

    // Implementation
    if ((libVCST_gf_PS_ClickableType(lp_clickable) == libVCST_ge_ClickableType_Ambient)) {
        libVCST_gf_PS_ConversationPlayResponse(lp_clickable, null, false);
        return ;
    }

    libVCST_gv_pS_LastConversationSkipped = false;
    ConversationDataPreloadLines(libVCST_gf_PS_ClickableConversation(lp_clickable));
    SoundLengthQueryWait();
    libVCST_gv_pS_ConvoActive = true;
    libVCST_gf_PS_ConversationSnapshotStart(libVCST_gf_PS_ClickableConversation(lp_clickable));
    libVCST_gv_pS_ActiveConvoBookmarkToken = libVCST_gf_PS_ClickableSceneNameToken(lp_clickable);
    libVCST_gf_PS_AmbientConversationEnd();
    libVCST_gf_StartStoryActivity(libVCST_ge_StoryActivities_Conversation);
    libVCST_gf_ShowHideStoryUI(false);
    libVCST_gf_StoryCinematicMode(true);
    libVCST_gf_PS_PrepareRoom();
    libVCST_gf_DisplayBackground(libVCST_gv_pS_CurrentRoom);
    libVCST_gf_SetBackgroundUIViewMode(false);
    libVCST_gf_SetBackgroundConversationViewMode(true);
    if ((libVCST_gf_CurrentRoom() == libVCST_ge_Rooms_StoryRoomShip)) {
        libVCST_gf_StopKaraxDronePickupTimer();
    }

    TriggerExecute(libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickable)].lv_preCallback, true, true);
    libVCST_gv_pS_CurrentConvoChar = lp_clickable;
    libVoiC_gf_DisplayConversationTimestamp(libVCST_gf_PS_ClickableConversation(lp_clickable));
    libVCST_gf_PS_ApplyEyeDarts();
    ConversationDataRun(libVCST_gf_PS_ClickableConversation(lp_clickable), PlayerGroupAll(), c_conversationSkipFull, true);
    libVCST_gv_pS_ConvoActive = false;
    libVCST_gv_pS_LastConversationSkipped = ConversationDataWasSkipped();
    libVCST_gv_pS_CurrentConvoChar = null;
    libVCST_gf_PS_ConversationSnapshotEnd(libVCST_gf_PS_ClickableConversation(lp_clickable));
    if ((ConversationDataWasSkipped() == false)) {
        libVCST_gf_ClickableSetNew(lp_clickable, false);
        libVCST_gf_PS_ClickableSetCalloutName(lp_clickable);
    }

    libVCST_gf_PS_RemoveEyeDarts();
    libVCST_gf_PS_ConversationSceneClose();
    auto34F56E92_ai = 1;
    auto34F56E92_ae = UserDataInstanceCount("Clickable")+1;
    while (auto34F56E92_ai < auto34F56E92_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto34F56E92_ai);
        libNtve_gf_SimpleLookAtStop(libVCST_gf_ClickableUnit(lv_indexClickable), "InstantHeadOnly");
        libNtve_gf_SimpleLookAtStop(libVCST_gf_ClickableUnit(lv_indexClickable), "Turret_Right");
        libNtve_gf_SimpleLookAtStop(libVCST_gf_ClickableUnit(lv_indexClickable), "Turret_Left");
        libNtve_gf_SimpleLookAtStop(libVCST_gf_ClickableUnit(lv_indexClickable), "InstantHeadOnlySubtle");
        libNtve_gf_SendActorMessageToUnit(libVCST_gf_ClickableUnit(lv_indexClickable), "AnimCancelActiveBlends ::Conversation");
        auto34F56E92_ai = auto34F56E92_ai+1;
    }
    TriggerExecute(libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickable)].lv_postCallback, true, true);
    libVCST_gf_StoryCinematicMode(false);
    if ((ConversationDataWasSkipped() == true)) {
        CutsceneFade(true, 0.0, Color(0,0,0), 100.0, PlayerGroupAll(), false);
    }
    else {
        CutsceneFade(true, 0.5, Color(0,0,0), 100.0, PlayerGroupAll(), false);
    }
}

void libVCST_gf_PS_ConversationSnapshotStart (string lp_conversation) {
    // Automatic Variable Declarations
    // Implementation
    ConversationDataSaveNodeState(lp_conversation, libVCST_gf_PS_TempConversationBank(), ("StoryConversations"));
    ConversationDataResetNodeState(lp_conversation);
    ConversationDataLoadNodeState(lp_conversation, libVoiC_gf_StoryBank(), ("ConversationSnapshot"));
    libVCST_gf_PS_BackupSnapshotStates();
    libVCST_gf_PS_LoadSnapshotStates();
}

void libVCST_gf_PS_ConversationSnapshotEnd (string lp_conversation) {
    // Automatic Variable Declarations
    // Implementation
    if ((ConversationDataWasSkipped() == true)) {
        ConversationDataLoadNodeState(lp_conversation, libVCST_gf_PS_TempConversationBank(), ("StoryConversations"));
    }

    libVCST_gf_PS_RestoreWriterStates();
}

void libVCST_gf_PlayScriptedConversation (string lp_conversation, int lp_skipping, string lp_primaryCharacter, int lp_fadeStyle, trigger lp_lineCallback) {
    // Variable Declarations
    string lv_indexClickable;
    int lv_skipMode;

    // Automatic Variable Declarations
    int autoCAA2A321_ai;
    int autoCAA2A321_ae;

    // Variable Initialization

    // Implementation
    ConversationDataStop();
    ConversationDataPreloadLines(lp_conversation);
    libVCST_gv_pS_ConvoActive = true;
    libVCST_gv_pS_LastConversationSkipped = false;
    libVCST_gv_pS_LastScenePlayedFull = true;
    libVCST_gv_pS_ScriptedLineCallback = lp_lineCallback;
    if ((lp_primaryCharacter != null)) {
        libVCST_gv_pS_ActiveConvoBookmarkToken = libVCST_gf_PS_ClickableSceneNameToken(lp_primaryCharacter);
    }

    libVCST_gf_ShowHideStoryUI(false);
    libVCST_gf_SetBackgroundUIViewMode(false);
    libVCST_gf_SetBackgroundConversationViewMode(true);
    libVoiC_gf_CinematicFade(false, 0.0, Color(0.00, 0.00, 0.00), true);
    SoundLengthQueryWait();
    libVoiC_gf_CinematicFade(true, 0.0, Color(0.00, 0.00, 0.00), true);
    lv_skipMode = lp_skipping;
    libVCST_gf_StoryCinematicMode(true);
    libVoiC_gf_DisplayConversationTimestamp(lp_conversation);
    if ((lv_skipMode != c_conversationSkipNone) && ((lp_fadeStyle & libVCST_ge_PS_FadeStyle_FadeOutOnSkip) != 0)) {
        TriggerExecute(libVCST_gt_PS_ConversationWaitForSkip, true, false);
        lv_skipMode = c_conversationSkipNone;
    }

    libVCST_gf_PS_ApplyEyeDarts();
    if (((lp_fadeStyle & libVCST_ge_PS_FadeStyle_FadeInAtStart) != 0)) {
        libVCST_gf_StoryCutsceneFade(true, 1.0, false);
    }

    if (((lp_fadeStyle & libVCST_ge_PS_FadeStyle_BlockingFadeInAtStart) != 0)) {
        libVCST_gf_StoryCutsceneFade(true, 2.0, true);
    }

    if ((libVCST_gv_pS_LastConversationSkipped == false)) {
        ConversationDataRun(lp_conversation, PlayerGroupAll(), lv_skipMode, true);
    }

    if ((TriggerActiveCount(libVCST_gt_PS_ConversationWaitForSkip) > 0)) {
        TriggerStop(libVCST_gt_PS_ConversationWaitForSkip);
        if (((lp_fadeStyle & libVCST_ge_PS_FadeStyle_FadeOutAfter) != 0)) {
            libVCST_gf_StoryCutsceneFade(false, 1.0, true);
        }

    }

    TriggerStop(lp_lineCallback);
    if ((ConversationDataWasSkipped() == true)) {
        libVCST_gv_pS_LastConversationSkipped = true;
        libVCST_gv_pS_LastScenePlayedFull = false;
    }

    if ((libVCST_gv_pS_LastConversationSkipped == true)) {
        if ((libVCST_gv_pS_CutsceneStatEvent != -1)) {
            libVoiC_gf_PC_StatEventAddInt("Completed", 0, libVCST_gv_pS_CutsceneStatEvent);
        }

    }
    else {
        if ((libVCST_gv_pS_CutsceneStatEvent != -1)) {
            libVoiC_gf_PC_StatEventAddInt("Completed", 1, libVCST_gv_pS_CutsceneStatEvent);
        }

    }
    libVCST_gf_PS_ConversationSceneClose();
    libVCST_gf_PS_RemoveEyeDarts();
    autoCAA2A321_ai = 1;
    autoCAA2A321_ae = UserDataInstanceCount("Clickable")+1;
    while (autoCAA2A321_ai < autoCAA2A321_ae) {
        lv_indexClickable = UserDataInstance("Clickable", autoCAA2A321_ai);
        libNtve_gf_SimpleLookAtStop(libVCST_gf_ClickableUnit(lv_indexClickable), "InstantHeadOnly");
        libNtve_gf_SimpleLookAtStop(libVCST_gf_ClickableUnit(lv_indexClickable), "InstantHeadOnlySubtle");
        libNtve_gf_SimpleLookAtStop(libVCST_gf_ClickableUnit(lv_indexClickable), "Turret_Right");
        libNtve_gf_SimpleLookAtStop(libVCST_gf_ClickableUnit(lv_indexClickable), "Turret_Left");
        libNtve_gf_SimpleLookAtStop(libVCST_gf_ClickableUnit(lv_indexClickable), "InstantEyesOnly");
        libNtve_gf_SendActorMessageToUnit(libVCST_gf_ClickableUnit(lv_indexClickable), "AnimCancelActiveBlends ::Conversation");
        autoCAA2A321_ai = autoCAA2A321_ai+1;
    }
    libVCST_gf_StoryCinematicMode(false);
    libVCST_gv_pS_ConvoActive = false;
    libVCST_gv_pS_ScriptedLineCallback = null;
    if (((lp_fadeStyle & libVCST_ge_PS_FadeStyle_FadeInAfter) != 0)) {
        libVCST_gf_StoryCutsceneFade(true, 0.5, false);
    }
    else if (((lp_fadeStyle & libVCST_ge_PS_FadeStyle_InstantFadeInAfter) != 0)) {
        libVCST_gf_StoryCutsceneFade(true, 0.0, false);
    }
}

void libVCST_gf_PS_ConversationPlayResponse (string lp_character, string lp_conversation, bool lp_waitOrNot) {
    // Automatic Variable Declarations
    // Implementation
    if ((libVCST_gv_pS_AmbientCharacter == lp_character)) {
        return ;
    }

    ConversationDataStop();
    TransmissionClearAll();
    libVCST_gv_pS_AmbientCharacter = lp_character;
    if ((lp_conversation == null)) {
        libVCST_gv_pS_ResponseConversation = libVCST_gf_PS_ClickableResponse(lp_character);
    }
    else {
        libVCST_gv_pS_ResponseConversation = lp_conversation;
    }
    TriggerExecute(libVCST_gt_PS_ConversationResponseRun, true, lp_waitOrNot);
}

void libVCST_gf_PS_ConversationPlayAmbientLine (string lp_character, string lp_line, bool lp_waitOrNot) {
    // Automatic Variable Declarations
    // Implementation
    if ((libVCST_gv_pS_AmbientCharacter == lp_character)) {
        return ;
    }

    libVCST_gv_pS_AmbientCharacter = lp_character;
    libVCST_gv_pS_AmbientLine = lp_line;
    TriggerExecute(libVCST_gt_PS_ConversationAmbientTransmissionRun, true, lp_waitOrNot);
}

void libVCST_gf_PS_ConversationListenerSet (string lp_listenerCharacter) {
    // Automatic Variable Declarations
    // Implementation
    libVCST_gv_pS_ConvoListener = lp_listenerCharacter;
}

void libVCST_gf_PS_ConversationSceneOpen () {
    // Automatic Variable Declarations
    // Implementation
    CutsceneCreateNew(libVCST_gv_pS_RoomConvoSceneFiles[(libVCST_gv_pS_CurrentRoom)], libVCST_gv_pS_ConversationCutscenePosition, 0.0, PlayerGroupAll(), false);
    libVCST_gv_pS_ConversationScene = CutsceneLastCreated();
    CutsceneSetTime(libVCST_gv_pS_ConversationScene, 0);
    CutscenePause(libVCST_gv_pS_ConversationScene);
}

void libVCST_gf_PS_ConversationSceneClose () {
    // Automatic Variable Declarations
    // Implementation
    if ((libVCST_gv_pS_ConversationScene == c_cutsceneNone)) {
        return ;
    }

    CutsceneStop(libVCST_gv_pS_ConversationScene);
    libVCST_gv_pS_ConversationScene = c_cutsceneNone;
}

bool libVCST_gf_PS_ConversationLastWasSkipped () {
    // Automatic Variable Declarations
    // Implementation
    return libVCST_gv_pS_LastConversationSkipped;
}

void libVCST_gf_PS_ConversationAchievementCheck (string lp_character) {
    // Automatic Variable Declarations
    string autoD8999D57_val;

    // Implementation
    autoD8999D57_val = lp_character;
    if (autoD8999D57_val == "Smith") {
        AchievementTermQuantitySet(1, "PStory_Talk_Karax", 1);
    }
    else if (autoD8999D57_val == "ProtossAI") {
        AchievementTermQuantitySet(1, "PStory_Talk_Fenix", 1);
    }
    else if (autoD8999D57_val == "Preserver") {
        AchievementTermQuantitySet(1, "PStory_Talk_Rohana", 1);
    }
    else if (autoD8999D57_val == "TaldarimHero") {
        AchievementTermQuantitySet(1, "PStory_Talk_Alarak", 1);
    }
    else if (autoD8999D57_val == "DTLeader") {
        AchievementTermQuantitySet(1, "PStory_Talk_Vorazun", 1);
    }
    else {
    }
}

void libVCST_gf_PS_StatRecordClickables (int lp_travel) {
    // Variable Declarations
    string lv_indexClickable;

    // Automatic Variable Declarations
    int auto3F9616AA_ai;
    int auto3F9616AA_ae;

    // Variable Initialization

    // Implementation
    libVoiC_gf_PC_StatEventCreate("Clickables");
    auto3F9616AA_ai = 1;
    auto3F9616AA_ae = UserDataInstanceCount("Clickable")+1;
    while (auto3F9616AA_ai < auto3F9616AA_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto3F9616AA_ai);
        if ((libVCST_gf_PS_ClickableIsEnabled(lv_indexClickable) == true) && ((libVCST_gf_ClickableInRoom(lv_indexClickable, libVCST_ge_Rooms_StoryRoomBridge) == true) || (libVCST_gf_ClickableInRoom(lv_indexClickable, libVCST_ge_Rooms_StoryRoomWarCouncil) == true) || ((libVCST_gf_ClickableInRoom(lv_indexClickable, libVCST_ge_Rooms_StoryRoomShip) == true) && (libVCST_gf_RoomIsUnlocked(libVCST_ge_Rooms_StoryRoomShip) == true)))) {
            if ((libVCST_gf_PS_ClickableIsNew(lv_indexClickable) == true)) {
                libVoiC_gf_PC_StatEventAddStr("Missed", (lv_indexClickable), libVoiC_gf_PC_StatEventLast());
            }

        }

        auto3F9616AA_ai = auto3F9616AA_ai+1;
    }
    libVoiC_gf_PC_StatEventAddInt("Travel", lp_travel, libVoiC_gf_PC_StatEventLast());
    libVoiC_gf_PC_StatEventDone(libVoiC_gf_PC_StatEventLast());
}

void libVCST_gf_PS_ConversationCameraApply (string lp_clickable, string lp_cameraType) {
    // Variable Declarations
    string lv_indexClickable;
    trigger lv_callback;
    string lv_listener;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libVCST_gv_pS_ConvoActive == false)) {
        return ;
    }

    libVCST_gv_pS_CurrentCamera = lp_cameraType;
    libVCST_gv_pS_CurrentSpeaker = lp_clickable;
    libVCST_gv_pS_SkipConversationCamera = false;
    libVCST_gv_pS_SkipConversationLookAt = false;
    if ((libVCST_gv_pS_CurrentConvoChar != null) && (libVCST_gf_PS_ClickableLineCallback(libVCST_gv_pS_CurrentConvoChar) != null)) {
        TriggerStop(libVCST_gf_PS_ClickableLineCallback(libVCST_gv_pS_CurrentConvoChar));
        TriggerExecute(libVCST_gf_PS_ClickableLineCallback(libVCST_gv_pS_CurrentConvoChar), true, true);
        if ((libVCST_gv_pS_SkipConversationCamera == true)) {
            return ;
        }

    }

    if ((libVCST_gv_pS_ScriptedLineCallback != null)) {
        TriggerStop(libVCST_gv_pS_ScriptedLineCallback);
        libVCST_gv_pS_SkipConversationCamera = false;
        TriggerExecute(libVCST_gv_pS_ScriptedLineCallback, true, true);
        if ((libVCST_gv_pS_SkipConversationCamera == true)) {
            return ;
        }

    }

    if (((libVCST_gv_pS_CurrentSpeaker == libVCST_gv_pS_CurrentConvoChar) || (libVCST_gv_pS_CurrentConvoChar == null))) {
        lv_listener = libVCST_gv_pS_ConvoListener;
    }
    else {
        lv_listener = libVCST_gv_pS_CurrentConvoChar;
    }
    if ((lv_listener != null) && ((lp_cameraType == "Cameras|FarListener") || (lp_cameraType == "Cameras|CloseUpListener") || (lp_cameraType == "Cameras|MediumListener") || (lp_cameraType == "Cameras|ShoulderListener") || (lp_cameraType == "Cameras|CustomCamera01Listener") || (lp_cameraType == "Cameras|CustomCamera02Listener") || (lp_cameraType == "Cameras|CustomCamera03Listener") || (lp_cameraType == "Cameras|CustomCamera04Listener"))) {
        libVCST_gf_PS_CutsceneCameraApply(libVCST_gf_PS_CameraOppositeShot(lp_cameraType), lv_listener);
        return ;
    }

    libVCST_gf_PS_CutsceneCameraApply(lp_cameraType, lp_clickable);
}

void libVCST_gf_PS_CutsceneCameraApply (string lp_cameraType, string lp_speaker) {
    // Variable Declarations
    actor lv_sceneActor;
    fixed lv_lineDuration;
    string lv_indexClickable;

    // Automatic Variable Declarations
    int auto8B3C31D6_ai;
    int auto8B3C31D6_ae;

    // Variable Initialization

    // Implementation
    if ((libVCST_gv_pS_ConversationScene == c_cutsceneNone)) {
        libVCST_gf_PS_ConversationSceneOpen();
    }

    SoundLengthQuery(SoundLink(ConversationDataActiveSound(), c_soundIndexAny));
    if (((ConversationDataActiveSound() == null) || (SoundLengthSync(SoundLink(ConversationDataActiveSound(), c_soundIndexAny)) == 0.0))) {
        lv_lineDuration = 10.0;
    }
    else {
        lv_lineDuration = SoundLengthSync(SoundLink(ConversationDataActiveSound(), c_soundIndexAny));
    }
    CutscenePlayCutsceneRangeOverTime(libVCST_gv_pS_ConversationScene, libVCST_gf_PS_SceneCameraBookmark(lp_speaker, lp_cameraType, "Start"), libVCST_gf_PS_SceneCameraBookmark(lp_speaker, lp_cameraType, "End"), lv_lineDuration);
    auto8B3C31D6_ai = 1;
    auto8B3C31D6_ae = UserDataInstanceCount("Clickable")+1;
    while (auto8B3C31D6_ai < auto8B3C31D6_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto8B3C31D6_ai);
        lv_sceneActor = ActorFrom(("::external." + libVCST_gf_PS_ClickableSceneFinderTag(lv_indexClickable)));
        ActorSend(lv_sceneActor, "SetTintColor 255,0,0");
        ActorSend(lv_sceneActor, "SetVisibility");
        libNtve_gf_SendActorMessageToUnit(libVCST_gf_ClickableUnit(lv_indexClickable), "HostSiteOpsSet ::Host");
        ActorSend(ActorFrom(("::external." + libVCST_gf_PS_ClickableActorAlias(lv_indexClickable))), (("SetBearingsFrom ::external." + libVCST_gf_PS_ClickableSceneFinderTag(lv_indexClickable))));
        auto8B3C31D6_ai = auto8B3C31D6_ai+1;
    }
    libVCST_gf_PS_ApplyConversationMainCharacterLookAt();
    libVCST_gf_PS_ApplyConversationCurrentCharacterLookAt();
    if ((libVCST_gv_pS_CurrentConvoChar == "Preserver")) {
        libVCST_gf_ApplyRohanaHairLookAt();
    }

}

void libVCST_gf_PS_CutsceneCameraApplyFull (string lp_cameraType, string lp_speaker, string lp_convoChar) {
    // Variable Declarations
    string lv_backupToken;
    string lv_backupConvoChar;
    string lv_backupSpeaker;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_backupToken = "";

    // Implementation
    lv_backupConvoChar = libVCST_gv_pS_CurrentConvoChar;
    lv_backupSpeaker = libVCST_gv_pS_CurrentSpeaker;
    lv_backupToken = libVCST_gv_pS_ActiveConvoBookmarkToken;
    libVCST_gv_pS_CurrentSpeaker = lp_speaker;
    libVCST_gv_pS_CurrentConvoChar = lp_convoChar;
    libVCST_gv_pS_ActiveConvoBookmarkToken = libVCST_gf_PS_ClickableSceneNameToken(lp_convoChar);
    libVCST_gf_PS_CutsceneCameraApply(lp_cameraType, lp_speaker);
    libVCST_gv_pS_ActiveConvoBookmarkToken = lv_backupToken;
    libVCST_gv_pS_CurrentSpeaker = lv_backupSpeaker;
    libVCST_gv_pS_CurrentConvoChar = lv_backupConvoChar;
}

void libVCST_gf_PS_ApplyConversationMainCharacterLookAt () {
    // Variable Declarations
    string lv_mainCharacter;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libVCST_gf_NextAvailableMission(libVoiC_gf_CurrentLocation()) == "PUlnar03")) {
        lv_mainCharacter = "DTLeader";
    }
    else {
        lv_mainCharacter = "Artanis";
    }
    libNtve_gf_SimpleLookAtStop(libVCST_gf_ClickableUnit(lv_mainCharacter), "InstantHeadOnly");
    if ((ActorFrom(libVCST_gv_pS_LookAtMainCharacterActorRef) != null)) {
        libNtve_gf_SimpleLookAtStart(libVCST_gf_ClickableUnit(lv_mainCharacter), "InstantHeadOnly", ActorFrom(libVCST_gv_pS_LookAtMainCharacterActorRef));
    }

}

void libVCST_gf_PS_ApplyConversationCurrentCharacterLookAt () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SimpleLookAtStop(libVCST_gf_ClickableUnit(libVCST_gv_pS_CurrentConvoChar), "InstantHeadOnly");
    if ((ActorFrom(libVCST_gv_pS_LookAtCurrentCharacterActorRef) != null)) {
        libNtve_gf_SimpleLookAtStart(libVCST_gf_ClickableUnit(libVCST_gv_pS_CurrentConvoChar), "InstantHeadOnly", ActorFrom(libVCST_gv_pS_LookAtCurrentCharacterActorRef));
    }

}

void libVCST_gf_ApplyRohanaHairLookAt () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SimpleLookAtStop(libVCST_gf_ClickableUnit("Preserver"), "Turret_Right");
    if ((ActorFrom(libVCST_gv_pS_LookAtRohanaHairActorRef) != null)) {
        libNtve_gf_SimpleLookAtStart(libVCST_gf_ClickableUnit("Preserver"), "Turret_Right", ActorFrom(libVCST_gv_pS_LookAtRohanaHairActorRef));
    }

}

void libVCST_gf_AddCharacterRedirect (string lp_sourceCharacter, string lp_targetClickable) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetString(true, (libVCST_gv_pSC_REDIRECTPREFIX + (lp_sourceCharacter)), ("Clickable;" + (lp_targetClickable)));
}

void libVCST_gf_ClearCharacterRedirect (string lp_sourceCharacter) {
    // Automatic Variable Declarations
    // Implementation
    DataTableValueRemove(true, (libVCST_gv_pSC_REDIRECTPREFIX + (lp_sourceCharacter)));
}

void libVCST_gf_SkipNextConversationCamera () {
    // Automatic Variable Declarations
    // Implementation
    libVCST_gv_pS_SkipConversationCamera = true;
}

void libVCST_gf_PS_ConversationLookAtSkipNext () {
    // Automatic Variable Declarations
    // Implementation
    libVCST_gv_pS_SkipConversationLookAt = true;
}

string libVCST_gf_PS_SceneCameraBookmark (string lp_speaker, string lp_camera, string lp_startEnd) {
    // Variable Declarations
    string lv_bookmarkString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bookmarkString = "";

    // Implementation
    lv_bookmarkString = (libVCST_gv_pS_ActiveConvoBookmarkToken + " - " + libVCST_gf_PS_ClickableSceneNameToken(lp_speaker) + " " + libVCST_gf_PS_CameraAsString(lp_camera) + " " + (lp_startEnd));
    return lv_bookmarkString;
}

string libVCST_gf_PS_CameraAsString (string lp_cameraType) {
    // Automatic Variable Declarations
    string autoB7668CFC_val;

    // Implementation
    autoB7668CFC_val = lp_cameraType;
    if (autoB7668CFC_val == "Cameras|CloseUp") {
        return "Closeup";
    }
    else if (autoB7668CFC_val == "Cameras|CloseUpListener") {
        return "Closeup Listener";
    }
    else if (autoB7668CFC_val == "Cameras|CloseUp02") {
        return "Closeup 02";
    }
    else if (autoB7668CFC_val == "Cameras|CloseUp02Listener") {
        return "Closeup Listener 02";
    }
    else if (autoB7668CFC_val == "Cameras|ExtremeCloseup") {
        return "Extreme Closeup";
    }
    else if (autoB7668CFC_val == "Cameras|ExtremeCloseupListener") {
        return "Extreme Closeup Listener";
    }
    else if (autoB7668CFC_val == "Cameras|Far") {
        return "Far";
    }
    else if (autoB7668CFC_val == "Cameras|FarListener") {
        return "Far Listener";
    }
    else if (autoB7668CFC_val == "Cameras|Far02") {
        return "Far 02";
    }
    else if (autoB7668CFC_val == "Cameras|Far02Listener") {
        return "Far 02 Listener";
    }
    else if (autoB7668CFC_val == "Cameras|Medium") {
        return "Medium";
    }
    else if (autoB7668CFC_val == "Cameras|MediumListener") {
        return "Medium Listener";
    }
    else if (autoB7668CFC_val == "Cameras|Medium02") {
        return "Medium 02";
    }
    else if (autoB7668CFC_val == "Cameras|Medium02Listener") {
        return "Medium 02 Listener";
    }
    else if (autoB7668CFC_val == "Cameras|Shoulder") {
        return "Double";
    }
    else if (autoB7668CFC_val == "Cameras|ShoulderListener") {
        return "Double";
    }
    else if (autoB7668CFC_val == "Cameras|TwoShot") {
        return "Two Shot";
    }
    else if (autoB7668CFC_val == "Cameras|CustomCamera01") {
        return "Custom 01";
    }
    else if (autoB7668CFC_val == "Cameras|CustomCamera02") {
        return "Custom 02";
    }
    else if (autoB7668CFC_val == "Cameras|CustomCamera03") {
        return "Custom 03";
    }
    else if (autoB7668CFC_val == "Cameras|CustomCamera04") {
        return "Custom 04";
    }
    else {
    }
    return "Unknown";
}

string libVCST_gf_PS_ConversationCameraCurrent () {
    // Automatic Variable Declarations
    // Implementation
    return libVCST_gv_pS_CurrentCamera;
}

string libVCST_gf_PS_CurrentSpeaker () {
    // Automatic Variable Declarations
    // Implementation
    return libVCST_gv_pS_CurrentSpeaker;
}

string libVCST_gf_PS_CameraOppositeShot (string lp_cameraShot) {
    // Automatic Variable Declarations
    string autoC2420CBC_val;

    // Implementation
    autoC2420CBC_val = lp_cameraShot;
    if (autoC2420CBC_val == "Cameras|CloseUp") {
        return "Cameras|CloseUpListener";
    }
    else if (autoC2420CBC_val == "Cameras|ExtremeCloseup") {
        return "Cameras|ExtremeCloseupListener";
    }
    else if (autoC2420CBC_val == "Cameras|Medium") {
        return "Cameras|MediumListener";
    }
    else if (autoC2420CBC_val == "Cameras|Shoulder") {
        return "Cameras|ShoulderListener";
    }
    else if (autoC2420CBC_val == "Cameras|Far") {
        return "Cameras|FarListener";
    }
    else if (autoC2420CBC_val == "Cameras|TwoShot") {
        return "Cameras|TwoShot";
    }
    else if (autoC2420CBC_val == "Cameras|CloseUpListener") {
        return "Cameras|CloseUp";
    }
    else if (autoC2420CBC_val == "Cameras|ExtremeCloseupListener") {
        return "Cameras|ExtremeCloseup";
    }
    else if (autoC2420CBC_val == "Cameras|MediumListener") {
        return "Cameras|Medium";
    }
    else if (autoC2420CBC_val == "Cameras|ShoulderListener") {
        return "Cameras|Shoulder";
    }
    else if (autoC2420CBC_val == "Cameras|FarListener") {
        return "Cameras|Far";
    }
    else if (autoC2420CBC_val == "Cameras|CustomCamera01Listener") {
        return "Cameras|CustomCamera01";
    }
    else if (autoC2420CBC_val == "Cameras|CustomCamera02Listener") {
        return "Cameras|CustomCamera02";
    }
    else if (autoC2420CBC_val == "Cameras|CustomCamera03Listener") {
        return "Cameras|CustomCamera03";
    }
    else if (autoC2420CBC_val == "Cameras|CustomCamera04Listener") {
        return "Cameras|CustomCamera04";
    }
    else {
    }
    return null;
}

string libVCST_gf_PS_ClickableFromCharacter (string lp_character) {
    // Variable Declarations
    string lv_indexClickable;

    // Automatic Variable Declarations
    int auto37E1F7BC_ai;
    int auto37E1F7BC_ae;

    // Variable Initialization

    // Implementation
    if ((DataTableGetString(true, (libVCST_gv_pSC_REDIRECTPREFIX + (lp_character))) != "")) {
        return UserDataInstanceFromReference(DataTableGetString(true, (libVCST_gv_pSC_REDIRECTPREFIX + (lp_character))));
    }

    auto37E1F7BC_ai = 1;
    auto37E1F7BC_ae = UserDataInstanceCount("Clickable")+1;
    while (auto37E1F7BC_ai < auto37E1F7BC_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto37E1F7BC_ai);
        if ((libVCST_gf_PC_ClickableGameLink(lv_indexClickable) == lp_character)) {
            return lv_indexClickable;
        }

        auto37E1F7BC_ai = auto37E1F7BC_ai+1;
    }
    return null;
}

void libVCST_gf_PS_ConversationDataInit () {
    // Variable Declarations
    string lv_indexClickable;
    int lv_index;

    // Automatic Variable Declarations
    int auto83C0223C_ai;
    int auto83C0223C_ae;
    int auto6F10283C_ae;
    const int auto6F10283C_ai = 1;

    // Variable Initialization

    // Implementation
    auto83C0223C_ai = 1;
    auto83C0223C_ae = UserDataInstanceCount("Clickable")+1;
    while (auto83C0223C_ai < auto83C0223C_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto83C0223C_ai);
        auto6F10283C_ae = ConversationDataStateIndexCount("Cameras");
        lv_index = 1;
        for ( ; ( (auto6F10283C_ai >= 0 && lv_index <= auto6F10283C_ae) || (auto6F10283C_ai < 0 && lv_index >= auto6F10283C_ae) ) ; lv_index += auto6F10283C_ai ) {
            ConversationDataRegisterCamera(ConversationDataStateIndex("Cameras", lv_index), libVoiC_gf_PC_ClickableConversationLink(lv_indexClickable), null, libVCST_gt_PS_ConversationCameraApply, true);
        }
        auto83C0223C_ai = auto83C0223C_ai+1;
    }
}

unit libVCST_gf_ClickableUnit (string lp_clickableInstance) {
    // Automatic Variable Declarations
    // Implementation
    return libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickableInstance)].lv_unit;
}

unit libVCST_gf_PS_ClickableCalloutUnit (string lp_clickableInstance) {
    // Automatic Variable Declarations
    // Implementation
    return libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickableInstance)].lv_calloutUnit;
}

bool libVCST_gf_PS_ClickableIsNew (string lp_clickableInstance) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("Clickable", lp_clickableInstance, "New", 1) == 1);
}

bool libVCST_gf_PS_ClickableIsEnabled (string lp_clickableInstance) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("Clickable", lp_clickableInstance, "Enabled", 1) == 1);
}

string libVCST_gf_PS_ClickableSceneNameToken (string lp_clickableInstance) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetString("Clickable", lp_clickableInstance, "SceneToken", 1);
}

int libVCST_gf_PS_ClickableIndex (string lp_clickableInstance) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("Clickable", lp_clickableInstance, "Index", 1);
}

text libVCST_gf_ClickableName (string lp_clickableInstance) {
    // Automatic Variable Declarations
    // Implementation
    if ((((libVCST_gf_ClickableUnit(lp_clickableInstance) == libVCST_gf_ClickableUnit("AmonPreserver")) && (libVCST_gf_PS_ClickableIsNew("AmonPreserver") == false)) || ((libVCST_gf_ClickableUnit(lp_clickableInstance) == libVCST_gf_ClickableUnit("ProtossAI")) && (UserDataGetInt("StoryStates", "FenixNameChange", "Value", 1) == 1) && (libVCST_gf_NextAvailableMission("AiurB") == "PAiur06")))) {
        return UserDataGetText("Clickable", lp_clickableInstance, "Name", 1);
    }

    if ((UserDataGetGameLink("Clickable", lp_clickableInstance, "Game Link", 1) == null)) {
        return UserDataGetText("Clickable", lp_clickableInstance, "Name", 1);
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, (UserDataGetGameLink("Clickable", lp_clickableInstance, "Game Link", 1)), "Name", c_playerAny));
}

text libVCST_gf_PS_ClickableCalloutSubtitle (string lp_clickableInstance) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_clickableInstance == "Starmap") && (libVoiC_gf_MissionAvailableOnPlanet(libVoiC_gf_CurrentLocation()) == false)) {
        return StringExternal("Param/Value/lib_VCST_3944A2BA");
    }

    return UserDataGetText("Clickable", lp_clickableInstance, "Callout Subtitle", 1);
}

int libVCST_gf_PS_ClickableType (string lp_clickableInstance) {
    // Automatic Variable Declarations
    // Implementation
    return libVCST_gf_PS_ClickableIntToType(UserDataGetInt("Clickable", lp_clickableInstance, "Type", 1));
}

int libVCST_gf_PS_ClickableIntToType (int lp_typeIndex) {
    // Automatic Variable Declarations
    int auto3DE40EF2_val;

    // Implementation
    auto3DE40EF2_val = lp_typeIndex;
    if (auto3DE40EF2_val == libVCST_ge_ClickableType_Conversation) {
        return libVCST_ge_ClickableType_Conversation;
    }
    else if (auto3DE40EF2_val == libVCST_ge_ClickableType_Ambient) {
        return libVCST_ge_ClickableType_Ambient;
    }
    else if (auto3DE40EF2_val == libVCST_ge_ClickableType_Custom) {
        return libVCST_ge_ClickableType_Custom;
    }
    else if (auto3DE40EF2_val == libVCST_ge_ClickableType_RoomChange) {
        return libVCST_ge_ClickableType_RoomChange;
    }
    else {
    }
    return libVCST_ge_ClickableType_Custom;
}

bool libVCST_gf_PS_ClickableIsBackground (string lp_clickableInstance) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("Clickable", lp_clickableInstance, "Background", 1) == 1);
}

string libVCST_gf_PS_ClickableActorAlias (string lp_clickableInstance) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetString("Clickable", lp_clickableInstance, "Alias", 1);
}

string libVCST_gf_PS_ClickableSceneFinderTag (string lp_clickableInstance) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetString("Clickable", lp_clickableInstance, "SceneFinderTag", 1);
}

string libVCST_gf_PS_ClickableCalloutTag (string lp_clickableInstance) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetString("Clickable", lp_clickableInstance, "CalloutAttach", 1);
}

string libVCST_gf_PS_ClickableConversation (string lp_clickableInstance) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Clickable", lp_clickableInstance, "Conversation", 1);
}

string libVCST_gf_PS_ClickableAmbientConversation (string lp_clickableInstance) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Clickable", lp_clickableInstance, "Ambient Conversation", 1);
}

string libVCST_gf_PS_ClickableGreetingConversation (string lp_clickableInstance) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Clickable", lp_clickableInstance, "GreetingConversation", 1);
}

string libVCST_gf_PS_ClickableResponse (string lp_clickableInstance) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Clickable", lp_clickableInstance, "Response", 1);
}

trigger libVCST_gf_PS_ClickableCustomCallback (string lp_clickableInstance) {
    // Automatic Variable Declarations
    // Implementation
    return libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickableInstance)].lv_customCallback;
}

trigger libVCST_gf_PS_ClickablePreCallback (string lp_clickableInstance) {
    // Automatic Variable Declarations
    // Implementation
    return libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickableInstance)].lv_preCallback;
}

trigger libVCST_gf_PS_ClickablePostCallback (string lp_clickableInstance) {
    // Automatic Variable Declarations
    // Implementation
    return libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickableInstance)].lv_postCallback;
}

trigger libVCST_gf_PS_ClickableLineCallback (string lp_clickableInstance) {
    // Automatic Variable Declarations
    // Implementation
    return libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickableInstance)].lv_lineCallback;
}

string libVCST_gf_PC_ClickableGameLink (string lp_characterInstance) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Clickable", lp_characterInstance, "Game Link", 1);
}

int libVCST_gf_PC_ClickableCalloutXOffset (string lp_clickableInstance, int lp_anchor) {
    // Automatic Variable Declarations
    string auto9ED2B5A7_val;

    // Implementation
    auto9ED2B5A7_val = lp_clickableInstance;
    if (auto9ED2B5A7_val == "Artanis") {
    }
    else {
    }
    return 30;
}

bool libVCST_gf_ClickableInRoom (string lp_clickable, int lp_room) {
    // Automatic Variable Declarations
    // Implementation
    return libVCST_gf_PS_RoomHasUnit(lp_room, libVCST_gf_ClickableUnit(lp_clickable));
}

bool libVCST_gf_PS_ClickableCalloutAnchorToRight (string lp_clickable) {
    // Automatic Variable Declarations
    string auto01191486_val;

    // Implementation
    auto01191486_val = lp_clickable;
    if (auto01191486_val == "Artanis") {
        return false;
    }
    else if (auto01191486_val == "Preserver") {
        return true;
    }
    else if (auto01191486_val == "Smith") {
        if ((libVCST_gf_RoomIsUnlocked(libVCST_ge_Rooms_StoryRoomShip) == false)) {
            return false;
        }

        return true;
    }
    else if (auto01191486_val == "DTLeader") {
        if ((libVoiC_gf_LastSuccessfulMission() == "PUlnar02")) {
            return libVCST_gf_PS_ClickableCalloutAnchorToRight("Artanis");
        }
        else {
            return false;
        }
    }
    else if (auto01191486_val == "TaldarimHero") {
        return false;
    }
    else if (auto01191486_val == "Starmap") {
        return true;
    }
    else if (auto01191486_val == "BridgeConsole") {
        return true;
    }
    else if (auto01191486_val == "ShipConsole") {
        return false;
    }
    else if (auto01191486_val == "ProtossAI") {
        return true;
    }
    else if (auto01191486_val == "ArmyConsole") {
        return false;
    }
    else {
    }
    return true;
}

void libVCST_gf_PS_ClickableSetUnit (string lp_clickableInstance, unit lp_unit) {
    // Variable Declarations
    bool lv_unitReplaced;
    unit lv_oldClickableUnit;
    int lv_indexRoom;

    // Automatic Variable Declarations
    int auto38BF952F_ae;
    const int auto38BF952F_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libVCST_gf_ClickableUnit(lp_clickableInstance) != null)) {
        lv_unitReplaced = true;
        lv_oldClickableUnit = libVCST_gf_ClickableUnit(lp_clickableInstance);
        if ((libVCST_gf_PS_ClickableActorAlias(lp_clickableInstance) != null)) {
            libVCST_gf_StoryReplaceAliasedUnit(lv_oldClickableUnit, lp_unit);
        }

        auto38BF952F_ae = (libVCST_ge_Rooms_StoryRoomVoid);
        lv_indexRoom = 1;
        for ( ; ( (auto38BF952F_ai >= 0 && lv_indexRoom <= auto38BF952F_ae) || (auto38BF952F_ai < 0 && lv_indexRoom >= auto38BF952F_ae) ) ; lv_indexRoom += auto38BF952F_ai ) {
            if ((libVCST_gf_PS_RoomHasUnit((lv_indexRoom), lv_oldClickableUnit) == true)) {
                libVCST_gf_AddRemoveUnitForRoom(false, lv_oldClickableUnit, (lv_indexRoom));
                libVCST_gf_AddRemoveUnitForRoom(true, lp_unit, (lv_indexRoom));
                break;
            }

        }
        UnitRemove(lv_oldClickableUnit);
    }

    libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickableInstance)].lv_unit = lp_unit;
    libVCST_gf_PS_ClickableDataUpdate();
    ConversationDataRegisterUnit(libVoiC_gf_PC_ClickableConversationLink(lp_clickableInstance), lp_unit);
    if ((libVCST_gf_PS_ClickableActorAlias(lp_clickableInstance) != null) && (lv_unitReplaced == false)) {
        libVCST_gf_StoryAddAliasedUnit(lp_unit, libVCST_gf_PS_ClickableActorAlias(lp_clickableInstance));
    }

}

void libVCST_gf_PS_ClickableUpdateCalloutUnit (string lp_clickable) {
    // Automatic Variable Declarations
    // Implementation
    if ((libVCST_gf_PS_ClickableCalloutUnit(lp_clickable) == null)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", 0, 1, libVCST_gf_StoryModeDefaultPosition());
        libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickable)].lv_calloutUnit = UnitLastCreated();
    }

    if ((libVCST_gf_PS_ClickableCalloutTag(lp_clickable) == "")) {
        return ;
    }

    libNtve_gf_SendActorMessageToUnit(libVCST_gf_PS_ClickableCalloutUnit(lp_clickable), "RefClear ::Host");
    ActorSend(libNtve_gf_MainActorofUnit(libVCST_gf_PS_ClickableCalloutUnit(lp_clickable)), (("RefSet ::Host ::external." + libVCST_gf_PS_ClickableCalloutTag(lp_clickable))));
}

void libVCST_gf_ClickableSetCustomCallback (string lp_clickableInstance, trigger lp_callback) {
    // Automatic Variable Declarations
    // Implementation
    libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickableInstance)].lv_customCallback = lp_callback;
}

void libVCST_gf_ClickableSetPreCallback (string lp_clickableInstance, trigger lp_callback) {
    // Automatic Variable Declarations
    // Implementation
    libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickableInstance)].lv_preCallback = lp_callback;
}

void libVCST_gf_ClickableSetPostCallback (string lp_clickableInstance, trigger lp_callback) {
    // Automatic Variable Declarations
    // Implementation
    libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickableInstance)].lv_postCallback = lp_callback;
}

void libVCST_gf_ClickableSetLineCallback (string lp_clickableInstance, trigger lp_callback) {
    // Automatic Variable Declarations
    // Implementation
    libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickableInstance)].lv_lineCallback = lp_callback;
}

void libVCST_gf_ClickableToggleBackground (string lp_clickableInstance, bool lp_background) {
    // Automatic Variable Declarations
    // Implementation
    UserDataSetInt("Clickable", lp_clickableInstance, "Background", 1, BoolToInt(lp_background));
}

void libVCST_gf_ClickableSetNew (string lp_clickableInstance, bool lp_isNew) {
    // Automatic Variable Declarations
    // Implementation
    UserDataSetInt("Clickable", lp_clickableInstance, "New", 1, BoolToInt(lp_isNew));
    libVCST_gf_PS_ClickableDisplayUpdate(lp_clickableInstance);
}

void libVCST_gf_ClickableSetEnabled (string lp_clickableInstance, bool lp_enabledDisabled) {
    // Automatic Variable Declarations
    // Implementation
    UserDataSetInt("Clickable", lp_clickableInstance, "Enabled", 1, BoolToInt((lp_enabledDisabled == true)));
}

void libVCST_gf_TurnFidgetStatusForClickableOnOff (string lp_clickable, bool lp_onOff) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_onOff == true) && (lp_clickable == "Artanis") && (libVCST_gf_CurrentRoom() != libVCST_ge_Rooms_StoryRoomBridge)) {
        return ;
    }

    if ((lp_onOff == false)) {
        libNtve_gf_SendActorMessageToUnit(libVCST_gf_ClickableUnit(lp_clickable), "Signal FidgetStatusOff");
    }
    else {
        if ((libVCST_gv_pS_ConvoActive == false)) {
            libNtve_gf_SendActorMessageToUnit(libVCST_gf_ClickableUnit(lp_clickable), "Signal FidgetStatusOn");
        }

    }
}

void libVCST_gf_TurnAlternateStatusForClickableOnOff (string lp_clickable, bool lp_onOff) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_onOff == true) && (lp_clickable == "Artanis") && (libVCST_gf_CurrentRoom() != libVCST_ge_Rooms_StoryRoomBridge)) {
        return ;
    }

    if ((UserDataGetInt("Clickable", lp_clickable, "AlternateAnimationsEnabled", 1) == 1)) {
        if ((lp_onOff == false)) {
            libNtve_gf_SendActorMessageToUnit(libVCST_gf_ClickableUnit(lp_clickable), "Signal AlternateStatusOff");
        }
        else {
            if ((libVCST_gv_pS_ConvoActive == false)) {
                libNtve_gf_SendActorMessageToUnit(libVCST_gf_ClickableUnit(lp_clickable), "Signal AlternateStatusOn");
            }

        }
    }

}

void libVCST_gf_PS_ClickableSetIsVisibleOnSet (string lp_clickableInstance, bool lp_isVisibleOnSet) {
    // Automatic Variable Declarations
    // Implementation
    UserDataSetInt("Clickable", lp_clickableInstance, "IsVisibleOnSet", 1, BoolToInt(lp_isVisibleOnSet));
}

void libVCST_gf_PS_ClickableSetLighting (string lp_clickableInstance, string lp_token) {
    // Variable Declarations
    string lv_setString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_setString = "";

    // Implementation
    if ((libVCST_gf_PS_SetLightingCutsceneFile() == null)) {
        return ;
    }

    return ;
}

void libVCST_gf_CreateClickable (string lp_clickableInstance, string lp_unitType, point lp_location) {
    // Variable Declarations
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libVCST_gf_StoryCreateUnit(lp_unitType, lp_location, PointGetFacing(lp_location));
    libVCST_gf_PS_ClickableSetUnit(lp_clickableInstance, UnitLastCreated());
}

void libVCST_gf_AddRemoveClickableFromRoom (bool lp_addRemove, string lp_clickableInstance, int lp_room) {
    // Automatic Variable Declarations
    // Implementation
    libVCST_gf_AddRemoveUnitForRoom(lp_addRemove, libVCST_gf_ClickableUnit(lp_clickableInstance), lp_room);
}

void libVCST_gf_ClickableRemoveFromAllRooms (string lp_clickableInstance) {
    // Variable Declarations
    int lv_indexRoom;

    // Automatic Variable Declarations
    int autoC55C6076_ae;
    const int autoC55C6076_ai = 1;

    // Variable Initialization

    // Implementation
    autoC55C6076_ae = (libVCST_ge_Rooms_StoryRoomVoid);
    lv_indexRoom = 0;
    for ( ; ( (autoC55C6076_ai >= 0 && lv_indexRoom <= autoC55C6076_ae) || (autoC55C6076_ai < 0 && lv_indexRoom >= autoC55C6076_ae) ) ; lv_indexRoom += autoC55C6076_ai ) {
        if ((libVCST_gf_PS_RoomHasUnit((lv_indexRoom), libVCST_gf_ClickableUnit(lp_clickableInstance)) == true)) {
            libVCST_gf_AddRemoveClickableFromRoom(false, lp_clickableInstance, (lv_indexRoom));
        }

    }
}

void libVCST_gf_PS_HideAllClickableLights () {
    // Variable Declarations
    string lv_indexClickable;

    // Automatic Variable Declarations
    int autoECCBBBDD_ai;
    int autoECCBBBDD_ae;

    // Variable Initialization

    // Implementation
    autoECCBBBDD_ai = 1;
    autoECCBBBDD_ae = UserDataInstanceCount("Clickable")+1;
    while (autoECCBBBDD_ai < autoECCBBBDD_ae) {
        lv_indexClickable = UserDataInstance("Clickable", autoECCBBBDD_ai);
        libVCST_gf_PS_ClickableHideLight(lv_indexClickable);
        autoECCBBBDD_ai = autoECCBBBDD_ai+1;
    }
}

void libVCST_gf_PS_ClickableActionRun (string lp_clickableInstance) {
    // Variable Declarations
    int lv_initialRoom;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_initialRoom = libVCST_gf_CurrentRoom();
    if ((libVCST_gf_PS_ClickableCustomCallback(lp_clickableInstance) != null)) {
        TriggerExecute(libVCST_gf_PS_ClickableCustomCallback(lp_clickableInstance), true, true);
    }
    else if (true) {
        libVCST_gf_PS_ConversationPlayClickable(lp_clickableInstance);
        libVCST_gf_PS_ConversationAchievementCheck(lp_clickableInstance);
    }
    if ((libVCST_gf_PS_ClickableType(lp_clickableInstance) != libVCST_ge_ClickableType_RoomChange) && ((libVCST_gf_CurrentStoryActivity() != libVCST_ge_StoryActivities_ViewingRoom) || (libVCST_gf_CurrentRoom() != lv_initialRoom))) {
        libVCST_gf_EnterRoom(libVCST_gf_CurrentRoom());
        libVCST_gf_PS_ClickableDataUpdate();
    }

}

void libVCST_gf_PS_ClickableHideLight (string lp_clickableInstance) {
    // Automatic Variable Declarations
    // Implementation
    if ((libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickableInstance)].lv_lightingCutscene == c_cutsceneNone)) {
        return ;
    }

    CutsceneShow(libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickableInstance)].lv_lightingCutscene, false);
}

void libVCST_gf_ClickableSetType (string lp_clickableInstance, int lp_type) {
    // Automatic Variable Declarations
    // Implementation
    UserDataSetInt("Clickable", lp_clickableInstance, "Type", 1, (lp_type));
}

void libVCST_gf_PS_ClickableSetLink (string lp_clickableInstance, string lp_link) {
    // Automatic Variable Declarations
    // Implementation
    libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickableInstance)].lv_conversationLink = lp_link;
}

void libVCST_gf_PS_ClickableSetCalloutName (string lp_clickableInstance) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickableInstance)].lv_calloutName, libVCST_gf_ClickableName(lp_clickableInstance), PlayerGroupAll());
}

void libVCST_gf_PS_ClickableCursorUpdate (string lp_clickableInstance) {
    // Automatic Variable Declarations
    // Implementation
    if ((libVCST_gf_ClickableUnit(lp_clickableInstance) == null)) {
        return ;
    }

    if ((libVCST_gf_PS_ClickableIsEnabled(lp_clickableInstance) == false)) {
        UnitSetCursor(libVCST_gf_ClickableUnit(lp_clickableInstance), "Arrow_Prot");
    }
    else if ((libVCST_gf_PS_ClickableIsBackground(lp_clickableInstance) == true)) {
        UnitSetCursor(libVCST_gf_ClickableUnit(lp_clickableInstance), "Arrow_Prot");
    }
    else if ((libVCST_gf_PS_ClickableType(lp_clickableInstance) == libVCST_ge_ClickableType_Ambient)) {
        UnitSetCursor(libVCST_gf_ClickableUnit(lp_clickableInstance), "InteractiveLook");
    }
    else if ((libVCST_gf_PS_ClickableType(lp_clickableInstance) == libVCST_ge_ClickableType_RoomChange)) {
        UnitSetCursor(libVCST_gf_ClickableUnit(lp_clickableInstance), "InteractiveActivate");
    }
    else if ((libVCST_gf_PS_ClickableType(lp_clickableInstance) == libVCST_ge_ClickableType_Custom)) {
        UnitSetCursor(libVCST_gf_ClickableUnit(lp_clickableInstance), "InteractiveActivate");
    }
    else if (true) {
        UnitSetCursor(libVCST_gf_ClickableUnit(lp_clickableInstance), "InteractiveTalk");
    }
}

void libVCST_gf_PS_ClickableCalloutUpdate (string lp_clickableInstance) {
    // Variable Declarations
    string lv_attachmentPoint;
    unit lv_indexUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libVCST_gv_pS_RoomUICutscene == c_cutsceneNone)) {
        return ;
    }

    if (((libVCST_gf_ClickableUnit(lp_clickableInstance) == null) || (libNtve_gf_UnitIsVisibleToPlayer(libVCST_gf_ClickableUnit(lp_clickableInstance), 1) == false))) {
        return ;
    }

    if ((lp_clickableInstance == "XelNagaKeystone")) {
        lv_attachmentPoint = "Ref_Umoja";
    }
    else {
        lv_attachmentPoint = "Ref_Xil";
    }
    if ((libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickableInstance)].lv_callout == c_invalidDialogControlId)) {
        DialogCreate(500, 300, c_anchorCenter, 0, 0, true);
        DialogSetImageVisible(DialogLastCreated(), false);
        if ((libVCST_gf_PS_ClickableCalloutAnchorToRight(lp_clickableInstance) == true)) {
            DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "LotV_StorySet/UnitCalloutRightTemplate");
        }
        else {
            DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "LotV_StorySet/UnitCalloutLeftTemplate");
        }
        libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickableInstance)].lv_callout = DialogControlLastCreated();
        libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickableInstance)].lv_calloutDialog = DialogLastCreated();
        DialogControlHookup(libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickableInstance)].lv_callout, c_triggerControlTypeLabel, "NameLabel");
        libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickableInstance)].lv_calloutName = DialogControlLastCreated();
        libVCST_gf_PS_ClickableSetCalloutName(lp_clickableInstance);
        DialogControlHookup(libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickableInstance)].lv_callout, c_triggerControlTypeLabel, "SubNameLabel");
        libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickableInstance)].lv_calloutSubtitle = DialogControlLastCreated();
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    }

    if ((libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickableInstance)].lv_callout != c_invalidDialogControlId)) {
        if ((libVCST_gf_PS_ClickableCalloutAnchorToRight(lp_clickableInstance) == true)) {
            DialogSetPositionRelativeToUnit(libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickableInstance)].lv_calloutDialog, libVCST_gf_ClickableUnit(lp_clickableInstance), lv_attachmentPoint, (0 - DialogGetWidth(libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickableInstance)].lv_calloutDialog)), (0 - (DialogGetHeight(libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickableInstance)].lv_calloutDialog) / 2)));
        }
        else {
            DialogSetPositionRelativeToUnit(libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickableInstance)].lv_calloutDialog, libVCST_gf_ClickableUnit(lp_clickableInstance), lv_attachmentPoint, 0, (0 - (DialogGetHeight(libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickableInstance)].lv_calloutDialog) / 2)));
        }
    }

    libNtve_gf_SetDialogItemText(libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickableInstance)].lv_calloutSubtitle, libVCST_gf_PS_ClickableCalloutSubtitle(lp_clickableInstance), PlayerGroupAll());
    if ((libVCST_gf_PS_ClickableIsNew(lp_clickableInstance) == false)) {
        DialogControlSetVisible(libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickableInstance)].lv_calloutSubtitle, PlayerGroupAll(), false);
    }
    else {
        DialogControlSetVisible(libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickableInstance)].lv_calloutSubtitle, PlayerGroupAll(), true);
    }
}

void libVCST_gf_PS_ClickableDisplayUpdate (string lp_clickableInstance) {
    // Automatic Variable Declarations
    // Implementation
    if ((libVCST_gf_ClickableUnit(lp_clickableInstance) == null)) {
        return ;
    }

    if (((libVCST_gv_pS_InteractionOn == false) || (libVCST_gf_PS_ClickableIsEnabled(lp_clickableInstance) == false))) {
        UnitSetState(libVCST_gf_ClickableUnit(lp_clickableInstance), c_unitStateHighlightable, false);
    }
    else {
        UnitSetState(libVCST_gf_ClickableUnit(lp_clickableInstance), c_unitStateHighlightable, true);
    }
    libVCST_gf_PS_ClickableCalloutUpdate(lp_clickableInstance);
    if ((libVCST_gf_PS_ClickableIsNew(lp_clickableInstance) == true) && (libVCST_gf_PS_ClickableIsEnabled(lp_clickableInstance) == true) && (libVCST_gf_ClickableInRoom(lp_clickableInstance, libVCST_gf_CurrentRoom()) == true) && (libVCST_gv_pS_InteractionOn == true)) {
        libVCST_gf_PS_ClickableCalloutShowHide(true, lp_clickableInstance);
    }
    else {
        libVCST_gf_PS_ClickableCalloutShowHide(false, lp_clickableInstance);
    }
    libVCST_gf_PS_ClickableCursorUpdate(lp_clickableInstance);
}

void libVCST_gf_PS_ClickableDisplayUpdateAll () {
    // Variable Declarations
    string lv_indexClickable;

    // Automatic Variable Declarations
    int auto8B6E3BA7_ai;
    int auto8B6E3BA7_ae;

    // Variable Initialization

    // Implementation
    auto8B6E3BA7_ai = 1;
    auto8B6E3BA7_ae = UserDataInstanceCount("Clickable")+1;
    while (auto8B6E3BA7_ai < auto8B6E3BA7_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto8B6E3BA7_ai);
        libVCST_gf_PS_ClickableDisplayUpdate(lv_indexClickable);
        auto8B6E3BA7_ai = auto8B6E3BA7_ai+1;
    }
}

void libVCST_gf_PS_ClickableCalloutShowHide (bool lp_showHide, string lp_clickableInstance) {
    // Variable Declarations
    int lv_callout;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_callout = libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickableInstance)].lv_callout;

    // Implementation
    if ((lv_callout == c_invalidDialogControlId)) {
        return ;
    }

    DialogControlSetVisible(lv_callout, PlayerGroupAll(), lp_showHide);
}

void libVCST_gf_PS_ClickableCalloutHighlight (bool lp_highlight, string lp_clickableInstance) {
    // Variable Declarations
    int lv_callout;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_callout = libVCST_gv_pS_Clickable[libVCST_gf_PS_ClickableIndex(lp_clickableInstance)].lv_callout;

    // Implementation
    if ((lv_callout == c_invalidDialogControlId)) {
        return ;
    }

    if ((lp_highlight == true)) {
        DialogControlSendAnimationEvent(lv_callout, PlayerGroupAll(), "Highlight");
    }
    else {
        DialogControlSendAnimationEvent(lv_callout, PlayerGroupAll(), "HighlightStop");
    }
}

void libVCST_gf_PS_ClickableLoadModel (int lp_untitledParameter001) {
    // Automatic Variable Declarations
}

void libVCST_gf_PS_ClickableDataInit () {
    // Variable Declarations
    int lv_count;
    string lv_indexClickable;

    // Automatic Variable Declarations
    int autoA8BD363B_ai;
    int autoA8BD363B_ae;

    // Variable Initialization
    lv_count = 1;

    // Implementation
    autoA8BD363B_ai = 1;
    autoA8BD363B_ae = UserDataInstanceCount("Clickable")+1;
    while (autoA8BD363B_ai < autoA8BD363B_ae) {
        lv_indexClickable = UserDataInstance("Clickable", autoA8BD363B_ai);
        UserDataSetInt("Clickable", lv_indexClickable, "Index", 1, lv_count);
        lv_count += 1;
        libVCST_gf_ClickableSetNew(lv_indexClickable, true);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", 0, 1, libVCST_gf_StoryModeDefaultPosition());
        libVCST_gv_pS_Clickable[lv_count].lv_calloutUnit = UnitLastCreated();
        autoA8BD363B_ai = autoA8BD363B_ai+1;
    }
    TriggerExecute(libVCST_gt_PS_ClickableCalloutInitDelayed, true, false);
}

void libVCST_gf_PS_ClickableDataUpdate () {
    // Automatic Variable Declarations
}

void libVCST_gf_PlayStorymodeScene (string lp_scene, bool lp_playOnce) {
    // Variable Declarations
    trigger lv_callback;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_playOnce == true) && (UserDataGetInt("Scenes", lp_scene, "Played", 1) == 1)) {
        return ;
    }

    libVoiC_gv_pC_SceneStatEvent = StatEventLastCreated();
    UserDataSetInt("Scenes", lp_scene, "Played", 1, 1);
    if ((UserDataGetUserInstance("Scenes", lp_scene, "Type", 1) == "Prerender")) {
        libVCST_gf_StartStoryActivity(libVCST_ge_StoryActivities_Cinematic);
    }
    else {
        libVoiC_gf_PC_StatEventCreate("ScenePlay");
        libVCST_gv_pS_CutsceneStatEvent = StatEventLastCreated();
        libVoiC_gf_PC_StatEventAddStr("ID", (lp_scene), libVoiC_gf_PC_StatEventLast());
        libVCST_gf_StartStoryActivity(libVCST_ge_StoryActivities_ScriptedScene);
    }
    libVoiC_gf_PC_MovieStartRecording((lp_scene));
    lv_callback = DataTableGetTrigger(true, (libVCST_gv_pSC_ScriptedScenePrefix + (lp_scene)));
    TriggerExecute(lv_callback, true, true);
    libVoiC_gf_PC_MovieStopRecording();
    libVoiC_gf_PC_StatEventDone(libVCST_gv_pS_CutsceneStatEvent);
    libVCST_gv_pS_CutsceneStatEvent = -1;
}

void libVCST_gf_RegisterStorymodeScene (string lp_scene, trigger lp_callback) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetTrigger(true, (libVCST_gv_pSC_ScriptedScenePrefix + (lp_scene)), lp_callback);
}

void libVCST_gf_PlayStorymodeCutscene (string lp_cutscene) {
    // Automatic Variable Declarations
    // Implementation
    libVCST_gv_pS_LastScenePlayedFull = true;
    CutsceneCreateNew(lp_cutscene, Point(64.0, 64.0), 0.0, PlayerGroupAll(), true);
    libVCST_gv_pS_Cutscene = CutsceneLastCreated();
    TriggerExecute(libVCST_gt_PS_CutsceneDetectSkipping, true, false);
    WaitForCutsceneToEnd(libVCST_gv_pS_Cutscene);
    libVCST_gf_StoryCutsceneFade(true, 0.0, false);
    TriggerStop(libVCST_gt_PS_CutsceneDetectSkipping);
    TriggerStop(libVCST_gt_PS_CutsceneSkipped);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: PS_DebugProgressSave
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_DebugProgressSave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexClickable;

    // Automatic Variable Declarations
    int auto79D6B584_ai;
    int auto79D6B584_ae;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    BankLoad(libVoiC_gf_CampaignEventParameter(libVoiC_ge_PC_Event_CampaignProgressCheatSave, 1), 1);
    UserDataSaveType("Clickable", BankLastCreated(), "Characters");
    auto79D6B584_ai = 1;
    auto79D6B584_ae = UserDataInstanceCount("Clickable")+1;
    while (auto79D6B584_ai < auto79D6B584_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto79D6B584_ai);
        ConversationDataSaveNodeState(libVCST_gf_PS_ClickableConversation(lv_indexClickable), BankLastCreated(), "Conversations");
        auto79D6B584_ai = auto79D6B584_ai+1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_DebugProgressSave_Init () {
    libVCST_gt_PS_DebugProgressSave = TriggerCreate("libVCST_gt_PS_DebugProgressSave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_DebugProgressLoad
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_DebugProgressLoad_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexClickable;

    // Automatic Variable Declarations
    int auto3A2971A6_ai;
    int auto3A2971A6_ae;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    BankLoad(libVoiC_gf_CampaignEventParameter(libVoiC_ge_PC_Event_CampaignProgressCheatLoad, 1), 1);
    UserDataLoadType("Clickable", BankLastCreated(), "Characters");
    auto3A2971A6_ai = 1;
    auto3A2971A6_ae = UserDataInstanceCount("Clickable")+1;
    while (auto3A2971A6_ai < auto3A2971A6_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto3A2971A6_ai);
        ConversationDataResetNodeState(libVCST_gf_PS_ClickableConversation(lv_indexClickable));
        ConversationDataLoadNodeState(libVCST_gf_PS_ClickableConversation(lv_indexClickable), BankLastCreated(), "Conversations");
        auto3A2971A6_ai = auto3A2971A6_ai+1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_DebugProgressLoad_Init () {
    libVCST_gt_PS_DebugProgressLoad = TriggerCreate("libVCST_gt_PS_DebugProgressLoad_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_DebugProgressCheatUsed
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_DebugProgressCheatUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    libVCST_gf_ShowHideStoryUI(false);
    libVCST_gf_EnterRoom(libVCST_ge_Rooms_StoryRoomDebugProgressCheat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_DebugProgressCheatUsed_Init () {
    libVCST_gt_PS_DebugProgressCheatUsed = TriggerCreate("libVCST_gt_PS_DebugProgressCheatUsed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_DebugProgressCheatCancelled
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_DebugProgressCheatCancelled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCST_gf_PS_SetCurrentLocation(libVoiC_gf_CurrentLocation(), false);
    libVCST_gf_EnterRoom(libVCST_ge_Rooms_StoryRoomBridge);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_DebugProgressCheatCancelled_Init () {
    libVCST_gt_PS_DebugProgressCheatCancelled = TriggerCreate("libVCST_gt_PS_DebugProgressCheatCancelled_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_DebugStoryCheat
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_DebugStoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCST_gf_PC_DebugProgressSaveStats();
    libVCST_gf_EnterRoom(libVCST_ge_Rooms_StoryRoomDebugStoryCheat);
    libVCST_gv_pS_InStoryCheat = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_DebugStoryCheat_Init () {
    libVCST_gt_PS_DebugStoryCheat = TriggerCreate("libVCST_gt_PS_DebugStoryCheat_Func");
    TriggerAddEventChatMessage(libVCST_gt_PS_DebugStoryCheat, c_playerAny, "story", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_DebugStoryCheatInit
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_DebugStoryCheatInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_y;
    const int lv_titleWidth = 150;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogCreate(1400, 1000, c_anchorCenter, 0, 0, true);
    libVCST_gv_pS_DebugStoryDialog = DialogLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeListBox);
    libVCST_gv_pS_DebugStorySceneList = DialogControlLastCreated();
    DialogControlSetSize(libVCST_gv_pS_DebugStorySceneList, PlayerGroupAll(), 500, 300);
    DialogControlSetPosition(libVCST_gv_pS_DebugStorySceneList, PlayerGroupAll(), c_anchorTopLeft, 50, 50);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeListBox);
    libVCST_gv_pS_DebugStoryPreviewList = DialogControlLastCreated();
    DialogControlSetSize(libVCST_gv_pS_DebugStoryPreviewList, PlayerGroupAll(), 800, 300);
    DialogControlSetPosition(libVCST_gv_pS_DebugStoryPreviewList, PlayerGroupAll(), c_anchorTopRight, 50, 50);
    libNtve_gf_CreateDialogItemButton(libVCST_gv_pS_DebugStoryDialog, 200, 50, c_anchorBottomLeft, 50, 50, StringToText(""), StringExternal("Param/Value/lib_VCST_DC70862E"), "");
    libVCST_gv_pS_DebugStoryPlayButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(libVCST_gv_pS_DebugStoryDialog, 200, 50, c_anchorBottomRight, 50, 50, StringToText(""), StringExternal("Param/Value/lib_VCST_3D85F733"), "");
    libVCST_gv_pS_DebugStoryCloseButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(libVCST_gv_pS_DebugStoryDialog, 60, 50, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/lib_VCST_C5DC5309"), Color(100,100,100), false, 2.0);
    libVCST_gv_pS_DebugStoryFilterLabel = DialogControlLastCreated();
    DialogControlSetPositionRelative(libVCST_gv_pS_DebugStoryFilterLabel, PlayerGroupAll(), c_anchorTopLeft, libVCST_gv_pS_DebugStorySceneList, c_anchorBottomLeft, 0, 20);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    libVCST_gv_pS_DebugStoryFilterEditBox = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
    DialogControlSetPositionRelative(libVCST_gv_pS_DebugStoryFilterEditBox, PlayerGroupAll(), c_anchorLeft, libVCST_gv_pS_DebugStoryFilterLabel, c_anchorRight, 0, -15);
    libNtve_gf_CreateDialogItemLabel(libVCST_gv_pS_DebugStoryDialog, 150, 50, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/lib_VCST_0FA8FF05"), Color(100,100,100), false, 2.0);
    libVCST_gv_pS_DebugStoryConvoTypeLabel = DialogControlLastCreated();
    DialogControlSetPositionRelative(libVCST_gv_pS_DebugStoryConvoTypeLabel, PlayerGroupAll(), c_anchorLeft, libVCST_gv_pS_DebugStoryFilterEditBox, c_anchorRight, 15, 15);
    DialogControlCreate(libVCST_gv_pS_DebugStoryDialog, c_triggerControlTypeCheckBox);
    libVCST_gv_pS_DebugStoryConvoTypeCheckbox = DialogControlLastCreated();
    libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlSetPositionRelative(libVCST_gv_pS_DebugStoryConvoTypeCheckbox, PlayerGroupAll(), c_anchorLeft, libVCST_gv_pS_DebugStoryConvoTypeLabel, c_anchorRight, 0, -15);
    libNtve_gf_CreateDialogItemLabel(libVCST_gv_pS_DebugStoryDialog, 80, 50, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/lib_VCST_1F9F798F"), Color(100,100,100), false, 2.0);
    libVCST_gv_pS_DebugStorySceneTypeLabel = DialogControlLastCreated();
    DialogControlSetPositionRelative(libVCST_gv_pS_DebugStorySceneTypeLabel, PlayerGroupAll(), c_anchorLeft, libVCST_gv_pS_DebugStoryConvoTypeCheckbox, c_anchorRight, 15, 15);
    DialogControlCreate(libVCST_gv_pS_DebugStoryDialog, c_triggerControlTypeCheckBox);
    libVCST_gv_pS_DebugStorySceneTypeCheckbox = DialogControlLastCreated();
    libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlSetPositionRelative(libVCST_gv_pS_DebugStorySceneTypeCheckbox, PlayerGroupAll(), c_anchorLeft, libVCST_gv_pS_DebugStorySceneTypeLabel, c_anchorRight, 0, -15);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_DebugStoryCheatInit_Init () {
    libVCST_gt_PS_DebugStoryCheatInit = TriggerCreate("libVCST_gt_PS_DebugStoryCheatInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_DebugStoryCheatSceneListSelect
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_DebugStoryCheatSceneListSelect_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libVCST_gv_pS_DebugStorySceneList))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCST_gv_pS_DebugStorySelectedIndex = DialogControlGetSelectedItem(libVCST_gv_pS_DebugStorySceneList, 1);
    DialogControlSetEnabled(libVCST_gv_pS_DebugStoryPlayButton, PlayerGroupAll(), true);
    libVCST_gf_PS_DebugStoryCheatUpdateSelection();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_DebugStoryCheatSceneListSelect_Init () {
    libVCST_gt_PS_DebugStoryCheatSceneListSelect = TriggerCreate("libVCST_gt_PS_DebugStoryCheatSceneListSelect_Func");
    TriggerEnable(libVCST_gt_PS_DebugStoryCheatSceneListSelect, false);
    TriggerAddEventDialogControl(libVCST_gt_PS_DebugStoryCheatSceneListSelect, 1, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_DebugStoryCheatFilterChange
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_DebugStoryCheatFilterChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCST_gv_pS_DebugStoryFilterEditBox != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == libVCST_gv_pS_DebugStoryFilterEditBox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCST_gf_PS_DebugStoryCheatUpdateList();
    libVCST_gv_pS_DebugStorySelectedIndex = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_DebugStoryCheatFilterChange_Init () {
    libVCST_gt_PS_DebugStoryCheatFilterChange = TriggerCreate("libVCST_gt_PS_DebugStoryCheatFilterChange_Func");
    TriggerEnable(libVCST_gt_PS_DebugStoryCheatFilterChange, false);
    TriggerAddEventDialogControl(libVCST_gt_PS_DebugStoryCheatFilterChange, 1, c_invalidDialogControlId, c_triggerControlEventTypeTextChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_DebugStoryCheatCheckbox
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_DebugStoryCheatCheckbox_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libVCST_gv_pS_DebugStoryConvoTypeCheckbox) || (EventDialogControl() == libVCST_gv_pS_DebugStorySceneTypeCheckbox)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCST_gf_PS_DebugStoryCheatUpdateList();
    libVCST_gv_pS_DebugStorySelectedIndex = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_DebugStoryCheatCheckbox_Init () {
    libVCST_gt_PS_DebugStoryCheatCheckbox = TriggerCreate("libVCST_gt_PS_DebugStoryCheatCheckbox_Func");
    TriggerEnable(libVCST_gt_PS_DebugStoryCheatCheckbox, false);
    TriggerAddEventDialogControl(libVCST_gt_PS_DebugStoryCheatCheckbox, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_DebugStoryCheatPlay
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_DebugStoryCheatPlay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    trigger lv_callback;
    string lv_scene;
    int lv_index;
    int lv_typeIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCST_gv_pS_DebugStoryPlayButton != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == libVCST_gv_pS_DebugStoryPlayButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVCST_gv_pS_DebugStoryListType[libVCST_gv_pS_DebugStorySelectedIndex] == "Conversations")) {
        libVCST_gf_PS_DebugStoryCheatHide();
        libVCST_gf_ClickableSetType(UserDataGetUserInstance("Conversations", libVCST_gv_pS_DebugStoryListInstance[libVCST_gv_pS_DebugStorySelectedIndex], "PrimaryCharacter", 1), libVCST_ge_ClickableType_Conversation);
        libVoiC_gf_DispatchCampaignEvent(libVoiC_ge_PC_Event_StoryStoryCheatPlay, "", "", false);
        libVCST_gf_ChangeRoom(libVCST_gf_PS_DebugRoomFromString(UserDataGetString("Conversations", libVCST_gv_pS_DebugStoryListInstance[libVCST_gv_pS_DebugStorySelectedIndex], "Room", 1)));
        UISetWorldVisible(PlayerGroupAll(), true);
        libVCST_gf_PS_ConversationPlayClickable(UserDataGetUserInstance("Conversations", libVCST_gv_pS_DebugStoryListInstance[libVCST_gv_pS_DebugStorySelectedIndex], "PrimaryCharacter", 1));
        libVCST_gf_EnterRoom(libVCST_ge_Rooms_StoryRoomDebugStoryCheat);
        return true;
    }

    if ((libVCST_gv_pS_DebugStoryListType[libVCST_gv_pS_DebugStorySelectedIndex] == "Scenes")) {
        libVCST_gf_PS_DebugStoryCheatHide();
        libVCST_gf_PlayStorymodeScene(libVCST_gv_pS_DebugStoryListInstance[libVCST_gv_pS_DebugStorySelectedIndex], false);
        libVCST_gf_EnterRoom(libVCST_ge_Rooms_StoryRoomDebugStoryCheat);
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_DebugStoryCheatPlay_Init () {
    libVCST_gt_PS_DebugStoryCheatPlay = TriggerCreate("libVCST_gt_PS_DebugStoryCheatPlay_Func");
    TriggerEnable(libVCST_gt_PS_DebugStoryCheatPlay, false);
    TriggerAddEventDialogControl(libVCST_gt_PS_DebugStoryCheatPlay, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_DebugStoryCheatClose
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_DebugStoryCheatClose_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCST_gv_pS_DebugStoryCloseButton != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == libVCST_gv_pS_DebugStoryCloseButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCST_gf_PS_DebugStoryCheatUpdateList();
    libVCST_gf_PS_DebugStoryCheatHide();
    libVCST_gf_PC_DebugProgressRestoreStats();
    TriggerEnable(libVCST_gt_PS_DebugStoryCheatSceneListSelect, false);
    TriggerEnable(libVCST_gt_PS_DebugStoryCheatFilterChange, false);
    TriggerEnable(libVCST_gt_PS_DebugStoryCheatPlay, false);
    TriggerEnable(libVCST_gt_PS_DebugStoryCheatClose, false);
    TriggerEnable(libVCST_gt_PS_DebugStoryCheatCheckbox, false);
    libVCST_gf_EnterRoom(libVCST_gv_pS_DebugStoryOriginalRoom);
    libVCST_gv_pS_InStoryCheat = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_DebugStoryCheatClose_Init () {
    libVCST_gt_PS_DebugStoryCheatClose = TriggerCreate("libVCST_gt_PS_DebugStoryCheatClose_Func");
    TriggerEnable(libVCST_gt_PS_DebugStoryCheatClose, false);
    TriggerAddEventDialogControl(libVCST_gt_PS_DebugStoryCheatClose, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_SaveStoryDataCallback
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_SaveStoryDataCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVoiC_gf_PC_CampaignInEpilogue() == true)) {
        return true;
    }

    libVCST_gv_pS_IsLeavingMap = true;
    libVCST_gf_PS_SaveStoryData();
    if ((libVoiC_gf_CampaignEventParameter(libVoiC_ge_PC_Event_CampaignMapTransition, 1) == "Mission") && (libVoiC_gf_MissionStatusCheck("PAiur03", libVoiC_ge_MissionStatus_Completed) == true)) {
        libVCST_gf_PS_SaveForExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_SaveStoryDataCallback_Init () {
    libVCST_gt_PS_SaveStoryDataCallback = TriggerCreate("libVCST_gt_PS_SaveStoryDataCallback_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_StoryModeMenuQuit
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_StoryModeMenuQuit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCST_gf_ShowHideStoryUI(false);
    libVCST_gf_ToggleInteractives(false);
    libVCST_gf_StoryCutsceneFade(false, 0.1, false);
    Wait(0.0625, c_timeGame);
    libVCST_gf_PS_SaveForExit();
    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_StoryModeMenuQuit_Init () {
    libVCST_gt_PS_StoryModeMenuQuit = TriggerCreate("libVCST_gt_PS_StoryModeMenuQuit_Func");
    TriggerAddEventGameMenuItemSelected(libVCST_gt_PS_StoryModeMenuQuit, c_playerAny, c_gameMenuDialogQuitButton);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_SaveGameStart
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_SaveGameStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_PrepareForStoryModeTransitionalSave();
    libVCST_gf_PS_SaveStoryData();
    libVCST_gf_PS_TransitionalSave();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_SaveGameStart_Init () {
    libVCST_gt_PS_SaveGameStart = TriggerCreate("libVCST_gt_PS_SaveGameStart_Func");
    TriggerAddEventSaveGame(libVCST_gt_PS_SaveGameStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_SaveGameEnd
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_SaveGameEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVCST_gv_pS_TransitionBank != null)) {
        BankRemove(libVCST_gv_pS_TransitionBank);
        libVCST_gv_pS_TransitionBank = null;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_SaveGameEnd_Init () {
    libVCST_gt_PS_SaveGameEnd = TriggerCreate("libVCST_gt_PS_SaveGameEnd_Func");
    TriggerAddEventSaveGameDone(libVCST_gt_PS_SaveGameEnd);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_StoryPerformFadeIn
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_StoryPerformFadeIn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CutsceneFade(false, 0.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    Wait(0.0625, c_timeGame);
    CutsceneFade(true, libVCST_gv_pS_StoryFadeDuration, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_StoryPerformFadeIn_Init () {
    libVCST_gt_PS_StoryPerformFadeIn = TriggerCreate("libVCST_gt_PS_StoryPerformFadeIn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_EventCampaignResetData
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_EventCampaignResetData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexClickable;

    // Automatic Variable Declarations
    int auto2E4312ED_ai;
    int auto2E4312ED_ae;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UserDataResetType("StoryStates");
    libVCST_gf_PS_SetCurrentLocation("AiurA", true);
    libVCST_gf_PS_ClickableDataInit();
    auto2E4312ED_ai = 1;
    auto2E4312ED_ae = UserDataInstanceCount("Clickable")+1;
    while (auto2E4312ED_ai < auto2E4312ED_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto2E4312ED_ai);
        ConversationDataResetNodeState(libVCST_gf_PS_ClickableConversation(lv_indexClickable));
        ConversationDataResetNodeState(libVCST_gf_PS_ClickableAmbientConversation(lv_indexClickable));
        UserDataResetValue("Clickable", lv_indexClickable, "Unlocked", 1);
        auto2E4312ED_ai = auto2E4312ED_ai+1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_EventCampaignResetData_Init () {
    libVCST_gt_PS_EventCampaignResetData = TriggerCreate("libVCST_gt_PS_EventCampaignResetData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_EventUIArchive_Quit
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_EventUIArchive_Quit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCST_gf_SetInArchives(false);
    if ((libVCST_gf_PS_CampaignCompleted() == true)) {
        libVoiC_gf_CinematicFade(false, 0.4, Color(0.00, 0.00, 0.00), true);
        Wait(0.0625, c_timeGame);
        libVCST_gf_PS_SaveForExit();
        GameOver(1, c_gameOverVictory, false, false);
        return true;
    }

    libVoiC_gf_CinematicFade(false, 0.4, Color(0.00, 0.00, 0.00), true);
    libVCST_gf_PS_SetCurrentLocation(libVoiC_gf_CurrentLocation(), false);
    libVCST_gf_EnterRoom(libVCST_gv_pS_RoomBeforeArchives);
    libVoiC_gf_CinematicFade(true, 0.3, Color(0.00, 0.00, 0.00), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_EventUIArchive_Quit_Init () {
    libVCST_gt_PS_EventUIArchive_Quit = TriggerCreate("libVCST_gt_PS_EventUIArchive_Quit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_EventUIArchive_PlayMission
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_EventUIArchive_PlayMission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_StorySetSimulationMission(libVCUI_gf_PU_ArchivesLastMissionSelected());
    libVCST_gf_PS_SetCurrentLocation(libVoiC_gf_StoryMapPlanet(libVCUI_gf_PU_ArchivesLastMissionSelected()), false);
    libVCST_gf_EnterRoom(libVCST_ge_Rooms_StoryRoomMissionScreen);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_EventUIArchive_PlayMission_Init () {
    libVCST_gt_PS_EventUIArchive_PlayMission = TriggerCreate("libVCST_gt_PS_EventUIArchive_PlayMission_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_EventUIArchive_PlayScene
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_EventUIArchive_PlayScene_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCST_gf_PlayStorymodeScene(libVCUI_gf_PU_ArchivesSelectedScene(), false);
    libVCST_gf_EnterRoom(libVCST_ge_Rooms_StoryRoomMissionArchives);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_EventUIArchive_PlayScene_Init () {
    libVCST_gt_PS_EventUIArchive_PlayScene = TriggerCreate("libVCST_gt_PS_EventUIArchive_PlayScene_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_EventUITravel_Quit
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_EventUITravel_Quit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_CinematicFade(false, 0.2, Color(0.00, 0.00, 0.00), true);
    libVoiC_gf_CinematicFade(true, 0.0, Color(0.00, 0.00, 0.00), true);
    libVCST_gf_PS_ConversationDataInit();
    libVCST_gf_EnterRoom(libVCST_ge_Rooms_StoryRoomBridge);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_EventUITravel_Quit_Init () {
    libVCST_gt_PS_EventUITravel_Quit = TriggerCreate("libVCST_gt_PS_EventUITravel_Quit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_EventUITravel_Launch
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_EventUITravel_Launch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_CinematicFade(true, 0.0, Color(0.00, 0.00, 0.00), true);
    libVoiC_gf_DispatchCampaignEvent(libVoiC_ge_PC_Event_StoryTravelDeparture, (libVCUI_gf_PU_StarmapLaunchLocation()), "", true);
    libVoiC_gf_PC_StatEventCreate("Travel");
    libVoiC_gf_PC_StatEventAddStr("ArcCount", IntToString(libVoiC_gf_NumberOfMissionArcsCompleted()), libVoiC_gf_PC_StatEventLast());
    libVoiC_gf_PC_StatEventAddStr("Destination", (libVCUI_gf_PU_StarmapLaunchLocation()), libVoiC_gf_PC_StatEventLast());
    libVoiC_gf_PC_StatEventDone(libVoiC_gf_PC_StatEventLast());
    libVCST_gf_PS_StatRecordClickables(1);
    libVCST_gf_PS_ConversationDataInit();
    libVCST_gf_PS_SetCurrentLocation(libVCUI_gf_PU_StarmapLaunchLocation(), true);
    libVoiC_gf_PC_PrepareLoadingScreen("PStory01", false);
    UserDataSetInt("StoryStates", "ArcsVisitedCount", "Value", 1, libVoiC_gf_NumberOfMissionArcsVisited());
    UserDataSetInt("WriterStates", "Travel_FirstLine", "Value", 1, 0);
    libVoiC_gf_DispatchCampaignEvent(libVoiC_ge_PC_Event_StoryTravelArrival, "", "", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_EventUITravel_Launch_Init () {
    libVCST_gt_PS_EventUITravel_Launch = TriggerCreate("libVCST_gt_PS_EventUITravel_Launch_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_EventUIMission_Launch
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_EventUIMission_Launch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_isSimulation;
    int lv_selectedDifficulty;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_selectedDifficulty = 2;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVCST_gf_NextAvailableMission("AiurB") == "PAiur05") && (libVoiC_gf_StoryInSimulation() == false)) {
        TriggerExecute(libVCST_gt_PS_EventUIAiur05Mission_Launch, true, false);
        return true;
    }

    lv_selectedDifficulty = libVCUI_gf_PU_MissionSelectedDifficulty();
    libVoiC_gf_DispatchCampaignEvent(libVoiC_ge_PC_Event_StoryMissionLaunch, "", "", true);
    libVCST_gf_EnterRoom(libVCST_ge_Rooms_StoryRoomVoid);
    libVCST_gf_ShowHideStoryUI(false);
    libVCST_gf_PS_StatRecordClickables(0);
    if ((libVoiC_gf_StoryInSimulation() == true)) {
        lv_isSimulation = true;
        libVoiC_gf_StorySimulationEnd();
    }

    libVoiC_gf_LaunchMission(libVCUI_gv_pU_MissionNextMap, lv_isSimulation, lv_selectedDifficulty);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_EventUIMission_Launch_Init () {
    libVCST_gt_PS_EventUIMission_Launch = TriggerCreate("libVCST_gt_PS_EventUIMission_Launch_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_EventUIAiur05Mission_Launch
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_EventUIAiur05Mission_Launch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_isSimulation;
    int lv_selectedDifficulty;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_selectedDifficulty = 2;

    // Actions
    if (!runActions) {
        return true;
    }

    UISetCursorVisible(PlayerGroupAll(), false);
    libVCUI_gv_pU_MissionAiur05SequenceTriggered = true;
    ConversationDataStop();
    DialogControlSetVisible(libVCUI_gv_pU_MissionDifficultyDropdown, PlayerGroupAll(), false);
    DialogControlSetVisible(libVCUI_gv_pU_MissionLaunchButton, PlayerGroupAll(), false);
    DialogControlSetVisible(libVCUI_gv_pU_MissionBackButton, PlayerGroupAll(), false);
    DialogControlSetVisible(libVCUI_gv_pU_MissionPitchPlayButton, PlayerGroupAll(), false);
    DialogControlSetVisible(libVCUI_gv_pU_MissionPitchStopButton, PlayerGroupAll(), false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    TriggerEnable(libVCUI_gt_PU_MissionAiur05UIElementOff, true);
    TriggerEnable(libVCUI_gt_PU_MissionAiur05UIPortraitChange, true);
    TriggerEnable(libVCUI_gt_PU_MissionVignetteClicked, false);
    libVCUI_gv_pU_MissionAiur05UIOffCounter = 0;
    lv_selectedDifficulty = libVCUI_gf_PU_MissionSelectedDifficulty();
    CutsceneGoToBookmark(libVCUI_gv_pU_MissionCutscene, "Aiur05");
    WaitForCutsceneToEnd(libVCUI_gv_pU_MissionCutscene);
    libVoiC_gf_DispatchCampaignEvent(libVoiC_ge_PC_Event_StoryMissionLaunch, "", "", true);
    libVCST_gf_EnterRoom(libVCST_ge_Rooms_StoryRoomVoid);
    libVCST_gf_ShowHideStoryUI(false);
    TriggerEnable(libVCUI_gt_PU_MissionAiur05UIElementOff, false);
    TriggerEnable(libVCUI_gt_PU_MissionAiur05UIPortraitChange, false);
    libVCST_gf_PS_StatRecordClickables(0);
    if ((libVoiC_gf_StoryInSimulation() == true)) {
        lv_isSimulation = true;
        libVoiC_gf_StorySimulationEnd();
    }

    libVoiC_gf_LaunchMission(libVCUI_gv_pU_MissionNextMap, lv_isSimulation, lv_selectedDifficulty);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_EventUIAiur05Mission_Launch_Init () {
    libVCST_gt_PS_EventUIAiur05Mission_Launch = TriggerCreate("libVCST_gt_PS_EventUIAiur05Mission_Launch_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_EventUIMission_Quit
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_EventUIMission_Quit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexClickable;

    // Automatic Variable Declarations
    int auto404734DB_ai;
    int auto404734DB_ae;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVCUI_gv_pU_MissionQuitToggle == true)) {
        GameOver(1, c_gameOverVictory, false, false);
        return true;
    }

    auto404734DB_ai = 1;
    auto404734DB_ae = UserDataInstanceCount("Clickable")+1;
    while (auto404734DB_ai < auto404734DB_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto404734DB_ai);
        ConversationDataRegisterPortrait(libVoiC_gf_PC_ClickableConversationLink(lv_indexClickable), c_invalidPortraitId);
        ConversationDataRegisterUnit(libVoiC_gf_PC_ClickableConversationLink(lv_indexClickable), libVCST_gf_ClickableUnit(lv_indexClickable));
        auto404734DB_ai = auto404734DB_ai+1;
    }
    libVCST_gf_PS_ConversationDataInit();
    if ((libVoiC_gf_StoryInSimulation() == true)) {
        libVoiC_gf_StorySimulationEnd();
        libVCST_gf_EnterRoom(libVCST_ge_Rooms_StoryRoomMissionArchives);
    }
    else {
        libVCST_gf_EnterRoom(libVCST_ge_Rooms_StoryRoomBridge);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_EventUIMission_Quit_Init () {
    libVCST_gt_PS_EventUIMission_Quit = TriggerCreate("libVCST_gt_PS_EventUIMission_Quit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_EventUIChampion_Quit
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_EventUIChampion_Quit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCST_gf_EnterRoom(libVCST_ge_Rooms_StoryRoomWarCouncil);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_EventUIChampion_Quit_Init () {
    libVCST_gt_PS_EventUIChampion_Quit = TriggerCreate("libVCST_gt_PS_EventUIChampion_Quit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_EventUIArmy_Quit
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_EventUIArmy_Quit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_CinematicFade(false, 0.3, Color(0.00, 0.00, 0.00), true);
    if ((libVoiC_gf_StoryInSimulation() == true)) {
        libVCST_gf_EnterRoom(libVCST_ge_Rooms_StoryRoomMissionScreen);
    }
    else {
        libVCST_gf_EnterRoom(libVCST_ge_Rooms_StoryRoomWarCouncil);
    }
    libVoiC_gf_CinematicFade(true, 0.0, Color(0.00, 0.00, 0.00), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_EventUIArmy_Quit_Init () {
    libVCST_gt_PS_EventUIArmy_Quit = TriggerCreate("libVCST_gt_PS_EventUIArmy_Quit_Func");
    libVCUI_gf_PU_ArmyClosed(libVCST_gt_PS_EventUIArmy_Quit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_EventUIShip_Quit
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_EventUIShip_Quit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_CinematicFade(false, 0.3, Color(0.00, 0.00, 0.00), true);
    if ((libVoiC_gf_StoryInSimulation() == true)) {
        libVCST_gf_EnterRoom(libVCST_ge_Rooms_StoryRoomMissionScreen);
    }
    else {
        libVCST_gf_EnterRoom(libVCST_ge_Rooms_StoryRoomShip);
    }
    libVoiC_gf_CinematicFade(true, 0.0, Color(0.00, 0.00, 0.00), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_EventUIShip_Quit_Init () {
    libVCST_gt_PS_EventUIShip_Quit = TriggerCreate("libVCST_gt_PS_EventUIShip_Quit_Func");
    libVCUI_gf_PU_SoAClosed(libVCST_gt_PS_EventUIShip_Quit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_EventUIArchivesArmy
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_EventUIArchivesArmy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerSetDifficulty(1, libVCUI_gf_PU_MissionSelectedDifficulty());
    libVoiC_gf_CinematicFade(false, 0.3, Color(0.00, 0.00, 0.00), true);
    libVCST_gf_EnterRoom(libVCST_ge_Rooms_StoryRoomArmyUpgrade);
    libVoiC_gf_CinematicFade(true, 0.0, Color(0.00, 0.00, 0.00), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_EventUIArchivesArmy_Init () {
    libVCST_gt_PS_EventUIArchivesArmy = TriggerCreate("libVCST_gt_PS_EventUIArchivesArmy_Func");
    libVCUI_gf_PU_MissionArmyLaunch(libVCST_gt_PS_EventUIArchivesArmy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_EventUIArchivesSoA
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_EventUIArchivesSoA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerSetDifficulty(1, libVCUI_gf_PU_MissionSelectedDifficulty());
    libVoiC_gf_CinematicFade(false, 0.3, Color(0.00, 0.00, 0.00), true);
    libVCST_gf_EnterRoom(libVCST_ge_Rooms_StoryRoomShipUpgrade);
    libVoiC_gf_CinematicFade(true, 0.0, Color(0.00, 0.00, 0.00), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_EventUIArchivesSoA_Init () {
    libVCST_gt_PS_EventUIArchivesSoA = TriggerCreate("libVCST_gt_PS_EventUIArchivesSoA_Func");
    libVCUI_gf_PU_MissionSoALaunch(libVCST_gt_PS_EventUIArchivesSoA);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_BackgroundScreenShake
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_BackgroundScreenShake_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCST_gv_pS_ActiveBackground == EventCutsceneId()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventCutsceneBookmark() == "Camera_Shake_01")) {
        CutsceneGoToBookmark(libVCST_gf_CurrentRoomCutscene(), "CameraShake_01");
    }
    else if ((EventCutsceneBookmark() == "Camera_Shake_02")) {
        CutsceneGoToBookmark(libVCST_gf_CurrentRoomCutscene(), "CameraShake_02");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_BackgroundScreenShake_Init () {
    libVCST_gt_PS_BackgroundScreenShake = TriggerCreate("libVCST_gt_PS_BackgroundScreenShake_Func");
    TriggerEnable(libVCST_gt_PS_BackgroundScreenShake, false);
    TriggerAddEventCutsceneBookmarkFired(libVCST_gt_PS_BackgroundScreenShake, c_cutsceneNone, "Camera_Shake_01");
    TriggerAddEventCutsceneBookmarkFired(libVCST_gt_PS_BackgroundScreenShake, c_cutsceneNone, "Camera_Shake_02");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_DebugBackgroundReset
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_DebugBackgroundReset_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCST_gf_RemoveBackground(libVCST_gv_pS_CurrentRoom);
    libVCST_gf_DisplayBackground(libVCST_gv_pS_CurrentRoom);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_DebugBackgroundReset_Init () {
    libVCST_gt_PS_DebugBackgroundReset = TriggerCreate("libVCST_gt_PS_DebugBackgroundReset_Func");
    TriggerAddEventChatMessage(libVCST_gt_PS_DebugBackgroundReset, c_playerAny, "BGReset", true);
    TriggerAddEventChatMessage(libVCST_gt_PS_DebugBackgroundReset, c_playerAny, "BackgroundReset", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_DebugBackgroundOff
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_DebugBackgroundOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCST_gf_RemoveBackground(libVCST_gv_pS_CurrentRoom);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_DebugBackgroundOff_Init () {
    libVCST_gt_PS_DebugBackgroundOff = TriggerCreate("libVCST_gt_PS_DebugBackgroundOff_Func");
    TriggerAddEventChatMessage(libVCST_gt_PS_DebugBackgroundOff, c_playerAny, "BGOff", true);
    TriggerAddEventChatMessage(libVCST_gt_PS_DebugBackgroundOff, c_playerAny, "BackgroundOff", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_DebugBackgroundOn
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_DebugBackgroundOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCST_gf_DisplayBackground(libVCST_gv_pS_CurrentRoom);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_DebugBackgroundOn_Init () {
    libVCST_gt_PS_DebugBackgroundOn = TriggerCreate("libVCST_gt_PS_DebugBackgroundOn_Func");
    TriggerAddEventChatMessage(libVCST_gt_PS_DebugBackgroundOn, c_playerAny, "BGOn", true);
    TriggerAddEventChatMessage(libVCST_gt_PS_DebugBackgroundOn, c_playerAny, "BackgroundOn", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_AmbientSceneEnded
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_AmbientSceneEnded_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexScene;
    int lv_indexRoom;
    int lv_indexEvent;

    // Automatic Variable Declarations
    const int autoF35DA8C7_ae = libVCST_gv_pSC_MaxAmbientRooms;
    const int autoF35DA8C7_ai = 1;
    const int autoF04E8F32_ae = libVCST_gv_pSC_MaxAmbientScenes;
    const int autoF04E8F32_ai = 1;
    const int autoE684077D_ae = libVCST_gv_pSC_MaxAmbientEvents;
    const int autoE684077D_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_indexRoom = 1;
    for ( ; ( (autoF35DA8C7_ai >= 0 && lv_indexRoom <= autoF35DA8C7_ae) || (autoF35DA8C7_ai < 0 && lv_indexRoom >= autoF35DA8C7_ae) ) ; lv_indexRoom += autoF35DA8C7_ai ) {
        lv_indexScene = 1;
        for ( ; ( (autoF04E8F32_ai >= 0 && lv_indexScene <= autoF04E8F32_ae) || (autoF04E8F32_ai < 0 && lv_indexScene >= autoF04E8F32_ae) ) ; lv_indexScene += autoF04E8F32_ai ) {
            lv_indexEvent = 1;
            for ( ; ( (autoE684077D_ai >= 0 && lv_indexEvent <= autoE684077D_ae) || (autoE684077D_ai < 0 && lv_indexEvent >= autoE684077D_ae) ) ; lv_indexEvent += autoE684077D_ai ) {
                if ((EventCutsceneId() == libVCST_gv_pS_AmbientEvents[lv_indexRoom][lv_indexScene][lv_indexEvent])) {
                    libVCST_gv_pS_AmbientEvents[lv_indexRoom][lv_indexScene][lv_indexEvent] = c_cutsceneNone;
                    libVCST_gf_PS_AmbientEventFinished(lv_indexRoom, lv_indexScene);
                    return true;
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_AmbientSceneEnded_Init () {
    libVCST_gt_PS_AmbientSceneEnded = TriggerCreate("libVCST_gt_PS_AmbientSceneEnded_Func");
    TriggerAddEventCutsceneEndSceneFired(libVCST_gt_PS_AmbientSceneEnded, c_cutsceneNone);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_AmbientSceneTimerExpired
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_AmbientSceneTimerExpired_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_nextAmbientScene;
    int lv_indexRoom;
    int lv_indexScene;

    // Automatic Variable Declarations
    const int autoA476D0C5_ae = libVCST_gv_pSC_MaxAmbientRooms;
    const int autoA476D0C5_ai = 1;
    const int autoF9C823BA_ae = libVCST_gv_pSC_MaxAmbientScenes;
    const int autoF9C823BA_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_indexRoom = 1;
    for ( ; ( (autoA476D0C5_ai >= 0 && lv_indexRoom <= autoA476D0C5_ae) || (autoA476D0C5_ai < 0 && lv_indexRoom >= autoA476D0C5_ae) ) ; lv_indexRoom += autoA476D0C5_ai ) {
        lv_indexScene = 1;
        for ( ; ( (autoF9C823BA_ai >= 0 && lv_indexScene <= autoF9C823BA_ae) || (autoF9C823BA_ai < 0 && lv_indexScene >= autoF9C823BA_ae) ) ; lv_indexScene += autoF9C823BA_ai ) {
            if ((libVCST_gv_pS_AmbientSceneTimer[lv_indexRoom][lv_indexScene] == EventTimer())) {
                lv_nextAmbientScene = UserDataGetUserInstance("AmbientScenes", libVCST_gv_pS_AmbientSceneInstance[lv_indexRoom][lv_indexScene], "NextScene", 1);
                if ((libVCST_gv_pS_AmbientSceneStatus[lv_indexRoom][lv_indexScene] == libVCST_ge_PS_AmbientSceneStatusType_PS_AmbientSceneFinished)) {
                    libVCST_gf_PS_AmbientSceneRemove(lv_indexRoom, lv_indexScene);
                }

                libVCST_gf_PS_AmbientScenePlay(lv_indexRoom, lv_nextAmbientScene);
                return true;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_AmbientSceneTimerExpired_Init () {
    libVCST_gt_PS_AmbientSceneTimerExpired = TriggerCreate("libVCST_gt_PS_AmbientSceneTimerExpired_Func");
    TriggerAddEventTimer(libVCST_gt_PS_AmbientSceneTimerExpired, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_DebugAmibentScenePlayCarriers
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_DebugAmibentScenePlayCarriers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexScene;
    int lv_indexEvent;

    // Automatic Variable Declarations
    const int autoD00889CA_ae = libVCST_gv_pSC_MaxAmbientScenes;
    const int autoD00889CA_ai = 1;
    const int auto6F3FFF3C_ae = libVCST_gv_pSC_MaxAmbientEvents;
    const int auto6F3FFF3C_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libVCST_gf_CurrentRoom() == libVCST_ge_Rooms_StoryRoomWarCouncil))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_indexScene = 1;
    for ( ; ( (autoD00889CA_ai >= 0 && lv_indexScene <= autoD00889CA_ae) || (autoD00889CA_ai < 0 && lv_indexScene >= autoD00889CA_ae) ) ; lv_indexScene += autoD00889CA_ai ) {
        if ((libVCST_gv_pS_AmbientSceneInstance[libVCST_gf_PS_AmbientGetRoomNumber(libVCST_ge_Rooms_StoryRoomWarCouncil)][lv_indexScene] == null)) {
            continue;
        }

        libVCST_gv_pS_AmbientSceneInstance[libVCST_gf_PS_AmbientGetRoomNumber(libVCST_ge_Rooms_StoryRoomWarCouncil)][lv_indexScene] = null;
        libVCST_gv_pS_AmbientSceneCountPerRoom[lv_indexScene] -= 1;
        libVCST_gv_pS_AmbientSceneStatus[libVCST_gf_PS_AmbientGetRoomNumber(libVCST_ge_Rooms_StoryRoomWarCouncil)][lv_indexScene] = libVCST_ge_PS_AmbientSceneStatusType_PS_AmbientSceneUnused;
        lv_indexEvent = 1;
        for ( ; ( (auto6F3FFF3C_ai >= 0 && lv_indexEvent <= auto6F3FFF3C_ae) || (auto6F3FFF3C_ai < 0 && lv_indexEvent >= auto6F3FFF3C_ae) ) ; lv_indexEvent += auto6F3FFF3C_ai ) {
            CutsceneStop(libVCST_gv_pS_AmbientEvents[libVCST_gf_PS_AmbientGetRoomNumber(libVCST_ge_Rooms_StoryRoomWarCouncil)][lv_indexScene][lv_indexEvent]);
        }
    }
    libVCST_gf_PS_AmbientScenePlay(libVCST_gf_PS_AmbientGetRoomNumber(libVCST_ge_Rooms_StoryRoomWarCouncil), "ArmyRoom_Debug_Carrier_1");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_DebugAmibentScenePlayCarriers_Init () {
    libVCST_gt_PS_DebugAmibentScenePlayCarriers = TriggerCreate("libVCST_gt_PS_DebugAmibentScenePlayCarriers_Func");
    TriggerAddEventChatMessage(libVCST_gt_PS_DebugAmibentScenePlayCarriers, c_playerAny, "ShowCarriers", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_DebugAmibentScenePlayVoidRays
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_DebugAmibentScenePlayVoidRays_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexScene;
    int lv_indexEvent;

    // Automatic Variable Declarations
    const int autoD222D382_ae = libVCST_gv_pSC_MaxAmbientScenes;
    const int autoD222D382_ai = 1;
    const int autoFB460E54_ae = libVCST_gv_pSC_MaxAmbientEvents;
    const int autoFB460E54_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libVCST_gf_CurrentRoom() == libVCST_ge_Rooms_StoryRoomWarCouncil))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_indexScene = 1;
    for ( ; ( (autoD222D382_ai >= 0 && lv_indexScene <= autoD222D382_ae) || (autoD222D382_ai < 0 && lv_indexScene >= autoD222D382_ae) ) ; lv_indexScene += autoD222D382_ai ) {
        if ((libVCST_gv_pS_AmbientSceneInstance[libVCST_gf_PS_AmbientGetRoomNumber(libVCST_ge_Rooms_StoryRoomWarCouncil)][lv_indexScene] == null)) {
            continue;
        }

        libVCST_gv_pS_AmbientSceneInstance[libVCST_gf_PS_AmbientGetRoomNumber(libVCST_ge_Rooms_StoryRoomWarCouncil)][lv_indexScene] = null;
        libVCST_gv_pS_AmbientSceneCountPerRoom[lv_indexScene] -= 1;
        libVCST_gv_pS_AmbientSceneStatus[libVCST_gf_PS_AmbientGetRoomNumber(libVCST_ge_Rooms_StoryRoomWarCouncil)][lv_indexScene] = libVCST_ge_PS_AmbientSceneStatusType_PS_AmbientSceneUnused;
        lv_indexEvent = 1;
        for ( ; ( (autoFB460E54_ai >= 0 && lv_indexEvent <= autoFB460E54_ae) || (autoFB460E54_ai < 0 && lv_indexEvent >= autoFB460E54_ae) ) ; lv_indexEvent += autoFB460E54_ai ) {
            CutsceneStop(libVCST_gv_pS_AmbientEvents[libVCST_gf_PS_AmbientGetRoomNumber(libVCST_ge_Rooms_StoryRoomWarCouncil)][lv_indexScene][lv_indexEvent]);
        }
    }
    libVCST_gf_PS_AmbientScenePlay(libVCST_gf_PS_AmbientGetRoomNumber(libVCST_ge_Rooms_StoryRoomWarCouncil), "ArmyRoom_Debug_VoidRays_1");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_DebugAmibentScenePlayVoidRays_Init () {
    libVCST_gt_PS_DebugAmibentScenePlayVoidRays = TriggerCreate("libVCST_gt_PS_DebugAmibentScenePlayVoidRays_Func");
    TriggerAddEventChatMessage(libVCST_gt_PS_DebugAmibentScenePlayVoidRays, c_playerAny, "ShowVoidRays", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_DebugAmibentScenePlayColossus
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_DebugAmibentScenePlayColossus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexScene;
    int lv_indexEvent;

    // Automatic Variable Declarations
    const int autoE26B86EF_ae = libVCST_gv_pSC_MaxAmbientScenes;
    const int autoE26B86EF_ai = 1;
    const int auto9E5AE707_ae = libVCST_gv_pSC_MaxAmbientEvents;
    const int auto9E5AE707_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libVCST_gf_CurrentRoom() == libVCST_ge_Rooms_StoryRoomWarCouncil))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_indexScene = 1;
    for ( ; ( (autoE26B86EF_ai >= 0 && lv_indexScene <= autoE26B86EF_ae) || (autoE26B86EF_ai < 0 && lv_indexScene >= autoE26B86EF_ae) ) ; lv_indexScene += autoE26B86EF_ai ) {
        if ((libVCST_gv_pS_AmbientSceneInstance[libVCST_gf_PS_AmbientGetRoomNumber(libVCST_ge_Rooms_StoryRoomWarCouncil)][lv_indexScene] == null)) {
            continue;
        }

        libVCST_gv_pS_AmbientSceneInstance[libVCST_gf_PS_AmbientGetRoomNumber(libVCST_ge_Rooms_StoryRoomWarCouncil)][lv_indexScene] = null;
        libVCST_gv_pS_AmbientSceneCountPerRoom[lv_indexScene] -= 1;
        libVCST_gv_pS_AmbientSceneStatus[libVCST_gf_PS_AmbientGetRoomNumber(libVCST_ge_Rooms_StoryRoomWarCouncil)][lv_indexScene] = libVCST_ge_PS_AmbientSceneStatusType_PS_AmbientSceneUnused;
        lv_indexEvent = 1;
        for ( ; ( (auto9E5AE707_ai >= 0 && lv_indexEvent <= auto9E5AE707_ae) || (auto9E5AE707_ai < 0 && lv_indexEvent >= auto9E5AE707_ae) ) ; lv_indexEvent += auto9E5AE707_ai ) {
            CutsceneStop(libVCST_gv_pS_AmbientEvents[libVCST_gf_PS_AmbientGetRoomNumber(libVCST_ge_Rooms_StoryRoomWarCouncil)][lv_indexScene][lv_indexEvent]);
        }
    }
    libVCST_gf_PS_AmbientScenePlay(libVCST_gf_PS_AmbientGetRoomNumber(libVCST_ge_Rooms_StoryRoomWarCouncil), "ArmyRoom_Debug_Colossus_1");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_DebugAmibentScenePlayColossus_Init () {
    libVCST_gt_PS_DebugAmibentScenePlayColossus = TriggerCreate("libVCST_gt_PS_DebugAmibentScenePlayColossus_Func");
    TriggerAddEventChatMessage(libVCST_gt_PS_DebugAmibentScenePlayColossus, c_playerAny, "ShowColossus", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_AmbientConversationTimerExpired
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_AmbientConversationTimerExpired_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexClickable;
    int lv_numberOfTalkingClickables;
    string[3] lv_listOfTalkingClickables;
    int lv_randomClickable;

    // Automatic Variable Declarations
    int autoC23605A7_ai;
    int autoC23605A7_ae;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVCST_gv_pS_AmbientConversationValidRoom[(libVCST_gf_CurrentRoom())] == true)) {
        autoC23605A7_ai = 1;
        autoC23605A7_ae = UserDataInstanceCount("Clickable")+1;
        while (autoC23605A7_ai < autoC23605A7_ae) {
            lv_indexClickable = UserDataInstance("Clickable", autoC23605A7_ai);
            if ((libVCST_gf_ClickableInRoom(lv_indexClickable, libVCST_gf_CurrentRoom()) == true)) {
                if ((ConversationDataCanRun(UserDataGetGameLink("Clickable", lv_indexClickable, "Ambient Conversation", 1), false) == true)) {
                    lv_numberOfTalkingClickables = (lv_numberOfTalkingClickables + 1);
                    lv_listOfTalkingClickables[lv_numberOfTalkingClickables] = lv_indexClickable;
                }

            }

            autoC23605A7_ai = autoC23605A7_ai+1;
        }
        if ((lv_numberOfTalkingClickables > 0)) {
            lv_randomClickable = RandomInt(1, lv_numberOfTalkingClickables);
            if ((ConversationDataActiveSound() == "") && (libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
                libVCST_gf_PS_AmbientConversationStart();
                ConversationDataRun(UserDataGetGameLink("Clickable", lv_listOfTalkingClickables[lv_randomClickable], "Ambient Conversation", 1), PlayerGroupAll(), c_conversationSkipSimple, true);
                libVCST_gf_PS_AmbientConversationEnd();
            }
            else {
                libVCST_gf_StartAmbientConversationTimer();
            }
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_AmbientConversationTimerExpired_Init () {
    libVCST_gt_PS_AmbientConversationTimerExpired = TriggerCreate("libVCST_gt_PS_AmbientConversationTimerExpired_Func");
    TriggerAddEventTimer(libVCST_gt_PS_AmbientConversationTimerExpired, libVCST_gv_pS_AmbientConversationTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_PS_AmbientConversationTrigger
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_Debug_PS_AmbientConversationTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libVCST_gv_pS_AmbientConversationTimer, 0.0, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_Debug_PS_AmbientConversationTrigger_Init () {
    libVCST_gt_Debug_PS_AmbientConversationTrigger = TriggerCreate("libVCST_gt_Debug_PS_AmbientConversationTrigger_Func");
    TriggerAddEventChatMessage(libVCST_gt_Debug_PS_AmbientConversationTrigger, c_playerAny, "talktome", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_KaraxPickupTimerExpired
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_KaraxPickupTimerExpired_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexClickable;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((ConversationDataActiveSound() == "") && (libVCMI_gf_PlayerInCinematicModeCampaign() == false) && (libVCST_gv_pS_AmbientConversationRunning == false)) {
        libVCST_gf_TurnFidgetStatusForClickableOnOff("Smith", false);
        libVCST_gv_pS_KaraxPickupEventRunning = true;
        libVCST_gf_PS_AmbientConversationTimerPauseUnpause(true);
        Wait(25.5, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(libVCST_gf_ClickableUnit("Smith")), c_animNameDefault, "Pickup", c_animFlagNonLooping, 0.75);
        Wait(17.0, c_timeGame);
        if ((ConversationDataActiveSound() == "")) {
            ConversationDataRun("pAmbientDrone_Smith", PlayerGroupAll(), c_conversationSkipSimple, false);
        }

        Wait(20.5, c_timeGame);
        libVCST_gf_PS_AmbientConversationTimerPauseUnpause(false);
        libVCST_gf_TurnFidgetStatusForClickableOnOff("Smith", true);
        libVCST_gv_pS_KaraxPickupEventRunning = false;
        libVCST_gf_StartKaraxDronePickupTimer();
    }
    else {
        libVCST_gf_StartKaraxDronePickupTimer();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_KaraxPickupTimerExpired_Init () {
    libVCST_gt_PS_KaraxPickupTimerExpired = TriggerCreate("libVCST_gt_PS_KaraxPickupTimerExpired_Func");
    TriggerEnable(libVCST_gt_PS_KaraxPickupTimerExpired, false);
    TriggerAddEventTimer(libVCST_gt_PS_KaraxPickupTimerExpired, libVCST_gv_pS_KaraxPickupTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_RoomPrepareUI
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_RoomPrepareUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetWorldVisible(PlayerGroupAll(), false);
    libVCST_gf_ShowHideStoryUnits(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_RoomPrepareUI_Init () {
    libVCST_gt_PS_RoomPrepareUI = TriggerCreate("libVCST_gt_PS_RoomPrepareUI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_RoomPrepareShipUpgrade
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_RoomPrepareShipUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCST_gf_ShowHideStoryUnits(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_RoomPrepareShipUpgrade_Init () {
    libVCST_gt_PS_RoomPrepareShipUpgrade = TriggerCreate("libVCST_gt_PS_RoomPrepareShipUpgrade_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_RoomPrepareArmyUpgrade
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_RoomPrepareArmyUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCST_gf_ShowHideStoryUnits(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_RoomPrepareArmyUpgrade_Init () {
    libVCST_gt_PS_RoomPrepareArmyUpgrade = TriggerCreate("libVCST_gt_PS_RoomPrepareArmyUpgrade_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_RoomPrepareStarmap
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_RoomPrepareStarmap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_RoomPrepareStarmap_Init () {
    libVCST_gt_PS_RoomPrepareStarmap = TriggerCreate("libVCST_gt_PS_RoomPrepareStarmap_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_RoomPrepareMission
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_RoomPrepareMission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_RoomPrepareMission_Init () {
    libVCST_gt_PS_RoomPrepareMission = TriggerCreate("libVCST_gt_PS_RoomPrepareMission_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_RoomViewTravel
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_RoomViewTravel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCST_gf_ToggleInteractives(false);
    libVCST_gf_ShowHideStoryUI(false);
    DialogSetSubtitlePositionOverride(c_invalidDialogId);
    libVCST_gf_PS_HideAllBackgrounds();
    libVCUI_gf_PU_StarmapDisplay();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_RoomViewTravel_Init () {
    libVCST_gt_PS_RoomViewTravel = TriggerCreate("libVCST_gt_PS_RoomViewTravel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_RoomViewMission
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_RoomViewMission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCST_gf_ToggleInteractives(false);
    libVCST_gf_ShowHideStoryUI(false);
    DialogSetSubtitlePositionOverride(c_invalidDialogId);
    if ((libVoiC_gf_StoryInSimulation() == true)) {
        libVCUI_gf_PU_MissionDisplay(libVoiC_gf_PC_StorySimulationMission());
    }
    else {
        libVCUI_gf_PU_MissionDisplay(libVCST_gf_NextAvailableMission(libVoiC_gf_CurrentLocation()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_RoomViewMission_Init () {
    libVCST_gt_PS_RoomViewMission = TriggerCreate("libVCST_gt_PS_RoomViewMission_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_RoomViewArchives
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_RoomViewArchives_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCST_gf_ToggleInteractives(false);
    libVCST_gf_ShowHideStoryUI(false);
    DialogClearSubtitlePositionOverride();
    DialogClearSubtitlePositionOverrideControl();
    libVCUI_gf_PU_ArchivesDisplay();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_RoomViewArchives_Init () {
    libVCST_gt_PS_RoomViewArchives = TriggerCreate("libVCST_gt_PS_RoomViewArchives_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_RoomViewArmyUpgrade
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_RoomViewArmyUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCST_gf_ToggleInteractives(false);
    libVCST_gf_ShowHideStoryUI(false);
    DialogSetSubtitlePositionOverride(c_invalidDialogId);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.0);
    libVCUI_gf_PU_ArmyDisplay(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_RoomViewArmyUpgrade_Init () {
    libVCST_gt_PS_RoomViewArmyUpgrade = TriggerCreate("libVCST_gt_PS_RoomViewArmyUpgrade_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_RoomViewShipUpgrade
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_RoomViewShipUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCST_gf_ToggleInteractives(false);
    libVCST_gf_ShowHideStoryUI(false);
    DialogSetSubtitlePositionOverride(c_invalidDialogId);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.0);
    libVCUI_gf_PU_SoADisplay(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_RoomViewShipUpgrade_Init () {
    libVCST_gt_PS_RoomViewShipUpgrade = TriggerCreate("libVCST_gt_PS_RoomViewShipUpgrade_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_RoomViewStoryCheat
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_RoomViewStoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCST_gf_ToggleInteractives(false);
    libVCST_gf_ShowHideStoryUI(false);
    DialogSetSubtitlePositionOverride(c_invalidDialogId);
    UIClearBattleNetButtonOffset(PlayerGroupAll());
    libVCST_gf_PS_DebugStoryCheatDisplay();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_RoomViewStoryCheat_Init () {
    libVCST_gt_PS_RoomViewStoryCheat = TriggerCreate("libVCST_gt_PS_RoomViewStoryCheat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_RoomViewProgressCheat
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_RoomViewProgressCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCST_gf_ToggleInteractives(false);
    libVCST_gf_ShowHideStoryUI(false);
    DialogSetSubtitlePositionOverride(c_invalidDialogId);
    UIClearBattleNetButtonOffset(PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_RoomViewProgressCheat_Init () {
    libVCST_gt_PS_RoomViewProgressCheat = TriggerCreate("libVCST_gt_PS_RoomViewProgressCheat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_RoomViewStopTravel
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_RoomViewStopTravel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexClickable;

    // Automatic Variable Declarations
    int auto4A9790C7_ai;
    int auto4A9790C7_ae;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gf_PU_StarmapClose();
    auto4A9790C7_ai = 1;
    auto4A9790C7_ae = UserDataInstanceCount("Clickable")+1;
    while (auto4A9790C7_ai < auto4A9790C7_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto4A9790C7_ai);
        ConversationDataRegisterPortrait(libVoiC_gf_PC_ClickableConversationLink(lv_indexClickable), c_invalidPortraitId);
        ConversationDataRegisterUnit(libVoiC_gf_PC_ClickableConversationLink(lv_indexClickable), libVCST_gf_ClickableUnit(lv_indexClickable));
        auto4A9790C7_ai = auto4A9790C7_ai+1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_RoomViewStopTravel_Init () {
    libVCST_gt_PS_RoomViewStopTravel = TriggerCreate("libVCST_gt_PS_RoomViewStopTravel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_RoomViewStopMission
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_RoomViewStopMission_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexClickable;

    // Automatic Variable Declarations
    int auto3D22C8A3_ai;
    int auto3D22C8A3_ae;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gf_PU_MissionClose();
    auto3D22C8A3_ai = 1;
    auto3D22C8A3_ae = UserDataInstanceCount("Clickable")+1;
    while (auto3D22C8A3_ai < auto3D22C8A3_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto3D22C8A3_ai);
        ConversationDataRegisterPortrait(libVoiC_gf_PC_ClickableConversationLink(lv_indexClickable), c_invalidPortraitId);
        ConversationDataRegisterUnit(libVoiC_gf_PC_ClickableConversationLink(lv_indexClickable), libVCST_gf_ClickableUnit(lv_indexClickable));
        auto3D22C8A3_ai = auto3D22C8A3_ai+1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_RoomViewStopMission_Init () {
    libVCST_gt_PS_RoomViewStopMission = TriggerCreate("libVCST_gt_PS_RoomViewStopMission_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_RoomViewStopArchives
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_RoomViewStopArchives_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gf_PU_ArchivesClosed();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_RoomViewStopArchives_Init () {
    libVCST_gt_PS_RoomViewStopArchives = TriggerCreate("libVCST_gt_PS_RoomViewStopArchives_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_RoomViewStopArmyUpgrade
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_RoomViewStopArmyUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCST_gf_SetAllSoundChannelVolumesStory(libNtve_ge_VolumeChannelMode_Game, 1.5);
    libVCUI_gf_PU_ArmyClose();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_RoomViewStopArmyUpgrade_Init () {
    libVCST_gt_PS_RoomViewStopArmyUpgrade = TriggerCreate("libVCST_gt_PS_RoomViewStopArmyUpgrade_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_RoomViewStopShipUpgrade
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_RoomViewStopShipUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCST_gf_SetAllSoundChannelVolumesStory(libNtve_ge_VolumeChannelMode_Game, 1.5);
    libVCUI_gf_PU_SoAClose();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_RoomViewStopShipUpgrade_Init () {
    libVCST_gt_PS_RoomViewStopShipUpgrade = TriggerCreate("libVCST_gt_PS_RoomViewStopShipUpgrade_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_RoomViewStopStoryCheat
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_RoomViewStopStoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_RoomViewStopStoryCheat_Init () {
    libVCST_gt_PS_RoomViewStopStoryCheat = TriggerCreate("libVCST_gt_PS_RoomViewStopStoryCheat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_ConversationWaitForSkip
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_ConversationWaitForSkip_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, libVCST_gt_PS_ConversationCancelAndFade, true, false);
    while (true) {
        Wait(20.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_ConversationWaitForSkip_Init () {
    libVCST_gt_PS_ConversationWaitForSkip = TriggerCreate("libVCST_gt_PS_ConversationWaitForSkip_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_ConversationResponseRun
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_ConversationResponseRun_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_originalCharacter;
    string lv_speakingCharacter;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_originalCharacter = libVCST_gv_pS_AmbientCharacter;
    if ((lv_originalCharacter == "XelNagaKeystone")) {
        lv_speakingCharacter = "Smith";
    }
    else {
        lv_speakingCharacter = lv_originalCharacter;
    }
    libVCST_gf_TurnFidgetStatusForClickableOnOff(lv_speakingCharacter, false);
    if ((UserDataGetInt("Clickable", lv_originalCharacter, "AlternateAnimationsEnabled", 1) == 1)) {
        libVCST_gf_TurnAlternateStatusForClickableOnOff(lv_speakingCharacter, false);
    }

    ConversationDataRun(libVCST_gv_pS_ResponseConversation, PlayerGroupAll(), c_conversationSkipSimple, true);
    if ((lv_speakingCharacter == "Smith") && (libVCST_gv_pS_KaraxPickupEventRunning == true)) {
    }
    else {
        libVCST_gf_TurnFidgetStatusForClickableOnOff(lv_speakingCharacter, true);
        if ((UserDataGetInt("Clickable", lv_originalCharacter, "AlternateAnimationsEnabled", 1) == 1)) {
            libVCST_gf_TurnAlternateStatusForClickableOnOff(lv_speakingCharacter, true);
        }

    }
    if ((libVCST_gv_pS_AmbientCharacter == lv_originalCharacter)) {
        libVCST_gv_pS_AmbientCharacter = null;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_ConversationResponseRun_Init () {
    libVCST_gt_PS_ConversationResponseRun = TriggerCreate("libVCST_gt_PS_ConversationResponseRun_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_ConversationAmbientTransmissionRun
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_ConversationAmbientTransmissionRun_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_originalCharacter;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_originalCharacter = libVCST_gv_pS_AmbientCharacter;
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(libVCST_gf_ClickableUnit(libVCST_gv_pS_AmbientCharacter), false, false, "Talk"), c_invalidPortraitId, SoundLink(ConversationDataGetSound(libVCST_gv_pS_AmbientLine, false), c_soundIndexAny), 0.0, c_transmissionDurationAdd, true);
    if ((libVCST_gv_pS_AmbientCharacter == lv_originalCharacter)) {
        libVCST_gv_pS_AmbientCharacter = null;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_ConversationAmbientTransmissionRun_Init () {
    libVCST_gt_PS_ConversationAmbientTransmissionRun = TriggerCreate("libVCST_gt_PS_ConversationAmbientTransmissionRun_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_ConversationCancelAndFade
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_ConversationCancelAndFade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCST_gv_pS_LastConversationSkipped = true;
    libVCST_gv_pS_LastScenePlayedFull = false;
    libVCST_gf_PS_SoundFadeAllExceptMusic(0.8, false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    libVCST_gf_StoryCutsceneFade(false, 1.0, true);
    ConversationDataStop();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_ConversationCancelAndFade_Init () {
    libVCST_gt_PS_ConversationCancelAndFade = TriggerCreate("libVCST_gt_PS_ConversationCancelAndFade_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_ConversationCameraApply
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_ConversationCameraApply_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_convLine;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libVCST_gf_PS_ConversationCameraApply(libVCST_gf_PS_ClickableFromCharacter(ConversationDataGetSpeaker(ConversationDataActiveLine())), ConversationDataActiveCamera());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_ConversationCameraApply_Init () {
    libVCST_gt_PS_ConversationCameraApply = TriggerCreate("libVCST_gt_PS_ConversationCameraApply_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_ClickableClicked
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_ClickableClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexClickable;

    // Automatic Variable Declarations
    int auto3B40323A_ai;
    int auto3B40323A_ae;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCST_gv_pS_InteractionOn == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto3B40323A_ai = 1;
    auto3B40323A_ae = UserDataInstanceCount("Clickable")+1;
    while (auto3B40323A_ai < auto3B40323A_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto3B40323A_ai);
        if ((libVCST_gf_PS_ClickableIsEnabled(lv_indexClickable) == true) && (libVCST_gf_ClickableUnit(lv_indexClickable) == EventUnit())) {
            libVCST_gf_PS_ClickableActionRun(lv_indexClickable);
            return true;
        }

        auto3B40323A_ai = auto3B40323A_ai+1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_ClickableClicked_Init () {
    libVCST_gt_PS_ClickableClicked = TriggerCreate("libVCST_gt_PS_ClickableClicked_Func");
    TriggerAddEventUnitClick(libVCST_gt_PS_ClickableClicked, null, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_InteractiveHighlightStart
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_InteractiveHighlightStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexClickable;

    // Automatic Variable Declarations
    int auto49CAF8FC_ai;
    int auto49CAF8FC_ae;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCST_gv_pS_InteractionOn == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto49CAF8FC_ai = 1;
    auto49CAF8FC_ae = UserDataInstanceCount("Clickable")+1;
    while (auto49CAF8FC_ai < auto49CAF8FC_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto49CAF8FC_ai);
        if ((libVCST_gf_ClickableUnit(lv_indexClickable) == EventUnit()) && (libVCST_gf_PS_ClickableIsEnabled(lv_indexClickable) == true)) {
            libVCST_gf_PS_ClickableCalloutShowHide(true, lv_indexClickable);
            libVCST_gf_PS_ClickableCalloutHighlight(true, lv_indexClickable);
            return true;
        }

        auto49CAF8FC_ai = auto49CAF8FC_ai+1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_InteractiveHighlightStart_Init () {
    libVCST_gt_PS_InteractiveHighlightStart = TriggerCreate("libVCST_gt_PS_InteractiveHighlightStart_Func");
    TriggerAddEventUnitHighlight(libVCST_gt_PS_InteractiveHighlightStart, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_InteractiveHighlightStop
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_InteractiveHighlightStop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexClickable;

    // Automatic Variable Declarations
    int auto9363527C_ai;
    int auto9363527C_ae;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCST_gv_pS_InteractionOn == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9363527C_ai = 1;
    auto9363527C_ae = UserDataInstanceCount("Clickable")+1;
    while (auto9363527C_ai < auto9363527C_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto9363527C_ai);
        if ((libVCST_gf_ClickableUnit(lv_indexClickable) == EventUnit())) {
            if ((libVCST_gf_PS_ClickableIsNew(lv_indexClickable) == false)) {
                libVCST_gf_PS_ClickableCalloutShowHide(false, lv_indexClickable);
            }

            libVCST_gf_PS_ClickableCalloutHighlight(false, lv_indexClickable);
            return true;
        }

        auto9363527C_ai = auto9363527C_ai+1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_InteractiveHighlightStop_Init () {
    libVCST_gt_PS_InteractiveHighlightStop = TriggerCreate("libVCST_gt_PS_InteractiveHighlightStop_Func");
    TriggerAddEventUnitHighlight(libVCST_gt_PS_InteractiveHighlightStop, null, c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_PlayIdleLines
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_PlayIdleLines_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_waitTime;

    // Automatic Variable Declarations
    // Variable Initialization

    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_PlayIdleLines_Init () {
    libVCST_gt_PS_PlayIdleLines = TriggerCreate("libVCST_gt_PS_PlayIdleLines_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_PlayEntryAmbientLine
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_PlayEntryAmbientLine_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libNtve_gf_PlayerInCinematicMode(1) == false) && (libVCST_gf_CurrentRoom() == libVCST_ge_Rooms_StoryRoomBridge) && (libVCST_gf_CurrentStoryActivity() == libVCST_ge_StoryActivities_ViewingRoom))) {
        Wait(0.1, c_timeGame);
    }
    Wait(1.0, c_timeGame);
    if (((libVCST_gf_CurrentRoom() != libVCST_ge_Rooms_StoryRoomBridge) || (libVCST_gf_CurrentStoryActivity() != libVCST_ge_StoryActivities_ViewingRoom))) {
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_PlayEntryAmbientLine_Init () {
    libVCST_gt_PS_PlayEntryAmbientLine = TriggerCreate("libVCST_gt_PS_PlayEntryAmbientLine_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_ClickableCalloutInitDelayed
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_ClickableCalloutInitDelayed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.1, c_timeGame);
    libVCST_gf_PS_ClickableDisplayUpdateAll();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_ClickableCalloutInitDelayed_Init () {
    libVCST_gt_PS_ClickableCalloutInitDelayed = TriggerCreate("libVCST_gt_PS_ClickableCalloutInitDelayed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_CutsceneDetectSkipping
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_CutsceneDetectSkipping_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, libVCST_gt_PS_CutsceneSkipped, true, false);
    while (true) {
        Wait(20.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_CutsceneDetectSkipping_Init () {
    libVCST_gt_PS_CutsceneDetectSkipping = TriggerCreate("libVCST_gt_PS_CutsceneDetectSkipping_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PS_CutsceneSkipped
//--------------------------------------------------------------------------------------------------
bool libVCST_gt_PS_CutsceneSkipped_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCST_gf_PS_SoundFadeAllExceptMusic(0.8, false);
    libVCST_gv_pS_LastScenePlayedFull = false;
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    libVCST_gf_StoryCutsceneFade(false, 1.0, true);
    CutsceneStop(libVCST_gv_pS_Cutscene);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVCST_gt_PS_CutsceneSkipped_Init () {
    libVCST_gt_PS_CutsceneSkipped = TriggerCreate("libVCST_gt_PS_CutsceneSkipped_Func");
}

void libVCST_InitTriggers () {
    libVCST_gt_PS_DebugProgressSave_Init();
    libVCST_gt_PS_DebugProgressLoad_Init();
    libVCST_gt_PS_DebugProgressCheatUsed_Init();
    libVCST_gt_PS_DebugProgressCheatCancelled_Init();
    libVCST_gt_PS_DebugStoryCheat_Init();
    libVCST_gt_PS_DebugStoryCheatInit_Init();
    libVCST_gt_PS_DebugStoryCheatSceneListSelect_Init();
    libVCST_gt_PS_DebugStoryCheatFilterChange_Init();
    libVCST_gt_PS_DebugStoryCheatCheckbox_Init();
    libVCST_gt_PS_DebugStoryCheatPlay_Init();
    libVCST_gt_PS_DebugStoryCheatClose_Init();
    libVCST_gt_PS_SaveStoryDataCallback_Init();
    libVCST_gt_PS_StoryModeMenuQuit_Init();
    libVCST_gt_PS_SaveGameStart_Init();
    libVCST_gt_PS_SaveGameEnd_Init();
    libVCST_gt_PS_StoryPerformFadeIn_Init();
    libVCST_gt_PS_EventCampaignResetData_Init();
    libVCST_gt_PS_EventUIArchive_Quit_Init();
    libVCST_gt_PS_EventUIArchive_PlayMission_Init();
    libVCST_gt_PS_EventUIArchive_PlayScene_Init();
    libVCST_gt_PS_EventUITravel_Quit_Init();
    libVCST_gt_PS_EventUITravel_Launch_Init();
    libVCST_gt_PS_EventUIMission_Launch_Init();
    libVCST_gt_PS_EventUIAiur05Mission_Launch_Init();
    libVCST_gt_PS_EventUIMission_Quit_Init();
    libVCST_gt_PS_EventUIChampion_Quit_Init();
    libVCST_gt_PS_EventUIArmy_Quit_Init();
    libVCST_gt_PS_EventUIShip_Quit_Init();
    libVCST_gt_PS_EventUIArchivesArmy_Init();
    libVCST_gt_PS_EventUIArchivesSoA_Init();
    libVCST_gt_PS_BackgroundScreenShake_Init();
    libVCST_gt_PS_DebugBackgroundReset_Init();
    libVCST_gt_PS_DebugBackgroundOff_Init();
    libVCST_gt_PS_DebugBackgroundOn_Init();
    libVCST_gt_PS_AmbientSceneEnded_Init();
    libVCST_gt_PS_AmbientSceneTimerExpired_Init();
    libVCST_gt_PS_DebugAmibentScenePlayCarriers_Init();
    libVCST_gt_PS_DebugAmibentScenePlayVoidRays_Init();
    libVCST_gt_PS_DebugAmibentScenePlayColossus_Init();
    libVCST_gt_PS_AmbientConversationTimerExpired_Init();
    libVCST_gt_Debug_PS_AmbientConversationTrigger_Init();
    libVCST_gt_PS_KaraxPickupTimerExpired_Init();
    libVCST_gt_PS_RoomPrepareUI_Init();
    libVCST_gt_PS_RoomPrepareShipUpgrade_Init();
    libVCST_gt_PS_RoomPrepareArmyUpgrade_Init();
    libVCST_gt_PS_RoomPrepareStarmap_Init();
    libVCST_gt_PS_RoomPrepareMission_Init();
    libVCST_gt_PS_RoomViewTravel_Init();
    libVCST_gt_PS_RoomViewMission_Init();
    libVCST_gt_PS_RoomViewArchives_Init();
    libVCST_gt_PS_RoomViewArmyUpgrade_Init();
    libVCST_gt_PS_RoomViewShipUpgrade_Init();
    libVCST_gt_PS_RoomViewStoryCheat_Init();
    libVCST_gt_PS_RoomViewProgressCheat_Init();
    libVCST_gt_PS_RoomViewStopTravel_Init();
    libVCST_gt_PS_RoomViewStopMission_Init();
    libVCST_gt_PS_RoomViewStopArchives_Init();
    libVCST_gt_PS_RoomViewStopArmyUpgrade_Init();
    libVCST_gt_PS_RoomViewStopShipUpgrade_Init();
    libVCST_gt_PS_RoomViewStopStoryCheat_Init();
    libVCST_gt_PS_ConversationWaitForSkip_Init();
    libVCST_gt_PS_ConversationResponseRun_Init();
    libVCST_gt_PS_ConversationAmbientTransmissionRun_Init();
    libVCST_gt_PS_ConversationCancelAndFade_Init();
    libVCST_gt_PS_ConversationCameraApply_Init();
    libVCST_gt_PS_ClickableClicked_Init();
    libVCST_gt_PS_InteractiveHighlightStart_Init();
    libVCST_gt_PS_InteractiveHighlightStop_Init();
    libVCST_gt_PS_PlayIdleLines_Init();
    libVCST_gt_PS_PlayEntryAmbientLine_Init();
    libVCST_gt_PS_ClickableCalloutInitDelayed_Init();
    libVCST_gt_PS_CutsceneDetectSkipping_Init();
    libVCST_gt_PS_CutsceneSkipped_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libVCST_InitLib_completed = false;

void libVCST_InitLib () {
    if (libVCST_InitLib_completed) {
        return;
    }

    libVCST_InitLib_completed = true;

    libVCST_InitLibraries();
    libVCST_InitVariables();
    libVCST_InitTriggers();
}

include "TriggerLibs/VoidCampaignLib"
include "TriggerLibs/VoidCampaignMissionLib"
include "TriggerLibs/VoidCampaignUILib"

