//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Whispers of Doom
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/CampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libCamp_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_p1_USER = 1;
const int gv_p2_ALLIED = 2;
const int gv_p3_ZERG = 3;
const int gv_p4_RUNOUT_ZERG = 4;
const int gv_p5_XELNAGASHRINES = 5;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_inCinematic;
unit gv_tHEONEZERATUL;
unit gv_tHEONEVOIDSEEKER;
unit gv_tHEONEKERRIGAN;
revealer gv_tHEONEREVEALER;
int gv_tHEONEPING;
int gv_interruptableTransmission;
int gv_pingThirdShrine;
point[31] gv_runoutPingPoints;
unitgroup gv_zergEncircleGroupLeft;
unitgroup gv_zergEncircleGroupRight;
int gv_inCombatIndicator;
unitgroup gv_runoutMobs;
unitgroup gv_nydusTotalSpawnlings;
unitgroup gv_nydusSpawnRumble;
region gv_runoutNydusSpawnRegion;
unit gv_animatedShrine;
unitgroup gv_nydusWorms;
unitgroup gv_patrollingZerg;
timer gv_runoutTimer;
unitgroup gv_airAttackGroup;
bool gv_flashButtonBlink;
bool gv_flashButtonVoidPrison;
revealer gv_blinkRevealer1;
revealer gv_blinkRevealer2;
actor gv_blinkTeach1;
actor gv_blinkTeach2;
actor gv_blinkReminder;
actor gv_voidPrisonVictimActor;
unitgroup gv_overseerHydralisks;
unitgroup gv_scourgeAmbience1;
actor gv_postStalkerIntroHint;
unit gv_stalkerIntroOverseer1;
unit gv_stalkerIntroOverseer2;
unitgroup gv_scourgeAmbience2;
point gv_airAssaultEncircleRally;
unitgroup gv_airAssaultGroundUnits;
unit gv_airAssaultOverlord;
unit gv_airAssaultOverseer;
unitgroup gv_hatchery1Guards;
unitgroup gv_banelingBullies;
unitgroup gv_crawlers;
unit gv_tHEONEKARASS;
unitgroup gv_karassZealots;
unitgroup gv_rumbleZerglingFlank1;
unitgroup gv_rumbleZerglingFlank2;
unitgroup gv_rumbleVanguard;
unitgroup gv_rumbleVanguardAll;
unitgroup gv_rumbleMidguard;
unitgroup gv_rumbleRearguard;
unitgroup gv_rumbleFlyers;
unit gv_nydusWormFlee;
unitgroup gv_scourgeAmbience3;
unitgroup gv_rock01Attackers;
unitgroup gv_rock02Attackers;
unitgroup gv_rock03Attackers;
int gv_runoutRespawnThreat;
timer gv_timerEscape;
actor gv_actorImpactShield;
unit gv_panickedUnit;
unitgroup gv_panickedGroup;
int gv_stat_StalkerDeaths;
int gv_stat_ZeratulKills;
int gv_stat_StalkerKills;
int gv_statSurvivingStalkers;
fixed gv_statZeratulLifeRemaining;
bool gv_achievementZeratulIsHurt;
int gv_objectiveShrinesZeratulPlusVoidseekerEqualsWin;
int gv_objectiveShrinesGetToShrines;
int gv_obejctiveShrinesUpdate;
int gv_obejctiveShrinesTotal;
int gv_objectiveShrinesZeratulMustSurvive;
int gv_objectiveHatcheriesQuota;
int gv_objectiveHatcheriesKilled;
int gv_objectiveHatcheries;
unit gv_briefingVoidSeeker;
bool gv_cinematicKarassMidCinematicCompleted;
unitgroup gv_cinematicKarassMidHiddenUnitGroup;
unitgroup gv_cinematicKarassActors;
point gv_cinematicKarassZealotRally;
unit gv_cinematicKarassPrism1;
unit gv_cinematicKarassPrism2;
unitgroup gv_cinematicKerriganIntroActors;
bool gv_cinematicTumorsCreated;
unitgroup gv_cinematicKerriganIntroHiddenPlayerUnits;
bool gv_cinematicKerriganIntroCinematicCompleted;
unit gv_cinematicKerriganIntroKarass;
unit gv_cinematicKerriganIntroZeratul;
bool gv_victoryCinematicCompleted;
bool gv_victoryFadedOut;

void InitGlobals () {
    gv_tHEONEVOIDSEEKER = UnitFromId(1560);
    gv_interruptableTransmission = c_invalidTransmissionId;
    gv_zergEncircleGroupLeft = UnitGroupEmpty();
    gv_zergEncircleGroupRight = UnitGroupEmpty();
    gv_runoutMobs = UnitGroupEmpty();
    gv_nydusTotalSpawnlings = UnitGroupEmpty();
    gv_nydusSpawnRumble = UnitGroupEmpty();
    gv_nydusWorms = UnitGroupEmpty();
    gv_patrollingZerg = UnitGroupEmpty();
    gv_runoutTimer = TimerCreate();
    gv_airAttackGroup = UnitGroupEmpty();
    gv_overseerHydralisks = UnitGroupEmpty();
    gv_scourgeAmbience1 = UnitGroupEmpty();
    gv_scourgeAmbience2 = UnitGroupEmpty();
    gv_airAssaultGroundUnits = UnitGroupEmpty();
    gv_hatchery1Guards = UnitGroupEmpty();
    gv_banelingBullies = UnitGroupEmpty();
    gv_crawlers = UnitGroupEmpty();
    gv_karassZealots = UnitGroupEmpty();
    gv_rumbleZerglingFlank1 = UnitGroupEmpty();
    gv_rumbleZerglingFlank2 = UnitGroupEmpty();
    gv_rumbleVanguard = UnitGroupEmpty();
    gv_rumbleVanguardAll = UnitGroupEmpty();
    gv_rumbleMidguard = UnitGroupEmpty();
    gv_rumbleRearguard = UnitGroupEmpty();
    gv_rumbleFlyers = UnitGroupEmpty();
    gv_scourgeAmbience3 = UnitGroupEmpty();
    gv_rock01Attackers = UnitGroupEmpty();
    gv_rock02Attackers = UnitGroupEmpty();
    gv_rock03Attackers = UnitGroupEmpty();
    gv_timerEscape = TimerCreate();
    gv_panickedGroup = UnitGroupEmpty();
    gv_objectiveShrinesZeratulPlusVoidseekerEqualsWin = c_invalidObjectiveId;
    gv_objectiveShrinesGetToShrines = c_invalidObjectiveId;
    gv_obejctiveShrinesTotal = 3;
    gv_objectiveShrinesZeratulMustSurvive = c_invalidObjectiveId;
    gv_objectiveHatcheriesQuota = 3;
    gv_objectiveHatcheries = c_invalidObjectiveId;
    gv_cinematicKarassMidHiddenUnitGroup = UnitGroupEmpty();
    gv_cinematicKarassActors = UnitGroupEmpty();
    gv_cinematicKerriganIntroActors = UnitGroupEmpty();
    gv_cinematicKerriganIntroHiddenPlayerUnits = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_SpawnNydusWorm (region lp_region, trigger lp_trigger);
void gf_RefreshPlayersHPandShields ();
void gf_AnimateShrine (unit lp_shrine);
void gf_StalkerReinforcements (region lp_mRegion, int lp_mMaxStalkers);
bool gf_PlayerIsInCombat (int lp_player);
void gf_AddUpgradeForZerg (int lp_qty, string lp_upgrade);
void gf_ActivatePatrolAIForUnit (unit lp_mUnit, point lp_mPointEnd, fixed lp_mPatrolLength);
void gf_IssuePanicOrder (unit lp_mUnit);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03UnitsVariables;
trigger gt_Init04Music;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_IntroSequence;
trigger gt_StartGame;
trigger gt_HellomynameisZeratulQ;
trigger gt_StorymodeTipsQ;
trigger gt_ButtonFlashBlinkOn;
trigger gt_ButtonFlashBlinkOff;
trigger gt_ButtonFlashVoidPrisonOn;
trigger gt_ButtonFlashVoidPrisonOff;
trigger gt_CloakingPowerQ;
trigger gt_CloakingKillReaction1;
trigger gt_CloakingKillReaction2;
trigger gt_CloakingKillReaction22;
trigger gt_BlinkTeachViaWaiting;
trigger gt_BlinkTeachViaMovement;
trigger gt_BlinkTeachQ;
trigger gt_BlinkAcrossChasm1;
trigger gt_BlinkAcrossChasmReaction;
trigger gt_BlinkReminder;
trigger gt_BlinkAcrossChasm2;
trigger gt_TeachRocksQ;
trigger gt_VoidPrisonTeachQ;
trigger gt_VoidPrisonVictim1Dies;
trigger gt_VoidPrisonKillReaction1;
trigger gt_VoidPrisonKillReaction2;
trigger gt_ScurryingZergTrip;
trigger gt_DyingUltralisk;
trigger gt_GuardedSporeCalloutQ;
trigger gt_PrisonThenBlinkCrawler;
trigger gt_OverseerIntroActionsQ;
trigger gt_OverseerHydralisksDeadRunAway;
trigger gt_ObjectiveShrine1ReachedQ;
trigger gt_KerriganTaunt11Q;
trigger gt_ScourgeAmbience1;
trigger gt_ZeratulReachesStalkerIntroChasm;
trigger gt_KerriganTaunt12Q;
trigger gt_StalkersIntroWarpInQ;
trigger gt_StalkerIntroScourgeEncircleInit;
trigger gt_StalkerIntroScourgeEncircleAI;
trigger gt_StalkerIntroScourgeEncircleEnd;
trigger gt_StalkersRevealerTipQ;
trigger gt_StalkerIntroCleanUpPing;
trigger gt_StalkerCliffPewQ;
trigger gt_StalkerCliffKillReaction;
trigger gt_GuardedSporePatrol;
trigger gt_Reinforcements1;
trigger gt_BroodlordPatrolQ;
trigger gt_ScourgeAmbience2;
trigger gt_Reinforcements2;
trigger gt_AirAssaultQ;
trigger gt_AirAssaultEncircleAirInit;
trigger gt_AirAssaultEncircleGroundInit;
trigger gt_AirAssaultEncircleAirAI;
trigger gt_AirAssaultEncircleGroundAI;
trigger gt_AirAssaultEncircleEndGivePlayerReinforcements;
trigger gt_HatcheryDiscovered1Q;
trigger gt_ObjectiveShrine2ReachedQ;
trigger gt_Reinforcements4;
trigger gt_KerriganTaunt2Q;
trigger gt_HeavyHitterPuzzleInitQ;
trigger gt_HeavyHitterPuzzleBurrowedUltraliskInit;
trigger gt_BanelingPuzzleIntroQ;
trigger gt_BanelingPuzzleBanelingSlowUnburrow;
trigger gt_BanelingPuzzleBanelingAI;
trigger gt_BanelingPuzzleRockBridge;
trigger gt_HatcheryDiscovered2UltralisksQ;
trigger gt_Hatchery2AI;
trigger gt_DyingUltralisksHatchery2;
trigger gt_AmbushInit;
trigger gt_Crawlers;
trigger gt_CrawlersQ;
trigger gt_CrawlersDestroyedQ;
trigger gt_MeetKarass;
trigger gt_RumbleInit;
trigger gt_RumbleAiurProtossAIPush1;
trigger gt_RumbleAiurProtossAIPush2;
trigger gt_RumbleAiurProtossAIPush3;
trigger gt_RumbleFinish;
trigger gt_StunnedUltraliskQ;
trigger gt_AntiAirRequestQ;
trigger gt_KarassKilledBeforeRunoutQ;
trigger gt_KarassPsiStormTarget01;
trigger gt_KarassPsiStormTarget02;
trigger gt_NydusSpawning;
trigger gt_NydusSpawningQ;
trigger gt_NydusSpawnRumble;
trigger gt_NydusSpawnAIRumble;
trigger gt_NydusWormRetreat;
trigger gt_NydusWormsAllDeadQ;
trigger gt_ZeratulsTheOnlyOneAlive;
trigger gt_Enemiesare99999Staggered;
trigger gt_AllPlayerGroundForcesDeadFlyersGoAway;
trigger gt_HatcheryDiscovered3RumbleQ;
trigger gt_Hatchery3Roacheggs;
trigger gt_ObjectiveShrine3Reached;
trigger gt_RunoutInitialization;
trigger gt_KerriganRegeneration;
trigger gt_ShowTimer;
trigger gt_RunoutFirstWave;
trigger gt_RunoutArrowPingConstant;
trigger gt_RunoutEvent1Nydus;
trigger gt_ScourgeAmbience3;
trigger gt_RunoutEvent2Nydus;
trigger gt_RunoutEvent3AirEncircle;
trigger gt_RunoutEncircleInit;
trigger gt_RunoutEncircleAI;
trigger gt_RunoutEvent4Nydus;
trigger gt_RunoutEvent5DoubleNydus;
trigger gt_RunoutEvent6UltraKarassTargeted;
trigger gt_KerriganAttacksKarass;
trigger gt_KarassKilledDuringRunout;
trigger gt_KarassFelledLineQ;
trigger gt_RunoutEvent7BroodLord;
trigger gt_RunoutEvent8NydusOverseer;
trigger gt_RunoutEventCentral;
trigger gt_RunoutRock01Safety;
trigger gt_Rock01dies;
trigger gt_RunoutRock02Safety;
trigger gt_Rock02dies;
trigger gt_RunoutRock03Safety;
trigger gt_Rock03dies;
trigger gt_RunoutConstantNydusAttacks;
trigger gt_RunoutAttackWaves;
trigger gt_NydusSpawnRunout;
trigger gt_NydusSpawnAIRunout;
trigger gt_TimerEscape;
trigger gt_TimerEscapeExpires;
trigger gt_ShieldImpactRemove;
trigger gt_AnimateShrineTrigger;
trigger gt_StalkerUntargetableDuringWarpIn;
trigger gt_StalkerConvertAfterWarpIn;
trigger gt_StalkerColor;
trigger gt_PlayerIsInCombat;
trigger gt_PlayerIsInCombatIndicatorDiminish;
trigger gt_PatrolAI;
trigger gt_IssuePanicOrderTrigger;
trigger gt_PanickedUnitBurrowAI;
trigger gt_ZergEncircleLoopingSounds;
trigger gt_AchievementZeratulHurtAdvanced;
trigger gt_StalkerKill;
trigger gt_StalkerDies;
trigger gt_VictoryVoidSeekerRescue;
trigger gt_VictoryAncestralRecallComplete;
trigger gt_Victory;
trigger gt_DefeatZeratulDead;
trigger gt_DefeatVoidseekerDestroyed;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_Hatchery01Dies;
trigger gt_Hatchery02Dies;
trigger gt_Hatchery03Dies;
trigger gt_Shrine01;
trigger gt_Shrine02;
trigger gt_Shrine03;
trigger gt_ObjectiveShrinesCreate;
trigger gt_ObjectiveShrinesDiscoverQ;
trigger gt_ObjectiveShrinesComplete;
trigger gt_ObjectiveShrineFailed;
trigger gt_ObjectiveShrinesUpdate;
trigger gt_ObjectiveZeratulCreate;
trigger gt_ObjectiveZeratulDiscover;
trigger gt_ObjectiveZeratulComplete;
trigger gt_ObjectiveHatcheriesCreate;
trigger gt_ObjectiveHatcheriesCompleteQ;
trigger gt_ObjectiveHatcheriesDestroyedQ;
trigger gt_ObjectiveVoidSeekerObjectivesQ;
trigger gt_ObjectiveVoidSeekerComplete;
trigger gt_DialogueGetToVoidSeeker;
trigger gt_BriefingQ;
trigger gt_BriefingScene00;
trigger gt_BriefingVoidSeekerAnimations;
trigger gt_BriefingZeratulUnload;
trigger gt_CinematicKarassMidQ;
trigger gt_CinematicKarassMidSetup;
trigger gt_CinematicKarassMidCinematic;
trigger gt_CinematicKarassCameraWork;
trigger gt_CinematicKarassCoolWarpIn;
trigger gt_CinematicKarassCoolWarpInUnitGroup;
trigger gt_CinematicKarassCoolWarpInMovement;
trigger gt_CinematicKarassMidCinematicEnd;
trigger gt_CinematicKarassMidCleanup;
trigger gt_CinematicKerriganQ;
trigger gt_CinematicKerriganSetup;
trigger gt_CinematicKerriganCinematic;
trigger gt_CinematicKerriganSpawnBullies;
trigger gt_CinematicKerriganCinematicEnd;
trigger gt_CinematicKerriganCleanup;
trigger gt_CinematicKerriganUnitFaces;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_SpawnNydusWorm (region lp_region, trigger lp_trigger) {
    // Automatic Variable Declarations
    // Implementation
    gv_runoutNydusSpawnRegion = lp_region;
    TriggerExecute(lp_trigger, true, false);
}

void gf_RefreshPlayersHPandShields () {
    // Automatic Variable Declarations
    unitgroup autoD29854AF_g;
    int autoD29854AF_u;
    unit autoD29854AF_var;

    // Implementation
    SoundPlay(SoundLink("Protoss_PowerUpSmall", 1), PlayerGroupAll(), 100.0, 0.0);
    autoD29854AF_g = UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD29854AF_u = UnitGroupCount(autoD29854AF_g, c_unitCountAll);
    for (;; autoD29854AF_u -= 1) {
        autoD29854AF_var = UnitGroupUnitFromEnd(autoD29854AF_g, autoD29854AF_u);
        if (autoD29854AF_var == null) { break; }
        libNtve_gf_AttachModelToUnit(autoD29854AF_var, "ShieldTransferImpact", "Ref_Center");
        gv_actorImpactShield = libNtve_gf_ActorLastCreated();
        TriggerExecute(gt_ShieldImpactRemove, true, false);
        UnitSetPropertyFixed(autoD29854AF_var, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(autoD29854AF_var, c_unitPropShieldsPercent, 100.0);
        if ((UnitGetType(autoD29854AF_var) == "Zeratul")) {
            UnitAbilityReset(gv_tHEONEZERATUL, AbilityCommand("ZeratulBlink", 0), c_spendLocationAll);
            UnitAbilityReset(gv_tHEONEZERATUL, AbilityCommand("ZeratulStun", 0), c_spendLocationAll);
        }

        if ((UnitGetType(autoD29854AF_var) == "Stalker")) {
            UnitAbilityReset(autoD29854AF_var, AbilityCommand("Blink", 0), c_spendLocationAll);
        }

    }
}

void gf_AnimateShrine (unit lp_shrine) {
    // Automatic Variable Declarations
    // Implementation
    gv_animatedShrine = lp_shrine;
    TriggerExecute(gt_AnimateShrineTrigger, true, false);
}

void gf_StalkerReinforcements (region lp_mRegion, int lp_mMaxStalkers) {
    // Variable Declarations
    int lv_currentstalkers;
    int lv_count;
    fixed lv_angle;

    // Automatic Variable Declarations
    int autoEC97BD8F_n;
    int autoEC97BD8F_i;

    // Variable Initialization
    lv_angle = 45.0;

    // Implementation
    lv_currentstalkers = UnitGroupCount(UnitGroup("Stalker", gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_count = (lp_mMaxStalkers - lv_currentstalkers);
    VisRevealArea(gv_p2_ALLIED, lp_mRegion, 0.0, false);
    Wait(0.1, c_timeGame);
    if ((lv_count > 0)) {
        UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/0FE14344"), null, RegionGetCenter(lp_mRegion));
        autoEC97BD8F_n = lv_count;
        for (autoEC97BD8F_i = 1; autoEC97BD8F_i <= autoEC97BD8F_n; autoEC97BD8F_i += 1) {
            UnitIssueOrder(UnitFromId(326), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointWithOffsetPolar(RegionGetCenter(lp_mRegion), 2.0, lv_angle)), c_orderQueueReplace);
            lv_angle += (360.0 / IntToFixed(lv_count));
        }
    }

}

bool gf_PlayerIsInCombat (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_inCombatIndicator > 0)) {
        return true;
    }
    else {
        return false;
    }
}

void gf_AddUpgradeForZerg (int lp_qty, string lp_upgrade) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUpgradeAddLevel(gv_p3_ZERG, lp_upgrade, lp_qty);
    TechTreeUpgradeAddLevel(gv_p4_RUNOUT_ZERG, lp_upgrade, lp_qty);
}

void gf_ActivatePatrolAIForUnit (unit lp_mUnit, point lp_mPointEnd, fixed lp_mPatrolLength) {
    // Automatic Variable Declarations
    // Implementation
    UnitSetCustomValue(lp_mUnit, 0, lp_mPatrolLength);
    UnitSetCustomValue(lp_mUnit, 1, PointGetX(UnitGetPosition(lp_mUnit)));
    UnitSetCustomValue(lp_mUnit, 2, PointGetY(UnitGetPosition(lp_mUnit)));
    UnitSetCustomValue(lp_mUnit, 3, PointGetX(lp_mPointEnd));
    UnitSetCustomValue(lp_mUnit, 4, PointGetY(lp_mPointEnd));
    UnitSetCustomValue(lp_mUnit, 5, lp_mPatrolLength);
    UnitGroupAdd(gv_patrollingZerg, lp_mUnit);
}

void gf_IssuePanicOrder (unit lp_mUnit) {
    // Variable Declarations
    fixed lv_angle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_panickedUnit = lp_mUnit;
    TriggerExecute(gt_IssuePanicOrderTrigger, true, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_LoadCampaignData(libCamp_ge_MapID_MapTZeratul01);
    TriggerExecute(gt_Init01Technology, true, true);
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03UnitsVariables, true, true);
    TriggerExecute(gt_Init04Music, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    libCamp_gf_RegisterFootageRecording(gt_BriefingQ);
    libCamp_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_IntroSequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeUpgradeAddLevel(gv_p3_ZERG, "Burrow", 1);
    TechTreeUpgradeAddLevel(gv_p4_RUNOUT_ZERG, "Burrow", 1);
    TechTreeUpgradeAddLevel(gv_p1_USER, "BlinkTech", 1);
    TechTreeUpgradeAddLevel(gv_p2_ALLIED, "BlinkTech", 1);
    TechTreeUpgradeAddLevel(gv_p2_ALLIED, "Charge", 1);
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("PhaseMineBlast", 0), false);
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("ZeratulStun", 0), false);
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("ZeratulBlink", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_p1_USER, gv_p2_ALLIED, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p3_ZERG, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p4_RUNOUT_ZERG, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p5_XELNAGASHRINES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p2_ALLIED, gv_p3_ZERG, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p2_ALLIED, gv_p4_RUNOUT_ZERG, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p2_ALLIED, gv_p5_XELNAGASHRINES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p3_ZERG, gv_p4_RUNOUT_ZERG, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_p3_ZERG, gv_p5_XELNAGASHRINES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p4_RUNOUT_ZERG, gv_p5_XELNAGASHRINES, libNtve_ge_AllianceSetting_Neutral);
    PlayerSetColorIndex(gv_p4_RUNOUT_ZERG, 4, true);
    PlayerModifyPropertyInt(gv_p3_ZERG, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p3_ZERG, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units/Variables
//--------------------------------------------------------------------------------------------------
bool gt_Init03UnitsVariables_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA238B88E_g;
    int autoA238B88E_u;
    unit autoA238B88E_var;
    unitgroup autoD8483A2F_g;
    int autoD8483A2F_u;
    unit autoD8483A2F_var;
    unitgroup auto24BC69D6_g;
    int auto24BC69D6_u;
    unit auto24BC69D6_var;
    unitgroup auto86C4D439_g;
    int auto86C4D439_u;
    unit auto86C4D439_var;
    unitgroup autoB2169946_g;
    int autoB2169946_u;
    unit autoB2169946_var;
    unitgroup auto3BBB31A1_g;
    int auto3BBB31A1_u;
    unit auto3BBB31A1_var;
    unitgroup auto9B7FCD67_g;
    int auto9B7FCD67_u;
    unit auto9B7FCD67_var;
    unitgroup auto0479091B_g;
    int auto0479091B_u;
    unit auto0479091B_var;
    unitgroup autoED201809_g;
    int autoED201809_u;
    unit autoED201809_var;
    unitgroup auto26B1F0B6_g;
    int auto26B1F0B6_u;
    unit auto26B1F0B6_var;
    unitgroup autoB71B4846_g;
    int autoB71B4846_u;
    unit autoB71B4846_var;
    unitgroup auto2BC2ED3A_g;
    int auto2BC2ED3A_u;
    unit auto2BC2ED3A_var;
    unitgroup autoCAC0F798_g;
    int autoCAC0F798_u;
    unit autoCAC0F798_var;
    unitgroup auto5118D93E_g;
    int auto5118D93E_u;
    unit auto5118D93E_var;
    unitgroup auto065E4886_g;
    int auto065E4886_u;
    unit auto065E4886_var;
    unitgroup auto31A899BB_g;
    int auto31A899BB_u;
    unit auto31A899BB_var;
    unitgroup auto89238D5E_g;
    int auto89238D5E_u;
    unit auto89238D5E_var;
    unitgroup auto6881505A_g;
    int auto6881505A_u;
    unit auto6881505A_var;
    unitgroup auto3C06E80C_g;
    int auto3C06E80C_u;
    unit auto3C06E80C_var;
    unitgroup auto31C696FB_g;
    int auto31C696FB_u;
    unit auto31C696FB_var;
    unitgroup auto3594F878_g;
    int auto3594F878_u;
    unit auto3594F878_var;
    unitgroup autoD8E32DD2_g;
    int autoD8E32DD2_u;
    unit autoD8E32DD2_var;
    unitgroup autoA6CF4A46_g;
    int autoA6CF4A46_u;
    unit autoA6CF4A46_var;
    unitgroup auto18576A0B_g;
    int auto18576A0B_u;
    unit auto18576A0B_var;
    unitgroup auto53CB19B0_g;
    int auto53CB19B0_u;
    unit auto53CB19B0_var;
    unitgroup auto6E08714D_g;
    int auto6E08714D_u;
    unit auto6E08714D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoA238B88E_g = UnitGroup("Beacon_Protoss", 0, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA238B88E_u = UnitGroupCount(autoA238B88E_g, c_unitCountAll);
    for (;; autoA238B88E_u -= 1) {
        autoA238B88E_var = UnitGroupUnitFromEnd(autoA238B88E_g, autoA238B88E_u);
        if (autoA238B88E_var == null) { break; }
        UnitSetInfoText(autoA238B88E_var, StringExternal("Param/Value/4982494F"), StringToText(""), StringToText(""));
    }
    autoD8483A2F_g = UnitGroup("DestructibleRock6x6", 0, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD8483A2F_u = UnitGroupCount(autoD8483A2F_g, c_unitCountAll);
    for (;; autoD8483A2F_u -= 1) {
        autoD8483A2F_var = UnitGroupUnitFromEnd(autoD8483A2F_g, autoD8483A2F_u);
        if (autoD8483A2F_var == null) { break; }
        UnitSetInfoText(autoD8483A2F_var, StringExternal("Param/Value/5A53900C"), StringExternal("Param/Value/AB96565D"), StringToText(""));
    }
    gv_tHEONEZERATUL = UnitFromId(1);
    auto24BC69D6_g = UnitGroup("Overseer", gv_p3_ZERG, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto24BC69D6_u = UnitGroupCount(auto24BC69D6_g, c_unitCountAll);
    for (;; auto24BC69D6_u -= 1) {
        auto24BC69D6_var = UnitGroupUnitFromEnd(auto24BC69D6_g, auto24BC69D6_u);
        if (auto24BC69D6_var == null) { break; }
        UnitSetPropertyFixed(auto24BC69D6_var, c_unitPropEnergyMax, 0.0);
    }
    auto86C4D439_g = UnitGroup(null, gv_p3_ZERG, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto86C4D439_u = UnitGroupCount(auto86C4D439_g, c_unitCountAll);
    for (;; auto86C4D439_u -= 1) {
        auto86C4D439_var = UnitGroupUnitFromEnd(auto86C4D439_g, auto86C4D439_u);
        if (auto86C4D439_var == null) { break; }
        UnitIssueOrder(auto86C4D439_var, OrderSetAutoCast(AbilityCommand("BurrowZerglingUp", 0), true), c_orderQueueReplace);
    }
    autoB2169946_g = UnitGroup("DestructibleRock6x6", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB2169946_u = UnitGroupCount(autoB2169946_g, c_unitCountAll);
    for (;; autoB2169946_u -= 1) {
        autoB2169946_var = UnitGroupUnitFromEnd(autoB2169946_g, autoB2169946_u);
        if (autoB2169946_var == null) { break; }
        UnitSetPropertyFixed(autoB2169946_var, c_unitPropLifeMax, 450.0);
    }
    auto3BBB31A1_g = UnitGroup("Overseer", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3BBB31A1_u = UnitGroupCount(auto3BBB31A1_g, c_unitCountAll);
    for (;; auto3BBB31A1_u -= 1) {
        auto3BBB31A1_var = UnitGroupUnitFromEnd(auto3BBB31A1_g, auto3BBB31A1_u);
        if (auto3BBB31A1_var == null) { break; }
        UnitSetPropertyFixed(auto3BBB31A1_var, c_unitPropEnergyPercent, 100.0);
    }
    libNtve_gf_MakeUnitInvulnerable(gv_tHEONEVOIDSEEKER, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_tHEONEVOIDSEEKER), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(326), true);
    libNtve_gf_ShowHideUnit(UnitFromId(36), false);
    auto9B7FCD67_g = UnitGroup(null, c_playerAny, RegionFromId(60), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9B7FCD67_u = UnitGroupCount(auto9B7FCD67_g, c_unitCountAll);
    for (;; auto9B7FCD67_u -= 1) {
        auto9B7FCD67_var = UnitGroupUnitFromEnd(auto9B7FCD67_g, auto9B7FCD67_u);
        if (auto9B7FCD67_var == null) { break; }
        UnitBehaviorAdd(auto9B7FCD67_var, "InstallationZergWander", auto9B7FCD67_var, 1);
    }
    auto0479091B_g = UnitGroup("Hydralisk", c_playerAny, RegionFromId(31), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0479091B_u = UnitGroupCount(auto0479091B_g, c_unitCountAll);
    for (;; auto0479091B_u -= 1) {
        auto0479091B_var = UnitGroupUnitFromEnd(auto0479091B_g, auto0479091B_u);
        if (auto0479091B_var == null) { break; }
        UnitGroupAdd(gv_overseerHydralisks, auto0479091B_var);
    }
    autoED201809_g = UnitGroup("Scourge", c_playerAny, RegionFromId(108), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoED201809_u = UnitGroupCount(autoED201809_g, c_unitCountAll);
    for (;; autoED201809_u -= 1) {
        autoED201809_var = UnitGroupUnitFromEnd(autoED201809_g, autoED201809_u);
        if (autoED201809_var == null) { break; }
        UnitGroupAdd(gv_scourgeAmbience1, autoED201809_var);
        libNtve_gf_ShowHideUnit(autoED201809_var, false);
        libNtve_gf_PauseUnit(autoED201809_var, true);
    }
    libNtve_gf_ShowHideUnit(UnitFromId(171), false);
    libNtve_gf_ShowHideUnit(UnitFromId(694), false);
    libNtve_gf_PauseUnit(UnitFromId(694), true);
    libNtve_gf_ShowHideUnit(UnitFromId(239), false);
    gv_hatchery1Guards = UnitGroup(null, gv_p3_ZERG, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto26B1F0B6_g = UnitGroup(null, c_playerAny, RegionFromId(45), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto26B1F0B6_u = UnitGroupCount(auto26B1F0B6_g, c_unitCountAll);
    for (;; auto26B1F0B6_u -= 1) {
        auto26B1F0B6_var = UnitGroupUnitFromEnd(auto26B1F0B6_g, auto26B1F0B6_u);
        if (auto26B1F0B6_var == null) { break; }
        UnitBehaviorAdd(auto26B1F0B6_var, "InstallationZergWander", auto26B1F0B6_var, 1);
    }
    autoB71B4846_g = UnitGroup("Scourge", c_playerAny, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB71B4846_u = UnitGroupCount(autoB71B4846_g, c_unitCountAll);
    for (;; autoB71B4846_u -= 1) {
        autoB71B4846_var = UnitGroupUnitFromEnd(autoB71B4846_g, autoB71B4846_u);
        if (autoB71B4846_var == null) { break; }
        UnitGroupAdd(gv_scourgeAmbience2, autoB71B4846_var);
        libNtve_gf_ShowHideUnit(autoB71B4846_var, false);
        libNtve_gf_PauseUnit(autoB71B4846_var, true);
    }
    libNtve_gf_ShowHideUnit(UnitFromId(336), false);
    gv_banelingBullies = UnitGroup("BanelingBurrowed", gv_p3_ZERG, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitIssueOrder(UnitFromId(485), OrderSetAutoCast(AbilityCommand("BurrowZerglingUp", 0), false), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(503), OrderSetAutoCast(AbilityCommand("BurrowZerglingUp", 0), false), c_orderQueueReplace);
    auto2BC2ED3A_g = UnitGroup(null, gv_p3_ZERG, RegionFromId(99), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2BC2ED3A_u = UnitGroupCount(auto2BC2ED3A_g, c_unitCountAll);
    for (;; auto2BC2ED3A_u -= 1) {
        auto2BC2ED3A_var = UnitGroupUnitFromEnd(auto2BC2ED3A_g, auto2BC2ED3A_u);
        if (auto2BC2ED3A_var == null) { break; }
        UnitIssueOrder(auto2BC2ED3A_var, OrderSetAutoCast(AbilityCommand("BurrowZerglingUp", 0), false), c_orderQueueReplace);
    }
    UnitIssueOrder(UnitFromId(1819), OrderSetAutoCast(AbilityCommand("BurrowZerglingUp", 0), false), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1818), OrderSetAutoCast(AbilityCommand("BurrowZerglingUp", 0), false), c_orderQueueReplace);
    libNtve_gf_ShowHideUnit(UnitFromId(1819), false);
    libNtve_gf_ShowHideUnit(UnitFromId(1818), false);
    libNtve_gf_PauseUnit(UnitFromId(1819), true);
    libNtve_gf_PauseUnit(UnitFromId(1818), true);
    autoCAC0F798_g = UnitGroup("SpineCrawlerUprooted", gv_p3_ZERG, RegionFromId(75), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCAC0F798_u = UnitGroupCount(autoCAC0F798_g, c_unitCountAll);
    for (;; autoCAC0F798_u -= 1) {
        autoCAC0F798_var = UnitGroupUnitFromEnd(autoCAC0F798_g, autoCAC0F798_u);
        if (autoCAC0F798_var == null) { break; }
        UnitGroupAdd(gv_crawlers, autoCAC0F798_var);
    }
    auto5118D93E_g = UnitGroup("SporeCrawlerUprooted", gv_p3_ZERG, RegionFromId(75), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5118D93E_u = UnitGroupCount(auto5118D93E_g, c_unitCountAll);
    for (;; auto5118D93E_u -= 1) {
        auto5118D93E_var = UnitGroupUnitFromEnd(auto5118D93E_g, auto5118D93E_u);
        if (auto5118D93E_var == null) { break; }
        UnitGroupAdd(gv_crawlers, auto5118D93E_var);
    }
    gv_cinematicKarassZealotRally = PointFromId(189);
    libNtve_gf_ShowHideUnit(UnitFromId(134), false);
    libNtve_gf_ShowHideUnit(UnitFromId(173), false);
    libNtve_gf_PauseUnit(UnitFromId(134), true);
    libNtve_gf_PauseUnit(UnitFromId(173), true);
    libNtve_gf_PauseUnit(UnitFromId(360), true);
    gv_tHEONEKARASS = UnitFromId(483);
    UnitSetTeamColorIndex(gv_tHEONEKARASS, 6);
    UnitSetPropertyFixed(gv_tHEONEKARASS, c_unitPropEnergyPercent, 100.0);
    auto065E4886_g = UnitGroup("ZerglingBurrowed", gv_p3_ZERG, RegionFromId(110), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto065E4886_u = UnitGroupCount(auto065E4886_g, c_unitCountAll);
    for (;; auto065E4886_u -= 1) {
        auto065E4886_var = UnitGroupUnitFromEnd(auto065E4886_g, auto065E4886_u);
        if (auto065E4886_var == null) { break; }
        UnitIssueOrder(auto065E4886_var, OrderSetAutoCast(AbilityCommand("BurrowZerglingUp", 0), false), c_orderQueueReplace);
        UnitGroupAdd(gv_rumbleZerglingFlank1, auto065E4886_var);
    }
    auto31A899BB_g = UnitGroup("ZerglingBurrowed", gv_p3_ZERG, RegionFromId(104), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto31A899BB_u = UnitGroupCount(auto31A899BB_g, c_unitCountAll);
    for (;; auto31A899BB_u -= 1) {
        auto31A899BB_var = UnitGroupUnitFromEnd(auto31A899BB_g, auto31A899BB_u);
        if (auto31A899BB_var == null) { break; }
        UnitIssueOrder(auto31A899BB_var, OrderSetAutoCast(AbilityCommand("BurrowZerglingUp", 0), false), c_orderQueueReplace);
        UnitGroupAdd(gv_rumbleZerglingFlank2, auto31A899BB_var);
    }
    auto89238D5E_g = UnitGroup("RoachBurrowed", gv_p3_ZERG, RegionFromId(104), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto89238D5E_u = UnitGroupCount(auto89238D5E_g, c_unitCountAll);
    for (;; auto89238D5E_u -= 1) {
        auto89238D5E_var = UnitGroupUnitFromEnd(auto89238D5E_g, auto89238D5E_u);
        if (auto89238D5E_var == null) { break; }
        UnitIssueOrder(auto89238D5E_var, OrderSetAutoCast(AbilityCommand("BurrowZerglingUp", 0), false), c_orderQueueReplace);
        UnitGroupAdd(gv_rumbleZerglingFlank2, auto89238D5E_var);
    }
    auto6881505A_g = UnitGroup("Zealot", gv_p2_ALLIED, RegionFromId(37), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6881505A_u = UnitGroupCount(auto6881505A_g, c_unitCountAll);
    for (;; auto6881505A_u -= 1) {
        auto6881505A_var = UnitGroupUnitFromEnd(auto6881505A_g, auto6881505A_u);
        if (auto6881505A_var == null) { break; }
        UnitGroupAdd(gv_karassZealots, auto6881505A_var);
        libNtve_gf_ShowHideUnit(auto6881505A_var, false);
    }
    libNtve_gf_ShowHideUnit(UnitFromId(483), false);
    auto3C06E80C_g = UnitGroup(null, gv_p3_ZERG, RegionFromId(111), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3C06E80C_u = UnitGroupCount(auto3C06E80C_g, c_unitCountAll);
    for (;; auto3C06E80C_u -= 1) {
        auto3C06E80C_var = UnitGroupUnitFromEnd(auto3C06E80C_g, auto3C06E80C_u);
        if (auto3C06E80C_var == null) { break; }
        UnitGroupAdd(gv_rumbleVanguard, auto3C06E80C_var);
    }
    auto31C696FB_g = UnitGroupFilter("ZerglingBurrowed", c_playerAny, gv_rumbleVanguard, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto31C696FB_u = UnitGroupCount(auto31C696FB_g, c_unitCountAll);
    for (;; auto31C696FB_u -= 1) {
        auto31C696FB_var = UnitGroupUnitFromEnd(auto31C696FB_g, auto31C696FB_u);
        if (auto31C696FB_var == null) { break; }
        UnitGroupRemove(gv_rumbleVanguard, auto31C696FB_var);
    }
    libNtve_gf_AddUnitGroupToUnitGroup(gv_rumbleVanguard, gv_rumbleVanguardAll);
    libNtve_gf_AddUnitGroupToUnitGroup(gv_rumbleZerglingFlank1, gv_rumbleVanguardAll);
    libNtve_gf_AddUnitGroupToUnitGroup(gv_rumbleZerglingFlank2, gv_rumbleVanguardAll);
    auto3594F878_g = UnitGroup(null, gv_p3_ZERG, RegionFromId(80), UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3594F878_u = UnitGroupCount(auto3594F878_g, c_unitCountAll);
    for (;; auto3594F878_u -= 1) {
        auto3594F878_var = UnitGroupUnitFromEnd(auto3594F878_g, auto3594F878_u);
        if (auto3594F878_var == null) { break; }
        UnitGroupAdd(gv_rumbleFlyers, auto3594F878_var);
    }
    autoD8E32DD2_g = UnitGroup(null, gv_p3_ZERG, RegionFromId(112), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD8E32DD2_u = UnitGroupCount(autoD8E32DD2_g, c_unitCountAll);
    for (;; autoD8E32DD2_u -= 1) {
        autoD8E32DD2_var = UnitGroupUnitFromEnd(autoD8E32DD2_g, autoD8E32DD2_u);
        if (autoD8E32DD2_var == null) { break; }
        UnitGroupAdd(gv_rumbleMidguard, autoD8E32DD2_var);
    }
    autoA6CF4A46_g = UnitGroupFilter("CreepTumorBurrowed", c_playerAny, gv_rumbleMidguard, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA6CF4A46_u = UnitGroupCount(autoA6CF4A46_g, c_unitCountAll);
    for (;; autoA6CF4A46_u -= 1) {
        autoA6CF4A46_var = UnitGroupUnitFromEnd(autoA6CF4A46_g, autoA6CF4A46_u);
        if (autoA6CF4A46_var == null) { break; }
        UnitGroupRemove(gv_rumbleMidguard, autoA6CF4A46_var);
    }
    auto18576A0B_g = UnitGroup(null, gv_p3_ZERG, RegionFromId(113), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto18576A0B_u = UnitGroupCount(auto18576A0B_g, c_unitCountAll);
    for (;; auto18576A0B_u -= 1) {
        auto18576A0B_var = UnitGroupUnitFromEnd(auto18576A0B_g, auto18576A0B_u);
        if (auto18576A0B_var == null) { break; }
        UnitGroupAdd(gv_rumbleRearguard, auto18576A0B_var);
    }
    auto53CB19B0_g = UnitGroupFilter("CreepTumorBurrowed", gv_p3_ZERG, gv_rumbleRearguard, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto53CB19B0_u = UnitGroupCount(auto53CB19B0_g, c_unitCountAll);
    for (;; auto53CB19B0_u -= 1) {
        auto53CB19B0_var = UnitGroupUnitFromEnd(auto53CB19B0_g, auto53CB19B0_u);
        if (auto53CB19B0_var == null) { break; }
        UnitGroupRemove(gv_rumbleRearguard, auto53CB19B0_var);
    }
    UnitIssueOrder(UnitFromId(65), OrderSetAutoCast(AbilityCommand("BurrowZerglingUp", 0), false), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(741), OrderSetAutoCast(AbilityCommand("BurrowZerglingUp", 0), false), c_orderQueueReplace);
    UnitBehaviorAdd(UnitFromId(445), "SpawnLarva", UnitFromId(445), 1);
    libNtve_gf_ShowHideUnit(UnitFromId(1563), false);
    libNtve_gf_ShowHideUnit(UnitFromId(1257), false);
    libNtve_gf_PauseUnit(UnitFromId(1257), true);
    libNtve_gf_ShowHideUnit(UnitFromId(1259), false);
    libNtve_gf_PauseUnit(UnitFromId(1259), true);
    UnitIssueOrder(UnitFromId(795), OrderSetAutoCast(AbilityCommand("BurrowZerglingUp", 0), false), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1809), OrderSetAutoCast(AbilityCommand("BurrowZerglingUp", 0), false), c_orderQueueReplace);
    auto6E08714D_g = UnitGroup("Scourge", c_playerAny, RegionFromId(33), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6E08714D_u = UnitGroupCount(auto6E08714D_g, c_unitCountAll);
    for (;; auto6E08714D_u -= 1) {
        auto6E08714D_var = UnitGroupUnitFromEnd(auto6E08714D_g, auto6E08714D_u);
        if (auto6E08714D_var == null) { break; }
        UnitGroupAdd(gv_scourgeAmbience1, auto6E08714D_var);
        libNtve_gf_ShowHideUnit(auto6E08714D_var, false);
        libNtve_gf_PauseUnit(auto6E08714D_var, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03UnitsVariables_Init () {
    gt_Init03UnitsVariables = TriggerCreate("gt_Init03UnitsVariables_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init04Music_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TZeratul01MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Music_Init () {
    gt_Init04Music = TriggerCreate("gt_Init04Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    GameSetLighting("Ulaan", 0.0);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    libLbty_gf_AutoRevealRegion(RegionFromId(35), RegionFromId(70), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(26), RegionFromId(2), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(83), RegionFromId(1), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(17), RegionFromId(17), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(11), RegionFromId(11), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(72), RegionFromId(72), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(31), RegionFromId(8), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(13), RegionFromId(13), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(40), RegionFromId(40), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(45), RegionFromId(43), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(19), RegionFromId(19), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(56), RegionFromId(57), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(32), RegionFromId(32), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(73), RegionFromId(73), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(21), RegionFromId(21), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(53), RegionFromId(53), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(71), RegionFromId(101), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(124), RegionFromId(124), gv_p1_USER);
    gv_runoutPingPoints[1] = PointFromId(601);
    gv_runoutPingPoints[2] = PointFromId(602);
    gv_runoutPingPoints[3] = PointFromId(603);
    gv_runoutPingPoints[4] = PointFromId(604);
    gv_runoutPingPoints[5] = PointFromId(605);
    gv_runoutPingPoints[6] = PointFromId(606);
    gv_runoutPingPoints[7] = PointFromId(607);
    gv_runoutPingPoints[8] = PointFromId(608);
    gv_runoutPingPoints[9] = PointFromId(610);
    gv_runoutPingPoints[10] = PointFromId(611);
    gv_runoutPingPoints[11] = PointFromId(614);
    gv_runoutPingPoints[12] = PointFromId(615);
    gv_runoutPingPoints[13] = PointFromId(617);
    gv_runoutPingPoints[14] = PointFromId(619);
    gv_runoutPingPoints[15] = PointFromId(618);
    gv_runoutPingPoints[16] = PointFromId(620);
    gv_runoutPingPoints[17] = PointFromId(600);
    gv_runoutPingPoints[18] = PointFromId(622);
    CreepModify(PointFromId(55), 10.0, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerDifficulty(gv_p1_USER) == 1)) {
        PlayerModifyPropertyInt(gv_p3_ZERG, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p4_RUNOUT_ZERG, c_playerPropHandicap, c_playerPropOperSetTo, 50);
    }

    gf_AddUpgradeForZerg(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ZergGroundArmorsLevel1");
    gf_AddUpgradeForZerg(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergMeleeWeaponsLevel1");
    gf_AddUpgradeForZerg(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "hydraliskspeed");
    gf_AddUpgradeForZerg(1, "overlordspeed");
    gf_AddUpgradeForZerg(1, "overlordtransport");
    TechTreeUpgradeAddLevel(gv_p1_USER, "ProtossGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_p1_USER, "ProtossGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_p1_USER, "ProtossGroundWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(gv_p1_USER, "ProtossGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_p1_USER, "ProtossShieldsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_p2_ALLIED, "ProtossGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_p2_ALLIED, "ProtossGroundWeaponsLevel2", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
    TechTreeUpgradeAddLevel(gv_p2_ALLIED, "ProtossGroundWeaponsLevel3", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
    TechTreeUpgradeAddLevel(gv_p2_ALLIED, "ProtossGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_p2_ALLIED, "ProtossGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_p2_ALLIED, "ProtossGroundArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(gv_p2_ALLIED, "ProtossShieldsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_p2_ALLIED, "ProtossShieldsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_p2_ALLIED, "ProtossShieldsLevel3", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_AddUnitTypeToUnitHelpPanel("Zergling", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Overseer", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Corruptor", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Roach", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Mutalisk", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("NydusCanal", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Swarmling", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("BroodLord", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Ultralisk", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Baneling", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Scourge", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SpineCrawler", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SporeCrawler", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Stalker", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Zeratul", false, gv_p1_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Sequence
//--------------------------------------------------------------------------------------------------
bool gt_IntroSequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    Wait(0.1, c_timeReal);
    UnitSelect(UnitFromId(1), gv_p1_USER, true);
    UIAlertUnit("Trigger", gv_p1_USER, StringExternal("Param/Value/072BEE72"), null, gv_tHEONEZERATUL);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_p1_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PlayerStartLocation(gv_p1_USER), 1.5);
    CinematicFade(true, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_StartGame, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSequence_Init () {
    gt_IntroSequence = TriggerCreate("gt_IntroSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game
//--------------------------------------------------------------------------------------------------
bool gt_StartGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(3.0, c_timeReal);
    TriggerExecute(gt_ObjectiveShrinesDiscoverQ, true, true);
    TriggerExecute(gt_ObjectiveZeratulDiscover, true, false);
    TriggerExecute(gt_StorymodeTipsQ, true, false);
    TriggerExecute(gt_HellomynameisZeratulQ, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGame_Init () {
    gt_StartGame = TriggerCreate("gt_StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hello my name is Zeratul Q
//--------------------------------------------------------------------------------------------------
bool gt_HellomynameisZeratulQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UIAlertUnit("Trigger", gv_p1_USER, StringToText(""), null, gv_tHEONEZERATUL);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul01Zeratul00046", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONEZERATUL, SoundLink("TZeratul01Zeratul00046", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HellomynameisZeratulQ_Init () {
    gt_HellomynameisZeratulQ = TriggerCreate("gt_HellomynameisZeratulQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Storymode Tips Q
//--------------------------------------------------------------------------------------------------
bool gt_StorymodeTipsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateStorymodeTips();
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StorymodeTipsQ_Init () {
    gt_StorymodeTipsQ = TriggerCreate("gt_StorymodeTipsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Flash Blink On
//--------------------------------------------------------------------------------------------------
bool gt_ButtonFlashBlinkOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_flashButtonBlink == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("ZeratulBlink", 0), true);
    gv_flashButtonBlink = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonFlashBlinkOn_Init () {
    gt_ButtonFlashBlinkOn = TriggerCreate("gt_ButtonFlashBlinkOn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Flash Blink Off
//--------------------------------------------------------------------------------------------------
bool gt_ButtonFlashBlinkOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_flashButtonBlink == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("ZeratulBlink", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonFlashBlinkOff_Init () {
    gt_ButtonFlashBlinkOff = TriggerCreate("gt_ButtonFlashBlinkOff_Func");
    TriggerAddEventButtonPressed(gt_ButtonFlashBlinkOff, c_playerAny, "ZeratulBlink");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Flash Void Prison On
//--------------------------------------------------------------------------------------------------
bool gt_ButtonFlashVoidPrisonOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_flashButtonVoidPrison == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("ZeratulStun", 0), true);
    gv_flashButtonVoidPrison = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonFlashVoidPrisonOn_Init () {
    gt_ButtonFlashVoidPrisonOn = TriggerCreate("gt_ButtonFlashVoidPrisonOn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Flash Void Prison Off
//--------------------------------------------------------------------------------------------------
bool gt_ButtonFlashVoidPrisonOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_flashButtonVoidPrison == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("ZeratulStun", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonFlashVoidPrisonOff_Init () {
    gt_ButtonFlashVoidPrisonOff = TriggerCreate("gt_ButtonFlashVoidPrisonOff_Func");
    TriggerAddEventButtonPressed(gt_ButtonFlashVoidPrisonOff, c_playerAny, "ZeratulStun");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cloaking Power Q
//--------------------------------------------------------------------------------------------------
bool gt_CloakingPowerQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto11129220_g;
    int auto11129220_u;
    unit auto11129220_var;

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShareVisionofUnit(UnitFromId(145), true, gv_p1_USER);
    libNtve_gf_ShareVisionofUnit(UnitFromId(131), true, gv_p1_USER);
    libNtve_gf_ShareVisionofUnit(UnitFromId(42), true, gv_p1_USER);
    TriggerQueueEnter();
    auto11129220_g = UnitGroup("Zeratul", gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto11129220_u = UnitGroupCount(auto11129220_g, c_unitCountAll);
    for (;; auto11129220_u -= 1) {
        auto11129220_var = UnitGroupUnitFromEnd(auto11129220_g, auto11129220_u);
        if (auto11129220_var == null) { break; }
        UnitFlashSelection(auto11129220_var, 1.0);
    }
    libCamp_gf_CreateTipFromConversationState("StoryTips|Zeratul01_Zeratul", libNtve_ge_TipType_NewUnit, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CloakingPowerQ_Init () {
    gt_CloakingPowerQ = TriggerCreate("gt_CloakingPowerQ_Func");
    TriggerAddEventUnitRegion(gt_CloakingPowerQ, null, RegionFromId(12), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cloaking Kill Reaction 1
//--------------------------------------------------------------------------------------------------
bool gt_CloakingKillReaction1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_CloakingKillReaction2, true);
    libNtve_gf_MakeUnitFacePoint(UnitFromId(42), UnitGetPosition(EventUnit()), 1.0);
    libNtve_gf_MakeUnitFacePoint(UnitFromId(131), UnitGetPosition(EventUnit()), 1.0);
    UnitIssueOrder(UnitFromId(133), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(UnitFromId(133), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(212)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CloakingKillReaction1_Init () {
    gt_CloakingKillReaction1 = TriggerCreate("gt_CloakingKillReaction1_Func");
    TriggerAddEventUnitDied(gt_CloakingKillReaction1, UnitRefFromUnit(UnitFromId(42)));
    TriggerAddEventUnitDied(gt_CloakingKillReaction1, UnitRefFromUnit(UnitFromId(145)));
    TriggerAddEventUnitDied(gt_CloakingKillReaction1, UnitRefFromUnit(UnitFromId(131)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cloaking Kill Reaction 2
//--------------------------------------------------------------------------------------------------
bool gt_CloakingKillReaction2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShareVisionofUnit(UnitFromId(145), false, gv_p1_USER);
    libNtve_gf_ShareVisionofUnit(UnitFromId(131), false, gv_p1_USER);
    libNtve_gf_ShareVisionofUnit(UnitFromId(42), false, gv_p1_USER);
    UnitIssueOrder(UnitFromId(131), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(241)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(131), Order(AbilityCommand("BurrowZerglingDown", 0)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(145), Order(AbilityCommand("SpineCrawlerUproot", 0)), c_orderQueueReplace);
    Wait(1.5, c_timeGame);
    TriggerEnable(gt_CloakingKillReaction22, true);
    UnitIssueOrder(UnitFromId(145), OrderTargetingPoint(AbilityCommand("SpineCrawlerRoot", 0), PointFromId(243)), c_orderQueueReplace);
    while (!((UnitGroupCount(UnitGroup("Zergling", gv_p3_ZERG, RegionFromId(78), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Hydralisk", gv_p3_ZERG, RegionFromId(78), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("SpineCrawler", gv_p3_ZERG, RegionFromId(78), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("SpineCrawlerUprooted", gv_p3_ZERG, RegionFromId(78), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    Wait(5.0, c_timeGame);
    TriggerExecute(gt_BlinkTeachViaWaiting, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CloakingKillReaction2_Init () {
    gt_CloakingKillReaction2 = TriggerCreate("gt_CloakingKillReaction2_Func");
    TriggerEnable(gt_CloakingKillReaction2, false);
    TriggerAddEventUnitDied(gt_CloakingKillReaction2, UnitRefFromUnit(UnitFromId(42)));
    TriggerAddEventUnitDied(gt_CloakingKillReaction2, UnitRefFromUnit(UnitFromId(133)));
    TriggerAddEventUnitDied(gt_CloakingKillReaction2, UnitRefFromUnit(UnitFromId(145)));
    TriggerAddEventUnitDied(gt_CloakingKillReaction2, UnitRefFromUnit(UnitFromId(131)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cloaking Kill Reaction 2 2
//--------------------------------------------------------------------------------------------------
bool gt_CloakingKillReaction22_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShareVisionofUnit(UnitFromId(133), false, gv_p1_USER);
    UnitIssueOrder(UnitFromId(42), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(55)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CloakingKillReaction22_Init () {
    gt_CloakingKillReaction22 = TriggerCreate("gt_CloakingKillReaction22_Func");
    TriggerEnable(gt_CloakingKillReaction22, false);
    TriggerAddEventUnitDied(gt_CloakingKillReaction22, UnitRefFromUnit(UnitFromId(42)));
    TriggerAddEventUnitDied(gt_CloakingKillReaction22, UnitRefFromUnit(UnitFromId(133)));
    TriggerAddEventUnitDied(gt_CloakingKillReaction22, UnitRefFromUnit(UnitFromId(145)));
    TriggerAddEventUnitDied(gt_CloakingKillReaction22, UnitRefFromUnit(UnitFromId(131)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Blink Teach Via Waiting
//--------------------------------------------------------------------------------------------------
bool gt_BlinkTeachViaWaiting_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BlinkTeachQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BlinkTeachViaWaiting_Init () {
    gt_BlinkTeachViaWaiting = TriggerCreate("gt_BlinkTeachViaWaiting_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Blink Teach Via Movement
//--------------------------------------------------------------------------------------------------
bool gt_BlinkTeachViaMovement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BlinkTeachQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BlinkTeachViaMovement_Init () {
    gt_BlinkTeachViaMovement = TriggerCreate("gt_BlinkTeachViaMovement_Func");
    TriggerAddEventUnitRegion(gt_BlinkTeachViaMovement, null, RegionFromId(2), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Blink Teach Q
//--------------------------------------------------------------------------------------------------
bool gt_BlinkTeachQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    while (!((gf_PlayerIsInCombat(gv_p1_USER) == false))) {
        Wait(0.1, c_timeGame);
    }
    if ((gv_gameOver == true)) {

    }

    CameraLockInput(gv_p1_USER, true);
    CameraPan(1, PointFromId(143), 1.0, -1, 10, true);
    Wait(1.0, c_timeGame);
    CameraLockInput(gv_p1_USER, false);
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/7064C38D"), null, PointFromId(143));
    VisRevealerCreate(gv_p1_USER, RegionFromId(26));
    gv_blinkRevealer1 = VisRevealerLastCreated();
    VisRevealerCreate(gv_p1_USER, RegionFromId(2));
    gv_blinkRevealer2 = VisRevealerLastCreated();
    TechTreeAbilityAllow(1, AbilityCommand("ZeratulBlink", 0), true);
    TriggerExecute(gt_ButtonFlashBlinkOn, true, false);
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectProtoss", PointFromId(1473));
    gv_blinkTeach1 = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectProtoss", PointFromId(1472));
    gv_blinkTeach2 = libNtve_gf_ActorLastCreated();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul01Zeratul00033", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONEZERATUL, SoundLink("TZeratul01Zeratul00033", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(libCamp_gv_campaignHintDelay, c_timeGame);
    libCamp_gf_CreateTipFromConversationState("StoryTips|Zeratul01_Blink", libNtve_ge_TipType_NewAbility, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BlinkTeachQ_Init () {
    gt_BlinkTeachQ = TriggerCreate("gt_BlinkTeachQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Blink Across Chasm 1
//--------------------------------------------------------------------------------------------------
bool gt_BlinkAcrossChasm1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(gv_blinkTeach1);
    libNtve_gf_KillModel(gv_blinkTeach2);
    libNtve_gf_ShareVisionofUnit(UnitFromId(42), false, gv_p1_USER);
    libNtve_gf_ShareVisionofUnit(UnitFromId(133), false, gv_p1_USER);
    libNtve_gf_ShareVisionofUnit(UnitFromId(145), false, gv_p1_USER);
    libNtve_gf_ShareVisionofUnit(UnitFromId(131), false, gv_p1_USER);
    SoundPlay(SoundLink("Hydralisk_Ready", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_MakeUnitFacePoint(UnitFromId(24), UnitGetPosition(EventUnit()), 1.0);
    libNtve_gf_MakeUnitFacePoint(UnitFromId(203), UnitGetPosition(EventUnit()), 0.75);
    Wait(2.0, c_timeGame);
    VisRevealerDestroy(gv_blinkRevealer1);
    VisRevealerDestroy(gv_blinkRevealer2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BlinkAcrossChasm1_Init () {
    gt_BlinkAcrossChasm1 = TriggerCreate("gt_BlinkAcrossChasm1_Func");
    TriggerAddEventUnitRegion(gt_BlinkAcrossChasm1, null, RegionFromId(26), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Blink Across Chasm Reaction
//--------------------------------------------------------------------------------------------------
bool gt_BlinkAcrossChasmReaction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_IssuePanicOrder(UnitFromId(24));
    gf_IssuePanicOrder(UnitFromId(203));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BlinkAcrossChasmReaction_Init () {
    gt_BlinkAcrossChasmReaction = TriggerCreate("gt_BlinkAcrossChasmReaction_Func");
    TriggerAddEventUnitDied(gt_BlinkAcrossChasmReaction, UnitRefFromUnit(UnitFromId(24)));
    TriggerAddEventUnitDied(gt_BlinkAcrossChasmReaction, UnitRefFromUnit(UnitFromId(203)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Blink Reminder
//--------------------------------------------------------------------------------------------------
bool gt_BlinkReminder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1688)), c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    SoundPlayAtPoint(SoundLink("Uni_RockExplosionLarge", 1), PlayerGroupAll(), PointFromId(20), 16.0, 100.0, 0.0);
    VisRevealerCreate(gv_p1_USER, RegionFromId(35));
    gv_blinkRevealer1 = VisRevealerLastCreated();
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectProtoss", PointFromId(75));
    gv_blinkReminder = libNtve_gf_ActorLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BlinkReminder_Init () {
    gt_BlinkReminder = TriggerCreate("gt_BlinkReminder_Func");
    TriggerAddEventUnitRegion(gt_BlinkReminder, null, RegionFromId(70), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Blink Across Chasm 2
//--------------------------------------------------------------------------------------------------
bool gt_BlinkAcrossChasm2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(gv_blinkReminder);
    Wait(1.5, c_timeGame);
    VisRevealerDestroy(gv_blinkRevealer1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BlinkAcrossChasm2_Init () {
    gt_BlinkAcrossChasm2 = TriggerCreate("gt_BlinkAcrossChasm2_Func");
    TriggerAddEventUnitRegion(gt_BlinkAcrossChasm2, null, RegionFromId(35), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teach Rocks Q
//--------------------------------------------------------------------------------------------------
bool gt_TeachRocksQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_rockactor;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectProtoss", UnitGetPosition(UnitFromId(371)));
    lv_rockactor = libNtve_gf_ActorLastCreated();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Zeratul01_Rocks", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeGame);
    TriggerQueueExit();
    Wait(4.0, c_timeGame);
    libNtve_gf_KillModel(lv_rockactor);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeachRocksQ_Init () {
    gt_TeachRocksQ = TriggerCreate("gt_TeachRocksQ_Func");
    TriggerAddEventUnitRegion(gt_TeachRocksQ, null, RegionFromId(106), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Prison Teach Q
//--------------------------------------------------------------------------------------------------
bool gt_VoidPrisonTeachQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShowHideUnit(UnitFromId(36), true);
    UnitIssueOrder(gv_tHEONEZERATUL, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_PauseUnit(gv_tHEONEZERATUL, true);
    libNtve_gf_ShareVisionofUnit(UnitFromId(111), true, gv_p1_USER);
    libNtve_gf_ShareVisionofUnit(UnitFromId(346), true, gv_p1_USER);
    UnitIssueOrder(UnitFromId(346), Order(AbilityCommand("BurrowUltraliskUp", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(111), Order(AbilityCommand("BurrowUltraliskUp", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(93), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(374)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(347), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(374)), c_orderQueueReplace);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        UnitBehaviorAdd(UnitFromId(346), "ScanRangeBonus", UnitFromId(346), 1);
        UnitBehaviorAdd(UnitFromId(111), "ScanRangeBonus", UnitFromId(111), 1);
    }

    CameraLockInput(gv_p1_USER, true);
    CameraPan(1, PointFromId(146), 1.0, -1, 10, true);
    Wait(1.0, c_timeGame);
    CameraLockInput(gv_p1_USER, false);
    libNtve_gf_PauseUnit(gv_tHEONEZERATUL, false);
    UnitIssueOrder(gv_tHEONEZERATUL, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/6EB88169"), null, PointFromId(146));
    TriggerQueueEnter();
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("ZeratulStun", 0), true);
    TriggerExecute(gt_ButtonFlashVoidPrisonOn, true, false);
    gv_voidPrisonVictimActor = libNtve_gf_AttachModelToUnit(UnitFromId(36), "BriefingUnitSelectProtoss", "Head");
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul01Zeratul00069", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONEZERATUL, SoundLink("TZeratul01Zeratul00069", -1), c_transmissionDurationAdd, 1.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    libCamp_gf_CreateTipFromConversationState("StoryTips|Zeratul01_VoidPrison", libNtve_ge_TipType_NewAbility, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidPrisonTeachQ_Init () {
    gt_VoidPrisonTeachQ = TriggerCreate("gt_VoidPrisonTeachQ_Func");
    TriggerAddEventUnitRegion(gt_VoidPrisonTeachQ, null, RegionFromId(47), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Prison Victim 1 Dies
//--------------------------------------------------------------------------------------------------
bool gt_VoidPrisonVictim1Dies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(gv_voidPrisonVictimActor);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidPrisonVictim1Dies_Init () {
    gt_VoidPrisonVictim1Dies = TriggerCreate("gt_VoidPrisonVictim1Dies_Func");
    TriggerAddEventUnitDamaged(gt_VoidPrisonVictim1Dies, UnitRefFromUnit(UnitFromId(36)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Prison Kill Reaction 1
//--------------------------------------------------------------------------------------------------
bool gt_VoidPrisonKillReaction1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_VoidPrisonKillReaction2, true);
    UnitIssueOrder(UnitFromId(346), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(39)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(UnitFromId(111), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(128)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidPrisonKillReaction1_Init () {
    gt_VoidPrisonKillReaction1 = TriggerCreate("gt_VoidPrisonKillReaction1_Func");
    TriggerAddEventUnitDied(gt_VoidPrisonKillReaction1, UnitRefFromUnit(UnitFromId(36)));
    TriggerAddEventUnitDied(gt_VoidPrisonKillReaction1, UnitRefFromUnit(UnitFromId(346)));
    TriggerAddEventUnitDied(gt_VoidPrisonKillReaction1, UnitRefFromUnit(UnitFromId(111)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Prison Kill Reaction 2
//--------------------------------------------------------------------------------------------------
bool gt_VoidPrisonKillReaction2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(UnitFromId(346), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(147)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(UnitFromId(111), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(165)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidPrisonKillReaction2_Init () {
    gt_VoidPrisonKillReaction2 = TriggerCreate("gt_VoidPrisonKillReaction2_Func");
    TriggerEnable(gt_VoidPrisonKillReaction2, false);
    TriggerAddEventUnitDied(gt_VoidPrisonKillReaction2, UnitRefFromUnit(UnitFromId(36)));
    TriggerAddEventUnitDied(gt_VoidPrisonKillReaction2, UnitRefFromUnit(UnitFromId(346)));
    TriggerAddEventUnitDied(gt_VoidPrisonKillReaction2, UnitRefFromUnit(UnitFromId(111)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scurrying Zerg Trip
//--------------------------------------------------------------------------------------------------
bool gt_ScurryingZergTrip_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("Ultralisk_Attack", 0), PlayerGroupAll(), 200.0, 0.0);
    libNtve_gf_KillModel(gv_voidPrisonVictimActor);
    gf_ActivatePatrolAIForUnit(UnitFromId(230), PointFromId(190), 5.0);
    UnitIssueOrder(UnitFromId(174), OrderTargetingPoint(AbilityCommand("SporeCrawlerRoot", 0), PointFromId(525)), c_orderQueueReplace);
    while (!((UnitIsAlive(UnitFromId(174)) == false) && (UnitIsAlive(UnitFromId(1824)) == false))) {
        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScurryingZergTrip_Init () {
    gt_ScurryingZergTrip = TriggerCreate("gt_ScurryingZergTrip_Func");
    TriggerAddEventUnitRegion(gt_ScurryingZergTrip, null, RegionFromId(1), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dying Ultralisk
//--------------------------------------------------------------------------------------------------
bool gt_DyingUltralisk_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(174)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(1824)) == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(UnitFromId(230), c_unitPropLifePercent, c_unitPropCurrent) <= 75.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(UnitFromId(230), "ZeratulStun") == false)) {
        UnitSetState(UnitFromId(230), c_unitStateInvulnerable, true);
        UnitIssueOrder(UnitFromId(230), Order(AbilityCommand("BurrowUltraliskDown", 0)), c_orderQueueReplace);
        while (!((libNtve_gf_UnitIsVisibleToPlayer(UnitFromId(230), gv_p1_USER) == false))) {
            Wait(0.1, c_timeGame);
        }
        Wait(0.5, c_timeGame);
        UnitRemove(UnitFromId(230));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DyingUltralisk_Init () {
    gt_DyingUltralisk = TriggerCreate("gt_DyingUltralisk_Func");
    TriggerAddEventUnitDamaged(gt_DyingUltralisk, UnitRefFromUnit(UnitFromId(230)), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Guarded Spore Callout Q
//--------------------------------------------------------------------------------------------------
bool gt_GuardedSporeCalloutQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_tempping1;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/6B39D9A2"), null, UnitGetPosition(UnitFromId(223)));
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectProtoss", UnitGetPosition(UnitFromId(223)));
    lv_tempping1 = libNtve_gf_ActorLastCreated();
    // Transmission - SoundLink("TZeratul01Zeratul00030", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONEZERATUL, SoundLink("TZeratul01Zeratul00030", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    Wait(4.0, c_timeGame);
    libNtve_gf_KillModel(lv_tempping1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GuardedSporeCalloutQ_Init () {
    gt_GuardedSporeCalloutQ = TriggerCreate("gt_GuardedSporeCalloutQ_Func");
    TriggerAddEventUnitRegion(gt_GuardedSporeCalloutQ, null, RegionFromId(57), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prison Then Blink Crawler
//--------------------------------------------------------------------------------------------------
bool gt_PrisonThenBlinkCrawler_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto281AF9E8_g;
    int auto281AF9E8_u;
    unit auto281AF9E8_var;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((UnitGroupCount(UnitGroup(null, gv_p3_ZERG, RegionFromId(60), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 4))) {
        Wait(0.1, c_timeGame);
    }
    auto281AF9E8_g = UnitGroup(null, c_playerAny, RegionFromId(60), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto281AF9E8_u = UnitGroupCount(auto281AF9E8_g, c_unitCountAll);
    for (;; auto281AF9E8_u -= 1) {
        auto281AF9E8_var = UnitGroupUnitFromEnd(auto281AF9E8_g, auto281AF9E8_u);
        if (auto281AF9E8_var == null) { break; }
        gf_IssuePanicOrder(auto281AF9E8_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrisonThenBlinkCrawler_Init () {
    gt_PrisonThenBlinkCrawler = TriggerCreate("gt_PrisonThenBlinkCrawler_Func");
    TriggerAddEventUnitDied(gt_PrisonThenBlinkCrawler, UnitRefFromUnit(UnitFromId(223)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overseer Intro Actions Q
//--------------------------------------------------------------------------------------------------
bool gt_OverseerIntroActionsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertClear(gv_p1_USER);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1689)), c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    SoundPlayAtPoint(SoundLink("Uni_RockExplosionLarge", 1), PlayerGroupAll(), PointFromId(216), 16.0, 100.0, 0.0);
    gf_ActivatePatrolAIForUnit(UnitFromId(221), PointFromId(849), 1.0);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul01Zeratul00068", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONEZERATUL, SoundLink("TZeratul01Zeratul00068", -1), c_transmissionDurationAdd, 1.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverseerIntroActionsQ_Init () {
    gt_OverseerIntroActionsQ = TriggerCreate("gt_OverseerIntroActionsQ_Func");
    TriggerAddEventUnitRegion(gt_OverseerIntroActionsQ, null, RegionFromId(8), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overseer Hydralisks Dead, Run Away
//--------------------------------------------------------------------------------------------------
bool gt_OverseerHydralisksDeadRunAway_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitGroupIsDead(gv_overseerHydralisks) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_patrollingZerg, UnitFromId(221));
    while (true) {
        UnitIssueOrder(UnitFromId(221), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(121))), c_orderQueueReplace);
        if ((RegionContainsPoint(RegionFromId(121), UnitGetPosition(UnitFromId(221))) == true)) {
            UnitRemove(UnitFromId(221));
            break;
            TriggerEnable(TriggerGetCurrent(), false);
        }

        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverseerHydralisksDeadRunAway_Init () {
    gt_OverseerHydralisksDeadRunAway = TriggerCreate("gt_OverseerHydralisksDeadRunAway_Func");
    TriggerAddEventUnitDied(gt_OverseerHydralisksDeadRunAway, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Shrine 1 Reached Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveShrine1ReachedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE0198BAF_g;
    int autoE0198BAF_u;
    unit autoE0198BAF_var;

    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_tHEONEZERATUL))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Shrine01, true, false);
    UIAlertClear(gv_p1_USER);
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/B3A926F4"), null, UnitGetPosition(UnitFromId(73)));
    libNtve_gf_MakeUnitUncommandable(gv_tHEONEZERATUL, true);
    libNtve_gf_MakeUnitInvulnerable(gv_tHEONEZERATUL, true);
    gv_statZeratulLifeRemaining += (UnitGetPropertyFixed(gv_tHEONEZERATUL, c_unitPropLife, c_unitPropNormal) - UnitGetPropertyFixed(gv_tHEONEZERATUL, c_unitPropLife, c_unitPropCurrent));
    UnitSetState(gv_tHEONEZERATUL, c_unitStateSelectable, false);
    UnitSetState(UnitFromId(73), c_unitStateSelectable, false);
    UnitSelect(gv_tHEONEZERATUL, gv_p1_USER, false);
    UnitIssueOrder(gv_tHEONEZERATUL, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1749)), c_orderQueueReplace);
    Wait(0.75, c_timeGame);
    UnitIssueOrder(gv_tHEONEZERATUL, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    SoundPlay(SoundLink("UI_DoorMenu_Popup", 2), PlayerGroupAll(), 100.0, 0.0);
    UnitKill(UnitFromId(1561));
    TriggerExecute(gt_ObjectiveShrinesUpdate, true, false);
    TriggerEnable(gt_ObjectiveShrine2ReachedQ, true);
    PingDestroy(gv_tHEONEPING);
    libNtve_gf_MakeUnitFacePoint(gv_tHEONEZERATUL, UnitGetPosition(UnitFromId(73)), 0.5);
    Wait(0.75, c_timeGame);
    UnitBehaviorAdd(gv_tHEONEZERATUL, "Read", gv_tHEONEZERATUL, 1);
    Wait(1.0, c_timeGame);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TZeratul01MusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_AnimateShrine(UnitFromId(73));
    Wait(2.0, c_timeGame);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 10.0, 0.0);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul01Zeratul00047", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONEZERATUL, SoundLink("TZeratul01Zeratul00047", -1), c_transmissionDurationAdd, 1.0, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 100.0, 0.0);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    UnitBehaviorRemove(gv_tHEONEZERATUL, "Read", 1);
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/212417DA"));
    CameraPan(gv_p1_USER, PointWithOffset(PointFromId(1748), 0.0, 0.0), 1.5, -1, 10, false);
    VisRevealerCreate(gv_p1_USER, RegionFromId(7));
    gv_tHEONEREVEALER = VisRevealerLastCreated();
    Wait(0.75, c_timeGame);
    libNtve_gf_MakeUnitUncommandable(gv_tHEONEZERATUL, false);
    libNtve_gf_MakeUnitInvulnerable(gv_tHEONEZERATUL, false);
    UnitSetState(gv_tHEONEZERATUL, c_unitStateSelectable, true);
    UnitSetState(UnitFromId(73), c_unitStateSelectable, true);
    UnitSelect(gv_tHEONEZERATUL, gv_p1_USER, true);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitFromId(7)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/0AC17023"));
    gv_tHEONEPING = PingLastCreated();
    libNtve_gf_ShareVisionofUnit(UnitFromId(7), true, gv_p1_USER);
    VisRevealArea(gv_p1_USER, RegionFromId(50), 0.1, false);
    UnitIssueOrder(UnitFromId(208), Order(AbilityCommand("TempleDoorDownURDL", 0)), c_orderQueueReplace);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitFromId(208)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0, 270.0);
    UIAlertPoint("Trigger", 1, StringToText(""), null, UnitGetPosition(UnitFromId(208)));
    gf_RefreshPlayersHPandShields();
    autoE0198BAF_g = UnitGroup("PathingBlocker2x2", c_playerAny, RegionFromId(92), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE0198BAF_u = UnitGroupCount(autoE0198BAF_g, c_unitCountAll);
    for (;; autoE0198BAF_u -= 1) {
        autoE0198BAF_var = UnitGroupUnitFromEnd(autoE0198BAF_g, autoE0198BAF_u);
        if (autoE0198BAF_var == null) { break; }
        UnitRemove(autoE0198BAF_var);
    }
    TriggerEnable(gt_KerriganTaunt11Q, true);
    TriggerExecute(gt_KerriganTaunt11Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveShrine1ReachedQ_Init () {
    gt_ObjectiveShrine1ReachedQ = TriggerCreate("gt_ObjectiveShrine1ReachedQ_Func");
    TriggerAddEventUnitRegion(gt_ObjectiveShrine1ReachedQ, null, RegionFromId(41), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Taunt 1.1 Q
//--------------------------------------------------------------------------------------------------
bool gt_KerriganTaunt11Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealerDestroy(gv_tHEONEREVEALER);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    // Transmission - SoundLink("TZeratul01Kerrigan00011", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul01Kerrigan00011", -1), c_transmissionDurationAdd, 0.0, false);
    gv_interruptableTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    // Transmission - SoundLink("TZeratul01Zeratul00003", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONEZERATUL, SoundLink("TZeratul01Zeratul00003", -1), c_transmissionDurationAdd, 0.0, false);
    gv_interruptableTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganTaunt11Q_Init () {
    gt_KerriganTaunt11Q = TriggerCreate("gt_KerriganTaunt11Q_Func");
    TriggerEnable(gt_KerriganTaunt11Q, false);
    TriggerAddEventUnitRegion(gt_KerriganTaunt11Q, null, RegionFromId(23), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scourge Ambience 1
//--------------------------------------------------------------------------------------------------
bool gt_ScourgeAmbience1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    unitgroup auto1C41810C_g;
    int auto1C41810C_u;
    unit auto1C41810C_var;
    unitgroup auto4B7AEACA_g;
    int auto4B7AEACA_u;
    unit auto4B7AEACA_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayAtPoint(SoundLink("Mutalisk_Attack", 4), PlayerGroupAll(), UnitGetPosition(gv_tHEONEZERATUL), 0.0, 100.0, 0.0);
    auto1C41810C_g = gv_scourgeAmbience1;
    auto1C41810C_u = UnitGroupCount(auto1C41810C_g, c_unitCountAll);
    for (;; auto1C41810C_u -= 1) {
        auto1C41810C_var = UnitGroupUnitFromEnd(auto1C41810C_g, auto1C41810C_u);
        if (auto1C41810C_var == null) { break; }
        lv_point = PointWithOffsetPolar(UnitGetPosition(auto1C41810C_var), 50.0, RandomFixed(215.0, 235.0));
        libNtve_gf_ShowHideUnit(auto1C41810C_var, true);
        libNtve_gf_PauseUnit(auto1C41810C_var, false);
        UnitIssueOrder(auto1C41810C_var, OrderTargetingPoint(AbilityCommand("move", 0), lv_point), c_orderQueueReplace);
        UnitSetCustomValue(auto1C41810C_var, 0, PointGetX(lv_point));
        UnitSetCustomValue(auto1C41810C_var, 1, PointGetY(lv_point));
        UnitSetPropertyFixed(auto1C41810C_var, c_unitPropMovementSpeed, (UnitGetPropertyFixed(auto1C41810C_var, c_unitPropMovementSpeed, c_unitPropNormal) * RandomFixed(0.85, 1.2)));
    }
    Wait(7.0, c_timeGame);
    while (true) {
        if ((UnitGroupCount(gv_scourgeAmbience1, c_unitCountAlive) == 0)) {
            break;
        }

        auto4B7AEACA_g = gv_scourgeAmbience1;
        auto4B7AEACA_u = UnitGroupCount(auto4B7AEACA_g, c_unitCountAll);
        for (;; auto4B7AEACA_u -= 1) {
            auto4B7AEACA_var = UnitGroupUnitFromEnd(auto4B7AEACA_g, auto4B7AEACA_u);
            if (auto4B7AEACA_var == null) { break; }
            if ((libNtve_gf_UnitIsVisibleToPlayer(auto4B7AEACA_var, gv_p1_USER) == false)) {
                UnitRemove(auto4B7AEACA_var);
            }
            else {
                UnitIssueOrder(auto4B7AEACA_var, OrderTargetingPoint(AbilityCommand("attack", 0), Point(UnitGetCustomValue(auto4B7AEACA_var, 0), UnitGetCustomValue(auto4B7AEACA_var, 1))), c_orderQueueReplace);
            }
        }
        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScourgeAmbience1_Init () {
    gt_ScourgeAmbience1 = TriggerCreate("gt_ScourgeAmbience1_Func");
    TriggerAddEventUnitRegion(gt_ScourgeAmbience1, null, RegionFromId(107), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zeratul Reaches Stalker Intro Chasm
//--------------------------------------------------------------------------------------------------
bool gt_ZeratulReachesStalkerIntroChasm_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionClear(gv_interruptableTransmission);
    TriggerStop(gt_KerriganTaunt11Q);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    VisRevealArea(gv_p2_ALLIED, RegionFromId(4), 0.0, false);
    TriggerExecute(gt_KerriganTaunt12Q, true, false);
    TriggerExecute(gt_StalkerIntroScourgeEncircleInit, true, false);
    TriggerEnable(gt_StalkerIntroScourgeEncircleAI, true);
    Wait(11.0, c_timeGame);
    TriggerExecute(gt_StalkersIntroWarpInQ, true, false);
    UnitIssueOrder(UnitFromId(326), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(152)), c_orderQueueReplace);
    Wait(0.1, c_timeGame);
    UnitIssueOrder(UnitFromId(326), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(153)), c_orderQueueReplace);
    Wait(0.1, c_timeGame);
    UnitIssueOrder(UnitFromId(326), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(148)), c_orderQueueReplace);
    Wait(0.1, c_timeGame);
    UnitIssueOrder(UnitFromId(326), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(154)), c_orderQueueReplace);
    Wait(0.1, c_timeGame);
    Wait(11.0, c_timeGame);
    TriggerExecute(gt_StalkerIntroScourgeEncircleEnd, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZeratulReachesStalkerIntroChasm_Init () {
    gt_ZeratulReachesStalkerIntroChasm = TriggerCreate("gt_ZeratulReachesStalkerIntroChasm_Func");
    TriggerAddEventUnitRegion(gt_ZeratulReachesStalkerIntroChasm, null, RegionFromId(4), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Taunt 1.2 Q
//--------------------------------------------------------------------------------------------------
bool gt_KerriganTaunt12Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayAtPoint(SoundLink("Mutalisk_Attack", 9), PlayerGroupAll(), UnitGetPosition(gv_tHEONEZERATUL), 0.0, 100.0, 0.0);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    // Transmission - SoundLink("TZeratul01Zeratul00028", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONEZERATUL, SoundLink("TZeratul01Zeratul00028", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganTaunt12Q_Init () {
    gt_KerriganTaunt12Q = TriggerCreate("gt_KerriganTaunt12Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stalkers Intro Warp In Q
//--------------------------------------------------------------------------------------------------
bool gt_StalkersIntroWarpInQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul01Stalker00049", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul01Stalker00049", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StalkersIntroWarpInQ_Init () {
    gt_StalkersIntroWarpInQ = TriggerCreate("gt_StalkersIntroWarpInQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stalker Intro Scourge Encircle Init
//--------------------------------------------------------------------------------------------------
bool gt_StalkerIntroScourgeEncircleInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_real;
    fixed lv_minWrap;
    fixed lv_maxWrap;
    fixed lv_minSpeed;
    fixed lv_maxSpeed;

    // Automatic Variable Declarations
    const int auto83F1D9EE_n = 2;
    int auto83F1D9EE_i;
    const int autoE0DD90D0_n = 2;
    int autoE0DD90D0_i;
    const int auto86A986EC_n = 2;
    int auto86A986EC_i;
    const int auto1EE57B14_n = 2;
    int auto1EE57B14_i;
    const int auto5407CE2C_n = 3;
    int auto5407CE2C_i;
    const int autoFC88027E_n = 3;
    int autoFC88027E_i;
    const int auto47EA0C8A_n = 1;
    int auto47EA0C8A_i;
    const int auto24AB4CDA_n = 2;
    int auto24AB4CDA_i;
    const int auto4007358F_n = 2;
    int auto4007358F_i;
    const int auto218A6574_n = 2;
    int auto218A6574_i;

    // Variable Initialization
    lv_minWrap = 1.5;
    lv_maxWrap = 7.0;
    lv_minSpeed = 0.9;
    lv_maxSpeed = 1.3;

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto83F1D9EE_i = 1; auto83F1D9EE_i <= auto83F1D9EE_n; auto83F1D9EE_i += 1) {
        lv_real = libNtve_gf_RandomAngle();
        libNtve_gf_UnitCreateFacingPoint(1, "Scourge", 0, gv_p3_ZERG, PointWithOffsetPolar(UnitGetPosition(gv_tHEONEZERATUL), RandomFixed(15.0, 25.0), lv_real), UnitGetPosition(gv_tHEONEZERATUL));
        UnitSetCustomValue(UnitLastCreated(), 0, lv_real);
        UnitSetCustomValue(UnitLastCreated(), 1, RandomFixed(lv_minWrap, lv_maxWrap));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(lv_minSpeed, lv_maxSpeed)));
        UnitGroupAdd(gv_zergEncircleGroupLeft, UnitLastCreated());
    }
    for (autoE0DD90D0_i = 1; autoE0DD90D0_i <= autoE0DD90D0_n; autoE0DD90D0_i += 1) {
        lv_real = libNtve_gf_RandomAngle();
        libNtve_gf_UnitCreateFacingPoint(1, "Scourge", 0, gv_p3_ZERG, PointWithOffsetPolar(UnitGetPosition(gv_tHEONEZERATUL), RandomFixed(15.0, 25.0), lv_real), UnitGetPosition(gv_tHEONEZERATUL));
        UnitSetCustomValue(UnitLastCreated(), 0, lv_real);
        UnitSetCustomValue(UnitLastCreated(), 1, RandomFixed(lv_minWrap, lv_maxWrap));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(lv_minSpeed, lv_maxSpeed)));
        UnitGroupAdd(gv_zergEncircleGroupRight, UnitLastCreated());
    }
    Wait(2.0, c_timeGame);
    for (auto86A986EC_i = 1; auto86A986EC_i <= auto86A986EC_n; auto86A986EC_i += 1) {
        lv_real = libNtve_gf_RandomAngle();
        libNtve_gf_UnitCreateFacingPoint(1, "Scourge", 0, gv_p3_ZERG, PointWithOffsetPolar(UnitGetPosition(gv_tHEONEZERATUL), RandomFixed(15.0, 25.0), lv_real), UnitGetPosition(gv_tHEONEZERATUL));
        UnitSetCustomValue(UnitLastCreated(), 0, lv_real);
        UnitSetCustomValue(UnitLastCreated(), 1, RandomFixed(lv_minWrap, lv_maxWrap));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(lv_minSpeed, lv_maxSpeed)));
        UnitGroupAdd(gv_zergEncircleGroupLeft, UnitLastCreated());
    }
    for (auto1EE57B14_i = 1; auto1EE57B14_i <= auto1EE57B14_n; auto1EE57B14_i += 1) {
        lv_real = libNtve_gf_RandomAngle();
        libNtve_gf_UnitCreateFacingPoint(1, "Scourge", 0, gv_p3_ZERG, PointWithOffsetPolar(UnitGetPosition(gv_tHEONEZERATUL), RandomFixed(15.0, 25.0), lv_real), UnitGetPosition(gv_tHEONEZERATUL));
        UnitSetCustomValue(UnitLastCreated(), 0, lv_real);
        UnitSetCustomValue(UnitLastCreated(), 1, RandomFixed(lv_minWrap, lv_maxWrap));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(lv_minSpeed, lv_maxSpeed)));
        UnitGroupAdd(gv_zergEncircleGroupRight, UnitLastCreated());
    }
    Wait(1.0, c_timeGame);
    for (auto5407CE2C_i = 1; auto5407CE2C_i <= auto5407CE2C_n; auto5407CE2C_i += 1) {
        lv_real = libNtve_gf_RandomAngle();
        libNtve_gf_UnitCreateFacingPoint(1, "Scourge", 0, gv_p3_ZERG, PointWithOffsetPolar(UnitGetPosition(gv_tHEONEZERATUL), RandomFixed(15.0, 25.0), lv_real), UnitGetPosition(gv_tHEONEZERATUL));
        UnitSetCustomValue(UnitLastCreated(), 0, lv_real);
        UnitSetCustomValue(UnitLastCreated(), 1, RandomFixed(lv_minWrap, lv_maxWrap));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(lv_minSpeed, lv_maxSpeed)));
        UnitGroupAdd(gv_zergEncircleGroupLeft, UnitLastCreated());
    }
    for (autoFC88027E_i = 1; autoFC88027E_i <= autoFC88027E_n; autoFC88027E_i += 1) {
        lv_real = libNtve_gf_RandomAngle();
        libNtve_gf_UnitCreateFacingPoint(1, "Scourge", 0, gv_p3_ZERG, PointWithOffsetPolar(UnitGetPosition(gv_tHEONEZERATUL), RandomFixed(15.0, 25.0), lv_real), UnitGetPosition(gv_tHEONEZERATUL));
        UnitSetCustomValue(UnitLastCreated(), 0, lv_real);
        UnitSetCustomValue(UnitLastCreated(), 1, RandomFixed(lv_minWrap, lv_maxWrap));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(lv_minSpeed, lv_maxSpeed)));
        UnitGroupAdd(gv_zergEncircleGroupRight, UnitLastCreated());
    }
    Wait(1.0, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "Overseer", 0, gv_p3_ZERG, PointFromId(597), UnitGetPosition(gv_tHEONEZERATUL));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(598)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    gv_stalkerIntroOverseer1 = UnitLastCreated();
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_ZergEncircleLoopingSounds, true, false);
    for (auto47EA0C8A_i = 1; auto47EA0C8A_i <= auto47EA0C8A_n; auto47EA0C8A_i += 1) {
        lv_real = libNtve_gf_RandomAngle();
        libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, gv_p3_ZERG, PointWithOffsetPolar(UnitGetPosition(gv_tHEONEZERATUL), RandomFixed(15.0, 25.0), lv_real), UnitGetPosition(gv_tHEONEZERATUL));
        UnitSetCustomValue(UnitLastCreated(), 0, lv_real);
        UnitSetCustomValue(UnitLastCreated(), 1, RandomFixed(lv_minWrap, 4.5));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(lv_minSpeed, lv_maxSpeed)));
        UnitGroupAdd(gv_zergEncircleGroupLeft, UnitLastCreated());
    }
    for (auto24AB4CDA_i = 1; auto24AB4CDA_i <= auto24AB4CDA_n; auto24AB4CDA_i += 1) {
        lv_real = libNtve_gf_RandomAngle();
        libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, gv_p3_ZERG, PointWithOffsetPolar(UnitGetPosition(gv_tHEONEZERATUL), RandomFixed(15.0, 25.0), lv_real), UnitGetPosition(gv_tHEONEZERATUL));
        UnitSetCustomValue(UnitLastCreated(), 0, lv_real);
        UnitSetCustomValue(UnitLastCreated(), 1, RandomFixed(lv_minWrap, 4.5));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(lv_minSpeed, lv_maxSpeed)));
        UnitGroupAdd(gv_zergEncircleGroupRight, UnitLastCreated());
    }
    Wait(2.0, c_timeGame);
    for (auto4007358F_i = 1; auto4007358F_i <= auto4007358F_n; auto4007358F_i += 1) {
        lv_real = libNtve_gf_RandomAngle();
        libNtve_gf_UnitCreateFacingPoint(1, "Scourge", 0, gv_p3_ZERG, PointWithOffsetPolar(UnitGetPosition(gv_tHEONEZERATUL), RandomFixed(15.0, 25.0), lv_real), UnitGetPosition(gv_tHEONEZERATUL));
        UnitSetCustomValue(UnitLastCreated(), 0, lv_real);
        UnitSetCustomValue(UnitLastCreated(), 1, RandomFixed(lv_minWrap, lv_maxWrap));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(lv_minSpeed, lv_maxSpeed)));
        UnitGroupAdd(gv_zergEncircleGroupLeft, UnitLastCreated());
    }
    for (auto218A6574_i = 1; auto218A6574_i <= auto218A6574_n; auto218A6574_i += 1) {
        lv_real = libNtve_gf_RandomAngle();
        libNtve_gf_UnitCreateFacingPoint(1, "Scourge", 0, gv_p3_ZERG, PointWithOffsetPolar(UnitGetPosition(gv_tHEONEZERATUL), RandomFixed(15.0, 25.0), lv_real), UnitGetPosition(gv_tHEONEZERATUL));
        UnitSetCustomValue(UnitLastCreated(), 0, lv_real);
        UnitSetCustomValue(UnitLastCreated(), 1, RandomFixed(lv_minWrap, lv_maxWrap));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(lv_minSpeed, lv_maxSpeed)));
        UnitGroupAdd(gv_zergEncircleGroupRight, UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StalkerIntroScourgeEncircleInit_Init () {
    gt_StalkerIntroScourgeEncircleInit = TriggerCreate("gt_StalkerIntroScourgeEncircleInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stalker Intro Scourge Encircle AI
//--------------------------------------------------------------------------------------------------
bool gt_StalkerIntroScourgeEncircleAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto45ED8A27_g;
    int auto45ED8A27_u;
    unit auto45ED8A27_var;
    unitgroup auto11B330CC_g;
    int auto11B330CC_u;
    unit auto11B330CC_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_RandomPercent() >= 33.0)) {
        if ((RandomInt(0, 1) == 0)) {
            lv_unit = UnitGroupRandomUnit(gv_zergEncircleGroupLeft, c_unitCountAlive);
        }
        else {
            lv_unit = UnitGroupRandomUnit(gv_zergEncircleGroupRight, c_unitCountAlive);
        }
        UnitSetCustomValue(lv_unit, 1, (2.0 + ModF((UnitGetCustomValue(lv_unit, 1) + 6.0), 12.0)));
        UnitSetPropertyFixed(lv_unit, c_unitPropMovementSpeed, (UnitGetPropertyFixed(lv_unit, c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(0.9, 1.15)));
    }

    if ((libNtve_gf_RandomPercent() >= 96.0)) {
        if ((RandomInt(0, 1) == 0)) {
            lv_unit = UnitGroupRandomUnit(gv_zergEncircleGroupLeft, c_unitCountAlive);
            UnitGroupRemove(gv_zergEncircleGroupLeft, lv_unit);
            UnitGroupAdd(gv_zergEncircleGroupRight, lv_unit);
        }
        else {
            lv_unit = UnitGroupRandomUnit(gv_zergEncircleGroupRight, c_unitCountAlive);
            UnitGroupRemove(gv_zergEncircleGroupRight, lv_unit);
            UnitGroupAdd(gv_zergEncircleGroupLeft, lv_unit);
        }
    }

    auto45ED8A27_g = gv_zergEncircleGroupLeft;
    auto45ED8A27_u = UnitGroupCount(auto45ED8A27_g, c_unitCountAll);
    for (;; auto45ED8A27_u -= 1) {
        auto45ED8A27_var = UnitGroupUnitFromEnd(auto45ED8A27_g, auto45ED8A27_u);
        if (auto45ED8A27_var == null) { break; }
        UnitIssueOrder(auto45ED8A27_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(PointWithOffset(UnitGetPosition(gv_tHEONEZERATUL), 0.0, -1.5), RandomFixed((UnitGetCustomValue(auto45ED8A27_var, 1) + 0.2), (UnitGetCustomValue(auto45ED8A27_var, 1) - 0.2)), (UnitGetCustomValue(auto45ED8A27_var, 0) + 30.0))), c_orderQueueReplace);
        UnitSetCustomValue(auto45ED8A27_var, 0, AngleBetweenPoints(PointWithOffset(UnitGetPosition(gv_tHEONEZERATUL), 0.0, -1.5), UnitGetPosition(auto45ED8A27_var)));
    }
    auto11B330CC_g = gv_zergEncircleGroupRight;
    auto11B330CC_u = UnitGroupCount(auto11B330CC_g, c_unitCountAll);
    for (;; auto11B330CC_u -= 1) {
        auto11B330CC_var = UnitGroupUnitFromEnd(auto11B330CC_g, auto11B330CC_u);
        if (auto11B330CC_var == null) { break; }
        UnitIssueOrder(auto11B330CC_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(PointWithOffset(UnitGetPosition(gv_tHEONEZERATUL), 0.0, -1.5), RandomFixed((UnitGetCustomValue(auto11B330CC_var, 1) + 0.2), (UnitGetCustomValue(auto11B330CC_var, 1) - 0.2)), (UnitGetCustomValue(auto11B330CC_var, 0) - 30.0))), c_orderQueueReplace);
        UnitSetCustomValue(auto11B330CC_var, 0, AngleBetweenPoints(PointWithOffset(UnitGetPosition(gv_tHEONEZERATUL), 0.0, -1.5), UnitGetPosition(auto11B330CC_var)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StalkerIntroScourgeEncircleAI_Init () {
    gt_StalkerIntroScourgeEncircleAI = TriggerCreate("gt_StalkerIntroScourgeEncircleAI_Func");
    TriggerEnable(gt_StalkerIntroScourgeEncircleAI, false);
    TriggerAddEventTimePeriodic(gt_StalkerIntroScourgeEncircleAI, 0.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stalker Intro Scourge Encircle End
//--------------------------------------------------------------------------------------------------
bool gt_StalkerIntroScourgeEncircleEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_unitGroup;
    point lv_point;

    // Automatic Variable Declarations
    unitgroup auto304B77BB_g;
    int auto304B77BB_u;
    unit auto304B77BB_var;
    unitgroup autoBDE3D882_g;
    int autoBDE3D882_u;
    unit autoBDE3D882_var;
    unitgroup auto227EBC88_g;
    int auto227EBC88_u;
    unit auto227EBC88_var;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_StalkerIntroScourgeEncircleAI, false);
    TriggerStop(gt_ZergEncircleLoopingSounds);
    auto304B77BB_g = gv_zergEncircleGroupLeft;
    auto304B77BB_u = UnitGroupCount(auto304B77BB_g, c_unitCountAll);
    for (;; auto304B77BB_u -= 1) {
        auto304B77BB_var = UnitGroupUnitFromEnd(auto304B77BB_g, auto304B77BB_u);
        if (auto304B77BB_var == null) { break; }
        lv_point = PointWithOffsetPolar(UnitGetPosition(auto304B77BB_var), 50.0, libNtve_gf_RandomAngle());
        UnitIssueOrder(auto304B77BB_var, OrderTargetingPoint(AbilityCommand("attack", 0), lv_point), c_orderQueueReplace);
        UnitSetCustomValue(auto304B77BB_var, 0, PointGetX(lv_point));
        UnitSetCustomValue(auto304B77BB_var, 1, PointGetY(lv_point));
        UnitGroupRemove(gv_zergEncircleGroupLeft, auto304B77BB_var);
        UnitGroupAdd(lv_unitGroup, auto304B77BB_var);
    }
    autoBDE3D882_g = gv_zergEncircleGroupRight;
    autoBDE3D882_u = UnitGroupCount(autoBDE3D882_g, c_unitCountAll);
    for (;; autoBDE3D882_u -= 1) {
        autoBDE3D882_var = UnitGroupUnitFromEnd(autoBDE3D882_g, autoBDE3D882_u);
        if (autoBDE3D882_var == null) { break; }
        lv_point = PointWithOffsetPolar(UnitGetPosition(autoBDE3D882_var), 50.0, libNtve_gf_RandomAngle());
        UnitIssueOrder(autoBDE3D882_var, OrderTargetingPoint(AbilityCommand("attack", 0), lv_point), c_orderQueueReplace);
        UnitSetCustomValue(autoBDE3D882_var, 0, PointGetX(lv_point));
        UnitSetCustomValue(autoBDE3D882_var, 1, PointGetY(lv_point));
        UnitGroupRemove(gv_zergEncircleGroupRight, autoBDE3D882_var);
        UnitGroupAdd(lv_unitGroup, autoBDE3D882_var);
    }
    UnitIssueOrder(gv_stalkerIntroOverseer1, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(599)), c_orderQueueReplace);
    UnitIssueOrder(gv_stalkerIntroOverseer2, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(193)), c_orderQueueReplace);
    UnitGroupAdd(lv_unitGroup, gv_stalkerIntroOverseer1);
    UnitGroupAdd(lv_unitGroup, gv_stalkerIntroOverseer2);
    while (true) {
        if ((UnitGroupCount(lv_unitGroup, c_unitCountAlive) == 0)) {
            break;
        }

        auto227EBC88_g = lv_unitGroup;
        auto227EBC88_u = UnitGroupCount(auto227EBC88_g, c_unitCountAll);
        for (;; auto227EBC88_u -= 1) {
            auto227EBC88_var = UnitGroupUnitFromEnd(auto227EBC88_g, auto227EBC88_u);
            if (auto227EBC88_var == null) { break; }
            if ((libNtve_gf_UnitIsVisibleToPlayer(auto227EBC88_var, 1) == false)) {
                UnitRemove(auto227EBC88_var);
            }
            else {
                UnitIssueOrder(auto227EBC88_var, OrderTargetingPoint(AbilityCommand("attack", 0), Point(UnitGetCustomValue(auto227EBC88_var, 0), UnitGetCustomValue(auto227EBC88_var, 1))), c_orderQueueReplace);
            }
        }
        Wait(0.1, c_timeGame);
    }
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_StalkersRevealerTipQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StalkerIntroScourgeEncircleEnd_Init () {
    gt_StalkerIntroScourgeEncircleEnd = TriggerCreate("gt_StalkerIntroScourgeEncircleEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stalkers Revealer / Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_StalkersRevealerTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertClear(gv_p1_USER);
    UIAlertPoint("Trigger", gv_p1_USER, StringToText(""), null, PointFromId(144));
    libLbty_gf_AutoRevealRegion(RegionFromId(6), RegionFromId(4), gv_p1_USER);
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectProtoss", PointFromId(144));
    gv_postStalkerIntroHint = libNtve_gf_ActorLastCreated();
    Wait(2.0, c_timeGame);
    TriggerQueueEnter();
    if ((UnitIsAlive(gv_tHEONEKARASS) == true) && (UnitGroupCount(UnitGroup("Stalker", gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TZeratul01Stalker00050", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul01Stalker00050", -1), c_transmissionDurationAdd, 0.0, true);
        // Transmission - SoundLink("TZeratul01Zeratul00051", 0)
        libCamp_gf_SendTransmissionCampaign(gv_tHEONEZERATUL, SoundLink("TZeratul01Zeratul00051", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        Wait(1.0, c_timeGame);
    }

    libCamp_gf_CreateTipFromConversationState("StoryTips|Zeratul01_Stalker", libNtve_ge_TipType_NewUnit, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StalkersRevealerTipQ_Init () {
    gt_StalkersRevealerTipQ = TriggerCreate("gt_StalkersRevealerTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stalker Intro Clean Up Ping
//--------------------------------------------------------------------------------------------------
bool gt_StalkerIntroCleanUpPing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(gv_postStalkerIntroHint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StalkerIntroCleanUpPing_Init () {
    gt_StalkerIntroCleanUpPing = TriggerCreate("gt_StalkerIntroCleanUpPing_Func");
    TriggerAddEventUnitRegion(gt_StalkerIntroCleanUpPing, null, RegionFromId(6), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stalker Cliff Pew Q
//--------------------------------------------------------------------------------------------------
bool gt_StalkerCliffPewQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Stalker", gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
        gf_ActivatePatrolAIForUnit(UnitFromId(232), PointFromId(63), 5.0);
    }
    else {
        gf_ActivatePatrolAIForUnit(UnitFromId(232), PointFromId(1840), 5.0);
    }
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul01Stalker00029", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul01Stalker00029", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StalkerCliffPewQ_Init () {
    gt_StalkerCliffPewQ = TriggerCreate("gt_StalkerCliffPewQ_Func");
    TriggerAddEventUnitRegion(gt_StalkerCliffPewQ, null, RegionFromId(43), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stalker Cliff Kill Reaction
//--------------------------------------------------------------------------------------------------
bool gt_StalkerCliffKillReaction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9772E359_g;
    int auto9772E359_u;
    unit auto9772E359_var;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (!(((UnitGroupCount(UnitGroup("Hydralisk", c_playerAny, RegionFromId(114), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= libNtve_gf_DifficultyValueInt(2, 2, 4, 4)) || (UnitGroupCount(UnitGroup("Hydralisk", c_playerAny, RegionFromId(114), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1)))) {
        Wait(0.1, c_timeGame);
    }
    auto9772E359_g = UnitGroup("Hydralisk", c_playerAny, RegionFromId(114), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9772E359_u = UnitGroupCount(auto9772E359_g, c_unitCountAll);
    for (;; auto9772E359_u -= 1) {
        auto9772E359_var = UnitGroupUnitFromEnd(auto9772E359_g, auto9772E359_u);
        if (auto9772E359_var == null) { break; }
        gf_IssuePanicOrder(auto9772E359_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StalkerCliffKillReaction_Init () {
    gt_StalkerCliffKillReaction = TriggerCreate("gt_StalkerCliffKillReaction_Func");
    TriggerAddEventUnitDied(gt_StalkerCliffKillReaction, UnitRefFromUnit(UnitFromId(232)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Guarded Spore Patrol
//--------------------------------------------------------------------------------------------------
bool gt_GuardedSporePatrol_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC88D1E8E_g;
    int autoC88D1E8E_u;
    unit autoC88D1E8E_var;

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ActivatePatrolAIForUnit(UnitFromId(526), PointFromId(596), 5.0);
    gf_ActivatePatrolAIForUnit(UnitFromId(806), PointFromId(823), 5.0);
    gf_ActivatePatrolAIForUnit(UnitFromId(237), PointFromId(624), 5.0);
    gf_ActivatePatrolAIForUnit(UnitFromId(261), PointFromId(285), 5.0);
    autoC88D1E8E_g = UnitGroup("Zergling", c_playerAny, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC88D1E8E_u = UnitGroupCount(autoC88D1E8E_g, c_unitCountAll);
    for (;; autoC88D1E8E_u -= 1) {
        autoC88D1E8E_var = UnitGroupUnitFromEnd(autoC88D1E8E_g, autoC88D1E8E_u);
        if (autoC88D1E8E_var == null) { break; }
        UnitBehaviorAdd(autoC88D1E8E_var, "InstallationZergWander", autoC88D1E8E_var, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GuardedSporePatrol_Init () {
    gt_GuardedSporePatrol = TriggerCreate("gt_GuardedSporePatrol_Func");
    TriggerAddEventUnitRegion(gt_GuardedSporePatrol, null, RegionFromId(11), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reinforcements 1
//--------------------------------------------------------------------------------------------------
bool gt_Reinforcements1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_StalkerReinforcements(EventUnitRegion(), libNtve_gf_DifficultyValueInt(4, 4, 4, 3));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Reinforcements1_Init () {
    gt_Reinforcements1 = TriggerCreate("gt_Reinforcements1_Func");
    TriggerAddEventUnitRegion(gt_Reinforcements1, null, RegionFromId(65), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Broodlord Patrol Q
//--------------------------------------------------------------------------------------------------
bool gt_BroodlordPatrolQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_broodlordping1;
    actor lv_broodlordping2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertClear(gv_p1_USER);
    libNtve_gf_ShowHideUnit(UnitFromId(694), true);
    libNtve_gf_PauseUnit(UnitFromId(694), false);
    libNtve_gf_ShowHideUnit(UnitFromId(171), true);
    libNtve_gf_ShowHideUnit(UnitFromId(239), true);
    libNtve_gf_AttachModelToUnit(UnitFromId(170), "BriefingUnitSelectProtoss", "Ref_Center");
    lv_broodlordping1 = libNtve_gf_ActorLastCreated();
    libNtve_gf_AttachModelToUnit(UnitFromId(694), "BriefingUnitSelectProtoss", "Ref_Center");
    lv_broodlordping2 = libNtve_gf_ActorLastCreated();
    gf_ActivatePatrolAIForUnit(UnitFromId(170), PointFromId(528), 5.0);
    gf_ActivatePatrolAIForUnit(UnitFromId(694), PointFromId(530), 5.0);
    gf_ActivatePatrolAIForUnit(UnitFromId(196), PointFromId(1191), 5.0);
    libLbty_gf_AutoRevealRegion(RegionFromId(72), RegionFromId(25), gv_p1_USER);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    UIAlertUnit("Trigger", gv_p1_USER, StringExternal("Param/Value/7DD02F27"), null, UnitFromId(170));
    // Transmission - SoundLink("TZeratul01Zeratul00070", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONEZERATUL, SoundLink("TZeratul01Zeratul00070", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    Wait(4.0, c_timeGame);
    libNtve_gf_KillModel(lv_broodlordping1);
    libNtve_gf_KillModel(lv_broodlordping2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BroodlordPatrolQ_Init () {
    gt_BroodlordPatrolQ = TriggerCreate("gt_BroodlordPatrolQ_Func");
    TriggerAddEventUnitRegion(gt_BroodlordPatrolQ, null, RegionFromId(72), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scourge Ambience 2
//--------------------------------------------------------------------------------------------------
bool gt_ScourgeAmbience2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    unitgroup auto679F94F0_g;
    int auto679F94F0_u;
    unit auto679F94F0_var;
    unitgroup auto76F80C67_g;
    int auto76F80C67_u;
    unit auto76F80C67_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayAtPoint(SoundLink("Mutalisk_Attack", 2), PlayerGroupAll(), UnitGetPosition(gv_tHEONEZERATUL), 0.0, 100.0, 0.0);
    auto679F94F0_g = gv_scourgeAmbience2;
    auto679F94F0_u = UnitGroupCount(auto679F94F0_g, c_unitCountAll);
    for (;; auto679F94F0_u -= 1) {
        auto679F94F0_var = UnitGroupUnitFromEnd(auto679F94F0_g, auto679F94F0_u);
        if (auto679F94F0_var == null) { break; }
        lv_point = PointWithOffsetPolar(UnitGetPosition(auto679F94F0_var), 50.0, RandomFixed(305.0, 325.0));
        libNtve_gf_ShowHideUnit(auto679F94F0_var, true);
        libNtve_gf_PauseUnit(auto679F94F0_var, false);
        UnitIssueOrder(auto679F94F0_var, OrderTargetingPoint(AbilityCommand("move", 0), lv_point), c_orderQueueReplace);
        UnitSetCustomValue(auto679F94F0_var, 0, PointGetX(lv_point));
        UnitSetCustomValue(auto679F94F0_var, 1, PointGetY(lv_point));
        UnitSetPropertyFixed(auto679F94F0_var, c_unitPropMovementSpeed, (UnitGetPropertyFixed(auto679F94F0_var, c_unitPropMovementSpeed, c_unitPropNormal) * RandomFixed(0.85, 1.2)));
    }
    Wait(7.0, c_timeGame);
    while (true) {
        if ((UnitGroupCount(gv_scourgeAmbience2, c_unitCountAlive) == 0)) {
            break;
        }

        auto76F80C67_g = gv_scourgeAmbience2;
        auto76F80C67_u = UnitGroupCount(auto76F80C67_g, c_unitCountAll);
        for (;; auto76F80C67_u -= 1) {
            auto76F80C67_var = UnitGroupUnitFromEnd(auto76F80C67_g, auto76F80C67_u);
            if (auto76F80C67_var == null) { break; }
            if ((libNtve_gf_UnitIsVisibleToPlayer(auto76F80C67_var, gv_p1_USER) == false)) {
                UnitRemove(auto76F80C67_var);
            }
            else {
                UnitIssueOrder(auto76F80C67_var, OrderTargetingPoint(AbilityCommand("attack", 0), Point(UnitGetCustomValue(auto76F80C67_var, 0), UnitGetCustomValue(auto76F80C67_var, 1))), c_orderQueueReplace);
            }
        }
        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScourgeAmbience2_Init () {
    gt_ScourgeAmbience2 = TriggerCreate("gt_ScourgeAmbience2_Func");
    TriggerAddEventUnitRegion(gt_ScourgeAmbience2, null, RegionFromId(109), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reinforcements 2
//--------------------------------------------------------------------------------------------------
bool gt_Reinforcements2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_StalkerReinforcements(EventUnitRegion(), libNtve_gf_DifficultyValueInt(4, 4, 4, 3));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Reinforcements2_Init () {
    gt_Reinforcements2 = TriggerCreate("gt_Reinforcements2_Func");
    TriggerAddEventUnitRegion(gt_Reinforcements2, null, RegionFromId(66), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Air Assault Q
//--------------------------------------------------------------------------------------------------
bool gt_AirAssaultQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libLbty_gf_AutoRevealRegion(RegionFromId(69), RegionFromId(69), gv_p1_USER);
    TriggerExecute(gt_AirAssaultEncircleAirInit, true, false);
    TriggerExecute(gt_AirAssaultEncircleGroundInit, true, false);
    TriggerEnable(gt_AirAssaultEncircleAirAI, true);
    TriggerEnable(gt_AirAssaultEncircleGroundAI, true);
    SoundPlayAtPoint(SoundLink("Mutalisk_Attack", 9), PlayerGroupAll(), UnitGetPosition(gv_tHEONEZERATUL), 0.0, 100.0, 0.0);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul01Zeratul00071", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONEZERATUL, SoundLink("TZeratul01Zeratul00071", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AirAssaultQ_Init () {
    gt_AirAssaultQ = TriggerCreate("gt_AirAssaultQ_Func");
    TriggerAddEventUnitRegion(gt_AirAssaultQ, null, RegionFromId(48), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Air Assault Encircle Air Init
//--------------------------------------------------------------------------------------------------
bool gt_AirAssaultEncircleAirInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_real;
    fixed lv_minWrap;
    fixed lv_maxWrap;
    fixed lv_minSpeed;
    fixed lv_maxSpeed;

    // Automatic Variable Declarations
    const int autoEB2C100A_n = 2;
    int autoEB2C100A_i;
    const int auto7678C96E_n = 2;
    int auto7678C96E_i;
    const int auto1999A319_n = 3;
    int auto1999A319_i;
    const int autoB5447CAE_n = 3;
    int autoB5447CAE_i;
    const int autoFACC73F4_n = 2;
    int autoFACC73F4_i;
    const int auto11F192A4_n = 2;
    int auto11F192A4_i;
    const int auto077D14E9_n = 1;
    int auto077D14E9_i;
    const int autoD3D41774_n = 1;
    int autoD3D41774_i;
    const int autoFCF59363_n = 1;
    int autoFCF59363_i;

    // Variable Initialization
    lv_minWrap = 1.5;
    lv_maxWrap = 7.0;
    lv_minSpeed = 0.9;
    lv_maxSpeed = 1.3;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ZergEncircleLoopingSounds, true, false);
    for (autoEB2C100A_i = 1; autoEB2C100A_i <= autoEB2C100A_n; autoEB2C100A_i += 1) {
        lv_real = libNtve_gf_RandomAngle();
        libNtve_gf_UnitCreateFacingPoint(1, "Scourge", 0, gv_p3_ZERG, PointWithOffsetPolar(PointFromId(548), RandomFixed(15.0, 25.0), lv_real), PointFromId(548));
        UnitSetCustomValue(UnitLastCreated(), 0, lv_real);
        UnitSetCustomValue(UnitLastCreated(), 1, RandomFixed(lv_minWrap, lv_maxWrap));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(lv_minSpeed, lv_maxSpeed)));
        UnitGroupAdd(gv_zergEncircleGroupLeft, UnitLastCreated());
    }
    for (auto7678C96E_i = 1; auto7678C96E_i <= auto7678C96E_n; auto7678C96E_i += 1) {
        lv_real = libNtve_gf_RandomAngle();
        libNtve_gf_UnitCreateFacingPoint(1, "Scourge", 0, gv_p3_ZERG, PointWithOffsetPolar(PointFromId(548), RandomFixed(15.0, 25.0), lv_real), PointFromId(548));
        UnitSetCustomValue(UnitLastCreated(), 0, lv_real);
        UnitSetCustomValue(UnitLastCreated(), 1, RandomFixed(lv_minWrap, lv_maxWrap));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(lv_minSpeed, lv_maxSpeed)));
        UnitGroupAdd(gv_zergEncircleGroupRight, UnitLastCreated());
    }
    Wait(4.0, c_timeGame);
    for (auto1999A319_i = 1; auto1999A319_i <= auto1999A319_n; auto1999A319_i += 1) {
        lv_real = libNtve_gf_RandomAngle();
        libNtve_gf_UnitCreateFacingPoint(1, "Scourge", 0, gv_p3_ZERG, PointWithOffsetPolar(PointFromId(548), RandomFixed(15.0, 25.0), lv_real), PointFromId(548));
        UnitSetCustomValue(UnitLastCreated(), 0, lv_real);
        UnitSetCustomValue(UnitLastCreated(), 1, RandomFixed(lv_minWrap, lv_maxWrap));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(lv_minSpeed, lv_maxSpeed)));
        UnitGroupAdd(gv_zergEncircleGroupLeft, UnitLastCreated());
    }
    for (autoB5447CAE_i = 1; autoB5447CAE_i <= autoB5447CAE_n; autoB5447CAE_i += 1) {
        lv_real = libNtve_gf_RandomAngle();
        libNtve_gf_UnitCreateFacingPoint(1, "Scourge", 0, gv_p3_ZERG, PointWithOffsetPolar(PointFromId(548), RandomFixed(15.0, 25.0), lv_real), PointFromId(548));
        UnitSetCustomValue(UnitLastCreated(), 0, lv_real);
        UnitSetCustomValue(UnitLastCreated(), 1, RandomFixed(lv_minWrap, lv_maxWrap));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(lv_minSpeed, lv_maxSpeed)));
        UnitGroupAdd(gv_zergEncircleGroupRight, UnitLastCreated());
    }
    Wait(4.0, c_timeGame);
    for (autoFACC73F4_i = 1; autoFACC73F4_i <= autoFACC73F4_n; autoFACC73F4_i += 1) {
        lv_real = libNtve_gf_RandomAngle();
        libNtve_gf_UnitCreateFacingPoint(1, "Scourge", 0, gv_p3_ZERG, PointWithOffsetPolar(PointFromId(548), RandomFixed(15.0, 25.0), lv_real), PointFromId(548));
        UnitSetCustomValue(UnitLastCreated(), 0, lv_real);
        UnitSetCustomValue(UnitLastCreated(), 1, RandomFixed(lv_minWrap, lv_maxWrap));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(lv_minSpeed, lv_maxSpeed)));
        UnitGroupAdd(gv_zergEncircleGroupLeft, UnitLastCreated());
    }
    for (auto11F192A4_i = 1; auto11F192A4_i <= auto11F192A4_n; auto11F192A4_i += 1) {
        lv_real = libNtve_gf_RandomAngle();
        libNtve_gf_UnitCreateFacingPoint(1, "Scourge", 0, gv_p3_ZERG, PointWithOffsetPolar(PointFromId(548), RandomFixed(15.0, 25.0), lv_real), PointFromId(548));
        UnitSetCustomValue(UnitLastCreated(), 0, lv_real);
        UnitSetCustomValue(UnitLastCreated(), 1, RandomFixed(lv_minWrap, lv_maxWrap));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(lv_minSpeed, lv_maxSpeed)));
        UnitGroupAdd(gv_zergEncircleGroupRight, UnitLastCreated());
    }
    for (auto077D14E9_i = 1; auto077D14E9_i <= auto077D14E9_n; auto077D14E9_i += 1) {
        lv_real = libNtve_gf_RandomAngle();
        libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, gv_p3_ZERG, PointWithOffsetPolar(PointFromId(548), RandomFixed(15.0, 25.0), lv_real), PointFromId(548));
        UnitSetCustomValue(UnitLastCreated(), 0, lv_real);
        UnitSetCustomValue(UnitLastCreated(), 1, RandomFixed(lv_minWrap, 4.5));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(lv_minSpeed, lv_maxSpeed)));
        UnitGroupAdd(gv_zergEncircleGroupLeft, UnitLastCreated());
    }
    Wait(3.0, c_timeGame);
    for (autoD3D41774_i = 1; autoD3D41774_i <= autoD3D41774_n; autoD3D41774_i += 1) {
        lv_real = libNtve_gf_RandomAngle();
        libNtve_gf_UnitCreateFacingPoint(1, "Overseer", 0, gv_p3_ZERG, PointWithOffsetPolar(PointFromId(548), RandomFixed(15.0, 25.0), lv_real), PointFromId(548));
        gv_airAssaultOverseer = UnitLastCreated();
        UnitSetCustomValue(UnitLastCreated(), 0, lv_real);
        UnitSetCustomValue(UnitLastCreated(), 1, RandomFixed(lv_minWrap, 4.5));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(lv_minSpeed, lv_maxSpeed)));
        UnitGroupAdd(gv_zergEncircleGroupLeft, UnitLastCreated());
    }
    for (autoFCF59363_i = 1; autoFCF59363_i <= autoFCF59363_n; autoFCF59363_i += 1) {
        lv_real = libNtve_gf_RandomAngle();
        libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, gv_p3_ZERG, PointWithOffsetPolar(PointFromId(548), RandomFixed(15.0, 25.0), lv_real), PointFromId(548));
        UnitSetCustomValue(UnitLastCreated(), 0, lv_real);
        UnitSetCustomValue(UnitLastCreated(), 1, RandomFixed(lv_minWrap, 4.5));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(lv_minSpeed, lv_maxSpeed)));
        UnitGroupAdd(gv_zergEncircleGroupRight, UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AirAssaultEncircleAirInit_Init () {
    gt_AirAssaultEncircleAirInit = TriggerCreate("gt_AirAssaultEncircleAirInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Air Assault Encircle Ground Init
//--------------------------------------------------------------------------------------------------
bool gt_AirAssaultEncircleGroundInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_real;
    fixed lv_minWrap;
    fixed lv_maxWrap;
    fixed lv_minSpeed;
    fixed lv_maxSpeed;

    // Automatic Variable Declarations
    unitgroup auto3504B866_g;
    int auto3504B866_u;
    unit auto3504B866_var;

    // Variable Initialization
    lv_minWrap = 1.5;
    lv_maxWrap = 7.0;
    lv_minSpeed = 0.9;
    lv_maxSpeed = 1.3;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_AirAssaultEncircleGroundAI, true);
    Wait(6.0, c_timeGame);
    if ((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionFromId(95), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionFromId(96), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overlord", 0, gv_p3_ZERG, PointFromId(780));
        gv_airAssaultOverlord = UnitLastCreated();
        UnitCargoCreate(UnitLastCreated(), "Roach", libNtve_gf_DifficultyValueInt(2, 2, 3, 4));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitCargoLastCreatedGroup(), gv_airAssaultGroundUnits);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("OverlordTransport", 2), PointFromId(421)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(780)), c_orderQueueAddToEnd);
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overlord", 0, gv_p3_ZERG, PointFromId(784));
        gv_airAssaultOverlord = UnitLastCreated();
        UnitCargoCreate(UnitLastCreated(), "Roach", libNtve_gf_DifficultyValueInt(2, 2, 3, 4));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitCargoLastCreatedGroup(), gv_airAssaultGroundUnits);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("OverlordTransport", 2), PointFromId(547)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(784)), c_orderQueueAddToEnd);
    }
    Wait(8.0, c_timeGame);
    if ((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionFromId(95), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionFromId(96), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 2, 0, 0), "HydraliskBurrowed", 0, gv_p3_ZERG, PointFromId(29));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_airAssaultGroundUnits);
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "UltraliskBurrowed", 0, gv_p3_ZERG, PointFromId(29));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_airAssaultGroundUnits);
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 2, 0, 0), "HydraliskBurrowed", 0, gv_p3_ZERG, PointFromId(400));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_airAssaultGroundUnits);
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "UltraliskBurrowed", 0, gv_p3_ZERG, PointFromId(400));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_airAssaultGroundUnits);
    }
    auto3504B866_g = gv_airAssaultGroundUnits;
    auto3504B866_u = UnitGroupCount(auto3504B866_g, c_unitCountAll);
    for (;; auto3504B866_u -= 1) {
        auto3504B866_var = UnitGroupUnitFromEnd(auto3504B866_g, auto3504B866_u);
        if (auto3504B866_var == null) { break; }
        UnitIssueOrder(auto3504B866_var, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
    }
    TriggerExecute(gt_AirAssaultEncircleEndGivePlayerReinforcements, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AirAssaultEncircleGroundInit_Init () {
    gt_AirAssaultEncircleGroundInit = TriggerCreate("gt_AirAssaultEncircleGroundInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Air Assault Encircle Air AI
//--------------------------------------------------------------------------------------------------
bool gt_AirAssaultEncircleAirAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto4DA823A6_g;
    int auto4DA823A6_u;
    unit auto4DA823A6_var;
    unitgroup autoE853CE9F_g;
    int autoE853CE9F_u;
    unit autoE853CE9F_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_RandomPercent() >= 33.0)) {
        if ((RandomInt(0, 1) == 0)) {
            lv_unit = UnitGroupRandomUnit(gv_zergEncircleGroupLeft, c_unitCountAlive);
        }
        else {
            lv_unit = UnitGroupRandomUnit(gv_zergEncircleGroupRight, c_unitCountAlive);
        }
        UnitSetCustomValue(lv_unit, 1, (2.0 + ModF((UnitGetCustomValue(lv_unit, 1) + 6.0), 12.0)));
        UnitSetPropertyFixed(lv_unit, c_unitPropMovementSpeed, (UnitGetPropertyFixed(lv_unit, c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(0.9, 1.15)));
    }

    if ((libNtve_gf_RandomPercent() >= 96.0)) {
        if ((RandomInt(0, 1) == 0)) {
            lv_unit = UnitGroupRandomUnit(gv_zergEncircleGroupLeft, c_unitCountAlive);
            UnitGroupRemove(gv_zergEncircleGroupLeft, lv_unit);
            UnitGroupAdd(gv_zergEncircleGroupRight, lv_unit);
        }
        else {
            lv_unit = UnitGroupRandomUnit(gv_zergEncircleGroupRight, c_unitCountAlive);
            UnitGroupRemove(gv_zergEncircleGroupRight, lv_unit);
            UnitGroupAdd(gv_zergEncircleGroupLeft, lv_unit);
        }
    }

    auto4DA823A6_g = gv_zergEncircleGroupLeft;
    auto4DA823A6_u = UnitGroupCount(auto4DA823A6_g, c_unitCountAll);
    for (;; auto4DA823A6_u -= 1) {
        auto4DA823A6_var = UnitGroupUnitFromEnd(auto4DA823A6_g, auto4DA823A6_u);
        if (auto4DA823A6_var == null) { break; }
        UnitIssueOrder(auto4DA823A6_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(PointWithOffset(PointFromId(548), 0.0, -1.5), RandomFixed((UnitGetCustomValue(auto4DA823A6_var, 1) + 0.2), (UnitGetCustomValue(auto4DA823A6_var, 1) - 0.2)), (UnitGetCustomValue(auto4DA823A6_var, 0) + 30.0))), c_orderQueueReplace);
        UnitSetCustomValue(auto4DA823A6_var, 0, AngleBetweenPoints(PointWithOffset(PointFromId(548), 0.0, -1.5), UnitGetPosition(auto4DA823A6_var)));
    }
    autoE853CE9F_g = gv_zergEncircleGroupRight;
    autoE853CE9F_u = UnitGroupCount(autoE853CE9F_g, c_unitCountAll);
    for (;; autoE853CE9F_u -= 1) {
        autoE853CE9F_var = UnitGroupUnitFromEnd(autoE853CE9F_g, autoE853CE9F_u);
        if (autoE853CE9F_var == null) { break; }
        UnitIssueOrder(autoE853CE9F_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(PointWithOffset(PointFromId(548), 0.0, -1.5), RandomFixed((UnitGetCustomValue(autoE853CE9F_var, 1) + 0.2), (UnitGetCustomValue(autoE853CE9F_var, 1) - 0.2)), (UnitGetCustomValue(autoE853CE9F_var, 0) - 30.0))), c_orderQueueReplace);
        UnitSetCustomValue(autoE853CE9F_var, 0, AngleBetweenPoints(PointWithOffset(PointFromId(548), 0.0, -1.5), UnitGetPosition(autoE853CE9F_var)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AirAssaultEncircleAirAI_Init () {
    gt_AirAssaultEncircleAirAI = TriggerCreate("gt_AirAssaultEncircleAirAI_Func");
    TriggerEnable(gt_AirAssaultEncircleAirAI, false);
    TriggerAddEventTimePeriodic(gt_AirAssaultEncircleAirAI, 0.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Air Assault Encircle Ground AI
//--------------------------------------------------------------------------------------------------
bool gt_AirAssaultEncircleGroundAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_unitGroup;

    // Automatic Variable Declarations
    unitgroup autoB101C32F_g;
    int autoB101C32F_u;
    unit autoB101C32F_var;
    unitgroup autoA635E69B_g;
    int autoA635E69B_u;
    unit autoA635E69B_var;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unitGroup = UnitGroup(null, gv_p1_USER, RegionFromId(69), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB101C32F_g = lv_unitGroup;
    autoB101C32F_u = UnitGroupCount(autoB101C32F_g, c_unitCountAll);
    for (;; autoB101C32F_u -= 1) {
        autoB101C32F_var = UnitGroupUnitFromEnd(autoB101C32F_g, autoB101C32F_u);
        if (autoB101C32F_var == null) { break; }
        if ((libNtve_gf_UnitIsVisibleToPlayer(autoB101C32F_var, gv_p3_ZERG) == false)) {
            UnitGroupRemove(lv_unitGroup, autoB101C32F_var);
        }

    }
    if ((UnitGroupCount(lv_unitGroup, c_unitCountAlive) >= 1)) {
        autoA635E69B_g = gv_airAssaultGroundUnits;
        autoA635E69B_u = UnitGroupCount(autoA635E69B_g, c_unitCountAll);
        for (;; autoA635E69B_u -= 1) {
            autoA635E69B_var = UnitGroupUnitFromEnd(autoA635E69B_g, autoA635E69B_u);
            if (autoA635E69B_var == null) { break; }
            UnitIssueOrder(autoA635E69B_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(lv_unitGroup, c_unitCountAlive))), c_orderQueueReplace);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AirAssaultEncircleGroundAI_Init () {
    gt_AirAssaultEncircleGroundAI = TriggerCreate("gt_AirAssaultEncircleGroundAI_Func");
    TriggerEnable(gt_AirAssaultEncircleGroundAI, false);
    TriggerAddEventTimePeriodic(gt_AirAssaultEncircleGroundAI, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Air Assault Encircle End, Give Player Reinforcements
//--------------------------------------------------------------------------------------------------
bool gt_AirAssaultEncircleEndGivePlayerReinforcements_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_unitGroup;
    point lv_point;

    // Automatic Variable Declarations
    unitgroup auto6FFEBD37_g;
    int auto6FFEBD37_u;
    unit auto6FFEBD37_var;
    unitgroup auto9AD2D63A_g;
    int auto9AD2D63A_u;
    unit auto9AD2D63A_var;
    unitgroup auto28730EB2_g;
    int auto28730EB2_u;
    unit auto28730EB2_var;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((UnitGroupCount(UnitGroup(null, gv_p3_ZERG, RegionFromId(69), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(0.1, c_timeGame);
    }
    TriggerEnable(gt_AirAssaultEncircleAirAI, false);
    TriggerEnable(gt_AirAssaultEncircleGroundAI, false);
    TriggerStop(gt_ZergEncircleLoopingSounds);
    if ((UnitIsAlive(gv_airAssaultOverlord) == true)) {
        UnitGroupAdd(lv_unitGroup, gv_airAssaultOverlord);
    }

    if ((UnitIsAlive(gv_airAssaultOverseer) == true)) {
        UnitGroupAdd(lv_unitGroup, gv_airAssaultOverseer);
    }

    auto6FFEBD37_g = gv_zergEncircleGroupLeft;
    auto6FFEBD37_u = UnitGroupCount(auto6FFEBD37_g, c_unitCountAll);
    for (;; auto6FFEBD37_u -= 1) {
        auto6FFEBD37_var = UnitGroupUnitFromEnd(auto6FFEBD37_g, auto6FFEBD37_u);
        if (auto6FFEBD37_var == null) { break; }
        lv_point = PointWithOffsetPolar(UnitGetPosition(auto6FFEBD37_var), 50.0, libNtve_gf_RandomAngle());
        UnitIssueOrder(auto6FFEBD37_var, OrderTargetingPoint(AbilityCommand("attack", 0), lv_point), c_orderQueueReplace);
        UnitSetCustomValue(auto6FFEBD37_var, 0, PointGetX(lv_point));
        UnitSetCustomValue(auto6FFEBD37_var, 1, PointGetY(lv_point));
        UnitGroupRemove(gv_zergEncircleGroupLeft, auto6FFEBD37_var);
        UnitGroupAdd(lv_unitGroup, auto6FFEBD37_var);
    }
    auto9AD2D63A_g = gv_zergEncircleGroupRight;
    auto9AD2D63A_u = UnitGroupCount(auto9AD2D63A_g, c_unitCountAll);
    for (;; auto9AD2D63A_u -= 1) {
        auto9AD2D63A_var = UnitGroupUnitFromEnd(auto9AD2D63A_g, auto9AD2D63A_u);
        if (auto9AD2D63A_var == null) { break; }
        lv_point = PointWithOffsetPolar(UnitGetPosition(auto9AD2D63A_var), 50.0, libNtve_gf_RandomAngle());
        UnitIssueOrder(auto9AD2D63A_var, OrderTargetingPoint(AbilityCommand("attack", 0), lv_point), c_orderQueueReplace);
        UnitSetCustomValue(auto9AD2D63A_var, 0, PointGetX(lv_point));
        UnitSetCustomValue(auto9AD2D63A_var, 1, PointGetY(lv_point));
        UnitGroupRemove(gv_zergEncircleGroupRight, auto9AD2D63A_var);
        UnitGroupAdd(lv_unitGroup, auto9AD2D63A_var);
    }
    while (true) {
        if ((UnitGroupCount(lv_unitGroup, c_unitCountAlive) == 0)) {
            break;
        }

        auto28730EB2_g = lv_unitGroup;
        auto28730EB2_u = UnitGroupCount(auto28730EB2_g, c_unitCountAll);
        for (;; auto28730EB2_u -= 1) {
            auto28730EB2_var = UnitGroupUnitFromEnd(auto28730EB2_g, auto28730EB2_u);
            if (auto28730EB2_var == null) { break; }
            if ((libNtve_gf_UnitIsVisibleToPlayer(auto28730EB2_var, gv_p1_USER) == false)) {
                UnitRemove(auto28730EB2_var);
            }
            else {
                UnitIssueOrder(auto28730EB2_var, OrderTargetingPoint(AbilityCommand("attack", 0), Point(UnitGetCustomValue(auto28730EB2_var, 0), UnitGetCustomValue(auto28730EB2_var, 1))), c_orderQueueReplace);
            }
        }
        Wait(0.1, c_timeGame);
    }
    UIAlertClear(gv_p1_USER);
    gf_StalkerReinforcements(RegionFromId(67), 5);
    libLbty_gf_AutoRevealRegion(RegionFromId(68), RegionFromId(69), gv_p1_USER);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", PointFromId(461), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0, 270.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AirAssaultEncircleEndGivePlayerReinforcements_Init () {
    gt_AirAssaultEncircleEndGivePlayerReinforcements = TriggerCreate("gt_AirAssaultEncircleEndGivePlayerReinforcements_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery Discovered 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_HatcheryDiscovered1Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_hatcheryping;

    // Automatic Variable Declarations
    unitgroup autoC2AE3C4B_g;
    int autoC2AE3C4B_u;
    unit autoC2AE3C4B_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ActivatePatrolAIForUnit(UnitFromId(58), PointFromId(59), 5.0);
    gf_ActivatePatrolAIForUnit(UnitFromId(391), PointFromId(113), 5.0);
    gf_ActivatePatrolAIForUnit(UnitFromId(1835), PointFromId(1836), 1.0);
    gf_ActivatePatrolAIForUnit(UnitFromId(1843), PointFromId(1833), 1.0);
    gf_ActivatePatrolAIForUnit(UnitFromId(1844), PointFromId(1834), 1.0);
    autoC2AE3C4B_g = gv_hatchery1Guards;
    autoC2AE3C4B_u = UnitGroupCount(autoC2AE3C4B_g, c_unitCountAll);
    for (;; autoC2AE3C4B_u -= 1) {
        autoC2AE3C4B_var = UnitGroupUnitFromEnd(autoC2AE3C4B_g, autoC2AE3C4B_u);
        if (autoC2AE3C4B_var == null) { break; }
        UnitBehaviorAdd(autoC2AE3C4B_var, "InstallationZergWander", autoC2AE3C4B_var, 1);
    }
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/12A43ADF"), null, UnitGetPosition(UnitFromId(28)));
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectProtoss", UnitGetPosition(UnitFromId(28)));
    lv_hatcheryping = libNtve_gf_ActorLastCreated();
    // Transmission - SoundLink("TZeratul01Zeratul00031", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONEZERATUL, SoundLink("TZeratul01Zeratul00031", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    Wait(4.0, c_timeGame);
    libNtve_gf_KillModel(lv_hatcheryping);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HatcheryDiscovered1Q_Init () {
    gt_HatcheryDiscovered1Q = TriggerCreate("gt_HatcheryDiscovered1Q_Func");
    TriggerAddEventUnitRegion(gt_HatcheryDiscovered1Q, null, RegionFromId(19), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Shrine 2 Reached Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveShrine2ReachedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6244EC10_g;
    int auto6244EC10_u;
    unit auto6244EC10_var;

    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_tHEONEZERATUL))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Shrine02, true, false);
    UIAlertClear(gv_p1_USER);
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/8A457DB9"), null, UnitGetPosition(UnitFromId(7)));
    libNtve_gf_MakeUnitUncommandable(gv_tHEONEZERATUL, true);
    libNtve_gf_MakeUnitInvulnerable(gv_tHEONEZERATUL, true);
    UnitIssueOrder(gv_tHEONEZERATUL, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    gv_statZeratulLifeRemaining += (UnitGetPropertyFixed(gv_tHEONEZERATUL, c_unitPropLife, c_unitPropNormal) - UnitGetPropertyFixed(gv_tHEONEZERATUL, c_unitPropLife, c_unitPropCurrent));
    UnitSetState(gv_tHEONEZERATUL, c_unitStateSelectable, false);
    UnitSetState(UnitFromId(7), c_unitStateSelectable, false);
    UnitSelect(gv_tHEONEZERATUL, gv_p1_USER, false);
    UnitIssueOrder(gv_tHEONEZERATUL, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1750)), c_orderQueueReplace);
    Wait(0.75, c_timeGame);
    SoundPlay(SoundLink("UI_DoorMenu_Popup", 2), PlayerGroupAll(), 100.0, 0.0);
    UnitKill(UnitFromId(1406));
    TriggerExecute(gt_ObjectiveShrinesUpdate, true, false);
    PingDestroy(gv_tHEONEPING);
    libNtve_gf_MakeUnitFacePoint(gv_tHEONEZERATUL, UnitGetPosition(UnitFromId(7)), 0.5);
    Wait(0.75, c_timeGame);
    UnitBehaviorAdd(gv_tHEONEZERATUL, "Read", gv_tHEONEZERATUL, 1);
    Wait(0.5, c_timeGame);
    UnitSetState(gv_tHEONEZERATUL, c_unitStateMoveSuppressed, false);
    Wait(0.5, c_timeGame);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TZeratul01MusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_AnimateShrine(UnitFromId(7));
    Wait(2.0, c_timeGame);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 10.0, 0.0);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul01Zeratul00027", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONEZERATUL, SoundLink("TZeratul01Zeratul00027", 0), c_transmissionDurationAdd, 0.0, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 100.0, 0.0);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    UnitBehaviorRemove(gv_tHEONEZERATUL, "Read", 1);
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/E11087AB"));
    Wait(0.75, c_timeGame);
    CameraPan(gv_p1_USER, PointWithOffset(PointFromId(1751), 0.0, 0.0), 1.5, -1, 10, false);
    VisRevealerCreate(1, RegionFromId(16));
    gv_tHEONEREVEALER = VisRevealerLastCreated();
    UnitSetState(gv_tHEONEZERATUL, c_unitStateMoveSuppressed, true);
    libNtve_gf_MakeUnitUncommandable(gv_tHEONEZERATUL, false);
    libNtve_gf_MakeUnitInvulnerable(gv_tHEONEZERATUL, false);
    UnitSetState(gv_tHEONEZERATUL, c_unitStateSelectable, true);
    UnitSetState(UnitFromId(7), c_unitStateSelectable, true);
    UnitSelect(gv_tHEONEZERATUL, gv_p1_USER, true);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitFromId(74)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    gv_pingThirdShrine = PingLastCreated();
    PingSetTooltip(gv_pingThirdShrine, StringExternal("Param/Value/CB89CBAC"));
    libNtve_gf_ShareVisionofUnit(UnitFromId(74), true, gv_p1_USER);
    VisRevealArea(1, RegionFromId(102), 0.1, false);
    UnitIssueOrder(UnitFromId(692), Order(AbilityCommand("TempleDoorDownURDL", 0)), c_orderQueueReplace);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitFromId(692)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0, 270.0);
    UIAlertPoint("Trigger", 1, StringToText(""), null, UnitGetPosition(UnitFromId(692)));
    gf_RefreshPlayersHPandShields();
    auto6244EC10_g = UnitGroup("PathingBlocker2x2", c_playerAny, RegionFromId(93), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6244EC10_u = UnitGroupCount(auto6244EC10_g, c_unitCountAll);
    for (;; auto6244EC10_u -= 1) {
        auto6244EC10_var = UnitGroupUnitFromEnd(auto6244EC10_g, auto6244EC10_u);
        if (auto6244EC10_var == null) { break; }
        UnitRemove(auto6244EC10_var);
    }
    TriggerEnable(gt_KerriganTaunt2Q, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveShrine2ReachedQ_Init () {
    gt_ObjectiveShrine2ReachedQ = TriggerCreate("gt_ObjectiveShrine2ReachedQ_Func");
    TriggerEnable(gt_ObjectiveShrine2ReachedQ, false);
    TriggerAddEventUnitRegion(gt_ObjectiveShrine2ReachedQ, null, RegionFromId(42), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reinforcements 4
//--------------------------------------------------------------------------------------------------
bool gt_Reinforcements4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_StalkerReinforcements(EventUnitRegion(), libNtve_gf_DifficultyValueInt(5, 5, 5, 4));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Reinforcements4_Init () {
    gt_Reinforcements4 = TriggerCreate("gt_Reinforcements4_Func");
    TriggerAddEventUnitRegion(gt_Reinforcements4, null, RegionFromId(5), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Taunt 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_KerriganTaunt2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    // Transmission - SoundLink("TZeratul01Kerrigan00035", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul01Kerrigan00035", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TZeratul01Zeratul00034", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONEZERATUL, SoundLink("TZeratul01Zeratul00034", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganTaunt2Q_Init () {
    gt_KerriganTaunt2Q = TriggerCreate("gt_KerriganTaunt2Q_Func");
    TriggerEnable(gt_KerriganTaunt2Q, false);
    TriggerAddEventUnitRegion(gt_KerriganTaunt2Q, null, RegionFromId(64), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Heavy Hitter Puzzle Init Q
//--------------------------------------------------------------------------------------------------
bool gt_HeavyHitterPuzzleInitQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ActivatePatrolAIForUnit(UnitFromId(874), PointFromId(870), 5.0);
    gf_ActivatePatrolAIForUnit(UnitFromId(873), PointFromId(254), 5.0);
    gf_ActivatePatrolAIForUnit(UnitFromId(875), PointFromId(399), 5.0);
    gf_ActivatePatrolAIForUnit(UnitFromId(420), PointFromId(549), 5.0);
    gf_ActivatePatrolAIForUnit(UnitFromId(324), PointFromId(704), 5.0);
    TriggerExecute(gt_HeavyHitterPuzzleBurrowedUltraliskInit, true, false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul01Zeratul00023", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONEZERATUL, SoundLink("TZeratul01Zeratul00023", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TZeratul01Zeratul00073", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONEZERATUL, SoundLink("TZeratul01Zeratul00073", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeavyHitterPuzzleInitQ_Init () {
    gt_HeavyHitterPuzzleInitQ = TriggerCreate("gt_HeavyHitterPuzzleInitQ_Func");
    TriggerAddEventUnitRegion(gt_HeavyHitterPuzzleInitQ, null, RegionFromId(17), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Heavy Hitter Puzzle Burrowed Ultralisk Init
//--------------------------------------------------------------------------------------------------
bool gt_HeavyHitterPuzzleBurrowedUltraliskInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(UnitFromId(1817), Order(AbilityCommand("BurrowUltraliskDown", 0)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(UnitFromId(1817), OrderSetAutoCast(AbilityCommand("BurrowUltraliskUp", 0), true), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeavyHitterPuzzleBurrowedUltraliskInit_Init () {
    gt_HeavyHitterPuzzleBurrowedUltraliskInit = TriggerCreate("gt_HeavyHitterPuzzleBurrowedUltraliskInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Baneling Puzzle Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_BanelingPuzzleIntroQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_actor;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1691)), c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    SoundPlayAtPoint(SoundLink("Uni_RockExplosionLarge", 1), PlayerGroupAll(), PointFromId(472), 16.0, 100.0, 0.0);
    TriggerExecute(gt_BanelingPuzzleBanelingSlowUnburrow, true, false);
    libNtve_gf_AttachModelToUnit(UnitFromId(800), "BriefingUnitSelectProtoss", "Ref_Head");
    lv_actor = libNtve_gf_ActorLastCreated();
    CameraPan(gv_p1_USER, PointWithOffset(PointFromId(626), 0.0, 0.0), 2.0, -1, 10, true);
    UIAlertClear(gv_p1_USER);
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/63A7E1EE"), null, PointFromId(337));
    if ((UnitGroupCount(UnitGroup("Stalker", gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TZeratul01Zeratul00072", 0)
        libCamp_gf_SendTransmissionCampaign(gv_tHEONEZERATUL, SoundLink("TZeratul01Zeratul00072", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }

    libNtve_gf_KillModel(lv_actor);
    TriggerEnable(gt_BanelingPuzzleBanelingAI, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BanelingPuzzleIntroQ_Init () {
    gt_BanelingPuzzleIntroQ = TriggerCreate("gt_BanelingPuzzleIntroQ_Func");
    TriggerAddEventUnitRegion(gt_BanelingPuzzleIntroQ, null, RegionFromId(21), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Baneling Puzzle Baneling Slow Unburrow
//--------------------------------------------------------------------------------------------------
bool gt_BanelingPuzzleBanelingSlowUnburrow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto76923CE9_g;
    int auto76923CE9_u;
    unit auto76923CE9_var;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto76923CE9_g = gv_banelingBullies;
    auto76923CE9_u = UnitGroupCount(auto76923CE9_g, c_unitCountAll);
    for (;; auto76923CE9_u -= 1) {
        auto76923CE9_var = UnitGroupUnitFromEnd(auto76923CE9_g, auto76923CE9_u);
        if (auto76923CE9_var == null) { break; }
        UnitIssueOrder(auto76923CE9_var, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.05, 0.15), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BanelingPuzzleBanelingSlowUnburrow_Init () {
    gt_BanelingPuzzleBanelingSlowUnburrow = TriggerCreate("gt_BanelingPuzzleBanelingSlowUnburrow_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Baneling Puzzle Baneling AI
//--------------------------------------------------------------------------------------------------
bool gt_BanelingPuzzleBanelingAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_unitGroup;

    // Automatic Variable Declarations
    unitgroup autoDEBE0FD1_g;
    int autoDEBE0FD1_u;
    unit autoDEBE0FD1_var;
    unitgroup auto5DEA0F36_g;
    int auto5DEA0F36_u;
    unit auto5DEA0F36_var;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unitGroup = UnitGroup(null, gv_p1_USER, RegionFromId(103), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDEBE0FD1_g = lv_unitGroup;
    autoDEBE0FD1_u = UnitGroupCount(autoDEBE0FD1_g, c_unitCountAll);
    for (;; autoDEBE0FD1_u -= 1) {
        autoDEBE0FD1_var = UnitGroupUnitFromEnd(autoDEBE0FD1_g, autoDEBE0FD1_u);
        if (autoDEBE0FD1_var == null) { break; }
        if ((libNtve_gf_UnitIsVisibleToPlayer(autoDEBE0FD1_var, gv_p3_ZERG) == false)) {
            UnitGroupRemove(lv_unitGroup, autoDEBE0FD1_var);
        }

    }
    auto5DEA0F36_g = gv_banelingBullies;
    auto5DEA0F36_u = UnitGroupCount(auto5DEA0F36_g, c_unitCountAll);
    for (;; auto5DEA0F36_u -= 1) {
        auto5DEA0F36_var = UnitGroupUnitFromEnd(auto5DEA0F36_g, auto5DEA0F36_u);
        if (auto5DEA0F36_var == null) { break; }
        if ((UnitGroupCount(lv_unitGroup, c_unitCountAlive) >= 1)) {
            UnitIssueOrder(auto5DEA0F36_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(lv_unitGroup, c_unitCountAlive))), c_orderQueueReplace);
        }
        else {
            if ((UnitOrder(auto5DEA0F36_var, 0) == null)) {
                UnitIssueOrder(auto5DEA0F36_var, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
                UnitIssueOrder(auto5DEA0F36_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(623)), c_orderQueueReplace);
                UnitIssueOrder(auto5DEA0F36_var, OrderTargetingPoint(AbilityCommand("move", 1), PointFromId(626)), c_orderQueueAddToEnd);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BanelingPuzzleBanelingAI_Init () {
    gt_BanelingPuzzleBanelingAI = TriggerCreate("gt_BanelingPuzzleBanelingAI_Func");
    TriggerEnable(gt_BanelingPuzzleBanelingAI, false);
    TriggerAddEventTimePeriodic(gt_BanelingPuzzleBanelingAI, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Baneling Puzzle Rock Bridge
//--------------------------------------------------------------------------------------------------
bool gt_BanelingPuzzleRockBridge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1694)), c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    SoundPlayAtPoint(SoundLink("Uni_RockExplosionLarge", 1), PlayerGroupAll(), PointFromId(751), 16.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BanelingPuzzleRockBridge_Init () {
    gt_BanelingPuzzleRockBridge = TriggerCreate("gt_BanelingPuzzleRockBridge_Func");
    TriggerAddEventUnitRegion(gt_BanelingPuzzleRockBridge, null, RegionFromId(20), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery Discovered 2 - Ultralisks Q
//--------------------------------------------------------------------------------------------------
bool gt_HatcheryDiscovered2UltralisksQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_hatcheryping;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_DyingUltralisksHatchery2, true);
    TriggerExecute(gt_Hatchery2AI, true, false);
    libNtve_gf_ShowHideUnit(UnitFromId(336), true);
    gf_ActivatePatrolAIForUnit(UnitFromId(336), PointFromId(229), 5.0);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/F3C65CBC"), null, UnitGetPosition(UnitFromId(205)));
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectProtoss", UnitGetPosition(UnitFromId(28)));
    lv_hatcheryping = libNtve_gf_ActorLastCreated();
    // Transmission - SoundLink("TZeratul01Zeratul00040", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONEZERATUL, SoundLink("TZeratul01Zeratul00040", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    Wait(4.0, c_timeGame);
    libNtve_gf_KillModel(lv_hatcheryping);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HatcheryDiscovered2UltralisksQ_Init () {
    gt_HatcheryDiscovered2UltralisksQ = TriggerCreate("gt_HatcheryDiscovered2UltralisksQ_Func");
    TriggerAddEventUnitRegion(gt_HatcheryDiscovered2UltralisksQ, null, RegionFromId(13), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery 2 AI
//--------------------------------------------------------------------------------------------------
bool gt_Hatchery2AI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (!(((UnitGetPropertyFixed(UnitFromId(336), c_unitPropLifePercent, c_unitPropCurrent) <= 60.0) || (UnitGetPropertyFixed(UnitFromId(205), c_unitPropLifePercent, c_unitPropCurrent) <= 80.0)))) {
        Wait(0.1, c_timeGame);
    }
    UnitIssueOrder(UnitFromId(485), OrderSetAutoCast(AbilityCommand("BurrowZerglingUp", 0), true), c_orderQueueReplace);
    UnitBehaviorAdd(UnitFromId(485), "ScanRangeBonus", UnitFromId(485), 1);
    UnitIssueOrder(UnitFromId(503), OrderSetAutoCast(AbilityCommand("BurrowZerglingUp", 0), true), c_orderQueueReplace);
    UnitBehaviorAdd(UnitFromId(503), "ScanRangeBonus", UnitFromId(503), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hatchery2AI_Init () {
    gt_Hatchery2AI = TriggerCreate("gt_Hatchery2AI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dying Ultralisks - Hatchery 2
//--------------------------------------------------------------------------------------------------
bool gt_DyingUltralisksHatchery2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventUnit() == UnitFromId(503)) || (EventUnit() == UnitFromId(485))))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(226)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(336)) == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) <= 75.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "ZeratulStun") == false) && (UnitGroupCount(UnitGroup("Stalker", gv_p1_USER, RegionCircle(UnitGetPosition(EventUnit()), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("BurrowUltraliskDown", 0)), c_orderQueueReplace);
        while (!((libNtve_gf_UnitIsVisibleToPlayer(EventUnit(), gv_p1_USER) == false))) {
            Wait(0.1, c_timeGame);
        }
        Wait(0.5, c_timeGame);
        UnitRemove(EventUnit());
        if ((UnitIsAlive(UnitFromId(503)) == false) && (UnitIsAlive(UnitFromId(485)) == false)) {
            TriggerEnable(TriggerGetCurrent(), false);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DyingUltralisksHatchery2_Init () {
    gt_DyingUltralisksHatchery2 = TriggerCreate("gt_DyingUltralisksHatchery2_Func");
    TriggerEnable(gt_DyingUltralisksHatchery2, false);
    TriggerAddEventUnitDamaged(gt_DyingUltralisksHatchery2, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ambush Init
//--------------------------------------------------------------------------------------------------
bool gt_AmbushInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB21E2610_g;
    int autoB21E2610_u;
    unit autoB21E2610_var;

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ActivatePatrolAIForUnit(UnitFromId(559), PointFromId(219), 5.0);
    while (!((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionFromId(76), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
        Wait(0.1, c_timeGame);
    }
    autoB21E2610_g = UnitGroup(null, gv_p3_ZERG, RegionFromId(99), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB21E2610_u = UnitGroupCount(autoB21E2610_g, c_unitCountAll);
    for (;; autoB21E2610_u -= 1) {
        autoB21E2610_var = UnitGroupUnitFromEnd(autoB21E2610_g, autoB21E2610_u);
        if (autoB21E2610_var == null) { break; }
        UnitIssueOrder(autoB21E2610_var, OrderSetAutoCast(AbilityCommand("BurrowZerglingUp", 0), true), c_orderQueueReplace);
    }
    libNtve_gf_ShowHideUnit(UnitFromId(1819), true);
    libNtve_gf_ShowHideUnit(UnitFromId(1818), true);
    libNtve_gf_PauseUnit(UnitFromId(1819), false);
    libNtve_gf_PauseUnit(UnitFromId(1818), false);
    UnitIssueOrder(UnitFromId(1819), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1818), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
    Wait(1.5, c_timeGame);
    UnitIssueOrder(UnitFromId(1819), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1820)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1818), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1821)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmbushInit_Init () {
    gt_AmbushInit = TriggerCreate("gt_AmbushInit_Func");
    TriggerAddEventUnitRegion(gt_AmbushInit, null, RegionFromId(99), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Crawlers
//--------------------------------------------------------------------------------------------------
bool gt_Crawlers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_CrawlersQ, true, false);
    TriggerEnable(gt_CrawlersDestroyedQ, true);
    gf_ActivatePatrolAIForUnit(UnitFromId(397), PointFromId(405), 5.0);
    while (true) {
        UnitIssueOrder(UnitFromId(668), OrderTargetingPoint(AbilityCommand("SporeCrawlerRoot", 0), PointFromId(661)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(684), OrderTargetingPoint(AbilityCommand("SpineCrawlerRoot", 0), PointFromId(685)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(665), OrderTargetingPoint(AbilityCommand("SpineCrawlerRoot", 0), PointFromId(677)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(662), OrderTargetingPoint(AbilityCommand("SpineCrawlerRoot", 0), PointFromId(676)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(663), OrderTargetingPoint(AbilityCommand("SpineCrawlerRoot", 0), PointFromId(682)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(667), OrderTargetingPoint(AbilityCommand("SpineCrawlerRoot", 0), PointFromId(678)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(669), OrderTargetingPoint(AbilityCommand("SpineCrawlerRoot", 0), PointFromId(681)), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Crawlers_Init () {
    gt_Crawlers = TriggerCreate("gt_Crawlers_Func");
    TriggerAddEventUnitRegion(gt_Crawlers, null, RegionFromId(40), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Crawlers Q
//--------------------------------------------------------------------------------------------------
bool gt_CrawlersQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul01Zeratul00015", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONEZERATUL, SoundLink("TZeratul01Zeratul00015", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CrawlersQ_Init () {
    gt_CrawlersQ = TriggerCreate("gt_CrawlersQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Crawlers Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_CrawlersDestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_crawlers, c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_Crawlers);
    VisRevealArea(gv_p1_USER, RegionFromId(38), 0.1, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(110), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 5.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/17E8EF5D"));
    gv_tHEONEPING = PingLastCreated();
    if ((UnitGroupCount(UnitGroup("Stalker", gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TZeratul01Stalker00067", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul01Stalker00067", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CrawlersDestroyedQ_Init () {
    gt_CrawlersDestroyedQ = TriggerCreate("gt_CrawlersDestroyedQ_Func");
    TriggerEnable(gt_CrawlersDestroyedQ, false);
    TriggerAddEventUnitDied(gt_CrawlersDestroyedQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Meet Karass
//--------------------------------------------------------------------------------------------------
bool gt_MeetKarass_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_CinematicKarassMidQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MeetKarass_Init () {
    gt_MeetKarass = TriggerCreate("gt_MeetKarass_Func");
    TriggerAddEventUnitRegion(gt_MeetKarass, null, RegionFromId(37), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rumble Init
//--------------------------------------------------------------------------------------------------
bool gt_RumbleInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_timer;

    // Automatic Variable Declarations
    unitgroup auto903D6B9F_g;
    int auto903D6B9F_u;
    unit auto903D6B9F_var;

    // Variable Initialization
    lv_timer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto903D6B9F_g = gv_karassZealots;
    auto903D6B9F_u = UnitGroupCount(auto903D6B9F_g, c_unitCountAll);
    for (;; auto903D6B9F_u -= 1) {
        auto903D6B9F_var = UnitGroupUnitFromEnd(auto903D6B9F_g, auto903D6B9F_u);
        if (auto903D6B9F_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(auto903D6B9F_var, true, gv_p1_USER);
    }
    libNtve_gf_ShareVisionofUnit(gv_tHEONEKARASS, true, gv_p1_USER);
    gf_StalkerReinforcements(RegionFromId(77), libNtve_gf_DifficultyValueInt(6, 6, 6, 5));
    TriggerEnable(gt_RumbleFinish, true);
    TriggerEnable(gt_StunnedUltraliskQ, true);
    TriggerEnable(gt_AntiAirRequestQ, true);
    TriggerExecute(gt_RumbleAiurProtossAIPush1, true, false);
    TriggerEnable(gt_ZeratulsTheOnlyOneAlive, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RumbleInit_Init () {
    gt_RumbleInit = TriggerCreate("gt_RumbleInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rumble Aiur Protoss AI - Push 1
//--------------------------------------------------------------------------------------------------
bool gt_RumbleAiurProtossAIPush1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_timer;

    // Automatic Variable Declarations
    unitgroup auto08FB9AB3_g;
    int auto08FB9AB3_u;
    unit auto08FB9AB3_var;
    unitgroup auto31F57EB4_g;
    int auto31F57EB4_u;
    unit auto31F57EB4_var;

    // Variable Initialization
    lv_timer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_timer, 10.0, false, c_timeGame);
    while (!(((TimerGetElapsed(lv_timer) >= 5.0) || (UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionFromId(74), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)))) {
        Wait(0.1, c_timeGame);
    }
    UnitGroupIssueOrder(gv_karassZealots, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(488)), c_orderQueueReplace);
    UnitGroupIssueOrder(gv_rumbleVanguard, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(127))), c_orderQueueReplace);
    UnitIssueOrder(gv_tHEONEKARASS, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(488)), c_orderQueueReplace);
    while (!((UnitGroupCount(gv_rumbleVanguard, c_unitCountAlive) <= 8))) {
        Wait(0.1, c_timeGame);
    }
    auto08FB9AB3_g = gv_rumbleZerglingFlank1;
    auto08FB9AB3_u = UnitGroupCount(auto08FB9AB3_g, c_unitCountAll);
    for (;; auto08FB9AB3_u -= 1) {
        auto08FB9AB3_var = UnitGroupUnitFromEnd(auto08FB9AB3_g, auto08FB9AB3_u);
        if (auto08FB9AB3_var == null) { break; }
        UnitIssueOrder(auto08FB9AB3_var, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
    }
    TriggerExecute(gt_KarassPsiStormTarget01, true, false);
    while (!((UnitGroupCount(gv_rumbleZerglingFlank1, c_unitCountAlive) <= 8))) {
        Wait(0.1, c_timeGame);
    }
    auto31F57EB4_g = gv_rumbleZerglingFlank2;
    auto31F57EB4_u = UnitGroupCount(auto31F57EB4_g, c_unitCountAll);
    for (;; auto31F57EB4_u -= 1) {
        auto31F57EB4_var = UnitGroupUnitFromEnd(auto31F57EB4_g, auto31F57EB4_u);
        if (auto31F57EB4_var == null) { break; }
        UnitIssueOrder(auto31F57EB4_var, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
    }
    while (!((UnitGroupCount(gv_rumbleVanguardAll, c_unitCountAlive) == 0))) {
        Wait(0.1, c_timeGame);
    }
    TriggerExecute(gt_RumbleAiurProtossAIPush2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RumbleAiurProtossAIPush1_Init () {
    gt_RumbleAiurProtossAIPush1 = TriggerCreate("gt_RumbleAiurProtossAIPush1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rumble Aiur Protoss AI - Push 2
//--------------------------------------------------------------------------------------------------
bool gt_RumbleAiurProtossAIPush2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_timer, 6.0, false, c_timeGame);
    while (!(((TimerGetElapsed(lv_timer) >= 3.0)))) {
        Wait(0.1, c_timeGame);
    }
    UnitIssueOrder(gv_tHEONEKARASS, OrderTargetingPoint(AbilityCommand("KarassPlasmaSurge", 0), PointFromId(488)), c_orderQueueReplace);
    while (!(((TimerGetElapsed(lv_timer) >= 5.0) || (UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)))) {
        Wait(0.1, c_timeGame);
    }
    UnitGroupIssueOrder(gv_karassZealots, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(462)), c_orderQueueReplace);
    UnitIssueOrder(gv_tHEONEKARASS, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(462)), c_orderQueueReplace);
    while (!((UnitGroupCount(gv_rumbleMidguard, c_unitCountAlive) <= 1))) {
        Wait(0.1, c_timeGame);
    }
    TriggerExecute(gt_RumbleAiurProtossAIPush3, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RumbleAiurProtossAIPush2_Init () {
    gt_RumbleAiurProtossAIPush2 = TriggerCreate("gt_RumbleAiurProtossAIPush2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rumble Aiur Protoss AI - Push 3
//--------------------------------------------------------------------------------------------------
bool gt_RumbleAiurProtossAIPush3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupIssueOrder(gv_karassZealots, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(786)), c_orderQueueReplace);
    UnitIssueOrder(gv_tHEONEKARASS, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(786)), c_orderQueueReplace);
    if ((TriggerIsEnabled(gt_Enemiesare99999Staggered) == false)) {
        TriggerExecute(gt_NydusSpawning, true, true);
    }

    while (!((UnitGroupCount(UnitGroup("NydusCanal", gv_p3_ZERG, RegionFromId(128), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(0.1, c_timeGame);
    }
    TriggerExecute(gt_NydusWormsAllDeadQ, true, false);
    while (!(((UnitIsAlive(UnitFromId(660)) == false) || (UnitIsAlive(UnitFromId(763)) == false) || (UnitIsAlive(UnitFromId(753)) == false)))) {
        Wait(0.1, c_timeGame);
    }
    if ((TriggerIsEnabled(gt_Enemiesare99999Staggered) == false)) {
        UnitIssueOrder(UnitFromId(741), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(65), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        UnitGroupAdd(gv_nydusSpawnRumble, UnitFromId(741));
        UnitGroupAdd(gv_nydusSpawnRumble, UnitFromId(65));
    }
    else {
        UnitRemove(UnitFromId(741));
        UnitRemove(UnitFromId(65));
    }
    while (!((UnitGroupCount(gv_rumbleRearguard, c_unitCountAlive) == 0))) {
        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RumbleAiurProtossAIPush3_Init () {
    gt_RumbleAiurProtossAIPush3 = TriggerCreate("gt_RumbleAiurProtossAIPush3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rumble Finish
//--------------------------------------------------------------------------------------------------
bool gt_RumbleFinish_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_rumbleVanguardAll, c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(gv_rumbleMidguard, c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(gv_rumbleRearguard, c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("NydusCanal", gv_p3_ZERG, RegionFromId(128), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShowHideUnit(UnitFromId(1563), true);
    TriggerEnable(gt_ObjectiveShrine3Reached, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RumbleFinish_Init () {
    gt_RumbleFinish = TriggerCreate("gt_RumbleFinish_Func");
    TriggerEnable(gt_RumbleFinish, false);
    TriggerAddEventUnitDied(gt_RumbleFinish, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stunned Ultralisk Q
//--------------------------------------------------------------------------------------------------
bool gt_StunnedUltraliskQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitTargetUnit()) == "Ultralisk"))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((UnitIsAlive(gv_tHEONEKARASS) == true)) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TZeratul01Zeratul00074", 0)
        libCamp_gf_SendTransmissionCampaign(gv_tHEONEZERATUL, SoundLink("TZeratul01Zeratul00074", -1), c_transmissionDurationAdd, 0.0, false);
        TransmissionWait(TransmissionLastSent(), 4.0);
        UnitIssueOrder(gv_tHEONEKARASS, OrderTargetingUnit(AbilityCommand("attack", 0), EventUnitTargetUnit()), c_orderQueueAddToFront);
        Wait(4.0, c_timeReal);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StunnedUltraliskQ_Init () {
    gt_StunnedUltraliskQ = TriggerCreate("gt_StunnedUltraliskQ_Func");
    TriggerEnable(gt_StunnedUltraliskQ, false);
    TriggerAddEventUnitAbility(gt_StunnedUltraliskQ, null, AbilityCommand("ZeratulStun", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AntiAir Request Q
//--------------------------------------------------------------------------------------------------
bool gt_AntiAirRequestQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor[11] lv_temppings;
    int lv_index;
    unitgroup lv_antiAirSearch;

    // Automatic Variable Declarations
    unitgroup autoBC7553A8_g;
    int autoBC7553A8_u;
    unit autoBC7553A8_var;
    unitgroup autoB70FDB60_g;
    int autoB70FDB60_u;
    unit autoB70FDB60_var;
    int auto841FE611_ae;
    int auto841FE611_var;

    // Variable Initialization
    lv_antiAirSearch = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Zealot"))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_antiAirSearch = UnitGroup("Zealot", gv_p2_ALLIED, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBC7553A8_g = gv_rumbleFlyers;
    autoBC7553A8_u = UnitGroupCount(autoBC7553A8_g, c_unitCountAll);
    for (;; autoBC7553A8_u -= 1) {
        autoBC7553A8_var = UnitGroupUnitFromEnd(autoBC7553A8_g, autoBC7553A8_u);
        if (autoBC7553A8_var == null) { break; }
        UnitIssueOrder(autoBC7553A8_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1236)), c_orderQueueReplace);
        UnitIssueOrder(autoBC7553A8_var, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(lv_antiAirSearch, c_unitCountAlive)), c_orderQueueAddToEnd);
        UnitIssueOrder(autoBC7553A8_var, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(lv_antiAirSearch, c_unitCountAlive)), c_orderQueueAddToEnd);
        UnitIssueOrder(autoBC7553A8_var, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(lv_antiAirSearch, c_unitCountAlive)), c_orderQueueAddToEnd);
        UnitIssueOrder(autoBC7553A8_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(127))), c_orderQueueAddToEnd);
    }
    if ((UnitIsAlive(gv_tHEONEKARASS) == true)) {
        TriggerExecute(gt_KarassPsiStormTarget02, true, false);
    }

    TriggerQueueEnter();
    if ((UnitGroupCount(UnitGroup("Stalker", gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) && (UnitIsAlive(gv_tHEONEKARASS) == true)) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TZeratul01Karass00075", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul01Karass00075", -1), c_transmissionDurationAdd, 0.0, false);
        TransmissionWait(TransmissionLastSent(), 3.0);
        autoB70FDB60_g = gv_rumbleFlyers;
        autoB70FDB60_u = UnitGroupCount(autoB70FDB60_g, c_unitCountAll);
        for (;; autoB70FDB60_u -= 1) {
            autoB70FDB60_var = UnitGroupUnitFromEnd(autoB70FDB60_g, autoB70FDB60_u);
            if (autoB70FDB60_var == null) { break; }
            libNtve_gf_AttachModelToUnit(autoB70FDB60_var, "BriefingUnitSelectProtossSmall", "Ref_Center");
            lv_temppings[lv_index] = libNtve_gf_ActorLastCreated();
            lv_index += 1;
        }
        Wait(3.0, c_timeReal);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    Wait(6.0, c_timeGame);
    auto841FE611_ae = (lv_index - 1);
    auto841FE611_var = 0;
    for ( ; auto841FE611_var <= auto841FE611_ae; auto841FE611_var += 1 ) {
        libNtve_gf_KillModel(lv_temppings[lv_index]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AntiAirRequestQ_Init () {
    gt_AntiAirRequestQ = TriggerCreate("gt_AntiAirRequestQ_Func");
    TriggerEnable(gt_AntiAirRequestQ, false);
    TriggerAddEventUnitRegion(gt_AntiAirRequestQ, null, RegionFromId(14), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Karass Killed Before Runout Q
//--------------------------------------------------------------------------------------------------
bool gt_KarassKilledBeforeRunoutQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    UIAlertPoint("Trigger", gv_p1_USER, StringToText(""), null, UnitGetPosition(EventUnit()));
    // Transmission - SoundLink("TZeratul01Karass00062", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul01Karass00062", -1), c_transmissionDurationAdd, 1.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KarassKilledBeforeRunoutQ_Init () {
    gt_KarassKilledBeforeRunoutQ = TriggerCreate("gt_KarassKilledBeforeRunoutQ_Func");
    TriggerAddEventUnitDied(gt_KarassKilledBeforeRunoutQ, UnitRefFromVariable("gv_tHEONEKARASS"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Karass Psi-Storm Target 01
//--------------------------------------------------------------------------------------------------
bool gt_KarassPsiStormTarget01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(gv_tHEONEKARASS, OrderTargetingPoint(AbilityCommand("KarassPsiStorm", 0), PointFromId(182)), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KarassPsiStormTarget01_Init () {
    gt_KarassPsiStormTarget01 = TriggerCreate("gt_KarassPsiStormTarget01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Karass Psi-Storm Target 02
//--------------------------------------------------------------------------------------------------
bool gt_KarassPsiStormTarget02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(gv_tHEONEKARASS, OrderTargetingPoint(AbilityCommand("KarassPsiStorm", 0), PointFromId(195)), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KarassPsiStormTarget02_Init () {
    gt_KarassPsiStormTarget02 = TriggerCreate("gt_KarassPsiStormTarget02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Spawning
//--------------------------------------------------------------------------------------------------
bool gt_NydusSpawning_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnNydusWorm(RegionFromId(61), gt_NydusSpawnRumble);
    Wait(2.5, c_timeGame);
    TriggerExecute(gt_NydusSpawningQ, true, false);
    Wait(libNtve_gf_DifficultyValueFixed(3.1, 3.1, 1.9, 1.6), c_timeGame);
    gf_SpawnNydusWorm(RegionFromId(46), gt_NydusSpawnRumble);
    Wait(libNtve_gf_DifficultyValueFixed(4.4, 4.4, 3.4, 2.7), c_timeGame);
    gf_SpawnNydusWorm(RegionFromId(49), gt_NydusSpawnRumble);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        Wait(libNtve_gf_DifficultyValueFixed(2.8, 2.8, 2.2, 1.7), c_timeGame);
        gf_SpawnNydusWorm(RegionFromId(44), gt_NydusSpawnRumble);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        Wait(libNtve_gf_DifficultyValueFixed(2.6, 2.6, 2.1, 1.6), c_timeGame);
        gf_SpawnNydusWorm(RegionFromId(30), gt_NydusSpawnRumble);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusSpawning_Init () {
    gt_NydusSpawning = TriggerCreate("gt_NydusSpawning_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Spawning Q
//--------------------------------------------------------------------------------------------------
bool gt_NydusSpawningQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_ping;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul01Zeratul00012", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONEZERATUL, SoundLink("TZeratul01Zeratul00012", -1), c_transmissionDurationAdd, 0.0, true);
    if ((UnitGroupCount(UnitGroup("Stalker", gv_p1_USER, RegionFromId(79), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Stalker", gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        libNtve_gf_CreateModelAtPoint("BriefingUnitSelectProtoss", PointFromId(851));
        lv_ping = libNtve_gf_ActorLastCreated();
        // Transmission - SoundLink("TZeratul01Zeratul00076", 0)
        libCamp_gf_SendTransmissionCampaign(gv_tHEONEZERATUL, SoundLink("TZeratul01Zeratul00076", -1), c_transmissionDurationAdd, 0.0, true);
    }

    Wait(1.0, c_timeReal);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    TimerStart(lv_timer, 10.0, false, c_timeGame);
    while (!(((TimerGetElapsed(lv_timer) >= 7.0) || (UnitGroupCount(UnitGroup("Stalker", gv_p1_USER, RegionFromId(79), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("Stalker", gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)))) {
        Wait(0.1, c_timeGame);
    }
    libNtve_gf_KillModel(lv_ping);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusSpawningQ_Init () {
    gt_NydusSpawningQ = TriggerCreate("gt_NydusSpawningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Spawn - Rumble
//--------------------------------------------------------------------------------------------------
bool gt_NydusSpawnRumble_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_region;
    unit lv_nydusUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_region = gv_runoutNydusSpawnRegion;
    CameraShakeStart(gv_p1_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.06, 2.0, 100.0, 3.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_p3_ZERG, RegionGetCenter(lv_region));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 200.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
    UnitGroupAdd(gv_nydusWorms, UnitLastCreated());
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(RegionGetCenter(lv_region), 6.0), "Spires", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(RegionGetCenter(lv_region), 6.0), "CliffSpires", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(RegionGetCenter(lv_region), 6.0), "SpiresLarge", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    lv_nydusUnit = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlay(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(3.7, c_timeGame);
    while (true) {
        if ((UnitIsAlive(lv_nydusUnit) == false)) {
            break;
        }

        if ((UnitHasBehavior(lv_nydusUnit, "ZeratulStun") == false) && (TriggerIsEnabled(gt_Enemiesare99999Staggered) == false) && (UnitGroupCount(gv_nydusTotalSpawnlings, c_unitCountAlive) <= 50)) {
            SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), UnitGetPosition(lv_nydusUnit), 1.0, 100.0, 0.0);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_nydusUnit), c_animNameDefault, "Spell", 0, c_animTimeDefault);
            libNtve_gf_CreateUnitsAtPoint2(7, "Zergling", 0, gv_p3_ZERG, PointWithOffsetPolar(UnitGetPosition(lv_nydusUnit), 0.5, 270.0));
            UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(127))), c_orderQueueReplace);
            UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(126))), c_orderQueueAddToEnd);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_nydusTotalSpawnlings);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_nydusSpawnRumble);
        }
        else {
            if ((TriggerIsEnabled(gt_Enemiesare99999Staggered) == true)) {
                gv_nydusWormFlee = lv_nydusUnit;
                TriggerExecute(gt_NydusWormRetreat, true, false);
            }

        }
        Wait(7.0, c_timeGame);
        if ((UnitIsAlive(lv_nydusUnit) == false)) {
            break;
        }

        if ((UnitHasBehavior(lv_nydusUnit, "ZeratulStun") == false) && (TriggerIsEnabled(gt_Enemiesare99999Staggered) == false) && (UnitGroupCount(gv_nydusTotalSpawnlings, c_unitCountAlive) <= 50)) {
            SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), UnitGetPosition(lv_nydusUnit), 1.0, 100.0, 0.0);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_nydusUnit), c_animNameDefault, "Spell", 0, c_animTimeDefault);
            libNtve_gf_CreateUnitsAtPoint2(1, "Roach", 0, gv_p3_ZERG, PointWithOffsetPolar(UnitGetPosition(lv_nydusUnit), 0.5, 270.0));
            UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(127))), c_orderQueueReplace);
            UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(126))), c_orderQueueAddToEnd);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_nydusTotalSpawnlings);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_nydusSpawnRumble);
        }
        else {
            if ((TriggerIsEnabled(gt_Enemiesare99999Staggered) == true)) {
                gv_nydusWormFlee = lv_nydusUnit;
                TriggerExecute(gt_NydusWormRetreat, true, false);
            }

        }
        Wait(7.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusSpawnRumble_Init () {
    gt_NydusSpawnRumble = TriggerCreate("gt_NydusSpawnRumble_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Spawn AI - Rumble
//--------------------------------------------------------------------------------------------------
bool gt_NydusSpawnAIRumble_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_unitGroup;

    // Automatic Variable Declarations
    unitgroup autoE5915620_g;
    int autoE5915620_u;
    unit autoE5915620_var;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    autoE5915620_g = gv_nydusSpawnRumble;
    autoE5915620_u = UnitGroupCount(autoE5915620_g, c_unitCountAll);
    for (;; autoE5915620_u -= 1) {
        autoE5915620_var = UnitGroupUnitFromEnd(autoE5915620_g, autoE5915620_u);
        if (autoE5915620_var == null) { break; }
        if ((UnitHasBehavior(autoE5915620_var, "ZeratulStun") == false) && (OrderGetAbilityCommand(UnitOrder(autoE5915620_var, 0)) != AbilityCommand("attack", 0)) && (OrderGetAbilityCommand(UnitOrder(autoE5915620_var, 0)) != AbilityCommand("move", 3)) && (OrderGetAbilityCommand(UnitOrder(autoE5915620_var, 0)) != AbilityCommand("move", 0))) {
            UnitIssueOrder(autoE5915620_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(126))), c_orderQueueReplace);
            UnitIssueOrder(autoE5915620_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(127))), c_orderQueueAddToEnd);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusSpawnAIRumble_Init () {
    gt_NydusSpawnAIRumble = TriggerCreate("gt_NydusSpawnAIRumble_Func");
    TriggerAddEventTimePeriodic(gt_NydusSpawnAIRumble, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Worm Retreat
//--------------------------------------------------------------------------------------------------
bool gt_NydusWormRetreat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = gv_nydusWormFlee;
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_unit), c_animNameDefault, "Unburrow", c_animFlagPlayForever, c_animTimeDefault);
    Wait(3.0, c_timeGame);
    if ((UnitIsAlive(lv_unit) == true)) {
        UnitRemove(lv_unit);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusWormRetreat_Init () {
    gt_NydusWormRetreat = TriggerCreate("gt_NydusWormRetreat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Worms All Dead Q
//--------------------------------------------------------------------------------------------------
bool gt_NydusWormsAllDeadQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((UnitIsAlive(gv_tHEONEKARASS) == true)) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TZeratul01Karass00077", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul01Karass00077", -1), c_transmissionDurationAdd, 1.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusWormsAllDeadQ_Init () {
    gt_NydusWormsAllDeadQ = TriggerCreate("gt_NydusWormsAllDeadQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zeratul's The Only One Alive
//--------------------------------------------------------------------------------------------------
bool gt_ZeratulsTheOnlyOneAlive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_karassZealots, c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitIsAlive(gv_tHEONEKARASS) == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Stalker", gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_AllPlayerGroundForcesDeadFlyersGoAway, true, false);
    Wait(5.0, c_timeGame);
    TriggerEnable(gt_Enemiesare99999Staggered, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZeratulsTheOnlyOneAlive_Init () {
    gt_ZeratulsTheOnlyOneAlive = TriggerCreate("gt_ZeratulsTheOnlyOneAlive_Func");
    TriggerEnable(gt_ZeratulsTheOnlyOneAlive, false);
    TriggerAddEventTimePeriodic(gt_ZeratulsTheOnlyOneAlive, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemies are 999.99% Staggered
//--------------------------------------------------------------------------------------------------
bool gt_Enemiesare99999Staggered_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoFAA9E78D_g;
    int autoFAA9E78D_u;
    unit autoFAA9E78D_var;

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingUnit() == gv_tHEONEZERATUL))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoFAA9E78D_g = UnitGroup(null, gv_p3_ZERG, RegionCircle(UnitGetPosition(gv_tHEONEZERATUL), 5.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFAA9E78D_u = UnitGroupCount(autoFAA9E78D_g, c_unitCountAll);
    for (;; autoFAA9E78D_u -= 1) {
        autoFAA9E78D_var = UnitGroupUnitFromEnd(autoFAA9E78D_g, autoFAA9E78D_u);
        if (autoFAA9E78D_var == null) { break; }
        if ((UnitGroupHasUnit(gv_nydusSpawnRumble, autoFAA9E78D_var) == true)) {
            gf_IssuePanicOrder(autoFAA9E78D_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Enemiesare99999Staggered_Init () {
    gt_Enemiesare99999Staggered = TriggerCreate("gt_Enemiesare99999Staggered_Func");
    TriggerEnable(gt_Enemiesare99999Staggered, false);
    TriggerAddEventUnitDied(gt_Enemiesare99999Staggered, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: All Player Ground Forces Dead, Flyers Go Away
//--------------------------------------------------------------------------------------------------
bool gt_AllPlayerGroundForcesDeadFlyersGoAway_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto35228365_g;
    int auto35228365_u;
    unit auto35228365_var;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        auto35228365_g = gv_rumbleFlyers;
        auto35228365_u = UnitGroupCount(auto35228365_g, c_unitCountAll);
        for (;; auto35228365_u -= 1) {
            auto35228365_var = UnitGroupUnitFromEnd(auto35228365_g, auto35228365_u);
            if (auto35228365_var == null) { break; }
            UnitIssueOrder(auto35228365_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(129))), c_orderQueueReplace);
            if ((RegionContainsPoint(RegionFromId(129), UnitGetPosition(auto35228365_var)) == true)) {
                UnitRemove(auto35228365_var);
            }

        }
        if ((UnitGroupCount(gv_rumbleFlyers, c_unitCountAlive) == 0)) {
            break;
        }
        else {
            Wait(1.0, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AllPlayerGroundForcesDeadFlyersGoAway_Init () {
    gt_AllPlayerGroundForcesDeadFlyersGoAway = TriggerCreate("gt_AllPlayerGroundForcesDeadFlyersGoAway_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery Discovered 3 - Rumble Q
//--------------------------------------------------------------------------------------------------
bool gt_HatcheryDiscovered3RumbleQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_hatcheryping;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShowHideUnit(UnitFromId(134), true);
    libNtve_gf_ShowHideUnit(UnitFromId(173), true);
    libNtve_gf_ShowHideUnit(UnitFromId(360), true);
    libNtve_gf_PauseUnit(UnitFromId(360), false);
    libNtve_gf_PauseUnit(UnitFromId(134), false);
    libNtve_gf_PauseUnit(UnitFromId(173), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/68DEA97C"), null, UnitGetPosition(UnitFromId(445)));
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectProtoss", UnitGetPosition(UnitFromId(28)));
    lv_hatcheryping = libNtve_gf_ActorLastCreated();
    // Transmission - SoundLink("TZeratul01Zeratul00042", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONEZERATUL, SoundLink("TZeratul01Zeratul00042", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    Wait(4.0, c_timeGame);
    libNtve_gf_KillModel(lv_hatcheryping);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HatcheryDiscovered3RumbleQ_Init () {
    gt_HatcheryDiscovered3RumbleQ = TriggerCreate("gt_HatcheryDiscovered3RumbleQ_Func");
    TriggerAddEventUnitRegion(gt_HatcheryDiscovered3RumbleQ, null, RegionFromId(32), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery 3 Roach eggs
//--------------------------------------------------------------------------------------------------
bool gt_Hatchery3Roacheggs_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD5E64E17_g;
    int autoD5E64E17_u;
    unit autoD5E64E17_var;

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD5E64E17_g = UnitGroup("Larva", gv_p3_ZERG, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD5E64E17_u = UnitGroupCount(autoD5E64E17_g, c_unitCountAll);
    for (;; autoD5E64E17_u -= 1) {
        autoD5E64E17_var = UnitGroupUnitFromEnd(autoD5E64E17_g, autoD5E64E17_u);
        if (autoD5E64E17_var == null) { break; }
        UnitIssueOrder(autoD5E64E17_var, Order(AbilityCommand("LarvaTrain", 9)), c_orderQueueReplace);
        Wait(0.15, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hatchery3Roacheggs_Init () {
    gt_Hatchery3Roacheggs = TriggerCreate("gt_Hatchery3Roacheggs_Func");
    TriggerAddEventUnitRegion(gt_Hatchery3Roacheggs, null, RegionFromId(123), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Shrine 3 Reached
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveShrine3Reached_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_tHEONEZERATUL, RegionFromId(52)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ZeratulsTheOnlyOneAlive, false);
    TriggerEnable(gt_Enemiesare99999Staggered, false);
    libNtve_gf_MakeUnitUncommandable(gv_tHEONEZERATUL, true);
    libNtve_gf_MakeUnitInvulnerable(gv_tHEONEZERATUL, true);
    UnitSetState(gv_tHEONEZERATUL, c_unitStateSelectable, false);
    gv_statZeratulLifeRemaining += (UnitGetPropertyFixed(gv_tHEONEZERATUL, c_unitPropLife, c_unitPropNormal) - UnitGetPropertyFixed(gv_tHEONEZERATUL, c_unitPropLife, c_unitPropCurrent));
    TriggerExecute(gt_Shrine03, true, false);
    UnitIssueOrder(gv_tHEONEZERATUL, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(392)), c_orderQueueReplace);
    SoundPlay(SoundLink("UI_DoorMenu_Popup", 2), PlayerGroupAll(), 100.0, 0.0);
    UnitKill(UnitFromId(1563));
    TriggerExecute(gt_ObjectiveShrinesUpdate, true, false);
    ObjectiveSetState(gv_objectiveShrinesGetToShrines, c_objectiveStateCompleted);
    PingDestroy(gv_pingThirdShrine);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(UnitFromId(1), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_PauseUnit(UnitFromId(1), true);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_CinematicKerriganQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveShrine3Reached_Init () {
    gt_ObjectiveShrine3Reached = TriggerCreate("gt_ObjectiveShrine3Reached_Func");
    TriggerEnable(gt_ObjectiveShrine3Reached, false);
    TriggerAddEventTimePeriodic(gt_ObjectiveShrine3Reached, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Runout Initialization
//--------------------------------------------------------------------------------------------------
bool gt_RunoutInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_unitGroup;

    // Automatic Variable Declarations
    unitgroup autoD8144558_g;
    int autoD8144558_u;
    unit autoD8144558_var;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShareVisionofUnit(gv_tHEONEKERRIGAN, true, gv_p1_USER);
    libNtve_gf_PauseUnit(UnitFromId(1257), false);
    libNtve_gf_ShowHideUnit(UnitFromId(1257), true);
    libNtve_gf_PauseUnit(UnitFromId(1259), false);
    libNtve_gf_ShowHideUnit(UnitFromId(1259), true);
    gf_ActivatePatrolAIForUnit(UnitFromId(783), PointFromId(792), 1.0);
    gf_ActivatePatrolAIForUnit(UnitFromId(831), PointFromId(850), 1.0);
    TechTreeUpgradeAddLevel(gv_p3_ZERG, "hydraliskspeed", 1);
    libNtve_gf_SetAllianceOneWay(gv_p3_ZERG, 0, libNtve_ge_AllianceSetting_Enemy);
    TimerStart(gv_runoutTimer, 9999.0, false, c_timeGame);
    libNtve_gf_MakeUnitInvulnerable(gv_tHEONEKERRIGAN, false);
    UnitIssueOrder(gv_tHEONEKARASS, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(383)), c_orderQueueReplace);
    autoD8144558_g = gv_karassZealots;
    autoD8144558_u = UnitGroupCount(autoD8144558_g, c_unitCountAll);
    for (;; autoD8144558_u -= 1) {
        autoD8144558_var = UnitGroupUnitFromEnd(autoD8144558_g, autoD8144558_u);
        if (autoD8144558_var == null) { break; }
        UnitIssueOrder(autoD8144558_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(383)), c_orderQueueReplace);
    }
    TriggerEnable(gt_KarassKilledDuringRunout, true);
    TriggerEnable(gt_NydusSpawnAIRunout, true);
    TriggerExecute(gt_RunoutFirstWave, true, false);
    TriggerExecute(gt_RunoutRock01Safety, true, false);
    TriggerExecute(gt_RunoutRock02Safety, true, false);
    TriggerExecute(gt_RunoutRock03Safety, true, false);
    TriggerExecute(gt_ObjectiveVoidSeekerObjectivesQ, true, false);
    TriggerExecute(gt_RunoutConstantNydusAttacks, true, false);
    Wait(3.0, c_timeGame);
    TriggerExecute(gt_RunoutArrowPingConstant, true, false);
    Wait(3.0, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitFromId(192)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    gv_tHEONEPING = PingLastCreated();
    PingSetTooltip(gv_tHEONEPING, StringExternal("Param/Value/3D32D79C"));
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_ShowTimer, true, false);
    TriggerExecute(gt_RunoutAttackWaves, true, false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_TimerEscape, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunoutInitialization_Init () {
    gt_RunoutInitialization = TriggerCreate("gt_RunoutInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Regeneration
//--------------------------------------------------------------------------------------------------
bool gt_KerriganRegeneration_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_tHEONEKERRIGAN))) {
            return false;
        }

        if (!((gv_gameOver != true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + 100.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganRegeneration_Init () {
    gt_KerriganRegeneration = TriggerCreate("gt_KerriganRegeneration_Func");
    TriggerAddEventUnitDamaged(gt_KerriganRegeneration, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Timer
//--------------------------------------------------------------------------------------------------
bool gt_ShowTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_timerEscape, 120.0, false, c_timeGame);
    TimerPause(TimerLastStarted(), true);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/00C4A4C7"), true, false);
    BoardItemSetTextColor(BoardLastCreated(), 1, 1, Color(100.00, 100.00, 100.00));
    TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<min2/>:<sec2/>"));
    TimerWindowSetColor(TimerWindowLastCreated(), c_timerWindowColorTime, Color(100.00, 0.00, 0.00), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowTimer_Init () {
    gt_ShowTimer = TriggerCreate("gt_ShowTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Runout First Wave
//--------------------------------------------------------------------------------------------------
bool gt_RunoutFirstWave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_unitGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(3, "Zergling", 0, gv_p3_ZERG, RegionGetCenter(RegionFromId(24)));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_runoutMobs);
    libNtve_gf_CreateUnitsAtPoint2(1, "Hydralisk", 0, gv_p3_ZERG, RegionGetCenter(RegionFromId(24)));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_runoutMobs);
    libNtve_gf_CreateUnitsAtPoint2(1, "Overseer", 0, gv_p3_ZERG, RegionGetCenter(RegionFromId(24)));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_runoutMobs);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunoutFirstWave_Init () {
    gt_RunoutFirstWave = TriggerCreate("gt_RunoutFirstWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Runout Arrow Ping (Constant)
//--------------------------------------------------------------------------------------------------
bool gt_RunoutArrowPingConstant_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_real;

    // Automatic Variable Declarations
    const int auto59554051_ae = 18;
    int auto59554051_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto59554051_var = 1;
    for ( ; auto59554051_var <= auto59554051_ae; auto59554051_var += 1 ) {
        lv_real = (18.0 - IntToFixed(auto59554051_var));
        lv_real = (lv_real * 0.14);
        lv_real = (lv_real + 5.0);
        PingCreate(PlayerGroupAll(), "PingArrow", gv_runoutPingPoints[auto59554051_var], ColorWithAlpha(0.00, 100.00, 0.00, 0.00), lv_real);
        PingSetScale(PingLastCreated(), 0.85);
        Wait(0.14, c_timeGame);
    }
    Wait(10.0, c_timeGame);
    TriggerExecute(TriggerGetCurrent(), true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunoutArrowPingConstant_Init () {
    gt_RunoutArrowPingConstant = TriggerCreate("gt_RunoutArrowPingConstant_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Runout Event 1 - Nydus
//--------------------------------------------------------------------------------------------------
bool gt_RunoutEvent1Nydus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnNydusWorm(RegionFromId(29), gt_NydusSpawnRunout);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunoutEvent1Nydus_Init () {
    gt_RunoutEvent1Nydus = TriggerCreate("gt_RunoutEvent1Nydus_Func");
    TriggerAddEventUnitRegion(gt_RunoutEvent1Nydus, null, RegionFromId(82), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scourge Ambience 3
//--------------------------------------------------------------------------------------------------
bool gt_ScourgeAmbience3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    unitgroup auto94593D49_g;
    int auto94593D49_u;
    unit auto94593D49_var;
    unitgroup auto394906C2_g;
    int auto394906C2_u;
    unit auto394906C2_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayAtPoint(SoundLink("Mutalisk_Attack", 4), PlayerGroupAll(), UnitGetPosition(gv_tHEONEZERATUL), 0.0, 100.0, 0.0);
    auto94593D49_g = gv_scourgeAmbience3;
    auto94593D49_u = UnitGroupCount(auto94593D49_g, c_unitCountAll);
    for (;; auto94593D49_u -= 1) {
        auto94593D49_var = UnitGroupUnitFromEnd(auto94593D49_g, auto94593D49_u);
        if (auto94593D49_var == null) { break; }
        lv_point = PointWithOffsetPolar(UnitGetPosition(auto94593D49_var), 50.0, RandomFixed(305.0, 325.0));
        libNtve_gf_ShowHideUnit(auto94593D49_var, true);
        libNtve_gf_PauseUnit(auto94593D49_var, false);
        UnitIssueOrder(auto94593D49_var, OrderTargetingPoint(AbilityCommand("move", 0), lv_point), c_orderQueueReplace);
        UnitSetCustomValue(auto94593D49_var, 0, PointGetX(lv_point));
        UnitSetCustomValue(auto94593D49_var, 1, PointGetY(lv_point));
        UnitSetPropertyFixed(auto94593D49_var, c_unitPropMovementSpeed, (UnitGetPropertyFixed(auto94593D49_var, c_unitPropMovementSpeed, c_unitPropNormal) * RandomFixed(0.85, 1.2)));
    }
    Wait(7.0, c_timeGame);
    while (true) {
        if ((UnitGroupCount(gv_scourgeAmbience3, c_unitCountAlive) == 0)) {
            break;
        }

        auto394906C2_g = gv_scourgeAmbience3;
        auto394906C2_u = UnitGroupCount(auto394906C2_g, c_unitCountAll);
        for (;; auto394906C2_u -= 1) {
            auto394906C2_var = UnitGroupUnitFromEnd(auto394906C2_g, auto394906C2_u);
            if (auto394906C2_var == null) { break; }
            if ((libNtve_gf_UnitIsVisibleToPlayer(auto394906C2_var, gv_p1_USER) == false)) {
                UnitRemove(auto394906C2_var);
            }
            else {
                UnitIssueOrder(auto394906C2_var, OrderTargetingPoint(AbilityCommand("attack", 0), Point(UnitGetCustomValue(auto394906C2_var, 0), UnitGetCustomValue(auto394906C2_var, 1))), c_orderQueueReplace);
            }
        }
        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScourgeAmbience3_Init () {
    gt_ScourgeAmbience3 = TriggerCreate("gt_ScourgeAmbience3_Func");
    TriggerAddEventUnitRegion(gt_ScourgeAmbience3, null, RegionFromId(36), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Runout Event 2 - Nydus
//--------------------------------------------------------------------------------------------------
bool gt_RunoutEvent2Nydus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnNydusWorm(RegionFromId(54), gt_NydusSpawnRunout);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunoutEvent2Nydus_Init () {
    gt_RunoutEvent2Nydus = TriggerCreate("gt_RunoutEvent2Nydus_Func");
    TriggerAddEventUnitRegion(gt_RunoutEvent2Nydus, null, RegionFromId(84), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Runout Event 3 - Air, Encircle
//--------------------------------------------------------------------------------------------------
bool gt_RunoutEvent3AirEncircle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_RunoutEncircleInit, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunoutEvent3AirEncircle_Init () {
    gt_RunoutEvent3AirEncircle = TriggerCreate("gt_RunoutEvent3AirEncircle_Func");
    TriggerAddEventUnitRegion(gt_RunoutEvent3AirEncircle, null, RegionFromId(87), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Runout Encircle Init
//--------------------------------------------------------------------------------------------------
bool gt_RunoutEncircleInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_real;
    fixed lv_minWrap;
    fixed lv_maxWrap;
    fixed lv_minSpeed;
    fixed lv_maxSpeed;

    // Automatic Variable Declarations
    const int autoD34E7E59_n = 3;
    int autoD34E7E59_i;
    const int autoD3B14D9F_n = 3;
    int autoD3B14D9F_i;
    const int auto0ED29723_n = 2;
    int auto0ED29723_i;
    const int auto82B6B373_n = 2;
    int auto82B6B373_i;
    const int auto976A1357_n = 5;
    int auto976A1357_i;
    const int autoB5C616FC_n = 5;
    int autoB5C616FC_i;
    const int auto85EF0160_n = 2;
    int auto85EF0160_i;
    const int auto9F6C4B9B_n = 2;
    int auto9F6C4B9B_i;

    // Variable Initialization
    lv_minWrap = 1.5;
    lv_maxWrap = 7.0;
    lv_minSpeed = 0.9;
    lv_maxSpeed = 1.3;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_RunoutEncircleAI, true);
    for (autoD34E7E59_i = 1; autoD34E7E59_i <= autoD34E7E59_n; autoD34E7E59_i += 1) {
        lv_real = libNtve_gf_RandomAngle();
        libNtve_gf_UnitCreateFacingPoint(1, "Scourge", 0, gv_p3_ZERG, PointWithOffsetPolar(UnitGetPosition(gv_tHEONEZERATUL), RandomFixed(15.0, 25.0), lv_real), PointFromId(548));
        UnitSetCustomValue(UnitLastCreated(), 0, lv_real);
        UnitSetCustomValue(UnitLastCreated(), 1, RandomFixed(lv_minWrap, lv_maxWrap));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(lv_minSpeed, lv_maxSpeed)));
        UnitGroupAdd(gv_zergEncircleGroupLeft, UnitLastCreated());
        UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
    }
    for (autoD3B14D9F_i = 1; autoD3B14D9F_i <= autoD3B14D9F_n; autoD3B14D9F_i += 1) {
        lv_real = libNtve_gf_RandomAngle();
        libNtve_gf_UnitCreateFacingPoint(1, "Scourge", 0, gv_p3_ZERG, PointWithOffsetPolar(UnitGetPosition(gv_tHEONEZERATUL), RandomFixed(15.0, 25.0), lv_real), PointFromId(548));
        UnitSetCustomValue(UnitLastCreated(), 0, lv_real);
        UnitSetCustomValue(UnitLastCreated(), 1, RandomFixed(lv_minWrap, lv_maxWrap));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(lv_minSpeed, lv_maxSpeed)));
        UnitGroupAdd(gv_zergEncircleGroupRight, UnitLastCreated());
        UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
    }
    Wait(1.0, c_timeGame);
    for (auto0ED29723_i = 1; auto0ED29723_i <= auto0ED29723_n; auto0ED29723_i += 1) {
        lv_real = libNtve_gf_RandomAngle();
        libNtve_gf_UnitCreateFacingPoint(1, "Scourge", 0, gv_p3_ZERG, PointWithOffsetPolar(UnitGetPosition(gv_tHEONEZERATUL), RandomFixed(15.0, 25.0), lv_real), PointFromId(548));
        UnitSetCustomValue(UnitLastCreated(), 0, lv_real);
        UnitSetCustomValue(UnitLastCreated(), 1, RandomFixed(lv_minWrap, lv_maxWrap));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(lv_minSpeed, lv_maxSpeed)));
        UnitGroupAdd(gv_zergEncircleGroupLeft, UnitLastCreated());
        UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
    }
    for (auto82B6B373_i = 1; auto82B6B373_i <= auto82B6B373_n; auto82B6B373_i += 1) {
        lv_real = libNtve_gf_RandomAngle();
        libNtve_gf_UnitCreateFacingPoint(1, "Scourge", 0, gv_p3_ZERG, PointWithOffsetPolar(UnitGetPosition(gv_tHEONEZERATUL), RandomFixed(15.0, 25.0), lv_real), PointFromId(548));
        UnitSetCustomValue(UnitLastCreated(), 0, lv_real);
        UnitSetCustomValue(UnitLastCreated(), 1, RandomFixed(lv_minWrap, lv_maxWrap));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(lv_minSpeed, lv_maxSpeed)));
        UnitGroupAdd(gv_zergEncircleGroupRight, UnitLastCreated());
        UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
    }
    Wait(2.0, c_timeGame);
    for (auto976A1357_i = 1; auto976A1357_i <= auto976A1357_n; auto976A1357_i += 1) {
        lv_real = libNtve_gf_RandomAngle();
        libNtve_gf_UnitCreateFacingPoint(1, "Scourge", 0, gv_p3_ZERG, PointWithOffsetPolar(UnitGetPosition(gv_tHEONEZERATUL), RandomFixed(15.0, 25.0), lv_real), PointFromId(548));
        UnitSetCustomValue(UnitLastCreated(), 0, lv_real);
        UnitSetCustomValue(UnitLastCreated(), 1, RandomFixed(lv_minWrap, lv_maxWrap));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(lv_minSpeed, lv_maxSpeed)));
        UnitGroupAdd(gv_zergEncircleGroupLeft, UnitLastCreated());
        UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
    }
    for (autoB5C616FC_i = 1; autoB5C616FC_i <= autoB5C616FC_n; autoB5C616FC_i += 1) {
        lv_real = libNtve_gf_RandomAngle();
        libNtve_gf_UnitCreateFacingPoint(1, "Scourge", 0, gv_p3_ZERG, PointWithOffsetPolar(UnitGetPosition(gv_tHEONEZERATUL), RandomFixed(15.0, 25.0), lv_real), PointFromId(548));
        UnitSetCustomValue(UnitLastCreated(), 0, lv_real);
        UnitSetCustomValue(UnitLastCreated(), 1, RandomFixed(lv_minWrap, lv_maxWrap));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(lv_minSpeed, lv_maxSpeed)));
        UnitGroupAdd(gv_zergEncircleGroupRight, UnitLastCreated());
        UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
    }
    Wait(3.0, c_timeGame);
    TriggerExecute(gt_ZergEncircleLoopingSounds, true, false);
    while (true) {
        if (((gv_gameOver == true) || (gv_inCinematic == true))) {
            break;
        }
        else {
            if (((UnitGroupCount(gv_zergEncircleGroupLeft, c_unitCountAlive) + UnitGroupCount(gv_zergEncircleGroupRight, c_unitCountAlive)) <= 5)) {
                for (auto85EF0160_i = 1; auto85EF0160_i <= auto85EF0160_n; auto85EF0160_i += 1) {
                    lv_real = libNtve_gf_RandomAngle();
                    libNtve_gf_UnitCreateFacingPoint(1, "Scourge", 0, gv_p3_ZERG, PointWithOffsetPolar(UnitGetPosition(gv_tHEONEZERATUL), RandomFixed(15.0, 25.0), lv_real), PointFromId(548));
                    UnitSetCustomValue(UnitLastCreated(), 0, lv_real);
                    UnitSetCustomValue(UnitLastCreated(), 1, RandomFixed(lv_minWrap, lv_maxWrap));
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(lv_minSpeed, lv_maxSpeed)));
                    UnitGroupAdd(gv_zergEncircleGroupLeft, UnitLastCreated());
                    UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
                }
                for (auto9F6C4B9B_i = 1; auto9F6C4B9B_i <= auto9F6C4B9B_n; auto9F6C4B9B_i += 1) {
                    lv_real = libNtve_gf_RandomAngle();
                    libNtve_gf_UnitCreateFacingPoint(1, "Scourge", 0, gv_p3_ZERG, PointWithOffsetPolar(UnitGetPosition(gv_tHEONEZERATUL), RandomFixed(15.0, 25.0), lv_real), PointFromId(548));
                    UnitSetCustomValue(UnitLastCreated(), 0, lv_real);
                    UnitSetCustomValue(UnitLastCreated(), 1, RandomFixed(lv_minWrap, lv_maxWrap));
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(lv_minSpeed, lv_maxSpeed)));
                    UnitGroupAdd(gv_zergEncircleGroupRight, UnitLastCreated());
                    UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
                }
            }

            Wait(1.0, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunoutEncircleInit_Init () {
    gt_RunoutEncircleInit = TriggerCreate("gt_RunoutEncircleInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Runout Encircle AI
//--------------------------------------------------------------------------------------------------
bool gt_RunoutEncircleAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoE8B100A8_g;
    int autoE8B100A8_u;
    unit autoE8B100A8_var;
    unitgroup autoCE0E774C_g;
    int autoCE0E774C_u;
    unit autoCE0E774C_var;
    unitgroup auto3847C7E3_g;
    int auto3847C7E3_u;
    unit auto3847C7E3_var;
    unitgroup auto190E44E5_g;
    int auto190E44E5_u;
    unit auto190E44E5_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_RandomPercent() >= 33.0)) {
        if ((RandomInt(0, 1) == 0)) {
            lv_unit = UnitGroupRandomUnit(gv_zergEncircleGroupLeft, c_unitCountAlive);
        }
        else {
            lv_unit = UnitGroupRandomUnit(gv_zergEncircleGroupRight, c_unitCountAlive);
        }
        UnitSetCustomValue(lv_unit, 1, (2.0 + ModF((UnitGetCustomValue(lv_unit, 1) + 6.0), 12.0)));
        UnitSetPropertyFixed(lv_unit, c_unitPropMovementSpeed, (UnitGetPropertyFixed(lv_unit, c_unitPropMovementSpeed, c_unitPropCurrent) * RandomFixed(0.9, 1.3)));
    }

    if ((libNtve_gf_RandomPercent() >= 96.0)) {
        if ((RandomInt(0, 1) == 0)) {
            lv_unit = UnitGroupRandomUnit(gv_zergEncircleGroupLeft, c_unitCountAlive);
            UnitGroupRemove(gv_zergEncircleGroupLeft, lv_unit);
            UnitGroupAdd(gv_zergEncircleGroupRight, lv_unit);
        }
        else {
            lv_unit = UnitGroupRandomUnit(gv_zergEncircleGroupRight, c_unitCountAlive);
            UnitGroupRemove(gv_zergEncircleGroupRight, lv_unit);
            UnitGroupAdd(gv_zergEncircleGroupLeft, lv_unit);
        }
    }

    if ((UnitIsAlive(gv_tHEONEZERATUL) == true)) {
        auto3847C7E3_g = gv_zergEncircleGroupLeft;
        auto3847C7E3_u = UnitGroupCount(auto3847C7E3_g, c_unitCountAll);
        for (;; auto3847C7E3_u -= 1) {
            auto3847C7E3_var = UnitGroupUnitFromEnd(auto3847C7E3_g, auto3847C7E3_u);
            if (auto3847C7E3_var == null) { break; }
            UnitIssueOrder(auto3847C7E3_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(PointWithOffset(UnitGetPosition(gv_tHEONEZERATUL), 0.0, -1.5), RandomFixed((UnitGetCustomValue(auto3847C7E3_var, 1) + 0.2), (UnitGetCustomValue(auto3847C7E3_var, 1) - 0.2)), (UnitGetCustomValue(auto3847C7E3_var, 0) + 30.0))), c_orderQueueReplace);
            UnitSetCustomValue(auto3847C7E3_var, 0, AngleBetweenPoints(PointWithOffset(UnitGetPosition(gv_tHEONEZERATUL), 0.0, -1.5), UnitGetPosition(auto3847C7E3_var)));
        }
        auto190E44E5_g = gv_zergEncircleGroupRight;
        auto190E44E5_u = UnitGroupCount(auto190E44E5_g, c_unitCountAll);
        for (;; auto190E44E5_u -= 1) {
            auto190E44E5_var = UnitGroupUnitFromEnd(auto190E44E5_g, auto190E44E5_u);
            if (auto190E44E5_var == null) { break; }
            UnitIssueOrder(auto190E44E5_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(PointWithOffset(UnitGetPosition(gv_tHEONEZERATUL), 0.0, -1.5), RandomFixed((UnitGetCustomValue(auto190E44E5_var, 1) + 0.2), (UnitGetCustomValue(auto190E44E5_var, 1) - 0.2)), (UnitGetCustomValue(auto190E44E5_var, 0) - 30.0))), c_orderQueueReplace);
            UnitSetCustomValue(auto190E44E5_var, 0, AngleBetweenPoints(PointWithOffset(UnitGetPosition(gv_tHEONEZERATUL), 0.0, -1.5), UnitGetPosition(auto190E44E5_var)));
        }
    }
    else {
        autoE8B100A8_g = gv_zergEncircleGroupLeft;
        autoE8B100A8_u = UnitGroupCount(autoE8B100A8_g, c_unitCountAll);
        for (;; autoE8B100A8_u -= 1) {
            autoE8B100A8_var = UnitGroupUnitFromEnd(autoE8B100A8_g, autoE8B100A8_u);
            if (autoE8B100A8_var == null) { break; }
            UnitIssueOrder(autoE8B100A8_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(PointWithOffset(PointFromId(664), 0.0, -1.5), RandomFixed((UnitGetCustomValue(autoE8B100A8_var, 1) + 0.2), (UnitGetCustomValue(autoE8B100A8_var, 1) - 0.2)), (UnitGetCustomValue(autoE8B100A8_var, 0) + 30.0))), c_orderQueueReplace);
            UnitSetCustomValue(autoE8B100A8_var, 0, AngleBetweenPoints(PointWithOffset(PointFromId(664), 0.0, -1.5), UnitGetPosition(autoE8B100A8_var)));
        }
        autoCE0E774C_g = gv_zergEncircleGroupRight;
        autoCE0E774C_u = UnitGroupCount(autoCE0E774C_g, c_unitCountAll);
        for (;; autoCE0E774C_u -= 1) {
            autoCE0E774C_var = UnitGroupUnitFromEnd(autoCE0E774C_g, autoCE0E774C_u);
            if (autoCE0E774C_var == null) { break; }
            UnitIssueOrder(autoCE0E774C_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(PointWithOffset(PointFromId(664), 0.0, -1.5), RandomFixed((UnitGetCustomValue(autoCE0E774C_var, 1) + 0.2), (UnitGetCustomValue(autoCE0E774C_var, 1) - 0.2)), (UnitGetCustomValue(autoCE0E774C_var, 0) - 30.0))), c_orderQueueReplace);
            UnitSetCustomValue(autoCE0E774C_var, 0, AngleBetweenPoints(PointWithOffset(PointFromId(664), 0.0, -1.5), UnitGetPosition(autoCE0E774C_var)));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunoutEncircleAI_Init () {
    gt_RunoutEncircleAI = TriggerCreate("gt_RunoutEncircleAI_Func");
    TriggerEnable(gt_RunoutEncircleAI, false);
    TriggerAddEventTimePeriodic(gt_RunoutEncircleAI, 0.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Runout Event 4 - Nydus
//--------------------------------------------------------------------------------------------------
bool gt_RunoutEvent4Nydus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnNydusWorm(RegionFromId(58), gt_NydusSpawnRunout);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunoutEvent4Nydus_Init () {
    gt_RunoutEvent4Nydus = TriggerCreate("gt_RunoutEvent4Nydus_Func");
    TriggerAddEventUnitRegion(gt_RunoutEvent4Nydus, null, RegionFromId(91), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Runout Event 5 - Double Nydus
//--------------------------------------------------------------------------------------------------
bool gt_RunoutEvent5DoubleNydus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnNydusWorm(RegionFromId(97), gt_NydusSpawnRunout);
    TriggerExecute(gt_KerriganAttacksKarass, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunoutEvent5DoubleNydus_Init () {
    gt_RunoutEvent5DoubleNydus = TriggerCreate("gt_RunoutEvent5DoubleNydus_Func");
    TriggerAddEventUnitRegion(gt_RunoutEvent5DoubleNydus, null, RegionFromId(88), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Runout Event 6 - Ultra, Karass Targeted
//--------------------------------------------------------------------------------------------------
bool gt_RunoutEvent6UltraKarassTargeted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto49C852D0_g;
    int auto49C852D0_u;
    unit auto49C852D0_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnNydusWorm(RegionFromId(98), gt_NydusSpawnRunout);
    auto49C852D0_g = UnitGroup(null, gv_p3_ZERG, RegionFromId(59), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto49C852D0_u = UnitGroupCount(auto49C852D0_g, c_unitCountAll);
    for (;; auto49C852D0_u -= 1) {
        auto49C852D0_var = UnitGroupUnitFromEnd(auto49C852D0_g, auto49C852D0_u);
        if (auto49C852D0_var == null) { break; }
        UnitGroupAdd(gv_runoutMobs, auto49C852D0_var);
    }
    UnitIssueOrder(UnitFromId(795), Order(AbilityCommand("BurrowUltraliskUp", 0)), c_orderQueueReplace);
    UnitGroupAdd(gv_runoutMobs, UnitFromId(795));
    Wait(0.8, c_timeGame);
    UnitIssueOrder(UnitFromId(1809), Order(AbilityCommand("BurrowUltraliskUp", 0)), c_orderQueueReplace);
    UnitGroupAdd(gv_runoutMobs, UnitFromId(1809));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunoutEvent6UltraKarassTargeted_Init () {
    gt_RunoutEvent6UltraKarassTargeted = TriggerCreate("gt_RunoutEvent6UltraKarassTargeted_Func");
    TriggerAddEventUnitRegion(gt_RunoutEvent6UltraKarassTargeted, null, RegionFromId(94), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Attacks Karass
//--------------------------------------------------------------------------------------------------
bool gt_KerriganAttacksKarass_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_tHEONEKERRIGAN, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_tHEONEKARASS)), c_orderQueueReplace);
    while (!((UnitIsAlive(gv_tHEONEKARASS) == false))) {
        Wait(1.0, c_timeGame);
    }
    UnitGroupAdd(gv_runoutMobs, gv_tHEONEKERRIGAN);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganAttacksKarass_Init () {
    gt_KerriganAttacksKarass = TriggerCreate("gt_KerriganAttacksKarass_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Karass Killed During Runout
//--------------------------------------------------------------------------------------------------
bool gt_KarassKilledDuringRunout_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_KarassFelledLineQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KarassKilledDuringRunout_Init () {
    gt_KarassKilledDuringRunout = TriggerCreate("gt_KarassKilledDuringRunout_Func");
    TriggerEnable(gt_KarassKilledDuringRunout, false);
    TriggerAddEventUnitDied(gt_KarassKilledDuringRunout, UnitRefFromVariable("gv_tHEONEKARASS"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Karass Felled Line Q
//--------------------------------------------------------------------------------------------------
bool gt_KarassFelledLineQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_tHEONEKERRIGAN, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(215)), c_orderQueueReplace);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul01Karass00062", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul01Karass00062", -1), c_transmissionDurationAdd, 1.0, true);
    if (((libNtve_gf_UnitInRegion(gv_tHEONEZERATUL, RegionFromId(101)) == false) && (libNtve_gf_UnitInRegion(gv_tHEONEZERATUL, RegionPlayableMap()) == true))) {
        // Transmission - SoundLink("TZeratul01Zeratul00044", 0)
        libCamp_gf_SendTransmissionCampaign(gv_tHEONEZERATUL, SoundLink("TZeratul01Zeratul00044", -1), c_transmissionDurationAdd, 1.0, true);
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KarassFelledLineQ_Init () {
    gt_KarassFelledLineQ = TriggerCreate("gt_KarassFelledLineQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Runout Event 7 - Brood Lord
//--------------------------------------------------------------------------------------------------
bool gt_RunoutEvent7BroodLord_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "BroodLord", 0, gv_p3_ZERG, PointFromId(863), 270.0);
    gf_ActivatePatrolAIForUnit(UnitLastCreated(), PointFromId(862), 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunoutEvent7BroodLord_Init () {
    gt_RunoutEvent7BroodLord = TriggerCreate("gt_RunoutEvent7BroodLord_Func");
    TriggerAddEventUnitRegion(gt_RunoutEvent7BroodLord, null, RegionFromId(89), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Runout Event 8 - Nydus, Overseer
//--------------------------------------------------------------------------------------------------
bool gt_RunoutEvent8NydusOverseer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnNydusWorm(RegionFromId(39), gt_NydusSpawnRunout);
    Wait(2.0, c_timeGame);
    gf_SpawnNydusWorm(RegionFromId(51), gt_NydusSpawnRunout);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunoutEvent8NydusOverseer_Init () {
    gt_RunoutEvent8NydusOverseer = TriggerCreate("gt_RunoutEvent8NydusOverseer_Func");
    TriggerAddEventUnitRegion(gt_RunoutEvent8NydusOverseer, null, RegionFromId(90), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Runout Event Central
//--------------------------------------------------------------------------------------------------
bool gt_RunoutEventCentral_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(RandomFixed(1.5, 2.5), c_timeGame);
    gf_SpawnNydusWorm(RegionFromId(55), gt_NydusSpawnRunout);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunoutEventCentral_Init () {
    gt_RunoutEventCentral = TriggerCreate("gt_RunoutEventCentral_Func");
    TriggerAddEventUnitRegion(gt_RunoutEventCentral, null, RegionFromId(85), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Runout Rock01 Safety
//--------------------------------------------------------------------------------------------------
bool gt_RunoutRock01Safety_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((libNtve_gf_UnitInRegion(gv_tHEONEZERATUL, RegionFromId(62)) == true) && (UnitIsAlive(UnitFromId(98)) == true)) {
            Wait(4.0, c_timeGame);
            TriggerEnable(gt_Rock01dies, true);
            libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_p4_RUNOUT_ZERG, PointFromId(206));
            UnitGroupAdd(gv_rock01Attackers, UnitLastCreated());
            libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_p4_RUNOUT_ZERG, PointFromId(209));
            UnitGroupAdd(gv_rock01Attackers, UnitLastCreated());
            libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_p4_RUNOUT_ZERG, PointFromId(231));
            UnitGroupAdd(gv_rock01Attackers, UnitLastCreated());
            libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_p4_RUNOUT_ZERG, PointFromId(238));
            UnitGroupAdd(gv_rock01Attackers, UnitLastCreated());
            libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_p4_RUNOUT_ZERG, PointFromId(297));
            UnitGroupAdd(gv_rock01Attackers, UnitLastCreated());
            libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_p4_RUNOUT_ZERG, PointFromId(292));
            UnitGroupAdd(gv_rock01Attackers, UnitLastCreated());
            UnitGroupIssueOrder(gv_rock01Attackers, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            Wait(1.0, c_timeGame);
            UnitGroupIssueOrder(gv_rock01Attackers, OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(98)), c_orderQueueReplace);
            Wait(5.0, c_timeGame);
        }

        Wait(1.0, c_timeGame);
        if ((gv_gameOver == true)) {
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunoutRock01Safety_Init () {
    gt_RunoutRock01Safety = TriggerCreate("gt_RunoutRock01Safety_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rock01 dies
//--------------------------------------------------------------------------------------------------
bool gt_Rock01dies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_AddUnitGroupToUnitGroup(gv_rock01Attackers, gv_runoutMobs);
    TriggerEnable(gt_RunoutRock01Safety, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Rock01dies_Init () {
    gt_Rock01dies = TriggerCreate("gt_Rock01dies_Func");
    TriggerEnable(gt_Rock01dies, false);
    TriggerAddEventUnitDied(gt_Rock01dies, UnitRefFromUnit(UnitFromId(98)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Runout Rock02 Safety
//--------------------------------------------------------------------------------------------------
bool gt_RunoutRock02Safety_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((libNtve_gf_UnitInRegion(gv_tHEONEZERATUL, RegionFromId(115)) == true) && (UnitIsAlive(UnitFromId(589)) == true)) {
            Wait(3.0, c_timeGame);
            TriggerEnable(gt_Rock02dies, true);
            libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_p4_RUNOUT_ZERG, PointFromId(388));
            UnitGroupAdd(gv_rock02Attackers, UnitLastCreated());
            libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_p4_RUNOUT_ZERG, PointFromId(435));
            UnitGroupAdd(gv_rock02Attackers, UnitLastCreated());
            libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_p4_RUNOUT_ZERG, PointFromId(550));
            UnitGroupAdd(gv_rock02Attackers, UnitLastCreated());
            libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_p4_RUNOUT_ZERG, PointFromId(562));
            UnitGroupAdd(gv_rock02Attackers, UnitLastCreated());
            libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_p4_RUNOUT_ZERG, PointFromId(627));
            UnitGroupAdd(gv_rock02Attackers, UnitLastCreated());
            libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_p4_RUNOUT_ZERG, PointFromId(629));
            UnitGroupAdd(gv_rock02Attackers, UnitLastCreated());
            libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_p4_RUNOUT_ZERG, PointFromId(635));
            UnitGroupAdd(gv_rock02Attackers, UnitLastCreated());
            UnitGroupIssueOrder(gv_rock02Attackers, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            Wait(1.0, c_timeGame);
            UnitGroupIssueOrder(gv_rock02Attackers, OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(589)), c_orderQueueReplace);
            Wait(5.0, c_timeGame);
        }

        Wait(1.0, c_timeGame);
        if ((gv_gameOver == true)) {
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunoutRock02Safety_Init () {
    gt_RunoutRock02Safety = TriggerCreate("gt_RunoutRock02Safety_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rock02 dies
//--------------------------------------------------------------------------------------------------
bool gt_Rock02dies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_AddUnitGroupToUnitGroup(gv_rock02Attackers, gv_runoutMobs);
    TriggerEnable(gt_RunoutRock02Safety, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Rock02dies_Init () {
    gt_Rock02dies = TriggerCreate("gt_Rock02dies_Func");
    TriggerEnable(gt_Rock02dies, false);
    TriggerAddEventUnitDied(gt_Rock02dies, UnitRefFromUnit(UnitFromId(589)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Runout Rock03 Safety
//--------------------------------------------------------------------------------------------------
bool gt_RunoutRock03Safety_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((libNtve_gf_UnitInRegion(gv_tHEONEZERATUL, RegionFromId(125)) == true) && (UnitIsAlive(UnitFromId(164)) == true)) {
            Wait(2.0, c_timeGame);
            TriggerEnable(gt_Rock03dies, true);
            libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_p4_RUNOUT_ZERG, PointFromId(638));
            UnitGroupAdd(gv_rock02Attackers, UnitLastCreated());
            libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_p4_RUNOUT_ZERG, PointFromId(639));
            UnitGroupAdd(gv_rock02Attackers, UnitLastCreated());
            libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_p4_RUNOUT_ZERG, PointFromId(675));
            UnitGroupAdd(gv_rock02Attackers, UnitLastCreated());
            libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_p4_RUNOUT_ZERG, PointFromId(811));
            UnitGroupAdd(gv_rock02Attackers, UnitLastCreated());
            libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_p4_RUNOUT_ZERG, PointFromId(877));
            UnitGroupAdd(gv_rock02Attackers, UnitLastCreated());
            UnitGroupIssueOrder(gv_rock02Attackers, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            Wait(1.0, c_timeGame);
            UnitGroupIssueOrder(gv_rock03Attackers, OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(164)), c_orderQueueReplace);
            Wait(5.0, c_timeGame);
        }

        Wait(1.0, c_timeGame);
        if ((gv_gameOver == true)) {
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunoutRock03Safety_Init () {
    gt_RunoutRock03Safety = TriggerCreate("gt_RunoutRock03Safety_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rock03 dies
//--------------------------------------------------------------------------------------------------
bool gt_Rock03dies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_AddUnitGroupToUnitGroup(gv_rock03Attackers, gv_runoutMobs);
    TriggerEnable(gt_RunoutRock03Safety, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Rock03dies_Init () {
    gt_Rock03dies = TriggerCreate("gt_Rock03dies_Func");
    TriggerEnable(gt_Rock03dies, false);
    TriggerAddEventUnitDied(gt_Rock03dies, UnitRefFromUnit(UnitFromId(164)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Runout Constant Nydus Attacks
//--------------------------------------------------------------------------------------------------
bool gt_RunoutConstantNydusAttacks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(7.0, c_timeGame);
    gf_SpawnNydusWorm(RegionFromId(34), gt_NydusSpawnRunout);
    Wait(3.0, c_timeGame);
    gf_SpawnNydusWorm(RegionFromId(63), gt_NydusSpawnRunout);
    Wait(3.0, c_timeGame);
    gf_SpawnNydusWorm(RegionFromId(105), gt_NydusSpawnRunout);
    while (true) {
        if ((UnitGroupCount(UnitGroup("NydusCanal", c_playerAny, RegionFromId(86), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 2)) {
            Wait(6.0, c_timeGame);
            gf_SpawnNydusWorm(RegionCircle(RegionRandomPoint(RegionFromId(86)), 1.0), gt_NydusSpawnRunout);
        }

        Wait(1.0, c_timeGame);
        if ((gv_gameOver == true)) {
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunoutConstantNydusAttacks_Init () {
    gt_RunoutConstantNydusAttacks = TriggerCreate("gt_RunoutConstantNydusAttacks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Runout Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_RunoutAttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto7823FDDB_n = 5;
    int auto7823FDDB_i;
    const int auto530FD14F_n = 5;
    int auto530FD14F_i;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((UnitGroupCount(UnitGroup("Zergling", gv_p3_ZERG, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 50) && (UnitGroupCount(UnitGroup("ZerglingBurrowed", gv_p3_ZERG, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 50)) {
            for (auto7823FDDB_i = 1; auto7823FDDB_i <= auto7823FDDB_n; auto7823FDDB_i += 1) {
                UnitCreate(1, "ZerglingBurrowed", 0, gv_p3_ZERG, RegionRandomPoint(RegionFromId(24)), libNtve_gf_RandomAngle());
                libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_runoutMobs);
            }
            for (auto530FD14F_i = 1; auto530FD14F_i <= auto530FD14F_n; auto530FD14F_i += 1) {
                UnitCreate(1, "ZerglingBurrowed", 0, gv_p3_ZERG, RegionRandomPoint(RegionFromId(81)), libNtve_gf_RandomAngle());
                libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_runoutMobs);
            }
        }

        if ((UnitGroupCount(UnitGroup("Hydralisk", gv_p3_ZERG, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 3) && (UnitGroupCount(UnitGroup("HydraliskBurrowed", gv_p3_ZERG, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 3) && (gv_runoutRespawnThreat >= 2)) {
            UnitCreate(1, "HydraliskBurrowed", 0, gv_p3_ZERG, RegionRandomPoint(RegionFromId(86)), libNtve_gf_RandomAngle());
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_runoutMobs);
        }

        if ((gv_runoutRespawnThreat >= 3)) {
            if ((gv_runoutRespawnThreat >= 10)) {
                if ((UnitGroupCount(UnitGroup("Overseer", gv_p3_ZERG, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 3)) {
                    libNtve_gf_CreateUnitsAtPoint2(1, "Overseer", 0, gv_p3_ZERG, PointFromId(419));
                    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_runoutMobs);
                }

            }
            else {
                if ((UnitGroupCount(UnitGroup("Overseer", gv_p3_ZERG, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 2)) {
                    libNtve_gf_CreateUnitsAtPoint2(1, "Overseer", 0, gv_p3_ZERG, PointFromId(419));
                    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_runoutMobs);
                }

            }
        }

        if ((UnitGroupCount(UnitGroup("Mutalisk", gv_p3_ZERG, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 2) && (gv_runoutRespawnThreat >= 7)) {
            libNtve_gf_CreateUnitsAtPoint2(1, "Mutalisk", 0, gv_p3_ZERG, PointFromId(419));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_runoutMobs);
        }

        Wait(7.0, c_timeGame);
        if (((gv_gameOver == true) || (gv_inCinematic == true))) {
            break;
        }
        else {
            gv_runoutRespawnThreat = (gv_runoutRespawnThreat + 1);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunoutAttackWaves_Init () {
    gt_RunoutAttackWaves = TriggerCreate("gt_RunoutAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Spawn - Runout
//--------------------------------------------------------------------------------------------------
bool gt_NydusSpawnRunout_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_region;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_region = gv_runoutNydusSpawnRegion;
    CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.06, 2.0, 100.0, 3.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_p3_ZERG, RegionGetCenter(lv_region));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 200.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
    UnitGroupAdd(gv_nydusWorms, UnitLastCreated());
    libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, gv_p1_USER);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(RegionGetCenter(lv_region), 6.0), "Spires", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(RegionGetCenter(lv_region), 6.0), "CliffSpires", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(RegionGetCenter(lv_region), 6.0), "SpiresLarge", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    lv_unit = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlay(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(3.7, c_timeGame);
    while (true) {
        if ((UnitIsAlive(lv_unit) == false)) {
            break;
        }

        if ((UnitHasBehavior(lv_unit, "ZeratulStun") == false)) {
            SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), UnitGetPosition(lv_unit), 1.0, 100.0, 0.0);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_unit), c_animNameDefault, "Spell", 0, c_animTimeDefault);
            libNtve_gf_CreateUnitsAtPoint2(5, "Zergling", 0, gv_p3_ZERG, PointWithOffsetPolar(UnitGetPosition(lv_unit), 0.5, 270.0));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_runoutMobs);
        }

        Wait(10.0, c_timeGame);
        if ((UnitIsAlive(lv_unit) == false)) {
            break;
        }

        if ((UnitHasBehavior(lv_unit, "ZeratulStun") == false)) {
            SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), UnitGetPosition(lv_unit), 1.0, 100.0, 0.0);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_unit), c_animNameDefault, "Spell", 0, c_animTimeDefault);
            libNtve_gf_CreateUnitsAtPoint2(1, "Roach", 0, gv_p3_ZERG, PointWithOffsetPolar(UnitGetPosition(lv_unit), 0.5, 270.0));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_runoutMobs);
        }

        Wait(10.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusSpawnRunout_Init () {
    gt_NydusSpawnRunout = TriggerCreate("gt_NydusSpawnRunout_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Spawn AI - Runout
//--------------------------------------------------------------------------------------------------
bool gt_NydusSpawnAIRunout_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_unitGroup;

    // Automatic Variable Declarations
    unitgroup auto8D9A69AB_g;
    int auto8D9A69AB_u;
    unit auto8D9A69AB_var;
    unitgroup auto27A97080_g;
    int auto27A97080_u;
    unit auto27A97080_var;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unitGroup = UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8D9A69AB_g = lv_unitGroup;
    auto8D9A69AB_u = UnitGroupCount(auto8D9A69AB_g, c_unitCountAll);
    for (;; auto8D9A69AB_u -= 1) {
        auto8D9A69AB_var = UnitGroupUnitFromEnd(auto8D9A69AB_g, auto8D9A69AB_u);
        if (auto8D9A69AB_var == null) { break; }
        if ((libNtve_gf_UnitIsVisibleToPlayer(auto8D9A69AB_var, gv_p3_ZERG) == false)) {
            UnitGroupRemove(lv_unitGroup, auto8D9A69AB_var);
        }

    }
    auto27A97080_g = gv_runoutMobs;
    auto27A97080_u = UnitGroupCount(auto27A97080_g, c_unitCountAll);
    for (;; auto27A97080_u -= 1) {
        auto27A97080_var = UnitGroupUnitFromEnd(auto27A97080_g, auto27A97080_u);
        if (auto27A97080_var == null) { break; }
        if ((UnitGroupCount(lv_unitGroup, c_unitCountAlive) >= 1)) {
            UnitIssueOrder(auto27A97080_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(lv_unitGroup, c_unitCountAlive))), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(auto27A97080_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(215)), c_orderQueueReplace);
        }
        if ((UnitGetType(auto27A97080_var) == "Overseer")) {
            UnitIssueOrder(auto27A97080_var, OrderTargetingUnit(AbilityCommand("move", 0), gv_tHEONEZERATUL), c_orderQueueReplace);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusSpawnAIRunout_Init () {
    gt_NydusSpawnAIRunout = TriggerCreate("gt_NydusSpawnAIRunout_Func");
    TriggerEnable(gt_NydusSpawnAIRunout, false);
    TriggerAddEventTimePeriodic(gt_NydusSpawnAIRunout, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TimerEscape
//--------------------------------------------------------------------------------------------------
bool gt_TimerEscape_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerPause(gv_timerEscape, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimerEscape_Init () {
    gt_TimerEscape = TriggerCreate("gt_TimerEscape_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TimerEscapeExpires
//--------------------------------------------------------------------------------------------------
bool gt_TimerEscapeExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_DefeatVoidseekerDestroyed, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimerEscapeExpires_Init () {
    gt_TimerEscapeExpires = TriggerCreate("gt_TimerEscapeExpires_Func");
    TriggerAddEventTimer(gt_TimerEscapeExpires, gv_timerEscape);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shield Impact Remove
//--------------------------------------------------------------------------------------------------
bool gt_ShieldImpactRemove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_actorShieldTransferImpactLocal;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_actorShieldTransferImpactLocal = gv_actorImpactShield;
    Wait(3.0, c_timeGame);
    libNtve_gf_KillModel(lv_actorShieldTransferImpactLocal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShieldImpactRemove_Init () {
    gt_ShieldImpactRemove = TriggerCreate("gt_ShieldImpactRemove_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Animate Shrine Trigger
//--------------------------------------------------------------------------------------------------
bool gt_AnimateShrineTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_shrine;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_shrine = gv_animatedShrine;
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_shrine), c_animNameDefault, "Stand Work", 0, c_animTimeDefault);
    SoundPlay(SoundLink("TemplarArchive_What", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(0.9, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_shrine), c_animNameDefault, "Stand Happy", c_animFlagPlayForever, c_animTimeDefault);
    Wait(13.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_shrine), c_animNameDefault, "Stand Work End", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AnimateShrineTrigger_Init () {
    gt_AnimateShrineTrigger = TriggerCreate("gt_AnimateShrineTrigger_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stalker Untargetable During Warp In
//--------------------------------------------------------------------------------------------------
bool gt_StalkerUntargetableDuringWarpIn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p2_ALLIED))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Stalker"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(EventUnit(), c_unitStateTargetable, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StalkerUntargetableDuringWarpIn_Init () {
    gt_StalkerUntargetableDuringWarpIn = TriggerCreate("gt_StalkerUntargetableDuringWarpIn_Func");
    TriggerAddEventUnitRegion(gt_StalkerUntargetableDuringWarpIn, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stalker Convert After Warp In
//--------------------------------------------------------------------------------------------------
bool gt_StalkerConvertAfterWarpIn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_p2_ALLIED))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "Stalker"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("UI_TerranRescueUnit", 0), PlayerGroupAll(), 100.0, 0.0);
    UnitSetState(EventUnitProgressUnit(), c_unitStateTargetable, true);
    libNtve_gf_RescueUnit(EventUnitProgressUnit(), gv_p1_USER, true);
    UnitFlashSelection(EventUnitProgressUnit(), 1.5);
    UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StalkerConvertAfterWarpIn_Init () {
    gt_StalkerConvertAfterWarpIn = TriggerCreate("gt_StalkerConvertAfterWarpIn_Func");
    TriggerAddEventUnitConstructProgress(gt_StalkerConvertAfterWarpIn, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stalker Color
//--------------------------------------------------------------------------------------------------
bool gt_StalkerColor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_p2_ALLIED))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "Stalker"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetTeamColorIndex(EventUnitProgressUnit(), 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StalkerColor_Init () {
    gt_StalkerColor = TriggerCreate("gt_StalkerColor_Func");
    TriggerAddEventUnitConstructProgress(gt_StalkerColor, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Is In Combat
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIsInCombat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == gv_p1_USER) || (UnitGetOwner(EventUnitTarget()) == gv_p1_USER)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCombatIndicator = 6;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIsInCombat_Init () {
    gt_PlayerIsInCombat = TriggerCreate("gt_PlayerIsInCombat_Func");
    TriggerAddEventUnitStartedAttack(gt_PlayerIsInCombat, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Is In Combat Indicator Diminish
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIsInCombatIndicatorDiminish_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_inCombatIndicator > 0)) {
        gv_inCombatIndicator = (gv_inCombatIndicator - 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIsInCombatIndicatorDiminish_Init () {
    gt_PlayerIsInCombatIndicatorDiminish = TriggerCreate("gt_PlayerIsInCombatIndicatorDiminish_Func");
    TriggerAddEventTimePeriodic(gt_PlayerIsInCombatIndicatorDiminish, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Patrol AI
//--------------------------------------------------------------------------------------------------
bool gt_PatrolAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0685ADAD_g;
    int auto0685ADAD_u;
    unit auto0685ADAD_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto0685ADAD_g = gv_patrollingZerg;
    auto0685ADAD_u = UnitGroupCount(auto0685ADAD_g, c_unitCountAll);
    for (;; auto0685ADAD_u -= 1) {
        auto0685ADAD_var = UnitGroupUnitFromEnd(auto0685ADAD_g, auto0685ADAD_u);
        if (auto0685ADAD_var == null) { break; }
        if ((UnitHasBehavior(auto0685ADAD_var, "ZeratulStun") == false) && (OrderGetAbilityCommand(UnitOrder(auto0685ADAD_var, 0)) != AbilityCommand("attack", 0)) && (OrderGetAbilityCommand(UnitOrder(auto0685ADAD_var, 0)) != AbilityCommand("move", 3)) && (OrderGetAbilityCommand(UnitOrder(auto0685ADAD_var, 0)) != AbilityCommand("move", 0))) {
            if ((UnitGetCustomValue(auto0685ADAD_var, 0) < UnitGetCustomValue(auto0685ADAD_var, 5))) {
                UnitSetCustomValue(auto0685ADAD_var, 0, (UnitGetCustomValue(auto0685ADAD_var, 0) + 0.5));
            }
            else {
                UnitSetCustomValue(auto0685ADAD_var, 0, 0.0);
                if ((DistanceBetweenPoints(UnitGetPosition(auto0685ADAD_var), Point(UnitGetCustomValue(auto0685ADAD_var, 1), UnitGetCustomValue(auto0685ADAD_var, 2))) <= DistanceBetweenPoints(UnitGetPosition(auto0685ADAD_var), Point(UnitGetCustomValue(auto0685ADAD_var, 3), UnitGetCustomValue(auto0685ADAD_var, 4))))) {
                    UnitIssueOrder(auto0685ADAD_var, OrderTargetingPoint(AbilityCommand("attack", 0), Point(UnitGetCustomValue(auto0685ADAD_var, 3), UnitGetCustomValue(auto0685ADAD_var, 4))), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(auto0685ADAD_var, OrderTargetingPoint(AbilityCommand("attack", 0), Point(UnitGetCustomValue(auto0685ADAD_var, 1), UnitGetCustomValue(auto0685ADAD_var, 2))), c_orderQueueReplace);
                }
                if ((UnitGetType(auto0685ADAD_var) == "Overseer")) {
                    UnitIssueOrder(auto0685ADAD_var, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PatrolAI_Init () {
    gt_PatrolAI = TriggerCreate("gt_PatrolAI_Func");
    TriggerAddEventTimePeriodic(gt_PatrolAI, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Issue Panic Order (Trigger)
//--------------------------------------------------------------------------------------------------
bool gt_IssuePanicOrderTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_angle;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = gv_panickedUnit;
    UnitBehaviorRemove(lv_unit, "InstallationZergWander", 1);
    UnitIssueOrder(lv_unit, Order(AbilityCommand("SpineCrawlerUproot", 0)), c_orderQueueReplace);
    UnitIssueOrder(lv_unit, Order(AbilityCommand("SporeCrawlerUproot", 0)), c_orderQueueReplace);
    lv_angle = AngleBetweenPoints(UnitGetPosition(gv_tHEONEZERATUL), UnitGetPosition(lv_unit));
    lv_angle = (lv_angle + RandomFixed(-20.0, 20.0));
    UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_unit), 10.0, lv_angle)), c_orderQueueReplace);
    Wait(RandomFixed(1.0, 1.5), c_timeGame);
    if ((UnitTypeTestAttribute(UnitGetType(lv_unit), c_unitAttributeStructure) == false)) {
        UnitGroupAdd(gv_panickedGroup, lv_unit);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IssuePanicOrderTrigger_Init () {
    gt_IssuePanicOrderTrigger = TriggerCreate("gt_IssuePanicOrderTrigger_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Panicked Unit Burrow AI
//--------------------------------------------------------------------------------------------------
bool gt_PanickedUnitBurrowAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8F47EB42_g;
    int auto8F47EB42_u;
    unit auto8F47EB42_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto8F47EB42_g = gv_panickedGroup;
    auto8F47EB42_u = UnitGroupCount(auto8F47EB42_g, c_unitCountAll);
    for (;; auto8F47EB42_u -= 1) {
        auto8F47EB42_var = UnitGroupUnitFromEnd(auto8F47EB42_g, auto8F47EB42_u);
        if (auto8F47EB42_var == null) { break; }
        UnitIssueOrder(auto8F47EB42_var, Order(AbilityCommand("BurrowZerglingDown", 0)), c_orderQueueReplace);
        if ((UnitIsValid(auto8F47EB42_var) == true) && (libNtve_gf_UnitIsVisibleToPlayer(auto8F47EB42_var, gv_p1_USER) == false) && (UnitIsAlive(auto8F47EB42_var) == true)) {
            UnitRemove(auto8F47EB42_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PanickedUnitBurrowAI_Init () {
    gt_PanickedUnitBurrowAI = TriggerCreate("gt_PanickedUnitBurrowAI_Func");
    TriggerAddEventTimePeriodic(gt_PanickedUnitBurrowAI, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Encircle Looping Sounds
//--------------------------------------------------------------------------------------------------
bool gt_ZergEncircleLoopingSounds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto236564A2_val;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        auto236564A2_val = RandomInt(0, 3);
        if (auto236564A2_val == 0) {
            SoundPlayAtPoint(SoundLink("Mutalisk_Attack", 0), PlayerGroupAll(), UnitGetPosition(gv_tHEONEZERATUL), 0.0, 100.0, 0.0);
        }
        else if (auto236564A2_val == 1) {
            SoundPlayAtPoint(SoundLink("Mutalisk_Attack", 2), PlayerGroupAll(), UnitGetPosition(gv_tHEONEZERATUL), 0.0, 100.0, 0.0);
        }
        else if (auto236564A2_val == 2) {
            SoundPlayAtPoint(SoundLink("Mutalisk_Attack", 3), PlayerGroupAll(), UnitGetPosition(gv_tHEONEZERATUL), 0.0, 100.0, 0.0);
        }
        else if (auto236564A2_val == 3) {
            SoundPlayAtPoint(SoundLink("Mutalisk_Attack", 4), PlayerGroupAll(), UnitGetPosition(gv_tHEONEZERATUL), 0.0, 100.0, 0.0);
        }
        else {
        }
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        Wait(RandomFixed(0.75, 1.5), c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergEncircleLoopingSounds_Init () {
    gt_ZergEncircleLoopingSounds = TriggerCreate("gt_ZergEncircleLoopingSounds_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Zeratul Hurt (Advanced)
//--------------------------------------------------------------------------------------------------
bool gt_AchievementZeratulHurtAdvanced_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Zeratul"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(gv_tHEONEZERATUL, c_unitPropLife, c_unitPropCurrent) < UnitGetPropertyFixed(gv_tHEONEZERATUL, c_unitPropLife, c_unitPropNormal))) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_achievementZeratulIsHurt = true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementZeratulHurtAdvanced_Init () {
    gt_AchievementZeratulHurtAdvanced = TriggerCreate("gt_AchievementZeratulHurtAdvanced_Func");
    TriggerAddEventUnitDamaged(gt_AchievementZeratulHurtAdvanced, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stalker Kill
//--------------------------------------------------------------------------------------------------
bool gt_StalkerKill_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(libNtve_gf_KillingUnit()) == "Stalker"))) {
            return false;
        }

        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != gv_p1_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_stat_StalkerKills += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StalkerKill_Init () {
    gt_StalkerKill = TriggerCreate("gt_StalkerKill_Func");
    TriggerAddEventUnitDied(gt_StalkerKill, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stalker Dies
//--------------------------------------------------------------------------------------------------
bool gt_StalkerDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Stalker"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_stat_StalkerDeaths += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StalkerDies_Init () {
    gt_StalkerDies = TriggerCreate("gt_StalkerDies_Func");
    TriggerAddEventUnitDied(gt_StalkerDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Void Seeker Rescue
//--------------------------------------------------------------------------------------------------
bool gt_VictoryVoidSeekerRescue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6EE1329F_g;
    int auto6EE1329F_u;
    unit auto6EE1329F_var;
    const int auto6543EFED_n = 5;
    int auto6543EFED_i;
    const int auto0FD1E15A_n = 3;
    int auto0FD1E15A_i;

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerPause(gv_runoutTimer, true);
    TimerPause(gv_timerEscape, true);
    libNtve_gf_CreateModelAtPoint("BlinkStopModel", UnitGetPosition(EventUnit()));
    SoundPlay(SoundLink("VoidSeeker_Load", -1), PlayerGroupAll(), 100.0, 0.0);
    if ((UnitGetType(EventUnit()) == "Stalker")) {
        gv_statSurvivingStalkers += 1;
    }

    if ((UnitGetType(EventUnit()) == "Zeratul")) {
        libNtve_gf_ShareVisionofUnit(gv_tHEONEVOIDSEEKER, true, gv_p1_USER);
        gv_statZeratulLifeRemaining += (UnitGetPropertyFixed(gv_tHEONEZERATUL, c_unitPropLife, c_unitPropNormal) - UnitGetPropertyFixed(gv_tHEONEZERATUL, c_unitPropLife, c_unitPropCurrent));
        libNtve_gf_ShowHideUnit(EventUnit(), false);
        TriggerStop(gt_ZergEncircleLoopingSounds);
        TriggerExecute(gt_VictoryAncestralRecallComplete, true, false);
        UnitKill(UnitFromId(192));
        auto6EE1329F_g = UnitGroup("Stalker", gv_p1_USER, RegionCircle(UnitGetPosition(gv_tHEONEVOIDSEEKER), 26.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto6EE1329F_u = UnitGroupCount(auto6EE1329F_g, c_unitCountAll);
        for (;; auto6EE1329F_u -= 1) {
            auto6EE1329F_var = UnitGroupUnitFromEnd(auto6EE1329F_g, auto6EE1329F_u);
            if (auto6EE1329F_var == null) { break; }
            libNtve_gf_CreateModelAtPoint("BlinkStopModel", UnitGetPosition(auto6EE1329F_var));
            SoundPlay(SoundLink("VoidSeeker_Load", -1), PlayerGroupAll(), 100.0, 0.0);
            gv_statSurvivingStalkers += 1;
            UnitRemove(auto6EE1329F_var);
        }
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_tHEONEVOIDSEEKER), c_animNameDefault, "Stand Work End", 0, c_animTimeDefault);
        libNtve_gf_UnitCreateFacingPoint(1, "Overseer", 0, gv_p3_ZERG, PointFromId(1742), PointFromId(381));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_tHEONEVOIDSEEKER)), c_orderQueueReplace);
        for (auto6543EFED_i = 1; auto6543EFED_i <= auto6543EFED_n; auto6543EFED_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, gv_p3_ZERG, PointFromId(1741), PointFromId(381));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(381)), c_orderQueueReplace);
        }
        for (auto0FD1E15A_i = 1; auto0FD1E15A_i <= auto0FD1E15A_n; auto0FD1E15A_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, gv_p3_ZERG, PointFromId(396), PointFromId(381));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(381)), c_orderQueueReplace);
        }
        Wait(2.0, c_timeReal);
        UnitSetPropertyFixed(gv_tHEONEVOIDSEEKER, c_unitPropMovementSpeed, 4.0);
        UnitSetHeight(gv_tHEONEVOIDSEEKER, 12.0, 8.0);
        UnitIssueOrder(gv_tHEONEVOIDSEEKER, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(381)), c_orderQueueReplace);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TZeratul01MusicOutro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        UnitBehaviorAdd(gv_tHEONEVOIDSEEKER, "PsytrousOxide", gv_tHEONEVOIDSEEKER, 1);
    }
    else {
        UnitRemove(EventUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryVoidSeekerRescue_Init () {
    gt_VictoryVoidSeekerRescue = TriggerCreate("gt_VictoryVoidSeekerRescue_Func");
    TriggerAddEventUnitRegion(gt_VictoryVoidSeekerRescue, null, RegionCircle(UnitGetPosition(UnitFromId(192)), 1.75), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Ancestral Recall Complete
//--------------------------------------------------------------------------------------------------
bool gt_VictoryAncestralRecallComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    PingDestroy(gv_tHEONEPING);
    TriggerExecute(gt_ObjectiveShrinesComplete, true, false);
    TriggerExecute(gt_ObjectiveZeratulComplete, true, false);
    TriggerExecute(gt_ObjectiveVoidSeekerComplete, true, false);
    Wait(1.0, c_timeReal);
    libCamp_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryAncestralRecallComplete_Init () {
    gt_VictoryAncestralRecallComplete = TriggerCreate("gt_VictoryAncestralRecallComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_stat_ZeratulKills = libNtve_gf_UnitGetPropertyKills(gv_tHEONEZERATUL, c_unitPropCurrent);
    if ((ObjectiveGetState(gv_objectiveHatcheries) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveShrinesGetToShrines) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveShrinesZeratulMustSurvive) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveShrinesZeratulPlusVoidseekerEqualsWin) == c_objectiveStateCompleted)) {
        AchievementAward(gv_p1_USER, "TZeratul01_1");
    }

    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_statSurvivingStalkers >= 3)) {
        AchievementAward(gv_p1_USER, "TZeratul01_2");
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1) && (gv_achievementZeratulIsHurt == false)) {
        AchievementAward(gv_p1_USER, "TZeratul01_3");
    }

    VictoryPanelAddAchievement("TZeratul01_1");
    VictoryPanelAddAchievement("TZeratul01_2");
    VictoryPanelAddAchievement("TZeratul01_3");
    VictoryPanelSetRewardTitle(StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/2BB00C27"), IntToText(gv_stat_ZeratulKills));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/7458D655"), IntToText(gv_stat_StalkerKills));
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/91B6C5D7"), IntToText(gv_statSurvivingStalkers));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/A0EF167A"), FixedToText(gv_statZeratulLifeRemaining, c_fixedPrecisionAny));
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/36134EE4"), (IntToText(gv_objectiveHatcheriesKilled) + StringExternal("Param/Value/1E85CAB4") + IntToText(gv_objectiveHatcheriesQuota)));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/E8417A3D"), IntToText(gv_objectiveHatcheriesKilled));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/AFCDA973"), StringExternal("Param/Value/42F05C91"));
    libCamp_gf_EndCampaignMission(gv_p1_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Zeratul Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatZeratulDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_tHEONEZERATUL))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerPause(gv_timerEscape, true);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueKill);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/342E01DB"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatZeratulDead_Init () {
    gt_DefeatZeratulDead = TriggerCreate("gt_DefeatZeratulDead_Func");
    TriggerAddEventUnitDied(gt_DefeatZeratulDead, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Voidseeker Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatVoidseekerDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitKill(gv_tHEONEVOIDSEEKER);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueKill);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/A41109B7"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatVoidseekerDestroyed_Init () {
    gt_DefeatVoidseekerDestroyed = TriggerCreate("gt_DefeatVoidseekerDestroyed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_EndCampaignMission(gv_p1_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    libCamp_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_p1_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_p1_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery01 Dies
//--------------------------------------------------------------------------------------------------
bool gt_Hatchery01Dies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == UnitFromId(28)))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCamp_gf_DisplayResearchPointsGiventoPlayer(libCamp_ge_StoryResearchObject_ResearchObjectDestroyHatcheries, EventUnit(), gv_p1_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hatchery01Dies_Init () {
    gt_Hatchery01Dies = TriggerCreate("gt_Hatchery01Dies_Func");
    TriggerAddEventUnitDied(gt_Hatchery01Dies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery02 Dies
//--------------------------------------------------------------------------------------------------
bool gt_Hatchery02Dies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == UnitFromId(205)))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCamp_gf_DisplayResearchPointsGiventoPlayer(libCamp_ge_StoryResearchObject_ResearchObjectDestroyHatcheries, EventUnit(), gv_p1_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hatchery02Dies_Init () {
    gt_Hatchery02Dies = TriggerCreate("gt_Hatchery02Dies_Func");
    TriggerAddEventUnitDied(gt_Hatchery02Dies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery03 Dies
//--------------------------------------------------------------------------------------------------
bool gt_Hatchery03Dies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == UnitFromId(445)))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCamp_gf_DisplayResearchPointsGiventoPlayer(libCamp_ge_StoryResearchObject_ResearchObjectDestroyHatcheries, EventUnit(), gv_p1_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hatchery03Dies_Init () {
    gt_Hatchery03Dies = TriggerCreate("gt_Hatchery03Dies_Func");
    TriggerAddEventUnitDied(gt_Hatchery03Dies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shrine01
//--------------------------------------------------------------------------------------------------
bool gt_Shrine01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCamp_gf_DisplayResearchPointsGiventoPlayer(libCamp_ge_StoryResearchObject_ResearchObjectVisittheShrines, UnitFromId(1561), gv_p1_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Shrine01_Init () {
    gt_Shrine01 = TriggerCreate("gt_Shrine01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shrine02
//--------------------------------------------------------------------------------------------------
bool gt_Shrine02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCamp_gf_DisplayResearchPointsGiventoPlayer(libCamp_ge_StoryResearchObject_ResearchObjectVisittheShrines, UnitFromId(1406), gv_p1_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Shrine02_Init () {
    gt_Shrine02 = TriggerCreate("gt_Shrine02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shrine03
//--------------------------------------------------------------------------------------------------
bool gt_Shrine03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCamp_gf_DisplayResearchPointsGiventoPlayer(libCamp_ge_StoryResearchObject_ResearchObjectVisittheShrines, UnitFromId(1563), gv_p1_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Shrine03_Init () {
    gt_Shrine03 = TriggerCreate("gt_Shrine03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Shrines Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveShrinesCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveCreate((StringExternal("Param/Value/86C2E2F2") + IntToText(gv_obejctiveShrinesUpdate) + StringExternal("Param/Value/621B506C") + IntToText(gv_obejctiveShrinesTotal) + StringExternal("Param/Value/200BBF65")), StringExternal("Param/Value/31F725B7"), c_objectiveStateActive, true);
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TZeratul01Objective1, ObjectiveLastCreated(), StringExternal("Param/Value/715FB01E"));
    gv_objectiveShrinesGetToShrines = ObjectiveLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveShrinesCreate_Init () {
    gt_ObjectiveShrinesCreate = TriggerCreate("gt_ObjectiveShrinesCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Shrines Discover Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveShrinesDiscoverQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveShrinesCreate, true, false);
    TriggerQueueEnter();
    Wait(3.0, c_timeGame);
    PingCreate(PlayerGroupSingle(gv_p1_USER), "PingObjective", UnitGetPosition(UnitFromId(1561)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/0BF6BD2F"));
    gv_tHEONEPING = PingLastCreated();
    libNtve_gf_ShareVisionofUnit(UnitFromId(73), true, gv_p1_USER);
    VisRevealArea(1, RegionFromId(100), 0.1, false);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveShrinesDiscoverQ_Init () {
    gt_ObjectiveShrinesDiscoverQ = TriggerCreate("gt_ObjectiveShrinesDiscoverQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Shrines Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveShrinesComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveShrinesCreate, true, false);
    ObjectiveSetState(gv_objectiveShrinesGetToShrines, c_objectiveStateCompleted);
    ObjectiveSetState(gv_objectiveShrinesZeratulPlusVoidseekerEqualsWin, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveShrinesComplete_Init () {
    gt_ObjectiveShrinesComplete = TriggerCreate("gt_ObjectiveShrinesComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Shrine Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveShrineFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveShrinesCreate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveShrineFailed_Init () {
    gt_ObjectiveShrineFailed = TriggerCreate("gt_ObjectiveShrineFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Shrines Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveShrinesUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveShrinesCreate, true, false);
    gv_obejctiveShrinesUpdate += 1;
    ObjectiveSetName(gv_objectiveShrinesGetToShrines, (StringExternal("Param/Value/91F5681E") + IntToText(gv_obejctiveShrinesUpdate) + StringExternal("Param/Value/8630B5F7") + (IntToText(gv_obejctiveShrinesTotal)) + StringExternal("Param/Value/AC8D29D7")));
    if ((gv_obejctiveShrinesUpdate == gv_obejctiveShrinesTotal) && (libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_stat_StalkerDeaths <= 0)) {
        AchievementAward(gv_p1_USER, "Anniversary_TZeratul01");
        TriggerDebugOutput(1, StringExternal("Param/Value/5C0AC0C0"), false);
    }

    if ((gv_obejctiveShrinesUpdate == gv_obejctiveShrinesTotal)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_ObjectiveShrinesComplete, true, false);
    }
    else {
        Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveShrinesUpdate_Init () {
    gt_ObjectiveShrinesUpdate = TriggerCreate("gt_ObjectiveShrinesUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Zeratul Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveZeratulCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveCreate(StringExternal("Param/Value/2BCA340D"), StringExternal("Param/Value/F232EEE4"), c_objectiveStateActive, true);
    gv_objectiveShrinesZeratulMustSurvive = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TZeratul01Objective2, ObjectiveLastCreated(), StringExternal("Param/Value/230D7A69"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveZeratulCreate_Init () {
    gt_ObjectiveZeratulCreate = TriggerCreate("gt_ObjectiveZeratulCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Zeratul Discover
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveZeratulDiscover_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveZeratulCreate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveZeratulDiscover_Init () {
    gt_ObjectiveZeratulDiscover = TriggerCreate("gt_ObjectiveZeratulDiscover_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Zeratul Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveZeratulComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveZeratulCreate, true, false);
    ObjectiveSetState(gv_objectiveShrinesZeratulMustSurvive, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveZeratulComplete_Init () {
    gt_ObjectiveZeratulComplete = TriggerCreate("gt_ObjectiveZeratulComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Hatcheries Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHatcheriesCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveCreate((StringExternal("Param/Value/4AB86D3F") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectDestroyHatcheries, libCamp_ge_StoryResearchObjectiveTextStyle_Multipart, 3, 0)), StringExternal("Param/Value/7980C88D"), c_objectiveStateActive, false);
    gv_objectiveHatcheries = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TZeratul01Objective3, ObjectiveLastCreated(), StringExternal("Param/Value/886B196A"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHatcheriesCreate_Init () {
    gt_ObjectiveHatcheriesCreate = TriggerCreate("gt_ObjectiveHatcheriesCreate_Func");
    TriggerAddEventUnitRegion(gt_ObjectiveHatcheriesCreate, null, RegionFromId(19), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Hatcheries Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHatcheriesCompleteQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveHatcheriesCreate, true, false);
    ObjectiveSetState(gv_objectiveHatcheries, c_objectiveStateCompleted);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul01Zeratul00043", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul01Zeratul00043", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHatcheriesCompleteQ_Init () {
    gt_ObjectiveHatcheriesCompleteQ = TriggerCreate("gt_ObjectiveHatcheriesCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Hatcheries Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHatcheriesDestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_objectiveHatcheriesKilled += 1;
    ObjectiveSetName(gv_objectiveHatcheries, (StringExternal("Param/Value/4CDC5CA3") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectDestroyHatcheries, libCamp_ge_StoryResearchObjectiveTextStyle_Multipart, 3, gv_objectiveHatcheriesKilled)));
    if ((gv_objectiveHatcheriesKilled == gv_objectiveHatcheriesQuota)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_ObjectiveHatcheriesCompleteQ, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHatcheriesDestroyedQ_Init () {
    gt_ObjectiveHatcheriesDestroyedQ = TriggerCreate("gt_ObjectiveHatcheriesDestroyedQ_Func");
    TriggerAddEventUnitDied(gt_ObjectiveHatcheriesDestroyedQ, UnitRefFromUnit(UnitFromId(28)));
    TriggerAddEventUnitDied(gt_ObjectiveHatcheriesDestroyedQ, UnitRefFromUnit(UnitFromId(445)));
    TriggerAddEventUnitDied(gt_ObjectiveHatcheriesDestroyedQ, UnitRefFromUnit(UnitFromId(205)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Void Seeker Objectives Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveVoidSeekerObjectivesQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_unitGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/1B29F485"), StringExternal("Param/Value/231814B5"), c_objectiveStateActive, true);
    gv_objectiveShrinesZeratulPlusVoidseekerEqualsWin = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TZeratul01EscapetotheVoidSeeker, ObjectiveLastCreated(), StringExternal("Param/Value/2704B23B"));
    Wait(1.0, c_timeReal);
    TriggerExecute(gt_DialogueGetToVoidSeeker, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveVoidSeekerObjectivesQ_Init () {
    gt_ObjectiveVoidSeekerObjectivesQ = TriggerCreate("gt_ObjectiveVoidSeekerObjectivesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Void Seeker Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveVoidSeekerComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveVoidSeekerObjectivesQ, true, false);
    ObjectiveSetState(gv_objectiveShrinesZeratulPlusVoidseekerEqualsWin, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveVoidSeekerComplete_Init () {
    gt_ObjectiveVoidSeekerComplete = TriggerCreate("gt_ObjectiveVoidSeekerComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DialogueGetToVoid Seeker
//--------------------------------------------------------------------------------------------------
bool gt_DialogueGetToVoidSeeker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul01Zeratul00063", 0)
    libCamp_gf_SendTransmissionCampaign(gv_tHEONEZERATUL, SoundLink("TZeratul01Zeratul00063", -1), c_transmissionDurationAdd, 1.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueGetToVoidSeeker_Init () {
    gt_DialogueGetToVoidSeeker = TriggerCreate("gt_DialogueGetToVoidSeeker_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_unitGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_StartGame);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    gv_inCinematic = true;
    gv_gameOver = true;
    GameTimeOfDayPause(true);
    CreepSetSpeed(c_creepSpeedDecay, 1000.0);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    TriggerExecute(gt_BriefingScene00, true, true);
    UnitPauseAll(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto81C06B55_g;
    int auto81C06B55_u;
    unit auto81C06B55_var;
    unitgroup auto3BC90683_g;
    int auto3BC90683_u;
    unit auto3BC90683_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    auto81C06B55_g = UnitGroup(null, gv_p3_ZERG, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto81C06B55_u = UnitGroupCount(auto81C06B55_g, c_unitCountAll);
    for (;; auto81C06B55_u -= 1) {
        auto81C06B55_var = UnitGroupUnitFromEnd(auto81C06B55_g, auto81C06B55_u);
        if (auto81C06B55_var == null) { break; }
        UnitRemove(auto81C06B55_var);
    }
    auto3BC90683_g = UnitGroup(null, gv_p4_RUNOUT_ZERG, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3BC90683_u = UnitGroupCount(auto3BC90683_g, c_unitCountAll);
    for (;; auto3BC90683_u -= 1) {
        auto3BC90683_var = UnitGroupUnitFromEnd(auto3BC90683_g, auto3BC90683_u);
        if (auto3BC90683_var == null) { break; }
        UnitRemove(auto3BC90683_var);
    }
    UnitRemove(UnitFromId(1560));
    UnitRemove(UnitFromId(192));
    libNtve_gf_CreateUnitsAtPoint2(1, "VoidSeeker", 0, gv_p1_USER, PointFromId(858));
    gv_briefingVoidSeeker = UnitLastCreated();
    UnitIssueOrder(gv_briefingVoidSeeker, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1854)), c_orderQueueReplace);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(1859), 0.0, -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(1858), (SoundLengthSync(SoundLink("TZeratul01BriefingZeratul00004", -1)) - 0.0), -1, 10, true);
    MovieStartRecording("Briefing_Video_TZeratul01_00");
    TriggerExecute(gt_BriefingVoidSeekerAnimations, true, false);
    SoundPlay(SoundLink("TZeratul01BriefingZeratul00004", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TZeratul01BriefingZeratul00004", -1))), c_timeGame);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(1860), (SoundLengthSync(SoundLink("TZeratul01BriefingZeratul00009", -1)) - 0.0), -1, 10, true);
    TriggerExecute(gt_BriefingZeratulUnload, true, false);
    SoundPlay(SoundLink("TZeratul01BriefingZeratul00009", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TZeratul01BriefingZeratul00009", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TZeratul01BriefingZeratul00004", -1))), c_timeGame);
    Wait((0.5 * SoundLengthSync(SoundLink("TZeratul01BriefingZeratul00009", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00_Init () {
    gt_BriefingScene00 = TriggerCreate("gt_BriefingScene00_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Void Seeker Animations
//--------------------------------------------------------------------------------------------------
bool gt_BriefingVoidSeekerAnimations_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_briefingVoidSeeker), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(4.667, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_briefingVoidSeeker), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingVoidSeekerAnimations_Init () {
    gt_BriefingVoidSeekerAnimations = TriggerCreate("gt_BriefingVoidSeekerAnimations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Zeratul Unload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingZeratulUnload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zeratul", 0, gv_p1_USER, PointFromId(390));
    UnitBehaviorAdd(UnitLastCreated(), "SuppressCloak", UnitLastCreated(), 1);
    UnitSetScale(UnitLastCreated(), 130.0, 130.0, 130.0);
    libNtve_gf_CreateModelAtPoint("ZeratulBlinkIn", PointFromId(390));
    Wait(1.0, c_timeGame);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(395)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingZeratulUnload_Init () {
    gt_BriefingZeratulUnload = TriggerCreate("gt_BriefingZeratulUnload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic - Karass Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_CinematicKarassMidQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_CinematicKarassMidSetup, true, true);
    TriggerExecute(gt_CinematicKarassMidCinematic, true, true);
    TriggerExecute(gt_CinematicKarassMidCinematicEnd, true, true);
    TriggerExecute(gt_CinematicKarassMidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicKarassMidQ_Init () {
    gt_CinematicKarassMidQ = TriggerCreate("gt_CinematicKarassMidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic - Karass Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_CinematicKarassMidSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto622149AA_g;
    int auto622149AA_u;
    unit auto622149AA_var;
    unitgroup auto6B245242_g;
    int auto6B245242_u;
    unit auto6B245242_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_p1_USER);
    libNtve_gf_StoreUnitSelection(gv_p1_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    TechTreeAbilityAllow(1, AbilityCommand("ZeratulBlink", 0), true);
    TechTreeAbilityAllow(1, AbilityCommand("ZeratulStun", 0), true);
    TriggerEnable(gt_CrawlersDestroyedQ, false);
    PingDestroy(gv_tHEONEPING);
    CreepModify(PointFromId(1708), 15.0, false, false);
    UnitPauseAll(true);
    gv_cinematicKarassMidHiddenUnitGroup = UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto622149AA_g = gv_cinematicKarassMidHiddenUnitGroup;
    auto622149AA_u = UnitGroupCount(auto622149AA_g, c_unitCountAll);
    for (;; auto622149AA_u -= 1) {
        auto622149AA_var = UnitGroupUnitFromEnd(auto622149AA_g, auto622149AA_u);
        if (auto622149AA_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto622149AA_var, false);
    }
    auto6B245242_g = UnitGroup("Zealot", gv_p2_ALLIED, RegionFromId(116), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto6B245242_u = UnitGroupCount(auto6B245242_g, c_unitCountAll);
    for (;; auto6B245242_u -= 1) {
        auto6B245242_var = UnitGroupUnitFromEnd(auto6B245242_g, auto6B245242_u);
        if (auto6B245242_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto6B245242_var, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicKarassMidSetup_Init () {
    gt_CinematicKarassMidSetup = TriggerCreate("gt_CinematicKarassMidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic - Karass Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_CinematicKarassMidCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_cinematicZeratul;
    unit lv_cinematicKarass;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(108), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(119), 15.0, -1, 10, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zeratul", 0, gv_p1_USER, PointFromId(386));
    UnitBehaviorAdd(UnitLastCreated(), "SuppressCloak", UnitLastCreated(), 1);
    UnitGroupAdd(gv_cinematicKarassActors, UnitLastCreated());
    lv_cinematicZeratul = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "Karass", 0, gv_p2_ALLIED, PointFromId(110));
    UnitGroupAdd(gv_cinematicKarassActors, UnitLastCreated());
    lv_cinematicKarass = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "WarpPrism", 0, gv_p2_ALLIED, PointFromId(1709));
    gv_cinematicKarassPrism1 = UnitLastCreated();
    UnitGroupAdd(gv_cinematicKarassActors, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1710)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "WarpPrism", 0, gv_p2_ALLIED, PointFromId(355));
    gv_cinematicKarassPrism2 = UnitLastCreated();
    UnitGroupAdd(gv_cinematicKarassActors, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(356)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
    TriggerExecute(gt_CinematicKarassCoolWarpIn, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicKarassMidCinematicCompleted = false;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TZeratul01MusicEventB", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    // Transmission - SoundLink("TZeratul01Karass00053", 0)
    libCamp_gf_SendTransmissionCampaign(lv_cinematicKarass, SoundLink("TZeratul01Karass00053", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TZeratul01Karass00066", 0)
    libCamp_gf_SendTransmissionCampaign(lv_cinematicKarass, SoundLink("TZeratul01Karass00066", 0), c_transmissionDurationAdd, 0.0, true);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_CinematicKarassCameraWork, true, false);
    // Transmission - SoundLink("TZeratul01Zeratul00054", 0)
    libCamp_gf_SendTransmissionCampaign(lv_cinematicZeratul, SoundLink("TZeratul01Zeratul00054", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TZeratul01Karass00055", 0)
    libCamp_gf_SendTransmissionCampaign(lv_cinematicKarass, SoundLink("TZeratul01Karass00055", 0), c_transmissionDurationAdd, 0.0, true);
    gv_cinematicKarassMidCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicKarassMidCinematic_Init () {
    gt_CinematicKarassMidCinematic = TriggerCreate("gt_CinematicKarassMidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic - Karass Camera Work
//--------------------------------------------------------------------------------------------------
bool gt_CinematicKarassCameraWork_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(689), 6.0, -1, 10, true);
    Wait(5.0, c_timeGame);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(700), 6.0, -1, 10, true);
    Wait(5.0, c_timeGame);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(705), 6.0, -1, 10, true);
    Wait(5.0, c_timeGame);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(719), 6.0, -1, 10, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicKarassCameraWork_Init () {
    gt_CinematicKarassCameraWork = TriggerCreate("gt_CinematicKarassCameraWork_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic - Karass Cool Warp In
//--------------------------------------------------------------------------------------------------
bool gt_CinematicKarassCoolWarpIn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto201C0F32_n = 10;
    int auto201C0F32_i;

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((RegionContainsPoint(RegionCircle(PointFromId(1710), 1.0), UnitGetPosition(gv_cinematicKarassPrism1)) == true) && (RegionContainsPoint(RegionCircle(PointFromId(356), 1.0), UnitGetPosition(gv_cinematicKarassPrism2)) == true))) {
        Wait(0.1, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    for (auto201C0F32_i = 1; auto201C0F32_i <= auto201C0F32_n; auto201C0F32_i += 1) {
        if ((libNtve_gf_RandomPercent() >= 50.0)) {
            UnitIssueOrder(UnitFromId(326), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(1710)), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(UnitFromId(326), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(356)), c_orderQueueReplace);
        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicKarassCoolWarpIn_Init () {
    gt_CinematicKarassCoolWarpIn = TriggerCreate("gt_CinematicKarassCoolWarpIn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic - Karass Cool Warp In Unit Group
//--------------------------------------------------------------------------------------------------
bool gt_CinematicKarassCoolWarpInUnitGroup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_p2_ALLIED))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "Zealot"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_cinematicKarassActors, EventUnitProgressUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicKarassCoolWarpInUnitGroup_Init () {
    gt_CinematicKarassCoolWarpInUnitGroup = TriggerCreate("gt_CinematicKarassCoolWarpInUnitGroup_Func");
    TriggerAddEventUnitConstructProgress(gt_CinematicKarassCoolWarpInUnitGroup, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic - Karass Cool Warp In Movement
//--------------------------------------------------------------------------------------------------
bool gt_CinematicKarassCoolWarpInMovement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_p2_ALLIED))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "Zealot"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnitProgressUnit(), OrderTargetingPoint(AbilityCommand("move", 0), gv_cinematicKarassZealotRally), c_orderQueueReplace);
    gv_cinematicKarassZealotRally = PointWithOffsetPolar(gv_cinematicKarassZealotRally, 1.5, AngleBetweenPoints(PointFromId(189), PointFromId(1712)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicKarassCoolWarpInMovement_Init () {
    gt_CinematicKarassCoolWarpInMovement = TriggerCreate("gt_CinematicKarassCoolWarpInMovement_Func");
    TriggerAddEventUnitConstructProgress(gt_CinematicKarassCoolWarpInMovement, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic - Karass Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_CinematicKarassMidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicKarassMidCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicKarassMidCinematicEnd_Init () {
    gt_CinematicKarassMidCinematicEnd = TriggerCreate("gt_CinematicKarassMidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic - Karass Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_CinematicKarassMidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto3AB264AA_g;
    int auto3AB264AA_u;
    unit auto3AB264AA_var;
    unitgroup auto48EA5FDC_g;
    int auto48EA5FDC_u;
    unit auto48EA5FDC_var;
    unitgroup autoE79A17EC_g;
    int autoE79A17EC_u;
    unit autoE79A17EC_var;
    unitgroup auto7910592F_g;
    int auto7910592F_u;
    unit auto7910592F_var;
    unitgroup auto20129651_g;
    int auto20129651_u;
    unit auto20129651_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_CinematicKarassCameraWork);
    TriggerStop(gt_CinematicKarassCoolWarpIn);
    auto3AB264AA_g = gv_cinematicKarassActors;
    auto3AB264AA_u = UnitGroupCount(auto3AB264AA_g, c_unitCountAll);
    for (;; auto3AB264AA_u -= 1) {
        auto3AB264AA_var = UnitGroupUnitFromEnd(auto3AB264AA_g, auto3AB264AA_u);
        if (auto3AB264AA_var == null) { break; }
        UnitRemove(auto3AB264AA_var);
    }
    auto48EA5FDC_g = gv_cinematicKarassMidHiddenUnitGroup;
    auto48EA5FDC_u = UnitGroupCount(auto48EA5FDC_g, c_unitCountAll);
    for (;; auto48EA5FDC_u -= 1) {
        auto48EA5FDC_var = UnitGroupUnitFromEnd(auto48EA5FDC_g, auto48EA5FDC_u);
        if (auto48EA5FDC_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto48EA5FDC_var, true);
    }
    autoE79A17EC_g = gv_karassZealots;
    autoE79A17EC_u = UnitGroupCount(autoE79A17EC_g, c_unitCountAll);
    for (;; autoE79A17EC_u -= 1) {
        autoE79A17EC_var = UnitGroupUnitFromEnd(autoE79A17EC_g, autoE79A17EC_u);
        if (autoE79A17EC_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoE79A17EC_var, true);
    }
    libNtve_gf_ShowHideUnit(UnitFromId(483), true);
    UnitPauseAll(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, true);
    libNtve_gf_RestoreUnitSelection(gv_p1_USER);
    CameraApplyInfo(gv_p1_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Karass", false, gv_p1_USER);
    auto7910592F_g = UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7910592F_u = UnitGroupCount(auto7910592F_g, c_unitCountAll);
    for (;; auto7910592F_u -= 1) {
        auto7910592F_var = UnitGroupUnitFromEnd(auto7910592F_g, auto7910592F_u);
        if (auto7910592F_var == null) { break; }
        UnitSetPropertyFixed(auto7910592F_var, c_unitPropShieldsPercent, 100.0);
    }
    UnitSetPosition(gv_tHEONEZERATUL, PointFromId(94), false);
    auto20129651_g = UnitGroup("Stalker", gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto20129651_u = UnitGroupCount(auto20129651_g, c_unitCountAll);
    for (;; auto20129651_u -= 1) {
        auto20129651_var = UnitGroupUnitFromEnd(auto20129651_g, auto20129651_u);
        if (auto20129651_var == null) { break; }
        UnitSetPosition(auto20129651_var, PointFromId(95), false);
    }
    if ((gv_cinematicKarassMidCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_p1_USER, 42.0, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(854), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/36A1A43A"));
    gf_RefreshPlayersHPandShields();
    TriggerExecute(gt_RumbleInit, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicKarassMidCleanup_Init () {
    gt_CinematicKarassMidCleanup = TriggerCreate("gt_CinematicKarassMidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic - Kerrigan Q
//--------------------------------------------------------------------------------------------------
bool gt_CinematicKerriganQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_CinematicKerriganSetup, true, true);
    TriggerExecute(gt_CinematicKerriganCinematic, true, true);
    TriggerExecute(gt_CinematicKerriganCinematicEnd, true, true);
    TriggerExecute(gt_CinematicKerriganCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicKerriganQ_Init () {
    gt_CinematicKerriganQ = TriggerCreate("gt_CinematicKerriganQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic - Kerrigan Setup
//--------------------------------------------------------------------------------------------------
bool gt_CinematicKerriganSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_cleanupunitgroup;

    // Automatic Variable Declarations
    unitgroup auto7AF87B14_g;
    int auto7AF87B14_u;
    unit auto7AF87B14_var;
    unitgroup auto86D189BC_g;
    int auto86D189BC_u;
    unit auto86D189BC_var;
    unitgroup auto7DD123FB_g;
    int auto7DD123FB_u;
    unit auto7DD123FB_var;
    unitgroup auto01C0C9AB_g;
    int auto01C0C9AB_u;
    unit auto01C0C9AB_var;
    unitgroup auto14AE8928_g;
    int auto14AE8928_u;
    unit auto14AE8928_var;
    unitgroup autoCA234265_g;
    int autoCA234265_u;
    unit autoCA234265_var;

    // Variable Initialization
    lv_cleanupunitgroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_p1_USER);
    libNtve_gf_StoreUnitSelection(gv_p1_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    TechTreeAbilityAllow(1, AbilityCommand("ZeratulBlink", 0), true);
    TechTreeAbilityAllow(1, AbilityCommand("ZeratulStun", 0), true);
    TriggerEnable(gt_StunnedUltraliskQ, false);
    TriggerEnable(gt_RumbleFinish, false);
    TriggerEnable(gt_AntiAirRequestQ, false);
    TriggerEnable(gt_NydusSpawning, false);
    TriggerEnable(gt_KarassKilledBeforeRunoutQ, false);
    auto7AF87B14_g = UnitGroup("WarpPrismPhasing", gv_p2_ALLIED, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7AF87B14_u = UnitGroupCount(auto7AF87B14_g, c_unitCountAll);
    for (;; auto7AF87B14_u -= 1) {
        auto7AF87B14_var = UnitGroupUnitFromEnd(auto7AF87B14_g, auto7AF87B14_u);
        if (auto7AF87B14_var == null) { break; }
        UnitRemove(auto7AF87B14_var);
    }
    auto86D189BC_g = UnitGroup("WarpPrism", gv_p2_ALLIED, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto86D189BC_u = UnitGroupCount(auto86D189BC_g, c_unitCountAll);
    for (;; auto86D189BC_u -= 1) {
        auto86D189BC_var = UnitGroupUnitFromEnd(auto86D189BC_g, auto86D189BC_u);
        if (auto86D189BC_var == null) { break; }
        UnitRemove(auto86D189BC_var);
    }
    auto7DD123FB_g = UnitGroup("Zealot", gv_p2_ALLIED, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7DD123FB_u = UnitGroupCount(auto7DD123FB_g, c_unitCountAll);
    for (;; auto7DD123FB_u -= 1) {
        auto7DD123FB_var = UnitGroupUnitFromEnd(auto7DD123FB_g, auto7DD123FB_u);
        if (auto7DD123FB_var == null) { break; }
        UnitSetPosition(auto7DD123FB_var, RegionRandomPoint(RegionFromId(118)), true);
        libNtve_gf_MakeUnitFacePoint(auto7DD123FB_var, PointFromId(1724), 0.0);
    }
    auto01C0C9AB_g = UnitGroup("Stalker", gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto01C0C9AB_u = UnitGroupCount(auto01C0C9AB_g, c_unitCountAll);
    for (;; auto01C0C9AB_u -= 1) {
        auto01C0C9AB_var = UnitGroupUnitFromEnd(auto01C0C9AB_g, auto01C0C9AB_u);
        if (auto01C0C9AB_var == null) { break; }
        UnitSetPosition(auto01C0C9AB_var, RegionRandomPoint(RegionFromId(119)), true);
        UnitIssueOrder(auto01C0C9AB_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        libNtve_gf_MakeUnitFacePoint(auto01C0C9AB_var, PointFromId(1724), 0.0);
    }
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_p3_ZERG, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterHidden - 32))), 0), lv_cleanupunitgroup);
    auto14AE8928_g = lv_cleanupunitgroup;
    auto14AE8928_u = UnitGroupCount(auto14AE8928_g, c_unitCountAll);
    for (;; auto14AE8928_u -= 1) {
        auto14AE8928_var = UnitGroupUnitFromEnd(auto14AE8928_g, auto14AE8928_u);
        if (auto14AE8928_var == null) { break; }
        UnitRemove(auto14AE8928_var);
    }
    CreepModify(PointFromId(1642), 15.0, false, false);
    CreepModify(PointFromId(1643), 15.0, false, false);
    CreepModify(PointFromId(1644), 15.0, false, false);
    UnitGroupClear(lv_cleanupunitgroup);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_p4_RUNOUT_ZERG, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterHidden - 32))), 0), lv_cleanupunitgroup);
    autoCA234265_g = lv_cleanupunitgroup;
    autoCA234265_u = UnitGroupCount(autoCA234265_g, c_unitCountAll);
    for (;; autoCA234265_u -= 1) {
        autoCA234265_var = UnitGroupUnitFromEnd(autoCA234265_g, autoCA234265_u);
        if (autoCA234265_var == null) { break; }
        UnitSetOwner(autoCA234265_var, gv_p3_ZERG, true);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "Zeratul", 0, gv_p1_USER, PointFromId(1724));
    UnitBehaviorAdd(UnitLastCreated(), "SuppressCloak", UnitLastCreated(), 1);
    UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    gv_cinematicKerriganIntroZeratul = UnitLastCreated();
    libNtve_gf_PauseUnit(gv_tHEONEZERATUL, true);
    libNtve_gf_ShowHideUnit(gv_tHEONEZERATUL, false);
    if ((UnitIsAlive(gv_tHEONEKARASS) == true)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Karass", 0, gv_p2_ALLIED, PointFromId(517));
        UnitSetTeamColorIndex(UnitLastCreated(), 6);
        UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
        gv_cinematicKerriganIntroKarass = UnitLastCreated();
        libNtve_gf_PauseUnit(gv_tHEONEKARASS, true);
        libNtve_gf_ShowHideUnit(gv_tHEONEKARASS, false);
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "KerriganChar", 0, gv_p3_ZERG, PointFromId(1278));
    UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    gv_tHEONEKERRIGAN = UnitLastCreated();
    UnitBehaviorAdd(gv_tHEONEKERRIGAN, "KerriganWalk", gv_tHEONEKERRIGAN, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicKerriganSetup_Init () {
    gt_CinematicKerriganSetup = TriggerCreate("gt_CinematicKerriganSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic - Kerrigan Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_CinematicKerriganCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto29703D22_g;
    int auto29703D22_u;
    unit auto29703D22_var;
    unitgroup autoD0C316A3_g;
    int autoD0C316A3_u;
    unit autoD0C316A3_var;
    unitgroup auto0F3F8F90_g;
    int auto0F3F8F90_u;
    unit auto0F3F8F90_var;
    unitgroup auto773FAE75_g;
    int auto773FAE75_u;
    unit auto773FAE75_var;
    unitgroup autoD1823E42_g;
    int autoD1823E42_u;
    unit autoD1823E42_var;
    unitgroup auto534A9AE8_g;
    int auto534A9AE8_u;
    unit auto534A9AE8_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(gv_cinematicKerriganIntroZeratul, "Read", gv_cinematicKerriganIntroZeratul, 1);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(5), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(721), SoundLengthSync(SoundLink("TZeratul01Karass00055", 0)), -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicKerriganIntroCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UnitBehaviorRemove(gv_cinematicKerriganIntroZeratul, "Read", 1);
    SoundPlay(SoundLink("HighTemplar_PlasmaSurge", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TZeratul01MusicEventC", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_AnimateShrine(UnitFromId(74));
    Wait(1.0, c_timeReal);
    auto29703D22_g = UnitGroup("Zealot", gv_p2_ALLIED, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto29703D22_u = UnitGroupCount(auto29703D22_g, c_unitCountAll);
    for (;; auto29703D22_u -= 1) {
        auto29703D22_var = UnitGroupUnitFromEnd(auto29703D22_g, auto29703D22_u);
        if (auto29703D22_var == null) { break; }
        libNtve_gf_MakeUnitFacePoint(auto29703D22_var, PointFromId(1724), 0.5);
    }
    autoD0C316A3_g = UnitGroup("Stalker", gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD0C316A3_u = UnitGroupCount(autoD0C316A3_g, c_unitCountAll);
    for (;; autoD0C316A3_u -= 1) {
        autoD0C316A3_var = UnitGroupUnitFromEnd(autoD0C316A3_g, autoD0C316A3_u);
        if (autoD0C316A3_var == null) { break; }
        libNtve_gf_MakeUnitFacePoint(autoD0C316A3_var, PointFromId(1724), 0.5);
    }
    Wait(1.0, c_timeReal);
    // Transmission - SoundLink("TZeratul01Zeratul00048", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul01Zeratul00048", -1), c_transmissionDurationAdd, 0.0, true);
    if ((UnitIsAlive(gv_tHEONEKARASS) == true)) {
        UnitIssueOrder(gv_cinematicKerriganIntroKarass, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(973)), c_orderQueueReplace);
        libNtve_gf_MakeUnitFacePoint(gv_cinematicKerriganIntroZeratul, PointFromId(973), 0.5);
        // Transmission - SoundLink("TZeratul01Karass00056", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul01Karass00056", -1), c_transmissionDurationAdd, 0.0, true);
    }

    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(1758), 0.0, -1, 10, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", 0, gv_p3_ZERG, PointFromId(187));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", 0, gv_p3_ZERG, PointFromId(1196));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", 0, gv_p3_ZERG, PointFromId(1365));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", 0, gv_p3_ZERG, PointFromId(1366));
    gv_cinematicTumorsCreated = true;
    UnitIssueOrder(gv_tHEONEKERRIGAN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1064)), c_orderQueueReplace);
    // Transmission - SoundLink("TZeratul01Zeratul00036", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul01Zeratul00036", -1), c_transmissionDurationAdd, 0.0, false);
    TransmissionWait(TransmissionLastSent(), 1.0);
    libNtve_gf_MakeUnitFacePoint(gv_cinematicKerriganIntroZeratul, PointFromId(1064), 0.2);
    libNtve_gf_MakeUnitFacePoint(gv_cinematicKerriganIntroKarass, PointFromId(1064), 0.4);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_CinematicKerriganUnitFaces, true, false);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(1763), 12.0, -1, 10, true);
    // Transmission - SoundLink("TZeratul01Kerrigan00013", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul01Kerrigan00013", -1), c_transmissionDurationAdd, 0.0, false);
    TransmissionWait(TransmissionLastSent(), 3.5);
    UnitIssueOrder(gv_tHEONEKERRIGAN, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1278)), c_orderQueueReplace);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(1559), 5.5, -1, 10, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(3.25, c_timeGame);
    UnitIssueOrder(gv_tHEONEKERRIGAN, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitBehaviorRemove(gv_tHEONEKERRIGAN, "KerriganWalk", 1);
    Wait(0.25, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_tHEONEKERRIGAN), c_animNameDefault, "Stand Work", 0, c_animTimeDefault);
    TriggerExecute(gt_CinematicKerriganSpawnBullies, true, true);
    Wait(2.0, c_timeReal);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Cinematic);
    if ((UnitIsAlive(gv_tHEONEKARASS) == true)) {
        UnitSetPosition(gv_cinematicKerriganIntroZeratul, PointFromId(1367), false);
        libNtve_gf_MakeUnitFacePoint(gv_cinematicKerriganIntroZeratul, RegionGetCenter(RegionFromId(119)), 0.0);
        UnitSetPosition(gv_cinematicKerriganIntroKarass, PointFromId(1382), false);
        libNtve_gf_MakeUnitFacePoint(gv_cinematicKerriganIntroKarass, PointFromId(1367), 0.0);
        auto0F3F8F90_g = UnitGroup("Stalker", gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto0F3F8F90_u = UnitGroupCount(auto0F3F8F90_g, c_unitCountAll);
        for (;; auto0F3F8F90_u -= 1) {
            auto0F3F8F90_var = UnitGroupUnitFromEnd(auto0F3F8F90_g, auto0F3F8F90_u);
            if (auto0F3F8F90_var == null) { break; }
            libNtve_gf_MakeUnitFacePoint(auto0F3F8F90_var, PointFromId(1367), 0.0);
        }
        auto773FAE75_g = UnitGroup("Zealot", gv_p2_ALLIED, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto773FAE75_u = UnitGroupCount(auto773FAE75_g, c_unitCountAll);
        for (;; auto773FAE75_u -= 1) {
            auto773FAE75_var = UnitGroupUnitFromEnd(auto773FAE75_g, auto773FAE75_u);
            if (auto773FAE75_var == null) { break; }
            libNtve_gf_MakeUnitFacePoint(auto773FAE75_var, PointFromId(1382), 0.0);
        }
        CameraApplyInfo(gv_p1_USER, CameraInfoFromId(1383), 0.0, -1, 0, true);
        // Transmission - SoundLink("TZeratul01Zeratul00041", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul01Zeratul00041", -1), c_transmissionDurationAdd, 0.0, false);
        TransmissionWait(TransmissionLastSent(), 1.0);
        UnitGroupIssueOrder(UnitGroup("Stalker", gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1761)), c_orderQueueReplace);
        libNtve_gf_MakeUnitFacePoint(gv_cinematicKerriganIntroZeratul, PointFromId(1382), 0.5);
        Wait(1.0, c_timeReal);
        CameraApplyInfo(gv_p1_USER, CameraInfoFromId(1388), SoundLengthSync(SoundLink("TZeratul01Karass00057", 0)), -1, 0, true);
        // Transmission - SoundLink("TZeratul01Karass00057", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul01Karass00057", -1), c_transmissionDurationAdd, 0.0, true);
        UnitGroupIssueOrder(UnitGroup("Zealot", gv_p2_ALLIED, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(867)), c_orderQueueReplace);
        // Transmission - SoundLink("TZeratul01Zeratul00058", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul01Zeratul00058", -1), c_transmissionDurationAdd, 0.0, true);
        // Transmission - SoundLink("TZeratul01Karass00059", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul01Karass00059", -1), c_transmissionDurationAdd, 0.0, false);
        TransmissionWait(TransmissionLastSent(), 1.0);
        UnitIssueOrder(gv_cinematicKerriganIntroKarass, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(810)), c_orderQueueReplace);
        Wait(1.0, c_timeReal);
        CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
        UnitRemove(gv_cinematicKerriganIntroZeratul);
        libNtve_gf_PauseUnit(gv_tHEONEZERATUL, false);
        libNtve_gf_ShowHideUnit(gv_tHEONEZERATUL, true);
        UnitSetPosition(gv_tHEONEZERATUL, PointFromId(1808), false);
        UnitSetFacing(gv_tHEONEZERATUL, 45.0, 0.0);
        autoD1823E42_g = UnitGroup("Stalker", gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoD1823E42_u = UnitGroupCount(autoD1823E42_g, c_unitCountAll);
        for (;; autoD1823E42_u -= 1) {
            autoD1823E42_var = UnitGroupUnitFromEnd(autoD1823E42_g, autoD1823E42_u);
            if (autoD1823E42_var == null) { break; }
            UnitSetPosition(autoD1823E42_var, RegionRandomPoint(RegionFromId(119)), true);
            libNtve_gf_MakeUnitFacePoint(autoD1823E42_var, PointFromId(1761), 0.0);
        }
        UnitGroupIssueOrder(UnitGroup("Stalker", gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(117))), c_orderQueueReplace);
        CameraApplyInfo(gv_p1_USER, CameraInfoFromId(1723), 0.0, -1, 0, true);
        CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
        libNtve_gf_PauseUnit(UnitFromId(40), false);
        UnitIssueOrder(UnitFromId(40), Order(AbilityCommand("TempleDoorDown", 0)), c_orderQueueReplace);
        Wait(1.0, c_timeReal);
        CameraApplyInfo(gv_p1_USER, CameraInfoFromId(1390), SoundLengthSync(SoundLink("TZeratul01Zeratul00060", 0)), -1, 10, true);
        // Transmission - SoundLink("TZeratul01Zeratul00060", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul01Zeratul00060", -1), c_transmissionDurationAdd, 0.0, false);
        Wait(1.0, c_timeReal);
        UnitIssueOrder(gv_tHEONEZERATUL, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1761)), c_orderQueueReplace);
        TransmissionWait(TransmissionLastSent(), 0.0);
    }
    else {
        UnitRemove(gv_cinematicKerriganIntroZeratul);
        libNtve_gf_PauseUnit(gv_tHEONEZERATUL, false);
        libNtve_gf_ShowHideUnit(gv_tHEONEZERATUL, true);
        UnitSetPosition(gv_tHEONEZERATUL, PointFromId(1166), false);
        libNtve_gf_MakeUnitFacePoint(gv_tHEONEZERATUL, RegionGetCenter(RegionFromId(119)), 0.0);
        auto534A9AE8_g = UnitGroup("Stalker", gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto534A9AE8_u = UnitGroupCount(auto534A9AE8_g, c_unitCountAll);
        for (;; auto534A9AE8_u -= 1) {
            auto534A9AE8_var = UnitGroupUnitFromEnd(auto534A9AE8_g, auto534A9AE8_u);
            if (auto534A9AE8_var == null) { break; }
            libNtve_gf_MakeUnitFacePoint(auto534A9AE8_var, PointFromId(1166), 0.0);
        }
        CameraApplyInfo(gv_p1_USER, CameraInfoFromId(1759), 0.0, -1, 0, true);
        CameraApplyInfo(gv_p1_USER, CameraInfoFromId(1386), SoundLengthSync(SoundLink("TZeratul01Zeratul00041", 0)), -1, 0, true);
        libNtve_gf_PauseUnit(UnitFromId(40), false);
        UnitIssueOrder(UnitFromId(40), Order(AbilityCommand("TempleDoorDown", 0)), c_orderQueueReplace);
        // Transmission - SoundLink("TZeratul01Zeratul00041", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul01Zeratul00041", -1), c_transmissionDurationAdd, 0.0, false);
        TransmissionWait(TransmissionLastSent(), 2.0);
        UnitIssueOrder(gv_tHEONEZERATUL, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1761)), c_orderQueueReplace);
        UnitGroupIssueOrder(UnitGroup("Stalker", gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(117))), c_orderQueueReplace);
        Wait(2.0, c_timeReal);
    }
    gv_cinematicKerriganIntroCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicKerriganCinematic_Init () {
    gt_CinematicKerriganCinematic = TriggerCreate("gt_CinematicKerriganCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic - Kerrigan Spawn Bullies
//--------------------------------------------------------------------------------------------------
bool gt_CinematicKerriganSpawnBullies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_real;

    // Automatic Variable Declarations
    const int auto42B04961_n = 60;
    int auto42B04961_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto42B04961_i = 1; auto42B04961_i <= auto42B04961_n; auto42B04961_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "ZerglingBurrowed", 0, gv_p3_ZERG, RegionRandomPoint(RegionFromId(10)), PointFromId(1278));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_cinematicKerriganIntroActors);
        Wait(0.06, c_timeGame);
    }
    libNtve_gf_UnitCreateFacingPoint(1, "UltraliskBurrowed", 0, gv_p3_ZERG, PointFromId(1722), PointFromId(1278));
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowUltraliskUp", 0)), c_orderQueueReplace);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_cinematicKerriganIntroActors);
    Wait(0.1, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "UltraliskBurrowed", 0, gv_p3_ZERG, PointFromId(1807), PointFromId(1278));
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowUltraliskUp", 0)), c_orderQueueReplace);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_cinematicKerriganIntroActors);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicKerriganSpawnBullies_Init () {
    gt_CinematicKerriganSpawnBullies = TriggerCreate("gt_CinematicKerriganSpawnBullies_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic - Kerrigan Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_CinematicKerriganCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicKerriganIntroCinematicCompleted == false)) {
        libNtve_gf_PauseUnit(UnitFromId(40), false);
        UnitIssueOrder(UnitFromId(40), Order(AbilityCommand("TempleDoorDown", 0)), c_orderQueueReplace);
        lv_fadeDuration = 1.0;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
        Wait(lv_fadeDuration, c_timeReal);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicKerriganCinematicEnd_Init () {
    gt_CinematicKerriganCinematicEnd = TriggerCreate("gt_CinematicKerriganCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic - Kerrigan Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_CinematicKerriganCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pickedUnit;
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto890799B3_g;
    int auto890799B3_u;
    unit auto890799B3_var;
    unitgroup autoD290D407_g;
    int autoD290D407_u;
    unitgroup auto6AA990F0_g;
    int auto6AA990F0_u;
    unit auto6AA990F0_var;
    unitgroup auto459D8FA4_g;
    int auto459D8FA4_u;
    unit auto459D8FA4_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(UnitFromId(74), 0, true);
    libNtve_gf_ShareVisionofUnit(UnitFromId(74), false, gv_p1_USER);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(74)), c_animNameDefault, "Stand Work End", c_animFlagPlayForever, c_animTimeDefault);
    auto890799B3_g = UnitGroup("PathingBlocker2x2", c_playerAny, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto890799B3_u = UnitGroupCount(auto890799B3_g, c_unitCountAll);
    for (;; auto890799B3_u -= 1) {
        auto890799B3_var = UnitGroupUnitFromEnd(auto890799B3_g, auto890799B3_u);
        if (auto890799B3_var == null) { break; }
        UnitRemove(auto890799B3_var);
    }
    if ((gv_cinematicTumorsCreated == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", 0, gv_p3_ZERG, PointFromId(187));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", 0, gv_p3_ZERG, PointFromId(1196));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", 0, gv_p3_ZERG, PointFromId(1365));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", 0, gv_p3_ZERG, PointFromId(1366));
    }

    TriggerStop(gt_CinematicKerriganSpawnBullies);
    UnitRemove(gv_cinematicKerriganIntroZeratul);
    UnitRemove(gv_cinematicKerriganIntroKarass);
    autoD290D407_g = gv_cinematicKerriganIntroActors;
    autoD290D407_u = UnitGroupCount(autoD290D407_g, c_unitCountAll);
    for (;; autoD290D407_u -= 1) {
        lv_pickedUnit = UnitGroupUnitFromEnd(autoD290D407_g, autoD290D407_u);
        if (lv_pickedUnit == null) { break; }
        UnitRemove(lv_pickedUnit);
    }
    UnitPauseAll(false);
    libNtve_gf_ShowHideUnit(gv_tHEONEZERATUL, true);
    libNtve_gf_MakeUnitInvulnerable(gv_tHEONEZERATUL, false);
    libNtve_gf_MakeUnitUncommandable(gv_tHEONEZERATUL, false);
    UnitSetState(gv_tHEONEZERATUL, c_unitStateSelectable, true);
    libNtve_gf_ShowHideUnit(gv_tHEONEKARASS, true);
    UnitSetPosition(gv_tHEONEKARASS, PointFromId(810), false);
    libNtve_gf_ShareVisionofUnit(gv_tHEONEKARASS, true, 1);
    UnitGroupIssueOrder(UnitGroup("Zealot", gv_p2_ALLIED, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(867)), c_orderQueueReplace);
    UnitBehaviorRemove(gv_tHEONEKERRIGAN, "KerriganWalk", 1);
    UnitSetPosition(gv_tHEONEKERRIGAN, PointFromId(1389), false);
    UnitSetFacing(gv_tHEONEKERRIGAN, 135.0, 0.0);
    UnitIssueOrder(gv_tHEONEKERRIGAN, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, true);
    UnitGroupSelect(UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1, true);
    libNtve_gf_RestoreUnitSelection(gv_p1_USER);
    if ((gv_cinematicKerriganIntroCinematicCompleted == false)) {
        UnitSetPosition(gv_tHEONEZERATUL, PointFromId(1808), false);
        UnitSetFacing(gv_tHEONEZERATUL, 45.0, 0.0);
        UnitIssueOrder(gv_tHEONEZERATUL, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1761)), c_orderQueueReplace);
        auto6AA990F0_g = UnitGroup("Stalker", gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto6AA990F0_u = UnitGroupCount(auto6AA990F0_g, c_unitCountAll);
        for (;; auto6AA990F0_u -= 1) {
            auto6AA990F0_var = UnitGroupUnitFromEnd(auto6AA990F0_g, auto6AA990F0_u);
            if (auto6AA990F0_var == null) { break; }
            UnitIssueOrder(auto6AA990F0_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitSetPosition(auto6AA990F0_var, RegionRandomPoint(RegionFromId(117)), false);
        }
        auto459D8FA4_g = gv_karassZealots;
        auto459D8FA4_u = UnitGroupCount(auto459D8FA4_g, c_unitCountAll);
        for (;; auto459D8FA4_u -= 1) {
            auto459D8FA4_var = UnitGroupUnitFromEnd(auto459D8FA4_g, auto459D8FA4_u);
            if (auto459D8FA4_var == null) { break; }
            UnitSetPosition(auto459D8FA4_var, PointFromId(867), false);
            libNtve_gf_ShareVisionofUnit(auto459D8FA4_var, true, 1);
        }
        lv_fadeDuration = 1.0;
        CameraApplyInfo(gv_p1_USER, CameraInfoDefault(), 0.0, -1, 10, false);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
        CameraSetBounds(PlayerGroupAll(), RegionFromId(3), true);
        VisExploreArea(1, RegionEntireMap(), false, false);
        VisRevealArea(1, RegionFromId(28), 0.1, false);
        libNtve_gf_SwooshCamera(gv_p1_USER, 42.0, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(53), lv_fadeDuration);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    }
    else {
        lv_fadeDuration = 1.5;
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_GlobalCinematicSetting(false);
        CameraSetBounds(PlayerGroupAll(), RegionFromId(3), true);
        VisExploreArea(1, RegionEntireMap(), false, false);
        VisRevealArea(1, RegionFromId(28), 0.1, false);
        CameraApplyInfo(gv_p1_USER, CameraInfoFromId(1390), lv_fadeDuration, -1, 10, true);
    }
    Wait(lv_fadeDuration, c_timeReal);
    gv_inCinematic = false;
    gf_RefreshPlayersHPandShields();
    TriggerExecute(gt_RunoutInitialization, true, false);
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/A0C5DAF5"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicKerriganCleanup_Init () {
    gt_CinematicKerriganCleanup = TriggerCreate("gt_CinematicKerriganCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic - Kerrigan Unit Faces
//--------------------------------------------------------------------------------------------------
bool gt_CinematicKerriganUnitFaces_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_minionGroup;
    unit lv_randomUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_minionGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("Zealot", gv_p2_ALLIED, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_minionGroup);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("Stalker", gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_minionGroup);
    while (true) {
        lv_randomUnit = UnitGroupRandomUnit(lv_minionGroup, c_unitCountAlive);
        UnitGroupRemove(lv_minionGroup, lv_randomUnit);
        libNtve_gf_MakeUnitFacePoint(lv_randomUnit, PointFromId(1064), RandomFixed(0.1, 0.4));
        Wait(RandomFixed(0.0, 0.15), c_timeReal);
        if (((UnitGroupCount(lv_minionGroup, c_unitCountAlive) == 0) || (gv_inCinematic == false))) {
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CinematicKerriganUnitFaces_Init () {
    gt_CinematicKerriganUnitFaces = TriggerCreate("gt_CinematicKerriganUnitFaces_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pickedUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    UnitClearSelection(gv_p1_USER);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    TechTreeUpgradeAddLevel(gv_p3_ZERG, "hydraliskspeed", 1);
    TechTreeUpgradeAddLevel(gv_p3_ZERG, "zerglingmovementspeed", 1);
    TechTreeAbilityAllow(1, AbilityCommand("PhaseMineBlast", 0), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_victoryVoidSeeker;

    // Automatic Variable Declarations
    unitgroup auto9AB25090_g;
    int auto9AB25090_u;
    unit auto9AB25090_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    EnvironmentShow(c_environmentTerrain, false);
    EnvironmentShow(c_environmentDoodads, false);
    EnvironmentShow(c_environmentWater, false);
    GameSetBackground(c_backgroundFixed, "VC_Zeratul1_Sky", 100.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Aiur", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundtrackSetContinuous(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    auto9AB25090_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9AB25090_u = UnitGroupCount(auto9AB25090_g, c_unitCountAll);
    for (;; auto9AB25090_u -= 1) {
        auto9AB25090_var = UnitGroupUnitFromEnd(auto9AB25090_g, auto9AB25090_u);
        if (auto9AB25090_var == null) { break; }
        UnitRemove(auto9AB25090_var);
    }
    UnitRemove(gv_tHEONEVOIDSEEKER);
    libNtve_gf_CreateUnitsAtPoint2(1, "VoidSeeker", 0, gv_p2_ALLIED, PointFromId(380));
    lv_victoryVoidSeeker = UnitLastCreated();
    libNtve_gf_ChangeUnitDamage(lv_victoryVoidSeeker, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitIssueOrder(lv_victoryVoidSeeker, Order(AbilityCommand("PsytrousOxide", 0)), c_orderQueueReplace);
    UnitIssueOrder(lv_victoryVoidSeeker, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1744)), c_orderQueueReplace);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(521), 0.0, -1, 10, true);
    CameraFollowUnitGroup(gv_p1_USER, libNtve_gf_ConvertUnitToUnitGroup(lv_victoryVoidSeeker), true, true);
    Wait(1.0, c_timeGame);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_victoryCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    // Transmission - SoundLink("TZeratul01Zeratul00064", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul01Zeratul00064", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TZeratul01Zeratul00065", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul01Zeratul00065", -1), c_transmissionDurationAdd, 0.0, true);
    CameraFollowUnitGroup(1, libNtve_gf_ConvertUnitToUnitGroup(lv_victoryVoidSeeker), false, false);
    Wait(1.5, c_timeGame);
    gv_victoryCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuratioin;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victoryCinematicCompleted == true)) {
        lv_fadeDuratioin = 2.0;
    }
    else {
        lv_fadeDuratioin = 0.5;
    }
    CinematicFade(false, lv_fadeDuratioin, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(lv_fadeDuratioin, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03UnitsVariables_Init();
    gt_Init04Music_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_IntroSequence_Init();
    gt_StartGame_Init();
    gt_HellomynameisZeratulQ_Init();
    gt_StorymodeTipsQ_Init();
    gt_ButtonFlashBlinkOn_Init();
    gt_ButtonFlashBlinkOff_Init();
    gt_ButtonFlashVoidPrisonOn_Init();
    gt_ButtonFlashVoidPrisonOff_Init();
    gt_CloakingPowerQ_Init();
    gt_CloakingKillReaction1_Init();
    gt_CloakingKillReaction2_Init();
    gt_CloakingKillReaction22_Init();
    gt_BlinkTeachViaWaiting_Init();
    gt_BlinkTeachViaMovement_Init();
    gt_BlinkTeachQ_Init();
    gt_BlinkAcrossChasm1_Init();
    gt_BlinkAcrossChasmReaction_Init();
    gt_BlinkReminder_Init();
    gt_BlinkAcrossChasm2_Init();
    gt_TeachRocksQ_Init();
    gt_VoidPrisonTeachQ_Init();
    gt_VoidPrisonVictim1Dies_Init();
    gt_VoidPrisonKillReaction1_Init();
    gt_VoidPrisonKillReaction2_Init();
    gt_ScurryingZergTrip_Init();
    gt_DyingUltralisk_Init();
    gt_GuardedSporeCalloutQ_Init();
    gt_PrisonThenBlinkCrawler_Init();
    gt_OverseerIntroActionsQ_Init();
    gt_OverseerHydralisksDeadRunAway_Init();
    gt_ObjectiveShrine1ReachedQ_Init();
    gt_KerriganTaunt11Q_Init();
    gt_ScourgeAmbience1_Init();
    gt_ZeratulReachesStalkerIntroChasm_Init();
    gt_KerriganTaunt12Q_Init();
    gt_StalkersIntroWarpInQ_Init();
    gt_StalkerIntroScourgeEncircleInit_Init();
    gt_StalkerIntroScourgeEncircleAI_Init();
    gt_StalkerIntroScourgeEncircleEnd_Init();
    gt_StalkersRevealerTipQ_Init();
    gt_StalkerIntroCleanUpPing_Init();
    gt_StalkerCliffPewQ_Init();
    gt_StalkerCliffKillReaction_Init();
    gt_GuardedSporePatrol_Init();
    gt_Reinforcements1_Init();
    gt_BroodlordPatrolQ_Init();
    gt_ScourgeAmbience2_Init();
    gt_Reinforcements2_Init();
    gt_AirAssaultQ_Init();
    gt_AirAssaultEncircleAirInit_Init();
    gt_AirAssaultEncircleGroundInit_Init();
    gt_AirAssaultEncircleAirAI_Init();
    gt_AirAssaultEncircleGroundAI_Init();
    gt_AirAssaultEncircleEndGivePlayerReinforcements_Init();
    gt_HatcheryDiscovered1Q_Init();
    gt_ObjectiveShrine2ReachedQ_Init();
    gt_Reinforcements4_Init();
    gt_KerriganTaunt2Q_Init();
    gt_HeavyHitterPuzzleInitQ_Init();
    gt_HeavyHitterPuzzleBurrowedUltraliskInit_Init();
    gt_BanelingPuzzleIntroQ_Init();
    gt_BanelingPuzzleBanelingSlowUnburrow_Init();
    gt_BanelingPuzzleBanelingAI_Init();
    gt_BanelingPuzzleRockBridge_Init();
    gt_HatcheryDiscovered2UltralisksQ_Init();
    gt_Hatchery2AI_Init();
    gt_DyingUltralisksHatchery2_Init();
    gt_AmbushInit_Init();
    gt_Crawlers_Init();
    gt_CrawlersQ_Init();
    gt_CrawlersDestroyedQ_Init();
    gt_MeetKarass_Init();
    gt_RumbleInit_Init();
    gt_RumbleAiurProtossAIPush1_Init();
    gt_RumbleAiurProtossAIPush2_Init();
    gt_RumbleAiurProtossAIPush3_Init();
    gt_RumbleFinish_Init();
    gt_StunnedUltraliskQ_Init();
    gt_AntiAirRequestQ_Init();
    gt_KarassKilledBeforeRunoutQ_Init();
    gt_KarassPsiStormTarget01_Init();
    gt_KarassPsiStormTarget02_Init();
    gt_NydusSpawning_Init();
    gt_NydusSpawningQ_Init();
    gt_NydusSpawnRumble_Init();
    gt_NydusSpawnAIRumble_Init();
    gt_NydusWormRetreat_Init();
    gt_NydusWormsAllDeadQ_Init();
    gt_ZeratulsTheOnlyOneAlive_Init();
    gt_Enemiesare99999Staggered_Init();
    gt_AllPlayerGroundForcesDeadFlyersGoAway_Init();
    gt_HatcheryDiscovered3RumbleQ_Init();
    gt_Hatchery3Roacheggs_Init();
    gt_ObjectiveShrine3Reached_Init();
    gt_RunoutInitialization_Init();
    gt_KerriganRegeneration_Init();
    gt_ShowTimer_Init();
    gt_RunoutFirstWave_Init();
    gt_RunoutArrowPingConstant_Init();
    gt_RunoutEvent1Nydus_Init();
    gt_ScourgeAmbience3_Init();
    gt_RunoutEvent2Nydus_Init();
    gt_RunoutEvent3AirEncircle_Init();
    gt_RunoutEncircleInit_Init();
    gt_RunoutEncircleAI_Init();
    gt_RunoutEvent4Nydus_Init();
    gt_RunoutEvent5DoubleNydus_Init();
    gt_RunoutEvent6UltraKarassTargeted_Init();
    gt_KerriganAttacksKarass_Init();
    gt_KarassKilledDuringRunout_Init();
    gt_KarassFelledLineQ_Init();
    gt_RunoutEvent7BroodLord_Init();
    gt_RunoutEvent8NydusOverseer_Init();
    gt_RunoutEventCentral_Init();
    gt_RunoutRock01Safety_Init();
    gt_Rock01dies_Init();
    gt_RunoutRock02Safety_Init();
    gt_Rock02dies_Init();
    gt_RunoutRock03Safety_Init();
    gt_Rock03dies_Init();
    gt_RunoutConstantNydusAttacks_Init();
    gt_RunoutAttackWaves_Init();
    gt_NydusSpawnRunout_Init();
    gt_NydusSpawnAIRunout_Init();
    gt_TimerEscape_Init();
    gt_TimerEscapeExpires_Init();
    gt_ShieldImpactRemove_Init();
    gt_AnimateShrineTrigger_Init();
    gt_StalkerUntargetableDuringWarpIn_Init();
    gt_StalkerConvertAfterWarpIn_Init();
    gt_StalkerColor_Init();
    gt_PlayerIsInCombat_Init();
    gt_PlayerIsInCombatIndicatorDiminish_Init();
    gt_PatrolAI_Init();
    gt_IssuePanicOrderTrigger_Init();
    gt_PanickedUnitBurrowAI_Init();
    gt_ZergEncircleLoopingSounds_Init();
    gt_AchievementZeratulHurtAdvanced_Init();
    gt_StalkerKill_Init();
    gt_StalkerDies_Init();
    gt_VictoryVoidSeekerRescue_Init();
    gt_VictoryAncestralRecallComplete_Init();
    gt_Victory_Init();
    gt_DefeatZeratulDead_Init();
    gt_DefeatVoidseekerDestroyed_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_Hatchery01Dies_Init();
    gt_Hatchery02Dies_Init();
    gt_Hatchery03Dies_Init();
    gt_Shrine01_Init();
    gt_Shrine02_Init();
    gt_Shrine03_Init();
    gt_ObjectiveShrinesCreate_Init();
    gt_ObjectiveShrinesDiscoverQ_Init();
    gt_ObjectiveShrinesComplete_Init();
    gt_ObjectiveShrineFailed_Init();
    gt_ObjectiveShrinesUpdate_Init();
    gt_ObjectiveZeratulCreate_Init();
    gt_ObjectiveZeratulDiscover_Init();
    gt_ObjectiveZeratulComplete_Init();
    gt_ObjectiveHatcheriesCreate_Init();
    gt_ObjectiveHatcheriesCompleteQ_Init();
    gt_ObjectiveHatcheriesDestroyedQ_Init();
    gt_ObjectiveVoidSeekerObjectivesQ_Init();
    gt_ObjectiveVoidSeekerComplete_Init();
    gt_DialogueGetToVoidSeeker_Init();
    gt_BriefingQ_Init();
    gt_BriefingScene00_Init();
    gt_BriefingVoidSeekerAnimations_Init();
    gt_BriefingZeratulUnload_Init();
    gt_CinematicKarassMidQ_Init();
    gt_CinematicKarassMidSetup_Init();
    gt_CinematicKarassMidCinematic_Init();
    gt_CinematicKarassCameraWork_Init();
    gt_CinematicKarassCoolWarpIn_Init();
    gt_CinematicKarassCoolWarpInUnitGroup_Init();
    gt_CinematicKarassCoolWarpInMovement_Init();
    gt_CinematicKarassMidCinematicEnd_Init();
    gt_CinematicKarassMidCleanup_Init();
    gt_CinematicKerriganQ_Init();
    gt_CinematicKerriganSetup_Init();
    gt_CinematicKerriganCinematic_Init();
    gt_CinematicKerriganSpawnBullies_Init();
    gt_CinematicKerriganCinematicEnd_Init();
    gt_CinematicKerriganCleanup_Init();
    gt_CinematicKerriganUnitFaces_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
