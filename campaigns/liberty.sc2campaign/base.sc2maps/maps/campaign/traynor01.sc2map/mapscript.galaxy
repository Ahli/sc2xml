//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Liberation Day
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/CampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libCamp_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_p1_USER;
int gv_p2_DOMINION_RED;
int gv_p3_RIKSVILLE_YELLOW;
int gv_p4_ACTORS_BLUE;
int gv_p5_RIKSVILLE_PUSHY;
bool gv_gameOver;
bool gv_inCinematic;
unit gv_raynor;
bool gv_tutorialWindowclosed;
unit gv_dogmeat;
unit gv_crazyOldClarice;
int gv_roadblockTransmission;
actor gv_roadblockActor01;
actor gv_roadblockActor02;
actor gv_roadblockActor03;
unit gv_mutteringJohn;
unit gv_southieTarget;
unit gv_viking01;
unit gv_viking02;
unit gv_viking03;
unitgroup gv_dropGroup;
unitgroup gv_riksvilleTownSquareDominion;
revealer gv_riksvilleTownSquareReavler;
int gv_southieTransmission;
unit gv_southieSpeaker;
bool gv_onTheMove;
unitgroup gv_escapeJerks;
unitgroup gv_escapeCivilians;
bool gv_escapeCivillansFinalOrderIssued;
revealer gv_escapeRevealer;
actor gv_civMarchActor02;
actor gv_civMarchActor03;
unit gv_civMarchSpeaker01;
unit gv_civMarchSpeaker02;
unit gv_civMarchSpeaker03;
bool gv_compoundClear;
unitgroup gv_dominionCompoundCivilian;
unitgroup gv_dominionCompoundGuards;
revealer gv_dominionCompoundRevealer;
actor[7] gv_holoReticules;
int[7] gv_holoPing;
unit[7] gv_holoboards;
int gv_holoboardTransmission01;
int gv_holoboardTransmission02;
int gv_holoboardTransmission03;
int gv_holoboardTransmission04;
int gv_holoboardTransmission05;
int gv_holoboardTransmission06;
bool gv_unitMovementTip;
int gv_riksvillePopulation;
int gv_holoboardsDestroyed;
int gv_dominionMarinesKilled;
int gv_dominionMarinesTotal;
int gv_objectiveMainPing;
int gv_objectiveDestroyLogisticalHQ;
actor gv_actorObjectiveMain;
int gv_objectiveRaynorMustLIVE;
int gv_objectiveDestroyDominionHoloboards;
int gv_objectiveTaskDestroyDominionHoloboardsProgress;
int gv_objectiveTaskDestroyDominionHoloboardsTotal;
actor gv_introActorBase01;
unit gv_introVik01;
unit gv_introVik02;
unit gv_introVik03;
unit gv_introMar01;
unit gv_introMar02;
unit gv_introMar03;
unit gv_introMar04;
unit gv_introDrop01;
unit gv_introDrop02;
unit gv_introCiv01;
unit gv_introCiv02;
unit gv_introCiv03;
unit gv_introCiv04;
unit gv_introCiv05;
unitgroup gv_raynorsMarines;
unit gv_introDropship;
unitgroup gv_introUnitCargoStart;
int gv_introUnitCargoStartDrop;
unitgroup gv_introActorGroup;
bool gv_introCinematicCompleted;
unitgroup gv_introCinHiddenUnitGroup;
bool gv_midCinematicCompleted;
unitgroup gv_midHiddenUnitGroup;
sound gv_crowdSoundEmitter;
bool gv_victoryCinematicCompleted;
unitgroup gv_victoryHiddenUnitGroup;

void InitGlobals () {
    int init_i;

    gv_p1_USER = 1;
    gv_p2_DOMINION_RED = 2;
    gv_p3_RIKSVILLE_YELLOW = 3;
    gv_p4_ACTORS_BLUE = 4;
    gv_p5_RIKSVILLE_PUSHY = 5;
    gv_roadblockTransmission = c_invalidTransmissionId;
    gv_mutteringJohn = UnitFromId(645);
    gv_dropGroup = UnitGroupEmpty();
    gv_riksvilleTownSquareDominion = UnitGroupEmpty();
    gv_southieTransmission = c_invalidTransmissionId;
    gv_escapeJerks = UnitGroupEmpty();
    gv_escapeCivilians = UnitGroupEmpty();
    gv_dominionCompoundCivilian = UnitGroupEmpty();
    gv_dominionCompoundGuards = UnitGroupEmpty();
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_holoPing[init_i] = c_invalidPingId;
    }
    gv_holoboardTransmission01 = c_invalidTransmissionId;
    gv_holoboardTransmission02 = c_invalidTransmissionId;
    gv_holoboardTransmission03 = c_invalidTransmissionId;
    gv_holoboardTransmission04 = c_invalidTransmissionId;
    gv_holoboardTransmission05 = c_invalidTransmissionId;
    gv_holoboardTransmission06 = c_invalidTransmissionId;
    gv_objectiveDestroyLogisticalHQ = c_invalidObjectiveId;
    gv_objectiveRaynorMustLIVE = c_invalidObjectiveId;
    gv_objectiveDestroyDominionHoloboards = c_invalidObjectiveId;
    gv_objectiveTaskDestroyDominionHoloboardsTotal = 6;
    gv_raynorsMarines = UnitGroupEmpty();
    gv_introUnitCargoStart = UnitGroupEmpty();
    gv_introActorGroup = UnitGroupEmpty();
    gv_introCinHiddenUnitGroup = UnitGroupEmpty();
    gv_midHiddenUnitGroup = UnitGroupEmpty();
    gv_victoryHiddenUnitGroup = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_SetCivviePropertiesforSpawnedunit (unit lp_uNIT);
void gf_OrderUnitToMoveThenTurnToTargetPointsFacing (unit lp_u, point lp_targetPoint, int lp_queue);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04Music;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_StartGame;
trigger gt_UnitMovementCheck;
trigger gt_TutorialReviewQ;
trigger gt_OpeningLineQ;
trigger gt_RunDogmeatRUN;
trigger gt_Dogmeatgo;
trigger gt_GohomeDogmeat;
trigger gt_CrazyOldLadyLineQ;
trigger gt_CrazyOldLadyMove;
trigger gt_CrazyOldLadyDespawn;
trigger gt_RoadblockView;
trigger gt_RoadblockAggroQ;
trigger gt_RoadblockTransmissionKill;
trigger gt_RoadblockAttacked;
trigger gt_RoadblockCarcass;
trigger gt_FirstHoloboardencounter;
trigger gt_RaynorsaysKillHoloboardsQ;
trigger gt_WhereisEveryoneQ;
trigger gt_MutteringJohnQ;
trigger gt_MutteringJohnDespawn;
trigger gt_ThisisuglyQ;
trigger gt_GhostTownEntranceCarcass;
trigger gt_GhostTownExitCarcass1;
trigger gt_GhostTownExitCarcass2;
trigger gt_GhostTownExitCarcass3;
trigger gt_GhostTownExitCarcass4;
trigger gt_RiksvilleAutoSave01;
trigger gt_RiksvilleTownSquareViewQ;
trigger gt_RiksvilleTownSquareDropPods;
trigger gt_RiksvilleTownSquareClear;
trigger gt_RiksvilleTownSquareClearDialogueQ;
trigger gt_RiksvilleTownSquareVikingRemove;
trigger gt_RiksvilleTownRevealCheck;
trigger gt_SouthieMarineaggroStatue;
trigger gt_SouthieMarineaggroProximity;
trigger gt_SouthieMarineattackQ;
trigger gt_SouthieTransmissionKill;
trigger gt_ThisisbadQ;
trigger gt_EscapeView;
trigger gt_EscapeDamage;
trigger gt_EscapeClearQ;
trigger gt_EscapeRevealCheck;
trigger gt_EscapeRandomCheer;
trigger gt_CivilianSpawnCrowd;
trigger gt_CivilianMarchQ;
trigger gt_Flyawaybirdie;
trigger gt_FlyawaybirdieptIItheBirdening;
trigger gt_DominionCompoundViewQ;
trigger gt_DominionCompoundVikingland;
trigger gt_DominionCompoundClear;
trigger gt_DominionCompoundMove;
trigger gt_DominionCompoundCheer;
trigger gt_DominionCompoundWarningLights;
trigger gt_DominionCivilianCompound;
trigger gt_DominionCompoundReticleKiller;
trigger gt_CreateReticule2;
trigger gt_CreateReticule3;
trigger gt_CreateReticule4;
trigger gt_CreateReticule5;
trigger gt_CreateReticule6;
trigger gt_HoloReticuleKiller;
trigger gt_HoloPingKiller;
trigger gt_PlayHoloboard01Q;
trigger gt_PlayHoloboard02Q;
trigger gt_PlayHoloboard03Q;
trigger gt_PlayHoloboard04Q;
trigger gt_PlayHoloboard05Q;
trigger gt_PlayHoloboard06Q;
trigger gt_HoloboardStopSounds;
trigger gt_TipStoryModeQ;
trigger gt_TipThisisnotaherogameQ;
trigger gt_TipUnitNewUnitMarinesQ;
trigger gt_TipTutorialVideosQ;
trigger gt_StatHoloboardsDestroyed;
trigger gt_StatDominionMarinesKilled;
trigger gt_Achievement5RaynorKillsNormal;
trigger gt_VictoryTowerDestroyed;
trigger gt_Victory;
trigger gt_DefeatUnitsDead;
trigger gt_DefeatRaynorDead;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_ObjectiveDestroyLogisticalHQCreateQ;
trigger gt_ObjectiveDestroyLogisticalHQComplete;
trigger gt_ObjectiveRaynorMustSurviveCreateQ;
trigger gt_ObjectiveRaynorSurviveComplete;
trigger gt_ObjectiveDestroyDominionHoloboardsCreate;
trigger gt_ObjectiveDestroyDominionHoloboardsComplete;
trigger gt_ObjectiveDestroyDominionHoloboardsUpdate;
trigger gt_BriefingQ;
trigger gt_BriefingScene00;
trigger gt_BriefingScene00Viking;
trigger gt_BriefingScene01;
trigger gt_BriefingScene02;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanupNoEscape;
trigger gt_IntroCleanupEscape;
trigger gt_IntroCargoUnload;
trigger gt_IntroDropshipcleanup;
trigger gt_MidBillboardQ;
trigger gt_MidBillboardSetup;
trigger gt_MidBillboardCinematic;
trigger gt_MidBillboardCinematicEnd;
trigger gt_MidBillboardCleanup;
trigger gt_MidEscapeQ;
trigger gt_MidEscapeSetup;
trigger gt_MidEscapeCinematic;
trigger gt_MidEscapeCinematicEnd;
trigger gt_MidEscapeCleanup;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryRandomCheer;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_SetCivviePropertiesforSpawnedunit (unit lp_uNIT) {
    // Automatic Variable Declarations
    // Implementation
    gv_riksvillePopulation += 1;
    UnitSetState(lp_uNIT, c_unitStateSelectable, false);
    UnitSetState(lp_uNIT, c_unitStateTargetable, false);
}

void gf_OrderUnitToMoveThenTurnToTargetPointsFacing (unit lp_u, point lp_targetPoint, int lp_queue) {
    // Automatic Variable Declarations
    // Implementation
    UnitIssueOrder(lp_u, OrderTargetingPoint(AbilityCommand("move", 0), lp_targetPoint), lp_queue);
    UnitIssueOrder(lp_u, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(lp_targetPoint, 10.0, PointGetFacing(lp_targetPoint))), c_orderQueueAddToEnd);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_LoadCampaignData(libCamp_ge_MapID_MapTRaynor01);
    TriggerExecute(gt_Init01Technology, true, true);
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04Music, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    libCamp_gf_RegisterFootageRecording(gt_BriefingQ);
    libCamp_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_IntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_p1_USER, gv_p2_DOMINION_RED, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p3_RIKSVILLE_YELLOW, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p4_ACTORS_BLUE, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p5_RIKSVILLE_PUSHY, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p2_DOMINION_RED, gv_p3_RIKSVILLE_YELLOW, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    libNtve_gf_SetAlliance(gv_p2_DOMINION_RED, gv_p5_RIKSVILLE_PUSHY, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    PlayerSetAlliance(gv_p3_RIKSVILLE_YELLOW, c_allianceIdPushable, gv_p2_DOMINION_RED, true);
    libNtve_gf_SetAlliance(gv_p2_DOMINION_RED, gv_p4_ACTORS_BLUE, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    libNtve_gf_SetAlliance(gv_p3_RIKSVILLE_YELLOW, gv_p4_ACTORS_BLUE, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    PlayerSetAlliance(gv_p1_USER, c_allianceIdPushable, gv_p5_RIKSVILLE_PUSHY, true);
    PlayerSetAlliance(gv_p3_RIKSVILLE_YELLOW, c_allianceIdPushable, gv_p1_USER, true);
    PlayerSetState(gv_p2_DOMINION_RED, c_playerStateFidgetingEnabled, false);
    PlayerSetState(gv_p4_ACTORS_BLUE, c_playerStateFidgetingEnabled, false);
    PlayerSetState(gv_p3_RIKSVILLE_YELLOW, c_playerStateDisplayInLeaderPanel, false);
    PlayerSetState(gv_p4_ACTORS_BLUE, c_playerStateDisplayInLeaderPanel, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iNT;
    point lv_cowLoc;

    // Automatic Variable Declarations
    unitgroup auto4BD2192F_g;
    int auto4BD2192F_u;
    unit auto4BD2192F_var;
    unitgroup autoF0581A9B_g;
    int autoF0581A9B_u;
    unit autoF0581A9B_var;
    unitgroup auto318DD5C1_g;
    int auto318DD5C1_u;
    unit auto318DD5C1_var;
    unitgroup auto2C4972A8_g;
    int auto2C4972A8_u;
    unit auto2C4972A8_var;
    unitgroup autoC6ECD779_g;
    int autoC6ECD779_u;
    unit autoC6ECD779_var;
    unitgroup autoCC9EB017_g;
    int autoCC9EB017_u;
    unit autoCC9EB017_var;
    unitgroup auto901ABA0F_g;
    int auto901ABA0F_u;
    unit auto901ABA0F_var;
    unitgroup autoA9EAC333_g;
    int autoA9EAC333_u;
    unit autoA9EAC333_var;
    unitgroup autoC5983A9A_g;
    int autoC5983A9A_u;
    unit autoC5983A9A_var;
    unitgroup auto7CCC2070_g;
    int auto7CCC2070_u;
    unit auto7CCC2070_var;
    unitgroup auto2F4CDA0F_g;
    int auto2F4CDA0F_u;
    unit auto2F4CDA0F_var;
    unitgroup autoEC35DFDD_g;
    int autoEC35DFDD_u;
    unit autoEC35DFDD_var;
    const int auto6F9A61B6_ae = 6;
    const int auto6F9A61B6_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_dogmeat = UnitFromId(2661);
    gv_riksvillePopulation += 1;
    UnitSetScale(gv_dogmeat, 75.0, 75.0, 75.0);
    gv_crazyOldClarice = UnitFromId(43);
    UnitBehaviorAdd(UnitFromId(34), "CritterWanderLeashShort", UnitFromId(34), 1);
    UnitSetPropertyFixed(UnitFromId(110), c_unitPropLifeMax, 150.0);
    UnitSetPropertyFixed(UnitFromId(110), c_unitPropLifePercent, 100.0);
    UnitSetState(UnitFromId(1726), c_unitStateTargetable, false);
    gv_holoboards[1] = UnitFromId(1726);
    gv_holoboards[2] = UnitFromId(24);
    gv_holoboards[3] = UnitFromId(207);
    gv_holoboards[4] = UnitFromId(32);
    gv_holoboards[5] = UnitFromId(68);
    gv_holoboards[6] = UnitFromId(2694);
    auto4BD2192F_g = UnitGroup(null, gv_p5_RIKSVILLE_PUSHY, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4BD2192F_u = UnitGroupCount(auto4BD2192F_g, c_unitCountAll);
    for (;; auto4BD2192F_u -= 1) {
        auto4BD2192F_var = UnitGroupUnitFromEnd(auto4BD2192F_g, auto4BD2192F_u);
        if (auto4BD2192F_var == null) { break; }
        UnitSetState(auto4BD2192F_var, c_unitStateTargetable, false);
        UnitSetState(auto4BD2192F_var, c_unitStateSelectable, false);
    }
    autoF0581A9B_g = UnitGroup(null, gv_p3_RIKSVILLE_YELLOW, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF0581A9B_u = UnitGroupCount(autoF0581A9B_g, c_unitCountAll);
    for (;; autoF0581A9B_u -= 1) {
        autoF0581A9B_var = UnitGroupUnitFromEnd(autoF0581A9B_g, autoF0581A9B_u);
        if (autoF0581A9B_var == null) { break; }
        UnitSetState(autoF0581A9B_var, c_unitStateTargetable, false);
        UnitSetState(autoF0581A9B_var, c_unitStateSelectable, false);
    }
    auto318DD5C1_g = UnitGroup("Civilian", gv_p3_RIKSVILLE_YELLOW, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto318DD5C1_u = UnitGroupCount(auto318DD5C1_g, c_unitCountAll);
    for (;; auto318DD5C1_u -= 1) {
        auto318DD5C1_var = UnitGroupUnitFromEnd(auto318DD5C1_g, auto318DD5C1_u);
        if (auto318DD5C1_var == null) { break; }
        gv_riksvillePopulation += 1;
    }
    auto2C4972A8_g = UnitGroup("CivilianFemale", gv_p3_RIKSVILLE_YELLOW, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2C4972A8_u = UnitGroupCount(auto2C4972A8_g, c_unitCountAll);
    for (;; auto2C4972A8_u -= 1) {
        auto2C4972A8_var = UnitGroupUnitFromEnd(auto2C4972A8_g, auto2C4972A8_u);
        if (auto2C4972A8_var == null) { break; }
        gv_riksvillePopulation += 1;
    }
    autoC6ECD779_g = UnitGroup("Marine", gv_p2_DOMINION_RED, RegionFromId(59), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC6ECD779_u = UnitGroupCount(autoC6ECD779_g, c_unitCountAll);
    for (;; autoC6ECD779_u -= 1) {
        autoC6ECD779_var = UnitGroupUnitFromEnd(autoC6ECD779_g, autoC6ECD779_u);
        if (autoC6ECD779_var == null) { break; }
        UnitGroupAdd(gv_riksvilleTownSquareDominion, autoC6ECD779_var);
    }
    autoCC9EB017_g = UnitGroup("Firebat", gv_p2_DOMINION_RED, RegionFromId(59), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCC9EB017_u = UnitGroupCount(autoCC9EB017_g, c_unitCountAll);
    for (;; autoCC9EB017_u -= 1) {
        autoCC9EB017_var = UnitGroupUnitFromEnd(autoCC9EB017_g, autoCC9EB017_u);
        if (autoCC9EB017_var == null) { break; }
        UnitGroupAdd(gv_riksvilleTownSquareDominion, autoCC9EB017_var);
    }
    auto901ABA0F_g = UnitGroup("Marine", gv_p2_DOMINION_RED, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto901ABA0F_u = UnitGroupCount(auto901ABA0F_g, c_unitCountAll);
    for (;; auto901ABA0F_u -= 1) {
        auto901ABA0F_var = UnitGroupUnitFromEnd(auto901ABA0F_g, auto901ABA0F_u);
        if (auto901ABA0F_var == null) { break; }
        UnitGroupAdd(gv_escapeJerks, auto901ABA0F_var);
    }
    UnitGroupAdd(gv_escapeJerks, UnitFromId(331));
    autoA9EAC333_g = UnitGroup("Civilian", gv_p3_RIKSVILLE_YELLOW, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA9EAC333_u = UnitGroupCount(autoA9EAC333_g, c_unitCountAll);
    for (;; autoA9EAC333_u -= 1) {
        autoA9EAC333_var = UnitGroupUnitFromEnd(autoA9EAC333_g, autoA9EAC333_u);
        if (autoA9EAC333_var == null) { break; }
        UnitGroupAdd(gv_escapeCivilians, autoA9EAC333_var);
    }
    autoC5983A9A_g = UnitGroup("CivilianFemale", gv_p3_RIKSVILLE_YELLOW, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC5983A9A_u = UnitGroupCount(autoC5983A9A_g, c_unitCountAll);
    for (;; autoC5983A9A_u -= 1) {
        autoC5983A9A_var = UnitGroupUnitFromEnd(autoC5983A9A_g, autoC5983A9A_u);
        if (autoC5983A9A_var == null) { break; }
        UnitGroupAdd(gv_escapeCivilians, autoC5983A9A_var);
    }
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(331)), "Work", "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    UnitIssueOrder(UnitFromId(331), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    auto7CCC2070_g = UnitGroup("Civilian", gv_p3_RIKSVILLE_YELLOW, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7CCC2070_u = UnitGroupCount(auto7CCC2070_g, c_unitCountAll);
    for (;; auto7CCC2070_u -= 1) {
        auto7CCC2070_var = UnitGroupUnitFromEnd(auto7CCC2070_g, auto7CCC2070_u);
        if (auto7CCC2070_var == null) { break; }
        UnitGroupAdd(gv_dominionCompoundCivilian, auto7CCC2070_var);
    }
    auto2F4CDA0F_g = UnitGroup("Marine", gv_p2_DOMINION_RED, RegionFromId(92), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2F4CDA0F_u = UnitGroupCount(auto2F4CDA0F_g, c_unitCountAll);
    for (;; auto2F4CDA0F_u -= 1) {
        auto2F4CDA0F_var = UnitGroupUnitFromEnd(auto2F4CDA0F_g, auto2F4CDA0F_u);
        if (auto2F4CDA0F_var == null) { break; }
        UnitGroupAdd(gv_dominionCompoundGuards, auto2F4CDA0F_var);
    }
    UnitGroupAdd(gv_dominionCompoundGuards, UnitFromId(2440));
    autoEC35DFDD_g = UnitGroup("Marine", gv_p2_DOMINION_RED, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEC35DFDD_u = UnitGroupCount(autoEC35DFDD_g, c_unitCountAll);
    for (;; autoEC35DFDD_u -= 1) {
        autoEC35DFDD_var = UnitGroupUnitFromEnd(autoEC35DFDD_g, autoEC35DFDD_u);
        if (autoEC35DFDD_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(autoEC35DFDD_var, "StatusSet MarinePortrait 7");
    }
    gv_dominionMarinesTotal = UnitGroupCount(UnitGroup("Marine", gv_p2_DOMINION_RED, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive);
    lv_iNT = 1;
    for ( ; ( (auto6F9A61B6_ai >= 0 && lv_iNT <= auto6F9A61B6_ae) || (auto6F9A61B6_ai < 0 && lv_iNT >= auto6F9A61B6_ae) ) ; lv_iNT += auto6F9A61B6_ai ) {
        UnitSetInfoText(gv_holoboards[lv_iNT], StringExternal("Param/Value/BAF13DE0"), StringExternal("Param/Value/360B1B8E"), StringToText(""));
        UnitSetState(gv_holoboards[lv_iNT], c_unitStateTooltipable, true);
    }
    UnitSetInfoText(UnitFromId(105), StringExternal("Param/Value/109B7653"), StringToText(""), StringToText(""));
    UnitSetInfoText(UnitFromId(110), StringExternal("Param/Value/92F9BC44"), StringToText(""), StringToText(""));
    UnitSetInfoText(UnitFromId(158), StringExternal("Param/Value/0EE513C6"), StringExternal("Param/Value/63EABF07"), StringToText(""));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init04Music_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, false);
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TRaynor01MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TRaynor01MusicIntro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Music_Init () {
    gt_Init04Music = TriggerCreate("gt_Init04Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    libLbty_gf_AutoRevealRegion(RegionFromId(57), RegionFromId(57), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(9), RegionFromId(64), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(30), RegionFromId(34), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(31), RegionFromId(40), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(33), RegionFromId(41), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(29), RegionFromId(42), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(50), RegionFromId(54), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(15), RegionFromId(16), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(86), RegionFromId(85), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(87), RegionFromId(90), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(88), RegionFromId(91), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(26), RegionFromId(18), gv_p1_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerDifficulty(gv_p1_USER) == 1)) {
        PlayerModifyPropertyInt(gv_p2_DOMINION_RED, c_playerPropHandicap, c_playerPropOperSetTo, 50);
    }

    TechTreeUpgradeAddLevel(gv_p2_DOMINION_RED, "TerranInfantryWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
    TechTreeUpgradeAddLevel(gv_p2_DOMINION_RED, "TerranInfantryArmorsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_CreateCampaignTutorial(StringExternal("Param/Value/90B8B4D1"), StringExternal("Param/Value/900E35DD"), "Assets\\Textures\\btn-command-attack.dds", "Assets\\Textures\\video_tutorial_combat.ogv");
    libCamp_gf_CreateCampaignTutorial(StringExternal("Param/Value/E32DC4BA"), StringExternal("Param/Value/FF5D68B7"), "Assets\\Textures\\ui_tutorial_cameraicon.dds", "Assets\\Textures\\video_tutorial_camera_control.ogv");
    libCamp_gf_CreateCampaignTutorial(StringExternal("Param/Value/A9737948"), StringExternal("Param/Value/5601198E"), "Assets\\Textures\\btn-command-move.dds", "Assets\\Textures\\video_tutorial_movement.ogv");
    HelpPanelEnableTechTreeButton(PlayerGroupAll(), false);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Marine", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("VikingFighter", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Raynor01", false, gv_p1_USER);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Firebat", false, gv_p1_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game
//--------------------------------------------------------------------------------------------------
bool gt_StartGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/B544795D"), null, PointFromId(505));
    TriggerEnable(gt_UnitMovementCheck, true);
    TriggerExecute(gt_ObjectiveDestroyLogisticalHQCreateQ, true, true);
    TriggerExecute(gt_ObjectiveRaynorMustSurviveCreateQ, true, true);
    TriggerExecute(gt_TutorialReviewQ, true, true);
    TriggerExecute(gt_OpeningLineQ, true, true);
    TriggerExecute(gt_TipUnitNewUnitMarinesQ, true, true);
    TriggerExecute(gt_TipThisisnotaherogameQ, true, true);
    TriggerExecute(gt_TipStoryModeQ, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGame_Init () {
    gt_StartGame = TriggerCreate("gt_StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Movement Check
//--------------------------------------------------------------------------------------------------
bool gt_UnitMovementCheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_unitMovementTip = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitMovementCheck_Init () {
    gt_UnitMovementCheck = TriggerCreate("gt_UnitMovementCheck_Func");
    TriggerEnable(gt_UnitMovementCheck, false);
    TriggerAddEventUnitOrder(gt_UnitMovementCheck, null, AbilityCommand("move", 0));
    TriggerAddEventUnitOrder(gt_UnitMovementCheck, null, AbilityCommand("attack", 0));
    TriggerAddEventUnitOrder(gt_UnitMovementCheck, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tutorial Review Q
//--------------------------------------------------------------------------------------------------
bool gt_TutorialReviewQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_gameOver == true)) {
        return true;
    }
    else {
        TriggerQueueEnter();
        if ((gv_inCinematic == false) && (gv_gameOver == false) && ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1))) {
            libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
            libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
            // Transmission - SoundLink("TRaynor01Adjutant00019", 0)
            libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor01Adjutant00019", 0), c_transmissionDurationAdd, 1.0, true);
            libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
            if ((gv_unitMovementTip == false) && (gv_inCinematic == false) && (gv_gameOver == false)) {
                Wait(0.3, c_timeGame);
                HelpPanelDisplayPage(PlayerGroupAll(), c_helpPanelPageTutorials);
                Wait(0.3, c_timeGame);
                gv_tutorialWindowclosed = true;
            }
            else {
                TriggerExecute(gt_TipTutorialVideosQ, true, false);
            }
        }
        else {
            TriggerExecute(gt_TipTutorialVideosQ, true, false);
        }
        TriggerQueueExit();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TutorialReviewQ_Init () {
    gt_TutorialReviewQ = TriggerCreate("gt_TutorialReviewQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Opening Line Q
//--------------------------------------------------------------------------------------------------
bool gt_OpeningLineQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libNtve_gf_AttachActorToUnit(gv_raynor, "TalkIcon", "Ref_Origin");
    // Transmission - SoundLink("TRaynor01Raynor00030", 0)
    libCamp_gf_SendTransmissionCampaign(gv_raynor, SoundLink("TRaynor01Raynor00030", 0), c_transmissionDurationAdd, 0.0, true);
    ActorScopeKill(libNtve_gf_ActorScopeLastCreated());
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpeningLineQ_Init () {
    gt_OpeningLineQ = TriggerCreate("gt_OpeningLineQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Run Dogmeat RUN!
//--------------------------------------------------------------------------------------------------
bool gt_RunDogmeatRUN_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitIsAlive(gv_dogmeat) == true))) {
            return false;
        }

        if (!((EventUnit() != gv_dogmeat))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayOnUnit(SoundLink("Dog_Bark", -1), PlayerGroupAll(), gv_dogmeat, 0.0, 100.0, 0.0);
    UnitBehaviorAdd(gv_dogmeat, "Run", gv_dogmeat, 1);
    UnitIssueOrder(gv_dogmeat, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(632)), c_orderQueueReplace);
    UnitIssueOrder(gv_dogmeat, OrderTargetingUnit(AbilityCommand("move", 4), gv_raynor), c_orderQueueAddToEnd);
    Wait(2.0, c_timeGame);
    TriggerEnable(gt_Dogmeatgo, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunDogmeatRUN_Init () {
    gt_RunDogmeatRUN = TriggerCreate("gt_RunDogmeatRUN_Func");
    TriggerAddEventUnitRange(gt_RunDogmeatRUN, null, UnitFromId(2661), 3.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dogmeat go!
//--------------------------------------------------------------------------------------------------
bool gt_Dogmeatgo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((EventUnit() != gv_dogmeat))) {
            return false;
        }

        if (!((UnitIsAlive(gv_dogmeat) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayOnUnit(SoundLink("Dog_Bark", -1), PlayerGroupAll(), gv_dogmeat, 0.0, 100.0, 0.0);
    UnitIssueOrder(gv_dogmeat, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(672)), c_orderQueueReplace);
    UnitIssueOrder(gv_dogmeat, OrderTargetingUnit(AbilityCommand("move", 4), gv_raynor), c_orderQueueAddToEnd);
    Wait(5.0, c_timeGame);
    TriggerEnable(gt_GohomeDogmeat, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Dogmeatgo_Init () {
    gt_Dogmeatgo = TriggerCreate("gt_Dogmeatgo_Func");
    TriggerEnable(gt_Dogmeatgo, false);
    TriggerAddEventUnitRegion(gt_Dogmeatgo, null, RegionCircle(PointFromId(632), 3.0), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Go home Dogmeat!
//--------------------------------------------------------------------------------------------------
bool gt_GohomeDogmeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((EventUnit() != gv_dogmeat))) {
            return false;
        }

        if (!((UnitIsAlive(gv_dogmeat) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayOnUnit(SoundLink("Dog_Bark", -1), PlayerGroupAll(), gv_dogmeat, 0.0, 100.0, 0.0);
    UnitIssueOrder(gv_dogmeat, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2719)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GohomeDogmeat_Init () {
    gt_GohomeDogmeat = TriggerCreate("gt_GohomeDogmeat_Func");
    TriggerEnable(gt_GohomeDogmeat, false);
    TriggerAddEventUnitRegion(gt_GohomeDogmeat, null, RegionCircle(PointFromId(672), 3.0), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Crazy Old Lady Line Q
//--------------------------------------------------------------------------------------------------
bool gt_CrazyOldLadyLineQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libNtve_gf_MakeUnitFacePoint(gv_crazyOldClarice, UnitGetPosition(EventUnit()), 0.3);
    libNtve_gf_AttachActorToUnit(gv_crazyOldClarice, "TalkIcon", "Ref_Origin");
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_crazyOldClarice), c_animNameDefault, "Talk One", c_animFlagPlayForever, c_animTimeDefault);
    UIAlertPoint("Trigger", gv_p1_USER, StringToText(""), null, UnitGetPosition(gv_crazyOldClarice));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TRaynor01CivilianFemale500033", 0)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, SoundLink("TRaynor01CivilianFemale500033", 0), 0.0, c_transmissionDurationAdd, true);
    TriggerEnable(gt_CrazyOldLadyMove, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CrazyOldLadyLineQ_Init () {
    gt_CrazyOldLadyLineQ = TriggerCreate("gt_CrazyOldLadyLineQ_Func");
    TriggerAddEventUnitRange(gt_CrazyOldLadyLineQ, null, UnitFromId(43), 5.5, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Crazy Old Lady Move
//--------------------------------------------------------------------------------------------------
bool gt_CrazyOldLadyMove_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_crazyOldClarice) == true)) {
        UnitIssueOrder(gv_crazyOldClarice, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(899)), c_orderQueueReplace);
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CrazyOldLadyMove_Init () {
    gt_CrazyOldLadyMove = TriggerCreate("gt_CrazyOldLadyMove_Func");
    TriggerEnable(gt_CrazyOldLadyMove, false);
    TriggerAddEventTimePeriodic(gt_CrazyOldLadyMove, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Crazy Old Lady Despawn
//--------------------------------------------------------------------------------------------------
bool gt_CrazyOldLadyDespawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_crazyOldClarice))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    if ((UnitIsAlive(gv_dogmeat) == true)) {
        SoundPlayOnUnit(SoundLink("Dog_Howl", -1), PlayerGroupAll(), gv_dogmeat, 0.0, 100.0, 0.0);
        UnitBehaviorAdd(gv_dogmeat, "CritterWanderLeashShort", gv_dogmeat, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CrazyOldLadyDespawn_Init () {
    gt_CrazyOldLadyDespawn = TriggerCreate("gt_CrazyOldLadyDespawn_Func");
    TriggerAddEventUnitRangePoint(gt_CrazyOldLadyDespawn, null, PointFromId(899), 1.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Roadblock View
//--------------------------------------------------------------------------------------------------
bool gt_RoadblockView_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if (((PlayerDifficulty(1) == 1) == true)) {
        UnitSetInfoText(UnitFromId(59), StringToText(""), StringExternal("Param/Value/909DD693"), StringToText(""));
        UnitSetInfoText(UnitFromId(238), StringToText(""), StringExternal("Param/Value/9DDB8681"), StringToText(""));
    }

    if (((PlayerDifficulty(1) == 4) != true)) {
        libNtve_gf_AttachModelToUnit(UnitFromId(59), "BriefingUnitSelectRedSmall", "Ref_Center");
        gv_roadblockActor01 = libNtve_gf_ActorLastCreated();
        libNtve_gf_AttachModelToUnit(UnitFromId(238), "BriefingUnitSelectRedSmall", "Ref_Center");
        gv_roadblockActor02 = libNtve_gf_ActorLastCreated();
        libNtve_gf_AttachModelToUnit(UnitFromId(2671), "BriefingUnitSelectRedSmall", "Ref_Center");
        gv_roadblockActor03 = libNtve_gf_ActorLastCreated();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoadblockView_Init () {
    gt_RoadblockView = TriggerCreate("gt_RoadblockView_Func");
    TriggerAddEventUnitRegion(gt_RoadblockView, null, RegionFromId(64), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Roadblock Aggro Q
//--------------------------------------------------------------------------------------------------
bool gt_RoadblockAggroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if (((PlayerDifficulty(1) == 1 || PlayerDifficulty(1) == 2) == true)) {
        CameraPan(gv_p1_USER, CameraInfoGetTarget(CameraInfoFromId(2604)), 1.5, -1, 20, true);
    }

    TriggerQueueEnter();
    if ((UnitIsAlive(UnitFromId(59)) == false)) {
        return true;
    }
    else {
        libNtve_gf_AttachActorToUnit(UnitFromId(59), "TalkIcon", "Ref_Origin");
        UIAlertPoint("Trigger", gv_p1_USER, StringToText(""), null, UnitGetPosition(UnitFromId(59)));
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TRaynor01DominionMarine900027", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor01DominionMarine7Generic00027", 0), c_transmissionDurationAdd, 0.0, false);
        gv_roadblockTransmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoadblockAggroQ_Init () {
    gt_RoadblockAggroQ = TriggerCreate("gt_RoadblockAggroQ_Func");
    TriggerAddEventUnitRegion(gt_RoadblockAggroQ, null, RegionFromId(52), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Roadblock Transmission Kill
//--------------------------------------------------------------------------------------------------
bool gt_RoadblockTransmissionKill_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == UnitFromId(59)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClear(gv_roadblockTransmission);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoadblockTransmissionKill_Init () {
    gt_RoadblockTransmissionKill = TriggerCreate("gt_RoadblockTransmissionKill_Func");
    TriggerAddEventUnitDied(gt_RoadblockTransmissionKill, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Roadblock Attacked
//--------------------------------------------------------------------------------------------------
bool gt_RoadblockAttacked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventUnit() == UnitFromId(59)) || (EventUnit() == UnitFromId(238)) || (EventUnit() == UnitFromId(2671)) || (EventUnit() == UnitFromId(2715))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(gv_roadblockActor01);
    libNtve_gf_KillModel(gv_roadblockActor02);
    libNtve_gf_KillModel(gv_roadblockActor03);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoadblockAttacked_Init () {
    gt_RoadblockAttacked = TriggerCreate("gt_RoadblockAttacked_Func");
    TriggerAddEventUnitDamaged(gt_RoadblockAttacked, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Roadblock Carcass
//--------------------------------------------------------------------------------------------------
bool gt_RoadblockCarcass_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(48), "AnimalCorpse", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoadblockCarcass_Init () {
    gt_RoadblockCarcass = TriggerCreate("gt_RoadblockCarcass_Func");
    TriggerAddEventUnitRangePoint(gt_RoadblockCarcass, null, RegionGetCenter(RegionFromId(48)), 5.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Holoboard encounter
//--------------------------------------------------------------------------------------------------
bool gt_FirstHoloboardencounter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_MidBillboardQ, true, false);
    TriggerExecute(gt_RaynorsaysKillHoloboardsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstHoloboardencounter_Init () {
    gt_FirstHoloboardencounter = TriggerCreate("gt_FirstHoloboardencounter_Func");
    TriggerAddEventUnitRegion(gt_FirstHoloboardencounter, null, RegionFromId(13), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor says Kill Holoboards Q
//--------------------------------------------------------------------------------------------------
bool gt_RaynorsaysKillHoloboardsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libNtve_gf_AttachActorToUnit(gv_raynor, "TalkIcon", "Ref_Origin");
    // Transmission - SoundLink("TRaynor01Raynor00029", 0)
    libCamp_gf_SendTransmissionCampaign(gv_raynor, SoundLink("TRaynor01Raynor00029", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorsaysKillHoloboardsQ_Init () {
    gt_RaynorsaysKillHoloboardsQ = TriggerCreate("gt_RaynorsaysKillHoloboardsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Where is Everyone?  Q
//--------------------------------------------------------------------------------------------------
bool gt_WhereisEveryoneQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClear(gv_holoboardTransmission01);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libNtve_gf_AttachActorToUnit(gv_raynor, "TalkIcon", "Ref_Origin");
    // Transmission - SoundLink("TRaynor01Raynor00037", 0)
    libCamp_gf_SendTransmissionCampaign(gv_raynor, SoundLink("TRaynor01Raynor00037", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WhereisEveryoneQ_Init () {
    gt_WhereisEveryoneQ = TriggerCreate("gt_WhereisEveryoneQ_Func");
    TriggerAddEventUnitRegion(gt_WhereisEveryoneQ, null, RegionFromId(8), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Muttering John Q
//--------------------------------------------------------------------------------------------------
bool gt_MutteringJohnQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libNtve_gf_MakeUnitFacePoint(gv_mutteringJohn, UnitGetPosition(EventUnit()), 0.3);
    libNtve_gf_AttachActorToUnit(gv_mutteringJohn, "TalkIcon", "Ref_Origin");
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_mutteringJohn), c_animNameDefault, "Talk One", c_animFlagNonLooping, c_animTimeDefault);
    UIAlertPoint("Trigger", gv_p1_USER, StringToText(""), null, UnitGetPosition(gv_mutteringJohn));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TRaynor01Civilian200049", 0)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, SoundLink("TRaynor01Civilian200049", 0), 0.0, c_transmissionDurationAdd, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    UnitIssueOrder(gv_mutteringJohn, OrderTargetingPoint(AbilityCommand("Beacon", 1), PointFromId(757)), c_orderQueueReplace);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MutteringJohnQ_Init () {
    gt_MutteringJohnQ = TriggerCreate("gt_MutteringJohnQ_Func");
    TriggerAddEventUnitRange(gt_MutteringJohnQ, null, UnitFromId(645), 5.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Muttering John Despawn
//--------------------------------------------------------------------------------------------------
bool gt_MutteringJohnDespawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_mutteringJohn))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MutteringJohnDespawn_Init () {
    gt_MutteringJohnDespawn = TriggerCreate("gt_MutteringJohnDespawn_Func");
    TriggerAddEventUnitRangePoint(gt_MutteringJohnDespawn, null, PointFromId(757), 1.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: This is ugly Q
//--------------------------------------------------------------------------------------------------
bool gt_ThisisuglyQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libNtve_gf_AttachActorToUnit(gv_raynor, "TalkIcon", "Ref_Origin");
    // Transmission - SoundLink("TRaynor01Raynor00038", 0)
    libCamp_gf_SendTransmissionCampaign(gv_raynor, SoundLink("TRaynor01Raynor00038", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThisisuglyQ_Init () {
    gt_ThisisuglyQ = TriggerCreate("gt_ThisisuglyQ_Func");
    TriggerAddEventUnitRegion(gt_ThisisuglyQ, null, RegionFromId(2), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ghost Town Entrance Carcass
//--------------------------------------------------------------------------------------------------
bool gt_GhostTownEntranceCarcass_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(47), "AnimalCorpse", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GhostTownEntranceCarcass_Init () {
    gt_GhostTownEntranceCarcass = TriggerCreate("gt_GhostTownEntranceCarcass_Func");
    TriggerAddEventUnitRangePoint(gt_GhostTownEntranceCarcass, null, RegionGetCenter(RegionFromId(47)), 5.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ghost Town Exit Carcass 1
//--------------------------------------------------------------------------------------------------
bool gt_GhostTownExitCarcass1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(43), "AnimalCorpse", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GhostTownExitCarcass1_Init () {
    gt_GhostTownExitCarcass1 = TriggerCreate("gt_GhostTownExitCarcass1_Func");
    TriggerAddEventUnitRangePoint(gt_GhostTownExitCarcass1, null, RegionGetCenter(RegionFromId(43)), 5.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ghost Town Exit Carcass 2
//--------------------------------------------------------------------------------------------------
bool gt_GhostTownExitCarcass2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(44), "AnimalCorpse", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GhostTownExitCarcass2_Init () {
    gt_GhostTownExitCarcass2 = TriggerCreate("gt_GhostTownExitCarcass2_Func");
    TriggerAddEventUnitRangePoint(gt_GhostTownExitCarcass2, null, RegionGetCenter(RegionFromId(44)), 5.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ghost Town Exit Carcass 3
//--------------------------------------------------------------------------------------------------
bool gt_GhostTownExitCarcass3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(45), "AnimalCorpse", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GhostTownExitCarcass3_Init () {
    gt_GhostTownExitCarcass3 = TriggerCreate("gt_GhostTownExitCarcass3_Func");
    TriggerAddEventUnitRangePoint(gt_GhostTownExitCarcass3, null, RegionGetCenter(RegionFromId(45)), 5.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ghost Town Exit Carcass 4
//--------------------------------------------------------------------------------------------------
bool gt_GhostTownExitCarcass4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(46), "AnimalCorpse", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GhostTownExitCarcass4_Init () {
    gt_GhostTownExitCarcass4 = TriggerCreate("gt_GhostTownExitCarcass4_Func");
    TriggerAddEventUnitRangePoint(gt_GhostTownExitCarcass4, null, RegionGetCenter(RegionFromId(46)), 5.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Riksville Auto Save01
//--------------------------------------------------------------------------------------------------
bool gt_RiksvilleAutoSave01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/B0E84317"));
    TriggerExecute(gt_RiksvilleTownSquareViewQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RiksvilleAutoSave01_Init () {
    gt_RiksvilleAutoSave01 = TriggerCreate("gt_RiksvilleAutoSave01_Func");
    TriggerAddEventUnitRegion(gt_RiksvilleAutoSave01, null, RegionFromId(61), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Riksville Town Square View Q
//--------------------------------------------------------------------------------------------------
bool gt_RiksvilleTownSquareViewQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2D370052_g;
    int auto2D370052_u;
    unit auto2D370052_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    SoundPlay(SoundLink("TUIWarningPing", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TRaynor01Adjutant00010", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor01Adjutant00010", -1), c_transmissionDurationAdd, 0.0, false);
    VisRevealerCreate(gv_p1_USER, RegionFromId(59));
    gv_riksvilleTownSquareReavler = VisRevealerLastCreated();
    CameraLockInput(gv_p1_USER, true);
    CameraPan(gv_p1_USER, PointFromId(165), 1.0, -1, 20, false);
    Wait(1.0, c_timeGame);
    CameraLockInput(gv_p1_USER, false);
    libNtve_gf_CreateUnitsAtPoint2(1, "VikingFighter", 0, gv_p2_DOMINION_RED, PointFromId(134));
    gv_viking01 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "VikingFighter", 0, gv_p2_DOMINION_RED, PointFromId(111));
    gv_viking02 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "VikingFighter", 0, gv_p2_DOMINION_RED, PointFromId(960));
    gv_viking03 = UnitLastCreated();
    UnitIssueOrder(gv_viking01, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(171)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_viking02, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(172)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_viking03, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(959)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(UnitGroup(null, gv_p2_DOMINION_RED, RegionFromId(35), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(953)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup(null, gv_p2_DOMINION_RED, RegionFromId(39), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2614)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup(null, gv_p2_DOMINION_RED, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1949)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup(null, gv_p2_DOMINION_RED, RegionFromId(38), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2615)), c_orderQueueReplace);
    auto2D370052_g = UnitGroupFilter("Firebat", c_playerAny, gv_riksvilleTownSquareDominion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2D370052_u = UnitGroupCount(auto2D370052_g, c_unitCountAll);
    for (;; auto2D370052_u -= 1) {
        auto2D370052_var = UnitGroupUnitFromEnd(auto2D370052_g, auto2D370052_u);
        if (auto2D370052_var == null) { break; }
        UnitIssueOrder(auto2D370052_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2177)), c_orderQueueReplace);
    }
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(6)), 3.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/ED89FBB2"), null, RegionGetCenter(RegionFromId(6)));
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_AttachActorToUnit(gv_raynor, "TalkIcon", "Ref_Origin");
    // Transmission - SoundLink("TRaynor01Raynor00011", 0)
    libCamp_gf_SendTransmissionCampaign(gv_raynor, SoundLink("TRaynor01Raynor00011", -1), c_transmissionDurationAdd, 0.0, false);
    Wait(1.5, c_timeGame);
    TriggerExecute(gt_RiksvilleTownSquareDropPods, true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TRaynor01MusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RiksvilleTownSquareViewQ_Init () {
    gt_RiksvilleTownSquareViewQ = TriggerCreate("gt_RiksvilleTownSquareViewQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Riksville Town Square Drop Pods
//--------------------------------------------------------------------------------------------------
bool gt_RiksvilleTownSquareDropPods_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto36165784_g;
    int auto36165784_u;
    unit auto36165784_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((RegionContainsPoint(RegionCircle(PointFromId(113), 10.0), CameraGetTarget(gv_p1_USER)) == true) && (gv_gameOver == false) && (gv_inCinematic == false)) {
        CameraShakeStart(gv_p1_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.02, 2.0, 100.0, 2.0);
    }

    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Marine", 0, gv_p1_USER, PointFromId(58));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_dropGroup);
    libCamp_gf_CreateDropPod(libCamp_ge_DropPodRace_Terran, PointFromId(113), gv_dropGroup, false);
    Wait(0.2, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Marine", 0, gv_p1_USER, PointFromId(89));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_dropGroup);
    libCamp_gf_CreateDropPod(libCamp_ge_DropPodRace_Terran, PointFromId(1671), UnitLastCreatedGroup(), false);
    Wait(0.3, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Marine", 0, gv_p1_USER, PointFromId(106));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_dropGroup);
    if (((PlayerDifficulty(1) == 1) == true)) {
        auto36165784_g = gv_dropGroup;
        auto36165784_u = UnitGroupCount(auto36165784_g, c_unitCountAll);
        for (;; auto36165784_u -= 1) {
            auto36165784_var = UnitGroupUnitFromEnd(auto36165784_g, auto36165784_u);
            if (auto36165784_var == null) { break; }
            UnitSetInfoText(auto36165784_var, StringToText(""), StringExternal("Param/Value/4925FF9B"), StringToText(""));
            UnitSetState(auto36165784_var, c_unitStateTooltipable, true);
        }
    }

    libCamp_gf_CreateDropPod(libCamp_ge_DropPodRace_Terran, PointFromId(1672), UnitLastCreatedGroup(), true);
    UnitGroupIssueOrder(gv_dropGroup, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2177)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RiksvilleTownSquareDropPods_Init () {
    gt_RiksvilleTownSquareDropPods = TriggerCreate("gt_RiksvilleTownSquareDropPods_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Riksville Town Square Clear
//--------------------------------------------------------------------------------------------------
bool gt_RiksvilleTownSquareClear_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_sPEAKER;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(gv_riksvilleTownSquareDominion, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_RiksvilleTownSquareClearDialogueQ, true, true);
    TriggerEnable(gt_PlayHoloboard02Q, true);
    TriggerEnable(gt_CreateReticule2, true);
    TriggerEnable(gt_CreateReticule3, true);
    TriggerEnable(gt_PlayHoloboard04Q, true);
    TriggerEnable(gt_CreateReticule4, true);
    TriggerEnable(gt_RiksvilleTownRevealCheck, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RiksvilleTownSquareClear_Init () {
    gt_RiksvilleTownSquareClear = TriggerCreate("gt_RiksvilleTownSquareClear_Func");
    TriggerAddEventUnitDied(gt_RiksvilleTownSquareClear, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Riksville Town Square Clear Dialogue Q
//--------------------------------------------------------------------------------------------------
bool gt_RiksvilleTownSquareClearDialogueQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_speaker;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_speaker = UnitGroupRandomUnit(gv_dropGroup, c_unitCountAlive);
    UIAlertUnit("Trigger", gv_p1_USER, StringExternal("Param/Value/A3BF4F95"), null, lv_speaker);
    TriggerQueueEnter();
    if ((UnitIsAlive(lv_speaker) == true)) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        libNtve_gf_AttachActorToUnit(lv_speaker, "TalkIcon", "Ref_Origin");
        // Transmission - SoundLink("TRaynor03Marine500016", 0)
        libCamp_gf_SendTransmissionCampaign(lv_speaker, SoundLink("TRaynor03Marine500016", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RiksvilleTownSquareClearDialogueQ_Init () {
    gt_RiksvilleTownSquareClearDialogueQ = TriggerCreate("gt_RiksvilleTownSquareClearDialogueQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Riksville Town Square Viking Remove
//--------------------------------------------------------------------------------------------------
bool gt_RiksvilleTownSquareVikingRemove_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((gv_viking01 == EventUnit()) || (gv_viking02 == EventUnit()) || (gv_viking03 == EventUnit())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RiksvilleTownSquareVikingRemove_Init () {
    gt_RiksvilleTownSquareVikingRemove = TriggerCreate("gt_RiksvilleTownSquareVikingRemove_Func");
    TriggerAddEventUnitRegion(gt_RiksvilleTownSquareVikingRemove, null, RegionFromId(37), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Riksville Town Reveal Check
//--------------------------------------------------------------------------------------------------
bool gt_RiksvilleTownRevealCheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionFromId(6), UnitFilter(0, 0, 0, 0), 0), c_unitCountAlive) <= 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    VisRevealerDestroy(gv_riksvilleTownSquareReavler);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RiksvilleTownRevealCheck_Init () {
    gt_RiksvilleTownRevealCheck = TriggerCreate("gt_RiksvilleTownRevealCheck_Func");
    TriggerEnable(gt_RiksvilleTownRevealCheck, false);
    TriggerAddEventTimePeriodic(gt_RiksvilleTownRevealCheck, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Southie Marine aggro- Statue
//--------------------------------------------------------------------------------------------------
bool gt_SouthieMarineaggroStatue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_holoboards[3]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_southieTarget = EventUnitTarget();
    TriggerExecute(gt_SouthieMarineattackQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SouthieMarineaggroStatue_Init () {
    gt_SouthieMarineaggroStatue = TriggerCreate("gt_SouthieMarineaggroStatue_Func");
    TriggerAddEventUnitAttacked(gt_SouthieMarineaggroStatue, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Southie Marine aggro- Proximity
//--------------------------------------------------------------------------------------------------
bool gt_SouthieMarineaggroProximity_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_southieTarget = EventUnit();
    TriggerExecute(gt_SouthieMarineattackQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SouthieMarineaggroProximity_Init () {
    gt_SouthieMarineaggroProximity = TriggerCreate("gt_SouthieMarineaggroProximity_Func");
    TriggerAddEventUnitRegion(gt_SouthieMarineaggroProximity, null, RegionFromId(11), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Southie Marine attack Q
//--------------------------------------------------------------------------------------------------
bool gt_SouthieMarineattackQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_mARINES;

    // Automatic Variable Declarations
    unitgroup autoC3475AE5_g;
    int autoC3475AE5_u;
    unit autoC3475AE5_var;

    // Variable Initialization
    lv_mARINES = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoC3475AE5_g = UnitGroup("Marine", gv_p2_DOMINION_RED, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC3475AE5_u = UnitGroupCount(autoC3475AE5_g, c_unitCountAll);
    for (;; autoC3475AE5_u -= 1) {
        autoC3475AE5_var = UnitGroupUnitFromEnd(autoC3475AE5_g, autoC3475AE5_u);
        if (autoC3475AE5_var == null) { break; }
        UnitGroupAdd(lv_mARINES, autoC3475AE5_var);
        UnitIssueOrder(autoC3475AE5_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_southieTarget)), c_orderQueueReplace);
    }
    gv_southieSpeaker = UnitGroupRandomUnit(lv_mARINES, c_unitCountAlive);
    TriggerQueueEnter();
    if ((UnitIsAlive(gv_southieSpeaker) == true)) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        libNtve_gf_AttachActorToUnit(gv_southieSpeaker, "TalkIcon", "Ref_Origin");
        // Transmission - SoundLink("TRaynor01DominionMarine700036", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor01DominionMarine700036", 0), c_transmissionDurationAdd, 0.0, false);
        gv_southieTransmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    TriggerEnable(gt_PlayHoloboard03Q, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SouthieMarineattackQ_Init () {
    gt_SouthieMarineattackQ = TriggerCreate("gt_SouthieMarineattackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Southie Transmission Kill
//--------------------------------------------------------------------------------------------------
bool gt_SouthieTransmissionKill_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_southieSpeaker))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionClear(gv_southieTransmission);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SouthieTransmissionKill_Init () {
    gt_SouthieTransmissionKill = TriggerCreate("gt_SouthieTransmissionKill_Func");
    TriggerAddEventUnitDied(gt_SouthieTransmissionKill, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: This is bad Q
//--------------------------------------------------------------------------------------------------
bool gt_ThisisbadQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_holoboards[4]))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/EE3C9CCF"), null, RegionGetCenter(RegionFromId(19)));
    VisRevealArea(gv_p1_USER, RegionFromId(19), 7.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libNtve_gf_AttachActorToUnit(gv_raynor, "TalkIcon", "Ref_Origin");
    // Transmission - SoundLink("TRaynor01Raynor00042", 0)
    libCamp_gf_SendTransmissionCampaign(gv_raynor, SoundLink("TRaynor01Raynor00042", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThisisbadQ_Init () {
    gt_ThisisbadQ = TriggerCreate("gt_ThisisbadQ_Func");
    TriggerAddEventUnitDied(gt_ThisisbadQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape View
//--------------------------------------------------------------------------------------------------
bool gt_EscapeView_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealerCreate(gv_p1_USER, RegionFromId(28));
    gv_escapeRevealer = VisRevealerLastCreated();
    TriggerExecute(gt_HoloboardStopSounds, true, false);
    TriggerExecute(gt_MidEscapeQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeView_Init () {
    gt_EscapeView = TriggerCreate("gt_EscapeView_Func");
    TriggerAddEventUnitRegion(gt_EscapeView, null, RegionFromId(21), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape Damage
//--------------------------------------------------------------------------------------------------
bool gt_EscapeDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto78EC0DC4_g;
    int auto78EC0DC4_u;
    unit auto78EC0DC4_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto78EC0DC4_g = UnitGroupFilter("Marine", gv_p2_DOMINION_RED, gv_escapeJerks, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto78EC0DC4_u = UnitGroupCount(auto78EC0DC4_g, c_unitCountAll);
    for (;; auto78EC0DC4_u -= 1) {
        auto78EC0DC4_var = UnitGroupUnitFromEnd(auto78EC0DC4_g, auto78EC0DC4_u);
        if (auto78EC0DC4_var == null) { break; }
        UnitIssueOrder(auto78EC0DC4_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(905)), c_orderQueueReplace);
    }
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(728)), c_animNameDefault, "Fidget Inferior End", c_animFlagPlayForever, c_animTimeDefault);
    Wait(0.2, c_timeGame);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(UnitFromId(728)), c_animNameDefault);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(216)), c_animNameDefault, "Fidget Inferior End", c_animFlagPlayForever, c_animTimeDefault);
    Wait(0.2, c_timeGame);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(UnitFromId(216)), c_animNameDefault);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(1074)), c_animNameDefault, "Fidget Inferior End", c_animFlagPlayForever, c_animTimeDefault);
    Wait(0.2, c_timeGame);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(UnitFromId(1074)), c_animNameDefault);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(925)), c_animNameDefault, "Fidget Inferior End", c_animFlagPlayForever, c_animTimeDefault);
    Wait(0.2, c_timeGame);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(UnitFromId(925)), c_animNameDefault);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(912)), c_animNameDefault, "Fidget Inferior End", c_animFlagPlayForever, c_animTimeDefault);
    Wait(0.2, c_timeGame);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(UnitFromId(912)), c_animNameDefault);
    UnitBehaviorAdd(UnitFromId(728), "Run", UnitFromId(728), 1);
    UnitBehaviorAdd(UnitFromId(216), "Run", UnitFromId(216), 1);
    UnitBehaviorAdd(UnitFromId(1074), "Run", UnitFromId(1074), 1);
    UnitBehaviorAdd(UnitFromId(925), "Run", UnitFromId(925), 1);
    UnitBehaviorAdd(UnitFromId(912), "Run", UnitFromId(912), 1);
    Wait(2.0, c_timeGame);
    gf_OrderUnitToMoveThenTurnToTargetPointsFacing(UnitFromId(1074), PointFromId(1835), c_orderQueueReplace);
    gf_OrderUnitToMoveThenTurnToTargetPointsFacing(UnitFromId(912), PointFromId(1836), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeDamage_Init () {
    gt_EscapeDamage = TriggerCreate("gt_EscapeDamage_Func");
    TriggerAddEventUnitDamaged(gt_EscapeDamage, UnitRefFromUnit(UnitFromId(1615)), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_EscapeDamage, UnitRefFromUnit(UnitFromId(1464)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape Clear Q
//--------------------------------------------------------------------------------------------------
bool gt_EscapeClearQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA91711A4_g;
    int autoA91711A4_u;
    unit autoA91711A4_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_escapeJerks, c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(331)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.5, c_timeGame);
    autoA91711A4_g = gv_escapeCivilians;
    autoA91711A4_u = UnitGroupCount(autoA91711A4_g, c_unitCountAll);
    for (;; autoA91711A4_u -= 1) {
        autoA91711A4_var = UnitGroupUnitFromEnd(autoA91711A4_g, autoA91711A4_u);
        if (autoA91711A4_var == null) { break; }
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(autoA91711A4_var), c_animNameDefault);
    }
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TRaynor01Raynor00044", 0)
    libCamp_gf_SendTransmissionCampaign(gv_raynor, SoundLink("TRaynor01Raynor00044", -1), c_transmissionDurationAdd, 0.0, true);
    libNtve_gf_AttachActorToUnit(UnitFromId(216), "TalkIcon", "Ref_Origin");
    UIAlertUnit("Trigger", gv_p1_USER, StringExternal("Param/Value/665F3043"), null, UnitFromId(216));
    // Transmission - SoundLink("TRaynor01Civilian200048", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor01Civilian200048", -1), c_transmissionDurationAdd, 0.0, true);
    libNtve_gf_AttachActorToUnit(UnitFromId(728), "TalkIcon", "Ref_Origin");
    UIAlertUnit("Trigger", gv_p1_USER, StringExternal("Param/Value/9E5EA8B9"), null, UnitFromId(728));
    // Transmission - SoundLink("TRaynor01CivilianFemale200050", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor01CivilianFemale200050", -1), c_transmissionDurationAdd, 0.0, true);
    Wait(0.2, c_timeGame);
    // Transmission - SoundLink("TRaynor01Raynor00051", 0)
    libCamp_gf_SendTransmissionCampaign(gv_raynor, SoundLink("TRaynor01Raynor00051", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    Wait(3.0, c_timeGame);
    TriggerEnable(gt_PlayHoloboard05Q, true);
    TriggerEnable(gt_CreateReticule5, true);
    TriggerEnable(gt_PlayHoloboard06Q, true);
    TriggerEnable(gt_CreateReticule6, true);
    TriggerEnable(gt_EscapeRevealCheck, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeClearQ_Init () {
    gt_EscapeClearQ = TriggerCreate("gt_EscapeClearQ_Func");
    TriggerAddEventUnitDied(gt_EscapeClearQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EscapeRevealCheck
//--------------------------------------------------------------------------------------------------
bool gt_EscapeRevealCheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionFromId(28), UnitFilter(0, 0, 0, 0), 0), c_unitCountAlive) <= 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    VisRevealerDestroy(gv_escapeRevealer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeRevealCheck_Init () {
    gt_EscapeRevealCheck = TriggerCreate("gt_EscapeRevealCheck_Func");
    TriggerEnable(gt_EscapeRevealCheck, false);
    TriggerAddEventTimePeriodic(gt_EscapeRevealCheck, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape Random Cheer
//--------------------------------------------------------------------------------------------------
bool gt_EscapeRandomCheer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_civillians;

    // Automatic Variable Declarations
    unitgroup autoD865BB89_g;
    int autoD865BB89_u;
    unit autoD865BB89_var;
    int autoE58CDC3B_val;

    // Variable Initialization
    lv_civillians = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("CivilianFemale", c_playerAny, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_civillians);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("Civilian", c_playerAny, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_civillians);
        if ((UnitGroupCount(gv_escapeJerks, c_unitCountAlive) <= 0) && (gv_onTheMove == false)) {
            autoD865BB89_g = lv_civillians;
            autoD865BB89_u = UnitGroupCount(autoD865BB89_g, c_unitCountAll);
            for (;; autoD865BB89_u -= 1) {
                autoD865BB89_var = UnitGroupUnitFromEnd(autoD865BB89_g, autoD865BB89_u);
                if (autoD865BB89_var == null) { break; }
                if ((RandomInt(1, 2) <= 1)) {
                    autoE58CDC3B_val = RandomInt(0, 2);
                    if (autoE58CDC3B_val == 0) {
                        UnitIssueOrder(autoD865BB89_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
                        libNtve_gf_SendActorMessageToUnit(autoD865BB89_var, "AnimGroupApply Stand,Victory");
                    }
                    else if (autoE58CDC3B_val == 1) {
                        UnitIssueOrder(autoD865BB89_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
                        libNtve_gf_SendActorMessageToUnit(autoD865BB89_var, "AnimGroupApply Stand,Victory,01");
                    }
                    else if (autoE58CDC3B_val == 2) {
                        UnitIssueOrder(autoD865BB89_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
                        libNtve_gf_SendActorMessageToUnit(autoD865BB89_var, "AnimGroupApply Stand,Victory,02");
                    }
                    else {
                    }
                }

            }
        }

        Wait(RandomFixed(1.0, 3.0), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeRandomCheer_Init () {
    gt_EscapeRandomCheer = TriggerCreate("gt_EscapeRandomCheer_Func");
    TriggerAddEventUnitDied(gt_EscapeRandomCheer, UnitRefFromUnit(UnitFromId(68)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Civilian Spawn Crowd
//--------------------------------------------------------------------------------------------------
bool gt_CivilianSpawnCrowd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    revealer lv_vis;

    // Automatic Variable Declarations
    unitgroup auto5F9AFFD9_g;
    int auto5F9AFFD9_u;
    unit auto5F9AFFD9_var;
    unitgroup auto8A7E80E5_g;
    int auto8A7E80E5_u;
    unit auto8A7E80E5_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealerCreate(gv_p1_USER, RegionFromId(80));
    lv_vis = VisRevealerLastCreated();
    gv_onTheMove = true;
    PlayerSetState(gv_p3_RIKSVILLE_YELLOW, c_playerStateFidgetingEnabled, true);
    auto5F9AFFD9_g = gv_escapeCivilians;
    auto5F9AFFD9_u = UnitGroupCount(auto5F9AFFD9_g, c_unitCountAll);
    for (;; auto5F9AFFD9_u -= 1) {
        auto5F9AFFD9_var = UnitGroupUnitFromEnd(auto5F9AFFD9_g, auto5F9AFFD9_u);
        if (auto5F9AFFD9_var == null) { break; }
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(auto5F9AFFD9_var), c_animNameDefault);
        UnitBehaviorRemove(auto5F9AFFD9_var, "Run", 1);
    }
    UnitGroupIssueOrder(gv_escapeCivilians, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(94))), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Civilian", 0, gv_p3_RIKSVILLE_YELLOW, PointFromId(888));
    libNtve_gf_UnitSetVariation(UnitLastCreated(), "Civilian", 1, "male,01");
    gv_civMarchSpeaker01 = UnitLastCreated();
    gf_SetCivviePropertiesforSpawnedunit(UnitLastCreated());
    UnitGroupAdd(gv_escapeCivilians, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(918)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(UnitLastCreated()), UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)))), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "Civilian", 0, gv_p3_RIKSVILLE_YELLOW, PointFromId(888));
    libNtve_gf_UnitSetVariation(UnitLastCreated(), "Civilian", 2, "male,backpack,01");
    gf_SetCivviePropertiesforSpawnedunit(UnitLastCreated());
    UnitGroupAdd(gv_escapeCivilians, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(919)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(UnitLastCreated()), UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)))), c_orderQueueAddToEnd);
    Wait(0.2, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Civilian", 0, gv_p3_RIKSVILLE_YELLOW, PointFromId(888));
    libNtve_gf_UnitSetVariation(UnitLastCreated(), "Civilian", 2, "male,backpack,02");
    gf_SetCivviePropertiesforSpawnedunit(UnitLastCreated());
    UnitGroupAdd(gv_escapeCivilians, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1152)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(UnitLastCreated()), UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)))), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "Civilian", 0, gv_p3_RIKSVILLE_YELLOW, PointFromId(888));
    libNtve_gf_UnitSetVariation(UnitLastCreated(), "Civilian", 3, "male,helmet,02");
    gf_SetCivviePropertiesforSpawnedunit(UnitLastCreated());
    UnitGroupAdd(gv_escapeCivilians, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1153)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(UnitLastCreated()), UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)))), c_orderQueueAddToEnd);
    Wait(0.2, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Civilian", 0, gv_p3_RIKSVILLE_YELLOW, PointFromId(890));
    libNtve_gf_UnitSetVariation(UnitLastCreated(), "Civilian", 3, "male,helmet,03");
    gv_civMarchSpeaker02 = UnitLastCreated();
    UnitGroupAdd(gv_escapeCivilians, UnitLastCreated());
    gf_SetCivviePropertiesforSpawnedunit(UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(926)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(UnitLastCreated()), UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)))), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "Civilian", 0, gv_p3_RIKSVILLE_YELLOW, PointFromId(890));
    libNtve_gf_UnitSetVariation(UnitLastCreated(), "Civilian", 1, "male,helmet,01");
    UnitGroupAdd(gv_escapeCivilians, UnitLastCreated());
    gf_SetCivviePropertiesforSpawnedunit(UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(920)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(UnitLastCreated()), UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)))), c_orderQueueAddToEnd);
    Wait(0.2, c_timeGame);
    TriggerExecute(gt_CivilianMarchQ, true, false);
    libNtve_gf_CreateUnitsAtPoint2(1, "Civilian", 0, gv_p3_RIKSVILLE_YELLOW, PointFromId(890));
    libNtve_gf_UnitSetVariation(UnitLastCreated(), "Civilian", 2, "male,helmet,02");
    gf_SetCivviePropertiesforSpawnedunit(UnitLastCreated());
    UnitGroupAdd(gv_escapeCivilians, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1155)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(UnitLastCreated()), UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)))), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "Civilian", 0, gv_p3_RIKSVILLE_YELLOW, PointFromId(890));
    libNtve_gf_UnitSetVariation(UnitLastCreated(), "Civilian", 1, "male,03");
    gf_SetCivviePropertiesforSpawnedunit(UnitLastCreated());
    UnitGroupAdd(gv_escapeCivilians, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1154)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(UnitLastCreated()), UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)))), c_orderQueueAddToEnd);
    Wait(0.2, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Civilian", 0, gv_p3_RIKSVILLE_YELLOW, PointFromId(891));
    libNtve_gf_UnitSetVariation(UnitLastCreated(), "Civilian", 2, "male,helmet,03");
    gf_SetCivviePropertiesforSpawnedunit(UnitLastCreated());
    UnitGroupAdd(gv_escapeCivilians, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(927)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(UnitLastCreated()), UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)))), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "Civilian", 0, gv_p3_RIKSVILLE_YELLOW, PointFromId(891));
    libNtve_gf_UnitSetVariation(UnitLastCreated(), "Civilian", 1, "male,helmet,03");
    gf_SetCivviePropertiesforSpawnedunit(UnitLastCreated());
    gv_civMarchSpeaker03 = UnitLastCreated();
    UnitGroupAdd(gv_escapeCivilians, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1156)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(UnitLastCreated()), UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)))), c_orderQueueAddToEnd);
    auto8A7E80E5_g = gv_escapeCivilians;
    auto8A7E80E5_u = UnitGroupCount(auto8A7E80E5_g, c_unitCountAll);
    for (;; auto8A7E80E5_u -= 1) {
        auto8A7E80E5_var = UnitGroupUnitFromEnd(auto8A7E80E5_g, auto8A7E80E5_u);
        if (auto8A7E80E5_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(auto8A7E80E5_var, true, gv_p1_USER);
    }
    Wait(8.0, c_timeGame);
    VisRevealerDestroy(lv_vis);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CivilianSpawnCrowd_Init () {
    gt_CivilianSpawnCrowd = TriggerCreate("gt_CivilianSpawnCrowd_Func");
    TriggerAddEventUnitRegion(gt_CivilianSpawnCrowd, null, RegionFromId(93), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Civilian March Q
//--------------------------------------------------------------------------------------------------
bool gt_CivilianMarchQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9DF4B488_g;
    int auto9DF4B488_u;
    unit auto9DF4B488_var;
    unitgroup auto7C99916A_g;
    int auto7C99916A_u;
    unit auto7C99916A_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    Wait(0.2, c_timeGame);
    libNtve_gf_AttachActorToUnit(gv_civMarchSpeaker01, "TalkIcon", "Ref_Origin");
    UIAlertUnit("Trigger", gv_p1_USER, StringExternal("Param/Value/2807169B"), null, gv_civMarchSpeaker01);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TRaynor01Civilian4WhitewGoggles00005", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor01Civilian4WhitewGoggles00005", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    libNtve_gf_AttachActorToUnit(gv_civMarchSpeaker02, "TalkIcon", "Ref_Origin");
    UIAlertUnit("Trigger", gv_p1_USER, StringExternal("Param/Value/0AA42C42"), null, gv_civMarchSpeaker02);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    // Transmission - SoundLink("TRaynor01Civilian700056", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor01Civilian700056", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    libNtve_gf_SetAlliance(gv_p3_RIKSVILLE_YELLOW, gv_p2_DOMINION_RED, libNtve_ge_AllianceSetting_Enemy);
    auto9DF4B488_g = gv_escapeCivilians;
    auto9DF4B488_u = UnitGroupCount(auto9DF4B488_g, c_unitCountAll);
    for (;; auto9DF4B488_u -= 1) {
        auto9DF4B488_var = UnitGroupUnitFromEnd(auto9DF4B488_g, auto9DF4B488_u);
        if (auto9DF4B488_var == null) { break; }
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(auto9DF4B488_var), c_animNameDefault);
        UnitBehaviorAdd(auto9DF4B488_var, "CivilianEnableWeapon", auto9DF4B488_var, 1);
        UnitBehaviorAdd(auto9DF4B488_var, "Run", auto9DF4B488_var, 1);
    }
    auto7C99916A_g = UnitGroup(null, gv_p3_RIKSVILLE_YELLOW, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7C99916A_u = UnitGroupCount(auto7C99916A_g, c_unitCountAll);
    for (;; auto7C99916A_u -= 1) {
        auto7C99916A_var = UnitGroupUnitFromEnd(auto7C99916A_g, auto7C99916A_u);
        if (auto7C99916A_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(auto7C99916A_var, false);
    }
    if ((gv_escapeCivillansFinalOrderIssued == false)) {
        if ((UnitIsAlive(gv_holoboards[6]) == true)) {
            UnitGroupIssueOrder(gv_escapeCivilians, OrderTargetingUnit(AbilityCommand("attack", 0), gv_holoboards[6]), c_orderQueueAddToEnd);
        }
        else {
            UnitGroupIssueOrder(gv_escapeCivilians, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(5))), c_orderQueueAddToEnd);
        }
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CivilianMarchQ_Init () {
    gt_CivilianMarchQ = TriggerCreate("gt_CivilianMarchQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fly away birdie!
//--------------------------------------------------------------------------------------------------
bool gt_Flyawaybirdie_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(49), "AnimalCorpse", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Flyawaybirdie_Init () {
    gt_Flyawaybirdie = TriggerCreate("gt_Flyawaybirdie_Func");
    TriggerAddEventUnitRangePoint(gt_Flyawaybirdie, null, RegionGetCenter(RegionFromId(49)), 5.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fly away birdie! pt. II - the Birdening
//--------------------------------------------------------------------------------------------------
bool gt_FlyawaybirdieptIItheBirdening_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(3), "AnimalCorpse", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlyawaybirdieptIItheBirdening_Init () {
    gt_FlyawaybirdieptIItheBirdening = TriggerCreate("gt_FlyawaybirdieptIItheBirdening_Func");
    TriggerAddEventUnitRangePoint(gt_FlyawaybirdieptIItheBirdening, null, RegionGetCenter(RegionFromId(3)), 5.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Compound View Q
//--------------------------------------------------------------------------------------------------
bool gt_DominionCompoundViewQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoAE00C3A6_g;
    int autoAE00C3A6_u;
    unit autoAE00C3A6_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealerCreate(gv_p1_USER, RegionFromId(92));
    gv_dominionCompoundRevealer = VisRevealerLastCreated();
    TriggerEnable(gt_DominionCompoundWarningLights, true);
    TriggerExecute(gt_DominionCivilianCompound, true, false);
    UnitGroupIssueOrder(gv_dominionCompoundGuards, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(82)), c_orderQueueReplace);
    gv_escapeCivillansFinalOrderIssued = true;
    autoAE00C3A6_g = gv_escapeCivilians;
    autoAE00C3A6_u = UnitGroupCount(autoAE00C3A6_g, c_unitCountAll);
    for (;; autoAE00C3A6_u -= 1) {
        autoAE00C3A6_var = UnitGroupUnitFromEnd(autoAE00C3A6_g, autoAE00C3A6_u);
        if (autoAE00C3A6_var == null) { break; }
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(autoAE00C3A6_var), c_animNameDefault);
        UnitIssueOrder(autoAE00C3A6_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(17))), c_orderQueueReplace);
    }
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/A8484597"), null, RegionGetCenter(RegionFromId(92)));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TRaynor01DominionOfficer100054", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor01DominionOfficer100054", -1), c_transmissionDurationAdd, 0.0, true);
    libNtve_gf_AttachActorToUnit(gv_civMarchSpeaker03, "TalkIcon", "Ref_Origin");
    UIAlertUnit("Trigger", gv_p1_USER, StringExternal("Param/Value/26D5D7A5"), null, gv_civMarchSpeaker03);
    // Transmission - SoundLink("TRaynor01Civilian800061", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor01Civilian800061", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionCompoundViewQ_Init () {
    gt_DominionCompoundViewQ = TriggerCreate("gt_DominionCompoundViewQ_Func");
    TriggerAddEventUnitRegion(gt_DominionCompoundViewQ, null, RegionFromId(14), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Compound Viking land
//--------------------------------------------------------------------------------------------------
bool gt_DominionCompoundVikingland_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((((UnitGetOwner(EventUnit()) == gv_p1_USER) && (UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) || ((UnitGetOwner(EventUnit()) == gv_p3_RIKSVILLE_YELLOW) && (UnitFilterMatch(EventUnit(), gv_p3_RIKSVILLE_YELLOW, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(41), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(350)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(41), Order(AbilityCommand("AssaultMode", 0)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(118), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(95)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(118), Order(AbilityCommand("AssaultMode", 0)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(189), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(205)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(189), Order(AbilityCommand("AssaultMode", 0)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionCompoundVikingland_Init () {
    gt_DominionCompoundVikingland = TriggerCreate("gt_DominionCompoundVikingland_Func");
    TriggerAddEventUnitRegion(gt_DominionCompoundVikingland, null, RegionFromId(24), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Compound Clear
//--------------------------------------------------------------------------------------------------
bool gt_DominionCompoundClear_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoFCDC5647_g;
    int autoFCDC5647_u;
    unit autoFCDC5647_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(gv_dominionCompoundGuards, c_unitCountAlive) <= 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_compoundClear = true;
    autoFCDC5647_g = UnitGroup(null, c_playerAny, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFCDC5647_u = UnitGroupCount(autoFCDC5647_g, c_unitCountAll);
    for (;; autoFCDC5647_u -= 1) {
        autoFCDC5647_var = UnitGroupUnitFromEnd(autoFCDC5647_g, autoFCDC5647_u);
        if (autoFCDC5647_var == null) { break; }
        UnitGroupAdd(gv_escapeCivilians, autoFCDC5647_var);
        UnitBehaviorAdd(autoFCDC5647_var, "CivilianEnableWeapon", autoFCDC5647_var, 1);
        if ((gv_escapeCivillansFinalOrderIssued == false)) {
            UnitIssueOrder(autoFCDC5647_var, OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(105)), c_orderQueueReplace);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionCompoundClear_Init () {
    gt_DominionCompoundClear = TriggerCreate("gt_DominionCompoundClear_Func");
    TriggerAddEventUnitDied(gt_DominionCompoundClear, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Compound Move
//--------------------------------------------------------------------------------------------------
bool gt_DominionCompoundMove_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p3_RIKSVILLE_YELLOW))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(3.0, c_timeGame);
    TriggerExecute(gt_DominionCompoundCheer, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionCompoundMove_Init () {
    gt_DominionCompoundMove = TriggerCreate("gt_DominionCompoundMove_Func");
    TriggerAddEventUnitRegion(gt_DominionCompoundMove, null, RegionFromId(1), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Compound Cheer
//--------------------------------------------------------------------------------------------------
bool gt_DominionCompoundCheer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto14FBE439_g;
    int auto14FBE439_u;
    unit auto14FBE439_var;
    int autoDCFB51D0_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto14FBE439_g = UnitGroupFilterPlayer(gv_dominionCompoundCivilian, gv_p3_RIKSVILLE_YELLOW, 0);
    auto14FBE439_u = UnitGroupCount(auto14FBE439_g, c_unitCountAll);
    for (;; auto14FBE439_u -= 1) {
        auto14FBE439_var = UnitGroupUnitFromEnd(auto14FBE439_g, auto14FBE439_u);
        if (auto14FBE439_var == null) { break; }
        if ((RandomInt(1, 8) <= 4)) {
            autoDCFB51D0_val = RandomInt(0, 2);
            if (autoDCFB51D0_val == 0) {
                UnitIssueOrder(auto14FBE439_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
                libNtve_gf_SendActorMessageToUnit(auto14FBE439_var, "AnimGroupApply Stand,Victory");
            }
            else if (autoDCFB51D0_val == 1) {
                UnitIssueOrder(auto14FBE439_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
                libNtve_gf_SendActorMessageToUnit(auto14FBE439_var, "AnimGroupApply Stand,Victory,01");
            }
            else if (autoDCFB51D0_val == 2) {
                UnitIssueOrder(auto14FBE439_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
                libNtve_gf_SendActorMessageToUnit(auto14FBE439_var, "AnimGroupApply Stand,Victory,Fidget");
            }
            else {
            }
        }
        else {
            if ((RandomInt(1, 8) <= 4)) {
                UnitIssueOrder(auto14FBE439_var, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(auto14FBE439_var), UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)))), c_orderQueueAddToEnd);
            }

        }
    }
    Wait(RandomFixed(4.0, 5.5), c_timeGame);
    TriggerExecute(gt_DominionCompoundCheer, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionCompoundCheer_Init () {
    gt_DominionCompoundCheer = TriggerCreate("gt_DominionCompoundCheer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Compound Warning Lights
//--------------------------------------------------------------------------------------------------
bool gt_DominionCompoundWarningLights_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionFromId(92), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        TriggerEnable(TriggerGetCurrent(), false);
        SoundPlay(SoundLink("UI_TerranKlaxonAlert", 0), PlayerGroupAll(), 100.0, 0.0);
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(92), "BullhornLights", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(92), "BullhornLights", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
        Wait(10.0, c_timeReal);
        TriggerEnable(gt_DominionCompoundWarningLights, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionCompoundWarningLights_Init () {
    gt_DominionCompoundWarningLights = TriggerCreate("gt_DominionCompoundWarningLights_Func");
    TriggerEnable(gt_DominionCompoundWarningLights, false);
    TriggerAddEventTimePeriodic(gt_DominionCompoundWarningLights, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Civilian Compound
//--------------------------------------------------------------------------------------------------
bool gt_DominionCivilianCompound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto182B399C_val;
    int auto1DC2F67E_val;
    int auto937DAFB3_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_compoundClear == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto182B399C_val = RandomInt(0, 2);
    if (auto182B399C_val == 0) {
        auto1DC2F67E_val = RandomInt(0, 2);
        if (auto1DC2F67E_val == 0) {
            UnitIssueOrder(UnitFromId(10), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(23))), c_orderQueueReplace);
        }
        else if (auto1DC2F67E_val == 1) {
            UnitIssueOrder(UnitFromId(628), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(23))), c_orderQueueReplace);
        }
        else if (auto1DC2F67E_val == 1) {
            UnitIssueOrder(UnitFromId(323), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(23))), c_orderQueueReplace);
        }
        else {
        }
    }
    else if (auto182B399C_val == 1) {
        auto937DAFB3_val = RandomInt(0, 2);
        if (auto937DAFB3_val == 0) {
            UnitIssueOrder(UnitFromId(719), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(60))), c_orderQueueReplace);
        }
        else if (auto937DAFB3_val == 1) {
            UnitIssueOrder(UnitFromId(677), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(60))), c_orderQueueReplace);
        }
        else if (auto937DAFB3_val == 2) {
            UnitIssueOrder(UnitFromId(277), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(60))), c_orderQueueReplace);
        }
        else {
        }
    }
    else {
    }
    TriggerEnable(TriggerGetCurrent(), true);
    Wait(RandomFixed(2.0, 5.0), c_timeGame);
    TriggerExecute(gt_DominionCivilianCompound, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionCivilianCompound_Init () {
    gt_DominionCivilianCompound = TriggerCreate("gt_DominionCivilianCompound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Compound Reticle Killer
//--------------------------------------------------------------------------------------------------
bool gt_DominionCompoundReticleKiller_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == UnitFromId(158)))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTarget()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(gv_actorObjectiveMain);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionCompoundReticleKiller_Init () {
    gt_DominionCompoundReticleKiller = TriggerCreate("gt_DominionCompoundReticleKiller_Func");
    TriggerAddEventUnitAttacked(gt_DominionCompoundReticleKiller, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Reticule 2
//--------------------------------------------------------------------------------------------------
bool gt_CreateReticule2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((gv_holoReticules[2] == null))) {
            return false;
        }

        if (!((UnitIsAlive(gv_holoboards[2]) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(gv_holoboards[2]), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetScale(PingLastCreated(), 0.75);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/725E333A"));
    gv_holoPing[2] = PingLastCreated();
    libNtve_gf_AttachModelToUnit(gv_holoboards[2], "BriefingUnitSelectRed", "Ref_Center");
    gv_holoReticules[2] = libNtve_gf_ActorLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateReticule2_Init () {
    gt_CreateReticule2 = TriggerCreate("gt_CreateReticule2_Func");
    TriggerEnable(gt_CreateReticule2, false);
    TriggerAddEventUnitRange(gt_CreateReticule2, null, UnitFromId(24), 8.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Reticule 3
//--------------------------------------------------------------------------------------------------
bool gt_CreateReticule3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((gv_holoReticules[3] == null))) {
            return false;
        }

        if (!((UnitIsAlive(gv_holoboards[3]) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(gv_holoboards[3]), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetScale(PingLastCreated(), 0.75);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/026FC5EA"));
    gv_holoPing[3] = PingLastCreated();
    libNtve_gf_AttachModelToUnit(gv_holoboards[3], "BriefingUnitSelectRed", "Ref_Center");
    gv_holoReticules[3] = libNtve_gf_ActorLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateReticule3_Init () {
    gt_CreateReticule3 = TriggerCreate("gt_CreateReticule3_Func");
    TriggerEnable(gt_CreateReticule3, false);
    TriggerAddEventUnitRange(gt_CreateReticule3, null, UnitFromId(207), 4.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Reticule 4
//--------------------------------------------------------------------------------------------------
bool gt_CreateReticule4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((gv_holoReticules[4] == null))) {
            return false;
        }

        if (!((UnitIsAlive(gv_holoboards[4]) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(gv_holoboards[4]), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetScale(PingLastCreated(), 0.75);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/60CEFB49"));
    gv_holoPing[4] = PingLastCreated();
    libNtve_gf_AttachModelToUnit(gv_holoboards[4], "BriefingUnitSelectRed", "Ref_Center");
    gv_holoReticules[4] = libNtve_gf_ActorLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateReticule4_Init () {
    gt_CreateReticule4 = TriggerCreate("gt_CreateReticule4_Func");
    TriggerEnable(gt_CreateReticule4, false);
    TriggerAddEventUnitRange(gt_CreateReticule4, null, UnitFromId(32), 8.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Reticule 5
//--------------------------------------------------------------------------------------------------
bool gt_CreateReticule5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((gv_holoReticules[5] == null))) {
            return false;
        }

        if (!((UnitIsAlive(gv_holoboards[5]) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(gv_holoboards[5]), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetScale(PingLastCreated(), 0.75);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/CAC35025"));
    gv_holoPing[5] = PingLastCreated();
    libNtve_gf_AttachModelToUnit(gv_holoboards[5], "BriefingUnitSelectRed", "Ref_Center");
    gv_holoReticules[5] = libNtve_gf_ActorLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateReticule5_Init () {
    gt_CreateReticule5 = TriggerCreate("gt_CreateReticule5_Func");
    TriggerEnable(gt_CreateReticule5, false);
    TriggerAddEventUnitRange(gt_CreateReticule5, null, UnitFromId(68), 8.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Reticule 6
//--------------------------------------------------------------------------------------------------
bool gt_CreateReticule6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((gv_holoReticules[6] == null))) {
            return false;
        }

        if (!((UnitIsAlive(gv_holoboards[6]) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(gv_holoboards[6]), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetScale(PingLastCreated(), 0.75);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/D95646BF"));
    gv_holoPing[6] = PingLastCreated();
    libNtve_gf_AttachModelToUnit(gv_holoboards[6], "BriefingUnitSelectRed", "Ref_Center");
    gv_holoReticules[6] = libNtve_gf_ActorLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateReticule6_Init () {
    gt_CreateReticule6 = TriggerCreate("gt_CreateReticule6_Func");
    TriggerEnable(gt_CreateReticule6, false);
    TriggerAddEventUnitRange(gt_CreateReticule6, null, UnitFromId(2694), 8.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holo-Reticule Killer
//--------------------------------------------------------------------------------------------------
bool gt_HoloReticuleKiller_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unit autoF9DC6FF0_val;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MengskHologramBillboard"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF9DC6FF0_val = EventUnit();
    if (autoF9DC6FF0_val == gv_holoboards[1]) {
        libNtve_gf_KillModel(gv_holoReticules[1]);
    }
    else if (autoF9DC6FF0_val == gv_holoboards[2]) {
        libNtve_gf_KillModel(gv_holoReticules[2]);
    }
    else if (autoF9DC6FF0_val == gv_holoboards[3]) {
        libNtve_gf_KillModel(gv_holoReticules[3]);
    }
    else if (autoF9DC6FF0_val == gv_holoboards[4]) {
        libNtve_gf_KillModel(gv_holoReticules[4]);
    }
    else if (autoF9DC6FF0_val == gv_holoboards[5]) {
        libNtve_gf_KillModel(gv_holoReticules[5]);
    }
    else if (autoF9DC6FF0_val == gv_holoboards[6]) {
        libNtve_gf_KillModel(gv_holoReticules[6]);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HoloReticuleKiller_Init () {
    gt_HoloReticuleKiller = TriggerCreate("gt_HoloReticuleKiller_Func");
    TriggerAddEventUnitAttacked(gt_HoloReticuleKiller, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holo-Ping Killer
//--------------------------------------------------------------------------------------------------
bool gt_HoloPingKiller_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unit auto63F728EE_val;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MengskHologramBillboard"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto63F728EE_val = EventUnit();
    if (auto63F728EE_val == gv_holoboards[1]) {
        PingDestroy(gv_holoPing[1]);
    }
    else if (auto63F728EE_val == gv_holoboards[2]) {
        PingDestroy(gv_holoPing[2]);
    }
    else if (auto63F728EE_val == gv_holoboards[3]) {
        PingDestroy(gv_holoPing[3]);
    }
    else if (auto63F728EE_val == gv_holoboards[4]) {
        PingDestroy(gv_holoPing[4]);
    }
    else if (auto63F728EE_val == gv_holoboards[5]) {
        PingDestroy(gv_holoPing[5]);
    }
    else if (auto63F728EE_val == gv_holoboards[6]) {
        PingDestroy(gv_holoPing[6]);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HoloPingKiller_Init () {
    gt_HoloPingKiller = TriggerCreate("gt_HoloPingKiller_Func");
    TriggerAddEventUnitDied(gt_HoloPingKiller, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Play Holoboard01 Q
//--------------------------------------------------------------------------------------------------
bool gt_PlayHoloboard01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((TriggerQueueIsEmpty() == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_holoboards[1]) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitIsAlive(gv_holoboards[1]) == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_holoboards[1]), c_animNameDefault, "Talk Five", c_animFlagPlayForever, c_animTimeDefault);
        UIAlertUnit("Trigger", gv_p1_USER, StringExternal("Param/Value/4524782E"), null, gv_holoboards[1]);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TRaynor01Arcturus00018", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor01Arcturus00018", 0), c_transmissionDurationAdd, 0.0, false);
        gv_holoboardTransmission01 = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_holoboards[1]), c_animNameDefault);
    }

    TriggerQueueExit();
    Wait(10.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayHoloboard01Q_Init () {
    gt_PlayHoloboard01Q = TriggerCreate("gt_PlayHoloboard01Q_Func");
    TriggerEnable(gt_PlayHoloboard01Q, false);
    TriggerAddEventTimePeriodic(gt_PlayHoloboard01Q, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Play Holoboard02 Q
//--------------------------------------------------------------------------------------------------
bool gt_PlayHoloboard02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerQueueIsEmpty() == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((UnitIsAlive(gv_holoboards[2]) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitIsAlive(gv_holoboards[2]) == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_holoboards[2]), c_animNameDefault, "Talk One", c_animFlagPlayForever, c_animTimeDefault);
        UIAlertUnit("Trigger", gv_p1_USER, StringExternal("Param/Value/4590B606"), null, gv_holoboards[2]);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TRaynor01Arcturus00012", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor01Arcturus00012", 0), c_transmissionDurationAdd, 0.0, false);
        gv_holoboardTransmission02 = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_holoboards[2]), c_animNameDefault);
    }

    TriggerQueueExit();
    Wait(10.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayHoloboard02Q_Init () {
    gt_PlayHoloboard02Q = TriggerCreate("gt_PlayHoloboard02Q_Func");
    TriggerEnable(gt_PlayHoloboard02Q, false);
    TriggerAddEventTimePeriodic(gt_PlayHoloboard02Q, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Play Holoboard03 Q
//--------------------------------------------------------------------------------------------------
bool gt_PlayHoloboard03Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hOLOBOARD;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hOLOBOARD = gv_holoboards[3];

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerQueueIsEmpty() == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionCircle(UnitGetPosition(lv_hOLOBOARD), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((UnitIsAlive(lv_hOLOBOARD) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitIsAlive(gv_holoboards[3]) == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_hOLOBOARD), c_animNameDefault, "Talk One", c_animFlagPlayForever, c_animTimeDefault);
        UIAlertUnit("Trigger", gv_p1_USER, StringExternal("Param/Value/3C66BAA3"), null, lv_hOLOBOARD);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TRaynor01Arcturus00022", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor01Arcturus00022", 0), c_transmissionDurationAdd, 0.0, false);
        gv_holoboardTransmission03 = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(lv_hOLOBOARD), c_animNameDefault);
    }

    TriggerQueueExit();
    Wait(10.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayHoloboard03Q_Init () {
    gt_PlayHoloboard03Q = TriggerCreate("gt_PlayHoloboard03Q_Func");
    TriggerEnable(gt_PlayHoloboard03Q, false);
    TriggerAddEventTimePeriodic(gt_PlayHoloboard03Q, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Play Holoboard04 Q
//--------------------------------------------------------------------------------------------------
bool gt_PlayHoloboard04Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hOLOBOARD;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hOLOBOARD = gv_holoboards[4];

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerQueueIsEmpty() == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionCircle(UnitGetPosition(lv_hOLOBOARD), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((UnitIsAlive(lv_hOLOBOARD) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    Wait(1.0, c_timeGame);
    if ((UnitIsAlive(gv_holoboards[4]) == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_hOLOBOARD), c_animNameDefault, "Talk One", c_animFlagPlayForever, c_animTimeDefault);
        UIAlertUnit("Trigger", gv_p1_USER, StringExternal("Param/Value/727226F7"), null, lv_hOLOBOARD);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TRaynor01Arcturus00025", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor01Arcturus00025", -1), c_transmissionDurationAdd, 0.0, false);
        gv_holoboardTransmission04 = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(lv_hOLOBOARD), c_animNameDefault);
    }

    TriggerQueueExit();
    Wait(10.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayHoloboard04Q_Init () {
    gt_PlayHoloboard04Q = TriggerCreate("gt_PlayHoloboard04Q_Func");
    TriggerEnable(gt_PlayHoloboard04Q, false);
    TriggerAddEventTimePeriodic(gt_PlayHoloboard04Q, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Play Holoboard05 Q
//--------------------------------------------------------------------------------------------------
bool gt_PlayHoloboard05Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerQueueIsEmpty() == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((UnitIsAlive(gv_holoboards[5]) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitIsAlive(gv_holoboards[5]) == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_holoboards[5]), c_animNameDefault, "Talk One", c_animFlagPlayForever, c_animTimeDefault);
        UIAlertUnit("Trigger", gv_p1_USER, StringExternal("Param/Value/FF937503"), null, gv_holoboards[5]);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TRaynor01Arcturus00007", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor01Arcturus00007", 0), c_transmissionDurationAdd, 0.0, false);
        gv_holoboardTransmission05 = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_holoboards[5]), c_animNameDefault);
    }

    TriggerQueueExit();
    Wait(10.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayHoloboard05Q_Init () {
    gt_PlayHoloboard05Q = TriggerCreate("gt_PlayHoloboard05Q_Func");
    TriggerEnable(gt_PlayHoloboard05Q, false);
    TriggerAddEventTimePeriodic(gt_PlayHoloboard05Q, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Play Holoboard06 Q
//--------------------------------------------------------------------------------------------------
bool gt_PlayHoloboard06Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerQueueIsEmpty() == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionCircle(UnitGetPosition(gv_holoboards[6]), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((UnitIsAlive(gv_holoboards[6]) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitIsAlive(gv_holoboards[6]) == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_holoboards[6]), c_animNameDefault, "Talk One", c_animFlagPlayForever, c_animTimeDefault);
        UIAlertUnit("Trigger", gv_p1_USER, StringExternal("Param/Value/30E290C4"), null, gv_holoboards[6]);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TRaynor01Arcturus00031", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor01Arcturus00031", 0), c_transmissionDurationAdd, 0.0, false);
        gv_holoboardTransmission06 = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_holoboards[6]), c_animNameDefault);
    }

    TriggerQueueExit();
    Wait(10.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayHoloboard06Q_Init () {
    gt_PlayHoloboard06Q = TriggerCreate("gt_PlayHoloboard06Q_Func");
    TriggerEnable(gt_PlayHoloboard06Q, false);
    TriggerAddEventTimePeriodic(gt_PlayHoloboard06Q, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holoboard Stop Sounds
//--------------------------------------------------------------------------------------------------
bool gt_HoloboardStopSounds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!(((EventUnit() == gv_holoboards[1]) || (EventUnit() == gv_holoboards[2]) || (EventUnit() == gv_holoboards[3]) || (EventUnit() == gv_holoboards[4]) || (EventUnit() == gv_holoboards[5]) || (EventUnit() == gv_holoboards[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionClear(gv_holoboardTransmission01);
    TransmissionClear(gv_holoboardTransmission02);
    TransmissionClear(gv_holoboardTransmission03);
    TransmissionClear(gv_holoboardTransmission04);
    TransmissionClear(gv_holoboardTransmission05);
    TransmissionClear(gv_holoboardTransmission06);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HoloboardStopSounds_Init () {
    gt_HoloboardStopSounds = TriggerCreate("gt_HoloboardStopSounds_Func");
    TriggerAddEventUnitDied(gt_HoloboardStopSounds, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Story Mode Q
//--------------------------------------------------------------------------------------------------
bool gt_TipStoryModeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateStorymodeTips();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipStoryModeQ_Init () {
    gt_TipStoryModeQ = TriggerCreate("gt_TipStoryModeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip This is not a hero game Q
//--------------------------------------------------------------------------------------------------
bool gt_TipThisisnotaherogameQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Raynor01_UniqueUnits", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipThisisnotaherogameQ_Init () {
    gt_TipThisisnotaherogameQ = TriggerCreate("gt_TipThisisnotaherogameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Unit New Unit Marines Q
//--------------------------------------------------------------------------------------------------
bool gt_TipUnitNewUnitMarinesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Raynor01_Marines", libNtve_ge_TipType_NewUnit, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipUnitNewUnitMarinesQ_Init () {
    gt_TipUnitNewUnitMarinesQ = TriggerCreate("gt_TipUnitNewUnitMarinesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Tutorial Videos Q
//--------------------------------------------------------------------------------------------------
bool gt_TipTutorialVideosQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/47389DBA"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/A4DB4B84"), StringExternal("Param/Value/327C19BC"), "Assets\\Textures\\btn-tips-tutorial.dds");
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipTutorialVideosQ_Init () {
    gt_TipTutorialVideosQ = TriggerCreate("gt_TipTutorialVideosQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - Holoboards Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_StatHoloboardsDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MengskHologramBillboard"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_holoboardsDestroyed += 1;
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (GameGetMissionTime() < 181.0) && (gv_holoboardsDestroyed >= 6)) {
        AchievementAward(gv_p1_USER, "Anniversary_TRaynor01");
        TriggerDebugOutput(1, StringExternal("Param/Value/53FE3F9F"), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatHoloboardsDestroyed_Init () {
    gt_StatHoloboardsDestroyed = TriggerCreate("gt_StatHoloboardsDestroyed_Func");
    TriggerAddEventUnitDied(gt_StatHoloboardsDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - Dominion Marines Killed
//--------------------------------------------------------------------------------------------------
bool gt_StatDominionMarinesKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Marine"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p2_DOMINION_RED))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_dominionMarinesKilled += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatDominionMarinesKilled_Init () {
    gt_StatDominionMarinesKilled = TriggerCreate("gt_StatDominionMarinesKilled_Func");
    TriggerAddEventUnitDied(gt_StatDominionMarinesKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - 5 Raynor Kills (Normal)
//--------------------------------------------------------------------------------------------------
bool gt_Achievement5RaynorKillsNormal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_raynor, c_unitPropKills, c_unitPropCurrent) >= 5.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AchievementAward(gv_p1_USER, "TRaynor01_2");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Achievement5RaynorKillsNormal_Init () {
    gt_Achievement5RaynorKillsNormal = TriggerCreate("gt_Achievement5RaynorKillsNormal_Func");
    TriggerAddEventUnitDied(gt_Achievement5RaynorKillsNormal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Tower Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryTowerDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    libNtve_gf_ChangeUnitDamage(gv_raynor, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    CameraPan(gv_p1_USER, PointFromId(2439), 2.0, -1, 20, false);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDestroyLogisticalHQComplete, true, false);
    TriggerExecute(gt_ObjectiveRaynorSurviveComplete, true, true);
    libCamp_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryTowerDestroyed_Init () {
    gt_VictoryTowerDestroyed = TriggerCreate("gt_VictoryTowerDestroyed_Func");
    TriggerAddEventUnitDied(gt_VictoryTowerDestroyed, UnitRefFromUnit(UnitFromId(158)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_civvies;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((ObjectiveGetState(gv_objectiveDestroyLogisticalHQ) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveDestroyDominionHoloboards) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveRaynorMustLIVE) == c_objectiveStateCompleted)) {
        AchievementAward(gv_p1_USER, "TRaynor01_1");
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1) && (UnitGroupCount(UnitGroup(null, gv_p2_DOMINION_RED, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        AchievementAward(gv_p1_USER, "TRaynor01_3");
    }

    lv_civvies = (UnitGroupCount(UnitGroup("Civilian", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) + UnitGroupCount(UnitGroup("CivilianFemale", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
    lv_civvies += 15;
    gv_riksvillePopulation += 14;
    VictoryPanelAddAchievement("TRaynor01_1");
    VictoryPanelAddAchievement("TRaynor01_2");
    VictoryPanelAddAchievement("TRaynor01_3");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/305C1261"), (IntToText(gv_dominionMarinesKilled) + StringExternal("Param/Value/21A5288A") + IntToText(gv_dominionMarinesTotal)));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/2B86A39F"), (IntToText(lv_civvies) + StringExternal("Param/Value/72BD619E") + IntToText(gv_riksvillePopulation)));
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/37CFD1A9"), (IntToText(gv_holoboardsDestroyed) + StringExternal("Param/Value/01D82F01") + IntToText(gv_objectiveTaskDestroyDominionHoloboardsTotal)));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/E609FF5F"), (IntToText(libNtve_gf_UnitGetPropertyKills(gv_raynor, c_unitPropCurrent))));
    libCamp_gf_EndCampaignMission(gv_p1_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Units Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatUnitsDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p1_USER, null, UnitFilter(0, 0, (1 << c_targetFilterPreventDefeat), 0), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/D32D77D7"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatUnitsDead_Init () {
    gt_DefeatUnitsDead = TriggerCreate("gt_DefeatUnitsDead_Func");
    TriggerEnable(gt_DefeatUnitsDead, false);
    TriggerAddEventTimePeriodic(gt_DefeatUnitsDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Raynor Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatRaynorDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Raynor01"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/F2DA38B3"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatRaynorDead_Init () {
    gt_DefeatRaynorDead = TriggerCreate("gt_DefeatRaynorDead_Func");
    TriggerEnable(gt_DefeatRaynorDead, false);
    TriggerAddEventUnitDied(gt_DefeatRaynorDead, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_EndCampaignMission(gv_p1_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    libCamp_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, c_playerAny, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, c_playerAny, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Logistical HQ Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyLogisticalHQCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/803351AA"), StringExternal("Param/Value/35F6BD78"), c_objectiveStateActive, true);
    gv_objectiveDestroyLogisticalHQ = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TRaynor01Objective1, ObjectiveLastCreated(), StringExternal("Param/Value/00F2558F"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitFromId(158)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    gv_objectiveMainPing = PingLastCreated();
    PingSetTooltip(gv_objectiveMainPing, StringExternal("Param/Value/0496DEDF"));
    gv_actorObjectiveMain = libNtve_gf_AttachModelToUnit(UnitFromId(158), "BriefingUnitSelectLargeRed", "Ref_Center");
    VisRevealArea(gv_p1_USER, RegionFromId(36), 3.0, false);
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/C24BF20E"), null, UnitGetPosition(UnitFromId(158)));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyLogisticalHQCreateQ_Init () {
    gt_ObjectiveDestroyLogisticalHQCreateQ = TriggerCreate("gt_ObjectiveDestroyLogisticalHQCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Logistical HQ Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyLogisticalHQComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyLogisticalHQCreateQ, true, false);
    PingDestroy(gv_objectiveMainPing);
    libNtve_gf_KillModel(gv_actorObjectiveMain);
    ObjectiveSetState(gv_objectiveDestroyLogisticalHQ, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyLogisticalHQComplete_Init () {
    gt_ObjectiveDestroyLogisticalHQComplete = TriggerCreate("gt_ObjectiveDestroyLogisticalHQComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Raynor Must Survive Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRaynorMustSurviveCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/36E48EA7"), StringExternal("Param/Value/410310C4"), c_objectiveStateActive, true);
    gv_objectiveRaynorMustLIVE = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TRaynor01Objective2, ObjectiveLastCreated(), StringExternal("Param/Value/42D182FA"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRaynorMustSurviveCreateQ_Init () {
    gt_ObjectiveRaynorMustSurviveCreateQ = TriggerCreate("gt_ObjectiveRaynorMustSurviveCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Raynor Survive Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRaynorSurviveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveRaynorMustSurviveCreateQ, true, false);
    ObjectiveSetState(gv_objectiveRaynorMustLIVE, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRaynorSurviveComplete_Init () {
    gt_ObjectiveRaynorSurviveComplete = TriggerCreate("gt_ObjectiveRaynorSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Dominion Holoboards Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyDominionHoloboardsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveCreate(StringExternal("Param/Value/67FC761F"), StringExternal("Param/Value/9E29DE5C"), c_objectiveStateActive, false);
    gv_objectiveDestroyDominionHoloboards = ObjectiveLastCreated();
    ObjectiveSetName(gv_objectiveDestroyDominionHoloboards, (StringExternal("Param/Value/ECF1145A") + IntToText(gv_objectiveTaskDestroyDominionHoloboardsProgress) + StringExternal("Param/Value/011154B4") + IntToText(gv_objectiveTaskDestroyDominionHoloboardsTotal) + StringExternal("Param/Value/05E1A1EB")));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyDominionHoloboardsCreate_Init () {
    gt_ObjectiveDestroyDominionHoloboardsCreate = TriggerCreate("gt_ObjectiveDestroyDominionHoloboardsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Dominion Holoboards Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyDominionHoloboardsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyDominionHoloboardsCreate, true, false);
    ObjectiveSetState(gv_objectiveDestroyDominionHoloboards, c_objectiveStateCompleted);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyDominionHoloboardsComplete_Init () {
    gt_ObjectiveDestroyDominionHoloboardsComplete = TriggerCreate("gt_ObjectiveDestroyDominionHoloboardsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Dominion Holoboards Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyDominionHoloboardsUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "MengskHologramBillboard"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyDominionHoloboardsCreate, true, false);
    gv_objectiveTaskDestroyDominionHoloboardsProgress += 1;
    ObjectiveSetName(gv_objectiveDestroyDominionHoloboards, (StringExternal("Param/Value/BE465878") + IntToText(gv_objectiveTaskDestroyDominionHoloboardsProgress) + StringExternal("Param/Value/914BC647") + IntToText(gv_objectiveTaskDestroyDominionHoloboardsTotal) + StringExternal("Param/Value/13F1BF87")));
    if ((gv_objectiveTaskDestroyDominionHoloboardsProgress == gv_objectiveTaskDestroyDominionHoloboardsTotal)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_ObjectiveDestroyDominionHoloboardsComplete, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyDominionHoloboardsUpdate_Init () {
    gt_ObjectiveDestroyDominionHoloboardsUpdate = TriggerCreate("gt_ObjectiveDestroyDominionHoloboardsUpdate_Func");
    TriggerAddEventUnitDamaged(gt_ObjectiveDestroyDominionHoloboardsUpdate, null, c_unitDamageTypeAny, c_unitDamageFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoCA11FDE1_g;
    int autoCA11FDE1_u;
    unit autoCA11FDE1_var;
    unitgroup auto3CB91E49_g;
    int auto3CB91E49_u;
    unit auto3CB91E49_var;
    unitgroup auto38153FAF_g;
    int auto38153FAF_u;
    unit auto38153FAF_var;
    unitgroup autoBDF0B3C9_g;
    int autoBDF0B3C9_u;
    unit autoBDF0B3C9_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_StartGame);
    TriggerStop(gt_ObjectiveDestroyLogisticalHQCreateQ);
    TriggerStop(gt_IntroQ);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerStop(gt_IntroCinematic);
    TriggerQueueEnter();
    gv_inCinematic = true;
    gv_gameOver = true;
    UnitPauseAll(true);
    AITimePause(true);
    GameTimeOfDayPause(true);
    autoCA11FDE1_g = UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCA11FDE1_u = UnitGroupCount(autoCA11FDE1_g, c_unitCountAll);
    for (;; autoCA11FDE1_u -= 1) {
        autoCA11FDE1_var = UnitGroupUnitFromEnd(autoCA11FDE1_g, autoCA11FDE1_u);
        if (autoCA11FDE1_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoCA11FDE1_var, false);
    }
    auto3CB91E49_g = UnitGroup(null, gv_p2_DOMINION_RED, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3CB91E49_u = UnitGroupCount(auto3CB91E49_g, c_unitCountAll);
    for (;; auto3CB91E49_u -= 1) {
        auto3CB91E49_var = UnitGroupUnitFromEnd(auto3CB91E49_g, auto3CB91E49_u);
        if (auto3CB91E49_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto3CB91E49_var, false);
    }
    auto38153FAF_g = UnitGroup("CivilianFemale", gv_p3_RIKSVILLE_YELLOW, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto38153FAF_u = UnitGroupCount(auto38153FAF_g, c_unitCountAll);
    for (;; auto38153FAF_u -= 1) {
        auto38153FAF_var = UnitGroupUnitFromEnd(auto38153FAF_g, auto38153FAF_u);
        if (auto38153FAF_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto38153FAF_var, false);
    }
    autoBDF0B3C9_g = UnitGroup("Civilian", gv_p3_RIKSVILLE_YELLOW, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBDF0B3C9_u = UnitGroupCount(autoBDF0B3C9_g, c_unitCountAll);
    for (;; autoBDF0B3C9_u -= 1) {
        autoBDF0B3C9_var = UnitGroupUnitFromEnd(autoBDF0B3C9_g, autoBDF0B3C9_u);
        if (autoBDF0B3C9_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoBDF0B3C9_var, false);
    }
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_BriefingScene00, true, true);
    TriggerExecute(gt_BriefingScene01, true, true);
    TriggerExecute(gt_BriefingScene02, true, true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShowHideUnit(UnitFromId(158), true);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p2_DOMINION_RED, PointFromId(2263));
    gv_introMar01 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p2_DOMINION_RED, PointFromId(2264));
    gv_introMar02 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p2_DOMINION_RED, PointFromId(2265));
    gv_introMar03 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p2_DOMINION_RED, PointFromId(2266));
    gv_introMar04 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "VikingAssault", 0, gv_p2_DOMINION_RED, PointFromId(2088));
    gv_introVik01 = UnitLastCreated();
    UnitCreate(1, "TransportTruck", 0, gv_p2_DOMINION_RED, PointFromId(2676), 45.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2679)), c_orderQueueReplace);
    UnitCreate(1, "TransportTruck", 0, gv_p2_DOMINION_RED, PointFromId(2678), 45.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2680)), c_orderQueueReplace);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(63), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(750), (SoundLengthSync(SoundLink("TRaynor01BriefingRaynor00006", -1)) + 3.0), -1, 10, true);
    MovieStartRecording("Briefing_Video_TRaynor01_00");
    TriggerExecute(gt_BriefingScene00Viking, true, false);
    // Transmission - SoundLink("TRaynor01BriefingRaynor00006", 0)
    SoundPlay(SoundLink("TRaynor01BriefingRaynor00006", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("TRaynor01BriefingRaynor00006", -1)), c_timeReal);
    // Transmission - SoundLink("TRaynor01BriefingAdjutant00010", 0)
    SoundPlay(SoundLink("TRaynor01BriefingAdjutant00010", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(3.0, c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(206), SoundLengthSync(SoundLink("TRaynor01BriefingAdjutant00010", -1)), -1, 10, true);
    Wait((SoundLengthSync(SoundLink("TRaynor01BriefingAdjutant00010", -1)) - 3.0), c_timeReal);
    // Transmission - SoundLink("TRaynor01BriefingAdjutant00011", 0)
    SoundPlay(SoundLink("TRaynor01BriefingAdjutant00011", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TRaynor01BriefingAdjutant00011", -1))), c_timeReal);
    // Transmission - SoundLink("TRaynor01BriefingRaynor00012", 0)
    SoundPlay(SoundLink("TRaynor01BriefingRaynor00012", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TRaynor01BriefingRaynor00012", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TRaynor01BriefingRaynor00006", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TRaynor01BriefingAdjutant00010", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TRaynor01BriefingAdjutant00011", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TRaynor01BriefingRaynor00012", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00_Init () {
    gt_BriefingScene00 = TriggerCreate("gt_BriefingScene00_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00 Viking
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00Viking_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(4.0, c_timeGame);
    UnitIssueOrder(gv_introVik01, Order(AbilityCommand("FighterMode", 0)), c_orderQueueReplace);
    Wait(2.5, c_timeGame);
    UnitIssueOrder(gv_introVik01, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2091)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00Viking_Init () {
    gt_BriefingScene00Viking = TriggerCreate("gt_BriefingScene00Viking_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC6E1B569_g;
    int autoC6E1B569_u;
    unit autoC6E1B569_var;
    unitgroup auto8983156A_g;
    int auto8983156A_u;
    unit auto8983156A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "Civilian", 0, gv_p4_ACTORS_BLUE, PointFromId(1093));
    gv_introCiv01 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "Civilian", 0, gv_p4_ACTORS_BLUE, PointFromId(1230));
    gv_introCiv02 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "Civilian", 0, gv_p4_ACTORS_BLUE, PointFromId(1233));
    gv_introCiv03 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "Civilian", 0, gv_p4_ACTORS_BLUE, PointFromId(1721));
    gv_introCiv04 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "Civilian", 0, gv_p4_ACTORS_BLUE, PointFromId(2254));
    gv_introCiv05 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "Civilian", 0, gv_p4_ACTORS_BLUE, PointFromId(2268));
    libNtve_gf_CreateUnitsAtPoint2(1, "Civilian", 0, gv_p4_ACTORS_BLUE, PointFromId(2269));
    libNtve_gf_CreateUnitsAtPoint2(1, "Civilian", 0, gv_p4_ACTORS_BLUE, PointFromId(2270));
    libNtve_gf_CreateUnitsAtPoint2(1, "VikingAssault", 0, gv_p4_ACTORS_BLUE, PointFromId(897));
    gv_introVik02 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p4_ACTORS_BLUE, PointFromId(2256));
    gv_introMar01 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p4_ACTORS_BLUE, PointFromId(70));
    gv_introMar02 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p4_ACTORS_BLUE, PointFromId(894));
    gv_introMar03 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p4_ACTORS_BLUE, PointFromId(895));
    gv_introMar04 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "VikingAssault", 0, gv_p4_ACTORS_BLUE, PointFromId(613));
    gv_introVik03 = UnitLastCreated();
    autoC6E1B569_g = UnitGroup(null, gv_p4_ACTORS_BLUE, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC6E1B569_u = UnitGroupCount(autoC6E1B569_g, c_unitCountAll);
    for (;; autoC6E1B569_u -= 1) {
        autoC6E1B569_var = UnitGroupUnitFromEnd(autoC6E1B569_g, autoC6E1B569_u);
        if (autoC6E1B569_var == null) { break; }
        UnitSetPropertyFixed(autoC6E1B569_var, c_unitPropMovementSpeed, 1.5);
    }
    auto8983156A_g = UnitGroup(null, gv_p4_ACTORS_BLUE, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8983156A_u = UnitGroupCount(auto8983156A_g, c_unitCountAll);
    for (;; auto8983156A_u -= 1) {
        auto8983156A_var = UnitGroupUnitFromEnd(auto8983156A_g, auto8983156A_u);
        if (auto8983156A_var == null) { break; }
        UnitSetTeamColorIndex(auto8983156A_var, 1);
    }
    UnitIssueOrder(gv_introVik02, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(614)), c_orderQueueReplace);
    UnitIssueOrder(gv_introVik02, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(923)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_introMar01, OrderTargetingUnit(AbilityCommand("move", 0), gv_introVik02), c_orderQueueReplace);
    UnitIssueOrder(gv_introMar02, OrderTargetingUnit(AbilityCommand("move", 0), gv_introVik02), c_orderQueueReplace);
    UnitIssueOrder(gv_introMar03, OrderTargetingUnit(AbilityCommand("move", 0), gv_introVik02), c_orderQueueReplace);
    UnitIssueOrder(gv_introMar04, OrderTargetingUnit(AbilityCommand("move", 0), gv_introVik02), c_orderQueueReplace);
    UnitIssueOrder(gv_introVik03, OrderTargetingUnit(AbilityCommand("move", 0), gv_introVik02), c_orderQueueReplace);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(831), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(1013), SoundLengthSync(SoundLink("TRaynor01BriefingAdjutant00013", -1)), -1, 10, true);
    MovieStartRecording("Briefing_Video_TRaynor01_01");
    SoundPlay(SoundLink("TRaynor01BriefingAdjutant00013", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(4.0, c_timeGame);
    UnitIssueOrder(gv_introCiv01, OrderTargetingUnit(AbilityCommand("move", 4), gv_introCiv02), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(gv_introCiv03, OrderTargetingUnit(AbilityCommand("move", 4), gv_introCiv04), c_orderQueueReplace);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_introCiv03), c_animNameDefault, "Talk", c_animFlagPlayForever, c_animTimeDefault);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(gv_introCiv04, OrderTargetingUnit(AbilityCommand("move", 4), gv_introCiv03), c_orderQueueReplace);
    Wait((SoundLengthSync(SoundLink("TRaynor01BriefingAdjutant00013", -1)) - 5.0), c_timeGame);
    Wait((0.5 * (SoundLengthSync(SoundLink("TRaynor01BriefingAdjutant00013", -1)) + 0.0)), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01_Init () {
    gt_BriefingScene01 = TriggerCreate("gt_BriefingScene01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 02
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_crosshairUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "Raven", 0, gv_p2_DOMINION_RED, PointFromId(2439), 225.0);
    lv_crosshairUnit = UnitLastCreated();
    UnitSetState(lv_crosshairUnit, c_unitStateHidden, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2273), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(235), 6.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_TRaynor01_02");
    SoundPlay(SoundLink("TRaynor01BriefingRaynor00014", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((0.2 * SoundLengthSync(SoundLink("TRaynor01BriefingRaynor00014", -1))), c_timeReal);
    gv_introActorBase01 = libNtve_gf_AttachModelToUnit(lv_crosshairUnit, "BriefingUnitSelectLargeRed", "Head");
    Wait((0.8 * SoundLengthSync(SoundLink("TRaynor01BriefingRaynor00014", -1))), c_timeReal);
    SoundPlay(SoundLink("TRaynor01BriefingRaynor00015", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TRaynor01BriefingRaynor00015", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TRaynor01BriefingRaynor00014", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TRaynor01BriefingRaynor00015", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene02_Init () {
    gt_BriefingScene02 = TriggerCreate("gt_BriefingScene02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoBFA525CF_g;
    int autoBFA525CF_u;
    unit autoBFA525CF_var;
    unitgroup auto73025897_g;
    int auto73025897_u;
    unit auto73025897_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitPauseAll(true);
    gv_introCinHiddenUnitGroup = UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    autoBFA525CF_g = UnitGroup(null, gv_p2_DOMINION_RED, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBFA525CF_u = UnitGroupCount(autoBFA525CF_g, c_unitCountAll);
    for (;; autoBFA525CF_u -= 1) {
        autoBFA525CF_var = UnitGroupUnitFromEnd(autoBFA525CF_g, autoBFA525CF_u);
        if (autoBFA525CF_var == null) { break; }
        UnitGroupAdd(gv_introCinHiddenUnitGroup, autoBFA525CF_var);
    }
    auto73025897_g = UnitLastCreatedGroup();
    auto73025897_u = UnitGroupCount(auto73025897_g, c_unitCountAll);
    for (;; auto73025897_u -= 1) {
        auto73025897_var = UnitGroupUnitFromEnd(auto73025897_g, auto73025897_u);
        if (auto73025897_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto73025897_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto51E1AAFD_g;
    int auto51E1AAFD_u;
    unit auto51E1AAFD_var;

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetBackground(c_backgroundFixed, "MarSaraSkyBox", 100.0);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(1660), 0.0, -1, 10, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "SpecialOpsDropship", 0, gv_p1_USER, PointFromId(379));
    gv_introDropship = UnitLastCreated();
    UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
    libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
    UnitCargoCreate(gv_introDropship, "Raynor01", 1);
    gv_raynor = UnitCargoLastCreated();
    UnitGroupAdd(gv_introUnitCargoStart, UnitCargoLastCreated());
    UnitCargoCreate(gv_introDropship, "Marine", 5);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitCargoLastCreatedGroup(), gv_introUnitCargoStart);
    if (((PlayerDifficulty(1) == 1) == true)) {
        auto51E1AAFD_g = gv_introUnitCargoStart;
        auto51E1AAFD_u = UnitGroupCount(auto51E1AAFD_g, c_unitCountAll);
        for (;; auto51E1AAFD_u -= 1) {
            auto51E1AAFD_var = UnitGroupUnitFromEnd(auto51E1AAFD_g, auto51E1AAFD_u);
            if (auto51E1AAFD_var == null) { break; }
            UnitSetInfoText(auto51E1AAFD_var, StringToText(""), StringExternal("Param/Value/CA8F65F6"), StringToText(""));
            UnitSetState(auto51E1AAFD_var, c_unitStateTooltipable, true);
        }
    }

    UnitSetInfoText(gv_raynor, StringToText(""), StringExternal("Param/Value/21D320AE"), StringToText(""));
    UnitSetState(gv_raynor, c_unitStateTooltipable, true);
    UnitIssueOrder(gv_introDropship, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1037)), c_orderQueueReplace);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_introCinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(976), 8.0, -1, 10, true);
    // Transmission - SoundLink("TRaynor01Raynor00028", 0)
    libCamp_gf_SendTransmissionCampaign(gv_raynor, SoundLink("TRaynor01Raynor00028", 0), c_transmissionDurationAdd, 0.0, true);
    UnitIssueOrder(gv_introDropship, OrderTargetingPoint(AbilityCommand("SpecOpsDropshipTransport", 2), PointFromId(1037)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_introDropship, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1038)), c_orderQueueAddToEnd);
    while (!((UnitGroupCount(UnitCargoGroup(gv_introDropship), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    gv_introCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_introCinematicCompleted == true)) {
        TriggerExecute(gt_IntroCleanupNoEscape, true, true);
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
        TriggerExecute(gt_IntroCleanupEscape, true, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup - No Escape
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanupNoEscape_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto09BD0683_g;
    int auto09BD0683_u;
    unit auto09BD0683_var;
    unitgroup autoD27C8764_g;
    int autoD27C8764_u;
    unit autoD27C8764_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto09BD0683_g = gv_introActorGroup;
    auto09BD0683_u = UnitGroupCount(auto09BD0683_g, c_unitCountAll);
    for (;; auto09BD0683_u -= 1) {
        auto09BD0683_var = UnitGroupUnitFromEnd(auto09BD0683_g, auto09BD0683_u);
        if (auto09BD0683_var == null) { break; }
        UnitRemove(auto09BD0683_var);
    }
    autoD27C8764_g = gv_introCinHiddenUnitGroup;
    autoD27C8764_u = UnitGroupCount(autoD27C8764_g, c_unitCountAll);
    for (;; autoD27C8764_u -= 1) {
        autoD27C8764_var = UnitGroupUnitFromEnd(autoD27C8764_g, autoD27C8764_u);
        if (autoD27C8764_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoD27C8764_var, true);
    }
    UnitPauseAll(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_p1_USER, RegionEntireMap(), false, false);
    VisExploreArea(gv_p1_USER, RegionFromId(32), true, false);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationDefault);
    libNtve_gf_GlobalCinematicSetting(false);
    gv_inCinematic = false;
    TriggerExecute(gt_StartGame, true, false);
    TriggerEnable(gt_DefeatUnitsDead, true);
    TriggerEnable(gt_DefeatRaynorDead, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanupNoEscape_Init () {
    gt_IntroCleanupNoEscape = TriggerCreate("gt_IntroCleanupNoEscape_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup -  Escape
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanupEscape_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto26DA110B_g;
    int auto26DA110B_u;
    unit auto26DA110B_var;
    unitgroup autoF0BCCE54_g;
    int autoF0BCCE54_u;
    unit autoF0BCCE54_var;
    unitgroup auto6FCA8D42_g;
    int auto6FCA8D42_u;
    unit auto6FCA8D42_var;
    unitgroup auto0729A66F_g;
    int auto0729A66F_u;
    unit auto0729A66F_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_introActorGroup, gv_introDropship);
    libNtve_gf_AddUnitGroupToUnitGroup(gv_introUnitCargoStart, gv_introActorGroup);
    auto26DA110B_g = gv_introActorGroup;
    auto26DA110B_u = UnitGroupCount(auto26DA110B_g, c_unitCountAll);
    for (;; auto26DA110B_u -= 1) {
        auto26DA110B_var = UnitGroupUnitFromEnd(auto26DA110B_g, auto26DA110B_u);
        if (auto26DA110B_var == null) { break; }
        UnitRemove(auto26DA110B_var);
    }
    autoF0BCCE54_g = UnitGroup(null, gv_p4_ACTORS_BLUE, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF0BCCE54_u = UnitGroupCount(autoF0BCCE54_g, c_unitCountAll);
    for (;; autoF0BCCE54_u -= 1) {
        autoF0BCCE54_var = UnitGroupUnitFromEnd(autoF0BCCE54_g, autoF0BCCE54_u);
        if (autoF0BCCE54_var == null) { break; }
        UnitRemove(autoF0BCCE54_var);
    }
    auto6FCA8D42_g = gv_introCinHiddenUnitGroup;
    auto6FCA8D42_u = UnitGroupCount(auto6FCA8D42_g, c_unitCountAll);
    for (;; auto6FCA8D42_u -= 1) {
        auto6FCA8D42_var = UnitGroupUnitFromEnd(auto6FCA8D42_g, auto6FCA8D42_u);
        if (auto6FCA8D42_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto6FCA8D42_var, true);
    }
    UnitPauseAll(false);
    libNtve_gf_CreateUnitsAtPoint2(1, "Raynor01", 0, gv_p1_USER, PointFromId(505));
    gv_raynor = UnitLastCreated();
    UnitGroupAdd(gv_raynorsMarines, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p1_USER, PointFromId(415));
    UnitGroupAdd(gv_raynorsMarines, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p1_USER, PointFromId(581));
    UnitGroupAdd(gv_raynorsMarines, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p1_USER, PointFromId(737));
    UnitGroupAdd(gv_raynorsMarines, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p1_USER, PointFromId(885));
    UnitGroupAdd(gv_raynorsMarines, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p1_USER, PointFromId(1020));
    UnitGroupAdd(gv_raynorsMarines, UnitLastCreated());
    if (((PlayerDifficulty(1) == 1) == true)) {
        auto0729A66F_g = gv_raynorsMarines;
        auto0729A66F_u = UnitGroupCount(auto0729A66F_g, c_unitCountAll);
        for (;; auto0729A66F_u -= 1) {
            auto0729A66F_var = UnitGroupUnitFromEnd(auto0729A66F_g, auto0729A66F_u);
            if (auto0729A66F_var == null) { break; }
            UnitSetInfoText(auto0729A66F_var, StringToText(""), StringExternal("Param/Value/CD9D0B8C"), StringToText(""));
            UnitSetState(auto0729A66F_var, c_unitStateTooltipable, true);
        }
        UnitSetInfoText(gv_raynor, StringToText(""), StringExternal("Param/Value/4F85B255"), StringToText(""));
        UnitSetState(gv_raynor, c_unitStateTooltipable, true);
    }

    GameTimeOfDayPause(false);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_p1_USER, RegionEntireMap(), false, false);
    VisExploreArea(gv_p1_USER, RegionFromId(32), true, false);
    if ((gv_introCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_p1_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(976)), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    TriggerExecute(gt_StartGame, true, false);
    TriggerEnable(gt_DefeatUnitsDead, true);
    TriggerEnable(gt_DefeatRaynorDead, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanupEscape_Init () {
    gt_IntroCleanupEscape = TriggerCreate("gt_IntroCleanupEscape_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cargo Unload
//--------------------------------------------------------------------------------------------------
bool gt_IntroCargoUnload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto4DB55145_val;

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_introUnitCargoStart, EventUnitCargo()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_introUnitCargoStartDrop += 1;
    UnitSetOwner(EventUnitCargo(), gv_p1_USER, true);
    UnitGroupAdd(gv_raynorsMarines, EventUnitCargo());
    Wait(0.2, c_timeGame);
    auto4DB55145_val = gv_introUnitCargoStartDrop;
    if (auto4DB55145_val == 1) {
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(505)), c_orderQueueReplace);
    }
    else if (auto4DB55145_val == 2) {
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(415)), c_orderQueueReplace);
    }
    else if (auto4DB55145_val == 3) {
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(581)), c_orderQueueReplace);
    }
    else if (auto4DB55145_val == 4) {
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(737)), c_orderQueueReplace);
    }
    else if (auto4DB55145_val == 5) {
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(885)), c_orderQueueReplace);
    }
    else if (auto4DB55145_val == 6) {
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1020)), c_orderQueueReplace);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCargoUnload_Init () {
    gt_IntroCargoUnload = TriggerCreate("gt_IntroCargoUnload_Func");
    TriggerAddEventUnitCargo(gt_IntroCargoUnload, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro - Dropship cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroDropshipcleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_introDropship))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroDropshipcleanup_Init () {
    gt_IntroDropshipcleanup = TriggerCreate("gt_IntroDropshipcleanup_Func");
    TriggerAddEventUnitRegion(gt_IntroDropshipcleanup, null, RegionFromId(51), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Billboard Q
//--------------------------------------------------------------------------------------------------
bool gt_MidBillboardQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_MidBillboardSetup, true, true);
    TriggerExecute(gt_MidBillboardCinematic, true, true);
    TriggerExecute(gt_MidBillboardCinematicEnd, true, true);
    TriggerExecute(gt_MidBillboardCleanup, true, true);
    TriggerExecute(gt_ObjectiveDestroyDominionHoloboardsCreate, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidBillboardQ_Init () {
    gt_MidBillboardQ = TriggerCreate("gt_MidBillboardQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Billboard Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidBillboardSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF3C8752D_g;
    int autoF3C8752D_u;
    unit autoF3C8752D_var;
    unitgroup auto236B6840_g;
    int auto236B6840_u;
    unit auto236B6840_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    libNtve_gf_StoreUnitSelection(gv_p1_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    autoF3C8752D_g = UnitGroup(null, gv_p3_RIKSVILLE_YELLOW, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF3C8752D_u = UnitGroupCount(autoF3C8752D_g, c_unitCountAll);
    for (;; autoF3C8752D_u -= 1) {
        autoF3C8752D_var = UnitGroupUnitFromEnd(autoF3C8752D_g, autoF3C8752D_u);
        if (autoF3C8752D_var == null) { break; }
        libNtve_gf_MakeUnitFacePoint(autoF3C8752D_var, UnitGetPosition(gv_holoboards[1]), 0.0);
    }
    UnitPauseAll(true);
    gv_midHiddenUnitGroup = UnitGroup(null, gv_p2_DOMINION_RED, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto236B6840_g = gv_midHiddenUnitGroup;
    auto236B6840_u = UnitGroupCount(auto236B6840_g, c_unitCountAll);
    for (;; auto236B6840_u -= 1) {
        auto236B6840_var = UnitGroupUnitFromEnd(auto236B6840_g, auto236B6840_u);
        if (auto236B6840_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto236B6840_var, false);
    }
    libNtve_gf_ShowHideUnit(gv_holoboards[1], true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidBillboardSetup_Init () {
    gt_MidBillboardSetup = TriggerCreate("gt_MidBillboardSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Billboard Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidBillboardCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2322), 0.0, -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_midCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2323), 16.0, -1, 10, true);
    // Transmission - SoundLink("TRaynor01Arcturus00013", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor01Arcturus00013", 0), c_transmissionDurationAdd, 0.0, true);
    gv_holoboardTransmission01 = TransmissionLastSent();
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_holoboards[1]), c_animNameDefault);
    // Transmission - SoundLink("TRaynor01Adjutant00023", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor01Adjutant00023", 0), c_transmissionDurationAdd, 0.0, true);
    gv_midCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidBillboardCinematic_Init () {
    gt_MidBillboardCinematic = TriggerCreate("gt_MidBillboardCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Billboard Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidBillboardCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_midCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    TransmissionClearAll();
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidBillboardCinematicEnd_Init () {
    gt_MidBillboardCinematicEnd = TriggerCreate("gt_MidBillboardCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Billboard Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidBillboardCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup autoED88FA6C_g;
    int autoED88FA6C_u;
    unit autoED88FA6C_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoED88FA6C_g = gv_midHiddenUnitGroup;
    autoED88FA6C_u = UnitGroupCount(autoED88FA6C_g, c_unitCountAll);
    for (;; autoED88FA6C_u -= 1) {
        autoED88FA6C_var = UnitGroupUnitFromEnd(autoED88FA6C_g, autoED88FA6C_u);
        if (autoED88FA6C_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoED88FA6C_var, true);
    }
    UnitPauseAll(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, true);
    libNtve_gf_RestoreUnitSelection(gv_p1_USER);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(160), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    UnitSetState(UnitFromId(1726), c_unitStateTargetable, true);
    TriggerEnable(gt_PlayHoloboard01Q, true);
    if ((gv_holoReticules[1] == null)) {
        libNtve_gf_AttachModelToUnit(gv_holoboards[1], "BriefingUnitSelectRed", "Ref_Center");
        gv_holoReticules[1] = libNtve_gf_ActorLastCreated();
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(gv_holoboards[1]), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetScale(PingLastCreated(), 0.75);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/B463A129"));
    gv_holoPing[1] = PingLastCreated();
    if ((gv_midCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidBillboardCleanup_Init () {
    gt_MidBillboardCleanup = TriggerCreate("gt_MidBillboardCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Escape Q
//--------------------------------------------------------------------------------------------------
bool gt_MidEscapeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionClear(gv_holoboardTransmission01);
    TransmissionClear(gv_holoboardTransmission02);
    TransmissionClear(gv_holoboardTransmission03);
    TransmissionClear(gv_holoboardTransmission04);
    TriggerQueueEnter();
    TriggerExecute(gt_MidEscapeSetup, true, true);
    TriggerExecute(gt_MidEscapeCinematic, true, true);
    TriggerExecute(gt_MidEscapeCinematicEnd, true, true);
    TriggerExecute(gt_MidEscapeCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidEscapeQ_Init () {
    gt_MidEscapeQ = TriggerCreate("gt_MidEscapeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Escape Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidEscapeSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5AA6988B_g;
    int auto5AA6988B_u;
    unit auto5AA6988B_var;
    unitgroup auto80F9ED1D_g;
    int auto80F9ED1D_u;
    unit auto80F9ED1D_var;
    unitgroup auto53F3EE4E_g;
    int auto53F3EE4E_u;
    unit auto53F3EE4E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_p1_USER);
    libNtve_gf_StoreUnitSelection(gv_p1_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitPauseAll(true);
    PlayerSetState(gv_p3_RIKSVILLE_YELLOW, c_playerStateFidgetingEnabled, false);
    gv_midHiddenUnitGroup = UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto5AA6988B_g = gv_midHiddenUnitGroup;
    auto5AA6988B_u = UnitGroupCount(auto5AA6988B_g, c_unitCountAll);
    for (;; auto5AA6988B_u -= 1) {
        auto5AA6988B_var = UnitGroupUnitFromEnd(auto5AA6988B_g, auto5AA6988B_u);
        if (auto5AA6988B_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto5AA6988B_var, false);
    }
    auto80F9ED1D_g = UnitGroup(null, gv_p3_RIKSVILLE_YELLOW, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto80F9ED1D_u = UnitGroupCount(auto80F9ED1D_g, c_unitCountAll);
    for (;; auto80F9ED1D_u -= 1) {
        auto80F9ED1D_var = UnitGroupUnitFromEnd(auto80F9ED1D_g, auto80F9ED1D_u);
        if (auto80F9ED1D_var == null) { break; }
        libNtve_gf_PauseUnit(auto80F9ED1D_var, false);
    }
    auto53F3EE4E_g = UnitGroup(null, gv_p2_DOMINION_RED, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto53F3EE4E_u = UnitGroupCount(auto53F3EE4E_g, c_unitCountAll);
    for (;; auto53F3EE4E_u -= 1) {
        auto53F3EE4E_var = UnitGroupUnitFromEnd(auto53F3EE4E_g, auto53F3EE4E_u);
        if (auto53F3EE4E_var == null) { break; }
        libNtve_gf_PauseUnit(auto53F3EE4E_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidEscapeSetup_Init () {
    gt_MidEscapeSetup = TriggerCreate("gt_MidEscapeSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Escape Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidEscapeCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_cIVVIES;
    unit lv_rUNNER;

    // Automatic Variable Declarations
    unitgroup autoFE7C617C_g;
    int autoFE7C617C_u;
    unit autoFE7C617C_var;

    // Variable Initialization
    lv_cIVVIES = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rUNNER = UnitFromId(909);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("Civilian", gv_p3_RIKSVILLE_YELLOW, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_cIVVIES);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("CivilianFemale", gv_p3_RIKSVILLE_YELLOW, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_cIVVIES);
    libNtve_gf_MakeUnitFacePoint(lv_rUNNER, UnitGetPosition(UnitFromId(331)), 0.0);
    UnitIssueOrder(lv_rUNNER, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitGroupRemove(lv_cIVVIES, lv_rUNNER);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(1684), 0.0, -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_midCinematicCompleted = false;
    SoundPlayAtPoint(SoundLink("Emitter_CrowdSmallDiscussion", -1), PlayerGroupAll(), Point(41.0, 83.0), 0.0, 100.0, 0.0);
    gv_crowdSoundEmitter = SoundLastPlayed();
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(1703), 15.0, -1, 10, true);
    // Transmission - SoundLink("TRaynor01Raynor00043", 0)
    libCamp_gf_SendTransmissionCampaign(gv_raynor, SoundLink("TRaynor01Raynor00043", 0), c_transmissionDurationAdd, 0.0, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TRaynor01MusicEventB", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libNtve_gf_AttachActorToUnit(UnitFromId(1617), "TalkIcon", "Ref_Origin");
    // Transmission - SoundLink("TRaynor01DominionMarine100020", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor01DominionMarine100020", 0), c_transmissionDurationAdd, 0.0, true);
    libNtve_gf_AttachActorToUnit(lv_rUNNER, "TalkIcon", "Ref_Origin");
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_rUNNER), c_animNameDefault, "Talk 02", c_animFlagNonLooping, c_animTimeDefault);
    // Transmission - SoundLink("TRaynor01Civilian600026", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor01Civilian600026", 0), c_transmissionDurationAdd, 0.0, true);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(lv_rUNNER), c_animNameDefault);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_rUNNER), c_animNameDefault, "Custom Ready End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(5.5, c_timeGame);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(564), 4.0, -1, 10, true);
    // Transmission - SoundLink("TRaynor01DominionMarine900046", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor01DominionMarine900046", 0), c_transmissionDurationAdd, 0.0, false);
    Wait(2.5, c_timeReal);
    SoundStop(gv_crowdSoundEmitter, true);
    SoundPlayAtPoint(SoundLink("Emitter_CrowdGasp", -1), PlayerGroupAll(), Point(41.0, 83.0), 0.0, 100.0, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(1615)), c_animNameDefault, "Attack", c_animFlagNonLooping, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("Marine_AttackLaunch", 6), PlayerGroupAll(), UnitFromId(1615), 10.0, 100.0, 0.0);
    libNtve_gf_AttachModelToUnit(UnitFromId(1615), "MarineAttackLaunch", "Ref_Weapon");
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(1464)), c_animNameDefault, "Attack", c_animFlagNonLooping, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("Marine_AttackLaunch", 6), PlayerGroupAll(), UnitFromId(1464), 10.0, 100.0, 0.0);
    libNtve_gf_AttachModelToUnit(UnitFromId(1464), "MarineAttackLaunch", "Ref_Weapon");
    autoFE7C617C_g = lv_cIVVIES;
    autoFE7C617C_u = UnitGroupCount(autoFE7C617C_g, c_unitCountAll);
    for (;; autoFE7C617C_u -= 1) {
        autoFE7C617C_var = UnitGroupUnitFromEnd(autoFE7C617C_g, autoFE7C617C_u);
        if (autoFE7C617C_var == null) { break; }
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(autoFE7C617C_var), c_animNameDefault, "Fidget Inferior Start", c_animFlagPlayForever, c_animTimeDefault);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(autoFE7C617C_var), c_animNameDefault, "Fidget Inferior", c_animFlagPlayForever, c_animTimeDefault);
    }
    // Transmission - SoundLink("TRaynor01Raynor00062", 0)
    libCamp_gf_SendTransmissionCampaign(gv_raynor, SoundLink("TRaynor01Raynor00062", 0), c_transmissionDurationAdd, 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidEscapeCinematic_Init () {
    gt_MidEscapeCinematic = TriggerCreate("gt_MidEscapeCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Escape Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidEscapeCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionClearAll();
    if ((gv_midCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidEscapeCinematicEnd_Init () {
    gt_MidEscapeCinematicEnd = TriggerCreate("gt_MidEscapeCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Escape Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidEscapeCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto6024391A_g;
    int auto6024391A_u;
    unit auto6024391A_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(UnitFromId(909));
    UnitIssueOrder(UnitFromId(1613), OrderTargetingUnit(AbilityCommand("move", 4), UnitFromId(728)), c_orderQueueReplace);
    auto6024391A_g = gv_midHiddenUnitGroup;
    auto6024391A_u = UnitGroupCount(auto6024391A_g, c_unitCountAll);
    for (;; auto6024391A_u -= 1) {
        auto6024391A_var = UnitGroupUnitFromEnd(auto6024391A_g, auto6024391A_u);
        if (auto6024391A_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto6024391A_var, true);
    }
    UnitPauseAll(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, true);
    libNtve_gf_RestoreUnitSelection(gv_p1_USER);
    CameraRestore(gv_p1_USER, 0.0, -1, 10);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(728)), c_animNameDefault, "Fidget Inferior", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(216)), c_animNameDefault, "Fidget Inferior Start", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(216)), c_animNameDefault, "Fidget Inferior", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(1074)), c_animNameDefault, "Fidget Equal", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(925)), c_animNameDefault, "Fidget Inferior Start", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(925)), c_animNameDefault, "Fidget Inferior", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(912)), c_animNameDefault, "Fidget Equal", c_animFlagPlayForever, c_animTimeDefault);
    if ((gv_midCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidEscapeCleanup_Init () {
    gt_MidEscapeCleanup = TriggerCreate("gt_MidEscapeCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_lv_UnitGroup;

    // Automatic Variable Declarations
    unitgroup autoE2A7EFE9_g;
    int autoE2A7EFE9_u;
    unit autoE2A7EFE9_var;

    // Variable Initialization
    lv_lv_UnitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_p1_USER);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitPauseAll(true);
    UnitKill(UnitFromId(158));
    PingDestroy(gv_objectiveMainPing);
    libNtve_gf_KillModel(gv_actorObjectiveMain);
    lv_lv_UnitGroup = UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    libNtve_gf_AddUnitGroupToUnitGroup(lv_lv_UnitGroup, gv_victoryHiddenUnitGroup);
    lv_lv_UnitGroup = UnitGroup(null, gv_p2_DOMINION_RED, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    libNtve_gf_AddUnitGroupToUnitGroup(lv_lv_UnitGroup, gv_victoryHiddenUnitGroup);
    autoE2A7EFE9_g = gv_victoryHiddenUnitGroup;
    autoE2A7EFE9_u = UnitGroupCount(autoE2A7EFE9_g, c_unitCountAll);
    for (;; autoE2A7EFE9_u -= 1) {
        autoE2A7EFE9_var = UnitGroupUnitFromEnd(autoE2A7EFE9_g, autoE2A7EFE9_u);
        if (autoE2A7EFE9_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoE2A7EFE9_var, false);
    }
    libNtve_gf_ShowHideUnit(gv_raynor, true);
    libNtve_gf_PauseUnit(gv_raynor, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto8C1614BF_n = 8;
    int auto8C1614BF_i;
    const int autoEE15E776_n = 7;
    int autoEE15E776_i;

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetBackground(c_backgroundFixed, "BraxisAlphaSkyBox", 100.0);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(576), 0.0, -1, 10, true);
    UnitSetPosition(gv_raynor, PointFromId(2335), false);
    UnitSetFacing(gv_raynor, 225.0, 0.0);
    for (auto8C1614BF_i = 1; auto8C1614BF_i <= auto8C1614BF_n; auto8C1614BF_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Civilian", 0, gv_p3_RIKSVILLE_YELLOW, RegionRandomPoint(RegionFromId(25)));
        UnitGroupAdd(gv_escapeCivilians, UnitLastCreated());
        gv_riksvillePopulation += 1;
    }
    for (autoEE15E776_i = 1; autoEE15E776_i <= autoEE15E776_n; autoEE15E776_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "CivilianFemale", 0, gv_p3_RIKSVILLE_YELLOW, RegionRandomPoint(RegionFromId(25)));
        UnitGroupAdd(gv_escapeCivilians, UnitLastCreated());
        gv_riksvillePopulation += 1;
    }
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    SoundPlay(SoundLink("Emitter_CrowdSmallCheering", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeReal);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TRaynor01MusicOutro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(138), 13.0, -1, 10, true);
    TriggerExecute(gt_VictoryRandomCheer, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_victoryCinematicCompleted = false;
    Wait(1.5, c_timeGame);
    // Transmission - SoundLink("TRaynor01CivilianFemale100053", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor01CivilianFemale100053", 0), c_transmissionDurationAdd, 0.0, true);
    UnitIssueOrder(gv_raynor, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2721)), c_orderQueueReplace);
    libNtve_gf_AttachModelToUnit(gv_raynor, "TalkIcon", "Ref_Origin");
    // Transmission - SoundLink("TRaynor01Raynor00052", 0)
    libCamp_gf_SendTransmissionCampaign(gv_raynor, SoundLink("TRaynor01Raynor00052", 0), c_transmissionDurationAdd, 0.0, true);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    gv_victoryCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victoryCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(lv_fadeDuration, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4C6FF166_g;
    int auto4C6FF166_u;
    unit auto4C6FF166_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitPauseAll(true);
    auto4C6FF166_g = gv_victoryHiddenUnitGroup;
    auto4C6FF166_u = UnitGroupCount(auto4C6FF166_g, c_unitCountAll);
    for (;; auto4C6FF166_u -= 1) {
        auto4C6FF166_var = UnitGroupUnitFromEnd(auto4C6FF166_g, auto4C6FF166_u);
        if (auto4C6FF166_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto4C6FF166_var, true);
    }
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Random Cheer
//--------------------------------------------------------------------------------------------------
bool gt_VictoryRandomCheer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5A1D1538_g;
    int auto5A1D1538_u;
    unit auto5A1D1538_var;
    unitgroup auto67CB5E3A_g;
    int auto67CB5E3A_u;
    unit auto67CB5E3A_var;
    int auto1F2639CC_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto5A1D1538_g = gv_escapeCivilians;
    auto5A1D1538_u = UnitGroupCount(auto5A1D1538_g, c_unitCountAll);
    for (;; auto5A1D1538_u -= 1) {
        auto5A1D1538_var = UnitGroupUnitFromEnd(auto5A1D1538_g, auto5A1D1538_u);
        if (auto5A1D1538_var == null) { break; }
        libNtve_gf_PauseUnit(auto5A1D1538_var, false);
    }
    auto67CB5E3A_g = UnitGroupFilterPlayer(gv_escapeCivilians, gv_p3_RIKSVILLE_YELLOW, 0);
    auto67CB5E3A_u = UnitGroupCount(auto67CB5E3A_g, c_unitCountAll);
    for (;; auto67CB5E3A_u -= 1) {
        auto67CB5E3A_var = UnitGroupUnitFromEnd(auto67CB5E3A_g, auto67CB5E3A_u);
        if (auto67CB5E3A_var == null) { break; }
        if ((RandomInt(1, 4) <= 4)) {
            auto1F2639CC_val = RandomInt(0, 2);
            if (auto1F2639CC_val == 0) {
                UnitIssueOrder(auto67CB5E3A_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
                libNtve_gf_SendActorMessageToUnit(auto67CB5E3A_var, "AnimGroupApply Stand,Victory");
            }
            else if (auto1F2639CC_val == 1) {
                UnitIssueOrder(auto67CB5E3A_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
                libNtve_gf_SendActorMessageToUnit(auto67CB5E3A_var, "AnimGroupApply Stand,Victory,01");
            }
            else if (auto1F2639CC_val == 2) {
                UnitIssueOrder(auto67CB5E3A_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
                libNtve_gf_SendActorMessageToUnit(auto67CB5E3A_var, "AnimGroupApply Stand,Victory,Fidget");
            }
            else {
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryRandomCheer_Init () {
    gt_VictoryRandomCheer = TriggerCreate("gt_VictoryRandomCheer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04Music_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_StartGame_Init();
    gt_UnitMovementCheck_Init();
    gt_TutorialReviewQ_Init();
    gt_OpeningLineQ_Init();
    gt_RunDogmeatRUN_Init();
    gt_Dogmeatgo_Init();
    gt_GohomeDogmeat_Init();
    gt_CrazyOldLadyLineQ_Init();
    gt_CrazyOldLadyMove_Init();
    gt_CrazyOldLadyDespawn_Init();
    gt_RoadblockView_Init();
    gt_RoadblockAggroQ_Init();
    gt_RoadblockTransmissionKill_Init();
    gt_RoadblockAttacked_Init();
    gt_RoadblockCarcass_Init();
    gt_FirstHoloboardencounter_Init();
    gt_RaynorsaysKillHoloboardsQ_Init();
    gt_WhereisEveryoneQ_Init();
    gt_MutteringJohnQ_Init();
    gt_MutteringJohnDespawn_Init();
    gt_ThisisuglyQ_Init();
    gt_GhostTownEntranceCarcass_Init();
    gt_GhostTownExitCarcass1_Init();
    gt_GhostTownExitCarcass2_Init();
    gt_GhostTownExitCarcass3_Init();
    gt_GhostTownExitCarcass4_Init();
    gt_RiksvilleAutoSave01_Init();
    gt_RiksvilleTownSquareViewQ_Init();
    gt_RiksvilleTownSquareDropPods_Init();
    gt_RiksvilleTownSquareClear_Init();
    gt_RiksvilleTownSquareClearDialogueQ_Init();
    gt_RiksvilleTownSquareVikingRemove_Init();
    gt_RiksvilleTownRevealCheck_Init();
    gt_SouthieMarineaggroStatue_Init();
    gt_SouthieMarineaggroProximity_Init();
    gt_SouthieMarineattackQ_Init();
    gt_SouthieTransmissionKill_Init();
    gt_ThisisbadQ_Init();
    gt_EscapeView_Init();
    gt_EscapeDamage_Init();
    gt_EscapeClearQ_Init();
    gt_EscapeRevealCheck_Init();
    gt_EscapeRandomCheer_Init();
    gt_CivilianSpawnCrowd_Init();
    gt_CivilianMarchQ_Init();
    gt_Flyawaybirdie_Init();
    gt_FlyawaybirdieptIItheBirdening_Init();
    gt_DominionCompoundViewQ_Init();
    gt_DominionCompoundVikingland_Init();
    gt_DominionCompoundClear_Init();
    gt_DominionCompoundMove_Init();
    gt_DominionCompoundCheer_Init();
    gt_DominionCompoundWarningLights_Init();
    gt_DominionCivilianCompound_Init();
    gt_DominionCompoundReticleKiller_Init();
    gt_CreateReticule2_Init();
    gt_CreateReticule3_Init();
    gt_CreateReticule4_Init();
    gt_CreateReticule5_Init();
    gt_CreateReticule6_Init();
    gt_HoloReticuleKiller_Init();
    gt_HoloPingKiller_Init();
    gt_PlayHoloboard01Q_Init();
    gt_PlayHoloboard02Q_Init();
    gt_PlayHoloboard03Q_Init();
    gt_PlayHoloboard04Q_Init();
    gt_PlayHoloboard05Q_Init();
    gt_PlayHoloboard06Q_Init();
    gt_HoloboardStopSounds_Init();
    gt_TipStoryModeQ_Init();
    gt_TipThisisnotaherogameQ_Init();
    gt_TipUnitNewUnitMarinesQ_Init();
    gt_TipTutorialVideosQ_Init();
    gt_StatHoloboardsDestroyed_Init();
    gt_StatDominionMarinesKilled_Init();
    gt_Achievement5RaynorKillsNormal_Init();
    gt_VictoryTowerDestroyed_Init();
    gt_Victory_Init();
    gt_DefeatUnitsDead_Init();
    gt_DefeatRaynorDead_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_ObjectiveDestroyLogisticalHQCreateQ_Init();
    gt_ObjectiveDestroyLogisticalHQComplete_Init();
    gt_ObjectiveRaynorMustSurviveCreateQ_Init();
    gt_ObjectiveRaynorSurviveComplete_Init();
    gt_ObjectiveDestroyDominionHoloboardsCreate_Init();
    gt_ObjectiveDestroyDominionHoloboardsComplete_Init();
    gt_ObjectiveDestroyDominionHoloboardsUpdate_Init();
    gt_BriefingQ_Init();
    gt_BriefingScene00_Init();
    gt_BriefingScene00Viking_Init();
    gt_BriefingScene01_Init();
    gt_BriefingScene02_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanupNoEscape_Init();
    gt_IntroCleanupEscape_Init();
    gt_IntroCargoUnload_Init();
    gt_IntroDropshipcleanup_Init();
    gt_MidBillboardQ_Init();
    gt_MidBillboardSetup_Init();
    gt_MidBillboardCinematic_Init();
    gt_MidBillboardCinematicEnd_Init();
    gt_MidBillboardCleanup_Init();
    gt_MidEscapeQ_Init();
    gt_MidEscapeSetup_Init();
    gt_MidEscapeCinematic_Init();
    gt_MidEscapeCinematicEnd_Init();
    gt_MidEscapeCleanup_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryRandomCheer_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
