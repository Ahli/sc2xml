//==================================================================================================
// 
// Generated Map Script
// 
// Name:   The Evacuation
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/CampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libCamp_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_p1_USER = 1;

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_PRESET_MissionPhase_Tactical = 0;
const int ge_PRESET_MissionPhase_Escort = 1;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_p2_ZERG_ORANGE_NW;
int gv_p3_ZERG_LIGHTBLUE_SE;
int gv_p4_COLONISTS;
int gv_p5_ZERG_TACTICALPHASE;
int gv_p6_ZERG_NOAIPREPLACED;
playergroup gv_zergPlayers;
bool gv_gameOver;
bool gv_inCinematic;
point[51] gv_escortRouteRallyPoints;
unitgroup gv_civilianSpawners;
int gv_missionPhase;
unit gv_crazyRidley;
bool gv_enoughColonistsSavedThisWave;
int gv_cTransmissionCycleEarly;
int gv_cTransmissionCycleLate;
bool gv_finalZergWaveVariation;
unit gv_pingConvoy;
unitgroup gv_colonistsOnTheMove;
unitgroup gv_convoyGuards;
int gv_convoyGuardCyclingLineIndex;
int gv_escortIndex;
int[7] gv_unloadAmount;
int gv_vehicleLimit;
point[21] gv_noTruckColonistRallyPoint;
int gv_noTruckColonistRallyIndex;
int gv_vehicleCount;
unit gv_tHEONETRUCK;
int gv_hTransmissionCycleLate;
int gv_hTransmissionCycleMid;
int gv_hTransmissionCycleEarly;
int gv_inCombatIndicator;
fixed gv_convoyMovementSpeed;
int gv_structuresLost;
int gv_firebatMove;
int gv_medicMove;
unitgroup gv_firebatCargoUnits;
int gv_initialMarineCount;
unitgroup gv_zergOnTheLoose;
unitgroup gv_zergOnTheLoose2;
int gv_colonistsSaveQuota;
int gv_colonistsSaved;
int gv_colonistsKilled;
int gv_colonistsDeathQuota;
int gv_convoyTrucksSent;
int gv_colonistLeaderBoard;
unit gv_chrysalisPingUnit;
int gv_doomsdayZergSpawnCount;
point gv_tempTumorPoint;
point gv_tempNydusPoint;
int gv_tempNydusPacks;
int gv_tempNydusPackSize;
fixed gv_tempNydusCooldown;
string gv_tempNydusType;
unitgroup gv_activeNydusWorms;
fixed gv_nydusSpawnDelay;
fixed gv_nydusWormHP;
unitgroup gv_doomsdayZergUnitGroup;
unit gv_activeCivilianShip;
unit gv_blastOffShip;
fixed gv_waveDelay;
int gv_convoyTrucksKilled;
bool gv_hansonQQInhibitor;
int gv_doomsdayWavesSent;
int gv_objPing_ReachHanson;
int gv_objective_ReachHanson;
int gv_objective_SaveColonists;
int gv_objective_DontLetColonistsDie;
int gv_bonusObjectiveCollectChrysalis;
int gv_bonusObjectiveCollectChrysalisNeeded;
int gv_bonusObjectiveCollectChrysalisFound;
bool gv_briefingCinematicPlaying;
unit gv_briefingTransport1;
unit gv_briefingBunker;
unitgroup gv_victoryHiddenUnitGroup;
bool gv_victoryCinematicCompleted;

void InitGlobals () {
    gv_p2_ZERG_ORANGE_NW = 2;
    gv_p3_ZERG_LIGHTBLUE_SE = 3;
    gv_p4_COLONISTS = 4;
    gv_p5_ZERG_TACTICALPHASE = 5;
    gv_p6_ZERG_NOAIPREPLACED = 6;
    gv_zergPlayers = PlayerGroupEmpty();
    gv_civilianSpawners = UnitGroupEmpty();
    gv_missionPhase = ge_PRESET_MissionPhase_Tactical;
    gv_cTransmissionCycleEarly = 1;
    gv_cTransmissionCycleLate = 1;
    gv_colonistsOnTheMove = UnitGroupEmpty();
    gv_convoyGuards = UnitGroupEmpty();
    gv_convoyGuardCyclingLineIndex = 1;
    gv_escortIndex = 1;
    gv_vehicleLimit = 1;
    gv_noTruckColonistRallyIndex = 1;
    gv_hTransmissionCycleLate = 1;
    gv_hTransmissionCycleMid = 1;
    gv_hTransmissionCycleEarly = 1;
    gv_firebatMove = 1;
    gv_medicMove = 1;
    gv_firebatCargoUnits = UnitGroupEmpty();
    gv_zergOnTheLoose = UnitGroupEmpty();
    gv_zergOnTheLoose2 = UnitGroupEmpty();
    gv_colonistsSaveQuota = 50;
    gv_colonistsDeathQuota = libNtve_gf_DifficultyValueInt(0, 0, 20, 20);
    gv_colonistLeaderBoard = c_timerWindowNone;
    gv_activeNydusWorms = UnitGroupEmpty();
    gv_nydusSpawnDelay = 12.0;
    gv_nydusWormHP = 200.0;
    gv_doomsdayZergUnitGroup = UnitGroupEmpty();
    gv_objPing_ReachHanson = c_invalidPingId;
    gv_objective_ReachHanson = c_invalidObjectiveId;
    gv_objective_SaveColonists = c_invalidObjectiveId;
    gv_objective_DontLetColonistsDie = c_invalidObjectiveId;
    gv_bonusObjectiveCollectChrysalis = c_invalidObjectiveId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_GenerateColonist ();
bool gf_PlayerIsInCombat (int lp_player);
void gf_BunkerGet (unit lp_unit);
void gf_WaitForColonistToEnterRegion (region lp_region);
void gf_SpoogeAreawithOverlord (point lp_param_Spawn, point lp_param_SpoogeTarget);
void gf_SpoogeAreawithTumor (point lp_spawnPoint);
void gf_AttackwithUnburrowingUnits (int lp_player, unitgroup lp_units);
void gf_CreateUnburrowingUnits (int lp_qty, string lp_type, int lp_player, point lp_loc);
void gf_AttackwithZergDropPod (int lp_qty1, string lp_type1, int lp_qty2, string lp_type2, int lp_qty3, string lp_type3, point lp_target);
void gf_SpawnNydusWorm (point lp_spawnPoint, int lp_player, int lp_packs, int lp_packSize, string lp_type, fixed lp_cooldown);
void gf_ResearchUpgradesForZerg (int lp_qty, string lp_upgrade);
void gf_ColonyShipBlastoff (unit lp_unit);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03VariablesUnits;
trigger gt_Init04Music;
trigger gt_Init05Environment;
trigger gt_Init06Difficulty;
trigger gt_Init07Help;
trigger gt_IntroSequence;
trigger gt_StartGame;
trigger gt_SwanntalksaboutFirebatQ;
trigger gt_FirebatDropshipAction;
trigger gt_FirebatMove;
trigger gt_RemoveDropships;
trigger gt_MarineConstantRespawn;
trigger gt_ZergontheLoose;
trigger gt_ZergontheLoose2;
trigger gt_Zerg1;
trigger gt_Zerg2;
trigger gt_Zerg3;
trigger gt_SwitchtoEscortPhase;
trigger gt_SwitchtoEscortPhaseQ;
trigger gt_ResourcePickups;
trigger gt_CameraPantoTownCasualNormal;
trigger gt_StartHansonEscortPhase;
trigger gt_CreateStorymodeTipsQ;
trigger gt_StarportIntroQ;
trigger gt_StartAI;
trigger gt_TIPZergCreep;
trigger gt_Preparenextconvoy;
trigger gt_Gathercolonistspriortoevacuation;
trigger gt_ColonistsHeadsupMessageQ;
trigger gt_ColonistsHeadsupMessageEarlyQ;
trigger gt_ColonistsHeadsupMessageMidQ;
trigger gt_ColonistsHeadsupMessageLateQ;
trigger gt_ConvoySpawned;
trigger gt_SendColonists;
trigger gt_ColonistsGOGOMessageEarlyQ;
trigger gt_ColonistsGOGOMessageLateQ;
trigger gt_PingConvoy;
trigger gt_ConvoyMovement;
trigger gt_AddConvoyMarineintoUnitGroup;
trigger gt_ConvoyGuardsareUnderAttackQ;
trigger gt_PlayerIsInCombat;
trigger gt_PlayerIsInCombatIndicatorDiminish;
trigger gt_BunkerGet1;
trigger gt_BunkerGet2;
trigger gt_BunkerLineQ;
trigger gt_ChrysalisTipTriggerA;
trigger gt_ChrysalisTipTriggerB;
trigger gt_ChrysalisTipTriggerC;
trigger gt_ChrysalisTipQ;
trigger gt_ChrysalisPing;
trigger gt_ConvoyAttack1Freebie;
trigger gt_ConvoyAttack2StressBunkersnotallfull;
trigger gt_ConvoyAttack3Burnsinglebunkers;
trigger gt_ConvoyAttack4Droppods;
trigger gt_ConvoyAttack5Nydusworms;
trigger gt_ConvoyAttack6AHH;
trigger gt_ConvoyAttack7VariationAHH;
trigger gt_BackdoorSpoogeAmbience;
trigger gt_TumorSpawningTrigger;
trigger gt_AIGiveMinerals;
trigger gt_AIGiveGas;
trigger gt_NydusSpawningTrigger;
trigger gt_Marinereachescolonyship;
trigger gt_TruckColonistreachescolonyship;
trigger gt_Convoyloadsintocolonyship;
trigger gt_ColonyShipBlastoffActions;
trigger gt_WaveOverLogic;
trigger gt_WaveOverAIRetreat;
trigger gt_WaveOverShipBlastoffAutosave;
trigger gt_WaveOverAIUpgradesTipsEnvironment;
trigger gt_WaveOver01TipabouthowtoplaythismissionQ;
trigger gt_WaveOver03TipaboutzergdroppodsQ;
trigger gt_WaveOver04TipaboutnyduswormsQ;
trigger gt_ColonistKilled;
trigger gt_DoomsdayZergAttackWavesAnnounceQ;
trigger gt_DoomsdayZergAttackWaves;
trigger gt_DoomsdayZergAI;
trigger gt_Playerkillscolonists;
trigger gt_PlayerkillscolonistsQ;
trigger gt_PlayerkillscolonistsAgainQ;
trigger gt_PlayerkillscolonisthomesQ;
trigger gt_Colonistskeepdyingline1Q;
trigger gt_Colonistskeepdyingline2Q;
trigger gt_Colonistskeepdyingline3Q;
trigger gt_Colonistskeepdyingline4Q;
trigger gt_DefeatBaseDead;
trigger gt_DefeatTacticalPhase;
trigger gt_DefeatColonyShipDead;
trigger gt_DefeatColonistHutsDie;
trigger gt_DefeatTooManyColonistsDie;
trigger gt_VictoryPlayerSavesEnoughColonists;
trigger gt_VictoryPlayerSavesEnoughColonistsQ;
trigger gt_Victory;
trigger gt_VictoryCheat;
trigger gt_Defeat;
trigger gt_DefeatCheat;
trigger gt_MainObjectiveReachHansonCreate;
trigger gt_MainObjectiveReachHansonDiscoverQ;
trigger gt_MainObjectiveReachHansonComplete;
trigger gt_MainObjectiveSaveColonistsCreate;
trigger gt_MainObjectiveSaveColonistsDiscoverQ;
trigger gt_MainObjectiveSaveColonistsComplete;
trigger gt_ResearchObjectiveChrysalisCreateQ;
trigger gt_ResearchObjectiveChrysalisUpdate;
trigger gt_ResearchObjectiveChrysalisComplete;
trigger gt_BriefingQ;
trigger gt_BriefingSetup;
trigger gt_BriefingAction01Road;
trigger gt_BriefingAction02HansonsColony;
trigger gt_BriefingAction03Fighting;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryAction;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_GenerateColonist () {
    // Variable Declarations
    unit lv_randomHut;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitGroupCount(gv_civilianSpawners, c_unitCountAlive) >= 1)) {
        if ((gv_vehicleCount < gv_vehicleLimit)) {
            UnitCreate(1, "ColonistTransport", 0, gv_p4_COLONISTS, PointFromId(2906), 180.0);
            AISetUnitForceMover(UnitLastCreated(),true);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3242)), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, gv_convoyMovementSpeed);
            gv_vehicleCount += 1;
            gv_tHEONETRUCK = UnitLastCreated();
            Wait(14.0, c_timeGame);
            libNtve_gf_SendActorMessageToUnit(gv_tHEONETRUCK, "AnimBracketStart Work Stand,Work,Start Stand,Work Stand,Work,End");
        }
        else {
            lv_randomHut = UnitGroupRandomUnit(gv_civilianSpawners, c_unitCountAlive);
            if ((RandomFixed(0.0, 100.0) >= 33.0)) {
                UnitCargoCreate(lv_randomHut, "Civilian", 1);
            }
            else {
                UnitCargoCreate(lv_randomHut, "CivilianFemale", 1);
            }
            AISetUnitForceMover(UnitCargoLastCreated(),true);
            UnitBehaviorAdd(UnitCargoLastCreated(), "Hustle", UnitCargoLastCreated(), 1);
            UnitSetState(UnitCargoLastCreated(), c_unitStateTargetable, true);
            if ((UnitIsAlive(gv_tHEONETRUCK) == true)) {
                UnitIssueOrder(lv_randomHut, OrderTargetingPoint(null, PointFromId(856)), c_orderQueueReplace);
                UnitIssueOrder(lv_randomHut, OrderTargetingUnit(null, gv_tHEONETRUCK), c_orderQueueAddToEnd);
            }
            else {
                gv_noTruckColonistRallyIndex += 1;
                UnitIssueOrder(lv_randomHut, OrderTargetingPoint(AbilityCommand("Rally", 0), gv_noTruckColonistRallyPoint[gv_noTruckColonistRallyIndex]), c_orderQueueReplace);
            }
            UnitIssueOrder(lv_randomHut, Order(AbilityCommand("HutTransport", 1)), c_orderQueueReplace);
        }
    }

}

bool gf_PlayerIsInCombat (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_inCombatIndicator > 0)) {
        return true;
    }
    else {
        return false;
    }
}

void gf_BunkerGet (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    PingCreate(PlayerGroupSingle(gv_p1_USER), "PingSimple", UnitGetPosition(lp_unit), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 5.0);
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/EB027D65"), null, UnitGetPosition(lp_unit));
    libNtve_gf_RescueUnit(lp_unit, gv_p1_USER, true);
    TriggerExecute(gt_BunkerLineQ, true, false);
}

void gf_WaitForColonistToEnterRegion (region lp_region) {
    // Automatic Variable Declarations
    // Implementation
    while (!((UnitGroupCount(UnitGroupFilterRegion(gv_colonistsOnTheMove, lp_region, 0), c_unitCountAlive) > 0))) {
        Wait(0.1, c_timeGame);
    }
}

void gf_SpoogeAreawithOverlord (point lp_param_Spawn, point lp_param_SpoogeTarget) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGroupCount(UnitGroup("Overlord", c_playerAny, RegionCircle(lp_param_SpoogeTarget, 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Overlord", 0, gv_p5_ZERG_TACTICALPHASE, lp_param_Spawn);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lp_param_SpoogeTarget), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("GenerateCreep", 0)), c_orderQueueAddToEnd);
        if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
        }

    }

}

void gf_SpoogeAreawithTumor (point lp_spawnPoint) {
    // Automatic Variable Declarations
    // Implementation
    gv_tempTumorPoint = lp_spawnPoint;
    TriggerExecute(gt_TumorSpawningTrigger, true, false);
}

void gf_AttackwithUnburrowingUnits (int lp_player, unitgroup lp_units) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    unitgroup autoC43E849B_g;
    int autoC43E849B_u;

    // Variable Initialization

    // Implementation
    autoC43E849B_g = lp_units;
    autoC43E849B_u = UnitGroupCount(autoC43E849B_g, c_unitCountAll);
    for (;; autoC43E849B_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(autoC43E849B_g, autoC43E849B_u);
        if (lv_u == null) { break; }
        UnitSetOwner(lv_u, lp_player, true);
        libNtve_gf_PauseUnit(lv_u, false);
        UnitIssueOrder(lv_u, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        AISetUnitScriptControlled(lv_u, false);
        AIAttackWaveUseUnit(lp_player, lv_u);
    }
    AIAttackWaveSend(lp_player, 0, false);
}

void gf_CreateUnburrowingUnits (int lp_qty, string lp_type, int lp_player, point lp_loc) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_CreateUnitsAtPoint2(lp_qty, lp_type, 0, lp_player, lp_loc);
    gf_AttackwithUnburrowingUnits(lp_player, UnitLastCreatedGroup());
}

void gf_AttackwithZergDropPod (int lp_qty1, string lp_type1, int lp_qty2, string lp_type2, int lp_qty3, string lp_type3, point lp_target) {
    // Variable Declarations
    unitgroup lv_unitGroup;

    // Automatic Variable Declarations
    unitgroup auto142C38A1_g;
    int auto142C38A1_u;
    unit auto142C38A1_var;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Implementation
    libNtve_gf_UnitCreateFacingPoint(lp_qty1, lp_type1, 0, gv_p2_ZERG_ORANGE_NW, RegionGetCenter(RegionFromId(11)), PointFromId(858));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_unitGroup);
    libNtve_gf_UnitCreateFacingPoint(lp_qty2, lp_type2, 0, gv_p2_ZERG_ORANGE_NW, RegionGetCenter(RegionFromId(11)), PointFromId(858));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_unitGroup);
    libNtve_gf_UnitCreateFacingPoint(lp_qty3, lp_type3, 0, gv_p2_ZERG_ORANGE_NW, RegionGetCenter(RegionFromId(11)), PointFromId(858));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_unitGroup);
    libCamp_gf_CreateDropPod(libCamp_ge_DropPodRace_Zerg, RegionRandomPoint(RegionCircle(lp_target, 1.0)), lv_unitGroup, true);
    auto142C38A1_g = lv_unitGroup;
    auto142C38A1_u = UnitGroupCount(auto142C38A1_g, c_unitCountAll);
    for (;; auto142C38A1_u -= 1) {
        auto142C38A1_var = UnitGroupUnitFromEnd(auto142C38A1_g, auto142C38A1_u);
        if (auto142C38A1_var == null) { break; }
        AIAttackWaveUseUnit(gv_p2_ZERG_ORANGE_NW, auto142C38A1_var);
        AIAttackWaveSend(gv_p2_ZERG_ORANGE_NW, 0, false);
    }
}

void gf_SpawnNydusWorm (point lp_spawnPoint, int lp_player, int lp_packs, int lp_packSize, string lp_type, fixed lp_cooldown) {
    // Automatic Variable Declarations
    // Implementation
    gv_tempNydusPoint = lp_spawnPoint;
    gv_tempNydusPacks = lp_packs;
    gv_tempNydusPackSize = lp_packSize;
    gv_tempNydusType = lp_type;
    gv_tempNydusCooldown = lp_cooldown;
    TriggerExecute(gt_NydusSpawningTrigger, true, false);
}

void gf_ResearchUpgradesForZerg (int lp_qty, string lp_upgrade) {
    // Automatic Variable Declarations
    playergroup autoE07C161E_g;
    int autoE07C161E_var;

    // Implementation
    autoE07C161E_g = gv_zergPlayers;
    autoE07C161E_var = -1;
    while (true) {
        autoE07C161E_var = PlayerGroupNextPlayer(autoE07C161E_g, autoE07C161E_var);
        if (autoE07C161E_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoE07C161E_var, lp_upgrade, lp_qty);
    }
}

void gf_ColonyShipBlastoff (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    gv_blastOffShip = lp_unit;
    TriggerExecute(gt_ColonyShipBlastoffActions, true, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_LoadCampaignData(libCamp_ge_MapID_MapTHanson01);
    TriggerExecute(gt_Init01Technology, true, false);
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03VariablesUnits, true, true);
    TriggerExecute(gt_Init04Music, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulty, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    libCamp_gf_RegisterFootageRecording(gt_BriefingQ);
    libCamp_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_IntroSequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupInfantryFirebat, 1);
    TechTreeUpgradeAddLevel(gv_p2_ZERG_ORANGE_NW, "Burrow", 1);
    TechTreeUpgradeAddLevel(gv_p3_ZERG_LIGHTBLUE_SE, "Burrow", 1);
    TechTreeUpgradeAddLevel(gv_p2_ZERG_ORANGE_NW, "overlordspeed", 1);
    TechTreeUpgradeAddLevel(gv_p3_ZERG_LIGHTBLUE_SE, "overlordspeed", 1);
    TechTreeUpgradeAddLevel(gv_p5_ZERG_TACTICALPHASE, "overlordspeed", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_zergPlayers, gv_p2_ZERG_ORANGE_NW);
    PlayerGroupAdd(gv_zergPlayers, gv_p3_ZERG_LIGHTBLUE_SE);
    PlayerGroupAdd(gv_zergPlayers, gv_p5_ZERG_TACTICALPHASE);
    PlayerGroupAdd(gv_zergPlayers, gv_p6_ZERG_NOAIPREPLACED);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p2_ZERG_ORANGE_NW, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p3_ZERG_LIGHTBLUE_SE, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p4_COLONISTS, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p5_ZERG_TACTICALPHASE, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p6_ZERG_NOAIPREPLACED, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p2_ZERG_ORANGE_NW, gv_p3_ZERG_LIGHTBLUE_SE, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p2_ZERG_ORANGE_NW, gv_p4_COLONISTS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p2_ZERG_ORANGE_NW, gv_p5_ZERG_TACTICALPHASE, libNtve_ge_AllianceSetting_NeutralWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p2_ZERG_ORANGE_NW, gv_p6_ZERG_NOAIPREPLACED, libNtve_ge_AllianceSetting_NeutralWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p3_ZERG_LIGHTBLUE_SE, gv_p4_COLONISTS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p3_ZERG_LIGHTBLUE_SE, gv_p5_ZERG_TACTICALPHASE, libNtve_ge_AllianceSetting_NeutralWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p3_ZERG_LIGHTBLUE_SE, gv_p6_ZERG_NOAIPREPLACED, libNtve_ge_AllianceSetting_NeutralWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p4_COLONISTS, gv_p5_ZERG_TACTICALPHASE, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p4_COLONISTS, gv_p6_ZERG_NOAIPREPLACED, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p5_ZERG_TACTICALPHASE, gv_p6_ZERG_NOAIPREPLACED, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    PlayerSetAlliance(gv_p1_USER, c_allianceIdPushable, gv_p4_COLONISTS, true);
    PlayerSetAlliance(gv_p2_ZERG_ORANGE_NW, c_allianceIdPushable, gv_p4_COLONISTS, true);
    PlayerSetAlliance(gv_p3_ZERG_LIGHTBLUE_SE, c_allianceIdPushable, gv_p4_COLONISTS, true);
    PlayerSetAlliance(gv_p5_ZERG_TACTICALPHASE, c_allianceIdPushable, gv_p4_COLONISTS, true);
    PlayerSetAlliance(gv_p6_ZERG_NOAIPREPLACED, c_allianceIdPushable, gv_p4_COLONISTS, true);
    PlayerModifyPropertyInt(gv_p1_USER, c_playerPropMinerals, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_p1_USER, c_playerPropVespene, c_playerPropOperSetTo, 50);
    PlayerModifyPropertyInt(gv_p2_ZERG_ORANGE_NW, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p2_ZERG_ORANGE_NW, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p3_ZERG_LIGHTBLUE_SE, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p3_ZERG_LIGHTBLUE_SE, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p4_COLONISTS, c_playerPropMinerals, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(gv_p4_COLONISTS, c_playerPropVespene, c_playerPropOperSetTo, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Variables/Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03VariablesUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_playerHasMercTech;
    int lv_merc;

    // Automatic Variable Declarations
    int autoBAE5F0D6_i;
    unitgroup autoE0D555BB_g;
    int autoE0D555BB_u;
    unit autoE0D555BB_var;
    unitgroup autoE1052B09_g;
    int autoE1052B09_u;
    unit autoE1052B09_var;
    unitgroup autoB1ABC5AB_g;
    int autoB1ABC5AB_u;
    unit autoB1ABC5AB_var;
    unitgroup autoD5F69E5E_g;
    int autoD5F69E5E_u;
    unit autoD5F69E5E_var;
    unitgroup autoBB9F27D7_g;
    int autoBB9F27D7_u;
    unit autoBB9F27D7_var;

    // Variable Initialization
    lv_merc = libCamp_ge_StoryMercID_MercNone;

    // Actions
    if (!runActions) {
        return true;
    }

    autoBAE5F0D6_i = libCamp_gv_TSC_MERC_FIRST;
    while (autoBAE5F0D6_i <= libCamp_gv_TSC_MERC_LAST) {
        lv_merc = libCamp_gv_tS_MercID[autoBAE5F0D6_i];
        if ((libCamp_gf_MercStatusCheck(lv_merc, libCamp_ge_StoryMercStatus_Purchased) == true)) {
            lv_playerHasMercTech = true;
            break;
        }

        autoBAE5F0D6_i = autoBAE5F0D6_i + 1;
    }
    if ((lv_playerHasMercTech == false)) {
        UnitRemove(UnitFromId(3245));
    }
    else {
        libNtve_gf_PauseUnit(UnitFromId(3245), true);
    }
    gv_bonusObjectiveCollectChrysalisNeeded = UnitGroupCount(UnitGroup("ChrysalisEgg", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    gv_initialMarineCount = UnitGroupCount(UnitGroup("Marine", gv_p4_COLONISTS, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    libNtve_gf_PauseUnit(UnitFromId(96), true);
    autoE0D555BB_g = UnitGroup("Hut", gv_p4_COLONISTS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE0D555BB_u = UnitGroupCount(autoE0D555BB_g, c_unitCountAll);
    for (;; autoE0D555BB_u -= 1) {
        autoE0D555BB_var = UnitGroupUnitFromEnd(autoE0D555BB_g, autoE0D555BB_u);
        if (autoE0D555BB_var == null) { break; }
        UnitGroupAdd(gv_civilianSpawners, autoE0D555BB_var);
    }
    autoE1052B09_g = UnitGroup(null, gv_p6_ZERG_NOAIPREPLACED, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE1052B09_u = UnitGroupCount(autoE1052B09_g, c_unitCountAll);
    for (;; autoE1052B09_u -= 1) {
        autoE1052B09_var = UnitGroupUnitFromEnd(autoE1052B09_g, autoE1052B09_u);
        if (autoE1052B09_var == null) { break; }
        UnitIssueOrder(autoE1052B09_var, OrderSetAutoCast(AbilityCommand("BurrowZerglingUp", 0), true), c_orderQueueReplace);
    }
    autoB1ABC5AB_g = UnitGroup(null, gv_p6_ZERG_NOAIPREPLACED, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB1ABC5AB_u = UnitGroupCount(autoB1ABC5AB_g, c_unitCountAll);
    for (;; autoB1ABC5AB_u -= 1) {
        autoB1ABC5AB_var = UnitGroupUnitFromEnd(autoB1ABC5AB_g, autoB1ABC5AB_u);
        if (autoB1ABC5AB_var == null) { break; }
        UnitBehaviorAdd(autoB1ABC5AB_var, "BroodlingWander", autoB1ABC5AB_var, 1);
    }
    autoD5F69E5E_g = UnitGroup(null, gv_p6_ZERG_NOAIPREPLACED, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD5F69E5E_u = UnitGroupCount(autoD5F69E5E_g, c_unitCountAll);
    for (;; autoD5F69E5E_u -= 1) {
        autoD5F69E5E_var = UnitGroupUnitFromEnd(autoD5F69E5E_g, autoD5F69E5E_u);
        if (autoD5F69E5E_var == null) { break; }
        UnitBehaviorAdd(autoD5F69E5E_var, "BroodlingWander", autoD5F69E5E_var, 1);
    }
    TriggerExecute(gt_MarineConstantRespawn, true, false);
    UnitSetInfoText(UnitFromId(2508), StringExternal("Param/Value/13118E37"), StringToText(""), StringToText(""));
    UnitSetInfoText(UnitFromId(2010), StringExternal("Param/Value/64C80FD3"), StringExternal("Param/Value/D58F2054"), StringToText(""));
    UnitSetInfoText(UnitFromId(612), StringExternal("Param/Value/BBBEF04A"), StringExternal("Param/Value/9A8CF471"), StringToText(""));
    UnitSetInfoText(UnitFromId(397), StringExternal("Param/Value/D4F6CA10"), StringExternal("Param/Value/5AFC2D08"), StringToText(""));
    UnitSetState(UnitFromId(612), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(2010), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(397), c_unitStateTargetable, false);
    UnitSetPropertyFixed(UnitFromId(1774), c_unitPropLifePercent, 42.0);
    UnitSetPropertyFixed(UnitFromId(2097), c_unitPropLifePercent, 34.0);
    UnitSetPropertyFixed(UnitFromId(1774), c_unitPropLifePercent, 27.0);
    UnitSetPropertyFixed(UnitFromId(2119), c_unitPropLifePercent, 63.0);
    UnitSetPropertyFixed(UnitFromId(2103), c_unitPropLifePercent, 25.0);
    UnitSetPropertyFixed(UnitFromId(2097), c_unitPropLifePercent, 35.0);
    UnitSetPropertyFixed(UnitFromId(2064), c_unitPropLifePercent, 53.0);
    UnitSetPropertyFixed(UnitFromId(2002), c_unitPropLifePercent, 12.0);
    UnitSetPropertyFixed(UnitFromId(482), c_unitPropLifePercent, 18.0);
    UnitSetPropertyFixed(UnitFromId(143), c_unitPropLifePercent, 37.0);
    UnitSetPropertyFixed(UnitFromId(557), c_unitPropLifePercent, 75.0);
    UnitSetPropertyFixed(UnitFromId(1185), c_unitPropLife, 368.0);
    UnitSetPropertyFixed(UnitFromId(1155), c_unitPropLife, 349.0);
    gv_activeCivilianShip = UnitFromId(1483);
    autoBB9F27D7_g = UnitGroup("AutoTurret", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBB9F27D7_u = UnitGroupCount(autoBB9F27D7_g, c_unitCountAll);
    for (;; autoBB9F27D7_u -= 1) {
        autoBB9F27D7_var = UnitGroupUnitFromEnd(autoBB9F27D7_g, autoBB9F27D7_u);
        if (autoBB9F27D7_var == null) { break; }
        UnitBehaviorRemove(autoBB9F27D7_var, "AutoTurretTimedLife", 1);
    }
    gv_noTruckColonistRallyPoint[1] = PointFromId(1463);
    gv_noTruckColonistRallyPoint[2] = PointFromId(3232);
    gv_noTruckColonistRallyPoint[3] = PointFromId(3223);
    gv_noTruckColonistRallyPoint[4] = PointFromId(3233);
    gv_noTruckColonistRallyPoint[5] = PointFromId(3224);
    gv_noTruckColonistRallyPoint[6] = PointFromId(3234);
    gv_noTruckColonistRallyPoint[7] = PointFromId(3225);
    gv_noTruckColonistRallyPoint[8] = PointFromId(3235);
    gv_noTruckColonistRallyPoint[9] = PointFromId(3226);
    gv_noTruckColonistRallyPoint[10] = PointFromId(3236);
    gv_noTruckColonistRallyPoint[11] = PointFromId(3227);
    gv_noTruckColonistRallyPoint[12] = PointFromId(3237);
    gv_noTruckColonistRallyPoint[13] = PointFromId(3228);
    gv_noTruckColonistRallyPoint[14] = PointFromId(3238);
    gv_noTruckColonistRallyPoint[15] = PointFromId(3229);
    gv_noTruckColonistRallyPoint[16] = PointFromId(3239);
    gv_noTruckColonistRallyPoint[17] = PointFromId(3230);
    gv_noTruckColonistRallyPoint[18] = PointFromId(3240);
    gv_noTruckColonistRallyPoint[19] = PointFromId(3231);
    gv_noTruckColonistRallyPoint[20] = PointFromId(3241);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03VariablesUnits_Init () {
    gt_Init03VariablesUnits = TriggerCreate("gt_Init03VariablesUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init04Music_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "THanson01MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Music_Init () {
    gt_Init04Music = TriggerCreate("gt_Init04Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libLbty_gf_AutoRevealRegion(RegionFromId(52), RegionFromId(52), gv_p1_USER);
    GameTimeOfDaySet("08:00:00");
    gv_escortRouteRallyPoints[0] = PointFromId(88);
    gv_escortRouteRallyPoints[1] = PointFromId(254);
    gv_escortRouteRallyPoints[2] = PointFromId(255);
    gv_escortRouteRallyPoints[3] = PointFromId(2091);
    gv_escortRouteRallyPoints[4] = PointFromId(258);
    gv_escortRouteRallyPoints[5] = PointFromId(259);
    gv_escortRouteRallyPoints[6] = PointFromId(261);
    gv_escortRouteRallyPoints[7] = PointFromId(262);
    gv_escortRouteRallyPoints[8] = PointFromId(263);
    gv_escortRouteRallyPoints[9] = PointFromId(264);
    gv_escortRouteRallyPoints[10] = PointFromId(265);
    gv_escortRouteRallyPoints[11] = PointFromId(227);
    gv_escortRouteRallyPoints[12] = PointFromId(228);
    gv_escortRouteRallyPoints[13] = PointFromId(230);
    gv_escortRouteRallyPoints[14] = PointFromId(231);
    gv_escortRouteRallyPoints[15] = PointFromId(1);
    gv_escortRouteRallyPoints[16] = PointFromId(42);
    gv_escortRouteRallyPoints[17] = PointFromId(165);
    gv_escortRouteRallyPoints[18] = PointFromId(276);
    gv_escortRouteRallyPoints[19] = PointFromId(376);
    gv_escortRouteRallyPoints[20] = PointFromId(377);
    gv_escortRouteRallyPoints[21] = PointFromId(406);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulty
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulty_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto395B6C3C_g;
    int auto395B6C3C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(1, 0, 0, 0) == 1)) {
        auto395B6C3C_g = gv_zergPlayers;
        auto395B6C3C_var = -1;
        while (true) {
            auto395B6C3C_var = PlayerGroupNextPlayer(auto395B6C3C_g, auto395B6C3C_var);
            if (auto395B6C3C_var < 0) { break; }
            PlayerModifyPropertyInt(auto395B6C3C_var, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        }
    }

    gv_nydusSpawnDelay = libNtve_gf_DifficultyValueFixed(12.0, 12.0, 9.0, 8.0);
    gv_nydusWormHP = libNtve_gf_DifficultyValueFixed(200.0, 200.0, 350.0, 500.0);
    gv_colonistsSaveQuota = 50;
    gv_waveDelay = libNtve_gf_DifficultyValueFixed(50.0, 50.0, 25.0, 15.0);
    gv_doomsdayZergSpawnCount = libNtve_gf_DifficultyValueInt(3, 3, 4, 5);
    gv_unloadAmount[1] = 10;
    gv_unloadAmount[2] = 10;
    gv_unloadAmount[3] = 10;
    gv_unloadAmount[4] = 12;
    gv_unloadAmount[5] = 12;
    gv_convoyMovementSpeed = 1.0;
    TechTreeUpgradeAddLevel(gv_p4_COLONISTS, "CombatShield", 1);
    gv_unloadAmount[6] = 16;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulty_Init () {
    gt_Init06Difficulty = TriggerCreate("gt_Init06Difficulty_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_AddUnitTypeToUnitHelpPanel("Drone", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Zergling", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Mutalisk", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Overlord", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Overseer", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Roach", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SpineCrawler", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SporeCrawler", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("ZergDropPod", false, gv_p1_USER);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Ultralisk", false, gv_p1_USER);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Baneling", false, gv_p1_USER);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Corruptor", false, gv_p1_USER);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Infestor", false, gv_p1_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Sequence
//--------------------------------------------------------------------------------------------------
bool gt_IntroSequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    TriggerExecute(gt_StartAI, true, false);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_p1_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(125), 1.5);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THanson01MusicIntro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerExecute(gt_FirebatDropshipAction, true, false);
    PlayerPauseAllCooldowns(gv_p1_USER, true);
    PlayerPauseAllCharges(gv_p1_USER, true);
    CinematicFade(true, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_StartGame, true, false);
    TriggerExecute(gt_StartHansonEscortPhase, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSequence_Init () {
    gt_IntroSequence = TriggerCreate("gt_IntroSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game
//--------------------------------------------------------------------------------------------------
bool gt_StartGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(6.0, c_timeGame);
    libNtve_gf_SetAlliance(gv_p4_COLONISTS, gv_p1_USER, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    PlayerSetAlliance(gv_p1_USER, c_allianceIdPushable, gv_p4_COLONISTS, true);
    libNtve_gf_ShareVisionofUnit(UnitFromId(2440), true, gv_p1_USER);
    libNtve_gf_ShareVisionofUnit(UnitFromId(2442), true, gv_p1_USER);
    libNtve_gf_ShareVisionofUnit(UnitFromId(2441), true, gv_p1_USER);
    TriggerExecute(gt_MainObjectiveReachHansonDiscoverQ, true, false);
    Wait(9.0, c_timeGame);
    TriggerExecute(gt_SwanntalksaboutFirebatQ, true, false);
    Wait(7.0, c_timeGame);
    TriggerExecute(gt_Zerg1, true, false);
    TriggerExecute(gt_Zerg3, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGame_Init () {
    gt_StartGame = TriggerCreate("gt_StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swann talks about Firebat Q
//--------------------------------------------------------------------------------------------------
bool gt_SwanntalksaboutFirebatQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_p1_USER, StringToText(""), null, PointFromId(1646));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson01Swann00046", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Swann00046", -1), c_transmissionDurationAdd, 1.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(2.0, c_timeReal);
    libCamp_gf_CreateTipFromConversationState("StoryTips|Hanson01_Firebats", libNtve_ge_TipType_NewUnit, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwanntalksaboutFirebatQ_Init () {
    gt_SwanntalksaboutFirebatQ = TriggerCreate("gt_SwanntalksaboutFirebatQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Firebat Dropship Action
//--------------------------------------------------------------------------------------------------
bool gt_FirebatDropshipAction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA5804961_g;
    int autoA5804961_u;
    unit autoA5804961_var;
    unitgroup autoFE6A3FBA_g;
    int autoFE6A3FBA_u;
    unit autoFE6A3FBA_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCargoCreate(UnitFromId(290), "Firebat", 2);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitCargoLastCreatedGroup(), gv_firebatCargoUnits);
    UnitCargoCreate(UnitFromId(290), "Medic", 2);
    autoA5804961_g = UnitCargoLastCreatedGroup();
    autoA5804961_u = UnitGroupCount(autoA5804961_g, c_unitCountAll);
    for (;; autoA5804961_u -= 1) {
        autoA5804961_var = UnitGroupUnitFromEnd(autoA5804961_g, autoA5804961_u);
        if (autoA5804961_var == null) { break; }
        UnitSetPropertyFixed(autoA5804961_var, c_unitPropEnergyPercent, 100.0);
    }
    libNtve_gf_AddUnitGroupToUnitGroup(UnitCargoLastCreatedGroup(), gv_firebatCargoUnits);
    autoFE6A3FBA_g = gv_firebatCargoUnits;
    autoFE6A3FBA_u = UnitGroupCount(autoFE6A3FBA_g, c_unitCountAll);
    for (;; autoFE6A3FBA_u -= 1) {
        autoFE6A3FBA_var = UnitGroupUnitFromEnd(autoFE6A3FBA_g, autoFE6A3FBA_u);
        if (autoFE6A3FBA_var == null) { break; }
        UnitSetPropertyFixed(autoFE6A3FBA_var, c_unitPropEnergyPercent, 100.0);
        UnitSetFacing(autoFE6A3FBA_var, 180.0, 0.0);
    }
    UnitIssueOrder(UnitFromId(290), OrderTargetingPoint(AbilityCommand("SpecOpsDropshipTransport", 2), PointFromId(2157)), c_orderQueueReplace);
    libNtve_gf_MakeUnitUncommandable(UnitFromId(290), true);
    UnitSetState(UnitFromId(290), c_unitStateTargetable, false);
    while (!(((UnitGroupCount(UnitCargoGroup(UnitFromId(290)), c_unitCountAlive) == 0) || (UnitIsAlive(UnitFromId(290)) == false)))) {
        Wait(1.0, c_timeGame);
    }
    Wait(0.1, c_timeGame);
    UnitIssueOrder(UnitFromId(290), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(31))), c_orderQueueReplace);
    TriggerEnable(gt_FirebatMove, false);
    TriggerEnable(gt_DefeatTacticalPhase, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirebatDropshipAction_Init () {
    gt_FirebatDropshipAction = TriggerCreate("gt_FirebatDropshipAction_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Firebat Move
//--------------------------------------------------------------------------------------------------
bool gt_FirebatMove_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto256F7B23_val;
    int auto0C0AB8E0_val;

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitCargo()) == "Firebat") || (UnitGetType(EventUnitCargo()) == "Medic")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnitCargo()) == "Firebat")) {
        Wait(0.2, c_timeGame);
        auto256F7B23_val = gv_firebatMove;
        if (auto256F7B23_val == 1) {
            UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1646)), c_orderQueueReplace);
        }
        else if (auto256F7B23_val == 2) {
            UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1647)), c_orderQueueReplace);
        }
        else if (auto256F7B23_val == 3) {
            UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1648)), c_orderQueueReplace);
        }
        else {
        }
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1653)), c_orderQueueAddToEnd);
        UnitIssueOrder(EventUnitCargo(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
        gv_firebatMove += 1;
        return true;
    }

    if ((UnitGetType(EventUnitCargo()) == "Medic")) {
        Wait(0.2, c_timeGame);
        auto0C0AB8E0_val = gv_medicMove;
        if (auto0C0AB8E0_val == 1) {
            UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1650)), c_orderQueueReplace);
        }
        else if (auto0C0AB8E0_val == 2) {
            UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2150)), c_orderQueueReplace);
        }
        else {
        }
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1653)), c_orderQueueAddToEnd);
        UnitIssueOrder(EventUnitCargo(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
        gv_medicMove += 1;
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirebatMove_Init () {
    gt_FirebatMove = TriggerCreate("gt_FirebatMove_Func");
    TriggerAddEventUnitCargo(gt_FirebatMove, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Dropships
//--------------------------------------------------------------------------------------------------
bool gt_RemoveDropships_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitRemove(UnitFromId(290));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveDropships_Init () {
    gt_RemoveDropships = TriggerCreate("gt_RemoveDropships_Func");
    TriggerAddEventUnitRegion(gt_RemoveDropships, UnitRefFromUnit(UnitFromId(290)), RegionFromId(31), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Marine Constant Respawn
//--------------------------------------------------------------------------------------------------
bool gt_MarineConstantRespawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_gameOver == false) && (gv_inCinematic == false)) {
        if ((UnitGroupCount(UnitGroup("Marine", gv_p4_COLONISTS, RegionCircle(PointFromId(2079), 12.0), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < gv_initialMarineCount)) {
            libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p4_COLONISTS, PointFromId(2079));
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarineConstantRespawn_Init () {
    gt_MarineConstantRespawn = TriggerCreate("gt_MarineConstantRespawn_Func");
    TriggerAddEventTimePeriodic(gt_MarineConstantRespawn, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg on the Loose
//--------------------------------------------------------------------------------------------------
bool gt_ZergontheLoose_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto98FD8F65_g;
    int auto98FD8F65_u;
    unit auto98FD8F65_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto98FD8F65_g = gv_zergOnTheLoose;
    auto98FD8F65_u = UnitGroupCount(auto98FD8F65_g, c_unitCountAll);
    for (;; auto98FD8F65_u -= 1) {
        auto98FD8F65_var = UnitGroupUnitFromEnd(auto98FD8F65_g, auto98FD8F65_u);
        if (auto98FD8F65_var == null) { break; }
        UnitIssueOrder(auto98FD8F65_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(auto98FD8F65_var), UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0)))), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergontheLoose_Init () {
    gt_ZergontheLoose = TriggerCreate("gt_ZergontheLoose_Func");
    TriggerAddEventTimePeriodic(gt_ZergontheLoose, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg on the Loose 2
//--------------------------------------------------------------------------------------------------
bool gt_ZergontheLoose2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto182727CD_g;
    int auto182727CD_u;
    unit auto182727CD_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto182727CD_g = gv_zergOnTheLoose2;
    auto182727CD_u = UnitGroupCount(auto182727CD_g, c_unitCountAll);
    for (;; auto182727CD_u -= 1) {
        auto182727CD_var = UnitGroupUnitFromEnd(auto182727CD_g, auto182727CD_u);
        if (auto182727CD_var == null) { break; }
        UnitIssueOrder(auto182727CD_var, OrderTargetingUnit(AbilityCommand("attack", 0), libNtve_gf_ClosestUnitToPoint(UnitGetPosition(auto182727CD_var), UnitGroup("Marine", gv_p4_COLONISTS, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0))), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergontheLoose2_Init () {
    gt_ZergontheLoose2 = TriggerCreate("gt_ZergontheLoose2_Func");
    TriggerAddEventTimePeriodic(gt_ZergontheLoose2, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg 1
//--------------------------------------------------------------------------------------------------
bool gt_Zerg1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_zerglingGroup;
    point lv_tempPoint;

    // Automatic Variable Declarations
    unitgroup auto5E2EB195_g;
    int auto5E2EB195_u;
    unit auto5E2EB195_var;

    // Variable Initialization
    lv_zerglingGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupAdd(lv_zerglingGroup, UnitFromId(2441));
    UnitGroupAdd(lv_zerglingGroup, UnitFromId(2440));
    UnitGroupAdd(lv_zerglingGroup, UnitFromId(2442));
    UnitIssueOrder(UnitGroupUnit(lv_zerglingGroup, 1), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(37))), c_orderQueueReplace);
    UnitIssueOrder(UnitGroupUnit(lv_zerglingGroup, 2), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(37))), c_orderQueueReplace);
    UnitIssueOrder(UnitGroupUnit(lv_zerglingGroup, 3), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(37))), c_orderQueueReplace);
    while (true) {
        Wait(1.0, c_timeGame);
        if ((UnitGroupCount(lv_zerglingGroup, c_unitCountAlive) == 0)) {
            return true;
        }

        if ((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionFromId(35), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            libNtve_gf_AddUnitGroupToUnitGroup(lv_zerglingGroup, gv_zergOnTheLoose);
            break;
        }

        auto5E2EB195_g = lv_zerglingGroup;
        auto5E2EB195_u = UnitGroupCount(auto5E2EB195_g, c_unitCountAll);
        for (;; auto5E2EB195_u -= 1) {
            auto5E2EB195_var = UnitGroupUnitFromEnd(auto5E2EB195_g, auto5E2EB195_u);
            if (auto5E2EB195_var == null) { break; }
            if ((RandomInt(1, 3) == 1)) {
                lv_tempPoint = PointWithOffsetPolar(UnitGetPosition(auto5E2EB195_var), RandomFixed(0.5, 1.5), RandomFixed(0.0, 360.0));
                if ((RegionContainsPoint(RegionFromId(37), lv_tempPoint) == true)) {
                    UnitIssueOrder(auto5E2EB195_var, OrderTargetingPoint(AbilityCommand("move", 0), lv_tempPoint), c_orderQueueReplace);
                }

            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Zerg1_Init () {
    gt_Zerg1 = TriggerCreate("gt_Zerg1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg 2
//--------------------------------------------------------------------------------------------------
bool gt_Zerg2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_unitgroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitgroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "CivilianFemale", 0, 0, PointFromId(86));
    gv_crazyRidley = UnitLastCreated();
    UnitSetTeamColorIndex(UnitLastCreated(), 10);
    UnitSetState(UnitLastCreated(), c_unitStateTargetable, true);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(161)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(8)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    UnitBehaviorAdd(UnitLastCreated(), "Hustle", UnitLastCreated(), 1);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 15.0);
    UnitIssueOrder(UnitFromId(2155), OrderTargetingUnit(AbilityCommand("attack", 0), UnitLastCreated()), c_orderQueueReplace);
    UnitGroupAdd(lv_unitgroup, UnitLastCreated());
    UnitIssueOrder(UnitFromId(2147), OrderTargetingUnit(AbilityCommand("attack", 0), UnitLastCreated()), c_orderQueueReplace);
    UnitGroupAdd(lv_unitgroup, UnitLastCreated());
    while (!(((libNtve_gf_UnitGroupIsDead(lv_unitgroup) == true) || (UnitIsAlive(UnitLastCreated()) == false)))) {
        Wait(0.5, c_timeGame);
    }
    UnitGroupAdd(gv_zergOnTheLoose, UnitFromId(2147));
    UnitGroupAdd(gv_zergOnTheLoose, UnitFromId(2155));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Zerg2_Init () {
    gt_Zerg2 = TriggerCreate("gt_Zerg2_Func");
    TriggerAddEventUnitRegion(gt_Zerg2, null, RegionFromId(32), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg 3
//--------------------------------------------------------------------------------------------------
bool gt_Zerg3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_zerglingGroup;
    int lv_timeTick;
    point lv_tempPoint;
    unit lv_tempUnit;

    // Automatic Variable Declarations
    const int auto8EFED1E5_n = 3;
    int auto8EFED1E5_i;
    const int autoEC24FC15_n = 3;
    int autoEC24FC15_i;
    unitgroup autoE80840C1_g;
    int autoE80840C1_u;
    unit autoE80840C1_var;
    unitgroup autoCE810A15_g;
    int autoCE810A15_u;
    unit autoCE810A15_var;

    // Variable Initialization
    lv_zerglingGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_zerglingGroup = UnitGroup(null, gv_p5_ZERG_TACTICALPHASE, RegionFromId(14), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    while (true) {
        Wait(0.5, c_timeGame);
        if ((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionFromId(36), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("Zergling", gv_p5_ZERG_TACTICALPHASE, RegionCircle(RegionGetCenter(RegionFromId(14)), 6.0), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_zergOnTheLoose);
            libNtve_gf_AddUnitGroupToUnitGroup(lv_zerglingGroup, gv_zergOnTheLoose);
            break;
        }

        if ((lv_timeTick == 0)) {
            for (auto8EFED1E5_i = 1; auto8EFED1E5_i <= auto8EFED1E5_n; auto8EFED1E5_i += 1) {
                lv_tempUnit = UnitGroupRandomUnit(lv_zerglingGroup, c_unitCountAlive);
                UnitGroupRemove(lv_zerglingGroup, lv_tempUnit);
                UnitGroupAdd(gv_zergOnTheLoose2, lv_tempUnit);
            }
            for (autoEC24FC15_i = 1; autoEC24FC15_i <= autoEC24FC15_n; autoEC24FC15_i += 1) {
                libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_p5_ZERG_TACTICALPHASE, PointFromId(2425));
                UnitGroupAdd(lv_zerglingGroup, UnitLastCreated());
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            }
        }

        autoE80840C1_g = UnitGroup("Zergling", gv_p5_ZERG_TACTICALPHASE, RegionCircle(PointFromId(2425), 2.0), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoE80840C1_u = UnitGroupCount(autoE80840C1_g, c_unitCountAll);
        for (;; autoE80840C1_u -= 1) {
            autoE80840C1_var = UnitGroupUnitFromEnd(autoE80840C1_g, autoE80840C1_u);
            if (autoE80840C1_var == null) { break; }
            UnitIssueOrder(autoE80840C1_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(14))), c_orderQueueReplace);
        }
        if ((lv_timeTick < 20)) {
            lv_timeTick += 1;
        }
        else {
            lv_timeTick = 0;
        }
        autoCE810A15_g = lv_zerglingGroup;
        autoCE810A15_u = UnitGroupCount(autoCE810A15_g, c_unitCountAll);
        for (;; autoCE810A15_u -= 1) {
            autoCE810A15_var = UnitGroupUnitFromEnd(autoCE810A15_g, autoCE810A15_u);
            if (autoCE810A15_var == null) { break; }
            if ((RandomInt(1, 5) == 1)) {
                lv_tempPoint = PointWithOffsetPolar(UnitGetPosition(autoCE810A15_var), RandomFixed(0.5, 1.5), RandomFixed(0.0, 360.0));
                if ((RegionContainsPoint(RegionFromId(14), lv_tempPoint) == true)) {
                    UnitIssueOrder(autoCE810A15_var, OrderTargetingPoint(AbilityCommand("move", 0), lv_tempPoint), c_orderQueueReplace);
                }

            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Zerg3_Init () {
    gt_Zerg3 = TriggerCreate("gt_Zerg3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Switch to Escort Phase
//--------------------------------------------------------------------------------------------------
bool gt_SwitchtoEscortPhase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_mcompound;
    bool lv_merccompoundisselected;

    // Automatic Variable Declarations
    unitgroup autoEAEE2387_g;
    int autoEAEE2387_u;
    unit autoEAEE2387_var;
    unitgroup auto338F5CC8_g;
    int auto338F5CC8_u;
    unit auto338F5CC8_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ShareVisionofUnit(UnitFromId(2440), false, gv_p1_USER);
    libNtve_gf_ShareVisionofUnit(UnitFromId(2442), false, gv_p1_USER);
    libNtve_gf_ShareVisionofUnit(UnitFromId(2441), false, gv_p1_USER);
    UnitKill(UnitFromId(2508));
    TriggerEnable(gt_ZergontheLoose, false);
    TriggerEnable(gt_ZergontheLoose2, false);
    TriggerExecute(gt_MainObjectiveReachHansonComplete, true, false);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_SwitchtoEscortPhaseQ, true, false);
    Wait(2.0, c_timeReal);
    if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
        TriggerExecute(gt_CameraPantoTownCasualNormal, true, false);
    }

    libNtve_gf_PauseUnit(UnitFromId(96), false);
    libNtve_gf_PauseUnit(UnitFromId(3245), false);
    autoEAEE2387_g = UnitGroup(null, gv_p4_COLONISTS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoEAEE2387_u = UnitGroupCount(autoEAEE2387_g, c_unitCountAll);
    for (;; autoEAEE2387_u -= 1) {
        autoEAEE2387_var = UnitGroupUnitFromEnd(autoEAEE2387_g, autoEAEE2387_u);
        if (autoEAEE2387_var == null) { break; }
        if (((UnitGetType(autoEAEE2387_var) == "SCV") || (UnitGetType(autoEAEE2387_var) == "CommandCenter") || (UnitGetType(autoEAEE2387_var) == "Refinery") || (UnitGetType(autoEAEE2387_var) == "SupplyDepot") || (UnitGetType(autoEAEE2387_var) == "SupplyDepotLowered") || (UnitGetType(autoEAEE2387_var) == "Barracks") || (UnitGetType(autoEAEE2387_var) == "BarracksTechLab") || (UnitGetType(autoEAEE2387_var) == "MercCompound"))) {
            libNtve_gf_RescueUnit(autoEAEE2387_var, gv_p1_USER, true);
        }

    }
    UnitSetPropertyFixed(UnitFromId(236), c_unitPropEnergy, 50.0);
    UnitIssueOrder(UnitFromId(236), OrderTargetingUnit(null, UnitFromId(236)), c_orderQueueReplace);
    auto338F5CC8_g = UnitGroup("SCV", gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto338F5CC8_u = UnitGroupCount(auto338F5CC8_g, c_unitCountAll);
    for (;; auto338F5CC8_u -= 1) {
        auto338F5CC8_var = UnitGroupUnitFromEnd(auto338F5CC8_g, auto338F5CC8_u);
        if (auto338F5CC8_var == null) { break; }
        if ((UnitHasBehavior(auto338F5CC8_var, "CarryMineralFieldMinerals") == true)) {
            UnitIssueOrder(auto338F5CC8_var, Order(AbilityCommand("SCVHarvest", 1)), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(auto338F5CC8_var, OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), libNtve_gf_ClosestUnitToPoint(UnitGetPosition(auto338F5CC8_var), UnitGroup("MineralField", 0, RegionCircle(UnitGetPosition(auto338F5CC8_var), 12.0), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0))), c_orderQueueReplace);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwitchtoEscortPhase_Init () {
    gt_SwitchtoEscortPhase = TriggerCreate("gt_SwitchtoEscortPhase_Func");
    TriggerAddEventUnitRegion(gt_SwitchtoEscortPhase, null, RegionFromId(29), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Switch to Escort Phase Q
//--------------------------------------------------------------------------------------------------
bool gt_SwitchtoEscortPhaseQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", PointFromId(1649), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 8.0, 270.0);
    UIAlertClear(gv_p1_USER);
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/627AAE91"), null, PointFromId(1649));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson01Hanson00001", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Hanson00001", -1), c_transmissionDurationAdd, 1.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    gv_missionPhase = ge_PRESET_MissionPhase_Escort;
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwitchtoEscortPhaseQ_Init () {
    gt_SwitchtoEscortPhaseQ = TriggerCreate("gt_SwitchtoEscortPhaseQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Pickups
//--------------------------------------------------------------------------------------------------
bool gt_ResourcePickups_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto5EE57277_val;

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto5EE57277_val = UnitGetType(EventUnit());
    if (auto5EE57277_val == "PalletMinerals") {
        libCamp_gf_DestroyCacheAndGivePlayerResources(EventUnit(), c_playerPropMinerals, 100, UnitGetOwner(EventUnitTargetUnit()));
    }
    else if (auto5EE57277_val == "PalletGas") {
        libCamp_gf_DestroyCacheAndGivePlayerResources(EventUnit(), c_playerPropVespene, 100, UnitGetOwner(EventUnitTargetUnit()));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourcePickups_Init () {
    gt_ResourcePickups = TriggerCreate("gt_ResourcePickups_Func");
    TriggerAddEventUnitAbility(gt_ResourcePickups, null, AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Camera Pan to Town (Casual/Normal)
//--------------------------------------------------------------------------------------------------
bool gt_CameraPantoTownCasualNormal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_playerHasSeenTown;

    // Automatic Variable Declarations
    const int auto02F1A498_n = 20;
    int auto02F1A498_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto02F1A498_i = 1; auto02F1A498_i <= auto02F1A498_n; auto02F1A498_i += 1) {
        if ((RegionContainsPoint(RegionFromId(25), CameraGetTarget(gv_p1_USER)) == true)) {
            lv_playerHasSeenTown = true;
        }

        Wait(1.0, c_timeGame);
    }
    if ((lv_playerHasSeenTown == false) && (gv_gameOver == false) && (gv_inCinematic == false)) {
        CameraLockInput(gv_p1_USER, true);
        CameraApplyInfo(1, CameraInfoFromId(2506), 2.0, -1, 10, true);
        Wait(2.2, c_timeGame);
        CameraLockInput(gv_p1_USER, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CameraPantoTownCasualNormal_Init () {
    gt_CameraPantoTownCasualNormal = TriggerCreate("gt_CameraPantoTownCasualNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Hanson Escort Phase
//--------------------------------------------------------------------------------------------------
bool gt_StartHansonEscortPhase_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2D5D7001_g;
    int auto2D5D7001_u;
    unit auto2D5D7001_var;

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerPauseAllCooldowns(gv_p1_USER, false);
    PlayerPauseAllCharges(gv_p1_USER, false);
    while (!((gv_missionPhase == ge_PRESET_MissionPhase_Escort) && (gv_gameOver == false))) {
        Wait(0.1, c_timeGame);
    }
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/E23525AD"));
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_MainObjectiveSaveColonistsDiscoverQ, true, false);
    Wait(2.0, c_timeGame);
    Wait(15.0, c_timeGame);
    TriggerExecute(gt_CreateStorymodeTipsQ, true, false);
    Wait(15.0, c_timeGame);
    VisExploreArea(gv_p1_USER, RegionFromId(42), true, false);
    VisRevealArea(gv_p1_USER, RegionFromId(22), 0.0, false);
    auto2D5D7001_g = UnitGroup(null, 0, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2D5D7001_u = UnitGroupCount(auto2D5D7001_g, c_unitCountAll);
    for (;; auto2D5D7001_u -= 1) {
        auto2D5D7001_var = UnitGroupUnitFromEnd(auto2D5D7001_g, auto2D5D7001_u);
        if (auto2D5D7001_var == null) { break; }
        if (((UnitGetType(auto2D5D7001_var) == "AutoTurret") || (UnitGetType(auto2D5D7001_var) == "ColonistShip"))) {
            UnitSetOwner(auto2D5D7001_var, gv_p4_COLONISTS, true);
        }

    }
    TriggerExecute(gt_StarportIntroQ, true, false);
    Wait(10.0, c_timeGame);
    TriggerExecute(gt_Preparenextconvoy, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartHansonEscortPhase_Init () {
    gt_StartHansonEscortPhase = TriggerCreate("gt_StartHansonEscortPhase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Storymode Tips Q
//--------------------------------------------------------------------------------------------------
bool gt_CreateStorymodeTipsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_CreateStorymodeTips();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateStorymodeTipsQ_Init () {
    gt_CreateStorymodeTipsQ = TriggerCreate("gt_CreateStorymodeTipsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Starport Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_StarportIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(2)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/5F1585BF"));
    // Transmission - SoundLink("THanson01Raynor00006", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Raynor00006", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StarportIntroQ_Init () {
    gt_StarportIntroQ = TriggerCreate("gt_StarportIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CampaignInitAI();
    AIAttackWaveSetTargetUnitGroup(gv_p2_ZERG_ORANGE_NW, gv_colonistsOnTheMove);
    AIAttackWaveSetTargetUnitGroup(gv_p3_ZERG_LIGHTBLUE_SE, gv_colonistsOnTheMove);
    AIAttackWaveSetGatherPoint(gv_p2_ZERG_ORANGE_NW, PointFromId(2714));
    AIAttackWaveSetGatherPoint(gv_p3_ZERG_LIGHTBLUE_SE, PointFromId(2715));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TIP - Zerg Creep
//--------------------------------------------------------------------------------------------------
bool gt_TIPZergCreep_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libCamp_gf_StoryState(libCamp_ge_StoryStateID_StoryStateTipZergCreepPlayed) == 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetStoryState(libCamp_ge_StoryStateID_StoryStateTipZergCreepPlayed, 1);
    libCamp_gf_CreateTipFromConversationState("StoryTips|Campaign_Creep", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TIPZergCreep_Init () {
    gt_TIPZergCreep = TriggerCreate("gt_TIPZergCreep_Func");
    TriggerAddEventUnitRegion(gt_TIPZergCreep, null, RegionFromId(51), true);
    TriggerAddEventUnitRegion(gt_TIPZergCreep, null, RegionFromId(41), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prepare next convoy
//--------------------------------------------------------------------------------------------------
bool gt_Preparenextconvoy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_enoughColonistsSavedThisWave == true)) {
        gv_enoughColonistsSavedThisWave = false;
        if ((gv_escortIndex < 6)) {
            gv_escortIndex = (gv_escortIndex + 1);
        }

    }

    TriggerExecute(gt_Gathercolonistspriortoevacuation, true, false);
    TriggerExecute(gt_ColonistsHeadsupMessageQ, true, false);
    Wait(0.1, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Preparenextconvoy_Init () {
    gt_Preparenextconvoy = TriggerCreate("gt_Preparenextconvoy_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gather colonists prior to evacuation
//--------------------------------------------------------------------------------------------------
bool gt_Gathercolonistspriortoevacuation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto37AAE177_n;
    int auto37AAE177_i;

    // Actions
    if (!runActions) {
        return true;
    }

    auto37AAE177_n = gv_unloadAmount[gv_escortIndex];
    for (auto37AAE177_i = 1; auto37AAE177_i <= auto37AAE177_n; auto37AAE177_i += 1) {
        gf_GenerateColonist();
        Wait(2.25, c_timeGame);
    }
    Wait(18.0, c_timeGame);
    TriggerExecute(gt_ConvoySpawned, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Gathercolonistspriortoevacuation_Init () {
    gt_Gathercolonistspriortoevacuation = TriggerCreate("gt_Gathercolonistspriortoevacuation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colonists Headsup Message Q
//--------------------------------------------------------------------------------------------------
bool gt_ColonistsHeadsupMessageQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", PointFromId(3242), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 5.0, 270.0);
    UIAlertPoint("Trigger", gv_p1_USER, StringToText(""), null, PointFromId(3242));
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    if ((gv_escortIndex == 1)) {
        TriggerExecute(gt_ColonistsHeadsupMessageEarlyQ, true, true);
    }

    if ((gv_escortIndex >= 2) && (gv_escortIndex <= 4)) {
        TriggerExecute(gt_ColonistsHeadsupMessageMidQ, true, true);
    }

    if ((gv_escortIndex >= 5)) {
        TriggerExecute(gt_ColonistsHeadsupMessageLateQ, true, true);
    }

    Wait(1.0, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColonistsHeadsupMessageQ_Init () {
    gt_ColonistsHeadsupMessageQ = TriggerCreate("gt_ColonistsHeadsupMessageQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colonists Headsup Message Early Q
//--------------------------------------------------------------------------------------------------
bool gt_ColonistsHeadsupMessageEarlyQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto81F08AA6_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerGetExecCount(TriggerGetCurrent()) == 0)) {
        // Transmission - SoundLink("THanson01Hanson00071", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Hanson00071", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else {
        auto81F08AA6_val = gv_hTransmissionCycleEarly;
        if (auto81F08AA6_val == 1) {
            // Transmission - SoundLink("THanson01Hanson00035", 0)
            libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Hanson00035", -1), c_transmissionDurationAdd, 0.0, true);
        }
        else if (auto81F08AA6_val == 2) {
            // Transmission - SoundLink("THanson01Hanson00029", 0)
            libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Hanson00029", -1), c_transmissionDurationAdd, 0.0, true);
        }
        else {
        }
        if (gv_hTransmissionCycleEarly >= 2) {
            gv_hTransmissionCycleEarly = 1;
        }
        else {
            gv_hTransmissionCycleEarly = gv_hTransmissionCycleEarly + 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColonistsHeadsupMessageEarlyQ_Init () {
    gt_ColonistsHeadsupMessageEarlyQ = TriggerCreate("gt_ColonistsHeadsupMessageEarlyQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colonists Headsup Message Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_ColonistsHeadsupMessageMidQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto39F001BB_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto39F001BB_val = gv_hTransmissionCycleMid;
    if (auto39F001BB_val == 1) {
        // Transmission - SoundLink("THanson01Hanson00082", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Hanson00082", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else if (auto39F001BB_val == 2) {
        // Transmission - SoundLink("THanson01Hanson00004", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Hanson00004", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else if (auto39F001BB_val == 3) {
        // Transmission - SoundLink("THanson01Hanson00029", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Hanson00029", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else {
    }
    if (gv_hTransmissionCycleMid >= 3) {
        gv_hTransmissionCycleMid = 1;
    }
    else {
        gv_hTransmissionCycleMid = gv_hTransmissionCycleMid + 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColonistsHeadsupMessageMidQ_Init () {
    gt_ColonistsHeadsupMessageMidQ = TriggerCreate("gt_ColonistsHeadsupMessageMidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colonists Headsup Message Late Q
//--------------------------------------------------------------------------------------------------
bool gt_ColonistsHeadsupMessageLateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto7E51F54B_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto7E51F54B_val = gv_hTransmissionCycleLate;
    if (auto7E51F54B_val == 1) {
        // Transmission - SoundLink("THanson01Hanson00034", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Hanson00034", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else if (auto7E51F54B_val == 2) {
        // Transmission - SoundLink("THanson01Hanson00036", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Hanson00036", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else if (auto7E51F54B_val == 3) {
        // Transmission - SoundLink("THanson01Hanson00035", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Hanson00035", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else {
    }
    if (gv_hTransmissionCycleLate >= 3) {
        gv_hTransmissionCycleLate = 1;
    }
    else {
        gv_hTransmissionCycleLate = gv_hTransmissionCycleLate + 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColonistsHeadsupMessageLateQ_Init () {
    gt_ColonistsHeadsupMessageLateQ = TriggerCreate("gt_ColonistsHeadsupMessageLateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Convoy Spawned
//--------------------------------------------------------------------------------------------------
bool gt_ConvoySpawned_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto7A0CF44A_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(gv_tHEONETRUCK, "AnimBracketStop Work");
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_SendColonists, true, false);
    auto7A0CF44A_val = gv_escortIndex;
    if (auto7A0CF44A_val == 1) {
        TriggerExecute(gt_ConvoyAttack1Freebie, true, false);
    }
    else if (auto7A0CF44A_val == 2) {
        TriggerExecute(gt_ConvoyAttack2StressBunkersnotallfull, true, false);
    }
    else if (auto7A0CF44A_val == 3) {
        TriggerExecute(gt_ConvoyAttack3Burnsinglebunkers, true, false);
    }
    else if (auto7A0CF44A_val == 4) {
        TriggerExecute(gt_ConvoyAttack4Droppods, true, false);
    }
    else if (auto7A0CF44A_val == 5) {
        TriggerExecute(gt_ConvoyAttack5Nydusworms, true, false);
    }
    else if (auto7A0CF44A_val == 6) {
        if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
            if ((gv_finalZergWaveVariation == false)) {
                TriggerExecute(gt_ConvoyAttack6AHH, true, false);
                gv_finalZergWaveVariation = true;
            }
            else {
                TriggerExecute(gt_ConvoyAttack7VariationAHH, true, false);
                gv_finalZergWaveVariation = false;
            }
        }
        else {
            TriggerExecute(gt_ConvoyAttack6AHH, true, false);
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoySpawned_Init () {
    gt_ConvoySpawned = TriggerCreate("gt_ConvoySpawned_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Colonists
//--------------------------------------------------------------------------------------------------
bool gt_SendColonists_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2248E752_g;
    int auto2248E752_u;
    unit auto2248E752_var;
    unitgroup autoF40515E8_g;
    int autoF40515E8_u;
    unit autoF40515E8_var;
    unitgroup auto8267D447_g;
    int auto8267D447_u;
    unit auto8267D447_var;
    unitgroup autoE2AC6924_g;
    int autoE2AC6924_u;
    unit autoE2AC6924_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/11DE9B3E"), null, PointFromId(3242));
    auto2248E752_g = UnitGroup("Civilian", gv_p4_COLONISTS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2248E752_u = UnitGroupCount(auto2248E752_g, c_unitCountAll);
    for (;; auto2248E752_u -= 1) {
        auto2248E752_var = UnitGroupUnitFromEnd(auto2248E752_g, auto2248E752_u);
        if (auto2248E752_var == null) { break; }
        UnitSetCustomValue(auto2248E752_var, 0, 21.0);
        UnitGroupAdd(gv_colonistsOnTheMove, auto2248E752_var);
    }
    autoF40515E8_g = UnitGroup("CivilianFemale", gv_p4_COLONISTS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF40515E8_u = UnitGroupCount(autoF40515E8_g, c_unitCountAll);
    for (;; autoF40515E8_u -= 1) {
        autoF40515E8_var = UnitGroupUnitFromEnd(autoF40515E8_g, autoF40515E8_u);
        if (autoF40515E8_var == null) { break; }
        UnitSetCustomValue(autoF40515E8_var, 0, 21.0);
        UnitGroupAdd(gv_colonistsOnTheMove, autoF40515E8_var);
    }
    auto8267D447_g = UnitGroup("ColonistTransport", gv_p4_COLONISTS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8267D447_u = UnitGroupCount(auto8267D447_g, c_unitCountAll);
    for (;; auto8267D447_u -= 1) {
        auto8267D447_var = UnitGroupUnitFromEnd(auto8267D447_g, auto8267D447_u);
        if (auto8267D447_var == null) { break; }
        UnitSetCustomValue(auto8267D447_var, 0, 21.0);
        UnitGroupAdd(gv_colonistsOnTheMove, auto8267D447_var);
    }
    autoE2AC6924_g = UnitCargoGroup(gv_tHEONETRUCK);
    autoE2AC6924_u = UnitGroupCount(autoE2AC6924_g, c_unitCountAll);
    for (;; autoE2AC6924_u -= 1) {
        autoE2AC6924_var = UnitGroupUnitFromEnd(autoE2AC6924_g, autoE2AC6924_u);
        if (autoE2AC6924_var == null) { break; }
        UnitSetCustomValue(autoE2AC6924_var, 0, 21.0);
        UnitGroupAdd(gv_colonistsOnTheMove, autoE2AC6924_var);
    }
    if ((UnitGroupCount(gv_colonistsOnTheMove, c_unitCountAlive) > 0)) {
        AIAttackWaveSetTargetEscort(gv_p4_COLONISTS, gv_colonistsOnTheMove, 0);
        AIAttackWaveAddEscortType(gv_p4_COLONISTS, "Marine", UnitGroupRandomUnit(gv_colonistsOnTheMove, c_unitCountAlive), 2.5, 45.0);
        AIAttackWaveAddEscortType(gv_p4_COLONISTS, "Marine", UnitGroupRandomUnit(gv_colonistsOnTheMove, c_unitCountAlive), 2.5, 315.0);
        if ((gv_escortIndex > 2)) {
            AIAttackWaveAddEscortType(gv_p4_COLONISTS, "Marine", UnitGroupRandomUnit(gv_colonistsOnTheMove, c_unitCountAlive), 2.5, 135.0);
        }

        if ((gv_escortIndex > 4)) {
            AIAttackWaveAddEscortType(gv_p4_COLONISTS, "Marine", UnitGroupRandomUnit(gv_colonistsOnTheMove, c_unitCountAlive), 2.5, 225.0);
        }

        AIAttackWaveSend(gv_p4_COLONISTS, 0, false);
    }

    Wait(5.0, c_timeGame);
    if ((UnitGroupCount(gv_colonistsOnTheMove, c_unitCountAlive) > 0)) {
        if ((gv_escortIndex <= 3)) {
            TriggerExecute(gt_ColonistsGOGOMessageEarlyQ, true, false);
        }

        if ((gv_escortIndex >= 4)) {
            TriggerExecute(gt_ColonistsGOGOMessageLateQ, true, false);
        }

    }

    Wait(3.0, c_timeGame);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THanson01MusicAlt", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerEnable(gt_PingConvoy, true);
    TriggerExecute(gt_PingConvoy, true, false);
    gv_vehicleCount = 0;
    gv_noTruckColonistRallyIndex = 1;
    TriggerEnable(gt_ConvoyMovement, true);
    TriggerEnable(gt_WaveOverLogic, true);
    gv_convoyTrucksSent += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendColonists_Init () {
    gt_SendColonists = TriggerCreate("gt_SendColonists_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colonists GOGO Message Early Q
//--------------------------------------------------------------------------------------------------
bool gt_ColonistsGOGOMessageEarlyQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto7A753977_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    auto7A753977_val = gv_cTransmissionCycleEarly;
    if (auto7A753977_val == 1) {
        // Transmission - SoundLink("THanson01Civilian400018", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Civilian400018", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else if (auto7A753977_val == 2) {
        // Transmission - SoundLink("THanson01Civilian200028", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Civilian200028", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else if (auto7A753977_val == 3) {
        // Transmission - SoundLink("THanson01Civilian800027", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Civilian800027", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else {
    }
    if (gv_cTransmissionCycleEarly >= 3) {
        gv_cTransmissionCycleEarly = 1;
    }
    else {
        gv_cTransmissionCycleEarly = gv_cTransmissionCycleEarly + 1;
    }
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColonistsGOGOMessageEarlyQ_Init () {
    gt_ColonistsGOGOMessageEarlyQ = TriggerCreate("gt_ColonistsGOGOMessageEarlyQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colonists GOGO Message Late Q
//--------------------------------------------------------------------------------------------------
bool gt_ColonistsGOGOMessageLateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoA0D8BDC2_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    autoA0D8BDC2_val = gv_cTransmissionCycleLate;
    if (autoA0D8BDC2_val == 1) {
        // Transmission - SoundLink("THanson01Civilian700005", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Civilian700005", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else if (autoA0D8BDC2_val == 2) {
        // Transmission - SoundLink("THanson01Civilian300007", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Civilian300007", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else if (autoA0D8BDC2_val == 3) {
        // Transmission - SoundLink("THanson01Civilian600016", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Civilian600016", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else if (autoA0D8BDC2_val == 4) {
        // Transmission - SoundLink("THanson01Civilian500026", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Civilian500026", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else {
    }
    if (gv_cTransmissionCycleLate >= 4) {
        gv_cTransmissionCycleLate = 1;
    }
    else {
        gv_cTransmissionCycleLate = gv_cTransmissionCycleLate + 1;
    }
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColonistsGOGOMessageLateQ_Init () {
    gt_ColonistsGOGOMessageLateQ = TriggerCreate("gt_ColonistsGOGOMessageLateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping Convoy
//--------------------------------------------------------------------------------------------------
bool gt_PingConvoy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_pingConvoy) == false)) {
        gv_pingConvoy = UnitGroupRandomUnit(gv_colonistsOnTheMove, c_unitCountAlive);
    }

    PingCreate(PlayerGroupSingle(gv_p1_USER), "PingSimple", UnitGetPosition(gv_pingConvoy), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 3.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/214DE41B"));
    Wait(5.0, c_timeGame);
    if ((UnitGroupCount(gv_colonistsOnTheMove, c_unitCountAlive) == 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
        TriggerExecute(TriggerGetCurrent(), true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PingConvoy_Init () {
    gt_PingConvoy = TriggerCreate("gt_PingConvoy_Func");
    TriggerEnable(gt_PingConvoy, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Convoy Movement
//--------------------------------------------------------------------------------------------------
bool gt_ConvoyMovement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pickedUnit;
    int lv_customIntValueOfUnit;

    // Automatic Variable Declarations
    unitgroup autoCAF7C36D_g;
    int autoCAF7C36D_u;
    unitgroup auto3EDA1359_g;
    int auto3EDA1359_u;
    unit auto3EDA1359_var;
    unit autoCB2B5706_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoCAF7C36D_g = gv_colonistsOnTheMove;
    autoCAF7C36D_u = UnitGroupCount(autoCAF7C36D_g, c_unitCountAll);
    for (;; autoCAF7C36D_u -= 1) {
        lv_pickedUnit = UnitGroupUnitFromEnd(autoCAF7C36D_g, autoCAF7C36D_u);
        if (lv_pickedUnit == null) { break; }
        lv_customIntValueOfUnit = FixedToInt(UnitGetCustomValue(lv_pickedUnit, 0));
        if ((lv_customIntValueOfUnit > 0) && (lv_customIntValueOfUnit < 100)) {
            if ((DistanceBetweenPoints(UnitGetPosition(lv_pickedUnit), gv_escortRouteRallyPoints[lv_customIntValueOfUnit]) <= 1.5)) {
                UnitIssueOrder(lv_pickedUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_escortRouteRallyPoints[(lv_customIntValueOfUnit - 1)]), c_orderQueueReplace);
                UnitSetCustomValue(lv_pickedUnit, 0, IntToFixed((lv_customIntValueOfUnit - 1)));
                if ((lv_pickedUnit == gv_tHEONETRUCK)) {
                    auto3EDA1359_g = UnitCargoGroup(gv_tHEONETRUCK);
                    auto3EDA1359_u = UnitGroupCount(auto3EDA1359_g, c_unitCountAll);
                    for (;; auto3EDA1359_u -= 1) {
                        auto3EDA1359_var = UnitGroupUnitFromEnd(auto3EDA1359_g, auto3EDA1359_u);
                        if (auto3EDA1359_var == null) { break; }
                        UnitSetCustomValue(lv_pickedUnit, 0, IntToFixed((lv_customIntValueOfUnit - 1)));
                    }
                }

            }
            else {
                UnitIssueOrder(lv_pickedUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_escortRouteRallyPoints[lv_customIntValueOfUnit]), c_orderQueueReplace);
            }
        }

        if ((lv_customIntValueOfUnit == 0)) {
            autoCB2B5706_val = gv_activeCivilianShip;
            if (autoCB2B5706_val == UnitFromId(1483)) {
                UnitIssueOrder(lv_pickedUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2865)), c_orderQueueReplace);
            }
            else if (autoCB2B5706_val == UnitFromId(1403)) {
                UnitIssueOrder(lv_pickedUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2864)), c_orderQueueReplace);
            }
            else if (autoCB2B5706_val == UnitFromId(698)) {
                UnitIssueOrder(lv_pickedUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2863)), c_orderQueueReplace);
            }
            else if (autoCB2B5706_val == UnitFromId(693)) {
                UnitIssueOrder(lv_pickedUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2077)), c_orderQueueReplace);
            }
            else {
            }
            UnitIssueOrder(lv_pickedUnit, OrderTargetingUnit(null, gv_activeCivilianShip), c_orderQueueAddToEnd);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoyMovement_Init () {
    gt_ConvoyMovement = TriggerCreate("gt_ConvoyMovement_Func");
    TriggerEnable(gt_ConvoyMovement, false);
    TriggerAddEventTimePeriodic(gt_ConvoyMovement, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add Convoy Marine into Unit Group
//--------------------------------------------------------------------------------------------------
bool gt_AddConvoyMarineintoUnitGroup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_convoyGuards, EventUnit()) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p4_COLONISTS))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Marine"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_convoyGuards, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddConvoyMarineintoUnitGroup_Init () {
    gt_AddConvoyMarineintoUnitGroup = TriggerCreate("gt_AddConvoyMarineintoUnitGroup_Func");
    TriggerAddEventUnitRegion(gt_AddConvoyMarineintoUnitGroup, null, RegionFromId(15), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Convoy Guards are Under Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_ConvoyGuardsareUnderAttackQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto34BCDBA6_val;

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_convoyGuards, EventUnit()) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if (((gf_PlayerIsInCombat(gv_p4_COLONISTS) == false) || (UnitGroupCount(gv_convoyGuards, c_unitCountAlive) == 0) || (UnitGroupCount(gv_colonistsOnTheMove, c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    UIAlertPoint("Trigger", gv_p1_USER, StringToText(""), null, UnitGetPosition(UnitGroupRandomUnit(gv_convoyGuards, c_unitCountAlive)));
    auto34BCDBA6_val = gv_convoyGuardCyclingLineIndex;
    if (auto34BCDBA6_val == 1) {
        // Transmission - SoundLink("THanson01Marine100040", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Marine100040", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else if (auto34BCDBA6_val == 2) {
        // Transmission - SoundLink("THanson01Marine200041", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Marine200041", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else if (auto34BCDBA6_val == 3) {
        // Transmission - SoundLink("THanson01Marine300042", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Marine300042", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else if (auto34BCDBA6_val == 4) {
        // Transmission - SoundLink("THanson01Marine400043", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Marine400043", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else {
    }
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    gv_convoyGuardCyclingLineIndex += 1;
    if ((gv_convoyGuardCyclingLineIndex == 5)) {
        gv_convoyGuardCyclingLineIndex = 1;
    }

    Wait(15.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoyGuardsareUnderAttackQ_Init () {
    gt_ConvoyGuardsareUnderAttackQ = TriggerCreate("gt_ConvoyGuardsareUnderAttackQ_Func");
    TriggerAddEventUnitDamaged(gt_ConvoyGuardsareUnderAttackQ, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Is In Combat
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIsInCombat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == gv_p4_COLONISTS) || (UnitGetOwner(EventUnitTarget()) == gv_p4_COLONISTS)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCombatIndicator = 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIsInCombat_Init () {
    gt_PlayerIsInCombat = TriggerCreate("gt_PlayerIsInCombat_Func");
    TriggerAddEventUnitStartedAttack(gt_PlayerIsInCombat, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Is In Combat Indicator Diminish
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIsInCombatIndicatorDiminish_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_inCombatIndicator > 0)) {
        gv_inCombatIndicator = (gv_inCombatIndicator - 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIsInCombatIndicatorDiminish_Init () {
    gt_PlayerIsInCombatIndicatorDiminish = TriggerCreate("gt_PlayerIsInCombatIndicatorDiminish_Func");
    TriggerAddEventTimePeriodic(gt_PlayerIsInCombatIndicatorDiminish, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bunker Get 1
//--------------------------------------------------------------------------------------------------
bool gt_BunkerGet1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_BunkerGet(UnitFromId(1185));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BunkerGet1_Init () {
    gt_BunkerGet1 = TriggerCreate("gt_BunkerGet1_Func");
    TriggerAddEventUnitRegion(gt_BunkerGet1, null, RegionFromId(27), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bunker Get 2
//--------------------------------------------------------------------------------------------------
bool gt_BunkerGet2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_BunkerGet(UnitFromId(1155));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BunkerGet2_Init () {
    gt_BunkerGet2 = TriggerCreate("gt_BunkerGet2_Func");
    TriggerAddEventUnitRegion(gt_BunkerGet2, null, RegionFromId(28), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bunker Line Q
//--------------------------------------------------------------------------------------------------
bool gt_BunkerLineQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson01Raynor00008", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Raynor00008", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("THanson01Hanson00009", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Hanson00009", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("THanson01Raynor00010", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Raynor00010", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BunkerLineQ_Init () {
    gt_BunkerLineQ = TriggerCreate("gt_BunkerLineQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chrysalis Tip Trigger A
//--------------------------------------------------------------------------------------------------
bool gt_ChrysalisTipTriggerA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_chrysalisPingUnit = UnitFromId(2010);
    TriggerExecute(gt_ChrysalisPing, true, false);
    SoundPlay(SoundLink("UI_TerranPing", 0), PlayerGroupAll(), 100.0, 0.0);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(2010)), 5.0, Color(0.00, 100.00, 0.00));
    UnitFlashSelection(UnitFromId(2010), 5.0);
    VisRevealArea(gv_p1_USER, RegionCircle(UnitGetPosition(UnitFromId(2010)), 8.0), 10.0, false);
    UIAlertUnit("Trigger", gv_p1_USER, StringExternal("Param/Value/06699F6C"), null, UnitFromId(2010));
    TriggerExecute(gt_ChrysalisTipQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChrysalisTipTriggerA_Init () {
    gt_ChrysalisTipTriggerA = TriggerCreate("gt_ChrysalisTipTriggerA_Func");
    TriggerAddEventUnitRegion(gt_ChrysalisTipTriggerA, null, RegionFromId(23), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chrysalis Tip Trigger B
//--------------------------------------------------------------------------------------------------
bool gt_ChrysalisTipTriggerB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_chrysalisPingUnit = UnitFromId(397);
    TriggerExecute(gt_ChrysalisPing, true, false);
    SoundPlay(SoundLink("UI_TerranPing", 0), PlayerGroupAll(), 100.0, 0.0);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(397)), 5.0, Color(0.00, 100.00, 0.00));
    UnitFlashSelection(UnitFromId(397), 5.0);
    VisRevealArea(gv_p1_USER, RegionCircle(UnitGetPosition(UnitFromId(397)), 8.0), 10.0, false);
    UIAlertUnit("Trigger", gv_p1_USER, StringExternal("Param/Value/15E4C0E1"), null, UnitFromId(397));
    TriggerExecute(gt_ChrysalisTipQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChrysalisTipTriggerB_Init () {
    gt_ChrysalisTipTriggerB = TriggerCreate("gt_ChrysalisTipTriggerB_Func");
    TriggerAddEventUnitRegion(gt_ChrysalisTipTriggerB, null, RegionFromId(24), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chrysalis Tip Trigger C
//--------------------------------------------------------------------------------------------------
bool gt_ChrysalisTipTriggerC_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_chrysalisPingUnit = UnitFromId(612);
    TriggerExecute(gt_ChrysalisPing, true, false);
    SoundPlay(SoundLink("UI_TerranPing", 0), PlayerGroupAll(), 100.0, 0.0);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(612)), 5.0, Color(0.00, 100.00, 0.00));
    UnitFlashSelection(UnitFromId(612), 5.0);
    VisRevealArea(gv_p1_USER, RegionCircle(UnitGetPosition(UnitFromId(612)), 8.0), 10.0, false);
    UIAlertUnit("Trigger", gv_p1_USER, StringExternal("Param/Value/3FCD1C91"), null, UnitFromId(612));
    TriggerExecute(gt_ChrysalisTipQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChrysalisTipTriggerC_Init () {
    gt_ChrysalisTipTriggerC = TriggerCreate("gt_ChrysalisTipTriggerC_Func");
    TriggerAddEventUnitRegion(gt_ChrysalisTipTriggerC, null, RegionFromId(33), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chrysalis Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_ChrysalisTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ResearchObjectiveChrysalisCreateQ, true, false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Hanson01_Chrysalis", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChrysalisTipQ_Init () {
    gt_ChrysalisTipQ = TriggerCreate("gt_ChrysalisTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chrysalis Ping
//--------------------------------------------------------------------------------------------------
bool gt_ChrysalisPing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    const int auto9777FDD0_n = 7;
    int auto9777FDD0_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = gv_chrysalisPingUnit;
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", UnitGetPosition(gv_chrysalisPingUnit));
    for (auto9777FDD0_i = 1; auto9777FDD0_i <= auto9777FDD0_n; auto9777FDD0_i += 1) {
        Wait(1.0, c_timeGame);
        if ((UnitIsAlive(gv_chrysalisPingUnit) == false)) {
            break;
        }

    }
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChrysalisPing_Init () {
    gt_ChrysalisPing = TriggerCreate("gt_ChrysalisPing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Convoy Attack 1 (Freebie)
//--------------------------------------------------------------------------------------------------
bool gt_ConvoyAttack1Freebie_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_WaitForColonistToEnterRegion(RegionFromId(12));
    gf_WaitForColonistToEnterRegion(RegionFromId(1));
    gf_WaitForColonistToEnterRegion(RegionFromId(7));
    gf_WaitForColonistToEnterRegion(RegionFromId(3));
    gf_WaitForColonistToEnterRegion(RegionFromId(8));
    gf_WaitForColonistToEnterRegion(RegionFromId(4));
    gf_SpoogeAreawithOverlord(PointFromId(145), PointFromId(245));
    gf_WaitForColonistToEnterRegion(RegionFromId(9));
    gf_SpoogeAreawithOverlord(PointFromId(183), PointFromId(597));
    gf_AttackwithUnburrowingUnits(gv_p2_ZERG_ORANGE_NW, UnitGroup(null, gv_p6_ZERG_NOAIPREPLACED, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    gf_WaitForColonistToEnterRegion(RegionFromId(5));
    AIAttackWaveAddUnits4(4, 5, 8, 12, "Zergling");
    AIAttackWaveSend(gv_p2_ZERG_ORANGE_NW, 0, false);
    gf_WaitForColonistToEnterRegion(RegionFromId(10));
    gf_SpoogeAreawithOverlord(PointFromId(183), PointFromId(2691));
    gf_WaitForColonistToEnterRegion(RegionFromId(13));
    gf_WaitForColonistToEnterRegion(RegionFromId(20));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoyAttack1Freebie_Init () {
    gt_ConvoyAttack1Freebie = TriggerCreate("gt_ConvoyAttack1Freebie_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Convoy Attack 2 (Stress Bunkers - not all full)
//--------------------------------------------------------------------------------------------------
bool gt_ConvoyAttack2StressBunkersnotallfull_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_WaitForColonistToEnterRegion(RegionFromId(12));
    gf_SpoogeAreawithOverlord(PointFromId(145), PointFromId(1402));
    AIAttackWaveAddUnits4(7, 7, 9, 12, "Zergling");
    AIAttackWaveSend(gv_p2_ZERG_ORANGE_NW, 0, false);
    gf_WaitForColonistToEnterRegion(RegionFromId(1));
    AIAttackWaveAddUnits4(8, 8, 10, 5, "Zergling");
    AIAttackWaveAddUnits4(0, 0, 0, 1, "Hydralisk");
    AIAttackWaveSend(gv_p2_ZERG_ORANGE_NW, 0, false);
    gf_WaitForColonistToEnterRegion(RegionFromId(7));
    gf_WaitForColonistToEnterRegion(RegionFromId(3));
    AIAttackWaveAddUnits4(1, 1, 1, 1, "Hydralisk");
    AIAttackWaveAddUnits4(0, 0, 6, 10, "Zergling");
    AIAttackWaveSend(gv_p3_ZERG_LIGHTBLUE_SE, 0, false);
    gf_WaitForColonistToEnterRegion(RegionFromId(8));
    gf_SpoogeAreawithOverlord(PointFromId(145), PointFromId(1404));
    AIAttackWaveAddUnits4(6, 6, 7, 10, "Zergling");
    AIAttackWaveSend(gv_p3_ZERG_LIGHTBLUE_SE, 0, false);
    gf_WaitForColonistToEnterRegion(RegionFromId(4));
    AIAttackWaveAddUnits4(6, 6, 8, 11, "Zergling");
    AIAttackWaveSend(gv_p3_ZERG_LIGHTBLUE_SE, 0, false);
    gf_WaitForColonistToEnterRegion(RegionFromId(9));
    gf_SpoogeAreawithOverlord(PointFromId(183), PointFromId(1406));
    AIAttackWaveAddUnits4(5, 5, 7, 11, "Zergling");
    AIAttackWaveAddUnits4(1, 1, 1, 0, "Hydralisk");
    AIAttackWaveSend(gv_p2_ZERG_ORANGE_NW, 0, false);
    gf_WaitForColonistToEnterRegion(RegionFromId(5));
    AIAttackWaveAddUnits4(9, 9, 12, 12, "Zergling");
    AIAttackWaveAddUnits4(1, 1, 1, 1, "Hydralisk");
    AIAttackWaveAddUnits4(0, 0, 0, 1, "Roach");
    AIAttackWaveSend(gv_p2_ZERG_ORANGE_NW, 0, false);
    gf_WaitForColonistToEnterRegion(RegionFromId(10));
    gf_WaitForColonistToEnterRegion(RegionFromId(13));
    AIAttackWaveAddUnits4(5, 5, 7, 9, "Zergling");
    AIAttackWaveSend(gv_p2_ZERG_ORANGE_NW, 0, false);
    gf_WaitForColonistToEnterRegion(RegionFromId(20));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoyAttack2StressBunkersnotallfull_Init () {
    gt_ConvoyAttack2StressBunkersnotallfull = TriggerCreate("gt_ConvoyAttack2StressBunkersnotallfull_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Convoy Attack 3 (Burn single bunkers)
//--------------------------------------------------------------------------------------------------
bool gt_ConvoyAttack3Burnsinglebunkers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpoogeAreawithOverlord(PointFromId(145), PointFromId(1407));
    gf_WaitForColonistToEnterRegion(RegionFromId(12));
    AIAttackWaveAddUnits4(17, 10, 14, 21, "Zergling");
    AIAttackWaveAddUnits4(0, 1, 1, 1, "Hydralisk");
    AIAttackWaveSend(gv_p2_ZERG_ORANGE_NW, 0, false);
    gf_WaitForColonistToEnterRegion(RegionFromId(1));
    gf_WaitForColonistToEnterRegion(RegionFromId(7));
    AIAttackWaveAddUnits4(0, 0, 0, 2, "Roach");
    AIAttackWaveSend(gv_p2_ZERG_ORANGE_NW, 0, false);
    AIAttackWaveAddUnits4(4, 4, 8, 5, "Zergling");
    AIAttackWaveSend(gv_p3_ZERG_LIGHTBLUE_SE, 0, false);
    gf_WaitForColonistToEnterRegion(RegionFromId(3));
    gf_SpoogeAreawithOverlord(PointFromId(145), PointFromId(1410));
    gf_WaitForColonistToEnterRegion(RegionFromId(8));
    gf_SpoogeAreawithTumor(PointFromId(1427));
    AIAttackWaveAddUnits4(9, 9, 13, 18, "Zergling");
    AIAttackWaveAddUnits4(1, 1, 1, 1, "Hydralisk");
    AIAttackWaveSend(gv_p3_ZERG_LIGHTBLUE_SE, 0, false);
    gf_AttackwithUnburrowingUnits(gv_p2_ZERG_ORANGE_NW, UnitGroup(null, gv_p6_ZERG_NOAIPREPLACED, RegionFromId(43), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    gf_WaitForColonistToEnterRegion(RegionFromId(4));
    gf_SpoogeAreawithTumor(PointFromId(660));
    gf_WaitForColonistToEnterRegion(RegionFromId(9));
    AIAttackWaveAddUnits4(8, 14, 14, 11, "Zergling");
    AIAttackWaveAddUnits4(1, 1, 1, 1, "Hydralisk");
    AIAttackWaveAddUnits4(0, 0, 2, 3, "Roach");
    AIAttackWaveSend(gv_p2_ZERG_ORANGE_NW, 0, false);
    gf_WaitForColonistToEnterRegion(RegionFromId(5));
    gf_SpoogeAreawithOverlord(PointFromId(183), PointFromId(1412));
    AIAttackWaveAddUnits4(0, 1, 2, 2, "Mutalisk");
    AIAttackWaveSend(gv_p3_ZERG_LIGHTBLUE_SE, 0, false);
    gf_WaitForColonistToEnterRegion(RegionFromId(10));
    gf_SpoogeAreawithTumor(PointFromId(661));
    gf_WaitForColonistToEnterRegion(RegionFromId(13));
    gf_AttackwithUnburrowingUnits(gv_p2_ZERG_ORANGE_NW, UnitGroup(null, gv_p6_ZERG_NOAIPREPLACED, RegionFromId(40), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    gf_WaitForColonistToEnterRegion(RegionFromId(20));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoyAttack3Burnsinglebunkers_Init () {
    gt_ConvoyAttack3Burnsinglebunkers = TriggerCreate("gt_ConvoyAttack3Burnsinglebunkers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Convoy Attack 4 (Drop pods)
//--------------------------------------------------------------------------------------------------
bool gt_ConvoyAttack4Droppods_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpoogeAreawithOverlord(PointFromId(145), PointFromId(1400));
    gf_WaitForColonistToEnterRegion(RegionFromId(12));
    gf_WaitForColonistToEnterRegion(RegionFromId(1));
    gf_SpoogeAreawithTumor(PointFromId(657));
    gf_AttackwithZergDropPod(libNtve_gf_DifficultyValueInt(4, 4, 8, 12), "Zergling", 0, "Hydralisk", 0, "Roach", PointFromId(773));
    AIAttackWaveAddUnits4(0, 0, 0, 1, "Mutalisk");
    AIAttackWaveSend(gv_p2_ZERG_ORANGE_NW, 0, false);
    gf_WaitForColonistToEnterRegion(RegionFromId(7));
    gf_AttackwithZergDropPod(libNtve_gf_DifficultyValueInt(14, 14, 16, 12), "Zergling", 0, "Hydralisk", libNtve_gf_DifficultyValueInt(0, 0, 1, 2), "Roach", PointFromId(127));
    gf_WaitForColonistToEnterRegion(RegionFromId(3));
    gf_SpoogeAreawithOverlord(PointFromId(2675), PointFromId(1408));
    gf_SpoogeAreawithTumor(PointFromId(658));
    gf_AttackwithZergDropPod(libNtve_gf_DifficultyValueInt(5, 5, 4, 9), "Zergling", libNtve_gf_DifficultyValueInt(1, 1, 1, 0), "Hydralisk", libNtve_gf_DifficultyValueInt(0, 0, 1, 2), "Roach", PointFromId(774));
    gf_WaitForColonistToEnterRegion(RegionFromId(8));
    gf_WaitForColonistToEnterRegion(RegionFromId(4));
    gf_AttackwithZergDropPod(libNtve_gf_DifficultyValueInt(11, 17, 22, 25), "Zergling", 0, "Baneling", 0, "Baneling", PointFromId(139));
    gf_WaitForColonistToEnterRegion(RegionFromId(9));
    gf_AttackwithZergDropPod(libNtve_gf_DifficultyValueInt(1, 2, 2, 1), "Hydralisk", 0, "Hydralisk", libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "Roach", PointFromId(777));
    AIAttackWaveAddUnits4(8, 0, 12, 13, "Zergling");
    AIAttackWaveAddUnits4(0, 0, 1, 1, "Baneling");
    AIAttackWaveSend(gv_p2_ZERG_ORANGE_NW, 0, false);
    gf_WaitForColonistToEnterRegion(RegionFromId(5));
    AIAttackWaveAddUnits4(5, 5, 9, 11, "Zergling");
    AIAttackWaveAddUnits4(0, 1, 1, 0, "Mutalisk");
    AIAttackWaveAddUnits4(0, 0, 1, 2, "Baneling");
    AIAttackWaveSend(gv_p2_ZERG_ORANGE_NW, 0, false);
    gf_WaitForColonistToEnterRegion(RegionFromId(10));
    gf_SpoogeAreawithOverlord(PointFromId(183), PointFromId(1405));
    gf_AttackwithZergDropPod(libNtve_gf_DifficultyValueInt(4, 4, 8, 12), "Zergling", libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Hydralisk", libNtve_gf_DifficultyValueInt(0, 0, 1, 2), "Roach", PointFromId(221));
    gf_WaitForColonistToEnterRegion(RegionFromId(13));
    gf_SpoogeAreawithTumor(PointFromId(663));
    gf_WaitForColonistToEnterRegion(RegionFromId(20));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoyAttack4Droppods_Init () {
    gt_ConvoyAttack4Droppods = TriggerCreate("gt_ConvoyAttack4Droppods_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Convoy Attack 5 (Nydus worms)
//--------------------------------------------------------------------------------------------------
bool gt_ConvoyAttack5Nydusworms_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpoogeAreawithOverlord(PointFromId(145), PointFromId(1409));
    gf_WaitForColonistToEnterRegion(RegionFromId(12));
    gf_SpoogeAreawithOverlord(PointFromId(145), PointFromId(1411));
    AIAttackWaveAddUnits4(8, 12, 13, 8, "Zergling");
    AIAttackWaveAddUnits4(1, 1, 0, 1, "Hydralisk");
    AIAttackWaveAddUnits4(0, 0, 2, 3, "Baneling");
    AIAttackWaveSend(gv_p2_ZERG_ORANGE_NW, 0, false);
    gf_WaitForColonistToEnterRegion(RegionFromId(1));
    gf_WaitForColonistToEnterRegion(RegionFromId(7));
    gf_SpoogeAreawithTumor(PointFromId(672));
    gf_SpawnNydusWorm(PointFromId(779), gv_p2_ZERG_ORANGE_NW, libNtve_gf_DifficultyValueInt(4, 4, 6, 7), 2, "Zergling", gv_nydusSpawnDelay);
    gf_WaitForColonistToEnterRegion(RegionFromId(3));
    gf_SpoogeAreawithOverlord(PointFromId(145), PointFromId(1413));
    gf_WaitForColonistToEnterRegion(RegionFromId(8));
    gf_WaitForColonistToEnterRegion(RegionFromId(4));
    AIAttackWaveAddUnits4(7, 7, 8, 12, "Zergling");
    AIAttackWaveAddUnits4(1, 1, 1, 2, "Hydralisk");
    AIAttackWaveAddUnits4(0, 0, 2, 2, "Roach");
    AIAttackWaveAddUnits4(0, 0, 1, 1, "Mutalisk");
    AIAttackWaveSend(gv_p3_ZERG_LIGHTBLUE_SE, 0, false);
    gf_WaitForColonistToEnterRegion(RegionFromId(9));
    gf_SpoogeAreawithOverlord(PointFromId(183), PointFromId(1414));
    gf_SpawnNydusWorm(PointFromId(785), gv_p2_ZERG_ORANGE_NW, libNtve_gf_DifficultyValueInt(3, 4, 1, 1), libNtve_gf_DifficultyValueInt(2, 2, 1, 1), libNtve_gf_DifficultyValueUnitType("Zergling", "Zergling", "Hydralisk", "Hydralisk"), gv_nydusSpawnDelay);
    AIAttackWaveAddUnits4(3, 3, 0, 0, "Hydralisk");
    AIAttackWaveAddUnits4(0, 0, 12, 16, "Zergling");
    AIAttackWaveAddUnits4(0, 0, 1, 1, "Mutalisk");
    AIAttackWaveSend(gv_p2_ZERG_ORANGE_NW, 0, false);
    Wait(2.0, c_timeGame);
    gf_SpoogeAreawithTumor(PointFromId(678));
    gf_WaitForColonistToEnterRegion(RegionFromId(5));
    gf_WaitForColonistToEnterRegion(RegionFromId(10));
    gf_SpawnNydusWorm(PointFromId(786), gv_p2_ZERG_ORANGE_NW, libNtve_gf_DifficultyValueInt(3, 3, 1, 1), libNtve_gf_DifficultyValueInt(2, 2, 1, 2), libNtve_gf_DifficultyValueUnitType("Zergling", "Zergling", "Roach", "Roach"), gv_nydusSpawnDelay);
    Wait(3.0, c_timeGame);
    gf_SpoogeAreawithTumor(PointFromId(680));
    gf_WaitForColonistToEnterRegion(RegionFromId(13));
    gf_WaitForColonistToEnterRegion(RegionFromId(20));
    if ((libNtve_gf_DifficultyValueInt(1, 1, 1, 0) == 1)) {
        gf_SpawnNydusWorm(PointFromId(980), gv_p2_ZERG_ORANGE_NW, libNtve_gf_DifficultyValueInt(2, 2, 3, 0), 2, "Zergling", gv_nydusSpawnDelay);
    }
    else {
        gf_SpawnNydusWorm(PointFromId(980), gv_p2_ZERG_ORANGE_NW, libNtve_gf_DifficultyValueInt(0, 0, 0, 1), 1, "Baneling", gv_nydusSpawnDelay);
    }
    Wait(2.0, c_timeGame);
    gf_SpoogeAreawithTumor(PointFromId(686));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoyAttack5Nydusworms_Init () {
    gt_ConvoyAttack5Nydusworms = TriggerCreate("gt_ConvoyAttack5Nydusworms_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Convoy Attack 6 (AHH)
//--------------------------------------------------------------------------------------------------
bool gt_ConvoyAttack6AHH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_WaitForColonistToEnterRegion(RegionFromId(12));
    AIAttackWaveAddUnits4(12, 8, 7, 10, "Zergling");
    AIAttackWaveAddUnits4(1, 2, 1, 0, "Hydralisk");
    AIAttackWaveAddUnits4(0, 0, 1, 1, "Ultralisk");
    AIAttackWaveSend(gv_p2_ZERG_ORANGE_NW, 0, false);
    gf_SpoogeAreawithOverlord(PointFromId(145), PointFromId(1415));
    gf_WaitForColonistToEnterRegion(RegionFromId(1));
    gf_AttackwithZergDropPod(libNtve_gf_DifficultyValueInt(0, 0, 2, 2), "Roach", libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "Hydralisk", 0, "Roach", PointFromId(604));
    Wait(2.0, c_timeGame);
    gf_SpawnNydusWorm(PointFromId(144), gv_p2_ZERG_ORANGE_NW, libNtve_gf_DifficultyValueInt(4, 4, 5, 6), 2, "Zergling", gv_nydusSpawnDelay);
    gf_WaitForColonistToEnterRegion(RegionFromId(7));
    AIAttackWaveAddUnits4(0, 1, 1, 1, "Mutalisk");
    AIAttackWaveSend(gv_p2_ZERG_ORANGE_NW, 0, false);
    gf_SpoogeAreawithTumor(PointFromId(684));
    gf_WaitForColonistToEnterRegion(RegionFromId(3));
    AIAttackWaveAddUnits4(0, 0, 0, 1, "Mutalisk");
    AIAttackWaveSend(gv_p3_ZERG_LIGHTBLUE_SE, 0, false);
    gf_SpoogeAreawithOverlord(PointFromId(145), PointFromId(1416));
    gf_WaitForColonistToEnterRegion(RegionFromId(8));
    gf_WaitForColonistToEnterRegion(RegionFromId(4));
    AIAttackWaveAddUnits4(12, 16, 22, 25, "Zergling");
    AIAttackWaveAddUnits4(0, 0, 0, 1, "Infestor");
    AIAttackWaveAddUnits4(0, 0, 1, 0, "Baneling");
    AIAttackWaveSend(gv_p3_ZERG_LIGHTBLUE_SE, 0, false);
    gf_SpoogeAreawithOverlord(PointFromId(183), PointFromId(1417));
    gf_WaitForColonistToEnterRegion(RegionFromId(9));
    gf_SpawnNydusWorm(PointFromId(559), gv_p2_ZERG_ORANGE_NW, libNtve_gf_DifficultyValueInt(3, 3, 4, 5), 2, "Zergling", gv_nydusSpawnDelay);
    gf_SpoogeAreawithTumor(PointFromId(685));
    gf_WaitForColonistToEnterRegion(RegionFromId(5));
    AIAttackWaveAddUnits4(12, 12, 7, 19, "Zergling");
    AIAttackWaveAddUnits4(1, 1, 1, 0, "Hydralisk");
    AIAttackWaveAddUnits4(0, 0, 2, 3, "Baneling");
    AIAttackWaveSend(gv_p2_ZERG_ORANGE_NW, 0, false);
    AIAttackWaveAddUnits4(0, 1, 1, 1, "Mutalisk");
    AIAttackWaveSend(gv_p3_ZERG_LIGHTBLUE_SE, 0, false);
    gf_SpoogeAreawithOverlord(PointFromId(183), PointFromId(1418));
    gf_WaitForColonistToEnterRegion(RegionFromId(10));
    gf_AttackwithZergDropPod(libNtve_gf_DifficultyValueInt(9, 9, 13, 16), "Zergling", 0, "Hydralisk", libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "Roach", PointFromId(613));
    gf_SpoogeAreawithTumor(PointFromId(964));
    gf_WaitForColonistToEnterRegion(RegionFromId(13));
    gf_SpawnNydusWorm(PointFromId(1066), gv_p2_ZERG_ORANGE_NW, libNtve_gf_DifficultyValueInt(3, 3, 3, 3), 2, "Zergling", gv_nydusSpawnDelay);
    AIAttackWaveAddUnits4(0, 0, 2, 0, "Roach");
    AIAttackWaveSend(gv_p2_ZERG_ORANGE_NW, 0, false);
    gf_SpoogeAreawithTumor(PointFromId(1399));
    gf_WaitForColonistToEnterRegion(RegionFromId(20));
    gf_CreateUnburrowingUnits(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "UltraliskBurrowed", gv_p2_ZERG_ORANGE_NW, PointFromId(14));
    gf_SpoogeAreawithTumor(PointFromId(1398));
    Wait(1.5, c_timeGame);
    gf_SpoogeAreawithTumor(PointFromId(713));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoyAttack6AHH_Init () {
    gt_ConvoyAttack6AHH = TriggerCreate("gt_ConvoyAttack6AHH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Convoy Attack 7 (Variation AHH)
//--------------------------------------------------------------------------------------------------
bool gt_ConvoyAttack7VariationAHH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_WaitForColonistToEnterRegion(RegionFromId(12));
    AIAttackWaveAddUnits4(11, 13, 10, 7, "Zergling");
    AIAttackWaveAddUnits4(1, 1, 0, 0, "Hydralisk");
    AIAttackWaveAddUnits4(0, 0, 1, 1, "Ultralisk");
    AIAttackWaveAddUnits4(0, 0, 0, 1, "Infestor");
    AIAttackWaveAddUnits4(0, 0, 0, 1, "Roach");
    AIAttackWaveSend(gv_p2_ZERG_ORANGE_NW, 0, false);
    gf_SpoogeAreawithOverlord(PointFromId(145), PointFromId(1415));
    gf_WaitForColonistToEnterRegion(RegionFromId(1));
    gf_AttackwithZergDropPod(libNtve_gf_DifficultyValueInt(5, 5, 8, 12), "Zergling", 0, "Hydralisk", 0, "Roach", PointFromId(611));
    Wait(2.0, c_timeGame);
    gf_SpawnNydusWorm(PointFromId(2763), gv_p2_ZERG_ORANGE_NW, libNtve_gf_DifficultyValueInt(1, 1, 2, 2), 2, "Roach", gv_nydusSpawnDelay);
    gf_WaitForColonistToEnterRegion(RegionFromId(7));
    gf_SpoogeAreawithTumor(PointFromId(684));
    gf_WaitForColonistToEnterRegion(RegionFromId(3));
    AIAttackWaveAddUnits4(0, 1, 1, 1, "Mutalisk");
    AIAttackWaveSend(gv_p2_ZERG_ORANGE_NW, 0, false);
    AIAttackWaveAddUnits4(0, 1, 1, 1, "Mutalisk");
    AIAttackWaveSend(gv_p3_ZERG_LIGHTBLUE_SE, 0, false);
    gf_SpoogeAreawithOverlord(PointFromId(145), PointFromId(1416));
    gf_WaitForColonistToEnterRegion(RegionFromId(8));
    gf_WaitForColonistToEnterRegion(RegionFromId(4));
    AIAttackWaveAddUnits4(12, 16, 19, 22, "Zergling");
    AIAttackWaveAddUnits4(0, 0, 1, 2, "Baneling");
    AIAttackWaveAddUnits4(0, 0, 1, 1, "Hydralisk");
    AIAttackWaveAddUnits4(0, 0, 1, 1, "Mutalisk");
    AIAttackWaveSend(gv_p3_ZERG_LIGHTBLUE_SE, 0, false);
    gf_SpoogeAreawithOverlord(PointFromId(183), PointFromId(1417));
    gf_WaitForColonistToEnterRegion(RegionFromId(9));
    gf_SpawnNydusWorm(PointFromId(2780), gv_p2_ZERG_ORANGE_NW, libNtve_gf_DifficultyValueInt(3, 3, 4, 4), 2, "Zergling", gv_nydusSpawnDelay);
    gf_SpoogeAreawithTumor(PointFromId(685));
    gf_WaitForColonistToEnterRegion(RegionFromId(5));
    AIAttackWaveAddUnits4(7, 7, 13, 17, "Zergling");
    AIAttackWaveAddUnits4(1, 1, 1, 1, "Hydralisk");
    AIAttackWaveAddUnits4(0, 0, 2, 0, "Baneling");
    AIAttackWaveAddUnits4(0, 0, 1, 1, "Mutalisk");
    AIAttackWaveSend(gv_p2_ZERG_ORANGE_NW, 0, false);
    gf_SpoogeAreawithOverlord(PointFromId(183), PointFromId(1418));
    gf_WaitForColonistToEnterRegion(RegionFromId(10));
    gf_AttackwithZergDropPod(libNtve_gf_DifficultyValueInt(6, 6, 1, 2), libNtve_gf_DifficultyValueUnitType("Zergling", "Zergling", "Hydralisk", "Roach"), 0, "Hydralisk", 0, "Roach", PointFromId(2779));
    gf_SpoogeAreawithTumor(PointFromId(964));
    gf_WaitForColonistToEnterRegion(RegionFromId(13));
    gf_SpawnNydusWorm(PointFromId(2781), gv_p2_ZERG_ORANGE_NW, libNtve_gf_DifficultyValueInt(3, 3, 4, 3), 2, "Zergling", gv_nydusSpawnDelay);
    gf_CreateUnburrowingUnits(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "UltraliskBurrowed", gv_p2_ZERG_ORANGE_NW, PointFromId(2792));
    gf_SpoogeAreawithTumor(PointFromId(1399));
    gf_WaitForColonistToEnterRegion(RegionFromId(20));
    gf_SpoogeAreawithTumor(PointFromId(1398));
    Wait(1.5, c_timeGame);
    gf_SpoogeAreawithTumor(PointFromId(713));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoyAttack7VariationAHH_Init () {
    gt_ConvoyAttack7VariationAHH = TriggerCreate("gt_ConvoyAttack7VariationAHH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Backdoor Spooge Ambience
//--------------------------------------------------------------------------------------------------
bool gt_BackdoorSpoogeAmbience_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpoogeAreawithTumor(PointFromId(2718));
    Wait(12.0, c_timeGame);
    gf_SpoogeAreawithTumor(PointFromId(2719));
    Wait(8.0, c_timeGame);
    gf_SpoogeAreawithTumor(PointFromId(2720));
    Wait(4.0, c_timeGame);
    gf_SpoogeAreawithTumor(PointFromId(2721));
    Wait(16.0, c_timeGame);
    gf_SpoogeAreawithTumor(PointFromId(2722));
    Wait(15.0, c_timeGame);
    gf_SpoogeAreawithTumor(PointFromId(2723));
    Wait(5.0, c_timeGame);
    gf_SpoogeAreawithTumor(PointFromId(2724));
    Wait(8.0, c_timeGame);
    gf_SpoogeAreawithTumor(PointFromId(2725));
    Wait(12.0, c_timeGame);
    gf_SpoogeAreawithTumor(PointFromId(2726));
    Wait(3.0, c_timeGame);
    gf_SpoogeAreawithTumor(PointFromId(2727));
    Wait(13.0, c_timeGame);
    gf_SpoogeAreawithTumor(PointFromId(2728));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BackdoorSpoogeAmbience_Init () {
    gt_BackdoorSpoogeAmbience = TriggerCreate("gt_BackdoorSpoogeAmbience_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tumor Spawning Trigger
//--------------------------------------------------------------------------------------------------
bool gt_TumorSpawningTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_nydusWorm;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_point = gv_tempTumorPoint;
    if ((UnitGroupCount(UnitGroup("CreepTumor", c_playerAny, RegionCircle(lv_point, 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        libCamp_gf_CreateDropPod(libCamp_ge_DropPodRace_Zerg, lv_point, UnitGroupEmpty(), true);
        libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumor", c_unitCreateConstruct, gv_p5_ZERG_TACTICALPHASE, lv_point);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TumorSpawningTrigger_Init () {
    gt_TumorSpawningTrigger = TriggerCreate("gt_TumorSpawningTrigger_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveMinerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveMinerals_Init () {
    gt_AIGiveMinerals = TriggerCreate("gt_AIGiveMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p2_ZERG_ORANGE_NW, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p3_ZERG_LIGHTBLUE_SE, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveGas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveGas_Init () {
    gt_AIGiveGas = TriggerCreate("gt_AIGiveGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p2_ZERG_ORANGE_NW, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p3_ZERG_LIGHTBLUE_SE, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Spawning Trigger
//--------------------------------------------------------------------------------------------------
bool gt_NydusSpawningTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_nydusWorm;
    point lv_point;
    int lv_packs;
    int lv_packSize;
    string lv_type;
    fixed lv_cooldown;

    // Automatic Variable Declarations
    int autoC7919796_n;
    int autoC7919796_i;
    unitgroup auto56518657_g;
    int auto56518657_u;
    unit auto56518657_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_point = gv_tempNydusPoint;
    lv_packs = gv_tempNydusPacks;
    lv_packSize = gv_tempNydusPackSize;
    lv_type = gv_tempNydusType;
    lv_cooldown = gv_tempNydusCooldown;
    if ((RegionContainsPoint(RegionCircle(lv_point, 10.0), CameraGetTarget(gv_p1_USER)) == true) && (gv_gameOver == false) && (gv_inCinematic == false)) {
        CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.02, 2.0, 100.0, 3.0);
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "NydusCanal", 0, gv_p2_ZERG_ORANGE_NW, lv_point);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_nydusWormHP);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
    UnitGroupAdd(gv_activeNydusWorms, UnitLastCreated());
    lv_nydusWorm = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlay(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), 100.0, 0.0);
    VisRevealArea(gv_p1_USER, RegionCircle(lv_point, 4.0), 5.0, false);
    Wait(3.7, c_timeGame);
    while (true) {
        autoC7919796_n = lv_packs;
        for (autoC7919796_i = 1; autoC7919796_i <= autoC7919796_n; autoC7919796_i += 1) {
            if ((UnitIsAlive(lv_nydusWorm) == true) && (UnitGroupHasUnit(gv_activeNydusWorms, lv_nydusWorm) == true)) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_nydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(lv_packSize, lv_type, 0, gv_p2_ZERG_ORANGE_NW, UnitGetPosition(lv_nydusWorm));
                auto56518657_g = UnitLastCreatedGroup();
                auto56518657_u = UnitGroupCount(auto56518657_g, c_unitCountAll);
                for (;; auto56518657_u -= 1) {
                    auto56518657_var = UnitGroupUnitFromEnd(auto56518657_g, auto56518657_u);
                    if (auto56518657_var == null) { break; }
                    AIAttackWaveSetGatherPoint(gv_p2_ZERG_ORANGE_NW, UnitGetPosition(lv_nydusWorm));
                    AIAttackWaveUseUnit(gv_p2_ZERG_ORANGE_NW, auto56518657_var);
                    AIAttackWaveSend(gv_p2_ZERG_ORANGE_NW, 0, false);
                }
            }

            Wait(0.5, c_timeGame);
        }
        Wait(lv_cooldown, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusSpawningTrigger_Init () {
    gt_NydusSpawningTrigger = TriggerCreate("gt_NydusSpawningTrigger_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Marine reaches colony ship
//--------------------------------------------------------------------------------------------------
bool gt_Marinereachescolonyship_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p4_COLONISTS))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Marine"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AISetUnitScriptControlled(EventUnit(), true);
    UnitGroupRemove(gv_convoyGuards, EventUnit());
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1186)), c_orderQueueReplace);
    UnitIssueOrder(EventUnit(), OrderTargetingUnit(null, gv_activeCivilianShip), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Marinereachescolonyship_Init () {
    gt_Marinereachescolonyship = TriggerCreate("gt_Marinereachescolonyship_Func");
    TriggerAddEventUnitRegion(gt_Marinereachescolonyship, null, RegionFromId(6), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Truck/Colonist reaches colony ship
//--------------------------------------------------------------------------------------------------
bool gt_TruckColonistreachescolonyship_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_anglebetweentruckship;

    // Automatic Variable Declarations
    unitgroup autoE914C699_g;
    int autoE914C699_u;
    unit autoE914C699_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p4_COLONISTS))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_colonistsOnTheMove, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetCustomValue(EventUnit(), 0, 0.0);
    if ((UnitGetType(EventUnit()) == "ColonistTransport")) {
        autoE914C699_g = UnitCargoGroup(EventUnit());
        autoE914C699_u = UnitGroupCount(autoE914C699_g, c_unitCountAll);
        for (;; autoE914C699_u -= 1) {
            autoE914C699_var = UnitGroupUnitFromEnd(autoE914C699_g, autoE914C699_u);
            if (autoE914C699_var == null) { break; }
            UnitSetCustomValue(autoE914C699_var, 0, 0.0);
        }
        lv_anglebetweentruckship = (AngleBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_activeCivilianShip)) + 180.0);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("Rally", 0), UnitGetPosition(gv_activeCivilianShip)), c_orderQueueAddToEnd);
        UnitSetCustomValue(EventUnit(), 0, 100.0);
        UnitSetFacing(EventUnit(), lv_anglebetweentruckship, 1.5);
        Wait(1.75, c_timeGame);
        libNtve_gf_SendActorMessageToUnit(gv_tHEONETRUCK, "AnimBracketStart Work Stand,Work,Start Stand,Work Stand,Work,End");
        Wait(1.0, c_timeGame);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("TransportTruckTransport", 1)), c_orderQueueAddToEnd);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
        while (!((UnitGroupCount(UnitCargoGroup(gv_tHEONETRUCK), c_unitCountAlive) == 0))) {
            Wait(0.1, c_timeGame);
        }
        Wait(1.25, c_timeGame);
        libNtve_gf_SendActorMessageToUnit(gv_tHEONETRUCK, "AnimBracketStop Work");
        Wait(1.75, c_timeGame);
        UnitSetCustomValue(EventUnit(), 0, 0.0);
    }

    UnitIssueOrder(EventUnit(), OrderTargetingUnit(null, gv_activeCivilianShip), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TruckColonistreachescolonyship_Init () {
    gt_TruckColonistreachescolonyship = TriggerCreate("gt_TruckColonistreachescolonyship_Func");
    TriggerAddEventUnitRegion(gt_TruckColonistreachescolonyship, null, RegionFromId(2), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Convoy loads into colony ship
//--------------------------------------------------------------------------------------------------
bool gt_Convoyloadsintocolonyship_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_briefingCinematicPlaying == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_PingConvoy, false);
    if ((UnitGetType(EventUnitCargo()) == "Marine")) {
        UnitRemove(EventUnitCargo());
        return true;
    }

    gv_colonistsSaved = MinI((gv_colonistsSaved + 1), 50);
    ObjectiveSetName(gv_objective_SaveColonists, (StringExternal("Param/Value/01B02760") + IntToText(gv_colonistsSaved) + StringExternal("Param/Value/09C44398") + IntToText(gv_colonistsSaveQuota) + StringExternal("Param/Value/38C9869C")));
    SoundPlay(SoundLink("Terran_Veterancy", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitRemove(EventUnitCargo());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Convoyloadsintocolonyship_Init () {
    gt_Convoyloadsintocolonyship = TriggerCreate("gt_Convoyloadsintocolonyship_Func");
    TriggerAddEventUnitCargo(gt_Convoyloadsintocolonyship, UnitRefFromUnit(UnitFromId(1483)), true);
    TriggerAddEventUnitCargo(gt_Convoyloadsintocolonyship, UnitRefFromUnit(UnitFromId(1403)), true);
    TriggerAddEventUnitCargo(gt_Convoyloadsintocolonyship, UnitRefFromUnit(UnitFromId(698)), true);
    TriggerAddEventUnitCargo(gt_Convoyloadsintocolonyship, UnitRefFromUnit(UnitFromId(693)), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colony Ship Blastoff Actions
//--------------------------------------------------------------------------------------------------
bool gt_ColonyShipBlastoffActions_Func (bool testConds, bool runActions) {
    // Variable Declarations
    sound lv_sound;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = gv_blastOffShip;
    if ((gv_inCinematic == false)) {
        UnitSetState(lv_unit, c_unitStateSelectable, false);
        UnitSetState(lv_unit, c_unitStateStatusBar, false);
        UnitSetState(lv_unit, c_unitStateTargetable, false);
    }

    libNtve_gf_MakeUnitInvulnerable(lv_unit, true);
    UnitSetState(lv_unit, c_unitStateSelectable, false);
    UnitSetState(lv_unit, c_unitStateTargetable, false);
    UnitSetState(lv_unit, c_unitStateHighlightable, false);
    UnitIssueOrder(lv_unit, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    Wait(6.0, c_timeGame);
    UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_unit), 5.0, RandomFixed(30.0, 60.0))), c_orderQueueReplace);
    Wait(3.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_unit), c_animNameDefault, "Land Forward", 0, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("Barracks_Movement", 0), PlayerGroupAll(), lv_unit, 0.0, 100.0, 0.0);
    lv_sound = SoundLastPlayed();
    Wait(5.0, c_timeGame);
    UnitRemove(lv_unit);
    SoundStop(lv_sound, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColonyShipBlastoffActions_Init () {
    gt_ColonyShipBlastoffActions = TriggerCreate("gt_ColonyShipBlastoffActions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave Over Logic
//--------------------------------------------------------------------------------------------------
bool gt_WaveOverLogic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_colonistsOnTheMove, c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ConvoyMovement, false);
    TriggerStop(gt_ConvoyAttack1Freebie);
    TriggerStop(gt_ConvoyAttack2StressBunkersnotallfull);
    TriggerStop(gt_ConvoyAttack3Burnsinglebunkers);
    TriggerStop(gt_ConvoyAttack4Droppods);
    TriggerStop(gt_ConvoyAttack5Nydusworms);
    TriggerStop(gt_ConvoyAttack6AHH);
    TriggerStop(gt_ConvoyAttack7VariationAHH);
    TriggerExecute(gt_WaveOverAIRetreat, true, false);
    gv_hansonQQInhibitor = false;
    if ((libNtve_gf_DifficultyValueInt(1, 1, 1, 0) == 1)) {
        if ((gv_colonistsSaved >= (gv_escortIndex * 8))) {
            gv_enoughColonistsSavedThisWave = true;
        }
        else {
            gv_enoughColonistsSavedThisWave = false;
        }
    }
    else {
        gv_enoughColonistsSavedThisWave = true;
    }
    TriggerExecute(gt_WaveOverShipBlastoffAutosave, true, false);
    Wait(10.0, c_timeGame);
    TriggerExecute(gt_WaveOverAIUpgradesTipsEnvironment, true, false);
    if ((gv_convoyTrucksSent >= libNtve_gf_DifficultyValueInt(14, 10, 6, 6))) {
        TriggerExecute(gt_DoomsdayZergAttackWaves, true, false);
    }

    Wait(gv_waveDelay, c_timeGame);
    TriggerExecute(gt_Preparenextconvoy, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WaveOverLogic_Init () {
    gt_WaveOverLogic = TriggerCreate("gt_WaveOverLogic_Func");
    TriggerEnable(gt_WaveOverLogic, false);
    TriggerAddEventTimePeriodic(gt_WaveOverLogic, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave Over AI Retreat
//--------------------------------------------------------------------------------------------------
bool gt_WaveOverAIRetreat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoDC7CDD91_g;
    int autoDC7CDD91_u;
    unit autoDC7CDD91_var;
    unitgroup auto23B6BB2B_g;
    int auto23B6BB2B_u;
    unit auto23B6BB2B_var;
    unitgroup autoFBC7DD9D_g;
    int autoFBC7DD9D_u;
    unit autoFBC7DD9D_var;
    unitgroup auto9B9FDE4D_g;
    int auto9B9FDE4D_u;
    unit auto9B9FDE4D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoDC7CDD91_g = UnitGroup(null, gv_p2_ZERG_ORANGE_NW, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDC7CDD91_u = UnitGroupCount(autoDC7CDD91_g, c_unitCountAll);
    for (;; autoDC7CDD91_u -= 1) {
        autoDC7CDD91_var = UnitGroupUnitFromEnd(autoDC7CDD91_g, autoDC7CDD91_u);
        if (autoDC7CDD91_var == null) { break; }
        AIRemoveUnitFromAnyWavesAndSetHome(autoDC7CDD91_var, PointFromId(281));
    }
    auto23B6BB2B_g = UnitGroup(null, gv_p3_ZERG_LIGHTBLUE_SE, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto23B6BB2B_u = UnitGroupCount(auto23B6BB2B_g, c_unitCountAll);
    for (;; auto23B6BB2B_u -= 1) {
        auto23B6BB2B_var = UnitGroupUnitFromEnd(auto23B6BB2B_g, auto23B6BB2B_u);
        if (auto23B6BB2B_var == null) { break; }
        AIRemoveUnitFromAnyWavesAndSetHome(auto23B6BB2B_var, PointFromId(283));
    }
    autoFBC7DD9D_g = UnitGroup("NydusCanal", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFBC7DD9D_u = UnitGroupCount(autoFBC7DD9D_g, c_unitCountAll);
    for (;; autoFBC7DD9D_u -= 1) {
        autoFBC7DD9D_var = UnitGroupUnitFromEnd(autoFBC7DD9D_g, autoFBC7DD9D_u);
        if (autoFBC7DD9D_var == null) { break; }
        UnitGroupRemove(gv_activeNydusWorms, autoFBC7DD9D_var);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(autoFBC7DD9D_var), c_animNameDefault, "Unburrow", 0, c_animTimeDefault);
    }
    Wait(2.5, c_timeGame);
    auto9B9FDE4D_g = UnitGroup("NydusCanal", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9B9FDE4D_u = UnitGroupCount(auto9B9FDE4D_g, c_unitCountAll);
    for (;; auto9B9FDE4D_u -= 1) {
        auto9B9FDE4D_var = UnitGroupUnitFromEnd(auto9B9FDE4D_g, auto9B9FDE4D_u);
        if (auto9B9FDE4D_var == null) { break; }
        UnitRemove(auto9B9FDE4D_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WaveOverAIRetreat_Init () {
    gt_WaveOverAIRetreat = TriggerCreate("gt_WaveOverAIRetreat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave Over Ship Blastoff/Autosave
//--------------------------------------------------------------------------------------------------
bool gt_WaveOverShipBlastoffAutosave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto58DCFB6E_val;
    unitgroup auto37D97D54_g;
    int auto37D97D54_u;
    unit auto37D97D54_var;
    unitgroup autoC6E48224_g;
    int autoC6E48224_u;
    unit autoC6E48224_var;
    unitgroup auto87D49383_g;
    int auto87D49383_u;
    unit auto87D49383_var;
    unitgroup autoD9E3C06D_g;
    int autoD9E3C06D_u;
    unit autoD9E3C06D_var;
    unitgroup auto6788451A_g;
    int auto6788451A_u;
    unit auto6788451A_var;
    unitgroup autoE668A10B_g;
    int autoE668A10B_u;
    unit autoE668A10B_var;
    int auto4E6D3ED0_val;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_enoughColonistsSavedThisWave == true) && ((gv_escortIndex == 1) || (gv_escortIndex == 2) || (gv_escortIndex == 4))) {
        libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/706D16F7"));
        auto58DCFB6E_val = gv_escortIndex;
        if (auto58DCFB6E_val == 1) {
            auto37D97D54_g = UnitGroup("PathingBlocker1x1", c_playerAny, RegionFromId(46), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            auto37D97D54_u = UnitGroupCount(auto37D97D54_g, c_unitCountAll);
            for (;; auto37D97D54_u -= 1) {
                auto37D97D54_var = UnitGroupUnitFromEnd(auto37D97D54_g, auto37D97D54_u);
                if (auto37D97D54_var == null) { break; }
                UnitRemove(auto37D97D54_var);
            }
            autoC6E48224_g = UnitGroup("PathingBlocker2x2", c_playerAny, RegionFromId(46), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            autoC6E48224_u = UnitGroupCount(autoC6E48224_g, c_unitCountAll);
            for (;; autoC6E48224_u -= 1) {
                autoC6E48224_var = UnitGroupUnitFromEnd(autoC6E48224_g, autoC6E48224_u);
                if (autoC6E48224_var == null) { break; }
                UnitRemove(autoC6E48224_var);
            }
        }
        else if (auto58DCFB6E_val == 2) {
            auto87D49383_g = UnitGroup("PathingBlocker1x1", c_playerAny, RegionFromId(48), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            auto87D49383_u = UnitGroupCount(auto87D49383_g, c_unitCountAll);
            for (;; auto87D49383_u -= 1) {
                auto87D49383_var = UnitGroupUnitFromEnd(auto87D49383_g, auto87D49383_u);
                if (auto87D49383_var == null) { break; }
                UnitRemove(auto87D49383_var);
            }
            autoD9E3C06D_g = UnitGroup("PathingBlocker2x2", c_playerAny, RegionFromId(48), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            autoD9E3C06D_u = UnitGroupCount(autoD9E3C06D_g, c_unitCountAll);
            for (;; autoD9E3C06D_u -= 1) {
                autoD9E3C06D_var = UnitGroupUnitFromEnd(autoD9E3C06D_g, autoD9E3C06D_u);
                if (autoD9E3C06D_var == null) { break; }
                UnitRemove(autoD9E3C06D_var);
            }
        }
        else if (auto58DCFB6E_val == 4) {
            auto6788451A_g = UnitGroup("PathingBlocker1x1", c_playerAny, RegionFromId(49), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            auto6788451A_u = UnitGroupCount(auto6788451A_g, c_unitCountAll);
            for (;; auto6788451A_u -= 1) {
                auto6788451A_var = UnitGroupUnitFromEnd(auto6788451A_g, auto6788451A_u);
                if (auto6788451A_var == null) { break; }
                UnitRemove(auto6788451A_var);
            }
            autoE668A10B_g = UnitGroup("PathingBlocker2x2", c_playerAny, RegionFromId(49), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            autoE668A10B_u = UnitGroupCount(autoE668A10B_g, c_unitCountAll);
            for (;; autoE668A10B_u -= 1) {
                autoE668A10B_var = UnitGroupUnitFromEnd(autoE668A10B_g, autoE668A10B_u);
                if (autoE668A10B_var == null) { break; }
                UnitRemove(autoE668A10B_var);
            }
        }
        else {
        }
        gf_ColonyShipBlastoff(gv_activeCivilianShip);
        auto4E6D3ED0_val = gv_escortIndex;
        if (auto4E6D3ED0_val == 1) {
            gv_activeCivilianShip = UnitFromId(1403);
        }
        else if (auto4E6D3ED0_val == 2) {
            gv_activeCivilianShip = UnitFromId(698);
        }
        else if (auto4E6D3ED0_val == 4) {
            gv_activeCivilianShip = UnitFromId(693);
        }
        else {
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WaveOverShipBlastoffAutosave_Init () {
    gt_WaveOverShipBlastoffAutosave = TriggerCreate("gt_WaveOverShipBlastoffAutosave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave Over AI Upgrades/Tips/Environment
//--------------------------------------------------------------------------------------------------
bool gt_WaveOverAIUpgradesTipsEnvironment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_escortIndex == 1) && (gv_enoughColonistsSavedThisWave == true)) {
        gf_ResearchUpgradesForZerg(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergMissileWeaponsLevel1");
        TriggerExecute(gt_WaveOver01TipabouthowtoplaythismissionQ, true, false);
    }

    if ((gv_escortIndex == 2) && (gv_enoughColonistsSavedThisWave == true)) {
        gf_ResearchUpgradesForZerg(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergFlyerWeaponsLevel1");
        gf_ResearchUpgradesForZerg(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergMeleeWeaponsLevel1");
    }

    if ((gv_escortIndex == 3) && (gv_enoughColonistsSavedThisWave == true)) {
        gf_ResearchUpgradesForZerg(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergGroundArmorsLevel1");
        gf_ResearchUpgradesForZerg(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergFlyerArmorsLevel1");
        TriggerExecute(gt_WaveOver03TipaboutzergdroppodsQ, true, false);
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Sunrays", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
        GameSetLighting("AgriaSunset", 60.0);
    }

    if ((gv_escortIndex == 4) && (gv_enoughColonistsSavedThisWave == true)) {
        UnitIssueOrder(gv_crazyRidley, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(935)), c_orderQueueReplace);
        gf_ResearchUpgradesForZerg(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergMeleeWeaponsLevel2");
        gf_ResearchUpgradesForZerg(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergMissileWeaponsLevel2");
        TriggerExecute(gt_WaveOver04TipaboutnyduswormsQ, true, false);
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Sunrays", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
        GameSetLighting("AgriaNight", 60.0);
        Wait(30.0, c_timeGame);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Hanson01Night", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }

    if ((gv_escortIndex == 5) && (gv_enoughColonistsSavedThisWave == true)) {
        gf_ResearchUpgradesForZerg(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergFlyerWeaponsLevel2");
        TriggerExecute(gt_BackdoorSpoogeAmbience, true, false);
    }

    if ((gv_escortIndex == 6) && (gv_enoughColonistsSavedThisWave == true)) {
        gf_ResearchUpgradesForZerg(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ZergGroundArmorsLevel2");
        gf_ResearchUpgradesForZerg(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ZergFlyerArmorsLevel2");
        TriggerExecute(gt_BackdoorSpoogeAmbience, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WaveOverAIUpgradesTipsEnvironment_Init () {
    gt_WaveOverAIUpgradesTipsEnvironment = TriggerCreate("gt_WaveOverAIUpgradesTipsEnvironment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave Over 01 Tip about how to play this mission Q
//--------------------------------------------------------------------------------------------------
bool gt_WaveOver01TipabouthowtoplaythismissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson01Tychus00011", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Tychus00011", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("THanson01Raynor00030", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Raynor00030", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(1.0, c_timeGame);
    libCamp_gf_CreateTipFromConversationState("StoryTips|Hanson01_EscortStrat", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WaveOver01TipabouthowtoplaythismissionQ_Init () {
    gt_WaveOver01TipabouthowtoplaythismissionQ = TriggerCreate("gt_WaveOver01TipabouthowtoplaythismissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave Over 03 Tip about zerg drop pods Q
//--------------------------------------------------------------------------------------------------
bool gt_WaveOver03TipaboutzergdroppodsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson01Horner00037", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Horner00037", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(1.0, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WaveOver03TipaboutzergdroppodsQ_Init () {
    gt_WaveOver03TipaboutzergdroppodsQ = TriggerCreate("gt_WaveOver03TipaboutzergdroppodsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave Over 04 Tip about nydus worms Q
//--------------------------------------------------------------------------------------------------
bool gt_WaveOver04TipaboutnyduswormsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson01Horner00038", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Horner00038", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("THanson01Raynor00039", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Raynor00039", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(1.0, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WaveOver04TipaboutnyduswormsQ_Init () {
    gt_WaveOver04TipaboutnyduswormsQ = TriggerCreate("gt_WaveOver04TipaboutnyduswormsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colonist Killed
//--------------------------------------------------------------------------------------------------
bool gt_ColonistKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != gv_p1_USER))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p4_COLONISTS))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Civilian") || (UnitGetType(EventUnit()) == "CivilianFemale") || (UnitGetType(EventUnit()) == "ColonistTransport")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_colonistsKilled = (gv_colonistsKilled + 1);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        ObjectiveSetName(gv_objective_DontLetColonistsDie, (TextReplaceWord(StringExternal("Param/Value/2F86BD5F"), StringExternal("Param/Value/1C42E24F"), IntToText(gv_colonistsDeathQuota), c_stringReplaceAll, c_stringCase) + TextReplaceWord(StringExternal("Param/Value/87078404"), StringExternal("Param/Value/11147D32"), IntToText(gv_colonistsKilled), c_stringReplaceAll, c_stringCase)));
    }

    if ((UnitGetType(EventUnit()) == "ColonistTransport")) {
        gv_convoyTrucksKilled = (gv_convoyTrucksKilled + 1);
    }

    PingCreate(PlayerGroupSingle(gv_p1_USER), "PingSimple", UnitGetPosition(EventUnit()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0);
    PingSetScale(PingLastCreated(), 0.5);
    if ((gv_colonistsKilled >= 5) && (gv_colonistsKilled < 20) && (TriggerIsEnabled(gt_Colonistskeepdyingline1Q) == true) && (gv_hansonQQInhibitor == false)) {
        gv_hansonQQInhibitor = true;
        // Transmission - SoundLink("THanson01Hanson00031", 0)
        TriggerExecute(gt_Colonistskeepdyingline1Q, true, false);
    }

    if ((gv_colonistsKilled >= 20) && (gv_colonistsKilled < 35) && (TriggerIsEnabled(gt_Colonistskeepdyingline2Q) == true) && (gv_hansonQQInhibitor == false)) {
        gv_hansonQQInhibitor = true;
        // Transmission - SoundLink("THanson01Hanson00032", 0)
        TriggerExecute(gt_Colonistskeepdyingline2Q, true, false);
    }

    if ((gv_colonistsKilled >= 35) && (gv_colonistsKilled < 50) && (TriggerIsEnabled(gt_Colonistskeepdyingline3Q) == true) && (gv_hansonQQInhibitor == false)) {
        gv_hansonQQInhibitor = true;
        // Transmission - SoundLink("THanson01Hanson00033", 0)
        TriggerExecute(gt_Colonistskeepdyingline3Q, true, false);
    }

    if ((gv_colonistsKilled >= 50) && (TriggerIsEnabled(gt_Colonistskeepdyingline4Q) == true) && (gv_hansonQQInhibitor == false)) {
        gv_hansonQQInhibitor = true;
        // Transmission - SoundLink("THanson01Hanson00024", 0)
        TriggerExecute(gt_Colonistskeepdyingline4Q, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColonistKilled_Init () {
    gt_ColonistKilled = TriggerCreate("gt_ColonistKilled_Func");
    TriggerAddEventUnitDied(gt_ColonistKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Doomsday Zerg Attack Waves Announce Q
//--------------------------------------------------------------------------------------------------
bool gt_DoomsdayZergAttackWavesAnnounceQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson01Horner00002", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Horner00002", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("THanson01Raynor00003", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Raynor00003", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(1.0, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoomsdayZergAttackWavesAnnounceQ_Init () {
    gt_DoomsdayZergAttackWavesAnnounceQ = TriggerCreate("gt_DoomsdayZergAttackWavesAnnounceQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Doomsday Zerg Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_DoomsdayZergAttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_DoomsdayZergAttackWavesAnnounceQ, true, false);
    libNtve_gf_CreateUnitsAtPoint2(gv_doomsdayZergSpawnCount, "Mutalisk", 0, gv_p3_ZERG_LIGHTBLUE_SE, PointFromId(59));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_doomsdayZergUnitGroup);
    libNtve_gf_CreateUnitsAtPoint2(gv_doomsdayZergSpawnCount, "Mutalisk", 0, gv_p3_ZERG_LIGHTBLUE_SE, PointFromId(223));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_doomsdayZergUnitGroup);
    gv_doomsdayZergSpawnCount = (gv_doomsdayZergSpawnCount + 2);
    gv_doomsdayWavesSent += 1;
    if ((gv_doomsdayWavesSent >= 2)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Overseer", 0, gv_p3_ZERG_LIGHTBLUE_SE, PointFromId(59));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_doomsdayZergUnitGroup);
        libNtve_gf_CreateUnitsAtPoint2(1, "Overseer", 0, gv_p3_ZERG_LIGHTBLUE_SE, PointFromId(1652));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_doomsdayZergUnitGroup);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoomsdayZergAttackWaves_Init () {
    gt_DoomsdayZergAttackWaves = TriggerCreate("gt_DoomsdayZergAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Doomsday Zerg AI
//--------------------------------------------------------------------------------------------------
bool gt_DoomsdayZergAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto39DB8839_g;
    int auto39DB8839_u;
    unit auto39DB8839_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto39DB8839_g = gv_doomsdayZergUnitGroup;
    auto39DB8839_u = UnitGroupCount(auto39DB8839_g, c_unitCountAll);
    for (;; auto39DB8839_u -= 1) {
        auto39DB8839_var = UnitGroupUnitFromEnd(auto39DB8839_g, auto39DB8839_u);
        if (auto39DB8839_var == null) { break; }
        if ((UnitGetType(auto39DB8839_var) == "Mutalisk")) {
            UnitIssueOrder(auto39DB8839_var, OrderTargetingPoint(AbilityCommand("attack", 0), libNtve_gf_RandomPointBetweenPoints(PointFromId(808), PointFromId(1098))), c_orderQueueReplace);
        }

        if ((UnitGetType(auto39DB8839_var) == "Overseer")) {
            UnitIssueOrder(auto39DB8839_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(16))), c_orderQueueReplace);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoomsdayZergAI_Init () {
    gt_DoomsdayZergAI = TriggerCreate("gt_DoomsdayZergAI_Func");
    TriggerAddEventTimePeriodic(gt_DoomsdayZergAI, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player kills colonists
//--------------------------------------------------------------------------------------------------
bool gt_Playerkillscolonists_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p4_COLONISTS))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Civilian") || (UnitGetType(EventUnit()) == "CivilianFemale") || (UnitGetType(EventUnit()) == "ColonistTransport")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_colonistsKilled = (gv_colonistsKilled + 1);
    if ((UnitGetType(EventUnit()) == "ColonistTransport")) {
        gv_convoyTrucksKilled = (gv_convoyTrucksKilled + 1);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        ObjectiveSetName(gv_objective_DontLetColonistsDie, (TextReplaceWord(StringExternal("Param/Value/5E1B1335"), StringExternal("Param/Value/C00EA670"), IntToText(gv_colonistsDeathQuota), c_stringReplaceAll, c_stringCase) + TextReplaceWord(StringExternal("Param/Value/D744ABDE"), StringExternal("Param/Value/23575D29"), IntToText(gv_colonistsKilled), c_stringReplaceAll, c_stringCase)));
    }

    if ((TriggerGetExecCount(gt_PlayerkillscolonistsQ) == 0)) {
        TriggerExecute(gt_PlayerkillscolonistsQ, true, false);
    }
    else {
        TriggerExecute(gt_PlayerkillscolonistsAgainQ, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Playerkillscolonists_Init () {
    gt_Playerkillscolonists = TriggerCreate("gt_Playerkillscolonists_Func");
    TriggerAddEventUnitDied(gt_Playerkillscolonists, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player kills colonists Q
//--------------------------------------------------------------------------------------------------
bool gt_PlayerkillscolonistsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson01Hanson00012", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Hanson00012", -1), c_transmissionDurationAdd, 0.0, true);
    Wait(1.0, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    Wait(2.0, c_timeGame);
    TriggerEnable(gt_PlayerkillscolonistsAgainQ, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerkillscolonistsQ_Init () {
    gt_PlayerkillscolonistsQ = TriggerCreate("gt_PlayerkillscolonistsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player kills colonists Again Q
//--------------------------------------------------------------------------------------------------
bool gt_PlayerkillscolonistsAgainQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson01Hanson00044", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Hanson00044", -1), c_transmissionDurationAdd, 0.0, true);
    Wait(1.0, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerkillscolonistsAgainQ_Init () {
    gt_PlayerkillscolonistsAgainQ = TriggerCreate("gt_PlayerkillscolonistsAgainQ_Func");
    TriggerEnable(gt_PlayerkillscolonistsAgainQ, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player kills colonist homes Q
//--------------------------------------------------------------------------------------------------
bool gt_PlayerkillscolonisthomesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Hut"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p4_COLONISTS))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson01Hanson00014", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Hanson00014", -1), c_transmissionDurationAdd, 0.0, true);
    Wait(1.0, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerkillscolonisthomesQ_Init () {
    gt_PlayerkillscolonisthomesQ = TriggerCreate("gt_PlayerkillscolonisthomesQ_Func");
    TriggerAddEventUnitDied(gt_PlayerkillscolonisthomesQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colonists keep dying line 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_Colonistskeepdyingline1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson01Hanson00031", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Hanson00031", -1), c_transmissionDurationAdd, 0.0, true);
    Wait(1.0, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Colonistskeepdyingline1Q_Init () {
    gt_Colonistskeepdyingline1Q = TriggerCreate("gt_Colonistskeepdyingline1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colonists keep dying line 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_Colonistskeepdyingline2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson01Hanson00032", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Hanson00032", -1), c_transmissionDurationAdd, 0.0, true);
    Wait(1.0, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Colonistskeepdyingline2Q_Init () {
    gt_Colonistskeepdyingline2Q = TriggerCreate("gt_Colonistskeepdyingline2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colonists keep dying line 3 Q
//--------------------------------------------------------------------------------------------------
bool gt_Colonistskeepdyingline3Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson01Hanson00033", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Hanson00033", -1), c_transmissionDurationAdd, 0.0, true);
    Wait(1.0, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Colonistskeepdyingline3Q_Init () {
    gt_Colonistskeepdyingline3Q = TriggerCreate("gt_Colonistskeepdyingline3Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colonists keep dying line 4 Q
//--------------------------------------------------------------------------------------------------
bool gt_Colonistskeepdyingline4Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson01Hanson00024", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Hanson00024", -1), c_transmissionDurationAdd, 0.0, true);
    Wait(1.0, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Colonistskeepdyingline4Q_Init () {
    gt_Colonistskeepdyingline4Q = TriggerCreate("gt_Colonistskeepdyingline4Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat - Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_missionPhase == ge_PRESET_MissionPhase_Escort))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, 0), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/24E1C1CC"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat - Tactical Phase
//--------------------------------------------------------------------------------------------------
bool gt_DefeatTacticalPhase_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_missionPhase == ge_PRESET_MissionPhase_Tactical))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), 0), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/BFCBA162"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatTacticalPhase_Init () {
    gt_DefeatTacticalPhase = TriggerCreate("gt_DefeatTacticalPhase_Func");
    TriggerEnable(gt_DefeatTacticalPhase, false);
    TriggerAddEventTimePeriodic(gt_DefeatTacticalPhase, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat - Colony Ship Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatColonyShipDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/81E5BD63"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatColonyShipDead_Init () {
    gt_DefeatColonyShipDead = TriggerCreate("gt_DefeatColonyShipDead_Func");
    TriggerAddEventUnitDied(gt_DefeatColonyShipDead, UnitRefFromUnit(UnitFromId(1483)));
    TriggerAddEventUnitDied(gt_DefeatColonyShipDead, UnitRefFromUnit(UnitFromId(1403)));
    TriggerAddEventUnitDied(gt_DefeatColonyShipDead, UnitRefFromUnit(UnitFromId(698)));
    TriggerAddEventUnitDied(gt_DefeatColonyShipDead, UnitRefFromUnit(UnitFromId(693)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat - Colonist Huts Die
//--------------------------------------------------------------------------------------------------
bool gt_DefeatColonistHutsDie_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitGroupIsDead(gv_civilianSpawners) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/FE1E0156"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatColonistHutsDie_Init () {
    gt_DefeatColonistHutsDie = TriggerCreate("gt_DefeatColonistHutsDie_Func");
    TriggerAddEventUnitDied(gt_DefeatColonistHutsDie, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat - Too Many Colonists Die
//--------------------------------------------------------------------------------------------------
bool gt_DefeatTooManyColonistsDie_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1))) {
            return false;
        }

        if (!((gv_colonistsKilled >= gv_colonistsDeathQuota))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveSetState(gv_objective_DontLetColonistsDie, c_objectiveStateFailed);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/7206DCA9"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatTooManyColonistsDie_Init () {
    gt_DefeatTooManyColonistsDie = TriggerCreate("gt_DefeatTooManyColonistsDie_Func");
    TriggerAddEventTimePeriodic(gt_DefeatTooManyColonistsDie, 0.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Player Saves Enough Colonists
//--------------------------------------------------------------------------------------------------
bool gt_VictoryPlayerSavesEnoughColonists_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_Timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_Timer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((gv_colonistsSaved >= gv_colonistsSaveQuota))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerStart(lv_Timer, 7.0, false, c_timeGame);
    gv_gameOver = true;
    TriggerEnable(gt_DefeatColonyShipDead, false);
    TriggerEnable(gt_DefeatColonistHutsDie, false);
    TriggerEnable(gt_DefeatBaseDead, false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(1403), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(698), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(693), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(1483), true);
    while (!(((UnitGroupCount(gv_colonistsOnTheMove, c_unitCountAlive) == 0) || (TimerGetRemaining(lv_Timer) == 0.0)))) {
        Wait(0.1, c_timeGame);
    }
    TriggerExecute(gt_MainObjectiveSaveColonistsComplete, true, false);
    TriggerExecute(gt_VictoryPlayerSavesEnoughColonistsQ, true, true);
    gv_structuresLost = (PlayerScoreValueGetAsInt(gv_p1_USER, "StructuresLostCount") + PlayerScoreValueGetAsInt(gv_p1_USER, "StructuresFriendlyFireCount") + PlayerScoreValueGetAsInt(gv_p1_USER, "StructuresSalvagedCount"));
    libCamp_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryPlayerSavesEnoughColonists_Init () {
    gt_VictoryPlayerSavesEnoughColonists = TriggerCreate("gt_VictoryPlayerSavesEnoughColonists_Func");
    TriggerAddEventTimePeriodic(gt_VictoryPlayerSavesEnoughColonists, 0.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Player Saves Enough Colonists Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryPlayerSavesEnoughColonistsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA19D92B5_g;
    int autoA19D92B5_u;
    unit autoA19D92B5_var;
    unitgroup auto0AE8E4F4_g;
    int auto0AE8E4F4_u;
    unit auto0AE8E4F4_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson01Raynor00019", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Raynor00019", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    autoA19D92B5_g = UnitGroup("PathingBlocker1x1", c_playerAny, RegionFromId(50), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA19D92B5_u = UnitGroupCount(autoA19D92B5_g, c_unitCountAll);
    for (;; autoA19D92B5_u -= 1) {
        autoA19D92B5_var = UnitGroupUnitFromEnd(autoA19D92B5_g, autoA19D92B5_u);
        if (autoA19D92B5_var == null) { break; }
        UnitRemove(autoA19D92B5_var);
    }
    auto0AE8E4F4_g = UnitGroup("PathingBlocker2x2", c_playerAny, RegionFromId(50), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0AE8E4F4_u = UnitGroupCount(auto0AE8E4F4_g, c_unitCountAll);
    for (;; auto0AE8E4F4_u -= 1) {
        auto0AE8E4F4_var = UnitGroupUnitFromEnd(auto0AE8E4F4_g, auto0AE8E4F4_u);
        if (auto0AE8E4F4_var == null) { break; }
        UnitRemove(auto0AE8E4F4_var);
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryPlayerSavesEnoughColonistsQ_Init () {
    gt_VictoryPlayerSavesEnoughColonistsQ = TriggerCreate("gt_VictoryPlayerSavesEnoughColonistsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitfilter lv_enemyZergBuildings;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyZergBuildings = UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1) && (ObjectiveGetState(gv_objective_ReachHanson) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objective_SaveColonists) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_bonusObjectiveCollectChrysalis) == c_objectiveStateCompleted)) {
        AchievementAward(gv_p1_USER, "THanson01_1");
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1) && (ObjectiveGetState(gv_objective_ReachHanson) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objective_SaveColonists) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objective_DontLetColonistsDie) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_bonusObjectiveCollectChrysalis) == c_objectiveStateCompleted)) {
        AchievementAward(gv_p1_USER, "THanson01_1");
    }

    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_colonistsKilled == 0)) {
        AchievementAward(gv_p1_USER, "THanson01_2");
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1) && (gv_structuresLost == 0)) {
        AchievementAward(gv_p1_USER, "THanson01_3");
    }

    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (UnitGroupCount(UnitGroup(null, gv_p2_ZERG_ORANGE_NW, RegionEntireMap(), lv_enemyZergBuildings, 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup(null, gv_p3_ZERG_LIGHTBLUE_SE, RegionEntireMap(), lv_enemyZergBuildings, 0), c_unitCountAlive) == 0)) {
        AchievementAward(gv_p1_USER, "Anniversary_THanson01");
        TriggerDebugOutput(1, StringExternal("Param/Value/092F1A5C"), false);
    }

    VictoryPanelAddAchievement("THanson01_1");
    VictoryPanelAddAchievement("THanson01_2");
    VictoryPanelAddAchievement("THanson01_3");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/AC516A9E"), IntToText(gv_colonistsKilled));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/AB1CC372"), (IntToText((gv_convoyTrucksSent - gv_convoyTrucksKilled)) + StringExternal("Param/Value/B2EFBC7C") + IntToText(gv_convoyTrucksSent)));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/8A21BFFA"), IntToText(gv_structuresLost));
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/A92AB29D"), (IntToText(gv_bonusObjectiveCollectChrysalisFound) + StringExternal("Param/Value/4B1EACA7")));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/054C9CD8"), IntToText(gv_bonusObjectiveCollectChrysalisFound));
    libCamp_gf_EndCampaignMission(gv_p1_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    libCamp_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_p1_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_EndCampaignMission(gv_p1_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_p1_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Main Objective - Reach Hanson - Create
//--------------------------------------------------------------------------------------------------
bool gt_MainObjectiveReachHansonCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveCreate(StringExternal("Param/Value/E2D2B8C2"), StringExternal("Param/Value/75A746D2"), c_objectiveStateActive, true);
    gv_objective_ReachHanson = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_THanson01Objective1, ObjectiveLastCreated(), StringExternal("Param/Value/36494D64"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MainObjectiveReachHansonCreate_Init () {
    gt_MainObjectiveReachHansonCreate = TriggerCreate("gt_MainObjectiveReachHansonCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Main Objective - Reach Hanson - Discover Q
//--------------------------------------------------------------------------------------------------
bool gt_MainObjectiveReachHansonDiscoverQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MainObjectiveReachHansonCreate, true, false);
    VisExploreArea(gv_p1_USER, RegionFromId(34), true, false);
    ObjectiveSetState(gv_objective_ReachHanson, c_objectiveStateActive);
    Wait(4.0, c_timeReal);
    SoundPlay(SoundLink("UI_TerranPing", 0), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(1638), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/7D1971F1"));
    gv_objPing_ReachHanson = PingLastCreated();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MainObjectiveReachHansonDiscoverQ_Init () {
    gt_MainObjectiveReachHansonDiscoverQ = TriggerCreate("gt_MainObjectiveReachHansonDiscoverQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Main Objective - Reach Hanson - Complete
//--------------------------------------------------------------------------------------------------
bool gt_MainObjectiveReachHansonComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_MainObjectiveReachHansonCreate, true, false);
    ObjectiveSetState(gv_objective_ReachHanson, c_objectiveStateCompleted);
    PingDestroy(gv_objPing_ReachHanson);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MainObjectiveReachHansonComplete_Init () {
    gt_MainObjectiveReachHansonComplete = TriggerCreate("gt_MainObjectiveReachHansonComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Main Objective - Save Colonists - Create
//--------------------------------------------------------------------------------------------------
bool gt_MainObjectiveSaveColonistsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveCreate((StringExternal("Param/Value/DA0F59F5") + IntToText(gv_colonistsSaved) + StringExternal("Param/Value/02AC2B85") + IntToText(gv_colonistsSaveQuota) + StringExternal("Param/Value/9D657228")), StringExternal("Param/Value/2A5C2427"), c_objectiveStateActive, true);
    gv_objective_SaveColonists = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_THanson01Objective2, ObjectiveLastCreated(), StringExternal("Param/Value/08EAF061"));
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        ObjectiveCreate((TextReplaceWord(StringExternal("Param/Value/16FE1334"), StringExternal("Param/Value/8B5EA2CC"), IntToText(gv_colonistsDeathQuota), c_stringReplaceAll, c_stringCase) + TextReplaceWord(StringExternal("Param/Value/E0B8EF62"), StringExternal("Param/Value/BEDB5804"), IntToText(gv_colonistsKilled), c_stringReplaceAll, c_stringCase)), StringExternal("Param/Value/9A73EBCA"), c_objectiveStateActive, true);
        gv_objective_DontLetColonistsDie = ObjectiveLastCreated();
        libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_THanson01Objective4, ObjectiveLastCreated(), StringExternal("Param/Value/0F66C14F"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MainObjectiveSaveColonistsCreate_Init () {
    gt_MainObjectiveSaveColonistsCreate = TriggerCreate("gt_MainObjectiveSaveColonistsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Main Objective - Save Colonists - Discover Q
//--------------------------------------------------------------------------------------------------
bool gt_MainObjectiveSaveColonistsDiscoverQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MainObjectiveSaveColonistsCreate, true, false);
    ObjectiveSetState(gv_objective_SaveColonists, c_objectiveStateActive);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MainObjectiveSaveColonistsDiscoverQ_Init () {
    gt_MainObjectiveSaveColonistsDiscoverQ = TriggerCreate("gt_MainObjectiveSaveColonistsDiscoverQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Main Objective - Save Colonists - Complete
//--------------------------------------------------------------------------------------------------
bool gt_MainObjectiveSaveColonistsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_MainObjectiveSaveColonistsCreate, true, false);
    ObjectiveSetState(gv_objective_SaveColonists, c_objectiveStateCompleted);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        ObjectiveSetState(gv_objective_DontLetColonistsDie, c_objectiveStateCompleted);
    }

    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MainObjectiveSaveColonistsComplete_Init () {
    gt_MainObjectiveSaveColonistsComplete = TriggerCreate("gt_MainObjectiveSaveColonistsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Research Objective - Chrysalis - Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ResearchObjectiveChrysalisCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate((StringExternal("Param/Value/3851E49D") + IntToText(gv_bonusObjectiveCollectChrysalisFound) + StringExternal("Param/Value/42B56155")), StringExternal("Param/Value/05BF0798"), c_objectiveStateActive, false);
    gv_bonusObjectiveCollectChrysalis = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_THanson01Objective3, ObjectiveLastCreated(), StringExternal("Param/Value/D82AA183"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResearchObjectiveChrysalisCreateQ_Init () {
    gt_ResearchObjectiveChrysalisCreateQ = TriggerCreate("gt_ResearchObjectiveChrysalisCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Research Objective - Chrysalis - Update
//--------------------------------------------------------------------------------------------------
bool gt_ResearchObjectiveChrysalisUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "ChrysalisEgg"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ResearchObjectiveChrysalisCreateQ, true, false);
    libCamp_gf_DisplayResearchPointsGiventoPlayer(libCamp_ge_StoryResearchObject_ResearchObjectFindChrysalisDNA, EventUnit(), gv_p1_USER);
    UnitKill(EventUnit());
    gv_bonusObjectiveCollectChrysalisFound += 1;
    ObjectiveSetName(gv_bonusObjectiveCollectChrysalis, (StringExternal("Param/Value/D8E396B5") + IntToText(gv_bonusObjectiveCollectChrysalisFound) + StringExternal("Param/Value/4AC47548")));
    if ((gv_bonusObjectiveCollectChrysalisFound == gv_bonusObjectiveCollectChrysalisNeeded)) {
        TriggerExecute(gt_ResearchObjectiveChrysalisComplete, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResearchObjectiveChrysalisUpdate_Init () {
    gt_ResearchObjectiveChrysalisUpdate = TriggerCreate("gt_ResearchObjectiveChrysalisUpdate_Func");
    TriggerAddEventUnitAbility(gt_ResearchObjectiveChrysalisUpdate, null, AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Research Objective - Chrysalis - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ResearchObjectiveChrysalisComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ResearchObjectiveChrysalisCreateQ, true, false);
    ObjectiveSetState(gv_bonusObjectiveCollectChrysalis, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResearchObjectiveChrysalisComplete_Init () {
    gt_ResearchObjectiveChrysalisComplete = TriggerCreate("gt_ResearchObjectiveChrysalisComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_inCinematic = true;
    gv_gameOver = true;
    gv_briefingCinematicPlaying = true;
    TriggerStop(gt_StartHansonEscortPhase);
    TriggerStop(gt_ConvoySpawned);
    TriggerStop(gt_MarineConstantRespawn);
    TriggerStop(gt_StartGame);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerExecute(gt_BriefingSetup, true, true);
    TriggerExecute(gt_BriefingAction02HansonsColony, true, true);
    TriggerExecute(gt_BriefingAction01Road, true, true);
    TriggerExecute(gt_BriefingAction03Fighting, true, true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UnitPauseAll(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Setup
//--------------------------------------------------------------------------------------------------
bool gt_BriefingSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB12CBA3E_g;
    int autoB12CBA3E_u;
    unit autoB12CBA3E_var;
    unitgroup auto19A793B6_g;
    int auto19A793B6_u;
    unit auto19A793B6_var;
    unitgroup auto45FB46FA_g;
    int auto45FB46FA_u;
    unit auto45FB46FA_var;
    unitgroup auto79F85295_g;
    int auto79F85295_u;
    unit auto79F85295_var;
    unitgroup autoD626A38E_g;
    int autoD626A38E_u;
    unit autoD626A38E_var;
    unitgroup auto976DEF7F_g;
    int auto976DEF7F_u;
    unit auto976DEF7F_var;
    unitgroup autoACDD3C06_g;
    int autoACDD3C06_u;
    unit autoACDD3C06_var;
    unitgroup auto7DA34128_g;
    int auto7DA34128_u;
    unit auto7DA34128_var;
    unitgroup autoE727B04A_g;
    int autoE727B04A_u;
    unit autoE727B04A_var;
    unitgroup auto0F0F1029_g;
    int auto0F0F1029_u;
    unit auto0F0F1029_var;
    unitgroup auto819CA525_g;
    int auto819CA525_u;
    unit auto819CA525_var;
    unitgroup auto2D98D8C8_g;
    int auto2D98D8C8_u;
    unit auto2D98D8C8_var;
    unitgroup auto85C6499E_g;
    int auto85C6499E_u;
    unit auto85C6499E_var;
    unitgroup auto852CA24B_g;
    int auto852CA24B_u;
    unit auto852CA24B_var;
    unitgroup auto9597CF2B_g;
    int auto9597CF2B_u;
    unit auto9597CF2B_var;
    unitgroup autoA279A10E_g;
    int autoA279A10E_u;
    unit autoA279A10E_var;
    unitgroup autoBCAD920A_g;
    int autoBCAD920A_u;
    unit autoBCAD920A_var;
    unitgroup auto62F96B4D_g;
    int auto62F96B4D_u;
    unit auto62F96B4D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(gv_p2_ZERG_ORANGE_NW, "hydraliskspeed", 1);
    TechTreeUpgradeAddLevel(gv_p2_ZERG_ORANGE_NW, "zerglingmovementspeed", 1);
    GameTimeOfDayPause(true);
    AITimePause(true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    autoB12CBA3E_g = UnitGroup("Zergling", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB12CBA3E_u = UnitGroupCount(autoB12CBA3E_g, c_unitCountAll);
    for (;; autoB12CBA3E_u -= 1) {
        autoB12CBA3E_var = UnitGroupUnitFromEnd(autoB12CBA3E_g, autoB12CBA3E_u);
        if (autoB12CBA3E_var == null) { break; }
        UnitRemove(autoB12CBA3E_var);
    }
    auto19A793B6_g = UnitGroup("Marine", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto19A793B6_u = UnitGroupCount(auto19A793B6_g, c_unitCountAll);
    for (;; auto19A793B6_u -= 1) {
        auto19A793B6_var = UnitGroupUnitFromEnd(auto19A793B6_g, auto19A793B6_u);
        if (auto19A793B6_var == null) { break; }
        UnitRemove(auto19A793B6_var);
    }
    auto45FB46FA_g = UnitGroup("Civilian", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto45FB46FA_u = UnitGroupCount(auto45FB46FA_g, c_unitCountAll);
    for (;; auto45FB46FA_u -= 1) {
        auto45FB46FA_var = UnitGroupUnitFromEnd(auto45FB46FA_g, auto45FB46FA_u);
        if (auto45FB46FA_var == null) { break; }
        UnitRemove(auto45FB46FA_var);
    }
    auto79F85295_g = UnitGroup("CivilianFemale", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto79F85295_u = UnitGroupCount(auto79F85295_g, c_unitCountAll);
    for (;; auto79F85295_u -= 1) {
        auto79F85295_var = UnitGroupUnitFromEnd(auto79F85295_g, auto79F85295_u);
        if (auto79F85295_var == null) { break; }
        UnitRemove(auto79F85295_var);
    }
    autoD626A38E_g = UnitGroup("ColonistTransport", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD626A38E_u = UnitGroupCount(autoD626A38E_g, c_unitCountAll);
    for (;; autoD626A38E_u -= 1) {
        autoD626A38E_var = UnitGroupUnitFromEnd(autoD626A38E_g, autoD626A38E_u);
        if (autoD626A38E_var == null) { break; }
        UnitRemove(autoD626A38E_var);
    }
    auto976DEF7F_g = UnitGroup(null, gv_p2_ZERG_ORANGE_NW, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto976DEF7F_u = UnitGroupCount(auto976DEF7F_g, c_unitCountAll);
    for (;; auto976DEF7F_u -= 1) {
        auto976DEF7F_var = UnitGroupUnitFromEnd(auto976DEF7F_g, auto976DEF7F_u);
        if (auto976DEF7F_var == null) { break; }
        UnitRemove(auto976DEF7F_var);
    }
    autoACDD3C06_g = UnitGroup(null, gv_p3_ZERG_LIGHTBLUE_SE, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoACDD3C06_u = UnitGroupCount(autoACDD3C06_g, c_unitCountAll);
    for (;; autoACDD3C06_u -= 1) {
        autoACDD3C06_var = UnitGroupUnitFromEnd(autoACDD3C06_g, autoACDD3C06_u);
        if (autoACDD3C06_var == null) { break; }
        UnitRemove(autoACDD3C06_var);
    }
    auto7DA34128_g = UnitGroup(null, gv_p5_ZERG_TACTICALPHASE, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7DA34128_u = UnitGroupCount(auto7DA34128_g, c_unitCountAll);
    for (;; auto7DA34128_u -= 1) {
        auto7DA34128_var = UnitGroupUnitFromEnd(auto7DA34128_g, auto7DA34128_u);
        if (auto7DA34128_var == null) { break; }
        UnitRemove(auto7DA34128_var);
    }
    autoE727B04A_g = UnitGroup("ChrysalisEgg", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE727B04A_u = UnitGroupCount(autoE727B04A_g, c_unitCountAll);
    for (;; autoE727B04A_u -= 1) {
        autoE727B04A_var = UnitGroupUnitFromEnd(autoE727B04A_g, autoE727B04A_u);
        if (autoE727B04A_var == null) { break; }
        UnitRemove(autoE727B04A_var);
    }
    UnitRemove(UnitFromId(2508));
    libNtve_gf_CreateUnitsAtPoint2(1, "Bunker", 0, gv_p4_COLONISTS, PointFromId(2659));
    gv_briefingBunker = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, 1, PointFromId(2660));
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, 1, PointFromId(2661));
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, 1, PointFromId(2662));
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, 1, PointFromId(2663));
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, 1, PointFromId(2664));
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, 1, PointFromId(2665));
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, 1, PointFromId(2579));
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, 1, PointFromId(2580));
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, 1, PointFromId(2578));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, 1, PointFromId(2667));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, 1, PointFromId(2669));
    libNtve_gf_CreateUnitsAtPoint2(2, "Marine", 0, 1, PointFromId(2668));
    libNtve_gf_CreateUnitsAtPoint2(1, "ColonistTransport", 0, 1, PointFromId(2652));
    libNtve_gf_CreateUnitsAtPoint2(2, "CivilianFemale", 0, 1, PointFromId(2657));
    libNtve_gf_CreateUnitsAtPoint2(1, "Civilian", 0, 1, PointFromId(2653));
    libNtve_gf_CreateUnitsAtPoint2(2, "CivilianFemale", 0, 1, PointFromId(2650));
    libNtve_gf_CreateUnitsAtPoint2(2, "Civilian", 0, 1, PointFromId(2649));
    libNtve_gf_CreateUnitsAtPoint2(2, "CivilianFemale", 0, 1, PointFromId(2655));
    libNtve_gf_CreateUnitsAtPoint2(3, "Civilian", 0, 1, PointFromId(2651));
    libNtve_gf_CreateUnitsAtPoint2(2, "Civilian", 0, 1, PointFromId(2654));
    libNtve_gf_CreateUnitsAtPoint2(2, "CivilianFemale", 0, 1, PointFromId(2656));
    UnitSetOwner(UnitFromId(698), gv_p4_COLONISTS, true);
    auto0F0F1029_g = UnitGroup("AutoTurret", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0F0F1029_u = UnitGroupCount(auto0F0F1029_g, c_unitCountAll);
    for (;; auto0F0F1029_u -= 1) {
        auto0F0F1029_var = UnitGroupUnitFromEnd(auto0F0F1029_g, auto0F0F1029_u);
        if (auto0F0F1029_var == null) { break; }
        UnitSetOwner(auto0F0F1029_var, gv_p4_COLONISTS, true);
        libNtve_gf_ChangeUnitDamage(auto0F0F1029_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    }
    auto819CA525_g = UnitGroup("Marine", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto819CA525_u = UnitGroupCount(auto819CA525_g, c_unitCountAll);
    for (;; auto819CA525_u -= 1) {
        auto819CA525_var = UnitGroupUnitFromEnd(auto819CA525_g, auto819CA525_u);
        if (auto819CA525_var == null) { break; }
        UnitSetOwner(auto819CA525_var, gv_p4_COLONISTS, true);
    }
    auto2D98D8C8_g = UnitGroup("Civilian", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2D98D8C8_u = UnitGroupCount(auto2D98D8C8_g, c_unitCountAll);
    for (;; auto2D98D8C8_u -= 1) {
        auto2D98D8C8_var = UnitGroupUnitFromEnd(auto2D98D8C8_g, auto2D98D8C8_u);
        if (auto2D98D8C8_var == null) { break; }
        UnitSetOwner(auto2D98D8C8_var, gv_p4_COLONISTS, true);
        UnitSetPropertyFixed(auto2D98D8C8_var, c_unitPropLife, 1.0);
        UnitBehaviorAdd(auto2D98D8C8_var, "Hustle", auto2D98D8C8_var, 1);
    }
    auto85C6499E_g = UnitGroup("CivilianFemale", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto85C6499E_u = UnitGroupCount(auto85C6499E_g, c_unitCountAll);
    for (;; auto85C6499E_u -= 1) {
        auto85C6499E_var = UnitGroupUnitFromEnd(auto85C6499E_g, auto85C6499E_u);
        if (auto85C6499E_var == null) { break; }
        UnitSetOwner(auto85C6499E_var, gv_p4_COLONISTS, true);
        UnitSetPropertyFixed(auto85C6499E_var, c_unitPropLife, 1.0);
        UnitBehaviorAdd(auto85C6499E_var, "Hustle", auto85C6499E_var, 1);
    }
    auto852CA24B_g = UnitGroup("ColonistTransport", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto852CA24B_u = UnitGroupCount(auto852CA24B_g, c_unitCountAll);
    for (;; auto852CA24B_u -= 1) {
        auto852CA24B_var = UnitGroupUnitFromEnd(auto852CA24B_g, auto852CA24B_u);
        if (auto852CA24B_var == null) { break; }
        UnitSetOwner(auto852CA24B_var, gv_p4_COLONISTS, true);
        UnitSetPropertyFixed(auto852CA24B_var, c_unitPropLife, 10.0);
    }
    auto9597CF2B_g = UnitGroup("Zergling", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9597CF2B_u = UnitGroupCount(auto9597CF2B_g, c_unitCountAll);
    for (;; auto9597CF2B_u -= 1) {
        auto9597CF2B_var = UnitGroupUnitFromEnd(auto9597CF2B_g, auto9597CF2B_u);
        if (auto9597CF2B_var == null) { break; }
        UnitSetOwner(auto9597CF2B_var, gv_p2_ZERG_ORANGE_NW, true);
        UnitBehaviorAdd(auto9597CF2B_var, "ScanRangeBonus", auto9597CF2B_var, 1);
    }
    autoA279A10E_g = UnitGroup("ZerglingBurrowed", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA279A10E_u = UnitGroupCount(autoA279A10E_g, c_unitCountAll);
    for (;; autoA279A10E_u -= 1) {
        autoA279A10E_var = UnitGroupUnitFromEnd(autoA279A10E_g, autoA279A10E_u);
        if (autoA279A10E_var == null) { break; }
        UnitSetOwner(autoA279A10E_var, gv_p2_ZERG_ORANGE_NW, true);
        UnitBehaviorAdd(autoA279A10E_var, "ScanRangeBonus", autoA279A10E_var, 1);
    }
    autoBCAD920A_g = UnitGroup("Hydralisk", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBCAD920A_u = UnitGroupCount(autoBCAD920A_g, c_unitCountAll);
    for (;; autoBCAD920A_u -= 1) {
        autoBCAD920A_var = UnitGroupUnitFromEnd(autoBCAD920A_g, autoBCAD920A_u);
        if (autoBCAD920A_var == null) { break; }
        UnitSetOwner(autoBCAD920A_var, gv_p2_ZERG_ORANGE_NW, true);
        UnitBehaviorAdd(autoBCAD920A_var, "ScanRangeBonus", autoBCAD920A_var, 1);
    }
    auto62F96B4D_g = UnitGroup("Mutalisk", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto62F96B4D_u = UnitGroupCount(auto62F96B4D_g, c_unitCountAll);
    for (;; auto62F96B4D_u -= 1) {
        auto62F96B4D_var = UnitGroupUnitFromEnd(auto62F96B4D_g, auto62F96B4D_u);
        if (auto62F96B4D_var == null) { break; }
        UnitSetOwner(auto62F96B4D_var, gv_p2_ZERG_ORANGE_NW, true);
        UnitBehaviorAdd(auto62F96B4D_var, "ScanRangeBonus", auto62F96B4D_var, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingSetup_Init () {
    gt_BriefingSetup = TriggerCreate("gt_BriefingSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Action 01 - Road
//--------------------------------------------------------------------------------------------------
bool gt_BriefingAction01Road_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vanguardMarines;

    // Automatic Variable Declarations
    unitgroup auto39CC9396_g;
    int auto39CC9396_u;
    unit auto39CC9396_var;
    unitgroup autoEE2F470C_g;
    int autoEE2F470C_u;
    unit autoEE2F470C_var;
    unitgroup auto9D8363D4_g;
    int auto9D8363D4_u;
    unit auto9D8363D4_var;
    unitgroup auto7CDA312B_g;
    int auto7CDA312B_u;
    unit auto7CDA312B_var;
    unitgroup auto2FCB8739_g;
    int auto2FCB8739_u;
    unit auto2FCB8739_var;

    // Variable Initialization
    lv_vanguardMarines = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "ColonistTransport", 0, gv_p4_COLONISTS, PointFromId(2571));
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p4_COLONISTS, PointFromId(2572));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p4_COLONISTS, PointFromId(2589));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p4_COLONISTS, PointFromId(2587));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p4_COLONISTS, PointFromId(2588));
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p2_ZERG_ORANGE_NW, PointFromId(2590));
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p2_ZERG_ORANGE_NW, PointFromId(2591));
    libNtve_gf_CreateUnitsAtPoint2(2, "Zergling", 0, gv_p2_ZERG_ORANGE_NW, PointFromId(2592));
    libNtve_gf_CreateUnitsAtPoint2(2, "Zergling", 0, gv_p2_ZERG_ORANGE_NW, PointFromId(2593));
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p2_ZERG_ORANGE_NW, PointFromId(2646));
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p2_ZERG_ORANGE_NW, PointFromId(2647));
    auto39CC9396_g = UnitGroup(null, c_playerAny, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto39CC9396_u = UnitGroupCount(auto39CC9396_g, c_unitCountAll);
    for (;; auto39CC9396_u -= 1) {
        auto39CC9396_var = UnitGroupUnitFromEnd(auto39CC9396_g, auto39CC9396_u);
        if (auto39CC9396_var == null) { break; }
        UnitRemove(auto39CC9396_var);
    }
    autoEE2F470C_g = UnitGroup(null, c_playerAny, RegionFromId(44), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEE2F470C_u = UnitGroupCount(autoEE2F470C_g, c_unitCountAll);
    for (;; autoEE2F470C_u -= 1) {
        autoEE2F470C_var = UnitGroupUnitFromEnd(autoEE2F470C_g, autoEE2F470C_u);
        if (autoEE2F470C_var == null) { break; }
        UnitRemove(autoEE2F470C_var);
    }
    auto9D8363D4_g = UnitGroup(null, gv_p2_ZERG_ORANGE_NW, RegionFromId(30), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9D8363D4_u = UnitGroupCount(auto9D8363D4_g, c_unitCountAll);
    for (;; auto9D8363D4_u -= 1) {
        auto9D8363D4_var = UnitGroupUnitFromEnd(auto9D8363D4_g, auto9D8363D4_u);
        if (auto9D8363D4_var == null) { break; }
        UnitIssueOrder(auto9D8363D4_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2624)), c_orderQueueReplace);
    }
    auto7CDA312B_g = UnitGroup("Marine", c_playerAny, RegionFromId(38), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7CDA312B_u = UnitGroupCount(auto7CDA312B_g, c_unitCountAll);
    for (;; auto7CDA312B_u -= 1) {
        auto7CDA312B_var = UnitGroupUnitFromEnd(auto7CDA312B_g, auto7CDA312B_u);
        if (auto7CDA312B_var == null) { break; }
        UnitIssueOrder(auto7CDA312B_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(auto7CDA312B_var), 6.0, 60.0)), c_orderQueueReplace);
    }
    auto2FCB8739_g = UnitGroup("ColonistTransport", c_playerAny, RegionFromId(38), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2FCB8739_u = UnitGroupCount(auto2FCB8739_g, c_unitCountAll);
    for (;; auto2FCB8739_u -= 1) {
        auto2FCB8739_var = UnitGroupUnitFromEnd(auto2FCB8739_g, auto2FCB8739_u);
        if (auto2FCB8739_var == null) { break; }
        UnitIssueOrder(auto2FCB8739_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(42)), c_orderQueueReplace);
        UnitIssueOrder(auto2FCB8739_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1)), c_orderQueueAddToEnd);
        UnitIssueOrder(auto2FCB8739_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2389)), c_orderQueueAddToEnd);
        UnitSetPropertyFixed(auto2FCB8739_var, c_unitPropMovementSpeed, 1.25);
    }
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(52), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2599), (1.5 * SoundLengthSync(SoundLink("THanson01BriefingHanson00011", 0))), -1, 10, true);
    MovieStartRecording("Briefing_Video_THanson01_00");
    SoundPlay(SoundLink("THanson01BriefingHanson00010", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THanson01BriefingHanson00010", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson01BriefingHanson00010", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingAction01Road_Init () {
    gt_BriefingAction01Road = TriggerCreate("gt_BriefingAction01Road_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Action 02 - Hanson's Colony
//--------------------------------------------------------------------------------------------------
bool gt_BriefingAction02HansonsColony_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto22ED42E6_g;
    int auto22ED42E6_u;
    unit auto22ED42E6_var;
    unitgroup autoA3B380D9_g;
    int autoA3B380D9_u;
    unit autoA3B380D9_var;
    unitgroup auto63B6EB01_g;
    int auto63B6EB01_u;
    unit auto63B6EB01_var;
    unitgroup autoE6B42958_g;
    int autoE6B42958_u;
    unit autoE6B42958_var;
    unitgroup auto8616FE9F_g;
    int auto8616FE9F_u;
    unit auto8616FE9F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(gv_briefingBunker, c_unitPropLife, 35.0);
    auto22ED42E6_g = UnitGroup("Civilian", c_playerAny, RegionFromId(44), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto22ED42E6_u = UnitGroupCount(auto22ED42E6_g, c_unitCountAll);
    for (;; auto22ED42E6_u -= 1) {
        auto22ED42E6_var = UnitGroupUnitFromEnd(auto22ED42E6_g, auto22ED42E6_u);
        if (auto22ED42E6_var == null) { break; }
        if ((RandomInt(1, 2) == 1)) {
            UnitIssueOrder(auto22ED42E6_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1654)), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(auto22ED42E6_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2658)), c_orderQueueReplace);
        }
    }
    autoA3B380D9_g = UnitGroup("CivilianFemale", c_playerAny, RegionFromId(44), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA3B380D9_u = UnitGroupCount(autoA3B380D9_g, c_unitCountAll);
    for (;; autoA3B380D9_u -= 1) {
        autoA3B380D9_var = UnitGroupUnitFromEnd(autoA3B380D9_g, autoA3B380D9_u);
        if (autoA3B380D9_var == null) { break; }
        if ((RandomInt(1, 2) == 1)) {
            UnitIssueOrder(autoA3B380D9_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1654)), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(autoA3B380D9_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2658)), c_orderQueueReplace);
        }
    }
    auto63B6EB01_g = UnitGroup("ColonistTransport", c_playerAny, RegionFromId(44), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto63B6EB01_u = UnitGroupCount(auto63B6EB01_g, c_unitCountAll);
    for (;; auto63B6EB01_u -= 1) {
        auto63B6EB01_var = UnitGroupUnitFromEnd(auto63B6EB01_g, auto63B6EB01_u);
        if (auto63B6EB01_var == null) { break; }
        if ((RandomInt(1, 2) == 1)) {
            UnitIssueOrder(auto63B6EB01_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1654)), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(auto63B6EB01_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2658)), c_orderQueueReplace);
        }
    }
    autoE6B42958_g = UnitGroup("Zergling", c_playerAny, RegionFromId(44), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE6B42958_u = UnitGroupCount(autoE6B42958_g, c_unitCountAll);
    for (;; autoE6B42958_u -= 1) {
        autoE6B42958_var = UnitGroupUnitFromEnd(autoE6B42958_g, autoE6B42958_u);
        if (autoE6B42958_var == null) { break; }
        UnitIssueOrder(autoE6B42958_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2670)), c_orderQueueReplace);
        UnitSetPropertyFixed(autoE6B42958_var, c_unitPropLife, 15.0);
    }
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2605), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2671), 10.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_THanson01_01");
    auto8616FE9F_g = UnitGroup("Marine", c_playerAny, RegionFromId(44), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8616FE9F_u = UnitGroupCount(auto8616FE9F_g, c_unitCountAll);
    for (;; auto8616FE9F_u -= 1) {
        auto8616FE9F_var = UnitGroupUnitFromEnd(auto8616FE9F_g, auto8616FE9F_u);
        if (auto8616FE9F_var == null) { break; }
        UnitIssueOrder(auto8616FE9F_var, OrderTargetingUnit(null, gv_briefingBunker), c_orderQueueReplace);
    }
    SoundPlay(SoundLink("THanson01BriefingHanson00011", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THanson01BriefingHanson00011", 0))), c_timeReal);
    SoundPlay(SoundLink("THanson01BriefingHanson00012", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THanson01BriefingHanson00012", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson01BriefingHanson00011", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson01BriefingHanson00012", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingAction02HansonsColony_Init () {
    gt_BriefingAction02HansonsColony = TriggerCreate("gt_BriefingAction02HansonsColony_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Action 03 - Fighting
//--------------------------------------------------------------------------------------------------
bool gt_BriefingAction03Fighting_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vanguardMarines;

    // Automatic Variable Declarations
    unitgroup auto8BF25632_g;
    int auto8BF25632_u;
    unit auto8BF25632_var;
    unitgroup autoDEBC6FBE_g;
    int autoDEBC6FBE_u;
    unit autoDEBC6FBE_var;
    unitgroup auto2970755C_g;
    int auto2970755C_u;
    unit auto2970755C_var;
    unitgroup autoD943F063_g;
    int autoD943F063_u;
    unit autoD943F063_var;
    unitgroup auto58DBAAF5_g;
    int auto58DBAAF5_u;
    unit auto58DBAAF5_var;
    unitgroup autoA4BFEB74_g;
    int autoA4BFEB74_u;
    unit autoA4BFEB74_var;

    // Variable Initialization
    lv_vanguardMarines = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(2, "Hydralisk", 0, gv_p2_ZERG_ORANGE_NW, PointFromId(2637));
    libNtve_gf_CreateUnitsAtPoint2(2, "Hydralisk", 0, gv_p2_ZERG_ORANGE_NW, PointFromId(2638));
    libNtve_gf_CreateUnitsAtPoint2(6, "Zergling", 0, gv_p2_ZERG_ORANGE_NW, PointFromId(2640));
    libNtve_gf_CreateUnitsAtPoint2(6, "Zergling", 0, gv_p2_ZERG_ORANGE_NW, PointFromId(2641));
    libNtve_gf_CreateUnitsAtPoint2(2, "Mutalisk", 0, gv_p2_ZERG_ORANGE_NW, PointFromId(2629));
    libNtve_gf_CreateUnitsAtPoint2(1, "Mutalisk", 0, gv_p2_ZERG_ORANGE_NW, PointFromId(2645));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p4_COLONISTS, PointFromId(2607));
    libNtve_gf_CreateUnitsAtPoint2(2, "Marine", 0, gv_p4_COLONISTS, PointFromId(2608));
    libNtve_gf_CreateUnitsAtPoint2(2, "Marine", 0, gv_p4_COLONISTS, PointFromId(2609));
    libNtve_gf_CreateUnitsAtPoint2(2, "Marine", 0, gv_p4_COLONISTS, PointFromId(2610));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p4_COLONISTS, PointFromId(2348));
    UnitGroupAdd(lv_vanguardMarines, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p4_COLONISTS, PointFromId(2349));
    UnitGroupAdd(lv_vanguardMarines, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p4_COLONISTS, PointFromId(2350));
    UnitGroupAdd(lv_vanguardMarines, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p4_COLONISTS, PointFromId(2352));
    UnitGroupAdd(lv_vanguardMarines, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p4_COLONISTS, PointFromId(2352));
    UnitGroupAdd(lv_vanguardMarines, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "ColonistTransport", 0, gv_p4_COLONISTS, PointFromId(2620));
    gv_briefingTransport1 = UnitLastCreated();
    auto8BF25632_g = UnitGroup(null, gv_p2_ZERG_ORANGE_NW, RegionFromId(39), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8BF25632_u = UnitGroupCount(auto8BF25632_g, c_unitCountAll);
    for (;; auto8BF25632_u -= 1) {
        auto8BF25632_var = UnitGroupUnitFromEnd(auto8BF25632_g, auto8BF25632_u);
        if (auto8BF25632_var == null) { break; }
        UnitIssueOrder(auto8BF25632_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitFromId(698))), c_orderQueueReplace);
    }
    autoDEBC6FBE_g = UnitGroup("Mutalisk", gv_p2_ZERG_ORANGE_NW, RegionFromId(39), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDEBC6FBE_u = UnitGroupCount(autoDEBC6FBE_g, c_unitCountAll);
    for (;; autoDEBC6FBE_u -= 1) {
        autoDEBC6FBE_var = UnitGroupUnitFromEnd(autoDEBC6FBE_g, autoDEBC6FBE_u);
        if (autoDEBC6FBE_var == null) { break; }
        UnitIssueOrder(autoDEBC6FBE_var, OrderTargetingUnit(AbilityCommand("attack", 0), gv_briefingTransport1), c_orderQueueReplace);
        UnitIssueOrder(autoDEBC6FBE_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitFromId(698))), c_orderQueueAddToEnd);
    }
    auto2970755C_g = UnitGroup("Marine", c_playerAny, RegionFromId(39), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2970755C_u = UnitGroupCount(auto2970755C_g, c_unitCountAll);
    for (;; auto2970755C_u -= 1) {
        auto2970755C_var = UnitGroupUnitFromEnd(auto2970755C_g, auto2970755C_u);
        if (auto2970755C_var == null) { break; }
        UnitSetPropertyFixed(auto2970755C_var, c_unitPropMovementSpeed, UnitGetPropertyFixed(gv_briefingTransport1, c_unitPropMovementSpeed, c_unitPropCurrent));
        UnitIssueOrder(auto2970755C_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2611)), c_orderQueueReplace);
        UnitIssueOrder(auto2970755C_var, OrderTargetingUnit(null, UnitFromId(698)), c_orderQueueAddToEnd);
    }
    autoD943F063_g = lv_vanguardMarines;
    autoD943F063_u = UnitGroupCount(autoD943F063_g, c_unitCountAll);
    for (;; autoD943F063_u -= 1) {
        autoD943F063_var = UnitGroupUnitFromEnd(autoD943F063_g, autoD943F063_u);
        if (autoD943F063_var == null) { break; }
        UnitIssueOrder(autoD943F063_var, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(698))), c_orderQueueReplace);
    }
    auto58DBAAF5_g = UnitGroup("ColonistTransport", c_playerAny, RegionFromId(39), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto58DBAAF5_u = UnitGroupCount(auto58DBAAF5_g, c_unitCountAll);
    for (;; auto58DBAAF5_u -= 1) {
        auto58DBAAF5_var = UnitGroupUnitFromEnd(auto58DBAAF5_g, auto58DBAAF5_u);
        if (auto58DBAAF5_var == null) { break; }
        UnitSetPropertyFixed(auto58DBAAF5_var, c_unitPropMovementSpeed, 1.25);
    }
    UnitIssueOrder(gv_briefingTransport1, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2389)), c_orderQueueReplace);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2601), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2603), (SoundLengthSync(SoundLink("THanson01BriefingHanson00012", 0)) - 1.0), -1, 10, true);
    MovieStartRecording("Briefing_Video_THanson01_02");
    SoundPlay(SoundLink("THanson01BriefingHanson00005", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(4.7, c_timeReal);
    autoA4BFEB74_g = lv_vanguardMarines;
    autoA4BFEB74_u = UnitGroupCount(autoA4BFEB74_g, c_unitCountAll);
    for (;; autoA4BFEB74_u -= 1) {
        autoA4BFEB74_var = UnitGroupUnitFromEnd(autoA4BFEB74_g, autoA4BFEB74_u);
        if (autoA4BFEB74_var == null) { break; }
        UnitIssueOrder(autoA4BFEB74_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(58)), c_orderQueueReplace);
        UnitSetPropertyFixed(autoA4BFEB74_var, c_unitPropMovementSpeed, UnitGetPropertyFixed(autoA4BFEB74_var, c_unitPropMovementSpeed, c_unitPropNormal));
    }
    Wait(((1.0 * SoundLengthSync(SoundLink("THanson01BriefingHanson00005", 0))) - 4.7), c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(21), (SoundLengthSync(SoundLink("THanson01BriefingRaynor00004", 0)) + SoundLengthSync(SoundLink("THanson01BriefingHanson00003", 0))), -1, 10, true);
    SoundPlay(SoundLink("THanson01BriefingRaynor00004", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("THanson01BriefingRaynor00004", 0)), c_timeReal);
    SoundPlay(SoundLink("THanson01BriefingHanson00003", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("THanson01BriefingHanson00003", 0)), c_timeReal);
    Wait(((0.5 * SoundLengthSync(SoundLink("THanson01BriefingHanson00005", 0))) - 0.0), c_timeReal);
    Wait(((0.5 * SoundLengthSync(SoundLink("THanson01BriefingRaynor00004", 0))) + SoundLengthSync(SoundLink("THanson01BriefingHanson00003", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingAction03Fighting_Init () {
    gt_BriefingAction03Fighting = TriggerCreate("gt_BriefingAction03Fighting_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pickedUnit;

    // Automatic Variable Declarations
    unitgroup auto68A85F2C_g;
    int auto68A85F2C_u;
    unit auto68A85F2C_var;
    unitgroup auto0BDAFB6C_g;
    int auto0BDAFB6C_u;
    unit auto0BDAFB6C_var;
    unitgroup autoF4A38C0B_g;
    int autoF4A38C0B_u;
    unit autoF4A38C0B_var;
    unitgroup autoDAFB109D_g;
    int autoDAFB109D_u;
    unit autoDAFB109D_var;
    unitgroup autoBC276F8C_g;
    int autoBC276F8C_u;
    unit autoBC276F8C_var;
    unitgroup autoD4CD02CB_g;
    int autoD4CD02CB_u;
    unit autoD4CD02CB_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(1.0, c_timeReal);
    VisEnable(c_visTypeMask, false);
    VisEnable(c_visTypeFog, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_p1_USER);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, false);
    GameTimeOfDaySetLength(0.0);
    auto68A85F2C_g = UnitGroup(null, gv_p1_USER, null, UnitFilter(0, 0, 0, 0), 0);
    auto68A85F2C_u = UnitGroupCount(auto68A85F2C_g, c_unitCountAll);
    for (;; auto68A85F2C_u -= 1) {
        auto68A85F2C_var = UnitGroupUnitFromEnd(auto68A85F2C_g, auto68A85F2C_u);
        if (auto68A85F2C_var == null) { break; }
        UnitRemove(auto68A85F2C_var);
    }
    auto0BDAFB6C_g = UnitGroup(null, gv_p2_ZERG_ORANGE_NW, null, UnitFilter(0, 0, 0, 0), 0);
    auto0BDAFB6C_u = UnitGroupCount(auto0BDAFB6C_g, c_unitCountAll);
    for (;; auto0BDAFB6C_u -= 1) {
        auto0BDAFB6C_var = UnitGroupUnitFromEnd(auto0BDAFB6C_g, auto0BDAFB6C_u);
        if (auto0BDAFB6C_var == null) { break; }
        UnitRemove(auto0BDAFB6C_var);
    }
    autoF4A38C0B_g = UnitGroup("Civilian", gv_p4_COLONISTS, null, UnitFilter(0, 0, 0, 0), 0);
    autoF4A38C0B_u = UnitGroupCount(autoF4A38C0B_g, c_unitCountAll);
    for (;; autoF4A38C0B_u -= 1) {
        autoF4A38C0B_var = UnitGroupUnitFromEnd(autoF4A38C0B_g, autoF4A38C0B_u);
        if (autoF4A38C0B_var == null) { break; }
        UnitRemove(autoF4A38C0B_var);
    }
    autoDAFB109D_g = UnitGroup("CivilianFemale", gv_p4_COLONISTS, null, UnitFilter(0, 0, 0, 0), 0);
    autoDAFB109D_u = UnitGroupCount(autoDAFB109D_g, c_unitCountAll);
    for (;; autoDAFB109D_u -= 1) {
        autoDAFB109D_var = UnitGroupUnitFromEnd(autoDAFB109D_g, autoDAFB109D_u);
        if (autoDAFB109D_var == null) { break; }
        UnitRemove(autoDAFB109D_var);
    }
    autoBC276F8C_g = UnitGroup("ColonistTransport", gv_p4_COLONISTS, null, UnitFilter(0, 0, 0, 0), 0);
    autoBC276F8C_u = UnitGroupCount(autoBC276F8C_g, c_unitCountAll);
    for (;; autoBC276F8C_u -= 1) {
        autoBC276F8C_var = UnitGroupUnitFromEnd(autoBC276F8C_g, autoBC276F8C_u);
        if (autoBC276F8C_var == null) { break; }
        UnitRemove(autoBC276F8C_var);
    }
    autoD4CD02CB_g = UnitGroup(null, 0, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD4CD02CB_u = UnitGroupCount(autoD4CD02CB_g, c_unitCountAll);
    for (;; autoD4CD02CB_u -= 1) {
        autoD4CD02CB_var = UnitGroupUnitFromEnd(autoD4CD02CB_g, autoD4CD02CB_u);
        if (autoD4CD02CB_var == null) { break; }
        if (((UnitGetType(autoD4CD02CB_var) == "AutoTurret") || (UnitGetType(autoD4CD02CB_var) == "ColonistShip"))) {
            libNtve_gf_PauseUnit(autoD4CD02CB_var, false);
            UnitSetOwner(autoD4CD02CB_var, gv_p4_COLONISTS, true);
            libNtve_gf_MakeUnitInvulnerable(autoD4CD02CB_var, false);
        }

    }
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p4_COLONISTS, PointFromId(2631));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p4_COLONISTS, PointFromId(1462));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p4_COLONISTS, PointFromId(1460));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2772)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p4_COLONISTS, PointFromId(2630));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2772)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p4_COLONISTS, PointFromId(3208));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2772)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA93CFD62_g;
    int autoA93CFD62_u;
    unit autoA93CFD62_var;
    unitgroup autoC92FF435_g;
    int autoC92FF435_u;
    unit autoC92FF435_var;

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetBackground(c_backgroundFixed, "WastelandRock0", 100.0);
    CameraApplyInfo(1, CameraInfoFromId(178), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(207), 10.0, -1, 10, true);
    TriggerExecute(gt_VictoryAction, true, false);
    TriggerSkippableBegin(PlayerGroupSingle(gv_p1_USER), 0, null, true, true);
    gv_victoryCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THanson01MusicOutro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_ColonyShipBlastoff(UnitFromId(693));
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(693), true);
    Wait(1.0, c_timeReal);
    autoA93CFD62_g = UnitGroup("PathingBlocker1x1", c_playerAny, RegionFromId(50), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoA93CFD62_u = UnitGroupCount(autoA93CFD62_g, c_unitCountAll);
    for (;; autoA93CFD62_u -= 1) {
        autoA93CFD62_var = UnitGroupUnitFromEnd(autoA93CFD62_g, autoA93CFD62_u);
        if (autoA93CFD62_var == null) { break; }
        UnitRemove(autoA93CFD62_var);
    }
    autoC92FF435_g = UnitGroup("PathingBlocker2x2", c_playerAny, RegionFromId(50), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoC92FF435_u = UnitGroupCount(autoC92FF435_g, c_unitCountAll);
    for (;; autoC92FF435_u -= 1) {
        autoC92FF435_var = UnitGroupUnitFromEnd(autoC92FF435_g, autoC92FF435_u);
        if (autoC92FF435_var == null) { break; }
        UnitRemove(autoC92FF435_var);
    }
    if ((gv_colonistsKilled < 20)) {
        // Transmission - SoundLink("THanson01Hanson00025", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Hanson00025", -1), c_transmissionDurationAdd, 0.0, false);
    }

    if ((gv_colonistsKilled >= 20) && (gv_colonistsKilled < 50)) {
        // Transmission - SoundLink("THanson01Hanson00023", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Hanson00023", -1), c_transmissionDurationAdd, 0.0, false);
    }

    if ((gv_colonistsKilled >= 50)) {
        // Transmission - SoundLink("THanson01Hanson00017", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson01Hanson00017", -1), c_transmissionDurationAdd, 0.0, false);
    }

    Wait(4.0, c_timeGame);
    CameraApplyInfo(1, CameraInfoFromId(1793), 5.0, -1, 10, true);
    Wait(4.0, c_timeGame);
    CameraApplyInfo(1, CameraInfoFromId(2872), 7.0, -1, 10, true);
    Wait(6.0, c_timeGame);
    gv_victoryCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Action
//--------------------------------------------------------------------------------------------------
bool gt_VictoryAction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    const int autoC6444FA3_n = 30;
    int autoC6444FA3_i;
    const int autoB8B4D139_n = 5;
    int autoB8B4D139_i;
    const int autoA68CDDAA_n = 2;
    int autoA68CDDAA_i;
    const int autoFFFD46C7_n = 5;
    int autoFFFD46C7_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    for (autoC6444FA3_i = 1; autoC6444FA3_i <= autoC6444FA3_n; autoC6444FA3_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p2_ZERG_ORANGE_NW, RegionRandomPoint(RegionFromId(19)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2613)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2841)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2842)), c_orderQueueAddToEnd);
    }
    for (autoB8B4D139_i = 1; autoB8B4D139_i <= autoB8B4D139_n; autoB8B4D139_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Mutalisk", 0, gv_p2_ZERG_ORANGE_NW, RegionRandomPoint(RegionFromId(26)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionCircle(PointFromId(1328), 8.0))), c_orderQueueReplace);
    }
    gf_SpoogeAreawithTumor(PointFromId(1455));
    Wait(0.5, c_timeGame);
    gf_SpoogeAreawithTumor(PointFromId(1456));
    Wait(1.0, c_timeGame);
    gf_SpoogeAreawithTumor(PointFromId(1457));
    Wait(1.0, c_timeGame);
    for (autoA68CDDAA_i = 1; autoA68CDDAA_i <= autoA68CDDAA_n; autoA68CDDAA_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Corruptor", 0, gv_p2_ZERG_ORANGE_NW, RegionRandomPoint(RegionFromId(26)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(PointFromId(2840), 8.0))), c_orderQueueReplace);
    }
    Wait(1.0, c_timeGame);
    for (autoFFFD46C7_i = 1; autoFFFD46C7_i <= autoFFFD46C7_n; autoFFFD46C7_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Mutalisk", 0, gv_p2_ZERG_ORANGE_NW, RegionRandomPoint(RegionFromId(26)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(PointFromId(2840), 8.0))), c_orderQueueReplace);
    }
    Wait(3.5, c_timeGame);
    gf_SpoogeAreawithTumor(PointFromId(3219));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryAction_Init () {
    gt_VictoryAction = TriggerCreate("gt_VictoryAction_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victoryCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(lv_fadeDuration, c_timeReal);
    UnitPauseAll(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03VariablesUnits_Init();
    gt_Init04Music_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulty_Init();
    gt_Init07Help_Init();
    gt_IntroSequence_Init();
    gt_StartGame_Init();
    gt_SwanntalksaboutFirebatQ_Init();
    gt_FirebatDropshipAction_Init();
    gt_FirebatMove_Init();
    gt_RemoveDropships_Init();
    gt_MarineConstantRespawn_Init();
    gt_ZergontheLoose_Init();
    gt_ZergontheLoose2_Init();
    gt_Zerg1_Init();
    gt_Zerg2_Init();
    gt_Zerg3_Init();
    gt_SwitchtoEscortPhase_Init();
    gt_SwitchtoEscortPhaseQ_Init();
    gt_ResourcePickups_Init();
    gt_CameraPantoTownCasualNormal_Init();
    gt_StartHansonEscortPhase_Init();
    gt_CreateStorymodeTipsQ_Init();
    gt_StarportIntroQ_Init();
    gt_StartAI_Init();
    gt_TIPZergCreep_Init();
    gt_Preparenextconvoy_Init();
    gt_Gathercolonistspriortoevacuation_Init();
    gt_ColonistsHeadsupMessageQ_Init();
    gt_ColonistsHeadsupMessageEarlyQ_Init();
    gt_ColonistsHeadsupMessageMidQ_Init();
    gt_ColonistsHeadsupMessageLateQ_Init();
    gt_ConvoySpawned_Init();
    gt_SendColonists_Init();
    gt_ColonistsGOGOMessageEarlyQ_Init();
    gt_ColonistsGOGOMessageLateQ_Init();
    gt_PingConvoy_Init();
    gt_ConvoyMovement_Init();
    gt_AddConvoyMarineintoUnitGroup_Init();
    gt_ConvoyGuardsareUnderAttackQ_Init();
    gt_PlayerIsInCombat_Init();
    gt_PlayerIsInCombatIndicatorDiminish_Init();
    gt_BunkerGet1_Init();
    gt_BunkerGet2_Init();
    gt_BunkerLineQ_Init();
    gt_ChrysalisTipTriggerA_Init();
    gt_ChrysalisTipTriggerB_Init();
    gt_ChrysalisTipTriggerC_Init();
    gt_ChrysalisTipQ_Init();
    gt_ChrysalisPing_Init();
    gt_ConvoyAttack1Freebie_Init();
    gt_ConvoyAttack2StressBunkersnotallfull_Init();
    gt_ConvoyAttack3Burnsinglebunkers_Init();
    gt_ConvoyAttack4Droppods_Init();
    gt_ConvoyAttack5Nydusworms_Init();
    gt_ConvoyAttack6AHH_Init();
    gt_ConvoyAttack7VariationAHH_Init();
    gt_BackdoorSpoogeAmbience_Init();
    gt_TumorSpawningTrigger_Init();
    gt_AIGiveMinerals_Init();
    gt_AIGiveGas_Init();
    gt_NydusSpawningTrigger_Init();
    gt_Marinereachescolonyship_Init();
    gt_TruckColonistreachescolonyship_Init();
    gt_Convoyloadsintocolonyship_Init();
    gt_ColonyShipBlastoffActions_Init();
    gt_WaveOverLogic_Init();
    gt_WaveOverAIRetreat_Init();
    gt_WaveOverShipBlastoffAutosave_Init();
    gt_WaveOverAIUpgradesTipsEnvironment_Init();
    gt_WaveOver01TipabouthowtoplaythismissionQ_Init();
    gt_WaveOver03TipaboutzergdroppodsQ_Init();
    gt_WaveOver04TipaboutnyduswormsQ_Init();
    gt_ColonistKilled_Init();
    gt_DoomsdayZergAttackWavesAnnounceQ_Init();
    gt_DoomsdayZergAttackWaves_Init();
    gt_DoomsdayZergAI_Init();
    gt_Playerkillscolonists_Init();
    gt_PlayerkillscolonistsQ_Init();
    gt_PlayerkillscolonistsAgainQ_Init();
    gt_PlayerkillscolonisthomesQ_Init();
    gt_Colonistskeepdyingline1Q_Init();
    gt_Colonistskeepdyingline2Q_Init();
    gt_Colonistskeepdyingline3Q_Init();
    gt_Colonistskeepdyingline4Q_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatTacticalPhase_Init();
    gt_DefeatColonyShipDead_Init();
    gt_DefeatColonistHutsDie_Init();
    gt_DefeatTooManyColonistsDie_Init();
    gt_VictoryPlayerSavesEnoughColonists_Init();
    gt_VictoryPlayerSavesEnoughColonistsQ_Init();
    gt_Victory_Init();
    gt_VictoryCheat_Init();
    gt_Defeat_Init();
    gt_DefeatCheat_Init();
    gt_MainObjectiveReachHansonCreate_Init();
    gt_MainObjectiveReachHansonDiscoverQ_Init();
    gt_MainObjectiveReachHansonComplete_Init();
    gt_MainObjectiveSaveColonistsCreate_Init();
    gt_MainObjectiveSaveColonistsDiscoverQ_Init();
    gt_MainObjectiveSaveColonistsComplete_Init();
    gt_ResearchObjectiveChrysalisCreateQ_Init();
    gt_ResearchObjectiveChrysalisUpdate_Init();
    gt_ResearchObjectiveChrysalisComplete_Init();
    gt_BriefingQ_Init();
    gt_BriefingSetup_Init();
    gt_BriefingAction01Road_Init();
    gt_BriefingAction02HansonsColony_Init();
    gt_BriefingAction03Fighting_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryAction_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
