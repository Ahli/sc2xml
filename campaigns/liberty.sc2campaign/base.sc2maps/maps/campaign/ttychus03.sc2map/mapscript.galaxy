//==================================================================================================
// 
// Generated Map Script
// 
// Name:   The Moebius Factor
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/CampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libCamp_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_p01_USER = 1;
const int gv_p02_ZERG = 2;
const int gv_p03_MOEBIUS = 3;
const int gv_p04_ATTACKABLE_CITY = 4;
const int gv_p05_ZERG_BASE = 5;
const int gv_p06_MOEBIUS_SEC_FORCE = 6;
const int gv_p07_ZERG_KERRIGAN = 7;
const int gv_p08_NEUTRAL_CITY = 8;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
unit gv_uNIT_KERRIGAN;
unit gv_sITE_1_BUILDING;
unit gv_sITE_2_BUILDING;
unit gv_sITE_3_BUILDING;
bool gv_fLAG_SITE_1_ACTIVE;
bool gv_fLAG_SITE_2_ACTIVE;
bool gv_fLAG_SITE_3_ACTIVE;
unitgroup gv_moebiusTargets;
bool gv_gameOver;
bool gv_inCinematic;
int gv_createNydusWormPlayer;
point gv_createNydusWormLocation;
region gv_createNydusWormTarget;
int gv_createNydusWormQty1;
string gv_createNydusWormType1;
int gv_createNydusWormQty2;
string gv_createNydusWormType2;
fixed gv_createNydusWormPeriod;
int gv_createNydusWormMaxPacks;
unit gv_createNydusWormLastUnit;
int gv_dropPodPlayer;
point gv_dropPodLocation;
region gv_dropPodTarget;
int gv_dropPodQty1;
int gv_dropPodQty2;
string gv_dropPodType1;
string gv_dropPodType2;
int gv_pINGSite1;
revealer gv_site1Revealer;
unitgroup gv_gROUPHydraPicketers;
int gv_pINGSite2;
revealer gv_site2Revealer;
int gv_pINGSite3;
revealer gv_site3Revealer;
actor[4] gv_objectiveBuildingReticule;
unit gv_baseNydus;
actor gv_baseNydusPing1;
actor gv_baseNydusPing2;
int gv_achievementKerriganFakeBuildingCounter;
timer gv_kerrigansETATIMER;
int gv_kerrigansETAWINDOW;
bool gv_fLAGKerrigansearching;
string gv_uNITFauxTargetsType;
region gv_kerrigansTarget;
timer gv_kerriganSearchTimer;
fixed gv_kerriganSearchTime;
unitgroup gv_introMilitia;
unitgroup gv_introChasers;
unitgroup gv_gROUPAliveInside;
unit gv_uNITSite1Speaker;
unit gv_uNITSite2Speaker;
unit gv_uNITSite3Speaker;
unit gv_uNITWallSpeaker;
unit gv_uNITIntroSpeaker;
unit gv_uNITSite3RoofNydus1;
actor gv_site1RescuableReticule;
actor gv_site2RescuableReticule;
actor gv_site3RescuableReticule;
actor gv_wallRescuableReticule;
bool gv_achievementRescueAwarded;
unitgroup gv_gROUP_INITIALWAVE;
unitgroup gv_gROUP_ZERG_SITE1_SHARKS;
fixed gv_pathRevealdistance;
point[13] gv_sitePath1;
point[16] gv_sitePath2;
point[21] gv_sitePath3;
int gv_site1PathLength;
int gv_site2PathLength;
int gv_site3PathLength;
unit gv_medivac01;
unit gv_medivac02;
unitgroup gv_medivacUnits;
int gv_brutaliskPing;
bool gv_nonMercCombatUnitTrained;
int gv_researchEarned;
int gv_statRescuablesFound;
int gv_statBrutaliskKilled;
int gv_objectiveDestroyDataz;
int gv_objectiveNoAccess;
int gv_dataCoresDestroyed;
int gv_researchObjectiveKilltheBrutalisk;
actor gv_brutaliskReticule;
bool gv_victoryCinematicCompleted;
unitgroup gv_victoryHiddenUnitGroup;
unit gv_briefingKerrigan;

void InitGlobals () {
    gv_moebiusTargets = UnitGroupEmpty();
    gv_gROUPHydraPicketers = UnitGroupEmpty();
    gv_kerrigansETATIMER = TimerCreate();
    gv_kerrigansETAWINDOW = c_timerWindowNone;
    gv_uNITFauxTargetsType = "AbandonedBuilding";
    gv_kerriganSearchTimer = TimerCreate();
    gv_introMilitia = UnitGroupEmpty();
    gv_introChasers = UnitGroupEmpty();
    gv_gROUPAliveInside = UnitGroupEmpty();
    gv_uNITSite1Speaker = UnitFromId(538);
    gv_uNITSite2Speaker = UnitFromId(14);
    gv_uNITSite3Speaker = UnitFromId(354);
    gv_uNITWallSpeaker = UnitFromId(550);
    gv_gROUP_INITIALWAVE = UnitGroupEmpty();
    gv_gROUP_ZERG_SITE1_SHARKS = UnitGroupEmpty();
    gv_pathRevealdistance = 7.0;
    gv_medivacUnits = UnitGroupEmpty();
    gv_brutaliskPing = c_invalidPingId;
    gv_objectiveDestroyDataz = c_invalidObjectiveId;
    gv_objectiveNoAccess = c_invalidObjectiveId;
    gv_researchObjectiveKilltheBrutalisk = c_invalidObjectiveId;
    gv_victoryHiddenUnitGroup = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_CreateNydusWorm (int lp_player, point lp_location, region lp_target, int lp_qty1, string lp_type1, int lp_qty2, string lp_type2, fixed lp_period, int lp_maxPacks);
unit gf_LastCreatedNydusWorm ();
void gf_DropPod (int lp_player, point lp_location, region lp_target, int lp_qty1, string lp_type1, int lp_qty2, string lp_type2);
void gf_CreateCreepPuker (int lp_player, point lp_spawnSpot, point lp_pukeSpot);
void gf_AddUpgradeForEnemies (int lp_qty, string lp_upgrade);
void gf_SetMaxLifeOfUnitType (string lp_units, fixed lp_maxLife);
void gf_CreateSitePing (string lp_model, unit lp_target);
region gf_GetSmartNydusRegion ();
void gf_OrderKerrigantoBladestormArea (region lp_area);
int gf_CountTargetsOfCurrentStage ();
void gf_AddAirAttackWaypoints (int lp_player);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04Music;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_CreateNydusWorm;
trigger gt_DropPod;
trigger gt_IntroSequence;
trigger gt_StartGame;
trigger gt_BrutaliskStumbledUpon;
trigger gt_CreateMedivacIntro;
trigger gt_IntroMedivacsFinished;
trigger gt_MedivacTrained;
trigger gt_Site1DestructionComplete;
trigger gt_Site1ActivateDefenses;
trigger gt_Site1SubwaySpawns;
trigger gt_Site1Mutalisks;
trigger gt_Site1Nydus;
trigger gt_Site2DestructionComplete;
trigger gt_Site2ActivateDefenses;
trigger gt_Site2CreepPukerSpawns;
trigger gt_Site2SubwaySpawns;
trigger gt_Site2HatcheryNydus;
trigger gt_Site2ReactionNydus;
trigger gt_Site2HydraPicketline;
trigger gt_Site3DestructionComplete;
trigger gt_Site3ActivateDefenses;
trigger gt_Site3CreepPukerSpawn;
trigger gt_Site3RoofNydus1;
trigger gt_Site3RoofNydus2;
trigger gt_Site3Nydus1;
trigger gt_Site3Nydus2;
trigger gt_Site3Nydus3;
trigger gt_Site3ReactionBroodlordsHardBrutal;
trigger gt_Site3DropPods;
trigger gt_Site1ReticuleCreator;
trigger gt_Site2ReticuleCreator;
trigger gt_Site3ReticuleCreator;
trigger gt_Site1ReticuleKiller;
trigger gt_Site2ReticuleKiller;
trigger gt_Site3ReticuleKiller;
trigger gt_BaseNydusRetaliationForSite1;
trigger gt_BaseNydusRetaliationForSite2;
trigger gt_BaseRetaliationDialogueQ;
trigger gt_KerriganInitiateTargetAcquisition;
trigger gt_KerriganMoveOut;
trigger gt_KerriganTargetReached;
trigger gt_KerriganTargetDone;
trigger gt_KerriganTargetDiesEarly;
trigger gt_KerriganPickNextTarget;
trigger gt_KerriganRecalculateTimer;
trigger gt_KerriganBladestorm;
trigger gt_KerriganMoveOutRepeater;
trigger gt_KerriganCalculatingETAQ;
trigger gt_KerriganTauntsRaynor1Q;
trigger gt_KerriganTauntsRaynor2Q;
trigger gt_KerriganTauntsRaynor3Q;
trigger gt_KerriganApproachesSite1Q;
trigger gt_KerriganApproachesSite2Q;
trigger gt_KerriganApproachesSite3Q;
trigger gt_IntroMilitiaStartQ;
trigger gt_Site1MilitiaHeadsUpQ;
trigger gt_Site1MilitiaRescued;
trigger gt_TheWallHeadsUpQ;
trigger gt_TheWallRescued;
trigger gt_Site2MilitiaHeadsUpQ;
trigger gt_Site2MilitiaRescued;
trigger gt_AliveInsideHeadsUpQ;
trigger gt_AliveInsideRescued;
trigger gt_Site3MilitiaHeadsUpQ;
trigger gt_Site3MilitiaRescued;
trigger gt_Site1CityAttackers;
trigger gt_Site1InitialPatrolBurrow;
trigger gt_AmbientSharkPatrolStart;
trigger gt_AmbientSharkPatrol1;
trigger gt_AmbientSharkPatrol2;
trigger gt_AmbientSharkPatrol3;
trigger gt_AmbientSharkPatrol4;
trigger gt_Site1CreepAdvanceAmbientDroppodsPuke;
trigger gt_InitPaths;
trigger gt_PathShowPath;
trigger gt_PathSite1;
trigger gt_PathSite2;
trigger gt_PathSite3;
trigger gt_PathRemovePointUpdaterSite1;
trigger gt_PathRemovePointUpdaterSite2;
trigger gt_PathRemovePointUpdaterSite3;
trigger gt_PathRemoveSaftey;
trigger gt_UpdateSitePaths;
trigger gt_UpdateSiteVisibilityAndPings;
trigger gt_StartAI;
trigger gt_ZergP05AttackWavesBase;
trigger gt_AIGiveMinerals;
trigger gt_AIGiveGas;
trigger gt_CampaignTipsQ;
trigger gt_TipTransportQ;
trigger gt_TipNewUnitMedivacQ;
trigger gt_TipHighGroundQ;
trigger gt_TransmissionMissionStartQ;
trigger gt_TransmissionMedivacIntroQ;
trigger gt_TransmissionBrutaliskFoundQ;
trigger gt_TransmissionCoreIsDestroyedQ;
trigger gt_TransmissionAliveInsideRescuedQ;
trigger gt_TransmissionTheWallRescuedQ;
trigger gt_TransmissionSite1MilitiaRescuedQ;
trigger gt_TransmissionSite2MilitiaRescuedQ;
trigger gt_TransmissionSite3MilitiaRescuedQ;
trigger gt_AchievementAllUnitsRescued;
trigger gt_AchievementCombatUnitTrained;
trigger gt_VictoryDestroyCoresCompleted;
trigger gt_Victory;
trigger gt_DefeatBaseDead;
trigger gt_DefeatPrimaryObjectiveFailedCheck;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_ObjectiveDestroyDataCreateQ;
trigger gt_ObjectiveDestroyDataUpdate;
trigger gt_ObjectiveDestroyDataComplete;
trigger gt_ObjectiveDestroyDataFailed;
trigger gt_ResearchObjectiveKilltheBrutaliskCreateQ;
trigger gt_ResearchObjectiveKilltheBrutaliskUpdateQ;
trigger gt_BrutaliskReticuleKiller;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryNydusSpawn;
trigger gt_VictoryBaseLiftoff;
trigger gt_BriefingQ;
trigger gt_BriefingScene00;
trigger gt_BriefingScene00DropPods;
trigger gt_BriefingScene01;
trigger gt_BriefingScene02;
trigger gt_BriefingScene03;
trigger gt_BriefingKerrgianSpawn;
trigger gt_BriefingCameraShake;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_CreateNydusWorm (int lp_player, point lp_location, region lp_target, int lp_qty1, string lp_type1, int lp_qty2, string lp_type2, fixed lp_period, int lp_maxPacks) {
    // Automatic Variable Declarations
    // Implementation
    gv_createNydusWormPlayer = lp_player;
    gv_createNydusWormLocation = lp_location;
    gv_createNydusWormTarget = lp_target;
    gv_createNydusWormQty1 = lp_qty1;
    gv_createNydusWormType1 = lp_type1;
    gv_createNydusWormQty2 = lp_qty2;
    gv_createNydusWormType2 = lp_type2;
    gv_createNydusWormPeriod = lp_period;
    gv_createNydusWormMaxPacks = lp_maxPacks;
    TriggerExecute(gt_CreateNydusWorm, true, false);
}

unit gf_LastCreatedNydusWorm () {
    // Automatic Variable Declarations
    // Implementation
    return gv_createNydusWormLastUnit;
}

void gf_DropPod (int lp_player, point lp_location, region lp_target, int lp_qty1, string lp_type1, int lp_qty2, string lp_type2) {
    // Automatic Variable Declarations
    // Implementation
    gv_dropPodPlayer = lp_player;
    gv_dropPodLocation = lp_location;
    gv_dropPodTarget = lp_target;
    gv_dropPodQty1 = lp_qty1;
    gv_dropPodType1 = lp_type1;
    gv_dropPodQty2 = lp_qty2;
    gv_dropPodType2 = lp_type2;
    TriggerExecute(gt_DropPod, true, false);
}

void gf_CreateCreepPuker (int lp_player, point lp_spawnSpot, point lp_pukeSpot) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateUnitsAtPoint2(1, "Overlord", 0, lp_player, lp_spawnSpot);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lp_pukeSpot), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("GenerateCreep", 0)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
}

void gf_AddUpgradeForEnemies (int lp_qty, string lp_upgrade) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUpgradeAddLevel(gv_p02_ZERG, lp_upgrade, lp_qty);
    TechTreeUpgradeAddLevel(gv_p05_ZERG_BASE, lp_upgrade, lp_qty);
    TechTreeUpgradeAddLevel(gv_p07_ZERG_KERRIGAN, lp_upgrade, lp_qty);
}

void gf_SetMaxLifeOfUnitType (string lp_units, fixed lp_maxLife) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    unitgroup auto82F6E791_g;
    int auto82F6E791_u;

    // Variable Initialization

    // Implementation
    auto82F6E791_g = UnitGroup(lp_units, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto82F6E791_u = UnitGroupCount(auto82F6E791_g, c_unitCountAll);
    for (;; auto82F6E791_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto82F6E791_g, auto82F6E791_u);
        if (lv_u == null) { break; }
        UnitSetPropertyFixed(lv_u, c_unitPropLifeMax, lp_maxLife);
        UnitSetPropertyFixed(lv_u, c_unitPropLifePercent, 100.0);
    }
}

void gf_CreateSitePing (string lp_model, unit lp_target) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(lp_target), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetUnit(PingLastCreated(), lp_target);
    PingSetScale(PingLastCreated(), 0.8);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/1EE2AD21"));
}

region gf_GetSmartNydusRegion () {
    // Variable Declarations
    int lv_threatsW;
    int lv_threatsN;
    int lv_threatsS;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_threatsW = UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionCircle(RegionGetCenter(RegionFromId(38)), 16.0), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_threatsN = UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionCircle(RegionGetCenter(RegionFromId(79)), 16.0), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_threatsS = UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionCircle(RegionGetCenter(RegionFromId(80)), 16.0), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    if ((lv_threatsW < lv_threatsN) && (lv_threatsW < lv_threatsS)) {
        return RegionFromId(38);
    }

    if ((lv_threatsN < lv_threatsS) && (lv_threatsN < lv_threatsW)) {
        return RegionFromId(79);
    }

    if ((lv_threatsS < lv_threatsN) && (lv_threatsS < lv_threatsW)) {
        return RegionFromId(80);
    }

    return RegionFromId(38);
}

void gf_OrderKerrigantoBladestormArea (region lp_area) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    unitgroup auto5AACA740_g;
    int auto5AACA740_u;

    // Variable Initialization

    // Implementation
    UnitIssueOrder(gv_uNIT_KERRIGAN, OrderTargetingPoint(AbilityCommand("Tychus03OmegaStorm", 0), RegionGetCenter(gv_kerrigansTarget)), c_orderQueueReplace);
    auto5AACA740_g = UnitGroup(gv_uNITFauxTargetsType, gv_p08_NEUTRAL_CITY, lp_area, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5AACA740_u = UnitGroupCount(auto5AACA740_g, c_unitCountAll);
    for (;; auto5AACA740_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto5AACA740_g, auto5AACA740_u);
        if (lv_u == null) { break; }
        UnitGroupRemove(gv_moebiusTargets, lv_u);
        UnitKill(lv_u);
    }
}

int gf_CountTargetsOfCurrentStage () {
    // Variable Declarations
    int lv_targets;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_targets = (lv_targets + UnitGroupCount(UnitGroupFilterRegion(gv_moebiusTargets, RegionFromId(53), 1), c_unitCountAlive));
    lv_targets = (lv_targets + UnitGroupCount(UnitGroupFilterRegion(gv_moebiusTargets, RegionFromId(54), 1), c_unitCountAlive));
    lv_targets = (lv_targets + UnitGroupCount(UnitGroupFilterRegion(gv_moebiusTargets, RegionFromId(5), 1), c_unitCountAlive));
    if ((UnitIsAlive(gv_sITE_1_BUILDING) == true)) {
        return lv_targets;
    }

    lv_targets = (lv_targets + UnitGroupCount(UnitGroupFilterRegion(gv_moebiusTargets, RegionFromId(55), 1), c_unitCountAlive));
    lv_targets = (lv_targets + UnitGroupCount(UnitGroupFilterRegion(gv_moebiusTargets, RegionFromId(26), 1), c_unitCountAlive));
    lv_targets = (lv_targets + UnitGroupCount(UnitGroupFilterRegion(gv_moebiusTargets, RegionFromId(37), 1), c_unitCountAlive));
    lv_targets = (lv_targets + UnitGroupCount(UnitGroupFilterRegion(gv_moebiusTargets, RegionFromId(58), 1), c_unitCountAlive));
    lv_targets = (lv_targets + UnitGroupCount(UnitGroupFilterRegion(gv_moebiusTargets, RegionFromId(56), 1), c_unitCountAlive));
    if ((UnitIsAlive(gv_sITE_2_BUILDING) == true)) {
        return lv_targets;
    }

    lv_targets = (lv_targets + UnitGroupCount(UnitGroupFilterRegion(gv_moebiusTargets, RegionFromId(11), 1), c_unitCountAlive));
    lv_targets = (lv_targets + UnitGroupCount(UnitGroupFilterRegion(gv_moebiusTargets, RegionFromId(59), 1), c_unitCountAlive));
    lv_targets = (lv_targets + UnitGroupCount(UnitGroupFilterRegion(gv_moebiusTargets, RegionFromId(60), 1), c_unitCountAlive));
    lv_targets = (lv_targets + UnitGroupCount(UnitGroupFilterRegion(gv_moebiusTargets, RegionFromId(57), 1), c_unitCountAlive));
    return lv_targets;
}

void gf_AddAirAttackWaypoints (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    AIAttackWaveAddWaypoint(lp_player, PointFromId(119), false);
    AIAttackWaveAddWaypoint(lp_player, PointFromId(401), false);
    AIAttackWaveAddWaypoint(lp_player, PointFromId(402), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_LoadCampaignData(libCamp_ge_MapID_MapTTychus03);
    TriggerExecute(gt_Init01Technology, true, true);
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04Music, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    libCamp_gf_RegisterFootageRecording(gt_BriefingQ);
    libCamp_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_IntroSequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsMedivac, gv_p01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_p01_USER, gv_p02_ZERG, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p05_ZERG_BASE, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p07_ZERG_KERRIGAN, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p03_MOEBIUS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p06_MOEBIUS_SEC_FORCE, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p04_ATTACKABLE_CITY, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p08_NEUTRAL_CITY, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p02_ZERG, gv_p05_ZERG_BASE, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p02_ZERG, gv_p07_ZERG_KERRIGAN, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p02_ZERG, gv_p03_MOEBIUS, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p02_ZERG, gv_p06_MOEBIUS_SEC_FORCE, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p02_ZERG, gv_p04_ATTACKABLE_CITY, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p02_ZERG, gv_p08_NEUTRAL_CITY, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p05_ZERG_BASE, gv_p07_ZERG_KERRIGAN, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p05_ZERG_BASE, gv_p03_MOEBIUS, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p05_ZERG_BASE, gv_p06_MOEBIUS_SEC_FORCE, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p05_ZERG_BASE, gv_p04_ATTACKABLE_CITY, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p05_ZERG_BASE, gv_p08_NEUTRAL_CITY, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p07_ZERG_KERRIGAN, gv_p03_MOEBIUS, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p07_ZERG_KERRIGAN, gv_p06_MOEBIUS_SEC_FORCE, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p07_ZERG_KERRIGAN, gv_p04_ATTACKABLE_CITY, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p07_ZERG_KERRIGAN, gv_p08_NEUTRAL_CITY, libNtve_ge_AllianceSetting_Neutral);
    PlayerSetAlliance(gv_p02_ZERG, c_allianceIdPushable, gv_p07_ZERG_KERRIGAN, true);
    PlayerSetAlliance(gv_p05_ZERG_BASE, c_allianceIdPushable, gv_p07_ZERG_KERRIGAN, true);
    PlayerSetAlliance(gv_p01_USER, c_allianceIdPushable, gv_p07_ZERG_KERRIGAN, true);
    libNtve_gf_SetAlliance(gv_p03_MOEBIUS, gv_p06_MOEBIUS_SEC_FORCE, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p03_MOEBIUS, gv_p04_ATTACKABLE_CITY, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p03_MOEBIUS, gv_p08_NEUTRAL_CITY, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p06_MOEBIUS_SEC_FORCE, gv_p04_ATTACKABLE_CITY, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    libNtve_gf_SetAlliance(gv_p06_MOEBIUS_SEC_FORCE, gv_p08_NEUTRAL_CITY, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    libNtve_gf_SetAlliance(gv_p04_ATTACKABLE_CITY, gv_p08_NEUTRAL_CITY, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    PlayerModifyPropertyInt(gv_p04_ATTACKABLE_CITY, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_p04_ATTACKABLE_CITY, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_p06_MOEBIUS_SEC_FORCE, c_playerPropMinerals, c_playerPropOperSetTo, 500);
    PlayerModifyPropertyInt(gv_p06_MOEBIUS_SEC_FORCE, c_playerPropVespene, c_playerPropOperSetTo, 500);
    PlayerModifyPropertyInt(gv_p02_ZERG, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p02_ZERG, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p05_ZERG_BASE, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_p05_ZERG_BASE, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerSetColorIndex(gv_p02_ZERG, 4, true);
    PlayerSetColorIndex(gv_p05_ZERG_BASE, 4, true);
    PlayerSetColorIndex(gv_p07_ZERG_KERRIGAN, 4, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9D7EBC36_g;
    int auto9D7EBC36_u;
    unit auto9D7EBC36_var;
    unitgroup auto4F9EEDE5_g;
    int auto4F9EEDE5_u;
    unit auto4F9EEDE5_var;
    unitgroup auto9340685C_g;
    int auto9340685C_u;
    unit auto9340685C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_uNIT_KERRIGAN = UnitFromId(164);
    UnitSetPropertyFixed(gv_uNIT_KERRIGAN, c_unitPropEnergyRegen, 100.0);
    gv_sITE_1_BUILDING = UnitFromId(12);
    gv_sITE_2_BUILDING = UnitFromId(65);
    gv_sITE_3_BUILDING = UnitFromId(84);
    gv_gROUP_INITIALWAVE = UnitGroup(null, gv_p02_ZERG, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_gROUPHydraPicketers = UnitGroup("Hydralisk", gv_p02_ZERG, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitSetPropertyFixed(gv_uNIT_KERRIGAN, c_unitPropEnergyPercent, 100.0);
    auto9D7EBC36_g = UnitGroup(null, gv_p06_MOEBIUS_SEC_FORCE, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9D7EBC36_u = UnitGroupCount(auto9D7EBC36_g, c_unitCountAll);
    for (;; auto9D7EBC36_u -= 1) {
        auto9D7EBC36_var = UnitGroupUnitFromEnd(auto9D7EBC36_g, auto9D7EBC36_u);
        if (auto9D7EBC36_var == null) { break; }
        UnitIssueOrder(auto9D7EBC36_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("DataCore", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_moebiusTargets);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(gv_uNITFauxTargetsType, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_moebiusTargets);
    auto4F9EEDE5_g = UnitGroup(null, gv_p02_ZERG, RegionFromId(81), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4F9EEDE5_u = UnitGroupCount(auto4F9EEDE5_g, c_unitCountAll);
    for (;; auto4F9EEDE5_u -= 1) {
        auto4F9EEDE5_var = UnitGroupUnitFromEnd(auto4F9EEDE5_g, auto4F9EEDE5_u);
        if (auto4F9EEDE5_var == null) { break; }
        UnitGroupAdd(gv_introChasers, auto4F9EEDE5_var);
    }
    auto9340685C_g = UnitGroup("AbandonedBuilding", gv_p08_NEUTRAL_CITY, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9340685C_u = UnitGroupCount(auto9340685C_g, c_unitCountAll);
    for (;; auto9340685C_u -= 1) {
        auto9340685C_var = UnitGroupUnitFromEnd(auto9340685C_g, auto9340685C_u);
        if (auto9340685C_var == null) { break; }
        UnitSetInfoText(auto9340685C_var, StringExternal("Param/Value/3585DECC"), StringExternal("Param/Value/5357C97E"), StringToText(""));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init04Music_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus03MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Music_Init () {
    gt_Init04Music = TriggerCreate("gt_Init04Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libLbty_gf_AutoRevealRegion(RegionFromId(90), RegionFromId(90), gv_p07_ZERG_KERRIGAN);
    libLbty_gf_AutoRevealRegion(RegionFromId(91), RegionFromId(54), gv_p07_ZERG_KERRIGAN);
    libLbty_gf_AutoRevealRegion(RegionFromId(87), RegionFromId(72), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(87), RegionFromId(2), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(87), RegionFromId(4), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(87), RegionFromId(87), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(87), RegionFromId(62), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(87), RegionFromId(65), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(88), RegionFromId(4), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(88), RegionFromId(72), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(86), RegionFromId(56), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(93), RegionFromId(93), gv_p01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerDifficulty(gv_p01_USER) == 1)) {
        PlayerModifyPropertyInt(gv_p02_ZERG, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p05_ZERG_BASE, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p07_ZERG_KERRIGAN, c_playerPropHandicap, c_playerPropOperSetTo, 50);
    }

    gv_kerriganSearchTime = libNtve_gf_DifficultyValueFixed(240.0, 180.0, 160.0, 150.0);
    gf_SetMaxLifeOfUnitType("DataCore", libNtve_gf_DifficultyValueFixed(2000.0, 2000.0, 3000.0, 3500.0));
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 300);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropVespene, c_playerPropOperSetTo, 200);
    gf_AddUpgradeForEnemies(1, "Burrow");
    gf_AddUpgradeForEnemies(1, "overlordspeed");
    gf_AddUpgradeForEnemies(1, "overlordtransport");
    gf_AddUpgradeForEnemies(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergFlyerWeaponsLevel1");
    gf_AddUpgradeForEnemies(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergMeleeWeaponsLevel1");
    gf_AddUpgradeForEnemies(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergMissileWeaponsLevel1");
    gf_AddUpgradeForEnemies(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ZergGroundArmorsLevel1");
    gf_AddUpgradeForEnemies(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ZergFlyerArmorsLevel1");
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        TriggerEnable(gt_Site3ReactionBroodlordsHardBrutal, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_AddUnitTypeToUnitHelpPanel("Overlord", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Drone", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Zergling", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Roach", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Mutalisk", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Infestor", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Ultralisk", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Brutalisk", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("BroodLord", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Corruptor", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Overseer", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SpineCrawler", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SporeCrawler", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("WarPig", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SpartanCompany", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("HammerSecurity", false, gv_p01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CreateNydusWorm
//--------------------------------------------------------------------------------------------------
bool gt_CreateNydusWorm_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    point lv_location;
    region lv_target;
    int lv_qty1;
    string lv_type1;
    int lv_qty2;
    string lv_type2;
    fixed lv_period;
    int lv_maxPacks;
    unit lv_nydus;
    unitgroup lv_spawnedUnits;
    timer lv_periodTimer;

    // Automatic Variable Declarations
    int auto442CA364_n;
    int auto442CA364_i;
    int auto6B698718_n;
    int auto6B698718_i;

    // Variable Initialization
    lv_spawnedUnits = UnitGroupEmpty();
    lv_periodTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = gv_createNydusWormPlayer;
    lv_location = gv_createNydusWormLocation;
    lv_target = gv_createNydusWormTarget;
    lv_qty1 = gv_createNydusWormQty1;
    lv_type1 = gv_createNydusWormType1;
    lv_qty2 = gv_createNydusWormQty2;
    lv_type2 = gv_createNydusWormType2;
    lv_period = gv_createNydusWormPeriod;
    lv_maxPacks = gv_createNydusWormMaxPacks;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, lv_player, lv_location);
    lv_nydus = UnitLastCreated();
    VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(lv_nydus), 4.0), 90.0, false);
    gv_createNydusWormLastUnit = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_nydus), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlayAtPoint(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), lv_location, 8.0, 100.0, 0.0);
    if ((RegionContainsPoint(RegionCircle(lv_location, 10.0), CameraGetTarget(gv_p01_USER)) == true)) {
        CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.2, 2.0, 100.0, 2.0);
    }

    Wait(3.7, c_timeGame);
    while (true) {
        TimerStart(lv_periodTimer, lv_period, false, c_timeGame);
        auto442CA364_n = lv_qty1;
        for (auto442CA364_i = 1; auto442CA364_i <= auto442CA364_n; auto442CA364_i += 1) {
            if ((UnitIsAlive(lv_nydus) == false)) {
                return true;
            }

            if ((UnitGroupCount(UnitGroupFilter(lv_type1, c_playerAny, lv_spawnedUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < (lv_qty1 * lv_maxPacks))) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_nydus), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), lv_location, 8.0, 100.0, 0.0);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_type1, 0, lv_player, UnitGetPosition(lv_nydus));
                UnitGroupAdd(lv_spawnedUnits, UnitLastCreated());
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                AIAttackWaveUseUnit(lv_player, UnitLastCreated());
                AIAttackWaveSend(lv_player, 1, false);
            }

            Wait(0.7, c_timeGame);
        }
        auto6B698718_n = lv_qty2;
        for (auto6B698718_i = 1; auto6B698718_i <= auto6B698718_n; auto6B698718_i += 1) {
            if ((UnitIsAlive(lv_nydus) == false)) {
                return true;
            }

            if ((UnitGroupCount(UnitGroupFilter(lv_type2, c_playerAny, lv_spawnedUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < (lv_qty2 * lv_maxPacks))) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_nydus), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), lv_location, 8.0, 100.0, 0.0);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_type2, 0, lv_player, UnitGetPosition(lv_nydus));
                UnitGroupAdd(lv_spawnedUnits, UnitLastCreated());
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                AIAttackWaveUseUnit(lv_player, UnitLastCreated());
                AIAttackWaveSend(lv_player, 1, false);
            }

            Wait(0.7, c_timeGame);
        }
        libNtve_gf_WaitForTimer(lv_periodTimer, 0.0, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateNydusWorm_Init () {
    gt_CreateNydusWorm = TriggerCreate("gt_CreateNydusWorm_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DropPod
//--------------------------------------------------------------------------------------------------
bool gt_DropPod_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    point lv_location;
    region lv_target;
    int lv_qty1;
    string lv_type1;
    int lv_qty2;
    string lv_type2;
    unitgroup lv_dropUnits;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dropUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = gv_dropPodPlayer;
    lv_location = gv_dropPodLocation;
    lv_target = gv_dropPodTarget;
    lv_qty1 = gv_dropPodQty1;
    lv_type1 = gv_dropPodType1;
    lv_qty2 = gv_dropPodQty2;
    lv_type2 = gv_dropPodType2;
    libNtve_gf_CreateUnitsAtPoint2(lv_qty1, lv_type1, 0, lv_player, PointFromId(134));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropUnits);
    libNtve_gf_CreateUnitsAtPoint2(lv_qty2, lv_type2, 0, lv_player, PointFromId(134));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropUnits);
    libCamp_gf_CreateDropPod(libCamp_ge_DropPodRace_Zerg, lv_location, lv_dropUnits, true);
    AISetGroupSuicide(lv_dropUnits, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DropPod_Init () {
    gt_DropPod = TriggerCreate("gt_DropPod_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Sequence
//--------------------------------------------------------------------------------------------------
bool gt_IntroSequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_AmbientSharkPatrolStart, true, false);
    Wait(0.1, c_timeReal);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_p01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(154), 1.5);
    CinematicFade(true, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/D9C38F6C"), null, PointFromId(154));
    TriggerExecute(gt_StartGame, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSequence_Init () {
    gt_IntroSequence = TriggerCreate("gt_IntroSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game
//--------------------------------------------------------------------------------------------------
bool gt_StartGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus03MusicIntro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_ObjectiveDestroyDataCreateQ, true, false);
    Wait(4.0, c_timeGame);
    TriggerExecute(gt_KerriganInitiateTargetAcquisition, true, false);
    TriggerExecute(gt_TransmissionMissionStartQ, true, false);
    Wait(28.0, c_timeGame);
    TriggerExecute(gt_CreateMedivacIntro, true, false);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_Site1CreepAdvanceAmbientDroppodsPuke, true, false);
    Wait(4.0, c_timeGame);
    TriggerExecute(gt_TransmissionMedivacIntroQ, true, false);
    Wait(12.0, c_timeGame);
    TriggerExecute(gt_IntroMilitiaStartQ, true, false);
    Wait(30.0, c_timeGame);
    TriggerExecute(gt_Site1ActivateDefenses, true, false);
    Wait(10.0, c_timeGame);
    TriggerExecute(gt_CampaignTipsQ, true, false);
    TriggerExecute(gt_KerriganMoveOut, false, false);
    Wait(10.0, c_timeGame);
    TriggerExecute(gt_Site1CityAttackers, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGame_Init () {
    gt_StartGame = TriggerCreate("gt_StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brutalisk Stumbled Upon
//--------------------------------------------------------------------------------------------------
bool gt_BrutaliskStumbledUpon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionBrutaliskFoundQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BrutaliskStumbledUpon_Init () {
    gt_BrutaliskStumbledUpon = TriggerCreate("gt_BrutaliskStumbledUpon_Func");
    TriggerAddEventUnitRange(gt_BrutaliskStumbledUpon, null, UnitFromId(1178), 14.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Medivac Intro
//--------------------------------------------------------------------------------------------------
bool gt_CreateMedivacIntro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "Medivac", 0, gv_p06_MOEBIUS_SEC_FORCE, PointFromId(999));
    gv_medivac01 = UnitLastCreated();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_medivacUnits);
    UnitCargoCreate(gv_medivac01, "Marine", 2);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitCargoLastCreatedGroup(), gv_medivacUnits);
    UnitSetPropertyFixed(gv_medivac01, c_unitPropEnergyPercent, 100.0);
    UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
    UnitIssueOrder(gv_medivac01, OrderTargetingPoint(AbilityCommand("MedivacTransport", 2), PointFromId(995)), c_orderQueueReplace);
    UnitIssueOrder(gv_medivac01, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "Medivac", 0, gv_p06_MOEBIUS_SEC_FORCE, PointFromId(2827));
    gv_medivac02 = UnitLastCreated();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_medivacUnits);
    UnitSetPropertyFixed(gv_medivac02, c_unitPropEnergyPercent, 100.0);
    UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
    UnitCargoCreate(gv_medivac02, "Marine", 2);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitCargoLastCreatedGroup(), gv_medivacUnits);
    UnitIssueOrder(gv_medivac02, OrderTargetingPoint(AbilityCommand("MedivacTransport", 2), PointFromId(1117)), c_orderQueueReplace);
    UnitIssueOrder(gv_medivac02, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateMedivacIntro_Init () {
    gt_CreateMedivacIntro = TriggerCreate("gt_CreateMedivacIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Medivacs Finished
//--------------------------------------------------------------------------------------------------
bool gt_IntroMedivacsFinished_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF6137478_g;
    int autoF6137478_u;
    unit autoF6137478_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitCargoValue(gv_medivac01, c_unitCargoUnitCount) == 0))) {
            return false;
        }

        if (!((UnitCargoValue(gv_medivac02, c_unitCargoUnitCount) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoF6137478_g = gv_medivacUnits;
    autoF6137478_u = UnitGroupCount(autoF6137478_g, c_unitCountAll);
    for (;; autoF6137478_u -= 1) {
        autoF6137478_var = UnitGroupUnitFromEnd(autoF6137478_g, autoF6137478_u);
        if (autoF6137478_var == null) { break; }
        libNtve_gf_RescueUnit(autoF6137478_var, gv_p01_USER, true);
        if ((UnitGetType(autoF6137478_var) == "Medivac")) {
            if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
                UnitSetInfoText(autoF6137478_var, StringExternal("Param/Value/EB077EA5"), StringExternal("Param/Value/8595A3F1"), StringExternal("Param/Value/AE692EA9"));
                UnitSetState(autoF6137478_var, c_unitStateTooltipable, true);
            }
            else {
                UnitSetInfoText(autoF6137478_var, StringExternal("Param/Value/1D83D7CE"), StringToText(""), StringToText(""));
            }
        }

    }
    TriggerExecute(gt_TipNewUnitMedivacQ, true, true);
    TriggerExecute(gt_TipTransportQ, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroMedivacsFinished_Init () {
    gt_IntroMedivacsFinished = TriggerCreate("gt_IntroMedivacsFinished_Func");
    TriggerEnable(gt_IntroMedivacsFinished, false);
    TriggerAddEventTimePeriodic(gt_IntroMedivacsFinished, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medivac Trained
//--------------------------------------------------------------------------------------------------
bool gt_MedivacTrained_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "Medivac"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
        UnitSetInfoText(EventUnitProgressUnit(), StringExternal("Param/Value/0494ADCA"), StringExternal("Param/Value/D71A7F16"), StringExternal("Param/Value/DBD1FCB1"));
        UnitSetState(EventUnitProgressUnit(), c_unitStateTooltipable, true);
    }
    else {
        UnitSetInfoText(EventUnitProgressUnit(), StringExternal("Param/Value/A452F47F"), StringToText(""), StringToText(""));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedivacTrained_Init () {
    gt_MedivacTrained = TriggerCreate("gt_MedivacTrained_Func");
    TriggerAddEventUnitTrainProgress(gt_MedivacTrained, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 1 - Destruction Complete
//--------------------------------------------------------------------------------------------------
bool gt_Site1DestructionComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_guardUnits;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_guardUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((EventUnit() == gv_sITE_1_BUILDING))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_fLAG_SITE_1_ACTIVE = false;
    gv_dataCoresDestroyed += 1;
    VisRevealerDestroy(gv_site1Revealer);
    TimerWindowShow(gv_kerrigansETAWINDOW, PlayerGroupAll(), false);
    TriggerExecute(gt_ObjectiveDestroyDataUpdate, true, true);
    libNtve_gf_AddUnitGroupToUnitGroup(AIGetUnitsInWavesWithTarget(gv_p02_ZERG, AIWaveTargetPoint(PointFromId(100))), lv_guardUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(AIGetUnitsInWavesWithTarget(gv_p02_ZERG, AIWaveTargetPoint(PointFromId(1))), lv_guardUnits);
    UnitGroupIssueOrder(lv_guardUnits, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(5))), c_orderQueueAddToEnd);
    PingDestroy(gv_pINGSite1);
    TriggerExecute(gt_BaseNydusRetaliationForSite1, true, false);
    TriggerExecute(gt_TransmissionCoreIsDestroyedQ, true, true);
    TimerWindowShow(gv_kerrigansETAWINDOW, PlayerGroupAll(), true);
    TriggerExecute(gt_KerriganRecalculateTimer, true, false);
    if ((gv_sitePath1[12] == PointFromId(1305))) {
        gv_sitePath1[12] = PointFromId(3043);
    }

    TriggerExecute(gt_UpdateSitePaths, true, false);
    TriggerExecute(gt_UpdateSiteVisibilityAndPings, true, false);
    if ((gv_dataCoresDestroyed != 3)) {
        libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/5CE67AE1"));
    }

    Wait(15.0, c_timeGame);
    TriggerExecute(gt_TransmissionBrutaliskFoundQ, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site1DestructionComplete_Init () {
    gt_Site1DestructionComplete = TriggerCreate("gt_Site1DestructionComplete_Func");
    TriggerAddEventUnitDied(gt_Site1DestructionComplete, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 1 - Activate Defenses
//--------------------------------------------------------------------------------------------------
bool gt_Site1ActivateDefenses_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_fLAG_SITE_1_ACTIVE = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site1ActivateDefenses_Init () {
    gt_Site1ActivateDefenses = TriggerCreate("gt_Site1ActivateDefenses_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 1 - Subway Spawns
//--------------------------------------------------------------------------------------------------
bool gt_Site1SubwaySpawns_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tARGET;

    // Automatic Variable Declarations
    int auto6E1715D8_n;
    int auto6E1715D8_i;
    int auto8794C39C_n;
    int auto8794C39C_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_sITE_1_BUILDING, c_unitPropLifePercent, c_unitPropCurrent) <= 95.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto6E1715D8_n = libNtve_gf_DifficultyValueInt(2, 2, 2, 3);
    for (auto6E1715D8_i = 1; auto6E1715D8_i <= auto6E1715D8_n; auto6E1715D8_i += 1) {
        lv_tARGET = libNtve_gf_ClosestUnitToPoint(PointFromId(464), UnitGroup(null, gv_p01_USER, RegionCircle(RegionGetCenter(RegionFromId(5)), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        libNtve_gf_CreateUnitsAtPoint2(1, "Roach", 0, gv_p02_ZERG, PointFromId(490));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(464)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_tARGET)), c_orderQueueAddToEnd);
        Wait(0.7, c_timeGame);
    }
    auto8794C39C_n = libNtve_gf_DifficultyValueInt(3, 3, 2, 1);
    for (auto8794C39C_i = 1; auto8794C39C_i <= auto8794C39C_n; auto8794C39C_i += 1) {
        lv_tARGET = libNtve_gf_ClosestUnitToPoint(PointFromId(464), UnitGroup(null, gv_p01_USER, RegionCircle(RegionGetCenter(RegionFromId(5)), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        libNtve_gf_CreateUnitsAtPoint2(1, libNtve_gf_DifficultyValueUnitType("Zergling", "Zergling", "Zergling", "Hydralisk"), 0, gv_p02_ZERG, PointFromId(490));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(464)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_tARGET)), c_orderQueueAddToEnd);
        Wait(0.7, c_timeGame);
    }
    TriggerExecute(gt_TipHighGroundQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site1SubwaySpawns_Init () {
    gt_Site1SubwaySpawns = TriggerCreate("gt_Site1SubwaySpawns_Func");
    TriggerAddEventTimePeriodic(gt_Site1SubwaySpawns, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 1 - Mutalisks
//--------------------------------------------------------------------------------------------------
bool gt_Site1Mutalisks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_sITE_1_BUILDING, c_unitPropLifePercent, c_unitPropCurrent) <= 85.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Mutalisk", 0, gv_p02_ZERG, PointFromId(134));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(52))), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(5))), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site1Mutalisks_Init () {
    gt_Site1Mutalisks = TriggerCreate("gt_Site1Mutalisks_Func");
    TriggerAddEventTimePeriodic(gt_Site1Mutalisks, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 1 - Nydus
//--------------------------------------------------------------------------------------------------
bool gt_Site1Nydus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_nydus;
    unitgroup lv_spawnGroup;
    timer lv_recycleDelay;
    int lv_maxPacks;

    // Automatic Variable Declarations
    int auto077CE0D3_n;
    int auto077CE0D3_i;
    const int autoCE9E2528_n = 1;
    int autoCE9E2528_i;

    // Variable Initialization
    lv_spawnGroup = UnitGroupEmpty();
    lv_recycleDelay = TimerCreate();
    lv_maxPacks = libNtve_gf_DifficultyValueInt(2, 2, 3, 3);

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_sITE_1_BUILDING, c_unitPropLifePercent, c_unitPropCurrent) <= 35.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_p05_ZERG_BASE, RegionGetCenter(RegionFromId(20)));
    lv_nydus = UnitLastCreated();
    libNtve_gf_ShareVisionofUnit(lv_nydus, true, gv_p01_USER);
    gv_createNydusWormLastUnit = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_nydus), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlayAtPoint(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), UnitGetPosition(lv_nydus), 8.0, 100.0, 0.0);
    if ((RegionContainsPoint(RegionFromId(20), CameraGetTarget(gv_p01_USER)) == true)) {
        CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.2, 2.0, 100.0, 2.0);
    }

    Wait(3.7, c_timeGame);
    while (true) {
        TimerStart(lv_recycleDelay, 25.0, false, c_timeGame);
        auto077CE0D3_n = libNtve_gf_DifficultyValueInt(2, 2, 3, 3);
        for (auto077CE0D3_i = 1; auto077CE0D3_i <= auto077CE0D3_n; auto077CE0D3_i += 1) {
            if ((UnitIsAlive(lv_nydus) == false)) {
                return true;
            }

            if ((UnitGroupCount(UnitGroupFilter("Zergling", c_playerAny, lv_spawnGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < (libNtve_gf_DifficultyValueInt(2, 2, 3, 3) * lv_maxPacks))) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_nydus), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), UnitGetPosition(lv_nydus), 8.0, 100.0, 0.0);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_p05_ZERG_BASE, UnitGetPosition(lv_nydus));
                UnitGroupAdd(lv_spawnGroup, UnitLastCreated());
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(18))), c_orderQueueReplace);
            }

            Wait(0.7, c_timeGame);
        }
        for (autoCE9E2528_i = 1; autoCE9E2528_i <= autoCE9E2528_n; autoCE9E2528_i += 1) {
            if ((UnitIsAlive(lv_nydus) == false)) {
                return true;
            }

            if ((UnitGroupCount(UnitGroupFilter(libNtve_gf_DifficultyValueUnitType("Roach", "Roach", "Hydralisk", "Hydralisk"), c_playerAny, lv_spawnGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < (1 * lv_maxPacks))) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_nydus), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), UnitGetPosition(lv_nydus), 8.0, 100.0, 0.0);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, libNtve_gf_DifficultyValueUnitType("Roach", "Roach", "Hydralisk", "Hydralisk"), 0, gv_p05_ZERG_BASE, UnitGetPosition(lv_nydus));
                UnitGroupAdd(lv_spawnGroup, UnitLastCreated());
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(18))), c_orderQueueReplace);
            }

            Wait(0.7, c_timeGame);
        }
        libNtve_gf_WaitForTimer(lv_recycleDelay, 0.0, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site1Nydus_Init () {
    gt_Site1Nydus = TriggerCreate("gt_Site1Nydus_Func");
    TriggerAddEventTimePeriodic(gt_Site1Nydus, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 2 - Destruction Complete
//--------------------------------------------------------------------------------------------------
bool gt_Site2DestructionComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pointIndex;

    // Automatic Variable Declarations
    const int autoC2E3A761_ae = 15;
    const int autoC2E3A761_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((EventUnit() == gv_sITE_2_BUILDING))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_fLAG_SITE_2_ACTIVE = false;
    gv_dataCoresDestroyed += 1;
    VisRevealerDestroy(gv_site2Revealer);
    TimerWindowShow(gv_kerrigansETAWINDOW, PlayerGroupAll(), false);
    AIToggleBulliesInRegion(gv_p05_ZERG_BASE, RegionFromId(12), false);
    TriggerExecute(gt_ObjectiveDestroyDataUpdate, true, false);
    TriggerExecute(gt_Site2HydraPicketline, true, false);
    PingDestroy(gv_pINGSite2);
    TriggerExecute(gt_BaseNydusRetaliationForSite2, true, false);
    TriggerExecute(gt_TransmissionCoreIsDestroyedQ, true, true);
    TimerWindowShow(gv_kerrigansETAWINDOW, PlayerGroupAll(), true);
    TriggerExecute(gt_KerriganRecalculateTimer, true, false);
    lv_pointIndex = 11;
    for ( ; ( (autoC2E3A761_ai >= 0 && lv_pointIndex <= autoC2E3A761_ae) || (autoC2E3A761_ai < 0 && lv_pointIndex >= autoC2E3A761_ae) ) ; lv_pointIndex += autoC2E3A761_ai ) {
        gv_sitePath2[lv_pointIndex] = null;
    }
    if ((gv_sitePath2[11] != null)) {
        gv_sitePath2[11] = PointFromId(295);
    }

    if ((gv_sitePath2[12] != null)) {
        gv_sitePath2[12] = PointFromId(335);
    }

    TriggerExecute(gt_UpdateSitePaths, true, false);
    TriggerExecute(gt_UpdateSiteVisibilityAndPings, true, false);
    if ((gv_dataCoresDestroyed != 3)) {
        libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/FF4F87B3"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site2DestructionComplete_Init () {
    gt_Site2DestructionComplete = TriggerCreate("gt_Site2DestructionComplete_Func");
    TriggerAddEventUnitDied(gt_Site2DestructionComplete, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 2 - Activate Defenses
//--------------------------------------------------------------------------------------------------
bool gt_Site2ActivateDefenses_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_fLAG_SITE_2_ACTIVE = true;
    TriggerExecute(gt_Site2CreepPukerSpawns, true, false);
    AIToggleBulliesInRegion(gv_p05_ZERG_BASE, RegionFromId(12), true);
    if ((gv_pINGSite2 == c_invalidPingId)) {
        gf_CreateSitePing("PingObjective", gv_sITE_2_BUILDING);
        gv_pINGSite2 = PingLastCreated();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site2ActivateDefenses_Init () {
    gt_Site2ActivateDefenses = TriggerCreate("gt_Site2ActivateDefenses_Func");
    TriggerAddEventUnitRegion(gt_Site2ActivateDefenses, null, RegionFromId(12), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 2 - Creep Puker Spawns
//--------------------------------------------------------------------------------------------------
bool gt_Site2CreepPukerSpawns_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateCreepPuker(gv_p02_ZERG, PointFromId(491), RegionRandomPoint(RegionFromId(31)));
    gf_CreateCreepPuker(gv_p02_ZERG, PointFromId(491), RegionRandomPoint(RegionFromId(32)));
    gf_CreateCreepPuker(gv_p02_ZERG, PointFromId(491), RegionRandomPoint(RegionFromId(33)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site2CreepPukerSpawns_Init () {
    gt_Site2CreepPukerSpawns = TriggerCreate("gt_Site2CreepPukerSpawns_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 2 - Subway Spawns
//--------------------------------------------------------------------------------------------------
bool gt_Site2SubwaySpawns_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto233903B7_n;
    int auto233903B7_i;
    int auto2EFEB2B1_n;
    int auto2EFEB2B1_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_sITE_2_BUILDING, c_unitPropLifePercent, c_unitPropCurrent) <= 95.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto233903B7_n = libNtve_gf_DifficultyValueInt(6, 6, 8, 10);
    for (auto233903B7_i = 1; auto233903B7_i <= auto233903B7_n; auto233903B7_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, libNtve_gf_DifficultyValueUnitType("Swarmling", "Swarmling", "Zergling", "Zergling"), 0, gv_p02_ZERG, PointFromId(623));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(622)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(74))), c_orderQueueAddToEnd);
        Wait(0.3, c_timeGame);
    }
    Wait(0.5, c_timeGame);
    auto2EFEB2B1_n = libNtve_gf_DifficultyValueInt(2, 2, 3, 2);
    for (auto2EFEB2B1_i = 1; auto2EFEB2B1_i <= auto2EFEB2B1_n; auto2EFEB2B1_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, libNtve_gf_DifficultyValueUnitType("Zergling", "Zergling", "Roach", "Hydralisk"), 0, gv_p02_ZERG, PointFromId(623));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(622)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(74))), c_orderQueueAddToEnd);
        Wait(0.7, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site2SubwaySpawns_Init () {
    gt_Site2SubwaySpawns = TriggerCreate("gt_Site2SubwaySpawns_Func");
    TriggerAddEventTimePeriodic(gt_Site2SubwaySpawns, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 2 - Hatchery Nydus
//--------------------------------------------------------------------------------------------------
bool gt_Site2HatcheryNydus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((EventUnit() == UnitFromId(201)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(3.0, c_timeGame);
    gf_CreateNydusWorm(gv_p05_ZERG_BASE, RegionGetCenter(RegionFromId(23)), RegionFromId(74), libNtve_gf_DifficultyValueInt(2, 2, 1, 1), libNtve_gf_DifficultyValueUnitType("Zergling", "Zergling", "Ultralisk", "Ultralisk"), libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Infestor", 180.0, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site2HatcheryNydus_Init () {
    gt_Site2HatcheryNydus = TriggerCreate("gt_Site2HatcheryNydus_Func");
    TriggerAddEventUnitDied(gt_Site2HatcheryNydus, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 2 - Reaction Nydus
//--------------------------------------------------------------------------------------------------
bool gt_Site2ReactionNydus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_sITE_2_BUILDING, c_unitPropLifePercent, c_unitPropCurrent) <= 35.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreateNydusWorm(gv_p05_ZERG_BASE, RegionGetCenter(RegionFromId(24)), RegionFromId(74), libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Roach", libNtve_gf_DifficultyValueInt(3, 3, 6, 7), "Zergling", 45.0, 1);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        Wait(4.0, c_timeGame);
        gf_CreateNydusWorm(gv_p05_ZERG_BASE, RegionGetCenter(RegionFromId(78)), RegionFromId(74), 1, "Hydralisk", libNtve_gf_DifficultyValueInt(0, 0, 3, 4), "Baneling", 45.0, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site2ReactionNydus_Init () {
    gt_Site2ReactionNydus = TriggerCreate("gt_Site2ReactionNydus_Func");
    TriggerAddEventTimePeriodic(gt_Site2ReactionNydus, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 2 - Hydra Picketline
//--------------------------------------------------------------------------------------------------
bool gt_Site2HydraPicketline_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupIssueOrder(gv_gROUPHydraPicketers, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(916)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site2HydraPicketline_Init () {
    gt_Site2HydraPicketline = TriggerCreate("gt_Site2HydraPicketline_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 3 - Destruction Complete
//--------------------------------------------------------------------------------------------------
bool gt_Site3DestructionComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pointIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((EventUnit() == gv_sITE_3_BUILDING))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_fLAG_SITE_3_ACTIVE = false;
    gv_dataCoresDestroyed += 1;
    VisRevealerDestroy(gv_site3Revealer);
    TimerWindowShow(gv_kerrigansETAWINDOW, PlayerGroupAll(), false);
    TriggerExecute(gt_ObjectiveDestroyDataUpdate, true, true);
    PingDestroy(gv_pINGSite3);
    TriggerExecute(gt_TransmissionCoreIsDestroyedQ, true, true);
    TimerWindowShow(gv_kerrigansETAWINDOW, PlayerGroupAll(), true);
    TriggerExecute(gt_KerriganRecalculateTimer, true, false);
    TriggerExecute(gt_UpdateSitePaths, true, false);
    TriggerExecute(gt_UpdateSiteVisibilityAndPings, true, false);
    if ((gv_dataCoresDestroyed != 3)) {
        libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/B170DAF9"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site3DestructionComplete_Init () {
    gt_Site3DestructionComplete = TriggerCreate("gt_Site3DestructionComplete_Func");
    TriggerAddEventUnitDied(gt_Site3DestructionComplete, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 3 - Activate Defenses
//--------------------------------------------------------------------------------------------------
bool gt_Site3ActivateDefenses_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_fLAG_SITE_3_ACTIVE = true;
    TriggerExecute(gt_Site3CreepPukerSpawn, true, false);
    if ((gv_pINGSite3 == c_invalidPingId)) {
        gf_CreateSitePing("PingNumeric3", gv_sITE_3_BUILDING);
        gv_pINGSite3 = PingLastCreated();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site3ActivateDefenses_Init () {
    gt_Site3ActivateDefenses = TriggerCreate("gt_Site3ActivateDefenses_Func");
    TriggerAddEventUnitRegion(gt_Site3ActivateDefenses, null, RegionFromId(13), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 3 - Creep Puker Spawn
//--------------------------------------------------------------------------------------------------
bool gt_Site3CreepPukerSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateCreepPuker(gv_p02_ZERG, PointFromId(848), RegionRandomPoint(RegionFromId(43)));
    gf_CreateCreepPuker(gv_p02_ZERG, PointFromId(848), RegionRandomPoint(RegionFromId(45)));
    gf_CreateCreepPuker(gv_p02_ZERG, PointFromId(848), RegionRandomPoint(RegionFromId(46)));
    gf_CreateCreepPuker(gv_p02_ZERG, PointFromId(848), RegionRandomPoint(RegionFromId(47)));
    gf_CreateCreepPuker(gv_p02_ZERG, PointFromId(848), RegionRandomPoint(RegionFromId(44)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site3CreepPukerSpawn_Init () {
    gt_Site3CreepPukerSpawn = TriggerCreate("gt_Site3CreepPukerSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 3 - Roof Nydus 1
//--------------------------------------------------------------------------------------------------
bool gt_Site3RoofNydus1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreateNydusWorm(gv_p05_ZERG_BASE, RegionGetCenter(RegionFromId(70)), RegionFromId(76), libNtve_gf_DifficultyValueInt(4, 4, 3, 2), "Zergling", libNtve_gf_DifficultyValueInt(1, 1, 2, 3), libNtve_gf_DifficultyValueUnitType("Roach", "Roach", "Hydralisk", "Hydralisk"), 3600.0, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site3RoofNydus1_Init () {
    gt_Site3RoofNydus1 = TriggerCreate("gt_Site3RoofNydus1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 3 - Roof Nydus 2
//--------------------------------------------------------------------------------------------------
bool gt_Site3RoofNydus2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(72), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(8.0, c_timeGame);
    gf_CreateNydusWorm(gv_p05_ZERG_BASE, RegionGetCenter(RegionFromId(71)), RegionFromId(77), libNtve_gf_DifficultyValueInt(4, 4, 2, 2), libNtve_gf_DifficultyValueUnitType("Zergling", "Zergling", "Baneling", "Baneling"), libNtve_gf_DifficultyValueInt(2, 2, 1, 2), libNtve_gf_DifficultyValueUnitType("Roach", "Roach", "Hydralisk", "Hydralisk"), 3600.0, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site3RoofNydus2_Init () {
    gt_Site3RoofNydus2 = TriggerCreate("gt_Site3RoofNydus2_Func");
    TriggerAddEventTimePeriodic(gt_Site3RoofNydus2, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 3 - Nydus 1
//--------------------------------------------------------------------------------------------------
bool gt_Site3Nydus1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_sITE_3_BUILDING, c_unitPropLifePercent, c_unitPropCurrent) <= 95.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreateNydusWorm(gv_p05_ZERG_BASE, RegionGetCenter(RegionFromId(27)), RegionFromId(75), libNtve_gf_DifficultyValueInt(6, 6, 1, 2), libNtve_gf_DifficultyValueUnitType("Swarmling", "Swarmling", "Hydralisk", "Hydralisk"), libNtve_gf_DifficultyValueInt(2, 2, 3, 1), libNtve_gf_DifficultyValueUnitType("Zergling", "Zergling", "Zergling", "Roach"), 3600.0, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site3Nydus1_Init () {
    gt_Site3Nydus1 = TriggerCreate("gt_Site3Nydus1_Func");
    TriggerAddEventTimePeriodic(gt_Site3Nydus1, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 3 - Nydus 2
//--------------------------------------------------------------------------------------------------
bool gt_Site3Nydus2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_sITE_3_BUILDING, c_unitPropLifePercent, c_unitPropCurrent) <= 75.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreateNydusWorm(gv_p05_ZERG_BASE, RegionGetCenter(RegionFromId(41)), RegionFromId(75), libNtve_gf_DifficultyValueInt(4, 4, 2, 1), libNtve_gf_DifficultyValueUnitType("Zergling", "Zergling", "Roach", "Ultralisk"), libNtve_gf_DifficultyValueInt(1, 1, 4, 5), libNtve_gf_DifficultyValueUnitType("Hydralisk", "Hydralisk", "Zergling", "Zergling"), 3600.0, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site3Nydus2_Init () {
    gt_Site3Nydus2 = TriggerCreate("gt_Site3Nydus2_Func");
    TriggerAddEventTimePeriodic(gt_Site3Nydus2, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 3 - Nydus 3
//--------------------------------------------------------------------------------------------------
bool gt_Site3Nydus3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_sITE_3_BUILDING, c_unitPropLifePercent, c_unitPropCurrent) <= 30.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreateNydusWorm(gv_p05_ZERG_BASE, RegionGetCenter(RegionFromId(42)), RegionFromId(75), libNtve_gf_DifficultyValueInt(4, 4, 4, 6), "Zergling", libNtve_gf_DifficultyValueInt(1, 1, 1, 2), "Roach", 3600.0, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site3Nydus3_Init () {
    gt_Site3Nydus3 = TriggerCreate("gt_Site3Nydus3_Func");
    TriggerAddEventTimePeriodic(gt_Site3Nydus3, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 3 - Reaction Broodlords (Hard/Brutal)
//--------------------------------------------------------------------------------------------------
bool gt_Site3ReactionBroodlordsHardBrutal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_sITE_3_BUILDING, c_unitPropLifePercent, c_unitPropCurrent) <= 50.0))) {
            return false;
        }

        if (!((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(0, 0, 2, 1), libNtve_gf_DifficultyValueUnitType("Mutalisk", "Mutalisk", "Mutalisk", "BroodLord"), 0, gv_p02_ZERG, PointFromId(134));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(75))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site3ReactionBroodlordsHardBrutal_Init () {
    gt_Site3ReactionBroodlordsHardBrutal = TriggerCreate("gt_Site3ReactionBroodlordsHardBrutal_Func");
    TriggerEnable(gt_Site3ReactionBroodlordsHardBrutal, false);
    TriggerAddEventTimePeriodic(gt_Site3ReactionBroodlordsHardBrutal, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 3 - Drop Pods
//--------------------------------------------------------------------------------------------------
bool gt_Site3DropPods_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_sITE_3_BUILDING, c_unitPropLifePercent, c_unitPropCurrent) <= 60.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_DropPod(gv_p05_ZERG_BASE, PointFromId(912), RegionFromId(75), libNtve_gf_DifficultyValueInt(4, 4, 10, 12), "Swarmling", libNtve_gf_DifficultyValueInt(4, 4, 5, 6), "Zergling");
    Wait(1.3, c_timeGame);
    gf_DropPod(gv_p05_ZERG_BASE, PointFromId(914), RegionFromId(75), libNtve_gf_DifficultyValueInt(2, 2, 1, 2), libNtve_gf_DifficultyValueUnitType("Zergling", "Zergling", "Hydralisk", "Baneling"), libNtve_gf_DifficultyValueInt(1, 1, 2, 1), libNtve_gf_DifficultyValueUnitType("Roach", "Roach", "Roach", "Ultralisk"));
    Wait(0.5, c_timeGame);
    gf_DropPod(gv_p05_ZERG_BASE, PointFromId(913), RegionFromId(75), libNtve_gf_DifficultyValueInt(2, 2, 4, 0), "Zergling", libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Roach");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site3DropPods_Init () {
    gt_Site3DropPods = TriggerCreate("gt_Site3DropPods_Func");
    TriggerAddEventTimePeriodic(gt_Site3DropPods, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 1 Reticule Creator
//--------------------------------------------------------------------------------------------------
bool gt_Site1ReticuleCreator_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionCircle(UnitGetPosition(gv_sITE_1_BUILDING), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_AttachModelToUnit(UnitFromId(12), "BriefingUnitSelectLargeRed", "Ref_Center");
    gv_objectiveBuildingReticule[1] = libNtve_gf_ActorLastCreated();
    TriggerEnable(gt_Site1ReticuleKiller, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site1ReticuleCreator_Init () {
    gt_Site1ReticuleCreator = TriggerCreate("gt_Site1ReticuleCreator_Func");
    TriggerAddEventTimePeriodic(gt_Site1ReticuleCreator, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 2 Reticule Creator
//--------------------------------------------------------------------------------------------------
bool gt_Site2ReticuleCreator_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionCircle(UnitGetPosition(gv_sITE_2_BUILDING), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_AttachModelToUnit(UnitFromId(65), "BriefingUnitSelectLargeRed", "Ref_Center");
    gv_objectiveBuildingReticule[2] = libNtve_gf_ActorLastCreated();
    TriggerEnable(gt_Site2ReticuleKiller, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site2ReticuleCreator_Init () {
    gt_Site2ReticuleCreator = TriggerCreate("gt_Site2ReticuleCreator_Func");
    TriggerAddEventTimePeriodic(gt_Site2ReticuleCreator, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 3 Reticule Creator
//--------------------------------------------------------------------------------------------------
bool gt_Site3ReticuleCreator_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionCircle(UnitGetPosition(gv_sITE_3_BUILDING), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_AttachModelToUnit(UnitFromId(84), "BriefingUnitSelectLargeRed", "Ref_Center");
    gv_objectiveBuildingReticule[3] = libNtve_gf_ActorLastCreated();
    TriggerEnable(gt_Site3ReticuleKiller, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site3ReticuleCreator_Init () {
    gt_Site3ReticuleCreator = TriggerCreate("gt_Site3ReticuleCreator_Func");
    TriggerAddEventTimePeriodic(gt_Site3ReticuleCreator, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 1 - Reticule Killer
//--------------------------------------------------------------------------------------------------
bool gt_Site1ReticuleKiller_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_sITE_1_BUILDING))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTarget()) == gv_p01_USER))) {
            return false;
        }

        if (!((gv_objectiveBuildingReticule[1] != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_objectiveBuildingReticule[1]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site1ReticuleKiller_Init () {
    gt_Site1ReticuleKiller = TriggerCreate("gt_Site1ReticuleKiller_Func");
    TriggerEnable(gt_Site1ReticuleKiller, false);
    TriggerAddEventUnitAttacked(gt_Site1ReticuleKiller, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 2 - Reticule Killer
//--------------------------------------------------------------------------------------------------
bool gt_Site2ReticuleKiller_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_sITE_2_BUILDING))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTarget()) == gv_p01_USER))) {
            return false;
        }

        if (!((gv_objectiveBuildingReticule[2] != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_objectiveBuildingReticule[2]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site2ReticuleKiller_Init () {
    gt_Site2ReticuleKiller = TriggerCreate("gt_Site2ReticuleKiller_Func");
    TriggerEnable(gt_Site2ReticuleKiller, false);
    TriggerAddEventUnitAttacked(gt_Site2ReticuleKiller, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 3 - Reticule Killer
//--------------------------------------------------------------------------------------------------
bool gt_Site3ReticuleKiller_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_sITE_3_BUILDING))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTarget()) == gv_p01_USER))) {
            return false;
        }

        if (!((gv_objectiveBuildingReticule[3] != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_objectiveBuildingReticule[3]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site3ReticuleKiller_Init () {
    gt_Site3ReticuleKiller = TriggerCreate("gt_Site3ReticuleKiller_Func");
    TriggerEnable(gt_Site3ReticuleKiller, false);
    TriggerAddEventUnitAttacked(gt_Site3ReticuleKiller, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Base - Nydus Retaliation For Site 1
//--------------------------------------------------------------------------------------------------
bool gt_BaseNydusRetaliationForSite1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_baseNydus) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(60.0, c_timeGame);
    gf_CreateNydusWorm(gv_p05_ZERG_BASE, RegionGetCenter(RegionFromId(38)), gf_GetSmartNydusRegion(), libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Roach", libNtve_gf_DifficultyValueInt(4, 4, 6, 9), "Zergling", libNtve_gf_DifficultyValueFixed(90.0, 90.0, 75.0, 60.0), 1);
    gv_baseNydus = gf_LastCreatedNydusWorm();
    PingCreate(PlayerGroupActive(), "PingWarning", RegionGetCenter(gv_createNydusWormTarget), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 5.0);
    libNtve_gf_AttachModelToUnit(gv_baseNydus, "BriefingUnitSelectRed", "Ref_Center");
    gv_baseNydusPing1 = libNtve_gf_ActorLastCreated();
    TriggerExecute(gt_BaseRetaliationDialogueQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BaseNydusRetaliationForSite1_Init () {
    gt_BaseNydusRetaliationForSite1 = TriggerCreate("gt_BaseNydusRetaliationForSite1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Base - Nydus Retaliation For Site 2
//--------------------------------------------------------------------------------------------------
bool gt_BaseNydusRetaliationForSite2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_baseNydus) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(60.0, c_timeGame);
    gf_CreateNydusWorm(gv_p05_ZERG_BASE, RegionGetCenter(gf_GetSmartNydusRegion()), RegionFromId(34), libNtve_gf_DifficultyValueInt(1, 1, 2, 4), "Hydralisk", libNtve_gf_DifficultyValueInt(4, 4, 1, 2), libNtve_gf_DifficultyValueUnitType("Zergling", "Zergling", "Baneling", "Baneling"), libNtve_gf_DifficultyValueFixed(90.0, 90.0, 75.0, 60.0), 2);
    gv_baseNydus = gf_LastCreatedNydusWorm();
    PingCreate(PlayerGroupActive(), "PingWarning", RegionGetCenter(gv_createNydusWormTarget), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 5.0);
    libNtve_gf_AttachModelToUnit(gv_baseNydus, "BriefingUnitSelectRed", "Ref_Center");
    gv_baseNydusPing2 = libNtve_gf_ActorLastCreated();
    TriggerExecute(gt_BaseRetaliationDialogueQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BaseNydusRetaliationForSite2_Init () {
    gt_BaseNydusRetaliationForSite2 = TriggerCreate("gt_BaseNydusRetaliationForSite2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Base - Retaliation Dialogue Q
//--------------------------------------------------------------------------------------------------
bool gt_BaseRetaliationDialogueQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoFD8333F3_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) < 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoFD8333F3_val = TriggerGetExecCount(TriggerGetCurrent());
    if (autoFD8333F3_val == 0) {
        TriggerQueueEnter();
        UIAlertUnit("Trigger", gv_p01_USER, StringToText(""), null, gv_baseNydus);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TTychus03Horner00033", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus03Horner00033", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else if (autoFD8333F3_val == 1) {
        TriggerQueueEnter();
        UIAlertUnit("Trigger", gv_p01_USER, StringToText(""), null, gv_baseNydus);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TTychus03Horner00009", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus03Horner00009", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BaseRetaliationDialogueQ_Init () {
    gt_BaseRetaliationDialogueQ = TriggerCreate("gt_BaseRetaliationDialogueQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan - Initiate Target Acquisition
//--------------------------------------------------------------------------------------------------
bool gt_KerriganInitiateTargetAcquisition_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(gv_uNIT_KERRIGAN), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetScale(PingLastCreated(), 0.75);
    PingSetUnit(PingLastCreated(), gv_uNIT_KERRIGAN);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/E1ADE357"));
    PlayerSetAlliance(gv_p07_ZERG_KERRIGAN, c_allianceIdVision, gv_p01_USER, true);
    PlayerSetAlliance(gv_p07_ZERG_KERRIGAN, c_allianceIdVision, gv_p03_MOEBIUS, true);
    gf_CreateSitePing("PingObjective", gv_sITE_1_BUILDING);
    gv_pINGSite1 = PingLastCreated();
    TriggerExecute(gt_KerriganCalculatingETAQ, true, false);
    TriggerEnable(gt_PathSite1, true);
    TriggerExecute(gt_PathSite1, true, false);
    VisRevealerCreate(gv_p01_USER, RegionCircle(UnitGetPosition(gv_sITE_1_BUILDING), 7.0));
    gv_site1Revealer = VisRevealerLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganInitiateTargetAcquisition_Init () {
    gt_KerriganInitiateTargetAcquisition = TriggerCreate("gt_KerriganInitiateTargetAcquisition_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan - Move Out
//--------------------------------------------------------------------------------------------------
bool gt_KerriganMoveOut_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_kerrigansTarget = RegionFromId(53);
    UnitIssueOrder(gv_uNIT_KERRIGAN, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(gv_kerrigansTarget)), c_orderQueueReplace);
    TimerStart(gv_kerriganSearchTimer, gv_kerriganSearchTime, false, c_timeGame);
    TriggerExecute(gt_KerriganRecalculateTimer, true, true);
    TimerWindowCreate(gv_kerrigansETATIMER, StringExternal("Param/Value/6A412D92"), true, false);
    TimerWindowSetStyle(TimerWindowLastCreated(), c_timerWindowStyleHorizontalTitleTime, false);
    TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<mintotal/>:<sec2/>"));
    TimerWindowSetColor(TimerWindowLastCreated(), c_timerWindowColorTime, Color(0.00, 100.00, 0.00), 0.0);
    gv_kerrigansETAWINDOW = TimerWindowLastCreated();
    TriggerEnable(gt_KerriganMoveOutRepeater, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganMoveOut_Init () {
    gt_KerriganMoveOut = TriggerCreate("gt_KerriganMoveOut_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan - Target Reached
//--------------------------------------------------------------------------------------------------
bool gt_KerriganTargetReached_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tARGETunit;

    // Automatic Variable Declarations
    unitgroup auto1C94DF8F_g;
    int auto1C94DF8F_u;
    unit auto1C94DF8F_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_uNIT_KERRIGAN))) {
            return false;
        }

        if (!((EventUnitRegion() == gv_kerrigansTarget))) {
            return false;
        }

        if (!((gv_fLAGKerrigansearching == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroupFilterRegion(gv_moebiusTargets, gv_kerrigansTarget, 0), c_unitCountAlive) == 0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/DB549085"), false);
        TriggerExecute(gt_KerriganPickNextTarget, true, false);
    }
    else {
        auto1C94DF8F_g = gv_moebiusTargets;
        auto1C94DF8F_u = UnitGroupCount(auto1C94DF8F_g, c_unitCountAll);
        for (;; auto1C94DF8F_u -= 1) {
            auto1C94DF8F_var = UnitGroupUnitFromEnd(auto1C94DF8F_g, auto1C94DF8F_u);
            if (auto1C94DF8F_var == null) { break; }
            if ((libNtve_gf_UnitInRegion(auto1C94DF8F_var, gv_kerrigansTarget) == true)) {
                lv_tARGETunit = auto1C94DF8F_var;
            }

        }
        gv_fLAGKerrigansearching = true;
        UnitBehaviorAdd(gv_uNIT_KERRIGAN, "ProgressBar", gv_uNIT_KERRIGAN, 1);
        UnitBehaviorSetDuration(gv_uNIT_KERRIGAN, "ProgressBar", FixedToInt(TimerGetRemaining(gv_kerriganSearchTimer)));
        UnitForceStatusBar(gv_uNIT_KERRIGAN, true);
        UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("KerriganSearch", 0), lv_tARGETunit), c_orderQueueReplace);
        TriggerExecute(gt_KerriganTauntsRaynor1Q, true, false);
        TriggerExecute(gt_KerriganTauntsRaynor2Q, true, false);
        TriggerExecute(gt_KerriganTauntsRaynor3Q, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganTargetReached_Init () {
    gt_KerriganTargetReached = TriggerCreate("gt_KerriganTargetReached_Func");
    TriggerAddEventUnitRegion(gt_KerriganTargetReached, null, RegionFromId(53), true);
    TriggerAddEventUnitRegion(gt_KerriganTargetReached, null, RegionFromId(54), true);
    TriggerAddEventUnitRegion(gt_KerriganTargetReached, null, RegionFromId(5), true);
    TriggerAddEventUnitRegion(gt_KerriganTargetReached, null, RegionFromId(55), true);
    TriggerAddEventUnitRegion(gt_KerriganTargetReached, null, RegionFromId(26), true);
    TriggerAddEventUnitRegion(gt_KerriganTargetReached, null, RegionFromId(37), true);
    TriggerAddEventUnitRegion(gt_KerriganTargetReached, null, RegionFromId(58), true);
    TriggerAddEventUnitRegion(gt_KerriganTargetReached, null, RegionFromId(56), true);
    TriggerAddEventUnitRegion(gt_KerriganTargetReached, null, RegionFromId(11), true);
    TriggerAddEventUnitRegion(gt_KerriganTargetReached, null, RegionFromId(59), true);
    TriggerAddEventUnitRegion(gt_KerriganTargetReached, null, RegionFromId(60), true);
    TriggerAddEventUnitRegion(gt_KerriganTargetReached, null, RegionFromId(57), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan - Target Done
//--------------------------------------------------------------------------------------------------
bool gt_KerriganTargetDone_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_fLAGKerrigansearching == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_fLAGKerrigansearching = false;
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_uNIT_KERRIGAN), c_animNameDefault);
    if (((gv_kerrigansTarget == RegionFromId(5)) || (gv_kerrigansTarget == RegionFromId(56)) || (gv_kerrigansTarget == RegionFromId(57)))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/42514F44"), false);
        TriggerExecute(gt_DefeatPrimaryObjectiveFailedCheck, true, false);
    }
    else {
        gv_achievementKerriganFakeBuildingCounter += 1;
        TriggerDebugOutput(1, StringExternal("Param/Value/FABC331F"), false);
        gf_OrderKerrigantoBladestormArea(gv_kerrigansTarget);
        TimerStart(gv_kerriganSearchTimer, gv_kerriganSearchTime, false, c_timeGame);
        TriggerExecute(gt_KerriganPickNextTarget, true, false);
        TriggerExecute(gt_KerriganRecalculateTimer, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganTargetDone_Init () {
    gt_KerriganTargetDone = TriggerCreate("gt_KerriganTargetDone_Func");
    TriggerAddEventTimer(gt_KerriganTargetDone, gv_kerriganSearchTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan - Target Dies Early
//--------------------------------------------------------------------------------------------------
bool gt_KerriganTargetDiesEarly_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_moebiusTargets, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_fLAGKerrigansearching == true) && (libNtve_gf_UnitInRegion(EventUnit(), gv_kerrigansTarget) == true)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/9F0B2A76"), false);
        UnitBehaviorRemove(gv_uNIT_KERRIGAN, "ProgressBar", 1);
        gv_fLAGKerrigansearching = false;
        TimerStart(gv_kerriganSearchTimer, gv_kerriganSearchTime, false, c_timeGame);
        TriggerExecute(gt_KerriganPickNextTarget, true, false);
        TriggerExecute(gt_KerriganRecalculateTimer, true, false);
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/ECCF683F"), false);
        TriggerExecute(gt_KerriganRecalculateTimer, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganTargetDiesEarly_Init () {
    gt_KerriganTargetDiesEarly = TriggerCreate("gt_KerriganTargetDiesEarly_Func");
    TriggerAddEventUnitDied(gt_KerriganTargetDiesEarly, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan - Pick Next Target
//--------------------------------------------------------------------------------------------------
bool gt_KerriganPickNextTarget_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    region auto72ADFA7C_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto72ADFA7C_val = gv_kerrigansTarget;
    if (auto72ADFA7C_val == RegionFromId(53)) {
        gv_kerrigansTarget = RegionFromId(54);
        UnitIssueOrder(gv_uNIT_KERRIGAN, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(gv_kerrigansTarget)), c_orderQueueAddToEnd);
    }
    else if (auto72ADFA7C_val == RegionFromId(54)) {
        if ((UnitIsAlive(gv_sITE_1_BUILDING) == true)) {
            gv_kerrigansTarget = RegionFromId(5);
            UnitIssueOrder(gv_uNIT_KERRIGAN, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(gv_kerrigansTarget)), c_orderQueueAddToEnd);
            TriggerExecute(gt_KerriganApproachesSite1Q, true, false);
        }
        else {
            gv_kerrigansTarget = RegionFromId(55);
            UnitIssueOrder(gv_uNIT_KERRIGAN, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(gv_kerrigansTarget)), c_orderQueueAddToEnd);
        }
    }
    else if (auto72ADFA7C_val == RegionFromId(5)) {
        gv_kerrigansTarget = RegionFromId(55);
        UnitIssueOrder(gv_uNIT_KERRIGAN, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(gv_kerrigansTarget)), c_orderQueueAddToEnd);
    }
    else if (auto72ADFA7C_val == RegionFromId(55)) {
        gv_kerrigansTarget = RegionFromId(26);
        UnitIssueOrder(gv_uNIT_KERRIGAN, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(gv_kerrigansTarget)), c_orderQueueAddToEnd);
    }
    else if (auto72ADFA7C_val == RegionFromId(26)) {
        gv_kerrigansTarget = RegionFromId(37);
        UnitIssueOrder(gv_uNIT_KERRIGAN, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(gv_kerrigansTarget)), c_orderQueueAddToEnd);
    }
    else if (auto72ADFA7C_val == RegionFromId(37)) {
        gv_kerrigansTarget = RegionFromId(58);
        UnitIssueOrder(gv_uNIT_KERRIGAN, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(gv_kerrigansTarget)), c_orderQueueAddToEnd);
    }
    else if (auto72ADFA7C_val == RegionFromId(58)) {
        if ((UnitIsAlive(gv_sITE_2_BUILDING) == true)) {
            gv_kerrigansTarget = RegionFromId(56);
            UnitIssueOrder(gv_uNIT_KERRIGAN, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(gv_kerrigansTarget)), c_orderQueueAddToEnd);
            TriggerExecute(gt_KerriganApproachesSite2Q, true, false);
        }
        else {
            gv_kerrigansTarget = RegionFromId(11);
            UnitIssueOrder(gv_uNIT_KERRIGAN, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(gv_kerrigansTarget)), c_orderQueueAddToEnd);
        }
    }
    else if (auto72ADFA7C_val == RegionFromId(56)) {
        gv_kerrigansTarget = RegionFromId(11);
        UnitIssueOrder(gv_uNIT_KERRIGAN, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(618)), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_uNIT_KERRIGAN, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(gv_kerrigansTarget)), c_orderQueueAddToEnd);
    }
    else if (auto72ADFA7C_val == RegionFromId(11)) {
        gv_kerrigansTarget = RegionFromId(59);
        UnitIssueOrder(gv_uNIT_KERRIGAN, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(gv_kerrigansTarget)), c_orderQueueAddToEnd);
    }
    else if (auto72ADFA7C_val == RegionFromId(59)) {
        gv_kerrigansTarget = RegionFromId(60);
        UnitIssueOrder(gv_uNIT_KERRIGAN, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(203)), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_uNIT_KERRIGAN, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(gv_kerrigansTarget)), c_orderQueueAddToEnd);
    }
    else if (auto72ADFA7C_val == RegionFromId(60)) {
        if ((UnitIsAlive(gv_sITE_3_BUILDING) == true)) {
            TriggerExecute(gt_KerriganApproachesSite3Q, true, false);
            gv_kerrigansTarget = RegionFromId(57);
            UnitIssueOrder(gv_uNIT_KERRIGAN, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(gv_kerrigansTarget)), c_orderQueueAddToEnd);
        }

    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganPickNextTarget_Init () {
    gt_KerriganPickNextTarget = TriggerCreate("gt_KerriganPickNextTarget_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan - Recalculate Timer
//--------------------------------------------------------------------------------------------------
bool gt_KerriganRecalculateTimer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_eTA;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_eTA = (gv_kerriganSearchTime * IntToFixed(gf_CountTargetsOfCurrentStage()));
    lv_eTA = (lv_eTA - (gv_kerriganSearchTime - TimerGetRemaining(gv_kerriganSearchTimer)));
    if ((lv_eTA > 0.0)) {
        TimerStart(gv_kerrigansETATIMER, lv_eTA, false, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganRecalculateTimer_Init () {
    gt_KerriganRecalculateTimer = TriggerCreate("gt_KerriganRecalculateTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan - Bladestorm
//--------------------------------------------------------------------------------------------------
bool gt_KerriganBladestorm_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_fLAGKerrigansearching == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup("AutoTurret", gv_p01_USER, RegionCircle(UnitGetPosition(gv_uNIT_KERRIGAN), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        UnitAbilityReset(gv_uNIT_KERRIGAN, AbilityCommand("Tychus03OmegaStorm", 0), c_spendLocationAbility);
        UnitIssueOrder(gv_uNIT_KERRIGAN, OrderTargetingPoint(AbilityCommand("Tychus03OmegaStorm", 0), libNtve_gf_CenterOfUnitGroup(UnitGroup("AutoTurret", gv_p01_USER, RegionCircle(UnitGetPosition(gv_uNIT_KERRIGAN), 8.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0))), c_orderQueueReplace);
        Wait(2.0, c_timeGame);
        UnitIssueOrder(gv_uNIT_KERRIGAN, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(gv_kerrigansTarget)), c_orderQueueReplace);
        return true;
    }

    if ((UnitGroupCount(UnitGroup("SiegeTankSieged", gv_p01_USER, RegionCircle(UnitGetPosition(gv_uNIT_KERRIGAN), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        UnitAbilityReset(gv_uNIT_KERRIGAN, AbilityCommand("Tychus03OmegaStorm", 0), c_spendLocationAbility);
        UnitIssueOrder(gv_uNIT_KERRIGAN, OrderTargetingPoint(AbilityCommand("Tychus03OmegaStorm", 0), libNtve_gf_CenterOfUnitGroup(UnitGroup("SiegeTankSieged", gv_p01_USER, RegionCircle(UnitGetPosition(gv_uNIT_KERRIGAN), 8.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0))), c_orderQueueReplace);
        Wait(2.0, c_timeGame);
        UnitIssueOrder(gv_uNIT_KERRIGAN, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(gv_kerrigansTarget)), c_orderQueueReplace);
        return true;
    }

    if ((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionCircle(UnitGetPosition(gv_uNIT_KERRIGAN), 5.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 5)) {
        UnitAbilityReset(gv_uNIT_KERRIGAN, AbilityCommand("Tychus03OmegaStorm", 0), c_spendLocationAbility);
        UnitIssueOrder(gv_uNIT_KERRIGAN, OrderTargetingPoint(AbilityCommand("Tychus03OmegaStorm", 0), libNtve_gf_CenterOfUnitGroup(UnitGroup(null, gv_p01_USER, RegionCircle(UnitGetPosition(gv_uNIT_KERRIGAN), 5.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0))), c_orderQueueReplace);
        Wait(2.0, c_timeGame);
        UnitIssueOrder(gv_uNIT_KERRIGAN, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(gv_kerrigansTarget)), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganBladestorm_Init () {
    gt_KerriganBladestorm = TriggerCreate("gt_KerriganBladestorm_Func");
    TriggerAddEventTimePeriodic(gt_KerriganBladestorm, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan - Move Out Repeater
//--------------------------------------------------------------------------------------------------
bool gt_KerriganMoveOutRepeater_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_fLAGKerrigansearching == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_uNIT_KERRIGAN, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(gv_kerrigansTarget)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganMoveOutRepeater_Init () {
    gt_KerriganMoveOutRepeater = TriggerCreate("gt_KerriganMoveOutRepeater_Func");
    TriggerEnable(gt_KerriganMoveOutRepeater, false);
    TriggerAddEventTimePeriodic(gt_KerriganMoveOutRepeater, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan - Calculating ETA Q
//--------------------------------------------------------------------------------------------------
bool gt_KerriganCalculatingETAQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/04074059"), null, gv_uNIT_KERRIGAN);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus03Adjutant00003", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus03Adjutant00003", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganCalculatingETAQ_Init () {
    gt_KerriganCalculatingETAQ = TriggerCreate("gt_KerriganCalculatingETAQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan - Taunts Raynor 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_KerriganTauntsRaynor1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_kerrigansTarget == RegionFromId(54)))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_dataCoresDestroyed == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/1F81401C"), null, gv_uNIT_KERRIGAN);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus03MusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    // Transmission - SoundLink("TTychus03Kerrigan00007", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus03Kerrigan00007", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTychus03Kerrigan00008", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus03Kerrigan00008", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganTauntsRaynor1Q_Init () {
    gt_KerriganTauntsRaynor1Q = TriggerCreate("gt_KerriganTauntsRaynor1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan - Taunts Raynor 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_KerriganTauntsRaynor2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_kerrigansTarget == RegionFromId(26)))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/FBEF4FF0"), null, gv_uNIT_KERRIGAN);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus03MusicEventB", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    // Transmission - SoundLink("TTychus03Kerrigan00038", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus03Kerrigan00038", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganTauntsRaynor2Q_Init () {
    gt_KerriganTauntsRaynor2Q = TriggerCreate("gt_KerriganTauntsRaynor2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan - Taunts Raynor 3 Q
//--------------------------------------------------------------------------------------------------
bool gt_KerriganTauntsRaynor3Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_kerrigansTarget == RegionFromId(37)))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/081F327C"), null, gv_uNIT_KERRIGAN);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus03Kerrigan00040", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus03Kerrigan00040", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganTauntsRaynor3Q_Init () {
    gt_KerriganTauntsRaynor3Q = TriggerCreate("gt_KerriganTauntsRaynor3Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan - Approaches Site 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_KerriganApproachesSite1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_sITE_1_BUILDING) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/D8FADF59"), null, gv_uNIT_KERRIGAN);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus03Tychus00013", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus03Tychus00013", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganApproachesSite1Q_Init () {
    gt_KerriganApproachesSite1Q = TriggerCreate("gt_KerriganApproachesSite1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan - Approaches Site 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_KerriganApproachesSite2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_sITE_2_BUILDING) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/8BAEDB5D"), null, gv_uNIT_KERRIGAN);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus03Horner00014", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus03Horner00014", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganApproachesSite2Q_Init () {
    gt_KerriganApproachesSite2Q = TriggerCreate("gt_KerriganApproachesSite2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan - Approaches Site 3 Q
//--------------------------------------------------------------------------------------------------
bool gt_KerriganApproachesSite3Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_sITE_3_BUILDING) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/5E22D217"), null, gv_uNIT_KERRIGAN);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus03Horner00032", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus03Horner00032", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganApproachesSite3Q_Init () {
    gt_KerriganApproachesSite3Q = TriggerCreate("gt_KerriganApproachesSite3Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Militia Start Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroMilitiaStartQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_talkActor;

    // Automatic Variable Declarations
    const int auto3587E73F_n = 4;
    int auto3587E73F_i;
    unitgroup auto893DB8D7_g;
    int auto893DB8D7_u;
    unit auto893DB8D7_var;
    unitgroup autoF42710C8_g;
    int autoF42710C8_u;
    unit autoF42710C8_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto3587E73F_i = 1; auto3587E73F_i <= auto3587E73F_n; auto3587E73F_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "WarPig", 0, gv_p06_MOEBIUS_SEC_FORCE, PointFromId(1680));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(35))), c_orderQueueReplace);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 75.0);
        UnitGroupAdd(gv_introMilitia, UnitLastCreated());
    }
    gv_uNITIntroSpeaker = UnitLastCreated();
    Wait(1.5, c_timeGame);
    auto893DB8D7_g = gv_introChasers;
    auto893DB8D7_u = UnitGroupCount(auto893DB8D7_g, c_unitCountAll);
    for (;; auto893DB8D7_u -= 1) {
        auto893DB8D7_var = UnitGroupUnitFromEnd(auto893DB8D7_g, auto893DB8D7_u);
        if (auto893DB8D7_var == null) { break; }
        UnitIssueOrder(auto893DB8D7_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(35))), c_orderQueueReplace);
    }
    Wait(7.0, c_timeGame);
    autoF42710C8_g = gv_introMilitia;
    autoF42710C8_u = UnitGroupCount(autoF42710C8_g, c_unitCountAll);
    for (;; autoF42710C8_u -= 1) {
        autoF42710C8_var = UnitGroupUnitFromEnd(autoF42710C8_g, autoF42710C8_u);
        if (autoF42710C8_var == null) { break; }
        libNtve_gf_RescueUnit(autoF42710C8_var, gv_p01_USER, true);
        gv_statRescuablesFound += 1;
    }
    TriggerExecute(gt_AchievementAllUnitsRescued, true, false);
    TriggerQueueEnter();
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/5299697B"), null, gv_uNITIntroSpeaker);
    libNtve_gf_AttachModelToUnit(gv_uNITIntroSpeaker, "TalkIcon", "Origin");
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus03Marine700017", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus03Marine700017", -1), c_transmissionDurationAdd, 1.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    TriggerQueueExit();
    while (!((TriggerQueueIsEmpty() == true))) {
        Wait(1.0, c_timeGame);
    }
    Wait(10.0, c_timeGame);
    if ((TriggerIsEnabled(gt_Site1MilitiaHeadsUpQ) == true)) {
        TriggerEnable(gt_Site1MilitiaHeadsUpQ, false);
        libNtve_gf_CreateModelAtPoint("BriefingUnitSelectLarge", PointFromId(2654));
        gv_site1RescuableReticule = libNtve_gf_ActorLastCreated();
        TriggerQueueEnter();
        UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/5F4C1497"), null, gv_uNITSite1Speaker);
        MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_uNITSite1Speaker), 2.0, Color(100.00, 100.00, 0.00));
        libNtve_gf_ShareVisionofUnit(gv_uNITSite1Speaker, true, gv_p01_USER);
        libNtve_gf_AttachModelToUnit(gv_uNITSite1Speaker, "TalkIcon", "Origin");
        lv_talkActor = libNtve_gf_ActorLastCreated();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TTychus03MoebiusMarine00022", -1)
        libCamp_gf_SendTransmissionCampaign(gv_uNITSite1Speaker, SoundLink("TTychus03MoebiusMarine00022", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        libNtve_gf_KillModel(lv_talkActor);
        TriggerEnable(gt_Site1MilitiaRescued, true);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroMilitiaStartQ_Init () {
    gt_IntroMilitiaStartQ = TriggerCreate("gt_IntroMilitiaStartQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 1 Militia Heads Up Q
//--------------------------------------------------------------------------------------------------
bool gt_Site1MilitiaHeadsUpQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_talkActor;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p06_MOEBIUS_SEC_FORCE, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectLarge", PointFromId(2654));
    gv_site1RescuableReticule = libNtve_gf_ActorLastCreated();
    TriggerQueueEnter();
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/B04777F1"), null, gv_uNITSite1Speaker);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_uNITSite1Speaker), 2.0, Color(100.00, 100.00, 0.00));
    libNtve_gf_ShareVisionofUnit(gv_uNITSite1Speaker, true, gv_p01_USER);
    libNtve_gf_AttachModelToUnit(gv_uNITSite1Speaker, "TalkIcon", "Origin");
    lv_talkActor = libNtve_gf_ActorLastCreated();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus03MoebiusMarine00022", -1)
    libCamp_gf_SendTransmissionCampaign(gv_uNITSite1Speaker, SoundLink("TTychus03MoebiusMarine00022", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    libNtve_gf_KillModel(lv_talkActor);
    TriggerEnable(gt_Site1MilitiaRescued, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site1MilitiaHeadsUpQ_Init () {
    gt_Site1MilitiaHeadsUpQ = TriggerCreate("gt_Site1MilitiaHeadsUpQ_Func");
    TriggerAddEventUnitRegion(gt_Site1MilitiaHeadsUpQ, null, RegionFromId(82), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 1 Militia Rescued
//--------------------------------------------------------------------------------------------------
bool gt_Site1MilitiaRescued_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto80C95A67_g;
    int auto80C95A67_u;
    unit auto80C95A67_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(52), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Medivac", gv_p01_USER, RegionFromId(52), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Hercules", gv_p01_USER, RegionFromId(52), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p06_MOEBIUS_SEC_FORCE, RegionFromId(52), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_site1RescuableReticule);
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/21F868D2"), null, PointFromId(8));
    auto80C95A67_g = UnitGroup(null, gv_p06_MOEBIUS_SEC_FORCE, RegionFromId(52), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto80C95A67_u = UnitGroupCount(auto80C95A67_g, c_unitCountAll);
    for (;; auto80C95A67_u -= 1) {
        auto80C95A67_var = UnitGroupUnitFromEnd(auto80C95A67_g, auto80C95A67_u);
        if (auto80C95A67_var == null) { break; }
        gv_statRescuablesFound += 1;
        libNtve_gf_RescueUnit(auto80C95A67_var, gv_p01_USER, true);
    }
    TriggerExecute(gt_AchievementAllUnitsRescued, true, false);
    TriggerExecute(gt_TransmissionSite1MilitiaRescuedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site1MilitiaRescued_Init () {
    gt_Site1MilitiaRescued = TriggerCreate("gt_Site1MilitiaRescued_Func");
    TriggerEnable(gt_Site1MilitiaRescued, false);
    TriggerAddEventTimePeriodic(gt_Site1MilitiaRescued, 0.75, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: The Wall Heads Up Q
//--------------------------------------------------------------------------------------------------
bool gt_TheWallHeadsUpQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_talkActor;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p06_MOEBIUS_SEC_FORCE, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectLarge", PointFromId(564));
    gv_wallRescuableReticule = libNtve_gf_ActorLastCreated();
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/E0CF8433"), null, PointFromId(1308));
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_uNITWallSpeaker), 2.0, Color(100.00, 100.00, 0.00));
    libNtve_gf_ShareVisionofUnit(gv_uNITWallSpeaker, true, gv_p01_USER);
    libNtve_gf_AttachModelToUnit(gv_uNITWallSpeaker, "TalkIcon", "Origin");
    lv_talkActor = libNtve_gf_ActorLastCreated();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus03MoebiusMarine00030", -1)
    libCamp_gf_SendTransmissionCampaign(gv_uNITWallSpeaker, SoundLink("TTychus03MoebiusMarine00030", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    libNtve_gf_KillModel(lv_talkActor);
    TriggerEnable(gt_TheWallRescued, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TheWallHeadsUpQ_Init () {
    gt_TheWallHeadsUpQ = TriggerCreate("gt_TheWallHeadsUpQ_Func");
    TriggerAddEventUnitRegion(gt_TheWallHeadsUpQ, null, RegionFromId(83), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: The Wall  Rescued
//--------------------------------------------------------------------------------------------------
bool gt_TheWallRescued_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2C4C9513_g;
    int auto2C4C9513_u;
    unit auto2C4C9513_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(73), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Medivac", gv_p01_USER, RegionFromId(73), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Hercules", gv_p01_USER, RegionFromId(73), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p06_MOEBIUS_SEC_FORCE, RegionFromId(73), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_wallRescuableReticule);
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/FCE35A41"), null, PointFromId(1308));
    auto2C4C9513_g = UnitGroup(null, gv_p06_MOEBIUS_SEC_FORCE, RegionFromId(73), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2C4C9513_u = UnitGroupCount(auto2C4C9513_g, c_unitCountAll);
    for (;; auto2C4C9513_u -= 1) {
        auto2C4C9513_var = UnitGroupUnitFromEnd(auto2C4C9513_g, auto2C4C9513_u);
        if (auto2C4C9513_var == null) { break; }
        gv_statRescuablesFound += 1;
        libNtve_gf_RescueUnit(auto2C4C9513_var, gv_p01_USER, true);
    }
    TriggerExecute(gt_AchievementAllUnitsRescued, true, false);
    TriggerExecute(gt_TransmissionTheWallRescuedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TheWallRescued_Init () {
    gt_TheWallRescued = TriggerCreate("gt_TheWallRescued_Func");
    TriggerEnable(gt_TheWallRescued, false);
    TriggerAddEventTimePeriodic(gt_TheWallRescued, 0.75, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 2 Militia Heads Up Q
//--------------------------------------------------------------------------------------------------
bool gt_Site2MilitiaHeadsUpQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_talkActor;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p06_MOEBIUS_SEC_FORCE, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectLarge", PointFromId(2656));
    gv_site2RescuableReticule = libNtve_gf_ActorLastCreated();
    TriggerQueueEnter();
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/5A52BBEB"), null, gv_uNITSite2Speaker);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_uNITSite2Speaker), 2.0, Color(100.00, 100.00, 0.00));
    libNtve_gf_ShareVisionofUnit(gv_uNITSite2Speaker, true, gv_p01_USER);
    libNtve_gf_AttachModelToUnit(gv_uNITSite2Speaker, "TalkIcon", "Origin");
    lv_talkActor = libNtve_gf_ActorLastCreated();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus03MoebiusMarauder00027", -1)
    libCamp_gf_SendTransmissionCampaign(gv_uNITSite2Speaker, SoundLink("TTychus03MoebiusMarauder00027", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    libNtve_gf_KillModel(lv_talkActor);
    TriggerEnable(gt_Site2MilitiaRescued, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site2MilitiaHeadsUpQ_Init () {
    gt_Site2MilitiaHeadsUpQ = TriggerCreate("gt_Site2MilitiaHeadsUpQ_Func");
    TriggerAddEventUnitRegion(gt_Site2MilitiaHeadsUpQ, null, RegionFromId(84), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 2 Militia Rescued
//--------------------------------------------------------------------------------------------------
bool gt_Site2MilitiaRescued_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9EA41264_g;
    int auto9EA41264_u;
    unit auto9EA41264_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(69), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Medivac", gv_p01_USER, RegionFromId(69), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Hercules", gv_p01_USER, RegionFromId(69), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p06_MOEBIUS_SEC_FORCE, RegionFromId(69), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_site2RescuableReticule);
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/00FCDEE2"), null, gv_uNITSite2Speaker);
    auto9EA41264_g = UnitGroup(null, gv_p06_MOEBIUS_SEC_FORCE, RegionFromId(69), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9EA41264_u = UnitGroupCount(auto9EA41264_g, c_unitCountAll);
    for (;; auto9EA41264_u -= 1) {
        auto9EA41264_var = UnitGroupUnitFromEnd(auto9EA41264_g, auto9EA41264_u);
        if (auto9EA41264_var == null) { break; }
        gv_statRescuablesFound += 1;
        libNtve_gf_RescueUnit(auto9EA41264_var, gv_p01_USER, true);
    }
    TriggerExecute(gt_AchievementAllUnitsRescued, true, false);
    TriggerExecute(gt_TransmissionSite2MilitiaRescuedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site2MilitiaRescued_Init () {
    gt_Site2MilitiaRescued = TriggerCreate("gt_Site2MilitiaRescued_Func");
    TriggerEnable(gt_Site2MilitiaRescued, false);
    TriggerAddEventTimePeriodic(gt_Site2MilitiaRescued, 0.86, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alive Inside!!! Heads Up Q
//--------------------------------------------------------------------------------------------------
bool gt_AliveInsideHeadsUpQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_talkActor;

    // Automatic Variable Declarations
    const int autoF4FA28C1_n = 5;
    int autoF4FA28C1_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    for (autoF4FA28C1_i = 1; autoF4FA28C1_i <= autoF4FA28C1_n; autoF4FA28C1_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "WarPig", 0, gv_p06_MOEBIUS_SEC_FORCE, PointFromId(794));
        SoundPlayOnUnit(SoundLink("Medivac_Unload", -1), PlayerGroupAll(), UnitLastCreated(), 0.0, 100.0, 0.0);
        libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, gv_p01_USER);
        UnitGroupAdd(gv_gROUPAliveInside, UnitLastCreated());
        Wait(0.5, c_timeGame);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(788)), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
    }
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/CE9DBEA6"), null, PointFromId(794));
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(62)), 2.0, Color(100.00, 100.00, 0.00));
    libNtve_gf_AttachModelToUnit(UnitGroupRandomUnit(gv_gROUPAliveInside, c_unitCountAlive), "TalkIcon", "Origin");
    lv_talkActor = libNtve_gf_ActorLastCreated();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus03MoebiusMarine00030", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus03MoebiusMarine00030", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    libNtve_gf_KillModel(lv_talkActor);
    TriggerEnable(gt_AliveInsideRescued, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AliveInsideHeadsUpQ_Init () {
    gt_AliveInsideHeadsUpQ = TriggerCreate("gt_AliveInsideHeadsUpQ_Func");
    TriggerAddEventUnitRegion(gt_AliveInsideHeadsUpQ, null, RegionFromId(62), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alive Inside!!! Rescued
//--------------------------------------------------------------------------------------------------
bool gt_AliveInsideRescued_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto84FA099F_g;
    int auto84FA099F_u;
    unit auto84FA099F_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(62), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Medivac", gv_p01_USER, RegionFromId(62), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Hercules", gv_p01_USER, RegionFromId(62), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p06_MOEBIUS_SEC_FORCE, RegionFromId(62), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/0BF38237"), null, PointFromId(788));
    auto84FA099F_g = UnitGroup(null, gv_p06_MOEBIUS_SEC_FORCE, RegionFromId(62), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto84FA099F_u = UnitGroupCount(auto84FA099F_g, c_unitCountAll);
    for (;; auto84FA099F_u -= 1) {
        auto84FA099F_var = UnitGroupUnitFromEnd(auto84FA099F_g, auto84FA099F_u);
        if (auto84FA099F_var == null) { break; }
        gv_statRescuablesFound += 1;
        libNtve_gf_RescueUnit(auto84FA099F_var, gv_p01_USER, true);
    }
    TriggerExecute(gt_AchievementAllUnitsRescued, true, false);
    TriggerExecute(gt_TransmissionAliveInsideRescuedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AliveInsideRescued_Init () {
    gt_AliveInsideRescued = TriggerCreate("gt_AliveInsideRescued_Func");
    TriggerEnable(gt_AliveInsideRescued, false);
    TriggerAddEventTimePeriodic(gt_AliveInsideRescued, 0.75, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 3 Militia Heads Up Q
//--------------------------------------------------------------------------------------------------
bool gt_Site3MilitiaHeadsUpQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_talkActor;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p06_MOEBIUS_SEC_FORCE, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectLarge", PointFromId(2672));
    gv_site3RescuableReticule = libNtve_gf_ActorLastCreated();
    TriggerQueueEnter();
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/894821DB"), null, gv_uNITSite3Speaker);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_uNITSite3Speaker), 2.0, Color(100.00, 100.00, 0.00));
    libNtve_gf_ShareVisionofUnit(gv_uNITSite3Speaker, true, gv_p01_USER);
    libNtve_gf_AttachModelToUnit(gv_uNITSite3Speaker, "TalkIcon", "Origin");
    lv_talkActor = libNtve_gf_ActorLastCreated();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus03MoebiusMarine00021", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus03MoebiusMarine00021", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    libNtve_gf_KillModel(lv_talkActor);
    TriggerEnable(gt_Site3MilitiaRescued, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site3MilitiaHeadsUpQ_Init () {
    gt_Site3MilitiaHeadsUpQ = TriggerCreate("gt_Site3MilitiaHeadsUpQ_Func");
    TriggerAddEventUnitRegion(gt_Site3MilitiaHeadsUpQ, null, RegionFromId(85), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 3 Militia Rescued
//--------------------------------------------------------------------------------------------------
bool gt_Site3MilitiaRescued_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB2F67AC6_g;
    int autoB2F67AC6_u;
    unit autoB2F67AC6_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(63), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Medivac", gv_p01_USER, RegionFromId(63), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Hercules", gv_p01_USER, RegionFromId(63), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p06_MOEBIUS_SEC_FORCE, RegionFromId(63), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_site3RescuableReticule);
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/6E542FBC"), null, PointFromId(788));
    autoB2F67AC6_g = UnitGroup(null, gv_p06_MOEBIUS_SEC_FORCE, RegionFromId(63), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB2F67AC6_u = UnitGroupCount(autoB2F67AC6_g, c_unitCountAll);
    for (;; autoB2F67AC6_u -= 1) {
        autoB2F67AC6_var = UnitGroupUnitFromEnd(autoB2F67AC6_g, autoB2F67AC6_u);
        if (autoB2F67AC6_var == null) { break; }
        gv_statRescuablesFound += 1;
        libNtve_gf_RescueUnit(autoB2F67AC6_var, gv_p01_USER, true);
    }
    TriggerExecute(gt_TransmissionSite3MilitiaRescuedQ, true, false);
    TriggerExecute(gt_AchievementAllUnitsRescued, true, false);
    Wait(11.0, c_timeGame);
    TriggerExecute(gt_Site3RoofNydus1, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site3MilitiaRescued_Init () {
    gt_Site3MilitiaRescued = TriggerCreate("gt_Site3MilitiaRescued_Func");
    TriggerEnable(gt_Site3MilitiaRescued, false);
    TriggerAddEventTimePeriodic(gt_Site3MilitiaRescued, 0.75, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 1 - City Attackers
//--------------------------------------------------------------------------------------------------
bool gt_Site1CityAttackers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupIssueOrder(gv_gROUP_INITIALWAVE, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(555)), c_orderQueueReplace);
    UnitGroupIssueOrder(gv_gROUP_INITIALWAVE, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(723)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(gv_gROUP_INITIALWAVE, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(724)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(gv_gROUP_INITIALWAVE, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(725)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(gv_gROUP_INITIALWAVE, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(735)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(gv_gROUP_INITIALWAVE, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(920)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site1CityAttackers_Init () {
    gt_Site1CityAttackers = TriggerCreate("gt_Site1CityAttackers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 1 - Initial Patrol Burrow
//--------------------------------------------------------------------------------------------------
bool gt_Site1InitialPatrolBurrow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto29FB423C_g;
    int auto29FB423C_u;
    unit auto29FB423C_var;
    unitgroup autoC3025EA2_g;
    int autoC3025EA2_u;
    unit autoC3025EA2_var;

    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_p04_ATTACKABLE_CITY, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto29FB423C_g = gv_gROUP_INITIALWAVE;
    auto29FB423C_u = UnitGroupCount(auto29FB423C_g, c_unitCountAll);
    for (;; auto29FB423C_u -= 1) {
        auto29FB423C_var = UnitGroupUnitFromEnd(auto29FB423C_g, auto29FB423C_u);
        if (auto29FB423C_var == null) { break; }
        if ((UnitGetType(auto29FB423C_var) == "Zergling")) {
            UnitIssueOrder(auto29FB423C_var, Order(AbilityCommand("BurrowZerglingDown", 0)), c_orderQueueAddToEnd);
        }

    }
    autoC3025EA2_g = gv_gROUP_INITIALWAVE;
    autoC3025EA2_u = UnitGroupCount(autoC3025EA2_g, c_unitCountAll);
    for (;; autoC3025EA2_u -= 1) {
        autoC3025EA2_var = UnitGroupUnitFromEnd(autoC3025EA2_g, autoC3025EA2_u);
        if (autoC3025EA2_var == null) { break; }
        if ((UnitGetType(autoC3025EA2_var) == "Roach")) {
            UnitIssueOrder(autoC3025EA2_var, Order(AbilityCommand("BurrowHydraliskDown", 0)), c_orderQueueAddToEnd);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site1InitialPatrolBurrow_Init () {
    gt_Site1InitialPatrolBurrow = TriggerCreate("gt_Site1InitialPatrolBurrow_Func");
    TriggerAddEventTimePeriodic(gt_Site1InitialPatrolBurrow, 13.37, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ambient - Shark Patrol Start
//--------------------------------------------------------------------------------------------------
bool gt_AmbientSharkPatrolStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_p02_ZERG, RegionFromId(66), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_gROUP_ZERG_SITE1_SHARKS);
    AISetGroupScriptControlled(gv_gROUP_ZERG_SITE1_SHARKS, true);
    UnitGroupIssueOrder(gv_gROUP_ZERG_SITE1_SHARKS, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(10))), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmbientSharkPatrolStart_Init () {
    gt_AmbientSharkPatrolStart = TriggerCreate("gt_AmbientSharkPatrolStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ambient - Shark Patrol 1
//--------------------------------------------------------------------------------------------------
bool gt_AmbientSharkPatrol1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_gROUP_ZERG_SITE1_SHARKS, EventUnit()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroupFilterRegion(gv_gROUP_ZERG_SITE1_SHARKS, RegionFromId(10), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupIssueOrder(gv_gROUP_ZERG_SITE1_SHARKS, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(14))), c_orderQueueAddToEnd);
    TriggerEnable(gt_AmbientSharkPatrol2, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmbientSharkPatrol1_Init () {
    gt_AmbientSharkPatrol1 = TriggerCreate("gt_AmbientSharkPatrol1_Func");
    TriggerAddEventUnitRegion(gt_AmbientSharkPatrol1, null, RegionFromId(10), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ambient - Shark Patrol 2
//--------------------------------------------------------------------------------------------------
bool gt_AmbientSharkPatrol2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_gROUP_ZERG_SITE1_SHARKS, EventUnit()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroupFilterRegion(gv_gROUP_ZERG_SITE1_SHARKS, RegionFromId(14), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupIssueOrder(gv_gROUP_ZERG_SITE1_SHARKS, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(15))), c_orderQueueAddToEnd);
    TriggerEnable(gt_AmbientSharkPatrol3, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmbientSharkPatrol2_Init () {
    gt_AmbientSharkPatrol2 = TriggerCreate("gt_AmbientSharkPatrol2_Func");
    TriggerEnable(gt_AmbientSharkPatrol2, false);
    TriggerAddEventUnitRegion(gt_AmbientSharkPatrol2, null, RegionFromId(14), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ambient - Shark Patrol 3
//--------------------------------------------------------------------------------------------------
bool gt_AmbientSharkPatrol3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_gROUP_ZERG_SITE1_SHARKS, EventUnit()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroupFilterRegion(gv_gROUP_ZERG_SITE1_SHARKS, RegionFromId(15), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupIssueOrder(gv_gROUP_ZERG_SITE1_SHARKS, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(17))), c_orderQueueAddToEnd);
    TriggerEnable(gt_AmbientSharkPatrol4, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmbientSharkPatrol3_Init () {
    gt_AmbientSharkPatrol3 = TriggerCreate("gt_AmbientSharkPatrol3_Func");
    TriggerEnable(gt_AmbientSharkPatrol3, false);
    TriggerAddEventUnitRegion(gt_AmbientSharkPatrol3, null, RegionFromId(15), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ambient - Shark Patrol 4
//--------------------------------------------------------------------------------------------------
bool gt_AmbientSharkPatrol4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_gROUP_ZERG_SITE1_SHARKS, EventUnit()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroupFilterRegion(gv_gROUP_ZERG_SITE1_SHARKS, RegionFromId(17), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupIssueOrder(gv_gROUP_ZERG_SITE1_SHARKS, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(10))), c_orderQueueAddToEnd);
    TriggerEnable(gt_AmbientSharkPatrol1, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmbientSharkPatrol4_Init () {
    gt_AmbientSharkPatrol4 = TriggerCreate("gt_AmbientSharkPatrol4_Func");
    TriggerEnable(gt_AmbientSharkPatrol4, false);
    TriggerAddEventUnitRegion(gt_AmbientSharkPatrol4, null, RegionFromId(17), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Site 1 - Creep Advance Ambient Drop pods Puke
//--------------------------------------------------------------------------------------------------
bool gt_Site1CreepAdvanceAmbientDroppodsPuke_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_crawlerGroup;
    unitgroup lv_dropGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_crawlerGroup = UnitGroupEmpty();
    lv_dropGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(55.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumorBurrowed", 0, gv_p02_ZERG, RegionGetCenter(RegionFromId(6)));
    Wait(30.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumorBurrowed", 0, gv_p02_ZERG, RegionGetCenter(RegionFromId(48)));
    Wait(30.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumorBurrowed", 0, gv_p02_ZERG, RegionGetCenter(RegionFromId(49)));
    libNtve_gf_CreateUnitsAtPoint2(1, "SpineCrawlerUprooted", 0, gv_p02_ZERG, PointFromId(134));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("SpineCrawlerRoot", 0), RegionRandomPoint(RegionFromId(48))), c_orderQueueAddToEnd);
    Wait(30.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumorBurrowed", 0, gv_p02_ZERG, RegionGetCenter(RegionFromId(8)));
    libNtve_gf_CreateUnitsAtPoint2(1, "SpineCrawlerUprooted", 0, gv_p02_ZERG, PointFromId(134));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("SpineCrawlerRoot", 0), RegionRandomPoint(RegionFromId(49))), c_orderQueueAddToEnd);
    Wait(30.0, c_timeGame);
    gf_CreateCreepPuker(gv_p02_ZERG, PointFromId(491), RegionGetCenter(RegionFromId(30)));
    Wait(30.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "SpineCrawlerUprooted", 0, gv_p02_ZERG, PointFromId(134));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("SpineCrawlerRoot", 0), RegionRandomPoint(RegionFromId(25))), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(3, "Zergling", 0, 2, PointFromId(134));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropGroup);
    libCamp_gf_CreateDropPod(libCamp_ge_DropPodRace_Zerg, RegionGetCenter(RegionFromId(8)), lv_dropGroup, true);
    libNtve_gf_AddUnitGroupToUnitGroup(lv_dropGroup, gv_gROUP_ZERG_SITE1_SHARKS);
    UnitGroupClear(lv_dropGroup);
    libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumorBurrowed", 0, gv_p02_ZERG, RegionGetCenter(RegionFromId(25)));
    libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumorBurrowed", 0, gv_p02_ZERG, RegionGetCenter(RegionFromId(50)));
    Wait(30.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "SpineCrawlerUprooted", 0, gv_p02_ZERG, PointFromId(134));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("SpineCrawlerRoot", 0), RegionRandomPoint(RegionFromId(50))), c_orderQueueAddToEnd);
    gf_CreateCreepPuker(gv_p02_ZERG, PointFromId(491), RegionGetCenter(RegionFromId(28)));
    gf_CreateCreepPuker(gv_p02_ZERG, PointFromId(491), RegionGetCenter(RegionFromId(29)));
    libNtve_gf_CreateUnitsAtPoint2(3, "Zergling", 0, 2, PointFromId(134));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropGroup);
    libCamp_gf_CreateDropPod(libCamp_ge_DropPodRace_Zerg, RegionGetCenter(RegionFromId(25)), lv_dropGroup, true);
    libNtve_gf_AddUnitGroupToUnitGroup(lv_dropGroup, gv_gROUP_ZERG_SITE1_SHARKS);
    UnitGroupClear(lv_dropGroup);
    libCamp_gf_CreateDropPod(libCamp_ge_DropPodRace_Zerg, RegionGetCenter(RegionFromId(50)), lv_dropGroup, true);
    UnitGroupClear(lv_dropGroup);
    libNtve_gf_CreateUnitsAtPoint2(1, "Roach", 0, 2, PointFromId(134));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropGroup);
    libCamp_gf_CreateDropPod(libCamp_ge_DropPodRace_Zerg, RegionGetCenter(RegionFromId(51)), lv_dropGroup, true);
    libNtve_gf_AddUnitGroupToUnitGroup(lv_dropGroup, gv_gROUP_ZERG_SITE1_SHARKS);
    UnitGroupClear(lv_dropGroup);
    libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumorBurrowed", 0, gv_p02_ZERG, RegionGetCenter(RegionFromId(51)));
    Wait(30.0, c_timeGame);
    libCamp_gf_CreateDropPod(libCamp_ge_DropPodRace_Zerg, RegionGetCenter(RegionFromId(9)), UnitGroupEmpty(), true);
    libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumorBurrowed", 0, gv_p02_ZERG, RegionGetCenter(RegionFromId(9)));
    Wait(30.0, c_timeGame);
    libCamp_gf_CreateDropPod(libCamp_ge_DropPodRace_Zerg, RegionGetCenter(RegionFromId(19)), UnitGroupEmpty(), true);
    libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumorBurrowed", 0, gv_p02_ZERG, RegionGetCenter(RegionFromId(19)));
    Wait(30.0, c_timeGame);
    libCamp_gf_CreateDropPod(libCamp_ge_DropPodRace_Zerg, RegionGetCenter(RegionFromId(36)), UnitGroupEmpty(), true);
    libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumorBurrowed", 0, gv_p02_ZERG, RegionGetCenter(RegionFromId(36)));
    Wait(30.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(3, "Zergling", 0, 2, PointFromId(134));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropGroup);
    libCamp_gf_CreateDropPod(libCamp_ge_DropPodRace_Zerg, RegionGetCenter(RegionFromId(9)), lv_dropGroup, true);
    libNtve_gf_AddUnitGroupToUnitGroup(lv_dropGroup, gv_gROUP_ZERG_SITE1_SHARKS);
    gf_CreateCreepPuker(gv_p02_ZERG, PointFromId(491), RegionGetCenter(RegionFromId(39)));
    gf_CreateCreepPuker(gv_p02_ZERG, PointFromId(491), RegionGetCenter(RegionFromId(40)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Site1CreepAdvanceAmbientDroppodsPuke_Init () {
    gt_Site1CreepAdvanceAmbientDroppodsPuke = TriggerCreate("gt_Site1CreepAdvanceAmbientDroppodsPuke_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Paths
//--------------------------------------------------------------------------------------------------
bool gt_InitPaths_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pathIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pathIndex = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_sitePath1[lv_pathIndex] = PointFromId(411);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath1[lv_pathIndex] = PointFromId(554);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath1[lv_pathIndex] = PointFromId(556);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath1[lv_pathIndex] = PointFromId(557);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath1[lv_pathIndex] = PointFromId(558);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath1[lv_pathIndex] = PointFromId(1273);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath1[lv_pathIndex] = PointFromId(1299);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath1[lv_pathIndex] = PointFromId(1301);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath1[lv_pathIndex] = PointFromId(1302);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath1[lv_pathIndex] = PointFromId(1303);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath1[lv_pathIndex] = PointFromId(1304);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath1[lv_pathIndex] = PointFromId(1305);
    gv_site1PathLength = lv_pathIndex;
    lv_pathIndex = 1;
    gv_sitePath2[lv_pathIndex] = PointFromId(336);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath2[lv_pathIndex] = PointFromId(343);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath2[lv_pathIndex] = PointFromId(413);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath2[lv_pathIndex] = PointFromId(414);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath2[lv_pathIndex] = PointFromId(415);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath2[lv_pathIndex] = PointFromId(417);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath2[lv_pathIndex] = PointFromId(418);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath2[lv_pathIndex] = PointFromId(419);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath2[lv_pathIndex] = PointFromId(420);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath2[lv_pathIndex] = PointFromId(423);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath2[lv_pathIndex] = PointFromId(445);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath2[lv_pathIndex] = PointFromId(446);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath2[lv_pathIndex] = PointFromId(809);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath2[lv_pathIndex] = PointFromId(810);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath2[lv_pathIndex] = PointFromId(811);
    gv_site2PathLength = lv_pathIndex;
    lv_pathIndex = 1;
    gv_sitePath3[lv_pathIndex] = PointFromId(812);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath3[lv_pathIndex] = PointFromId(814);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath3[lv_pathIndex] = PointFromId(815);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath3[lv_pathIndex] = PointFromId(816);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath3[lv_pathIndex] = PointFromId(817);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath3[lv_pathIndex] = PointFromId(818);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath3[lv_pathIndex] = PointFromId(824);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath3[lv_pathIndex] = PointFromId(825);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath3[lv_pathIndex] = PointFromId(826);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath3[lv_pathIndex] = PointFromId(835);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath3[lv_pathIndex] = PointFromId(836);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath3[lv_pathIndex] = PointFromId(837);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath3[lv_pathIndex] = PointFromId(838);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath3[lv_pathIndex] = PointFromId(839);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath3[lv_pathIndex] = PointFromId(840);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath3[lv_pathIndex] = PointFromId(841);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath3[lv_pathIndex] = PointFromId(842);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath3[lv_pathIndex] = PointFromId(843);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath3[lv_pathIndex] = PointFromId(844);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_sitePath3[lv_pathIndex] = PointFromId(845);
    gv_site3PathLength = lv_pathIndex;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitPaths_Init () {
    gt_InitPaths = TriggerCreate("gt_InitPaths_Func");
    TriggerAddEventMapInit(gt_InitPaths);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Path Show Path
//--------------------------------------------------------------------------------------------------
bool gt_PathShowPath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_PathSite1, true, true);
    TriggerExecute(gt_PathSite2, true, true);
    TriggerExecute(gt_PathSite3, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PathShowPath_Init () {
    gt_PathShowPath = TriggerCreate("gt_PathShowPath_Func");
    TriggerAddEventTimePeriodic(gt_PathShowPath, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Path Site 1
//--------------------------------------------------------------------------------------------------
bool gt_PathSite1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pathIndex;

    // Automatic Variable Declarations
    int autoC53A9D32_ae;
    const int autoC53A9D32_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC53A9D32_ae = gv_site1PathLength;
    lv_pathIndex = 1;
    for ( ; ( (autoC53A9D32_ai >= 0 && lv_pathIndex <= autoC53A9D32_ae) || (autoC53A9D32_ai < 0 && lv_pathIndex >= autoC53A9D32_ae) ) ; lv_pathIndex += autoC53A9D32_ai ) {
        if ((gv_sitePath1[lv_pathIndex] != null)) {
            PingCreate(PlayerGroupAll(), "PingArrow", gv_sitePath1[lv_pathIndex], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0);
            PingSetScale(PingLastCreated(), 0.75);
            VisRevealArea(1, RegionCircle(gv_sitePath1[lv_pathIndex], gv_pathRevealdistance), 5.0, false);
            Wait(0.1, c_timeGame);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PathSite1_Init () {
    gt_PathSite1 = TriggerCreate("gt_PathSite1_Func");
    TriggerEnable(gt_PathSite1, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Path Site 2
//--------------------------------------------------------------------------------------------------
bool gt_PathSite2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pathIndex;

    // Automatic Variable Declarations
    int autoC4CAF9A4_ae;
    const int autoC4CAF9A4_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC4CAF9A4_ae = gv_site2PathLength;
    lv_pathIndex = 1;
    for ( ; ( (autoC4CAF9A4_ai >= 0 && lv_pathIndex <= autoC4CAF9A4_ae) || (autoC4CAF9A4_ai < 0 && lv_pathIndex >= autoC4CAF9A4_ae) ) ; lv_pathIndex += autoC4CAF9A4_ai ) {
        if ((gv_sitePath2[lv_pathIndex] != null)) {
            PingCreate(PlayerGroupAll(), "PingArrow", gv_sitePath2[lv_pathIndex], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0);
            PingSetScale(PingLastCreated(), 0.75);
            VisRevealArea(1, RegionCircle(gv_sitePath2[lv_pathIndex], gv_pathRevealdistance), 5.0, false);
            Wait(0.1, c_timeGame);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PathSite2_Init () {
    gt_PathSite2 = TriggerCreate("gt_PathSite2_Func");
    TriggerEnable(gt_PathSite2, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Path Site 3
//--------------------------------------------------------------------------------------------------
bool gt_PathSite3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pathIndex;

    // Automatic Variable Declarations
    int auto94387FCF_ae;
    const int auto94387FCF_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto94387FCF_ae = gv_site3PathLength;
    lv_pathIndex = 1;
    for ( ; ( (auto94387FCF_ai >= 0 && lv_pathIndex <= auto94387FCF_ae) || (auto94387FCF_ai < 0 && lv_pathIndex >= auto94387FCF_ae) ) ; lv_pathIndex += auto94387FCF_ai ) {
        if ((gv_sitePath3[lv_pathIndex] != null)) {
            PingCreate(PlayerGroupAll(), "PingArrow", gv_sitePath3[lv_pathIndex], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0);
            PingSetScale(PingLastCreated(), 0.75);
            VisRevealArea(1, RegionCircle(gv_sitePath3[lv_pathIndex], gv_pathRevealdistance), 5.0, false);
            Wait(0.1, c_timeGame);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PathSite3_Init () {
    gt_PathSite3 = TriggerCreate("gt_PathSite3_Func");
    TriggerEnable(gt_PathSite3, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Path Remove Point Updater: Site 1 
//--------------------------------------------------------------------------------------------------
bool gt_PathRemovePointUpdaterSite1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pathIndex;

    // Automatic Variable Declarations
    int autoE23FE336_ae;
    const int autoE23FE336_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoE23FE336_ae = gv_site1PathLength;
    lv_pathIndex = 1;
    for ( ; ( (autoE23FE336_ai >= 0 && lv_pathIndex <= autoE23FE336_ae) || (autoE23FE336_ai < 0 && lv_pathIndex >= autoE23FE336_ae) ) ; lv_pathIndex += autoE23FE336_ai ) {
        if ((libNtve_gf_UnitInRegion(gv_uNIT_KERRIGAN, RegionCircle(gv_sitePath1[lv_pathIndex], 4.0)) == true)) {
            gv_sitePath1[lv_pathIndex] = null;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PathRemovePointUpdaterSite1_Init () {
    gt_PathRemovePointUpdaterSite1 = TriggerCreate("gt_PathRemovePointUpdaterSite1_Func");
    TriggerAddEventTimePeriodic(gt_PathRemovePointUpdaterSite1, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Path Remove Point Updater: Site 2
//--------------------------------------------------------------------------------------------------
bool gt_PathRemovePointUpdaterSite2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pathIndex;

    // Automatic Variable Declarations
    int autoD14FAD6E_ae;
    const int autoD14FAD6E_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoD14FAD6E_ae = gv_site2PathLength;
    lv_pathIndex = 1;
    for ( ; ( (autoD14FAD6E_ai >= 0 && lv_pathIndex <= autoD14FAD6E_ae) || (autoD14FAD6E_ai < 0 && lv_pathIndex >= autoD14FAD6E_ae) ) ; lv_pathIndex += autoD14FAD6E_ai ) {
        if ((libNtve_gf_UnitInRegion(gv_uNIT_KERRIGAN, RegionCircle(gv_sitePath2[lv_pathIndex], 4.0)) == true)) {
            gv_sitePath2[lv_pathIndex] = null;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PathRemovePointUpdaterSite2_Init () {
    gt_PathRemovePointUpdaterSite2 = TriggerCreate("gt_PathRemovePointUpdaterSite2_Func");
    TriggerAddEventTimePeriodic(gt_PathRemovePointUpdaterSite2, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Path Remove Point Updater: Site 3
//--------------------------------------------------------------------------------------------------
bool gt_PathRemovePointUpdaterSite3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pathIndex;

    // Automatic Variable Declarations
    int auto1ADBC203_ae;
    const int auto1ADBC203_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto1ADBC203_ae = gv_site3PathLength;
    lv_pathIndex = 1;
    for ( ; ( (auto1ADBC203_ai >= 0 && lv_pathIndex <= auto1ADBC203_ae) || (auto1ADBC203_ai < 0 && lv_pathIndex >= auto1ADBC203_ae) ) ; lv_pathIndex += auto1ADBC203_ai ) {
        if ((libNtve_gf_UnitInRegion(gv_uNIT_KERRIGAN, RegionCircle(gv_sitePath3[lv_pathIndex], 4.0)) == true)) {
            gv_sitePath3[lv_pathIndex] = null;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PathRemovePointUpdaterSite3_Init () {
    gt_PathRemovePointUpdaterSite3 = TriggerCreate("gt_PathRemovePointUpdaterSite3_Func");
    TriggerAddEventTimePeriodic(gt_PathRemovePointUpdaterSite3, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Path Remove Saftey
//--------------------------------------------------------------------------------------------------
bool gt_PathRemoveSaftey_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pathIndex;

    // Automatic Variable Declarations
    region auto599B93FA_val;
    const int auto1EF96118_ae = 3;
    const int auto1EF96118_ai = 1;
    const int auto94F094AB_ae = 7;
    const int auto94F094AB_ai = 1;
    const int auto6E746FF5_ae = 12;
    const int auto6E746FF5_ai = 1;
    const int autoEB44C7C3_ae = 12;
    const int autoEB44C7C3_ai = 1;
    const int auto99C5B936_ae = 2;
    const int auto99C5B936_ai = 1;
    const int auto03DCDF96_ae = 3;
    const int auto03DCDF96_ai = 1;
    const int autoFEC0DEF0_ae = 6;
    const int autoFEC0DEF0_ai = 1;
    const int auto6E247921_ae = 15;
    const int auto6E247921_ai = 1;
    const int autoDA3798EB_ae = 15;
    const int autoDA3798EB_ai = 1;
    const int autoBE466885_ae = 6;
    const int autoBE466885_ai = 1;
    const int autoB060BB1F_ae = 13;
    const int autoB060BB1F_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_uNIT_KERRIGAN))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto599B93FA_val = EventUnitRegion();
    if (auto599B93FA_val == RegionFromId(53)) {
        lv_pathIndex = 1;
        for ( ; ( (auto1EF96118_ai >= 0 && lv_pathIndex <= auto1EF96118_ae) || (auto1EF96118_ai < 0 && lv_pathIndex >= auto1EF96118_ae) ) ; lv_pathIndex += auto1EF96118_ai ) {
            gv_sitePath1[lv_pathIndex] = null;
        }
    }
    else if (auto599B93FA_val == RegionFromId(54)) {
        lv_pathIndex = 4;
        for ( ; ( (auto94F094AB_ai >= 0 && lv_pathIndex <= auto94F094AB_ae) || (auto94F094AB_ai < 0 && lv_pathIndex >= auto94F094AB_ae) ) ; lv_pathIndex += auto94F094AB_ai ) {
            gv_sitePath1[lv_pathIndex] = null;
        }
    }
    else if (auto599B93FA_val == RegionFromId(5)) {
        lv_pathIndex = 1;
        for ( ; ( (auto6E746FF5_ai >= 0 && lv_pathIndex <= auto6E746FF5_ae) || (auto6E746FF5_ai < 0 && lv_pathIndex >= auto6E746FF5_ae) ) ; lv_pathIndex += auto6E746FF5_ai ) {
            gv_sitePath1[lv_pathIndex] = null;
        }
    }
    else if (auto599B93FA_val == RegionFromId(55)) {
        lv_pathIndex = 8;
        for ( ; ( (autoEB44C7C3_ai >= 0 && lv_pathIndex <= autoEB44C7C3_ae) || (autoEB44C7C3_ai < 0 && lv_pathIndex >= autoEB44C7C3_ae) ) ; lv_pathIndex += autoEB44C7C3_ai ) {
            gv_sitePath1[lv_pathIndex] = null;
        }
    }
    else if (auto599B93FA_val == RegionFromId(26)) {
        lv_pathIndex = 1;
        for ( ; ( (auto99C5B936_ai >= 0 && lv_pathIndex <= auto99C5B936_ae) || (auto99C5B936_ai < 0 && lv_pathIndex >= auto99C5B936_ae) ) ; lv_pathIndex += auto99C5B936_ai ) {
            gv_sitePath2[lv_pathIndex] = null;
        }
    }
    else if (auto599B93FA_val == RegionFromId(37)) {
        lv_pathIndex = 2;
        for ( ; ( (auto03DCDF96_ai >= 0 && lv_pathIndex <= auto03DCDF96_ae) || (auto03DCDF96_ai < 0 && lv_pathIndex >= auto03DCDF96_ae) ) ; lv_pathIndex += auto03DCDF96_ai ) {
            gv_sitePath2[lv_pathIndex] = null;
        }
    }
    else if (auto599B93FA_val == RegionFromId(58)) {
        lv_pathIndex = 4;
        for ( ; ( (autoFEC0DEF0_ai >= 0 && lv_pathIndex <= autoFEC0DEF0_ae) || (autoFEC0DEF0_ai < 0 && lv_pathIndex >= autoFEC0DEF0_ae) ) ; lv_pathIndex += autoFEC0DEF0_ai ) {
            gv_sitePath2[lv_pathIndex] = null;
        }
    }
    else if (auto599B93FA_val == RegionFromId(56)) {
        lv_pathIndex = 1;
        for ( ; ( (auto6E247921_ai >= 0 && lv_pathIndex <= auto6E247921_ae) || (auto6E247921_ai < 0 && lv_pathIndex >= auto6E247921_ae) ) ; lv_pathIndex += auto6E247921_ai ) {
            gv_sitePath2[lv_pathIndex] = null;
        }
    }
    else if (auto599B93FA_val == RegionFromId(11)) {
        lv_pathIndex = 1;
        for ( ; ( (autoDA3798EB_ai >= 0 && lv_pathIndex <= autoDA3798EB_ae) || (autoDA3798EB_ai < 0 && lv_pathIndex >= autoDA3798EB_ae) ) ; lv_pathIndex += autoDA3798EB_ai ) {
            gv_sitePath2[lv_pathIndex] = null;
        }
    }
    else if (auto599B93FA_val == RegionFromId(59)) {
        lv_pathIndex = 1;
        for ( ; ( (autoBE466885_ai >= 0 && lv_pathIndex <= autoBE466885_ae) || (autoBE466885_ai < 0 && lv_pathIndex >= autoBE466885_ae) ) ; lv_pathIndex += autoBE466885_ai ) {
            gv_sitePath3[lv_pathIndex] = null;
        }
    }
    else if (auto599B93FA_val == RegionFromId(60)) {
        lv_pathIndex = 7;
        for ( ; ( (autoB060BB1F_ai >= 0 && lv_pathIndex <= autoB060BB1F_ae) || (autoB060BB1F_ai < 0 && lv_pathIndex >= autoB060BB1F_ae) ) ; lv_pathIndex += autoB060BB1F_ai ) {
            gv_sitePath3[lv_pathIndex] = null;
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PathRemoveSaftey_Init () {
    gt_PathRemoveSaftey = TriggerCreate("gt_PathRemoveSaftey_Func");
    TriggerAddEventUnitRegion(gt_PathRemoveSaftey, null, RegionFromId(53), true);
    TriggerAddEventUnitRegion(gt_PathRemoveSaftey, null, RegionFromId(54), true);
    TriggerAddEventUnitRegion(gt_PathRemoveSaftey, null, RegionFromId(55), true);
    TriggerAddEventUnitRegion(gt_PathRemoveSaftey, null, RegionFromId(26), true);
    TriggerAddEventUnitRegion(gt_PathRemoveSaftey, null, RegionFromId(37), true);
    TriggerAddEventUnitRegion(gt_PathRemoveSaftey, null, RegionFromId(58), true);
    TriggerAddEventUnitRegion(gt_PathRemoveSaftey, null, RegionFromId(11), true);
    TriggerAddEventUnitRegion(gt_PathRemoveSaftey, null, RegionFromId(59), true);
    TriggerAddEventUnitRegion(gt_PathRemoveSaftey, null, RegionFromId(60), true);
    TriggerAddEventUnitRegion(gt_PathRemoveSaftey, null, RegionFromId(5), true);
    TriggerAddEventUnitRegion(gt_PathRemoveSaftey, null, RegionFromId(56), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Site Paths
//--------------------------------------------------------------------------------------------------
bool gt_UpdateSitePaths_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_PathSite1, true);
    if ((UnitIsAlive(gv_sITE_1_BUILDING) == true)) {
        return true;
    }

    TriggerEnable(gt_PathSite2, true);
    if ((UnitIsAlive(gv_sITE_2_BUILDING) == true)) {
        return true;
    }

    TriggerEnable(gt_PathSite3, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateSitePaths_Init () {
    gt_UpdateSitePaths = TriggerCreate("gt_UpdateSitePaths_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Site Visibility And Pings
//--------------------------------------------------------------------------------------------------
bool gt_UpdateSiteVisibilityAndPings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_sITE_1_BUILDING) == true)) {
        TriggerExecute(gt_Site1ActivateDefenses, false, false);
        return true;
    }

    if ((UnitIsAlive(gv_sITE_2_BUILDING) == true)) {
        TriggerExecute(gt_Site2ActivateDefenses, false, false);
        if ((gv_site2Revealer == null)) {
            VisRevealerCreate(gv_p01_USER, RegionCircle(UnitGetPosition(gv_sITE_2_BUILDING), 5.0));
            gv_site2Revealer = VisRevealerLastCreated();
        }

        if ((gv_pINGSite2 == c_invalidPingId)) {
            gf_CreateSitePing("PingObjective", gv_sITE_2_BUILDING);
            gv_pINGSite2 = PingLastCreated();
        }

        return true;
    }

    if ((UnitIsAlive(gv_sITE_3_BUILDING) == true)) {
        TriggerExecute(gt_Site3ActivateDefenses, false, false);
        if ((gv_site3Revealer == null)) {
            VisRevealerCreate(gv_p01_USER, RegionCircle(UnitGetPosition(gv_sITE_3_BUILDING), 5.0));
            gv_site3Revealer = VisRevealerLastCreated();
        }

        if ((gv_pINGSite3 == c_invalidPingId)) {
            gf_CreateSitePing("PingObjective", gv_sITE_3_BUILDING);
            gv_pINGSite3 = PingLastCreated();
        }

        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateSiteVisibilityAndPings_Init () {
    gt_UpdateSiteVisibilityAndPings = TriggerCreate("gt_UpdateSiteVisibilityAndPings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupIssueOrder(UnitGroup(null, gv_p02_ZERG, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("move", 1), PointFromId(272)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup(null, gv_p02_ZERG, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("move", 1), PointFromId(4)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup(null, gv_p02_ZERG, RegionFromId(61), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("move", 1), PointFromId(441)), c_orderQueueReplace);
    if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
        UnitGroupIssueOrder(UnitGroup("Corruptor", c_playerAny, RegionFromId(68), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("move", 1), PointFromId(2533)), c_orderQueueReplace);
    }
    else {
        UnitGroupIssueOrder(UnitGroup("Corruptor", c_playerAny, RegionFromId(68), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("move", 1), PointFromId(218)), c_orderQueueReplace);
    }
    UnitIssueOrder(UnitFromId(1276), OrderTargetingPoint(AbilityCommand("move", 1), PointFromId(1237)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(285), OrderTargetingPoint(AbilityCommand("move", 1), PointFromId(189)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(429), OrderTargetingPoint(AbilityCommand("move", 1), PointFromId(1235)), c_orderQueueReplace);
    AICampaignStart(gv_p05_ZERG_BASE);
    AINearestTownBullyRebuild(gv_p05_ZERG_BASE, true);
    TriggerExecute(gt_ZergP05AttackWavesBase, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg P05 Attack Waves - Base
//--------------------------------------------------------------------------------------------------
bool gt_ZergP05AttackWavesBase_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPlayer(gv_p05_ZERG_BASE, PlayerGroupSingle(gv_p01_USER));
    AIAttackWaveSetGatherPoint(gv_p05_ZERG_BASE, PointFromId(326));
    Wait(90.0, c_timeAI);
    AIAttackWaveAddUnits4(0, 1, 2, 3, "Mutalisk");
    gf_AddAirAttackWaypoints(gv_p05_ZERG_BASE);
    AIAttackWaveSend(gv_p05_ZERG_BASE, 120, true);
    Wait(60.0, c_timeAI);
    AIAttackWaveAddUnits4(4, 4, 7, 10, "Zergling");
    AIAttackWaveAddUnits4(1, 1, 2, 2, "Roach");
    AIAttackWaveAddWaypoint(gv_p05_ZERG_BASE, PointFromId(870), false);
    AIAttackWaveSend(gv_p05_ZERG_BASE, 150, false);
    Wait(60.0, c_timeAI);
    AIAttackWaveAddUnits4(3, 3, 3, 4, "Mutalisk");
    gf_AddAirAttackWaypoints(gv_p05_ZERG_BASE);
    AIAttackWaveAddWaypoint(gv_p05_ZERG_BASE, PointFromId(620), false);
    AIAttackWaveSend(gv_p05_ZERG_BASE, 105, false);
    Wait(90.0, c_timeAI);
    gf_AddUpgradeForEnemies(libNtve_gf_DifficultyValueInt(0, 0, 1, 0), "ZergGroundArmorsLevel1");
    gf_AddUpgradeForEnemies(libNtve_gf_DifficultyValueInt(0, 0, 1, 0), "ZergFlyerArmorsLevel1");
    Wait(30.0, c_timeAI);
    Wait(60.0, c_timeAI);
    AIAttackWaveAddUnits4(10, 10, 14, 18, "Zergling");
    AIAttackWaveAddUnits4(1, 1, 1, 2, "Hydralisk");
    AIAttackWaveAddWaypoint(gv_p05_ZERG_BASE, PointFromId(870), false);
    AIAttackWaveSend(gv_p05_ZERG_BASE, 150, false);
    Wait(120.0, c_timeAI);
    gf_AddUpgradeForEnemies(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergMeleeWeaponsLevel2");
    gf_AddUpgradeForEnemies(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergMissileWeaponsLevel2");
    gf_AddUpgradeForEnemies(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ZergGroundArmorsLevel2");
    Wait(30.0, c_timeAI);
    Wait(90.0, c_timeAI);
    AIAttackWaveAddUnits4(5, 5, 6, 5, "Mutalisk");
    AIAttackWaveAddUnits4(0, 0, 0, 1, "Corruptor");
    AIAttackWaveAddUnits4(0, 0, 0, 1, "BroodLord");
    AIAttackWaveAddUnits4(0, 0, 1, 1, "Overseer");
    gf_AddAirAttackWaypoints(gv_p05_ZERG_BASE);
    AIAttackWaveAddWaypoint(gv_p05_ZERG_BASE, PointFromId(620), false);
    AIAttackWaveSend(gv_p05_ZERG_BASE, 150, false);
    Wait(120.0, c_timeAI);
    gf_AddUpgradeForEnemies(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergFlyerWeaponsLevel2");
    gf_AddUpgradeForEnemies(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ZergMeleeWeaponsLevel3");
    gf_AddUpgradeForEnemies(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ZergFlyerArmorsLevel2");
    Wait(30.0, c_timeAI);
    while (true) {
        Wait(90.0, c_timeAI);
        AIAttackWaveAddUnits4(8, 8, 10, 12, "Zergling");
        AIAttackWaveAddUnits4(0, 0, 1, 2, "Hydralisk");
        AIAttackWaveAddUnits4(1, 1, 1, 0, "Roach");
        AIAttackWaveAddUnits4(3, 3, 4, 5, "Mutalisk");
        AIAttackWaveAddUnits4(0, 0, 0, 1, "Infestor");
        AIAttackWaveAddUnits4(0, 0, 1, 2, "Corruptor");
        AIAttackWaveAddWaypoint(gv_p05_ZERG_BASE, PointFromId(870), false);
        AIAttackWaveSend(gv_p05_ZERG_BASE, 150, true);
        Wait(90.0, c_timeAI);
        gf_AddUpgradeForEnemies(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ZergMissileWeaponsLevel3");
        gf_AddUpgradeForEnemies(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ZergFlyerWeaponsLevel3");
        AIAttackWaveAddUnits4(4, 4, 5, 5, "Mutalisk");
        AIAttackWaveAddUnits4(0, 0, 1, 2, "BroodLord");
        AIAttackWaveAddUnits4(0, 0, 1, 1, "Overseer");
        gf_AddAirAttackWaypoints(gv_p05_ZERG_BASE);
        AIAttackWaveAddWaypoint(gv_p05_ZERG_BASE, PointFromId(620), false);
        AIAttackWaveSend(gv_p05_ZERG_BASE, 150, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergP05AttackWavesBase_Init () {
    gt_ZergP05AttackWavesBase = TriggerCreate("gt_ZergP05AttackWavesBase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveMinerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(gv_p05_ZERG_BASE, c_playerPropMinerals) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(gv_p05_ZERG_BASE, c_playerPropMinerals, c_playerPropOperAdd, 5000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveMinerals_Init () {
    gt_AIGiveMinerals = TriggerCreate("gt_AIGiveMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p05_ZERG_BASE, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveGas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 5000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveGas_Init () {
    gt_AIGiveGas = TriggerCreate("gt_AIGiveGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p05_ZERG_BASE, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Campaign Tips Q
//--------------------------------------------------------------------------------------------------
bool gt_CampaignTipsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateStorymodeTips();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CampaignTipsQ_Init () {
    gt_CampaignTipsQ = TriggerCreate("gt_CampaignTipsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - Transport Q
//--------------------------------------------------------------------------------------------------
bool gt_TipTransportQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Tychus03_Transporting", libNtve_ge_TipType_NewAbility, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipTransportQ_Init () {
    gt_TipTransportQ = TriggerCreate("gt_TipTransportQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - New Unit: Medivac Q
//--------------------------------------------------------------------------------------------------
bool gt_TipNewUnitMedivacQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Tychus03_Medivac", libNtve_ge_TipType_NewUnit, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipNewUnitMedivacQ_Init () {
    gt_TipNewUnitMedivacQ = TriggerCreate("gt_TipNewUnitMedivacQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - High Ground Q
//--------------------------------------------------------------------------------------------------
bool gt_TipHighGroundQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Tychus03_HighGround", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipHighGroundQ_Init () {
    gt_TipHighGroundQ = TriggerCreate("gt_TipHighGroundQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Mission Start Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionMissionStartQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus03Kerrigan00023", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus03Kerrigan00023", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTychus03Raynor00001", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus03Raynor00001", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionMissionStartQ_Init () {
    gt_TransmissionMissionStartQ = TriggerCreate("gt_TransmissionMissionStartQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Medivac Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionMedivacIntroQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_talkActor;
    unit lv_chosenMedivac;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerEnable(gt_IntroMedivacsFinished, true);
    lv_chosenMedivac = UnitGroupRandomUnit(UnitGroup("Medivac", gv_p06_MOEBIUS_SEC_FORCE, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    CameraPan(gv_p01_USER, RegionGetCenter(RegionFromId(35)), 3.0, -1, 10, true);
    // Transmission - SoundLink("TTychus03Narud00005", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus03Narud00005", -1), c_transmissionDurationAdd, 0.0, true);
    lv_talkActor = libNtve_gf_AttachModelToUnit(lv_chosenMedivac, "TalkIcon", "Origin");
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/5ACED848"), null, lv_chosenMedivac);
    // Transmission - SoundLink("TTychus03Medivac00010", -1)
    libCamp_gf_SendTransmissionCampaign(lv_chosenMedivac, SoundLink("TTychus03Medivac00010", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    libNtve_gf_KillModel(lv_talkActor);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionMedivacIntroQ_Init () {
    gt_TransmissionMedivacIntroQ = TriggerCreate("gt_TransmissionMedivacIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Brutalisk Found Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBrutaliskFoundQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/2EC2B786"), null, UnitFromId(1178));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", UnitGetPosition(UnitFromId(1178)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 3.0, 270.0);
    libNtve_gf_AttachModelToUnit(UnitFromId(1178), "BriefingUnitSelectLargeRed", "Ref_Center");
    gv_brutaliskReticule = libNtve_gf_ActorLastCreated();
    libNtve_gf_ShareVisionofUnit(UnitFromId(1178), true, gv_p01_USER);
    VisRevealArea(gv_p01_USER, RegionFromId(93), 0.1, false);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus03Raynor00036", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus03Raynor00036", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerExecute(gt_ResearchObjectiveKilltheBrutaliskCreateQ, true, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitFromId(1178)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    gv_brutaliskPing = PingLastCreated();
    PingSetUnit(gv_brutaliskPing, UnitFromId(1178));
    PingSetScale(gv_brutaliskPing, 0.8);
    PingSetTooltip(gv_brutaliskPing, StringExternal("Param/Value/1B79BB1D"));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBrutaliskFoundQ_Init () {
    gt_TransmissionBrutaliskFoundQ = TriggerCreate("gt_TransmissionBrutaliskFoundQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Core Is Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionCoreIsDestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_dataCoresDestroyed == 1)) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus03MusicEventB", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TTychus03Raynor00011", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus03Raynor00011", -1), c_transmissionDurationAdd, 0.0, true);
        // Transmission - SoundLink("TTychus03Kerrigan00025", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus03Kerrigan00025", -1), c_transmissionDurationAdd, 0.0, true);
        // Transmission - SoundLink("TTychus03Raynor00026", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus03Raynor00026", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        return true;
        TriggerQueueExit();
    }

    if ((gv_dataCoresDestroyed == 2)) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TTychus03Kerrigan00047", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus03Kerrigan00047", -1), c_transmissionDurationAdd, 0.0, true);
        // Transmission - SoundLink("TTychus03Raynor00048", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus03Raynor00048", -1), c_transmissionDurationAdd, 0.0, true);
        // Transmission - SoundLink("TTychus03Narud00049", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus03Narud00049", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        return true;
        TriggerQueueExit();
    }

    if ((gv_dataCoresDestroyed == 3)) {
        gv_gameOver = true;
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TTychus03Narud00004", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus03Narud00004", -1), c_transmissionDurationAdd, 1.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_VictoryDestroyCoresCompleted, true, false);
        return true;
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionCoreIsDestroyedQ_Init () {
    gt_TransmissionCoreIsDestroyedQ = TriggerCreate("gt_TransmissionCoreIsDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Alive Inside Rescued Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAliveInsideRescuedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libNtve_gf_AttachModelToUnit(UnitGroupRandomUnit(gv_gROUPAliveInside, c_unitCountAlive), "TalkIcon", "Origin");
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus03Marine500019", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus03Marine500019", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionAliveInsideRescuedQ_Init () {
    gt_TransmissionAliveInsideRescuedQ = TriggerCreate("gt_TransmissionAliveInsideRescuedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - The Wall Rescued Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTheWallRescuedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libNtve_gf_AttachModelToUnit(UnitFromId(191), "TalkIcon", "Origin");
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus03Goliath00028", -1)
    libCamp_gf_SendTransmissionCampaign(gv_uNITWallSpeaker, SoundLink("TTychus03Goliath00028", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTheWallRescuedQ_Init () {
    gt_TransmissionTheWallRescuedQ = TriggerCreate("gt_TransmissionTheWallRescuedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Site 1 Militia Rescued Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSite1MilitiaRescuedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_talkActor;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libNtve_gf_AttachModelToUnit(gv_uNITSite1Speaker, "TalkIcon", "Origin");
    lv_talkActor = libNtve_gf_ActorLastCreated();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus03Marine900015", -1)
    libCamp_gf_SendTransmissionCampaign(gv_uNITSite1Speaker, SoundLink("TTychus03Marine900015", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    libNtve_gf_KillModel(lv_talkActor);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionSite1MilitiaRescuedQ_Init () {
    gt_TransmissionSite1MilitiaRescuedQ = TriggerCreate("gt_TransmissionSite1MilitiaRescuedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Site 2 Militia Rescued Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSite2MilitiaRescuedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libNtve_gf_AttachModelToUnit(gv_uNITSite2Speaker, "TalkIcon", "Origin");
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus03Marine600018", -1)
    libCamp_gf_SendTransmissionCampaign(gv_uNITSite2Speaker, SoundLink("TTychus03Marine600018", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionSite2MilitiaRescuedQ_Init () {
    gt_TransmissionSite2MilitiaRescuedQ = TriggerCreate("gt_TransmissionSite2MilitiaRescuedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Site 3 Militia Rescued Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSite3MilitiaRescuedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libNtve_gf_AttachModelToUnit(gv_uNITSite3Speaker, "TalkIcon", "Origin");
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    if ((TriggerGetExecCount(gt_AliveInsideHeadsUpQ) == 0)) {
        // Transmission - SoundLink("TTychus03MoebiusMarine00024", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus03MoebiusMarine00024", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else {
        // Transmission - SoundLink("TTychus03Marine700017", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus03Marine700017", -1), c_transmissionDurationAdd, 0.0, true);
    }
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionSite3MilitiaRescuedQ_Init () {
    gt_TransmissionSite3MilitiaRescuedQ = TriggerCreate("gt_TransmissionSite3MilitiaRescuedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - All Units Rescued
//--------------------------------------------------------------------------------------------------
bool gt_AchievementAllUnitsRescued_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1))) {
            return false;
        }

        if (!((gv_statRescuablesFound >= 22))) {
            return false;
        }

        if (!((gv_achievementRescueAwarded == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_achievementRescueAwarded = true;
    AchievementAward(gv_p01_USER, "TTychus03_2");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementAllUnitsRescued_Init () {
    gt_AchievementAllUnitsRescued = TriggerCreate("gt_AchievementAllUnitsRescued_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Combat Unit Trained
//--------------------------------------------------------------------------------------------------
bool gt_AchievementCombatUnitTrained_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((gv_nonMercCombatUnitTrained == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "MercCompound"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() != "SCV"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() != "Medivac"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_nonMercCombatUnitTrained = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementCombatUnitTrained_Init () {
    gt_AchievementCombatUnitTrained = TriggerCreate("gt_AchievementCombatUnitTrained_Func");
    TriggerAddEventUnitTrainProgress(gt_AchievementCombatUnitTrained, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Destroy Cores Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDestroyCoresCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_DefeatPrimaryObjectiveFailedCheck, false);
    TriggerExecute(gt_ObjectiveDestroyDataComplete, true, true);
    libCamp_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDestroyCoresCompleted_Init () {
    gt_VictoryDestroyCoresCompleted = TriggerCreate("gt_VictoryDestroyCoresCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((ObjectiveGetState(gv_objectiveDestroyDataz) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveNoAccess) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_researchObjectiveKilltheBrutalisk) == c_objectiveStateCompleted)) {
        AchievementAward(gv_p01_USER, "TTychus03_1");
    }

    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_nonMercCombatUnitTrained == false)) {
        AchievementAward(gv_p01_USER, "Anniversary_TTychus03");
        TriggerDebugOutput(1, StringExternal("Param/Value/936B8DF0"), false);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1) && (gv_achievementKerriganFakeBuildingCounter <= 5)) {
        AchievementAward(gv_p01_USER, "TTychus03_3");
    }

    VictoryPanelAddAchievement("TTychus03_1");
    VictoryPanelAddAchievement("TTychus03_2");
    VictoryPanelAddAchievement("TTychus03_3");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/BC5FD9F2"), (IntToText(gv_statRescuablesFound) + StringExternal("Param/Value/FC81B494") + StringExternal("Param/Value/3CD0C532")));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/02616B05"), IntToText(gv_achievementKerriganFakeBuildingCounter));
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    if ((gv_statBrutaliskKilled == 1)) {
        VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/13155FF5"), StringExternal("Param/Value/13EE5891"));
    }
    else {
        VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/FF64036B"), StringExternal("Param/Value/2325A662"));
    }
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/97F5BA7D"), IntToText(gv_researchEarned));
    libCamp_gf_EndCampaignMission(gv_p01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, 0), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus03Kerrigan00046", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus03Kerrigan00046", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/52F6EC65"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed Check
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailedCheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_fLAG_SITE_1_ACTIVE == true) && (gv_kerrigansTarget == RegionFromId(5))) {
        TriggerExecute(gt_DefeatPrimaryObjectiveFailed, true, false);
    }

    if ((gv_fLAG_SITE_2_ACTIVE == true) && (gv_kerrigansTarget == RegionFromId(56))) {
        TriggerExecute(gt_DefeatPrimaryObjectiveFailed, true, false);
    }

    if ((gv_fLAG_SITE_3_ACTIVE == true) && (gv_kerrigansTarget == RegionFromId(57))) {
        TriggerExecute(gt_DefeatPrimaryObjectiveFailed, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailedCheck_Init () {
    gt_DefeatPrimaryObjectiveFailedCheck = TriggerCreate("gt_DefeatPrimaryObjectiveFailedCheck_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDestroyDataFailed, true, false);
    // Transmission - SoundLink("TTychus03Kerrigan00046", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus03Kerrigan00046", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/B89DBA01"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_EndCampaignMission(gv_p01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    libCamp_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_p01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_p01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Data Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyDataCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate((StringExternal("Param/Value/08B45B16") + IntToText(gv_dataCoresDestroyed) + StringExternal("Param/Value/078D782D")), StringExternal("Param/Value/048C4D90"), c_objectiveStateActive, true);
    gv_objectiveDestroyDataz = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TTychus03Objective1, ObjectiveLastCreated(), StringExternal("Param/Value/DF56192A"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    ObjectiveCreate(StringExternal("Param/Value/98AD2BF6"), StringExternal("Param/Value/5D1AC6F1"), c_objectiveStateActive, true);
    gv_objectiveNoAccess = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TTychus03Objective2, ObjectiveLastCreated(), StringExternal("Param/Value/3B0960F9"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyDataCreateQ_Init () {
    gt_ObjectiveDestroyDataCreateQ = TriggerCreate("gt_ObjectiveDestroyDataCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Data Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyDataUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveSetState(gv_objectiveDestroyDataz, c_objectiveStateActive);
    ObjectiveSetName(gv_objectiveDestroyDataz, (StringExternal("Param/Value/F7B75A11") + IntToText(gv_dataCoresDestroyed) + StringExternal("Param/Value/4AA821D0")));
    if ((gv_dataCoresDestroyed == 3)) {
        TriggerExecute(gt_ObjectiveDestroyDataComplete, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyDataUpdate_Init () {
    gt_ObjectiveDestroyDataUpdate = TriggerCreate("gt_ObjectiveDestroyDataUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Data Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyDataComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyDataCreateQ, true, false);
    ObjectiveSetState(gv_objectiveDestroyDataz, c_objectiveStateCompleted);
    ObjectiveSetState(gv_objectiveNoAccess, c_objectiveStateCompleted);
    TimerWindowDestroy(gv_kerrigansETAWINDOW);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyDataComplete_Init () {
    gt_ObjectiveDestroyDataComplete = TriggerCreate("gt_ObjectiveDestroyDataComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Data Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyDataFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyDataCreateQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyDataFailed_Init () {
    gt_ObjectiveDestroyDataFailed = TriggerCreate("gt_ObjectiveDestroyDataFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Research Objective Kill the Brutalisk Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ResearchObjectiveKilltheBrutaliskCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate((StringExternal("Param/Value/664831A1") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectKilltheBrutalisk, libCamp_ge_StoryResearchObjectiveTextStyle_Lumpsum, 1, 0) + StringExternal("Param/Value/23AF86AB")), StringExternal("Param/Value/640E5DA2"), c_objectiveStateActive, false);
    gv_researchObjectiveKilltheBrutalisk = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TTychus03Objective3, ObjectiveLastCreated(), StringExternal("Param/Value/78256C5C"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResearchObjectiveKilltheBrutaliskCreateQ_Init () {
    gt_ResearchObjectiveKilltheBrutaliskCreateQ = TriggerCreate("gt_ResearchObjectiveKilltheBrutaliskCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Research Objective Kill the Brutalisk Update Q
//--------------------------------------------------------------------------------------------------
bool gt_ResearchObjectiveKilltheBrutaliskUpdateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Brutalisk"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_brutaliskPing);
    gv_statBrutaliskKilled += 1;
    gv_researchEarned += 3;
    libCamp_gf_DisplayResearchPointsGiventoPlayer(libCamp_ge_StoryResearchObject_ResearchObjectKilltheBrutalisk, EventUnit(), gv_p01_USER);
    TriggerExecute(gt_ResearchObjectiveKilltheBrutaliskCreateQ, true, false);
    TriggerQueueEnter();
    ObjectiveSetName(gv_researchObjectiveKilltheBrutalisk, (StringExternal("Param/Value/D0755CEB") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectKilltheBrutalisk, libCamp_ge_StoryResearchObjectiveTextStyle_Lumpsum, 1, 1)));
    ObjectiveSetState(gv_researchObjectiveKilltheBrutalisk, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/98442232"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResearchObjectiveKilltheBrutaliskUpdateQ_Init () {
    gt_ResearchObjectiveKilltheBrutaliskUpdateQ = TriggerCreate("gt_ResearchObjectiveKilltheBrutaliskUpdateQ_Func");
    TriggerAddEventUnitDied(gt_ResearchObjectiveKilltheBrutaliskUpdateQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brutalisk - Reticule Killer
//--------------------------------------------------------------------------------------------------
bool gt_BrutaliskReticuleKiller_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Brutalisk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(gv_brutaliskReticule);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BrutaliskReticuleKiller_Init () {
    gt_BrutaliskReticuleKiller = TriggerCreate("gt_BrutaliskReticuleKiller_Func");
    TriggerAddEventUnitAttacked(gt_BrutaliskReticuleKiller, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pickedUnit;

    // Automatic Variable Declarations
    unitgroup auto24160650_g;
    int auto24160650_u;
    unit auto24160650_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    libNtve_gf_KillModel(gv_baseNydusPing1);
    libNtve_gf_KillModel(gv_baseNydusPing2);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_p01_USER);
    auto24160650_g = UnitGroup(null, c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto24160650_u = UnitGroupCount(auto24160650_g, c_unitCountAll);
    for (;; auto24160650_u -= 1) {
        auto24160650_var = UnitGroupUnitFromEnd(auto24160650_g, auto24160650_u);
        if (auto24160650_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto24160650_var, false);
        libNtve_gf_PauseUnit(auto24160650_var, true);
    }
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_tYPE;
    point lv_pOINT;
    unit lv_commandCenter;

    // Automatic Variable Declarations
    unitgroup autoFAB23EE7_g;
    int autoFAB23EE7_u;
    unit autoFAB23EE7_var;
    unitgroup auto52D8B6ED_g;
    int auto52D8B6ED_u;
    unit auto52D8B6ED_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_victoryCinematicCompleted = false;
    autoFAB23EE7_g = UnitGroup(null, gv_p01_USER, RegionFromId(1), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoFAB23EE7_u = UnitGroupCount(autoFAB23EE7_g, c_unitCountAll);
    for (;; autoFAB23EE7_u -= 1) {
        autoFAB23EE7_var = UnitGroupUnitFromEnd(autoFAB23EE7_g, autoFAB23EE7_u);
        if (autoFAB23EE7_var == null) { break; }
        if ((UnitGetType(autoFAB23EE7_var) != "Refinery") && (UnitGetType(autoFAB23EE7_var) != "AutomatedRefinery")) {
            lv_tYPE = UnitGetType(autoFAB23EE7_var);
            lv_pOINT = UnitGetPosition(autoFAB23EE7_var);
            UnitRemove(autoFAB23EE7_var);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_tYPE, 0, gv_p01_USER, lv_pOINT);
        }

    }
    libNtve_gf_CreateUnitsAtPoint2(1, "Medivac", 0, 1, PointFromId(1862));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1871)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Medivac", 0, 1, PointFromId(1868));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2154)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Medivac", 0, 1, PointFromId(1865));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2153)), c_orderQueueReplace);
    lv_commandCenter = UnitGroupUnit(UnitGroup("CommandCenter", gv_p01_USER, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    if ((UnitIsAlive(lv_commandCenter) == true)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, 1, PointFromId(1246));
        libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, 1, PointFromId(1433));
        libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, 1, PointFromId(1435));
        libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, 1, PointFromId(1436));
        libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, 1, PointFromId(1460));
        libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_p01_USER);
    }

    CameraApplyInfo(1, CameraInfoFromId(367), 0.0, -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(1, CameraInfoFromId(98), (SoundLengthSync(SoundLink("TTychus03Raynor00035", -1)) + SoundLengthSync(SoundLink("TTychus03Narud00034", -1))), -1, 20, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus03MusicOutro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerExecute(gt_VictoryNydusSpawn, true, false);
    // Transmission - SoundLink("TTychus03Raynor00035", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus03Raynor00035", -1), c_transmissionDurationAdd, 0.0, true);
    TriggerExecute(gt_VictoryBaseLiftoff, true, false);
    if ((UnitIsAlive(lv_commandCenter) == true)) {
        auto52D8B6ED_g = UnitGroup("SCV", gv_p01_USER, RegionFromId(92), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto52D8B6ED_u = UnitGroupCount(auto52D8B6ED_g, c_unitCountAll);
        for (;; auto52D8B6ED_u -= 1) {
            auto52D8B6ED_var = UnitGroupUnitFromEnd(auto52D8B6ED_g, auto52D8B6ED_u);
            if (auto52D8B6ED_var == null) { break; }
            UnitIssueOrder(auto52D8B6ED_var, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_commandCenter)), c_orderQueueReplace);
        }
    }

    // Transmission - SoundLink("TTychus03Narud00034", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus03Narud00034", -1), c_transmissionDurationAdd, 0.0, true);
    gv_victoryCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    if ((gv_victoryCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(lv_fadeDuration, c_timeReal);
    UnitPauseAll(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuratioin;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitPauseAll(true);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Nydus Spawn
//--------------------------------------------------------------------------------------------------
bool gt_VictoryNydusSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit[4] lv_victoryWorm;
    int lv_wormIndex;

    // Automatic Variable Declarations
    const int autoDE5163B7_n = 5;
    int autoDE5163B7_i;
    const int auto0B56A5D3_ae = 3;
    const int auto0B56A5D3_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_p05_ZERG_BASE, RegionGetCenter(RegionFromId(79)));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    lv_victoryWorm[1] = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_p05_ZERG_BASE, RegionGetCenter(RegionFromId(80)));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    lv_victoryWorm[2] = UnitLastCreated();
    Wait(2.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_p05_ZERG_BASE, RegionGetCenter(RegionFromId(38)));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 01", 0, c_animTimeDefault);
    lv_victoryWorm[3] = UnitLastCreated();
    SoundPlayAtPoint(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), UnitGetPosition(UnitLastCreated()), 8.0, 100.0, 0.0);
    Wait(4.7, c_timeGame);
    for (autoDE5163B7_i = 1; autoDE5163B7_i <= autoDE5163B7_n; autoDE5163B7_i += 1) {
        lv_wormIndex = 1;
        for ( ; ( (auto0B56A5D3_ai >= 0 && lv_wormIndex <= auto0B56A5D3_ae) || (auto0B56A5D3_ai < 0 && lv_wormIndex >= auto0B56A5D3_ae) ) ; lv_wormIndex += auto0B56A5D3_ai ) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_victoryWorm[lv_wormIndex]), c_animNameDefault, "Spell", 0, c_animTimeDefault);
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Zergling", 0, gv_p05_ZERG_BASE, UnitGetPosition(lv_victoryWorm[lv_wormIndex]));
            UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1615)), c_orderQueueReplace);
            Wait(1.0, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryNydusSpawn_Init () {
    gt_VictoryNydusSpawn = TriggerCreate("gt_VictoryNydusSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Base Liftoff
//--------------------------------------------------------------------------------------------------
bool gt_VictoryBaseLiftoff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_commandCenter;

    // Automatic Variable Declarations
    unitgroup auto852730DC_g;
    int auto852730DC_u;
    unit auto852730DC_var;
    unitgroup auto2D19C848_g;
    int auto2D19C848_u;
    unit auto2D19C848_var;
    unitgroup autoA2B9B0DD_g;
    int autoA2B9B0DD_u;
    unit autoA2B9B0DD_var;
    unitgroup auto312296BC_g;
    int auto312296BC_u;
    unit auto312296BC_var;
    unitgroup auto46452081_g;
    int auto46452081_u;
    unit auto46452081_var;
    unitgroup auto3FBA9F13_g;
    int auto3FBA9F13_u;
    unit auto3FBA9F13_var;
    unitgroup auto061F6D86_g;
    int auto061F6D86_u;
    unit auto061F6D86_var;
    unitgroup auto8F834BA9_g;
    int auto8F834BA9_u;
    unit auto8F834BA9_var;
    const int autoCC1AC9DC_n = 10;
    int autoCC1AC9DC_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_commandCenter = UnitGroupUnit(UnitGroup("CommandCenter", gv_p01_USER, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    Wait(4.0, c_timeGame);
    auto852730DC_g = UnitGroup("Barracks", gv_p01_USER, RegionFromId(1), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto852730DC_u = UnitGroupCount(auto852730DC_g, c_unitCountAll);
    for (;; auto852730DC_u -= 1) {
        auto852730DC_var = UnitGroupUnitFromEnd(auto852730DC_g, auto852730DC_u);
        if (auto852730DC_var == null) { break; }
        UnitIssueOrder(auto852730DC_var, Order(AbilityCommand("BarracksLiftOff", 0)), c_orderQueueReplace);
    }
    Wait(0.5, c_timeGame);
    auto2D19C848_g = UnitGroup("Factory", gv_p01_USER, RegionFromId(1), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2D19C848_u = UnitGroupCount(auto2D19C848_g, c_unitCountAll);
    for (;; auto2D19C848_u -= 1) {
        auto2D19C848_var = UnitGroupUnitFromEnd(auto2D19C848_g, auto2D19C848_u);
        if (auto2D19C848_var == null) { break; }
        UnitIssueOrder(auto2D19C848_var, Order(AbilityCommand("FactoryLiftOff", 0)), c_orderQueueReplace);
    }
    Wait(0.5, c_timeGame);
    autoA2B9B0DD_g = UnitGroup("Starport", gv_p01_USER, RegionFromId(1), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA2B9B0DD_u = UnitGroupCount(autoA2B9B0DD_g, c_unitCountAll);
    for (;; autoA2B9B0DD_u -= 1) {
        autoA2B9B0DD_var = UnitGroupUnitFromEnd(autoA2B9B0DD_g, autoA2B9B0DD_u);
        if (autoA2B9B0DD_var == null) { break; }
        UnitIssueOrder(autoA2B9B0DD_var, Order(AbilityCommand("StarportLiftOff", 0)), c_orderQueueReplace);
    }
    Wait(0.5, c_timeGame);
    auto312296BC_g = UnitGroup("CommandCenter", gv_p01_USER, RegionFromId(1), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto312296BC_u = UnitGroupCount(auto312296BC_g, c_unitCountAll);
    for (;; auto312296BC_u -= 1) {
        auto312296BC_var = UnitGroupUnitFromEnd(auto312296BC_g, auto312296BC_u);
        if (auto312296BC_var == null) { break; }
        UnitIssueOrder(auto312296BC_var, Order(AbilityCommand("CommandCenterLiftOff", 0)), c_orderQueueReplace);
    }
    Wait(0.5, c_timeGame);
    auto46452081_g = UnitGroup("BarracksFlying", gv_p01_USER, RegionFromId(1), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto46452081_u = UnitGroupCount(auto46452081_g, c_unitCountAll);
    for (;; auto46452081_u -= 1) {
        auto46452081_var = UnitGroupUnitFromEnd(auto46452081_g, auto46452081_u);
        if (auto46452081_var == null) { break; }
        UnitIssueOrder(auto46452081_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(auto46452081_var), 25.0, 25.0)), c_orderQueueAddToEnd);
    }
    Wait(0.5, c_timeGame);
    auto3FBA9F13_g = UnitGroup("FactoryFlying", gv_p01_USER, RegionFromId(1), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3FBA9F13_u = UnitGroupCount(auto3FBA9F13_g, c_unitCountAll);
    for (;; auto3FBA9F13_u -= 1) {
        auto3FBA9F13_var = UnitGroupUnitFromEnd(auto3FBA9F13_g, auto3FBA9F13_u);
        if (auto3FBA9F13_var == null) { break; }
        UnitIssueOrder(auto3FBA9F13_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(auto3FBA9F13_var), 25.0, 25.0)), c_orderQueueAddToEnd);
    }
    Wait(0.5, c_timeGame);
    auto061F6D86_g = UnitGroup("StarportFlying", gv_p01_USER, RegionFromId(1), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto061F6D86_u = UnitGroupCount(auto061F6D86_g, c_unitCountAll);
    for (;; auto061F6D86_u -= 1) {
        auto061F6D86_var = UnitGroupUnitFromEnd(auto061F6D86_g, auto061F6D86_u);
        if (auto061F6D86_var == null) { break; }
        UnitIssueOrder(auto061F6D86_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(auto061F6D86_var), 25.0, 25.0)), c_orderQueueAddToEnd);
    }
    Wait(0.5, c_timeGame);
    auto8F834BA9_g = UnitGroup("CommandCenterFlying", gv_p01_USER, RegionFromId(1), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8F834BA9_u = UnitGroupCount(auto8F834BA9_g, c_unitCountAll);
    for (;; auto8F834BA9_u -= 1) {
        auto8F834BA9_var = UnitGroupUnitFromEnd(auto8F834BA9_g, auto8F834BA9_u);
        if (auto8F834BA9_var == null) { break; }
        UnitIssueOrder(auto8F834BA9_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(auto8F834BA9_var), 25.0, 25.0)), c_orderQueueAddToEnd);
    }
    if ((UnitIsAlive(lv_commandCenter) == true)) {
        for (autoCC1AC9DC_i = 1; autoCC1AC9DC_i <= autoCC1AC9DC_n; autoCC1AC9DC_i += 1) {
            if ((UnitGroupCount(UnitGroup("SCV", gv_p01_USER, RegionCircle(UnitGetPosition(lv_commandCenter), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                UnitIssueOrder(lv_commandCenter, Order(AbilityCommand("CommandCenterTransport", 4)), c_orderQueueAddToFront);
            }

            Wait(1.0, c_timeGame);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryBaseLiftoff_Init () {
    gt_VictoryBaseLiftoff = TriggerCreate("gt_VictoryBaseLiftoff_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_StartGame);
    TriggerStop(gt_IntroMilitiaStartQ);
    TriggerStop(gt_Site1CreepAdvanceAmbientDroppodsPuke);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    gv_inCinematic = true;
    gv_gameOver = true;
    UnitPauseAll(true);
    AITimePause(true);
    GameTimeOfDayPause(true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    TriggerExecute(gt_BriefingScene00, true, true);
    TriggerExecute(gt_BriefingScene01, true, true);
    TriggerExecute(gt_BriefingScene02, true, true);
    TriggerExecute(gt_BriefingScene03, true, true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0CC54695_g;
    int auto0CC54695_u;
    unit auto0CC54695_var;
    unitgroup auto582DB775_g;
    int auto582DB775_u;
    unit auto582DB775_var;
    unitgroup autoF6691D74_g;
    int autoF6691D74_u;
    unit autoF6691D74_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    UnitGroupIssueOrder(UnitGroup(null, gv_p02_ZERG, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingRelativePoint(AbilityCommand("move", 1), PointFromId(272)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup(null, gv_p02_ZERG, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("move", 1), PointFromId(4)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup(null, gv_p02_ZERG, RegionFromId(61), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("move", 1), PointFromId(441)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup("Corruptor", c_playerAny, RegionFromId(68), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("move", 1), PointFromId(218)), c_orderQueueReplace);
    auto0CC54695_g = UnitGroup(null, c_playerAny, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0CC54695_u = UnitGroupCount(auto0CC54695_g, c_unitCountAll);
    for (;; auto0CC54695_u -= 1) {
        auto0CC54695_var = UnitGroupUnitFromEnd(auto0CC54695_g, auto0CC54695_u);
        if (auto0CC54695_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto0CC54695_var, false);
    }
    auto582DB775_g = UnitGroup(null, gv_p06_MOEBIUS_SEC_FORCE, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto582DB775_u = UnitGroupCount(auto582DB775_g, c_unitCountAll);
    for (;; auto582DB775_u -= 1) {
        auto582DB775_var = UnitGroupUnitFromEnd(auto582DB775_g, auto582DB775_u);
        if (auto582DB775_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto582DB775_var, false);
    }
    autoF6691D74_g = UnitGroup(null, gv_p02_ZERG, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF6691D74_u = UnitGroupCount(autoF6691D74_g, c_unitCountAll);
    for (;; autoF6691D74_u -= 1) {
        autoF6691D74_var = UnitGroupUnitFromEnd(autoF6691D74_g, autoF6691D74_u);
        if (autoF6691D74_var == null) { break; }
        libNtve_gf_PauseUnit(autoF6691D74_var, false);
    }
    TriggerExecute(gt_BriefingScene00DropPods, true, false);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(177), 0.0, -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(360), 20.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_TTychus03_00");
    SoundPlay(SoundLink("TTychus03BriefingNarud00001", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTychus03BriefingNarud00001", -1))), c_timeReal);
    SoundPlay(SoundLink("TTychus03BriefingNarud00005", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTychus03BriefingNarud00005", -1))), c_timeReal);
    SoundPlay(SoundLink("TTychus03BriefingRaynor00002", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTychus03BriefingRaynor00002", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus03BriefingNarud00001", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus03BriefingNarud00005", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus03BriefingRaynor00002", -1))), c_timeReal);
    Wait(2.0, c_timeReal);
    MovieStopRecording();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00_Init () {
    gt_BriefingScene00 = TriggerCreate("gt_BriefingScene00_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00 Drop Pods
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00DropPods_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_zergGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_zergGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(3.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(5, "Zergling", 0, gv_p02_ZERG, PointFromId(2187));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_zergGroup);
    libCamp_gf_CreateDropPod(libCamp_ge_DropPodRace_Zerg, PointFromId(2184), UnitLastCreatedGroup(), true);
    UnitGroupIssueOrder(lv_zergGroup, OrderTargetingRelativePoint(AbilityCommand("move", 0), PointFromId(100)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(5, "Zergling", 0, gv_p02_ZERG, PointFromId(2187));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_zergGroup);
    libCamp_gf_CreateDropPod(libCamp_ge_DropPodRace_Zerg, PointFromId(2185), UnitLastCreatedGroup(), true);
    UnitGroupIssueOrder(lv_zergGroup, OrderTargetingRelativePoint(AbilityCommand("move", 0), PointFromId(100)), c_orderQueueReplace);
    UnitGroupIssueOrder(lv_zergGroup, Order(AbilityCommand("BurrowZerglingDown", 0)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00DropPods_Init () {
    gt_BriefingScene00DropPods = TriggerCreate("gt_BriefingScene00DropPods_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    RegionPlayableMapSet(RegionEntireMap());
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Medivac", 0, gv_p06_MOEBIUS_SEC_FORCE, PointFromId(2182));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3029)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Medivac", 0, gv_p06_MOEBIUS_SEC_FORCE, PointFromId(2509));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3029)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(2033), 0.0, -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(2007), SoundLengthSync(SoundLink("TTychus03BriefingNarud00003", -1)), -1, 10, true);
    MovieStartRecording("Briefing_Video_TTychus03_01");
    SoundPlay(SoundLink("TTychus03BriefingNarud00003", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTychus03BriefingNarud00003", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus03BriefingNarud00003", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01_Init () {
    gt_BriefingScene01 = TriggerCreate("gt_BriefingScene01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 02
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(224), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1221), SoundLengthSync(SoundLink("TTychus03BriefingNarud00004", -1)), -1, 10, true);
    MovieStartRecording("Briefing_Video_TTychus03_02");
    SoundPlay(SoundLink("TTychus03BriefingNarud00004", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((0.2 * SoundLengthSync(SoundLink("TTychus03BriefingNarud00004", -1))), c_timeReal);
    libNtve_gf_AttachModelToUnit(gv_sITE_1_BUILDING, "BriefingUnitSelectLargeRed", "Ref_Center");
    Wait((0.8 * SoundLengthSync(SoundLink("TTychus03BriefingNarud00004", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus03BriefingNarud00004", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene02_Init () {
    gt_BriefingScene02 = TriggerCreate("gt_BriefingScene02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 03
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(gv_uNIT_KERRIGAN);
    Wait(3.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Kerrigan", 0, gv_p07_ZERG_KERRIGAN, PointFromId(1));
    gv_briefingKerrigan = UnitLastCreated();
    libCamp_gf_CreateDropPod(libCamp_ge_DropPodRace_Zerg, PointFromId(361), UnitLastCreatedGroup(), false);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(90), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(977), (SoundLengthSync(SoundLink("TTychus03BriefingAdjutant00012", -1)) + SoundLengthSync(SoundLink("TTychus03BriefingRaynor00006", -1))), -1, 10, true);
    MovieStartRecording("Briefing_Video_TTychus03_03");
    TriggerExecute(gt_BriefingCameraShake, true, false);
    SoundPlay(SoundLink("TTychus03BriefingAdjutant00012", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTychus03BriefingAdjutant00012", -1))), c_timeReal);
    SoundPlay(SoundLink("TTychus03BriefingRaynor00006", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTychus03BriefingRaynor00006", -1))), c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(2186), SoundLengthSync(SoundLink("TTychus03BriefingRaynor00007", -1)), -1, 10, true);
    SoundPlay(SoundLink("TTychus03BriefingRaynor00007", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTychus03BriefingRaynor00007", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus03BriefingAdjutant00012", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus03BriefingRaynor00006", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus03BriefingRaynor00007", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene03_Init () {
    gt_BriefingScene03 = TriggerCreate("gt_BriefingScene03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Kerrgian Spawn
//--------------------------------------------------------------------------------------------------
bool gt_BriefingKerrgianSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_briefingKerrigan))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(gv_briefingKerrigan, "Signal BirthRays");
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_briefingKerrigan), c_animNameDefault, "Stand Cover Start", 0, c_animTimeDefault);
    Wait(11.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_briefingKerrigan), c_animNameDefault, "Stand Cover", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingKerrgianSpawn_Init () {
    gt_BriefingKerrgianSpawn = TriggerCreate("gt_BriefingKerrgianSpawn_Func");
    TriggerAddEventUnitRegion(gt_BriefingKerrgianSpawn, null, RegionFromId(89), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Camera Shake
//--------------------------------------------------------------------------------------------------
bool gt_BriefingCameraShake_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 2.0, 100.0, 1.25);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingCameraShake_Init () {
    gt_BriefingCameraShake = TriggerCreate("gt_BriefingCameraShake_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04Music_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_CreateNydusWorm_Init();
    gt_DropPod_Init();
    gt_IntroSequence_Init();
    gt_StartGame_Init();
    gt_BrutaliskStumbledUpon_Init();
    gt_CreateMedivacIntro_Init();
    gt_IntroMedivacsFinished_Init();
    gt_MedivacTrained_Init();
    gt_Site1DestructionComplete_Init();
    gt_Site1ActivateDefenses_Init();
    gt_Site1SubwaySpawns_Init();
    gt_Site1Mutalisks_Init();
    gt_Site1Nydus_Init();
    gt_Site2DestructionComplete_Init();
    gt_Site2ActivateDefenses_Init();
    gt_Site2CreepPukerSpawns_Init();
    gt_Site2SubwaySpawns_Init();
    gt_Site2HatcheryNydus_Init();
    gt_Site2ReactionNydus_Init();
    gt_Site2HydraPicketline_Init();
    gt_Site3DestructionComplete_Init();
    gt_Site3ActivateDefenses_Init();
    gt_Site3CreepPukerSpawn_Init();
    gt_Site3RoofNydus1_Init();
    gt_Site3RoofNydus2_Init();
    gt_Site3Nydus1_Init();
    gt_Site3Nydus2_Init();
    gt_Site3Nydus3_Init();
    gt_Site3ReactionBroodlordsHardBrutal_Init();
    gt_Site3DropPods_Init();
    gt_Site1ReticuleCreator_Init();
    gt_Site2ReticuleCreator_Init();
    gt_Site3ReticuleCreator_Init();
    gt_Site1ReticuleKiller_Init();
    gt_Site2ReticuleKiller_Init();
    gt_Site3ReticuleKiller_Init();
    gt_BaseNydusRetaliationForSite1_Init();
    gt_BaseNydusRetaliationForSite2_Init();
    gt_BaseRetaliationDialogueQ_Init();
    gt_KerriganInitiateTargetAcquisition_Init();
    gt_KerriganMoveOut_Init();
    gt_KerriganTargetReached_Init();
    gt_KerriganTargetDone_Init();
    gt_KerriganTargetDiesEarly_Init();
    gt_KerriganPickNextTarget_Init();
    gt_KerriganRecalculateTimer_Init();
    gt_KerriganBladestorm_Init();
    gt_KerriganMoveOutRepeater_Init();
    gt_KerriganCalculatingETAQ_Init();
    gt_KerriganTauntsRaynor1Q_Init();
    gt_KerriganTauntsRaynor2Q_Init();
    gt_KerriganTauntsRaynor3Q_Init();
    gt_KerriganApproachesSite1Q_Init();
    gt_KerriganApproachesSite2Q_Init();
    gt_KerriganApproachesSite3Q_Init();
    gt_IntroMilitiaStartQ_Init();
    gt_Site1MilitiaHeadsUpQ_Init();
    gt_Site1MilitiaRescued_Init();
    gt_TheWallHeadsUpQ_Init();
    gt_TheWallRescued_Init();
    gt_Site2MilitiaHeadsUpQ_Init();
    gt_Site2MilitiaRescued_Init();
    gt_AliveInsideHeadsUpQ_Init();
    gt_AliveInsideRescued_Init();
    gt_Site3MilitiaHeadsUpQ_Init();
    gt_Site3MilitiaRescued_Init();
    gt_Site1CityAttackers_Init();
    gt_Site1InitialPatrolBurrow_Init();
    gt_AmbientSharkPatrolStart_Init();
    gt_AmbientSharkPatrol1_Init();
    gt_AmbientSharkPatrol2_Init();
    gt_AmbientSharkPatrol3_Init();
    gt_AmbientSharkPatrol4_Init();
    gt_Site1CreepAdvanceAmbientDroppodsPuke_Init();
    gt_InitPaths_Init();
    gt_PathShowPath_Init();
    gt_PathSite1_Init();
    gt_PathSite2_Init();
    gt_PathSite3_Init();
    gt_PathRemovePointUpdaterSite1_Init();
    gt_PathRemovePointUpdaterSite2_Init();
    gt_PathRemovePointUpdaterSite3_Init();
    gt_PathRemoveSaftey_Init();
    gt_UpdateSitePaths_Init();
    gt_UpdateSiteVisibilityAndPings_Init();
    gt_StartAI_Init();
    gt_ZergP05AttackWavesBase_Init();
    gt_AIGiveMinerals_Init();
    gt_AIGiveGas_Init();
    gt_CampaignTipsQ_Init();
    gt_TipTransportQ_Init();
    gt_TipNewUnitMedivacQ_Init();
    gt_TipHighGroundQ_Init();
    gt_TransmissionMissionStartQ_Init();
    gt_TransmissionMedivacIntroQ_Init();
    gt_TransmissionBrutaliskFoundQ_Init();
    gt_TransmissionCoreIsDestroyedQ_Init();
    gt_TransmissionAliveInsideRescuedQ_Init();
    gt_TransmissionTheWallRescuedQ_Init();
    gt_TransmissionSite1MilitiaRescuedQ_Init();
    gt_TransmissionSite2MilitiaRescuedQ_Init();
    gt_TransmissionSite3MilitiaRescuedQ_Init();
    gt_AchievementAllUnitsRescued_Init();
    gt_AchievementCombatUnitTrained_Init();
    gt_VictoryDestroyCoresCompleted_Init();
    gt_Victory_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatPrimaryObjectiveFailedCheck_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_ObjectiveDestroyDataCreateQ_Init();
    gt_ObjectiveDestroyDataUpdate_Init();
    gt_ObjectiveDestroyDataComplete_Init();
    gt_ObjectiveDestroyDataFailed_Init();
    gt_ResearchObjectiveKilltheBrutaliskCreateQ_Init();
    gt_ResearchObjectiveKilltheBrutaliskUpdateQ_Init();
    gt_BrutaliskReticuleKiller_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryNydusSpawn_Init();
    gt_VictoryBaseLiftoff_Init();
    gt_BriefingQ_Init();
    gt_BriefingScene00_Init();
    gt_BriefingScene00DropPods_Init();
    gt_BriefingScene01_Init();
    gt_BriefingScene02_Init();
    gt_BriefingScene03_Init();
    gt_BriefingKerrgianSpawn_Init();
    gt_BriefingCameraShake_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
