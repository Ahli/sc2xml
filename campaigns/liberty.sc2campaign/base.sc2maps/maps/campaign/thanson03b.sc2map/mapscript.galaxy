//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Haven's Fall
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/CampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libCamp_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_p01_USER = 1;
const int gv_p02_ZERG_EAST = 2;
const int gv_p03_VIROPHAGE = 3;
const int gv_p04_ZERG_NORTH = 4;
const int gv_p05_COLONIST = 5;
const int gv_p06_COLONIST = 6;
const int gv_p07_ZERG_INFESTED = 7;
const int gv_p08_ZERG_SOUTH = 8;
const int gv_cOLONY_BASES = 6;
const int gv_iNFESTATION_OVERLORD_MAX = 20;
const int gv_iNFESTATION_DEFENDER_MAX = 50;
const fixed gv_eGG_SIZE_BASE = 25.0;
const string gv_eGG_UNIT = "Egg";

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_EggRecord {
    string lv_spawnType;
    int lv_spawnOwner;
    fixed lv_burstSize;
    fixed lv_scaleInc;
    int lv_spawnQty;
    fixed lv_spawnPeriod;
    timer lv_timer;
    int lv_waypointIndex;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_ColonyIndex_NoBase = 0;
const int ge_ColonyIndex_Base1Green = 1;
const int ge_ColonyIndex_Base2Pink = 2;
const int ge_ColonyIndex_Base3Purple = 3;
const int ge_ColonyIndex_Base4Red = 4;
const int ge_ColonyIndex_Base5White = 5;
const int ge_ColonyIndex_Base6Yellow = 6;
const int ge_SpawnType_stAberration = 0;
const int ge_SpawnType_stInfestedMarine = 1;
const int ge_SpawnType_stInfestedColonist = 2;
const int ge_UnitData_udEggType = 0;
const int ge_UnitData_udEggScale = 1;
const int ge_UnitData_udEggColony = 2;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_inCinematic;
int gv_zergInfestationCounter;
int gv_hansonGoneWildTransmissionCounter;
fixed gv_aberrationLife;
fixed gv_virophageLife;
playergroup gv_zergPlayers;
int gv_tEMP_ColonyIndex;
region[11] gv_infestationRegion;
int[11] gv_infestationPings;
point[11] gv_infestationVirophageSpot;
unit[11] gv_infestationVirophageUnit;
int[11] gv_infestationOverlordCount;
int[11] gv_infestationOverseerCount;
point[11][51] gv_infestationOverlordLocation;
point[11][51] gv_infestationOverseerLocation;
unit[11][51] gv_infestationOverlordUnit;
unit[11][51] gv_infestationOverseerUnit;
unitgroup[11] gv_infestationOverlords;
unitgroup[11] gv_infestationOverseers;
int[11] gv_infestationDefenderCount;
point[11][51] gv_infestationDefenderLocation;
string[11][51] gv_infestationDefenderType;
unit[11][51] gv_infestationDefenderUnit;
bool[11] gv_infestationColonyLost;
bool[11] gv_infestationColonyCleanedMsg;
revealer[11] gv_infestationRevealer;
bool gv_twoBaseWarningPlayed;
gs_EggRecord[5] gv_eggData;
timer gv_aberrationStartTimer;
timer gv_aberrationWarningCooldown;
int gv_basePingEast;
int gv_basePingSouth;
int gv_basePingNorth;
revealer gv_baseRevealerNorth;
revealer gv_baseRevealerSouth;
revealer gv_baseRevealerEast;
unitgroup gv_carrionBirds;
unit gv_carrionBirdParameter;
int gv_vikingStructureKills;
int gv_stat_ColoniesSaved;
int gv_stat_VirophagesKilled;
int gv_objectiveDestroyInfestation;
unit gv_briefingZergling;
unitgroup gv_briefingGroup;
bool gv_introCinematicCompleted;
unitgroup gv_introHiddenUnitGroup;
unitgroup gv_introSpawnedUnits;
actor gv_virophagePingActor;
actor gv_broodLordPingActor1;
actor gv_broodLordPingActor2;
bool gv_victoryCinematicCompleted;
unitgroup gv_victoryHiddenUnitGroup;

void InitGlobals () {
    int init_i;

    gv_zergInfestationCounter = 3;
    gv_zergPlayers = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_infestationPings[init_i] = c_invalidPingId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_infestationOverlords[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_infestationOverseers[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_eggData[init_i].lv_timer = TimerCreate();
        gv_eggData[init_i].lv_waypointIndex = 1;
    }
    gv_aberrationStartTimer = TimerCreate();
    gv_aberrationWarningCooldown = TimerCreate();
    gv_basePingEast = c_invalidPingId;
    gv_basePingSouth = c_invalidPingId;
    gv_basePingNorth = c_invalidPingId;
    gv_carrionBirds = UnitGroupEmpty();
    gv_stat_ColoniesSaved = 6;
    gv_objectiveDestroyInfestation = c_invalidObjectiveId;
    gv_briefingGroup = UnitGroupEmpty();
    gv_introHiddenUnitGroup = UnitGroupEmpty();
    gv_introSpawnedUnits = UnitGroupEmpty();
    gv_victoryHiddenUnitGroup = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_SetUnitMaxLife (unit lp_unit, fixed lp_maxLife);
void gf_KillUnitsInRegion (string lp_type, int lp_player, region lp_region);
void gf_CreateInfestedHorde (int lp_melee, int lp_marine, int lp_colony);
void gf_SpawnAndUnburrowUnitsAtColony (int lp_qty, string lp_type, int lp_colonyIndex);
void gf_InitInfestationColony (int lp_colonyIndex, region lp_area, bool lp_cleanUp);
void gf_InitInfestationColonyUnit (int lp_colonyIndex, unit lp_unit);
void gf_InfestAColonyAndWait (int lp_colonyIndex, fixed lp_time);
void gf_InfestationDelay (fixed lp_time);
void gf_SendOverlords (int lp_colonyIndex);
void gf_SendOverseers (int lp_colonyIndex);
void gf_CreateDefenders (int lp_colonyIndex, fixed lp_timeout);
void gf_CreateADefender (unit lp_overlord, int lp_colonyIndex, int lp_defenderIndex);
void gf_CreateVirophage (int lp_colonyIndex, int lp_attempts);
void gf_DropCargoAndWait (unit lp_transport, unit lp_cargo, fixed lp_timeout);
void gf_BuildVirophageAndWait (unit lp_drone, int lp_colonyIndex, fixed lp_timeout);
void gf_PlayColonistGratitudeLineQ (region lp_location);
void gf_InitEggDataSingle (int lp_spawnType, string lp_type, int lp_owner, fixed lp_growthDelay, fixed lp_burstSize);
void gf_MakeEggsSpawn (int lp_spawnType, int lp_spawnQty, fixed lp_spawnPeriod, bool lp_start);
void gf_EggSpawnerSpawnEggsAtAllColonies (int lp_type);
void gf_EggSpawnerSpawnAnEgg (int lp_type, point lp_spawnLoc, int lp_colonyIndex);
bool gf_InfestedPlayerisFoodCapped ();
void gf_ColonistMover (region lp_locale);
void gf_OrderCarrionBirdtoFlyAway (unit lp_carrionBird);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04Music;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_StartGame;
trigger gt_InitialInfestation;
trigger gt_InitWarningPings;
trigger gt_GasPickups;
trigger gt_InitInfestationData;
trigger gt_InfestColoniesForever;
trigger gt_InfestaColony;
trigger gt_VirophageConstructionBegins;
trigger gt_VirophageConstructionEnds;
trigger gt_VirophageDies;
trigger gt_ColonyCleansedQ;
trigger gt_PlayAttackWarningQ;
trigger gt_PlayInfestedWarningQ;
trigger gt_InitEggData;
trigger gt_EggSpawnerAberration;
trigger gt_EggSpawnerInfestedMarine;
trigger gt_EggSpawnerInfestedColonist;
trigger gt_EggSpawnerGrow;
trigger gt_EggSpawnerAberrationWarningQ;
trigger gt_FeederlingSpawner;
trigger gt_FeederlingMover;
trigger gt_VirophageProjectileVomiting;
trigger gt_InfestedBuildingDies;
trigger gt_MoveColonists;
trigger gt_ColonistLoad;
trigger gt_ColonistUnload;
trigger gt_ColonistWalkDontRun;
trigger gt_BaseSouthHatcheryClearedQ;
trigger gt_BaseNorthHatcheryClearedQ;
trigger gt_BaseEastHatcheryClearedQ;
trigger gt_TransmissionMissionStartQ;
trigger gt_TransmissionHansonGoneWildQ;
trigger gt_TransmissionAllOutpostsInfestedQ;
trigger gt_StartAI;
trigger gt_StartUpgradesH;
trigger gt_StartUpgradesB;
trigger gt_ZergAttackWavesP02P04P08;
trigger gt_AIGiveMinerals;
trigger gt_AIGiveGas;
trigger gt_CarrionBirds;
trigger gt_CarrionBirdFlysAway;
trigger gt_VikingKillsofEnemyStructures;
trigger gt_StatVirophagesKilled;
trigger gt_VictoryInfestationCleansedCompleted;
trigger gt_VictoryQ;
trigger gt_Victory;
trigger gt_DefeatBaseDead;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_VirophageTipQ;
trigger gt_NewUnitVikingTipQ;
trigger gt_ObjectiveDestroyInfestationCreateQ;
trigger gt_ObjectiveDestroyInfestationUpdate;
trigger gt_ObjectiveDestroyInfestationComplete;
trigger gt_BriefingQ;
trigger gt_BriefingScene00;
trigger gt_Briefing00ProjectileVomiting;
trigger gt_Briefing00RunLolaRun;
trigger gt_Briefing00LikeCattletotheSlaughter;
trigger gt_BriefingScene01;
trigger gt_BriefingScene02;
trigger gt_BriefingScene03;
trigger gt_Briefing02Eggs;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroFeederlingMover;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_SetUnitMaxLife (unit lp_unit, fixed lp_maxLife) {
    // Automatic Variable Declarations
    // Implementation
    UnitSetPropertyFixed(lp_unit, c_unitPropLifeMax, lp_maxLife);
    UnitSetPropertyFixed(lp_unit, c_unitPropLifePercent, 100.0);
}

void gf_KillUnitsInRegion (string lp_type, int lp_player, region lp_region) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    unitgroup auto4EE00797_g;
    int auto4EE00797_u;

    // Variable Initialization

    // Implementation
    auto4EE00797_g = UnitGroup(lp_type, lp_player, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4EE00797_u = UnitGroupCount(auto4EE00797_g, c_unitCountAll);
    for (;; auto4EE00797_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto4EE00797_g, auto4EE00797_u);
        if (lv_u == null) { break; }
        UnitKill(lv_u);
    }
}

void gf_CreateInfestedHorde (int lp_melee, int lp_marine, int lp_colony) {
    // Automatic Variable Declarations
    int auto844ECF0C_n;
    int auto844ECF0C_i;
    int auto4F8FA54E_n;
    int auto4F8FA54E_i;

    // Implementation
    auto844ECF0C_n = lp_melee;
    for (auto844ECF0C_i = 1; auto844ECF0C_i <= auto844ECF0C_n; auto844ECF0C_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedCivilianBurrowed", 0, gv_p03_VIROPHAGE, RegionRandomPoint(gv_infestationRegion[lp_colony]));
        libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, gv_p01_USER);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestedCivilianUp", 0)), c_orderQueueReplace);
        AISetUnitScriptControlled(UnitLastCreated(), false);
        AISetUnitSuicide(UnitLastCreated(), true);
    }
    auto4F8FA54E_n = lp_marine;
    for (auto4F8FA54E_i = 1; auto4F8FA54E_i <= auto4F8FA54E_n; auto4F8FA54E_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedTerranCampaignBurrowed", 0, gv_p03_VIROPHAGE, RegionRandomPoint(gv_infestationRegion[lp_colony]));
        libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, gv_p01_USER);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestedTerranCampaignUp", 0)), c_orderQueueReplace);
        AISetUnitScriptControlled(UnitLastCreated(), false);
        AISetUnitSuicide(UnitLastCreated(), true);
    }
}

void gf_SpawnAndUnburrowUnitsAtColony (int lp_qty, string lp_type, int lp_colonyIndex) {
    // Automatic Variable Declarations
    int auto017A7127_n;
    int auto017A7127_i;

    // Implementation
    auto017A7127_n = lp_qty;
    for (auto017A7127_i = 1; auto017A7127_i <= auto017A7127_n; auto017A7127_i += 1) {
        UnitCreate(1, lp_type, 0, gv_p03_VIROPHAGE, RegionRandomPoint(RegionCircle(UnitGetPosition(gv_infestationVirophageUnit[lp_colonyIndex]), 5.0)), libNtve_gf_RandomAngle());
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowDroneUp", 0)), c_orderQueueReplace);
    }
}

void gf_InitInfestationColony (int lp_colonyIndex, region lp_area, bool lp_cleanUp) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    unitgroup auto009D0608_g;
    int auto009D0608_u;
    unitgroup autoED4A8D80_g;
    int autoED4A8D80_u;

    // Variable Initialization

    // Implementation
    gv_infestationRegion[lp_colonyIndex] = lp_area;
    gv_infestationVirophageUnit[lp_colonyIndex] = UnitGroupRandomUnit(UnitGroup("Virophage", c_playerAny, lp_area, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive);
    if ((gv_infestationVirophageUnit[lp_colonyIndex] == null)) {
        gv_infestationVirophageSpot[lp_colonyIndex] = null;
        gv_infestationColonyLost[lp_colonyIndex] = false;
    }
    else {
        gv_infestationVirophageSpot[lp_colonyIndex] = UnitGetPosition(gv_infestationVirophageUnit[lp_colonyIndex]);
        gv_infestationColonyLost[lp_colonyIndex] = true;
        UnitSetCustomValue(gv_infestationVirophageUnit[lp_colonyIndex], 1, IntToFixed(lp_colonyIndex));
        UnitSetInfoText(gv_infestationVirophageUnit[lp_colonyIndex], StringToText(""), StringExternal("Param/Value/8ABD065E"), StringExternal("Param/Value/E1028619"));
        UnitSetState(gv_infestationVirophageUnit[lp_colonyIndex], c_unitStateTooltipable, true);
    }
    gv_infestationOverlordCount[lp_colonyIndex] = 0;
    gv_infestationOverseerCount[lp_colonyIndex] = 0;
    gv_infestationDefenderCount[lp_colonyIndex] = 0;
    gv_infestationOverlords[lp_colonyIndex] = UnitGroupEmpty();
    gv_infestationOverseers[lp_colonyIndex] = UnitGroupEmpty();
    auto009D0608_g = UnitGroup(null, gv_p07_ZERG_INFESTED, lp_area, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto009D0608_u = UnitGroupCount(auto009D0608_g, c_unitCountAll);
    for (;; auto009D0608_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto009D0608_g, auto009D0608_u);
        if (lv_u == null) { break; }
        gf_InitInfestationColonyUnit(lp_colonyIndex, lv_u);
    }
    if ((lp_cleanUp == true)) {
        UnitRemove(gv_infestationVirophageUnit[lp_colonyIndex]);
        gv_infestationVirophageUnit[lp_colonyIndex] = null;
        CreepModify(RegionGetCenter(lp_area), 10.0, false, false);
        autoED4A8D80_g = UnitGroup(null, gv_p07_ZERG_INFESTED, lp_area, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoED4A8D80_u = UnitGroupCount(autoED4A8D80_g, c_unitCountAll);
        for (;; autoED4A8D80_u -= 1) {
            lv_u = UnitGroupUnitFromEnd(autoED4A8D80_g, autoED4A8D80_u);
            if (lv_u == null) { break; }
            UnitRemove(lv_u);
        }
        gv_infestationColonyLost[lp_colonyIndex] = false;
    }

}

void gf_InitInfestationColonyUnit (int lp_colonyIndex, unit lp_unit) {
    // Automatic Variable Declarations
    string autoA7EBEB0F_val;

    // Implementation
    autoA7EBEB0F_val = UnitGetType(lp_unit);
    if (autoA7EBEB0F_val == "Overlord") {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        if ((gv_infestationOverlordCount[lp_colonyIndex] < gv_iNFESTATION_OVERLORD_MAX)) {
            gv_infestationOverlordCount[lp_colonyIndex] += 1;
            gv_infestationOverlordLocation[lp_colonyIndex][gv_infestationOverlordCount[lp_colonyIndex]] = UnitGetPosition(lp_unit);
        }

    }
    else if (autoA7EBEB0F_val == "Overseer") {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        if ((gv_infestationOverlordCount[lp_colonyIndex] < gv_iNFESTATION_OVERLORD_MAX)) {
            gv_infestationOverseerCount[lp_colonyIndex] += 1;
            gv_infestationOverseerLocation[lp_colonyIndex][gv_infestationOverseerCount[lp_colonyIndex]] = UnitGetPosition(lp_unit);
        }

    }
    else {
        if ((gv_infestationDefenderCount[lp_colonyIndex] < gv_iNFESTATION_DEFENDER_MAX)) {
            gv_infestationDefenderCount[lp_colonyIndex] += 1;
            gv_infestationDefenderLocation[lp_colonyIndex][gv_infestationDefenderCount[lp_colonyIndex]] = UnitGetPosition(lp_unit);
            gv_infestationDefenderUnit[lp_colonyIndex][gv_infestationDefenderCount[lp_colonyIndex]] = null;
            gv_infestationDefenderType[lp_colonyIndex][gv_infestationDefenderCount[lp_colonyIndex]] = UnitGetType(lp_unit);
        }

    }
}

void gf_InfestAColonyAndWait (int lp_colonyIndex, fixed lp_time) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGroupCount(UnitGroup(null, gv_p02_ZERG_EAST, RegionFromId(15), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup(null, gv_p04_ZERG_NORTH, RegionFromId(31), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup(null, gv_p08_ZERG_SOUTH, RegionFromId(32), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        return ;
    }

    if ((gv_infestationColonyLost[lp_colonyIndex] == true)) {
        return ;
    }

    if ((gv_infestationVirophageUnit[lp_colonyIndex] != null)) {
        return ;
    }

    gv_tEMP_ColonyIndex = lp_colonyIndex;
    TriggerExecute(gt_InfestaColony, true, false);
    gf_InfestationDelay(lp_time);
}

void gf_InfestationDelay (fixed lp_time) {
    // Variable Declarations
    fixed lv_timeReduction;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitIsAlive(UnitFromId(57)) == false)) {
        lv_timeReduction += 60.0;
    }

    if ((UnitIsAlive(UnitFromId(68)) == false)) {
        lv_timeReduction += 60.0;
    }

    if ((UnitIsAlive(UnitFromId(5)) == false)) {
        lv_timeReduction += 60.0;
    }

    if (((lp_time - lv_timeReduction) > 0.0)) {
        Wait((lp_time - lv_timeReduction), c_timeGame);
    }

}

void gf_SendOverlords (int lp_colonyIndex) {
    // Variable Declarations
    int lv_overlordIndex;
    unitgroup lv_overlordPool;
    unit lv_overlord;

    // Automatic Variable Declarations
    int auto115E2612_ae;
    const int auto115E2612_ai = 1;

    // Variable Initialization
    lv_overlordPool = UnitGroupEmpty();

    // Implementation
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("Overlord", gv_p02_ZERG_EAST, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_overlordPool);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("Overlord", gv_p04_ZERG_NORTH, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_overlordPool);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("Overlord", gv_p08_ZERG_SOUTH, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_overlordPool);
    auto115E2612_ae = gv_infestationOverlordCount[lp_colonyIndex];
    lv_overlordIndex = 1;
    for ( ; ( (auto115E2612_ai >= 0 && lv_overlordIndex <= auto115E2612_ae) || (auto115E2612_ai < 0 && lv_overlordIndex >= auto115E2612_ae) ) ; lv_overlordIndex += auto115E2612_ai ) {
        lv_overlord = UnitGroupRandomUnit(lv_overlordPool, c_unitCountAlive);
        if ((lv_overlord == null)) {
            return ;
        }

        UnitGroupRemove(lv_overlordPool, lv_overlord);
        UnitGroupAdd(gv_infestationOverlords[lp_colonyIndex], lv_overlord);
        UnitSetOwner(lv_overlord, gv_p07_ZERG_INFESTED, true);
        UnitIssueOrder(lv_overlord, OrderTargetingPoint(AbilityCommand("move", 0), gv_infestationOverlordLocation[lp_colonyIndex][lv_overlordIndex]), c_orderQueueReplace);
        UnitIssueOrder(lv_overlord, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    }
}

void gf_SendOverseers (int lp_colonyIndex) {
    // Variable Declarations
    int lv_overseerIndex;
    unitgroup lv_overseerPool;
    unit lv_overseer;

    // Automatic Variable Declarations
    int autoA9D381FC_ae;
    const int autoA9D381FC_ai = 1;

    // Variable Initialization
    lv_overseerPool = UnitGroupEmpty();

    // Implementation
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("Overseer", gv_p02_ZERG_EAST, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_overseerPool);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("Overseer", gv_p04_ZERG_NORTH, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_overseerPool);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("Overseer", gv_p08_ZERG_SOUTH, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_overseerPool);
    autoA9D381FC_ae = gv_infestationOverseerCount[lp_colonyIndex];
    lv_overseerIndex = 1;
    for ( ; ( (autoA9D381FC_ai >= 0 && lv_overseerIndex <= autoA9D381FC_ae) || (autoA9D381FC_ai < 0 && lv_overseerIndex >= autoA9D381FC_ae) ) ; lv_overseerIndex += autoA9D381FC_ai ) {
        lv_overseer = UnitGroupRandomUnit(lv_overseerPool, c_unitCountAlive);
        if ((lv_overseer == null)) {
            return ;
        }

        UnitGroupRemove(lv_overseerPool, lv_overseer);
        UnitGroupAdd(gv_infestationOverseers[lp_colonyIndex], lv_overseer);
        UnitSetOwner(lv_overseer, gv_p07_ZERG_INFESTED, true);
        UnitIssueOrder(lv_overseer, OrderTargetingPoint(AbilityCommand("move", 0), gv_infestationOverseerLocation[lp_colonyIndex][lv_overseerIndex]), c_orderQueueReplace);
        UnitIssueOrder(lv_overseer, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    }
}

void gf_CreateDefenders (int lp_colonyIndex, fixed lp_timeout) {
    // Variable Declarations
    unitgroup lv_zAvailableOverlords;
    int lv_defenderIndex;
    unit lv_overlord;
    timer lv_timeoutTimer;

    // Automatic Variable Declarations
    unitgroup auto6DAA3909_g;
    int auto6DAA3909_u;

    // Variable Initialization
    lv_zAvailableOverlords = UnitGroupEmpty();
    lv_timeoutTimer = TimerCreate();

    // Implementation
    TimerStart(lv_timeoutTimer, lp_timeout, false, c_timeGame);
    lv_defenderIndex = 0;
    while (true) {
        if (((libNtve_gf_UnitGroupIsDead(gv_infestationOverlords[lp_colonyIndex]) == true) || (lv_defenderIndex >= gv_infestationDefenderCount[lp_colonyIndex]) || (TimerGetRemaining(lv_timeoutTimer) <= 0.0))) {
            return ;
        }

        auto6DAA3909_g = gv_infestationOverlords[lp_colonyIndex];
        auto6DAA3909_u = UnitGroupCount(auto6DAA3909_g, c_unitCountAll);
        for (;; auto6DAA3909_u -= 1) {
            lv_overlord = UnitGroupUnitFromEnd(auto6DAA3909_g, auto6DAA3909_u);
            if (lv_overlord == null) { break; }
            if ((UnitGetOwner(lv_overlord) == gv_p07_ZERG_INFESTED) && (libNtve_gf_UnitInRegion(lv_overlord, gv_infestationRegion[lp_colonyIndex]) == true) && (lv_defenderIndex < gv_infestationDefenderCount[lp_colonyIndex])) {
                lv_defenderIndex += 1;
                gf_CreateADefender(lv_overlord, lp_colonyIndex, lv_defenderIndex);
            }

        }
        Wait(1.0, c_timeGame);
    }
}

void gf_CreateADefender (unit lp_overlord, int lp_colonyIndex, int lp_defenderIndex) {
    // Variable Declarations
    string lv_defenderType;
    unitgroup lv_availableOverlords;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_availableOverlords = UnitGroupEmpty();

    // Implementation
    lv_defenderType = gv_infestationDefenderType[lp_colonyIndex][lp_defenderIndex];
    if ((gv_infestationDefenderUnit[lp_colonyIndex][lp_defenderIndex] != null) && (UnitIsAlive(gv_infestationDefenderUnit[lp_colonyIndex][lp_defenderIndex]) == true)) {
        return ;
    }

    if ((lv_defenderType == "InfestedVentMutaliskEgg")) {
        UnitCreate(1, lv_defenderType, 0, gv_p07_ZERG_INFESTED, gv_infestationDefenderLocation[lp_colonyIndex][lp_defenderIndex], libNtve_gf_RandomAngle());
        gv_infestationDefenderUnit[lp_colonyIndex][lp_defenderIndex] = UnitLastCreated();
        return ;
    }

    if ((lv_defenderType == "InfestedVentBroodLordEgg")) {
        UnitCreate(1, lv_defenderType, 0, gv_p07_ZERG_INFESTED, gv_infestationDefenderLocation[lp_colonyIndex][lp_defenderIndex], libNtve_gf_RandomAngle());
        gv_infestationDefenderUnit[lp_colonyIndex][lp_defenderIndex] = UnitLastCreated();
        return ;
    }

    libNtve_gf_UnitCreateFacingPoint(1, lv_defenderType, 0, gv_p07_ZERG_INFESTED, UnitGetPosition(lp_overlord), gv_infestationDefenderLocation[lp_colonyIndex][lp_defenderIndex]);
    gv_infestationDefenderUnit[lp_colonyIndex][lp_defenderIndex] = UnitLastCreated();
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), gv_infestationDefenderLocation[lp_colonyIndex][lp_defenderIndex]), c_orderQueueReplace);
    SoundPlayOnUnit(SoundLink("Overlord_Unload", -1), PlayerGroupAll(), lp_overlord, 0.0, 100.0, 0.0);
}

void gf_CreateVirophage (int lp_colonyIndex, int lp_attempts) {
    // Variable Declarations
    unit lv_overlord;
    unit lv_drone;
    timer lv_virophagePlacementTimeout;

    // Automatic Variable Declarations
    int auto63BB9904_n;
    int auto63BB9904_i;

    // Variable Initialization
    lv_virophagePlacementTimeout = TimerCreate();

    // Implementation
    auto63BB9904_n = lp_attempts;
    for (auto63BB9904_i = 1; auto63BB9904_i <= auto63BB9904_n; auto63BB9904_i += 1) {
        lv_overlord = UnitGroupRandomUnit(UnitGroup("Overlord", gv_p07_ZERG_INFESTED, gv_infestationRegion[lp_colonyIndex], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        if (((gv_gameOver == true) || (lv_overlord == null))) {
            return ;
        }

        UnitCargoCreate(lv_overlord, "Drone", 1);
        UnitSetCustomValue(UnitCargoLastCreated(), 1, IntToFixed(lp_colonyIndex));
        lv_drone = UnitCargoLastCreated();
        gf_DropCargoAndWait(lv_overlord, lv_drone, 2.0);
        if ((UnitIsAlive(lv_drone) == true)) {
            gf_BuildVirophageAndWait(lv_drone, lp_colonyIndex, 10.0);
            if ((gv_infestationVirophageUnit[lp_colonyIndex] != null)) {
                return ;
            }

        }

        Wait(1.0, c_timeGame);
    }
}

void gf_DropCargoAndWait (unit lp_transport, unit lp_cargo, fixed lp_timeout) {
    // Variable Declarations
    timer lv_timeoutTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timeoutTimer = TimerCreate();

    // Implementation
    TimerStart(lv_timeoutTimer, lp_timeout, false, c_timeGame);
    UnitIssueOrder(lp_transport, OrderTargetingPoint(AbilityCommand("OverlordTransport", 2), UnitGetPosition(lp_transport)), c_orderQueueReplace);
    UnitIssueOrder(lp_transport, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    while (true) {
        if (((UnitIsAlive(lp_cargo) == false) || (libNtve_gf_UnitIsInsideTransport(lp_cargo) == false) || (TimerGetRemaining(lv_timeoutTimer) <= 0.0))) {
            return ;
        }

        Wait(0.2, c_timeGame);
    }
}

void gf_BuildVirophageAndWait (unit lp_drone, int lp_colonyIndex, fixed lp_timeout) {
    // Variable Declarations
    timer lv_timeoutTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timeoutTimer = TimerCreate();

    // Implementation
    TimerStart(lv_timeoutTimer, lp_timeout, false, c_timeGame);
    UnitIssueOrder(lp_drone, OrderTargetingPoint(AbilityCommand("ZergBuild", 16), gv_infestationVirophageSpot[lp_colonyIndex]), c_orderQueueAddToEnd);
    while (true) {
        if (((UnitIsAlive(lp_drone) == false) || (gv_infestationVirophageUnit[lp_colonyIndex] != null) || (TimerGetRemaining(lv_timeoutTimer) <= 0.0))) {
            return ;
        }

        Wait(0.2, c_timeGame);
    }
}

void gf_PlayColonistGratitudeLineQ (region lp_location) {
    // Variable Declarations
    unit lv_sPEAKER;
    int lv_rND;

    // Automatic Variable Declarations
    int autoD24B01C0_val;

    // Variable Initialization

    // Implementation
    lv_rND = RandomInt(1, 3);
    autoD24B01C0_val = lv_rND;
    if (autoD24B01C0_val == 1) {
        lv_sPEAKER = UnitGroupRandomUnit(UnitGroup("Colonist", gv_p05_COLONIST, lp_location, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        libNtve_gf_AttachModelToUnit(lv_sPEAKER, "TalkIcon", "Ref_Origin");
        TriggerQueueEnter();
        SoundPlay(SoundLink("THanson03BCivilian100023", -1), PlayerGroupAll(), 100.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        TriggerQueueExit();
        libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    }
    else if (autoD24B01C0_val == 2) {
        lv_sPEAKER = UnitGroupRandomUnit(UnitGroup("Colonist", gv_p05_COLONIST, lp_location, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        libNtve_gf_AttachModelToUnit(lv_sPEAKER, "TalkIcon", "Ref_Origin");
        TriggerQueueEnter();
        SoundPlay(SoundLink("THanson03BCivilian400041", -1), PlayerGroupAll(), 100.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        TriggerQueueExit();
        libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    }
    else if (autoD24B01C0_val == 3) {
        lv_sPEAKER = UnitGroupRandomUnit(UnitGroup("Colonist", gv_p05_COLONIST, lp_location, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        libNtve_gf_AttachModelToUnit(lv_sPEAKER, "TalkIcon", "Ref_Origin");
        TriggerQueueEnter();
        SoundPlay(SoundLink("THanson03BCivilian200015", -1), PlayerGroupAll(), 100.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        TriggerQueueExit();
        libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    }
    else {
    }
}

void gf_InitEggDataSingle (int lp_spawnType, string lp_type, int lp_owner, fixed lp_growthDelay, fixed lp_burstSize) {
    // Variable Declarations
    int lv_eggIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_eggIndex = (lp_spawnType);
    gv_eggData[lv_eggIndex].lv_spawnOwner = lp_owner;
    gv_eggData[lv_eggIndex].lv_burstSize = lp_burstSize;
    gv_eggData[lv_eggIndex].lv_spawnType = lp_type;
    gv_eggData[lv_eggIndex].lv_scaleInc = ((gv_eggData[lv_eggIndex].lv_burstSize - gv_eGG_SIZE_BASE) / (lp_growthDelay * 10.0));
}

void gf_MakeEggsSpawn (int lp_spawnType, int lp_spawnQty, fixed lp_spawnPeriod, bool lp_start) {
    // Variable Declarations
    int lv_eggIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_eggIndex = (lp_spawnType);
    gv_eggData[lv_eggIndex].lv_spawnQty = lp_spawnQty;
    gv_eggData[lv_eggIndex].lv_spawnPeriod = lp_spawnPeriod;
    if ((lp_start == true)) {
        TimerStart(gv_eggData[lv_eggIndex].lv_timer, lp_spawnPeriod, true, c_timeGame);
    }

}

void gf_EggSpawnerSpawnEggsAtAllColonies (int lp_type) {
    // Variable Declarations
    const fixed lv_sPAWN_RADIUS = 6.0;
    int lv_colonyIndex;
    unit lv_virophage;

    // Automatic Variable Declarations
    const int auto487A907A_ae = gv_cOLONY_BASES;
    const int auto487A907A_ai = 1;
    int autoEA209D47_n;
    int autoEA209D47_i;

    // Variable Initialization

    // Implementation
    lv_colonyIndex = 1;
    for ( ; ( (auto487A907A_ai >= 0 && lv_colonyIndex <= auto487A907A_ae) || (auto487A907A_ai < 0 && lv_colonyIndex >= auto487A907A_ae) ) ; lv_colonyIndex += auto487A907A_ai ) {
        lv_virophage = gv_infestationVirophageUnit[lv_colonyIndex];
        autoEA209D47_n = gv_eggData[(lp_type)].lv_spawnQty;
        for (autoEA209D47_i = 1; autoEA209D47_i <= autoEA209D47_n; autoEA209D47_i += 1) {
            if ((gf_InfestedPlayerisFoodCapped() == false) && (lv_virophage != null) && (UnitIsAlive(lv_virophage) == true) && (UnitGetType(lv_virophage) == "Virophage")) {
                gf_EggSpawnerSpawnAnEgg(lp_type, RegionRandomPoint(RegionCircle(RegionGetCenter(gv_infestationRegion[lv_colonyIndex]), lv_sPAWN_RADIUS)), lv_colonyIndex);
            }

        }
    }
}

void gf_EggSpawnerSpawnAnEgg (int lp_type, point lp_spawnLoc, int lp_colonyIndex) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_eGG_UNIT, 0, gv_p07_ZERG_INFESTED, lp_spawnLoc);
    UnitSetCustomValue(UnitLastCreated(), (ge_UnitData_udEggType), IntToFixed((lp_type)));
    UnitSetCustomValue(UnitLastCreated(), (ge_UnitData_udEggScale), gv_eGG_SIZE_BASE);
    UnitSetCustomValue(UnitLastCreated(), (ge_UnitData_udEggColony), IntToFixed(lp_colonyIndex));
    UnitSetScale(UnitLastCreated(), gv_eGG_SIZE_BASE, gv_eGG_SIZE_BASE, gv_eGG_SIZE_BASE);
}

bool gf_InfestedPlayerisFoodCapped () {
    // Variable Declarations
    int lv_number;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_number += TechTreeUnitCount(gv_p07_ZERG_INFESTED, "InfestedAbomination", c_techCountQueuedOrBetter);
    lv_number += TechTreeUnitCount(gv_p07_ZERG_INFESTED, "InfestedCivilian", c_techCountQueuedOrBetter);
    lv_number += TechTreeUnitCount(gv_p07_ZERG_INFESTED, "InfestedTerranCampaign", c_techCountQueuedOrBetter);
    if ((lv_number <= PlayerGetPropertyInt(gv_p07_ZERG_INFESTED, c_playerPropSuppliesLimit))) {
        return false;
    }
    else {
        return true;
    }
}

void gf_ColonistMover (region lp_locale) {
    // Variable Declarations
    unit lv_colonist;
    unit lv_building;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_colonist = UnitGroupRandomUnit(UnitGroup("Colonist", c_playerAny, lp_locale, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    if (((lv_colonist == null) || (UnitOrder(lv_colonist, 0) != null))) {
        return ;
    }

    if ((RandomInt(1, 6) == 1)) {
        UnitIssueOrder(lv_colonist, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(RegionGetCenter(lp_locale), 2.0))), c_orderQueueReplace);
    }
    else {
        lv_building = UnitGroupRandomUnit(UnitGroup(null, gv_p05_COLONIST, lp_locale, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        if ((lv_building != null)) {
            UnitIssueOrder(lv_colonist, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_building)), c_orderQueueReplace);
        }

    }
}

void gf_OrderCarrionBirdtoFlyAway (unit lp_carrionBird) {
    // Automatic Variable Declarations
    // Implementation
    gv_carrionBirdParameter = lp_carrionBird;
    TriggerExecute(gt_CarrionBirdFlysAway, true, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_LoadCampaignData(libCamp_ge_MapID_MapTHanson03B);
    TriggerExecute(gt_Init01Technology, true, true);
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04Music, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    libCamp_gf_RegisterFootageRecording(gt_BriefingQ);
    libCamp_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_IntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iNT;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsViking, gv_p01_USER);
    TechTreeUpgradeAddLevel(gv_p02_ZERG_EAST, "overlordtransport", 1);
    TechTreeUpgradeAddLevel(gv_p03_VIROPHAGE, "overlordtransport", 1);
    TechTreeUpgradeAddLevel(gv_p04_ZERG_NORTH, "overlordtransport", 1);
    TechTreeUpgradeAddLevel(gv_p07_ZERG_INFESTED, "overlordtransport", 1);
    TechTreeUpgradeAddLevel(gv_p08_ZERG_SOUTH, "overlordtransport", 1);
    TechTreeAbilityAllow(gv_p02_ZERG_EAST, AbilityCommand("BurrowInfestedCivilianDown", 0), false);
    TechTreeAbilityAllow(gv_p03_VIROPHAGE, AbilityCommand("BurrowInfestedCivilianDown", 0), false);
    TechTreeAbilityAllow(gv_p04_ZERG_NORTH, AbilityCommand("BurrowInfestedCivilianDown", 0), false);
    TechTreeAbilityAllow(gv_p07_ZERG_INFESTED, AbilityCommand("BurrowInfestedCivilianDown", 0), false);
    TechTreeAbilityAllow(gv_p08_ZERG_SOUTH, AbilityCommand("BurrowInfestedCivilianDown", 0), false);
    TechTreeAbilityAllow(gv_p02_ZERG_EAST, AbilityCommand("BurrowInfestedTerranCampaignDown", 0), false);
    TechTreeAbilityAllow(gv_p03_VIROPHAGE, AbilityCommand("BurrowInfestedTerranCampaignDown", 0), false);
    TechTreeAbilityAllow(gv_p04_ZERG_NORTH, AbilityCommand("BurrowInfestedTerranCampaignDown", 0), false);
    TechTreeAbilityAllow(gv_p07_ZERG_INFESTED, AbilityCommand("BurrowInfestedTerranCampaignDown", 0), false);
    TechTreeAbilityAllow(gv_p08_ZERG_SOUTH, AbilityCommand("BurrowInfestedTerranCampaignDown", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_allZerg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_allZerg = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerSetColorIndex(gv_p02_ZERG_EAST, 4, true);
    PlayerSetColorIndex(gv_p03_VIROPHAGE, 4, true);
    PlayerSetColorIndex(gv_p04_ZERG_NORTH, 4, true);
    PlayerSetColorIndex(gv_p05_COLONIST, 0, true);
    PlayerSetColorIndex(gv_p06_COLONIST, 0, true);
    PlayerSetColorIndex(gv_p07_ZERG_INFESTED, 4, true);
    PlayerSetColorIndex(gv_p08_ZERG_SOUTH, 4, true);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p02_ZERG_EAST, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p03_VIROPHAGE, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p04_ZERG_NORTH, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p05_COLONIST, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p06_COLONIST, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p07_ZERG_INFESTED, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p08_ZERG_SOUTH, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p05_COLONIST, gv_p06_COLONIST, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    lv_allZerg = PlayerGroupSingle(gv_p02_ZERG_EAST);
    PlayerGroupAdd(lv_allZerg, gv_p03_VIROPHAGE);
    PlayerGroupAdd(lv_allZerg, gv_p04_ZERG_NORTH);
    PlayerGroupAdd(lv_allZerg, gv_p07_ZERG_INFESTED);
    PlayerGroupAdd(lv_allZerg, gv_p08_ZERG_SOUTH);
    libNtve_gf_SetPlayerGroupAlliance(lv_allZerg, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
    libNtve_gf_SetAlliance(gv_p05_COLONIST, gv_p02_ZERG_EAST, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p05_COLONIST, gv_p03_VIROPHAGE, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p05_COLONIST, gv_p04_ZERG_NORTH, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p05_COLONIST, gv_p07_ZERG_INFESTED, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p05_COLONIST, gv_p08_ZERG_SOUTH, libNtve_ge_AllianceSetting_Neutral);
    PlayerSetAlliance(gv_p05_COLONIST, c_allianceIdPushable, gv_p07_ZERG_INFESTED, true);
    PlayerSetAlliance(gv_p05_COLONIST, c_allianceIdPushable, gv_p03_VIROPHAGE, true);
    PlayerGroupAdd(gv_zergPlayers, gv_p02_ZERG_EAST);
    PlayerGroupAdd(gv_zergPlayers, gv_p03_VIROPHAGE);
    PlayerGroupAdd(gv_zergPlayers, gv_p04_ZERG_NORTH);
    PlayerGroupAdd(gv_zergPlayers, gv_p05_COLONIST);
    PlayerGroupAdd(gv_zergPlayers, gv_p06_COLONIST);
    PlayerGroupAdd(gv_zergPlayers, gv_p07_ZERG_INFESTED);
    PlayerGroupAdd(gv_zergPlayers, gv_p08_ZERG_SOUTH);
    AIAttackWaveSetGatherPoint(gv_p02_ZERG_EAST, RegionGetCenter(RegionFromId(15)));
    AIAttackWaveSetGatherPoint(gv_p04_ZERG_NORTH, RegionGetCenter(RegionFromId(31)));
    AIAttackWaveSetGatherPoint(gv_p08_ZERG_SOUTH, RegionGetCenter(RegionFromId(32)));
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 500);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropVespene, c_playerPropOperSetTo, 400);
    PlayerModifyPropertyInt(gv_p02_ZERG_EAST, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p02_ZERG_EAST, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p03_VIROPHAGE, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p03_VIROPHAGE, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p04_ZERG_NORTH, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p04_ZERG_NORTH, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p08_ZERG_SOUTH, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p08_ZERG_SOUTH, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerSetState(gv_p03_VIROPHAGE, c_playerStateDisplayInLeaderPanel, false);
    PlayerSetState(gv_p05_COLONIST, c_playerStateDisplayInLeaderPanel, false);
    PlayerSetState(gv_p06_COLONIST, c_playerStateDisplayInLeaderPanel, false);
    PlayerSetState(gv_p07_ZERG_INFESTED, c_playerStateDisplayInLeaderPanel, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto662D39EC_g;
    int auto662D39EC_u;
    unit auto662D39EC_var;
    unitgroup auto43ECEBF9_g;
    int auto43ECEBF9_u;
    unit auto43ECEBF9_var;
    unitgroup auto828DBE83_g;
    int auto828DBE83_u;
    unit auto828DBE83_var;
    unitgroup auto8A971C58_g;
    int auto8A971C58_u;
    unit auto8A971C58_var;
    unitgroup auto38B5833A_g;
    int auto38B5833A_u;
    unit auto38B5833A_var;
    unitgroup auto97EF4C11_g;
    int auto97EF4C11_u;
    unit auto97EF4C11_var;
    unitgroup auto0B898AD1_g;
    int auto0B898AD1_u;
    unit auto0B898AD1_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_InitEggData, true, false);
    TriggerExecute(gt_InitInfestationData, true, false);
    UnitSetPropertyFixed(UnitFromId(163), c_unitPropEnergy, 50.0);
    auto662D39EC_g = UnitGroup("CarrionBird", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto662D39EC_u = UnitGroupCount(auto662D39EC_g, c_unitCountAll);
    for (;; auto662D39EC_u -= 1) {
        auto662D39EC_var = UnitGroupUnitFromEnd(auto662D39EC_g, auto662D39EC_u);
        if (auto662D39EC_var == null) { break; }
        UnitGroupAdd(gv_carrionBirds, auto662D39EC_var);
    }
    auto43ECEBF9_g = UnitGroup(null, c_playerAny, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto43ECEBF9_u = UnitGroupCount(auto43ECEBF9_g, c_unitCountAll);
    for (;; auto43ECEBF9_u -= 1) {
        auto43ECEBF9_var = UnitGroupUnitFromEnd(auto43ECEBF9_g, auto43ECEBF9_u);
        if (auto43ECEBF9_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto43ECEBF9_var, false);
    }
    auto828DBE83_g = UnitGroup(null, c_playerAny, RegionFromId(53), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto828DBE83_u = UnitGroupCount(auto828DBE83_g, c_unitCountAll);
    for (;; auto828DBE83_u -= 1) {
        auto828DBE83_var = UnitGroupUnitFromEnd(auto828DBE83_g, auto828DBE83_u);
        if (auto828DBE83_var == null) { break; }
        UnitGroupAdd(gv_briefingGroup, auto828DBE83_var);
        libNtve_gf_ShowHideUnit(auto828DBE83_var, false);
    }
    auto8A971C58_g = UnitGroup(null, gv_p05_COLONIST, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8A971C58_u = UnitGroupCount(auto8A971C58_g, c_unitCountAll);
    for (;; auto8A971C58_u -= 1) {
        auto8A971C58_var = UnitGroupUnitFromEnd(auto8A971C58_g, auto8A971C58_u);
        if (auto8A971C58_var == null) { break; }
        UnitSetState(auto8A971C58_var, c_unitStateTargetable, false);
    }
    auto38B5833A_g = UnitGroup(null, gv_p05_COLONIST, RegionFromId(15), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto38B5833A_u = UnitGroupCount(auto38B5833A_g, c_unitCountAll);
    for (;; auto38B5833A_u -= 1) {
        auto38B5833A_var = UnitGroupUnitFromEnd(auto38B5833A_g, auto38B5833A_u);
        if (auto38B5833A_var == null) { break; }
        UnitBehaviorAddPlayer(auto38B5833A_var, "ColonyInfestation", gv_p02_ZERG_EAST, 1);
        UnitSetState(auto38B5833A_var, c_unitStateTargetable, true);
    }
    auto97EF4C11_g = UnitGroup(null, gv_p05_COLONIST, RegionFromId(31), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto97EF4C11_u = UnitGroupCount(auto97EF4C11_g, c_unitCountAll);
    for (;; auto97EF4C11_u -= 1) {
        auto97EF4C11_var = UnitGroupUnitFromEnd(auto97EF4C11_g, auto97EF4C11_u);
        if (auto97EF4C11_var == null) { break; }
        UnitBehaviorAddPlayer(auto97EF4C11_var, "ColonyInfestation", gv_p04_ZERG_NORTH, 1);
        UnitSetState(auto97EF4C11_var, c_unitStateTargetable, true);
    }
    auto0B898AD1_g = UnitGroup(null, gv_p05_COLONIST, RegionFromId(32), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0B898AD1_u = UnitGroupCount(auto0B898AD1_g, c_unitCountAll);
    for (;; auto0B898AD1_u -= 1) {
        auto0B898AD1_var = UnitGroupUnitFromEnd(auto0B898AD1_g, auto0B898AD1_u);
        if (auto0B898AD1_var == null) { break; }
        UnitBehaviorAddPlayer(auto0B898AD1_var, "ColonyInfestation", gv_p08_ZERG_SOUTH, 1);
        UnitSetState(auto0B898AD1_var, c_unitStateTargetable, true);
    }
    UnitBehaviorRemove(UnitFromId(1070), "SpawnLarva", 1);
    UnitBehaviorRemove(UnitFromId(1043), "SpawnLarva", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init04Music_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "THanson03BMusicMain", c_soundtrackCueAny, c_soundtrackIndexAny);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Music_Init () {
    gt_Init04Music = TriggerCreate("gt_Init04Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/2733AFE1"), null, UnitGetPosition(UnitFromId(163)));
    libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionPlayableMap(), "HavenTree", "Stand");
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionPlayableMap(), "HavenTree", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionPlayableMap(), "CreepCloud", c_animNameDefault, "Dead", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionPlayableMap(), "CreepSporeEmitter", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    RegionPlayableMapSet(RegionFromId(1));
    libLbty_gf_AutoRevealRegion(RegionFromId(46), RegionFromId(18), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(58), RegionFromId(46), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(59), RegionFromId(60), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(61), RegionFromId(65), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(64), RegionFromId(66), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(63), RegionFromId(8), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(62), RegionFromId(67), gv_p01_USER);
    CreepSetSpeed(c_creepSpeedDecay, 200.0);
    libCamp_gf_ChangeAmbience("Ambience_Hanson03bRain");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto98C81D62_g;
    int auto98C81D62_u;
    unit auto98C81D62_var;
    playergroup auto6A6E9979_g;
    int auto6A6E9979_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerDifficulty(gv_p01_USER) == 1)) {
        PlayerModifyPropertyInt(gv_p02_ZERG_EAST, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p03_VIROPHAGE, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p04_ZERG_NORTH, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p07_ZERG_INFESTED, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p08_ZERG_SOUTH, c_playerPropHandicap, c_playerPropOperSetTo, 50);
    }

    TimerStart(gv_aberrationStartTimer, libNtve_gf_DifficultyValueFixed(600.0, 600.0, 500.0, 400.0), false, c_timeGame);
    gf_MakeEggsSpawn(ge_SpawnType_stAberration, 1, libNtve_gf_DifficultyValueFixed(240.0, 240.0, 150.0, 120.0), false);
    gf_MakeEggsSpawn(ge_SpawnType_stInfestedMarine, 1, libNtve_gf_DifficultyValueFixed(80.0, 80.0, 60.0, 50.0), true);
    gf_MakeEggsSpawn(ge_SpawnType_stInfestedColonist, 2, libNtve_gf_DifficultyValueFixed(20.0, 20.0, 15.0, 13.0), true);
    gv_aberrationLife = libNtve_gf_DifficultyValueFixed(250.0, 500.0, 700.0, 800.0);
    gv_virophageLife = libNtve_gf_DifficultyValueFixed(200.0, 400.0, 750.0, 1000.0);
    auto98C81D62_g = UnitGroup("Virophage", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto98C81D62_u = UnitGroupCount(auto98C81D62_g, c_unitCountAll);
    for (;; auto98C81D62_u -= 1) {
        auto98C81D62_var = UnitGroupUnitFromEnd(auto98C81D62_g, auto98C81D62_u);
        if (auto98C81D62_var == null) { break; }
        gf_SetUnitMaxLife(auto98C81D62_var, gv_virophageLife);
    }
    TechTreeUpgradeAddLevel(gv_p07_ZERG_INFESTED, "overlordspeed", 1);
    auto6A6E9979_g = gv_zergPlayers;
    auto6A6E9979_var = -1;
    while (true) {
        auto6A6E9979_var = PlayerGroupNextPlayer(auto6A6E9979_g, auto6A6E9979_var);
        if (auto6A6E9979_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto6A6E9979_var, "ZergFlyerArmorsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        TechTreeUpgradeAddLevel(auto6A6E9979_var, "ZergGroundArmorsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_AddUnitTypeToUnitHelpPanel("Drone", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Zergling", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Mutalisk", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("BroodLord", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Overlord", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Overseer", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Roach", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("InfestedCivilian", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("InfestedTerranCampaign", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("InfestedAbomination", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Baneling", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SpineCrawler", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SporeCrawler", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Virophage", false, gv_p01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game
//--------------------------------------------------------------------------------------------------
bool gt_StartGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/C5C06D21"), null, PointFromId(292));
    PlayerPauseAllCharges(gv_p01_USER, false);
    PlayerPauseAllCooldowns(gv_p01_USER, false);
    CreepSetSpeed(c_creepSpeedGrowth, 1000.0);
    TriggerEnable(gt_ColonistLoad, true);
    TriggerEnable(gt_ColonistUnload, true);
    TriggerExecute(gt_CarrionBirds, true, false);
    TriggerExecute(gt_InitialInfestation, true, false);
    TriggerExecute(gt_InfestColoniesForever, true, false);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_ObjectiveDestroyInfestationCreateQ, true, true);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_InitWarningPings, true, false);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_TransmissionMissionStartQ, true, true);
    TriggerExecute(gt_NewUnitVikingTipQ, true, false);
    Wait(3.0, c_timeGame);
    TriggerExecute(gt_VirophageTipQ, true, false);
    Wait(3.0, c_timeGame);
    CreepSetSpeed(c_creepSpeedGrowth, 100.0);
    TriggerQueueEnter();
    libCamp_gf_CreateStorymodeTips();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGame_Init () {
    gt_StartGame = TriggerCreate("gt_StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initial Infestation
//--------------------------------------------------------------------------------------------------
bool gt_InitialInfestation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_colonyIndex;

    // Automatic Variable Declarations
    unitgroup auto1A65E393_g;
    int auto1A65E393_u;
    unit auto1A65E393_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_colonyIndex = ge_ColonyIndex_Base2Pink;
    gv_zergInfestationCounter += 1;
    gv_stat_ColoniesSaved -= 1;
    gv_infestationColonyLost[lv_colonyIndex] = true;
    libNtve_gf_PlayAnimationOnDoodadsInRegion(gv_infestationRegion[lv_colonyIndex], "CreepCloud", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    auto1A65E393_g = UnitGroup(null, gv_p07_ZERG_INFESTED, gv_infestationRegion[lv_colonyIndex], UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1A65E393_u = UnitGroupCount(auto1A65E393_g, c_unitCountAll);
    for (;; auto1A65E393_u -= 1) {
        auto1A65E393_var = UnitGroupUnitFromEnd(auto1A65E393_g, auto1A65E393_u);
        if (auto1A65E393_var == null) { break; }
        UnitIssueOrder(auto1A65E393_var, Order(AbilityCommand("InfestedMonsterTrain", 0)), c_orderQueueReplace);
        UnitIssueOrder(auto1A65E393_var, Order(AbilityCommand("InfestedMonsterTrain", 0)), c_orderQueueAddToEnd);
        Wait(1.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitialInfestation_Init () {
    gt_InitialInfestation = TriggerCreate("gt_InitialInfestation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Warning Pings
//--------------------------------------------------------------------------------------------------
bool gt_InitWarningPings_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_colonyIndex;

    // Automatic Variable Declarations
    const int auto184A2A65_ae = gv_cOLONY_BASES;
    const int auto184A2A65_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_colonyIndex = 1;
    for ( ; ( (auto184A2A65_ai >= 0 && lv_colonyIndex <= auto184A2A65_ae) || (auto184A2A65_ai < 0 && lv_colonyIndex >= auto184A2A65_ae) ) ; lv_colonyIndex += auto184A2A65_ai ) {
        if ((gv_infestationPings[lv_colonyIndex] == c_invalidPingId)) {
            PingCreate(PlayerGroupAll(), "PingWarning", RegionGetCenter(gv_infestationRegion[lv_colonyIndex]), ColorWithAlpha(100.00, 0.00, 0.00, 74.90), 0.0);
            PingSetScale(PingLastCreated(), 0.75);
            PingSetVisible(PingLastCreated(), false);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/D74A9420"));
            gv_infestationPings[lv_colonyIndex] = PingLastCreated();
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitWarningPings_Init () {
    gt_InitWarningPings = TriggerCreate("gt_InitWarningPings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gas Pickups
//--------------------------------------------------------------------------------------------------
bool gt_GasPickups_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "NaturalGas"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_DestroyCacheAndGivePlayerResources(EventUnit(), c_playerPropVespene, 100, UnitGetOwner(EventUnitTargetUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GasPickups_Init () {
    gt_GasPickups = TriggerCreate("gt_GasPickups_Func");
    TriggerAddEventUnitAbility(gt_GasPickups, null, AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Infestation Data
//--------------------------------------------------------------------------------------------------
bool gt_InitInfestationData_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_InitInfestationColony(ge_ColonyIndex_Base1Green, RegionFromId(10), true);
    gf_InitInfestationColony(ge_ColonyIndex_Base2Pink, RegionFromId(9), false);
    gf_InitInfestationColony(ge_ColonyIndex_Base3Purple, RegionFromId(13), true);
    gf_InitInfestationColony(ge_ColonyIndex_Base4Red, RegionFromId(8), true);
    gf_InitInfestationColony(ge_ColonyIndex_Base5White, RegionFromId(3), true);
    gf_InitInfestationColony(ge_ColonyIndex_Base6Yellow, RegionFromId(7), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitInfestationData_Init () {
    gt_InitInfestationData = TriggerCreate("gt_InitInfestationData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infest Colonies Forever
//--------------------------------------------------------------------------------------------------
bool gt_InfestColoniesForever_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_index = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(libNtve_gf_DifficultyValueFixed(340.0, 340.0, 280.0, 280.0), c_timeGame);
    while (true) {
        gf_InfestAColonyAndWait(ge_ColonyIndex_Base1Green, libNtve_gf_DifficultyValueFixed(340.0, 340.0, 310.0, 310.0));
        gf_InfestAColonyAndWait(ge_ColonyIndex_Base3Purple, libNtve_gf_DifficultyValueFixed(330.0, 330.0, 300.0, 300.0));
        gf_InfestAColonyAndWait(ge_ColonyIndex_Base4Red, libNtve_gf_DifficultyValueFixed(320.0, 320.0, 290.0, 290.0));
        gf_InfestAColonyAndWait(ge_ColonyIndex_Base6Yellow, libNtve_gf_DifficultyValueFixed(330.0, 330.0, 300.0, 300.0));
        gf_InfestAColonyAndWait(ge_ColonyIndex_Base5White, libNtve_gf_DifficultyValueFixed(360.0, 360.0, 330.0, 330.0));
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestColoniesForever_Init () {
    gt_InfestColoniesForever = TriggerCreate("gt_InfestColoniesForever_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infest a Colony
//--------------------------------------------------------------------------------------------------
bool gt_InfestaColony_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_colonyIndex;
    timer lv_infestationTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_infestationTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_colonyIndex = gv_tEMP_ColonyIndex;
    TimerStart(lv_infestationTimer, c_timerDurationInfinite, false, c_timeGame);
    gf_SendOverlords(lv_colonyIndex);
    gf_SendOverseers(lv_colonyIndex);
    gf_CreateDefenders(lv_colonyIndex, 60.0);
    libNtve_gf_WaitForTimer(lv_infestationTimer, 60.0, true);
    gf_CreateVirophage(lv_colonyIndex, 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestaColony_Init () {
    gt_InfestaColony = TriggerCreate("gt_InfestaColony_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Virophage Construction Begins
//--------------------------------------------------------------------------------------------------
bool gt_VirophageConstructionBegins_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_colonyIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "Virophage"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_gameOver == true)) {
        UnitKill(EventUnitProgressUnit());
        return true;
    }

    lv_colonyIndex = FixedToInt(UnitGetCustomValue(EventUnit(), 1));
    gv_infestationVirophageUnit[lv_colonyIndex] = EventUnitProgressUnit();
    UnitSetCustomValue(gv_infestationVirophageUnit[lv_colonyIndex], 1, IntToFixed(lv_colonyIndex));
    UnitForceStatusBar(EventUnitProgressUnit(), true);
    UnitSetInfoText(EventUnitProgressUnit(), StringToText(""), StringExternal("Param/Value/55694EB6"), StringExternal("Param/Value/A5396465"));
    UnitSetState(EventUnitProgressUnit(), c_unitStateTooltipable, true);
    VisRevealerCreate(gv_p01_USER, gv_infestationRegion[lv_colonyIndex]);
    gv_infestationRevealer[lv_colonyIndex] = VisRevealerLastCreated();
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/02A5C7BE"), null, RegionGetCenter(gv_infestationRegion[lv_colonyIndex]));
    PingDestroy(gv_infestationPings[lv_colonyIndex]);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_infestationRegion[lv_colonyIndex]), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/137974FA"));
    gv_infestationPings[lv_colonyIndex] = PingLastCreated();
    gv_tEMP_ColonyIndex = lv_colonyIndex;
    TriggerExecute(gt_PlayAttackWarningQ, true, false);
    gv_zergInfestationCounter += 1;
    TriggerExecute(gt_ObjectiveDestroyInfestationUpdate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VirophageConstructionBegins_Init () {
    gt_VirophageConstructionBegins = TriggerCreate("gt_VirophageConstructionBegins_Func");
    TriggerAddEventUnitConstructProgress(gt_VirophageConstructionBegins, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Virophage Construction Ends
//--------------------------------------------------------------------------------------------------
bool gt_VirophageConstructionEnds_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_colonyIndex;
    unit lv_colonyStructure;
    unit lv_colonist;

    // Automatic Variable Declarations
    unitgroup auto6086ECAA_g;
    int auto6086ECAA_u;
    unitgroup auto04D9FE65_g;
    int auto04D9FE65_u;
    int autoFC259E5F_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "Virophage"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_colonyIndex = FixedToInt(UnitGetCustomValue(EventUnitProgressUnit(), 1));
    gf_SetUnitMaxLife(gv_infestationVirophageUnit[lv_colonyIndex], gv_virophageLife);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(gv_infestationRegion[lv_colonyIndex], "CreepCloud", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    gv_infestationColonyLost[lv_colonyIndex] = true;
    gv_stat_ColoniesSaved -= 1;
    UnitForceStatusBar(EventUnitProgressUnit(), false);
    UnitSetInfoText(EventUnitProgressUnit(), StringToText(""), StringExternal("Param/Value/3096EE9E"), StringExternal("Param/Value/E181F205"));
    UnitSetState(EventUnitProgressUnit(), c_unitStateTooltipable, true);
    gv_tEMP_ColonyIndex = lv_colonyIndex;
    TriggerExecute(gt_PlayInfestedWarningQ, true, false);
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/B93EE334"), null, RegionGetCenter(gv_infestationRegion[lv_colonyIndex]));
    auto6086ECAA_g = UnitGroup(null, gv_p05_COLONIST, gv_infestationRegion[lv_colonyIndex], UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6086ECAA_u = UnitGroupCount(auto6086ECAA_g, c_unitCountAll);
    for (;; auto6086ECAA_u -= 1) {
        lv_colonyStructure = UnitGroupUnitFromEnd(auto6086ECAA_g, auto6086ECAA_u);
        if (lv_colonyStructure == null) { break; }
        auto04D9FE65_g = UnitCargoGroup(lv_colonyStructure);
        auto04D9FE65_u = UnitGroupCount(auto04D9FE65_g, c_unitCountAll);
        for (;; auto04D9FE65_u -= 1) {
            lv_colonist = UnitGroupUnitFromEnd(auto04D9FE65_g, auto04D9FE65_u);
            if (lv_colonist == null) { break; }
            UnitRemove(lv_colonist);
        }
        UnitSetOwner(lv_colonyStructure, gv_p03_VIROPHAGE, true);
        UnitBehaviorAdd(lv_colonyStructure, "ColonyInfestation", gv_infestationVirophageUnit[lv_colonyIndex], 1);
        UnitSetState(lv_colonyStructure, c_unitStateTargetable, true);
    }
    Wait(2.0, c_timeGame);
    SoundPlay(SoundLink("Event_Hanson02ZombieHowl", -1), PlayerGroupAll(), 100.0, 0.0);
    autoFC259E5F_val = lv_colonyIndex;
    if (autoFC259E5F_val == ge_ColonyIndex_Base1Green) {
        gf_CreateInfestedHorde(libNtve_gf_DifficultyValueInt(20, 20, 15, 10), libNtve_gf_DifficultyValueInt(0, 0, 2, 4), lv_colonyIndex);
        gf_SpawnAndUnburrowUnitsAtColony(libNtve_gf_DifficultyValueInt(0, 0, 1, 2), "HydraliskBurrowed", lv_colonyIndex);
    }
    else if (autoFC259E5F_val == ge_ColonyIndex_Base2Pink) {
    }
    else if (autoFC259E5F_val == ge_ColonyIndex_Base3Purple) {
        gf_CreateInfestedHorde(libNtve_gf_DifficultyValueInt(25, 25, 15, 10), libNtve_gf_DifficultyValueInt(0, 3, 4, 6), lv_colonyIndex);
        gf_SpawnAndUnburrowUnitsAtColony(libNtve_gf_DifficultyValueInt(0, 0, 1, 2), "HydraliskBurrowed", lv_colonyIndex);
        gf_SpawnAndUnburrowUnitsAtColony(libNtve_gf_DifficultyValueInt(0, 0, 4, 4), "BanelingBurrowed", lv_colonyIndex);
    }
    else if (autoFC259E5F_val == ge_ColonyIndex_Base4Red) {
        gf_CreateInfestedHorde(libNtve_gf_DifficultyValueInt(20, 20, 15, 10), libNtve_gf_DifficultyValueInt(3, 3, 4, 6), lv_colonyIndex);
        gf_SpawnAndUnburrowUnitsAtColony(libNtve_gf_DifficultyValueInt(0, 0, 2, 3), "HydraliskBurrowed", lv_colonyIndex);
    }
    else if (autoFC259E5F_val == ge_ColonyIndex_Base5White) {
        gf_CreateInfestedHorde(libNtve_gf_DifficultyValueInt(20, 20, 15, 10), libNtve_gf_DifficultyValueInt(3, 3, 4, 6), lv_colonyIndex);
        gf_SpawnAndUnburrowUnitsAtColony(libNtve_gf_DifficultyValueInt(0, 0, 2, 3), "HydraliskBurrowed", lv_colonyIndex);
    }
    else if (autoFC259E5F_val == ge_ColonyIndex_Base6Yellow) {
        gf_CreateInfestedHorde(libNtve_gf_DifficultyValueInt(20, 20, 15, 10), libNtve_gf_DifficultyValueInt(3, 3, 4, 6), lv_colonyIndex);
        gf_SpawnAndUnburrowUnitsAtColony(libNtve_gf_DifficultyValueInt(0, 0, 2, 1), "HydraliskBurrowed", lv_colonyIndex);
        gf_SpawnAndUnburrowUnitsAtColony(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "UltraliskBurrowed", lv_colonyIndex);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VirophageConstructionEnds_Init () {
    gt_VirophageConstructionEnds = TriggerCreate("gt_VirophageConstructionEnds_Func");
    TriggerAddEventUnitConstructProgress(gt_VirophageConstructionEnds, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Virophage Dies
//--------------------------------------------------------------------------------------------------
bool gt_VirophageDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_colonyIndex;
    fixed lv_radius;
    region lv_killZone;
    unit lv_u;

    // Automatic Variable Declarations
    const fixed autoA3C3FAEB_ae = 12.0;
    const fixed autoA3C3FAEB_ai = 0.5;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Virophage"))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_p03_VIROPHAGE) || (UnitGetOwner(EventUnit()) == gv_p07_ZERG_INFESTED)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_colonyIndex = FixedToInt(UnitGetCustomValue(EventUnit(), 1));
    gv_infestationVirophageUnit[lv_colonyIndex] = null;
    gv_hansonGoneWildTransmissionCounter += 1;
    TriggerExecute(gt_TransmissionHansonGoneWildQ, true, false);
    if ((gv_infestationColonyLost[lv_colonyIndex] == false)) {
        gv_zergInfestationCounter -= 1;
        TriggerExecute(gt_ObjectiveDestroyInfestationUpdate, true, false);
    }

    lv_radius = 1.0;
    for ( ; ( (autoA3C3FAEB_ai >= 0 && lv_radius <= autoA3C3FAEB_ae) || (autoA3C3FAEB_ai < 0 && lv_radius >= autoA3C3FAEB_ae) ) ; lv_radius += autoA3C3FAEB_ai ) {
        lv_killZone = RegionCircle(RegionGetCenter(gv_infestationRegion[lv_colonyIndex]), lv_radius);
        gf_KillUnitsInRegion("Feederling", gv_p07_ZERG_INFESTED, lv_killZone);
        gf_KillUnitsInRegion(gv_eGG_UNIT, gv_p07_ZERG_INFESTED, lv_killZone);
        Wait(0.2, c_timeGame);
    }
    gf_KillUnitsInRegion("Feederling", gv_p07_ZERG_INFESTED, gv_infestationRegion[lv_colonyIndex]);
    gf_KillUnitsInRegion(gv_eGG_UNIT, gv_p07_ZERG_INFESTED, gv_infestationRegion[lv_colonyIndex]);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(gv_infestationRegion[lv_colonyIndex], "CreepCloud", c_animNameDefault, "Dead", c_animFlagPlayForever, c_animTimeDefault);
    if ((gv_infestationColonyLost[lv_colonyIndex] == false) && (UnitGroupCount(UnitGroupAlliance(gv_p01_USER, c_unitAllianceEnemy, gv_infestationRegion[lv_colonyIndex], UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0)) {
        MinimapPing(PlayerGroupAll(), RegionGetCenter(gv_infestationRegion[lv_colonyIndex]), 6.0, Color(0.00, 100.00, 0.00));
        UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/FF1DC2BE"), null, RegionGetCenter(gv_infestationRegion[lv_colonyIndex]));
        PingSetVisible(gv_infestationPings[lv_colonyIndex], false);
        VisRevealerEnable(gv_infestationRevealer[lv_colonyIndex], false);
        gf_PlayColonistGratitudeLineQ(gv_infestationRegion[lv_colonyIndex]);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VirophageDies_Init () {
    gt_VirophageDies = TriggerCreate("gt_VirophageDies_Func");
    TriggerAddEventUnitDied(gt_VirophageDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colony Cleansed Q
//--------------------------------------------------------------------------------------------------
bool gt_ColonyCleansedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_colonyIndex;

    // Automatic Variable Declarations
    const int auto970A2294_ae = gv_cOLONY_BASES;
    const int auto970A2294_ai = 1;
    int autoB8001AB1_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_colonyIndex = 1;
    for ( ; ( (auto970A2294_ai >= 0 && lv_colonyIndex <= auto970A2294_ae) || (auto970A2294_ai < 0 && lv_colonyIndex >= auto970A2294_ae) ) ; lv_colonyIndex += auto970A2294_ai ) {
        if ((gv_infestationColonyLost[lv_colonyIndex] == true) && (gv_infestationColonyCleanedMsg[lv_colonyIndex] == false) && (UnitGroupCount(UnitGroupAlliance(gv_p01_USER, c_unitAllianceEnemy, gv_infestationRegion[lv_colonyIndex], UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0)) {
            gv_infestationColonyCleanedMsg[lv_colonyIndex] = true;
            gv_zergInfestationCounter -= 1;
            TriggerExecute(gt_ObjectiveDestroyInfestationUpdate, true, false);
            TriggerQueueEnter();
            PingSetVisible(gv_infestationPings[lv_colonyIndex], false);
            VisRevealerEnable(gv_infestationRevealer[lv_colonyIndex], false);
            MinimapPing(PlayerGroupAll(), RegionGetCenter(gv_infestationRegion[lv_colonyIndex]), 6.0, Color(0.00, 100.00, 0.00));
            UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/DB76461B"), null, RegionGetCenter(gv_infestationRegion[lv_colonyIndex]));
            libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
            libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
            if ((gv_zergInfestationCounter == 2) && (gv_twoBaseWarningPlayed == false)) {
                gv_twoBaseWarningPlayed = true;
                // Transmission - SoundLink("THanson03BHorner00027", -1)
                libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03BHorner00027", -1), c_transmissionDurationAdd, 0.0, true);
                break;
            }
            else {
                if ((gv_zergInfestationCounter != 0)) {
                    autoB8001AB1_val = lv_colonyIndex;
                    if (autoB8001AB1_val == ge_ColonyIndex_Base1Green) {
                        // Transmission - SoundLink("THanson03BHorner00034", -1)
                        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03BHorner00034", -1), c_transmissionDurationAdd, 0.0, true);
                    }
                    else if (autoB8001AB1_val == ge_ColonyIndex_Base2Pink) {
                        // Transmission - SoundLink("THanson03BHorner00026", -1)
                        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03BHorner00026", -1), c_transmissionDurationAdd, 0.0, true);
                    }
                    else if (autoB8001AB1_val == ge_ColonyIndex_Base3Purple) {
                        // Transmission - SoundLink("THanson03BHorner00033", -1)
                        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03BHorner00033", -1), c_transmissionDurationAdd, 0.0, true);
                    }
                    else if (autoB8001AB1_val == ge_ColonyIndex_Base4Red) {
                        // Transmission - SoundLink("THanson03BHorner00026", -1)
                        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03BHorner00026", -1), c_transmissionDurationAdd, 0.0, true);
                    }
                    else if (autoB8001AB1_val == ge_ColonyIndex_Base5White) {
                        // Transmission - SoundLink("THanson03BHorner00025", -1)
                        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03BHorner00035", -1), c_transmissionDurationAdd, 0.0, true);
                    }
                    else if (autoB8001AB1_val == ge_ColonyIndex_Base6Yellow) {
                        // Transmission - SoundLink("THanson03BHorner00025", -1)
                        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03BHorner00025", -1), c_transmissionDurationAdd, 0.0, true);
                    }
                    else {
                    }
                }

            }
            libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
            TriggerQueueExit();
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColonyCleansedQ_Init () {
    gt_ColonyCleansedQ = TriggerCreate("gt_ColonyCleansedQ_Func");
    TriggerAddEventTimePeriodic(gt_ColonyCleansedQ, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Play Attack Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_PlayAttackWarningQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_colonyIndex;

    // Automatic Variable Declarations
    int autoE64F9923_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_colonyIndex = gv_tEMP_ColonyIndex;
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    autoE64F9923_val = lv_colonyIndex;
    if (autoE64F9923_val == ge_ColonyIndex_Base2Pink) {
    }
    else if (autoE64F9923_val == ge_ColonyIndex_Base1Green) {
        // Transmission - SoundLink("THanson03BHorner00020", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03BHorner00020", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else if (autoE64F9923_val == ge_ColonyIndex_Base3Purple) {
        // Transmission - SoundLink("THanson03BHorner00003", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03BHorner00003", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else if (autoE64F9923_val == ge_ColonyIndex_Base4Red) {
        // Transmission - SoundLink("THanson03BHorner00021", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03BHorner00021", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else if (autoE64F9923_val == ge_ColonyIndex_Base5White) {
        // Transmission - SoundLink("THanson03BHorner00003", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03BHorner00003", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else if (autoE64F9923_val == ge_ColonyIndex_Base6Yellow) {
        // Transmission - SoundLink("THanson03BHorner00010", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03BHorner00010", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else {
    }
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayAttackWarningQ_Init () {
    gt_PlayAttackWarningQ = TriggerCreate("gt_PlayAttackWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Play Infested Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_PlayInfestedWarningQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_colonyIndex;

    // Automatic Variable Declarations
    int auto4073B709_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_colonyIndex = gv_tEMP_ColonyIndex;
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    auto4073B709_val = lv_colonyIndex;
    if (auto4073B709_val == ge_ColonyIndex_Base2Pink) {
    }
    else if (auto4073B709_val == ge_ColonyIndex_Base1Green) {
        // Transmission - SoundLink("THanson03BHorner00009", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03BHorner00009", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else if (auto4073B709_val == ge_ColonyIndex_Base3Purple) {
        // Transmission - SoundLink("THanson03BHorner00014", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03BHorner00014", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else if (auto4073B709_val == ge_ColonyIndex_Base4Red) {
        // Transmission - SoundLink("THanson03BHorner00011", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03BHorner00011", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else if (auto4073B709_val == ge_ColonyIndex_Base5White) {
        // Transmission - SoundLink("THanson03BHorner00012", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03BHorner00012", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else if (auto4073B709_val == ge_ColonyIndex_Base6Yellow) {
        // Transmission - SoundLink("THanson03BHorner00011", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03BHorner00011", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else {
    }
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayInfestedWarningQ_Init () {
    gt_PlayInfestedWarningQ = TriggerCreate("gt_PlayInfestedWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Egg Data
//--------------------------------------------------------------------------------------------------
bool gt_InitEggData_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_InitEggDataSingle(ge_SpawnType_stAberration, "InfestedAbomination", gv_p07_ZERG_INFESTED, 90.0, 200.0);
    gf_InitEggDataSingle(ge_SpawnType_stInfestedMarine, "InfestedTerranCampaign", gv_p07_ZERG_INFESTED, 60.0, 150.0);
    gf_InitEggDataSingle(ge_SpawnType_stInfestedColonist, "InfestedCivilian", gv_p07_ZERG_INFESTED, 30.0, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitEggData_Init () {
    gt_InitEggData = TriggerCreate("gt_InitEggData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Egg Spawner - Aberration
//--------------------------------------------------------------------------------------------------
bool gt_EggSpawnerAberration_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_inCinematic == false) && (gv_gameOver == false)) {
        gf_EggSpawnerSpawnEggsAtAllColonies(ge_SpawnType_stAberration);
    }

    TimerStart(gv_eggData[ge_SpawnType_stAberration].lv_timer, gv_eggData[ge_SpawnType_stAberration].lv_spawnPeriod, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EggSpawnerAberration_Init () {
    gt_EggSpawnerAberration = TriggerCreate("gt_EggSpawnerAberration_Func");
    TriggerAddEventTimer(gt_EggSpawnerAberration, gv_aberrationStartTimer);
    TriggerAddEventTimer(gt_EggSpawnerAberration, gv_eggData[ge_SpawnType_stAberration].lv_timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Egg Spawner - Infested Marine
//--------------------------------------------------------------------------------------------------
bool gt_EggSpawnerInfestedMarine_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_inCinematic == false) && (gv_gameOver == false)) {
        gf_EggSpawnerSpawnEggsAtAllColonies(ge_SpawnType_stInfestedMarine);
    }

    TimerStart(gv_eggData[ge_SpawnType_stInfestedMarine].lv_timer, gv_eggData[ge_SpawnType_stInfestedMarine].lv_spawnPeriod, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EggSpawnerInfestedMarine_Init () {
    gt_EggSpawnerInfestedMarine = TriggerCreate("gt_EggSpawnerInfestedMarine_Func");
    TriggerAddEventTimer(gt_EggSpawnerInfestedMarine, gv_eggData[ge_SpawnType_stInfestedMarine].lv_timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Egg Spawner - Infested Colonist
//--------------------------------------------------------------------------------------------------
bool gt_EggSpawnerInfestedColonist_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_inCinematic == false) && (gv_gameOver == false)) {
        gf_EggSpawnerSpawnEggsAtAllColonies(ge_SpawnType_stInfestedColonist);
    }

    TimerStart(gv_eggData[ge_SpawnType_stInfestedColonist].lv_timer, gv_eggData[ge_SpawnType_stInfestedColonist].lv_spawnPeriod, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EggSpawnerInfestedColonist_Init () {
    gt_EggSpawnerInfestedColonist = TriggerCreate("gt_EggSpawnerInfestedColonist_Func");
    TriggerAddEventTimer(gt_EggSpawnerInfestedColonist, gv_eggData[ge_SpawnType_stInfestedColonist].lv_timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Egg Spawner - Grow
//--------------------------------------------------------------------------------------------------
bool gt_EggSpawnerGrow_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_eggType;
    fixed lv_eggScale;
    point lv_eggPosition;
    int lv_colonyIndex;

    // Automatic Variable Declarations
    unitgroup autoB51C2030_g;
    int autoB51C2030_u;
    unit autoB51C2030_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB51C2030_g = UnitGroup(gv_eGG_UNIT, gv_p07_ZERG_INFESTED, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB51C2030_u = UnitGroupCount(autoB51C2030_g, c_unitCountAll);
    for (;; autoB51C2030_u -= 1) {
        autoB51C2030_var = UnitGroupUnitFromEnd(autoB51C2030_g, autoB51C2030_u);
        if (autoB51C2030_var == null) { break; }
        lv_eggType = FixedToInt(UnitGetCustomValue(autoB51C2030_var, (ge_UnitData_udEggType)));
        lv_eggScale = UnitGetCustomValue(autoB51C2030_var, (ge_UnitData_udEggScale));
        lv_colonyIndex = FixedToInt(UnitGetCustomValue(autoB51C2030_var, (ge_UnitData_udEggColony)));
        if ((lv_eggScale >= gv_eggData[lv_eggType].lv_burstSize)) {
            lv_eggPosition = UnitGetPosition(autoB51C2030_var);
            UnitKill(autoB51C2030_var);
            Wait(0.5, c_timeGame);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_eggData[lv_eggType].lv_spawnType, 0, gv_eggData[lv_eggType].lv_spawnOwner, lv_eggPosition);
            AISetUnitSuicide(UnitLastCreated(), true);
            if ((UnitGetType(UnitLastCreated()) == "InfestedAbomination")) {
                gf_SetUnitMaxLife(UnitLastCreated(), gv_aberrationLife);
                TriggerExecute(gt_EggSpawnerAberrationWarningQ, true, false);
            }

        }
        else {
            lv_eggScale += gv_eggData[lv_eggType].lv_scaleInc;
            UnitSetCustomValue(autoB51C2030_var, (ge_UnitData_udEggScale), lv_eggScale);
            UnitSetScale(autoB51C2030_var, lv_eggScale, lv_eggScale, lv_eggScale);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EggSpawnerGrow_Init () {
    gt_EggSpawnerGrow = TriggerCreate("gt_EggSpawnerGrow_Func");
    TriggerAddEventTimePeriodic(gt_EggSpawnerGrow, 0.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Egg Spawner - Aberration Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_EggSpawnerAberrationWarningQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_colonyIndex;

    // Automatic Variable Declarations
    const int auto29406641_ae = gv_cOLONY_BASES;
    const int auto29406641_ai = 1;
    unitgroup auto97CB6B13_g;
    int auto97CB6B13_u;
    unit auto97CB6B13_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    TriggerQueueEnter();
    if ((TimerGetRemaining(gv_aberrationWarningCooldown) > 0.0)) {
        return true;
    }

    lv_colonyIndex = 1;
    for ( ; ( (auto29406641_ai >= 0 && lv_colonyIndex <= auto29406641_ae) || (auto29406641_ai < 0 && lv_colonyIndex >= auto29406641_ae) ) ; lv_colonyIndex += auto29406641_ai ) {
        auto97CB6B13_g = UnitGroup("InfestedAbomination", c_playerAny, gv_infestationRegion[lv_colonyIndex], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto97CB6B13_u = UnitGroupCount(auto97CB6B13_g, c_unitCountAll);
        for (;; auto97CB6B13_u -= 1) {
            auto97CB6B13_var = UnitGroupUnitFromEnd(auto97CB6B13_g, auto97CB6B13_u);
            if (auto97CB6B13_var == null) { break; }
            if ((UnitGetOwner(auto97CB6B13_var) != gv_p01_USER)) {
                MinimapPing(PlayerGroupAll(), UnitGetPosition(auto97CB6B13_var), 6.0, Color(100.00, 0.00, 0.00));
                UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/0BD8F63D"), null, auto97CB6B13_var);
                libNtve_gf_ShareVisionofUnit(auto97CB6B13_var, true, gv_p01_USER);
            }

        }
    }
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson03BAdjutant00013", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03BAdjutant00013", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TimerStart(gv_aberrationWarningCooldown, 60.0, false, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EggSpawnerAberrationWarningQ_Init () {
    gt_EggSpawnerAberrationWarningQ = TriggerCreate("gt_EggSpawnerAberrationWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Feederling Spawner
//--------------------------------------------------------------------------------------------------
bool gt_FeederlingSpawner_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_fEEDERLINGS = 10;
    int lv_colonyIndex;
    unit lv_virophage;

    // Automatic Variable Declarations
    const int auto3181AD42_ae = gv_cOLONY_BASES;
    const int auto3181AD42_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_colonyIndex = 1;
    for ( ; ( (auto3181AD42_ai >= 0 && lv_colonyIndex <= auto3181AD42_ae) || (auto3181AD42_ai < 0 && lv_colonyIndex >= auto3181AD42_ae) ) ; lv_colonyIndex += auto3181AD42_ai ) {
        lv_virophage = gv_infestationVirophageUnit[lv_colonyIndex];
        if ((lv_virophage != null) && (UnitIsAlive(lv_virophage) == true) && (UnitGetType(lv_virophage) == "Virophage") && (UnitGroupCount(UnitGroup("Feederling", gv_p07_ZERG_INFESTED, gv_infestationRegion[lv_colonyIndex], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), lv_fEEDERLINGS), c_unitCountAlive) < lv_fEEDERLINGS) && (UnitGroupCount(UnitGroup(null, gv_p01_USER, gv_infestationRegion[lv_colonyIndex], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            UnitCreate(1, "Feederling", 0, gv_p07_ZERG_INFESTED, UnitGetPosition(lv_virophage), 270.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FeederlingSpawner_Init () {
    gt_FeederlingSpawner = TriggerCreate("gt_FeederlingSpawner_Func");
    TriggerAddEventTimePeriodic(gt_FeederlingSpawner, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Feederling Mover
//--------------------------------------------------------------------------------------------------
bool gt_FeederlingMover_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_colonyIndex;
    unit lv_feederling;
    unit lv_egg;
    unit lv_hut;

    // Automatic Variable Declarations
    const int autoB5362C4D_ae = gv_cOLONY_BASES;
    const int autoB5362C4D_ai = 1;
    const int auto6F202DF8_n = 3;
    int auto6F202DF8_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_colonyIndex = 1;
    for ( ; ( (autoB5362C4D_ai >= 0 && lv_colonyIndex <= autoB5362C4D_ae) || (autoB5362C4D_ai < 0 && lv_colonyIndex >= autoB5362C4D_ae) ) ; lv_colonyIndex += autoB5362C4D_ai ) {
        lv_feederling = UnitGroupRandomUnit(UnitGroup("Feederling", gv_p07_ZERG_INFESTED, gv_infestationRegion[lv_colonyIndex], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        if ((lv_feederling != null) && (UnitOrder(lv_feederling, 0) == null)) {
            lv_egg = UnitGroupRandomUnit(UnitGroup(gv_eGG_UNIT, c_playerAny, gv_infestationRegion[lv_colonyIndex], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
            if ((lv_egg != null)) {
                for (auto6F202DF8_i = 1; auto6F202DF8_i <= auto6F202DF8_n; auto6F202DF8_i += 1) {
                    lv_hut = UnitGroupRandomUnit(UnitGroup(null, c_playerAny, gv_infestationRegion[lv_colonyIndex], UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                    if ((lv_hut != null)) {
                        UnitIssueOrder(lv_feederling, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_hut)), c_orderQueueAddToEnd);
                        UnitIssueOrder(lv_feederling, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_egg)), c_orderQueueAddToEnd);
                    }

                }
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FeederlingMover_Init () {
    gt_FeederlingMover = TriggerCreate("gt_FeederlingMover_Func");
    TriggerAddEventTimePeriodic(gt_FeederlingMover, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Virophage Projectile Vomiting
//--------------------------------------------------------------------------------------------------
bool gt_VirophageProjectileVomiting_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_colonyIndex;
    unit lv_victim;

    // Automatic Variable Declarations
    const int autoDCB4570F_ae = gv_cOLONY_BASES;
    const int autoDCB4570F_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_colonyIndex = 1;
    for ( ; ( (autoDCB4570F_ai >= 0 && lv_colonyIndex <= autoDCB4570F_ae) || (autoDCB4570F_ai < 0 && lv_colonyIndex >= autoDCB4570F_ae) ) ; lv_colonyIndex += autoDCB4570F_ai ) {
        if ((UnitIsAlive(gv_infestationVirophageUnit[lv_colonyIndex]) == true)) {
            lv_victim = UnitGroupRandomUnit(UnitGroup(null, c_playerAny, gv_infestationRegion[lv_colonyIndex], UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
            if ((lv_victim != null)) {
                UnitIssueOrder(gv_infestationVirophageUnit[lv_colonyIndex], OrderTargetingUnit(AbilityCommand("attack", 0), lv_victim), c_orderQueueReplace);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VirophageProjectileVomiting_Init () {
    gt_VirophageProjectileVomiting = TriggerCreate("gt_VirophageProjectileVomiting_Func");
    TriggerAddEventTimePeriodic(gt_VirophageProjectileVomiting, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infested Building Dies
//--------------------------------------------------------------------------------------------------
bool gt_InfestedBuildingDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF8E238DB_g;
    int autoF8E238DB_u;
    unit autoF8E238DB_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitIsValid(EventUnit()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), gv_p01_USER, libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "InfestableBiodome") || (UnitGetType(EventUnit()) == "InfestableHut") || (UnitGetType(EventUnit()) == "InfestedCC") || (UnitGetType(EventUnit()) == "InfestedBarracks") || (UnitGetType(EventUnit()) == "InfestedFactory") || (UnitGetType(EventUnit()) == "InfestedStarport") || (UnitGetType(EventUnit()) == "InfestedEngBay")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(2, 3, 4, 6), "Broodling", 0, gv_p03_VIROPHAGE, UnitGetPosition(EventUnit()));
    autoF8E238DB_g = UnitLastCreatedGroup();
    autoF8E238DB_u = UnitGroupCount(autoF8E238DB_g, c_unitCountAll);
    for (;; autoF8E238DB_u -= 1) {
        autoF8E238DB_var = UnitGroupUnitFromEnd(autoF8E238DB_g, autoF8E238DB_u);
        if (autoF8E238DB_var == null) { break; }
        UnitBehaviorAdd(autoF8E238DB_var, "BroodlingFate", autoF8E238DB_var, 1);
        UnitSetPropertyFixed(autoF8E238DB_var, c_unitPropMovementSpeed, 2.5);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestedBuildingDies_Init () {
    gt_InfestedBuildingDies = TriggerCreate("gt_InfestedBuildingDies_Func");
    TriggerAddEventUnitDied(gt_InfestedBuildingDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Move Colonists
//--------------------------------------------------------------------------------------------------
bool gt_MoveColonists_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_colonyIndex;

    // Automatic Variable Declarations
    const int auto6ADEF646_ae = gv_cOLONY_BASES;
    const int auto6ADEF646_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_colonyIndex = 1;
    for ( ; ( (auto6ADEF646_ai >= 0 && lv_colonyIndex <= auto6ADEF646_ae) || (auto6ADEF646_ai < 0 && lv_colonyIndex >= auto6ADEF646_ae) ) ; lv_colonyIndex += auto6ADEF646_ai ) {
        gf_ColonistMover(gv_infestationRegion[lv_colonyIndex]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoveColonists_Init () {
    gt_MoveColonists = TriggerCreate("gt_MoveColonists_Func");
    TriggerAddEventTimePeriodic(gt_MoveColonists, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colonist Load
//--------------------------------------------------------------------------------------------------
bool gt_ColonistLoad_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_colonyIndex;

    // Automatic Variable Declarations
    const int autoF2EBF780_ae = gv_cOLONY_BASES;
    const int autoF2EBF780_ai = 1;
    unitgroup auto16B5685B_g;
    int auto16B5685B_u;
    unit auto16B5685B_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((PlayerGetAlliance(UnitGetOwner(EventUnit()), c_allianceIdPassive, gv_p01_USER) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_colonyIndex = 1;
    for ( ; ( (autoF2EBF780_ai >= 0 && lv_colonyIndex <= autoF2EBF780_ae) || (autoF2EBF780_ai < 0 && lv_colonyIndex >= autoF2EBF780_ae) ) ; lv_colonyIndex += autoF2EBF780_ai ) {
        if ((libNtve_gf_UnitInRegion(EventUnit(), gv_infestationRegion[lv_colonyIndex]) == true)) {
            auto16B5685B_g = UnitGroup("Colonist", c_playerAny, gv_infestationRegion[lv_colonyIndex], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto16B5685B_u = UnitGroupCount(auto16B5685B_g, c_unitCountAll);
            for (;; auto16B5685B_u -= 1) {
                auto16B5685B_var = UnitGroupUnitFromEnd(auto16B5685B_g, auto16B5685B_u);
                if (auto16B5685B_var == null) { break; }
                if ((UnitGetType(auto16B5685B_var) != "InfestableHut")) {
                    UnitBehaviorAdd(auto16B5685B_var, "Run", auto16B5685B_var, 1);
                    UnitIssueOrder(auto16B5685B_var, OrderTargetingUnit(null, UnitGroupRandomUnit(UnitGroup("InfestableHut", gv_p05_COLONIST, gv_infestationRegion[lv_colonyIndex], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueReplace);
                }

            }
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColonistLoad_Init () {
    gt_ColonistLoad = TriggerCreate("gt_ColonistLoad_Func");
    TriggerEnable(gt_ColonistLoad, false);
    TriggerAddEventUnitRegion(gt_ColonistLoad, null, RegionFromId(10), true);
    TriggerAddEventUnitRegion(gt_ColonistLoad, null, RegionFromId(9), true);
    TriggerAddEventUnitRegion(gt_ColonistLoad, null, RegionFromId(13), true);
    TriggerAddEventUnitRegion(gt_ColonistLoad, null, RegionFromId(8), true);
    TriggerAddEventUnitRegion(gt_ColonistLoad, null, RegionFromId(3), true);
    TriggerAddEventUnitRegion(gt_ColonistLoad, null, RegionFromId(7), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colonist Unload
//--------------------------------------------------------------------------------------------------
bool gt_ColonistUnload_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_colonyIndex;
    unit lv_hut;

    // Automatic Variable Declarations
    const int auto6508C8F3_ae = gv_cOLONY_BASES;
    const int auto6508C8F3_ai = 1;
    unitgroup autoEAA00682_g;
    int autoEAA00682_u;
    unit autoEAA00682_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_colonyIndex = 1;
    for ( ; ( (auto6508C8F3_ai >= 0 && lv_colonyIndex <= auto6508C8F3_ae) || (auto6508C8F3_ai < 0 && lv_colonyIndex >= auto6508C8F3_ae) ) ; lv_colonyIndex += auto6508C8F3_ai ) {
        if ((UnitGroupCount(UnitGroupAlliance(gv_p01_USER, c_unitAllianceEnemy, gv_infestationRegion[lv_colonyIndex], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0)) {
            autoEAA00682_g = UnitGroup("InfestableHut", gv_p05_COLONIST, gv_infestationRegion[lv_colonyIndex], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoEAA00682_u = UnitGroupCount(autoEAA00682_g, c_unitCountAll);
            for (;; autoEAA00682_u -= 1) {
                autoEAA00682_var = UnitGroupUnitFromEnd(autoEAA00682_g, autoEAA00682_u);
                if (autoEAA00682_var == null) { break; }
                UnitIssueOrder(autoEAA00682_var, Order(AbilityCommand("InfestableHutTransport", 1)), c_orderQueueReplace);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColonistUnload_Init () {
    gt_ColonistUnload = TriggerCreate("gt_ColonistUnload_Func");
    TriggerEnable(gt_ColonistUnload, false);
    TriggerAddEventTimePeriodic(gt_ColonistUnload, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colonist Walk Dont Run
//--------------------------------------------------------------------------------------------------
bool gt_ColonistWalkDontRun_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "InfestableHut"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnitCargo(), "Run", c_unitBehaviorCountAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColonistWalkDontRun_Init () {
    gt_ColonistWalkDontRun = TriggerCreate("gt_ColonistWalkDontRun_Func");
    TriggerAddEventUnitCargo(gt_ColonistWalkDontRun, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Base - South Hatchery Cleared Q
//--------------------------------------------------------------------------------------------------
bool gt_BaseSouthHatcheryClearedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p08_ZERG_SOUTH, RegionFromId(32), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(gv_basePingSouth);
    VisRevealerEnable(gv_baseRevealerSouth, false);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(32), "CreepCloud", c_animNameDefault, "Dead", c_animFlagPlayForever, c_animTimeDefault);
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/B39E1F3D"), null, RegionGetCenter(RegionFromId(32)));
    gv_zergInfestationCounter -= 1;
    TriggerExecute(gt_ObjectiveDestroyInfestationUpdate, true, false);
    if ((gv_zergInfestationCounter == 2) && (gv_twoBaseWarningPlayed == false)) {
        gv_twoBaseWarningPlayed = true;
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson03BHorner00027", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03BHorner00027", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else {
        if ((gv_zergInfestationCounter == 0)) {
            return true;
        }
        else {
            TriggerQueueEnter();
            libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
            libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
            // Transmission - SoundLink("THanson02Raynor00016", -1)
            libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Raynor00016", -1), c_transmissionDurationAdd, 0.0, true);
            libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
            TriggerQueueExit();
        }
    }
    if ((gv_zergInfestationCounter != 0)) {
        libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/83BC66C2"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BaseSouthHatcheryClearedQ_Init () {
    gt_BaseSouthHatcheryClearedQ = TriggerCreate("gt_BaseSouthHatcheryClearedQ_Func");
    TriggerAddEventTimePeriodic(gt_BaseSouthHatcheryClearedQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Base - North Hatchery Cleared Q
//--------------------------------------------------------------------------------------------------
bool gt_BaseNorthHatcheryClearedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p04_ZERG_NORTH, RegionFromId(31), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(gv_basePingNorth);
    VisRevealerEnable(gv_baseRevealerNorth, false);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(31), "CreepCloud", c_animNameDefault, "Dead", c_animFlagPlayForever, c_animTimeDefault);
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/EBA1CDE6"), null, RegionGetCenter(RegionFromId(31)));
    gv_zergInfestationCounter -= 1;
    TriggerExecute(gt_ObjectiveDestroyInfestationUpdate, true, false);
    if ((gv_zergInfestationCounter == 2) && (gv_twoBaseWarningPlayed == false)) {
        gv_twoBaseWarningPlayed = true;
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson03BHorner00027", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03BHorner00027", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else {
        if ((gv_zergInfestationCounter == 0)) {
            return true;
        }
        else {
            TriggerQueueEnter();
            libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
            libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
            // Transmission - SoundLink("THanson02Raynor00009", -1)
            libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Raynor00009", -1), c_transmissionDurationAdd, 0.0, true);
            libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
            TriggerQueueExit();
        }
    }
    if ((gv_zergInfestationCounter != 0)) {
        libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/346D4CE5"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BaseNorthHatcheryClearedQ_Init () {
    gt_BaseNorthHatcheryClearedQ = TriggerCreate("gt_BaseNorthHatcheryClearedQ_Func");
    TriggerAddEventTimePeriodic(gt_BaseNorthHatcheryClearedQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Base - East Hatchery Cleared Q
//--------------------------------------------------------------------------------------------------
bool gt_BaseEastHatcheryClearedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p02_ZERG_EAST, RegionFromId(15), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(gv_basePingEast);
    VisRevealerEnable(gv_baseRevealerEast, false);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(15), "CreepCloud", c_animNameDefault, "Dead", c_animFlagPlayForever, c_animTimeDefault);
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/B647C5DF"), null, RegionGetCenter(RegionFromId(15)));
    gv_zergInfestationCounter -= 1;
    TriggerExecute(gt_ObjectiveDestroyInfestationUpdate, true, false);
    if ((gv_zergInfestationCounter == 2) && (gv_twoBaseWarningPlayed == false)) {
        gv_twoBaseWarningPlayed = true;
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson03BHorner00027", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03BHorner00027", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else {
        if ((gv_zergInfestationCounter == 0)) {
            return true;
        }
        else {
            TriggerQueueEnter();
            libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
            libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
            // Transmission - SoundLink("THanson02Raynor00013", -1)
            libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Raynor00013", -1), c_transmissionDurationAdd, 0.0, true);
            libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
            TriggerQueueExit();
        }
    }
    if ((gv_zergInfestationCounter != 0)) {
        libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/98195BFA"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BaseEastHatcheryClearedQ_Init () {
    gt_BaseEastHatcheryClearedQ = TriggerCreate("gt_BaseEastHatcheryClearedQ_Func");
    TriggerAddEventTimePeriodic(gt_BaseEastHatcheryClearedQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Mission Start Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionMissionStartQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson03BRaynor00017", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03BRaynor00017", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("THanson03BTychus00030", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03BTychus00030", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("THanson03BRaynor00038", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03BRaynor00038", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionMissionStartQ_Init () {
    gt_TransmissionMissionStartQ = TriggerCreate("gt_TransmissionMissionStartQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Hanson Gone Wild Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHansonGoneWildQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_hansonGoneWildTransmissionCounter > 1))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(12.0, c_timeGame);
    TriggerQueueEnter();
    if ((gv_gameOver == false) && (gv_inCinematic == false)) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson03BHorner00005", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03BHorner00005", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionHansonGoneWildQ_Init () {
    gt_TransmissionHansonGoneWildQ = TriggerCreate("gt_TransmissionHansonGoneWildQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - All Outposts Infested Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAllOutpostsInfestedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p05_COLONIST, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson03BHorner00008", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03BHorner00008", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionAllOutpostsInfestedQ_Init () {
    gt_TransmissionAllOutpostsInfestedQ = TriggerCreate("gt_TransmissionAllOutpostsInfestedQ_Func");
    TriggerAddEventTimePeriodic(gt_TransmissionAllOutpostsInfestedQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AICampaignStart(gv_p02_ZERG_EAST);
    AICampaignStart(gv_p03_VIROPHAGE);
    AICampaignStart(gv_p04_ZERG_NORTH);
    AICampaignStart(gv_p07_ZERG_INFESTED);
    AICampaignStart(gv_p08_ZERG_SOUTH);
    AIAttackWaveSetTargetPlayer(gv_p07_ZERG_INFESTED, PlayerGroupSingle(gv_p01_USER));
    TriggerExecute(gt_ZergAttackWavesP02P04P08, true, false);
    TriggerExecute(gt_StartUpgradesH, true, false);
    TriggerExecute(gt_StartUpgradesB, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Upgrades H
//--------------------------------------------------------------------------------------------------
bool gt_StartUpgradesH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto3FE98BF4_g;
    int auto3FE98BF4_var;
    playergroup auto1C61CE14_g;
    int auto1C61CE14_var;
    playergroup auto05A3F41C_g;
    int auto05A3F41C_var;
    playergroup autoFF06FC5D_g;
    int autoFF06FC5D_var;
    playergroup auto703FF620_g;
    int auto703FF620_var;
    playergroup auto7BAD42D1_g;
    int auto7BAD42D1_var;
    playergroup auto70C823A3_g;
    int auto70C823A3_var;
    playergroup auto16E389A6_g;
    int auto16E389A6_var;
    playergroup auto102C2C60_g;
    int auto102C2C60_var;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((libNtve_gf_DifficultyValueInt(0, 0, 1, 0) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(300.0, c_timeGame);
    auto3FE98BF4_g = gv_zergPlayers;
    auto3FE98BF4_var = -1;
    while (true) {
        auto3FE98BF4_var = PlayerGroupNextPlayer(auto3FE98BF4_g, auto3FE98BF4_var);
        if (auto3FE98BF4_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto3FE98BF4_var, "ZergGroundArmorsLevel1", 1);
    }
    Wait(180.0, c_timeGame);
    auto1C61CE14_g = gv_zergPlayers;
    auto1C61CE14_var = -1;
    while (true) {
        auto1C61CE14_var = PlayerGroupNextPlayer(auto1C61CE14_g, auto1C61CE14_var);
        if (auto1C61CE14_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto1C61CE14_var, "ZergFlyerArmorsLevel1", 1);
    }
    Wait(180.0, c_timeGame);
    auto05A3F41C_g = gv_zergPlayers;
    auto05A3F41C_var = -1;
    while (true) {
        auto05A3F41C_var = PlayerGroupNextPlayer(auto05A3F41C_g, auto05A3F41C_var);
        if (auto05A3F41C_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto05A3F41C_var, "ZergMissileWeaponsLevel1", 1);
    }
    Wait(180.0, c_timeGame);
    autoFF06FC5D_g = gv_zergPlayers;
    autoFF06FC5D_var = -1;
    while (true) {
        autoFF06FC5D_var = PlayerGroupNextPlayer(autoFF06FC5D_g, autoFF06FC5D_var);
        if (autoFF06FC5D_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoFF06FC5D_var, "ZergMeleeWeaponsLevel1", 1);
    }
    Wait(180.0, c_timeGame);
    auto703FF620_g = gv_zergPlayers;
    auto703FF620_var = -1;
    while (true) {
        auto703FF620_var = PlayerGroupNextPlayer(auto703FF620_g, auto703FF620_var);
        if (auto703FF620_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto703FF620_var, "zerglingmovementspeed", 1);
    }
    Wait(180.0, c_timeGame);
    auto7BAD42D1_g = gv_zergPlayers;
    auto7BAD42D1_var = -1;
    while (true) {
        auto7BAD42D1_var = PlayerGroupNextPlayer(auto7BAD42D1_g, auto7BAD42D1_var);
        if (auto7BAD42D1_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto7BAD42D1_var, "ZergFlyerWeaponsLevel1", 1);
    }
    Wait(180.0, c_timeGame);
    auto70C823A3_g = gv_zergPlayers;
    auto70C823A3_var = -1;
    while (true) {
        auto70C823A3_var = PlayerGroupNextPlayer(auto70C823A3_g, auto70C823A3_var);
        if (auto70C823A3_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto70C823A3_var, "ZergMeleeWeaponsLevel2", 1);
    }
    Wait(180.0, c_timeGame);
    auto16E389A6_g = gv_zergPlayers;
    auto16E389A6_var = -1;
    while (true) {
        auto16E389A6_var = PlayerGroupNextPlayer(auto16E389A6_g, auto16E389A6_var);
        if (auto16E389A6_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto16E389A6_var, "ZergMissileWeaponsLevel2", 1);
    }
    Wait(180.0, c_timeGame);
    auto102C2C60_g = gv_zergPlayers;
    auto102C2C60_var = -1;
    while (true) {
        auto102C2C60_var = PlayerGroupNextPlayer(auto102C2C60_g, auto102C2C60_var);
        if (auto102C2C60_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto102C2C60_var, "ZergFlyerWeaponsLevel2", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartUpgradesH_Init () {
    gt_StartUpgradesH = TriggerCreate("gt_StartUpgradesH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Upgrades B
//--------------------------------------------------------------------------------------------------
bool gt_StartUpgradesB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoA274D6E1_g;
    int autoA274D6E1_var;
    playergroup auto2494F978_g;
    int auto2494F978_var;
    playergroup autoA78C8834_g;
    int autoA78C8834_var;
    playergroup auto07CBAF89_g;
    int auto07CBAF89_var;
    playergroup autoB0E8585A_g;
    int autoB0E8585A_var;
    playergroup autoA0C9E385_g;
    int autoA0C9E385_var;
    playergroup auto2805944E_g;
    int auto2805944E_var;
    playergroup autoF3C4587A_g;
    int autoF3C4587A_var;
    playergroup auto12838056_g;
    int auto12838056_var;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(300.0, c_timeGame);
    autoA274D6E1_g = gv_zergPlayers;
    autoA274D6E1_var = -1;
    while (true) {
        autoA274D6E1_var = PlayerGroupNextPlayer(autoA274D6E1_g, autoA274D6E1_var);
        if (autoA274D6E1_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoA274D6E1_var, "ZergMeleeWeaponsLevel1", 1);
    }
    Wait(180.0, c_timeGame);
    auto2494F978_g = gv_zergPlayers;
    auto2494F978_var = -1;
    while (true) {
        auto2494F978_var = PlayerGroupNextPlayer(auto2494F978_g, auto2494F978_var);
        if (auto2494F978_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto2494F978_var, "ZergMissileWeaponsLevel1", 1);
    }
    Wait(180.0, c_timeGame);
    autoA78C8834_g = gv_zergPlayers;
    autoA78C8834_var = -1;
    while (true) {
        autoA78C8834_var = PlayerGroupNextPlayer(autoA78C8834_g, autoA78C8834_var);
        if (autoA78C8834_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoA78C8834_var, "ZergFlyerWeaponsLevel1", 1);
    }
    Wait(180.0, c_timeGame);
    auto07CBAF89_g = gv_zergPlayers;
    auto07CBAF89_var = -1;
    while (true) {
        auto07CBAF89_var = PlayerGroupNextPlayer(auto07CBAF89_g, auto07CBAF89_var);
        if (auto07CBAF89_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto07CBAF89_var, "zerglingmovementspeed", 1);
    }
    Wait(180.0, c_timeGame);
    autoB0E8585A_g = gv_zergPlayers;
    autoB0E8585A_var = -1;
    while (true) {
        autoB0E8585A_var = PlayerGroupNextPlayer(autoB0E8585A_g, autoB0E8585A_var);
        if (autoB0E8585A_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoB0E8585A_var, "ZergMeleeWeaponsLevel2", 1);
    }
    Wait(180.0, c_timeGame);
    autoA0C9E385_g = gv_zergPlayers;
    autoA0C9E385_var = -1;
    while (true) {
        autoA0C9E385_var = PlayerGroupNextPlayer(autoA0C9E385_g, autoA0C9E385_var);
        if (autoA0C9E385_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoA0C9E385_var, "ZergMissileWeaponsLevel2", 1);
    }
    Wait(180.0, c_timeGame);
    auto2805944E_g = gv_zergPlayers;
    auto2805944E_var = -1;
    while (true) {
        auto2805944E_var = PlayerGroupNextPlayer(auto2805944E_g, auto2805944E_var);
        if (auto2805944E_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto2805944E_var, "ZergFlyerWeaponsLevel2", 1);
    }
    Wait(180.0, c_timeGame);
    autoF3C4587A_g = gv_zergPlayers;
    autoF3C4587A_var = -1;
    while (true) {
        autoF3C4587A_var = PlayerGroupNextPlayer(autoF3C4587A_g, autoF3C4587A_var);
        if (autoF3C4587A_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoF3C4587A_var, "ZergGroundArmorsLevel2", 1);
    }
    Wait(180.0, c_timeGame);
    auto12838056_g = gv_zergPlayers;
    auto12838056_var = -1;
    while (true) {
        auto12838056_var = PlayerGroupNextPlayer(auto12838056_g, auto12838056_var);
        if (auto12838056_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto12838056_var, "ZergFlyerArmorsLevel2", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartUpgradesB_Init () {
    gt_StartUpgradesB = TriggerCreate("gt_StartUpgradesB_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack Waves P02 P04 P08
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackWavesP02P04P08_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPlayer(gv_p02_ZERG_EAST, PlayerGroupSingle(gv_p01_USER));
    AIAttackWaveSetTargetPlayer(gv_p04_ZERG_NORTH, PlayerGroupSingle(gv_p01_USER));
    AIAttackWaveSetTargetPlayer(gv_p08_ZERG_SOUTH, PlayerGroupSingle(gv_p01_USER));
    AIAttackWaveSetGatherPoint(gv_p02_ZERG_EAST, PointFromId(294));
    AIAttackWaveSetGatherPoint(gv_p04_ZERG_NORTH, PointFromId(204));
    AIAttackWaveSetGatherPoint(gv_p08_ZERG_SOUTH, PointFromId(372));
    Wait(90.0, c_timeAI);
    AIAttackWaveAddUnits4(6, 6, 5, 9, "Zergling");
    AIAttackWaveAddUnits4(0, 0, 1, 1, "Hydralisk");
    AIAttackWaveAddWaypoint(gv_p04_ZERG_NORTH, PointFromId(591), false);
    AIAttackWaveSend(gv_p04_ZERG_NORTH, 120, true);
    Wait(60.0, c_timeAI);
    AIAttackWaveAddUnits4(2, 2, 3, 4, "Mutalisk");
    AIAttackWaveAddWaypoint(gv_p08_ZERG_SOUTH, PointFromId(1117), false);
    AIAttackWaveSend(gv_p08_ZERG_SOUTH, 100, true);
    while (true) {
        Wait(120.0, c_timeAI);
        AIAttackWaveAddUnits4(6, 6, 9, 12, "Zergling");
        AIAttackWaveAddUnits4(3, 3, 5, 6, "Mutalisk");
        AIAttackWaveAddWaypoint(gv_p08_ZERG_SOUTH, PointFromId(1117), false);
        AIAttackWaveSend(gv_p08_ZERG_SOUTH, 120, true);
        Wait(150.0, c_timeAI);
        AIAttackWaveAddUnits4(10, 12, 14, 16, "InfestedCivilian");
        AIAttackWaveAddUnits4(3, 5, 7, 9, "InfestedTerranCampaign");
        AIAttackWaveAddWaypoint(gv_p02_ZERG_EAST, PointFromId(76), false);
        AIAttackWaveSend(gv_p02_ZERG_EAST, 120, true);
        Wait(160.0, c_timeAI);
        AIAttackWaveAddUnits4(6, 6, 9, 12, "Zergling");
        AIAttackWaveAddUnits4(4, 4, 5, 3, "Roach");
        AIAttackWaveAddUnits4(0, 0, 0, 1, "Ultralisk");
        AIAttackWaveAddUnits4(0, 0, 0, 1, "Infestor");
        AIAttackWaveAddWaypoint(gv_p04_ZERG_NORTH, PointFromId(1117), false);
        AIAttackWaveSend(gv_p04_ZERG_NORTH, 120, true);
        Wait(110.0, c_timeAI);
        AIAttackWaveAddUnits4(4, 4, 5, 6, "Mutalisk");
        AIAttackWaveAddUnits4(0, 0, 3, 5, "Baneling");
        AIAttackWaveAddWaypoint(gv_p08_ZERG_SOUTH, PointFromId(591), false);
        AIAttackWaveSend(gv_p08_ZERG_SOUTH, 120, true);
        Wait(220.0, c_timeAI);
        AIAttackWaveAddUnits4(4, 4, 9, 5, "Zergling");
        AIAttackWaveAddUnits4(2, 2, 2, 3, "Hydralisk");
        AIAttackWaveAddUnits4(0, 0, 0, 2, "Baneling");
        AIAttackWaveAddWaypoint(gv_p04_ZERG_NORTH, PointFromId(76), false);
        AIAttackWaveSend(gv_p04_ZERG_NORTH, 120, true);
        Wait(30.0, c_timeAI);
        AIAttackWaveAddUnits4(2, 2, 3, 3, "BroodLord");
        AIAttackWaveAddUnits4(0, 0, 1, 2, "Hydralisk");
        AIAttackWaveAddUnits4(0, 0, 2, 3, "Roach");
        AIAttackWaveAddUnits4(0, 0, 0, 1, "Infestor");
        AIAttackWaveAddWaypoint(gv_p08_ZERG_SOUTH, PointFromId(1117), false);
        AIAttackWaveSend(gv_p08_ZERG_SOUTH, 120, true);
        Wait(150.0, c_timeAI);
        AIAttackWaveAddUnits4(6, 6, 9, 12, "Zergling");
        AIAttackWaveAddUnits4(3, 3, 5, 6, "Mutalisk");
        AIAttackWaveAddWaypoint(gv_p04_ZERG_NORTH, PointFromId(76), false);
        AIAttackWaveSend(gv_p04_ZERG_NORTH, 120, true);
        Wait(80.0, c_timeAI);
        AIAttackWaveAddUnits4(10, 12, 14, 12, "InfestedCivilian");
        AIAttackWaveAddUnits4(3, 5, 7, 9, "InfestedTerranCampaign");
        AIAttackWaveAddUnits4(0, 0, 0, 1, "Infestor");
        AIAttackWaveAddWaypoint(gv_p02_ZERG_EAST, PointFromId(591), false);
        AIAttackWaveSend(gv_p02_ZERG_EAST, 120, true);
        AIAttackWaveAddUnits4(1, 1, 2, 2, "Roach");
        AIAttackWaveAddUnits4(1, 1, 2, 2, "Hydralisk");
        AIAttackWaveAddUnits4(2, 2, 3, 4, "Baneling");
        AIAttackWaveAddUnits4(0, 0, 0, 1, "Ultralisk");
        AIAttackWaveAddWaypoint(gv_p08_ZERG_SOUTH, PointFromId(1117), false);
        AIAttackWaveSend(gv_p08_ZERG_SOUTH, 120, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackWavesP02P04P08_Init () {
    gt_ZergAttackWavesP02P04P08 = TriggerCreate("gt_ZergAttackWavesP02P04P08_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveMinerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveMinerals_Init () {
    gt_AIGiveMinerals = TriggerCreate("gt_AIGiveMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p02_ZERG_EAST, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p03_VIROPHAGE, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p04_ZERG_NORTH, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p08_ZERG_SOUTH, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveGas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveGas_Init () {
    gt_AIGiveGas = TriggerCreate("gt_AIGiveGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p02_ZERG_EAST, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p03_VIROPHAGE, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p04_ZERG_NORTH, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p08_ZERG_SOUTH, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Carrion Birds
//--------------------------------------------------------------------------------------------------
bool gt_CarrionBirds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto42F1D01E_g;
    int auto42F1D01E_u;
    unit auto42F1D01E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((UnitGroupCount(gv_carrionBirds, c_unitCountAlive) == 0)) {
            return true;
        }

        auto42F1D01E_g = gv_carrionBirds;
        auto42F1D01E_u = UnitGroupCount(auto42F1D01E_g, c_unitCountAll);
        for (;; auto42F1D01E_u -= 1) {
            auto42F1D01E_var = UnitGroupUnitFromEnd(auto42F1D01E_g, auto42F1D01E_u);
            if (auto42F1D01E_var == null) { break; }
            if ((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionCircle(UnitGetPosition(auto42F1D01E_var), 5.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                UnitGroupRemove(gv_carrionBirds, auto42F1D01E_var);
                gf_OrderCarrionBirdtoFlyAway(auto42F1D01E_var);
            }

        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CarrionBirds_Init () {
    gt_CarrionBirds = TriggerCreate("gt_CarrionBirds_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Carrion Bird Flys Away
//--------------------------------------------------------------------------------------------------
bool gt_CarrionBirdFlysAway_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_carrionBirdLocal;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_carrionBirdLocal = gv_carrionBirdParameter;
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_carrionBirdLocal), c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(6.666, c_timeGame);
    UnitRemove(lv_carrionBirdLocal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CarrionBirdFlysAway_Init () {
    gt_CarrionBirdFlysAway = TriggerCreate("gt_CarrionBirdFlysAway_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Viking Kills of Enemy Structures
//--------------------------------------------------------------------------------------------------
bool gt_VikingKillsofEnemyStructures_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), UnitGetOwner(libNtve_gf_KillingUnit()), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((UnitGetType(libNtve_gf_KillingUnit()) == "VikingAssault"))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_vikingStructureKills += 1;
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1)) {
        AchievementTermQuantitySet(gv_p01_USER, "Anniversary_THanson03B", gv_vikingStructureKills);
        TextExpressionSetToken("Param/Expression/C7A1FEC2", "A", IntToText(gv_vikingStructureKills));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/C7A1FEC2"), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VikingKillsofEnemyStructures_Init () {
    gt_VikingKillsofEnemyStructures = TriggerCreate("gt_VikingKillsofEnemyStructures_Func");
    TriggerAddEventUnitDied(gt_VikingKillsofEnemyStructures, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - Virophages Killed
//--------------------------------------------------------------------------------------------------
bool gt_StatVirophagesKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Virophage"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_stat_VirophagesKilled += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatVirophagesKilled_Init () {
    gt_StatVirophagesKilled = TriggerCreate("gt_StatVirophagesKilled_Func");
    TriggerAddEventUnitDied(gt_StatVirophagesKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Infestation Cleansed Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryInfestationCleansedCompleted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_colonyIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerPause(gv_aberrationStartTimer, true);
    TimerPause(gv_aberrationWarningCooldown, true);
    TimerPause(gv_eggData[ge_SpawnType_stInfestedColonist].lv_timer, true);
    TimerPause(gv_eggData[ge_SpawnType_stInfestedMarine].lv_timer, true);
    gv_gameOver = true;
    TriggerExecute(gt_ObjectiveDestroyInfestationComplete, true, true);
    libCamp_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryInfestationCleansedCompleted_Init () {
    gt_VictoryInfestationCleansedCompleted = TriggerCreate("gt_VictoryInfestationCleansedCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THanson03BMusicOutro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    // Transmission - SoundLink("THanson03BHorner00002", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03BHorner00002", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    TriggerExecute(gt_Victory, true, false);
    UnitPauseAll(true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((ObjectiveGetState(gv_objectiveDestroyInfestation) == c_objectiveStateCompleted)) {
        AchievementAward(gv_p01_USER, "THanson03B_1");
    }

    if ((gv_stat_ColoniesSaved >= 3) && (libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1)) {
        AchievementAward(gv_p01_USER, "THanson03B_2");
    }

    if ((gv_stat_ColoniesSaved >= 5) && (libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        AchievementAward(gv_p01_USER, "THanson03B_3");
    }

    VictoryPanelAddAchievement("THanson03B_1");
    VictoryPanelAddAchievement("THanson03B_2");
    VictoryPanelAddAchievement("THanson03B_3");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/058AC5A9"), IntToText(gv_stat_ColoniesSaved));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/EEF6561F"), IntToText(gv_stat_VirophagesKilled));
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/4E3E0110"), StringExternal("Param/Value/1E16B4C8"));
    libCamp_gf_EndCampaignMission(gv_p01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionPlayableMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, 0), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerPause(gv_aberrationStartTimer, true);
    TimerPause(gv_aberrationWarningCooldown, true);
    TimerPause(gv_eggData[ge_SpawnType_stInfestedColonist].lv_timer, true);
    TimerPause(gv_eggData[ge_SpawnType_stInfestedMarine].lv_timer, true);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/C087FD77"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_EndCampaignMission(gv_p01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    libCamp_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_p01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_p01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Virophage Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_VirophageTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Hanson03b_Virophage", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VirophageTipQ_Init () {
    gt_VirophageTipQ = TriggerCreate("gt_VirophageTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Unit: Viking Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_NewUnitVikingTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Hanson03_Viking", libNtve_ge_TipType_NewUnit, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewUnitVikingTipQ_Init () {
    gt_NewUnitVikingTipQ = TriggerCreate("gt_NewUnitVikingTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Infestation Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyInfestationCreateQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_initialInfestation;
    int lv_colonyIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_initialInfestation = ge_ColonyIndex_Base2Pink;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate((StringExternal("Param/Value/708B2E3E")), StringExternal("Param/Value/E1B705C0"), c_objectiveStateActive, true);
    gv_objectiveDestroyInfestation = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_THanson03BObjective1, ObjectiveLastCreated(), StringExternal("Param/Value/F987298E"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(4)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/AFAADAC0"));
    gv_basePingNorth = PingLastCreated();
    VisRevealArea(1, RegionFromId(4), 10.0, true);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(17)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/6734A621"));
    gv_basePingSouth = PingLastCreated();
    VisRevealArea(1, RegionFromId(17), 10.0, true);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(16)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/8795D599"));
    gv_basePingEast = PingLastCreated();
    VisRevealArea(1, RegionFromId(16), 10.0, true);
    Wait(0.5, c_timeGame);
    PingDestroy(gv_infestationPings[lv_initialInfestation]);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_infestationRegion[lv_initialInfestation]), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/593A891E"));
    gv_infestationPings[lv_initialInfestation] = PingLastCreated();
    PingSetVisible(gv_infestationPings[lv_initialInfestation], true);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyInfestationCreateQ_Init () {
    gt_ObjectiveDestroyInfestationCreateQ = TriggerCreate("gt_ObjectiveDestroyInfestationCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Infestation Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyInfestationUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveSetName(gv_objectiveDestroyInfestation, (StringExternal("Param/Value/0437D084") + IntToText(gv_zergInfestationCounter) + StringExternal("Param/Value/DBD58F80")));
    if ((gv_zergInfestationCounter == 0)) {
        TriggerExecute(gt_VictoryInfestationCleansedCompleted, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyInfestationUpdate_Init () {
    gt_ObjectiveDestroyInfestationUpdate = TriggerCreate("gt_ObjectiveDestroyInfestationUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Infestation Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyInfestationComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyInfestationCreateQ, true, false);
    TriggerExecute(gt_ObjectiveDestroyInfestationUpdate, true, true);
    ObjectiveSetState(gv_objectiveDestroyInfestation, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyInfestationComplete_Init () {
    gt_ObjectiveDestroyInfestationComplete = TriggerCreate("gt_ObjectiveDestroyInfestationComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_StartGame);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    gv_inCinematic = true;
    gv_gameOver = true;
    AITimePause(true);
    GameTimeOfDayPause(true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    TriggerExecute(gt_BriefingScene00, true, true);
    TriggerExecute(gt_BriefingScene01, true, true);
    TriggerExecute(gt_BriefingScene02, true, true);
    TriggerExecute(gt_BriefingScene03, true, true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UnitPauseAll(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_feederling;
    unit lv_escapeQuad;
    int lv_where;

    // Automatic Variable Declarations
    unitgroup auto123E9BE7_g;
    int auto123E9BE7_u;
    unit auto123E9BE7_var;
    unitgroup auto645C7A66_g;
    int auto645C7A66_u;
    unit auto645C7A66_var;
    unitgroup auto672F56D9_g;
    int auto672F56D9_u;
    unit auto672F56D9_var;
    unitgroup auto20BE5E96_g;
    int auto20BE5E96_u;
    unit auto20BE5E96_var;
    const int auto6C07714A_n = 7;
    int auto6C07714A_i;
    const int auto70FBC284_n = 3;
    int auto70FBC284_i;
    unitgroup auto1189D15D_g;
    int auto1189D15D_u;
    unit auto1189D15D_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    RegionPlayableMapSet(RegionEntireMap());
    Wait(2.0, c_timeGame);
    auto123E9BE7_g = gv_briefingGroup;
    auto123E9BE7_u = UnitGroupCount(auto123E9BE7_g, c_unitCountAll);
    for (;; auto123E9BE7_u -= 1) {
        auto123E9BE7_var = UnitGroupUnitFromEnd(auto123E9BE7_g, auto123E9BE7_u);
        if (auto123E9BE7_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto123E9BE7_var, true);
    }
    auto645C7A66_g = UnitGroup("InfestableHut", c_playerAny, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto645C7A66_u = UnitGroupCount(auto645C7A66_g, c_unitCountAll);
    for (;; auto645C7A66_u -= 1) {
        auto645C7A66_var = UnitGroupUnitFromEnd(auto645C7A66_g, auto645C7A66_u);
        if (auto645C7A66_var == null) { break; }
        UnitBehaviorAdd(auto645C7A66_var, "ColonyInfestation", auto645C7A66_var, 1);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p08_ZERG_SOUTH, PointFromId(1073));
    gv_briefingZergling = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "Feederling", 0, gv_p08_ZERG_SOUTH, PointFromId(1073));
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    lv_feederling = UnitLastCreated();
    auto672F56D9_g = UnitGroup("Overlord", c_playerAny, RegionFromId(52), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto672F56D9_u = UnitGroupCount(auto672F56D9_g, c_unitCountAll);
    for (;; auto672F56D9_u -= 1) {
        auto672F56D9_var = UnitGroupUnitFromEnd(auto672F56D9_g, auto672F56D9_u);
        if (auto672F56D9_var == null) { break; }
        UnitIssueOrder(auto672F56D9_var, Order(AbilityCommand("GenerateCreep", 0)), c_orderQueueReplace);
        UnitIssueOrder(auto672F56D9_var, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    }
    UnitIssueOrder(UnitFromId(1462), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1464)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1462), Order(AbilityCommand("GenerateCreep", 0)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(1462), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(1461), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1465)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1461), Order(AbilityCommand("GenerateCreep", 0)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(1461), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    auto20BE5E96_g = UnitGroup("InfestedCivilian", c_playerAny, RegionFromId(52), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto20BE5E96_u = UnitGroupCount(auto20BE5E96_g, c_unitCountAll);
    for (;; auto20BE5E96_u -= 1) {
        auto20BE5E96_var = UnitGroupUnitFromEnd(auto20BE5E96_g, auto20BE5E96_u);
        if (auto20BE5E96_var == null) { break; }
        UnitIssueOrder(auto20BE5E96_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2934)), c_orderQueueAddToEnd);
    }
    TriggerEnable(gt_Briefing00ProjectileVomiting, true);
    TriggerEnable(gt_Briefing00LikeCattletotheSlaughter, true);
    for (auto6C07714A_i = 1; auto6C07714A_i <= auto6C07714A_n; auto6C07714A_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Civilian", 0, gv_p05_COLONIST, RegionRandomPoint(RegionFromId(6)));
    }
    for (auto70FBC284_i = 1; auto70FBC284_i <= auto70FBC284_n; auto70FBC284_i += 1) {
        UnitIssueOrder(UnitGroupRandomUnit(UnitGroup(null, gv_p05_COLONIST, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(6))), c_orderQueueReplace);
    }
    TriggerEnable(gt_Briefing00RunLolaRun, true);
    UnitIssueOrder(gv_briefingZergling, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1072)), c_orderQueueReplace);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(398), 0.0, -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(405), (SoundLengthSync(SoundLink("THanson03BBriefingRaynor00002", -1)) + SoundLengthSync(SoundLink("THanson03BBriefingRaynor00010", -1))), -1, 10, true);
    MovieStartRecording("Briefing_Video_THanson03B_00");
    // Transmission - SoundLink("THanson03BBriefingRaynor00002", -1)
    SoundPlay(SoundLink("THanson03BBriefingRaynor00002", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THanson03BBriefingRaynor00002", -1))), c_timeReal);
    UnitIssueOrder(lv_feederling, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1074)), c_orderQueueReplace);
    // Transmission - SoundLink("THanson03BBriefingRaynor00010", -1)
    SoundPlay(SoundLink("THanson03BBriefingRaynor00010", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THanson03BBriefingRaynor00010", -1))), c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(227), (SoundLengthSync(SoundLink("THanson03BBriefingTychus00004", -1)) + SoundLengthSync(SoundLink("THanson03BBriefingRaynor00006", -1))), -1, 10, true);
    // Transmission - SoundLink("THanson03BBriefingRaynor00003", -1)
    SoundPlay(SoundLink("THanson03BBriefingRaynor00003", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THanson03BBriefingRaynor00003", -1))), c_timeReal);
    auto1189D15D_g = UnitGroup("InfestedCivilian", c_playerAny, RegionFromId(53), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1189D15D_u = UnitGroupCount(auto1189D15D_g, c_unitCountAll);
    for (;; auto1189D15D_u -= 1) {
        auto1189D15D_var = UnitGroupUnitFromEnd(auto1189D15D_g, auto1189D15D_u);
        if (auto1189D15D_var == null) { break; }
        UnitIssueOrder(auto1189D15D_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(63)), c_orderQueueReplace);
    }
    UnitIssueOrder(gv_briefingZergling, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(63)), c_orderQueueReplace);
    // Transmission - SoundLink("THanson03BBriefingTychus00004", -1)
    SoundPlay(SoundLink("THanson03BBriefingTychus00004", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THanson03BBriefingTychus00004", -1))), c_timeReal);
    // Transmission - SoundLink("THanson03BBriefingRaynor00006", -1)
    SoundPlay(SoundLink("THanson03BBriefingRaynor00006", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THanson03BBriefingRaynor00006", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson03BBriefingRaynor00002", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson03BBriefingRaynor00010", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson03BBriefingRaynor00003", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson03BBriefingTychus00004", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson03BBriefingRaynor00006", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00_Init () {
    gt_BriefingScene00 = TriggerCreate("gt_BriefingScene00_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing 00 - Projectile Vomiting
//--------------------------------------------------------------------------------------------------
bool gt_Briefing00ProjectileVomiting_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(UnitFromId(491), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(UnitGroup("InfestableHut", c_playerAny, RegionFromId(52), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Briefing00ProjectileVomiting_Init () {
    gt_Briefing00ProjectileVomiting = TriggerCreate("gt_Briefing00ProjectileVomiting_Func");
    TriggerEnable(gt_Briefing00ProjectileVomiting, false);
    TriggerAddEventTimePeriodic(gt_Briefing00ProjectileVomiting, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing 00 - Run Lola Run
//--------------------------------------------------------------------------------------------------
bool gt_Briefing00RunLolaRun_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6563E3CC_g;
    int auto6563E3CC_u;
    unit auto6563E3CC_var;
    unitgroup auto2D2D84D2_g;
    int auto2D2D84D2_u;
    unit auto2D2D84D2_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto6563E3CC_g = UnitGroup("Civilian", c_playerAny, RegionFromId(53), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6563E3CC_u = UnitGroupCount(auto6563E3CC_g, c_unitCountAll);
    for (;; auto6563E3CC_u -= 1) {
        auto6563E3CC_var = UnitGroupUnitFromEnd(auto6563E3CC_g, auto6563E3CC_u);
        if (auto6563E3CC_var == null) { break; }
        if ((DistanceBetweenPoints(UnitGetPosition(auto6563E3CC_var), UnitGetPosition(gv_briefingZergling)) <= 7.0)) {
            UnitBehaviorAdd(auto6563E3CC_var, "Run", auto6563E3CC_var, 1);
            UnitIssueOrder(auto6563E3CC_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(63)), c_orderQueueReplace);
        }

    }
    auto2D2D84D2_g = UnitGroup("CivilianFemale", c_playerAny, RegionFromId(53), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2D2D84D2_u = UnitGroupCount(auto2D2D84D2_g, c_unitCountAll);
    for (;; auto2D2D84D2_u -= 1) {
        auto2D2D84D2_var = UnitGroupUnitFromEnd(auto2D2D84D2_g, auto2D2D84D2_u);
        if (auto2D2D84D2_var == null) { break; }
        if ((DistanceBetweenPoints(UnitGetPosition(auto2D2D84D2_var), UnitGetPosition(gv_briefingZergling)) <= 6.0)) {
            UnitBehaviorAdd(auto2D2D84D2_var, "Run", auto2D2D84D2_var, 1);
            UnitIssueOrder(auto2D2D84D2_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(63)), c_orderQueueReplace);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Briefing00RunLolaRun_Init () {
    gt_Briefing00RunLolaRun = TriggerCreate("gt_Briefing00RunLolaRun_Func");
    TriggerEnable(gt_Briefing00RunLolaRun, false);
    TriggerAddEventTimePeriodic(gt_Briefing00RunLolaRun, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing 00 - Like Cattle to the Slaughter
//--------------------------------------------------------------------------------------------------
bool gt_Briefing00LikeCattletotheSlaughter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC6F8DF42_g;
    int autoC6F8DF42_u;
    unit autoC6F8DF42_var;
    unitgroup autoE9C294DC_g;
    int autoE9C294DC_u;
    unit autoE9C294DC_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoC6F8DF42_g = UnitGroup("Civilian", c_playerAny, RegionFromId(53), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC6F8DF42_u = UnitGroupCount(autoC6F8DF42_g, c_unitCountAll);
    for (;; autoC6F8DF42_u -= 1) {
        autoC6F8DF42_var = UnitGroupUnitFromEnd(autoC6F8DF42_g, autoC6F8DF42_u);
        if (autoC6F8DF42_var == null) { break; }
        if ((DistanceBetweenPoints(UnitGetPosition(autoC6F8DF42_var), UnitGetPosition(UnitFromId(491))) <= 5.0)) {
            UnitBehaviorRemove(autoC6F8DF42_var, "Run", 1);
            UnitIssueOrder(autoC6F8DF42_var, Order(AbilityCommand("MorphToInfestedCivilian", 0)), c_orderQueueReplace);
            UnitSetOwner(autoC6F8DF42_var, gv_p03_VIROPHAGE, true);
        }

    }
    autoE9C294DC_g = UnitGroup("CivilianFemale", c_playerAny, RegionFromId(53), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE9C294DC_u = UnitGroupCount(autoE9C294DC_g, c_unitCountAll);
    for (;; autoE9C294DC_u -= 1) {
        autoE9C294DC_var = UnitGroupUnitFromEnd(autoE9C294DC_g, autoE9C294DC_u);
        if (autoE9C294DC_var == null) { break; }
        if ((DistanceBetweenPoints(UnitGetPosition(autoE9C294DC_var), UnitGetPosition(UnitFromId(491))) <= 5.0)) {
            UnitBehaviorRemove(autoE9C294DC_var, "Run", 1);
            UnitIssueOrder(autoE9C294DC_var, Order(AbilityCommand("MorphToInfestedCivilian", 0)), c_orderQueueReplace);
            UnitSetOwner(autoE9C294DC_var, gv_p03_VIROPHAGE, true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Briefing00LikeCattletotheSlaughter_Init () {
    gt_Briefing00LikeCattletotheSlaughter = TriggerCreate("gt_Briefing00LikeCattletotheSlaughter_Func");
    TriggerEnable(gt_Briefing00LikeCattletotheSlaughter, false);
    TriggerAddEventTimePeriodic(gt_Briefing00LikeCattletotheSlaughter, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_attackGroup;

    // Automatic Variable Declarations
    unitgroup auto912DA5AD_g;
    int auto912DA5AD_u;
    unit auto912DA5AD_var;
    const int auto10729A37_n = 8;
    int auto10729A37_i;

    // Variable Initialization
    lv_attackGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(1, "TerranShipArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(1, "TerranShipArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(1, "TerranShipArmorsLevel3", 1);
    auto912DA5AD_g = UnitGroup(null, gv_p01_USER, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto912DA5AD_u = UnitGroupCount(auto912DA5AD_g, c_unitCountAll);
    for (;; auto912DA5AD_u -= 1) {
        auto912DA5AD_var = UnitGroupUnitFromEnd(auto912DA5AD_g, auto912DA5AD_u);
        if (auto912DA5AD_var == null) { break; }
        UnitRemove(auto912DA5AD_var);
    }
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_p01_USER);
    libNtve_gf_CreateUnitsAtPoint2(1, "VikingFighter", 0, gv_p01_USER, PointFromId(468));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(78)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "VikingFighter", 0, gv_p01_USER, PointFromId(469));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(460)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "VikingFighter", 0, gv_p01_USER, PointFromId(471));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(392)), c_orderQueueReplace);
    for (auto10729A37_i = 1; auto10729A37_i <= auto10729A37_n; auto10729A37_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedCivilian", 0, gv_p03_VIROPHAGE, RegionRandomPoint(RegionFromId(55)));
        UnitGroupAdd(lv_attackGroup, UnitLastCreated());
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_p03_VIROPHAGE, RegionRandomPoint(RegionFromId(55)));
    UnitGroupAdd(lv_attackGroup, UnitLastCreated());
    UnitGroupIssueOrder(lv_attackGroup, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(292)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup("VikingFighter", c_playerAny, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), Order(AbilityCommand("AssaultMode", 0)), c_orderQueueAddToEnd);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(647), 0.0, -1, 10, true);
    Wait(0.1, c_timeGame);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1075), SoundLengthSync(SoundLink("THanson03BBriefingSwann00007", -1)), -1, 10, true);
    MovieStartRecording("Briefing_Video_THanson03B_01");
    // Transmission - SoundLink("THanson03BBriefingSwann00007", -1)
    SoundPlay(SoundLink("THanson03BBriefingSwann00007", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THanson03BBriefingSwann00007", -1))), c_timeReal);
    // Transmission - SoundLink("THanson03BBriefingSwann00009", -1)
    SoundPlay(SoundLink("THanson03BBriefingSwann00009", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THanson03BBriefingSwann00009", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson03BBriefingSwann00007", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson03BBriefingSwann00009", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01_Init () {
    gt_BriefingScene01 = TriggerCreate("gt_BriefingScene01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 02
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF05BE8EE_g;
    int autoF05BE8EE_u;
    unit autoF05BE8EE_var;
    const int auto6B751010_n = 15;
    int auto6B751010_i;
    const int auto1E968291_n = 7;
    int auto1E968291_i;

    // Actions
    if (!runActions) {
        return true;
    }

    autoF05BE8EE_g = UnitGroup(null, c_playerAny, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF05BE8EE_u = UnitGroupCount(autoF05BE8EE_g, c_unitCountAll);
    for (;; autoF05BE8EE_u -= 1) {
        autoF05BE8EE_var = UnitGroupUnitFromEnd(autoF05BE8EE_g, autoF05BE8EE_u);
        if (autoF05BE8EE_var == null) { break; }
        libNtve_gf_PauseUnit(autoF05BE8EE_var, false);
        libNtve_gf_ShowHideUnit(autoF05BE8EE_var, true);
    }
    for (auto6B751010_i = 1; auto6B751010_i <= auto6B751010_n; auto6B751010_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Feederling", 0, gv_p07_ZERG_INFESTED, RegionRandomPoint(RegionFromId(9)));
        UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    }
    for (auto1E968291_i = 1; auto1E968291_i <= auto1E968291_n; auto1E968291_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_eGG_UNIT, 0, gv_p03_VIROPHAGE, RegionRandomPoint(RegionFromId(56)));
    }
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_Briefing02Eggs, true, false);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(3449), 0.0, -1, 10, true);
    Wait(0.1, c_timeGame);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(3450), SoundLengthSync(SoundLink("THanson03BBriefingRaynor00008", -1)), -1, 10, true);
    MovieStartRecording("Briefing_Video_THanson03B_02");
    UnitIssueOrder(UnitFromId(1048), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(210)), c_orderQueueReplace);
    // Transmission - SoundLink("THanson03BBriefingRaynor00008", -1)
    SoundPlay(SoundLink("THanson03BBriefingRaynor00008", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THanson03BBriefingRaynor00008", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson03BBriefingRaynor00008", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene02_Init () {
    gt_BriefingScene02 = TriggerCreate("gt_BriefingScene02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 03
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD8CFF08F_g;
    int autoD8CFF08F_u;
    unit autoD8CFF08F_var;
    const int auto795594E0_n = 15;
    int auto795594E0_i;
    const int autoBC3F9A53_n = 7;
    int autoBC3F9A53_i;

    // Actions
    if (!runActions) {
        return true;
    }

    autoD8CFF08F_g = UnitGroup(null, c_playerAny, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD8CFF08F_u = UnitGroupCount(autoD8CFF08F_g, c_unitCountAll);
    for (;; autoD8CFF08F_u -= 1) {
        autoD8CFF08F_var = UnitGroupUnitFromEnd(autoD8CFF08F_g, autoD8CFF08F_u);
        if (autoD8CFF08F_var == null) { break; }
        libNtve_gf_PauseUnit(autoD8CFF08F_var, false);
        libNtve_gf_ShowHideUnit(autoD8CFF08F_var, true);
    }
    for (auto795594E0_i = 1; auto795594E0_i <= auto795594E0_n; auto795594E0_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Feederling", 0, gv_p07_ZERG_INFESTED, RegionRandomPoint(RegionFromId(9)));
        UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    }
    for (autoBC3F9A53_i = 1; autoBC3F9A53_i <= autoBC3F9A53_n; autoBC3F9A53_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_eGG_UNIT, 0, gv_p03_VIROPHAGE, RegionRandomPoint(RegionFromId(56)));
    }
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_Briefing02Eggs, true, false);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(3450), 0.0, -1, 10, true);
    Wait(0.1, c_timeGame);
    MovieStartRecording("Briefing_Video_THanson03B_03");
    UnitIssueOrder(UnitFromId(1048), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(90)), c_orderQueueReplace);
    // Transmission - SoundLink("THanson03BBriefingTychus00013", -1)
    SoundPlay(SoundLink("THanson03BBriefingTychus00013", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((0.2 * SoundLengthSync(SoundLink("THanson03BBriefingTychus00013", -1))), c_timeReal);
    libNtve_gf_AttachModelToUnit(UnitFromId(1048), "BriefingUnitSelectLargeRed", "Ref_Center");
    Wait((0.8 * SoundLengthSync(SoundLink("THanson03BBriefingTychus00013", -1))), c_timeReal);
    // Transmission - SoundLink("THanson03BBriefingRaynor00011", -1)
    SoundPlay(SoundLink("THanson03BBriefingRaynor00011", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THanson03BBriefingRaynor00011", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson03BBriefingTychus00013", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson03BBriefingRaynor00011", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene03_Init () {
    gt_BriefingScene03 = TriggerCreate("gt_BriefingScene03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing 02 - Eggs
//--------------------------------------------------------------------------------------------------
bool gt_Briefing02Eggs_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    unitgroup auto28C6FFF2_g;
    int auto28C6FFF2_u;
    unit auto28C6FFF2_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.1, c_timeGame);
    auto28C6FFF2_g = UnitGroup(gv_eGG_UNIT, c_playerAny, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto28C6FFF2_u = UnitGroupCount(auto28C6FFF2_g, c_unitCountAll);
    for (;; auto28C6FFF2_u -= 1) {
        auto28C6FFF2_var = UnitGroupUnitFromEnd(auto28C6FFF2_g, auto28C6FFF2_u);
        if (auto28C6FFF2_var == null) { break; }
        lv_point = UnitGetPosition(auto28C6FFF2_var);
        UnitKill(auto28C6FFF2_var);
        Wait(0.5, c_timeReal);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedCivilian", 0, gv_p03_VIROPHAGE, lv_point);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Briefing02Eggs_Init () {
    gt_Briefing02Eggs = TriggerCreate("gt_Briefing02Eggs_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto65ECC869_g;
    int auto65ECC869_u;
    unit auto65ECC869_var;
    unitgroup auto87C3CAEE_g;
    int auto87C3CAEE_u;
    unit auto87C3CAEE_var;
    unitgroup auto6D42DDF1_g;
    int auto6D42DDF1_u;
    unit auto6D42DDF1_var;
    unitgroup auto035B6184_g;
    int auto035B6184_u;
    unit auto035B6184_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    GameTimeOfDayPause(true);
    CreepSetSpeed(c_creepSpeedDecay, 0.0);
    UnitPauseAll(true);
    UnitGroupAdd(gv_introHiddenUnitGroup, UnitFromId(1048));
    libNtve_gf_ShowHideUnit(UnitFromId(1048), false);
    auto65ECC869_g = UnitGroup("BroodLord", c_playerAny, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto65ECC869_u = UnitGroupCount(auto65ECC869_g, c_unitCountAll);
    for (;; auto65ECC869_u -= 1) {
        auto65ECC869_var = UnitGroupUnitFromEnd(auto65ECC869_g, auto65ECC869_u);
        if (auto65ECC869_var == null) { break; }
        UnitGroupAdd(gv_introHiddenUnitGroup, auto65ECC869_var);
        libNtve_gf_ShowHideUnit(auto65ECC869_var, false);
    }
    auto87C3CAEE_g = UnitGroup("Broodling", c_playerAny, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto87C3CAEE_u = UnitGroupCount(auto87C3CAEE_g, c_unitCountAll);
    for (;; auto87C3CAEE_u -= 1) {
        auto87C3CAEE_var = UnitGroupUnitFromEnd(auto87C3CAEE_g, auto87C3CAEE_u);
        if (auto87C3CAEE_var == null) { break; }
        UnitGroupAdd(gv_introHiddenUnitGroup, auto87C3CAEE_var);
        libNtve_gf_ShowHideUnit(auto87C3CAEE_var, false);
    }
    auto6D42DDF1_g = UnitGroup(null, gv_p05_COLONIST, RegionFromId(9), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6D42DDF1_u = UnitGroupCount(auto6D42DDF1_g, c_unitCountAll);
    for (;; auto6D42DDF1_u -= 1) {
        auto6D42DDF1_var = UnitGroupUnitFromEnd(auto6D42DDF1_g, auto6D42DDF1_u);
        if (auto6D42DDF1_var == null) { break; }
        UnitBehaviorAdd(auto6D42DDF1_var, "ColonyInfestation", UnitFromId(1048), 1);
        UnitSetState(auto6D42DDF1_var, c_unitStateTargetable, true);
    }
    auto035B6184_g = UnitGroup(null, c_playerAny, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto035B6184_u = UnitGroupCount(auto035B6184_g, c_unitCountAll);
    for (;; auto035B6184_u -= 1) {
        auto035B6184_var = UnitGroupUnitFromEnd(auto035B6184_g, auto035B6184_u);
        if (auto035B6184_var == null) { break; }
        libNtve_gf_PauseUnit(auto035B6184_var, false);
    }
    TimerPause(gv_aberrationStartTimer, true);
    TimerPause(gv_eggData[ge_SpawnType_stInfestedColonist].lv_timer, true);
    TimerPause(gv_eggData[ge_SpawnType_stInfestedMarine].lv_timer, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_virophage;
    unit lv_viking1;
    unit lv_viking2;
    unit lv_viking3;
    unit lv_broodLord1;
    unit lv_broodLord2;
    fixed lv_broodLordDistance;

    // Automatic Variable Declarations
    const int auto69FF6029_n = 13;
    int auto69FF6029_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_viking1 = UnitFromId(107);
    lv_viking2 = UnitFromId(472);
    lv_viking3 = UnitFromId(102);
    lv_broodLordDistance = (UnitTypeGetProperty("BroodLord", c_unitPropMovementSpeed) * SoundLengthSync(SoundLink("THanson03BHorner00042", 0)));
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(38), 0.0, -1, 10, true);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(9), "CreepCloud", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Virophage", c_unitCreateIgnorePlacement, gv_p07_ZERG_INFESTED, RegionGetCenter(RegionFromId(9)));
    lv_virophage = UnitLastCreated();
    UnitGroupAdd(gv_introSpawnedUnits, lv_virophage);
    for (auto69FF6029_i = 1; auto69FF6029_i <= auto69FF6029_n; auto69FF6029_i += 1) {
        UnitCreate(1, "Feederling", 0, gv_p07_ZERG_INFESTED, RegionRandomPoint(RegionFromId(9)), 270.0);
    }
    TriggerExecute(gt_IntroFeederlingMover, true, false);
    libNtve_gf_UnitCreateFacingPoint(1, "BroodLord", 0, gv_p07_ZERG_INFESTED, PointWithOffsetPolar(PointFromId(4173), lv_broodLordDistance, AngleBetweenPoints(PointFromId(644), PointFromId(4173))), UnitGetPosition(UnitFromId(97)));
    lv_broodLord1 = UnitLastCreated();
    UnitGroupAdd(gv_introSpawnedUnits, lv_broodLord1);
    libNtve_gf_UnitCreateFacingPoint(1, "BroodLord", 0, gv_p07_ZERG_INFESTED, PointWithOffsetPolar(PointFromId(565), lv_broodLordDistance, AngleBetweenPoints(PointFromId(645), PointFromId(565))), UnitGetPosition(UnitFromId(96)));
    lv_broodLord2 = UnitLastCreated();
    UnitGroupAdd(gv_introSpawnedUnits, lv_broodLord2);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_introCinematicCompleted = false;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THanson03BMusicIntro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(37), (SoundLengthSync(SoundLink("THanson03BAdjutant00018", 0)) + 0.0), -1, 10, true);
    // Transmission - SoundLink("THanson03BAdjutant00018", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03BAdjutant00018", -1), c_transmissionDurationAdd, 0.0, true);
    libNtve_gf_AttachModelToUnit(lv_virophage, "BriefingUnitSelectLargeRed", "Ref_Center");
    gv_virophagePingActor = libNtve_gf_ActorLastCreated();
    UnitIssueOrder(lv_virophage, OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(210)), c_orderQueueReplace);
    Wait(1.0, c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(237), (SoundLengthSync(SoundLink("THanson03BHorner00019", 0)) + SoundLengthSync(SoundLink("THanson03BHorner00042", 0))), -1, 10, true);
    // Transmission - SoundLink("THanson03BHorner00019", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03BHorner00019", -1), c_transmissionDurationAdd, 0.0, true);
    UnitIssueOrder(lv_broodLord1, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(644)), c_orderQueueReplace);
    UnitIssueOrder(lv_broodLord2, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(645)), c_orderQueueReplace);
    libNtve_gf_KillModel(gv_virophagePingActor);
    // Transmission - SoundLink("THanson03BHorner00042", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03BHorner00042", -1), c_transmissionDurationAdd, 0.0, true);
    libNtve_gf_AttachModelToUnit(lv_broodLord1, "BriefingUnitSelectLargeRed", "Ref_Center");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.500000");
    gv_broodLordPingActor1 = libNtve_gf_ActorLastCreated();
    libNtve_gf_AttachModelToUnit(lv_broodLord2, "BriefingUnitSelectLargeRed", "Ref_Center");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.500000");
    gv_broodLordPingActor2 = libNtve_gf_ActorLastCreated();
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1959), SoundLengthSync(SoundLink("THanson03BHorner00028", 0)), -1, 10, true);
    Wait(1.0, c_timeReal);
    // Transmission - SoundLink("THanson03BHorner00028", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03BHorner00028", -1), c_transmissionDurationAdd, 0.0, true);
    UnitIssueOrder(lv_virophage, OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(92)), c_orderQueueReplace);
    libNtve_gf_KillModel(gv_broodLordPingActor1);
    libNtve_gf_KillModel(gv_broodLordPingActor2);
    // Transmission - SoundLink("THanson03BRaynor00029", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03BRaynor00029", -1), c_transmissionDurationAdd, 0.0, false);
    TransmissionWait(TransmissionLastSent(), 2.0);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(474), 5.0, -1, 10, true);
    Wait(4.0, c_timeReal);
    libNtve_gf_PauseUnit(lv_viking1, false);
    libNtve_gf_PauseUnit(lv_viking2, false);
    libNtve_gf_PauseUnit(lv_viking3, false);
    UnitIssueOrder(lv_viking1, Order(AbilityCommand("FighterMode", 0)), c_orderQueueReplace);
    UnitIssueOrder(lv_viking2, Order(AbilityCommand("FighterMode", 0)), c_orderQueueReplace);
    UnitIssueOrder(lv_viking3, Order(AbilityCommand("FighterMode", 0)), c_orderQueueReplace);
    Wait(2.0, c_timeReal);
    gv_introCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE954F54D_g;
    int autoE954F54D_u;
    unit autoE954F54D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_introCinematicCompleted == false)) {
        CinematicFade(false, 0.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
        autoE954F54D_g = UnitGroup("VikingAssault", gv_p01_USER, RegionCircle(PointFromId(33), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoE954F54D_u = UnitGroupCount(autoE954F54D_g, c_unitCountAll);
        for (;; autoE954F54D_u -= 1) {
            autoE954F54D_var = UnitGroupUnitFromEnd(autoE954F54D_g, autoE954F54D_u);
            if (autoE954F54D_var == null) { break; }
            libNtve_gf_PauseUnit(autoE954F54D_var, false);
            UnitIssueOrder(autoE954F54D_var, Order(AbilityCommand("FighterMode", 0)), c_orderQueueReplace);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto3255A815_g;
    int auto3255A815_u;
    unit auto3255A815_var;
    unitgroup autoE0A85E97_g;
    int autoE0A85E97_u;
    unit autoE0A85E97_var;

    // Variable Initialization
    lv_fadeDuration = 1.0;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(gv_virophagePingActor);
    libNtve_gf_KillModel(gv_broodLordPingActor1);
    libNtve_gf_KillModel(gv_broodLordPingActor2);
    auto3255A815_g = gv_introHiddenUnitGroup;
    auto3255A815_u = UnitGroupCount(auto3255A815_g, c_unitCountAll);
    for (;; auto3255A815_u -= 1) {
        auto3255A815_var = UnitGroupUnitFromEnd(auto3255A815_g, auto3255A815_u);
        if (auto3255A815_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto3255A815_var, true);
    }
    autoE0A85E97_g = gv_introSpawnedUnits;
    autoE0A85E97_u = UnitGroupCount(autoE0A85E97_g, c_unitCountAll);
    for (;; autoE0A85E97_u -= 1) {
        autoE0A85E97_var = UnitGroupUnitFromEnd(autoE0A85E97_g, autoE0A85E97_u);
        if (autoE0A85E97_var == null) { break; }
        UnitRemove(autoE0A85E97_var);
    }
    UnitPauseAll(false);
    GameTimeOfDayPause(false);
    CreepSetSpeed(c_creepSpeedDecay, 100.0);
    CameraApplyInfo(gv_p01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_p01_USER, RegionEntireMap(), false, false);
    VisRevealerCreate(gv_p01_USER, RegionFromId(9));
    gv_infestationRevealer[2] = VisRevealerLastCreated();
    TriggerExecute(gt_StartAI, true, false);
    RegionPlayableMapSet(RegionFromId(1));
    UnitGroupSelect(UnitGroup("VikingFighter", gv_p01_USER, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_p01_USER, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    if ((gv_introCinematicCompleted == false)) {
        libNtve_gf_SwooshCamera(gv_p01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(474)), lv_fadeDuration);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }

    TimerPause(gv_aberrationStartTimer, false);
    TimerPause(gv_eggData[ge_SpawnType_stInfestedColonist].lv_timer, false);
    TimerPause(gv_eggData[ge_SpawnType_stInfestedMarine].lv_timer, false);
    PlayerPauseAllCharges(gv_p01_USER, true);
    PlayerPauseAllCooldowns(gv_p01_USER, true);
    gv_inCinematic = false;
    TriggerExecute(gt_StartGame, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Feederling Mover
//--------------------------------------------------------------------------------------------------
bool gt_IntroFeederlingMover_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_feederling;
    unit lv_hut;

    // Automatic Variable Declarations
    const int autoF17949B3_n = 3;
    int autoF17949B3_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((gv_inCinematic == true)) {
            lv_feederling = UnitGroupRandomUnit(UnitGroup("Feederling", gv_p07_ZERG_INFESTED, gv_infestationRegion[2], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
            if ((lv_feederling != null) && (UnitOrder(lv_feederling, 0) == null)) {
                for (autoF17949B3_i = 1; autoF17949B3_i <= autoF17949B3_n; autoF17949B3_i += 1) {
                    lv_hut = UnitGroupRandomUnit(UnitGroup("InfestableHut", c_playerAny, gv_infestationRegion[2], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                    if ((lv_hut != null)) {
                        UnitIssueOrder(lv_feederling, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_hut)), c_orderQueueAddToEnd);
                        UnitIssueOrder(lv_feederling, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(gv_infestationRegion[2])), c_orderQueueAddToEnd);
                    }

                }
            }

            Wait(1.0, c_timeGame);
        }
        else {
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroFeederlingMover_Init () {
    gt_IntroFeederlingMover = TriggerCreate("gt_IntroFeederlingMover_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04Music_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_StartGame_Init();
    gt_InitialInfestation_Init();
    gt_InitWarningPings_Init();
    gt_GasPickups_Init();
    gt_InitInfestationData_Init();
    gt_InfestColoniesForever_Init();
    gt_InfestaColony_Init();
    gt_VirophageConstructionBegins_Init();
    gt_VirophageConstructionEnds_Init();
    gt_VirophageDies_Init();
    gt_ColonyCleansedQ_Init();
    gt_PlayAttackWarningQ_Init();
    gt_PlayInfestedWarningQ_Init();
    gt_InitEggData_Init();
    gt_EggSpawnerAberration_Init();
    gt_EggSpawnerInfestedMarine_Init();
    gt_EggSpawnerInfestedColonist_Init();
    gt_EggSpawnerGrow_Init();
    gt_EggSpawnerAberrationWarningQ_Init();
    gt_FeederlingSpawner_Init();
    gt_FeederlingMover_Init();
    gt_VirophageProjectileVomiting_Init();
    gt_InfestedBuildingDies_Init();
    gt_MoveColonists_Init();
    gt_ColonistLoad_Init();
    gt_ColonistUnload_Init();
    gt_ColonistWalkDontRun_Init();
    gt_BaseSouthHatcheryClearedQ_Init();
    gt_BaseNorthHatcheryClearedQ_Init();
    gt_BaseEastHatcheryClearedQ_Init();
    gt_TransmissionMissionStartQ_Init();
    gt_TransmissionHansonGoneWildQ_Init();
    gt_TransmissionAllOutpostsInfestedQ_Init();
    gt_StartAI_Init();
    gt_StartUpgradesH_Init();
    gt_StartUpgradesB_Init();
    gt_ZergAttackWavesP02P04P08_Init();
    gt_AIGiveMinerals_Init();
    gt_AIGiveGas_Init();
    gt_CarrionBirds_Init();
    gt_CarrionBirdFlysAway_Init();
    gt_VikingKillsofEnemyStructures_Init();
    gt_StatVirophagesKilled_Init();
    gt_VictoryInfestationCleansedCompleted_Init();
    gt_VictoryQ_Init();
    gt_Victory_Init();
    gt_DefeatBaseDead_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_VirophageTipQ_Init();
    gt_NewUnitVikingTipQ_Init();
    gt_ObjectiveDestroyInfestationCreateQ_Init();
    gt_ObjectiveDestroyInfestationUpdate_Init();
    gt_ObjectiveDestroyInfestationComplete_Init();
    gt_BriefingQ_Init();
    gt_BriefingScene00_Init();
    gt_Briefing00ProjectileVomiting_Init();
    gt_Briefing00RunLolaRun_Init();
    gt_Briefing00LikeCattletotheSlaughter_Init();
    gt_BriefingScene01_Init();
    gt_BriefingScene02_Init();
    gt_BriefingScene03_Init();
    gt_Briefing02Eggs_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroFeederlingMover_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
