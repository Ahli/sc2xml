//==================================================================================================
// 
// Generated Map Script
// 
// Name:   The Outlaws
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/CampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libCamp_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_DOMINION = 2;
const int gv_pLAYER_03_COLONISTS = 3;
const int gv_pLAYER_04_REBELS = 4;
const int gv_pLAYER_05_PATROL = 5;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_RECORD_DominionGuard {
    unit lv_unit;
    point lv_position;
    region lv_interestArea;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_PRESET_MineGuardsState_Inactive = 0;
const int ge_PRESET_MineGuardsState_Spawning = 1;
const int ge_PRESET_MineGuardsState_Active = 2;
const int ge_PRESET_MineGuardsState_Despawning = 3;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_inCinematic;
unitgroup gv_startingSCVs;
bool gv_initialOrderGiven;
unit gv_supplyDropship;
unit gv_supplySCV;
int gv_supplyHelperTXT;
unit gv_sCVDropship;
int gv_sCVCargoDrop;
unitgroup gv_sCVReinforcement;
int gv_sCVHelperTXT;
unitgroup gv_initialAttackSquad;
int gv_dominionAttackSquadSize;
unitgroup gv_marinesRescued;
unit gv_medicBarracks;
unit gv_rebelBeacon;
gs_RECORD_DominionGuard[32] gv_dominionGuards;
int gv_dominionGuardsSize;
unitgroup gv_hellions;
int gv_mineGuardPairs;
int gv_guardsKilled;
unitgroup gv_mineGuardGroup;
bool gv_mineGuardsDefeated;
int gv_mineGuardsState;
unit gv_marineTaunter;
bool gv_lowerAnimation;
revealer gv_artifactRevealer;
actor gv_commandCenterPing;
actor gv_barracksPing;
actor gv_geyserPing;
bool gv_sCVTrained;
bool gv_marineTrained;
bool gv_refineryButtonPressed;
timer gv_achievementHardTimer;
int gv_medicsTrained;
int gv_palletsCollected;
int gv_numberOfPallets;
bool gv_barracksBuilt;
int gv_objectiveDominionBase;
int gv_dominionBasePing;
int gv_objectiveRebels;
int gv_rebelPing;
bool gv_victoryCinematicCompleted;

void InitGlobals () {
    gv_startingSCVs = UnitGroupEmpty();
    gv_supplyHelperTXT = c_textTagNone;
    gv_sCVReinforcement = UnitGroupEmpty();
    gv_sCVHelperTXT = c_textTagNone;
    gv_initialAttackSquad = UnitGroupEmpty();
    gv_marinesRescued = UnitGroupEmpty();
    gv_hellions = UnitGroupEmpty();
    gv_mineGuardPairs = 4;
    gv_mineGuardGroup = UnitGroupEmpty();
    gv_mineGuardsState = ge_PRESET_MineGuardsState_Inactive;
    gv_lowerAnimation = true;
    gv_achievementHardTimer = TimerCreate();
    gv_objectiveDominionBase = c_invalidObjectiveId;
    gv_dominionBasePing = c_invalidPingId;
    gv_objectiveRebels = c_invalidObjectiveId;
    gv_rebelPing = c_invalidPingId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_CreateInfoText (unit lp_chosenUnit);
void gf_AddDominionGuard (unit lp_unit, region lp_region);
void gf_SetAttackWaveParameters ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04Music;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_IntroSequence;
trigger gt_StartGame;
trigger gt_InitialOrderGiven;
trigger gt_TutorialReviewQ;
trigger gt_BuildMarinesandSCVsQ;
trigger gt_ProdQ;
trigger gt_SupplySafetyQ;
trigger gt_SupplySafetyCreateDrop;
trigger gt_SupplySafetyTXT;
trigger gt_SupplySafetyTXTkiller;
trigger gt_DropshipRemover;
trigger gt_SCVSafetySpawnQ;
trigger gt_SCVSafetyCreateDrop;
trigger gt_SCVSafetyTXT;
trigger gt_SCVSafetyTXTkiller;
trigger gt_SCVCargoUnload;
trigger gt_SupplyDepotLoweredRaised;
trigger gt_SupplyDepotBuilt;
trigger gt_BarracksBuilt;
trigger gt_SCVTrained;
trigger gt_MedicTrained;
trigger gt_BuildRefineryButtonPressed;
trigger gt_BuildSCVButtonPressed;
trigger gt_BuildMarineButtonPressed;
trigger gt_DominionAttackerSquads;
trigger gt_MedicEnergy;
trigger gt_RebelsTriggeredProximity;
trigger gt_RebelsTriggeredMarineCount;
trigger gt_RebelsTriggeredQ;
trigger gt_RebelsCompleteQ;
trigger gt_RebelsDestroyed;
trigger gt_RebelsRescuedQ;
trigger gt_Colonist1Q;
trigger gt_Colonist2Q;
trigger gt_Colonist3Q;
trigger gt_Colonist4Q;
trigger gt_Colonist5Q;
trigger gt_Colonist6Q;
trigger gt_Colonist7Q;
trigger gt_DominonGuardsInitialization;
trigger gt_DominionGuards1;
trigger gt_DominionGuards2;
trigger gt_HellionAttack;
trigger gt_HellionQ;
trigger gt_MineGuardsActivate;
trigger gt_MineGuardsLoop;
trigger gt_MineGuardsDefeated;
trigger gt_Despawning;
trigger gt_MarineTauntQ;
trigger gt_BunkerDeathQ;
trigger gt_BarracksFactoryQ;
trigger gt_ArtifactReveal;
trigger gt_RockMiners;
trigger gt_MinerLeft;
trigger gt_MinerTop;
trigger gt_MinerRight;
trigger gt_MinerDespawn;
trigger gt_StartAI;
trigger gt_StartUpgradesH;
trigger gt_StartUpgradesI;
trigger gt_DominionAttackWaves;
trigger gt_DominionRebelResponseWave;
trigger gt_AttackWaveDivert;
trigger gt_AIMinerals;
trigger gt_AIGas;
trigger gt_AICrippled;
trigger gt_CampaignTipsQ;
trigger gt_TipTutorialVideosQ;
trigger gt_SCVTipQ;
trigger gt_VespeneGasTipQ;
trigger gt_TechLabTipQ;
trigger gt_MedicTipQ;
trigger gt_ResourceCachesTipQ;
trigger gt_SupplyTipQ;
trigger gt_StatMedicTrained;
trigger gt_StatBarracksBuilt;
trigger gt_ResourcePalletPickups;
trigger gt_DefeatBaseDead;
trigger gt_VictoryDominionOutpostCompleted;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_ObjectiveDestroytheDominionBaseCreate;
trigger gt_ObjectiveDestroytheDominionBaseDiscoverQ;
trigger gt_ObjectiveDestroytheDominionBaseComplete;
trigger gt_ObjectiveRebelsCreate;
trigger gt_ObjectiveRebelsDiscover;
trigger gt_ObjectiveRebelsComplete;
trigger gt_ObjectiveRebelsFailed;
trigger gt_BriefingQ;
trigger gt_BriefingScene00;
trigger gt_BriefingScene01;
trigger gt_BriefingScene02;
trigger gt_LowerCrane;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_RaiseCrane;
trigger gt_VictoryMarinePatrol;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_CreateInfoText (unit lp_chosenUnit) {
    // Automatic Variable Declarations
    string auto08BE992F_val;

    // Implementation
    auto08BE992F_val = UnitGetType(lp_chosenUnit);
    if (auto08BE992F_val == "CommandCenter") {
        UnitSetInfoText(lp_chosenUnit, StringExternal("Param/Value/E64A5DCD"), StringExternal("Param/Value/5F57FEAF"), StringExternal("Param/Value/8BC6DA5C"));
        UnitSetState(lp_chosenUnit, c_unitStateTooltipable, true);
    }
    else if (auto08BE992F_val == "Barracks") {
        UnitSetInfoText(lp_chosenUnit, StringExternal("Param/Value/082D660C"), StringExternal("Param/Value/3DED6760"), StringExternal("Param/Value/315FAFA9"));
        UnitSetState(lp_chosenUnit, c_unitStateTooltipable, true);
    }
    else if (auto08BE992F_val == "SupplyDepot") {
        UnitSetInfoText(lp_chosenUnit, StringExternal("Param/Value/4FEBF75F"), StringExternal("Param/Value/67C1B22E"), StringExternal("Param/Value/C9F1F8E6"));
        UnitSetState(lp_chosenUnit, c_unitStateTooltipable, true);
    }
    else if (auto08BE992F_val == "SupplyDepotLowered") {
        UnitSetInfoText(lp_chosenUnit, StringExternal("Param/Value/7AD4780A"), StringExternal("Param/Value/B469D2B4"), StringExternal("Param/Value/436ADBC9"));
        UnitSetState(lp_chosenUnit, c_unitStateTooltipable, true);
    }
    else if (auto08BE992F_val == "SCV") {
        UnitSetInfoText(lp_chosenUnit, StringToText(""), StringExternal("Param/Value/A3A30B03"), StringToText(""));
        UnitSetState(lp_chosenUnit, c_unitStateTooltipable, true);
    }
    else if (auto08BE992F_val == "Medic") {
        UnitSetInfoText(lp_chosenUnit, StringToText(""), StringExternal("Param/Value/D2FCCA4E"), StringToText(""));
        UnitSetState(lp_chosenUnit, c_unitStateTooltipable, true);
    }
    else if (auto08BE992F_val == "MineralField") {
        UnitSetInfoText(lp_chosenUnit, StringToText(""), StringExternal("Param/Value/D2CA8D27"), StringExternal("Param/Value/EBDA9E89"));
        UnitSetState(lp_chosenUnit, c_unitStateTooltipable, true);
    }
    else if (auto08BE992F_val == "VespeneGeyser") {
        UnitSetInfoText(lp_chosenUnit, StringToText(""), StringExternal("Param/Value/0C325DA5"), StringExternal("Param/Value/29F1550E"));
        UnitSetState(lp_chosenUnit, c_unitStateTooltipable, true);
    }
    else if (auto08BE992F_val == "Beacon_Terran") {
        if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
            UnitSetInfoText(lp_chosenUnit, StringExternal("Param/Value/6C1DC930"), StringExternal("Param/Value/E355EE50"), StringToText(""));
            UnitSetState(lp_chosenUnit, c_unitStateTooltipable, true);
        }
        else {
            UnitSetInfoText(lp_chosenUnit, StringExternal("Param/Value/0DC99D36"), StringToText(""), StringToText(""));
        }
    }
    else if (auto08BE992F_val == "PalletMinerals") {
        if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
            UnitSetInfoText(lp_chosenUnit, StringExternal("Param/Value/29FB49B3"), StringExternal("Param/Value/A4D579C0"), StringExternal("Param/Value/B796C5DF"));
            UnitSetState(lp_chosenUnit, c_unitStateTooltipable, true);
        }
        else {
            UnitSetInfoText(lp_chosenUnit, StringExternal("Param/Value/5D83C509"), StringToText(""), StringToText(""));
        }
    }
    else if (auto08BE992F_val == "PalletGas") {
        if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
            UnitSetInfoText(lp_chosenUnit, StringExternal("Param/Value/A089141C"), StringExternal("Param/Value/C9C6EF31"), StringExternal("Param/Value/E20B6E76"));
            UnitSetState(lp_chosenUnit, c_unitStateTooltipable, true);
        }
        else {
            UnitSetInfoText(lp_chosenUnit, StringExternal("Param/Value/7EC9B6E6"), StringToText(""), StringToText(""));
        }
    }
    else {
        UnitClearInfoText(lp_chosenUnit);
    }
}

void gf_AddDominionGuard (unit lp_unit, region lp_region) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitIsAlive(lp_unit) == true)) {
        gv_dominionGuardsSize += 1;
        gv_dominionGuards[gv_dominionGuardsSize].lv_unit = lp_unit;
        gv_dominionGuards[gv_dominionGuardsSize].lv_position = UnitGetPosition(lp_unit);
        gv_dominionGuards[gv_dominionGuardsSize].lv_interestArea = lp_region;
    }

}

void gf_SetAttackWaveParameters () {
    // Automatic Variable Declarations
    // Implementation
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION, PointFromId(292));
    if ((UnitIsAlive(gv_medicBarracks) == true) && (UnitGetOwner(gv_medicBarracks) == gv_pLAYER_01_USER)) {
        AIAttackWaveSetTargetPoint(gv_pLAYER_02_DOMINION, UnitGetPosition(gv_medicBarracks));
    }
    else {
        AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION, PlayerGroupSingle(gv_pLAYER_01_USER));
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_LoadCampaignData(libCamp_ge_MapID_MapTRaynor02);
    TriggerExecute(gt_Init01Technology, true, true);
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04Music, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    libCamp_gf_RegisterFootageRecording(gt_BriefingQ);
    libCamp_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_IntroSequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeUnitAllow(gv_pLAYER_01_USER, "BarracksTechLab", true);
    libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupInfantryMedic, gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_03_COLONISTS, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_04_REBELS, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_05_PATROL, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_03_COLONISTS, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_04_REBELS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_05_PATROL, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_03_COLONISTS, gv_pLAYER_04_REBELS, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_03_COLONISTS, gv_pLAYER_05_PATROL, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_04_REBELS, gv_pLAYER_05_PATROL, libNtve_ge_AllianceSetting_Enemy);
    PlayerSetAlliance(gv_pLAYER_03_COLONISTS, c_allianceIdPushable, gv_pLAYER_01_USER, true);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, libNtve_gf_DifficultyValueInt(200, 100, 100, 100));
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_04_REBELS, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_04_REBELS, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerSetState(gv_pLAYER_03_COLONISTS, c_playerStateShowScore, false);
    PlayerSetState(gv_pLAYER_04_REBELS, c_playerStateShowScore, false);
    PlayerSetState(gv_pLAYER_05_PATROL, c_playerStateShowScore, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoFACADB5B_g;
    int autoFACADB5B_u;
    unit autoFACADB5B_var;
    unitgroup autoCEAD8C02_g;
    int autoCEAD8C02_u;
    unit autoCEAD8C02_var;
    unitgroup autoD19A181C_g;
    int autoD19A181C_u;
    unit autoD19A181C_var;
    unitgroup auto988F4D7E_g;
    int auto988F4D7E_u;
    unit auto988F4D7E_var;
    unitgroup auto59E0B449_g;
    int auto59E0B449_u;
    unit auto59E0B449_var;
    unitgroup auto44256831_g;
    int auto44256831_u;
    unit auto44256831_var;
    unitgroup autoA7EFA5E5_g;
    int autoA7EFA5E5_u;
    unit autoA7EFA5E5_var;
    unitgroup auto30107B53_g;
    int auto30107B53_u;
    unit auto30107B53_var;
    unitgroup autoBFB6B86A_g;
    int autoBFB6B86A_u;
    unit autoBFB6B86A_var;
    unitgroup autoE63642CF_g;
    int autoE63642CF_u;
    unit autoE63642CF_var;
    unitgroup auto4A3A6DF3_g;
    int auto4A3A6DF3_u;
    unit auto4A3A6DF3_var;
    unitgroup auto15C5507B_g;
    int auto15C5507B_u;
    unit auto15C5507B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoFACADB5B_g = UnitGroup("SCV", gv_pLAYER_01_USER, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFACADB5B_u = UnitGroupCount(autoFACADB5B_g, c_unitCountAll);
    for (;; autoFACADB5B_u -= 1) {
        autoFACADB5B_var = UnitGroupUnitFromEnd(autoFACADB5B_g, autoFACADB5B_u);
        if (autoFACADB5B_var == null) { break; }
        UnitGroupAdd(gv_startingSCVs, autoFACADB5B_var);
    }
    gf_CreateInfoText(UnitFromId(606));
    if ((libNtve_gf_DifficultyValueInt(1, 0, 0, 0) == 1)) {
        gf_CreateInfoText(UnitFromId(18));
        gf_CreateInfoText(UnitFromId(106));
        gf_CreateInfoText(UnitFromId(149));
        gf_CreateInfoText(UnitFromId(1024));
        gf_CreateInfoText(UnitFromId(90));
        gf_CreateInfoText(UnitFromId(591));
        gf_CreateInfoText(UnitFromId(28));
        autoCEAD8C02_g = gv_startingSCVs;
        autoCEAD8C02_u = UnitGroupCount(autoCEAD8C02_g, c_unitCountAll);
        for (;; autoCEAD8C02_u -= 1) {
            autoCEAD8C02_var = UnitGroupUnitFromEnd(autoCEAD8C02_g, autoCEAD8C02_u);
            if (autoCEAD8C02_var == null) { break; }
            gf_CreateInfoText(autoCEAD8C02_var);
        }
        autoD19A181C_g = UnitGroup("MineralField", 0, RegionFromId(30), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoD19A181C_u = UnitGroupCount(autoD19A181C_g, c_unitCountAll);
        for (;; autoD19A181C_u -= 1) {
            autoD19A181C_var = UnitGroupUnitFromEnd(autoD19A181C_g, autoD19A181C_u);
            if (autoD19A181C_var == null) { break; }
            gf_CreateInfoText(autoD19A181C_var);
        }
        auto988F4D7E_g = UnitGroup("Medic", gv_pLAYER_04_REBELS, RegionFromId(25), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto988F4D7E_u = UnitGroupCount(auto988F4D7E_g, c_unitCountAll);
        for (;; auto988F4D7E_u -= 1) {
            auto988F4D7E_var = UnitGroupUnitFromEnd(auto988F4D7E_g, auto988F4D7E_u);
            if (auto988F4D7E_var == null) { break; }
            gf_CreateInfoText(auto988F4D7E_var);
        }
    }

    auto59E0B449_g = UnitGroup("PalletMinerals", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto59E0B449_u = UnitGroupCount(auto59E0B449_g, c_unitCountAll);
    for (;; auto59E0B449_u -= 1) {
        auto59E0B449_var = UnitGroupUnitFromEnd(auto59E0B449_g, auto59E0B449_u);
        if (auto59E0B449_var == null) { break; }
        gv_numberOfPallets += 1;
        gf_CreateInfoText(auto59E0B449_var);
    }
    auto44256831_g = UnitGroup("PalletGas", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto44256831_u = UnitGroupCount(auto44256831_g, c_unitCountAll);
    for (;; auto44256831_u -= 1) {
        auto44256831_var = UnitGroupUnitFromEnd(auto44256831_g, auto44256831_u);
        if (auto44256831_var == null) { break; }
        gv_numberOfPallets += 1;
        gf_CreateInfoText(auto44256831_var);
    }
    TriggerExecute(gt_DominonGuardsInitialization, true, false);
    gv_initialAttackSquad = UnitGroup("Marine", gv_pLAYER_05_PATROL, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_dominionAttackSquadSize = UnitGroupCount(gv_initialAttackSquad, c_unitCountAlive);
    autoA7EFA5E5_g = UnitGroup("Hut", gv_pLAYER_03_COLONISTS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA7EFA5E5_u = UnitGroupCount(autoA7EFA5E5_g, c_unitCountAll);
    for (;; autoA7EFA5E5_u -= 1) {
        autoA7EFA5E5_var = UnitGroupUnitFromEnd(autoA7EFA5E5_g, autoA7EFA5E5_u);
        if (autoA7EFA5E5_var == null) { break; }
        UnitSetState(autoA7EFA5E5_var, c_unitStateTargetable, false);
    }
    auto30107B53_g = UnitGroup("TerranBuggy", gv_pLAYER_03_COLONISTS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto30107B53_u = UnitGroupCount(auto30107B53_g, c_unitCountAll);
    for (;; auto30107B53_u -= 1) {
        auto30107B53_var = UnitGroupUnitFromEnd(auto30107B53_g, auto30107B53_u);
        if (auto30107B53_var == null) { break; }
        UnitSetState(auto30107B53_var, c_unitStateTargetable, false);
    }
    autoBFB6B86A_g = UnitGroup("MinerMale", gv_pLAYER_03_COLONISTS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBFB6B86A_u = UnitGroupCount(autoBFB6B86A_g, c_unitCountAll);
    for (;; autoBFB6B86A_u -= 1) {
        autoBFB6B86A_var = UnitGroupUnitFromEnd(autoBFB6B86A_g, autoBFB6B86A_u);
        if (autoBFB6B86A_var == null) { break; }
        UnitSetState(autoBFB6B86A_var, c_unitStateTargetable, false);
    }
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(1314)), c_animNameDefault, "Stand Work 02", c_animFlagPlayForever, c_animTimeDefault);
    UnitSetState(UnitFromId(227), c_unitStateFidget, false);
    libNtve_gf_PauseUnit(UnitFromId(227), true);
    UnitSetState(UnitFromId(1314), c_unitStateFidget, false);
    libNtve_gf_PauseUnit(UnitFromId(1314), true);
    gv_rebelBeacon = UnitFromId(606);
    gv_medicBarracks = UnitFromId(149);
    TriggerExecute(gt_MedicEnergy, true, false);
    UnitIssueOrder(UnitFromId(1187), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1188), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1189), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1190), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(18), "TRaynor02Crane", c_animNameDefault, "Stand 02", c_animFlagPlayForever, c_animTimeDefault);
    TriggerExecute(gt_RockMiners, true, false);
    TriggerExecute(gt_MinerLeft, true, false);
    TriggerExecute(gt_MinerTop, true, false);
    TriggerExecute(gt_MinerRight, true, false);
    UnitGroupAdd(gv_hellions, UnitFromId(430));
    UnitGroupAdd(gv_hellions, UnitFromId(87));
    UnitGroupAdd(gv_hellions, UnitFromId(367));
    UnitGroupAdd(gv_hellions, UnitFromId(431));
    autoE63642CF_g = UnitGroup("Marine", gv_pLAYER_02_DOMINION, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE63642CF_u = UnitGroupCount(autoE63642CF_g, c_unitCountAll);
    for (;; autoE63642CF_u -= 1) {
        autoE63642CF_var = UnitGroupUnitFromEnd(autoE63642CF_g, autoE63642CF_u);
        if (autoE63642CF_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(autoE63642CF_var, "StatusSet MarinePortrait 7");
    }
    auto4A3A6DF3_g = UnitGroup("Marine", gv_pLAYER_05_PATROL, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4A3A6DF3_u = UnitGroupCount(auto4A3A6DF3_g, c_unitCountAll);
    for (;; auto4A3A6DF3_u -= 1) {
        auto4A3A6DF3_var = UnitGroupUnitFromEnd(auto4A3A6DF3_g, auto4A3A6DF3_u);
        if (auto4A3A6DF3_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto4A3A6DF3_var, "StatusSet MarinePortrait 7");
    }
    auto15C5507B_g = UnitGroup("Marine", gv_pLAYER_04_REBELS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto15C5507B_u = UnitGroupCount(auto15C5507B_g, c_unitCountAll);
    for (;; auto15C5507B_u -= 1) {
        auto15C5507B_var = UnitGroupUnitFromEnd(auto15C5507B_g, auto15C5507B_u);
        if (auto15C5507B_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto15C5507B_var, "StatusSet MarinePortrait 21");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init04Music_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TRaynor02MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Music_Init () {
    gt_Init04Music = TriggerCreate("gt_Init04Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetBackground(c_backgroundFixed, null, 100.0);
    GameTimeOfDaySet("08:00:00");
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "TRaynor02MineLift", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(19));
    gv_artifactRevealer = VisRevealerLastCreated();
    VisRevealerEnable(gv_artifactRevealer, false);
    libLbty_gf_AutoRevealRegion(RegionFromId(2), RegionFromId(2), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(11), RegionFromId(12), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(21), RegionFromId(21), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(28), RegionFromId(28), gv_pLAYER_01_USER);
    if ((libNtve_gf_DifficultyValueInt(1, 0, 0, 0) == 1)) {
        libLbty_gf_AutoRevealRegion(RegionFromId(8), RegionFromId(8), gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto3687E612_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto3687E612_val = PlayerDifficulty(gv_pLAYER_01_USER);
    if (auto3687E612_val == 1) {
        PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_pLAYER_05_PATROL, c_playerPropHandicap, c_playerPropOperSetTo, 50);
    }
    else if (auto3687E612_val == 2) {
    }
    else if (auto3687E612_val == 3) {
        AISetDifficulty(gv_pLAYER_02_DOMINION, c_diffRepairDamage, true);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "TerranInfantryArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "TerranVehicleArmorsLevel1", 1);
        TriggerEnable(gt_AICrippled, false);
    }
    else if (auto3687E612_val == 4) {
        AISetDifficulty(gv_pLAYER_02_DOMINION, c_diffRepairDamage, true);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "TerranInfantryArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "TerranInfantryWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "TerranVehicleArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "TerranVehicleWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_05_PATROL, "TerranVehicleArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_05_PATROL, "TerranVehicleWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "NeosteelFrame", 1);
        TriggerEnable(gt_AICrippled, false);
    }
    else {
    }
    gv_mineGuardPairs = libNtve_gf_DifficultyValueInt(0, 0, 1, 2);
    UnitCargoCreate(UnitFromId(5), "Marine", libNtve_gf_DifficultyValueInt(2, 3, 4, 6));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_CreateCampaignTutorial(StringExternal("Param/Value/AA5B6118"), StringExternal("Param/Value/A9CFF182"), "Assets\\Textures\\btn-unit-terran-marine.dds", "Assets\\Textures\\video_tutorial_terran_unit_production.ogv");
    libCamp_gf_CreateCampaignTutorial(StringExternal("Param/Value/7CBDAD7D"), StringExternal("Param/Value/1489A356"), "Assets\\Textures\\icon-mineral-terran.dds", "Assets\\Textures\\video_tutorial_resource_collection.ogv");
    libCamp_gf_CreateCampaignTutorial(StringExternal("Param/Value/F5878C5F"), StringExternal("Param/Value/459758FC"), "Assets\\Textures\\icon-supply-terran.dds", "Assets\\Textures\\video_tutorial_terran_supply.ogv");
    libCamp_gf_CreateCampaignTutorial(StringExternal("Param/Value/09D741B1"), StringExternal("Param/Value/B32015BB"), "Assets\\Textures\\btn-building-terran-commandcenter.dds", "Assets\\Textures\\video_tutorial_terran_base_construction.ogv");
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SCV", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Marine", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Medic", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Hellion", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Bunker", false, gv_pLAYER_01_USER);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("WarPig", false, gv_pLAYER_01_USER);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 0) == 1)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("DevilDog", false, gv_pLAYER_01_USER);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("SiegeTank", false, gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Sequence
//--------------------------------------------------------------------------------------------------
bool gt_IntroSequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_StartUpgradesH, true, false);
    TriggerExecute(gt_StartUpgradesI, true, false);
    Wait(0.1, c_timeReal);
    UnitSelect(UnitGroupUnit(UnitGroup("CommandCenter", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), gv_pLAYER_01_USER, true);
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringToText(""), null, UnitFromId(18));
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(23), true, false);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(1117)), 1.5);
    CinematicFade(true, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_StartGame, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSequence_Init () {
    gt_IntroSequence = TriggerCreate("gt_IntroSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game
//--------------------------------------------------------------------------------------------------
bool gt_StartGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        TimerStart(gv_achievementHardTimer, 600.0, false, c_timeAI);
    }

    Wait(2.0, c_timeGame);
    TriggerExecute(gt_ObjectiveDestroytheDominionBaseDiscoverQ, true, true);
    Wait(3.0, c_timeGame);
    TriggerExecute(gt_TutorialReviewQ, true, true);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_BuildMarinesandSCVsQ, true, true);
    TriggerExecute(gt_MedicTipQ, true, false);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_SCVTipQ, true, true);
    TriggerExecute(gt_CampaignTipsQ, true, false);
    Wait(60.0, c_timeReal);
    TriggerExecute(gt_VespeneGasTipQ, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGame_Init () {
    gt_StartGame = TriggerCreate("gt_StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initial Order Given
//--------------------------------------------------------------------------------------------------
bool gt_InitialOrderGiven_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_initialOrderGiven = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitialOrderGiven_Init () {
    gt_InitialOrderGiven = TriggerCreate("gt_InitialOrderGiven_Func");
    TriggerAddEventUnitOrder(gt_InitialOrderGiven, null, AbilityCommand("move", 0));
    TriggerAddEventUnitOrder(gt_InitialOrderGiven, null, AbilityCommand("attack", 0));
    TriggerAddEventUnitOrder(gt_InitialOrderGiven, null, AbilityCommand("BarracksTrain", 0));
    TriggerAddEventUnitOrder(gt_InitialOrderGiven, null, AbilityCommand("CommandCenterTrain", 0));
    TriggerAddEventUnitOrder(gt_InitialOrderGiven, null, AbilityCommand("SCVHarvest", 0));
    TriggerAddEventUnitOrder(gt_InitialOrderGiven, null, AbilityCommand("TerranBuild", 3));
    TriggerAddEventUnitOrder(gt_InitialOrderGiven, null, AbilityCommand("TerranBuild", 2));
    TriggerAddEventUnitOrder(gt_InitialOrderGiven, null, AbilityCommand("TerranBuild", 1));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tutorial Review Q
//--------------------------------------------------------------------------------------------------
bool gt_TutorialReviewQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if (((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1))) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TRaynor02Adjutant00001", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor02Adjutant00001", 0), c_transmissionDurationAdd, 1.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        if ((gv_initialOrderGiven == false)) {
            Wait(0.3, c_timeGame);
            SoundPlay(SoundLink("UI_Starmap_Popup", 2), PlayerGroupAll(), 100.0, 0.0);
            HelpPanelDisplayPage(PlayerGroupAll(), c_helpPanelPageTutorials);
            Wait(0.3, c_timeGame);
        }
        else {
            TriggerExecute(gt_TipTutorialVideosQ, true, false);
        }
    }
    else {
        TriggerExecute(gt_TipTutorialVideosQ, true, false);
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TutorialReviewQ_Init () {
    gt_TutorialReviewQ = TriggerCreate("gt_TutorialReviewQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Build Marines and SCVs Q
//--------------------------------------------------------------------------------------------------
bool gt_BuildMarinesandSCVsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TRaynor02Raynor00003", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor02Raynor00003", 0), c_transmissionDurationAdd, 0.0, true);
    if ((gv_marineTrained == false)) {
        if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
            libNtve_gf_AttachModelToUnit(UnitFromId(106), "BriefingUnitSelectLarge", "Ref_Target");
            gv_barracksPing = libNtve_gf_ActorLastCreated();
        }

        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("BarracksTrain", 0), true);
    }

    // Transmission - SoundLink("TRaynor02Raynor00037", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor02Raynor00037", 0), c_transmissionDurationAdd, 0.0, true);
    if ((gv_sCVTrained == false)) {
        if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
            libNtve_gf_AttachModelToUnit(UnitFromId(18), "BriefingUnitSelectLarge", "Ref_Target");
            gv_commandCenterPing = libNtve_gf_ActorLastCreated();
        }

        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("CommandCenterTrain", 0), true);
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuildMarinesandSCVsQ_Init () {
    gt_BuildMarinesandSCVsQ = TriggerCreate("gt_BuildMarinesandSCVsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prod Q
//--------------------------------------------------------------------------------------------------
bool gt_ProdQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(gt_HellionQ) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesUsed) >= 55))) {
            return false;
        }

        if (!((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson02Raynor00029", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Raynor00029", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProdQ_Init () {
    gt_ProdQ = TriggerCreate("gt_ProdQ_Func");
    TriggerAddEventPlayerPropChange(gt_ProdQ, gv_pLAYER_01_USER, c_playerPropSuppliesUsed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supply Safety Q
//--------------------------------------------------------------------------------------------------
bool gt_SupplySafetyQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesUsed) >= PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesMade)))) {
            return false;
        }

        if (!((((TechTreeUnitCount(gv_pLAYER_01_USER, "SupplyDepot", c_techCountQueuedOrBetter) <= 0) && (TechTreeUnitCount(gv_pLAYER_01_USER, "SupplyDepotLowered", c_techCountQueuedOrBetter) <= 1)) || ((TechTreeUnitCount(gv_pLAYER_01_USER, "SupplyDepot", c_techCountQueuedOrBetter) <= 1) && (TechTreeUnitCount(gv_pLAYER_01_USER, "SupplyDepotLowered", c_techCountQueuedOrBetter) <= 0))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(60.0, c_timeGame);
    if ((PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesUsed) == PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesMade)) && (((TechTreeUnitCount(gv_pLAYER_01_USER, "SupplyDepot", c_techCountQueuedOrBetter) <= 0) && (TechTreeUnitCount(gv_pLAYER_01_USER, "SupplyDepotLowered", c_techCountQueuedOrBetter) <= 1)) || ((TechTreeUnitCount(gv_pLAYER_01_USER, "SupplyDepot", c_techCountQueuedOrBetter) <= 1) && (TechTreeUnitCount(gv_pLAYER_01_USER, "SupplyDepotLowered", c_techCountQueuedOrBetter) <= 0)))) {
        TriggerExecute(gt_SupplySafetyCreateDrop, true, false);
        TriggerEnable(gt_SupplySafetyTXT, true);
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TutorialAdjutant00028", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TutorialAdjutant00028", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SupplySafetyQ_Init () {
    gt_SupplySafetyQ = TriggerCreate("gt_SupplySafetyQ_Func");
    TriggerAddEventPlayerPropChange(gt_SupplySafetyQ, gv_pLAYER_01_USER, c_playerPropSuppliesUsed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supply Safety - Create Drop
//--------------------------------------------------------------------------------------------------
bool gt_SupplySafetyCreateDrop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "SpecialOpsDropship", 0, gv_pLAYER_01_USER, PointFromId(472));
    gv_supplyDropship = UnitLastCreated();
    UnitSetState(gv_supplyDropship, c_unitStateSelectable, false);
    UnitSetState(gv_supplyDropship, c_unitStateTargetable, false);
    UnitSetState(gv_supplyDropship, c_unitStateUsingSupply, false);
    UnitCargoCreate(gv_supplyDropship, "SCV", 1);
    gv_supplySCV = UnitCargoLastCreated();
    gf_CreateInfoText(UnitCargoLastCreated());
    UnitIssueOrder(gv_supplyDropship, OrderTargetingPoint(AbilityCommand("SpecOpsDropshipTransport", 2), PointFromId(32)), c_orderQueueReplace);
    UnitIssueOrder(gv_supplyDropship, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(31))), c_orderQueueAddToEnd);
    TriggerEnable(gt_SupplySafetyTXT, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SupplySafetyCreateDrop_Init () {
    gt_SupplySafetyCreateDrop = TriggerCreate("gt_SupplySafetyCreateDrop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supply Safety - TXT
//--------------------------------------------------------------------------------------------------
bool gt_SupplySafetyTXT_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((EventUnit() == gv_supplyDropship))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TextTagCreate(StringExternal("Param/Value/4E851134"), 18, PointFromId(32), 1.0, false, false, PlayerGroupAll());
    gv_supplyHelperTXT = TextTagLastCreated();
    TextTagSetBackgroundImage(TextTagLastCreated(), "Assets\\Textures\\ui_mission_frame_massege.dds", true);
    TextTagSetBackgroundBorderSize(TextTagLastCreated(), 1.0, 1.0);
    TextTagShowBackground(TextTagLastCreated(), true);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, c_textTagTimePermanent);
    TextTagAttachToUnit(gv_supplyHelperTXT, gv_supplySCV, 1.0);
    TextTagShow(gv_supplyHelperTXT, PlayerGroupAll(), true);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("TerranBuild", 1), true);
    TriggerEnable(gt_SupplySafetyTXTkiller, true);
    TriggerEnable(gt_DropshipRemover, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SupplySafetyTXT_Init () {
    gt_SupplySafetyTXT = TriggerCreate("gt_SupplySafetyTXT_Func");
    TriggerEnable(gt_SupplySafetyTXT, false);
    TriggerAddEventUnitCargo(gt_SupplySafetyTXT, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supply Safety - TXT killer
//--------------------------------------------------------------------------------------------------
bool gt_SupplySafetyTXTkiller_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SCV"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TextTagDestroy(gv_supplyHelperTXT);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("TerranBuild", 1), false);
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1)) {
        UnitSetState(EventUnit(), c_unitStateTooltipable, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SupplySafetyTXTkiller_Init () {
    gt_SupplySafetyTXTkiller = TriggerCreate("gt_SupplySafetyTXTkiller_Func");
    TriggerEnable(gt_SupplySafetyTXTkiller, false);
    TriggerAddEventUnitOrder(gt_SupplySafetyTXTkiller, null, AbilityCommand("TerranBuild", 1));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dropship Remover
//--------------------------------------------------------------------------------------------------
bool gt_DropshipRemover_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SpecialOpsDropship"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DropshipRemover_Init () {
    gt_DropshipRemover = TriggerCreate("gt_DropshipRemover_Func");
    TriggerEnable(gt_DropshipRemover, false);
    TriggerAddEventUnitRegion(gt_DropshipRemover, null, RegionFromId(31), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCV Safety - Spawn Q
//--------------------------------------------------------------------------------------------------
bool gt_SCVSafetySpawnQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TechTreeUnitCount(gv_pLAYER_01_USER, "SCV", c_techCountQueuedOrBetter) <= 3))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals) < 50))) {
            return false;
        }

        if (!(((PlayerDifficulty(gv_pLAYER_01_USER) == 1) || (PlayerDifficulty(gv_pLAYER_01_USER) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_SCVSafetyTXT, true);
    TriggerEnable(gt_SCVCargoUnload, true);
    TriggerExecute(gt_SCVSafetyCreateDrop, true, false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh01Raynor00017", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh01Raynor00017", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SCVSafetySpawnQ_Init () {
    gt_SCVSafetySpawnQ = TriggerCreate("gt_SCVSafetySpawnQ_Func");
    TriggerAddEventTimePeriodic(gt_SCVSafetySpawnQ, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCV Safety - Create Drop
//--------------------------------------------------------------------------------------------------
bool gt_SCVSafetyCreateDrop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "SpecialOpsDropship", 0, gv_pLAYER_01_USER, PointFromId(472));
    gv_sCVDropship = UnitLastCreated();
    UnitSetState(gv_sCVDropship, c_unitStateSelectable, false);
    UnitSetState(gv_sCVDropship, c_unitStateTargetable, false);
    UnitSetState(gv_sCVDropship, c_unitStateUsingSupply, false);
    UnitCargoCreate(gv_sCVDropship, "SCV", 8);
    gv_sCVReinforcement = UnitCargoLastCreatedGroup();
    UnitIssueOrder(gv_sCVDropship, OrderTargetingPoint(AbilityCommand("SpecOpsDropshipTransport", 2), PointFromId(688)), c_orderQueueReplace);
    UnitIssueOrder(gv_sCVDropship, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(31))), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SCVSafetyCreateDrop_Init () {
    gt_SCVSafetyCreateDrop = TriggerCreate("gt_SCVSafetyCreateDrop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCV Safety - TXT
//--------------------------------------------------------------------------------------------------
bool gt_SCVSafetyTXT_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((EventUnit() == gv_sCVDropship))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TextTagCreate(StringExternal("Param/Value/A0322401"), 18, PointFromId(688), 1.0, true, false, PlayerGroupAll());
    TextTagSetBackgroundImage(TextTagLastCreated(), "Assets\\Textures\\ui_mission_frame_massege.dds", true);
    TextTagSetBackgroundBorderSize(TextTagLastCreated(), 1.0, 1.0);
    TextTagShowBackground(TextTagLastCreated(), true);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, c_textTagTimePermanent);
    gv_sCVHelperTXT = TextTagLastCreated();
    TriggerEnable(gt_SCVSafetyTXTkiller, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SCVSafetyTXT_Init () {
    gt_SCVSafetyTXT = TriggerCreate("gt_SCVSafetyTXT_Func");
    TriggerEnable(gt_SCVSafetyTXT, false);
    TriggerAddEventUnitCargo(gt_SCVSafetyTXT, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCV Safety - TXT killer
//--------------------------------------------------------------------------------------------------
bool gt_SCVSafetyTXTkiller_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_sCVReinforcement, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TextTagDestroy(gv_sCVHelperTXT);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SCVSafetyTXTkiller_Init () {
    gt_SCVSafetyTXTkiller = TriggerCreate("gt_SCVSafetyTXTkiller_Func");
    TriggerEnable(gt_SCVSafetyTXTkiller, false);
    TriggerAddEventUnitSelected(gt_SCVSafetyTXTkiller, null, gv_pLAYER_01_USER, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCV Cargo Unload
//--------------------------------------------------------------------------------------------------
bool gt_SCVCargoUnload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto653DA9EF_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_sCVReinforcement, EventUnitCargo()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_sCVCargoDrop += 1;
    auto653DA9EF_val = gv_sCVCargoDrop;
    if (auto653DA9EF_val == 1) {
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1025)), c_orderQueueReplace);
        TriggerEnable(gt_DropshipRemover, true);
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/A087C9B6"), "Assets\\Textures\\btn-unit-terran-scv.dds", PointFromId(688));
        gf_CreateInfoText(EventUnitCargo());
    }
    else if (auto653DA9EF_val == 2) {
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1026)), c_orderQueueReplace);
        gf_CreateInfoText(EventUnitCargo());
    }
    else if (auto653DA9EF_val == 3) {
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1105)), c_orderQueueReplace);
        gf_CreateInfoText(EventUnitCargo());
    }
    else if (auto653DA9EF_val == 4) {
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1109)), c_orderQueueReplace);
        gf_CreateInfoText(EventUnitCargo());
    }
    else if (auto653DA9EF_val == 5) {
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1110)), c_orderQueueReplace);
        gf_CreateInfoText(EventUnitCargo());
    }
    else if (auto653DA9EF_val == 6) {
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1111)), c_orderQueueReplace);
        gf_CreateInfoText(EventUnitCargo());
    }
    else if (auto653DA9EF_val == 7) {
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1112)), c_orderQueueReplace);
        gf_CreateInfoText(EventUnitCargo());
    }
    else if (auto653DA9EF_val == 8) {
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1113)), c_orderQueueReplace);
        gf_CreateInfoText(EventUnitCargo());
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SCVCargoUnload_Init () {
    gt_SCVCargoUnload = TriggerCreate("gt_SCVCargoUnload_Func");
    TriggerEnable(gt_SCVCargoUnload, false);
    TriggerAddEventUnitCargo(gt_SCVCargoUnload, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supply Depot Lowered/Raised
//--------------------------------------------------------------------------------------------------
bool gt_SupplyDepotLoweredRaised_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "SupplyDepot") || (UnitGetType(EventUnit()) == "SupplyDepotLowered")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(1, 0, 0, 0) == 1)) {
        gf_CreateInfoText(EventUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SupplyDepotLoweredRaised_Init () {
    gt_SupplyDepotLoweredRaised = TriggerCreate("gt_SupplyDepotLoweredRaised_Func");
    TriggerAddEventUnitAbility(gt_SupplyDepotLoweredRaised, null, AbilityCommand("SupplyDepotRaise", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_SupplyDepotLoweredRaised, null, AbilityCommand("SupplyDepotLower", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supply Depot Built
//--------------------------------------------------------------------------------------------------
bool gt_SupplyDepotBuilt_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "SupplyDepot"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(1, 0, 0, 0) == 1)) {
        gf_CreateInfoText(EventUnitProgressUnit());
    }
    else {
        UnitSetInfoText(EventUnitProgressUnit(), StringExternal("Param/Value/D35CB257"), StringExternal("Param/Value/1DA9A544"), StringExternal("Param/Value/F6A2B90D"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SupplyDepotBuilt_Init () {
    gt_SupplyDepotBuilt = TriggerCreate("gt_SupplyDepotBuilt_Func");
    TriggerAddEventUnitConstructProgress(gt_SupplyDepotBuilt, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Barracks Built
//--------------------------------------------------------------------------------------------------
bool gt_BarracksBuilt_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "Barracks"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(1, 0, 0, 0) == 1)) {
        gf_CreateInfoText(EventUnitProgressUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BarracksBuilt_Init () {
    gt_BarracksBuilt = TriggerCreate("gt_BarracksBuilt_Func");
    TriggerAddEventUnitConstructProgress(gt_BarracksBuilt, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCV Trained
//--------------------------------------------------------------------------------------------------
bool gt_SCVTrained_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "SCV"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(1, 0, 0, 0) == 1)) {
        gf_CreateInfoText(EventUnitProgressUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SCVTrained_Init () {
    gt_SCVTrained = TriggerCreate("gt_SCVTrained_Func");
    TriggerAddEventUnitTrainProgress(gt_SCVTrained, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medic Trained
//--------------------------------------------------------------------------------------------------
bool gt_MedicTrained_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "Medic"))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_04_REBELS)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(1, 0, 0, 0) == 1)) {
        gf_CreateInfoText(EventUnitProgressUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedicTrained_Init () {
    gt_MedicTrained = TriggerCreate("gt_MedicTrained_Func");
    TriggerAddEventUnitTrainProgress(gt_MedicTrained, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Build Refinery Button Pressed
//--------------------------------------------------------------------------------------------------
bool gt_BuildRefineryButtonPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_refineryButtonPressed = true;
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("TerranBuild", 2), false);
    libNtve_gf_KillModel(gv_geyserPing);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuildRefineryButtonPressed_Init () {
    gt_BuildRefineryButtonPressed = TriggerCreate("gt_BuildRefineryButtonPressed_Func");
    TriggerAddEventButtonPressed(gt_BuildRefineryButtonPressed, gv_pLAYER_01_USER, "Refinery");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Build SCV Button Pressed
//--------------------------------------------------------------------------------------------------
bool gt_BuildSCVButtonPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_sCVTrained = true;
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("CommandCenterTrain", 0), false);
    libNtve_gf_KillModel(gv_commandCenterPing);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuildSCVButtonPressed_Init () {
    gt_BuildSCVButtonPressed = TriggerCreate("gt_BuildSCVButtonPressed_Func");
    TriggerAddEventButtonPressed(gt_BuildSCVButtonPressed, gv_pLAYER_01_USER, "SCV");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Build Marine Button Pressed
//--------------------------------------------------------------------------------------------------
bool gt_BuildMarineButtonPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_marineTrained = true;
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("BarracksTrain", 0), false);
    libNtve_gf_KillModel(gv_barracksPing);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuildMarineButtonPressed_Init () {
    gt_BuildMarineButtonPressed = TriggerCreate("gt_BuildMarineButtonPressed_Func");
    TriggerAddEventButtonPressed(gt_BuildMarineButtonPressed, gv_pLAYER_01_USER, "Marine");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Attacker Squads
//--------------------------------------------------------------------------------------------------
bool gt_DominionAttackerSquads_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dominionAttackSquad;

    // Automatic Variable Declarations
    int auto55B38AC9_n;
    int auto55B38AC9_i;

    // Variable Initialization
    lv_dominionAttackSquad = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if (((ObjectiveGetState(gv_objectiveRebels) == c_objectiveStateCompleted) || (ObjectiveGetState(gv_objectiveRebels) == c_objectiveStateFailed) || (UnitGetOwner(gv_medicBarracks) == gv_pLAYER_01_USER))) {
            return true;
        }

        UnitGroupClear(lv_dominionAttackSquad);
        if ((libNtve_gf_UnitGroupIsDead(gv_initialAttackSquad) == true)) {
            auto55B38AC9_n = gv_dominionAttackSquadSize;
            for (auto55B38AC9_i = 1; auto55B38AC9_i <= auto55B38AC9_n; auto55B38AC9_i += 1) {
                libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER_05_PATROL, PointFromId(487));
                UnitGroupAdd(lv_dominionAttackSquad, UnitLastCreated());
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(493)), c_orderQueueReplace);
                Wait(1.0, c_timeAI);
            }
        }
        else {
            lv_dominionAttackSquad = gv_initialAttackSquad;
        }
        UnitGroupIssueOrder(lv_dominionAttackSquad, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(489)), c_orderQueueReplace);
        UnitGroupIssueOrder(lv_dominionAttackSquad, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(494)), c_orderQueueAddToEnd);
        UnitGroupIssueOrder(lv_dominionAttackSquad, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(495)), c_orderQueueAddToEnd);
        UnitGroupIssueOrder(lv_dominionAttackSquad, OrderTargetingUnitGroup(AbilityCommand("attack", 0), UnitGroup("Marine", gv_pLAYER_04_REBELS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)), c_orderQueueAddToEnd);
        UnitGroupIssueOrder(lv_dominionAttackSquad, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_medicBarracks)), c_orderQueueAddToEnd);
        UnitGroupIssueOrder(lv_dominionAttackSquad, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(622)), c_orderQueueAddToEnd);
        UnitGroupIssueOrder(lv_dominionAttackSquad, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(22))), c_orderQueueAddToEnd);
        while (!((libNtve_gf_UnitGroupIsDead(lv_dominionAttackSquad) == true))) {
            Wait(1.0, c_timeAI);
        }
        if (((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(25), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            Wait(30.0, c_timeAI);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionAttackerSquads_Init () {
    gt_DominionAttackerSquads = TriggerCreate("gt_DominionAttackerSquads_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medic Energy
//--------------------------------------------------------------------------------------------------
bool gt_MedicEnergy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoDB06C22C_g;
    int autoDB06C22C_u;
    unit autoDB06C22C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(0.5, c_timeGame);
        Wait(libNtve_gf_DifficultyValueFixed(0.0, 0.0, 0.0, 1.0), c_timeGame);
        if ((UnitGroupCount(UnitGroup("Medic", gv_pLAYER_04_REBELS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            return true;
        }

        autoDB06C22C_g = UnitGroup("Medic", gv_pLAYER_04_REBELS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoDB06C22C_u = UnitGroupCount(autoDB06C22C_g, c_unitCountAll);
        for (;; autoDB06C22C_u -= 1) {
            autoDB06C22C_var = UnitGroupUnitFromEnd(autoDB06C22C_g, autoDB06C22C_u);
            if (autoDB06C22C_var == null) { break; }
            if ((UnitGetPropertyFixed(autoDB06C22C_var, c_unitPropEnergyPercent, c_unitPropCurrent) < 98.0)) {
                UnitSetPropertyFixed(autoDB06C22C_var, c_unitPropEnergy, (UnitGetPropertyFixed(autoDB06C22C_var, c_unitPropEnergy, c_unitPropCurrent) + 1.0));
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedicEnergy_Init () {
    gt_MedicEnergy = TriggerCreate("gt_MedicEnergy_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rebels Triggered - Proximity
//--------------------------------------------------------------------------------------------------
bool gt_RebelsTriggeredProximity_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), 0)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_RebelsTriggeredMarineCount);
    TriggerEnable(gt_RebelsTriggeredMarineCount, false);
    TriggerExecute(gt_RebelsTriggeredQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RebelsTriggeredProximity_Init () {
    gt_RebelsTriggeredProximity = TriggerCreate("gt_RebelsTriggeredProximity_Func");
    TriggerAddEventUnitRegion(gt_RebelsTriggeredProximity, null, RegionFromId(4), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rebels Triggered - Marine Count
//--------------------------------------------------------------------------------------------------
bool gt_RebelsTriggeredMarineCount_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Marine", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 12))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_RebelsTriggeredProximity);
    TriggerEnable(gt_RebelsTriggeredProximity, false);
    TriggerExecute(gt_RebelsTriggeredQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RebelsTriggeredMarineCount_Init () {
    gt_RebelsTriggeredMarineCount = TriggerCreate("gt_RebelsTriggeredMarineCount_Func");
    TriggerAddEventTimePeriodic(gt_RebelsTriggeredMarineCount, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rebels Triggered Q
//--------------------------------------------------------------------------------------------------
bool gt_RebelsTriggeredQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_DominionAttackerSquads, true, false);
    SoundPlay(SoundLink("TUIWarningPing", 0), PlayerGroupAll(), 100.0, 0.0);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(25), 16.0, false);
    PlayerSetAlliance(gv_pLAYER_04_REBELS, c_allianceIdVision, gv_pLAYER_01_USER, true);
    MinimapPing(PlayerGroupAll(), PointFromId(577), 5.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/E0ECCB59"), "Assets\\Textures\\btn-command-attack.dds", PointFromId(577));
    Wait(1.0, c_timeReal);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TRaynor02Adjutant00006", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor02Adjutant00006", 0), c_transmissionDurationAdd, 0.0, true);
    if ((ObjectiveGetState(gv_objectiveRebels) != c_objectiveStateCompleted)) {
        // Transmission - SoundLink("TRaynor02Tychus00007", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor02Tychus00007", 0), c_transmissionDurationAdd, 0.0, true);
    }

    if ((ObjectiveGetState(gv_objectiveRebels) != c_objectiveStateCompleted)) {
        // Transmission - SoundLink("TRaynor02Raynor00065", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor02Raynor00065", 0), c_transmissionDurationAdd, 0.0, true);
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerExecute(gt_ObjectiveRebelsDiscover, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RebelsTriggeredQ_Init () {
    gt_RebelsTriggeredQ = TriggerCreate("gt_RebelsTriggeredQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rebels Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_RebelsCompleteQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE4319F38_g;
    int autoE4319F38_u;
    unit autoE4319F38_var;
    unitgroup autoCE1A535E_g;
    int autoCE1A535E_u;
    unit autoCE1A535E_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveDominionBase) == c_objectiveStateActive))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_04_REBELS, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_RebelsDestroyed, false);
    UnitKill(gv_rebelBeacon);
    autoE4319F38_g = UnitGroup("Marine", gv_pLAYER_04_REBELS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE4319F38_u = UnitGroupCount(autoE4319F38_g, c_unitCountAll);
    for (;; autoE4319F38_u -= 1) {
        autoE4319F38_var = UnitGroupUnitFromEnd(autoE4319F38_g, autoE4319F38_u);
        if (autoE4319F38_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(autoE4319F38_var, "StatusSet MarinePortrait 17");
    }
    autoCE1A535E_g = UnitGroup(null, gv_pLAYER_04_REBELS, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
    autoCE1A535E_u = UnitGroupCount(autoCE1A535E_g, c_unitCountAll);
    for (;; autoCE1A535E_u -= 1) {
        autoCE1A535E_var = UnitGroupUnitFromEnd(autoCE1A535E_g, autoCE1A535E_u);
        if (autoCE1A535E_var == null) { break; }
        libNtve_gf_RescueUnit(autoCE1A535E_var, gv_pLAYER_01_USER, true);
        if ((UnitGetType(autoCE1A535E_var) == "Marine")) {
            UnitGroupAdd(gv_marinesRescued, autoCE1A535E_var);
        }

    }
    UnitIssueOrder(UnitFromId(600), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(736)), c_orderQueueReplace);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(599)), c_animNameDefault, "Stand Victory", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.0, c_timeReal);
    TriggerExecute(gt_DominionRebelResponseWave, true, false);
    TriggerExecute(gt_ObjectiveRebelsComplete, true, false);
    while (!((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_02_DOMINION, c_unitAllianceAlly, RegionFromId(25), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    Wait(1.0, c_timeReal);
    TriggerQueueEnter();
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/8BA552E2"));
    TriggerQueueExit();
    Wait(1.0, c_timeReal);
    TriggerExecute(gt_RebelsRescuedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RebelsCompleteQ_Init () {
    gt_RebelsCompleteQ = TriggerCreate("gt_RebelsCompleteQ_Func");
    TriggerAddEventTimePeriodic(gt_RebelsCompleteQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rebels Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_RebelsDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveDominionBase) == c_objectiveStateActive))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_04_REBELS, RegionFromId(25), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_RebelsCompleteQ, false);
    TriggerExecute(gt_ObjectiveRebelsFailed, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RebelsDestroyed_Init () {
    gt_RebelsDestroyed = TriggerCreate("gt_RebelsDestroyed_Func");
    TriggerAddEventTimePeriodic(gt_RebelsDestroyed, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rebels Rescued Q
//--------------------------------------------------------------------------------------------------
bool gt_RebelsRescuedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_talkIcon;
    unit lv_marineTalker;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((UnitGroupCount(gv_marinesRescued, c_unitCountAlive) > 0)) {
        lv_marineTalker = UnitGroupRandomUnit(gv_marinesRescued, c_unitCountAlive);
        libNtve_gf_AttachModelToUnit(lv_marineTalker, "TalkIcon", "Ref_Origin");
        lv_talkIcon = libNtve_gf_ActorLastCreated();
        UIAlertUnit("Transmission", gv_pLAYER_01_USER, StringToText(""), null, lv_marineTalker);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TRaynor02Rebel00034", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor02Rebel00034", 0), c_transmissionDurationAdd, 0.0, true);
        libNtve_gf_KillModel(lv_talkIcon);
        // Transmission - SoundLink("TRaynor02Raynor00035", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor02Raynor00035", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerExecute(gt_Colonist1Q, true, false);
        TriggerExecute(gt_Colonist2Q, true, false);
        TriggerExecute(gt_Colonist3Q, true, false);
        TriggerExecute(gt_Colonist4Q, true, false);
        TriggerExecute(gt_Colonist5Q, true, false);
        TriggerExecute(gt_Colonist6Q, true, false);
        TriggerExecute(gt_Colonist7Q, true, false);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RebelsRescuedQ_Init () {
    gt_RebelsRescuedQ = TriggerCreate("gt_RebelsRescuedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colonist 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_Colonist1Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_colonist;
    actor lv_talkIcon;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_colonist = UnitFromId(599);
    while (true) {
        Wait(1.0, c_timeGame);
        if ((UnitIsAlive(lv_colonist) == false)) {
            return true;
        }

        while (!((gv_inCinematic == false))) {
            Wait(1.0, c_timeGame);
        }
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lv_colonist), 5.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (ObjectiveGetState(gv_objectiveRebels) == c_objectiveStateCompleted)) {
            TriggerQueueEnter();
            if ((UnitIsAlive(lv_colonist) == true) && (gv_gameOver == false)) {
                libNtve_gf_AttachModelToUnit(lv_colonist, "TalkIcon", "Ref_Origin");
                lv_talkIcon = libNtve_gf_ActorLastCreated();
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_colonist), c_animNameDefault, "Talk", c_animFlagNonLooping, c_animTimeDefault);
                UIAlertUnit("Transmission", gv_pLAYER_01_USER, StringToText(""), null, lv_colonist);
                libNtve_gf_MakeUnitFacePoint(lv_colonist, UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(lv_colonist), UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lv_colonist), 8.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0))), 0.5);
                libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
                libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
                // Transmission - SoundLink("TRaynor02Civilian400043", 0)
                libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor02Civilian400043", 0), c_transmissionDurationAdd, 0.0, true);
                libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
                libNtve_gf_KillModel(lv_talkIcon);
            }

            TriggerQueueExit();
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Colonist1Q_Init () {
    gt_Colonist1Q = TriggerCreate("gt_Colonist1Q_Func");
    TriggerEnable(gt_Colonist1Q, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colonist 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_Colonist2Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_colonist;
    actor lv_talkIcon;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_colonist = UnitFromId(552);
    while (true) {
        Wait(1.0, c_timeGame);
        if ((UnitIsAlive(lv_colonist) == false)) {
            return true;
        }

        while (!((gv_inCinematic == false))) {
            Wait(1.0, c_timeGame);
        }
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lv_colonist), 5.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (ObjectiveGetState(gv_objectiveRebels) == c_objectiveStateCompleted)) {
            TriggerQueueEnter();
            if ((UnitIsAlive(lv_colonist) == true) && (gv_gameOver == false)) {
                libNtve_gf_AttachModelToUnit(lv_colonist, "TalkIcon", "Ref_Origin");
                lv_talkIcon = libNtve_gf_ActorLastCreated();
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_colonist), c_animNameDefault, "Talk", c_animFlagNonLooping, c_animTimeDefault);
                UIAlertUnit("Transmission", gv_pLAYER_01_USER, StringToText(""), null, lv_colonist);
                libNtve_gf_MakeUnitFacePoint(lv_colonist, UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(lv_colonist), UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lv_colonist), 8.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0))), 0.5);
                libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
                libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
                // Transmission - SoundLink("TRaynor02Civilian300013", 0)
                libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor02Civilian300013", 0), c_transmissionDurationAdd, 0.0, true);
                libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
                libNtve_gf_KillModel(lv_talkIcon);
            }

            TriggerQueueExit();
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Colonist2Q_Init () {
    gt_Colonist2Q = TriggerCreate("gt_Colonist2Q_Func");
    TriggerEnable(gt_Colonist2Q, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colonist 3 Q
//--------------------------------------------------------------------------------------------------
bool gt_Colonist3Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_colonist;
    actor lv_talkIcon;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_colonist = UnitFromId(551);
    while (true) {
        Wait(1.0, c_timeGame);
        if ((UnitIsAlive(lv_colonist) == false)) {
            return true;
        }

        while (!((gv_inCinematic == false))) {
            Wait(1.0, c_timeGame);
        }
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lv_colonist), 5.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (ObjectiveGetState(gv_objectiveRebels) == c_objectiveStateCompleted)) {
            TriggerQueueEnter();
            if ((UnitIsAlive(lv_colonist) == true) && (gv_gameOver == false)) {
                libNtve_gf_AttachModelToUnit(lv_colonist, "TalkIcon", "Ref_Origin");
                lv_talkIcon = libNtve_gf_ActorLastCreated();
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_colonist), c_animNameDefault, "Talk", c_animFlagNonLooping, c_animTimeDefault);
                UIAlertUnit("Transmission", gv_pLAYER_01_USER, StringToText(""), null, lv_colonist);
                libNtve_gf_MakeUnitFacePoint(lv_colonist, UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(lv_colonist), UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lv_colonist), 8.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0))), 0.5);
                libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
                libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
                // Transmission - SoundLink("TRaynor02Civilian500023", 0)
                libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor02Civilian500023", 0), c_transmissionDurationAdd, 0.0, true);
                libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
                libNtve_gf_KillModel(lv_talkIcon);
            }

            TriggerQueueExit();
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Colonist3Q_Init () {
    gt_Colonist3Q = TriggerCreate("gt_Colonist3Q_Func");
    TriggerEnable(gt_Colonist3Q, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colonist 4 Q
//--------------------------------------------------------------------------------------------------
bool gt_Colonist4Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_colonist;
    actor lv_talkIcon;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_colonist = UnitFromId(379);
    while (true) {
        Wait(1.0, c_timeGame);
        if ((UnitIsAlive(lv_colonist) == false)) {
            return true;
        }

        while (!((gv_inCinematic == false))) {
            Wait(1.0, c_timeGame);
        }
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lv_colonist), 5.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (ObjectiveGetState(gv_objectiveRebels) == c_objectiveStateCompleted)) {
            TriggerQueueEnter();
            if ((UnitIsAlive(lv_colonist) == true) && (gv_gameOver == false)) {
                libNtve_gf_AttachModelToUnit(lv_colonist, "TalkIcon", "Ref_Origin");
                lv_talkIcon = libNtve_gf_ActorLastCreated();
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_colonist), c_animNameDefault, "Talk", c_animFlagNonLooping, c_animTimeDefault);
                UIAlertUnit("Transmission", gv_pLAYER_01_USER, StringToText(""), null, lv_colonist);
                libNtve_gf_MakeUnitFacePoint(lv_colonist, UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(lv_colonist), UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lv_colonist), 8.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0))), 0.5);
                libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
                libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
                // Transmission - SoundLink("TRaynor02Civilian200012", 0)
                libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor02Civilian200012", 0), c_transmissionDurationAdd, 0.0, true);
                libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
                libNtve_gf_KillModel(lv_talkIcon);
            }

            TriggerQueueExit();
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Colonist4Q_Init () {
    gt_Colonist4Q = TriggerCreate("gt_Colonist4Q_Func");
    TriggerEnable(gt_Colonist4Q, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colonist 5 Q
//--------------------------------------------------------------------------------------------------
bool gt_Colonist5Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_colonist;
    actor lv_talkIcon;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_colonist = UnitFromId(291);
    while (true) {
        Wait(1.0, c_timeGame);
        if ((UnitIsAlive(lv_colonist) == false)) {
            return true;
        }

        while (!((gv_inCinematic == false))) {
            Wait(1.0, c_timeGame);
        }
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lv_colonist), 5.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (ObjectiveGetState(gv_objectiveRebels) == c_objectiveStateCompleted)) {
            TriggerQueueEnter();
            if ((UnitIsAlive(lv_colonist) == true) && (gv_gameOver == false)) {
                libNtve_gf_AttachModelToUnit(lv_colonist, "TalkIcon", "Ref_Origin");
                lv_talkIcon = libNtve_gf_ActorLastCreated();
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_colonist), c_animNameDefault, "Talk", c_animFlagNonLooping, c_animTimeDefault);
                UIAlertUnit("Transmission", gv_pLAYER_01_USER, StringToText(""), null, lv_colonist);
                libNtve_gf_MakeUnitFacePoint(lv_colonist, UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(lv_colonist), UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lv_colonist), 8.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0))), 0.5);
                libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
                libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
                // Transmission - SoundLink("TRaynor02Civilian600024", 0)
                libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor02Civilian600024", 0), c_transmissionDurationAdd, 0.0, true);
                libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
                libNtve_gf_KillModel(lv_talkIcon);
            }

            TriggerQueueExit();
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Colonist5Q_Init () {
    gt_Colonist5Q = TriggerCreate("gt_Colonist5Q_Func");
    TriggerEnable(gt_Colonist5Q, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colonist 6 Q
//--------------------------------------------------------------------------------------------------
bool gt_Colonist6Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_colonist;
    actor lv_talkIcon;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_colonist = UnitFromId(600);
    while (true) {
        Wait(1.0, c_timeGame);
        if ((UnitIsAlive(lv_colonist) == false)) {
            return true;
        }

        while (!((gv_inCinematic == false))) {
            Wait(1.0, c_timeGame);
        }
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lv_colonist), 7.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (ObjectiveGetState(gv_objectiveRebels) == c_objectiveStateCompleted)) {
            TriggerQueueEnter();
            if ((UnitIsAlive(lv_colonist) == true) && (gv_gameOver == false)) {
                libNtve_gf_AttachModelToUnit(lv_colonist, "TalkIcon", "Ref_Origin");
                lv_talkIcon = libNtve_gf_ActorLastCreated();
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_colonist), c_animNameDefault, "Talk", c_animFlagNonLooping, c_animTimeDefault);
                UIAlertUnit("Transmission", gv_pLAYER_01_USER, StringToText(""), null, lv_colonist);
                libNtve_gf_MakeUnitFacePoint(lv_colonist, UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(lv_colonist), UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lv_colonist), 8.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0))), 0.5);
                libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
                libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
                // Transmission - SoundLink("TRaynor02Civilian200044", 0)
                libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor02Civilian200044", 0), c_transmissionDurationAdd, 0.0, true);
                libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
                libNtve_gf_KillModel(lv_talkIcon);
            }

            TriggerQueueExit();
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Colonist6Q_Init () {
    gt_Colonist6Q = TriggerCreate("gt_Colonist6Q_Func");
    TriggerEnable(gt_Colonist6Q, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colonist 7 Q
//--------------------------------------------------------------------------------------------------
bool gt_Colonist7Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_colonist;
    actor lv_talkIcon;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_colonist = UnitFromId(737);
    while (true) {
        Wait(1.0, c_timeGame);
        if ((UnitIsAlive(lv_colonist) == false)) {
            return true;
        }

        while (!((gv_inCinematic == false))) {
            Wait(1.0, c_timeGame);
        }
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lv_colonist), 5.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (ObjectiveGetState(gv_objectiveRebels) == c_objectiveStateCompleted)) {
            TriggerQueueEnter();
            if ((UnitIsAlive(lv_colonist) == true) && (gv_gameOver == false)) {
                libNtve_gf_AttachModelToUnit(lv_colonist, "TalkIcon", "Ref_Origin");
                lv_talkIcon = libNtve_gf_ActorLastCreated();
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_colonist), c_animNameDefault, "Talk", c_animFlagNonLooping, c_animTimeDefault);
                UIAlertUnit("Transmission", gv_pLAYER_01_USER, StringToText(""), null, lv_colonist);
                libNtve_gf_MakeUnitFacePoint(lv_colonist, UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(lv_colonist), UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lv_colonist), 8.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0))), 0.5);
                libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
                libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
                // Transmission - SoundLink("TRaynor02Civilian400045", 0)
                libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor02Civilian400045", 0), c_transmissionDurationAdd, 0.0, true);
                libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
                libNtve_gf_KillModel(lv_talkIcon);
            }

            TriggerQueueExit();
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Colonist7Q_Init () {
    gt_Colonist7Q = TriggerCreate("gt_Colonist7Q_Func");
    TriggerEnable(gt_Colonist7Q, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominon Guards Initialization
//--------------------------------------------------------------------------------------------------
bool gt_DominonGuardsInitialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AddDominionGuard(UnitFromId(230), RegionFromId(15));
    gf_AddDominionGuard(UnitFromId(232), RegionFromId(15));
    gf_AddDominionGuard(UnitFromId(229), RegionFromId(15));
    gf_AddDominionGuard(UnitFromId(433), RegionFromId(20));
    gf_AddDominionGuard(UnitFromId(445), RegionFromId(20));
    gf_AddDominionGuard(UnitFromId(570), RegionFromId(20));
    TriggerExecute(gt_DominionGuards1, true, false);
    TriggerExecute(gt_DominionGuards2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominonGuardsInitialization_Init () {
    gt_DominonGuardsInitialization = TriggerCreate("gt_DominonGuardsInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Guards 1
//--------------------------------------------------------------------------------------------------
bool gt_DominionGuards1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    bool lv_stopTrigger;
    point lv_target;

    // Automatic Variable Declarations
    int autoC991D86D_ae;
    const int autoC991D86D_ai = 1;
    int auto5C1CF069_ae;
    const int auto5C1CF069_ai = 1;
    int auto988C8ED7_ae;
    const int auto988C8ED7_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeGame);
        lv_stopTrigger = true;
        autoC991D86D_ae = gv_dominionGuardsSize;
        lv_i = 1;
        for ( ; ( (autoC991D86D_ai >= 0 && lv_i <= autoC991D86D_ae) || (autoC991D86D_ai < 0 && lv_i >= autoC991D86D_ae) ) ; lv_i += autoC991D86D_ai ) {
            if ((gv_dominionGuards[lv_i].lv_interestArea == RegionFromId(15)) && (UnitIsAlive(gv_dominionGuards[lv_i].lv_unit) == true)) {
                lv_stopTrigger = false;
                break;
            }

        }
        if ((lv_stopTrigger == true)) {
            return true;
        }

        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            lv_target = UnitGetPosition(libNtve_gf_ClosestUnitToPoint(RegionGetCenter(RegionFromId(15)), UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)));
            auto988C8ED7_ae = gv_dominionGuardsSize;
            lv_i = 1;
            for ( ; ( (auto988C8ED7_ai >= 0 && lv_i <= auto988C8ED7_ae) || (auto988C8ED7_ai < 0 && lv_i >= auto988C8ED7_ae) ) ; lv_i += auto988C8ED7_ai ) {
                if ((gv_dominionGuards[lv_i].lv_interestArea == RegionFromId(15)) && (UnitIsAlive(gv_dominionGuards[lv_i].lv_unit) == true)) {
                    UnitIssueOrder(gv_dominionGuards[lv_i].lv_unit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_target), c_orderQueueReplace);
                }

            }
        }
        else {
            auto5C1CF069_ae = gv_dominionGuardsSize;
            lv_i = 1;
            for ( ; ( (auto5C1CF069_ai >= 0 && lv_i <= auto5C1CF069_ae) || (auto5C1CF069_ai < 0 && lv_i >= auto5C1CF069_ae) ) ; lv_i += auto5C1CF069_ai ) {
                if ((gv_dominionGuards[lv_i].lv_interestArea == RegionFromId(15)) && (UnitIsAlive(gv_dominionGuards[lv_i].lv_unit) == true)) {
                    UnitIssueOrder(gv_dominionGuards[lv_i].lv_unit, OrderTargetingPoint(AbilityCommand("attack", 0), gv_dominionGuards[lv_i].lv_position), c_orderQueueReplace);
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionGuards1_Init () {
    gt_DominionGuards1 = TriggerCreate("gt_DominionGuards1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Guards 2
//--------------------------------------------------------------------------------------------------
bool gt_DominionGuards2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    bool lv_stopTrigger;
    point lv_target;

    // Automatic Variable Declarations
    int auto9C1A122B_ae;
    const int auto9C1A122B_ai = 1;
    int autoE0E543B7_ae;
    const int autoE0E543B7_ai = 1;
    int autoD2FCF587_ae;
    const int autoD2FCF587_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeGame);
        lv_stopTrigger = true;
        auto9C1A122B_ae = gv_dominionGuardsSize;
        lv_i = 1;
        for ( ; ( (auto9C1A122B_ai >= 0 && lv_i <= auto9C1A122B_ae) || (auto9C1A122B_ai < 0 && lv_i >= auto9C1A122B_ae) ) ; lv_i += auto9C1A122B_ai ) {
            if ((gv_dominionGuards[lv_i].lv_interestArea == RegionFromId(20)) && (UnitIsAlive(gv_dominionGuards[lv_i].lv_unit) == true)) {
                lv_stopTrigger = false;
                break;
            }

        }
        if ((lv_stopTrigger == true)) {
            return true;
        }

        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            lv_target = UnitGetPosition(libNtve_gf_ClosestUnitToPoint(RegionGetCenter(RegionFromId(20)), UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)));
            autoD2FCF587_ae = gv_dominionGuardsSize;
            lv_i = 1;
            for ( ; ( (autoD2FCF587_ai >= 0 && lv_i <= autoD2FCF587_ae) || (autoD2FCF587_ai < 0 && lv_i >= autoD2FCF587_ae) ) ; lv_i += autoD2FCF587_ai ) {
                if ((gv_dominionGuards[lv_i].lv_interestArea == RegionFromId(20)) && (UnitIsAlive(gv_dominionGuards[lv_i].lv_unit) == true)) {
                    UnitIssueOrder(gv_dominionGuards[lv_i].lv_unit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_target), c_orderQueueReplace);
                }

            }
        }
        else {
            autoE0E543B7_ae = gv_dominionGuardsSize;
            lv_i = 1;
            for ( ; ( (autoE0E543B7_ai >= 0 && lv_i <= autoE0E543B7_ae) || (autoE0E543B7_ai < 0 && lv_i >= autoE0E543B7_ae) ) ; lv_i += autoE0E543B7_ai ) {
                if ((gv_dominionGuards[lv_i].lv_interestArea == RegionFromId(20)) && (UnitIsAlive(gv_dominionGuards[lv_i].lv_unit) == true)) {
                    UnitIssueOrder(gv_dominionGuards[lv_i].lv_unit, OrderTargetingPoint(AbilityCommand("attack", 0), gv_dominionGuards[lv_i].lv_position), c_orderQueueReplace);
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionGuards2_Init () {
    gt_DominionGuards2 = TriggerCreate("gt_DominionGuards2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hellion Attack
//--------------------------------------------------------------------------------------------------
bool gt_HellionAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7E78CD21_g;
    int auto7E78CD21_u;
    unit auto7E78CD21_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto7E78CD21_g = gv_hellions;
    auto7E78CD21_u = UnitGroupCount(auto7E78CD21_g, c_unitCountAll);
    for (;; auto7E78CD21_u -= 1) {
        auto7E78CD21_var = UnitGroupUnitFromEnd(auto7E78CD21_g, auto7E78CD21_u);
        if (auto7E78CD21_var == null) { break; }
        UnitSetOwner(auto7E78CD21_var, gv_pLAYER_02_DOMINION, true);
        AISetUnitScriptControlled(auto7E78CD21_var, false);
    }
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION, gv_hellions);
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION, PointFromId(496));
    AIAttackWaveSetTargetPatrol(gv_pLAYER_02_DOMINION, 0);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(406), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(1142), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(1143), false);
    AIAttackWaveSend(gv_pLAYER_02_DOMINION, 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HellionAttack_Init () {
    gt_HellionAttack = TriggerCreate("gt_HellionAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hellion Q
//--------------------------------------------------------------------------------------------------
bool gt_HellionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE4F78B21_g;
    int autoE4F78B21_u;
    unit autoE4F78B21_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_HellionAttack, true, false);
    TriggerQueueEnter();
    if ((libNtve_gf_UnitGroupIsDead(gv_hellions) == true)) {
        return true;
    }

    autoE4F78B21_g = gv_hellions;
    autoE4F78B21_u = UnitGroupCount(autoE4F78B21_g, c_unitCountAll);
    for (;; autoE4F78B21_u -= 1) {
        autoE4F78B21_var = UnitGroupUnitFromEnd(autoE4F78B21_g, autoE4F78B21_u);
        if (autoE4F78B21_var == null) { break; }
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(autoE4F78B21_var), 8.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            return true;
        }

    }
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TRaynor02Adjutant00031", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor02Adjutant00031", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HellionQ_Init () {
    gt_HellionQ = TriggerCreate("gt_HellionQ_Func");
    TriggerAddEventUnitRegion(gt_HellionQ, null, RegionFromId(5), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mine Guards Activate
//--------------------------------------------------------------------------------------------------
bool gt_MineGuardsActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoB7737390_n;
    int autoB7737390_i;

    // Conditions
    if (testConds) {
        if (!((gv_mineGuardsState == ge_PRESET_MineGuardsState_Inactive))) {
            return false;
        }

        if (!((gv_mineGuardsDefeated == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(40), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_mineGuardsState = ge_PRESET_MineGuardsState_Spawning;
    TriggerExecute(gt_MineGuardsLoop, true, false);
    UnitGroupClear(gv_mineGuardGroup);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(40), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_mineGuardGroup);
    gv_guardsKilled = 0;
    autoB7737390_n = gv_mineGuardPairs;
    for (autoB7737390_i = 1; autoB7737390_i <= autoB7737390_n; autoB7737390_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(2, "Marine", 0, gv_pLAYER_05_PATROL, RegionGetCenter(RegionFromId(9)));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_mineGuardGroup);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(620)), c_orderQueueReplace);
        Wait(2.0, c_timeGame);
    }
    gv_marineTaunter = UnitGroupRandomUnit(gv_mineGuardGroup, c_unitCountAlive);
    TriggerExecute(gt_MarineTauntQ, true, false);
    gv_mineGuardsState = ge_PRESET_MineGuardsState_Active;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineGuardsActivate_Init () {
    gt_MineGuardsActivate = TriggerCreate("gt_MineGuardsActivate_Func");
    TriggerAddEventTimePeriodic(gt_MineGuardsActivate, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mine Guards Loop
//--------------------------------------------------------------------------------------------------
bool gt_MineGuardsLoop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto07E01211_g;
    int auto07E01211_u;
    unit auto07E01211_var;
    unitgroup auto30D82335_g;
    int auto30D82335_u;
    unit auto30D82335_var;
    unitgroup autoFB99CCD1_g;
    int autoFB99CCD1_u;
    unit autoFB99CCD1_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.5, c_timeGame);
    while (true) {
        if ((gv_mineGuardsDefeated == true)) {
            return true;
        }

        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(25), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            break;
        }

        auto07E01211_g = gv_mineGuardGroup;
        auto07E01211_u = UnitGroupCount(auto07E01211_g, c_unitCountAll);
        for (;; auto07E01211_u -= 1) {
            auto07E01211_var = UnitGroupUnitFromEnd(auto07E01211_g, auto07E01211_u);
            if (auto07E01211_var == null) { break; }
            UnitIssueOrder(auto07E01211_var, OrderTargetingUnit(AbilityCommand("attack", 0), libNtve_gf_ClosestUnitToPoint(UnitGetPosition(auto07E01211_var), UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(25), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0))), c_orderQueueReplace);
        }
        Wait(1.0, c_timeGame);
    }
    gv_mineGuardsState = ge_PRESET_MineGuardsState_Despawning;
    auto30D82335_g = gv_mineGuardGroup;
    auto30D82335_u = UnitGroupCount(auto30D82335_g, c_unitCountAll);
    for (;; auto30D82335_u -= 1) {
        auto30D82335_var = UnitGroupUnitFromEnd(auto30D82335_g, auto30D82335_u);
        if (auto30D82335_var == null) { break; }
        UnitIssueOrder(auto30D82335_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(620)), c_orderQueueReplace);
        UnitIssueOrder(auto30D82335_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(9))), c_orderQueueAddToEnd);
    }
    while (true) {
        if ((gv_mineGuardsState != ge_PRESET_MineGuardsState_Despawning)) {
            return true;
        }

        autoFB99CCD1_g = gv_mineGuardGroup;
        autoFB99CCD1_u = UnitGroupCount(autoFB99CCD1_g, c_unitCountAll);
        for (;; autoFB99CCD1_u -= 1) {
            autoFB99CCD1_var = UnitGroupUnitFromEnd(autoFB99CCD1_g, autoFB99CCD1_u);
            if (autoFB99CCD1_var == null) { break; }
            if ((RegionContainsPoint(RegionCircle(RegionGetCenter(RegionFromId(9)), 2.0), UnitGetPosition(autoFB99CCD1_var)) == true)) {
                UnitIssueOrder(autoFB99CCD1_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(9))), c_orderQueueReplace);
            }

        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineGuardsLoop_Init () {
    gt_MineGuardsLoop = TriggerCreate("gt_MineGuardsLoop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mine Guards Defeated
//--------------------------------------------------------------------------------------------------
bool gt_MineGuardsDefeated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_currentMiner;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_05_PATROL))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_mineGuardGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_guardsKilled = (gv_guardsKilled + 1);
    if ((gv_guardsKilled == (gv_mineGuardPairs * 2))) {
        gv_mineGuardsDefeated = true;
        gv_mineGuardsState = ge_PRESET_MineGuardsState_Inactive;
        TriggerEnable(TriggerGetCurrent(), false);
        Wait(1.0, c_timeGame);
    }

    if ((gv_guardsKilled < (gv_mineGuardPairs * 2)) && (UnitGroupCount(gv_mineGuardGroup, c_unitCountAlive) == 0)) {
        gv_mineGuardsState = ge_PRESET_MineGuardsState_Inactive;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineGuardsDefeated_Init () {
    gt_MineGuardsDefeated = TriggerCreate("gt_MineGuardsDefeated_Func");
    TriggerAddEventUnitDied(gt_MineGuardsDefeated, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Despawning
//--------------------------------------------------------------------------------------------------
bool gt_Despawning_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_mineGuardsState == ge_PRESET_MineGuardsState_Despawning))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_05_PATROL))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_mineGuardGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_mineGuardGroup, EventUnit());
    UnitRemove(EventUnit());
    if ((UnitGroupCount(gv_mineGuardGroup, c_unitCountAlive) == 0)) {
        gv_mineGuardsState = ge_PRESET_MineGuardsState_Inactive;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Despawning_Init () {
    gt_Despawning = TriggerCreate("gt_Despawning_Func");
    TriggerAddEventUnitRegion(gt_Despawning, null, RegionFromId(9), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Marine Taunt Q
//--------------------------------------------------------------------------------------------------
bool gt_MarineTauntQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_talkIcon;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((UnitIsAlive(gv_marineTaunter) == true) && (gv_gameOver == false)) {
        libNtve_gf_AttachModelToUnit(gv_marineTaunter, "TalkIcon", "Ref_Origin");
        lv_talkIcon = libNtve_gf_ActorLastCreated();
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_marineTaunter), c_animNameDefault, "Talk", c_animFlagNonLooping, c_animTimeDefault);
        UIAlertUnit("Transmission", gv_pLAYER_01_USER, StringToText(""), null, gv_marineTaunter);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TRaynor02DominionMarine500014", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor02DominionMarine500014", 0), c_transmissionDurationAdd, 1.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        libNtve_gf_KillModel(lv_talkIcon);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarineTauntQ_Init () {
    gt_MarineTauntQ = TriggerCreate("gt_MarineTauntQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bunker Death Q
//--------------------------------------------------------------------------------------------------
bool gt_BunkerDeathQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_tempPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((EventUnit() == UnitFromId(5)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_tempPoint = UnitGetPosition(EventUnit());
    while (true) {
        Wait(1.0, c_timeGame);
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionCircle(lv_tempPoint, 6.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            TriggerQueueEnter();
            libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
            libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
            // Transmission - SoundLink("TRaynor02Tychus00009", 0)
            libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor02Tychus00009", 0), c_transmissionDurationAdd, 0.0, true);
            libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
            TriggerQueueExit();
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BunkerDeathQ_Init () {
    gt_BunkerDeathQ = TriggerCreate("gt_BunkerDeathQ_Func");
    TriggerAddEventUnitDied(gt_BunkerDeathQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Barracks Factory Q
//--------------------------------------------------------------------------------------------------
bool gt_BarracksFactoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Barracks") || (UnitGetType(EventUnit()) == "Factory")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup("Barracks", gv_pLAYER_02_DOMINION, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Factory", gv_pLAYER_02_DOMINION, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 1)) {
        TriggerEnable(TriggerGetCurrent(), false);
        Wait(2.0, c_timeReal);
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TRaynor02Tychus00052", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor02Tychus00052", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BarracksFactoryQ_Init () {
    gt_BarracksFactoryQ = TriggerCreate("gt_BarracksFactoryQ_Func");
    TriggerAddEventUnitDied(gt_BarracksFactoryQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Artifact Reveal
//--------------------------------------------------------------------------------------------------
bool gt_ArtifactReveal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        VisRevealerEnable(gv_artifactRevealer, true);
        if ((gv_lowerAnimation == true) && (gv_inCinematic == false)) {
            gv_lowerAnimation = false;
            Wait(5.0, c_timeReal);
            libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "TRaynor02MineLift", c_animNameDefault, "Stand Work End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
            Wait(5.0, c_timeGame);
            libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "TRaynor02MineLift", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
        }

    }
    else {
        VisRevealerEnable(gv_artifactRevealer, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArtifactReveal_Init () {
    gt_ArtifactReveal = TriggerCreate("gt_ArtifactReveal_Func");
    TriggerAddEventTimePeriodic(gt_ArtifactReveal, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rock Miners
//--------------------------------------------------------------------------------------------------
bool gt_RockMiners_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_minerGroup;
    bool lv_flee;

    // Automatic Variable Declarations
    unitgroup auto64492017_g;
    int auto64492017_u;
    unit auto64492017_var;
    unitgroup auto486BEE07_g;
    int auto486BEE07_u;
    unit auto486BEE07_var;
    unitgroup auto4542E7A1_g;
    int auto4542E7A1_u;
    unit auto4542E7A1_var;
    unitgroup auto21AEEC4F_g;
    int auto21AEEC4F_u;
    unit auto21AEEC4F_var;

    // Variable Initialization
    lv_minerGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(lv_minerGroup, UnitFromId(351));
    UnitGroupAdd(lv_minerGroup, UnitFromId(356));
    auto64492017_g = lv_minerGroup;
    auto64492017_u = UnitGroupCount(auto64492017_g, c_unitCountAll);
    for (;; auto64492017_u -= 1) {
        auto64492017_var = UnitGroupUnitFromEnd(auto64492017_g, auto64492017_u);
        if (auto64492017_var == null) { break; }
        UnitSetState(auto64492017_var, c_unitStateFidget, false);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(auto64492017_var), c_animNameDefault, "Attack", c_animFlagPlayForever, c_animTimeDefault);
    }
    while (true) {
        Wait(1.0, c_timeGame);
        if ((libNtve_gf_UnitGroupIsDead(lv_minerGroup) == true)) {
            return true;
        }

        auto486BEE07_g = lv_minerGroup;
        auto486BEE07_u = UnitGroupCount(auto486BEE07_g, c_unitCountAll);
        for (;; auto486BEE07_u -= 1) {
            auto486BEE07_var = UnitGroupUnitFromEnd(auto486BEE07_g, auto486BEE07_u);
            if (auto486BEE07_var == null) { break; }
            if (((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(auto486BEE07_var), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGetPropertyFixed(auto486BEE07_var, c_unitPropLife, c_unitPropCurrent) < UnitGetPropertyFixed(auto486BEE07_var, c_unitPropLifeMax, c_unitPropCurrent)))) {
                lv_flee = true;
            }

        }
        if ((lv_flee == true)) {
            break;
        }

    }
    auto4542E7A1_g = lv_minerGroup;
    auto4542E7A1_u = UnitGroupCount(auto4542E7A1_g, c_unitCountAll);
    for (;; auto4542E7A1_u -= 1) {
        auto4542E7A1_var = UnitGroupUnitFromEnd(auto4542E7A1_g, auto4542E7A1_u);
        if (auto4542E7A1_var == null) { break; }
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(auto4542E7A1_var), c_animNameDefault);
        UnitBehaviorAdd(auto4542E7A1_var, "Run", auto4542E7A1_var, 1);
    }
    while (true) {
        if ((libNtve_gf_UnitGroupIsDead(lv_minerGroup) == true)) {
            return true;
        }

        auto21AEEC4F_g = lv_minerGroup;
        auto21AEEC4F_u = UnitGroupCount(auto21AEEC4F_g, c_unitCountAll);
        for (;; auto21AEEC4F_u -= 1) {
            auto21AEEC4F_var = UnitGroupUnitFromEnd(auto21AEEC4F_g, auto21AEEC4F_u);
            if (auto21AEEC4F_var == null) { break; }
            UnitIssueOrder(auto21AEEC4F_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(16))), c_orderQueueReplace);
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RockMiners_Init () {
    gt_RockMiners = TriggerCreate("gt_RockMiners_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Miner - Left
//--------------------------------------------------------------------------------------------------
bool gt_MinerLeft_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_miner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_miner = UnitFromId(1302);

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(2.0, c_timeGame);
        if ((UnitIsAlive(lv_miner) == false)) {
            return true;
        }

        if (((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lv_miner), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGetPropertyFixed(lv_miner, c_unitPropLife, c_unitPropCurrent) < UnitGetPropertyFixed(lv_miner, c_unitPropLifeMax, c_unitPropCurrent)))) {
            break;
        }

        if ((RandomInt(1, 4) == 1)) {
            UnitIssueOrder(lv_miner, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(6))), c_orderQueueReplace);
            Wait(2.0, c_timeGame);
        }

    }
    while (true) {
        Wait(1.0, c_timeGame);
        if ((UnitIsAlive(lv_miner) == false)) {
            return true;
        }

        UnitBehaviorAdd(lv_miner, "Run", lv_miner, 1);
        UnitIssueOrder(lv_miner, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(16))), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MinerLeft_Init () {
    gt_MinerLeft = TriggerCreate("gt_MinerLeft_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Miner - Top
//--------------------------------------------------------------------------------------------------
bool gt_MinerTop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_miner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_miner = UnitFromId(1301);

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(2.0, c_timeGame);
        if ((UnitIsAlive(lv_miner) == false)) {
            return true;
        }

        if (((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lv_miner), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGetPropertyFixed(lv_miner, c_unitPropLife, c_unitPropCurrent) < UnitGetPropertyFixed(lv_miner, c_unitPropLifeMax, c_unitPropCurrent)))) {
            break;
        }

        if ((RandomInt(1, 4) == 1)) {
            UnitIssueOrder(lv_miner, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(10))), c_orderQueueReplace);
            Wait(2.0, c_timeGame);
        }

    }
    while (true) {
        Wait(1.0, c_timeGame);
        if ((UnitIsAlive(lv_miner) == false)) {
            return true;
        }

        UnitBehaviorAdd(lv_miner, "Run", lv_miner, 1);
        UnitIssueOrder(lv_miner, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(14))), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MinerTop_Init () {
    gt_MinerTop = TriggerCreate("gt_MinerTop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Miner - Right
//--------------------------------------------------------------------------------------------------
bool gt_MinerRight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_miner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_miner = UnitFromId(1300);

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(2.0, c_timeGame);
        if ((UnitIsAlive(lv_miner) == false)) {
            return true;
        }

        if (((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lv_miner), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGetPropertyFixed(lv_miner, c_unitPropLife, c_unitPropCurrent) < UnitGetPropertyFixed(lv_miner, c_unitPropLifeMax, c_unitPropCurrent)))) {
            break;
        }

        if ((RandomInt(1, 4) == 1)) {
            UnitIssueOrder(lv_miner, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(13))), c_orderQueueReplace);
            Wait(2.0, c_timeGame);
        }

    }
    while (true) {
        Wait(1.0, c_timeGame);
        if ((UnitIsAlive(lv_miner) == false)) {
            return true;
        }

        UnitBehaviorAdd(lv_miner, "Run", lv_miner, 1);
        UnitIssueOrder(lv_miner, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(17))), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MinerRight_Init () {
    gt_MinerRight = TriggerCreate("gt_MinerRight_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Miner Despawn
//--------------------------------------------------------------------------------------------------
bool gt_MinerDespawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_03_COLONISTS))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "MinerMale"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MinerDespawn_Init () {
    gt_MinerDespawn = TriggerCreate("gt_MinerDespawn_Func");
    TriggerAddEventUnitRegion(gt_MinerDespawn, null, RegionFromId(16), true);
    TriggerAddEventUnitRegion(gt_MinerDespawn, null, RegionFromId(14), true);
    TriggerAddEventUnitRegion(gt_MinerDespawn, null, RegionFromId(17), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AICampaignStart(gv_pLAYER_02_DOMINION);
    AICampaignStart(gv_pLAYER_04_REBELS);
    TriggerExecute(gt_DominionAttackWaves, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Upgrades H
//--------------------------------------------------------------------------------------------------
bool gt_StartUpgradesH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 1, 0) == 1))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(960.0, c_timeAI);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "TerranVehicleWeaponsLevel1", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartUpgradesH_Init () {
    gt_StartUpgradesH = TriggerCreate("gt_StartUpgradesH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Upgrades I
//--------------------------------------------------------------------------------------------------
bool gt_StartUpgradesI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(960.0, c_timeAI);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "TerranVehicleArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "TerranVehicleWeaponsLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartUpgradesI_Init () {
    gt_StartUpgradesI = TriggerCreate("gt_StartUpgradesI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_DominionAttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_SetAttackWaveParameters();
    AIAttackWaveAddUnits4(0, 2, 4, 5, "Marine");
    AIAttackWaveSend(gv_pLAYER_02_DOMINION, libNtve_gf_DifficultyValueInt(400, 400, 225, 180), true);
    gf_SetAttackWaveParameters();
    AIAttackWaveAddUnits4(0, 2, 6, 7, "Marine");
    AIAttackWaveAddUnits4(0, 0, 0, 1, "Medic");
    AIAttackWaveSend(gv_pLAYER_02_DOMINION, libNtve_gf_DifficultyValueInt(400, 400, 210, 180), true);
    gf_SetAttackWaveParameters();
    AIAttackWaveAddUnits4(0, 2, 7, 8, "Marine");
    AIAttackWaveAddUnits4(0, 0, 2, 3, "Medic");
    AIAttackWaveSend(gv_pLAYER_02_DOMINION, libNtve_gf_DifficultyValueInt(400, 400, 210, 180), true);
    gf_SetAttackWaveParameters();
    AIAttackWaveAddUnits4(0, 2, 0, 0, "Marine");
    AIAttackWaveAddUnits4(0, 0, 3, 5, "Hellion");
    AIAttackWaveSend(gv_pLAYER_02_DOMINION, libNtve_gf_DifficultyValueInt(400, 400, 210, 180), true);
    gf_SetAttackWaveParameters();
    AIAttackWaveAddUnits4(0, 2, 9, 11, "Marine");
    AIAttackWaveAddUnits4(0, 0, 3, 4, "Medic");
    AIAttackWaveSend(gv_pLAYER_02_DOMINION, libNtve_gf_DifficultyValueInt(400, 400, 180, 150), true);
    while (true) {
        gf_SetAttackWaveParameters();
        AIAttackWaveAddUnits4(0, 2, 8, 9, "Marine");
        AIAttackWaveAddUnits4(0, 0, 3, 4, "Hellion");
        AIAttackWaveSend(gv_pLAYER_02_DOMINION, libNtve_gf_DifficultyValueInt(400, 400, 210, 180), true);
        gf_SetAttackWaveParameters();
        AIAttackWaveAddUnits4(0, 2, 7, 8, "Marine");
        AIAttackWaveAddUnits4(0, 0, 2, 2, "Medic");
        AIAttackWaveAddUnits4(0, 0, 2, 3, "Hellion");
        AIAttackWaveSend(gv_pLAYER_02_DOMINION, libNtve_gf_DifficultyValueInt(400, 400, 210, 180), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionAttackWaves_Init () {
    gt_DominionAttackWaves = TriggerCreate("gt_DominionAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Rebel Response Wave
//--------------------------------------------------------------------------------------------------
bool gt_DominionRebelResponseWave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_SetAttackWaveParameters();
    AIAttackWaveAddUnits4(0, 4, 5, 6, "Marine");
    AIAttackWaveAddUnits4(0, 0, 0, 1, "Medic");
    AIAttackWaveSend(gv_pLAYER_02_DOMINION, libNtve_gf_DifficultyValueInt(0, 0, 0, 0), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionRebelResponseWave_Init () {
    gt_DominionRebelResponseWave = TriggerCreate("gt_DominionRebelResponseWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave Divert
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveDivert_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_newAttackGroup;

    // Automatic Variable Declarations
    unitgroup auto14712386_g;
    int auto14712386_u;
    unit auto14712386_var;
    unitgroup autoBAB1CE6C_g;
    int autoBAB1CE6C_u;
    unit autoBAB1CE6C_var;

    // Variable Initialization
    lv_newAttackGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_medicBarracks) == true))) {
            return false;
        }

        if (!((UnitGetOwner(gv_medicBarracks) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto14712386_g = AIWaveGetUnits(AIUnitGetWave(EventUnit()));
    auto14712386_u = UnitGroupCount(auto14712386_g, c_unitCountAll);
    for (;; auto14712386_u -= 1) {
        auto14712386_var = UnitGroupUnitFromEnd(auto14712386_g, auto14712386_u);
        if (auto14712386_var == null) { break; }
        UnitGroupAdd(lv_newAttackGroup, auto14712386_var);
    }
    AIAttackWaveCancel(AIUnitGetWave(EventUnit()));
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_DOMINION, UnitGetPosition(gv_medicBarracks));
    autoBAB1CE6C_g = lv_newAttackGroup;
    autoBAB1CE6C_u = UnitGroupCount(autoBAB1CE6C_g, c_unitCountAll);
    for (;; autoBAB1CE6C_u -= 1) {
        autoBAB1CE6C_var = UnitGroupUnitFromEnd(autoBAB1CE6C_g, autoBAB1CE6C_u);
        if (autoBAB1CE6C_var == null) { break; }
        AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION, autoBAB1CE6C_var);
    }
    AIAttackWaveSend(gv_pLAYER_02_DOMINION, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveDivert_Init () {
    gt_AttackWaveDivert = TriggerCreate("gt_AttackWaveDivert_Func");
    TriggerAddEventUnitRegion(gt_AttackWaveDivert, null, RegionFromId(27), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIMinerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIMinerals_Init () {
    gt_AIMinerals = TriggerCreate("gt_AIMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIMinerals, gv_pLAYER_02_DOMINION, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIMinerals, gv_pLAYER_04_REBELS, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIGas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGas_Init () {
    gt_AIGas = TriggerCreate("gt_AIGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIGas, gv_pLAYER_02_DOMINION, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGas, gv_pLAYER_04_REBELS, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Crippled
//--------------------------------------------------------------------------------------------------
bool gt_AICrippled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TechTreeUnitCount(gv_pLAYER_02_DOMINION, "SupplyDepot", c_techCountQueuedOrBetter) == 0))) {
            return false;
        }

        if (!((TechTreeUnitCount(gv_pLAYER_02_DOMINION, "SupplyDepotLowered", c_techCountQueuedOrBetter) == 0))) {
            return false;
        }

        if (!((TechTreeUnitCount(gv_pLAYER_02_DOMINION, "CommandCenter", c_techCountQueuedOrBetter) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_DominionAttackWaves, false);
    TriggerStop(gt_DominionAttackWaves);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AICrippled_Init () {
    gt_AICrippled = TriggerCreate("gt_AICrippled_Func");
    TriggerAddEventUnitDied(gt_AICrippled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Campaign Tips Q
//--------------------------------------------------------------------------------------------------
bool gt_CampaignTipsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateStorymodeTips();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CampaignTipsQ_Init () {
    gt_CampaignTipsQ = TriggerCreate("gt_CampaignTipsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Tutorial Videos Q
//--------------------------------------------------------------------------------------------------
bool gt_TipTutorialVideosQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/97842D38"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/A9228879"), StringExternal("Param/Value/AC22A39E"), "Assets\\Textures\\ui_icon_attention.dds");
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipTutorialVideosQ_Init () {
    gt_TipTutorialVideosQ = TriggerCreate("gt_TipTutorialVideosQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCV Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_SCVTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2CD2CE5A_g;
    int auto2CD2CE5A_u;
    unit auto2CD2CE5A_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    auto2CD2CE5A_g = UnitGroup("SCV", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2CD2CE5A_u = UnitGroupCount(auto2CD2CE5A_g, c_unitCountAll);
    for (;; auto2CD2CE5A_u -= 1) {
        auto2CD2CE5A_var = UnitGroupUnitFromEnd(auto2CD2CE5A_g, auto2CD2CE5A_u);
        if (auto2CD2CE5A_var == null) { break; }
        UnitFlashSelection(auto2CD2CE5A_var, 1.0);
    }
    libCamp_gf_CreateTipFromConversationState("StoryTips|Raynor02_SCV", libNtve_ge_TipType_NewUnit, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SCVTipQ_Init () {
    gt_SCVTipQ = TriggerCreate("gt_SCVTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vespene Gas Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_VespeneGasTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if (((UnitGroupCount(UnitGroup("Refinery", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (gv_gameOver == true))) {
        return true;
    }

    if ((gv_refineryButtonPressed == false)) {
        if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
            libNtve_gf_AttachModelToUnit(UnitFromId(28), "BriefingUnitSelect", "Ref_Target");
            gv_geyserPing = libNtve_gf_ActorLastCreated();
            UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("TerranBuild", 2), true);
        }

    }

    libCamp_gf_CreateTipFromConversationState("StoryTips|Raynor02_Refinery", libNtve_ge_TipType_NewStructure, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VespeneGasTipQ_Init () {
    gt_VespeneGasTipQ = TriggerCreate("gt_VespeneGasTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tech Lab Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_TechLabTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene) >= 25))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_CreateTipFromConversationState("StoryTips|Raynor02_TechLab", libNtve_ge_TipType_NewStructure, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TechLabTipQ_Init () {
    gt_TechLabTipQ = TriggerCreate("gt_TechLabTipQ_Func");
    TriggerAddEventPlayerPropChange(gt_TechLabTipQ, gv_pLAYER_01_USER, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medic Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_MedicTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeGame);
        if ((UnitGroupCount(UnitGroup("Medic", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
            TriggerQueueEnter();
            if ((gv_gameOver == true)) {
                return true;
            }

            libCamp_gf_CreateTipFromConversationState("StoryTips|Raynor02_Medics", libNtve_ge_TipType_NewUnit, PlayerGroupAll());
            Wait(libCamp_gv_campaignHintDelay, c_timeReal);
            TriggerQueueExit();
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedicTipQ_Init () {
    gt_MedicTipQ = TriggerCreate("gt_MedicTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Caches Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_ResourceCachesTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC467737D_g;
    int autoC467737D_u;
    unit autoC467737D_var;
    unitgroup autoED2B9FB6_g;
    int autoED2B9FB6_u;
    unit autoED2B9FB6_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoC467737D_g = UnitGroup("PalletMinerals", 0, RegionFromId(29), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC467737D_u = UnitGroupCount(autoC467737D_g, c_unitCountAll);
    for (;; autoC467737D_u -= 1) {
        autoC467737D_var = UnitGroupUnitFromEnd(autoC467737D_g, autoC467737D_u);
        if (autoC467737D_var == null) { break; }
        UnitFlashSelection(autoC467737D_var, 5.0);
        libNtve_gf_AttachModelToUnit(autoC467737D_var, "BriefingUnitSelect", "Ref_Center");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.750000");
        Wait(0.4, c_timeGame);
    }
    autoED2B9FB6_g = UnitGroup("PalletGas", 0, RegionFromId(29), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoED2B9FB6_u = UnitGroupCount(autoED2B9FB6_g, c_unitCountAll);
    for (;; autoED2B9FB6_u -= 1) {
        autoED2B9FB6_var = UnitGroupUnitFromEnd(autoED2B9FB6_g, autoED2B9FB6_u);
        if (autoED2B9FB6_var == null) { break; }
        UnitFlashSelection(autoED2B9FB6_var, 5.0);
        libNtve_gf_AttachModelToUnit(autoED2B9FB6_var, "BriefingUnitSelect", "Ref_Center");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.750000");
        Wait(0.4, c_timeGame);
    }
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Raynor02_ResourceCaches", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourceCachesTipQ_Init () {
    gt_ResourceCachesTipQ = TriggerCreate("gt_ResourceCachesTipQ_Func");
    TriggerAddEventUnitRegion(gt_ResourceCachesTipQ, null, RegionFromId(29), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supply Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_SupplyTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesUsed) >= PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesMade)))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Raynor02_Supply", libNtve_ge_TipType_NewStructure, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SupplyTipQ_Init () {
    gt_SupplyTipQ = TriggerCreate("gt_SupplyTipQ_Func");
    TriggerAddEventPlayerPropChange(gt_SupplyTipQ, gv_pLAYER_01_USER, c_playerPropSuppliesUsed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - Medic Trained
//--------------------------------------------------------------------------------------------------
bool gt_StatMedicTrained_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "Medic"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_medicsTrained += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatMedicTrained_Init () {
    gt_StatMedicTrained = TriggerCreate("gt_StatMedicTrained_Func");
    TriggerAddEventUnitTrainProgress(gt_StatMedicTrained, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - Barracks Built
//--------------------------------------------------------------------------------------------------
bool gt_StatBarracksBuilt_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "Barracks"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_barracksBuilt = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatBarracksBuilt_Init () {
    gt_StatBarracksBuilt = TriggerCreate("gt_StatBarracksBuilt_Func");
    TriggerAddEventUnitConstructProgress(gt_StatBarracksBuilt, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Pallet Pickups
//--------------------------------------------------------------------------------------------------
bool gt_ResourcePalletPickups_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "PalletMinerals")) {
        gv_palletsCollected += 1;
    }

    if ((UnitGetType(EventUnit()) == "PalletGas")) {
        gv_palletsCollected += 1;
    }

    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_palletsCollected >= gv_numberOfPallets)) {
        AchievementAward(gv_pLAYER_01_USER, "TRaynor02_2");
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourcePalletPickups_Init () {
    gt_ResourcePalletPickups = TriggerCreate("gt_ResourcePalletPickups_Func");
    TriggerAddEventUnitAbility(gt_ResourcePalletPickups, null, AbilityCommand("PickupMinerals100", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_ResourcePalletPickups, null, AbilityCommand("PickupGas100", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, 0), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/30C0C1F4"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Dominion Outpost Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDominionOutpostCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, 0), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerExecute(gt_ObjectiveDestroytheDominionBaseComplete, true, true);
    libCamp_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDominionOutpostCompleted_Init () {
    gt_VictoryDominionOutpostCompleted = TriggerCreate("gt_VictoryDominionOutpostCompleted_Func");
    TriggerAddEventTimePeriodic(gt_VictoryDominionOutpostCompleted, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitPauseAll(true);
    if ((ObjectiveGetState(gv_objectiveDominionBase) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveRebels) == c_objectiveStateCompleted)) {
        AchievementAward(gv_pLAYER_01_USER, "TRaynor02_1");
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1) && (TimerGetRemaining(gv_achievementHardTimer) != 0.0)) {
        AchievementAward(gv_pLAYER_01_USER, "TRaynor02_3");
    }

    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_barracksBuilt == false)) {
        AchievementAward(gv_pLAYER_01_USER, "Anniversary_TRaynor02");
        TriggerDebugOutput(1, StringExternal("Param/Value/426DB1C2"), false);
    }

    VictoryPanelAddAchievement("TRaynor02_1");
    VictoryPanelAddAchievement("TRaynor02_2");
    VictoryPanelAddAchievement("TRaynor02_3");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsTrainedCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddTrackedStatistic("StructuresBuiltCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/8A2F86ED"), IntToText(gv_medicsTrained));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/F60E71B0"), (IntToText(gv_palletsCollected) + StringExternal("Param/Value/E1E7A872") + IntToText(gv_numberOfPallets)));
    libCamp_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    libCamp_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy the Dominion Base Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroytheDominionBaseCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveCreate(StringExternal("Param/Value/F014BD9E"), StringExternal("Param/Value/1834D61B"), c_objectiveStateActive, true);
    gv_objectiveDominionBase = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TRaynor02Objective1, ObjectiveLastCreated(), StringExternal("Param/Value/DE4A6E49"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroytheDominionBaseCreate_Init () {
    gt_ObjectiveDestroytheDominionBaseCreate = TriggerCreate("gt_ObjectiveDestroytheDominionBaseCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy the Dominion Base Discover Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroytheDominionBaseDiscoverQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroytheDominionBaseCreate, true, true);
    TriggerQueueEnter();
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(8), 8.0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(553), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    gv_dominionBasePing = PingLastCreated();
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/C2FBFDD1"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroytheDominionBaseDiscoverQ_Init () {
    gt_ObjectiveDestroytheDominionBaseDiscoverQ = TriggerCreate("gt_ObjectiveDestroytheDominionBaseDiscoverQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy the Dominion Base Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroytheDominionBaseComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroytheDominionBaseCreate, true, false);
    ObjectiveSetState(gv_objectiveDominionBase, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    PingDestroy(gv_dominionBasePing);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroytheDominionBaseComplete_Init () {
    gt_ObjectiveDestroytheDominionBaseComplete = TriggerCreate("gt_ObjectiveDestroytheDominionBaseComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Rebels Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRebelsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveCreate(StringExternal("Param/Value/CF60F8FD"), StringExternal("Param/Value/5E553DF6"), c_objectiveStateActive, false);
    gv_objectiveRebels = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TRaynor02Objective2, ObjectiveLastCreated(), StringExternal("Param/Value/2C1A7BF3"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(577), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    gv_rebelPing = PingLastCreated();
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/2192741C"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRebelsCreate_Init () {
    gt_ObjectiveRebelsCreate = TriggerCreate("gt_ObjectiveRebelsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Rebels Discover
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRebelsDiscover_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveRebelsCreate, true, true);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRebelsDiscover_Init () {
    gt_ObjectiveRebelsDiscover = TriggerCreate("gt_ObjectiveRebelsDiscover_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Rebels Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRebelsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveRebelsCreate, true, false);
    ObjectiveShow(gv_objectiveRebels, PlayerGroupAll(), true);
    ObjectiveSetState(gv_objectiveRebels, c_objectiveStateCompleted);
    PingDestroy(gv_rebelPing);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRebelsComplete_Init () {
    gt_ObjectiveRebelsComplete = TriggerCreate("gt_ObjectiveRebelsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Rebels Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRebelsFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveRebels) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveRebelsCreate, true, false);
    ObjectiveSetState(gv_objectiveRebels, c_objectiveStateFailed);
    PingDestroy(gv_rebelPing);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRebelsFailed_Init () {
    gt_ObjectiveRebelsFailed = TriggerCreate("gt_ObjectiveRebelsFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_StartGame);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    gv_inCinematic = true;
    gv_gameOver = true;
    AITimePause(true);
    GameTimeOfDayPause(true);
    GameSetBackground(c_backgroundFixed, "MarSaraSkyBox", 100.0);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_BriefingScene00, true, true);
    TriggerExecute(gt_BriefingScene01, true, true);
    TriggerExecute(gt_BriefingScene02, true, true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6AA43B43_g;
    int auto6AA43B43_u;
    unit auto6AA43B43_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto6AA43B43_g = UnitGroup("SCV", gv_pLAYER_02_DOMINION, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6AA43B43_u = UnitGroupCount(auto6AA43B43_g, c_unitCountAll);
    for (;; auto6AA43B43_u -= 1) {
        auto6AA43B43_var = UnitGroupUnitFromEnd(auto6AA43B43_g, auto6AA43B43_u);
        if (auto6AA43B43_var == null) { break; }
        UnitIssueOrder(auto6AA43B43_var, OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), libNtve_gf_ClosestUnitToPoint(UnitGetPosition(auto6AA43B43_var), UnitGroup("MineralField", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0))), c_orderQueueReplace);
    }
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(155), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(187), (SoundLengthSync(SoundLink("TRaynor02BriefingRaynor00001", 0)) + SoundLengthSync(SoundLink("TRaynor02BriefingTychus00002", 0))), -1, 10, true);
    MovieStartRecording("Briefing_Video_TRaynor02_00");
    SoundPlay(SoundLink("TRaynor02BriefingRaynor00001", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("TRaynor02BriefingRaynor00001", 0)), c_timeReal);
    SoundPlay(SoundLink("TRaynor02BriefingTychus00002", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("TRaynor02BriefingTychus00002", 0)), c_timeReal);
    Wait((0.5 * (SoundLengthSync(SoundLink("TRaynor02BriefingRaynor00001", 0)) + SoundLengthSync(SoundLink("TRaynor02BriefingTychus00002", 0)))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00_Init () {
    gt_BriefingScene00 = TriggerCreate("gt_BriefingScene00_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(194), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    MovieStartRecording("Briefing_Video_TRaynor02_01");
    SoundPlay(SoundLink("TRaynor02BriefingTychus00003", 0), PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_LowerCrane, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(200), (SoundLengthSync(SoundLink("TRaynor02BriefingTychus00003", 0)) + (SoundLengthSync(SoundLink("TRaynor02BriefingRaynor00004", -1)) - 1.0)), -1, 10, true);
    Wait((SoundLengthSync(SoundLink("TRaynor02BriefingTychus00003", 0)) - 0.0), c_timeReal);
    SoundPlay(SoundLink("TRaynor02BriefingRaynor00004", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("TRaynor02BriefingRaynor00004", 0)), c_timeReal);
    SoundPlay(SoundLink("TRaynor02BriefingTychus00005", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("TRaynor02BriefingTychus00005", 0)), c_timeReal);
    Wait((0.5 * (SoundLengthSync(SoundLink("TRaynor02BriefingTychus00003", 0)) + (SoundLengthSync(SoundLink("TRaynor02BriefingRaynor00004", 0)) + SoundLengthSync(SoundLink("TRaynor02BriefingTychus00005", 0))))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01_Init () {
    gt_BriefingScene01 = TriggerCreate("gt_BriefingScene01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 02
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(202), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(434), (SoundLengthSync(SoundLink("TRaynor02BriefingRaynor00006", 0)) - 1.0), -1, 10, true);
    MovieStartRecording("Briefing_Video_TRaynor02_02");
    SoundPlay(SoundLink("TRaynor02BriefingRaynor00006", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.5 * SoundLengthSync(SoundLink("TRaynor02BriefingRaynor00006", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene02_Init () {
    gt_BriefingScene02 = TriggerCreate("gt_BriefingScene02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lower Crane
//--------------------------------------------------------------------------------------------------
bool gt_LowerCrane_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "TRaynor02MineLift", c_animNameDefault, "Stand Work End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(5.0, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "TRaynor02MineLift", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LowerCrane_Init () {
    gt_LowerCrane = TriggerCreate("gt_LowerCrane_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5F902E30_g;
    int auto5F902E30_u;
    unit auto5F902E30_var;
    unitgroup auto699F5875_g;
    int auto699F5875_u;
    unit auto699F5875_var;
    unitgroup auto29CC7B0A_g;
    int auto29CC7B0A_u;
    unit auto29CC7B0A_var;
    unitgroup auto89BCB8F3_g;
    int auto89BCB8F3_u;
    unit auto89BCB8F3_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "TRaynor02MineLift", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    ActorSend(ActorFrom("::global.artifact"), "SetVisibility 1");
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    GameSetBackground(c_backgroundFixed, "MarSaraSkyBox", 100.0);
    AITimePause(true);
    auto5F902E30_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5F902E30_u = UnitGroupCount(auto5F902E30_g, c_unitCountAll);
    for (;; auto5F902E30_u -= 1) {
        auto5F902E30_var = UnitGroupUnitFromEnd(auto5F902E30_g, auto5F902E30_u);
        if (auto5F902E30_var == null) { break; }
        UnitRemove(auto5F902E30_var);
    }
    auto699F5875_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto699F5875_u = UnitGroupCount(auto699F5875_g, c_unitCountAll);
    for (;; auto699F5875_u -= 1) {
        auto699F5875_var = UnitGroupUnitFromEnd(auto699F5875_g, auto699F5875_u);
        if (auto699F5875_var == null) { break; }
        UnitRemove(auto699F5875_var);
    }
    auto29CC7B0A_g = UnitGroupAlliance(gv_pLAYER_02_DOMINION, c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto29CC7B0A_u = UnitGroupCount(auto29CC7B0A_g, c_unitCountAll);
    for (;; auto29CC7B0A_u -= 1) {
        auto29CC7B0A_var = UnitGroupUnitFromEnd(auto29CC7B0A_g, auto29CC7B0A_u);
        if (auto29CC7B0A_var == null) { break; }
        UnitRemove(auto29CC7B0A_var);
    }
    auto89BCB8F3_g = UnitGroupAlliance(gv_pLAYER_02_DOMINION, c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto89BCB8F3_u = UnitGroupCount(auto89BCB8F3_g, c_unitCountAll);
    for (;; auto89BCB8F3_u -= 1) {
        auto89BCB8F3_var = UnitGroupUnitFromEnd(auto89BCB8F3_g, auto89BCB8F3_u);
        if (auto89BCB8F3_var == null) { break; }
        UnitRemove(auto89BCB8F3_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_craneMarines;
    int lv_portrait;

    // Automatic Variable Declarations
    unitgroup auto5CDEE1E7_g;
    int auto5CDEE1E7_u;
    unit auto5CDEE1E7_var;

    // Variable Initialization
    lv_craneMarines = UnitGroupEmpty();
    lv_portrait = c_invalidPortraitId;

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerScoreValueEnable(gv_pLAYER_01_USER, "UnitsTrainedCount", false);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER_01_USER, PointFromId(1308));
    UnitGroupAdd(lv_craneMarines, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER_01_USER, PointFromId(1309));
    UnitGroupAdd(lv_craneMarines, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER_01_USER, PointFromId(1310));
    UnitGroupAdd(lv_craneMarines, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER_01_USER, PointFromId(1311));
    UnitGroupAdd(lv_craneMarines, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER_01_USER, PointFromId(1312));
    UnitGroupAdd(lv_craneMarines, UnitLastCreated());
    TriggerExecute(gt_VictoryMarinePatrol, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(748), 0.0, -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_victoryCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(1.0, c_timeReal);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TRaynor02MusicOutro", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    auto5CDEE1E7_g = lv_craneMarines;
    auto5CDEE1E7_u = UnitGroupCount(auto5CDEE1E7_g, c_unitCountAll);
    for (;; auto5CDEE1E7_u -= 1) {
        auto5CDEE1E7_var = UnitGroupUnitFromEnd(auto5CDEE1E7_g, auto5CDEE1E7_u);
        if (auto5CDEE1E7_var == null) { break; }
        UnitIssueOrder(auto5CDEE1E7_var, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(auto5CDEE1E7_var), 1.0, Point(47.0, 77.0))), c_orderQueueReplace);
    }
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(579), (SoundLengthSync(SoundLink("TRaynor02Adjutant00066", 0)) - 1.0), -1, 10, true);
    Wait(1.0, c_timeReal);
    // Transmission - SoundLink("TRaynor02Adjutant00066", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor02Adjutant00066", 0), c_transmissionDurationAdd, 0.0, true);
    TriggerExecute(gt_RaiseCrane, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(580), SoundLengthSync(SoundLink("TRaynor02Tychus00067", 0)), -1, 10, true);
    // Transmission - SoundLink("TRaynor02Tychus00067", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor02Tychus00067", 0), c_transmissionDurationAdd, 0.0, true);
    gv_victoryCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victoryCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(lv_fadeDuration, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuratioin;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raise Crane
//--------------------------------------------------------------------------------------------------
bool gt_RaiseCrane_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 0.0);
    Wait(2.0, c_timeGame);
    SoundPlay(SoundLink("Doodad_TRaynor02DigSiteCraneRaise", 0), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "TRaynor02MineLift", c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(5.0, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "TRaynor02MineLift", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaiseCrane_Init () {
    gt_RaiseCrane = TriggerCreate("gt_RaiseCrane_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Marine Patrol
//--------------------------------------------------------------------------------------------------
bool gt_VictoryMarinePatrol_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit[5] lv_marineUnits;
    point[5] lv_marinePoints1;
    point[5] lv_marinePoints2;
    int lv_i;

    // Automatic Variable Declarations
    const int auto9137C3C2_ae = 4;
    const int auto9137C3C2_ai = 1;
    const int autoD9070CF7_ae = 4;
    const int autoD9070CF7_ai = 1;
    const int auto275BE933_ae = 4;
    const int auto275BE933_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (auto9137C3C2_ai >= 0 && lv_i <= auto9137C3C2_ae) || (auto9137C3C2_ai < 0 && lv_i >= auto9137C3C2_ae) ) ; lv_i += auto9137C3C2_ai ) {
        lv_marinePoints1[lv_i] = PointWithOffsetPolar(PointFromId(1306), 1.0, (IntToFixed(lv_i) * 90.0));
        lv_marinePoints2[lv_i] = PointWithOffsetPolar(PointFromId(1307), 1.0, (IntToFixed(lv_i) * 90.0));
        UnitCreate(1, "Marine", 0, gv_pLAYER_01_USER, lv_marinePoints1[1], 225.0);
        lv_marineUnits[lv_i] = UnitLastCreated();
    }
    while (true) {
        if ((UnitGroupCount(UnitGroup("Marine", gv_pLAYER_01_USER, RegionCircle(PointFromId(1306), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            Wait(1.0, c_timeGame);
            lv_i = 1;
            for ( ; ( (autoD9070CF7_ai >= 0 && lv_i <= autoD9070CF7_ae) || (autoD9070CF7_ai < 0 && lv_i >= autoD9070CF7_ae) ) ; lv_i += autoD9070CF7_ai ) {
                UnitIssueOrder(lv_marineUnits[lv_i], OrderTargetingPoint(AbilityCommand("move", 0), lv_marinePoints2[lv_i]), c_orderQueueReplace);
            }
        }

        if ((UnitGroupCount(UnitGroup("Marine", gv_pLAYER_01_USER, RegionCircle(PointFromId(1307), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            Wait(3.0, c_timeGame);
            lv_i = 1;
            for ( ; ( (auto275BE933_ai >= 0 && lv_i <= auto275BE933_ae) || (auto275BE933_ai < 0 && lv_i >= auto275BE933_ae) ) ; lv_i += auto275BE933_ai ) {
                UnitIssueOrder(lv_marineUnits[lv_i], OrderTargetingPoint(AbilityCommand("move", 0), lv_marinePoints1[lv_i]), c_orderQueueReplace);
            }
        }

        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryMarinePatrol_Init () {
    gt_VictoryMarinePatrol = TriggerCreate("gt_VictoryMarinePatrol_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04Music_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_IntroSequence_Init();
    gt_StartGame_Init();
    gt_InitialOrderGiven_Init();
    gt_TutorialReviewQ_Init();
    gt_BuildMarinesandSCVsQ_Init();
    gt_ProdQ_Init();
    gt_SupplySafetyQ_Init();
    gt_SupplySafetyCreateDrop_Init();
    gt_SupplySafetyTXT_Init();
    gt_SupplySafetyTXTkiller_Init();
    gt_DropshipRemover_Init();
    gt_SCVSafetySpawnQ_Init();
    gt_SCVSafetyCreateDrop_Init();
    gt_SCVSafetyTXT_Init();
    gt_SCVSafetyTXTkiller_Init();
    gt_SCVCargoUnload_Init();
    gt_SupplyDepotLoweredRaised_Init();
    gt_SupplyDepotBuilt_Init();
    gt_BarracksBuilt_Init();
    gt_SCVTrained_Init();
    gt_MedicTrained_Init();
    gt_BuildRefineryButtonPressed_Init();
    gt_BuildSCVButtonPressed_Init();
    gt_BuildMarineButtonPressed_Init();
    gt_DominionAttackerSquads_Init();
    gt_MedicEnergy_Init();
    gt_RebelsTriggeredProximity_Init();
    gt_RebelsTriggeredMarineCount_Init();
    gt_RebelsTriggeredQ_Init();
    gt_RebelsCompleteQ_Init();
    gt_RebelsDestroyed_Init();
    gt_RebelsRescuedQ_Init();
    gt_Colonist1Q_Init();
    gt_Colonist2Q_Init();
    gt_Colonist3Q_Init();
    gt_Colonist4Q_Init();
    gt_Colonist5Q_Init();
    gt_Colonist6Q_Init();
    gt_Colonist7Q_Init();
    gt_DominonGuardsInitialization_Init();
    gt_DominionGuards1_Init();
    gt_DominionGuards2_Init();
    gt_HellionAttack_Init();
    gt_HellionQ_Init();
    gt_MineGuardsActivate_Init();
    gt_MineGuardsLoop_Init();
    gt_MineGuardsDefeated_Init();
    gt_Despawning_Init();
    gt_MarineTauntQ_Init();
    gt_BunkerDeathQ_Init();
    gt_BarracksFactoryQ_Init();
    gt_ArtifactReveal_Init();
    gt_RockMiners_Init();
    gt_MinerLeft_Init();
    gt_MinerTop_Init();
    gt_MinerRight_Init();
    gt_MinerDespawn_Init();
    gt_StartAI_Init();
    gt_StartUpgradesH_Init();
    gt_StartUpgradesI_Init();
    gt_DominionAttackWaves_Init();
    gt_DominionRebelResponseWave_Init();
    gt_AttackWaveDivert_Init();
    gt_AIMinerals_Init();
    gt_AIGas_Init();
    gt_AICrippled_Init();
    gt_CampaignTipsQ_Init();
    gt_TipTutorialVideosQ_Init();
    gt_SCVTipQ_Init();
    gt_VespeneGasTipQ_Init();
    gt_TechLabTipQ_Init();
    gt_MedicTipQ_Init();
    gt_ResourceCachesTipQ_Init();
    gt_SupplyTipQ_Init();
    gt_StatMedicTrained_Init();
    gt_StatBarracksBuilt_Init();
    gt_ResourcePalletPickups_Init();
    gt_DefeatBaseDead_Init();
    gt_VictoryDominionOutpostCompleted_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_ObjectiveDestroytheDominionBaseCreate_Init();
    gt_ObjectiveDestroytheDominionBaseDiscoverQ_Init();
    gt_ObjectiveDestroytheDominionBaseComplete_Init();
    gt_ObjectiveRebelsCreate_Init();
    gt_ObjectiveRebelsDiscover_Init();
    gt_ObjectiveRebelsComplete_Init();
    gt_ObjectiveRebelsFailed_Init();
    gt_BriefingQ_Init();
    gt_BriefingScene00_Init();
    gt_BriefingScene01_Init();
    gt_BriefingScene02_Init();
    gt_LowerCrane_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_RaiseCrane_Init();
    gt_VictoryMarinePatrol_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
