//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Welcome to the Jungle
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/CampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libCamp_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_p1_USER = 1;
const int gv_p2_PROTOSS_EAST_ATTACKERS = 2;
const int gv_p3_PROTOSS_SCRIPTED = 3;
const int gv_p4_PROTOSS_WEST_ESCORTS = 4;
const int gv_p5_TERRAZINE = 5;

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_PRESET_MultipleTerrazineSealingState_Disabled = 0;
const int ge_PRESET_MultipleTerrazineSealingState_Enabled = 1;
const int ge_PRESET_MultipleTerrazineSealingState_Completed = 2;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_inCinematic;
unit gv_superWarpGateP3NoAI;
unit[14] gv_terrazineNodes;
wave[14][3] gv_terrazineAttackWaves;
region[7] gv_terrazineRegions;
playergroup gv_protossPlayerGroup;
unitgroup gv_harvestingSpeedBumpNWBullies;
unitgroup gv_harvestingSpeedBumpCentralBullies;
timer gv_protossAggroTimer;
unit[4] gv_nEDefenders;
point[4] gv_nEDefenderPositions;
unitgroup gv_nEDefendersGroup;
int gv_numberOfNEDefenders;
unit gv_terrazineHarvesting;
int gv_gasControlCount;
int gv_gasHarvestingCount;
int gv_sCVsKilledWhileHarvesting;
point gv_sCVKilledAlertPosition;
unit gv_sCVGoingHome;
unit gv_droppedCargoFlashUnit;
int gv_playerScore;
int[14] gv_playerHarvesterPings;
unitgroup gv_probeHarvesters;
int gv_probesThwarted;
int gv_multipleTerrazineSealingState;
int gv_multipleTerrazineSealingFirstTarget;
int gv_protossScore;
int[14] gv_protossHarvesterPings;
int gv_protossThreatLevel;
int gv_statSCVsLost;
int gv_primaryObjectiveGetGas;
int gv_primaryObjectiveStopProtossGas;
int gv_playerCollectionQuota;
int gv_protossCollectionQuota;
int gv_bonusObjectiveCollectRelics;
int gv_bonusObjectiveCollectRelicsNeeded;
int gv_bonusObjectiveCollectRelicsFound;
unit gv_victoryTerrazine;
bool gv_victoryCinematicCompleted;

void InitGlobals () {
    gv_protossPlayerGroup = PlayerGroupEmpty();
    gv_harvestingSpeedBumpNWBullies = UnitGroupEmpty();
    gv_harvestingSpeedBumpCentralBullies = UnitGroupEmpty();
    gv_protossAggroTimer = TimerCreate();
    gv_nEDefendersGroup = UnitGroupEmpty();
    gv_probeHarvesters = UnitGroupEmpty();
    gv_protossThreatLevel = 1;
    gv_primaryObjectiveGetGas = c_invalidObjectiveId;
    gv_primaryObjectiveStopProtossGas = c_invalidObjectiveId;
    gv_bonusObjectiveCollectRelics = c_invalidObjectiveId;
    gv_victoryTerrazine = UnitFromId(311);
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_AddFriendlyWavepoints (int lp_terrazineIndex);
void gf_AITerrazineHarvestAttempt (int lp_primaryTerrazineIndex, int lp_secondaryRegionSearchIndex);
fixed gf_CalculateOffset (fixed lp_real);
int gf_GetClosestRawTerrazineToProtoss (int lp_regionToCheck);
int gf_GetClosestDroppedTerrazineToProtoss ();
unit gf_GetClosestProbeToNode (int lp_canisterHarvestTargetIndex);
unit gf_NodeMatchingCustomValue (int lp_param_TerrazineIndex);
void gf_ResearchForAllProtoss (string lp_upgrade);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03VariablesUnits;
trigger gt_Init04Music;
trigger gt_Init05Environment;
trigger gt_Init06Difficulty;
trigger gt_Init07Help;
trigger gt_IntroSequence;
trigger gt_StartGame;
trigger gt_GoliathandGatherTerrazineTipsQ;
trigger gt_CampaignTipsQ;
trigger gt_PingTerrazineonMinimapandReveal;
trigger gt_ProtossAggroViaLeavingPlayerBase;
trigger gt_ProtossAggroViaTimer;
trigger gt_ProtossAggroLineQ;
trigger gt_ProtossAggroBullies;
trigger gt_StartRain;
trigger gt_HarvestingSpeedBumpsNWesternTerritory;
trigger gt_HarvestingSpeedBumpsCentralTerritory;
trigger gt_InitNERelicDefenders;
trigger gt_NEDefenderScriptedAI;
trigger gt_NEDefenderDeath;
trigger gt_NEDefenderSpawned;
trigger gt_NEVoidRays;
trigger gt_Playerstartsharvestingterrazine;
trigger gt_ProtossmediumretaliationannounceQ;
trigger gt_ProtossheavyretaliationannounceQ;
trigger gt_SCViskilledwhileharvesting;
trigger gt_TiptoprotectSCVsQ;
trigger gt_SCVharvestingmanuallystopped;
trigger gt_PlayertriestoharvestmultiplecanistersatonceQ;
trigger gt_SCVisheadinghomewithterrazine;
trigger gt_FirstTerrazineReturnQ;
trigger gt_SCVwithterrazinediesonreturntrip;
trigger gt_DroppedterrazinecargoQ;
trigger gt_Playerhasclaimedterrazine;
trigger gt_Playerharvested1NodeQ;
trigger gt_Playerharvested3NodeQ;
trigger gt_Playerharvested4NodeQ;
trigger gt_Playerharvested6NodeQ;
trigger gt_ProtosssealingterrazineQ;
trigger gt_ProtossstartssealingfirstterrazinenodeQ;
trigger gt_Protossprobegoesidleterrazineharvestedbyplayer;
trigger gt_Probeiskilledwhileharvesting;
trigger gt_Probehassealedtheterrazine;
trigger gt_MultipleTerrazineSealingAttempt;
trigger gt_Protossseal3shrinesQ;
trigger gt_Protossseal5shrinesQ;
trigger gt_Protossseal6shrinesQ;
trigger gt_StartAI;
trigger gt_AIP2AttackWaves;
trigger gt_AITerrazineSealingEN;
trigger gt_AITerrazineSealingH;
trigger gt_AITerrazineSealingI;
trigger gt_AIResourcesMinerals;
trigger gt_AIResourcesGas;
trigger gt_StatSCVsLost;
trigger gt_VictoryProtossDestroyed;
trigger gt_ProtossDestroyedQ;
trigger gt_VictoryTerrazineCollected;
trigger gt_Victory;
trigger gt_DefeatBaseDead;
trigger gt_DefeatProtossSealedTooManyTerrazine;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_PrimaryObjectiveCollectTerrazineCreateQ;
trigger gt_PrimaryObjectiveCollectTerrazineCompleted;
trigger gt_PrimaryObjectiveCollectTerrazineUpdate;
trigger gt_ObjectiveRelicProximityEnabler;
trigger gt_ObjectiveRelicsCreateQ;
trigger gt_ObjectiveRelicUpdate;
trigger gt_BriefingQ;
trigger gt_BriefingScene00;
trigger gt_BriefingScene01;
trigger gt_BriefingScene01Action;
trigger gt_BriefingScene02;
trigger gt_BriefingScene02Action;
trigger gt_BriefingScene03;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_AddFriendlyWavepoints (int lp_terrazineIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((libNtve_gf_DifficultyValueInt(1, 1, 1, 0) == 1)) {
        if (((lp_terrazineIndex == 13) || (lp_terrazineIndex == 8) || (lp_terrazineIndex == 5) || (lp_terrazineIndex == 3) || (lp_terrazineIndex == 12))) {
            AIAttackWaveAddWaypoint(gv_p4_PROTOSS_WEST_ESCORTS, PointFromId(2076), false);
        }

        if ((libNtve_gf_DifficultyValueInt(1, 1, 1, 0) == 1) && ((lp_terrazineIndex == 7) || (lp_terrazineIndex == 9) || (lp_terrazineIndex == 4) || (lp_terrazineIndex == 1))) {
            AIAttackWaveAddWaypoint(gv_p4_PROTOSS_WEST_ESCORTS, PointFromId(2077), false);
        }

        if ((libNtve_gf_DifficultyValueInt(1, 1, 1, 0) == 1) && ((lp_terrazineIndex == 10) || (lp_terrazineIndex == 11))) {
            AIAttackWaveAddWaypoint(gv_p4_PROTOSS_WEST_ESCORTS, PointFromId(2079), false);
        }

        if ((libNtve_gf_DifficultyValueInt(1, 1, 1, 0) == 1) && ((lp_terrazineIndex == 6) || (lp_terrazineIndex == 2))) {
            AIAttackWaveAddWaypoint(gv_p4_PROTOSS_WEST_ESCORTS, PointFromId(2080), false);
            AIAttackWaveAddWaypoint(gv_p4_PROTOSS_WEST_ESCORTS, PointFromId(2078), false);
        }

    }

}

void gf_AITerrazineHarvestAttempt (int lp_primaryTerrazineIndex, int lp_secondaryRegionSearchIndex) {
    // Variable Declarations
    unit lv_harvestingProbe;
    int lv_targetTerrazineIndex;
    fixed lv_offsetAngle;
    int lv_escortCount;
    int lv_i;
    unitgroup lv_terrazineGroup;

    // Automatic Variable Declarations
    const int auto16557ECF_ae = 6;
    int auto16557ECF_var;
    unitgroup autoD682E799_g;
    int autoD682E799_u;
    unit autoD682E799_var;
    int autoD1A8BB6F_val;
    int auto7291BAD7_ae;
    const int auto7291BAD7_ai = 1;
    int autoD3883E60_ae;
    const int autoD3883E60_ai = 1;
    int auto4A5B622D_ae;
    const int auto4A5B622D_ai = 1;
    int auto3E772D7A_ae;
    const int auto3E772D7A_ai = 1;
    int auto3D79AC45_ae;
    const int auto3D79AC45_ai = 1;
    int autoAE209E35_ae;
    const int autoAE209E35_ai = 1;
    int autoC2C70BA9_ae;
    const int autoC2C70BA9_ai = 1;
    int autoF7DDB999_ae;
    const int autoF7DDB999_ai = 1;
    int autoF6D145CD_ae;
    const int autoF6D145CD_ai = 1;
    int auto0D7B1014_ae;
    const int auto0D7B1014_ai = 1;

    // Variable Initialization
    lv_terrazineGroup = UnitGroupEmpty();

    // Implementation
    lv_targetTerrazineIndex = 0;
    if ((UnitIsAlive(gv_terrazineNodes[lp_primaryTerrazineIndex]) == true) && (UnitGetCustomValue(gv_terrazineNodes[lp_primaryTerrazineIndex], 4) < 1.0)) {
        lv_targetTerrazineIndex = lp_primaryTerrazineIndex;
    }
    else {
        auto16557ECF_var = lp_secondaryRegionSearchIndex;
        for ( ; auto16557ECF_var <= auto16557ECF_ae; auto16557ECF_var += 1 ) {
            lv_targetTerrazineIndex = gf_GetClosestRawTerrazineToProtoss(auto16557ECF_var);
            if ((lv_targetTerrazineIndex != 0)) {
                break;
            }

        }
    }
    if ((lv_targetTerrazineIndex == 0)) {
        lv_terrazineGroup = UnitGroup("TerrazineNode", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoD682E799_g = lv_terrazineGroup;
        autoD682E799_u = UnitGroupCount(autoD682E799_g, c_unitCountAll);
        for (;; autoD682E799_u -= 1) {
            autoD682E799_var = UnitGroupUnitFromEnd(autoD682E799_g, autoD682E799_u);
            if (autoD682E799_var == null) { break; }
            if ((UnitGetCustomValue(autoD682E799_var, 4) > 1.0)) {
                UnitGroupRemove(lv_terrazineGroup, autoD682E799_var);
            }

        }
        lv_targetTerrazineIndex = FixedToInt(UnitGetCustomValue(UnitGroupRandomUnit(lv_terrazineGroup, c_unitCountAlive), 0));
    }

    if ((lv_targetTerrazineIndex == 0)) {
        lv_targetTerrazineIndex = gf_GetClosestDroppedTerrazineToProtoss();
    }

    if ((lv_targetTerrazineIndex == 0)) {
        lv_targetTerrazineIndex = FixedToInt(UnitGetCustomValue(UnitGroupRandomUnit(UnitGroup("TerrazineCanister", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive), 0));
    }

    if ((lv_targetTerrazineIndex == 0)) {
        return ;
    }

    if ((gv_multipleTerrazineSealingState == ge_PRESET_MultipleTerrazineSealingState_Enabled)) {
        gv_multipleTerrazineSealingState = ge_PRESET_MultipleTerrazineSealingState_Completed;
        gv_multipleTerrazineSealingFirstTarget = lv_targetTerrazineIndex;
        TriggerExecute(gt_MultipleTerrazineSealingAttempt, true, false);
    }

    lv_harvestingProbe = gf_GetClosestProbeToNode(lv_targetTerrazineIndex);
    if ((lv_harvestingProbe == null)) {
        return ;
    }

    UnitIssueOrder(lv_harvestingProbe, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(lv_harvestingProbe, Order(AbilityCommand("ProbeHarvest", 1)), c_orderQueueAddToEnd);
    UnitIssueOrder(lv_harvestingProbe, OrderTargetingUnit(AbilityCommand("ProbeHarvest", 0), gf_NodeMatchingCustomValue(lv_targetTerrazineIndex)), c_orderQueueAddToEnd);
    UnitGroupAdd(gv_probeHarvesters, lv_harvestingProbe);
    UnitSetCustomValue(lv_harvestingProbe, 2, IntToFixed(lv_targetTerrazineIndex));
    UnitSetCustomValue(lv_harvestingProbe, 3, IntToFixed(lp_secondaryRegionSearchIndex));
    autoD1A8BB6F_val = gv_protossThreatLevel;
    if (autoD1A8BB6F_val == 1) {
        AIAttackWaveSetTargetEscortNL(gv_p4_PROTOSS_WEST_ESCORTS, libNtve_gf_ConvertUnitToUnitGroup(lv_harvestingProbe), 0);
        AIAttackWaveAddUnits4(1, 1, 2, 2, "Stalker");
        AIAttackWaveSend(gv_p4_PROTOSS_WEST_ESCORTS, 0, false);
        AIAttackWaveSetTargetEscortNL(gv_p4_PROTOSS_WEST_ESCORTS, libNtve_gf_ConvertUnitToUnitGroup(lv_harvestingProbe), 0);
        lv_escortCount = libNtve_gf_DifficultyValueInt(1, 1, 2, 3);
        lv_offsetAngle = gf_CalculateOffset(IntToFixed(lv_escortCount));
        auto7291BAD7_ae = lv_escortCount;
        lv_i = 1;
        for ( ; ( (auto7291BAD7_ai >= 0 && lv_i <= auto7291BAD7_ae) || (auto7291BAD7_ai < 0 && lv_i >= auto7291BAD7_ae) ) ; lv_i += auto7291BAD7_ai ) {
            AIAttackWaveAddEscortType(gv_p4_PROTOSS_WEST_ESCORTS, "Scout", lv_harvestingProbe, 3.5, (lv_offsetAngle * IntToFixed(lv_i)));
        }
        AIAttackWaveSend(gv_p4_PROTOSS_WEST_ESCORTS, 0, false);
    }
    else if (autoD1A8BB6F_val == 2) {
        AIAttackWaveSetTargetEscortNL(gv_p4_PROTOSS_WEST_ESCORTS, libNtve_gf_ConvertUnitToUnitGroup(lv_harvestingProbe), 0);
        AIAttackWaveAddUnits4(1, 1, 2, 2, "Stalker");
        AIAttackWaveSend(gv_p4_PROTOSS_WEST_ESCORTS, 0, false);
        AIAttackWaveSetTargetEscortNL(gv_p4_PROTOSS_WEST_ESCORTS, libNtve_gf_ConvertUnitToUnitGroup(lv_harvestingProbe), 0);
        lv_escortCount = libNtve_gf_DifficultyValueInt(2, 2, 3, 3);
        lv_offsetAngle = gf_CalculateOffset(IntToFixed(lv_escortCount));
        autoD3883E60_ae = lv_escortCount;
        lv_i = 1;
        for ( ; ( (autoD3883E60_ai >= 0 && lv_i <= autoD3883E60_ae) || (autoD3883E60_ai < 0 && lv_i >= autoD3883E60_ae) ) ; lv_i += autoD3883E60_ai ) {
            AIAttackWaveAddEscortType(gv_p4_PROTOSS_WEST_ESCORTS, "Scout", lv_harvestingProbe, 3.5, (lv_offsetAngle * IntToFixed(lv_i)));
        }
        AIAttackWaveSend(gv_p4_PROTOSS_WEST_ESCORTS, 0, false);
    }
    else if (autoD1A8BB6F_val == 3) {
        AIAttackWaveSetTargetEscortNL(gv_p4_PROTOSS_WEST_ESCORTS, libNtve_gf_ConvertUnitToUnitGroup(lv_harvestingProbe), 0);
        AIAttackWaveAddUnits4(0, 0, 1, 2, "Stalker");
        AIAttackWaveSend(gv_p4_PROTOSS_WEST_ESCORTS, 0, false);
        AIAttackWaveSetTargetEscortNL(gv_p4_PROTOSS_WEST_ESCORTS, libNtve_gf_ConvertUnitToUnitGroup(lv_harvestingProbe), 0);
        lv_escortCount = libNtve_gf_DifficultyValueInt(2, 2, 3, 3);
        lv_offsetAngle = gf_CalculateOffset(IntToFixed(lv_escortCount));
        auto4A5B622D_ae = lv_escortCount;
        lv_i = 1;
        for ( ; ( (auto4A5B622D_ai >= 0 && lv_i <= auto4A5B622D_ae) || (auto4A5B622D_ai < 0 && lv_i >= auto4A5B622D_ae) ) ; lv_i += auto4A5B622D_ai ) {
            AIAttackWaveAddEscortType(gv_p4_PROTOSS_WEST_ESCORTS, "Scout", lv_harvestingProbe, 3.5, (lv_offsetAngle * IntToFixed(lv_i)));
        }
        lv_escortCount = libNtve_gf_DifficultyValueInt(1, 1, 2, 2);
        lv_offsetAngle = gf_CalculateOffset(IntToFixed(lv_escortCount));
        auto3E772D7A_ae = lv_escortCount;
        lv_i = 1;
        for ( ; ( (auto3E772D7A_ai >= 0 && lv_i <= auto3E772D7A_ae) || (auto3E772D7A_ai < 0 && lv_i >= auto3E772D7A_ae) ) ; lv_i += auto3E772D7A_ai ) {
            AIAttackWaveAddEscortType(gv_p4_PROTOSS_WEST_ESCORTS, "VoidRay", lv_harvestingProbe, 1.5, (lv_offsetAngle * IntToFixed(lv_i)));
        }
        AIAttackWaveSend(gv_p4_PROTOSS_WEST_ESCORTS, 0, false);
    }
    else if (autoD1A8BB6F_val == 4) {
        AIAttackWaveSetTargetEscortNL(gv_p4_PROTOSS_WEST_ESCORTS, libNtve_gf_ConvertUnitToUnitGroup(lv_harvestingProbe), 0);
        AIAttackWaveAddUnits4(1, 1, 2, 2, "Stalker");
        AIAttackWaveSend(gv_p4_PROTOSS_WEST_ESCORTS, 0, false);
        AIAttackWaveSetTargetEscortNL(gv_p4_PROTOSS_WEST_ESCORTS, libNtve_gf_ConvertUnitToUnitGroup(lv_harvestingProbe), 0);
        lv_escortCount = libNtve_gf_DifficultyValueInt(2, 2, 3, 3);
        lv_offsetAngle = gf_CalculateOffset(IntToFixed(lv_escortCount));
        auto3D79AC45_ae = lv_escortCount;
        lv_i = 1;
        for ( ; ( (auto3D79AC45_ai >= 0 && lv_i <= auto3D79AC45_ae) || (auto3D79AC45_ai < 0 && lv_i >= auto3D79AC45_ae) ) ; lv_i += auto3D79AC45_ai ) {
            AIAttackWaveAddEscortType(gv_p4_PROTOSS_WEST_ESCORTS, "Scout", lv_harvestingProbe, 3.5, (lv_offsetAngle * IntToFixed(lv_i)));
        }
        lv_escortCount = libNtve_gf_DifficultyValueInt(1, 1, 2, 2);
        lv_offsetAngle = gf_CalculateOffset(IntToFixed(lv_escortCount));
        autoAE209E35_ae = lv_escortCount;
        lv_i = 1;
        for ( ; ( (autoAE209E35_ai >= 0 && lv_i <= autoAE209E35_ae) || (autoAE209E35_ai < 0 && lv_i >= autoAE209E35_ae) ) ; lv_i += autoAE209E35_ai ) {
            AIAttackWaveAddEscortType(gv_p4_PROTOSS_WEST_ESCORTS, "VoidRay", lv_harvestingProbe, 1.5, (lv_offsetAngle * IntToFixed(lv_i)));
        }
        AIAttackWaveAddUnits4(0, 0, 1, 1, "Observer");
        AIAttackWaveSend(gv_p4_PROTOSS_WEST_ESCORTS, 0, false);
    }
    else if (autoD1A8BB6F_val == 5) {
        AIAttackWaveSetTargetEscortNL(gv_p4_PROTOSS_WEST_ESCORTS, libNtve_gf_ConvertUnitToUnitGroup(lv_harvestingProbe), 0);
        AIAttackWaveAddUnits4(2, 2, 3, 3, "Stalker");
        AIAttackWaveSend(gv_p4_PROTOSS_WEST_ESCORTS, 0, false);
        AIAttackWaveSetTargetEscortNL(gv_p4_PROTOSS_WEST_ESCORTS, libNtve_gf_ConvertUnitToUnitGroup(lv_harvestingProbe), 0);
        lv_escortCount = libNtve_gf_DifficultyValueInt(2, 2, 3, 4);
        lv_offsetAngle = gf_CalculateOffset(IntToFixed(lv_escortCount));
        autoC2C70BA9_ae = lv_escortCount;
        lv_i = 1;
        for ( ; ( (autoC2C70BA9_ai >= 0 && lv_i <= autoC2C70BA9_ae) || (autoC2C70BA9_ai < 0 && lv_i >= autoC2C70BA9_ae) ) ; lv_i += autoC2C70BA9_ai ) {
            AIAttackWaveAddEscortType(gv_p4_PROTOSS_WEST_ESCORTS, "Scout", lv_harvestingProbe, 3.5, (lv_offsetAngle * IntToFixed(lv_i)));
        }
        lv_escortCount = libNtve_gf_DifficultyValueInt(1, 1, 2, 2);
        lv_offsetAngle = gf_CalculateOffset(IntToFixed(lv_escortCount));
        autoF7DDB999_ae = lv_escortCount;
        lv_i = 1;
        for ( ; ( (autoF7DDB999_ai >= 0 && lv_i <= autoF7DDB999_ae) || (autoF7DDB999_ai < 0 && lv_i >= autoF7DDB999_ae) ) ; lv_i += autoF7DDB999_ai ) {
            AIAttackWaveAddEscortType(gv_p4_PROTOSS_WEST_ESCORTS, "VoidRay", lv_harvestingProbe, 1.5, (lv_offsetAngle * IntToFixed(lv_i)));
        }
        AIAttackWaveAddUnits4(0, 1, 1, 1, "Observer");
        AIAttackWaveSend(gv_p4_PROTOSS_WEST_ESCORTS, 0, false);
    }
    else if (autoD1A8BB6F_val == 6) {
        AIAttackWaveSetTargetEscortNL(gv_p4_PROTOSS_WEST_ESCORTS, libNtve_gf_ConvertUnitToUnitGroup(lv_harvestingProbe), 0);
        AIAttackWaveAddUnits4(2, 2, 3, 2, "Stalker");
        AIAttackWaveSend(gv_p4_PROTOSS_WEST_ESCORTS, 0, false);
        AIAttackWaveSetTargetEscortNL(gv_p4_PROTOSS_WEST_ESCORTS, libNtve_gf_ConvertUnitToUnitGroup(lv_harvestingProbe), 0);
        AIAttackWaveAddUnits4(0, 0, 0, 1, "Colossus");
        lv_escortCount = libNtve_gf_DifficultyValueInt(3, 3, 4, 4);
        lv_offsetAngle = gf_CalculateOffset(IntToFixed(lv_escortCount));
        autoF6D145CD_ae = lv_escortCount;
        lv_i = 1;
        for ( ; ( (autoF6D145CD_ai >= 0 && lv_i <= autoF6D145CD_ae) || (autoF6D145CD_ai < 0 && lv_i >= autoF6D145CD_ae) ) ; lv_i += autoF6D145CD_ai ) {
            AIAttackWaveAddEscortType(gv_p4_PROTOSS_WEST_ESCORTS, "Scout", lv_harvestingProbe, 3.5, (lv_offsetAngle * IntToFixed(lv_i)));
        }
        lv_escortCount = libNtve_gf_DifficultyValueInt(1, 1, 2, 2);
        lv_offsetAngle = gf_CalculateOffset(IntToFixed(lv_escortCount));
        auto0D7B1014_ae = lv_escortCount;
        lv_i = 1;
        for ( ; ( (auto0D7B1014_ai >= 0 && lv_i <= auto0D7B1014_ae) || (auto0D7B1014_ai < 0 && lv_i >= auto0D7B1014_ae) ) ; lv_i += auto0D7B1014_ai ) {
            AIAttackWaveAddEscortType(gv_p4_PROTOSS_WEST_ESCORTS, "VoidRay", lv_harvestingProbe, 1.5, (lv_offsetAngle * IntToFixed(lv_i)));
        }
        AIAttackWaveAddUnits4(1, 1, 1, 1, "Observer");
        AIAttackWaveSend(gv_p4_PROTOSS_WEST_ESCORTS, 0, false);
    }
    else {
    }
}

fixed gf_CalculateOffset (fixed lp_real) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_real > 0.0)) {
        return (360.0 / lp_real);
    }

    return 0.0;
}

int gf_GetClosestRawTerrazineToProtoss (int lp_regionToCheck) {
    // Variable Declarations
    int lv_closestNodeIndex;
    fixed lv_closestNodeMinDistance;
    fixed lv_checkDistance;
    unitgroup lv_terrazineGroup;

    // Automatic Variable Declarations
    unitgroup autoA7EA04C4_g;
    int autoA7EA04C4_u;
    unit autoA7EA04C4_var;
    unitgroup auto96AA0583_g;
    int auto96AA0583_u;
    unit auto96AA0583_var;

    // Variable Initialization
    lv_terrazineGroup = UnitGroupEmpty();

    // Implementation
    lv_closestNodeIndex = 0;
    lv_terrazineGroup = UnitGroup("TerrazineNode", c_playerAny, gv_terrazineRegions[lp_regionToCheck], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA7EA04C4_g = lv_terrazineGroup;
    autoA7EA04C4_u = UnitGroupCount(autoA7EA04C4_g, c_unitCountAll);
    for (;; autoA7EA04C4_u -= 1) {
        autoA7EA04C4_var = UnitGroupUnitFromEnd(autoA7EA04C4_g, autoA7EA04C4_u);
        if (autoA7EA04C4_var == null) { break; }
        if ((UnitGetCustomValue(autoA7EA04C4_var, 4) > 1.0)) {
            UnitGroupRemove(lv_terrazineGroup, autoA7EA04C4_var);
        }

    }
    auto96AA0583_g = lv_terrazineGroup;
    auto96AA0583_u = UnitGroupCount(auto96AA0583_g, c_unitCountAll);
    for (;; auto96AA0583_u -= 1) {
        auto96AA0583_var = UnitGroupUnitFromEnd(auto96AA0583_g, auto96AA0583_u);
        if (auto96AA0583_var == null) { break; }
        lv_checkDistance = DistanceBetweenPoints(UnitGetPosition(auto96AA0583_var), PointFromId(13));
        if ((lv_closestNodeMinDistance == 0.0)) {
            lv_closestNodeMinDistance = lv_checkDistance;
            lv_closestNodeIndex = FixedToInt(UnitGetCustomValue(auto96AA0583_var, 0));
        }
        else {
            if ((lv_checkDistance < lv_closestNodeMinDistance)) {
                lv_closestNodeMinDistance = lv_checkDistance;
                lv_closestNodeIndex = FixedToInt(UnitGetCustomValue(auto96AA0583_var, 0));
            }

        }
    }
    return lv_closestNodeIndex;
}

int gf_GetClosestDroppedTerrazineToProtoss () {
    // Variable Declarations
    int lv_closestNodeIndex;
    fixed lv_closestNodeMinDistance;
    fixed lv_checkDistance;

    // Automatic Variable Declarations
    unitgroup auto7CD40DCB_g;
    int auto7CD40DCB_u;
    unit auto7CD40DCB_var;

    // Variable Initialization

    // Implementation
    lv_closestNodeIndex = 0;
    auto7CD40DCB_g = UnitGroup("TerrazineCanister", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7CD40DCB_u = UnitGroupCount(auto7CD40DCB_g, c_unitCountAll);
    for (;; auto7CD40DCB_u -= 1) {
        auto7CD40DCB_var = UnitGroupUnitFromEnd(auto7CD40DCB_g, auto7CD40DCB_u);
        if (auto7CD40DCB_var == null) { break; }
        lv_checkDistance = DistanceBetweenPoints(UnitGetPosition(auto7CD40DCB_var), PointFromId(13));
        if ((lv_closestNodeMinDistance == 0.0)) {
            lv_closestNodeMinDistance = lv_checkDistance;
            lv_closestNodeIndex = FixedToInt(UnitGetCustomValue(auto7CD40DCB_var, 0));
        }
        else {
            if ((lv_checkDistance < lv_closestNodeMinDistance)) {
                lv_closestNodeMinDistance = lv_checkDistance;
                lv_closestNodeIndex = FixedToInt(UnitGetCustomValue(auto7CD40DCB_var, 0));
            }

        }
    }
    return lv_closestNodeIndex;
}

unit gf_GetClosestProbeToNode (int lp_canisterHarvestTargetIndex) {
    // Variable Declarations
    unit lv_probe01;
    unit lv_probe02;
    fixed lv_probe01DistanceToCanister;
    fixed lv_probe02DistanceToCanister;
    unit lv_probeFallback;
    unit lv_canisterHarvestTarget;
    unit lv_pickedUnit;

    // Automatic Variable Declarations
    unitgroup auto8AAC8CF7_g;
    int auto8AAC8CF7_u;

    // Variable Initialization

    // Implementation
    auto8AAC8CF7_g = UnitGroup("TerrazineNode", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto8AAC8CF7_u = UnitGroupCount(auto8AAC8CF7_g, c_unitCountAll);
    for (;; auto8AAC8CF7_u -= 1) {
        lv_pickedUnit = UnitGroupUnitFromEnd(auto8AAC8CF7_g, auto8AAC8CF7_u);
        if (lv_pickedUnit == null) { break; }
        if ((FixedToInt(UnitGetCustomValue(lv_pickedUnit, 0)) == lp_canisterHarvestTargetIndex)) {
            lv_canisterHarvestTarget = lv_pickedUnit;
            break;
        }

    }
    lv_probe01 = UnitGroupRandomUnit(UnitGroup("Probe", c_playerAny, RegionFromId(36), UnitFilter(0, 0, 0, 0), 0), c_unitCountAlive);
    lv_probe01DistanceToCanister = DistanceBetweenPoints(UnitGetPosition(lv_probe01), UnitGetPosition(lv_canisterHarvestTarget));
    lv_probe02 = UnitGroupRandomUnit(UnitGroup("Probe", c_playerAny, RegionFromId(38), UnitFilter(0, 0, 0, 0), 0), c_unitCountAlive);
    lv_probe02DistanceToCanister = DistanceBetweenPoints(UnitGetPosition(lv_probe02), UnitGetPosition(lv_canisterHarvestTarget));
    if ((lv_probe01DistanceToCanister <= lv_probe02DistanceToCanister)) {
        return lv_probe01;
    }

    if ((lv_probe02DistanceToCanister < lv_probe01DistanceToCanister)) {
        return lv_probe02;
    }

    return null;
}

unit gf_NodeMatchingCustomValue (int lp_param_TerrazineIndex) {
    // Variable Declarations
    unit lv_lv_TargetTerrazineGas;
    unit lv_pickedUnit;

    // Automatic Variable Declarations
    unitgroup auto9C5AF31A_g;
    int auto9C5AF31A_u;
    unitgroup auto515F8EF4_g;
    int auto515F8EF4_u;

    // Variable Initialization

    // Implementation
    auto9C5AF31A_g = UnitGroup("TerrazineNode", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto9C5AF31A_u = UnitGroupCount(auto9C5AF31A_g, c_unitCountAll);
    for (;; auto9C5AF31A_u -= 1) {
        lv_pickedUnit = UnitGroupUnitFromEnd(auto9C5AF31A_g, auto9C5AF31A_u);
        if (lv_pickedUnit == null) { break; }
        if ((FixedToInt(UnitGetCustomValue(lv_pickedUnit, 0)) == lp_param_TerrazineIndex)) {
            return lv_pickedUnit;
        }

    }
    auto515F8EF4_g = UnitGroup("TerrazineCanister", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto515F8EF4_u = UnitGroupCount(auto515F8EF4_g, c_unitCountAll);
    for (;; auto515F8EF4_u -= 1) {
        lv_pickedUnit = UnitGroupUnitFromEnd(auto515F8EF4_g, auto515F8EF4_u);
        if (lv_pickedUnit == null) { break; }
        if ((FixedToInt(UnitGetCustomValue(lv_pickedUnit, 0)) == lp_param_TerrazineIndex)) {
            return lv_pickedUnit;
        }

    }
    return null;
}

void gf_ResearchForAllProtoss (string lp_upgrade) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    playergroup autoBEC5C0B3_g;

    // Variable Initialization

    // Implementation
    autoBEC5C0B3_g = gv_protossPlayerGroup;
    lv_p = -1;
    while (true) {
        lv_p = PlayerGroupNextPlayer(autoBEC5C0B3_g, lv_p);
        if (lv_p < 0) { break; }
        TechTreeUpgradeAddLevel(lv_p, lp_upgrade, 1);
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_LoadCampaignData(libCamp_ge_MapID_MapTTosh02);
    TriggerExecute(gt_Init01Technology, true, false);
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03VariablesUnits, true, true);
    TriggerExecute(gt_Init04Music, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulty, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    libCamp_gf_RegisterFootageRecording(gt_BriefingQ);
    libCamp_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_IntroSequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeUpgradeAddLevel(gv_p2_PROTOSS_EAST_ATTACKERS, "BlinkTech", 1);
    TechTreeUpgradeAddLevel(gv_p4_PROTOSS_WEST_ESCORTS, "BlinkTech", 1);
    libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesGoliath, gv_p1_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoA366C10A_g;
    int autoA366C10A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_protossPlayerGroup, gv_p2_PROTOSS_EAST_ATTACKERS);
    PlayerGroupAdd(gv_protossPlayerGroup, gv_p3_PROTOSS_SCRIPTED);
    PlayerGroupAdd(gv_protossPlayerGroup, gv_p4_PROTOSS_WEST_ESCORTS);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p5_TERRAZINE, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p2_PROTOSS_EAST_ATTACKERS, gv_p3_PROTOSS_SCRIPTED, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p2_PROTOSS_EAST_ATTACKERS, gv_p4_PROTOSS_WEST_ESCORTS, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p2_PROTOSS_EAST_ATTACKERS, gv_p5_TERRAZINE, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p3_PROTOSS_SCRIPTED, gv_p4_PROTOSS_WEST_ESCORTS, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p3_PROTOSS_SCRIPTED, gv_p5_TERRAZINE, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p4_PROTOSS_WEST_ESCORTS, gv_p5_TERRAZINE, libNtve_ge_AllianceSetting_Neutral);
    autoA366C10A_g = gv_protossPlayerGroup;
    autoA366C10A_var = -1;
    while (true) {
        autoA366C10A_var = PlayerGroupNextPlayer(autoA366C10A_g, autoA366C10A_var);
        if (autoA366C10A_var < 0) { break; }
        PlayerSetColorIndex(autoA366C10A_var, 3, true);
    }
    PlayerModifyPropertyInt(gv_p1_USER, c_playerPropMinerals, c_playerPropOperSetTo, 300);
    PlayerModifyPropertyInt(gv_p1_USER, c_playerPropVespene, c_playerPropOperSetTo, 100);
    PlayerModifyPropertyInt(gv_p2_PROTOSS_EAST_ATTACKERS, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p2_PROTOSS_EAST_ATTACKERS, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p3_PROTOSS_SCRIPTED, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p3_PROTOSS_SCRIPTED, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p4_PROTOSS_WEST_ESCORTS, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p4_PROTOSS_WEST_ESCORTS, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Variables/Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03VariablesUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_playerHasMercTech;
    int lv_merc;

    // Automatic Variable Declarations
    unitgroup auto2AD203C4_g;
    int auto2AD203C4_u;
    unit auto2AD203C4_var;
    unitgroup auto7718831C_g;
    int auto7718831C_u;
    unit auto7718831C_var;

    // Variable Initialization
    lv_merc = libCamp_ge_StoryMercID_MercNone;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_bonusObjectiveCollectRelicsNeeded = UnitGroupCount(UnitGroup("ProtossRelic", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    auto2AD203C4_g = UnitGroup("ProtossRelic", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2AD203C4_u = UnitGroupCount(auto2AD203C4_g, c_unitCountAll);
    for (;; auto2AD203C4_u -= 1) {
        auto2AD203C4_var = UnitGroupUnitFromEnd(auto2AD203C4_g, auto2AD203C4_u);
        if (auto2AD203C4_var == null) { break; }
        UnitSetInfoText(auto2AD203C4_var, StringExternal("Param/Value/77033FDB"), StringExternal("Param/Value/8985286D"), StringToText(""));
        UnitSetState(auto2AD203C4_var, c_unitStateTooltipable, true);
    }
    gv_superWarpGateP3NoAI = UnitFromId(68);
    libNtve_gf_ShowHideUnit(UnitFromId(68), false);
    TriggerExecute(gt_InitNERelicDefenders, true, false);
    UnitGroupAdd(gv_harvestingSpeedBumpNWBullies, UnitFromId(879));
    UnitGroupAdd(gv_harvestingSpeedBumpNWBullies, UnitFromId(880));
    UnitGroupAdd(gv_harvestingSpeedBumpNWBullies, UnitFromId(64));
    UnitGroupAdd(gv_harvestingSpeedBumpNWBullies, UnitFromId(84));
    UnitGroupAdd(gv_harvestingSpeedBumpCentralBullies, UnitFromId(90));
    UnitGroupAdd(gv_harvestingSpeedBumpCentralBullies, UnitFromId(253));
    UnitGroupAdd(gv_harvestingSpeedBumpCentralBullies, UnitFromId(1586));
    UnitGroupAdd(gv_harvestingSpeedBumpCentralBullies, UnitFromId(962));
    UnitSetCustomValue(UnitFromId(34), 0, 1.0);
    gv_terrazineNodes[1] = UnitFromId(34);
    UnitSetCustomValue(UnitFromId(70), 0, 2.0);
    gv_terrazineNodes[2] = UnitFromId(70);
    UnitSetCustomValue(UnitFromId(78), 0, 3.0);
    gv_terrazineNodes[3] = UnitFromId(78);
    UnitSetCustomValue(UnitFromId(35), 0, 4.0);
    gv_terrazineNodes[4] = UnitFromId(35);
    UnitSetCustomValue(UnitFromId(24), 0, 5.0);
    gv_terrazineNodes[5] = UnitFromId(24);
    UnitSetCustomValue(UnitFromId(81), 0, 6.0);
    gv_terrazineNodes[6] = UnitFromId(81);
    UnitSetCustomValue(UnitFromId(27), 0, 7.0);
    gv_terrazineNodes[7] = UnitFromId(27);
    UnitSetCustomValue(UnitFromId(30), 0, 8.0);
    gv_terrazineNodes[8] = UnitFromId(30);
    UnitSetCustomValue(UnitFromId(28), 0, 9.0);
    gv_terrazineNodes[9] = UnitFromId(28);
    UnitSetCustomValue(UnitFromId(29), 0, 10.0);
    gv_terrazineNodes[10] = UnitFromId(29);
    UnitSetCustomValue(UnitFromId(94), 0, 11.0);
    gv_terrazineNodes[11] = UnitFromId(94);
    UnitSetCustomValue(UnitFromId(79), 0, 12.0);
    gv_terrazineNodes[12] = UnitFromId(79);
    UnitSetCustomValue(UnitFromId(32), 0, 13.0);
    gv_terrazineNodes[13] = UnitFromId(32);
    auto7718831C_g = UnitGroup("TerrazineNode", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7718831C_u = UnitGroupCount(auto7718831C_g, c_unitCountAll);
    for (;; auto7718831C_u -= 1) {
        auto7718831C_var = UnitGroupUnitFromEnd(auto7718831C_g, auto7718831C_u);
        if (auto7718831C_var == null) { break; }
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(auto7718831C_var), c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
        UnitSetInfoText(auto7718831C_var, StringExternal("Param/Value/F03BE3FA"), StringToText(""), StringToText(""));
    }
    gv_terrazineRegions[1] = RegionFromId(31);
    gv_terrazineRegions[2] = RegionFromId(15);
    gv_terrazineRegions[3] = RegionFromId(29);
    gv_terrazineRegions[4] = RegionFromId(2);
    gv_terrazineRegions[5] = RegionFromId(22);
    gv_terrazineRegions[6] = RegionFromId(24);
    libNtve_gf_MakeUnitInvulnerable(gv_victoryTerrazine, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03VariablesUnits_Init () {
    gt_Init03VariablesUnits = TriggerCreate("gt_Init03VariablesUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init04Music_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTosh02MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Music_Init () {
    gt_Init04Music = TriggerCreate("gt_Init04Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "RainSprinkle", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    GameSetBackground(c_backgroundFixed, null, 100.0);
    VisRevealArea(gv_p1_USER, RegionFromId(27), 0.1, false);
    libLbty_gf_AutoRevealRegion(RegionFromId(28), RegionFromId(26), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(32), RegionFromId(33), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(35), RegionFromId(34), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(39), RegionFromId(37), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(41), RegionFromId(40), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(45), RegionFromId(44), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(43), RegionFromId(42), gv_p1_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulty
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulty_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto3A30A2F6_g;
    int auto3A30A2F6_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerDifficulty(gv_p1_USER) == 1)) {
        PlayerModifyPropertyInt(gv_p2_PROTOSS_EAST_ATTACKERS, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p3_PROTOSS_SCRIPTED, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p4_PROTOSS_WEST_ESCORTS, c_playerPropHandicap, c_playerPropOperSetTo, 50);
    }

    gv_playerCollectionQuota = libNtve_gf_DifficultyValueInt(7, 7, 7, 7);
    gv_protossCollectionQuota = libNtve_gf_DifficultyValueInt(7, 7, 7, 7);
    auto3A30A2F6_g = gv_protossPlayerGroup;
    auto3A30A2F6_var = -1;
    while (true) {
        auto3A30A2F6_var = PlayerGroupNextPlayer(auto3A30A2F6_g, auto3A30A2F6_var);
        if (auto3A30A2F6_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto3A30A2F6_var, "ProtossShieldsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(auto3A30A2F6_var, "PsiStormTech", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(auto3A30A2F6_var, "ProtossGroundArmorsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        TechTreeUpgradeAddLevel(auto3A30A2F6_var, "ObserverGraviticBooster", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulty_Init () {
    gt_Init06Difficulty = TriggerCreate("gt_Init06Difficulty_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_AddUnitTypeToUnitHelpPanel("Probe", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Stalker", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Immortal", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Scout", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Observer", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("VoidRay", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("PhotonCannon", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("HighTemplar", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("WarpPrism", false, gv_p1_USER);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Colossus", false, gv_p1_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Sequence
//--------------------------------------------------------------------------------------------------
bool gt_IntroSequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.1, c_timeGame);
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/20E5CE1C"), null, PointFromId(10));
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_p1_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PlayerStartLocation(gv_p1_USER), 1.5);
    CinematicFade(true, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_StartGame, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSequence_Init () {
    gt_IntroSequence = TriggerCreate("gt_IntroSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game
//--------------------------------------------------------------------------------------------------
bool gt_StartGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShareVisionofUnit(UnitFromId(34), true, gv_p1_USER);
    TimerStart(gv_protossAggroTimer, 180.0, false, c_timeGame);
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_PrimaryObjectiveCollectTerrazineCreateQ, true, true);
    Wait(8.0, c_timeReal);
    TriggerExecute(gt_GoliathandGatherTerrazineTipsQ, true, false);
    Wait(8.0, c_timeReal);
    TriggerExecute(gt_CampaignTipsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGame_Init () {
    gt_StartGame = TriggerCreate("gt_StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Goliath and Gather Terrazine Tips Q
//--------------------------------------------------------------------------------------------------
bool gt_GoliathandGatherTerrazineTipsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    TriggerExecute(gt_PingTerrazineonMinimapandReveal, true, false);
    SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeReal);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh02Tosh00002", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh02Tosh00002", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTosh02Swann00001", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh02Swann00001", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    libCamp_gf_CreateTipFromConversationState("StoryTips|Tosh02_Terrazine", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_CreateTipFromConversationState("StoryTips|Tosh02_Goliath", libNtve_ge_TipType_NewUnit, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    TriggerExecute(gt_ObjectiveRelicsCreateQ, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GoliathandGatherTerrazineTipsQ_Init () {
    gt_GoliathandGatherTerrazineTipsQ = TriggerCreate("gt_GoliathandGatherTerrazineTipsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Campaign Tips Q
//--------------------------------------------------------------------------------------------------
bool gt_CampaignTipsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateStorymodeTips();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CampaignTipsQ_Init () {
    gt_CampaignTipsQ = TriggerCreate("gt_CampaignTipsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping Terrazine on Minimap and Reveal
//--------------------------------------------------------------------------------------------------
bool gt_PingTerrazineonMinimapandReveal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto94E85CCA_g;
    int auto94E85CCA_u;
    unit auto94E85CCA_var;
    unitgroup auto1F379FE0_g;
    int auto1F379FE0_u;
    unit auto1F379FE0_var;
    unitgroup autoF1607772_g;
    int autoF1607772_u;
    unit autoF1607772_var;
    unitgroup autoCBEBD647_g;
    int autoCBEBD647_u;
    unit autoCBEBD647_var;
    unitgroup auto3DCF778F_g;
    int auto3DCF778F_u;
    unit auto3DCF778F_var;
    unitgroup auto9BA8D737_g;
    int auto9BA8D737_u;
    unit auto9BA8D737_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto94E85CCA_g = UnitGroup("TerrazineNode", c_playerAny, RegionFromId(31), UnitFilter(0, 0, 0, (1 << (c_targetFilterHidden - 32))), 0);
    auto94E85CCA_u = UnitGroupCount(auto94E85CCA_g, c_unitCountAll);
    for (;; auto94E85CCA_u -= 1) {
        auto94E85CCA_var = UnitGroupUnitFromEnd(auto94E85CCA_g, auto94E85CCA_u);
        if (auto94E85CCA_var == null) { break; }
        MinimapPing(PlayerGroupAll(), UnitGetPosition(auto94E85CCA_var), 2.0, Color(0.00, 100.00, 0.00));
        libNtve_gf_ShareVisionofUnit(auto94E85CCA_var, true, gv_p1_USER);
        libNtve_gf_ShareVisionofUnit(auto94E85CCA_var, true, gv_p2_PROTOSS_EAST_ATTACKERS);
        libNtve_gf_ShareVisionofUnit(auto94E85CCA_var, true, gv_p3_PROTOSS_SCRIPTED);
    }
    Wait(1.5, c_timeReal);
    auto1F379FE0_g = UnitGroup("TerrazineNode", c_playerAny, RegionFromId(15), UnitFilter(0, 0, 0, (1 << (c_targetFilterHidden - 32))), 0);
    auto1F379FE0_u = UnitGroupCount(auto1F379FE0_g, c_unitCountAll);
    for (;; auto1F379FE0_u -= 1) {
        auto1F379FE0_var = UnitGroupUnitFromEnd(auto1F379FE0_g, auto1F379FE0_u);
        if (auto1F379FE0_var == null) { break; }
        MinimapPing(PlayerGroupAll(), UnitGetPosition(auto1F379FE0_var), 2.0, Color(0.00, 100.00, 0.00));
        libNtve_gf_ShareVisionofUnit(auto1F379FE0_var, true, gv_p1_USER);
        libNtve_gf_ShareVisionofUnit(auto1F379FE0_var, true, gv_p2_PROTOSS_EAST_ATTACKERS);
        libNtve_gf_ShareVisionofUnit(auto1F379FE0_var, true, gv_p3_PROTOSS_SCRIPTED);
    }
    Wait(1.5, c_timeReal);
    SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupAll(), 100.0, 0.0);
    autoF1607772_g = UnitGroup("TerrazineNode", c_playerAny, RegionFromId(22), UnitFilter(0, 0, 0, (1 << (c_targetFilterHidden - 32))), 0);
    autoF1607772_u = UnitGroupCount(autoF1607772_g, c_unitCountAll);
    for (;; autoF1607772_u -= 1) {
        autoF1607772_var = UnitGroupUnitFromEnd(autoF1607772_g, autoF1607772_u);
        if (autoF1607772_var == null) { break; }
        MinimapPing(PlayerGroupAll(), UnitGetPosition(autoF1607772_var), 2.0, Color(0.00, 100.00, 0.00));
        libNtve_gf_ShareVisionofUnit(autoF1607772_var, true, gv_p1_USER);
        libNtve_gf_ShareVisionofUnit(autoF1607772_var, true, gv_p2_PROTOSS_EAST_ATTACKERS);
        libNtve_gf_ShareVisionofUnit(autoF1607772_var, true, gv_p3_PROTOSS_SCRIPTED);
    }
    Wait(1.5, c_timeReal);
    autoCBEBD647_g = UnitGroup("TerrazineNode", c_playerAny, RegionFromId(2), UnitFilter(0, 0, 0, (1 << (c_targetFilterHidden - 32))), 0);
    autoCBEBD647_u = UnitGroupCount(autoCBEBD647_g, c_unitCountAll);
    for (;; autoCBEBD647_u -= 1) {
        autoCBEBD647_var = UnitGroupUnitFromEnd(autoCBEBD647_g, autoCBEBD647_u);
        if (autoCBEBD647_var == null) { break; }
        MinimapPing(PlayerGroupAll(), UnitGetPosition(autoCBEBD647_var), 2.0, Color(0.00, 100.00, 0.00));
        libNtve_gf_ShareVisionofUnit(autoCBEBD647_var, true, gv_p1_USER);
        libNtve_gf_ShareVisionofUnit(autoCBEBD647_var, true, gv_p2_PROTOSS_EAST_ATTACKERS);
        libNtve_gf_ShareVisionofUnit(autoCBEBD647_var, true, gv_p3_PROTOSS_SCRIPTED);
    }
    Wait(1.5, c_timeReal);
    SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupAll(), 100.0, 0.0);
    auto3DCF778F_g = UnitGroup("TerrazineNode", c_playerAny, RegionFromId(29), UnitFilter(0, 0, 0, (1 << (c_targetFilterHidden - 32))), 0);
    auto3DCF778F_u = UnitGroupCount(auto3DCF778F_g, c_unitCountAll);
    for (;; auto3DCF778F_u -= 1) {
        auto3DCF778F_var = UnitGroupUnitFromEnd(auto3DCF778F_g, auto3DCF778F_u);
        if (auto3DCF778F_var == null) { break; }
        MinimapPing(PlayerGroupAll(), UnitGetPosition(auto3DCF778F_var), 2.0, Color(0.00, 100.00, 0.00));
        libNtve_gf_ShareVisionofUnit(auto3DCF778F_var, true, gv_p1_USER);
        libNtve_gf_ShareVisionofUnit(auto3DCF778F_var, true, gv_p2_PROTOSS_EAST_ATTACKERS);
        libNtve_gf_ShareVisionofUnit(auto3DCF778F_var, true, gv_p3_PROTOSS_SCRIPTED);
    }
    Wait(1.5, c_timeReal);
    auto9BA8D737_g = UnitGroup("TerrazineNode", c_playerAny, RegionFromId(24), UnitFilter(0, 0, 0, (1 << (c_targetFilterHidden - 32))), 0);
    auto9BA8D737_u = UnitGroupCount(auto9BA8D737_g, c_unitCountAll);
    for (;; auto9BA8D737_u -= 1) {
        auto9BA8D737_var = UnitGroupUnitFromEnd(auto9BA8D737_g, auto9BA8D737_u);
        if (auto9BA8D737_var == null) { break; }
        MinimapPing(PlayerGroupAll(), UnitGetPosition(auto9BA8D737_var), 2.0, Color(0.00, 100.00, 0.00));
        libNtve_gf_ShareVisionofUnit(auto9BA8D737_var, true, gv_p1_USER);
        libNtve_gf_ShareVisionofUnit(auto9BA8D737_var, true, gv_p2_PROTOSS_EAST_ATTACKERS);
        libNtve_gf_ShareVisionofUnit(auto9BA8D737_var, true, gv_p3_PROTOSS_SCRIPTED);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PingTerrazineonMinimapandReveal_Init () {
    gt_PingTerrazineonMinimapandReveal = TriggerCreate("gt_PingTerrazineonMinimapandReveal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Aggro Via Leaving Player Base
//--------------------------------------------------------------------------------------------------
bool gt_ProtossAggroViaLeavingPlayerBase_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ProtossAggroLineQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossAggroViaLeavingPlayerBase_Init () {
    gt_ProtossAggroViaLeavingPlayerBase = TriggerCreate("gt_ProtossAggroViaLeavingPlayerBase_Func");
    TriggerAddEventUnitRegion(gt_ProtossAggroViaLeavingPlayerBase, null, RegionFromId(30), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Aggro Via Timer
//--------------------------------------------------------------------------------------------------
bool gt_ProtossAggroViaTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ProtossAggroLineQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossAggroViaTimer_Init () {
    gt_ProtossAggroViaTimer = TriggerCreate("gt_ProtossAggroViaTimer_Func");
    TriggerAddEventTimer(gt_ProtossAggroViaTimer, gv_protossAggroTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Aggro Line Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossAggroLineQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTosh02MusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    TriggerExecute(gt_ProtossAggroBullies, true, false);
    SoundPlay(SoundLink("IncomingTransmission", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh02TaldarimExecutor00010", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh02TaldarimExecutor00010", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTosh02Raynor00011", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh02Raynor00011", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTosh02TaldarimExecutor00012", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh02TaldarimExecutor00012", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTosh02Horner00005", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh02Horner00005", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossAggroLineQ_Init () {
    gt_ProtossAggroLineQ = TriggerCreate("gt_ProtossAggroLineQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Aggro Bullies
//--------------------------------------------------------------------------------------------------
bool gt_ProtossAggroBullies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(15.0, c_timeGame);
    UnitIssueOrder(UnitFromId(739), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(855)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(110), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(112)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(2), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(15)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(2093), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2094)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(62), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(111)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(66), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(99)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(854), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(114)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(853), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(116)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1576), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1578)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossAggroBullies_Init () {
    gt_ProtossAggroBullies = TriggerCreate("gt_ProtossAggroBullies_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Rain
//--------------------------------------------------------------------------------------------------
bool gt_StartRain_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_playerScore >= 5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "RainSprinkle", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    GameSetLighting("BelShirSunset", 30.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartRain_Init () {
    gt_StartRain = TriggerCreate("gt_StartRain_Func");
    TriggerAddEventTimePeriodic(gt_StartRain, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Harvesting Speed Bumps - NWestern Territory
//--------------------------------------------------------------------------------------------------
bool gt_HarvestingSpeedBumpsNWesternTerritory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_harvestingSpeedBumpNWBullies, EventUnit()) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == gv_p1_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(gv_superWarpGateP3NoAI, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(919)), c_orderQueueAddToEnd);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        Wait(0.5, c_timeGame);
        UnitIssueOrder(gv_superWarpGateP3NoAI, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(2664)), c_orderQueueAddToEnd);
        Wait(0.5, c_timeGame);
        UnitIssueOrder(gv_superWarpGateP3NoAI, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(2665)), c_orderQueueAddToEnd);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HarvestingSpeedBumpsNWesternTerritory_Init () {
    gt_HarvestingSpeedBumpsNWesternTerritory = TriggerCreate("gt_HarvestingSpeedBumpsNWesternTerritory_Func");
    TriggerAddEventUnitDamaged(gt_HarvestingSpeedBumpsNWesternTerritory, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Harvesting Speed Bumps - Central Territory
//--------------------------------------------------------------------------------------------------
bool gt_HarvestingSpeedBumpsCentralTerritory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_harvestingSpeedBumpCentralBullies, EventUnit()) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == gv_p1_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(gv_superWarpGateP3NoAI, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(364)), c_orderQueueAddToEnd);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(gv_superWarpGateP3NoAI, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(920)), c_orderQueueAddToEnd);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(gv_superWarpGateP3NoAI, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(234)), c_orderQueueAddToEnd);
    Wait(0.5, c_timeGame);
    if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
        UnitIssueOrder(gv_superWarpGateP3NoAI, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(168)), c_orderQueueAddToEnd);
    }
    else {
        UnitIssueOrder(gv_superWarpGateP3NoAI, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 15), PointFromId(2092)), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HarvestingSpeedBumpsCentralTerritory_Init () {
    gt_HarvestingSpeedBumpsCentralTerritory = TriggerCreate("gt_HarvestingSpeedBumpsCentralTerritory_Func");
    TriggerAddEventUnitDamaged(gt_HarvestingSpeedBumpsCentralTerritory, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init NE Relic Defenders
//--------------------------------------------------------------------------------------------------
bool gt_InitNERelicDefenders_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8FCB7650_g;
    int auto8FCB7650_u;
    unit auto8FCB7650_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto8FCB7650_g = UnitGroup("Zealot", gv_p3_PROTOSS_SCRIPTED, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8FCB7650_u = UnitGroupCount(auto8FCB7650_g, c_unitCountAll);
    for (;; auto8FCB7650_u -= 1) {
        auto8FCB7650_var = UnitGroupUnitFromEnd(auto8FCB7650_g, auto8FCB7650_u);
        if (auto8FCB7650_var == null) { break; }
        gv_numberOfNEDefenders += 1;
        gv_nEDefenders[gv_numberOfNEDefenders] = auto8FCB7650_var;
        gv_nEDefenderPositions[gv_numberOfNEDefenders] = UnitGetPosition(auto8FCB7650_var);
        AISetUnitScriptControlled(auto8FCB7650_var, true);
        UnitGroupAdd(gv_nEDefendersGroup, auto8FCB7650_var);
    }
    TriggerExecute(gt_NEDefenderScriptedAI, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitNERelicDefenders_Init () {
    gt_InitNERelicDefenders = TriggerCreate("gt_InitNERelicDefenders_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NEDefenderScriptedAI
//--------------------------------------------------------------------------------------------------
bool gt_NEDefenderScriptedAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_defendersDead;

    // Automatic Variable Declarations
    int auto86E9B140_ae;
    const int auto86E9B140_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((gv_gameOver == true)) {
            return true;
        }

        if ((UnitGroupCount(gv_nEDefendersGroup, c_unitCountAlive) == 0) && (UnitIsAlive(UnitFromId(2648)) == false)) {
            Wait(10.0, c_timeGame);
            if ((UnitGroupCount(gv_nEDefendersGroup, c_unitCountAlive) == 0) && (UnitIsAlive(UnitFromId(2648)) == false)) {
                TriggerEnable(gt_NEDefenderDeath, false);
                TriggerEnable(gt_NEDefenderSpawned, false);
                return true;
            }

        }

        Wait(1.0, c_timeAI);
        if ((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionFromId(3), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
            UnitGroupIssueOrder(gv_nEDefendersGroup, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(libNtve_gf_ClosestUnitToPoint(RegionGetCenter(RegionFromId(3)), UnitGroup(null, gv_p1_USER, RegionFromId(3), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)))), c_orderQueueReplace);
        }
        else {
            auto86E9B140_ae = gv_numberOfNEDefenders;
            lv_i = 1;
            for ( ; ( (auto86E9B140_ai >= 0 && lv_i <= auto86E9B140_ae) || (auto86E9B140_ai < 0 && lv_i >= auto86E9B140_ae) ) ; lv_i += auto86E9B140_ai ) {
                UnitIssueOrder(gv_nEDefenders[lv_i], OrderTargetingPoint(AbilityCommand("attack", 0), gv_nEDefenderPositions[lv_i]), c_orderQueueReplace);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NEDefenderScriptedAI_Init () {
    gt_NEDefenderScriptedAI = TriggerCreate("gt_NEDefenderScriptedAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NEDefenderDeath
//--------------------------------------------------------------------------------------------------
bool gt_NEDefenderDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p3_PROTOSS_SCRIPTED))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Zealot"))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(2648)) == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_nEDefendersGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(libNtve_gf_DifficultyValueFixed(8.0, 8.0, 6.0, 4.0), c_timeAI);
    UnitIssueOrder(gv_superWarpGateP3NoAI, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(UnitFromId(2648))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NEDefenderDeath_Init () {
    gt_NEDefenderDeath = TriggerCreate("gt_NEDefenderDeath_Func");
    TriggerAddEventUnitDied(gt_NEDefenderDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NEDefenderSpawned
//--------------------------------------------------------------------------------------------------
bool gt_NEDefenderSpawned_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto022FD92D_ae;
    const int auto022FD92D_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Zealot"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p3_PROTOSS_SCRIPTED))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto022FD92D_ae = gv_numberOfNEDefenders;
    lv_i = 1;
    for ( ; ( (auto022FD92D_ai >= 0 && lv_i <= auto022FD92D_ae) || (auto022FD92D_ai < 0 && lv_i >= auto022FD92D_ae) ) ; lv_i += auto022FD92D_ai ) {
        if ((UnitIsAlive(gv_nEDefenders[lv_i]) == false)) {
            gv_nEDefenders[lv_i] = EventUnit();
            UnitGroupAdd(gv_nEDefendersGroup, EventUnit());
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NEDefenderSpawned_Init () {
    gt_NEDefenderSpawned = TriggerCreate("gt_NEDefenderSpawned_Func");
    TriggerAddEventUnitRegion(gt_NEDefenderSpawned, null, RegionFromId(18), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NE Void Rays
//--------------------------------------------------------------------------------------------------
bool gt_NEVoidRays_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagCloaked) == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(1341), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(23))), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(344), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(23))), c_orderQueueReplace);
    Wait(20.0, c_timeAI);
    AISetUnitScriptControlled(UnitFromId(1341), false);
    AISetUnitScriptControlled(UnitFromId(344), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NEVoidRays_Init () {
    gt_NEVoidRays = TriggerCreate("gt_NEVoidRays_Func");
    TriggerAddEventUnitRegion(gt_NEVoidRays, null, RegionFromId(23), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player starts harvesting terrazine
//--------------------------------------------------------------------------------------------------
bool gt_Playerstartsharvestingterrazine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_harvestingSCV;
    int lv_customTerrazineGasValue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SCV"))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitTargetUnit()) == "TerrazineNode") || (UnitGetType(EventUnitTargetUnit()) == "TerrazineCanister")))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "CarryTerrazineNode") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_harvestingSCV = EventUnit();
    UnitBehaviorAdd(lv_harvestingSCV, "HarvestingTerrazine", lv_harvestingSCV, 1);
    lv_customTerrazineGasValue = FixedToInt(UnitGetCustomValue(EventUnitTargetUnit(), 0));
    gv_gasControlCount += 1;
    gv_gasHarvestingCount += 1;
    if ((UnitGetType(EventUnitTargetUnit()) == "TerrazineNode")) {
        SoundPlayOnUnit(SoundLink("PhaseMineBlastSplit", -1), PlayerGroupAll(), EventUnitTargetUnit(), 0.0, 100.0, 0.0);
        gv_terrazineHarvesting = EventUnitTargetUnit();
    }

    libNtve_gf_SendActorMessageToUnit(EventUnitTargetUnit(), "Signal TerranStart");
    UnitSetCustomValue(lv_harvestingSCV, 0, UnitGetCustomValue(EventUnitTargetUnit(), 0));
    UnitBehaviorAdd(lv_harvestingSCV, "ProgressBar", lv_harvestingSCV, 1);
    UnitForceStatusBar(EventUnitTargetUnit(), true);
    if ((UnitGetType(EventUnitTargetUnit()) == "TerrazineNode")) {
        UnitBehaviorSetDuration(lv_harvestingSCV, "ProgressBar", 60);
        UnitBehaviorAdd(EventUnitTargetUnit(), "TerrazineCountdownDummyBar", EventUnitTargetUnit(), 1);
    }
    else {
        UnitBehaviorSetDuration(lv_harvestingSCV, "ProgressBar", 10);
        UnitBehaviorAdd(EventUnitTargetUnit(), "TerrazineCountdownDummyBarFaster", EventUnitTargetUnit(), 1);
        return true;
    }
    if ((gv_gasHarvestingCount >= 2)) {
        TriggerExecute(gt_PlayertriestoharvestmultiplecanistersatonceQ, true, false);
    }

    if (((gv_gasControlCount + gv_playerScore) == 2)) {
        AIAttackWaveAddUnits4(1, 1, 2, 3, "Stalker");
        AIAttackWaveSetTargetPoint(gv_p4_PROTOSS_WEST_ESCORTS, UnitGetPosition(EventUnit()));
        gf_AddFriendlyWavepoints(FixedToInt(UnitGetCustomValue(EventUnitTargetUnit(), 0)));
        AIAttackWaveSend(gv_p4_PROTOSS_WEST_ESCORTS, 40, false);
        gv_terrazineAttackWaves[FixedToInt(UnitGetCustomValue(EventUnitTargetUnit(), 0))][1] = WaveLastCreated();
    }

    if (((gv_gasControlCount + gv_playerScore) == 3)) {
        AIAttackWaveAddUnits4(1, 1, 2, 3, "Stalker");
        AIAttackWaveAddUnits4(1, 1, 2, 2, "Scout");
        AIAttackWaveSetTargetPoint(gv_p4_PROTOSS_WEST_ESCORTS, UnitGetPosition(EventUnit()));
        gf_AddFriendlyWavepoints(FixedToInt(UnitGetCustomValue(EventUnitTargetUnit(), 0)));
        AIAttackWaveSend(gv_p4_PROTOSS_WEST_ESCORTS, 40, false);
        gv_terrazineAttackWaves[FixedToInt(UnitGetCustomValue(EventUnitTargetUnit(), 0))][1] = WaveLastCreated();
    }

    if (((gv_gasControlCount + gv_playerScore) == 4)) {
        TriggerExecute(gt_ProtossmediumretaliationannounceQ, true, false);
        AIAttackWaveAddUnits4(3, 3, 4, 4, "Scout");
        AIAttackWaveAddUnits4(0, 0, 1, 2, "VoidRay");
        AIAttackWaveSetTargetPoint(gv_p4_PROTOSS_WEST_ESCORTS, UnitGetPosition(EventUnit()));
        gf_AddFriendlyWavepoints(FixedToInt(UnitGetCustomValue(EventUnitTargetUnit(), 0)));
        AIAttackWaveSend(gv_p4_PROTOSS_WEST_ESCORTS, 40, false);
        gv_terrazineAttackWaves[FixedToInt(UnitGetCustomValue(EventUnitTargetUnit(), 0))][1] = WaveLastCreated();
    }

    if (((gv_gasControlCount + gv_playerScore) == 5)) {
        AIAttackWaveAddUnits4(1, 1, 2, 3, "Stalker");
        AIAttackWaveAddUnits4(1, 1, 2, 3, "Scout");
        AIAttackWaveSetTargetPoint(gv_p4_PROTOSS_WEST_ESCORTS, UnitGetPosition(EventUnit()));
        gf_AddFriendlyWavepoints(FixedToInt(UnitGetCustomValue(EventUnitTargetUnit(), 0)));
        AIAttackWaveSend(gv_p4_PROTOSS_WEST_ESCORTS, 0, false);
        gv_terrazineAttackWaves[FixedToInt(UnitGetCustomValue(EventUnitTargetUnit(), 0))][1] = WaveLastCreated();
        AIAttackWaveAddUnits4(1, 1, 2, 2, "Scout");
        AIAttackWaveAddUnits4(1, 1, 2, 2, "VoidRay");
        AIAttackWaveSetTargetPoint(gv_p4_PROTOSS_WEST_ESCORTS, UnitGetPosition(EventUnit()));
        gf_AddFriendlyWavepoints(FixedToInt(UnitGetCustomValue(EventUnitTargetUnit(), 0)));
        AIAttackWaveSend(gv_p4_PROTOSS_WEST_ESCORTS, 45, false);
        gv_terrazineAttackWaves[FixedToInt(UnitGetCustomValue(EventUnitTargetUnit(), 0))][2] = WaveLastCreated();
    }

    if (((gv_gasControlCount + gv_playerScore) == 6)) {
        AIAttackWaveAddUnits4(2, 2, 3, 4, "Zealot");
        AIAttackWaveAddUnits4(1, 1, 2, 1, "Scout");
        AIAttackWaveSetTargetPoint(gv_p4_PROTOSS_WEST_ESCORTS, UnitGetPosition(EventUnit()));
        gf_AddFriendlyWavepoints(FixedToInt(UnitGetCustomValue(EventUnitTargetUnit(), 0)));
        AIAttackWaveSend(gv_p4_PROTOSS_WEST_ESCORTS, 0, false);
        gv_terrazineAttackWaves[FixedToInt(UnitGetCustomValue(EventUnitTargetUnit(), 0))][1] = WaveLastCreated();
        AIAttackWaveAddUnits4(2, 2, 1, 2, "Scout");
        AIAttackWaveAddUnits4(1, 1, 2, 2, "VoidRay");
        AIAttackWaveSetTargetPoint(gv_p4_PROTOSS_WEST_ESCORTS, UnitGetPosition(EventUnit()));
        gf_AddFriendlyWavepoints(FixedToInt(UnitGetCustomValue(EventUnitTargetUnit(), 0)));
        AIAttackWaveSend(gv_p4_PROTOSS_WEST_ESCORTS, 45, false);
        gv_terrazineAttackWaves[FixedToInt(UnitGetCustomValue(EventUnitTargetUnit(), 0))][2] = WaveLastCreated();
    }

    if (((gv_gasControlCount + gv_playerScore) >= 7)) {
        TriggerExecute(gt_ProtossheavyretaliationannounceQ, true, false);
        AIAttackWaveAddUnits4(2, 2, 3, 3, "Scout");
        AIAttackWaveAddUnits4(1, 1, 2, 2, "Stalker");
        AIAttackWaveSetTargetPoint(gv_p4_PROTOSS_WEST_ESCORTS, UnitGetPosition(EventUnit()));
        gf_AddFriendlyWavepoints(FixedToInt(UnitGetCustomValue(EventUnitTargetUnit(), 0)));
        AIAttackWaveSend(gv_p4_PROTOSS_WEST_ESCORTS, 0, false);
        gv_terrazineAttackWaves[FixedToInt(UnitGetCustomValue(EventUnitTargetUnit(), 0))][1] = WaveLastCreated();
        AIAttackWaveAddUnits4(1, 1, 2, 2, "VoidRay");
        AIAttackWaveAddUnits4(3, 3, 2, 4, "Scout");
        AIAttackWaveSetTargetPoint(gv_p4_PROTOSS_WEST_ESCORTS, UnitGetPosition(EventUnit()));
        gf_AddFriendlyWavepoints(FixedToInt(UnitGetCustomValue(EventUnitTargetUnit(), 0)));
        AIAttackWaveSend(gv_p4_PROTOSS_WEST_ESCORTS, 45, false);
        gv_terrazineAttackWaves[FixedToInt(UnitGetCustomValue(EventUnitTargetUnit(), 0))][2] = WaveLastCreated();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Playerstartsharvestingterrazine_Init () {
    gt_Playerstartsharvestingterrazine = TriggerCreate("gt_Playerstartsharvestingterrazine_Func");
    TriggerAddEventUnitAbility(gt_Playerstartsharvestingterrazine, null, AbilityCommand("SCVHarvest", 0), c_abilHarvestStageHarvest, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss medium retaliation announce Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossmediumretaliationannounceQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(15.0, c_timeGame);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    SoundPlay(SoundLink("IncomingTransmission", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh02TaldarimExecutor00015", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh02TaldarimExecutor00015", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTosh02Tosh00023", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh02Tosh00023", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossmediumretaliationannounceQ_Init () {
    gt_ProtossmediumretaliationannounceQ = TriggerCreate("gt_ProtossmediumretaliationannounceQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss heavy retaliation announce Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossheavyretaliationannounceQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(15.0, c_timeGame);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh02TaldarimExecutor00007", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh02TaldarimExecutor00007", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossheavyretaliationannounceQ_Init () {
    gt_ProtossheavyretaliationannounceQ = TriggerCreate("gt_ProtossheavyretaliationannounceQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCV is killed while harvesting
//--------------------------------------------------------------------------------------------------
bool gt_SCViskilledwhileharvesting_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetCustomValue(EventUnit(), 0) > 0.0))) {
            return false;
        }

        if (!((UnitGetCustomValue(EventUnit(), 1) == 0.0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SCV"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gasControlCount -= 1;
    gv_gasHarvestingCount -= 1;
    gv_sCVKilledAlertPosition = UnitGetPosition(EventUnit());
    if ((UnitGetType(gf_NodeMatchingCustomValue(FixedToInt(UnitGetCustomValue(EventUnit(), 0)))) == "TerrazineNode")) {
        SoundPlayOnUnit(SoundLink("PhaseMineBlastSplit", 0), PlayerGroupAll(), gf_NodeMatchingCustomValue(FixedToInt(UnitGetCustomValue(EventUnit(), 0))), 0.0, 100.0, 0.0);
    }

    libNtve_gf_SendActorMessageToUnit(gf_NodeMatchingCustomValue(FixedToInt(UnitGetCustomValue(EventUnit(), 0))), "Signal TerranInterrupt");
    AIAttackWaveCancel(gv_terrazineAttackWaves[FixedToInt(UnitGetCustomValue(EventUnit(), 0))][1]);
    AIAttackWaveCancel(gv_terrazineAttackWaves[FixedToInt(UnitGetCustomValue(EventUnit(), 0))][2]);
    gv_sCVsKilledWhileHarvesting += 1;
    if ((gv_sCVsKilledWhileHarvesting == 2)) {
        TriggerExecute(gt_TiptoprotectSCVsQ, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SCViskilledwhileharvesting_Init () {
    gt_SCViskilledwhileharvesting = TriggerCreate("gt_SCViskilledwhileharvesting_Func");
    TriggerAddEventUnitDied(gt_SCViskilledwhileharvesting, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip to protect SCV's Q
//--------------------------------------------------------------------------------------------------
bool gt_TiptoprotectSCVsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/A9379847"), null, gv_sCVKilledAlertPosition);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh02Horner00014", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh02Horner00014", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TiptoprotectSCVsQ_Init () {
    gt_TiptoprotectSCVsQ = TriggerCreate("gt_TiptoprotectSCVsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCV harvesting manually stopped
//--------------------------------------------------------------------------------------------------
bool gt_SCVharvestingmanuallystopped_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetCustomValue(EventUnit(), 0) > 0.1))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitTargetUnit()) == "TerrazineNode") || (UnitGetType(EventUnitTargetUnit()) == "TerrazineCanister")))) {
            return false;
        }

        if (!((OrderGetTargetUnit(UnitOrder(EventUnit(), 0)) != gv_terrazineHarvesting))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SCV"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "HarvestingTerrazine", 1);
    gv_gasControlCount -= 1;
    gv_gasHarvestingCount -= 1;
    if ((UnitGetType(gf_NodeMatchingCustomValue(FixedToInt(UnitGetCustomValue(EventUnit(), 0)))) == "TerrazineNode")) {
        SoundPlayOnUnit(SoundLink("PhaseMineBlastSplit", 0), PlayerGroupAll(), gf_NodeMatchingCustomValue(FixedToInt(UnitGetCustomValue(EventUnit(), 0))), 0.0, 100.0, 0.0);
    }

    libNtve_gf_SendActorMessageToUnit(gf_NodeMatchingCustomValue(FixedToInt(UnitGetCustomValue(EventUnit(), 0))), "Signal TerranInterrupt");
    UnitBehaviorRemove(EventUnit(), "ProgressBar", 1);
    UnitBehaviorRemove(gf_NodeMatchingCustomValue(FixedToInt(UnitGetCustomValue(EventUnit(), 0))), "TerrazineCountdownDummyBar", 1);
    UnitBehaviorRemove(gf_NodeMatchingCustomValue(FixedToInt(UnitGetCustomValue(EventUnit(), 0))), "TerrazineCountdownDummyBarFaster", 1);
    UnitForceStatusBar(gf_NodeMatchingCustomValue(FixedToInt(UnitGetCustomValue(EventUnit(), 0))), false);
    AIAttackWaveCancel(gv_terrazineAttackWaves[FixedToInt(UnitGetCustomValue(EventUnit(), 0))][1]);
    AIAttackWaveCancel(gv_terrazineAttackWaves[FixedToInt(UnitGetCustomValue(EventUnit(), 0))][2]);
    UnitSetCustomValue(EventUnit(), 0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SCVharvestingmanuallystopped_Init () {
    gt_SCVharvestingmanuallystopped = TriggerCreate("gt_SCVharvestingmanuallystopped_Func");
    TriggerAddEventUnitAbility(gt_SCVharvestingmanuallystopped, null, AbilityCommand("SCVHarvest", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player tries to harvest multiple canisters at once Q
//--------------------------------------------------------------------------------------------------
bool gt_PlayertriestoharvestmultiplecanistersatonceQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh02Tosh00003", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh02Tosh00003", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTosh02Raynor00004", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh02Raynor00004", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayertriestoharvestmultiplecanistersatonceQ_Init () {
    gt_PlayertriestoharvestmultiplecanistersatonceQ = TriggerCreate("gt_PlayertriestoharvestmultiplecanistersatonceQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCV is heading home with terrazine
//--------------------------------------------------------------------------------------------------
bool gt_SCVisheadinghomewithterrazine_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1DDD3DFF_g;
    int auto1DDD3DFF_u;
    unit auto1DDD3DFF_var;

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(EventUnit(), "CarryTerrazineNode") == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SCV"))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "HarvestingTerrazine") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gasHarvestingCount -= 1;
    UnitBehaviorRemove(EventUnit(), "HarvestingTerrazine", 1);
    auto1DDD3DFF_g = UnitGroup("TerrazineNode", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1DDD3DFF_u = UnitGroupCount(auto1DDD3DFF_g, c_unitCountAll);
    for (;; auto1DDD3DFF_u -= 1) {
        auto1DDD3DFF_var = UnitGroupUnitFromEnd(auto1DDD3DFF_g, auto1DDD3DFF_u);
        if (auto1DDD3DFF_var == null) { break; }
        UnitSetCustomValue(auto1DDD3DFF_var, 4, 2.0);
        UnitIssueOrder(auto1DDD3DFF_var, Order(AbilityCommand("ChangeShrineTerran", 0)), c_orderQueueReplace);
    }
    if ((UnitGetType(gf_NodeMatchingCustomValue(FixedToInt(UnitGetCustomValue(EventUnit(), 0)))) == "TerrazineNode")) {
        SoundPlayOnUnit(SoundLink("Raven_AutoTurretReleaseImpact", 0), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    }

    UnitSetCustomValue(EventUnit(), 1, UnitGetCustomValue(EventUnit(), 0));
    gv_sCVGoingHome = EventUnit();
    PingCreate(PlayerGroupSingle(gv_p1_USER), "PingSimple", UnitGetPosition(EventUnit()), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
    PingSetUnit(PingLastCreated(), EventUnit());
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/222F31F7"));
    gv_playerHarvesterPings[FixedToInt(UnitGetCustomValue(EventUnit(), 1))] = PingLastCreated();
    TriggerExecute(gt_FirstTerrazineReturnQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SCVisheadinghomewithterrazine_Init () {
    gt_SCVisheadinghomewithterrazine = TriggerCreate("gt_SCVisheadinghomewithterrazine_Func");
    TriggerAddEventUnitAbility(gt_SCVisheadinghomewithterrazine, null, AbilityCommand("SCVHarvest", 1), c_abilHarvestStageWaitToReturn, false);
    TriggerAddEventUnitAbility(gt_SCVisheadinghomewithterrazine, null, AbilityCommand("SCVHarvest", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Terrazine Return Q
//--------------------------------------------------------------------------------------------------
bool gt_FirstTerrazineReturnQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_talkIcon;
    unit lv_firstSCVGoingHome;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_firstSCVGoingHome = gv_sCVGoingHome;
    Wait(1.0, c_timeReal);
    TriggerQueueEnter();
    if (((gv_gameOver == true) || (UnitIsAlive(lv_firstSCVGoingHome) == false) || (gv_playerScore >= 1))) {
        return true;
    }

    libNtve_gf_AttachModelToUnit(lv_firstSCVGoingHome, "TalkIcon", "Ref_Origin");
    lv_talkIcon = libNtve_gf_ActorLastCreated();
    UIAlertUnit("Trigger", gv_p1_USER, StringExternal("Param/Value/6130E297"), null, lv_firstSCVGoingHome);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh02SCV00006", -1)
    libCamp_gf_SendTransmissionCampaign(lv_firstSCVGoingHome, SoundLink("TTosh02SCV00006", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    libNtve_gf_KillModel(lv_talkIcon);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstTerrazineReturnQ_Init () {
    gt_FirstTerrazineReturnQ = TriggerCreate("gt_FirstTerrazineReturnQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCV with terrazine dies on return trip
//--------------------------------------------------------------------------------------------------
bool gt_SCVwithterrazinediesonreturntrip_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_customValueOfDeadSCV;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetCustomValue(EventUnit(), 1) > 0.0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SCV"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gasControlCount -= 1;
    lv_customValueOfDeadSCV = UnitGetCustomValue(EventUnit(), 1);
    UnitCreate(1, "TerrazineCanister", 0, gv_p5_TERRAZINE, UnitGetPosition(EventUnit()), 0.0);
    UnitSetCustomValue(UnitLastCreated(), 0, lv_customValueOfDeadSCV);
    libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, gv_p1_USER);
    libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, gv_p2_PROTOSS_EAST_ATTACKERS);
    libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, gv_p3_PROTOSS_SCRIPTED);
    libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, gv_p4_PROTOSS_WEST_ESCORTS);
    gv_terrazineNodes[FixedToInt(UnitGetCustomValue(EventUnit(), 1))] = UnitLastCreated();
    PingDestroy(gv_playerHarvesterPings[FixedToInt(lv_customValueOfDeadSCV)]);
    AIAttackWaveCancel(gv_terrazineAttackWaves[FixedToInt(lv_customValueOfDeadSCV)][1]);
    AIAttackWaveCancel(gv_terrazineAttackWaves[FixedToInt(lv_customValueOfDeadSCV)][2]);
    gv_droppedCargoFlashUnit = UnitLastCreated();
    TriggerExecute(gt_DroppedterrazinecargoQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SCVwithterrazinediesonreturntrip_Init () {
    gt_SCVwithterrazinediesonreturntrip = TriggerCreate("gt_SCVwithterrazinediesonreturntrip_Func");
    TriggerAddEventUnitDied(gt_SCVwithterrazinediesonreturntrip, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dropped terrazine cargo Q
//--------------------------------------------------------------------------------------------------
bool gt_DroppedterrazinecargoQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_CreateTipFromConversationState("StoryTips|Tosh02_DroppedTerrazine", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    UnitFlashSelection(gv_droppedCargoFlashUnit, 1.0);
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DroppedterrazinecargoQ_Init () {
    gt_DroppedterrazinecargoQ = TriggerCreate("gt_DroppedterrazinecargoQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player has claimed terrazine
//--------------------------------------------------------------------------------------------------
bool gt_Playerhasclaimedterrazine_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetCustomValue(EventUnit(), 1) != 0.0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gasControlCount -= 1;
    SoundPlay(SoundLink("Terran_Veterancy", -1), PlayerGroupAll(), 100.0, 0.0);
    AIAttackWaveCancel(gv_terrazineAttackWaves[FixedToInt(UnitGetCustomValue(EventUnit(), 0))][1]);
    AIAttackWaveCancel(gv_terrazineAttackWaves[FixedToInt(UnitGetCustomValue(EventUnit(), 0))][2]);
    PingDestroy(gv_playerHarvesterPings[FixedToInt(UnitGetCustomValue(EventUnit(), 1))]);
    UnitSetCustomValue(EventUnit(), 0, 0.0);
    UnitSetCustomValue(EventUnit(), 1, 0.0);
    gv_playerScore = (gv_playerScore + 1);
    TriggerExecute(gt_PrimaryObjectiveCollectTerrazineUpdate, true, false);
    if ((gv_playerScore == 1)) {
        TriggerExecute(gt_Playerharvested1NodeQ, true, false);
    }

    if ((gv_playerScore == 3)) {
        TriggerExecute(gt_Playerharvested3NodeQ, true, false);
    }

    if ((gv_playerScore == 4)) {
        TriggerExecute(gt_Playerharvested4NodeQ, true, false);
    }

    if ((gv_playerScore >= 5) && (gv_multipleTerrazineSealingState == ge_PRESET_MultipleTerrazineSealingState_Disabled)) {
        gv_multipleTerrazineSealingState = ge_PRESET_MultipleTerrazineSealingState_Enabled;
    }

    if ((gv_playerScore == (gv_playerCollectionQuota - 1))) {
        TriggerExecute(gt_Playerharvested6NodeQ, true, false);
    }

    if ((gv_playerScore == gv_playerCollectionQuota)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_VictoryTerrazineCollected, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Playerhasclaimedterrazine_Init () {
    gt_Playerhasclaimedterrazine = TriggerCreate("gt_Playerhasclaimedterrazine_Func");
    TriggerAddEventUnitAbility(gt_Playerhasclaimedterrazine, null, AbilityCommand("SCVHarvest", 1), c_abilHarvestStageDropOff, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player harvested 1 Node Q
//--------------------------------------------------------------------------------------------------
bool gt_Playerharvested1NodeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/E3E743A5"));
    TriggerQueueEnter();
    if (((gv_playerScore >= 3) || (gv_gameOver == true))) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh02Tosh00013", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh02Tosh00013", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Playerharvested1NodeQ_Init () {
    gt_Playerharvested1NodeQ = TriggerCreate("gt_Playerharvested1NodeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player harvested 3 Node Q
//--------------------------------------------------------------------------------------------------
bool gt_Playerharvested3NodeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/7DAF9358"));
    TriggerQueueEnter();
    if (((gv_playerScore >= 4) || (gv_gameOver == true))) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh02Tosh00016", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh02Tosh00016", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Playerharvested3NodeQ_Init () {
    gt_Playerharvested3NodeQ = TriggerCreate("gt_Playerharvested3NodeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player harvested 4 Node Q
//--------------------------------------------------------------------------------------------------
bool gt_Playerharvested4NodeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if (((gv_playerScore >= 6) || (gv_gameOver == true))) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh02Raynor00017", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh02Raynor00017", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Playerharvested4NodeQ_Init () {
    gt_Playerharvested4NodeQ = TriggerCreate("gt_Playerharvested4NodeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player harvested 6 Node Q
//--------------------------------------------------------------------------------------------------
bool gt_Playerharvested6NodeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/E7F007A7"));
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh02Tosh00018", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh02Tosh00018", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Playerharvested6NodeQ_Init () {
    gt_Playerharvested6NodeQ = TriggerCreate("gt_Playerharvested6NodeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss sealing terrazine Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtosssealingterrazineQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Probe"))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitTargetUnit()) == "TerrazineNode") || (UnitGetType(EventUnitTargetUnit()) == "TerrazineCanister")))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnitTargetUnit()) == "TerrazineNode")) {
        SoundPlayOnUnit(SoundLink("Sentry_ForceFieldDeath", 0), PlayerGroupAll(), EventUnitTargetUnit(), 0.0, 100.0, 0.0);
    }
    else {
        SoundPlayOnUnit(SoundLink("WarpGate_TrainStart", 0), PlayerGroupAll(), EventUnitTargetUnit(), 0.0, 100.0, 0.0);
    }
    libNtve_gf_SendActorMessageToUnit(EventUnitTargetUnit(), "Signal ProtossStart");
    UnitSetCustomValue(EventUnit(), 0, UnitGetCustomValue(EventUnitTargetUnit(), 0));
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/8CA221DD"), "Assets\\Textures\\btn-unit-protoss-probe.dds", UnitGetPosition(EventUnit()));
    UnitForceStatusBar(EventUnitTargetUnit(), true);
    if ((UnitGetType(EventUnitTargetUnit()) == "TerrazineNode")) {
        UnitBehaviorAdd(EventUnitTargetUnit(), "TerrazineCountdownDummyBar", EventUnitTargetUnit(), 1);
    }
    else {
        UnitBehaviorAdd(EventUnitTargetUnit(), "TerrazineCountdownDummyBarFaster", EventUnitTargetUnit(), 1);
        return true;
    }
    PingCreate(PlayerGroupSingle(gv_p1_USER), "PingWarning", UnitGetPosition(EventUnit()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    PingSetUnit(PingLastCreated(), EventUnit());
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/833EFEF2"));
    gv_protossHarvesterPings[FixedToInt(UnitGetCustomValue(EventUnit(), 0))] = PingLastCreated();
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    if ((UnitIsAlive(EventUnit()) == true) && (UnitGetCustomValue(EventUnit(), 0) > 0.1)) {
        SoundPlay(SoundLink("TUIWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(1.0, c_timeReal);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TTosh02Adjutant00024", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh02Adjutant00024", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    if ((TriggerGetExecCount(gt_ProtossstartssealingfirstterrazinenodeQ) == 0)) {
        TriggerExecute(gt_ProtossstartssealingfirstterrazinenodeQ, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtosssealingterrazineQ_Init () {
    gt_ProtosssealingterrazineQ = TriggerCreate("gt_ProtosssealingterrazineQ_Func");
    TriggerAddEventUnitAbility(gt_ProtosssealingterrazineQ, null, AbilityCommand("ProbeHarvest", 0), c_abilHarvestStageHarvest, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss starts sealing first terrazine node Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossstartssealingfirstterrazinenodeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh02Raynor00022", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh02Raynor00022", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    ObjectiveShow(gv_primaryObjectiveStopProtossGas, PlayerGroupAll(), true);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    libCamp_gf_CreateTipFromConversationState("StoryTips|Tosh02_StopProtoss", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossstartssealingfirstterrazinenodeQ_Init () {
    gt_ProtossstartssealingfirstterrazinenodeQ = TriggerCreate("gt_ProtossstartssealingfirstterrazinenodeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss probe goes idle - terrazine harvested by player
//--------------------------------------------------------------------------------------------------
bool gt_Protossprobegoesidleterrazineharvestedbyplayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_unharvestedTerrazineGroup;
    unit lv_newTerrazineTarget;
    int lv_target;

    // Automatic Variable Declarations
    unitgroup autoAB784FE7_g;
    int autoAB784FE7_u;
    unit autoAB784FE7_var;
    unitgroup auto9A060CE7_g;
    int auto9A060CE7_u;
    unit auto9A060CE7_var;

    // Variable Initialization
    lv_unharvestedTerrazineGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Probe"))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_probeHarvesters, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    autoAB784FE7_g = UnitGroup("TerrazineNode", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAB784FE7_u = UnitGroupCount(autoAB784FE7_g, c_unitCountAll);
    for (;; autoAB784FE7_u -= 1) {
        autoAB784FE7_var = UnitGroupUnitFromEnd(autoAB784FE7_g, autoAB784FE7_u);
        if (autoAB784FE7_var == null) { break; }
        if ((UnitGetCustomValue(autoAB784FE7_var, 4) < 1.0)) {
            UnitGroupAdd(lv_unharvestedTerrazineGroup, autoAB784FE7_var);
        }

    }
    lv_newTerrazineTarget = libNtve_gf_ClosestUnitToPoint(RegionGetCenter(gv_terrazineRegions[FixedToInt(UnitGetCustomValue(EventUnit(), 3))]), lv_unharvestedTerrazineGroup);
    if ((lv_newTerrazineTarget == null)) {
        UnitSetCustomValue(EventUnit(), 0, 0.0);
        UnitSetCustomValue(EventUnit(), 1, 0.0);
        UnitSetCustomValue(EventUnit(), 2, 0.0);
        if ((UnitGetOwner(EventUnit()) == gv_p2_PROTOSS_EAST_ATTACKERS)) {
            UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("ProbeHarvest", 0), UnitGroupRandomUnit(UnitGroup("MineralField", c_playerAny, RegionFromId(36), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueReplace);
        }

        if ((UnitGetOwner(EventUnit()) == gv_p4_PROTOSS_WEST_ESCORTS)) {
            UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("ProbeHarvest", 0), UnitGroupRandomUnit(UnitGroup("MineralField", c_playerAny, RegionFromId(38), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueReplace);
        }

        auto9A060CE7_g = AIGetAllEscortsGroup(libNtve_gf_ConvertUnitToUnitGroup(EventUnit()));
        auto9A060CE7_u = UnitGroupCount(auto9A060CE7_g, c_unitCountAll);
        for (;; auto9A060CE7_u -= 1) {
            auto9A060CE7_var = UnitGroupUnitFromEnd(auto9A060CE7_g, auto9A060CE7_u);
            if (auto9A060CE7_var == null) { break; }
            AIRemoveUnitFromAnyWaves(auto9A060CE7_var);
        }
    }
    else {
        UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("ProbeHarvest", 0), lv_newTerrazineTarget), c_orderQueueReplace);
        UnitSetCustomValue(EventUnit(), 0, UnitGetCustomValue(lv_newTerrazineTarget, 0));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Protossprobegoesidleterrazineharvestedbyplayer_Init () {
    gt_Protossprobegoesidleterrazineharvestedbyplayer = TriggerCreate("gt_Protossprobegoesidleterrazineharvestedbyplayer_Func");
    TriggerAddEventUnitBecomesIdle(gt_Protossprobegoesidleterrazineharvestedbyplayer, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Probe is killed while harvesting
//--------------------------------------------------------------------------------------------------
bool gt_Probeiskilledwhileharvesting_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto16B0C7AE_g;
    int auto16B0C7AE_u;
    unit auto16B0C7AE_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetCustomValue(EventUnit(), 0) > 0.0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Probe"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_probesThwarted += 1;
    if ((UnitGetType(gf_NodeMatchingCustomValue(FixedToInt(UnitGetCustomValue(EventUnit(), 0)))) == "TerrazineNode")) {
        SoundPlayOnUnit(SoundLink("Raven_PointDefenseDroneReleaseLaunch", 0), PlayerGroupAll(), gf_NodeMatchingCustomValue(FixedToInt(UnitGetCustomValue(EventUnit(), 0))), 0.0, 100.0, 0.0);
    }

    libNtve_gf_SendActorMessageToUnit(gf_NodeMatchingCustomValue(FixedToInt(UnitGetCustomValue(EventUnit(), 0))), "Signal ProtossInterrupt");
    UnitBehaviorRemove(gf_NodeMatchingCustomValue(FixedToInt(UnitGetCustomValue(EventUnit(), 0))), "TerrazineCountdownDummyBar", 1);
    UnitBehaviorRemove(gf_NodeMatchingCustomValue(FixedToInt(UnitGetCustomValue(EventUnit(), 0))), "TerrazineCountdownDummyBarFaster", 1);
    UnitForceStatusBar(gf_NodeMatchingCustomValue(FixedToInt(UnitGetCustomValue(EventUnit(), 0))), false);
    PingDestroy(gv_protossHarvesterPings[FixedToInt(UnitGetCustomValue(EventUnit(), 0))]);
    auto16B0C7AE_g = AIGetAllEscortsGroup(libNtve_gf_ConvertUnitToUnitGroup(EventUnit()));
    auto16B0C7AE_u = UnitGroupCount(auto16B0C7AE_g, c_unitCountAll);
    for (;; auto16B0C7AE_u -= 1) {
        auto16B0C7AE_var = UnitGroupUnitFromEnd(auto16B0C7AE_g, auto16B0C7AE_u);
        if (auto16B0C7AE_var == null) { break; }
        AIRemoveUnitFromAnyWaves(auto16B0C7AE_var);
        if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1) && (UnitGetType(auto16B0C7AE_var) != "Observer")) {
            AISetUnitSuicide(auto16B0C7AE_var, true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Probeiskilledwhileharvesting_Init () {
    gt_Probeiskilledwhileharvesting = TriggerCreate("gt_Probeiskilledwhileharvesting_Func");
    TriggerAddEventUnitDied(gt_Probeiskilledwhileharvesting, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Probe has sealed the terrazine
//--------------------------------------------------------------------------------------------------
bool gt_Probehassealedtheterrazine_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6230FCEB_g;
    int auto6230FCEB_u;
    unit auto6230FCEB_var;
    unitgroup auto8E33FE20_g;
    int auto8E33FE20_u;
    unit auto8E33FE20_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Probe"))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "CarryTerrazineNode") == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6230FCEB_g = UnitGroup("TerrazineNode", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6230FCEB_u = UnitGroupCount(auto6230FCEB_g, c_unitCountAll);
    for (;; auto6230FCEB_u -= 1) {
        auto6230FCEB_var = UnitGroupUnitFromEnd(auto6230FCEB_g, auto6230FCEB_u);
        if (auto6230FCEB_var == null) { break; }
        UnitSetCustomValue(auto6230FCEB_var, 4, 2.0);
        UnitIssueOrder(auto6230FCEB_var, Order(AbilityCommand("ChangeShrineProtoss", 0)), c_orderQueueReplace);
        UnitSetInfoText(auto6230FCEB_var, StringExternal("Param/Value/02D689D4"), StringToText(""), StringToText(""));
    }
    SoundPlay(SoundLink("Alert_UniObjectiveFailed", 0), PlayerGroupAll(), 100.0, 0.0);
    UnitBehaviorRemove(EventUnit(), "CarryTerrazineNode", 1);
    PingDestroy(gv_protossHarvesterPings[FixedToInt(UnitGetCustomValue(EventUnit(), 0))]);
    UnitSetCustomValue(EventUnit(), 0, 0.0);
    UnitSetCustomValue(EventUnit(), 1, 0.0);
    UnitSetCustomValue(EventUnit(), 2, 0.0);
    UnitGroupRemove(gv_probeHarvesters, EventUnit());
    UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("ProbeHarvest", 0), UnitFromId(39)), c_orderQueueReplace);
    gv_protossScore = (gv_protossScore + 1);
    TriggerExecute(gt_PrimaryObjectiveCollectTerrazineUpdate, true, false);
    auto8E33FE20_g = AIGetAllEscortsGroup(libNtve_gf_ConvertUnitToUnitGroup(EventUnit()));
    auto8E33FE20_u = UnitGroupCount(auto8E33FE20_g, c_unitCountAll);
    for (;; auto8E33FE20_u -= 1) {
        auto8E33FE20_var = UnitGroupUnitFromEnd(auto8E33FE20_g, auto8E33FE20_u);
        if (auto8E33FE20_var == null) { break; }
        AIRemoveUnitFromAnyWaves(auto8E33FE20_var);
    }
    if ((gv_protossScore == 3)) {
        TriggerExecute(gt_Protossseal3shrinesQ, true, false);
    }

    if ((gv_protossScore == 5)) {
        TriggerExecute(gt_Protossseal5shrinesQ, true, false);
    }

    if ((gv_protossScore == 6)) {
        TriggerExecute(gt_Protossseal6shrinesQ, true, false);
    }

    if ((gv_protossScore == gv_protossCollectionQuota)) {
        TriggerExecute(gt_DefeatProtossSealedTooManyTerrazine, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Probehassealedtheterrazine_Init () {
    gt_Probehassealedtheterrazine = TriggerCreate("gt_Probehassealedtheterrazine_Func");
    TriggerAddEventUnitAbility(gt_Probehassealedtheterrazine, null, AbilityCommand("ProbeHarvest", 1), c_abilHarvestStageWaitToReturn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Multiple Terrazine Sealing Attempt
//--------------------------------------------------------------------------------------------------
bool gt_MultipleTerrazineSealingAttempt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_target;
    unitgroup lv_rawTerrazineGroup;

    // Automatic Variable Declarations
    unitgroup auto7359A731_g;
    int auto7359A731_u;
    unit auto7359A731_var;
    unitgroup auto323744EC_g;
    int auto323744EC_u;
    unit auto323744EC_var;

    // Variable Initialization
    lv_rawTerrazineGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(10.0, c_timeGame);
    lv_rawTerrazineGroup = UnitGroup("TerrazineNode", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7359A731_g = lv_rawTerrazineGroup;
    auto7359A731_u = UnitGroupCount(auto7359A731_g, c_unitCountAll);
    for (;; auto7359A731_u -= 1) {
        auto7359A731_var = UnitGroupUnitFromEnd(auto7359A731_g, auto7359A731_u);
        if (auto7359A731_var == null) { break; }
        if ((UnitGetCustomValue(auto7359A731_var, 4) > 1.0)) {
            UnitGroupRemove(lv_rawTerrazineGroup, auto7359A731_var);
        }

    }
    if ((UnitGroupCount(lv_rawTerrazineGroup, c_unitCountAlive) <= libNtve_gf_DifficultyValueInt(3, 3, 2, 1))) {
        return true;
    }

    auto323744EC_g = lv_rawTerrazineGroup;
    auto323744EC_u = UnitGroupCount(auto323744EC_g, c_unitCountAll);
    for (;; auto323744EC_u -= 1) {
        auto323744EC_var = UnitGroupUnitFromEnd(auto323744EC_g, auto323744EC_u);
        if (auto323744EC_var == null) { break; }
        if ((gv_multipleTerrazineSealingFirstTarget == FixedToInt(UnitGetCustomValue(auto323744EC_var, 0)))) {
            UnitGroupRemove(lv_rawTerrazineGroup, auto323744EC_var);
            break;
        }

    }
    lv_target = FixedToInt(UnitGetCustomValue(libNtve_gf_ClosestUnitToPoint(PointFromId(10), lv_rawTerrazineGroup), 0));
    gf_AITerrazineHarvestAttempt(lv_target, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MultipleTerrazineSealingAttempt_Init () {
    gt_MultipleTerrazineSealingAttempt = TriggerCreate("gt_MultipleTerrazineSealingAttempt_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss seal 3 shrines Q
//--------------------------------------------------------------------------------------------------
bool gt_Protossseal3shrinesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh02Tosh00020", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh02Tosh00020", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Protossseal3shrinesQ_Init () {
    gt_Protossseal3shrinesQ = TriggerCreate("gt_Protossseal3shrinesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss seal 5 shrines Q
//--------------------------------------------------------------------------------------------------
bool gt_Protossseal5shrinesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh02Raynor00021", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh02Raynor00021", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Protossseal5shrinesQ_Init () {
    gt_Protossseal5shrinesQ = TriggerCreate("gt_Protossseal5shrinesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss seal 6 shrines Q
//--------------------------------------------------------------------------------------------------
bool gt_Protossseal6shrinesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh02Raynor00019", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh02Raynor00019", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Protossseal6shrinesQ_Init () {
    gt_Protossseal6shrinesQ = TriggerCreate("gt_Protossseal6shrinesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AICampaignStart(gv_p2_PROTOSS_EAST_ATTACKERS);
    AICampaignStart(gv_p3_PROTOSS_SCRIPTED);
    AICampaignStart(gv_p4_PROTOSS_WEST_ESCORTS);
    TriggerExecute(gt_AIP2AttackWaves, true, false);
    TriggerExecute(gt_AITerrazineSealingEN, true, false);
    TriggerExecute(gt_AITerrazineSealingH, true, false);
    TriggerExecute(gt_AITerrazineSealingI, true, false);
    AIAttackWaveSetGatherPoint(gv_p4_PROTOSS_WEST_ESCORTS, PointFromId(272));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI P2 Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_AIP2AttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPlayer(gv_p2_PROTOSS_EAST_ATTACKERS, PlayerGroupSingle(gv_p1_USER));
    AIAttackWaveAddUnits4(1, 1, 2, 2, "Zealot");
    AIAttackWaveAddUnits4(0, 0, 0, 1, "Stalker");
    AIAttackWaveSetGatherPoint(gv_p2_PROTOSS_EAST_ATTACKERS, PointFromId(22));
    AIAttackWaveAddWaypoint(gv_p2_PROTOSS_EAST_ATTACKERS, PointFromId(3014), false);
    AIAttackWaveSend(gv_p2_PROTOSS_EAST_ATTACKERS, libNtve_gf_DifficultyValueInt(240, 240, 240, 240), true);
    AIAttackWaveAddUnits4(1, 1, 2, 0, "Zealot");
    AIAttackWaveAddUnits4(2, 2, 3, 4, "Scout");
    AIAttackWaveAddUnits4(0, 0, 1, 1, "Stalker");
    AIAttackWaveAddWaypoint(gv_p2_PROTOSS_EAST_ATTACKERS, PointFromId(3014), false);
    AIAttackWaveSend(gv_p2_PROTOSS_EAST_ATTACKERS, libNtve_gf_DifficultyValueInt(300, 300, 300, 240), true);
    AIAttackWaveAddUnits4(2, 2, 3, 1, "Stalker");
    AIAttackWaveAddUnits4(1, 1, 2, 3, "Scout");
    AIAttackWaveAddUnits4(1, 1, 2, 0, "VoidRay");
    AIAttackWaveAddUnits4(0, 0, 0, 1, "HighTemplar");
    AIAttackWaveSetGatherPoint(gv_p2_PROTOSS_EAST_ATTACKERS, PointFromId(48));
    AIAttackWaveAddWaypoint(gv_p2_PROTOSS_EAST_ATTACKERS, PointFromId(3014), false);
    AIAttackWaveSend(gv_p2_PROTOSS_EAST_ATTACKERS, libNtve_gf_DifficultyValueInt(300, 300, 240, 240), true);
    AIAttackWaveAddUnits4(3, 3, 4, 1, "Scout");
    AIAttackWaveAddUnits4(1, 1, 1, 0, "VoidRay");
    AIAttackWaveAddUnits4(0, 0, 1, 1, "Stalker");
    AIAttackWaveAddUnits4(0, 0, 0, 1, "Colossus");
    AIAttackWaveAddUnits4(0, 0, 0, 1, "HighTemplar");
    AIAttackWaveSetGatherPoint(gv_p2_PROTOSS_EAST_ATTACKERS, PointFromId(22));
    AIAttackWaveAddWaypoint(gv_p2_PROTOSS_EAST_ATTACKERS, PointFromId(3014), false);
    AIAttackWaveAddWaypoint(gv_p2_PROTOSS_EAST_ATTACKERS, PointFromId(3017), false);
    AIAttackWaveAddWaypoint(gv_p2_PROTOSS_EAST_ATTACKERS, PointFromId(43), false);
    AIAttackWaveSend(gv_p2_PROTOSS_EAST_ATTACKERS, libNtve_gf_DifficultyValueInt(270, 270, 210, 210), true);
    AIAttackWaveAddUnits4(2, 2, 3, 1, "Zealot");
    AIAttackWaveAddUnits4(0, 0, 0, 2, "Stalker");
    AIAttackWaveAddUnits4(2, 2, 1, 0, "Scout");
    AIAttackWaveAddUnits4(1, 1, 2, 1, "VoidRay");
    AIAttackWaveAddUnits4(0, 0, 1, 1, "Colossus");
    AIAttackWaveSetGatherPoint(gv_p2_PROTOSS_EAST_ATTACKERS, PointFromId(48));
    AIAttackWaveAddWaypoint(gv_p2_PROTOSS_EAST_ATTACKERS, PointFromId(3014), false);
    AIAttackWaveAddWaypoint(gv_p2_PROTOSS_EAST_ATTACKERS, PointFromId(3017), false);
    AIAttackWaveAddWaypoint(gv_p2_PROTOSS_EAST_ATTACKERS, PointFromId(43), false);
    AIAttackWaveSend(gv_p2_PROTOSS_EAST_ATTACKERS, libNtve_gf_DifficultyValueInt(300, 300, 240, 240), true);
    while (true) {
        AIAttackWaveAddUnits4(2, 2, 3, 2, "Stalker");
        AIAttackWaveAddUnits4(3, 3, 2, 3, "Scout");
        AIAttackWaveAddUnits4(0, 0, 1, 1, "VoidRay");
        AIAttackWaveAddUnits4(0, 0, 0, 1, "HighTemplar");
        AIAttackWaveSetGatherPoint(gv_p2_PROTOSS_EAST_ATTACKERS, PointFromId(22));
        AIAttackWaveAddWaypoint(gv_p2_PROTOSS_EAST_ATTACKERS, PointFromId(3014), false);
        AIAttackWaveSend(gv_p2_PROTOSS_EAST_ATTACKERS, libNtve_gf_DifficultyValueInt(300, 300, 240, 240), true);
        AIAttackWaveAddUnits4(4, 4, 3, 3, "Scout");
        AIAttackWaveAddUnits4(1, 1, 2, 0, "VoidRay");
        AIAttackWaveAddUnits4(0, 0, 1, 2, "Colossus");
        AIAttackWaveSetGatherPoint(gv_p2_PROTOSS_EAST_ATTACKERS, PointFromId(48));
        AIAttackWaveAddWaypoint(gv_p2_PROTOSS_EAST_ATTACKERS, PointFromId(3014), false);
        AIAttackWaveAddWaypoint(gv_p2_PROTOSS_EAST_ATTACKERS, PointFromId(3017), false);
        AIAttackWaveAddWaypoint(gv_p2_PROTOSS_EAST_ATTACKERS, PointFromId(43), false);
        AIAttackWaveSend(gv_p2_PROTOSS_EAST_ATTACKERS, libNtve_gf_DifficultyValueInt(300, 300, 240, 240), true);
        AIAttackWaveAddUnits4(3, 3, 4, 0, "Zealot");
        AIAttackWaveAddUnits4(0, 0, 0, 3, "Stalker");
        AIAttackWaveAddUnits4(3, 3, 0, 0, "Scout");
        AIAttackWaveAddUnits4(0, 0, 3, 1, "VoidRay");
        AIAttackWaveAddUnits4(0, 0, 1, 1, "Colossus");
        AIAttackWaveAddUnits4(0, 0, 0, 1, "HighTemplar");
        AIAttackWaveSetGatherPoint(gv_p2_PROTOSS_EAST_ATTACKERS, PointFromId(22));
        AIAttackWaveAddWaypoint(gv_p2_PROTOSS_EAST_ATTACKERS, PointFromId(3014), false);
        AIAttackWaveSend(gv_p2_PROTOSS_EAST_ATTACKERS, libNtve_gf_DifficultyValueInt(300, 300, 240, 240), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIP2AttackWaves_Init () {
    gt_AIP2AttackWaves = TriggerCreate("gt_AIP2AttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terrazine Sealing EN
//--------------------------------------------------------------------------------------------------
bool gt_AITerrazineSealingEN_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(215.0, c_timeGame);
    gf_AITerrazineHarvestAttempt(4, 1);
    Wait(180.0, c_timeGame);
    gf_AITerrazineHarvestAttempt(9, 2);
    Wait(180.0, c_timeGame);
    gv_protossThreatLevel = 2;
    gf_AITerrazineHarvestAttempt(2, 3);
    Wait(180.0, c_timeGame);
    gf_AITerrazineHarvestAttempt(7, 2);
    Wait(180.0, c_timeGame);
    gv_protossThreatLevel = 3;
    gf_AITerrazineHarvestAttempt(3, 4);
    Wait(180.0, c_timeGame);
    gf_AITerrazineHarvestAttempt(6, 3);
    Wait(180.0, c_timeGame);
    gv_protossThreatLevel = 4;
    gf_AITerrazineHarvestAttempt(3, 4);
    Wait(180.0, c_timeGame);
    gf_AITerrazineHarvestAttempt(12, 4);
    Wait(180.0, c_timeGame);
    gv_protossThreatLevel = 5;
    gf_AITerrazineHarvestAttempt(13, 5);
    Wait(180.0, c_timeGame);
    gf_AITerrazineHarvestAttempt(8, 5);
    Wait(180.0, c_timeGame);
    gf_AITerrazineHarvestAttempt(11, 6);
    Wait(180.0, c_timeGame);
    gv_protossThreatLevel = 6;
    gf_AITerrazineHarvestAttempt(10, 6);
    Wait(180.0, c_timeGame);
    while (true) {
        gf_AITerrazineHarvestAttempt(1, 1);
        Wait(180.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AITerrazineSealingEN_Init () {
    gt_AITerrazineSealingEN = TriggerCreate("gt_AITerrazineSealingEN_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terrazine Sealing H
//--------------------------------------------------------------------------------------------------
bool gt_AITerrazineSealingH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((libNtve_gf_DifficultyValueInt(0, 0, 1, 0) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(215.0, c_timeGame);
    gf_AITerrazineHarvestAttempt(4, 1);
    Wait(150.0, c_timeGame);
    gf_AITerrazineHarvestAttempt(9, 2);
    gf_ResearchForAllProtoss("ProtossGroundArmorsLevel1");
    Wait(150.0, c_timeGame);
    gv_protossThreatLevel = 2;
    gf_AITerrazineHarvestAttempt(6, 3);
    gf_ResearchForAllProtoss("ProtossAirArmorsLevel1");
    Wait(150.0, c_timeGame);
    gf_AITerrazineHarvestAttempt(7, 2);
    gf_ResearchForAllProtoss("ProtossGroundWeaponsLevel1");
    Wait(150.0, c_timeGame);
    gv_protossThreatLevel = 3;
    gf_ResearchForAllProtoss("GraviticThrusters");
    gf_AITerrazineHarvestAttempt(5, 4);
    gf_ResearchForAllProtoss("ProtossAirWeaponsLevel1");
    Wait(150.0, c_timeGame);
    gf_AITerrazineHarvestAttempt(2, 3);
    gf_ResearchForAllProtoss("ProtossShieldsLevel2");
    Wait(150.0, c_timeGame);
    gv_protossThreatLevel = 4;
    gf_ResearchForAllProtoss("VoidRaySpeedUpgrade");
    gf_AITerrazineHarvestAttempt(3, 4);
    Wait(150.0, c_timeGame);
    gf_AITerrazineHarvestAttempt(13, 5);
    Wait(150.0, c_timeGame);
    gv_protossThreatLevel = 5;
    gf_AITerrazineHarvestAttempt(12, 4);
    Wait(150.0, c_timeGame);
    gf_AITerrazineHarvestAttempt(8, 5);
    Wait(150.0, c_timeGame);
    gf_AITerrazineHarvestAttempt(11, 6);
    Wait(150.0, c_timeGame);
    gv_protossThreatLevel = 6;
    gf_AITerrazineHarvestAttempt(10, 6);
    Wait(150.0, c_timeGame);
    while (true) {
        gf_AITerrazineHarvestAttempt(1, 1);
        Wait(150.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AITerrazineSealingH_Init () {
    gt_AITerrazineSealingH = TriggerCreate("gt_AITerrazineSealingH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terrazine Sealing I
//--------------------------------------------------------------------------------------------------
bool gt_AITerrazineSealingI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(215.0, c_timeGame);
    gf_AITerrazineHarvestAttempt(1, 1);
    gf_ResearchForAllProtoss("ProtossAirArmorsLevel1");
    Wait(130.0, c_timeGame);
    gf_AITerrazineHarvestAttempt(7, 2);
    gf_ResearchForAllProtoss("ProtossGroundWeaponsLevel1");
    Wait(130.0, c_timeGame);
    gv_protossThreatLevel = 2;
    gf_ResearchForAllProtoss("Charge");
    gf_AITerrazineHarvestAttempt(6, 3);
    gf_ResearchForAllProtoss("ProtossAirWeaponsLevel1");
    Wait(130.0, c_timeGame);
    gf_AITerrazineHarvestAttempt(7, 2);
    gf_ResearchForAllProtoss("ProtossShieldsLevel2");
    Wait(130.0, c_timeGame);
    gv_protossThreatLevel = 3;
    gf_AITerrazineHarvestAttempt(5, 4);
    gf_ResearchForAllProtoss("GraviticThrusters");
    Wait(130.0, c_timeGame);
    gf_AITerrazineHarvestAttempt(2, 3);
    gf_ResearchForAllProtoss("ProtossGroundArmorsLevel2");
    Wait(130.0, c_timeGame);
    gv_protossThreatLevel = 4;
    gf_ResearchForAllProtoss("VoidRaySpeedUpgrade");
    gf_AITerrazineHarvestAttempt(3, 4);
    gf_ResearchForAllProtoss("ProtossAirArmorsLevel2");
    Wait(120.0, c_timeGame);
    gf_AITerrazineHarvestAttempt(13, 5);
    gf_ResearchForAllProtoss("ProtossGroundWeaponsLevel2");
    gv_protossThreatLevel = 5;
    gf_AITerrazineHarvestAttempt(12, 4);
    gf_ResearchForAllProtoss("ProtossAirWeaponsLevel2");
    Wait(120.0, c_timeGame);
    gv_protossThreatLevel = 6;
    gf_AITerrazineHarvestAttempt(8, 5);
    Wait(120.0, c_timeGame);
    gf_AITerrazineHarvestAttempt(11, 6);
    Wait(120.0, c_timeGame);
    gf_AITerrazineHarvestAttempt(10, 6);
    Wait(120.0, c_timeGame);
    while (true) {
        gf_AITerrazineHarvestAttempt(1, 1);
        Wait(120.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AITerrazineSealingI_Init () {
    gt_AITerrazineSealingI = TriggerCreate("gt_AITerrazineSealingI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Resources Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIResourcesMinerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 1000)) {
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 1000);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIResourcesMinerals_Init () {
    gt_AIResourcesMinerals = TriggerCreate("gt_AIResourcesMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIResourcesMinerals, gv_p2_PROTOSS_EAST_ATTACKERS, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIResourcesMinerals, gv_p3_PROTOSS_SCRIPTED, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIResourcesMinerals, gv_p4_PROTOSS_WEST_ESCORTS, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Resources Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIResourcesGas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 1000)) {
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 1000);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIResourcesGas_Init () {
    gt_AIResourcesGas = TriggerCreate("gt_AIResourcesGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIResourcesGas, gv_p2_PROTOSS_EAST_ATTACKERS, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIResourcesGas, gv_p3_PROTOSS_SCRIPTED, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIResourcesGas, gv_p4_PROTOSS_WEST_ESCORTS, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - SCVs Lost
//--------------------------------------------------------------------------------------------------
bool gt_StatSCVsLost_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SCV"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_statSCVsLost += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatSCVsLost_Init () {
    gt_StatSCVsLost = TriggerCreate("gt_StatSCVsLost_Func");
    TriggerAddEventUnitDied(gt_StatSCVsLost, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Protoss Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryProtossDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroupAlliance(gv_p2_PROTOSS_EAST_ATTACKERS, c_unitAllianceAlly, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1)) {
        AchievementAward(gv_p1_USER, "FeatOfStrength_TTosh02");
    }

    gv_gameOver = true;
    TriggerExecute(gt_ProtossDestroyedQ, true, true);
    TriggerExecute(gt_PrimaryObjectiveCollectTerrazineCompleted, true, true);
    libCamp_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryProtossDestroyed_Init () {
    gt_VictoryProtossDestroyed = TriggerCreate("gt_VictoryProtossDestroyed_Func");
    TriggerAddEventTimePeriodic(gt_VictoryProtossDestroyed, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossDestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus02Horner00044", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Horner00044", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossDestroyedQ_Init () {
    gt_ProtossDestroyedQ = TriggerCreate("gt_ProtossDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Terrazine Collected
//--------------------------------------------------------------------------------------------------
bool gt_VictoryTerrazineCollected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_PrimaryObjectiveCollectTerrazineCompleted, true, true);
    libCamp_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryTerrazineCollected_Init () {
    gt_VictoryTerrazineCollected = TriggerCreate("gt_VictoryTerrazineCollected_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((ObjectiveGetState(gv_primaryObjectiveGetGas) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_primaryObjectiveStopProtossGas) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_bonusObjectiveCollectRelics) == c_objectiveStateCompleted)) {
        AchievementAward(gv_p1_USER, "TTosh02_1");
    }

    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_statSCVsLost == 0)) {
        AchievementAward(gv_p1_USER, "TTosh02_2");
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1) && (gv_protossScore == 0)) {
        AchievementAward(gv_p1_USER, "TTosh02_3");
    }

    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (GameGetMissionTime() < 841.0)) {
        AchievementAward(gv_p1_USER, "Anniversary_TTosh02");
        TriggerDebugOutput(1, StringExternal("Param/Value/5146E82B"), false);
    }

    VictoryPanelAddAchievement("TTosh02_1");
    VictoryPanelAddAchievement("TTosh02_2");
    VictoryPanelAddAchievement("TTosh02_3");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/81E96079"), IntToText(gv_statSCVsLost));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/ECDBCAF7"), IntToText(gv_protossScore));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/C206B757"), IntToText(gv_probesThwarted));
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/35F0325E"), (IntToText(gv_bonusObjectiveCollectRelicsFound) + StringExternal("Param/Value/100E53BD") + IntToText(gv_bonusObjectiveCollectRelicsNeeded)));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/C87BC07E"), IntToText(gv_bonusObjectiveCollectRelicsFound));
    libCamp_gf_EndCampaignMission(gv_p1_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p1_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, 0), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/24E1C1CC"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Protoss Sealed Too Many Terrazine
//--------------------------------------------------------------------------------------------------
bool gt_DefeatProtossSealedTooManyTerrazine_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/625C8228"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatProtossSealedTooManyTerrazine_Init () {
    gt_DefeatProtossSealedTooManyTerrazine = TriggerCreate("gt_DefeatProtossSealedTooManyTerrazine_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_EndCampaignMission(gv_p1_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    libCamp_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_p1_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_p1_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Primary Objective Collect Terrazine Create Q
//--------------------------------------------------------------------------------------------------
bool gt_PrimaryObjectiveCollectTerrazineCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate((StringExternal("Param/Value/EF426788") + IntToText(gv_playerScore) + StringExternal("Param/Value/074D92F4") + IntToText(gv_playerCollectionQuota) + StringExternal("Param/Value/505C291C")), StringExternal("Param/Value/DD65E84C"), c_objectiveStateActive, true);
    gv_primaryObjectiveGetGas = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TTosh02Objective1, ObjectiveLastCreated(), StringExternal("Param/Value/8E7DB6C0"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    ObjectiveCreate((StringExternal("Param/Value/3EB88A22") + IntToText(gv_protossScore) + StringExternal("Param/Value/51F25B27")), StringExternal("Param/Value/3D598152"), c_objectiveStateActive, true);
    gv_primaryObjectiveStopProtossGas = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TTosh02Objective2, ObjectiveLastCreated(), StringExternal("Param/Value/AA8975D0"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrimaryObjectiveCollectTerrazineCreateQ_Init () {
    gt_PrimaryObjectiveCollectTerrazineCreateQ = TriggerCreate("gt_PrimaryObjectiveCollectTerrazineCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Primary Objective Collect Terrazine Completed
//--------------------------------------------------------------------------------------------------
bool gt_PrimaryObjectiveCollectTerrazineCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_PrimaryObjectiveCollectTerrazineCreateQ, true, false);
    ObjectiveSetState(gv_primaryObjectiveGetGas, c_objectiveStateCompleted);
    ObjectiveSetState(gv_primaryObjectiveStopProtossGas, c_objectiveStateCompleted);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrimaryObjectiveCollectTerrazineCompleted_Init () {
    gt_PrimaryObjectiveCollectTerrazineCompleted = TriggerCreate("gt_PrimaryObjectiveCollectTerrazineCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Primary Objective Collect Terrazine Update
//--------------------------------------------------------------------------------------------------
bool gt_PrimaryObjectiveCollectTerrazineUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveSetName(gv_primaryObjectiveGetGas, (StringExternal("Param/Value/A1DD6009") + IntToText(gv_playerScore) + StringExternal("Param/Value/9FDD5B12") + IntToText(gv_playerCollectionQuota) + StringExternal("Param/Value/D3D16072")));
    ObjectiveSetName(gv_primaryObjectiveStopProtossGas, (StringExternal("Param/Value/F14C6CFE") + IntToText(gv_protossScore) + StringExternal("Param/Value/6D58251D")));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrimaryObjectiveCollectTerrazineUpdate_Init () {
    gt_PrimaryObjectiveCollectTerrazineUpdate = TriggerCreate("gt_PrimaryObjectiveCollectTerrazineUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Relic Proximity Enabler
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRelicProximityEnabler_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5F0D6499_g;
    int auto5F0D6499_u;
    unit auto5F0D6499_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto5F0D6499_g = UnitGroup("ProtossRelic", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5F0D6499_u = UnitGroupCount(auto5F0D6499_g, c_unitCountAll);
    for (;; auto5F0D6499_u -= 1) {
        auto5F0D6499_var = UnitGroupUnitFromEnd(auto5F0D6499_g, auto5F0D6499_u);
        if (auto5F0D6499_var == null) { break; }
        if ((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionCircle(UnitGetPosition(auto5F0D6499_var), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
            TriggerEnable(TriggerGetCurrent(), false);
            TriggerExecute(gt_ObjectiveRelicsCreateQ, true, true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRelicProximityEnabler_Init () {
    gt_ObjectiveRelicProximityEnabler = TriggerCreate("gt_ObjectiveRelicProximityEnabler_Func");
    TriggerAddEventTimePeriodic(gt_ObjectiveRelicProximityEnabler, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Relics - Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRelicsCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate((StringExternal("Param/Value/BD9FF1D1") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectFindProtossRelics, libCamp_ge_StoryResearchObjectiveTextStyle_Multipart, gv_bonusObjectiveCollectRelicsNeeded, gv_bonusObjectiveCollectRelicsFound)), StringExternal("Param/Value/9A49CF2B"), c_objectiveStateActive, false);
    gv_bonusObjectiveCollectRelics = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TTosh02Objective3, ObjectiveLastCreated(), StringExternal("Param/Value/5E70CBB2"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    TriggerEnable(gt_ObjectiveRelicProximityEnabler, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRelicsCreateQ_Init () {
    gt_ObjectiveRelicsCreateQ = TriggerCreate("gt_ObjectiveRelicsCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Relic Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRelicUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "ProtossRelic"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTargetUnit()) == gv_p1_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_DisplayResearchPointsGiventoPlayer(libCamp_ge_StoryResearchObject_ResearchObjectFindProtossRelics, EventUnit(), gv_p1_USER);
    UnitKill(EventUnit());
    TriggerExecute(gt_ObjectiveRelicsCreateQ, true, false);
    gv_bonusObjectiveCollectRelicsFound += 1;
    ObjectiveSetName(gv_bonusObjectiveCollectRelics, (StringExternal("Param/Value/50C45B65") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectFindProtossRelics, libCamp_ge_StoryResearchObjectiveTextStyle_Multipart, gv_bonusObjectiveCollectRelicsNeeded, gv_bonusObjectiveCollectRelicsFound)));
    if ((gv_bonusObjectiveCollectRelicsFound == gv_bonusObjectiveCollectRelicsNeeded)) {
        ObjectiveSetState(gv_bonusObjectiveCollectRelics, c_objectiveStateCompleted);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRelicUpdate_Init () {
    gt_ObjectiveRelicUpdate = TriggerCreate("gt_ObjectiveRelicUpdate_Func");
    TriggerAddEventUnitAbility(gt_ObjectiveRelicUpdate, null, AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_StartGame);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    gv_inCinematic = true;
    gv_gameOver = true;
    UnitPauseAll(true);
    AITimePause(true);
    GameTimeOfDayPause(true);
    GameSetBackground(c_backgroundFixed, "BelShirSkyBox", 100.0);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_BriefingScene00, true, true);
    TriggerExecute(gt_BriefingScene01, true, true);
    TriggerExecute(gt_BriefingScene02, true, true);
    TriggerExecute(gt_BriefingScene03, true, true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UnitPauseAll(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(923), 0.0, -1, 10, true);
    Wait(0.1, c_timeGame);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(924), (SoundLengthSync(SoundLink("TTosh02BriefingTosh00001", -1)) + (SoundLengthSync(SoundLink("TTosh02BriefingRaynor00004", -1)) + (SoundLengthSync(SoundLink("TTosh02BriefingTosh00011", -1)) + 2.0))), -1, 10, true);
    MovieStartRecording("Briefing_Video_TTosh02_00");
    SoundPlay(SoundLink("TTosh02BriefingTosh00001", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTosh02BriefingTosh00001", -1))), c_timeReal);
    SoundPlay(SoundLink("TTosh02BriefingTosh00011", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTosh02BriefingTosh00011", -1))), c_timeReal);
    SoundPlay(SoundLink("TTosh02BriefingRaynor00004", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTosh02BriefingRaynor00004", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh02BriefingTosh00001", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh02BriefingTosh00011", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh02BriefingRaynor00004", -1))), c_timeReal);
    TriggerExecute(gt_BriefingScene01Action, true, false);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00_Init () {
    gt_BriefingScene00 = TriggerCreate("gt_BriefingScene00_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_voidRay1;
    unit lv_voidRay2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(UnitFromId(2068));
    libNtve_gf_CreateUnitsAtPoint2(1, "VoidRay", 0, 2, PointFromId(2953));
    lv_voidRay1 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "VoidRay", 0, 2, PointFromId(3020));
    lv_voidRay2 = UnitLastCreated();
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(925), 0.0, -1, 10, true);
    Wait(0.1, c_timeGame);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(926), (SoundLengthSync(SoundLink("TTosh02BriefingTosh00003", -1)) - 1.0), -1, 10, true);
    MovieStartRecording("Briefing_Video_TTosh02_01");
    SoundPlay(SoundLink("TTosh02BriefingTosh00003", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitIssueOrder(lv_voidRay1, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3022)), c_orderQueueReplace);
    UnitIssueOrder(lv_voidRay2, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3021)), c_orderQueueReplace);
    Wait((1.0 * SoundLengthSync(SoundLink("TTosh02BriefingTosh00003", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh02BriefingTosh00003", -1))), c_timeReal);
    TriggerExecute(gt_BriefingScene02Action, true, false);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01_Init () {
    gt_BriefingScene01 = TriggerCreate("gt_BriefingScene01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01 Action
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01Action_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto53101F57_g;
    int auto53101F57_u;
    unit auto53101F57_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(gv_p2_PROTOSS_EAST_ATTACKERS, "Charge", 1);
    auto53101F57_g = UnitGroup(null, c_playerAny, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto53101F57_u = UnitGroupCount(auto53101F57_g, c_unitCountAll);
    for (;; auto53101F57_u -= 1) {
        auto53101F57_var = UnitGroupUnitFromEnd(auto53101F57_g, auto53101F57_u);
        if (auto53101F57_var == null) { break; }
        UnitRemove(auto53101F57_var);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "Probe", 0, gv_p2_PROTOSS_EAST_ATTACKERS, PointFromId(1720));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("ProtossBuild", 8), PointFromId(917)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("ProtossBuild", 8), PointFromId(916)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("ProbeHarvest", 0), UnitFromId(39)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "Pylon", 0, gv_p2_PROTOSS_EAST_ATTACKERS, PointFromId(1725));
    while (true) {
        if ((RandomInt(1, 3) == 1)) {
            libNtve_gf_CreateUnitsAtPoint2(1, "Stalker", 0, gv_p2_PROTOSS_EAST_ATTACKERS, RegionRandomPoint(RegionFromId(17)));
        }
        else {
            libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", 0, gv_p2_PROTOSS_EAST_ATTACKERS, RegionRandomPoint(RegionFromId(17)));
        }
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1720)), c_orderQueueReplace);
        if ((RandomInt(1, 2) == 1)) {
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1721)), c_orderQueueAddToEnd);
        }
        else {
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(936)), c_orderQueueAddToEnd);
        }
        Wait(RandomFixed(1.0, 3.0), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01Action_Init () {
    gt_BriefingScene01Action = TriggerCreate("gt_BriefingScene01Action_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 02
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_BriefingScene01Action);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(1021), 0.0, -1, 10, true);
    Wait(0.1, c_timeGame);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2560), ((SoundLengthSync(SoundLink("TTosh02BriefingRaynor00002", -1)) + SoundLengthSync(SoundLink("TTosh02BriefingRaynor00005", -1))) + SoundLengthSync(SoundLink("TTosh02BriefingSwann00010", -1))), -1, 10, true);
    MovieStartRecording("Briefing_Video_TTosh02_02");
    SoundPlay(SoundLink("TTosh02BriefingRaynor00002", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTosh02BriefingRaynor00002", -1))), c_timeReal);
    SoundPlay(SoundLink("TTosh02BriefingRaynor00005", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTosh02BriefingRaynor00005", -1))), c_timeReal);
    SoundPlay(SoundLink("TTosh02BriefingSwann00010", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTosh02BriefingSwann00010", -1))), c_timeReal);
    SoundPlay(SoundLink("TTosh02BriefingRaynor00009", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTosh02BriefingRaynor00009", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh02BriefingRaynor00002", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh02BriefingRaynor00005", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh02BriefingSwann00010", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh02BriefingRaynor00009", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene02_Init () {
    gt_BriefingScene02 = TriggerCreate("gt_BriefingScene02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 02 Action
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene02Action_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeReal);
    while (true) {
        if ((RandomInt(1, 2) == 1)) {
            libNtve_gf_CreateUnitsAtPoint2(1, "VoidRay", 0, gv_p2_PROTOSS_EAST_ATTACKERS, RegionRandomPoint(RegionFromId(14)));
        }
        else {
            libNtve_gf_CreateUnitsAtPoint2(1, "Scout", 0, gv_p2_PROTOSS_EAST_ATTACKERS, RegionRandomPoint(RegionFromId(14)));
        }
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(1))), c_orderQueueReplace);
        Wait(RandomFixed(2.0, 4.0), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene02Action_Init () {
    gt_BriefingScene02Action = TriggerCreate("gt_BriefingScene02Action_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 03
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_BriefingScene02Action);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", 0, gv_p2_PROTOSS_EAST_ATTACKERS, PointFromId(1724));
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", 0, gv_p2_PROTOSS_EAST_ATTACKERS, PointFromId(1726));
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(927), 0.0, -1, 10, true);
    Wait(0.1, c_timeGame);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(928), 20.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_TTosh02_03");
    SoundPlay(SoundLink("TTosh02BriefingTosh00006", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTosh02BriefingTosh00006", -1))), c_timeReal);
    SoundPlay(SoundLink("TTosh02BriefingRaynor00007", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTosh02BriefingRaynor00007", -1))), c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(929), 12.0, -1, 10, true);
    SoundPlay(SoundLink("TTosh02BriefingRaynor00008", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTosh02BriefingRaynor00008", -1))), c_timeReal);
    SoundPlay(SoundLink("TTosh02BriefingRaynor00012", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTosh02BriefingRaynor00012", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh02BriefingTosh00006", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh02BriefingRaynor00007", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh02BriefingRaynor00008", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh02BriefingRaynor00012", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene03_Init () {
    gt_BriefingScene03 = TriggerCreate("gt_BriefingScene03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto42CF128D_g;
    int auto42CF128D_u;
    unit auto42CF128D_var;
    unitgroup auto527806B6_g;
    int auto527806B6_u;
    unit auto527806B6_var;
    unitgroup autoCF100EDF_g;
    int autoCF100EDF_u;
    unit autoCF100EDF_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_p1_USER);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    GameSetBackground(c_backgroundFixed, "BelShirSkyBox", 100.0);
    UnitPauseAll(true);
    TriggerEnable(gt_DefeatBaseDead, false);
    auto42CF128D_g = UnitGroup(null, gv_p2_PROTOSS_EAST_ATTACKERS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto42CF128D_u = UnitGroupCount(auto42CF128D_g, c_unitCountAll);
    for (;; auto42CF128D_u -= 1) {
        auto42CF128D_var = UnitGroupUnitFromEnd(auto42CF128D_g, auto42CF128D_u);
        if (auto42CF128D_var == null) { break; }
        UnitRemove(auto42CF128D_var);
    }
    auto527806B6_g = UnitGroup(null, gv_p3_PROTOSS_SCRIPTED, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto527806B6_u = UnitGroupCount(auto527806B6_g, c_unitCountAll);
    for (;; auto527806B6_u -= 1) {
        auto527806B6_var = UnitGroupUnitFromEnd(auto527806B6_g, auto527806B6_u);
        if (auto527806B6_var == null) { break; }
        UnitRemove(auto527806B6_var);
    }
    autoCF100EDF_g = UnitGroup(null, gv_p4_PROTOSS_WEST_ESCORTS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCF100EDF_u = UnitGroupCount(autoCF100EDF_g, c_unitCountAll);
    for (;; autoCF100EDF_u -= 1) {
        autoCF100EDF_var = UnitGroupUnitFromEnd(autoCF100EDF_g, autoCF100EDF_u);
        if (autoCF100EDF_var == null) { break; }
        UnitRemove(autoCF100EDF_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "CommandCenterFlying", 0, 1, PointFromId(921));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(922)), c_orderQueueReplace);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(76), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(2021), ((SoundLengthSync(SoundLink("TTosh02Raynor00066", -1)) + 2.0) + 0.0), -1, 10, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTosh02MusicOutro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupSingle(gv_p1_USER), 0, null, true, true);
    gv_victoryCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(1.0, c_timeReal);
    // Transmission - SoundLink("TTosh02Raynor00066", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh02Raynor00066", -1), c_transmissionDurationAdd, 0.0, true);
    gv_victoryCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victoryCinematicCompleted == true)) {
        lv_fadeDuration = 4.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(lv_fadeDuration, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Victory, true, false);
    UnitPauseAll(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03VariablesUnits_Init();
    gt_Init04Music_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulty_Init();
    gt_Init07Help_Init();
    gt_IntroSequence_Init();
    gt_StartGame_Init();
    gt_GoliathandGatherTerrazineTipsQ_Init();
    gt_CampaignTipsQ_Init();
    gt_PingTerrazineonMinimapandReveal_Init();
    gt_ProtossAggroViaLeavingPlayerBase_Init();
    gt_ProtossAggroViaTimer_Init();
    gt_ProtossAggroLineQ_Init();
    gt_ProtossAggroBullies_Init();
    gt_StartRain_Init();
    gt_HarvestingSpeedBumpsNWesternTerritory_Init();
    gt_HarvestingSpeedBumpsCentralTerritory_Init();
    gt_InitNERelicDefenders_Init();
    gt_NEDefenderScriptedAI_Init();
    gt_NEDefenderDeath_Init();
    gt_NEDefenderSpawned_Init();
    gt_NEVoidRays_Init();
    gt_Playerstartsharvestingterrazine_Init();
    gt_ProtossmediumretaliationannounceQ_Init();
    gt_ProtossheavyretaliationannounceQ_Init();
    gt_SCViskilledwhileharvesting_Init();
    gt_TiptoprotectSCVsQ_Init();
    gt_SCVharvestingmanuallystopped_Init();
    gt_PlayertriestoharvestmultiplecanistersatonceQ_Init();
    gt_SCVisheadinghomewithterrazine_Init();
    gt_FirstTerrazineReturnQ_Init();
    gt_SCVwithterrazinediesonreturntrip_Init();
    gt_DroppedterrazinecargoQ_Init();
    gt_Playerhasclaimedterrazine_Init();
    gt_Playerharvested1NodeQ_Init();
    gt_Playerharvested3NodeQ_Init();
    gt_Playerharvested4NodeQ_Init();
    gt_Playerharvested6NodeQ_Init();
    gt_ProtosssealingterrazineQ_Init();
    gt_ProtossstartssealingfirstterrazinenodeQ_Init();
    gt_Protossprobegoesidleterrazineharvestedbyplayer_Init();
    gt_Probeiskilledwhileharvesting_Init();
    gt_Probehassealedtheterrazine_Init();
    gt_MultipleTerrazineSealingAttempt_Init();
    gt_Protossseal3shrinesQ_Init();
    gt_Protossseal5shrinesQ_Init();
    gt_Protossseal6shrinesQ_Init();
    gt_StartAI_Init();
    gt_AIP2AttackWaves_Init();
    gt_AITerrazineSealingEN_Init();
    gt_AITerrazineSealingH_Init();
    gt_AITerrazineSealingI_Init();
    gt_AIResourcesMinerals_Init();
    gt_AIResourcesGas_Init();
    gt_StatSCVsLost_Init();
    gt_VictoryProtossDestroyed_Init();
    gt_ProtossDestroyedQ_Init();
    gt_VictoryTerrazineCollected_Init();
    gt_Victory_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatProtossSealedTooManyTerrazine_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_PrimaryObjectiveCollectTerrazineCreateQ_Init();
    gt_PrimaryObjectiveCollectTerrazineCompleted_Init();
    gt_PrimaryObjectiveCollectTerrazineUpdate_Init();
    gt_ObjectiveRelicProximityEnabler_Init();
    gt_ObjectiveRelicsCreateQ_Init();
    gt_ObjectiveRelicUpdate_Init();
    gt_BriefingQ_Init();
    gt_BriefingScene00_Init();
    gt_BriefingScene01_Init();
    gt_BriefingScene01Action_Init();
    gt_BriefingScene02_Init();
    gt_BriefingScene02Action_Init();
    gt_BriefingScene03_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
