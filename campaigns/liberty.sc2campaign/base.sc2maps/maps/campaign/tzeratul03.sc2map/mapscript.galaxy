//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Echoes of the Future
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/CampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libCamp_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_p01_USER = 1;
const int gv_p02_ZERG_LOW_GROUND_AI = 2;
const int gv_p03_ZERG_NORTH = 3;
const int gv_p04_ZERG_EAST = 4;
const int gv_p05_ZERG_LOW_GROUND_NOAI = 5;
const int gv_p06_VOID_SEEKER = 6;
const int gv_p08_OVERMIND_REMAINS = 8;
const int gv_p10_ABANDONED_STRUCTURES = 10;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_inCinematic;
unit gv_zeratul;
bool gv_rainOn;
unitgroup gv_stage1InactivesGroup;
unitgroup gv_overlordWanderGroup;
unitgroup gv_pathingBlockerGroup;
unitgroup gv_protossProbeGroup;
unitgroup gv_infestedWarpGateGroup;
actor gv_observerPingModel;
actor gv_northGatePingModel;
actor gv_southGatePingModel;
sound gv_music;
soundlink gv_music2;
int gv_zergFrenzyTransmissionIncrement;
unitgroup gv_zerglingRush;
int gv_beaconPingNexus;
timer gv_zergFrenzyTimer;
timer gv_zergFrenzyWarningTimer;
int gv_pingNydusWormP03;
int gv_pingNydusWormP04;
int gv_zergWormFrenzyTimerWindow;
unit gv_nydusWormP03;
unit gv_nydusWormP04;
fixed gv_nydusWormHP;
bool gv_hardInsaneIgnoreWaypoints;
int gv_beaconPingBanelings;
int gv_beaconPingLurkers;
int gv_beaconPingMutalisks;
int gv_beaconPingZerglings;
timer gv_achievementHardTimer;
int gv_objectiveReachNexus;
int gv_objectiveZeratulMustSurvive;
int gv_overmindTendrilsVisited;
int gv_objectiveOvermindTendrils;
int gv_obelisksPowered;
int gv_objectivePowerTheObelisks;
unit gv_briefingUltra1;
unit gv_briefingUltra2;
unit gv_briefingUltra3;
bool gv_midColossusCinematicCompleted;
unitgroup gv_midColossusHiddenGroup;
unitgroup gv_midColossusZergActiveGroup;
bool gv_victoryCinematicCompleted;
unit gv_victoryTassadarS1;
unit gv_victoryLarvaS2;
unitgroup gv_victoryZergGroupS2;
unitgroup gv_victoryZergGroupS4;
unitgroup gv_victoryHiddenUnitGroup;
int gv_victoryCurrentTransmission;

void InitGlobals () {
    gv_stage1InactivesGroup = UnitGroupEmpty();
    gv_overlordWanderGroup = UnitGroupEmpty();
    gv_pathingBlockerGroup = UnitGroupEmpty();
    gv_protossProbeGroup = UnitGroupEmpty();
    gv_infestedWarpGateGroup = UnitGroupEmpty();
    gv_music2 = SoundLink("EditorDefaultSound", -1);
    gv_zerglingRush = UnitGroupEmpty();
    gv_zergFrenzyTimer = TimerCreate();
    gv_zergFrenzyWarningTimer = TimerCreate();
    gv_pingNydusWormP03 = c_invalidPingId;
    gv_pingNydusWormP04 = c_invalidPingId;
    gv_zergWormFrenzyTimerWindow = c_timerWindowNone;
    gv_nydusWormHP = 200.0;
    gv_achievementHardTimer = TimerCreate();
    gv_objectiveReachNexus = c_invalidObjectiveId;
    gv_objectiveZeratulMustSurvive = c_invalidObjectiveId;
    gv_objectiveOvermindTendrils = c_invalidObjectiveId;
    gv_objectivePowerTheObelisks = c_invalidObjectiveId;
    gv_midColossusHiddenGroup = UnitGroupEmpty();
    gv_midColossusZergActiveGroup = UnitGroupEmpty();
    gv_victoryZergGroupS2 = UnitGroupEmpty();
    gv_victoryZergGroupS4 = UnitGroupEmpty();
    gv_victoryHiddenUnitGroup = UnitGroupEmpty();
    gv_victoryCurrentTransmission = c_invalidTransmissionId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_AddUpgradeForEnemies (int lp_qty, string lp_upgrade);
void gf_SpawnNydusUnits (int lp_qty, string lp_unitType, int lp_player, unit lp_nydus, fixed lp_delay);
void gf_P03AttackWaveWaypointsNorth ();
void gf_P04AttackWaveWaypointsEast ();
void gf_RefreshPlayersHPandShields ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04Music;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_IntroSequence;
trigger gt_StartGameStage1;
trigger gt_StartGameStage2;
trigger gt_Stage2Init;
trigger gt_RainCycling;
trigger gt_ChangeOwnerofZeratul;
trigger gt_ZeratulFindsObserver;
trigger gt_ZeratulReachesNexus;
trigger gt_AfterZerglingAttack;
trigger gt_AfterZerglingAttackFailsafe;
trigger gt_WarpGateNorthFound;
trigger gt_WarpGateSouthFound;
trigger gt_WarpGateNorthPowered;
trigger gt_WarpGateSouthPowered;
trigger gt_ObeliskNorthPowered;
trigger gt_ObeliskSouthPowered;
trigger gt_RoboFacNorthPowered;
trigger gt_RoboFacSouthPowered;
trigger gt_RoboBayPowered;
trigger gt_WarpInNorthUnits;
trigger gt_WarpInSouthUnits;
trigger gt_WarpInUnitBehavior;
trigger gt_OverlordWandering;
trigger gt_InfestedBunkersDestroyed;
trigger gt_ResourcePickups;
trigger gt_StartAI;
trigger gt_ZergFrenzyTimerInitialization;
trigger gt_ZergAttackWaves;
trigger gt_ZergUpgradesH;
trigger gt_ZergUpgradesI;
trigger gt_ZergP03Wave1Z;
trigger gt_ZergP04Wave1ZH;
trigger gt_ZergP03Wave2ZR;
trigger gt_ZergP04Wave2ZR;
trigger gt_ZergP03Wave3ZHB;
trigger gt_ZergP04Wave3ZRH;
trigger gt_ZergP03Wave5ZRUBackdooronHard;
trigger gt_ZergP04Wave5ZR;
trigger gt_ZergP03Wave6Hydra;
trigger gt_ZergP03Repeating1ZHBBackdooronHard;
trigger gt_ZergP04Repeating1ZRH;
trigger gt_ZergP03Repeating2ZRH;
trigger gt_ZergP04Repeating2ZRU;
trigger gt_SpawnNydusWormP03;
trigger gt_SpawnNydusWormP032;
trigger gt_SpawnNydusWormP04;
trigger gt_DespawnNydusWormP03;
trigger gt_DespawnNydusWormP04;
trigger gt_RemoveNydusWormP03Ping;
trigger gt_RemoveNydusWormP04Ping;
trigger gt_AIGiveMinerals;
trigger gt_AIGiveGas;
trigger gt_OvermindTendrilBeaconZerglingsSW;
trigger gt_OvermindTendrilBeaconMutalisksNW;
trigger gt_OvermindTendrilBeaconLurkersSE;
trigger gt_OvermindTendrilBeaconBanelingsNE;
trigger gt_ReleaseControlofZeratul;
trigger gt_TransmissionZeratulIntroQ;
trigger gt_TransmissionZeratulFindsObserverQ;
trigger gt_TransmissionZeratulGetstoBaseQ;
trigger gt_TransmissionZerglingRushColossiQ;
trigger gt_TransmissionZergFrenzyIncomingQ;
trigger gt_TransmissionGettoOvermindRemainsQ;
trigger gt_TransmissionUseObserversQ;
trigger gt_TransmissionZeratulFindsWarpGatesQ;
trigger gt_TransmissionZeratulReachesTendrilsQ;
trigger gt_TransmissionHighTemplarWarpedInQ;
trigger gt_VictoryOvermindTendrilsCompleted;
trigger gt_Victory;
trigger gt_DefeatBaseDead;
trigger gt_DefeatZeratulDies;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_TipStoryModeQ;
trigger gt_TipColossusQ;
trigger gt_TipObserver;
trigger gt_TipWarpInQ;
trigger gt_ObjectiveReachtheNexusCreateQ;
trigger gt_ObjectiveReachtheNexusComplete;
trigger gt_ObjectiveReachtheNexusFailed;
trigger gt_ObjectiveOvermindTendrilsCreateHidden;
trigger gt_ObjectiveOvermindTendrilsShowQ;
trigger gt_ObjectiveOvermindTendrilsUpdateQ;
trigger gt_ObjectiveOvermindTendrilsComplete;
trigger gt_ObjectiveOvermindTendrilsFailed;
trigger gt_ObjectivePowerTheObelisksCreateQ;
trigger gt_ObjectivePowerTheObelisksUpdateQ;
trigger gt_ObjectivePowerTheObelisksComplete;
trigger gt_ObjectivePowerTheObelisksFailed;
trigger gt_BriefingQ;
trigger gt_BriefingScene00;
trigger gt_BriefingScene01;
trigger gt_BriefingScene00Hydralisks;
trigger gt_BriefingScene00WanderingZerg;
trigger gt_BriefingScene01Ultras;
trigger gt_BriefingScene01WanderingZerg;
trigger gt_MidCineQ;
trigger gt_MidCineSetup;
trigger gt_MidCineCinematic;
trigger gt_MidCineCinematicEnd;
trigger gt_MidCineCleanup;
trigger gt_MidCineZergActions;
trigger gt_VictoryQ;
trigger gt_VictoryCineFinalTendrilSetup;
trigger gt_VictoryCineFinalTendrilScene1;
trigger gt_VictoryCineFinalTendrilScene2;
trigger gt_VictoryCineFinalTendrilScene3;
trigger gt_VictoryCineFinalTendrilScene4;
trigger gt_VictoryCineFinalTendrilCinematicEnd;
trigger gt_VictoryCineFinalTendrilCleanup;
trigger gt_VictoryCineScene2Stuff;
trigger gt_VictoryCineScene4Stuff;
trigger gt_VictoryCineSkipped;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_AddUpgradeForEnemies (int lp_qty, string lp_upgrade) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUpgradeAddLevel(gv_p02_ZERG_LOW_GROUND_AI, lp_upgrade, lp_qty);
    TechTreeUpgradeAddLevel(gv_p03_ZERG_NORTH, lp_upgrade, lp_qty);
    TechTreeUpgradeAddLevel(gv_p04_ZERG_EAST, lp_upgrade, lp_qty);
    TechTreeUpgradeAddLevel(gv_p05_ZERG_LOW_GROUND_NOAI, lp_upgrade, lp_qty);
}

void gf_SpawnNydusUnits (int lp_qty, string lp_unitType, int lp_player, unit lp_nydus, fixed lp_delay) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitIsAlive(lp_nydus) == true)) {
        if ((UnitHasBehavior(lp_nydus, "ZeratulStun") == true)) {
            while (!((UnitHasBehavior(lp_nydus, "ZeratulStun") == false))) {
                Wait(0.5, c_timeGame);
            }
        }

        if ((UnitIsAlive(lp_nydus) == true)) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_nydus), c_animNameDefault, "Spell", 0, c_animTimeDefault);
            SoundPlayOnUnit(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), lp_nydus, 0.0, 100.0, 0.0);
            UnitCreate(lp_qty, lp_unitType, 0, lp_player, UnitGetPosition(lp_nydus), libNtve_gf_RandomAngle());
            AIAttackWaveUseGroup(lp_player, UnitLastCreatedGroup());
            AIAttackWaveSend(lp_player, 0, false);
            Wait(lp_delay, c_timeAI);
        }

    }

}

void gf_P03AttackWaveWaypointsNorth () {
    // Automatic Variable Declarations
    // Implementation
    AIAttackWaveAddWaypoint(gv_p03_ZERG_NORTH, PointFromId(131), true);
    if ((gv_hardInsaneIgnoreWaypoints == false)) {
        AIAttackWaveAddWaypoint(gv_p03_ZERG_NORTH, PointFromId(306), false);
        AIAttackWaveAddWaypoint(gv_p03_ZERG_NORTH, PointFromId(317), false);
        AIAttackWaveAddWaypoint(gv_p03_ZERG_NORTH, PointFromId(690), false);
        AIAttackWaveAddWaypoint(gv_p03_ZERG_NORTH, PointFromId(746), false);
    }

}

void gf_P04AttackWaveWaypointsEast () {
    // Automatic Variable Declarations
    // Implementation
    AIAttackWaveAddWaypoint(gv_p04_ZERG_EAST, PointFromId(208), true);
    if ((gv_hardInsaneIgnoreWaypoints == false)) {
        AIAttackWaveAddWaypoint(gv_p04_ZERG_EAST, PointFromId(298), false);
        AIAttackWaveAddWaypoint(gv_p04_ZERG_EAST, PointFromId(356), false);
        AIAttackWaveAddWaypoint(gv_p04_ZERG_EAST, PointFromId(689), false);
    }

}

void gf_RefreshPlayersHPandShields () {
    // Variable Declarations
    actor lv_healActor;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitAbilityReset(gv_zeratul, AbilityCommand("ZeratulBlink", 0), c_spendLocationAll);
    UnitAbilityReset(gv_zeratul, AbilityCommand("ZeratulStun", 0), c_spendLocationAll);
    SoundPlay(SoundLink("Protoss_PowerUpSmall", 1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_AttachModelToUnit(gv_zeratul, "ShieldTransferImpact", "Ref_Center");
    lv_healActor = libNtve_gf_ActorLastCreated();
    UnitSetPropertyFixed(gv_zeratul, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_zeratul, c_unitPropShieldsPercent, 100.0);
    Wait(2.1, c_timeGame);
    ActorSend(lv_healActor, "Destroy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_LoadCampaignData(libCamp_ge_MapID_MapTZeratul03);
    TriggerExecute(gt_Init01Technology, true, true);
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04Music, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    libCamp_gf_RegisterFootageRecording(gt_BriefingQ);
    libCamp_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_IntroSequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeUpgradeAddLevel(gv_p01_USER, "Charge", 1);
    TechTreeUpgradeAddLevel(gv_p01_USER, "PsiStormTech", 1);
    TechTreeUpgradeAddLevel(gv_p01_USER, "BlinkTech", 1);
    TechTreeUpgradeAddLevel(gv_p01_USER, "ExtendedThermalLance", 1);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ProtossBuild", 13), true);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ProtossBuild", 14), true);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("RoboticsFacilityTrain", 1), true);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("RoboticsFacilityTrain", 2), true);
    gf_AddUpgradeForEnemies(1, "Burrow");
    gf_AddUpgradeForEnemies(1, "overlordtransport");
    TechTreeUpgradeAddLevel(gv_p02_ZERG_LOW_GROUND_AI, "overlordspeed", 1);
    TechTreeUpgradeAddLevel(gv_p03_ZERG_NORTH, "overlordspeed", 1);
    TechTreeUpgradeAddLevel(gv_p04_ZERG_EAST, "overlordspeed", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_p01_USER, gv_p02_ZERG_LOW_GROUND_AI, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p03_ZERG_NORTH, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p04_ZERG_EAST, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p05_ZERG_LOW_GROUND_NOAI, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p06_VOID_SEEKER, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p08_OVERMIND_REMAINS, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p10_ABANDONED_STRUCTURES, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_p02_ZERG_LOW_GROUND_AI, gv_p03_ZERG_NORTH, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p02_ZERG_LOW_GROUND_AI, gv_p04_ZERG_EAST, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p02_ZERG_LOW_GROUND_AI, gv_p05_ZERG_LOW_GROUND_NOAI, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p02_ZERG_LOW_GROUND_AI, gv_p08_OVERMIND_REMAINS, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p02_ZERG_LOW_GROUND_AI, gv_p10_ABANDONED_STRUCTURES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p03_ZERG_NORTH, gv_p04_ZERG_EAST, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p03_ZERG_NORTH, gv_p05_ZERG_LOW_GROUND_NOAI, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p03_ZERG_NORTH, gv_p08_OVERMIND_REMAINS, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p03_ZERG_NORTH, gv_p10_ABANDONED_STRUCTURES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p04_ZERG_EAST, gv_p05_ZERG_LOW_GROUND_NOAI, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p04_ZERG_EAST, gv_p08_OVERMIND_REMAINS, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p04_ZERG_EAST, gv_p10_ABANDONED_STRUCTURES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p05_ZERG_LOW_GROUND_NOAI, gv_p08_OVERMIND_REMAINS, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p05_ZERG_LOW_GROUND_NOAI, gv_p10_ABANDONED_STRUCTURES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p08_OVERMIND_REMAINS, gv_p10_ABANDONED_STRUCTURES, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 500);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropVespene, c_playerPropOperSetTo, 150);
    PlayerModifyPropertyInt(gv_p02_ZERG_LOW_GROUND_AI, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p02_ZERG_LOW_GROUND_AI, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p03_ZERG_NORTH, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p03_ZERG_NORTH, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p04_ZERG_EAST, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p04_ZERG_EAST, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p05_ZERG_LOW_GROUND_NOAI, c_playerPropMinerals, c_playerPropOperSetTo, 666);
    PlayerModifyPropertyInt(gv_p05_ZERG_LOW_GROUND_NOAI, c_playerPropVespene, c_playerPropOperSetTo, 666);
    PlayerSetColorIndex(gv_p03_ZERG_NORTH, 4, true);
    PlayerSetColorIndex(gv_p04_ZERG_EAST, 4, true);
    PlayerSetColorIndex(gv_p05_ZERG_LOW_GROUND_NOAI, 4, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5A446C5F_g;
    int auto5A446C5F_u;
    unit auto5A446C5F_var;
    unitgroup autoF1102D1B_g;
    int autoF1102D1B_u;
    unit autoF1102D1B_var;
    unitgroup auto30E9DD36_g;
    int auto30E9DD36_u;
    unit auto30E9DD36_var;
    unitgroup auto898CA882_g;
    int auto898CA882_u;
    unit auto898CA882_var;
    unitgroup autoE568CAF9_g;
    int autoE568CAF9_u;
    unit autoE568CAF9_var;
    unitgroup auto232041B0_g;
    int auto232041B0_u;
    unit auto232041B0_var;
    unitgroup auto1C63C6EC_g;
    int auto1C63C6EC_u;
    unit auto1C63C6EC_var;
    unitgroup auto7E3D9345_g;
    int auto7E3D9345_u;
    unit auto7E3D9345_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(UnitFromId(685), c_unitStateTargetable, false);
    UnitCargoCreate(UnitFromId(685), "Zeratul", 1);
    gv_zeratul = UnitCargoLastCreated();
    libNtve_gf_ShowHideUnit(UnitFromId(552), false);
    libNtve_gf_ShowHideUnit(UnitFromId(455), false);
    libNtve_gf_ShowHideUnit(UnitFromId(154), false);
    UnitGroupIssueOrder(UnitGroup("ZerglingBurrowed", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderSetAutoCast(AbilityCommand("BurrowZerglingUp", 0), true), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup("HydraliskBurrowed", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderSetAutoCast(AbilityCommand("BurrowHydraliskUp", 0), true), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup("RoachBurrowed", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderSetAutoCast(AbilityCommand("BurrowRoachUp", 0), true), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup("BanelingBurrowed", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderSetAutoCast(AbilityCommand("BurrowBanelingUp", 0), true), c_orderQueueReplace);
    auto5A446C5F_g = UnitGroup("Beacon_Protoss", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto5A446C5F_u = UnitGroupCount(auto5A446C5F_g, c_unitCountAll);
    for (;; auto5A446C5F_u -= 1) {
        auto5A446C5F_var = UnitGroupUnitFromEnd(auto5A446C5F_g, auto5A446C5F_u);
        if (auto5A446C5F_var == null) { break; }
        UnitSetInfoText(auto5A446C5F_var, StringExternal("Param/Value/4ED31512"), StringToText(""), StringToText(""));
    }
    autoF1102D1B_g = UnitGroup("OvermindRemains", gv_p08_OVERMIND_REMAINS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF1102D1B_u = UnitGroupCount(autoF1102D1B_g, c_unitCountAll);
    for (;; autoF1102D1B_u -= 1) {
        autoF1102D1B_var = UnitGroupUnitFromEnd(autoF1102D1B_g, autoF1102D1B_u);
        if (autoF1102D1B_var == null) { break; }
        libNtve_gf_ChangeUnitDamage(autoF1102D1B_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitSetState(autoF1102D1B_var, c_unitStateTargetable, false);
    }
    auto30E9DD36_g = UnitGroup("PathingBlocker2x2", c_playerAny, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto30E9DD36_u = UnitGroupCount(auto30E9DD36_g, c_unitCountAll);
    for (;; auto30E9DD36_u -= 1) {
        auto30E9DD36_var = UnitGroupUnitFromEnd(auto30E9DD36_g, auto30E9DD36_u);
        if (auto30E9DD36_var == null) { break; }
        UnitGroupAdd(gv_pathingBlockerGroup, auto30E9DD36_var);
    }
    auto898CA882_g = UnitGroup(null, c_playerAny, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto898CA882_u = UnitGroupCount(auto898CA882_g, c_unitCountAll);
    for (;; auto898CA882_u -= 1) {
        auto898CA882_var = UnitGroupUnitFromEnd(auto898CA882_g, auto898CA882_u);
        if (auto898CA882_var == null) { break; }
        UnitGroupAdd(gv_stage1InactivesGroup, auto898CA882_var);
        libNtve_gf_PauseUnit(auto898CA882_var, true);
        libNtve_gf_ShowHideUnit(auto898CA882_var, false);
    }
    autoE568CAF9_g = UnitGroup(null, gv_p10_ABANDONED_STRUCTURES, RegionFromId(21), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE568CAF9_u = UnitGroupCount(autoE568CAF9_g, c_unitCountAll);
    for (;; autoE568CAF9_u -= 1) {
        autoE568CAF9_var = UnitGroupUnitFromEnd(autoE568CAF9_g, autoE568CAF9_u);
        if (autoE568CAF9_var == null) { break; }
        UnitSetState(autoE568CAF9_var, c_unitStateTargetable, false);
    }
    auto232041B0_g = UnitGroup(null, gv_p10_ABANDONED_STRUCTURES, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto232041B0_u = UnitGroupCount(auto232041B0_g, c_unitCountAll);
    for (;; auto232041B0_u -= 1) {
        auto232041B0_var = UnitGroupUnitFromEnd(auto232041B0_g, auto232041B0_u);
        if (auto232041B0_var == null) { break; }
        UnitSetPropertyFixed(auto232041B0_var, c_unitPropLifePercent, RandomFixed(85.0, 95.0));
        UnitGroupAdd(gv_infestedWarpGateGroup, auto232041B0_var);
    }
    auto1C63C6EC_g = UnitGroup("Probe", c_playerAny, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1C63C6EC_u = UnitGroupCount(auto1C63C6EC_g, c_unitCountAll);
    for (;; auto1C63C6EC_u -= 1) {
        auto1C63C6EC_var = UnitGroupUnitFromEnd(auto1C63C6EC_g, auto1C63C6EC_u);
        if (auto1C63C6EC_var == null) { break; }
        UnitGroupAdd(gv_protossProbeGroup, auto1C63C6EC_var);
        libNtve_gf_ShowHideUnit(auto1C63C6EC_var, false);
    }
    auto7E3D9345_g = UnitGroup("Obelisk", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7E3D9345_u = UnitGroupCount(auto7E3D9345_g, c_unitCountAll);
    for (;; auto7E3D9345_u -= 1) {
        auto7E3D9345_var = UnitGroupUnitFromEnd(auto7E3D9345_g, auto7E3D9345_u);
        if (auto7E3D9345_var == null) { break; }
        UnitSetPropertyFixed(auto7E3D9345_var, c_unitPropEnergyPercent, 100.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init04Music_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TZeratul03MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TZeratul03MusicIntro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Music_Init () {
    gt_Init04Music = TriggerCreate("gt_Init04Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    VisExploreArea(gv_p01_USER, RegionFromId(38), true, false);
    RegionPlayableMapSet(RegionFromId(41));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerDifficulty(gv_p01_USER) == 1)) {
        PlayerModifyPropertyInt(gv_p02_ZERG_LOW_GROUND_AI, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p03_ZERG_NORTH, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p04_ZERG_EAST, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p05_ZERG_LOW_GROUND_NOAI, c_playerPropHandicap, c_playerPropOperSetTo, 50);
    }

    gv_nydusWormHP = libNtve_gf_DifficultyValueFixed(400.0, 400.0, 600.0, 800.0);
    gf_AddUpgradeForEnemies(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ZergFlyerArmorsLevel1");
    gf_AddUpgradeForEnemies(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergMeleeWeaponsLevel1");
    gf_AddUpgradeForEnemies(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergMissileWeaponsLevel1");
    gf_AddUpgradeForEnemies(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergFlyerWeaponsLevel1");
    gf_AddUpgradeForEnemies(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "hydraliskspeed");
    gf_AddUpgradeForEnemies(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "CentrificalHooks");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_AddUnitTypeToUnitHelpPanel("Zeratul", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Zergling", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Baneling", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Roach", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Mutalisk", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Overlord", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Overseer", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Ultralisk", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("NydusCanal", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SporeCrawler", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SpineCrawler", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("InfestedTerranCampaign", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("InfestedCivilian", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Drone", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Probe", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Stalker", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Immortal", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Colossus", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Observer", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("DarkTemplar", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("HighTemplar", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Archon", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("PhotonCannon", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Zeratul", false, gv_p01_USER);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("BroodLord", false, gv_p01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Sequence
//--------------------------------------------------------------------------------------------------
bool gt_IntroSequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    Wait(0.1, c_timeGame);
    TriggerExecute(gt_StartAI, true, false);
    UnitIssueOrder(UnitFromId(685), OrderTargetingPoint(AbilityCommand("VoidSeekerTransport", 2), PointFromId(686)), c_orderQueueReplace);
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/1930A941"), null, gv_zeratul);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_p01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(425), 1.5);
    CinematicFade(true, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_StartGameStage1, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSequence_Init () {
    gt_IntroSequence = TriggerCreate("gt_IntroSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Stage 1
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        TimerStart(gv_achievementHardTimer, 1200.0, false, c_timeAI);
    }

    TriggerExecute(gt_RainCycling, true, false);
    Wait(1.0, c_timeReal);
    TriggerExecute(gt_TransmissionZeratulIntroQ, true, false);
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_ObjectiveReachtheNexusCreateQ, true, true);
    Wait(0.1, c_timeReal);
    TriggerExecute(gt_ObjectiveOvermindTendrilsCreateHidden, true, false);
    Wait(2.0, c_timeReal);
    UnitBehaviorAdd(UnitFromId(685), "VoidSeekerDock", UnitFromId(685), 1);
    VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(UnitFromId(2)), 4.0), 6.0, false);
    VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(UnitFromId(952)), 3.0), 6.0, false);
    PingCreate(PlayerGroupSingle(gv_p01_USER), "PingObjective", UnitGetPosition(UnitFromId(952)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
    gv_beaconPingNexus = PingLastCreated();
    PingSetTooltip(gv_beaconPingNexus, StringExternal("Param/Value/847A869F"));
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_TipStoryModeQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage1_Init () {
    gt_StartGameStage1 = TriggerCreate("gt_StartGameStage1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CreepSetSpeed(c_creepSpeedGrowth, 1000.0);
    TriggerExecute(gt_Stage2Init, true, false);
    TriggerExecute(gt_ZergUpgradesH, true, false);
    TriggerExecute(gt_ZergUpgradesI, true, false);
    TriggerEnable(gt_DefeatBaseDead, true);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_TipColossusQ, true, false);
    Wait(2.0, c_timeGame);
    VisRevealArea(gv_p01_USER, RegionFromId(3), 0.0, false);
    VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(UnitFromId(929)), 4.0), 0.1, false);
    VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(UnitFromId(36)), 4.0), 0.1, false);
    VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(UnitFromId(38)), 4.0), 0.1, false);
    VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(UnitFromId(46)), 4.0), 0.1, false);
    TriggerExecute(gt_ObjectiveOvermindTendrilsShowQ, true, false);
    TriggerExecute(gt_TransmissionGettoOvermindRemainsQ, true, false);
    Wait(10.0, c_timeGame);
    CreepSetSpeed(c_creepSpeedGrowth, 100.0);
    Wait(40.0, c_timeGame);
    TriggerExecute(gt_TransmissionUseObserversQ, true, false);
    Wait(70.0, c_timeGame);
    TriggerExecute(gt_TransmissionZerglingRushColossiQ, true, false);
    Wait(10.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(16, "ZerglingBurrowed", 0, gv_p05_ZERG_LOW_GROUND_NOAI, PointFromId(215));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zerglingRush);
    libNtve_gf_CreateUnitsAtPoint2(19, "ZerglingBurrowed", 0, gv_p05_ZERG_LOW_GROUND_NOAI, PointFromId(83));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zerglingRush);
    TriggerExecute(gt_ZergFrenzyTimerInitialization, true, false);
    UISetRestartLoadingScreen(ConversationDataStateText("Maps|TZeratul03", "Loading Screen Restart 2"));
    TriggerEnable(gt_AfterZerglingAttack, true);
    TriggerExecute(gt_AfterZerglingAttackFailsafe, true, false);
    Wait(1.0, c_timeGame);
    UnitGroupIssueOrder(gv_zerglingRush, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
    Wait(3.0, c_timeGame);
    UnitGroupIssueOrder(gv_zerglingRush, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(544)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(gv_zerglingRush, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitFromId(2))), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage2_Init () {
    gt_StartGameStage2 = TriggerCreate("gt_StartGameStage2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stage 2 Init
//--------------------------------------------------------------------------------------------------
bool gt_Stage2Init_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto720C8920_g;
    int auto720C8920_u;
    unit auto720C8920_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_OverlordWandering, true);
    TriggerEnable(gt_OvermindTendrilBeaconBanelingsNE, true);
    TriggerEnable(gt_OvermindTendrilBeaconLurkersSE, true);
    TriggerEnable(gt_OvermindTendrilBeaconMutalisksNW, true);
    TriggerEnable(gt_OvermindTendrilBeaconZerglingsSW, true);
    auto720C8920_g = UnitGroup("Overlord", gv_p05_ZERG_LOW_GROUND_NOAI, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto720C8920_u = UnitGroupCount(auto720C8920_g, c_unitCountAll);
    for (;; auto720C8920_u -= 1) {
        auto720C8920_var = UnitGroupUnitFromEnd(auto720C8920_g, auto720C8920_u);
        if (auto720C8920_var == null) { break; }
        UnitGroupAdd(gv_overlordWanderGroup, auto720C8920_var);
        UnitIssueOrder(auto720C8920_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(1))), c_orderQueueReplace);
    }
    UnitBehaviorAddPlayer(UnitFromId(177), "ColonyInfestation", gv_p02_ZERG_LOW_GROUND_AI, 1);
    UnitBehaviorAddPlayer(UnitFromId(40), "ColonyInfestation", gv_p02_ZERG_LOW_GROUND_AI, 1);
    UnitBehaviorAddPlayer(UnitFromId(15), "ColonyInfestation", gv_p02_ZERG_LOW_GROUND_AI, 1);
    UnitBehaviorAddPlayer(UnitFromId(139), "ColonyInfestation", gv_p02_ZERG_LOW_GROUND_AI, 1);
    UnitBehaviorAddPlayer(UnitFromId(59), "ColonyInfestation", gv_p02_ZERG_LOW_GROUND_AI, 1);
    UnitBehaviorAddPlayer(UnitFromId(289), "ColonyInfestation", gv_p02_ZERG_LOW_GROUND_AI, 1);
    UnitBehaviorAddPlayer(UnitFromId(290), "ColonyInfestation", gv_p02_ZERG_LOW_GROUND_AI, 1);
    AIInitCampaignHarvest(gv_p02_ZERG_LOW_GROUND_AI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Stage2Init_Init () {
    gt_Stage2Init = TriggerCreate("gt_Stage2Init_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rain Cycling
//--------------------------------------------------------------------------------------------------
bool gt_RainCycling_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(RandomFixed(180.0, 240.0), c_timeGame);
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "RainEmitterMedium", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
        gv_rainOn = false;
        Wait(RandomFixed(180.0, 240.0), c_timeGame);
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "RainEmitterMedium", c_animNameDefault, "Stand", 0, c_animTimeDefault);
        gv_rainOn = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RainCycling_Init () {
    gt_RainCycling = TriggerCreate("gt_RainCycling_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Change Owner of Zeratul
//--------------------------------------------------------------------------------------------------
bool gt_ChangeOwnerofZeratul_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "VoidSeeker"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1520)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    UnitSetOwner(gv_zeratul, gv_p01_USER, true);
    UnitFlashSelection(gv_zeratul, 1.0);
    UnitSelect(gv_zeratul, gv_p01_USER, true);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1520)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChangeOwnerofZeratul_Init () {
    gt_ChangeOwnerofZeratul = TriggerCreate("gt_ChangeOwnerofZeratul_Func");
    TriggerAddEventUnitCargo(gt_ChangeOwnerofZeratul, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zeratul Finds Observer
//--------------------------------------------------------------------------------------------------
bool gt_ZeratulFindsObserver_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayOnUnit(SoundLink("Observer_Pissed", 3), PlayerGroupAll(), UnitFromId(355), 0.0, 100.0, 0.0);
    UnitSetOwner(UnitFromId(355), gv_p01_USER, true);
    UnitFlashSelection(UnitFromId(355), 1.0);
    libNtve_gf_AttachModelToUnit(UnitFromId(355), "BriefingUnitSelectProtossSmall", "Ref_Origin");
    gv_observerPingModel = libNtve_gf_ActorLastCreated();
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/DFB5B538"), null, UnitFromId(355));
    TriggerExecute(gt_TransmissionZeratulFindsObserverQ, true, false);
    Wait(6.0, c_timeGame);
    libNtve_gf_KillModel(gv_observerPingModel);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZeratulFindsObserver_Init () {
    gt_ZeratulFindsObserver = TriggerCreate("gt_ZeratulFindsObserver_Func");
    TriggerAddEventUnitRegion(gt_ZeratulFindsObserver, null, RegionFromId(36), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zeratul Reaches Nexus
//--------------------------------------------------------------------------------------------------
bool gt_ZeratulReachesNexus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Zeratul"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_beaconPingNexus);
    TriggerExecute(gt_ObjectiveReachtheNexusComplete, true, false);
    CameraLockInput(gv_p01_USER, true);
    CameraPan(gv_p01_USER, PointFromId(373), 2.0, -1, 10, false);
    libNtve_gf_MakeUnitUncommandable(gv_zeratul, true);
    libNtve_gf_MakeUnitInvulnerable(gv_zeratul, true);
    UnitBehaviorAdd(gv_zeratul, "SuppressCloak", gv_zeratul, 1);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(373)), c_orderQueueReplace);
    UnitIssueOrder(gv_zeratul, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    Wait(2.0, c_timeGame);
    libNtve_gf_MakeUnitFacePoint(gv_zeratul, UnitGetPosition(UnitFromId(2)), 0.0);
    UnitBehaviorAdd(gv_zeratul, "Read", gv_zeratul, 1);
    libNtve_gf_PauseUnit(gv_zeratul, true);
    UnitKill(UnitFromId(952));
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_MidCineQ, true, false);
    CameraLockInput(gv_p01_USER, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZeratulReachesNexus_Init () {
    gt_ZeratulReachesNexus = TriggerCreate("gt_ZeratulReachesNexus_Func");
    TriggerAddEventUnitRegion(gt_ZeratulReachesNexus, null, RegionFromId(39), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: After Zergling Attack
//--------------------------------------------------------------------------------------------------
bool gt_AfterZerglingAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_zerglingRush, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ZergAttackWaves, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AfterZerglingAttack_Init () {
    gt_AfterZerglingAttack = TriggerCreate("gt_AfterZerglingAttack_Func");
    TriggerEnable(gt_AfterZerglingAttack, false);
    TriggerAddEventUnitDied(gt_AfterZerglingAttack, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: After Zergling Attack Failsafe
//--------------------------------------------------------------------------------------------------
bool gt_AfterZerglingAttackFailsafe_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(50.0, c_timeGame);
    TriggerExecute(gt_ZergAttackWaves, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AfterZerglingAttackFailsafe_Init () {
    gt_AfterZerglingAttackFailsafe = TriggerCreate("gt_AfterZerglingAttackFailsafe_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp Gate North Found
//--------------------------------------------------------------------------------------------------
bool gt_WarpGateNorthFound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Observer"))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((TriggerIsEnabled(gt_TransmissionZeratulFindsWarpGatesQ) == true)) {
        TriggerExecute(gt_TransmissionZeratulFindsWarpGatesQ, true, true);
        MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(88)), 6.0, Color(100.00, 100.00, 0.00));
        UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/FEF5DF5C"), null, UnitFromId(88));
        libNtve_gf_AttachModelToUnit(UnitFromId(88), "BriefingUnitSelectProtoss", "Ref_Origin");
        gv_northGatePingModel = libNtve_gf_ActorLastCreated();
        TriggerExecute(gt_ObjectivePowerTheObelisksCreateQ, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpGateNorthFound_Init () {
    gt_WarpGateNorthFound = TriggerCreate("gt_WarpGateNorthFound_Func");
    TriggerAddEventUnitRegion(gt_WarpGateNorthFound, null, RegionFromId(18), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp Gate South Found
//--------------------------------------------------------------------------------------------------
bool gt_WarpGateSouthFound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Observer"))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((TriggerIsEnabled(gt_TransmissionZeratulFindsWarpGatesQ) == true)) {
        TriggerExecute(gt_TransmissionZeratulFindsWarpGatesQ, true, true);
        MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(173)), 6.0, Color(100.00, 100.00, 0.00));
        UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/6B94CA00"), null, UnitFromId(173));
        libNtve_gf_AttachModelToUnit(UnitFromId(173), "BriefingUnitSelectProtoss", "Ref_Origin");
        gv_southGatePingModel = libNtve_gf_ActorLastCreated();
        TriggerExecute(gt_ObjectivePowerTheObelisksCreateQ, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpGateSouthFound_Init () {
    gt_WarpGateSouthFound = TriggerCreate("gt_WarpGateSouthFound_Func");
    TriggerAddEventUnitRegion(gt_WarpGateSouthFound, null, RegionFromId(17), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp Gate North Powered
//--------------------------------------------------------------------------------------------------
bool gt_WarpGateNorthPowered_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "Pylon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PowerLevel(gv_p01_USER, UnitGetPosition(UnitFromId(88)), "PowerSource") > 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libNtve_gf_RescueUnit(UnitFromId(88), gv_p01_USER, true);
        libNtve_gf_KillModel(gv_northGatePingModel);
        if ((TriggerIsEnabled(gt_WarpInNorthUnits) == true)) {
            TriggerExecute(gt_WarpInNorthUnits, true, true);
        }

        Wait(libCamp_gv_campaignObjectiveDelay, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpGateNorthPowered_Init () {
    gt_WarpGateNorthPowered = TriggerCreate("gt_WarpGateNorthPowered_Func");
    TriggerAddEventUnitConstructProgress(gt_WarpGateNorthPowered, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp Gate South Powered
//--------------------------------------------------------------------------------------------------
bool gt_WarpGateSouthPowered_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "Pylon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PowerLevel(gv_p01_USER, UnitGetPosition(UnitFromId(173)), "PowerSource") > 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libNtve_gf_RescueUnit(UnitFromId(173), gv_p01_USER, true);
        libNtve_gf_KillModel(gv_southGatePingModel);
        if ((TriggerIsEnabled(gt_WarpInSouthUnits) == true)) {
            TriggerExecute(gt_WarpInSouthUnits, true, true);
        }

        Wait(libCamp_gv_campaignObjectiveDelay, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpGateSouthPowered_Init () {
    gt_WarpGateSouthPowered = TriggerCreate("gt_WarpGateSouthPowered_Func");
    TriggerAddEventUnitConstructProgress(gt_WarpGateSouthPowered, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Obelisk North Powered
//--------------------------------------------------------------------------------------------------
bool gt_ObeliskNorthPowered_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_obelisk;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "Pylon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PowerLevel(gv_p01_USER, UnitGetPosition(UnitFromId(287)), "PowerSource") > 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_obelisksPowered += 1;
        lv_obelisk = UnitFromId(287);
        libNtve_gf_RescueUnit(lv_obelisk, gv_p01_USER, true);
        libCamp_gf_DisplayResearchPointsGiventoPlayer(libCamp_ge_StoryResearchObject_ResearchObjectPowertheObelisks, lv_obelisk, gv_p01_USER);
        TriggerExecute(gt_ObjectivePowerTheObelisksUpdateQ, true, false);
        Wait(libCamp_gv_campaignObjectiveDelay, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObeliskNorthPowered_Init () {
    gt_ObeliskNorthPowered = TriggerCreate("gt_ObeliskNorthPowered_Func");
    TriggerAddEventUnitConstructProgress(gt_ObeliskNorthPowered, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Obelisk South Powered
//--------------------------------------------------------------------------------------------------
bool gt_ObeliskSouthPowered_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_obelisk;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "Pylon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PowerLevel(gv_p01_USER, UnitGetPosition(UnitFromId(285)), "PowerSource") > 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_obelisksPowered += 1;
        lv_obelisk = UnitFromId(285);
        libNtve_gf_RescueUnit(lv_obelisk, gv_p01_USER, true);
        libCamp_gf_DisplayResearchPointsGiventoPlayer(libCamp_ge_StoryResearchObject_ResearchObjectPowertheObelisks, lv_obelisk, gv_p01_USER);
        TriggerExecute(gt_ObjectivePowerTheObelisksUpdateQ, true, false);
        Wait(libCamp_gv_campaignObjectiveDelay, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObeliskSouthPowered_Init () {
    gt_ObeliskSouthPowered = TriggerCreate("gt_ObeliskSouthPowered_Func");
    TriggerAddEventUnitConstructProgress(gt_ObeliskSouthPowered, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RoboFac North Powered
//--------------------------------------------------------------------------------------------------
bool gt_RoboFacNorthPowered_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "Pylon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PowerLevel(gv_p01_USER, UnitGetPosition(UnitFromId(29)), "PowerSource") > 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libNtve_gf_RescueUnit(UnitFromId(29), gv_p01_USER, true);
        Wait(libCamp_gv_campaignObjectiveDelay, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoboFacNorthPowered_Init () {
    gt_RoboFacNorthPowered = TriggerCreate("gt_RoboFacNorthPowered_Func");
    TriggerAddEventUnitConstructProgress(gt_RoboFacNorthPowered, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RoboFac South Powered
//--------------------------------------------------------------------------------------------------
bool gt_RoboFacSouthPowered_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "Pylon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PowerLevel(gv_p01_USER, UnitGetPosition(UnitFromId(170)), "PowerSource") > 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libNtve_gf_RescueUnit(UnitFromId(170), gv_p01_USER, true);
        Wait(libCamp_gv_campaignObjectiveDelay, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoboFacSouthPowered_Init () {
    gt_RoboFacSouthPowered = TriggerCreate("gt_RoboFacSouthPowered_Func");
    TriggerAddEventUnitConstructProgress(gt_RoboFacSouthPowered, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RoboBay Powered
//--------------------------------------------------------------------------------------------------
bool gt_RoboBayPowered_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "Pylon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PowerLevel(gv_p01_USER, UnitGetPosition(UnitFromId(174)), "PowerSource") > 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libNtve_gf_RescueUnit(UnitFromId(174), gv_p01_USER, true);
        Wait(libCamp_gv_campaignObjectiveDelay, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoboBayPowered_Init () {
    gt_RoboBayPowered = TriggerCreate("gt_RoboBayPowered_Func");
    TriggerAddEventUnitConstructProgress(gt_RoboBayPowered, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp In North Units
//--------------------------------------------------------------------------------------------------
bool gt_WarpInNorthUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_invisiblePylon;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisiblePylon", 0, gv_p10_ABANDONED_STRUCTURES, PointFromId(553));
    lv_invisiblePylon = UnitLastCreated();
    UnitIssueOrder(UnitFromId(552), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 3), PointFromId(553)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(552), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(554)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(552), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(556)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(552), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(555)), c_orderQueueReplace);
    Wait(8.0, c_timeGame);
    UnitRemove(lv_invisiblePylon);
    MinimapPing(PlayerGroupAll(), PointFromId(553), 6.0, Color(100.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/726B7EB4"), null, PointFromId(553));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpInNorthUnits_Init () {
    gt_WarpInNorthUnits = TriggerCreate("gt_WarpInNorthUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp In South Units
//--------------------------------------------------------------------------------------------------
bool gt_WarpInSouthUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_invisiblePylon;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisiblePylon", 0, gv_p10_ABANDONED_STRUCTURES, PointFromId(548));
    lv_invisiblePylon = UnitLastCreated();
    UnitIssueOrder(UnitFromId(552), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 3), PointFromId(548)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(552), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(549)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(552), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(550)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(552), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(551)), c_orderQueueReplace);
    Wait(8.0, c_timeGame);
    UnitRemove(lv_invisiblePylon);
    MinimapPing(PlayerGroupAll(), PointFromId(548), 6.0, Color(100.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/9FD60F43"), null, PointFromId(548));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpInSouthUnits_Init () {
    gt_WarpInSouthUnits = TriggerCreate("gt_WarpInSouthUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp In Unit Behavior
//--------------------------------------------------------------------------------------------------
bool gt_WarpInUnitBehavior_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_p10_ABANDONED_STRUCTURES))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitProgressUnit()) == "Stalker") || (UnitGetType(EventUnitProgressUnit()) == "HighTemplar")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnitProgressUnit(), c_unitPropEnergyPercent, 100.0);
    libNtve_gf_RescueUnit(EventUnitProgressUnit(), gv_p01_USER, true);
    TriggerExecute(gt_TransmissionHighTemplarWarpedInQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpInUnitBehavior_Init () {
    gt_WarpInUnitBehavior = TriggerCreate("gt_WarpInUnitBehavior_Func");
    TriggerAddEventUnitConstructProgress(gt_WarpInUnitBehavior, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overlord Wandering
//--------------------------------------------------------------------------------------------------
bool gt_OverlordWandering_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p05_ZERG_LOW_GROUND_NOAI))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Overlord"))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_overlordWanderGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(1))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverlordWandering_Init () {
    gt_OverlordWandering = TriggerCreate("gt_OverlordWandering_Func");
    TriggerEnable(gt_OverlordWandering, false);
    TriggerAddEventUnitBecomesIdle(gt_OverlordWandering, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infested Bunkers Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_InfestedBunkersDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "InfestedBunker"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayOnUnit(SoundLink("Egg_Explode", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    UnitCreate(1, "InfestedTerranCampaign", 0, gv_p05_ZERG_LOW_GROUND_NOAI, UnitGetPosition(EventUnit()), 225.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestedBunkersDestroyed_Init () {
    gt_InfestedBunkersDestroyed = TriggerCreate("gt_InfestedBunkersDestroyed_Func");
    TriggerAddEventUnitDied(gt_InfestedBunkersDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Pickups
//--------------------------------------------------------------------------------------------------
bool gt_ResourcePickups_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoDDD46246_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoDDD46246_val = UnitGetType(EventUnit());
    if (autoDDD46246_val == "NaturalMinerals") {
        libCamp_gf_DestroyCacheAndGivePlayerResources(EventUnit(), c_playerPropMinerals, 100, UnitGetOwner(EventUnitTargetUnit()));
    }
    else if (autoDDD46246_val == "NaturalGas") {
        libCamp_gf_DestroyCacheAndGivePlayerResources(EventUnit(), c_playerPropVespene, 100, UnitGetOwner(EventUnitTargetUnit()));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourcePickups_Init () {
    gt_ResourcePickups = TriggerCreate("gt_ResourcePickups_Func");
    TriggerAddEventUnitAbility(gt_ResourcePickups, null, AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AICampaignStart(gv_p02_ZERG_LOW_GROUND_AI);
    AICampaignStart(gv_p03_ZERG_NORTH);
    AICampaignStart(gv_p04_ZERG_EAST);
    AIAttackWaveSetTargetPlayer(gv_p02_ZERG_LOW_GROUND_AI, PlayerGroupSingle(gv_p01_USER));
    AIAttackWaveSetTargetPlayer(gv_p03_ZERG_NORTH, PlayerGroupSingle(gv_p01_USER));
    AIAttackWaveSetTargetPlayer(gv_p04_ZERG_EAST, PlayerGroupSingle(gv_p01_USER));
    libNtve_gf_DeclareNextTown(gv_p02_ZERG_LOW_GROUND_AI, PointFromId(296));
    libNtve_gf_DeclareNextTown(gv_p02_ZERG_LOW_GROUND_AI, PointFromId(693));
    AINearestTownBullyRebuild(gv_p02_ZERG_LOW_GROUND_AI, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Frenzy Timer Initialization
//--------------------------------------------------------------------------------------------------
bool gt_ZergFrenzyTimerInitialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerWindowCreate(gv_zergFrenzyTimer, StringExternal("Param/Value/8BA0DBD1"), true, false);
    gv_zergWormFrenzyTimerWindow = TimerWindowLastCreated();
    TimerWindowSetFormat(gv_zergWormFrenzyTimerWindow, StringToText("<mintotal/>:<sec2/>"));
    TimerWindowSetColor(gv_zergWormFrenzyTimerWindow, c_timerWindowColorTime, Color(0.00, 100.00, 100.00), 0.0);
    TimerWindowShow(gv_zergWormFrenzyTimerWindow, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergFrenzyTimerInitialization_Init () {
    gt_ZergFrenzyTimerInitialization = TriggerCreate("gt_ZergFrenzyTimerInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_zergFrenzyTimer, 240.0, false, c_timeGame);
    TimerStart(gv_zergFrenzyWarningTimer, 210.0, false, c_timeGame);
    TimerWindowShow(gv_zergWormFrenzyTimerWindow, PlayerGroupAll(), true);
    Wait(240.0, c_timeAI);
    TimerWindowShow(gv_zergWormFrenzyTimerWindow, PlayerGroupAll(), false);
    TriggerExecute(gt_ZergP03Wave1Z, true, false);
    Wait(2.0, c_timeAI);
    TriggerExecute(gt_ZergP04Wave1ZH, true, false);
    Wait(30.0, c_timeAI);
    TimerStart(gv_zergFrenzyTimer, 230.0, false, c_timeGame);
    TimerStart(gv_zergFrenzyWarningTimer, 200.0, false, c_timeGame);
    TimerWindowShow(gv_zergWormFrenzyTimerWindow, PlayerGroupAll(), true);
    Wait(230.0, c_timeAI);
    TimerWindowShow(gv_zergWormFrenzyTimerWindow, PlayerGroupAll(), false);
    TriggerExecute(gt_ZergP03Wave2ZR, true, false);
    Wait(2.0, c_timeAI);
    TriggerExecute(gt_ZergP04Wave2ZR, true, false);
    Wait(30.0, c_timeAI);
    TimerStart(gv_zergFrenzyTimer, 250.0, false, c_timeGame);
    TimerStart(gv_zergFrenzyWarningTimer, 220.0, false, c_timeGame);
    TimerWindowShow(gv_zergWormFrenzyTimerWindow, PlayerGroupAll(), true);
    Wait(250.0, c_timeAI);
    TimerWindowShow(gv_zergWormFrenzyTimerWindow, PlayerGroupAll(), false);
    TriggerExecute(gt_ZergP04Wave3ZRH, true, false);
    Wait(2.0, c_timeAI);
    TriggerExecute(gt_ZergP03Wave3ZHB, true, false);
    Wait(30.0, c_timeAI);
    TimerStart(gv_zergFrenzyTimer, 210.0, false, c_timeGame);
    TimerStart(gv_zergFrenzyWarningTimer, 180.0, false, c_timeGame);
    TimerWindowShow(gv_zergWormFrenzyTimerWindow, PlayerGroupAll(), true);
    gf_P03AttackWaveWaypointsNorth();
    AIAttackWaveAddUnits4(9, 9, 16, 18, "Zergling");
    AIAttackWaveAddUnits4(0, 0, 3, 2, "Baneling");
    AIAttackWaveAddUnits4(2, 2, 2, 3, "Mutalisk");
    AIAttackWaveAddUnits4(0, 0, 0, 2, "Infestor");
    AIAttackWaveSend(gv_p03_ZERG_NORTH, 210, false);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        AIAttackWaveAddWaypoint(gv_p03_ZERG_NORTH, PointFromId(1853), false);
        AIAttackWaveAddWaypoint(gv_p03_ZERG_NORTH, PointFromId(1855), false);
        AIAttackWaveAddWaypoint(gv_p03_ZERG_NORTH, PointFromId(1840), false);
        AIAttackWaveAddUnits4(0, 0, 1, 1, "BroodLord");
        AIAttackWaveSend(gv_p03_ZERG_NORTH, 210, false);
    }

    gf_P04AttackWaveWaypointsEast();
    AIAttackWaveAddUnits4(9, 9, 6, 4, "Zergling");
    AIAttackWaveAddUnits4(0, 0, 6, 9, "Baneling");
    AIAttackWaveAddUnits4(2, 2, 0, 0, "Mutalisk");
    AIAttackWaveAddUnits4(0, 0, 0, 1, "Overseer");
    AIAttackWaveSend(gv_p04_ZERG_EAST, 210, false);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        AIAttackWaveAddWaypoint(gv_p04_ZERG_EAST, PointFromId(1854), false);
        AIAttackWaveAddWaypoint(gv_p04_ZERG_EAST, PointFromId(1839), false);
        AIAttackWaveAddUnits4(0, 0, 3, 4, "Mutalisk");
        AIAttackWaveSend(gv_p04_ZERG_EAST, 210, false);
    }

    Wait(210.0, c_timeAI);
    TimerWindowShow(gv_zergWormFrenzyTimerWindow, PlayerGroupAll(), false);
    Wait(30.0, c_timeAI);
    TimerStart(gv_zergFrenzyTimer, 210.0, false, c_timeGame);
    TimerStart(gv_zergFrenzyWarningTimer, 180.0, false, c_timeGame);
    TimerWindowShow(gv_zergWormFrenzyTimerWindow, PlayerGroupAll(), true);
    Wait(210.0, c_timeAI);
    TimerWindowShow(gv_zergWormFrenzyTimerWindow, PlayerGroupAll(), false);
    TriggerExecute(gt_ZergP03Wave5ZRUBackdooronHard, true, false);
    Wait(2.0, c_timeAI);
    TriggerExecute(gt_ZergP04Wave5ZR, true, false);
    Wait(30.0, c_timeAI);
    TimerStart(gv_zergFrenzyTimer, 210.0, false, c_timeGame);
    TimerStart(gv_zergFrenzyWarningTimer, 180.0, false, c_timeGame);
    TimerWindowShow(gv_zergWormFrenzyTimerWindow, PlayerGroupAll(), true);
    gf_P04AttackWaveWaypointsEast();
    AIAttackWaveAddUnits4(10, 12, 16, 18, "Zergling");
    AIAttackWaveAddUnits4(4, 4, 5, 6, "Mutalisk");
    AIAttackWaveAddUnits4(0, 0, 0, 2, "Infestor");
    AIAttackWaveAddUnits4(0, 0, 0, 1, "Overseer");
    AIAttackWaveSend(gv_p04_ZERG_EAST, 210, false);
    Wait(210.0, c_timeAI);
    TimerWindowShow(gv_zergWormFrenzyTimerWindow, PlayerGroupAll(), false);
    TriggerExecute(gt_ZergP03Wave6Hydra, true, false);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        gv_hardInsaneIgnoreWaypoints = true;
    }

    if ((gv_gameOver == false) && (gv_inCinematic == false)) {
        while (true) {
            Wait(30.0, c_timeAI);
            TimerStart(gv_zergFrenzyTimer, 200.0, false, c_timeGame);
            TimerStart(gv_zergFrenzyWarningTimer, 170.0, false, c_timeGame);
            TimerWindowShow(gv_zergWormFrenzyTimerWindow, PlayerGroupAll(), true);
            Wait(200.0, c_timeAI);
            TimerWindowShow(gv_zergWormFrenzyTimerWindow, PlayerGroupAll(), false);
            TriggerExecute(gt_ZergP03Repeating1ZHBBackdooronHard, true, false);
            Wait(2.0, c_timeAI);
            TriggerExecute(gt_ZergP04Repeating1ZRH, true, false);
            Wait(30.0, c_timeAI);
            TimerStart(gv_zergFrenzyTimer, 230.0, false, c_timeGame);
            TimerStart(gv_zergFrenzyWarningTimer, 200.0, false, c_timeGame);
            TimerWindowShow(gv_zergWormFrenzyTimerWindow, PlayerGroupAll(), true);
            Wait(230.0, c_timeAI);
            TimerWindowShow(gv_zergWormFrenzyTimerWindow, PlayerGroupAll(), false);
            TriggerExecute(gt_ZergP03Repeating2ZRH, true, false);
            Wait(2.0, c_timeAI);
            TriggerExecute(gt_ZergP04Repeating2ZRU, true, false);
            Wait(30.0, c_timeAI);
            TimerStart(gv_zergFrenzyTimer, 210.0, false, c_timeGame);
            TimerStart(gv_zergFrenzyWarningTimer, 180.0, false, c_timeGame);
            TimerWindowShow(gv_zergWormFrenzyTimerWindow, PlayerGroupAll(), true);
            gf_P03AttackWaveWaypointsNorth();
            AIAttackWaveAddUnits4(7, 9, 11, 10, "Zergling");
            AIAttackWaveAddUnits4(2, 2, 3, 4, "Hydralisk");
            AIAttackWaveAddUnits4(0, 0, 1, 1, "Infestor");
            AIAttackWaveAddUnits4(4, 4, 0, 0, "Mutalisk");
            AIAttackWaveAddUnits4(0, 0, 0, 1, "Overseer");
            AIAttackWaveSend(gv_p03_ZERG_NORTH, 210, false);
            if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
                AIAttackWaveAddWaypoint(gv_p03_ZERG_NORTH, PointFromId(1853), false);
                AIAttackWaveAddWaypoint(gv_p03_ZERG_NORTH, PointFromId(1855), false);
                AIAttackWaveAddWaypoint(gv_p03_ZERG_NORTH, PointFromId(1840), false);
                AIAttackWaveAddUnits4(0, 0, 5, 8, "Mutalisk");
                AIAttackWaveSend(gv_p03_ZERG_NORTH, 210, false);
            }

            gf_P04AttackWaveWaypointsEast();
            AIAttackWaveAddUnits4(10, 12, 16, 18, "Zergling");
            AIAttackWaveAddUnits4(4, 4, 5, 8, "Mutalisk");
            AIAttackWaveSend(gv_p04_ZERG_EAST, 210, false);
            if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
                AIAttackWaveAddWaypoint(gv_p04_ZERG_EAST, PointFromId(1854), false);
                AIAttackWaveAddWaypoint(gv_p04_ZERG_EAST, PointFromId(1839), false);
                AIAttackWaveAddUnits4(0, 0, 1, 1, "BroodLord");
                AIAttackWaveSend(gv_p04_ZERG_EAST, 210, false);
            }

            Wait(210.0, c_timeAI);
            TimerWindowShow(gv_zergWormFrenzyTimerWindow, PlayerGroupAll(), false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackWaves_Init () {
    gt_ZergAttackWaves = TriggerCreate("gt_ZergAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Upgrades H
//--------------------------------------------------------------------------------------------------
bool gt_ZergUpgradesH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 1, 0) == 1))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(420.0, c_timeGame);
    gf_AddUpgradeForEnemies(1, "ZergFlyerArmorsLevel1");
    Wait(180.0, c_timeGame);
    gf_AddUpgradeForEnemies(1, "ZergGroundArmorsLevel1");
    Wait(180.0, c_timeGame);
    gf_AddUpgradeForEnemies(1, "ZergFlyerWeaponsLevel2");
    Wait(180.0, c_timeGame);
    gf_AddUpgradeForEnemies(1, "zerglingmovementspeed");
    gf_AddUpgradeForEnemies(1, "ZergMeleeWeaponsLevel2");
    Wait(180.0, c_timeGame);
    gf_AddUpgradeForEnemies(1, "ZergMissileWeaponsLevel2");
    Wait(180.0, c_timeGame);
    gf_AddUpgradeForEnemies(1, "hydraliskspeed");
    gf_AddUpgradeForEnemies(1, "CentrificalHooks");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergUpgradesH_Init () {
    gt_ZergUpgradesH = TriggerCreate("gt_ZergUpgradesH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Upgrades I
//--------------------------------------------------------------------------------------------------
bool gt_ZergUpgradesI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(420.0, c_timeGame);
    gf_AddUpgradeForEnemies(1, "ZergGroundArmorsLevel1");
    Wait(180.0, c_timeGame);
    gf_AddUpgradeForEnemies(1, "ZergFlyerWeaponsLevel2");
    gf_AddUpgradeForEnemies(1, "zerglingmovementspeed");
    Wait(180.0, c_timeGame);
    gf_AddUpgradeForEnemies(1, "ZergMeleeWeaponsLevel2");
    Wait(180.0, c_timeGame);
    gf_AddUpgradeForEnemies(1, "ZergMissileWeaponsLevel2");
    Wait(180.0, c_timeGame);
    gf_AddUpgradeForEnemies(1, "ZergFlyerArmorsLevel2");
    Wait(180.0, c_timeGame);
    gf_AddUpgradeForEnemies(1, "ZergGroundArmorsLevel2");
    Wait(180.0, c_timeGame);
    gf_AddUpgradeForEnemies(1, "ZergFlyerWeaponsLevel3");
    Wait(180.0, c_timeGame);
    gf_AddUpgradeForEnemies(1, "ZergMeleeWeaponsLevel3");
    Wait(180.0, c_timeGame);
    gf_AddUpgradeForEnemies(1, "ZergMissileWeaponsLevel3");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergUpgradesI_Init () {
    gt_ZergUpgradesI = TriggerCreate("gt_ZergUpgradesI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg P03 - Wave 1 - Z
//--------------------------------------------------------------------------------------------------
bool gt_ZergP03Wave1Z_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto6358E299_n = 6;
    int auto6358E299_i;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_SpawnNydusWormP03, true, false);
    Wait(3.7, c_timeAI);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(4, 5, 10, 12), "Zergling", gv_p03_ZERG_NORTH, gv_nydusWormP03, 3.0);
    for (auto6358E299_i = 1; auto6358E299_i <= auto6358E299_n; auto6358E299_i += 1) {
        gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Zergling", gv_p03_ZERG_NORTH, gv_nydusWormP03, 2.0);
    }
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(0, 0, 0, 2), "Roach", gv_p03_ZERG_NORTH, gv_nydusWormP03, 2.0);
    TriggerExecute(gt_DespawnNydusWormP03, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergP03Wave1Z_Init () {
    gt_ZergP03Wave1Z = TriggerCreate("gt_ZergP03Wave1Z_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg P04 - Wave 1 - Z/H
//--------------------------------------------------------------------------------------------------
bool gt_ZergP04Wave1ZH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto7E1B503A_n;
    int auto7E1B503A_i;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_SpawnNydusWormP04, true, false);
    Wait(3.7, c_timeAI);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(4, 5, 7, 12), "Zergling", gv_p04_ZERG_EAST, gv_nydusWormP04, 3.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(0, 0, 2, 2), "Hydralisk", gv_p04_ZERG_EAST, gv_nydusWormP04, 3.0);
    auto7E1B503A_n = libNtve_gf_DifficultyValueInt(6, 6, 4, 4);
    for (auto7E1B503A_i = 1; auto7E1B503A_i <= auto7E1B503A_n; auto7E1B503A_i += 1) {
        gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(2, 2, 4, 5), "Zergling", gv_p04_ZERG_EAST, gv_nydusWormP04, 2.0);
    }
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "Hydralisk", gv_p04_ZERG_EAST, gv_nydusWormP04, 2.0);
    TriggerExecute(gt_DespawnNydusWormP04, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergP04Wave1ZH_Init () {
    gt_ZergP04Wave1ZH = TriggerCreate("gt_ZergP04Wave1ZH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg P03 - Wave 2 - Z/R
//--------------------------------------------------------------------------------------------------
bool gt_ZergP03Wave2ZR_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto3EE75876_n = 4;
    int auto3EE75876_i;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_SpawnNydusWormP03, true, false);
    Wait(3.7, c_timeAI);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(6, 8, 12, 15), "Zergling", gv_p03_ZERG_NORTH, gv_nydusWormP03, 1.5);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(2, 3, 3, 4), "Roach", gv_p03_ZERG_NORTH, gv_nydusWormP03, 3.0);
    for (auto3EE75876_i = 1; auto3EE75876_i <= auto3EE75876_n; auto3EE75876_i += 1) {
        gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Zergling", gv_p03_ZERG_NORTH, gv_nydusWormP03, 2.0);
    }
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Roach", gv_p03_ZERG_NORTH, gv_nydusWormP03, 3.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Zergling", gv_p03_ZERG_NORTH, gv_nydusWormP03, 2.0);
    TriggerExecute(gt_DespawnNydusWormP03, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergP03Wave2ZR_Init () {
    gt_ZergP03Wave2ZR = TriggerCreate("gt_ZergP03Wave2ZR_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg P04 - Wave 2 - Z/R
//--------------------------------------------------------------------------------------------------
bool gt_ZergP04Wave2ZR_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoC505853C_n = 2;
    int autoC505853C_i;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_SpawnNydusWormP04, true, false);
    Wait(3.7, c_timeAI);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(2, 3, 3, 4), "Roach", gv_p04_ZERG_EAST, gv_nydusWormP04, 1.5);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(2, 3, 7, 10), "Zergling", gv_p04_ZERG_EAST, gv_nydusWormP04, 3.0);
    for (autoC505853C_i = 1; autoC505853C_i <= autoC505853C_n; autoC505853C_i += 1) {
        if ((libNtve_gf_DifficultyValueInt(1, 1, 1, 0) == 1)) {
            gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Zergling", gv_p04_ZERG_EAST, gv_nydusWormP04, 2.0);
            gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Zergling", gv_p04_ZERG_EAST, gv_nydusWormP04, 2.0);
        }
        else {
            gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(0, 0, 0, 8), "Zergling", gv_p04_ZERG_EAST, gv_nydusWormP04, 2.0);
        }
        gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Roach", gv_p04_ZERG_EAST, gv_nydusWormP04, 2.0);
    }
    TriggerExecute(gt_DespawnNydusWormP04, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergP04Wave2ZR_Init () {
    gt_ZergP04Wave2ZR = TriggerCreate("gt_ZergP04Wave2ZR_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg P03 - Wave 3 - Z/H/B
//--------------------------------------------------------------------------------------------------
bool gt_ZergP03Wave3ZHB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_SpawnNydusWormP03, true, false);
    Wait(3.7, c_timeAI);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(2, 2, 4, 5), "Hydralisk", gv_p03_ZERG_NORTH, gv_nydusWormP03, 1.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(0, 0, 2, 3), "Baneling", gv_p03_ZERG_NORTH, gv_nydusWormP03, 2.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(2, 2, 2, 6), "Zergling", gv_p03_ZERG_NORTH, gv_nydusWormP03, 2.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(2, 2, 2, 6), "Zergling", gv_p03_ZERG_NORTH, gv_nydusWormP03, 2.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Hydralisk", gv_p03_ZERG_NORTH, gv_nydusWormP03, 2.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(2, 2, 2, 6), "Zergling", gv_p03_ZERG_NORTH, gv_nydusWormP03, 2.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(2, 2, 3, 6), "Zergling", gv_p03_ZERG_NORTH, gv_nydusWormP03, 2.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Baneling", gv_p03_ZERG_NORTH, gv_nydusWormP03, 2.0);
    TriggerExecute(gt_DespawnNydusWormP03, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergP03Wave3ZHB_Init () {
    gt_ZergP03Wave3ZHB = TriggerCreate("gt_ZergP03Wave3ZHB_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg P04 - Wave 3 - Z/R/H
//--------------------------------------------------------------------------------------------------
bool gt_ZergP04Wave3ZRH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto2028FC14_n = 2;
    int auto2028FC14_i;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_SpawnNydusWormP04, true, false);
    Wait(3.7, c_timeAI);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(5, 4, 9, 7), "Zergling", gv_p04_ZERG_EAST, gv_nydusWormP04, 1.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(0, 1, 1, 2), "Hydralisk", gv_p04_ZERG_EAST, gv_nydusWormP04, 1.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(0, 1, 2, 2), "Roach", gv_p04_ZERG_EAST, gv_nydusWormP04, 3.0);
    for (auto2028FC14_i = 1; auto2028FC14_i <= auto2028FC14_n; auto2028FC14_i += 1) {
        gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(5, 0, 2, 5), "Zergling", gv_p04_ZERG_EAST, gv_nydusWormP04, 1.0);
        gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(1, 1, 2, 1), "Roach", gv_p04_ZERG_EAST, gv_nydusWormP04, 1.0);
        gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(0, 1, 1, 1), "Hydralisk", gv_p04_ZERG_EAST, gv_nydusWormP04, 2.0);
    }
    TriggerExecute(gt_DespawnNydusWormP04, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergP04Wave3ZRH_Init () {
    gt_ZergP04Wave3ZRH = TriggerCreate("gt_ZergP04Wave3ZRH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg P03 - Wave 5 - Z/R/U (Backdoor on Hard)
//--------------------------------------------------------------------------------------------------
bool gt_ZergP03Wave5ZRUBackdooronHard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto9C918F92_n = 5;
    int auto9C918F92_i;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
        TriggerExecute(gt_SpawnNydusWormP03, true, false);
    }
    else {
        TriggerExecute(gt_SpawnNydusWormP032, true, false);
    }
    Wait(3.7, c_timeAI);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(5, 5, 5, 7), "Zergling", gv_p03_ZERG_NORTH, gv_nydusWormP03, 2.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(2, 3, 2, 3), "Roach", gv_p03_ZERG_NORTH, gv_nydusWormP03, 2.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Ultralisk", gv_p03_ZERG_NORTH, gv_nydusWormP03, 3.0);
    for (auto9C918F92_i = 1; auto9C918F92_i <= auto9C918F92_n; auto9C918F92_i += 1) {
        gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(3, 3, 4, 5), "Zergling", gv_p03_ZERG_NORTH, gv_nydusWormP03, 2.0);
    }
    TriggerExecute(gt_DespawnNydusWormP03, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergP03Wave5ZRUBackdooronHard_Init () {
    gt_ZergP03Wave5ZRUBackdooronHard = TriggerCreate("gt_ZergP03Wave5ZRUBackdooronHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg P04 - Wave 5 - Z/R
//--------------------------------------------------------------------------------------------------
bool gt_ZergP04Wave5ZR_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoB96C1D55_n = 2;
    int autoB96C1D55_i;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_SpawnNydusWormP04, true, false);
    Wait(3.7, c_timeAI);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(10, 10, 18, 18), "Zergling", gv_p04_ZERG_EAST, gv_nydusWormP04, 2.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(3, 3, 4, 5), "Roach", gv_p04_ZERG_EAST, gv_nydusWormP04, 3.0);
    for (autoB96C1D55_i = 1; autoB96C1D55_i <= autoB96C1D55_n; autoB96C1D55_i += 1) {
        if ((libNtve_gf_DifficultyValueInt(1, 1, 1, 0) == 1)) {
            gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(2, 2, 4, 6), "Zergling", gv_p04_ZERG_EAST, gv_nydusWormP04, 2.0);
            gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(2, 2, 4, 7), "Zergling", gv_p04_ZERG_EAST, gv_nydusWormP04, 2.0);
        }
        else {
            gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(0, 0, 0, 11), "Zergling", gv_p04_ZERG_EAST, gv_nydusWormP04, 2.0);
        }
        gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Roach", gv_p04_ZERG_EAST, gv_nydusWormP04, 3.0);
    }
    TriggerExecute(gt_DespawnNydusWormP04, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergP04Wave5ZR_Init () {
    gt_ZergP04Wave5ZR = TriggerCreate("gt_ZergP04Wave5ZR_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg P03 - Wave 6 - Hydra
//--------------------------------------------------------------------------------------------------
bool gt_ZergP03Wave6Hydra_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto66D21D64_n;
    int auto66D21D64_i;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_SpawnNydusWormP03, true, false);
    Wait(3.7, c_timeAI);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Hydralisk", gv_p03_ZERG_NORTH, gv_nydusWormP03, 2.0);
    auto66D21D64_n = libNtve_gf_DifficultyValueInt(2, 2, 4, 4);
    for (auto66D21D64_i = 1; auto66D21D64_i <= auto66D21D64_n; auto66D21D64_i += 1) {
        gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Hydralisk", gv_p03_ZERG_NORTH, gv_nydusWormP03, 2.0);
    }
    TriggerExecute(gt_DespawnNydusWormP03, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergP03Wave6Hydra_Init () {
    gt_ZergP03Wave6Hydra = TriggerCreate("gt_ZergP03Wave6Hydra_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg P03 - Repeating 1 - Z/H/B (Backdoor on Hard)
//--------------------------------------------------------------------------------------------------
bool gt_ZergP03Repeating1ZHBBackdooronHard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
        TriggerExecute(gt_SpawnNydusWormP03, true, false);
    }
    else {
        TriggerExecute(gt_SpawnNydusWormP032, true, false);
    }
    Wait(3.7, c_timeAI);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(2, 2, 3, 2), "Hydralisk", gv_p03_ZERG_NORTH, gv_nydusWormP03, 1.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(0, 0, 2, 3), "Baneling", gv_p03_ZERG_NORTH, gv_nydusWormP03, 2.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(2, 2, 4, 6), "Zergling", gv_p03_ZERG_NORTH, gv_nydusWormP03, 2.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(3, 2, 3, 5), "Zergling", gv_p03_ZERG_NORTH, gv_nydusWormP03, 2.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(0, 0, 1, 2), "Hydralisk", gv_p03_ZERG_NORTH, gv_nydusWormP03, 2.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(3, 2, 3, 4), "Zergling", gv_p03_ZERG_NORTH, gv_nydusWormP03, 2.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(3, 2, 3, 6), "Zergling", gv_p03_ZERG_NORTH, gv_nydusWormP03, 2.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(1, 2, 2, 2), "Baneling", gv_p03_ZERG_NORTH, gv_nydusWormP03, 2.0);
    TriggerExecute(gt_DespawnNydusWormP03, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergP03Repeating1ZHBBackdooronHard_Init () {
    gt_ZergP03Repeating1ZHBBackdooronHard = TriggerCreate("gt_ZergP03Repeating1ZHBBackdooronHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg P04 - Repeating 1 - Z/R/H
//--------------------------------------------------------------------------------------------------
bool gt_ZergP04Repeating1ZRH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoE060271E_n = 2;
    int autoE060271E_i;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_SpawnNydusWormP04, true, false);
    Wait(3.7, c_timeAI);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(9, 8, 13, 15), "Zergling", gv_p04_ZERG_EAST, gv_nydusWormP04, 1.5);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(0, 1, 1, 2), "Hydralisk", gv_p04_ZERG_EAST, gv_nydusWormP04, 1.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(0, 1, 2, 2), "Roach", gv_p04_ZERG_EAST, gv_nydusWormP04, 3.0);
    for (autoE060271E_i = 1; autoE060271E_i <= autoE060271E_n; autoE060271E_i += 1) {
        gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(5, 2, 4, 5), "Zergling", gv_p04_ZERG_EAST, gv_nydusWormP04, 2.0);
        gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Roach", gv_p04_ZERG_EAST, gv_nydusWormP04, 2.0);
        gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(0, 1, 1, 1), "Hydralisk", gv_p04_ZERG_EAST, gv_nydusWormP04, 2.0);
    }
    TriggerExecute(gt_DespawnNydusWormP04, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergP04Repeating1ZRH_Init () {
    gt_ZergP04Repeating1ZRH = TriggerCreate("gt_ZergP04Repeating1ZRH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg P03 - Repeating 2 - Z/R/H
//--------------------------------------------------------------------------------------------------
bool gt_ZergP03Repeating2ZRH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_SpawnNydusWormP03, true, false);
    Wait(3.7, c_timeAI);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(2, 8, 10, 10), "Zergling", gv_p03_ZERG_NORTH, gv_nydusWormP03, 1.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Roach", gv_p03_ZERG_NORTH, gv_nydusWormP03, 1.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), "Hydralisk", gv_p03_ZERG_NORTH, gv_nydusWormP03, 2.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(2, 2, 3, 5), "Zergling", gv_p03_ZERG_NORTH, gv_nydusWormP03, 2.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(2, 2, 3, 6), "Zergling", gv_p03_ZERG_NORTH, gv_nydusWormP03, 2.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(3, 2, 3, 4), "Zergling", gv_p03_ZERG_NORTH, gv_nydusWormP03, 2.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(3, 2, 3, 5), "Zergling", gv_p03_ZERG_NORTH, gv_nydusWormP03, 2.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(3, 1, 3, 5), "Zergling", gv_p03_ZERG_NORTH, gv_nydusWormP03, 2.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(0, 1, 1, 1), "Hydralisk", gv_p03_ZERG_NORTH, gv_nydusWormP03, 2.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(2, 1, 3, 7), "Zergling", gv_p03_ZERG_NORTH, gv_nydusWormP03, 2.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Zergling", gv_p03_ZERG_NORTH, gv_nydusWormP03, 2.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Zergling", gv_p03_ZERG_NORTH, gv_nydusWormP03, 2.0);
    TriggerExecute(gt_DespawnNydusWormP03, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergP03Repeating2ZRH_Init () {
    gt_ZergP03Repeating2ZRH = TriggerCreate("gt_ZergP03Repeating2ZRH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg P04 - Repeating 2 - Z/R/U
//--------------------------------------------------------------------------------------------------
bool gt_ZergP04Repeating2ZRU_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto06307578_n = 6;
    int auto06307578_i;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_SpawnNydusWormP04, true, false);
    Wait(3.7, c_timeAI);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(5, 5, 8, 11), "Zergling", gv_p04_ZERG_EAST, gv_nydusWormP04, 1.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(2, 3, 3, 4), "Roach", gv_p04_ZERG_EAST, gv_nydusWormP04, 1.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Ultralisk", gv_p04_ZERG_EAST, gv_nydusWormP04, 2.0);
    for (auto06307578_i = 1; auto06307578_i <= auto06307578_n; auto06307578_i += 1) {
        gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Zergling", gv_p04_ZERG_EAST, gv_nydusWormP04, 2.0);
    }
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), "Ultralisk", gv_p04_ZERG_EAST, gv_nydusWormP04, 2.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(2, 2, 5, 2), "Zergling", gv_p04_ZERG_EAST, gv_nydusWormP04, 2.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(2, 2, 4, 2), "Zergling", gv_p04_ZERG_EAST, gv_nydusWormP04, 2.0);
    gf_SpawnNydusUnits(libNtve_gf_DifficultyValueInt(2, 2, 3, 2), "Zergling", gv_p04_ZERG_EAST, gv_nydusWormP04, 2.0);
    TriggerExecute(gt_DespawnNydusWormP04, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergP04Repeating2ZRU_Init () {
    gt_ZergP04Repeating2ZRU = TriggerCreate("gt_ZergP04Repeating2ZRU_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Nydus Worm - P03
//--------------------------------------------------------------------------------------------------
bool gt_SpawnNydusWormP03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_nydusWormP03) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_point = AIRandomSpawnPoint(gv_p02_ZERG_LOW_GROUND_AI, RegionFromId(32), 9.0, 40.0, 30.0);
    if ((RegionContainsPoint(RegionCircle(lv_point, 10.0), CameraGetTarget(gv_p01_USER)) == true) && (gv_gameOver == false)) {
        CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_p05_ZERG_LOW_GROUND_NOAI, lv_point);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_nydusWormHP);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
    gv_nydusWormP03 = UnitLastCreated();
    if ((UnitIsAlive(gv_nydusWormP03) == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_nydusWormP03), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
        SoundPlayOnUnit(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), gv_nydusWormP03, 0.0, 100.0, 0.0);
        VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(gv_nydusWormP03), 5.0), 8.0, true);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(gv_p01_USER), "PingAlert", UnitGetPosition(gv_nydusWormP03), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
        gv_pingNydusWormP03 = PingLastCreated();
        PingSetTooltip(gv_pingNydusWormP03, StringExternal("Param/Value/FB8FAC08"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnNydusWormP03_Init () {
    gt_SpawnNydusWormP03 = TriggerCreate("gt_SpawnNydusWormP03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Nydus Worm - P03 - Backdoor
//--------------------------------------------------------------------------------------------------
bool gt_SpawnNydusWormP032_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_nydusWormP03) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_point = AIRandomSpawnPoint(gv_p02_ZERG_LOW_GROUND_AI, RegionFromId(24), 9.0, 40.0, 30.0);
    if ((RegionContainsPoint(RegionCircle(lv_point, 10.0), CameraGetTarget(gv_p01_USER)) == true) && (gv_gameOver == false)) {
        CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_p05_ZERG_LOW_GROUND_NOAI, lv_point);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_nydusWormHP);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
    gv_nydusWormP03 = UnitLastCreated();
    if ((UnitIsAlive(gv_nydusWormP03) == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_nydusWormP03), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
        SoundPlayOnUnit(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), gv_nydusWormP03, 0.0, 100.0, 0.0);
        VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(gv_nydusWormP03), 5.0), 8.0, true);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(gv_p01_USER), "PingAlert", UnitGetPosition(gv_nydusWormP03), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
        gv_pingNydusWormP03 = PingLastCreated();
        PingSetTooltip(gv_pingNydusWormP03, StringExternal("Param/Value/237B3F6C"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnNydusWormP032_Init () {
    gt_SpawnNydusWormP032 = TriggerCreate("gt_SpawnNydusWormP032_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Nydus Worm - P04
//--------------------------------------------------------------------------------------------------
bool gt_SpawnNydusWormP04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_nydusWormP04) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_point = AIRandomSpawnPoint(gv_p02_ZERG_LOW_GROUND_AI, RegionFromId(40), 9.0, 40.0, 30.0);
    if ((RegionContainsPoint(RegionCircle(lv_point, 10.0), CameraGetTarget(gv_p01_USER)) == true) && (gv_gameOver == false)) {
        CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_p05_ZERG_LOW_GROUND_NOAI, lv_point);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_nydusWormHP);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
    gv_nydusWormP04 = UnitLastCreated();
    if ((UnitIsAlive(gv_nydusWormP04) == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_nydusWormP04), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
        SoundPlayOnUnit(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), gv_nydusWormP04, 0.0, 100.0, 0.0);
        VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(gv_nydusWormP04), 5.0), 8.0, true);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(gv_p01_USER), "PingAlert", UnitGetPosition(gv_nydusWormP04), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
        gv_pingNydusWormP04 = PingLastCreated();
        PingSetTooltip(gv_pingNydusWormP04, StringExternal("Param/Value/A29FEDAC"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnNydusWormP04_Init () {
    gt_SpawnNydusWormP04 = TriggerCreate("gt_SpawnNydusWormP04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Despawn Nydus Worm - P03
//--------------------------------------------------------------------------------------------------
bool gt_DespawnNydusWormP03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_nydusWormP03) == true)) {
        while (!((UnitHasBehavior(gv_nydusWormP03, "ZeratulStun") == false))) {
            Wait(0.5, c_timeGame);
        }
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_nydusWormP03), c_animNameDefault, "Unburrow", c_animFlagNonLooping, c_animTimeDefault);
        SoundPlayOnUnit(SoundLink("Zerg_BurrowLarge", -1), PlayerGroupAll(), gv_nydusWormP03, 0.0, 100.0, 0.0);
        Wait(3.8, c_timeGame);
        UnitRemove(gv_nydusWormP03);
        PingDestroy(gv_pingNydusWormP03);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DespawnNydusWormP03_Init () {
    gt_DespawnNydusWormP03 = TriggerCreate("gt_DespawnNydusWormP03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Despawn Nydus Worm - P04
//--------------------------------------------------------------------------------------------------
bool gt_DespawnNydusWormP04_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_nydusWormP04) == true)) {
        while (!((UnitHasBehavior(gv_nydusWormP04, "ZeratulStun") == false))) {
            Wait(0.5, c_timeGame);
        }
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_nydusWormP04), c_animNameDefault, "Unburrow", c_animFlagNonLooping, c_animTimeDefault);
        SoundPlayOnUnit(SoundLink("Zerg_BurrowLarge", -1), PlayerGroupAll(), gv_nydusWormP04, 0.0, 100.0, 0.0);
        Wait(3.8, c_timeGame);
        UnitRemove(gv_nydusWormP04);
        PingDestroy(gv_pingNydusWormP04);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DespawnNydusWormP04_Init () {
    gt_DespawnNydusWormP04 = TriggerCreate("gt_DespawnNydusWormP04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Nydus Worm - P03 Ping
//--------------------------------------------------------------------------------------------------
bool gt_RemoveNydusWormP03Ping_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_nydusWormP03) == false)) {
        PingDestroy(gv_pingNydusWormP03);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveNydusWormP03Ping_Init () {
    gt_RemoveNydusWormP03Ping = TriggerCreate("gt_RemoveNydusWormP03Ping_Func");
    TriggerAddEventUnitDied(gt_RemoveNydusWormP03Ping, UnitRefFromVariable("gv_nydusWormP03"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Nydus Worm - P04 Ping
//--------------------------------------------------------------------------------------------------
bool gt_RemoveNydusWormP04Ping_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_nydusWormP04) == false)) {
        PingDestroy(gv_pingNydusWormP04);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveNydusWormP04Ping_Init () {
    gt_RemoveNydusWormP04Ping = TriggerCreate("gt_RemoveNydusWormP04Ping_Func");
    TriggerAddEventUnitDied(gt_RemoveNydusWormP04Ping, UnitRefFromVariable("gv_nydusWormP04"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveMinerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveMinerals_Init () {
    gt_AIGiveMinerals = TriggerCreate("gt_AIGiveMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p02_ZERG_LOW_GROUND_AI, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p03_ZERG_NORTH, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p04_ZERG_EAST, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveGas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveGas_Init () {
    gt_AIGiveGas = TriggerCreate("gt_AIGiveGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p02_ZERG_LOW_GROUND_AI, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p03_ZERG_NORTH, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p04_ZERG_EAST, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overmind Tendril Beacon - Zerglings (SW)
//--------------------------------------------------------------------------------------------------
bool gt_OvermindTendrilBeaconZerglingsSW_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_beacon;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Zeratul", gv_p01_USER, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_beacon = UnitFromId(36);
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/24EE165C"), null, gv_zeratul);
    libCamp_gf_DisplayResearchPointsGiventoPlayer(libCamp_ge_StoryResearchObject_ResearchObjectOvermindTendrils, lv_beacon, gv_p01_USER);
    TriggerExecute(gt_TransmissionZeratulReachesTendrilsQ, true, false);
    UnitBehaviorAdd(gv_zeratul, "SuppressCloak", gv_zeratul, 1);
    libNtve_gf_MakeUnitUncommandable(gv_zeratul, true);
    libNtve_gf_MakeUnitInvulnerable(gv_zeratul, true);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_beacon)), c_orderQueueReplace);
    UnitIssueOrder(gv_zeratul, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    Wait(2.0, c_timeGame);
    libNtve_gf_MakeUnitFacePoint(gv_zeratul, UnitGetPosition(UnitFromId(85)), 0.0);
    UnitBehaviorAdd(gv_zeratul, "Read", gv_zeratul, 1);
    libNtve_gf_PauseUnit(gv_zeratul, true);
    UnitKill(lv_beacon);
    PingDestroy(gv_beaconPingZerglings);
    TriggerExecute(gt_ObjectiveOvermindTendrilsUpdateQ, true, true);
    libNtve_gf_ChangeUnitDamage(UnitFromId(85), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    UnitKill(UnitFromId(85));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OvermindTendrilBeaconZerglingsSW_Init () {
    gt_OvermindTendrilBeaconZerglingsSW = TriggerCreate("gt_OvermindTendrilBeaconZerglingsSW_Func");
    TriggerEnable(gt_OvermindTendrilBeaconZerglingsSW, false);
    TriggerAddEventTimePeriodic(gt_OvermindTendrilBeaconZerglingsSW, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overmind Tendril Beacon - Mutalisks (NW)
//--------------------------------------------------------------------------------------------------
bool gt_OvermindTendrilBeaconMutalisksNW_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_beacon;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Zeratul", gv_p01_USER, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_beacon = UnitFromId(929);
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/40839C6C"), null, gv_zeratul);
    libCamp_gf_DisplayResearchPointsGiventoPlayer(libCamp_ge_StoryResearchObject_ResearchObjectOvermindTendrils, lv_beacon, gv_p01_USER);
    TriggerExecute(gt_TransmissionZeratulReachesTendrilsQ, true, false);
    UnitBehaviorAdd(gv_zeratul, "SuppressCloak", gv_zeratul, 1);
    libNtve_gf_MakeUnitUncommandable(gv_zeratul, true);
    libNtve_gf_MakeUnitInvulnerable(gv_zeratul, true);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_beacon)), c_orderQueueReplace);
    UnitIssueOrder(gv_zeratul, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    Wait(2.0, c_timeGame);
    libNtve_gf_MakeUnitFacePoint(gv_zeratul, UnitGetPosition(UnitFromId(97)), 0.0);
    UnitBehaviorAdd(gv_zeratul, "Read", gv_zeratul, 1);
    libNtve_gf_PauseUnit(gv_zeratul, true);
    UnitKill(lv_beacon);
    PingDestroy(gv_beaconPingMutalisks);
    TriggerExecute(gt_ObjectiveOvermindTendrilsUpdateQ, true, true);
    libNtve_gf_ChangeUnitDamage(UnitFromId(97), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    UnitKill(UnitFromId(97));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OvermindTendrilBeaconMutalisksNW_Init () {
    gt_OvermindTendrilBeaconMutalisksNW = TriggerCreate("gt_OvermindTendrilBeaconMutalisksNW_Func");
    TriggerEnable(gt_OvermindTendrilBeaconMutalisksNW, false);
    TriggerAddEventTimePeriodic(gt_OvermindTendrilBeaconMutalisksNW, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overmind Tendril Beacon - Lurkers (SE)
//--------------------------------------------------------------------------------------------------
bool gt_OvermindTendrilBeaconLurkersSE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_beacon;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Zeratul", gv_p01_USER, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_beacon = UnitFromId(46);
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/57A961AD"), null, gv_zeratul);
    libCamp_gf_DisplayResearchPointsGiventoPlayer(libCamp_ge_StoryResearchObject_ResearchObjectOvermindTendrils, lv_beacon, gv_p01_USER);
    TriggerExecute(gt_TransmissionZeratulReachesTendrilsQ, true, false);
    UnitBehaviorAdd(gv_zeratul, "SuppressCloak", gv_zeratul, 1);
    libNtve_gf_MakeUnitUncommandable(gv_zeratul, true);
    libNtve_gf_MakeUnitInvulnerable(gv_zeratul, true);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_beacon)), c_orderQueueReplace);
    UnitIssueOrder(gv_zeratul, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    Wait(2.0, c_timeGame);
    libNtve_gf_MakeUnitFacePoint(gv_zeratul, UnitGetPosition(UnitFromId(84)), 0.0);
    UnitBehaviorAdd(gv_zeratul, "Read", gv_zeratul, 1);
    libNtve_gf_PauseUnit(gv_zeratul, true);
    UnitKill(lv_beacon);
    PingDestroy(gv_beaconPingLurkers);
    TriggerExecute(gt_ObjectiveOvermindTendrilsUpdateQ, true, true);
    libNtve_gf_ChangeUnitDamage(UnitFromId(84), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    UnitKill(UnitFromId(84));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OvermindTendrilBeaconLurkersSE_Init () {
    gt_OvermindTendrilBeaconLurkersSE = TriggerCreate("gt_OvermindTendrilBeaconLurkersSE_Func");
    TriggerEnable(gt_OvermindTendrilBeaconLurkersSE, false);
    TriggerAddEventTimePeriodic(gt_OvermindTendrilBeaconLurkersSE, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overmind Tendril Beacon - Banelings (NE)
//--------------------------------------------------------------------------------------------------
bool gt_OvermindTendrilBeaconBanelingsNE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_beacon;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Zeratul", gv_p01_USER, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_beacon = UnitFromId(38);
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/0FA47BA1"), null, gv_zeratul);
    libCamp_gf_DisplayResearchPointsGiventoPlayer(libCamp_ge_StoryResearchObject_ResearchObjectOvermindTendrils, lv_beacon, gv_p01_USER);
    TriggerExecute(gt_TransmissionZeratulReachesTendrilsQ, true, false);
    UnitBehaviorAdd(gv_zeratul, "SuppressCloak", gv_zeratul, 1);
    libNtve_gf_MakeUnitUncommandable(gv_zeratul, true);
    libNtve_gf_MakeUnitInvulnerable(gv_zeratul, true);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_beacon)), c_orderQueueReplace);
    UnitIssueOrder(gv_zeratul, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    Wait(2.0, c_timeGame);
    libNtve_gf_MakeUnitFacePoint(gv_zeratul, UnitGetPosition(UnitFromId(103)), 0.0);
    UnitBehaviorAdd(gv_zeratul, "Read", gv_zeratul, 1);
    libNtve_gf_PauseUnit(gv_zeratul, true);
    UnitKill(lv_beacon);
    PingDestroy(gv_beaconPingBanelings);
    TriggerExecute(gt_ObjectiveOvermindTendrilsUpdateQ, true, true);
    libNtve_gf_ChangeUnitDamage(UnitFromId(103), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    UnitKill(UnitFromId(103));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OvermindTendrilBeaconBanelingsNE_Init () {
    gt_OvermindTendrilBeaconBanelingsNE = TriggerCreate("gt_OvermindTendrilBeaconBanelingsNE_Func");
    TriggerEnable(gt_OvermindTendrilBeaconBanelingsNE, false);
    TriggerAddEventTimePeriodic(gt_OvermindTendrilBeaconBanelingsNE, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Release Control of Zeratul
//--------------------------------------------------------------------------------------------------
bool gt_ReleaseControlofZeratul_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PauseUnit(gv_zeratul, false);
    gf_RefreshPlayersHPandShields();
    UnitBehaviorRemove(gv_zeratul, "Read", 1);
    UnitBehaviorRemove(gv_zeratul, "SuppressCloak", 1);
    libNtve_gf_MakeUnitUncommandable(gv_zeratul, false);
    libNtve_gf_MakeUnitInvulnerable(gv_zeratul, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReleaseControlofZeratul_Init () {
    gt_ReleaseControlofZeratul = TriggerCreate("gt_ReleaseControlofZeratul_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Zeratul Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionZeratulIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul03Zeratul00043", -1)
    libCamp_gf_SendTransmissionCampaign(gv_zeratul, SoundLink("TZeratul03Zeratul00043", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionZeratulIntroQ_Init () {
    gt_TransmissionZeratulIntroQ = TriggerCreate("gt_TransmissionZeratulIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Zeratul Finds Observer Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionZeratulFindsObserverQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul03Zeratul00040", -1)
    libCamp_gf_SendTransmissionCampaign(gv_zeratul, SoundLink("TZeratul03Zeratul00040", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerExecute(gt_TipObserver, true, false);
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionZeratulFindsObserverQ_Init () {
    gt_TransmissionZeratulFindsObserverQ = TriggerCreate("gt_TransmissionZeratulFindsObserverQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Zeratul Gets to Base Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionZeratulGetstoBaseQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Zeratul"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul03Zeratul00044", -1)
    libCamp_gf_SendTransmissionCampaign(gv_zeratul, SoundLink("TZeratul03Zeratul00044", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionZeratulGetstoBaseQ_Init () {
    gt_TransmissionZeratulGetstoBaseQ = TriggerCreate("gt_TransmissionZeratulGetstoBaseQ_Func");
    TriggerAddEventUnitRegion(gt_TransmissionZeratulGetstoBaseQ, null, RegionFromId(21), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Zergling Rush Colossi Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionZerglingRushColossiQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul03Zeratul00045", -1)
    libCamp_gf_SendTransmissionCampaign(gv_zeratul, SoundLink("TZeratul03Zeratul00045", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionZerglingRushColossiQ_Init () {
    gt_TransmissionZerglingRushColossiQ = TriggerCreate("gt_TransmissionZerglingRushColossiQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Zerg Frenzy Incoming Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionZergFrenzyIncomingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto5EE8773F_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto5EE8773F_val = gv_zergFrenzyTransmissionIncrement;
    if (auto5EE8773F_val == 0) {
        gv_zergFrenzyTransmissionIncrement = 1;
        TriggerQueueEnter();
        if ((gv_gameOver == true)) {
            return true;
        }

        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TZeratul03Zeratul00038", -1)
        libCamp_gf_SendTransmissionCampaign(gv_zeratul, SoundLink("TZeratul03Zeratul00038", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else if (auto5EE8773F_val == 1) {
        gv_zergFrenzyTransmissionIncrement = 2;
        TriggerQueueEnter();
        if ((gv_gameOver == true)) {
            return true;
        }

        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TZeratul03Zeratul00035", -1)
        libCamp_gf_SendTransmissionCampaign(gv_zeratul, SoundLink("TZeratul03Zeratul00035", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else if (auto5EE8773F_val == 2) {
        gv_zergFrenzyTransmissionIncrement = 3;
        TriggerQueueEnter();
        if ((gv_gameOver == true)) {
            return true;
        }

        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TZeratul03Zeratul00034", -1)
        libCamp_gf_SendTransmissionCampaign(gv_zeratul, SoundLink("TZeratul03Zeratul00034", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else if (auto5EE8773F_val == 3) {
        gv_zergFrenzyTransmissionIncrement = 4;
        TriggerQueueEnter();
        if ((gv_gameOver == true)) {
            return true;
        }

        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TZeratul03Zeratul00042", -1)
        libCamp_gf_SendTransmissionCampaign(gv_zeratul, SoundLink("TZeratul03Zeratul00042", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else if (auto5EE8773F_val == 4) {
        gv_zergFrenzyTransmissionIncrement = 0;
        TriggerQueueEnter();
        if ((gv_gameOver == true)) {
            return true;
        }

        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TZeratul03Zeratul00036", -1)
        libCamp_gf_SendTransmissionCampaign(gv_zeratul, SoundLink("TZeratul03Zeratul00036", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionZergFrenzyIncomingQ_Init () {
    gt_TransmissionZergFrenzyIncomingQ = TriggerCreate("gt_TransmissionZergFrenzyIncomingQ_Func");
    TriggerAddEventTimer(gt_TransmissionZergFrenzyIncomingQ, gv_zergFrenzyWarningTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Get to Overmind Remains Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionGettoOvermindRemainsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul03Zeratul00001", -1)
    libCamp_gf_SendTransmissionCampaign(gv_zeratul, SoundLink("TZeratul03Zeratul00001", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionGettoOvermindRemainsQ_Init () {
    gt_TransmissionGettoOvermindRemainsQ = TriggerCreate("gt_TransmissionGettoOvermindRemainsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Use Observers Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionUseObserversQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul03Zeratul00037", -1)
    libCamp_gf_SendTransmissionCampaign(gv_zeratul, SoundLink("TZeratul03Zeratul00037", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionUseObserversQ_Init () {
    gt_TransmissionUseObserversQ = TriggerCreate("gt_TransmissionUseObserversQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Zeratul Finds Warp Gates Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionZeratulFindsWarpGatesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TechTreeUpgradeAddLevel(gv_p01_USER, "WarpGateResearch", 1);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("UpgradeToWarpGate", 0), true);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("CyberneticsCoreResearch", 6), true);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul03Zeratul00004", -1)
    libCamp_gf_SendTransmissionCampaign(gv_zeratul, SoundLink("TZeratul03Zeratul00004", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerExecute(gt_TipWarpInQ, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionZeratulFindsWarpGatesQ_Init () {
    gt_TransmissionZeratulFindsWarpGatesQ = TriggerCreate("gt_TransmissionZeratulFindsWarpGatesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Zeratul Reaches Tendrils Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionZeratulReachesTendrilsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto6E569E9E_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6E569E9E_val = gv_overmindTendrilsVisited;
    if (auto6E569E9E_val == 0) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TZeratul03Zeratul00046", -1)
        libCamp_gf_SendTransmissionCampaign(gv_zeratul, SoundLink("TZeratul03Zeratul00046", -1), c_transmissionDurationAdd, 0.0, true);
        // Transmission - SoundLink("TZeratul03Zeratul00047", -1)
        libCamp_gf_SendTransmissionCampaign(gv_zeratul, SoundLink("TZeratul03Zeratul00047", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else if (auto6E569E9E_val == 1) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TZeratul03Zeratul00048", -1)
        libCamp_gf_SendTransmissionCampaign(gv_zeratul, SoundLink("TZeratul03Zeratul00048", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        libNtve_gf_PauseUnit(gv_zeratul, false);
        TriggerQueueExit();
    }
    else if (auto6E569E9E_val == 2) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TZeratul03Zeratul00049", -1)
        libCamp_gf_SendTransmissionCampaign(gv_zeratul, SoundLink("TZeratul03Zeratul00049", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else if (auto6E569E9E_val == 3) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TZeratul03Zeratul00050", -1)
        libCamp_gf_SendTransmissionCampaign(gv_zeratul, SoundLink("TZeratul03Zeratul00050", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionZeratulReachesTendrilsQ_Init () {
    gt_TransmissionZeratulReachesTendrilsQ = TriggerCreate("gt_TransmissionZeratulReachesTendrilsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - High Templar Warped In Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHighTemplarWarpedInQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    CameraLockInput(gv_p01_USER, true);
    CameraPan(gv_p01_USER, UnitGetPosition(EventUnitProgressUnit()), 2.0, -1, 10, true);
    Wait(1.5, c_timeGame);
    CameraLockInput(gv_p01_USER, false);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul03HighTemplar00005", -1)
    libCamp_gf_SendTransmissionCampaign(EventUnitProgressUnit(), SoundLink("TZeratul03HighTemplar00005", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionHighTemplarWarpedInQ_Init () {
    gt_TransmissionHighTemplarWarpedInQ = TriggerCreate("gt_TransmissionHighTemplarWarpedInQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Overmind Tendrils Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryOvermindTendrilsCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_ObjectiveOvermindTendrilsComplete, true, false);
    libCamp_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryOvermindTendrilsCompleted_Init () {
    gt_VictoryOvermindTendrilsCompleted = TriggerCreate("gt_VictoryOvermindTendrilsCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((ObjectiveGetState(gv_objectiveOvermindTendrils) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectivePowerTheObelisks) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveZeratulMustSurvive) == c_objectiveStateCompleted)) {
        AchievementAward(gv_p01_USER, "TZeratul03_1");
    }

    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (UnitGetPropertyFixed(gv_zeratul, c_unitPropKills, c_unitPropCurrent) >= 50.0)) {
        AchievementAward(gv_p01_USER, "TZeratul03_2");
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1) && (TimerGetRemaining(gv_achievementHardTimer) != 0.0)) {
        AchievementAward(gv_p01_USER, "TZeratul03_3");
    }

    VictoryPanelAddAchievement("TZeratul03_1");
    VictoryPanelAddAchievement("TZeratul03_2");
    VictoryPanelAddAchievement("TZeratul03_3");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/58FF8B12"), IntToText(libNtve_gf_UnitGetPropertyKills(gv_zeratul, c_unitPropCurrent)));
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/AA8F352E"), (IntToText(gv_obelisksPowered) + StringExternal("Param/Value/4757F4D8") + StringExternal("Param/Value/BDB2696E")));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/58055980"), IntToText(gv_obelisksPowered));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/658227DE"), StringExternal("Param/Value/2A2B4FE5"));
    libCamp_gf_EndCampaignMission(gv_p01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, 0), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/7C41B1F5"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerEnable(gt_DefeatBaseDead, false);
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Zeratul Dies
//--------------------------------------------------------------------------------------------------
bool gt_DefeatZeratulDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Zeratul"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/0A50BA2F"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatZeratulDies_Init () {
    gt_DefeatZeratulDies = TriggerCreate("gt_DefeatZeratulDies_Func");
    TriggerAddEventUnitDied(gt_DefeatZeratulDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_EndCampaignMission(gv_p01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    UnitPauseAll(true);
    libCamp_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_p01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_p01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Story Mode Q
//--------------------------------------------------------------------------------------------------
bool gt_TipStoryModeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateStorymodeTips();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipStoryModeQ_Init () {
    gt_TipStoryModeQ = TriggerCreate("gt_TipStoryModeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Colossus Q
//--------------------------------------------------------------------------------------------------
bool gt_TipColossusQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Zeratul03_Colossus", libNtve_ge_TipType_NewUnit, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipColossusQ_Init () {
    gt_TipColossusQ = TriggerCreate("gt_TipColossusQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Observer
//--------------------------------------------------------------------------------------------------
bool gt_TipObserver_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_CreateTipFromConversationState("StoryTips|Zeratul03_Observer", libNtve_ge_TipType_NewUnit, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipObserver_Init () {
    gt_TipObserver = TriggerCreate("gt_TipObserver_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Warp-In Q
//--------------------------------------------------------------------------------------------------
bool gt_TipWarpInQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Zeratul03_WarpGate", libNtve_ge_TipType_NewAbility, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipWarpInQ_Init () {
    gt_TipWarpInQ = TriggerCreate("gt_TipWarpInQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Reach the Nexus Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveReachtheNexusCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/23EF9A8D"), StringExternal("Param/Value/FF2D6A5A"), c_objectiveStateActive, true);
    gv_objectiveReachNexus = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TZeratul03Objective1, ObjectiveLastCreated(), StringExternal("Param/Value/87592C22"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveReachtheNexusCreateQ_Init () {
    gt_ObjectiveReachtheNexusCreateQ = TriggerCreate("gt_ObjectiveReachtheNexusCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Reach the Nexus Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveReachtheNexusComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveReachtheNexusCreateQ, true, false);
    ObjectiveSetState(gv_objectiveReachNexus, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveReachtheNexusComplete_Init () {
    gt_ObjectiveReachtheNexusComplete = TriggerCreate("gt_ObjectiveReachtheNexusComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Reach the Nexus Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveReachtheNexusFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveReachtheNexusCreateQ, true, false);
    ObjectiveSetState(gv_objectiveReachNexus, c_objectiveStateFailed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveReachtheNexusFailed_Init () {
    gt_ObjectiveReachtheNexusFailed = TriggerCreate("gt_ObjectiveReachtheNexusFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Overmind Tendrils Create Hidden
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveOvermindTendrilsCreateHidden_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveCreate((StringExternal("Param/Value/072A571E") + IntToText(gv_overmindTendrilsVisited) + StringExternal("Param/Value/15A1F491")), StringExternal("Param/Value/A28B7D22"), c_objectiveStateHidden, true);
    gv_objectiveOvermindTendrils = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TZeratul03Objective2, ObjectiveLastCreated(), StringExternal("Param/Value/51A16B0B"));
    ObjectiveCreate(StringExternal("Param/Value/062D6BA5"), StringExternal("Param/Value/873AE416"), c_objectiveStateActive, true);
    gv_objectiveZeratulMustSurvive = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TZeratul03Objective4, ObjectiveLastCreated(), StringExternal("Param/Value/383549AC"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveOvermindTendrilsCreateHidden_Init () {
    gt_ObjectiveOvermindTendrilsCreateHidden = TriggerCreate("gt_ObjectiveOvermindTendrilsCreateHidden_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Overmind Tendrils Show Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveOvermindTendrilsShowQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveShow(gv_objectiveOvermindTendrils, PlayerGroupAll(), true);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(UnitFromId(46)), 5.0), 6.0, false);
    PingCreate(PlayerGroupSingle(gv_p01_USER), "PingObjective", UnitGetPosition(UnitFromId(46)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
    gv_beaconPingLurkers = PingLastCreated();
    PingSetTooltip(gv_beaconPingLurkers, StringExternal("Param/Value/E58A4DC7"));
    VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(UnitFromId(929)), 5.0), 6.0, false);
    PingCreate(PlayerGroupSingle(gv_p01_USER), "PingObjective", UnitGetPosition(UnitFromId(929)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
    gv_beaconPingMutalisks = PingLastCreated();
    PingSetTooltip(gv_beaconPingMutalisks, StringExternal("Param/Value/473C9ECD"));
    VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(UnitFromId(38)), 5.0), 6.0, false);
    PingCreate(PlayerGroupSingle(gv_p01_USER), "PingObjective", UnitGetPosition(UnitFromId(38)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
    gv_beaconPingBanelings = PingLastCreated();
    PingSetTooltip(gv_beaconPingBanelings, StringExternal("Param/Value/F8EAA076"));
    VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(UnitFromId(36)), 5.0), 6.0, false);
    PingCreate(PlayerGroupSingle(gv_p01_USER), "PingObjective", UnitGetPosition(UnitFromId(36)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
    gv_beaconPingZerglings = PingLastCreated();
    PingSetTooltip(gv_beaconPingZerglings, StringExternal("Param/Value/1B0CA3B8"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveOvermindTendrilsShowQ_Init () {
    gt_ObjectiveOvermindTendrilsShowQ = TriggerCreate("gt_ObjectiveOvermindTendrilsShowQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Overmind Tendrils Update Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveOvermindTendrilsUpdateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_overmindTendrilsVisited += 1;
    if ((gv_overmindTendrilsVisited == 2) && (libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (GameGetMissionTime() < 241.0)) {
        TriggerQueueEnter();
        AchievementAward(gv_p01_USER, "Anniversary_TZeratul03");
        TriggerDebugOutput(1, StringExternal("Param/Value/0CD8BFF4"), false);
        TriggerQueueExit();
    }

    if ((gv_overmindTendrilsVisited < 4)) {
        TriggerQueueEnter();
        SoundPlay(SoundLink("UI_TerranRescueUnit", 0), PlayerGroupAll(), 100.0, 0.0);
        ObjectiveSetName(gv_objectiveOvermindTendrils, (StringExternal("Param/Value/F3BFF16E") + IntToText(gv_overmindTendrilsVisited) + StringExternal("Param/Value/DF5F980D")));
        Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
        TriggerExecute(gt_ReleaseControlofZeratul, true, true);
        libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/14530411"));
        TriggerQueueExit();
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
        libNtve_gf_MakeUnitInvulnerable(gv_zeratul, true);
        ObjectiveSetName(gv_objectiveOvermindTendrils, (StringExternal("Param/Value/C4B2628D") + IntToText(gv_overmindTendrilsVisited) + StringExternal("Param/Value/890B8AA5")));
        TriggerExecute(gt_VictoryOvermindTendrilsCompleted, true, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveOvermindTendrilsUpdateQ_Init () {
    gt_ObjectiveOvermindTendrilsUpdateQ = TriggerCreate("gt_ObjectiveOvermindTendrilsUpdateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Overmind Tendrils Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveOvermindTendrilsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveOvermindTendrilsCreateHidden, true, false);
    ObjectiveSetState(gv_objectiveOvermindTendrils, c_objectiveStateCompleted);
    ObjectiveSetState(gv_objectiveZeratulMustSurvive, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveOvermindTendrilsComplete_Init () {
    gt_ObjectiveOvermindTendrilsComplete = TriggerCreate("gt_ObjectiveOvermindTendrilsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Overmind Tendrils Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveOvermindTendrilsFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveOvermindTendrilsCreateHidden, true, false);
    ObjectiveSetState(gv_objectiveOvermindTendrils, c_objectiveStateFailed);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveOvermindTendrilsFailed_Init () {
    gt_ObjectiveOvermindTendrilsFailed = TriggerCreate("gt_ObjectiveOvermindTendrilsFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Power The Obelisks Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePowerTheObelisksCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate((StringExternal("Param/Value/134A8EB5") + IntToText(gv_obelisksPowered) + StringExternal("Param/Value/69B5C892")), StringExternal("Param/Value/24C2D047"), c_objectiveStateActive, false);
    gv_objectivePowerTheObelisks = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TZeratul02Objective42, ObjectiveLastCreated(), StringExternal("Param/Value/D71EC072"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePowerTheObelisksCreateQ_Init () {
    gt_ObjectivePowerTheObelisksCreateQ = TriggerCreate("gt_ObjectivePowerTheObelisksCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Power The Obelisks Update Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePowerTheObelisksUpdateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto746D6D18_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto746D6D18_val = gv_obelisksPowered;
    if (auto746D6D18_val == 1) {
        TriggerQueueEnter();
        ObjectiveSetName(gv_objectivePowerTheObelisks, (StringExternal("Param/Value/41C52231") + IntToText(gv_obelisksPowered) + StringExternal("Param/Value/0C997FDC")));
        Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
        TriggerQueueExit();
    }
    else if (auto746D6D18_val == 2) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_ObjectivePowerTheObelisksComplete, true, false);
        Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePowerTheObelisksUpdateQ_Init () {
    gt_ObjectivePowerTheObelisksUpdateQ = TriggerCreate("gt_ObjectivePowerTheObelisksUpdateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Power The Obelisks Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePowerTheObelisksComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectivePowerTheObelisksCreateQ, true, false);
    ObjectiveSetName(gv_objectivePowerTheObelisks, (StringExternal("Param/Value/48E96967") + IntToText(gv_obelisksPowered) + StringExternal("Param/Value/A74E1FDD")));
    ObjectiveSetState(gv_objectivePowerTheObelisks, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePowerTheObelisksComplete_Init () {
    gt_ObjectivePowerTheObelisksComplete = TriggerCreate("gt_ObjectivePowerTheObelisksComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Power The Obelisks Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePowerTheObelisksFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectivePowerTheObelisksCreateQ, true, false);
    ObjectiveSetState(gv_objectivePowerTheObelisks, c_objectiveStateFailed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePowerTheObelisksFailed_Init () {
    gt_ObjectivePowerTheObelisksFailed = TriggerCreate("gt_ObjectivePowerTheObelisksFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_StartGameStage1);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    gv_inCinematic = true;
    gv_gameOver = true;
    gf_AddUpgradeForEnemies(1, "Burrow");
    UnitPauseAll(true);
    AITimePause(true);
    GameTimeOfDayPause(true);
    GameSetBackground(c_backgroundFixed, "BraxisAlphaSkyBox", 100.0);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    RegionPlayableMapSet(RegionFromId(11));
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_BriefingScene00, true, true);
    TriggerExecute(gt_BriefingScene01, true, true);
    UnitPauseAll(true);
    TriggerQueueClear(c_triggerQueueRemove);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5D5ACFF5_g;
    int auto5D5ACFF5_u;
    unit auto5D5ACFF5_var;
    unitgroup auto94B3F23E_g;
    int auto94B3F23E_u;
    unit auto94B3F23E_var;
    unitgroup auto02CA112B_g;
    int auto02CA112B_u;
    unit auto02CA112B_var;
    const int auto1C7E7A25_n = 6;
    int auto1C7E7A25_i;
    const int auto4E1178BF_n = 3;
    int auto4E1178BF_i;
    unitgroup autoA403E629_g;
    int autoA403E629_u;
    unit autoA403E629_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto5D5ACFF5_g = UnitGroup(null, c_playerAny, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto5D5ACFF5_u = UnitGroupCount(auto5D5ACFF5_g, c_unitCountAll);
    for (;; auto5D5ACFF5_u -= 1) {
        auto5D5ACFF5_var = UnitGroupUnitFromEnd(auto5D5ACFF5_g, auto5D5ACFF5_u);
        if (auto5D5ACFF5_var == null) { break; }
        libNtve_gf_PauseUnit(auto5D5ACFF5_var, false);
        libNtve_gf_ShowHideUnit(auto5D5ACFF5_var, true);
    }
    auto94B3F23E_g = UnitGroup("Beacon_Protoss", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto94B3F23E_u = UnitGroupCount(auto94B3F23E_g, c_unitCountAll);
    for (;; auto94B3F23E_u -= 1) {
        auto94B3F23E_var = UnitGroupUnitFromEnd(auto94B3F23E_g, auto94B3F23E_u);
        if (auto94B3F23E_var == null) { break; }
        UnitRemove(auto94B3F23E_var);
    }
    auto02CA112B_g = UnitGroup(null, gv_p02_ZERG_LOW_GROUND_AI, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto02CA112B_u = UnitGroupCount(auto02CA112B_g, c_unitCountAll);
    for (;; auto02CA112B_u -= 1) {
        auto02CA112B_var = UnitGroupUnitFromEnd(auto02CA112B_g, auto02CA112B_u);
        if (auto02CA112B_var == null) { break; }
        UnitRemove(auto02CA112B_var);
    }
    TriggerEnable(gt_BriefingScene00WanderingZerg, true);
    TriggerEnable(gt_BriefingScene01WanderingZerg, true);
    for (auto1C7E7A25_i = 1; auto1C7E7A25_i <= auto1C7E7A25_n; auto1C7E7A25_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Zergling", 0, gv_p05_ZERG_LOW_GROUND_NOAI, RegionRandomPoint(RegionFromId(45)), PointFromId(230));
    }
    for (auto4E1178BF_i = 1; auto4E1178BF_i <= auto4E1178BF_n; auto4E1178BF_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Baneling", 0, gv_p05_ZERG_LOW_GROUND_NOAI, RegionRandomPoint(RegionFromId(45)), PointFromId(230));
    }
    libNtve_gf_UnitCreateFacingPoint(1, "Roach", 0, gv_p05_ZERG_LOW_GROUND_NOAI, RegionRandomPoint(RegionFromId(45)), PointFromId(230));
    libNtve_gf_UnitCreateFacingPoint(8, "Zergling", 0, gv_p05_ZERG_LOW_GROUND_NOAI, PointFromId(682), RegionRandomPoint(RegionFromId(45)));
    libNtve_gf_UnitCreateFacingPoint(8, "Zergling", 0, gv_p05_ZERG_LOW_GROUND_NOAI, PointFromId(684), RegionRandomPoint(RegionFromId(45)));
    autoA403E629_g = UnitGroup(null, gv_p05_ZERG_LOW_GROUND_NOAI, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA403E629_u = UnitGroupCount(autoA403E629_g, c_unitCountAll);
    for (;; autoA403E629_u -= 1) {
        autoA403E629_var = UnitGroupUnitFromEnd(autoA403E629_g, autoA403E629_u);
        if (autoA403E629_var == null) { break; }
        UnitIssueOrder(autoA403E629_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(5))), c_orderQueueReplace);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "Ultralisk", 0, gv_p05_ZERG_LOW_GROUND_NOAI, PointFromId(678));
    gv_briefingUltra1 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "Ultralisk", 0, gv_p05_ZERG_LOW_GROUND_NOAI, PointFromId(679));
    gv_briefingUltra2 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "Ultralisk", 0, gv_p05_ZERG_LOW_GROUND_NOAI, PointFromId(680));
    gv_briefingUltra3 = UnitLastCreated();
    GameSetToDLighting("AiurFlashbackStart");
    CreepModify(RegionGetCenter(RegionFromId(20)), 25.0, true, false);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "RainEmitterMedium", c_animNameDefault, "Death", c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_CreateUnitsAtPoint2(1, "Overmind", c_unitCreateIgnorePlacement, gv_p02_ZERG_LOW_GROUND_AI, PointFromId(230));
    TriggerExecute(gt_BriefingScene00Hydralisks, true, false);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(165), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(229), SoundLengthSync(SoundLink("TZeratul03BriefingZeratul00002", -1)), -1, 10, true);
    MovieStartRecording("Briefing_Video_TZeratul03_00");
    GameSetLighting("AiurFlashback", SoundLengthSync(SoundLink("TZeratul03BriefingZeratul00002", -1)));
    // Transmission - SoundLink("TZeratul03BriefingZeratul00002", -1)
    SoundPlay(SoundLink("TZeratul03BriefingZeratul00002", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((0.7 * SoundLengthSync(SoundLink("TZeratul03BriefingZeratul00002", -1))), c_timeReal);
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.3, 2.0, 100.0, 10.0);
    Wait((0.3 * SoundLengthSync(SoundLink("TZeratul03BriefingZeratul00002", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TZeratul03BriefingZeratul00002", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    CameraShakeStop(gv_p01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00_Init () {
    gt_BriefingScene00 = TriggerCreate("gt_BriefingScene00_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA4729388_g;
    int autoA4729388_u;
    unit autoA4729388_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "RainEmitterMedium", c_animNameDefault, "Stand", c_animFlagNonLooping, c_animTimeDefault);
    autoA4729388_g = UnitGroup(null, c_playerAny, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA4729388_u = UnitGroupCount(autoA4729388_g, c_unitCountAll);
    for (;; autoA4729388_u -= 1) {
        autoA4729388_var = UnitGroupUnitFromEnd(autoA4729388_g, autoA4729388_u);
        if (autoA4729388_var == null) { break; }
        libNtve_gf_PauseUnit(autoA4729388_var, false);
        UnitBehaviorAdd(autoA4729388_var, "ColonistWander", autoA4729388_var, 1);
    }
    MovieStartRecording("Briefing_Video_TZeratul03_01");
    // Transmission - SoundLink("TZeratul03BriefingZeratul00004", -1)
    SoundPlay(SoundLink("TZeratul03BriefingZeratul00004", -1), PlayerGroupAll(), 100.0, 0.0);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(100.00, 100.00, 100.00), 100.0, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(7), 0.0, -1, 10, true);
    CinematicFade(true, 3.0, c_fadeStyleNormal, Color(100.00, 100.00, 100.00), 50.0, false);
    GameSetLighting("Aiur", 6.0);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(334), (SoundLengthSync(SoundLink("TZeratul03BriefingZeratul00004", -1)) - 2.0), -1, 10, true);
    Wait((-1.0 + SoundLengthSync(SoundLink("TZeratul03BriefingZeratul00004", -1))), c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(61), SoundLengthSync(SoundLink("TZeratul03BriefingZeratul00007", -1)), -1, 10, true);
    // Transmission - SoundLink("TZeratul03BriefingZeratul00007", -1)
    SoundPlay(SoundLink("TZeratul03BriefingZeratul00007", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TZeratul03BriefingZeratul00007", -1))), c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(677), SoundLengthSync(SoundLink("TZeratul03BriefingZeratul00008", -1)), -1, 10, true);
    // Transmission - SoundLink("TZeratul03BriefingZeratul00008", -1)
    SoundPlay(SoundLink("TZeratul03BriefingZeratul00008", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((0.7 * SoundLengthSync(SoundLink("TZeratul03BriefingZeratul00008", -1))), c_timeReal);
    TriggerExecute(gt_BriefingScene01Ultras, true, false);
    Wait((0.3 * SoundLengthSync(SoundLink("TZeratul03BriefingZeratul00008", -1))), c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1904), SoundLengthSync(SoundLink("TZeratul03BriefingZeratul00006", -1)), -1, 10, true);
    // Transmission - SoundLink("TZeratul03BriefingZeratul00006", -1)
    SoundPlay(SoundLink("TZeratul03BriefingZeratul00006", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TZeratul03BriefingZeratul00006", -1))), c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(231), 12.0, -1, 10, true);
    Wait((0.5 * SoundLengthSync(SoundLink("TZeratul03BriefingZeratul00004", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TZeratul03BriefingZeratul00007", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TZeratul03BriefingZeratul00008", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TZeratul03BriefingZeratul00006", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01_Init () {
    gt_BriefingScene01 = TriggerCreate("gt_BriefingScene01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00 Hydralisks
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00Hydralisks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoD6323165_n = 3;
    int autoD6323165_i;
    const int autoFDAAA760_n = 4;
    int autoFDAAA760_i;
    const int autoE1B7569A_n = 3;
    int autoE1B7569A_i;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeGame);
    for (autoD6323165_i = 1; autoD6323165_i <= autoD6323165_n; autoD6323165_i += 1) {
        UnitCreate(1, "HydraliskBurrowed", 0, gv_p05_ZERG_LOW_GROUND_NOAI, RegionRandomPoint(RegionFromId(15)), libNtve_gf_RandomAngle());
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
    }
    Wait(1.0, c_timeGame);
    for (autoFDAAA760_i = 1; autoFDAAA760_i <= autoFDAAA760_n; autoFDAAA760_i += 1) {
        UnitCreate(1, "HydraliskBurrowed", 0, gv_p05_ZERG_LOW_GROUND_NOAI, RegionRandomPoint(RegionFromId(14)), libNtve_gf_RandomAngle());
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
    }
    Wait(1.0, c_timeGame);
    for (autoE1B7569A_i = 1; autoE1B7569A_i <= autoE1B7569A_n; autoE1B7569A_i += 1) {
        UnitCreate(1, "HydraliskBurrowed", 0, gv_p05_ZERG_LOW_GROUND_NOAI, RegionRandomPoint(RegionFromId(13)), libNtve_gf_RandomAngle());
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00Hydralisks_Init () {
    gt_BriefingScene00Hydralisks = TriggerCreate("gt_BriefingScene00Hydralisks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00 Wandering Zerg
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00WanderingZerg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p05_ZERG_LOW_GROUND_NOAI))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Overlord"))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(12)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(12))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00WanderingZerg_Init () {
    gt_BriefingScene00WanderingZerg = TriggerCreate("gt_BriefingScene00WanderingZerg_Func");
    TriggerEnable(gt_BriefingScene00WanderingZerg, false);
    TriggerAddEventUnitBecomesIdle(gt_BriefingScene00WanderingZerg, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01 Ultras
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01Ultras_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_briefingUltra1, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(683)), c_orderQueueReplace);
    UnitIssueOrder(gv_briefingUltra1, Order(AbilityCommand("BurrowUltraliskDown", 0)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_briefingUltra2, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1905)), c_orderQueueReplace);
    UnitIssueOrder(gv_briefingUltra2, Order(AbilityCommand("BurrowUltraliskDown", 0)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_briefingUltra3, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(681)), c_orderQueueReplace);
    UnitIssueOrder(gv_briefingUltra3, Order(AbilityCommand("BurrowUltraliskDown", 0)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01Ultras_Init () {
    gt_BriefingScene01Ultras = TriggerCreate("gt_BriefingScene01Ultras_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01 Wandering Zerg
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01WanderingZerg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == gv_p05_ZERG_LOW_GROUND_NOAI) || (UnitGetOwner(EventUnit()) == gv_p02_ZERG_LOW_GROUND_AI)))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Ultralisk"))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(5)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(RandomFixed(1.0, 3.0), c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(5))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01WanderingZerg_Init () {
    gt_BriefingScene01WanderingZerg = TriggerCreate("gt_BriefingScene01WanderingZerg_Func");
    TriggerEnable(gt_BriefingScene01WanderingZerg, false);
    TriggerAddEventUnitBecomesIdle(gt_BriefingScene01WanderingZerg, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cine Q
//--------------------------------------------------------------------------------------------------
bool gt_MidCineQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidCineSetup, true, true);
    TriggerExecute(gt_MidCineCinematic, true, true);
    TriggerExecute(gt_MidCineCinematicEnd, true, true);
    TriggerExecute(gt_MidCineCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCineQ_Init () {
    gt_MidCineQ = TriggerCreate("gt_MidCineQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cine Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidCineSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0E2B94DC_g;
    int auto0E2B94DC_u;
    unit auto0E2B94DC_var;
    unitgroup auto6D876D73_g;
    int auto6D876D73_u;
    unit auto6D876D73_var;
    unitgroup auto2648660F_g;
    int auto2648660F_u;
    unit auto2648660F_var;
    unitgroup autoCBE7BA18_g;
    int autoCBE7BA18_u;
    unit autoCBE7BA18_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    RegionPlayableMapSet(RegionFromId(11));
    CameraSave(gv_p01_USER);
    libNtve_gf_StoreUnitSelection(gv_p01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    AITimePause(true);
    auto0E2B94DC_g = gv_stage1InactivesGroup;
    auto0E2B94DC_u = UnitGroupCount(auto0E2B94DC_g, c_unitCountAll);
    for (;; auto0E2B94DC_u -= 1) {
        auto0E2B94DC_var = UnitGroupUnitFromEnd(auto0E2B94DC_g, auto0E2B94DC_u);
        if (auto0E2B94DC_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto0E2B94DC_var, true);
    }
    UnitPauseAll(true);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_p05_ZERG_LOW_GROUND_NOAI, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterHidden - 32))), 0), gv_midColossusHiddenGroup);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_p02_ZERG_LOW_GROUND_AI, RegionFromId(43), UnitFilter(0, 0, 0, (1 << (c_targetFilterHidden - 32))), 0), gv_midColossusHiddenGroup);
    auto6D876D73_g = gv_midColossusHiddenGroup;
    auto6D876D73_u = UnitGroupCount(auto6D876D73_g, c_unitCountAll);
    for (;; auto6D876D73_u -= 1) {
        auto6D876D73_var = UnitGroupUnitFromEnd(auto6D876D73_g, auto6D876D73_u);
        if (auto6D876D73_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto6D876D73_var, false);
    }
    auto2648660F_g = gv_pathingBlockerGroup;
    auto2648660F_u = UnitGroupCount(auto2648660F_g, c_unitCountAll);
    for (;; auto2648660F_u -= 1) {
        auto2648660F_var = UnitGroupUnitFromEnd(auto2648660F_g, auto2648660F_u);
        if (auto2648660F_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto2648660F_var, false);
    }
    autoCBE7BA18_g = gv_protossProbeGroup;
    autoCBE7BA18_u = UnitGroupCount(autoCBE7BA18_g, c_unitCountAll);
    for (;; autoCBE7BA18_u -= 1) {
        autoCBE7BA18_var = UnitGroupUnitFromEnd(autoCBE7BA18_g, autoCBE7BA18_u);
        if (autoCBE7BA18_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoCBE7BA18_var, true);
    }
    libNtve_gf_ShowHideUnit(UnitFromId(455), true);
    libNtve_gf_ShowHideUnit(UnitFromId(154), true);
    libNtve_gf_PauseUnit(UnitFromId(455), false);
    libNtve_gf_PauseUnit(UnitFromId(154), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCineSetup_Init () {
    gt_MidCineSetup = TriggerCreate("gt_MidCineSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cine Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCineCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_overlord1;
    unit lv_overlord2;
    unit lv_overlord3;
    unit lv_overlord4;
    unit lv_overlord5;

    // Automatic Variable Declarations
    unitgroup autoEC5FE42D_g;
    int autoEC5FE42D_u;
    unit autoEC5FE42D_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetBackground(c_backgroundFixed, "AiurSkybox", 100.0);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1533), 0.0, -1, 10, true);
    CreepModify(UnitGetPosition(UnitFromId(912)), 8.0, true, false);
    CreepModify(UnitGetPosition(UnitFromId(929)), 25.0, true, false);
    CreepSetSpeed(c_creepSpeedDecay, 0.0);
    CinematicFade(true, 3.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(0.1, c_timeReal);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_midColossusCinematicCompleted = false;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TZeratul03MusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1534), 12.0, -1, 10, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    // Transmission - SoundLink("TZeratul03Zeratul00041", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul03Zeratul00041", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    autoEC5FE42D_g = UnitGroup(null, gv_p10_ABANDONED_STRUCTURES, RegionFromId(21), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEC5FE42D_u = UnitGroupCount(autoEC5FE42D_g, c_unitCountAll);
    for (;; autoEC5FE42D_u -= 1) {
        autoEC5FE42D_var = UnitGroupUnitFromEnd(autoEC5FE42D_g, autoEC5FE42D_u);
        if (autoEC5FE42D_var == null) { break; }
        libNtve_gf_RescueUnit(autoEC5FE42D_var, gv_p01_USER, true);
        UnitSetState(autoEC5FE42D_var, c_unitStateTargetable, true);
    }
    UnitIssueOrder(UnitFromId(455), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(588)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(455), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(532)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(154), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(570)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(154), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(531)), c_orderQueueAddToEnd);
    Wait(1.0, c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(257), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(242), 7.0, -1, 10, true);
    ActorCreate(ActorScopeFromUnit(UnitFromId(154)), "WaterSplash", null, null, null);
    ActorCreate(ActorScopeFromUnit(UnitFromId(455)), "WaterSplash", null, null, null);
    SoundPlay(SoundLink("Colossus_Ready", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(5.0, c_timeGame);
    // Transmission - SoundLink("TZeratul03Zeratul00007", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul03Zeratul00007", -1), c_transmissionDurationAdd, 0.0, false);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(528), 7.0, -1, 10, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    Wait(6.0, c_timeGame);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(529), 8.0, -1, 10, true);
    Wait(8.0, c_timeGame);
    ActorCreate(ActorScopeFromUnit(UnitFromId(154)), "WaterDrops", null, null, null);
    ActorCreate(ActorScopeFromUnit(UnitFromId(455)), "WaterDrops", null, null, null);
    TriggerExecute(gt_MidCineZergActions, true, false);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(191), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(424), 12.0, -1, 10, true);
    // Transmission - SoundLink("TZeratul03Zeratul00006", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul03Zeratul00006", -1), c_transmissionDurationAdd, 1.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(2.0, c_timeGame);
    gv_midColossusCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCineCinematic_Init () {
    gt_MidCineCinematic = TriggerCreate("gt_MidCineCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cine Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCineCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_midColossusCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(lv_fadeDuration, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCineCinematicEnd_Init () {
    gt_MidCineCinematicEnd = TriggerCreate("gt_MidCineCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cine Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCineCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto70095B8D_g;
    int auto70095B8D_u;
    unit auto70095B8D_var;
    unitgroup autoFD47992A_g;
    int autoFD47992A_u;
    unit autoFD47992A_var;
    unitgroup auto5D46494E_g;
    int auto5D46494E_u;
    unit auto5D46494E_var;
    unitgroup auto98891B06_g;
    int auto98891B06_u;
    unit auto98891B06_var;
    unitgroup auto22CEE286_g;
    int auto22CEE286_u;
    unit auto22CEE286_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto70095B8D_g = gv_midColossusZergActiveGroup;
    auto70095B8D_u = UnitGroupCount(auto70095B8D_g, c_unitCountAll);
    for (;; auto70095B8D_u -= 1) {
        auto70095B8D_var = UnitGroupUnitFromEnd(auto70095B8D_g, auto70095B8D_u);
        if (auto70095B8D_var == null) { break; }
        UnitRemove(auto70095B8D_var);
    }
    autoFD47992A_g = gv_midColossusHiddenGroup;
    autoFD47992A_u = UnitGroupCount(autoFD47992A_g, c_unitCountAll);
    for (;; autoFD47992A_u -= 1) {
        autoFD47992A_var = UnitGroupUnitFromEnd(autoFD47992A_g, autoFD47992A_u);
        if (autoFD47992A_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoFD47992A_var, true);
    }
    auto5D46494E_g = gv_pathingBlockerGroup;
    auto5D46494E_u = UnitGroupCount(auto5D46494E_g, c_unitCountAll);
    for (;; auto5D46494E_u -= 1) {
        auto5D46494E_var = UnitGroupUnitFromEnd(auto5D46494E_g, auto5D46494E_u);
        if (auto5D46494E_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto5D46494E_var, true);
    }
    auto98891B06_g = UnitGroup(null, gv_p10_ABANDONED_STRUCTURES, RegionFromId(21), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto98891B06_u = UnitGroupCount(auto98891B06_g, c_unitCountAll);
    for (;; auto98891B06_u -= 1) {
        auto98891B06_var = UnitGroupUnitFromEnd(auto98891B06_g, auto98891B06_u);
        if (auto98891B06_var == null) { break; }
        libNtve_gf_RescueUnit(auto98891B06_var, gv_p01_USER, true);
        UnitSetState(auto98891B06_var, c_unitStateTargetable, true);
    }
    auto22CEE286_g = UnitGroup("Probe", gv_p10_ABANDONED_STRUCTURES, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto22CEE286_u = UnitGroupCount(auto22CEE286_g, c_unitCountAll);
    for (;; auto22CEE286_u -= 1) {
        auto22CEE286_var = UnitGroupUnitFromEnd(auto22CEE286_g, auto22CEE286_u);
        if (auto22CEE286_var == null) { break; }
        libNtve_gf_RescueUnit(auto22CEE286_var, gv_p01_USER, true);
        UnitIssueOrder(auto22CEE286_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(71)), c_orderQueueReplace);
    }
    UnitSetOwner(UnitFromId(90), gv_p01_USER, true);
    UnitSetPosition(UnitFromId(154), PointFromId(532), false);
    UnitSetPosition(UnitFromId(455), PointFromId(531), false);
    UnitIssueOrder(UnitFromId(154), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(455), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitPauseAll(false);
    libNtve_gf_ShowHideUnit(gv_zeratul, true);
    AITimePause(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, true);
    libNtve_gf_RestoreUnitSelection(gv_p01_USER);
    CameraRestore(gv_p01_USER, 0.0, -1, 10);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 600);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropVespene, c_playerPropOperSetTo, 250);
    libNtve_gf_MakeUnitUncommandable(gv_zeratul, false);
    libNtve_gf_MakeUnitInvulnerable(gv_zeratul, false);
    UnitSetPropertyFixed(gv_zeratul, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_zeratul, c_unitPropEnergyPercent, 100.0);
    UnitAbilityReset(gv_zeratul, AbilityCommand("ZeratulStun", 0), c_spendLocationAll);
    UnitAbilityReset(gv_zeratul, AbilityCommand("ZeratulBlink", 0), c_spendLocationAll);
    UnitBehaviorRemove(gv_zeratul, "Read", 1);
    UnitBehaviorRemove(gv_zeratul, "SuppressCloak", 1);
    CreepSetSpeed(c_creepSpeedDecay, 100.0);
    if ((gv_midColossusCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(lv_fadeDuration, c_timeReal);
    gv_inCinematic = false;
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, true);
    TriggerExecute(gt_StartGameStage2, true, false);
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/28012D70"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCineCleanup_Init () {
    gt_MidCineCleanup = TriggerCreate("gt_MidCineCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cine - Zerg Actions
//--------------------------------------------------------------------------------------------------
bool gt_MidCineZergActions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto123118F4_n = 3;
    int auto123118F4_i;
    const int autoC7471122_n = 2;
    int autoC7471122_i;
    const int autoB9870C02_n = 3;
    int autoB9870C02_i;
    const int autoDF0EBEA8_n = 3;
    int autoDF0EBEA8_i;
    const int auto64BB49EC_n = 2;
    int auto64BB49EC_i;
    const int autoEE2256E7_n = 2;
    int autoEE2256E7_i;

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto123118F4_i = 1; auto123118F4_i <= auto123118F4_n; auto123118F4_i += 1) {
        UnitCreate(1, "Zergling", 0, gv_p05_ZERG_LOW_GROUND_NOAI, RegionRandomPoint(RegionFromId(25)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_midColossusZergActiveGroup, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CreepMove3", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(44))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingDown", 0)), c_orderQueueAddToEnd);
        Wait(0.1, c_timeGame);
    }
    Wait(0.25, c_timeGame);
    for (autoC7471122_i = 1; autoC7471122_i <= autoC7471122_n; autoC7471122_i += 1) {
        UnitCreate(1, "Hydralisk", 0, gv_p05_ZERG_LOW_GROUND_NOAI, RegionRandomPoint(RegionFromId(33)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_midColossusZergActiveGroup, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CreepMove3", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(44))), c_orderQueueReplace);
        Wait(0.1, c_timeGame);
    }
    Wait(0.25, c_timeGame);
    for (autoB9870C02_i = 1; autoB9870C02_i <= autoB9870C02_n; autoB9870C02_i += 1) {
        UnitCreate(1, "Zergling", 0, gv_p05_ZERG_LOW_GROUND_NOAI, RegionRandomPoint(RegionFromId(37)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_midColossusZergActiveGroup, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CreepMove3", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(44))), c_orderQueueReplace);
        Wait(0.1, c_timeGame);
    }
    Wait(0.25, c_timeGame);
    for (autoDF0EBEA8_i = 1; autoDF0EBEA8_i <= autoDF0EBEA8_n; autoDF0EBEA8_i += 1) {
        UnitCreate(1, "Hydralisk", 0, gv_p05_ZERG_LOW_GROUND_NOAI, RegionRandomPoint(RegionFromId(42)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_midColossusZergActiveGroup, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CreepMove3", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(44))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingDown", 0)), c_orderQueueAddToEnd);
        Wait(0.1, c_timeGame);
    }
    Wait(0.25, c_timeGame);
    for (auto64BB49EC_i = 1; auto64BB49EC_i <= auto64BB49EC_n; auto64BB49EC_i += 1) {
        UnitCreate(1, "Hydralisk", 0, gv_p05_ZERG_LOW_GROUND_NOAI, RegionRandomPoint(RegionFromId(33)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_midColossusZergActiveGroup, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CreepMove3", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(44))), c_orderQueueReplace);
        Wait(0.1, c_timeGame);
    }
    for (autoEE2256E7_i = 1; autoEE2256E7_i <= autoEE2256E7_n; autoEE2256E7_i += 1) {
        UnitCreate(1, "Zergling", 0, gv_p05_ZERG_LOW_GROUND_NOAI, RegionRandomPoint(RegionFromId(25)), libNtve_gf_RandomAngle());
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_midColossusZergActiveGroup);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(44))), c_orderQueueReplace);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("BurrowZerglingDown", 0)), c_orderQueueAddToEnd);
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCineZergActions_Init () {
    gt_MidCineZergActions = TriggerCreate("gt_MidCineZergActions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_VictoryCineFinalTendrilSetup, true, true);
    TriggerExecute(gt_VictoryCineFinalTendrilScene1, true, true);
    TriggerExecute(gt_VictoryCineFinalTendrilCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCineFinalTendrilCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cine - Final Tendril Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCineFinalTendrilSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoFF34189B_g;
    int autoFF34189B_u;
    unit autoFF34189B_var;
    unitgroup auto25889B46_g;
    int auto25889B46_u;
    unit auto25889B46_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    libNtve_gf_StoreUnitSelection(gv_p01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "RainEmitterMedium", c_animNameDefault, "Death", c_animFlagNonLooping, c_animTimeDefault);
    TimerPause(gv_zergFrenzyTimer, true);
    CreepSetSpeed(c_creepSpeedDecay, 0.0);
    UnitPauseAll(true);
    AITimePause(true);
    gv_victoryHiddenUnitGroup = UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    autoFF34189B_g = gv_victoryHiddenUnitGroup;
    autoFF34189B_u = UnitGroupCount(autoFF34189B_g, c_unitCountAll);
    for (;; autoFF34189B_u -= 1) {
        autoFF34189B_var = UnitGroupUnitFromEnd(autoFF34189B_g, autoFF34189B_u);
        if (autoFF34189B_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoFF34189B_var, false);
    }
    auto25889B46_g = UnitGroup("Overlord", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto25889B46_u = UnitGroupCount(auto25889B46_g, c_unitCountAll);
    for (;; auto25889B46_u -= 1) {
        auto25889B46_var = UnitGroupUnitFromEnd(auto25889B46_g, auto25889B46_u);
        if (auto25889B46_var == null) { break; }
        libNtve_gf_PauseUnit(auto25889B46_var, false);
    }
    libNtve_gf_ShowHideUnit(gv_zeratul, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCineFinalTendrilSetup_Init () {
    gt_VictoryCineFinalTendrilSetup = TriggerCreate("gt_VictoryCineFinalTendrilSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cine - Final Tendril - Scene 1
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCineFinalTendrilScene1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_larva;
    unitgroup lv_zerglingGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_zerglingGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetBackground(c_backgroundFixed, "AiurSkybox", 100.0);
    GameSetToDLighting("Aiur");
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(167), 0.0, -1, 10, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TZeratul03MusicOutro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    UnitBehaviorRemove(gv_zeratul, "Read", 1);
    UnitBehaviorAdd(gv_zeratul, "SuppressCloak", gv_zeratul, 1);
    UnitSetPosition(gv_zeratul, PointFromId(400), false);
    libNtve_gf_MakeUnitFacePoint(gv_zeratul, PointFromId(164), 0.0);
    libNtve_gf_PauseUnit(gv_zeratul, true);
    libNtve_gf_UnitCreateFacingPoint(1, "Tassadar", 0, gv_p10_ABANDONED_STRUCTURES, PointFromId(164), PointFromId(400));
    gv_victoryTassadarS1 = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_victoryTassadarS1), c_animNameDefault, "Fly", c_animFlagPlayForever, c_animTimeDefault);
    UnitSetPropertyFixed(gv_victoryTassadarS1, c_unitPropHeight, 1.0);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, false);
    Wait(1.0, c_timeReal);
    UnitSetHeight(gv_victoryTassadarS1, 4.0, 8.0);
    TriggerSkippableBegin(PlayerGroupAll(), 0, gt_VictoryCineSkipped, true, false);
    gv_victoryCinematicCompleted = false;
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(194), 38.0, -1, 10, true);
    // Transmission - SoundLink("TZeratul03Tassadar00073", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul03Tassadar00073", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TZeratul03Zeratul00052", -1)
    libCamp_gf_SendTransmissionCampaign(gv_zeratul, SoundLink("TZeratul03Zeratul00052", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TZeratul03Tassadar00053", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul03Tassadar00053", 0), c_transmissionDurationAdd, 0.0, true);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(100.00, 100.00, 100.00), 0.0, true);
    TriggerExecute(gt_VictoryCineFinalTendrilScene2, true, true);
    TriggerExecute(gt_VictoryCineFinalTendrilScene3, true, true);
    TriggerExecute(gt_VictoryCineFinalTendrilScene4, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCineFinalTendrilScene1_Init () {
    gt_VictoryCineFinalTendrilScene1 = TriggerCreate("gt_VictoryCineFinalTendrilScene1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cine - Final Tendril - Scene 2
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCineFinalTendrilScene2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_overmind;

    // Automatic Variable Declarations
    const int autoBBE2867D_n = 3;
    int autoBBE2867D_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_victoryCinematicCompleted == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetBackground(c_backgroundFixed, "AiurSkybox", 100.0);
    CreepModify(PointFromId(230), 25.0, true, false);
    CreepModify(PointFromId(230), 5.0, false, false);
    GameSetToDLighting("AiurFlashback");
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Char", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackSetContinuous(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(571), 0.0, -1, 10, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overmind", c_unitCreateIgnorePlacement, gv_p05_ZERG_LOW_GROUND_NOAI, PointFromId(230));
    lv_overmind = UnitLastCreated();
    UnitSetFacing(lv_overmind, 270.0, 0.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker2x2", c_unitCreateIgnorePlacement, gv_p05_ZERG_LOW_GROUND_NOAI, PointFromId(1057));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker2x2", c_unitCreateIgnorePlacement, gv_p05_ZERG_LOW_GROUND_NOAI, PointFromId(1062));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker2x2", c_unitCreateIgnorePlacement, gv_p05_ZERG_LOW_GROUND_NOAI, PointFromId(1063));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker2x2", c_unitCreateIgnorePlacement, gv_p05_ZERG_LOW_GROUND_NOAI, PointFromId(1064));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Spire", 0, gv_p05_ZERG_LOW_GROUND_NOAI, PointFromId(675));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpawningPool", 0, gv_p05_ZERG_LOW_GROUND_NOAI, PointFromId(321));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SporeCrawler", 0, gv_p05_ZERG_LOW_GROUND_NOAI, PointFromId(569));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SporeCrawler", 0, gv_p05_ZERG_LOW_GROUND_NOAI, PointFromId(568));
    for (autoBBE2867D_i = 1; autoBBE2867D_i <= autoBBE2867D_n; autoBBE2867D_i += 1) {
        UnitCreate(1, "Larva", 0, gv_p05_ZERG_LOW_GROUND_NOAI, RegionRandomPoint(RegionFromId(10)), libNtve_gf_RandomAngle());
    }
    gv_victoryLarvaS2 = UnitLastCreated();
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, false);
    Wait(1.0, c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(572), 26.0, -1, 10, true);
    // Transmission - SoundLink("TZeratul03Zeratul00054", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul03Zeratul00054", 0), c_transmissionDurationAdd, 0.0, true);
    UnitIssueOrder(gv_victoryLarvaS2, Order(AbilityCommand("LarvaTrain", 1)), c_orderQueueReplace);
    // Transmission - SoundLink("TZeratul03Tassadar00055", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul03Tassadar00055", 0), c_transmissionDurationAdd, 0.0, true);
    TriggerExecute(gt_VictoryCineScene2Stuff, true, false);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(22), 16.0, -1, 10, true);
    // Transmission - SoundLink("TZeratul03Tassadar00075", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul03Tassadar00075", 0), c_transmissionDurationAdd, 0.0, true);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCineFinalTendrilScene2_Init () {
    gt_VictoryCineFinalTendrilScene2 = TriggerCreate("gt_VictoryCineFinalTendrilScene2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cine - Final Tendril - Scene 3
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCineFinalTendrilScene3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_egg;
    unit lv_kerrigan;

    // Automatic Variable Declarations
    unitgroup auto1EA24EA5_g;
    int auto1EA24EA5_u;
    unit auto1EA24EA5_var;
    const int auto0ACFD526_n = 13;
    int auto0ACFD526_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_victoryCinematicCompleted == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetBackground(c_backgroundFixed, "AiurSkybox", 100.0);
    CreepModify(RegionGetCenter(RegionFromId(20)), 25.0, true, false);
    GameSetToDLighting("AiurFlashback");
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(563), 0.0, -1, 10, true);
    auto1EA24EA5_g = UnitGroup(null, gv_p05_ZERG_LOW_GROUND_NOAI, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1EA24EA5_u = UnitGroupCount(auto1EA24EA5_g, c_unitCountAll);
    for (;; auto1EA24EA5_u -= 1) {
        auto1EA24EA5_var = UnitGroupUnitFromEnd(auto1EA24EA5_g, auto1EA24EA5_u);
        if (auto1EA24EA5_var == null) { break; }
        UnitRemove(auto1EA24EA5_var);
    }
    UnitCreate(1, "KerriganEgg", c_unitCreateIgnorePlacement, gv_p05_ZERG_LOW_GROUND_NOAI, PointFromId(230), 270.0);
    lv_egg = UnitLastCreated();
    UnitCreate(1, "Kerrigan", c_unitCreateIgnorePlacement, gv_p05_ZERG_LOW_GROUND_NOAI, PointFromId(230), 270.0);
    lv_kerrigan = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_kerrigan), c_animNameDefault, "Stand Morph", c_animFlagPlayForever, c_animTimeDefault);
    UnitCreate(1, "InfestationSpire", 0, gv_p05_ZERG_LOW_GROUND_NOAI, PointFromId(560), 99.0);
    libNtve_gf_UnitSetVariation(UnitLastCreated(), "InfestationSpire", 4, "");
    UnitCreate(1, "InfestationSpire", 0, gv_p05_ZERG_LOW_GROUND_NOAI, PointFromId(561), 298.0);
    libNtve_gf_UnitSetVariation(UnitLastCreated(), "InfestationSpire", 2, "");
    UnitCreate(1, "InfestationSpire", 0, gv_p05_ZERG_LOW_GROUND_NOAI, PointFromId(562), 201.0);
    libNtve_gf_UnitSetVariation(UnitLastCreated(), "InfestationSpire", 1, "");
    for (auto0ACFD526_i = 1; auto0ACFD526_i <= auto0ACFD526_n; auto0ACFD526_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Egg", 0, gv_p05_ZERG_LOW_GROUND_NOAI, RegionRandomPoint(RegionFromId(23)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Egg", 0, gv_p05_ZERG_LOW_GROUND_NOAI, RegionRandomPoint(RegionFromId(22)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Egg", 0, gv_p05_ZERG_LOW_GROUND_NOAI, RegionRandomPoint(RegionFromId(16)));
    }
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(564), 25.0, -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, false);
    Wait(1.0, c_timeReal);
    // Transmission - SoundLink("TZeratul03Zeratul00056", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul03Zeratul00056", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TZeratul03Tassadar00057", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul03Tassadar00057", 0), c_transmissionDurationAdd, 0.0, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(573), 10.0, -1, 10, true);
    UnitKill(lv_egg);
    UnitSetFacing(lv_kerrigan, 270.0, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_kerrigan), c_animNameDefault, "Stand Morph End", c_animFlagNonLooping, c_animTimeDefault);
    // Transmission - SoundLink("TZeratul03Tassadar00074", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul03Tassadar00074", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TZeratul03Zeratul00058", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul03Zeratul00058", 0), c_transmissionDurationAdd, 0.0, true);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(1.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCineFinalTendrilScene3_Init () {
    gt_VictoryCineFinalTendrilScene3 = TriggerCreate("gt_VictoryCineFinalTendrilScene3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cine - Final Tendril - Scene 4
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCineFinalTendrilScene4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_tendrils;

    // Automatic Variable Declarations
    unitgroup autoF7DA78FD_g;
    int autoF7DA78FD_u;
    unit autoF7DA78FD_var;
    unitgroup autoF2ACEBE4_g;
    int autoF2ACEBE4_u;
    unit autoF2ACEBE4_var;
    const int auto376747C6_n = 9;
    int auto376747C6_i;
    const int auto0AA8ED71_n = 12;
    int auto0AA8ED71_i;
    const int auto23E3B5C0_n = 10;
    int auto23E3B5C0_i;
    const int auto2D0C7FA5_n = 7;
    int auto2D0C7FA5_i;
    unitgroup autoEF6484D9_g;
    int autoEF6484D9_u;
    unit autoEF6484D9_var;
    unitgroup autoACFD15F6_g;
    int autoACFD15F6_u;
    unit autoACFD15F6_var;

    // Variable Initialization
    lv_tendrils = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_victoryCinematicCompleted == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    EnvironmentShow(c_environmentDoodads, false);
    EnvironmentShow(c_environmentTerrain, false);
    EnvironmentShow(c_environmentWater, false);
    GameSetBackground(c_backgroundFixed, "AiurSkybox", 100.0);
    GameSetBackground(c_backgroundTerrain, "BraxisAlphaSkyParallax", 100.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_BraxisAlpha", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackSetContinuous(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "RainEmitterMedium", c_animNameDefault, "Death", c_animFlagNonLooping, c_animTimeDefault);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(624), 0.0, -1, 10, true);
    gv_victoryHiddenUnitGroup = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    autoF7DA78FD_g = gv_victoryHiddenUnitGroup;
    autoF7DA78FD_u = UnitGroupCount(autoF7DA78FD_g, c_unitCountAll);
    for (;; autoF7DA78FD_u -= 1) {
        autoF7DA78FD_var = UnitGroupUnitFromEnd(autoF7DA78FD_g, autoF7DA78FD_u);
        if (autoF7DA78FD_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoF7DA78FD_var, false);
    }
    autoF2ACEBE4_g = UnitGroup("OvermindRemains", gv_p08_OVERMIND_REMAINS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF2ACEBE4_u = UnitGroupCount(autoF2ACEBE4_g, c_unitCountAll);
    for (;; autoF2ACEBE4_u -= 1) {
        autoF2ACEBE4_var = UnitGroupUnitFromEnd(autoF2ACEBE4_g, autoF2ACEBE4_u);
        if (autoF2ACEBE4_var == null) { break; }
        UnitGroupAdd(lv_tendrils, autoF2ACEBE4_var);
        libNtve_gf_ShowHideUnit(autoF2ACEBE4_var, false);
    }
    for (auto376747C6_i = 1; auto376747C6_i <= auto376747C6_n; auto376747C6_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Overlord", 0, gv_p05_ZERG_LOW_GROUND_NOAI, RegionRandomPoint(RegionFromId(34)), PointFromId(627));
        UnitGroupAdd(gv_victoryZergGroupS4, UnitLastCreated());
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, RandomFixed(3.0, 15.0));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(567)), c_orderQueueReplace);
    }
    for (auto0AA8ED71_i = 1; auto0AA8ED71_i <= auto0AA8ED71_n; auto0AA8ED71_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, gv_p05_ZERG_LOW_GROUND_NOAI, RegionRandomPoint(RegionFromId(34)), PointFromId(627));
        UnitGroupAdd(gv_victoryZergGroupS4, UnitLastCreated());
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, RandomFixed(3.0, 12.0));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(567)), c_orderQueueReplace);
    }
    for (auto23E3B5C0_i = 1; auto23E3B5C0_i <= auto23E3B5C0_n; auto23E3B5C0_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Scourge", 0, gv_p05_ZERG_LOW_GROUND_NOAI, RegionRandomPoint(RegionFromId(34)), PointFromId(627));
        UnitGroupAdd(gv_victoryZergGroupS4, UnitLastCreated());
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, RandomFixed(3.0, 15.0));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(567)), c_orderQueueReplace);
    }
    for (auto2D0C7FA5_i = 1; auto2D0C7FA5_i <= auto2D0C7FA5_n; auto2D0C7FA5_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Overseer", 0, gv_p05_ZERG_LOW_GROUND_NOAI, RegionRandomPoint(RegionFromId(34)), PointFromId(627));
        UnitGroupAdd(gv_victoryZergGroupS4, UnitLastCreated());
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, RandomFixed(3.0, 12.0));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(567)), c_orderQueueReplace);
    }
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, false);
    Wait(1.0, c_timeReal);
    GameSetLighting("AiurSpaceCinematic", 6.0);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(625), 18.0, -1, 10, true);
    TriggerExecute(gt_VictoryCineScene4Stuff, true, false);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft), PlayerGroupAll(), true, false);
    // Transmission - SoundLink("TZeratul03Tassadar00059", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul03Tassadar00059", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TZeratul03Zeratul00060", -1)
    libCamp_gf_SendTransmissionCampaign(gv_zeratul, SoundLink("TZeratul03Zeratul00060", 0), c_transmissionDurationAdd, 0.0, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(626), 18.0, -1, 10, true);
    // Transmission - SoundLink("TZeratul03Tassadar00061", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul03Tassadar00061", 0), c_transmissionDurationAdd, 0.0, true);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    TriggerStop(gt_VictoryCineScene4Stuff);
    autoEF6484D9_g = gv_victoryZergGroupS4;
    autoEF6484D9_u = UnitGroupCount(autoEF6484D9_g, c_unitCountAll);
    for (;; autoEF6484D9_u -= 1) {
        autoEF6484D9_var = UnitGroupUnitFromEnd(autoEF6484D9_g, autoEF6484D9_u);
        if (autoEF6484D9_var == null) { break; }
        UnitRemove(autoEF6484D9_var);
    }
    autoACFD15F6_g = lv_tendrils;
    autoACFD15F6_u = UnitGroupCount(autoACFD15F6_g, c_unitCountAll);
    for (;; autoACFD15F6_u -= 1) {
        autoACFD15F6_var = UnitGroupUnitFromEnd(autoACFD15F6_g, autoACFD15F6_u);
        if (autoACFD15F6_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoACFD15F6_var, true);
    }
    libNtve_gf_ShowHideUnit(gv_zeratul, true);
    libNtve_gf_ShowHideUnit(gv_victoryTassadarS1, true);
    UnitSetHeight(gv_victoryTassadarS1, 0.0, 25.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Aiur", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundtrackSetContinuous(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    EnvironmentShow(c_environmentAll, true);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "RainEmitterMedium", c_animNameDefault, "Stand", 0, c_animTimeDefault);
    GameSetBackground(c_backgroundTerrain, "AvernusSkybox", 100.0);
    GameSetToDLighting("Aiur");
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(112), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(193), 12.0, -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    // Transmission - SoundLink("TZeratul03Zeratul00062", -1)
    libCamp_gf_SendTransmissionCampaign(gv_zeratul, SoundLink("TZeratul03Zeratul00062", 0), c_transmissionDurationAdd, 0.0, true);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft), PlayerGroupAll(), false, false);
    gv_victoryCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCineFinalTendrilScene4_Init () {
    gt_VictoryCineFinalTendrilScene4 = TriggerCreate("gt_VictoryCineFinalTendrilScene4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cine - Final Tendril Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCineFinalTendrilCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victoryCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(lv_fadeDuration, c_timeReal);
    UnitPauseAll(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCineFinalTendrilCinematicEnd_Init () {
    gt_VictoryCineFinalTendrilCinematicEnd = TriggerCreate("gt_VictoryCineFinalTendrilCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cine - Final Tendril Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCineFinalTendrilCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6017C63A_g;
    int auto6017C63A_u;
    unit auto6017C63A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto6017C63A_g = UnitGroup(null, gv_p05_ZERG_LOW_GROUND_NOAI, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6017C63A_u = UnitGroupCount(auto6017C63A_g, c_unitCountAll);
    for (;; auto6017C63A_u -= 1) {
        auto6017C63A_var = UnitGroupUnitFromEnd(auto6017C63A_g, auto6017C63A_u);
        if (auto6017C63A_var == null) { break; }
        UnitRemove(auto6017C63A_var);
    }
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCineFinalTendrilCleanup_Init () {
    gt_VictoryCineFinalTendrilCleanup = TriggerCreate("gt_VictoryCineFinalTendrilCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cine - Scene 2 Stuff
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCineScene2Stuff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto64A68567_n = 16;
    int auto64A68567_i;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(6.0, c_timeGame);
    for (auto64A68567_i = 1; auto64A68567_i <= auto64A68567_n; auto64A68567_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p05_ZERG_LOW_GROUND_NOAI, RegionRandomPoint(RegionFromId(19)));
        UnitGroupAdd(gv_victoryZergGroupS2, UnitLastCreated());
    }
    UnitGroupIssueOrder(gv_victoryZergGroupS2, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(428)), c_orderQueueReplace);
    UnitSetProgressComplete(gv_victoryLarvaS2, 1, 99);
    Wait(6.0, c_timeGame);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("Zergling", gv_p05_ZERG_LOW_GROUND_NOAI, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_victoryZergGroupS2);
    UnitGroupIssueOrder(gv_victoryZergGroupS2, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(132)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCineScene2Stuff_Init () {
    gt_VictoryCineScene2Stuff = TriggerCreate("gt_VictoryCineScene2Stuff_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cine - Scene 4 Stuff
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCineScene4Stuff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoB2DB2BC2_n = 9;
    int autoB2DB2BC2_i;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(4.0, c_timeGame);
    for (autoB2DB2BC2_i = 1; autoB2DB2BC2_i <= autoB2DB2BC2_n; autoB2DB2BC2_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, gv_p05_ZERG_LOW_GROUND_NOAI, RegionRandomPoint(RegionFromId(30)), PointFromId(627));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, RandomFixed(3.0, 12.0));
        UnitGroupAdd(gv_victoryZergGroupS4, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(567)), c_orderQueueReplace);
        libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, gv_p05_ZERG_LOW_GROUND_NOAI, RegionRandomPoint(RegionFromId(30)), PointFromId(627));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, RandomFixed(3.0, 12.0));
        UnitGroupAdd(gv_victoryZergGroupS4, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(567)), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "Scourge", 0, gv_p05_ZERG_LOW_GROUND_NOAI, RegionRandomPoint(RegionFromId(30)), PointFromId(627));
        UnitGroupAdd(gv_victoryZergGroupS4, UnitLastCreated());
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, RandomFixed(3.0, 15.0));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(567)), c_orderQueueReplace);
        libNtve_gf_UnitCreateFacingPoint(1, "Scourge", 0, gv_p05_ZERG_LOW_GROUND_NOAI, RegionRandomPoint(RegionFromId(30)), PointFromId(627));
        UnitGroupAdd(gv_victoryZergGroupS4, UnitLastCreated());
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, RandomFixed(3.0, 15.0));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(567)), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "Overlord", 0, gv_p05_ZERG_LOW_GROUND_NOAI, RegionRandomPoint(RegionFromId(30)), PointFromId(627));
        UnitGroupAdd(gv_victoryZergGroupS4, UnitLastCreated());
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, RandomFixed(3.0, 15.0));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(567)), c_orderQueueReplace);
        libNtve_gf_UnitCreateFacingPoint(1, "Overlord", 0, gv_p05_ZERG_LOW_GROUND_NOAI, RegionRandomPoint(RegionFromId(30)), PointFromId(627));
        UnitGroupAdd(gv_victoryZergGroupS4, UnitLastCreated());
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, RandomFixed(3.0, 15.0));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(567)), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCineScene4Stuff_Init () {
    gt_VictoryCineScene4Stuff = TriggerCreate("gt_VictoryCineScene4Stuff_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cine - Skipped
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCineSkipped_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_victoryCinematicCompleted = true;
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(gt_VictoryCineFinalTendrilScene2);
    TriggerStop(gt_VictoryCineFinalTendrilScene3);
    TriggerStop(gt_VictoryCineFinalTendrilScene4);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCineSkipped_Init () {
    gt_VictoryCineSkipped = TriggerCreate("gt_VictoryCineSkipped_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04Music_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_IntroSequence_Init();
    gt_StartGameStage1_Init();
    gt_StartGameStage2_Init();
    gt_Stage2Init_Init();
    gt_RainCycling_Init();
    gt_ChangeOwnerofZeratul_Init();
    gt_ZeratulFindsObserver_Init();
    gt_ZeratulReachesNexus_Init();
    gt_AfterZerglingAttack_Init();
    gt_AfterZerglingAttackFailsafe_Init();
    gt_WarpGateNorthFound_Init();
    gt_WarpGateSouthFound_Init();
    gt_WarpGateNorthPowered_Init();
    gt_WarpGateSouthPowered_Init();
    gt_ObeliskNorthPowered_Init();
    gt_ObeliskSouthPowered_Init();
    gt_RoboFacNorthPowered_Init();
    gt_RoboFacSouthPowered_Init();
    gt_RoboBayPowered_Init();
    gt_WarpInNorthUnits_Init();
    gt_WarpInSouthUnits_Init();
    gt_WarpInUnitBehavior_Init();
    gt_OverlordWandering_Init();
    gt_InfestedBunkersDestroyed_Init();
    gt_ResourcePickups_Init();
    gt_StartAI_Init();
    gt_ZergFrenzyTimerInitialization_Init();
    gt_ZergAttackWaves_Init();
    gt_ZergUpgradesH_Init();
    gt_ZergUpgradesI_Init();
    gt_ZergP03Wave1Z_Init();
    gt_ZergP04Wave1ZH_Init();
    gt_ZergP03Wave2ZR_Init();
    gt_ZergP04Wave2ZR_Init();
    gt_ZergP03Wave3ZHB_Init();
    gt_ZergP04Wave3ZRH_Init();
    gt_ZergP03Wave5ZRUBackdooronHard_Init();
    gt_ZergP04Wave5ZR_Init();
    gt_ZergP03Wave6Hydra_Init();
    gt_ZergP03Repeating1ZHBBackdooronHard_Init();
    gt_ZergP04Repeating1ZRH_Init();
    gt_ZergP03Repeating2ZRH_Init();
    gt_ZergP04Repeating2ZRU_Init();
    gt_SpawnNydusWormP03_Init();
    gt_SpawnNydusWormP032_Init();
    gt_SpawnNydusWormP04_Init();
    gt_DespawnNydusWormP03_Init();
    gt_DespawnNydusWormP04_Init();
    gt_RemoveNydusWormP03Ping_Init();
    gt_RemoveNydusWormP04Ping_Init();
    gt_AIGiveMinerals_Init();
    gt_AIGiveGas_Init();
    gt_OvermindTendrilBeaconZerglingsSW_Init();
    gt_OvermindTendrilBeaconMutalisksNW_Init();
    gt_OvermindTendrilBeaconLurkersSE_Init();
    gt_OvermindTendrilBeaconBanelingsNE_Init();
    gt_ReleaseControlofZeratul_Init();
    gt_TransmissionZeratulIntroQ_Init();
    gt_TransmissionZeratulFindsObserverQ_Init();
    gt_TransmissionZeratulGetstoBaseQ_Init();
    gt_TransmissionZerglingRushColossiQ_Init();
    gt_TransmissionZergFrenzyIncomingQ_Init();
    gt_TransmissionGettoOvermindRemainsQ_Init();
    gt_TransmissionUseObserversQ_Init();
    gt_TransmissionZeratulFindsWarpGatesQ_Init();
    gt_TransmissionZeratulReachesTendrilsQ_Init();
    gt_TransmissionHighTemplarWarpedInQ_Init();
    gt_VictoryOvermindTendrilsCompleted_Init();
    gt_Victory_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatZeratulDies_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_TipStoryModeQ_Init();
    gt_TipColossusQ_Init();
    gt_TipObserver_Init();
    gt_TipWarpInQ_Init();
    gt_ObjectiveReachtheNexusCreateQ_Init();
    gt_ObjectiveReachtheNexusComplete_Init();
    gt_ObjectiveReachtheNexusFailed_Init();
    gt_ObjectiveOvermindTendrilsCreateHidden_Init();
    gt_ObjectiveOvermindTendrilsShowQ_Init();
    gt_ObjectiveOvermindTendrilsUpdateQ_Init();
    gt_ObjectiveOvermindTendrilsComplete_Init();
    gt_ObjectiveOvermindTendrilsFailed_Init();
    gt_ObjectivePowerTheObelisksCreateQ_Init();
    gt_ObjectivePowerTheObelisksUpdateQ_Init();
    gt_ObjectivePowerTheObelisksComplete_Init();
    gt_ObjectivePowerTheObelisksFailed_Init();
    gt_BriefingQ_Init();
    gt_BriefingScene00_Init();
    gt_BriefingScene01_Init();
    gt_BriefingScene00Hydralisks_Init();
    gt_BriefingScene00WanderingZerg_Init();
    gt_BriefingScene01Ultras_Init();
    gt_BriefingScene01WanderingZerg_Init();
    gt_MidCineQ_Init();
    gt_MidCineSetup_Init();
    gt_MidCineCinematic_Init();
    gt_MidCineCinematicEnd_Init();
    gt_MidCineCleanup_Init();
    gt_MidCineZergActions_Init();
    gt_VictoryQ_Init();
    gt_VictoryCineFinalTendrilSetup_Init();
    gt_VictoryCineFinalTendrilScene1_Init();
    gt_VictoryCineFinalTendrilScene2_Init();
    gt_VictoryCineFinalTendrilScene3_Init();
    gt_VictoryCineFinalTendrilScene4_Init();
    gt_VictoryCineFinalTendrilCinematicEnd_Init();
    gt_VictoryCineFinalTendrilCleanup_Init();
    gt_VictoryCineScene2Stuff_Init();
    gt_VictoryCineScene4Stuff_Init();
    gt_VictoryCineSkipped_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
