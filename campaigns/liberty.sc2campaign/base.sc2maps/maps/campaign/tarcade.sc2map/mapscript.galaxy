//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Lost Viking
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/CampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libCamp_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_p0_NEUTRAL = 0;
const int gv_p1_USER = 1;
const int gv_p2_ENEMY = 2;
const int gv_p3_CINE = 3;
const fixed gv_c_PlaneHeight = 8.0;
const fixed gv_c_Pai = 3.1416;
const int gv_c_ScreenButton_Quit = 1;
const int gv_c_ScreenButton_Continue = 2;
const fixed gv_c_MouseHideWait = 4.0;
const fixed gv_c_ScoreBonus = 0.0;
const int gv_c_BonusLifeScore = 25000;
const fixed gv_c_LeviathanY = -3.5;
const fixed gv_c_TerraTronY = -1.0;
const fixed gv_terraTronArmAttackIntervalSmall = 0.125;
const fixed gv_c_BGHeight = 73.0;
const int gv_bossHPBarWidth = 800;
const int gv_bossHPBarInnerWidth = 782;
const int gv_unitHPBarWidth = 400;
const int gv_unitHPBarInnerWidth = 382;
const int gv_uI_LifeIconsMaxCount = 5;
const int gv_uI_BombIconsMaxCount = 15;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_Rec_WaveInfo {
    string lv_unitType;
    int lv_count;
    fixed lv_interval;
    point lv_startPoint;
    int lv_patten;
    fixed lv_patternParam1;
    fixed lv_patternParam2;
    fixed lv_patternParam3;
    fixed lv_patternParam4;
    fixed lv_patternParam5;
    fixed lv_patternParam6;
    int lv_bullet;
    bool lv_bulletTargetFighter;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
unit gv_viking;
int gv_repeatTimes;
bool gv_powerupScoreEnabled;
bool gv_debug_IsForDebug;
bool gv_debug_BossCheatEnabled;
int[6] gv_levelWavePlaneTypeCount;
string[6][11] gv_levelWavePlaneType;
string[6][11] gv_levelWavePlaneIcon;
text[6][11] gv_levelWavePlaneName;
int[6][11] gv_levelWaveShotDown;
string gv_levelLight;
unit[21] gv_level1Interceptors;
point[21] gv_level1InterceptorLocs;
int gv_level1InterceptorCurrentIndex;
int gv_level1InterceptorCount;
bool gv_level1BossRoundTimerExpires;
fixed gv_leviathanTentacleX;
bool gv_spawnLightningProjectors;
unit gv_spawnedLightningProjector;
fixed gv_terraTronScale;
point gv_terraTronPosition;
fixed gv_terraTronArmAttackInterval;
bool gv_alternateSpinAttack;
timer gv_missileSpinnerFireTimer;
unit gv_missileSpinnerL;
unit gv_missileSpinnerR;
point[8][3] gv_presetSawTargets;
point gv_screenUpperBound;
point gv_screenLowerBound;
point gv_lastSawPosition;
int gv_currentSawBounces;
int gv_totalSawBounces;
unit gv_terraTronSaw;
int gv_levelCurrent;
bool gv_levelCleared;
point gv_cameraLocation;
int[6] gv_selectedBackgroundIDs;
int gv_selectedBackgroundCount;
int gv_currentBackgroundIndex;
int gv_nextBackgroundIndex;
unit gv_backgroundCurrent;
unit gv_backgroundNext;
string[21] gv_backgroundUnitTypes;
int[21] gv_backgroundIDs;
point gv_bGStart;
point gv_bGStartNext;
point gv_bGTarget;
bool gv_bGPaused;
unitgroup gv_activeBackgroundUnits;
unitgroup gv_borderGroup;
gs_Rec_WaveInfo gv_tP_SendWave_WaveInfo;
unit gv_boss;
bool gv_bossStopped;
unit gv_mothership;
unitgroup gv_powerups;
string gv_powerupReady;
string[11] gv_powerupTypeUnitTypes;
string[11] gv_powerupTypeIcons;
text[11] gv_powerupTypeNames;
int gv_powerupTypeCount;
int[11] gv_powerupTypePickedUp;
int[11] gv_powerupTypePickedUpCurrent;
timer gv_powerupPickupTimer;
bool gv_fighterAttackKeyDown;
bool gv_fighterAttackEnabled;
bool gv_fighterMoveEnabled;
bool gv_fighterMoveDownKeyDown;
bool gv_fighterMoveUpKeyDown;
bool gv_fighterMoveRightKeyDown;
bool gv_fighterMoveLeftKeyDown;
bool gv_fighterMovingLeft;
int gv_fighterMovingDirection;
int gv_vikingLife;
int gv_bombCount;
int gv_extraLifeMulpitier;
int gv_scoreLastBonusLife;
int gv_levelStartLabelDialog;
int gv_levelStartLabelText;
int gv_controlTipDialog;
int gv_controlTipBG;
int gv_controlTipLabel1;
int gv_controlTipLabel2;
int gv_controlTipStartButton;
bool gv_controlTipStartButtonClicked;
int gv_score;
int gv_highScore;
int gv_levelTotalEnemy;
int gv_levelTotalPowerups;
int gv_scoreScreenCloseButton;
int gv_bossHPBarDlg;
int gv_bossHPBarLabelDlg;
int gv_bossHPBar;
int gv_unitHPBarDlg;
int gv_unitHPBarLabelDlg;
int gv_unitHPBarDialogBar;
unit gv_unitHPBarUnit;
timer gv_unitHPBarFadeTimer;
int gv_uI_Dlg;
int gv_uI_ScoreLabel;
int gv_uI_HighScoreTitle;
int gv_uI_HighScoreLabel;
int gv_uI_LifeLabel;
int gv_uI_LifeLabelLargeIcon;
int[11] gv_uI_LifeIcons;
int gv_uI_BombLabel;
int gv_uI_BombLabelLargeIcon;
int[16] gv_uI_BombIcons;
bool gv_recordBroke;
int gv_fadeDialog;
int gv_fadeImage;
int gv_gameResult;
bool gv_gameRestartFinished;
int gv_introFlashingLabel;
int gv_introFlashingShadow;
int gv_introFlashingPortrait;
unitgroup gv_endCinematicGroup;
unitgroup gv_endCinematicViking;
sound gv_endCinematicMusic;
unit gv_vikingCine;
int gv_endCineTextDialog;

void InitGlobals () {
    int init_i;

    gv_powerupScoreEnabled = true;
    gv_debug_IsForDebug = true;
    gv_spawnLightningProjectors = true;
    gv_terraTronArmAttackInterval = (0.375 - (gv_terraTronArmAttackIntervalSmall * 2.0));
    gv_missileSpinnerFireTimer = TimerCreate();
    gv_screenUpperBound = Point(140.0, 134.0);
    gv_screenLowerBound = Point(116.0, 120.0);
    gv_bGPaused = true;
    gv_activeBackgroundUnits = UnitGroupEmpty();
    gv_borderGroup = UnitGroupEmpty();
    gv_tP_SendWave_WaveInfo.lv_patten = 2;
    gv_powerups = UnitGroupEmpty();
    gv_powerupPickupTimer = TimerCreate();
    gv_fighterAttackEnabled = true;
    gv_fighterMoveEnabled = true;
    gv_fighterMovingDirection = 2;
    gv_vikingLife = 3;
    gv_bombCount = 2;
    gv_extraLifeMulpitier = 1;
    gv_levelStartLabelDialog = c_invalidDialogId;
    gv_levelStartLabelText = c_invalidDialogControlId;
    gv_controlTipDialog = c_invalidDialogId;
    gv_controlTipBG = c_invalidDialogControlId;
    gv_controlTipLabel1 = c_invalidDialogControlId;
    gv_controlTipLabel2 = c_invalidDialogControlId;
    gv_controlTipStartButton = c_invalidDialogControlId;
    gv_scoreScreenCloseButton = c_invalidDialogControlId;
    gv_bossHPBarDlg = c_invalidDialogId;
    gv_bossHPBarLabelDlg = c_invalidDialogId;
    gv_bossHPBar = c_invalidDialogControlId;
    gv_unitHPBarDlg = c_invalidDialogId;
    gv_unitHPBarLabelDlg = c_invalidDialogId;
    gv_unitHPBarDialogBar = c_invalidDialogControlId;
    gv_unitHPBarFadeTimer = TimerCreate();
    gv_uI_Dlg = c_invalidDialogId;
    gv_uI_ScoreLabel = c_invalidDialogControlId;
    gv_uI_HighScoreTitle = c_invalidDialogControlId;
    gv_uI_HighScoreLabel = c_invalidDialogControlId;
    gv_uI_LifeLabel = c_invalidDialogControlId;
    gv_uI_LifeLabelLargeIcon = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_uI_LifeIcons[init_i] = c_invalidDialogControlId;
    }
    gv_uI_BombLabel = c_invalidDialogControlId;
    gv_uI_BombLabelLargeIcon = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_uI_BombIcons[init_i] = c_invalidDialogControlId;
    }
    gv_fadeDialog = c_invalidDialogId;
    gv_fadeImage = c_invalidDialogControlId;
    gv_introFlashingLabel = c_invalidDialogControlId;
    gv_introFlashingShadow = c_invalidDialogControlId;
    gv_introFlashingPortrait = c_invalidPortraitId;
    gv_endCinematicGroup = UnitGroupEmpty();
    gv_endCinematicViking = UnitGroupEmpty();
    gv_endCineTextDialog = c_invalidDialogId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_Debug_ShowPointInfo (text lp_name, point lp_point);
bool gf_IsForDebug ();
int gf_LevelShotDown (int lp_level);
int gf_NumberOfLevel ();
void gf_InitializeLevelScoreData ();
void gf_InitializeLevelWaveDataSingle (int lp_level, string lp_planeType, string lp_icon, text lp_name);
void gf_InitializeLevelWaveData ();
void gf_LevelStart (int lp_level);
void gf_LevelCleared (int lp_level, bool lp_withScoreScreen);
void gf_LevelPreload (int lp_level);
void gf_SpawnTrainingPowerups ();
void gf_Level1Preload ();
void gf_Level1Start ();
void gf_Level1SpawnWaves ();
void gf_Level1SpawnBoss ();
void gf_Level1Cleared ();
void gf_Level1ClearUp ();
void gf_Level1BossSpawnInterceptor (fixed lp_x, fixed lp_y);
void gf_Level1BossCarrierMove ();
void gf_Level2Preload ();
void gf_Level2Start ();
void gf_Level2SpawnWaves ();
void gf_Level2SpawnWavesScourgeDownBack (fixed lp_x1, fixed lp_x2, int lp_count, fixed lp_intervalMax);
void gf_Level2SpawnWavesScourgePatternFlyAway ();
void gf_Level2ScourgeSound ();
void gf_Level2SwarmGuardianMovement (unit lp_guardian, point lp_center);
void gf_Level2SpawnBoss ();
void gf_Level2Cleared ();
void gf_Level2ClearUp ();
void gf_Level2BossLeviathanSpawnBombs (int lp_count);
void gf_Level2BossLeviathanMove (fixed lp_x);
void gf_Level3Preload ();
void gf_Level3Start ();
void gf_Level3SpawnWaves ();
void gf_Level3SpawnWavesWraithGroupDrop (fixed lp_centerX, int lp_bullet, bool lp_targetViking);
void gf_Level3SpawnWavesWraithMassGroupDrop (int lp_count, int lp_bullet, bool lp_targetViking);
void gf_Level3SpawnWavesWraithGroupHMove (fixed lp_y, int lp_count, bool lp_leftToRight, fixed lp_speed, int lp_bullet);
void gf_Level3SpawnWavesWraithGroupVMove (fixed lp_x, int lp_count, fixed lp_speed, int lp_bullet);
void gf_Level3SpawnWavesWraithGroupDropBack (fixed lp_centerX);
void gf_SpawnSingleLightningProjector (bool lp_leftSide, fixed lp_moveSpeed, fixed lp_onTime, fixed lp_offTime);
void gf_SpawnLightningProjectors (int lp_numberOfProjectors, fixed lp_distanceApart, fixed lp_moveSpeed, fixed lp_onTime, fixed lp_offTime, bool lp_alternateLR);
void gf_Level3ScienceVesselMovement (unit lp_scienceVessel, point lp_center);
void gf_Level3BattlecruiserBehavior (unit lp_battlecruiser, point lp_center);
void gf_Level3SpawnBoss ();
void gf_Level3Cleared ();
void gf_Level3ClearUp ();
void gf_TerraTronLaunchMissile (fixed lp_xOffset, fixed lp_yOffset, fixed lp_facing, string lp_launchAttachPoint);
void gf_TerraTronRandomArmAttack ();
void gf_TerraTronArmAttackInToOut ();
void gf_TerraTronArmAttackOutToIn ();
void gf_TerraTronArmAttackLeftToRight ();
void gf_TerraTronArmAttackRightToLeft ();
void gf_TerraTronRandomBeamAttack ();
void gf_TerraTronBeamAttackLeftToRight ();
void gf_TerraTronBeamAttackRightToLeft ();
void gf_TerraTronSpawnMissileSpinners ();
point gf_GetNearestSawTarget (point lp_positionOfViking);
fixed gf_GetNormalFacing (point lp_sawPosition);
void gf_TerraTronSawAttack (int lp_bounces);
int gf_CurrentLevel ();
void gf_InitCamera ();
void gf_UpdateCameraBounds ();
region gf_GetCameraBoundary ();
region gf_GetOuterBoundary ();
point gf_ConvertShooterCoordToMapCoord (point lp_point);
fixed gf_ConvertShooterXToMapX (fixed lp_x);
fixed gf_ConvertShooterYToMapY (fixed lp_y);
void gf_InitBackground (int lp_bGID1, int lp_bGID2, int lp_bGID3, int lp_bGID4, int lp_bGID5);
void gf_StartBGMove ();
void gf_StopBGMove ();
unit gf_CurrentBackgroundUnit ();
unit gf_NextBackgroundUnit ();
string gf_BackgroundUnitType (int lp_iD);
bool gf_BGPaused ();
void gf_AddBackgroundUnitType (int lp_bGID);
void gf_CreateBackground (int lp_iD);
void gf_SetBackground (unit lp_bG);
void gf_SetBackgroundNext (unit lp_bG);
void gf_InitBackgroundDataSingle (int lp_iD, string lp_unitType);
void gf_InitBackgroundData ();
void gf_BGUpdatePosition ();
void gf_PrepareBorder ();
void gf_PrepareUnitForShooterGame (unit lp_unit);
void gf_SpawnMob (int lp_count, string lp_type, point lp_pos, fixed lp_angle);
text gf_GetMobUnitName (string lp_unitType);
void gf_SendWave (string lp_unitType, int lp_count, fixed lp_interval, point lp_startPoint, int lp_pattern, fixed lp_patternParam1, fixed lp_patternParam2, fixed lp_patternParam3, fixed lp_patternParam4, fixed lp_patternParam5, fixed lp_patternParam6, int lp_bullet, bool lp_targetFighter);
void gf_SendWaveMoveDrop (string lp_unitType, int lp_count, fixed lp_interval, fixed lp_startingX, fixed lp_startingY, fixed lp_turnX, fixed lp_turnY, fixed lp_speedInit, fixed lp_speed, fixed lp_delay, int lp_bullet, bool lp_targetFighter);
void gf_SendWaveStraightLine (string lp_unitType, int lp_count, fixed lp_interval, fixed lp_startingX, fixed lp_startingY, fixed lp_finishX, fixed lp_finishY, fixed lp_speed, int lp_bullet, bool lp_targetFighter);
void gf_SendWaveCorrectionMark (string lp_unitType, int lp_count, fixed lp_interval, fixed lp_startingX, fixed lp_startingY, fixed lp_turnX, fixed lp_turnY, fixed lp_finishX, fixed lp_finishY, fixed lp_speed, fixed lp_delay, int lp_bullet, bool lp_targetFighter);
void gf_SendWaveDropBack (string lp_unitType, int lp_count, fixed lp_interval, fixed lp_startingX, fixed lp_startingY, fixed lp_turnY, fixed lp_speed1, fixed lp_speed2, int lp_bullet, bool lp_targetFighter);
void gf_SendWaveCircle (string lp_unitType, int lp_count, fixed lp_interval, fixed lp_startingX, fixed lp_startingY, fixed lp_turnX, fixed lp_turnY, fixed lp_centerX, fixed lp_centerY, fixed lp_arc, fixed lp_arcSpeed, int lp_bullet, bool lp_targetFighter);
void gf_MobAttack (unit lp_mob, point lp_target);
void gf_MobSpawned (unit lp_mob);
void gf_ReadyToSpawnPowerup (string lp_unitType);
void gf_CreatePowerup (point lp_pos, string lp_type);
void gf_DespawnAllPowerupsOnMap ();
void gf_PowerupWonder (unit lp_powerup);
void gf_InitializePowerupDataSingle (string lp_type, string lp_icon, text lp_name);
void gf_InitializePowerupData ();
void gf_CreatePowerupTextTag (text lp_text, color lp_color);
void gf_FighterAttack ();
void gf_FighterEnableDisableAttack (bool lp_enableDisable);
void gf_FighterMove ();
void gf_FighterEnableDisableMove (bool lp_enableDisable);
void gf_CreateViking ();
void gf_FighterEnableDisableControl (bool lp_enableDisable);
void gf_DisplayBossComingMessage (text lp_warningMessage);
void gf_DisplayLevelStartLabel (int lp_level);
void gf_DestoryLevelStartLabel (bool lp_instant);
void gf_DisplayControlTip ();
void gf_HideControlTip (bool lp_instant);
void gf_AddScore (int lp_points);
void gf_SetHighScore (int lp_newHighScore);
int gf_ModifyScoreWithBonusMultiplier (int lp_points);
int gf_ScoreofUnitType (string lp_unitType);
void gf_ResetScoreTracking ();
void gf_ResetPowerupPickCount ();
void gf_DisplayScoreScreen (int lp_level);
void gf_DisplayBossHPBar (text lp_name);
void gf_DisplayUnitHPBar (text lp_name);
void gf_CreateUI ();
void gf_ShowHideUI (bool lp_showHide);
void gf_UpdateUI ();
void gf_FromatBackPlayButton (int lp_button);
void gf_FadeInOutWithPicture (bool lp_fadeIn, fixed lp_duration, bool lp_waitUntilDone);
void gf_FadeInOutSeperateThread (bool lp_fadeIn, fixed lp_duration, bool lp_waitUntilDone);
void gf_FadeInOutCore (bool lp_fadeIn, fixed lp_duration);
void gf_EndCinematicText ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_InitPreload;
trigger gt_Init;
trigger gt_Debug_Sin;
trigger gt_Debug_LeaveBehind;
trigger gt_Debug_MoveBG;
trigger gt_Debug_BOSS;
trigger gt_Debug_LEVELCLEAR;
trigger gt_Debug_Bonus;
trigger gt_Debug_PowerUp;
trigger gt_Debug_Life;
trigger gt_Debug_Cineamtic;
trigger gt_Debug_SS;
trigger gt_Debug_AddScore;
trigger gt_Debug_HIDEQUIT;
trigger gt_Debug_ADDLIFE;
trigger gt_Level1SpawnWaves;
trigger gt_SpawnLevel1BossCarrier;
trigger gt_Level1BossCarrierDies;
trigger gt_Level1BossCarrierBehavior;
trigger gt_Level1BossInterceptorSpawned;
trigger gt_Level1BossInterceptorDied;
trigger gt_Level1BossRoundTimer;
trigger gt_Level2SpawnWaves;
trigger gt_SpawnLevel2BossLeviathan;
trigger gt_Level2BossLeviathanDies;
trigger gt_Level2BossLeviathanBehavior;
trigger gt_Level2BossLeviathanTentacle;
trigger gt_Level2BossLeviathanCharge;
trigger gt_Level3SpawnWaves;
trigger gt_SpawnLevel3BossTerraTron;
trigger gt_Level3BossTerraTronBehavior;
trigger gt_Level3BossTerraTronDies;
trigger gt_FireSpinMissiles;
trigger gt_InitializePresetSawTargets;
trigger gt_TerraTronSawSpawned;
trigger gt_TerraTronSawBehavior;
trigger gt_BackgroundManager;
trigger gt_SendWave;
trigger gt_SendWaveLeaveBehind;
trigger gt_SendWaveStraightLine;
trigger gt_SendWaveCorrectionMark;
trigger gt_SendWaveDownBack;
trigger gt_SendWaveMoveDrop;
trigger gt_SendWaveCircle;
trigger gt_SendWaveSine;
trigger gt_BossMovement;
trigger gt_SpawnMothership;
trigger gt_MothershipPlanetCracker;
trigger gt_MothershipDies;
trigger gt_SpawnPowerup;
trigger gt_PowerupPickUp;
trigger gt_FighterAttackKeyDown;
trigger gt_FighterAttackKeyUp;
trigger gt_FighterAttack;
trigger gt_FighterBombKeyDown;
trigger gt_FighterMoveLeftKeyDown;
trigger gt_FighterMoveLeftKeyUp;
trigger gt_FighterMoveRightKeyDown;
trigger gt_FighterMoveRightKeyUp;
trigger gt_FighterMoveUpKeyDown;
trigger gt_FighterMoveUpKeyUp;
trigger gt_FighterMoveDownKeyDown;
trigger gt_FighterMoveDownKeyUp;
trigger gt_FighterMove;
trigger gt_SpawnViking;
trigger gt_VikingDies;
trigger gt_VikingExtraLifes;
trigger gt_StartButtonClicked;
trigger gt_ScoreMobDies;
trigger gt_ScoreScreenCloseButtonClicked;
trigger gt_ScoreScreenSpacebarPressed;
trigger gt_BossHPBar;
trigger gt_BossDies;
trigger gt_UnitHPBar;
trigger gt_HPBarUnitDies;
trigger gt_FadeUnitHPBar;
trigger gt_RecordBrokeThread;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_PlayAgainClicked;
trigger gt_QuitClicked;
trigger gt_ReturnToGameClicked;
trigger gt_QuitQueryYetClicked;
trigger gt_QuitQueryNoClicked;
trigger gt_QuitButtonClicked;
trigger gt_EscapeKeyMenu;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicSkippable;
trigger gt_SkipEndCinematic;
trigger gt_EndCinematic;
trigger gt_EndCinematicNotSkippable;
trigger gt_EndCinematicSkippable;
trigger gt_EndCinematicCamera;
trigger gt_EndCinematicViking;
trigger gt_EndCinematicDance;
trigger gt_EndCinematicMusic;
trigger gt_EndCinematicContinueButtonClicked;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_Debug_ShowPointInfo (text lp_name, point lp_point) {
    // Implementation
    if ((gf_IsForDebug() == false)) {
        return ;
    }
    else {
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (lp_name + StringExternal("Param/Value/51EFF4C4") + FixedToText(PointGetX(lp_point), 2) + StringExternal("Param/Value/C5533173") + FixedToText(PointGetY(lp_point), 2) + StringExternal("Param/Value/ED0C4AD1")));
}

bool gf_IsForDebug () {
    // Implementation
    return gv_debug_IsForDebug;
}

int gf_LevelShotDown (int lp_level) {
    int auto50CBBF6A_ae;
    int auto50CBBF6A_ai;

    // Variable Declarations
    int lv_index;
    int lv_count;

    // Variable Initialization

    // Implementation
    auto50CBBF6A_ae = gv_levelWavePlaneTypeCount[(lp_level)];
    auto50CBBF6A_ai = 1;
    lv_index = 1;
    for ( ; ( (auto50CBBF6A_ai >= 0 && lv_index <= auto50CBBF6A_ae) || (auto50CBBF6A_ai <= 0 && lv_index >= auto50CBBF6A_ae) ) ; lv_index += auto50CBBF6A_ai ) {
        lv_count += gv_levelWaveShotDown[(lp_level)][lv_index];
    }
    return lv_count;
}

int gf_NumberOfLevel () {
    // Implementation
    return ((4) - 1);
}

void gf_InitializeLevelScoreData () {
    int auto51959A84_ae;
    int auto51959A84_ai;
    int autoD11C92FC_ae;
    int autoD11C92FC_ai;

    // Variable Declarations
    int lv_i;
    int lv_k;

    // Variable Initialization

    // Implementation
    auto51959A84_ae = 5;
    auto51959A84_ai = 1;
    lv_i = 1;
    for ( ; ( (auto51959A84_ai >= 0 && lv_i <= auto51959A84_ae) || (auto51959A84_ai <= 0 && lv_i >= auto51959A84_ae) ) ; lv_i += auto51959A84_ai ) {
        autoD11C92FC_ae = 10;
        autoD11C92FC_ai = 1;
        lv_k = 1;
        for ( ; ( (autoD11C92FC_ai >= 0 && lv_k <= autoD11C92FC_ae) || (autoD11C92FC_ai <= 0 && lv_k >= autoD11C92FC_ae) ) ; lv_k += autoD11C92FC_ai ) {
            gv_levelWaveShotDown[lv_i][lv_k] = 0;
        }
    }
}

void gf_InitializeLevelWaveDataSingle (int lp_level, string lp_planeType, string lp_icon, text lp_name) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    gv_levelWavePlaneTypeCount[(lp_level)] += 1;
    lv_index = gv_levelWavePlaneTypeCount[(lp_level)];
    gv_levelWavePlaneType[(lp_level)][lv_index] = lp_planeType;
    gv_levelWavePlaneIcon[(lp_level)][lv_index] = lp_icon;
    gv_levelWavePlaneName[(lp_level)][lv_index] = lp_name;
    gv_levelWaveShotDown[(lp_level)][lv_index] = 0;
}

void gf_InitializeLevelWaveData () {
    // Variable Declarations
    int lv_level;

    // Variable Initialization

    // Implementation
    lv_level = 1;
    gf_InitializeLevelWaveDataSingle(lv_level, "SS_Scout", "Assets\\Textures\\btn-unit-protoss-scout.dds", StringExternal("Param/Value/988B0012"));
    gf_InitializeLevelWaveDataSingle(lv_level, "SS_Phoenix", "Assets\\Textures\\btn-unit-protoss-phoenix.dds", StringExternal("Param/Value/C843402E"));
    gf_InitializeLevelWaveDataSingle(lv_level, "SS_Interceptor", "Assets\\Textures\\btn-unit-protoss-interceptor.dds", StringExternal("Param/Value/A34490F7"));
    gf_InitializeLevelWaveDataSingle(lv_level, "SS_CarrierBoss", "Assets\\Textures\\btn-unit-protoss-carrier.dds", StringExternal("Param/Value/DFB9E62F"));
    lv_level = 2;
    gf_InitializeLevelWaveDataSingle(lv_level, "SS_Scourge", "Assets\\Textures\\btn-unit-zerg-scourge.dds", StringExternal("Param/Value/68411A21"));
    gf_InitializeLevelWaveDataSingle(lv_level, "SS_Corruptor", "Assets\\Textures\\btn-unit-zerg-corruptor.dds", StringExternal("Param/Value/C8AEE86E"));
    gf_InitializeLevelWaveDataSingle(lv_level, "SS_SwarmGuardian", "Assets\\Textures\\btn-lostvinking-swarmguardian.dds", StringExternal("Param/Value/B865CB24"));
    gf_InitializeLevelWaveDataSingle(lv_level, "SS_Leviathan", "Assets\\Textures\\btn-unit-zerg-leviathan.dds", StringExternal("Param/Value/93645453"));
    lv_level = 3;
    gf_InitializeLevelWaveDataSingle(lv_level, "SS_Wraith", "Assets\\Textures\\btn-unit-terran-wraith.dds", StringExternal("Param/Value/BFAEAA12"));
    gf_InitializeLevelWaveDataSingle(lv_level, "SS_ScienceVessel", "Assets\\Textures\\btn-unit-terran-sciencevessel.dds", StringExternal("Param/Value/AA2F3944"));
    gf_InitializeLevelWaveDataSingle(lv_level, "SS_Battlecruiser", "Assets\\Textures\\btn-unit-terran-battlecruiser.dds", StringExternal("Param/Value/BED470AE"));
    gf_InitializeLevelWaveDataSingle(lv_level, "SS_TerraTron", "Assets\\Textures\\btn-lostvinking-terra-tron.dds", StringExternal("Param/Value/D136CD59"));
}

void gf_LevelStart (int lp_level) {
    // Implementation
    gv_levelCurrent = lp_level;
    gv_levelCleared = false;
    gv_debug_BossCheatEnabled = false;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "LostViking_MusicGameLoop", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    gf_ResetScoreTracking();
    gf_StartBGMove();
    gf_UpdateUI();
    gf_ShowHideUI(true);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_SpawnViking, true, false);
    gf_FadeInOutWithPicture(true, 2.0, false);
    gf_DisplayLevelStartLabel(lp_level);
    gf_FighterEnableDisableControl(true);
    TimerStart(gv_powerupPickupTimer, 0.0625, true, c_timeGame);
}

void gf_LevelCleared (int lp_level, bool lp_withScoreScreen) {
    unitgroup auto49A2DDD7_g;
    int auto49A2DDD7_u;
    unitgroup auto6B9B76D8_g;
    int auto6B9B76D8_u;
    int auto10272E13_ae;
    int auto10272E13_ai;
    int auto9DCA9D7B_ae;
    int auto9DCA9D7B_ai;

    // Variable Declarations
    unit lv_pickedUnit;
    int lv_index;
    point lv_pos;

    // Variable Initialization

    // Implementation
    TimerPause(gv_powerupPickupTimer, true);
    gv_powerupReady = null;
    libNtve_gf_MakeUnitInvulnerable(gv_viking, true);
    gf_Level1ClearUp();
    gf_Level2ClearUp();
    gf_Level3ClearUp();
    auto49A2DDD7_g = UnitGroup(null, gv_p2_ENEMY, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto49A2DDD7_u = 1;
    for ( ; auto49A2DDD7_u <= UnitGroupCount(auto49A2DDD7_g, c_unitCountAll) ; auto49A2DDD7_u += BoolToInt(lv_pickedUnit == UnitGroupUnit(auto49A2DDD7_g, auto49A2DDD7_u)) ) {
        lv_pickedUnit = UnitGroupUnit(auto49A2DDD7_g, auto49A2DDD7_u);
        UnitKill(lv_pickedUnit);
    }
    Wait(2.0, c_timeGame);
    gf_FighterEnableDisableControl(false);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_viking), c_animNameDefault);
    auto6B9B76D8_g = UnitGroup(null, gv_p0_NEUTRAL, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6B9B76D8_u = 1;
    for ( ; auto6B9B76D8_u <= UnitGroupCount(auto6B9B76D8_g, c_unitCountAll) ; auto6B9B76D8_u += BoolToInt(lv_pickedUnit == UnitGroupUnit(auto6B9B76D8_g, auto6B9B76D8_u)) ) {
        lv_pickedUnit = UnitGroupUnit(auto6B9B76D8_g, auto6B9B76D8_u);
        auto10272E13_ae = gv_powerupTypeCount;
        auto10272E13_ai = 1;
        lv_index = 1;
        for ( ; ( (auto10272E13_ai >= 0 && lv_index <= auto10272E13_ae) || (auto10272E13_ai <= 0 && lv_index >= auto10272E13_ae) ) ; lv_index += auto10272E13_ai ) {
            if ((UnitGetType(lv_pickedUnit) == gv_powerupTypeUnitTypes[lv_index])) {
                UnitRemove(lv_pickedUnit);
            }
            else {
            }
        }
    }
    Wait(2.0, c_timeGame);
    SoundPlay(SoundLink("LostViking_Thrust", 0), PlayerGroupAll(), 100.0, 0.0);
    lv_pos = UnitGetPosition(gv_viking);
    auto9DCA9D7B_ae = 50;
    auto9DCA9D7B_ai = 1;
    lv_index = 1;
    for ( ; ( (auto9DCA9D7B_ai >= 0 && lv_index <= auto9DCA9D7B_ae) || (auto9DCA9D7B_ai <= 0 && lv_index >= auto9DCA9D7B_ae) ) ; lv_index += auto9DCA9D7B_ai ) {
        Wait(0.0125, c_timeGame);
        UnitSetPosition(gv_viking, PointWithOffsetPolar(lv_pos, (0.8 * IntToFixed(lv_index)), 90.0), true);
    }
    gf_FadeInOutWithPicture(false, 1.5, true);
    libNtve_gf_HideScreenButton(false, gv_c_ScreenButton_Quit);
    if ((lp_withScoreScreen == true)) {
        gf_DisplayScoreScreen(lp_level);
    }
    else {
    }
}

void gf_LevelPreload (int lp_level) {
    int autoB2FAD8C5_ae;
    int autoB2FAD8C5_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    autoB2FAD8C5_ae = gv_levelWavePlaneTypeCount[(lp_level)];
    autoB2FAD8C5_ai = 1;
    lv_index = 1;
    for ( ; ( (autoB2FAD8C5_ai >= 0 && lv_index <= autoB2FAD8C5_ae) || (autoB2FAD8C5_ai <= 0 && lv_index >= autoB2FAD8C5_ae) ) ; lv_index += autoB2FAD8C5_ai ) {
        libNtve_gf_PreloadUnit(gv_levelWavePlaneType[(lp_level)][lv_index], false);
    }
}

void gf_SpawnTrainingPowerups () {
    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SS_PowerupSideMissiles", 0, 0, gf_ConvertShooterCoordToMapCoord(Point(1.5, -10.0)));
    UnitBehaviorRemove(UnitLastCreated(), "SS_PowerupMorphToHealth", 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SS_PowerupSideMissiles", 0, 0, gf_ConvertShooterCoordToMapCoord(Point(3.5, -10.0)));
    UnitBehaviorRemove(UnitLastCreated(), "SS_PowerupMorphToHealth", 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SS_PowerupHealth", 0, 0, gf_ConvertShooterCoordToMapCoord(Point(6.5, -10.0)));
    UnitBehaviorRemove(UnitLastCreated(), "SS_PowerupMorphToStrongerMissiles", 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SS_PowerupHealth", 0, 0, gf_ConvertShooterCoordToMapCoord(Point(8.5, -10.0)));
    UnitBehaviorRemove(UnitLastCreated(), "SS_PowerupMorphToStrongerMissiles", 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SS_PowerupStrongerMissiles", 0, 0, gf_ConvertShooterCoordToMapCoord(Point(11.5, -10.0)));
    UnitBehaviorRemove(UnitLastCreated(), "SS_PowerupMorphToBomb", 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SS_PowerupStrongerMissiles", 0, 0, gf_ConvertShooterCoordToMapCoord(Point(13.5, -10.0)));
    UnitBehaviorRemove(UnitLastCreated(), "SS_PowerupMorphToBomb", 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SS_PowerupBomb", 0, 0, gf_ConvertShooterCoordToMapCoord(Point(16.5, -10.0)));
    UnitBehaviorRemove(UnitLastCreated(), "SS_PowerupMorphToSideMissiles", 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SS_PowerupBomb", 0, 0, gf_ConvertShooterCoordToMapCoord(Point(18.5, -10.0)));
    UnitBehaviorRemove(UnitLastCreated(), "SS_PowerupMorphToSideMissiles", 1);
}

void gf_Level1Preload () {
}

void gf_Level1Start () {
    // Implementation
    if ((gv_gameResult != 0)) {
        return ;
    }
    else {
    }
    PlayerSetColorIndex(gv_p2_ENEMY, 2, true);
    gf_InitBackground(1, 2, 3, 4, 5);
    GameSetBackground(c_backgroundFixed, "SS_BackgroundSpaceProtossLarge", 100.0);
    gv_levelLight = "ArcadeSkyboxSpaceLight";
    GameSetLighting(gv_levelLight, 0.0);
    gf_LevelStart(1);
    if ((gv_repeatTimes == 0)) {
        gv_powerupScoreEnabled = false;
        gf_SpawnTrainingPowerups();
        gf_DisplayControlTip();
        gf_DespawnAllPowerupsOnMap();
        gv_bombCount = 2;
        gv_powerupScoreEnabled = true;
        UnitBehaviorRemove(gv_viking, "SS_PowerUpDiagonal1", 1);
        UnitBehaviorRemove(gv_viking, "SS_PowerUpDiagonal2", 1);
        UnitBehaviorRemove(gv_viking, "SS_PowerUpHealth1", 1);
        UnitBehaviorRemove(gv_viking, "SS_PowerUpHealth2", 1);
        UnitBehaviorRemove(gv_viking, "SS_PowerUpStrong", 2);
        gf_UpdateUI();
    }
    else {
    }
    GameCheatAllow(c_gameCheatVictory, true);
    gf_DestoryLevelStartLabel(false);
    Wait(2.0, c_timeGame);
    if ((gv_gameResult != 0) && (gv_gameResult != 4)) {
        return ;
    }
    else {
    }
    if ((gv_levelCleared == false)) {
        if ((gv_debug_BossCheatEnabled == false)) {
            gf_Level1SpawnWaves();
        }
        else {
        }
        if ((gv_gameResult != 0) && (gv_gameResult != 4)) {
            return ;
        }
        else {
        }
        if ((gv_levelCleared == false)) {
            gf_Level1SpawnBoss();
            if ((gv_gameResult != 0) && (gv_gameResult != 4)) {
                return ;
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
    gf_Level1Cleared();
}

void gf_Level1SpawnWaves () {
    // Implementation
    TriggerExecute(gt_Level1SpawnWaves, true, true);
}

void gf_Level1SpawnBoss () {
    // Implementation
    gf_DisplayBossComingMessage(StringExternal("Param/Value/120ED966"));
    TriggerExecute(gt_SpawnLevel1BossCarrier, true, false);
    while (!((gv_levelCleared == true))) {
        Wait(0.25, c_timeGame);
    }
}

void gf_Level1Cleared () {
    // Implementation
    gf_LevelCleared(1, (gv_gameResult != 4));
}

void gf_Level1ClearUp () {
    // Implementation
    TriggerStop(gt_Level1SpawnWaves);
    TriggerStop(gt_Level1BossCarrierBehavior);
    TriggerStop(gt_Level1BossRoundTimer);
}

void gf_Level1BossSpawnInterceptor (fixed lp_x, fixed lp_y) {
    int auto69EEA383_n;
    int auto69EEA383_i;

    // Variable Declarations
    point lv_tempLoc;

    // Variable Initialization

    // Implementation
    lv_tempLoc = Point(lp_x, lp_y);
    lv_tempLoc = gf_ConvertShooterCoordToMapCoord(lv_tempLoc);
    gv_level1InterceptorCount += 1;
    gv_level1InterceptorCurrentIndex = gv_level1InterceptorCount;
    gv_level1InterceptorLocs[gv_level1InterceptorCurrentIndex] = lv_tempLoc;
    UnitIssueOrder(gv_boss, OrderTargetingPoint(AbilityCommand("SS_CarrierSpawnInterceptor", 0), lv_tempLoc), c_orderQueueReplace);
    auto69EEA383_n = 4;
    for (auto69EEA383_i = 1; auto69EEA383_i <= auto69EEA383_n; auto69EEA383_i += 1) {
        Wait(0.5, c_timeGame);
        if ((gv_level1InterceptorCurrentIndex <= 0)) {
            break;
        }
        else {
        }
    }
}

void gf_Level1BossCarrierMove () {
    // Variable Declarations
    region lv_bounds;
    point lv_targetLoc;

    // Variable Initialization

    // Implementation
    if ((UnitIsAlive(gv_boss) == false)) {
        return ;
    }
    else {
    }
    lv_targetLoc = Point(RandomFixed(4.0, 16.0), RandomFixed(-0.5, -5.0));
    lv_targetLoc = gf_ConvertShooterCoordToMapCoord(lv_targetLoc);
    UnitIssueOrder(gv_boss, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetLoc), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    while (!((UnitTestState(gv_boss, c_unitStateIdle) == true))) {
        Wait(0.5, c_timeGame);
    }
}

void gf_Level2Preload () {
}

void gf_Level2Start () {
    // Implementation
    if ((gv_gameResult != 0)) {
        return ;
    }
    else {
    }
    PlayerSetColorIndex(gv_p2_ENEMY, 1, true);
    gf_InitBackground(6, 7, 8, 0, 0);
    GameSetBackground(c_backgroundFixed, "SS_BackgroundSpaceZergLarge", 100.0);
    gv_levelLight = "ArcadeSkyboxSpaceLight";
    GameSetLighting(gv_levelLight, 0.0);
    gf_LevelStart(2);
    Wait(7.0, c_timeGame);
    gf_DestoryLevelStartLabel(false);
    if ((gv_gameResult != 0) && (gv_gameResult != 4)) {
        return ;
    }
    else {
    }
    if ((gv_levelCleared == false)) {
        if ((gv_debug_BossCheatEnabled == false)) {
            gf_Level2SpawnWaves();
        }
        else {
        }
        if ((gv_gameResult != 0) && (gv_gameResult != 4)) {
            return ;
        }
        else {
        }
        if ((gv_levelCleared == false)) {
            gf_Level2SpawnBoss();
            if ((gv_gameResult != 0) && (gv_gameResult != 4)) {
                return ;
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
    gf_Level2Cleared();
}

void gf_Level2SpawnWaves () {
    // Implementation
    TriggerExecute(gt_Level2SpawnWaves, true, true);
}

trigger auto_gf_Level2SpawnWavesScourgeDownBack_Trigger = null;
fixed auto_gf_Level2SpawnWavesScourgeDownBack_lp_x1;
fixed auto_gf_Level2SpawnWavesScourgeDownBack_lp_x2;
int auto_gf_Level2SpawnWavesScourgeDownBack_lp_count;
fixed auto_gf_Level2SpawnWavesScourgeDownBack_lp_intervalMax;

void gf_Level2SpawnWavesScourgeDownBack (fixed lp_x1, fixed lp_x2, int lp_count, fixed lp_intervalMax) {
    auto_gf_Level2SpawnWavesScourgeDownBack_lp_x1 = lp_x1;
    auto_gf_Level2SpawnWavesScourgeDownBack_lp_x2 = lp_x2;
    auto_gf_Level2SpawnWavesScourgeDownBack_lp_count = lp_count;
    auto_gf_Level2SpawnWavesScourgeDownBack_lp_intervalMax = lp_intervalMax;

    if (auto_gf_Level2SpawnWavesScourgeDownBack_Trigger == null) {
        auto_gf_Level2SpawnWavesScourgeDownBack_Trigger = TriggerCreate("auto_gf_Level2SpawnWavesScourgeDownBack_TriggerFunc");
    }

    TriggerExecute(auto_gf_Level2SpawnWavesScourgeDownBack_Trigger, false, false);
}

bool auto_gf_Level2SpawnWavesScourgeDownBack_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_x1 = auto_gf_Level2SpawnWavesScourgeDownBack_lp_x1;
    fixed lp_x2 = auto_gf_Level2SpawnWavesScourgeDownBack_lp_x2;
    int lp_count = auto_gf_Level2SpawnWavesScourgeDownBack_lp_count;
    fixed lp_intervalMax = auto_gf_Level2SpawnWavesScourgeDownBack_lp_intervalMax;

    int auto65881B2D_ae;
    int auto65881B2D_ai;

    // Variable Declarations
    int lv_index;
    fixed lv_speed;
    fixed lv_speed1;
    fixed lv_intervalTime;

    // Variable Initialization
    lv_intervalTime = -1.0;

    // Implementation
    lv_speed = 7.0;
    lv_speed1 = 3.0;
    auto65881B2D_ae = lp_count;
    auto65881B2D_ai = 1;
    lv_index = 1;
    for ( ; ( (auto65881B2D_ai >= 0 && lv_index <= auto65881B2D_ae) || (auto65881B2D_ai <= 0 && lv_index >= auto65881B2D_ae) ) ; lv_index += auto65881B2D_ai ) {
        gf_SendWave("SS_Scourge", 1, 0.0, Point(RandomFixed(lp_x1, lp_x2), 1.0), 3, RandomFixed(-11.0, -14.0), 0.0, 0.0, 0.0, lv_speed, lv_speed1, 0, false);
        if ((lv_intervalTime < 0.0)) {
            lv_intervalTime = RandomFixed(0.0, lp_intervalMax);
            Wait(lv_intervalTime, c_timeGame);
        }
        else {
            lv_intervalTime = (lp_intervalMax - lv_intervalTime);
            Wait(lv_intervalTime, c_timeGame);
            lv_intervalTime = -1.0;
        }
    }
    return true;
}

trigger auto_gf_Level2SpawnWavesScourgePatternFlyAway_Trigger = null;

void gf_Level2SpawnWavesScourgePatternFlyAway () {
    if (auto_gf_Level2SpawnWavesScourgePatternFlyAway_Trigger == null) {
        auto_gf_Level2SpawnWavesScourgePatternFlyAway_Trigger = TriggerCreate("auto_gf_Level2SpawnWavesScourgePatternFlyAway_TriggerFunc");
    }

    TriggerExecute(auto_gf_Level2SpawnWavesScourgePatternFlyAway_Trigger, false, false);
}

bool auto_gf_Level2SpawnWavesScourgePatternFlyAway_TriggerFunc (bool testConds, bool runActions) {
    int auto4F469A0C_ae;
    int auto4F469A0C_ai;
    int auto7F30F6AF_ae;
    int auto7F30F6AF_ai;
    int autoD7E0F7A2_ae;
    int autoD7E0F7A2_ai;
    int auto68C96E7E_ae;
    int auto68C96E7E_ai;

    // Variable Declarations
    fixed lv_y;
    fixed lv_x;
    fixed lv_xOff1;
    fixed lv_xOff2;
    fixed lv_yOff1;
    fixed lv_yOff2;
    int lv_index;
    fixed lv_wait;
    fixed lv_speed;
    fixed lv_speed1;

    // Variable Initialization
    lv_xOff1 = -2.0;
    lv_xOff2 = 22.0;

    // Implementation
    gf_Level2ScourgeSound();
    lv_wait = 6.0;
    lv_speed = 12.0;
    lv_xOff1 = 2.0;
    lv_xOff2 = 22.0;
    lv_yOff1 = -16.0;
    lv_yOff2 = -16.0;
    lv_x = 5.0;
    lv_y = -2.0;
    auto4F469A0C_ae = 5;
    auto4F469A0C_ai = 1;
    lv_index = 1;
    for ( ; ( (auto4F469A0C_ai >= 0 && lv_index <= auto4F469A0C_ae) || (auto4F469A0C_ai <= 0 && lv_index >= auto4F469A0C_ae) ) ; lv_index += auto4F469A0C_ai ) {
        gf_SendWave("SS_Scourge", 1, 1.0, Point(RandomFixed(lv_xOff1, lv_xOff2), 1.0), 2, lv_x, lv_y, RandomFixed(lv_xOff1, lv_xOff2), RandomFixed(lv_yOff1, lv_yOff2), lv_speed, lv_wait, 0, true);
        lv_x += 2.0;
    }
    lv_x = 6.0;
    lv_y = -3.0;
    auto7F30F6AF_ae = 5;
    auto7F30F6AF_ai = 1;
    lv_index = 1;
    for ( ; ( (auto7F30F6AF_ai >= 0 && lv_index <= auto7F30F6AF_ae) || (auto7F30F6AF_ai <= 0 && lv_index >= auto7F30F6AF_ae) ) ; lv_index += auto7F30F6AF_ai ) {
        gf_SendWave("SS_Scourge", 1, 1.0, Point(RandomFixed(lv_xOff1, lv_xOff2), 1.0), 2, lv_x, lv_y, RandomFixed(lv_xOff1, lv_xOff2), RandomFixed(lv_yOff1, lv_yOff2), lv_speed, lv_wait, 0, true);
        lv_x += 2.0;
    }
    lv_x = 5.0;
    lv_y = -4.0;
    autoD7E0F7A2_ae = 5;
    autoD7E0F7A2_ai = 1;
    lv_index = 1;
    for ( ; ( (autoD7E0F7A2_ai >= 0 && lv_index <= autoD7E0F7A2_ae) || (autoD7E0F7A2_ai <= 0 && lv_index >= autoD7E0F7A2_ae) ) ; lv_index += autoD7E0F7A2_ai ) {
        gf_SendWave("SS_Scourge", 1, 1.0, Point(RandomFixed(lv_xOff1, lv_xOff2), 1.0), 2, lv_x, lv_y, RandomFixed(lv_xOff1, lv_xOff2), RandomFixed(lv_yOff1, lv_yOff2), lv_speed, lv_wait, 0, true);
        lv_x += 2.0;
    }
    lv_x = 6.0;
    lv_y = -5.0;
    auto68C96E7E_ae = 5;
    auto68C96E7E_ai = 1;
    lv_index = 1;
    for ( ; ( (auto68C96E7E_ai >= 0 && lv_index <= auto68C96E7E_ae) || (auto68C96E7E_ai <= 0 && lv_index >= auto68C96E7E_ae) ) ; lv_index += auto68C96E7E_ai ) {
        gf_SendWave("SS_Scourge", 1, 1.0, Point(RandomFixed(lv_xOff1, lv_xOff2), 1.0), 2, lv_x, lv_y, RandomFixed(lv_xOff1, lv_xOff2), RandomFixed(lv_yOff1, lv_yOff2), lv_speed, lv_wait, 0, true);
        lv_x += 2.0;
    }
    return true;
}

trigger auto_gf_Level2ScourgeSound_Trigger = null;

void gf_Level2ScourgeSound () {
    if (auto_gf_Level2ScourgeSound_Trigger == null) {
        auto_gf_Level2ScourgeSound_Trigger = TriggerCreate("auto_gf_Level2ScourgeSound_TriggerFunc");
    }

    TriggerExecute(auto_gf_Level2ScourgeSound_Trigger, false, false);
}

bool auto_gf_Level2ScourgeSound_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    SoundPlay(SoundLink("Mutalisk_Attack", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(0.1, c_timeGame);
    SoundPlay(SoundLink("Mutalisk_Attack", 2), PlayerGroupAll(), 100.0, 0.0);
    Wait(0.1, c_timeGame);
    SoundPlay(SoundLink("Mutalisk_Attack", 8), PlayerGroupAll(), 100.0, 0.0);
    Wait(0.5, c_timeGame);
    SoundPlay(SoundLink("Mutalisk_Attack", 5), PlayerGroupAll(), 100.0, 0.0);
    return true;
}

trigger auto_gf_Level2SwarmGuardianMovement_Trigger = null;
unit auto_gf_Level2SwarmGuardianMovement_lp_guardian;
point auto_gf_Level2SwarmGuardianMovement_lp_center;

void gf_Level2SwarmGuardianMovement (unit lp_guardian, point lp_center) {
    auto_gf_Level2SwarmGuardianMovement_lp_guardian = lp_guardian;
    auto_gf_Level2SwarmGuardianMovement_lp_center = lp_center;

    if (auto_gf_Level2SwarmGuardianMovement_Trigger == null) {
        auto_gf_Level2SwarmGuardianMovement_Trigger = TriggerCreate("auto_gf_Level2SwarmGuardianMovement_TriggerFunc");
    }

    TriggerExecute(auto_gf_Level2SwarmGuardianMovement_Trigger, false, false);
}

bool auto_gf_Level2SwarmGuardianMovement_TriggerFunc (bool testConds, bool runActions) {
    unit lp_guardian = auto_gf_Level2SwarmGuardianMovement_lp_guardian;
    point lp_center = auto_gf_Level2SwarmGuardianMovement_lp_center;

    // Variable Declarations
    point lv_target;

    // Variable Initialization

    // Implementation
    while (true) {
        if ((UnitIsAlive(lp_guardian) == false)) {
            return true;
        }
        else {
        }
        if ((UnitGetCustomValue(lp_guardian, 0) != 0.0)) {
            return true;
        }
        else {
        }
        lv_target = PointWithOffset(lp_center, RandomFixed(-3.0, 3.0), RandomFixed(-1.5, 1.5));
        UnitIssueOrder(lp_guardian, OrderTargetingPoint(AbilityCommand("move", 0), lv_target), c_orderQueueReplace);
        Wait(RandomFixed(0.5, 3.0), c_timeGame);
    }
    return true;
}

void gf_Level2SpawnBoss () {
    // Implementation
    gf_DisplayBossComingMessage(StringExternal("Param/Value/1842301C"));
    TriggerExecute(gt_SpawnLevel2BossLeviathan, true, false);
    while (!((gv_levelCleared == true))) {
        Wait(0.25, c_timeGame);
    }
}

void gf_Level2Cleared () {
    // Implementation
    gf_LevelCleared(2, (gv_gameResult != 4));
}

void gf_Level2ClearUp () {
    // Implementation
    TriggerStop(gt_Level2SpawnWaves);
    TriggerStop(gt_Level2BossLeviathanBehavior);
    TriggerStop(gt_Level2BossLeviathanCharge);
    TriggerStop(gt_Level2BossLeviathanTentacle);
    CameraShakeStop(gv_p1_USER);
}

trigger auto_gf_Level2BossLeviathanSpawnBombs_Trigger = null;
int auto_gf_Level2BossLeviathanSpawnBombs_lp_count;

void gf_Level2BossLeviathanSpawnBombs (int lp_count) {
    auto_gf_Level2BossLeviathanSpawnBombs_lp_count = lp_count;

    if (auto_gf_Level2BossLeviathanSpawnBombs_Trigger == null) {
        auto_gf_Level2BossLeviathanSpawnBombs_Trigger = TriggerCreate("auto_gf_Level2BossLeviathanSpawnBombs_TriggerFunc");
    }

    TriggerExecute(auto_gf_Level2BossLeviathanSpawnBombs_Trigger, false, false);
}

bool auto_gf_Level2BossLeviathanSpawnBombs_TriggerFunc (bool testConds, bool runActions) {
    int lp_count = auto_gf_Level2BossLeviathanSpawnBombs_lp_count;

    int autoBC9EC98B_n;
    int autoBC9EC98B_i;

    // Implementation
    autoBC9EC98B_n = lp_count;
    for (autoBC9EC98B_i = 1; autoBC9EC98B_i <= autoBC9EC98B_n; autoBC9EC98B_i += 1) {
        UnitIssueOrder(gv_boss, Order(AbilityCommand("SS_LeviathanSpawnBombs", 0)), c_orderQueueReplace);
        Wait(6.0, c_timeGame);
    }
    return true;
}

void gf_Level2BossLeviathanMove (fixed lp_x) {
    // Variable Declarations
    point lv_posCurrent;
    fixed lv_xNew;
    point lv_targetLoc;

    // Variable Initialization

    // Implementation
    lv_posCurrent = UnitGetPosition(gv_boss);
    lv_xNew = (PointGetX(lv_posCurrent) + ((lp_x - PointGetX(lv_posCurrent)) * 0.5));
    lv_targetLoc = Point(MaxF(gf_ConvertShooterXToMapX(5.0), MinF(gf_ConvertShooterXToMapX(15.0), lv_xNew)), gf_ConvertShooterYToMapY(gv_c_LeviathanY));
    UnitIssueOrder(gv_boss, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetLoc), c_orderQueueReplace);
}

void gf_Level3Preload () {
}

void gf_Level3Start () {
    // Implementation
    if ((gv_gameResult != 0)) {
        return ;
    }
    else {
    }
    PlayerSetColorIndex(gv_p2_ENEMY, 1, true);
    gf_InitBackground(9, 10, 11, 0, 0);
    GameSetBackground(c_backgroundFixed, "SS_BackgroundSpaceTerranLarge", 100.0);
    gv_levelLight = "ArcadeSkyboxSpaceLight";
    GameSetLighting(gv_levelLight, 0.0);
    gf_LevelStart(3);
    Wait(7.0, c_timeGame);
    gf_DestoryLevelStartLabel(false);
    if ((gv_gameResult != 0) && (gv_gameResult != 4)) {
        return ;
    }
    else {
    }
    if ((gv_levelCleared == false)) {
        if ((gv_debug_BossCheatEnabled == false)) {
            gf_Level3SpawnWaves();
        }
        else {
        }
        if ((gv_gameResult != 0) && (gv_gameResult != 4)) {
            return ;
        }
        else {
        }
        if ((gv_levelCleared == false)) {
            gf_Level3SpawnBoss();
            if ((gv_gameResult != 0) && (gv_gameResult != 4)) {
                return ;
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
    gf_Level3Cleared();
}

void gf_Level3SpawnWaves () {
    // Implementation
    TriggerExecute(gt_Level3SpawnWaves, true, true);
}

trigger auto_gf_Level3SpawnWavesWraithGroupDrop_Trigger = null;
fixed auto_gf_Level3SpawnWavesWraithGroupDrop_lp_centerX;
int auto_gf_Level3SpawnWavesWraithGroupDrop_lp_bullet;
bool auto_gf_Level3SpawnWavesWraithGroupDrop_lp_targetViking;

void gf_Level3SpawnWavesWraithGroupDrop (fixed lp_centerX, int lp_bullet, bool lp_targetViking) {
    auto_gf_Level3SpawnWavesWraithGroupDrop_lp_centerX = lp_centerX;
    auto_gf_Level3SpawnWavesWraithGroupDrop_lp_bullet = lp_bullet;
    auto_gf_Level3SpawnWavesWraithGroupDrop_lp_targetViking = lp_targetViking;

    if (auto_gf_Level3SpawnWavesWraithGroupDrop_Trigger == null) {
        auto_gf_Level3SpawnWavesWraithGroupDrop_Trigger = TriggerCreate("auto_gf_Level3SpawnWavesWraithGroupDrop_TriggerFunc");
    }

    TriggerExecute(auto_gf_Level3SpawnWavesWraithGroupDrop_Trigger, false, false);
}

bool auto_gf_Level3SpawnWavesWraithGroupDrop_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_centerX = auto_gf_Level3SpawnWavesWraithGroupDrop_lp_centerX;
    int lp_bullet = auto_gf_Level3SpawnWavesWraithGroupDrop_lp_bullet;
    bool lp_targetViking = auto_gf_Level3SpawnWavesWraithGroupDrop_lp_targetViking;

    int autoE9518B94_ae;
    int autoE9518B94_ai;
    int auto4F293FB9_ae;
    int auto4F293FB9_ai;

    // Variable Declarations
    fixed lv_speedInit;
    fixed lv_speed;
    fixed lv_x;
    int lv_index;
    int lv_shoot;

    // Variable Initialization

    // Implementation
    lv_speedInit = 2.5;
    lv_speed = 2.5;
    autoE9518B94_ae = 4;
    autoE9518B94_ai = 4;
    lv_index = -4;
    for ( ; ( (autoE9518B94_ai >= 0 && lv_index <= autoE9518B94_ae) || (autoE9518B94_ai <= 0 && lv_index >= autoE9518B94_ae) ) ; lv_index += autoE9518B94_ai ) {
        lv_x = (lp_centerX + (IntToFixed(lv_index) + 0.0));
        if ((RandomInt(1, 10) <= lp_bullet)) {
            lv_shoot = 1;
        }
        else {
            lv_shoot = 0;
        }
        gf_SendWaveMoveDrop("SS_Wraith", 1, 0.5, lv_x, 1.0, lv_x, 1.0, lv_speedInit, lv_speed, 0.0, lv_shoot, lp_targetViking);
    }
    auto4F293FB9_ae = 7;
    auto4F293FB9_ai = 2;
    lv_index = -7;
    for ( ; ( (auto4F293FB9_ai >= 0 && lv_index <= auto4F293FB9_ae) || (auto4F293FB9_ai <= 0 && lv_index >= auto4F293FB9_ae) ) ; lv_index += auto4F293FB9_ai ) {
        lv_x = (lp_centerX + (IntToFixed(lv_index) + 0.0));
        if ((RandomInt(1, 10) <= lp_bullet)) {
            lv_shoot = 1;
        }
        else {
            lv_shoot = 0;
        }
        gf_SendWaveMoveDrop("SS_Wraith", 1, 0.5, lv_x, 3.0, lv_x, 1.0, lv_speedInit, lv_speed, 0.0, lv_shoot, lp_targetViking);
    }
    return true;
}

trigger auto_gf_Level3SpawnWavesWraithMassGroupDrop_Trigger = null;
int auto_gf_Level3SpawnWavesWraithMassGroupDrop_lp_count;
int auto_gf_Level3SpawnWavesWraithMassGroupDrop_lp_bullet;
bool auto_gf_Level3SpawnWavesWraithMassGroupDrop_lp_targetViking;

void gf_Level3SpawnWavesWraithMassGroupDrop (int lp_count, int lp_bullet, bool lp_targetViking) {
    auto_gf_Level3SpawnWavesWraithMassGroupDrop_lp_count = lp_count;
    auto_gf_Level3SpawnWavesWraithMassGroupDrop_lp_bullet = lp_bullet;
    auto_gf_Level3SpawnWavesWraithMassGroupDrop_lp_targetViking = lp_targetViking;

    if (auto_gf_Level3SpawnWavesWraithMassGroupDrop_Trigger == null) {
        auto_gf_Level3SpawnWavesWraithMassGroupDrop_Trigger = TriggerCreate("auto_gf_Level3SpawnWavesWraithMassGroupDrop_TriggerFunc");
    }

    TriggerExecute(auto_gf_Level3SpawnWavesWraithMassGroupDrop_Trigger, false, false);
}

bool auto_gf_Level3SpawnWavesWraithMassGroupDrop_TriggerFunc (bool testConds, bool runActions) {
    int lp_count = auto_gf_Level3SpawnWavesWraithMassGroupDrop_lp_count;
    int lp_bullet = auto_gf_Level3SpawnWavesWraithMassGroupDrop_lp_bullet;
    bool lp_targetViking = auto_gf_Level3SpawnWavesWraithMassGroupDrop_lp_targetViking;

    int autoAFF3EE78_ae;
    int autoAFF3EE78_ai;
    int auto0773EA21_n;
    int auto0773EA21_i;

    // Variable Declarations
    fixed lv_speedInit;
    fixed lv_speed;
    fixed lv_x;
    fixed lv_y;
    int lv_index;
    int lv_shoot;
    int lv_countAdded;

    // Variable Initialization

    // Implementation
    lv_speedInit = 2.5;
    lv_speed = 2.5;
    lv_countAdded = 0;
    autoAFF3EE78_ae = 99;
    autoAFF3EE78_ai = 1;
    lv_index = 1;
    for ( ; ( (autoAFF3EE78_ai >= 0 && lv_index <= autoAFF3EE78_ae) || (autoAFF3EE78_ai <= 0 && lv_index >= autoAFF3EE78_ae) ) ; lv_index += autoAFF3EE78_ai ) {
        lv_x = 0.0;
        auto0773EA21_n = 10;
        for (auto0773EA21_i = 1; auto0773EA21_i <= auto0773EA21_n; auto0773EA21_i += 1) {
            if ((lv_countAdded > lp_count)) {
                return true;
            }
            else {
            }
            if ((RandomInt(1, lp_count) <= lp_bullet)) {
                lv_shoot = 1;
            }
            else {
                lv_shoot = 0;
            }
            lv_x += RandomFixed(1.0, 6.0);
            if ((lv_x > 19.0)) {
                break;
            }
            else {
            }
            gf_SendWaveMoveDrop("SS_Wraith", 1, 0.5, lv_x, 2.0, lv_x, 1.0, lv_speedInit, lv_speed, 0.0, lv_shoot, lp_targetViking);
            lv_countAdded += 1;
        }
        Wait(0.5, c_timeReal);
    }
    return true;
}

trigger auto_gf_Level3SpawnWavesWraithGroupHMove_Trigger = null;
fixed auto_gf_Level3SpawnWavesWraithGroupHMove_lp_y;
int auto_gf_Level3SpawnWavesWraithGroupHMove_lp_count;
bool auto_gf_Level3SpawnWavesWraithGroupHMove_lp_leftToRight;
fixed auto_gf_Level3SpawnWavesWraithGroupHMove_lp_speed;
int auto_gf_Level3SpawnWavesWraithGroupHMove_lp_bullet;

void gf_Level3SpawnWavesWraithGroupHMove (fixed lp_y, int lp_count, bool lp_leftToRight, fixed lp_speed, int lp_bullet) {
    auto_gf_Level3SpawnWavesWraithGroupHMove_lp_y = lp_y;
    auto_gf_Level3SpawnWavesWraithGroupHMove_lp_count = lp_count;
    auto_gf_Level3SpawnWavesWraithGroupHMove_lp_leftToRight = lp_leftToRight;
    auto_gf_Level3SpawnWavesWraithGroupHMove_lp_speed = lp_speed;
    auto_gf_Level3SpawnWavesWraithGroupHMove_lp_bullet = lp_bullet;

    if (auto_gf_Level3SpawnWavesWraithGroupHMove_Trigger == null) {
        auto_gf_Level3SpawnWavesWraithGroupHMove_Trigger = TriggerCreate("auto_gf_Level3SpawnWavesWraithGroupHMove_TriggerFunc");
    }

    TriggerExecute(auto_gf_Level3SpawnWavesWraithGroupHMove_Trigger, false, false);
}

bool auto_gf_Level3SpawnWavesWraithGroupHMove_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_y = auto_gf_Level3SpawnWavesWraithGroupHMove_lp_y;
    int lp_count = auto_gf_Level3SpawnWavesWraithGroupHMove_lp_count;
    bool lp_leftToRight = auto_gf_Level3SpawnWavesWraithGroupHMove_lp_leftToRight;
    fixed lp_speed = auto_gf_Level3SpawnWavesWraithGroupHMove_lp_speed;
    int lp_bullet = auto_gf_Level3SpawnWavesWraithGroupHMove_lp_bullet;

    // Variable Declarations
    fixed lv_x1;
    fixed lv_x2;
    fixed lv_x3;
    int lv_index;

    // Variable Initialization

    // Implementation
    if ((lp_leftToRight == true)) {
        lv_x1 = -4.0;
        lv_x2 = -3.0;
        lv_x3 = 23.0;
    }
    else {
        lv_x1 = 24.0;
        lv_x2 = 23.0;
        lv_x3 = -2.0;
    }
    gf_SendWaveStraightLine("SS_Wraith", lp_count, (2.5 / lp_speed), lv_x1, lp_y, lv_x2, lp_y, lp_speed, lp_bullet, true);
    return true;
}

trigger auto_gf_Level3SpawnWavesWraithGroupVMove_Trigger = null;
fixed auto_gf_Level3SpawnWavesWraithGroupVMove_lp_x;
int auto_gf_Level3SpawnWavesWraithGroupVMove_lp_count;
fixed auto_gf_Level3SpawnWavesWraithGroupVMove_lp_speed;
int auto_gf_Level3SpawnWavesWraithGroupVMove_lp_bullet;

void gf_Level3SpawnWavesWraithGroupVMove (fixed lp_x, int lp_count, fixed lp_speed, int lp_bullet) {
    auto_gf_Level3SpawnWavesWraithGroupVMove_lp_x = lp_x;
    auto_gf_Level3SpawnWavesWraithGroupVMove_lp_count = lp_count;
    auto_gf_Level3SpawnWavesWraithGroupVMove_lp_speed = lp_speed;
    auto_gf_Level3SpawnWavesWraithGroupVMove_lp_bullet = lp_bullet;

    if (auto_gf_Level3SpawnWavesWraithGroupVMove_Trigger == null) {
        auto_gf_Level3SpawnWavesWraithGroupVMove_Trigger = TriggerCreate("auto_gf_Level3SpawnWavesWraithGroupVMove_TriggerFunc");
    }

    TriggerExecute(auto_gf_Level3SpawnWavesWraithGroupVMove_Trigger, false, false);
}

bool auto_gf_Level3SpawnWavesWraithGroupVMove_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_x = auto_gf_Level3SpawnWavesWraithGroupVMove_lp_x;
    int lp_count = auto_gf_Level3SpawnWavesWraithGroupVMove_lp_count;
    fixed lp_speed = auto_gf_Level3SpawnWavesWraithGroupVMove_lp_speed;
    int lp_bullet = auto_gf_Level3SpawnWavesWraithGroupVMove_lp_bullet;

    // Variable Declarations
    fixed lv_y1;
    fixed lv_y2;
    int lv_index;

    // Variable Initialization

    // Implementation
    lv_y1 = 3.0;
    lv_y2 = 2.0;
    gf_SendWaveMoveDrop("SS_Wraith", lp_count, 0.5, lp_x, lv_y1, lp_x, lv_y2, lp_speed, lp_speed, 0.0, lp_bullet, true);
    return true;
}

trigger auto_gf_Level3SpawnWavesWraithGroupDropBack_Trigger = null;
fixed auto_gf_Level3SpawnWavesWraithGroupDropBack_lp_centerX;

void gf_Level3SpawnWavesWraithGroupDropBack (fixed lp_centerX) {
    auto_gf_Level3SpawnWavesWraithGroupDropBack_lp_centerX = lp_centerX;

    if (auto_gf_Level3SpawnWavesWraithGroupDropBack_Trigger == null) {
        auto_gf_Level3SpawnWavesWraithGroupDropBack_Trigger = TriggerCreate("auto_gf_Level3SpawnWavesWraithGroupDropBack_TriggerFunc");
    }

    TriggerExecute(auto_gf_Level3SpawnWavesWraithGroupDropBack_Trigger, false, false);
}

bool auto_gf_Level3SpawnWavesWraithGroupDropBack_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_centerX = auto_gf_Level3SpawnWavesWraithGroupDropBack_lp_centerX;

    // Variable Declarations
    fixed lv_speed1;
    fixed lv_speed2;
    fixed lv_x;
    int lv_index;

    // Variable Initialization

    // Implementation
    lv_speed1 = 7.0;
    lv_speed2 = 5.0;
    lv_x = (lp_centerX + 0.0);
    gf_SendWaveDropBack("SS_Wraith", 1, 0.5, lv_x, 2.0, -7.0, 7.0, 5.0, 1, true);
    Wait(0.5, c_timeGame);
    lv_x = (lp_centerX + 2.0);
    gf_SendWaveDropBack("SS_Wraith", 1, 0.5, lv_x, 2.0, -7.0, 7.0, 5.0, 1, true);
    lv_x = (lp_centerX - 2.0);
    gf_SendWaveDropBack("SS_Wraith", 1, 0.5, lv_x, 2.0, -7.0, 7.0, 5.0, 1, true);
    Wait(0.5, c_timeGame);
    lv_x = (lp_centerX + 4.0);
    gf_SendWaveDropBack("SS_Wraith", 1, 0.5, lv_x, 2.0, -7.0, 7.0, 5.0, 1, true);
    lv_x = (lp_centerX - 4.0);
    gf_SendWaveDropBack("SS_Wraith", 1, 0.5, lv_x, 2.0, -7.0, 7.0, 5.0, 1, true);
    return true;
}

trigger auto_gf_SpawnSingleLightningProjector_Trigger = null;
bool auto_gf_SpawnSingleLightningProjector_lp_leftSide;
fixed auto_gf_SpawnSingleLightningProjector_lp_moveSpeed;
fixed auto_gf_SpawnSingleLightningProjector_lp_onTime;
fixed auto_gf_SpawnSingleLightningProjector_lp_offTime;

void gf_SpawnSingleLightningProjector (bool lp_leftSide, fixed lp_moveSpeed, fixed lp_onTime, fixed lp_offTime) {
    auto_gf_SpawnSingleLightningProjector_lp_leftSide = lp_leftSide;
    auto_gf_SpawnSingleLightningProjector_lp_moveSpeed = lp_moveSpeed;
    auto_gf_SpawnSingleLightningProjector_lp_onTime = lp_onTime;
    auto_gf_SpawnSingleLightningProjector_lp_offTime = lp_offTime;

    if (auto_gf_SpawnSingleLightningProjector_Trigger == null) {
        auto_gf_SpawnSingleLightningProjector_Trigger = TriggerCreate("auto_gf_SpawnSingleLightningProjector_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnSingleLightningProjector_Trigger, false, false);
}

bool auto_gf_SpawnSingleLightningProjector_TriggerFunc (bool testConds, bool runActions) {
    bool lp_leftSide = auto_gf_SpawnSingleLightningProjector_lp_leftSide;
    fixed lp_moveSpeed = auto_gf_SpawnSingleLightningProjector_lp_moveSpeed;
    fixed lp_onTime = auto_gf_SpawnSingleLightningProjector_lp_onTime;
    fixed lp_offTime = auto_gf_SpawnSingleLightningProjector_lp_offTime;

    // Variable Declarations
    unit lv_lightningProjector;

    // Variable Initialization

    // Implementation
    if ((lp_leftSide == true)) {
        gf_SendWaveMoveDrop("SS_LightningProjectorFaceRight", 1, 0.5, -0.5, 1.0, -0.5, 1.0, lp_moveSpeed, lp_moveSpeed, 0.0, 0, false);
    }
    else {
        gf_SendWaveMoveDrop("SS_LightningProjectorFaceLeft", 1, 0.5, 20.5, 1.0, 20.5, 1.0, lp_moveSpeed, lp_moveSpeed, 0.0, 0, false);
    }
    lv_lightningProjector = gv_spawnedLightningProjector;
    UnitIssueOrder(lv_lightningProjector, Order(AbilityCommand("SS_LightningProjectorToggle", 0)), c_orderQueueReplace);
    while (true) {
        Wait(lp_onTime, c_timeGame);
        if ((UnitIsAlive(lv_lightningProjector) == false)) {
            return true;
        }
        else {
        }
        UnitIssueOrder(lv_lightningProjector, Order(AbilityCommand("SS_LightningProjectorToggle", 1)), c_orderQueueReplace);
        Wait(lp_offTime, c_timeGame);
        if ((UnitIsAlive(lv_lightningProjector) == false)) {
            return true;
        }
        else {
        }
        UnitIssueOrder(lv_lightningProjector, Order(AbilityCommand("SS_LightningProjectorToggle", 0)), c_orderQueueReplace);
    }
    return true;
}

trigger auto_gf_SpawnLightningProjectors_Trigger = null;
int auto_gf_SpawnLightningProjectors_lp_numberOfProjectors;
fixed auto_gf_SpawnLightningProjectors_lp_distanceApart;
fixed auto_gf_SpawnLightningProjectors_lp_moveSpeed;
fixed auto_gf_SpawnLightningProjectors_lp_onTime;
fixed auto_gf_SpawnLightningProjectors_lp_offTime;
bool auto_gf_SpawnLightningProjectors_lp_alternateLR;

void gf_SpawnLightningProjectors (int lp_numberOfProjectors, fixed lp_distanceApart, fixed lp_moveSpeed, fixed lp_onTime, fixed lp_offTime, bool lp_alternateLR) {
    auto_gf_SpawnLightningProjectors_lp_numberOfProjectors = lp_numberOfProjectors;
    auto_gf_SpawnLightningProjectors_lp_distanceApart = lp_distanceApart;
    auto_gf_SpawnLightningProjectors_lp_moveSpeed = lp_moveSpeed;
    auto_gf_SpawnLightningProjectors_lp_onTime = lp_onTime;
    auto_gf_SpawnLightningProjectors_lp_offTime = lp_offTime;
    auto_gf_SpawnLightningProjectors_lp_alternateLR = lp_alternateLR;

    if (auto_gf_SpawnLightningProjectors_Trigger == null) {
        auto_gf_SpawnLightningProjectors_Trigger = TriggerCreate("auto_gf_SpawnLightningProjectors_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnLightningProjectors_Trigger, false, false);
}

bool auto_gf_SpawnLightningProjectors_TriggerFunc (bool testConds, bool runActions) {
    int lp_numberOfProjectors = auto_gf_SpawnLightningProjectors_lp_numberOfProjectors;
    fixed lp_distanceApart = auto_gf_SpawnLightningProjectors_lp_distanceApart;
    fixed lp_moveSpeed = auto_gf_SpawnLightningProjectors_lp_moveSpeed;
    fixed lp_onTime = auto_gf_SpawnLightningProjectors_lp_onTime;
    fixed lp_offTime = auto_gf_SpawnLightningProjectors_lp_offTime;
    bool lp_alternateLR = auto_gf_SpawnLightningProjectors_lp_alternateLR;

    int auto8143A355_ae;
    int auto8143A355_ai;

    // Variable Declarations
    int lv_i;
    bool lv_leftSide;

    // Variable Initialization

    // Implementation
    if ((gv_repeatTimes == 0)) {
        return true;
    }
    else {
    }
    if ((RandomInt(0, 1) == 1)) {
        lv_leftSide = true;
    }
    else {
        lv_leftSide = false;
    }
    auto8143A355_ae = lp_numberOfProjectors;
    auto8143A355_ai = 1;
    lv_i = 1;
    for ( ; ( (auto8143A355_ai >= 0 && lv_i <= auto8143A355_ae) || (auto8143A355_ai <= 0 && lv_i >= auto8143A355_ae) ) ; lv_i += auto8143A355_ai ) {
        gf_SpawnSingleLightningProjector(lv_leftSide, lp_moveSpeed, lp_onTime, lp_offTime);
        if ((lp_alternateLR == true)) {
            lv_leftSide = !(lv_leftSide);
        }
        else {
        }
        Wait((lp_distanceApart / lp_moveSpeed), c_timeGame);
    }
    return true;
}

trigger auto_gf_Level3ScienceVesselMovement_Trigger = null;
unit auto_gf_Level3ScienceVesselMovement_lp_scienceVessel;
point auto_gf_Level3ScienceVesselMovement_lp_center;

void gf_Level3ScienceVesselMovement (unit lp_scienceVessel, point lp_center) {
    auto_gf_Level3ScienceVesselMovement_lp_scienceVessel = lp_scienceVessel;
    auto_gf_Level3ScienceVesselMovement_lp_center = lp_center;

    if (auto_gf_Level3ScienceVesselMovement_Trigger == null) {
        auto_gf_Level3ScienceVesselMovement_Trigger = TriggerCreate("auto_gf_Level3ScienceVesselMovement_TriggerFunc");
    }

    TriggerExecute(auto_gf_Level3ScienceVesselMovement_Trigger, false, false);
}

bool auto_gf_Level3ScienceVesselMovement_TriggerFunc (bool testConds, bool runActions) {
    unit lp_scienceVessel = auto_gf_Level3ScienceVesselMovement_lp_scienceVessel;
    point lp_center = auto_gf_Level3ScienceVesselMovement_lp_center;

    // Variable Declarations
    point lv_target;
    bool lv_pointValid;

    // Variable Initialization

    // Implementation
    while (true) {
        if ((UnitIsAlive(lp_scienceVessel) == false)) {
            return true;
        }
        else {
        }
        if ((UnitGetCustomValue(lp_scienceVessel, 0) != 0.0)) {
            return true;
        }
        else {
        }
        lv_pointValid = false;
        while ((lv_pointValid == false)) {
            lv_target = PointWithOffset(lp_center, RandomFixed(-4.0, 4.0), RandomFixed(-1.5, 1.5));
            if ((DistanceBetweenPoints(UnitGetPosition(lp_scienceVessel), lv_target) > 1.5)) {
                lv_pointValid = true;
            }
            else {
            }
        }
        UnitIssueOrder(lp_scienceVessel, OrderTargetingPoint(AbilityCommand("SS_ScienceVesselTeleport", 0), lv_target), c_orderQueueReplace);
        Wait(RandomFixed(5.0, 10.0), c_timeGame);
    }
    return true;
}

trigger auto_gf_Level3BattlecruiserBehavior_Trigger = null;
unit auto_gf_Level3BattlecruiserBehavior_lp_battlecruiser;
point auto_gf_Level3BattlecruiserBehavior_lp_center;

void gf_Level3BattlecruiserBehavior (unit lp_battlecruiser, point lp_center) {
    auto_gf_Level3BattlecruiserBehavior_lp_battlecruiser = lp_battlecruiser;
    auto_gf_Level3BattlecruiserBehavior_lp_center = lp_center;

    if (auto_gf_Level3BattlecruiserBehavior_Trigger == null) {
        auto_gf_Level3BattlecruiserBehavior_Trigger = TriggerCreate("auto_gf_Level3BattlecruiserBehavior_TriggerFunc");
    }

    TriggerExecute(auto_gf_Level3BattlecruiserBehavior_Trigger, false, false);
}

bool auto_gf_Level3BattlecruiserBehavior_TriggerFunc (bool testConds, bool runActions) {
    unit lp_battlecruiser = auto_gf_Level3BattlecruiserBehavior_lp_battlecruiser;
    point lp_center = auto_gf_Level3BattlecruiserBehavior_lp_center;

    int auto3D5D2CBB_n;
    int auto3D5D2CBB_i;

    // Variable Declarations
    point lv_target;

    // Variable Initialization

    // Implementation
    while (true) {
        if ((UnitIsAlive(lp_battlecruiser) == false)) {
            return true;
        }
        else {
        }
        if ((UnitGetCustomValue(lp_battlecruiser, 0) != 0.0)) {
            return true;
        }
        else {
        }
        lv_target = PointWithOffset(lp_center, RandomFixed(-4.0, 4.0), RandomFixed(-1.5, 1.5));
        UnitIssueOrder(lp_battlecruiser, OrderTargetingPoint(AbilityCommand("move", 0), lv_target), c_orderQueueReplace);
        while (!(((UnitIsAlive(lp_battlecruiser) == false) || (UnitTestState(lp_battlecruiser, c_unitStateIdle) == true)))) {
            Wait(1.0, c_timeGame);
        }
        Wait(RandomFixed(1.0, 2.0), c_timeGame);
        if ((UnitIsAlive(lp_battlecruiser) == false)) {
            return true;
        }
        else {
        }
        if ((RandomInt(1, 3) == 1)) {
            libNtve_gf_SendActorMessageToUnit(lp_battlecruiser, "AnimBracketStart HunterSeeker Stand,Work,Start Stand,Work Stand,Work,End");
            Wait(1.0, c_timeGame);
            auto3D5D2CBB_n = 4;
            for (auto3D5D2CBB_i = 1; auto3D5D2CBB_i <= auto3D5D2CBB_n; auto3D5D2CBB_i += 1) {
                UnitIssueOrder(lp_battlecruiser, OrderTargetingUnit(AbilityCommand("SS_BattlecruiserHunterSeekerAttack", 0), gv_viking), c_orderQueueReplace);
                Wait(2.0, c_timeGame);
            }
            if ((UnitIsAlive(lp_battlecruiser) == false)) {
                return true;
            }
            else {
            }
            libNtve_gf_SendActorMessageToUnit(lp_battlecruiser, "AnimBracketStop HunterSeeker");
        }
        else {
            UnitIssueOrder(lp_battlecruiser, Order(AbilityCommand("SS_BattlecruiserMissileAttack", 0)), c_orderQueueReplace);
        }
        Wait(RandomFixed(4.0, 6.0), c_timeGame);
    }
    return true;
}

void gf_Level3SpawnBoss () {
    // Implementation
    gf_DisplayBossComingMessage(StringExternal("Param/Value/0EDB37AF"));
    TriggerExecute(gt_SpawnLevel3BossTerraTron, true, false);
    while (!((gv_levelCleared == true))) {
        Wait(0.25, c_timeGame);
    }
}

void gf_Level3Cleared () {
    // Implementation
    gf_LevelCleared(3, (gv_gameResult != 4));
}

void gf_Level3ClearUp () {
    // Implementation
    TriggerStop(gt_Level3SpawnWaves);
    TriggerStop(gt_Level3BossTerraTronBehavior);
    TriggerStop(gt_TerraTronSawSpawned);
    TriggerStop(gt_TerraTronSawBehavior);
    TriggerEnable(gt_TerraTronSawBehavior, false);
    TriggerStop(gt_FireSpinMissiles);
    TimerPause(gv_missileSpinnerFireTimer, true);
}

void gf_TerraTronLaunchMissile (fixed lp_xOffset, fixed lp_yOffset, fixed lp_facing, string lp_launchAttachPoint) {
    // Variable Declarations
    point lv_initialOffsetPoint;
    fixed lv_distanceBetweenPoints;
    fixed lv_angleBetweenPoints;
    fixed lv_scaledDistance;
    point lv_finalOffsetPoint;

    // Variable Initialization

    // Implementation
    lv_initialOffsetPoint = PointWithOffset(gv_terraTronPosition, lp_xOffset, lp_yOffset);
    lv_distanceBetweenPoints = DistanceBetweenPoints(gv_terraTronPosition, lv_initialOffsetPoint);
    lv_angleBetweenPoints = AngleBetweenPoints(gv_terraTronPosition, lv_initialOffsetPoint);
    lv_scaledDistance = (lv_distanceBetweenPoints * gv_terraTronScale);
    lv_finalOffsetPoint = PointWithOffsetPolar(gv_terraTronPosition, lv_scaledDistance, lv_angleBetweenPoints);
    UnitCreate(1, "SS_TerraTronMissileLauncher", c_unitCreateIgnorePlacement, UnitGetOwner(gv_boss), lv_finalOffsetPoint, (lp_facing - 90.0));
    libNtve_gf_AttachActorToUnit(gv_boss, "SS_TerraTronMissileLaunch", lp_launchAttachPoint);
}

void gf_TerraTronRandomArmAttack () {
    int auto0E39FF52_val;

    // Variable Declarations
    int lv_randomNumber;

    // Variable Initialization

    // Implementation
    lv_randomNumber = RandomInt(1, 4);
    auto0E39FF52_val = lv_randomNumber;
    if (auto0E39FF52_val == 1) {
        gf_TerraTronArmAttackInToOut();
    }
    else if (auto0E39FF52_val == 2) {
        gf_TerraTronArmAttackLeftToRight();
    }
    else if (auto0E39FF52_val == 3) {
        gf_TerraTronArmAttackOutToIn();
    }
    else if (auto0E39FF52_val == 4) {
        gf_TerraTronArmAttackRightToLeft();
    }
    else {
    }
}

void gf_TerraTronArmAttackInToOut () {
    // Implementation
    UnitBehaviorAdd(gv_boss, "SS_TerraTronStun", gv_boss, 1);
    gv_terraTronPosition = UnitGetPosition(gv_boss);
    libNtve_gf_SendActorMessageToUnit(gv_boss, "AnimBracketStart ArmAttack Stand,Work,Start,B Stand,Work,B Stand,Work,End,B ContentPlayOnce");
    Wait(4.0, c_timeGame);
    gf_TerraTronLaunchMissile(-1.86, -6.0, 45.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(-0.87, -7.38, 300.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-1.86, -6.0, 45.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(-0.87, -7.38, 300.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-1.86, -6.0, 45.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(-0.87, -7.38, 300.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(0.73, -8.09, 305.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(0.73, -8.09, 305.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(0.73, -8.09, 305.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(-2.34, -6.17, 36.0, "Ref_Weapon 03");
    gf_TerraTronLaunchMissile(0.16, -8.41, 311.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-2.34, -6.17, 36.0, "Ref_Weapon 03");
    gf_TerraTronLaunchMissile(0.16, -8.41, 311.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-2.34, -6.17, 36.0, "Ref_Weapon 03");
    gf_TerraTronLaunchMissile(0.16, -8.41, 311.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(0.5, -7.21, 318.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(0.5, -7.21, 318.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(0.5, -7.21, 318.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(-3.57, -6.26, 23.0, "Ref_Weapon 05");
    gf_TerraTronLaunchMissile(1.43, -8.62, 326.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-3.57, -6.26, 23.0, "Ref_Weapon 05");
    gf_TerraTronLaunchMissile(1.43, -8.62, 326.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-3.57, -6.26, 23.0, "Ref_Weapon 05");
    gf_TerraTronLaunchMissile(1.43, -8.62, 326.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(4.23, -8.66, 336.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(4.23, -8.66, 336.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(4.23, -8.66, 336.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(-5.29, -5.92, 8.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(4.93, -9.17, 348.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-5.29, -5.92, 8.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(4.93, -9.17, 348.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-5.29, -5.92, 8.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(4.93, -9.17, 348.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(4.96, -8.02, 0.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(4.96, -8.02, 0.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(4.96, -8.02, 0.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(-7.01, -5.0, 348.0, "Ref_Weapon 03");
    gf_TerraTronLaunchMissile(7.03, -8.32, 13.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-7.01, -5.0, 348.0, "Ref_Weapon 03");
    gf_TerraTronLaunchMissile(7.03, -8.32, 13.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-7.01, -5.0, 348.0, "Ref_Weapon 03");
    gf_TerraTronLaunchMissile(7.03, -8.32, 13.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(9.19, -6.37, 24.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(9.19, -6.37, 24.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(9.19, -6.37, 24.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(-8.23, -3.74, 330.0, "Ref_Weapon 05");
    gf_TerraTronLaunchMissile(10.03, -6.44, 33.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-8.23, -3.74, 330.0, "Ref_Weapon 05");
    gf_TerraTronLaunchMissile(10.03, -6.44, 33.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-8.23, -3.74, 330.0, "Ref_Weapon 05");
    gf_TerraTronLaunchMissile(10.03, -6.44, 33.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(9.09, -5.96, 40.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(9.09, -5.96, 40.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(9.09, -5.96, 40.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(-8.83, -2.76, 315.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(10.53, -5.55, 45.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-8.83, -2.76, 315.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(10.53, -5.55, 45.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-8.83, -2.76, 315.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(10.53, -5.55, 45.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    Wait(0.5, c_timeGame);
    UnitBehaviorRemove(gv_boss, "SS_TerraTronStun", 1);
}

void gf_TerraTronArmAttackOutToIn () {
    // Implementation
    UnitBehaviorAdd(gv_boss, "SS_TerraTronStun", gv_boss, 1);
    gv_terraTronPosition = UnitGetPosition(gv_boss);
    libNtve_gf_SendActorMessageToUnit(gv_boss, "AnimBracketStart ArmAttack Stand,Work,Start,A Stand,Work,A Stand,Work,End,A ContentPlayOnce");
    Wait(4.0, c_timeGame);
    gf_TerraTronLaunchMissile(-8.79, -2.73, 315.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(10.76, -5.23, 45.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-8.79, -2.73, 315.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(10.76, -5.23, 45.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-8.79, -2.73, 315.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(10.76, -5.23, 45.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(10.9, -3.84, 40.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(10.9, -3.84, 40.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(10.9, -3.84, 40.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(-8.61, -3.11, 330.0, "Ref_Weapon 03");
    gf_TerraTronLaunchMissile(10.85, -5.37, 33.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-8.61, -3.11, 330.0, "Ref_Weapon 03");
    gf_TerraTronLaunchMissile(10.85, -5.37, 33.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-8.61, -3.11, 330.0, "Ref_Weapon 03");
    gf_TerraTronLaunchMissile(10.85, -5.37, 33.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(8.61, -6.39, 24.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(8.61, -6.39, 24.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(8.61, -6.39, 24.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(-7.8, -4.22, 348.0, "Ref_Weapon 05");
    gf_TerraTronLaunchMissile(8.67, -7.4, 13.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-7.8, -4.22, 348.0, "Ref_Weapon 05");
    gf_TerraTronLaunchMissile(8.67, -7.4, 13.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-7.8, -4.22, 348.0, "Ref_Weapon 05");
    gf_TerraTronLaunchMissile(8.67, -7.4, 13.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(8.57, -6.91, 0.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(8.57, -6.91, 0.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(8.57, -6.91, 0.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(-6.36, -5.41, 8.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(6.81, -8.66, 348.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-6.36, -5.41, 8.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(6.81, -8.66, 348.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-6.36, -5.41, 8.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(6.81, -8.66, 348.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(4.02, -8.1, 336.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(4.02, -8.1, 336.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(4.02, -8.1, 336.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(-4.75, -6.13, 23.0, "Ref_Weapon 03");
    gf_TerraTronLaunchMissile(3.14, -8.96, 326.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-4.75, -6.13, 23.0, "Ref_Weapon 03");
    gf_TerraTronLaunchMissile(3.14, -8.96, 326.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-4.75, -6.13, 23.0, "Ref_Weapon 03");
    gf_TerraTronLaunchMissile(3.14, -8.96, 326.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(3.45, -8.69, 318.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(3.45, -8.69, 318.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(3.45, -8.69, 318.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(-3.14, -6.31, 36.0, "Ref_Weapon 05");
    gf_TerraTronLaunchMissile(1.27, -8.87, 311.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-3.14, -6.31, 36.0, "Ref_Weapon 05");
    gf_TerraTronLaunchMissile(1.27, -8.87, 311.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-3.14, -6.31, 36.0, "Ref_Weapon 05");
    gf_TerraTronLaunchMissile(1.27, -8.87, 311.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(0.05, -6.92, 305.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(0.05, -6.92, 305.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(0.05, -6.92, 305.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(-2.22, -6.25, 45.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(-0.61, -7.58, 300.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-2.22, -6.25, 45.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(-0.61, -7.58, 300.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-2.22, -6.25, 45.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(-0.61, -7.58, 300.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    Wait(0.5, c_timeGame);
    UnitBehaviorRemove(gv_boss, "SS_TerraTronStun", 1);
}

void gf_TerraTronArmAttackLeftToRight () {
    // Implementation
    UnitBehaviorAdd(gv_boss, "SS_TerraTronStun", gv_boss, 1);
    gv_terraTronPosition = UnitGetPosition(gv_boss);
    libNtve_gf_SendActorMessageToUnit(gv_boss, "AnimBracketStart ArmAttack Stand,Work,Start,E Stand,Work,E Stand,Work,End,E ContentPlayOnce");
    Wait(4.0, c_timeGame);
    gf_TerraTronLaunchMissile(-8.79, -2.73, 315.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(-0.87, -7.38, 300.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-8.79, -2.73, 315.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(-0.87, -7.38, 300.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-8.79, -2.73, 315.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(-0.87, -7.38, 300.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(0.73, -8.09, 305.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(0.73, -8.09, 305.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(0.73, -8.09, 305.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(-8.61, -3.11, 330.0, "Ref_Weapon 03");
    gf_TerraTronLaunchMissile(0.16, -8.41, 311.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-8.61, -3.11, 330.0, "Ref_Weapon 03");
    gf_TerraTronLaunchMissile(0.16, -8.41, 311.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-8.61, -3.11, 330.0, "Ref_Weapon 03");
    gf_TerraTronLaunchMissile(0.16, -8.41, 311.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(0.5, -7.21, 318.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(0.5, -7.21, 318.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(0.5, -7.21, 318.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(-7.8, -4.22, 348.0, "Ref_Weapon 05");
    gf_TerraTronLaunchMissile(1.43, -8.62, 326.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-7.8, -4.22, 348.0, "Ref_Weapon 05");
    gf_TerraTronLaunchMissile(1.43, -8.62, 326.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-7.8, -4.22, 348.0, "Ref_Weapon 05");
    gf_TerraTronLaunchMissile(1.43, -8.62, 326.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(4.23, -8.66, 336.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(4.23, -8.66, 336.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(4.23, -8.66, 336.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(-6.36, -5.41, 8.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(4.93, -9.17, 348.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-6.36, -5.41, 8.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(4.93, -9.17, 348.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-6.36, -5.41, 8.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(4.93, -9.17, 348.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(4.96, -8.02, 0.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(4.96, -8.02, 0.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(4.96, -8.02, 0.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(-4.75, -6.13, 23.0, "Ref_Weapon 03");
    gf_TerraTronLaunchMissile(7.03, -8.32, 13.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-4.75, -6.13, 23.0, "Ref_Weapon 03");
    gf_TerraTronLaunchMissile(7.03, -8.32, 13.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-4.75, -6.13, 23.0, "Ref_Weapon 03");
    gf_TerraTronLaunchMissile(7.03, -8.32, 13.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(9.19, -6.37, 24.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(9.19, -6.37, 24.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(9.19, -6.37, 24.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(-3.14, -6.31, 36.0, "Ref_Weapon 05");
    gf_TerraTronLaunchMissile(10.03, -6.44, 33.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-3.14, -6.31, 36.0, "Ref_Weapon 05");
    gf_TerraTronLaunchMissile(10.03, -6.44, 33.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-3.14, -6.31, 36.0, "Ref_Weapon 05");
    gf_TerraTronLaunchMissile(10.03, -6.44, 33.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(9.09, -5.96, 40.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(9.09, -5.96, 40.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(9.09, -5.96, 40.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(-2.22, -6.25, 45.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(10.53, -5.55, 45.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-2.22, -6.25, 45.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(10.53, -5.55, 45.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-2.22, -6.25, 45.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(10.53, -5.55, 45.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    Wait(0.5, c_timeGame);
    UnitBehaviorRemove(gv_boss, "SS_TerraTronStun", 1);
}

void gf_TerraTronArmAttackRightToLeft () {
    // Implementation
    UnitBehaviorAdd(gv_boss, "SS_TerraTronStun", gv_boss, 1);
    gv_terraTronPosition = UnitGetPosition(gv_boss);
    libNtve_gf_SendActorMessageToUnit(gv_boss, "AnimBracketStart ArmAttack Stand,Work,Start,F Stand,Work,F Stand,Work,End,F ContentPlayOnce");
    Wait(4.0, c_timeGame);
    gf_TerraTronLaunchMissile(-1.86, -6.0, 45.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(10.76, -5.23, 45.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-1.86, -6.0, 45.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(10.76, -5.23, 45.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-1.86, -6.0, 45.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(10.76, -5.23, 45.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(10.9, -3.84, 40.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(10.9, -3.84, 40.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(10.9, -3.84, 40.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(-2.34, -6.17, 36.0, "Ref_Weapon 03");
    gf_TerraTronLaunchMissile(10.85, -5.37, 33.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-2.34, -6.17, 36.0, "Ref_Weapon 03");
    gf_TerraTronLaunchMissile(10.85, -5.37, 33.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-2.34, -6.17, 36.0, "Ref_Weapon 03");
    gf_TerraTronLaunchMissile(10.85, -5.37, 33.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(8.61, -6.39, 24.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(8.61, -6.39, 24.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(8.61, -6.39, 24.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(-3.57, -6.26, 23.0, "Ref_Weapon 05");
    gf_TerraTronLaunchMissile(8.67, -7.4, 13.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-3.57, -6.26, 23.0, "Ref_Weapon 05");
    gf_TerraTronLaunchMissile(8.67, -7.4, 13.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-3.57, -6.26, 23.0, "Ref_Weapon 05");
    gf_TerraTronLaunchMissile(8.67, -7.4, 13.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(8.57, -6.91, 0.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(8.57, -6.91, 0.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(8.57, -6.91, 0.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(-5.29, -5.92, 8.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(6.81, -8.66, 348.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-5.29, -5.92, 8.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(6.81, -8.66, 348.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-5.29, -5.92, 8.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(6.81, -8.66, 348.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(4.02, -8.1, 336.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(4.02, -8.1, 336.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(4.02, -8.1, 336.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(-7.01, -5.0, 348.0, "Ref_Weapon 03");
    gf_TerraTronLaunchMissile(3.14, -8.96, 326.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-7.01, -5.0, 348.0, "Ref_Weapon 03");
    gf_TerraTronLaunchMissile(3.14, -8.96, 326.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-7.01, -5.0, 348.0, "Ref_Weapon 03");
    gf_TerraTronLaunchMissile(3.14, -8.96, 326.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(3.45, -8.69, 318.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(3.45, -8.69, 318.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(3.45, -8.69, 318.0, "Ref_Weapon 08");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(-8.23, -3.74, 330.0, "Ref_Weapon 05");
    gf_TerraTronLaunchMissile(1.27, -8.87, 311.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-8.23, -3.74, 330.0, "Ref_Weapon 05");
    gf_TerraTronLaunchMissile(1.27, -8.87, 311.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-8.23, -3.74, 330.0, "Ref_Weapon 05");
    gf_TerraTronLaunchMissile(1.27, -8.87, 311.0, "Ref_Weapon 09");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(0.05, -6.92, 305.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(0.05, -6.92, 305.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(0.05, -6.92, 305.0, "Ref_Weapon 10");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    gf_TerraTronLaunchMissile(-8.83, -2.76, 315.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(-0.61, -7.58, 300.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-8.83, -2.76, 315.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(-0.61, -7.58, 300.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackIntervalSmall, c_timeGame);
    gf_TerraTronLaunchMissile(-8.83, -2.76, 315.0, "Ref_Weapon 01");
    gf_TerraTronLaunchMissile(-0.61, -7.58, 300.0, "Ref_Weapon 07");
    Wait(gv_terraTronArmAttackInterval, c_timeGame);
    Wait(0.5, c_timeGame);
    UnitBehaviorRemove(gv_boss, "SS_TerraTronStun", 1);
}

void gf_TerraTronRandomBeamAttack () {
    int auto19EC1E16_val;

    // Variable Declarations
    int lv_randomNumber;

    // Variable Initialization

    // Implementation
    lv_randomNumber = RandomInt(1, 2);
    auto19EC1E16_val = lv_randomNumber;
    if (auto19EC1E16_val == 1) {
        gf_TerraTronBeamAttackLeftToRight();
    }
    else if (auto19EC1E16_val == 2) {
        gf_TerraTronBeamAttackRightToLeft();
    }
    else {
    }
}

void gf_TerraTronBeamAttackLeftToRight () {
    // Variable Declarations
    unit lv_beamTarget;
    fixed lv_effectDuration;
    fixed lv_effectMoveSpeed;
    fixed lv_moveOffset;

    // Variable Initialization

    // Implementation
    lv_effectDuration = (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "SS_TerraTronBeamAttackPersistent", "PeriodCount", 1)) * StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "SS_TerraTronBeamAttackPersistent", "PeriodicPeriodArray[0]", 1)));
    lv_effectMoveSpeed = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "SS_TerraTronBeamTarget", "Speed", 1));
    lv_moveOffset = (lv_effectDuration * lv_effectMoveSpeed);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SS_TerraTronBeamTarget", 0, UnitGetOwner(gv_boss), PointWithOffset(UnitGetPosition(gv_boss), -20.0, -20.0));
    lv_beamTarget = UnitLastCreated();
    UnitIssueOrder(gv_boss, OrderTargetingUnit(AbilityCommand("attack", 0), lv_beamTarget), c_orderQueueReplace);
    libNtve_gf_SendActorMessageToUnit(gv_boss, "AnimBracketStart BeamAttack Stand,Work,Start,C Stand,Work,C Stand,Work,End,C");
    SoundPlayOnUnit(SoundLink("SS_TerraTronBeamChargeUp", 0), PlayerGroupAll(), gv_boss, 8.0, 100.0, 0.0);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(gv_boss, OrderTargetingUnit(AbilityCommand("SS_TerraTronBeamAttack", 0), lv_beamTarget), c_orderQueueReplace);
    UnitIssueOrder(lv_beamTarget, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(lv_beamTarget), lv_moveOffset, 0.0)), c_orderQueueReplace);
    Wait(lv_effectDuration, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_boss, "AnimBracketStop BeamAttack");
    Wait(0.5, c_timeGame);
    UnitRemove(lv_beamTarget);
}

void gf_TerraTronBeamAttackRightToLeft () {
    // Variable Declarations
    unit lv_beamTarget;
    fixed lv_effectDuration;
    fixed lv_effectMoveSpeed;
    fixed lv_moveOffset;

    // Variable Initialization

    // Implementation
    lv_effectDuration = (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "SS_TerraTronBeamAttackPersistent", "PeriodCount", 1)) * StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "SS_TerraTronBeamAttackPersistent", "PeriodicPeriodArray[0]", 1)));
    lv_effectMoveSpeed = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "SS_TerraTronBeamTarget", "Speed", 1));
    lv_moveOffset = (lv_effectDuration * lv_effectMoveSpeed * -1.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SS_TerraTronBeamTarget", 0, UnitGetOwner(gv_boss), PointWithOffset(UnitGetPosition(gv_boss), 20.0, -20.0));
    lv_beamTarget = UnitLastCreated();
    UnitIssueOrder(gv_boss, OrderTargetingUnit(AbilityCommand("attack", 0), lv_beamTarget), c_orderQueueReplace);
    libNtve_gf_SendActorMessageToUnit(gv_boss, "AnimBracketStart BeamAttack Stand,Work,Start,C Stand,Work,C Stand,Work,End,C");
    SoundPlayOnUnit(SoundLink("SS_TerraTronBeamChargeUp", 0), PlayerGroupAll(), gv_boss, 8.0, 100.0, 0.0);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(gv_boss, OrderTargetingUnit(AbilityCommand("SS_TerraTronBeamAttack", 0), lv_beamTarget), c_orderQueueReplace);
    UnitIssueOrder(lv_beamTarget, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(lv_beamTarget), lv_moveOffset, 0.0)), c_orderQueueReplace);
    Wait(lv_effectDuration, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_boss, "AnimBracketStop BeamAttack");
    Wait(0.5, c_timeGame);
    UnitRemove(lv_beamTarget);
}

void gf_TerraTronSpawnMissileSpinners () {
    // Implementation
    if ((UnitIsAlive(gv_missileSpinnerL) == true) && (UnitIsAlive(gv_missileSpinnerR) == true)) {
        return ;
    }
    else {
    }
    libNtve_gf_SendActorMessageToUnit(gv_boss, "AnimBracketStart MissileSpinAttack Stand,Work,Start,D Stand,Work,D Stand,Work,End,D ContentPlayOnce");
    Wait(1.0, c_timeGame);
    if ((UnitIsAlive(gv_missileSpinnerL) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SS_TerraTronMissileSpinner", 0, UnitGetOwner(gv_boss), UnitGetPosition(gv_boss));
        gv_missileSpinnerL = UnitLastCreated();
        if ((gv_repeatTimes > 0)) {
            UnitBehaviorAdd(gv_missileSpinnerL, "SS_StrongerEnemyBuff", gv_missileSpinnerL, gv_repeatTimes);
        }
        else {
        }
        UnitIssueOrder(gv_missileSpinnerL, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(gv_boss), -0.5, -3.0)), c_orderQueueReplace);
        UnitIssueOrder(gv_missileSpinnerL, OrderTargetingPoint(AbilityCommand("move", 0), gf_ConvertShooterCoordToMapCoord(Point(4.0, -1.0))), c_orderQueueAddToEnd);
    }
    else {
    }
    if ((UnitIsAlive(gv_missileSpinnerR) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SS_TerraTronMissileSpinner", 0, UnitGetOwner(gv_boss), UnitGetPosition(gv_boss));
        gv_missileSpinnerR = UnitLastCreated();
        if ((gv_repeatTimes > 0)) {
            UnitBehaviorAdd(gv_missileSpinnerR, "SS_StrongerEnemyBuff", gv_missileSpinnerR, gv_repeatTimes);
        }
        else {
        }
        UnitIssueOrder(gv_missileSpinnerR, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(gv_boss), 0.5, -3.0)), c_orderQueueReplace);
        UnitIssueOrder(gv_missileSpinnerR, OrderTargetingPoint(AbilityCommand("move", 0), gf_ConvertShooterCoordToMapCoord(Point(16.0, -1.0))), c_orderQueueAddToEnd);
    }
    else {
    }
    Wait(2.0, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_boss, "AnimBracketStop MissileSpinAttack");
    TimerStart(gv_missileSpinnerFireTimer, 0.5, false, c_timeGame);
}

point gf_GetNearestSawTarget (point lp_positionOfViking) {
    int autoA9D92A0D_ae;
    int autoA9D92A0D_ai;
    int auto39ACB433_ae;
    int auto39ACB433_ai;

    // Variable Declarations
    int lv_i;
    int lv_k;
    fixed lv_distance;
    fixed lv_bestDistance;
    point lv_nearestPoint;

    // Variable Initialization
    lv_bestDistance = 999.0;

    // Implementation
    autoA9D92A0D_ae = 7;
    autoA9D92A0D_ai = 1;
    lv_i = 1;
    for ( ; ( (autoA9D92A0D_ai >= 0 && lv_i <= autoA9D92A0D_ae) || (autoA9D92A0D_ai <= 0 && lv_i >= autoA9D92A0D_ae) ) ; lv_i += autoA9D92A0D_ai ) {
        auto39ACB433_ae = 2;
        auto39ACB433_ai = 1;
        lv_k = 1;
        for ( ; ( (auto39ACB433_ai >= 0 && lv_k <= auto39ACB433_ae) || (auto39ACB433_ai <= 0 && lv_k >= auto39ACB433_ae) ) ; lv_k += auto39ACB433_ai ) {
            lv_distance = DistanceBetweenPoints(lp_positionOfViking, gv_presetSawTargets[lv_i][lv_k]);
            if ((lv_distance < lv_bestDistance)) {
                lv_bestDistance = lv_distance;
                lv_nearestPoint = gv_presetSawTargets[lv_i][lv_k];
            }
            else {
            }
        }
    }
    return lv_nearestPoint;
}

fixed gf_GetNormalFacing (point lp_sawPosition) {
    // Variable Declarations
    fixed lv_xofSawPosition;
    fixed lv_yofSawPosition;
    fixed lv_reflectionNormalFacing;

    // Variable Initialization

    // Implementation
    lv_xofSawPosition = PointGetX(lp_sawPosition);
    lv_yofSawPosition = PointGetY(lp_sawPosition);
    if ((lv_xofSawPosition < PointGetX(gv_screenLowerBound))) {
        lv_reflectionNormalFacing = 0.0;
    }
    else {
    }
    if ((lv_xofSawPosition > PointGetX(gv_screenUpperBound))) {
        lv_reflectionNormalFacing = 180.0;
    }
    else {
    }
    if ((lv_yofSawPosition < PointGetY(gv_screenLowerBound))) {
        lv_reflectionNormalFacing = 90.0;
    }
    else {
    }
    if ((lv_yofSawPosition > PointGetY(gv_screenUpperBound))) {
        lv_reflectionNormalFacing = 270.0;
    }
    else {
    }
    return lv_reflectionNormalFacing;
}

void gf_TerraTronSawAttack (int lp_bounces) {
    // Implementation
    gv_totalSawBounces = lp_bounces;
    UnitIssueOrder(gv_boss, Order(AbilityCommand("SS_TerraTronSawAttack", 0)), c_orderQueueReplace);
}

int gf_CurrentLevel () {
    // Implementation
    return gv_levelCurrent;
}

void gf_InitCamera () {
    // Variable Declarations
    camerainfo lv_camera;

    // Variable Initialization
    lv_camera = CameraInfoDefault();

    // Implementation
    CameraLockInput(gv_p1_USER, true);
    CameraInfoSetValue(lv_camera, c_cameraValuePitch, 90.0);
    CameraInfoSetValue(lv_camera, c_cameraValueDistance, 50.0);
    CameraInfoSetValue(lv_camera, c_cameraValueFarClip, 20000.0);
    CameraInfoSetValue(lv_camera, c_cameraValueFieldOfView, 20.0);
    CameraInfoSetValue(lv_camera, c_cameraValueHeightOffset, 0.0);
    CameraInfoSetValue(lv_camera, c_cameraValueNearClip, 0.1);
    CameraInfoSetValue(lv_camera, c_cameraValueShadowClip, 75.0);
    gv_cameraLocation = RegionGetCenter(RegionEntireMap());
    CameraInfoSetTarget(lv_camera, gv_cameraLocation);
    CameraApplyInfo(gv_p1_USER, lv_camera, 0.0, -1, 10, true);
    gf_UpdateCameraBounds();
}

void gf_UpdateCameraBounds () {
    // Variable Declarations
    region lv_bounds;

    // Variable Initialization

    // Implementation
    lv_bounds = gf_GetCameraBoundary();
    CameraSetBounds(PlayerGroupAll(), lv_bounds, true);
}

region gf_GetCameraBoundary () {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;
    region lv_boundary;

    // Variable Initialization

    // Implementation
    lv_x = PointGetX(gv_cameraLocation);
    lv_y = PointGetY(gv_cameraLocation);
    lv_boundary = RegionRect((lv_x - 10.0), (lv_y - 7.0), (lv_x + 10.0), (lv_y + 7.0));
    return lv_boundary;
}

region gf_GetOuterBoundary () {
    // Variable Declarations
    region lv_boundary;
    point lv_maxBound;
    point lv_minBound;

    // Variable Initialization

    // Implementation
    lv_boundary = gf_GetCameraBoundary();
    lv_maxBound = RegionGetBoundsMax(lv_boundary);
    lv_maxBound = PointWithOffset(lv_maxBound, 4.0, 2.0);
    lv_minBound = RegionGetBoundsMin(lv_boundary);
    lv_minBound = PointWithOffset(lv_minBound, -4.0, -2.0);
    lv_boundary = RegionRect(PointGetX(lv_minBound), PointGetY(lv_minBound), PointGetX(lv_maxBound), PointGetY(lv_maxBound));
    return lv_boundary;
}

point gf_ConvertShooterCoordToMapCoord (point lp_point) {
    // Variable Declarations
    region lv_bounds;
    point lv_pointRet;

    // Variable Initialization

    // Implementation
    return Point(gf_ConvertShooterXToMapX(PointGetX(lp_point)), gf_ConvertShooterYToMapY(PointGetY(lp_point)));
}

fixed gf_ConvertShooterXToMapX (fixed lp_x) {
    // Variable Declarations
    region lv_bounds;

    // Variable Initialization

    // Implementation
    lv_bounds = gf_GetCameraBoundary();
    return (lp_x + PointGetX(RegionGetBoundsMin(lv_bounds)));
}

fixed gf_ConvertShooterYToMapY (fixed lp_y) {
    // Variable Declarations
    region lv_bounds;

    // Variable Initialization

    // Implementation
    lv_bounds = gf_GetCameraBoundary();
    return (lp_y + PointGetY(RegionGetBoundsMax(lv_bounds)));
}

void gf_InitBackground (int lp_bGID1, int lp_bGID2, int lp_bGID3, int lp_bGID4, int lp_bGID5) {
    unitgroup autoB7804980_g;
    int autoB7804980_u;

    // Variable Declarations
    unit lv_unit;

    // Variable Initialization

    // Implementation
    autoB7804980_g = gv_activeBackgroundUnits;
    autoB7804980_u = 1;
    for ( ; autoB7804980_u <= UnitGroupCount(autoB7804980_g, c_unitCountAll) ; autoB7804980_u += BoolToInt(lv_unit == UnitGroupUnit(autoB7804980_g, autoB7804980_u)) ) {
        lv_unit = UnitGroupUnit(autoB7804980_g, autoB7804980_u);
        UnitGroupRemove(gv_activeBackgroundUnits, lv_unit);
        UnitRemove(lv_unit);
    }
    gv_selectedBackgroundCount = 0;
    gv_currentBackgroundIndex = 0;
    gf_AddBackgroundUnitType(lp_bGID1);
    gf_AddBackgroundUnitType(lp_bGID2);
    gf_AddBackgroundUnitType(lp_bGID3);
    gf_AddBackgroundUnitType(lp_bGID4);
    gf_AddBackgroundUnitType(lp_bGID5);
    TriggerExecute(gt_BackgroundManager, true, false);
}

void gf_StartBGMove () {
    // Implementation
    gv_bGPaused = false;
    libNtve_gf_PauseUnit(gf_CurrentBackgroundUnit(), false);
    libNtve_gf_PauseUnit(gf_NextBackgroundUnit(), false);
}

void gf_StopBGMove () {
    // Implementation
    gv_bGPaused = true;
    libNtve_gf_PauseUnit(gf_CurrentBackgroundUnit(), true);
    libNtve_gf_PauseUnit(gf_NextBackgroundUnit(), true);
}

unit gf_CurrentBackgroundUnit () {
    // Implementation
    return gv_backgroundCurrent;
}

unit gf_NextBackgroundUnit () {
    // Implementation
    return gv_backgroundNext;
}

string gf_BackgroundUnitType (int lp_iD) {
    // Implementation
    return gv_backgroundUnitTypes[(lp_iD)];
}

bool gf_BGPaused () {
    // Implementation
    return gv_bGPaused;
}

void gf_AddBackgroundUnitType (int lp_bGID) {
    // Implementation
    if ((lp_bGID == 0)) {
        return ;
    }
    else {
    }
    gv_selectedBackgroundCount += 1;
    gv_selectedBackgroundIDs[gv_selectedBackgroundCount] = lp_bGID;
}

void gf_CreateBackground (int lp_iD) {
    // Implementation
    UnitCreate(1, gf_BackgroundUnitType(lp_iD), 0, gv_p0_NEUTRAL, gv_bGStart, 180.0);
    gf_PrepareUnitForShooterGame(UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, -2.0);
    UnitGroupAdd(gv_activeBackgroundUnits, UnitLastCreated());
}

void gf_SetBackground (unit lp_bG) {
    // Implementation
    gv_backgroundCurrent = lp_bG;
}

void gf_SetBackgroundNext (unit lp_bG) {
    // Implementation
    gv_backgroundNext = lp_bG;
}

void gf_InitBackgroundDataSingle (int lp_iD, string lp_unitType) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    lv_index = (lp_iD);
    gv_backgroundIDs[lv_index] = lp_iD;
    gv_backgroundUnitTypes[lv_index] = lp_unitType;
}

void gf_InitBackgroundData () {
    // Implementation
    gf_InitBackgroundDataSingle(1, "SS_BackgroundSpaceProt00");
    gf_InitBackgroundDataSingle(2, "SS_BackgroundSpaceProt01");
    gf_InitBackgroundDataSingle(3, "SS_BackgroundSpaceProt02");
    gf_InitBackgroundDataSingle(4, "SS_BackgroundSpaceProt03");
    gf_InitBackgroundDataSingle(5, "SS_BackgroundSpaceProt04");
    gf_InitBackgroundDataSingle(6, "SS_BackgroundSpaceZerg00");
    gf_InitBackgroundDataSingle(7, "SS_BackgroundSpaceZerg01");
    gf_InitBackgroundDataSingle(8, "SS_BackgroundSpaceZerg02");
    gf_InitBackgroundDataSingle(9, "SS_BackgroundSpaceTerran00");
    gf_InitBackgroundDataSingle(10, "SS_BackgroundSpaceTerran01");
    gf_InitBackgroundDataSingle(11, "SS_BackgroundSpaceTerran02");
}

void gf_BGUpdatePosition () {
    // Variable Declarations
    point lv_cameraCenter;

    // Variable Initialization

    // Implementation
    lv_cameraCenter = RegionGetCenter(gf_GetCameraBoundary());
    gv_bGStart = PointWithOffset(lv_cameraCenter, 0.0, 8.0);
    gv_bGStartNext = PointWithOffset(gv_bGStart, 0.0, gv_c_BGHeight);
    gv_bGTarget = PointWithOffset(gv_bGStart, 0.0, (-1.0 * gv_c_BGHeight));
}

void gf_PrepareBorder () {
    // Variable Declarations
    point lv_center;

    // Variable Initialization

    // Implementation
    lv_center = RegionGetCenter(gf_GetCameraBoundary());
    UnitCreate(1, "SS_BlackEdgeBorder", 0, gv_p0_NEUTRAL, PointWithOffset(lv_center, -36.0, 0.0), 180.0);
    gf_PrepareUnitForShooterGame(UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, 0.0);
    UnitGroupAdd(gv_borderGroup, UnitLastCreated());
    UnitCreate(1, "SS_BlackEdgeBorder", 0, gv_p0_NEUTRAL, PointWithOffset(lv_center, 35.4, 0.0), 180.0);
    gf_PrepareUnitForShooterGame(UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, 0.0);
    UnitGroupAdd(gv_borderGroup, UnitLastCreated());
}

void gf_PrepareUnitForShooterGame (unit lp_unit) {
    int autoF95A9D70_ae;
    int autoF95A9D70_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    UnitSetState(lp_unit, c_unitStateHighlightable, false);
    UnitSetState(lp_unit, c_unitStateCursorable, false);
    UnitSetState(lp_unit, c_unitStateSelectable, false);
    UnitSetState(lp_unit, c_unitStateStatusBar, false);
    UnitSetState(lp_unit, c_unitStateTooltipable, false);
    UnitSetState(lp_unit, c_unitStateTargetable, false);
    UnitSetPropertyFixed(lp_unit, c_unitPropHeight, gv_c_PlaneHeight);
    UnitBehaviorAdd(lp_unit, "SS_MaxAcceleration", lp_unit, 1);
    autoF95A9D70_ae = gv_levelWavePlaneTypeCount[(gv_levelCurrent)];
    autoF95A9D70_ai = 1;
    lv_index = 1;
    for ( ; ( (autoF95A9D70_ai >= 0 && lv_index <= autoF95A9D70_ae) || (autoF95A9D70_ai <= 0 && lv_index >= autoF95A9D70_ae) ) ; lv_index += autoF95A9D70_ai ) {
        if ((UnitGetType(lp_unit) == gv_levelWavePlaneType[(gv_levelCurrent)][lv_index])) {
            gv_levelTotalEnemy += 1;
        }
        else {
        }
    }
}

void gf_SpawnMob (int lp_count, string lp_type, point lp_pos, fixed lp_angle) {
    // Implementation
    UnitCreate(lp_count, lp_type, 0, gv_p2_ENEMY, lp_pos, lp_angle);
    if (((UnitGetType(UnitLastCreated()) == "SS_LightningProjectorFaceLeft") || (UnitGetType(UnitLastCreated()) == "SS_LightningProjectorFaceRight"))) {
        gv_spawnedLightningProjector = UnitLastCreated();
    }
    else {
    }
    UnitBehaviorAdd(UnitLastCreated(), "SS_MobSpawnInvulnerable", UnitLastCreated(), 1);
    if ((gv_repeatTimes > 0)) {
        UnitBehaviorAdd(UnitLastCreated(), "SS_StrongerEnemyBuff", UnitLastCreated(), gv_repeatTimes);
    }
    else {
    }
}

text gf_GetMobUnitName (string lp_unitType) {
    int auto69974431_ae;
    int auto69974431_ai;
    int auto335E23A5_ae;
    int auto335E23A5_ai;

    // Variable Declarations
    int lv_i;
    int lv_k;
    text lv_returnText;

    // Variable Initialization

    // Implementation
    auto69974431_ae = 5;
    auto69974431_ai = 1;
    lv_i = 0;
    for ( ; ( (auto69974431_ai >= 0 && lv_i <= auto69974431_ae) || (auto69974431_ai <= 0 && lv_i >= auto69974431_ae) ) ; lv_i += auto69974431_ai ) {
        auto335E23A5_ae = 10;
        auto335E23A5_ai = 1;
        lv_k = 0;
        for ( ; ( (auto335E23A5_ai >= 0 && lv_k <= auto335E23A5_ae) || (auto335E23A5_ai <= 0 && lv_k >= auto335E23A5_ae) ) ; lv_k += auto335E23A5_ai ) {
            if ((gv_levelWavePlaneType[lv_i][lv_k] == lp_unitType)) {
                lv_returnText = gv_levelWavePlaneName[lv_i][lv_k];
                return lv_returnText;
            }
            else {
            }
        }
    }
    return lv_returnText;
}

void gf_SendWave (string lp_unitType, int lp_count, fixed lp_interval, point lp_startPoint, int lp_pattern, fixed lp_patternParam1, fixed lp_patternParam2, fixed lp_patternParam3, fixed lp_patternParam4, fixed lp_patternParam5, fixed lp_patternParam6, int lp_bullet, bool lp_targetFighter) {
    // Implementation
    gv_tP_SendWave_WaveInfo.lv_unitType = lp_unitType;
    gv_tP_SendWave_WaveInfo.lv_count = lp_count;
    gv_tP_SendWave_WaveInfo.lv_interval = lp_interval;
    gv_tP_SendWave_WaveInfo.lv_startPoint = lp_startPoint;
    gv_tP_SendWave_WaveInfo.lv_patten = lp_pattern;
    gv_tP_SendWave_WaveInfo.lv_patternParam1 = lp_patternParam1;
    gv_tP_SendWave_WaveInfo.lv_patternParam2 = lp_patternParam2;
    gv_tP_SendWave_WaveInfo.lv_patternParam3 = lp_patternParam3;
    gv_tP_SendWave_WaveInfo.lv_patternParam4 = lp_patternParam4;
    gv_tP_SendWave_WaveInfo.lv_patternParam5 = lp_patternParam5;
    gv_tP_SendWave_WaveInfo.lv_patternParam6 = lp_patternParam6;
    gv_tP_SendWave_WaveInfo.lv_bullet = lp_bullet;
    gv_tP_SendWave_WaveInfo.lv_bulletTargetFighter = lp_targetFighter;
    TriggerExecute(gt_SendWave, true, false);
}

void gf_SendWaveMoveDrop (string lp_unitType, int lp_count, fixed lp_interval, fixed lp_startingX, fixed lp_startingY, fixed lp_turnX, fixed lp_turnY, fixed lp_speedInit, fixed lp_speed, fixed lp_delay, int lp_bullet, bool lp_targetFighter) {
    // Implementation
    gf_SendWave(lp_unitType, lp_count, lp_interval, Point(lp_startingX, lp_startingY), 4, lp_turnX, lp_turnY, 0.0, lp_speedInit, lp_speed, lp_delay, lp_bullet, lp_targetFighter);
}

void gf_SendWaveStraightLine (string lp_unitType, int lp_count, fixed lp_interval, fixed lp_startingX, fixed lp_startingY, fixed lp_finishX, fixed lp_finishY, fixed lp_speed, int lp_bullet, bool lp_targetFighter) {
    // Implementation
    gf_SendWave(lp_unitType, lp_count, lp_interval, Point(lp_startingX, lp_startingY), 1, lp_finishX, lp_finishY, 0.0, 0.0, lp_speed, 0.0, lp_bullet, lp_targetFighter);
}

void gf_SendWaveCorrectionMark (string lp_unitType, int lp_count, fixed lp_interval, fixed lp_startingX, fixed lp_startingY, fixed lp_turnX, fixed lp_turnY, fixed lp_finishX, fixed lp_finishY, fixed lp_speed, fixed lp_delay, int lp_bullet, bool lp_targetFighter) {
    // Implementation
    gf_SendWave(lp_unitType, lp_count, lp_interval, Point(lp_startingX, lp_startingY), 2, lp_turnX, lp_turnY, lp_finishX, lp_finishY, lp_speed, lp_delay, lp_bullet, lp_targetFighter);
}

void gf_SendWaveDropBack (string lp_unitType, int lp_count, fixed lp_interval, fixed lp_startingX, fixed lp_startingY, fixed lp_turnY, fixed lp_speed1, fixed lp_speed2, int lp_bullet, bool lp_targetFighter) {
    // Implementation
    gf_SendWave(lp_unitType, lp_count, lp_interval, Point(lp_startingX, lp_startingY), 3, lp_turnY, 0.0, 0.0, 0.0, lp_speed1, lp_speed2, lp_bullet, lp_targetFighter);
}

void gf_SendWaveCircle (string lp_unitType, int lp_count, fixed lp_interval, fixed lp_startingX, fixed lp_startingY, fixed lp_turnX, fixed lp_turnY, fixed lp_centerX, fixed lp_centerY, fixed lp_arc, fixed lp_arcSpeed, int lp_bullet, bool lp_targetFighter) {
    // Implementation
    gf_SendWave(lp_unitType, lp_count, lp_interval, Point(lp_startingX, lp_startingY), 5, lp_turnX, lp_turnY, lp_centerX, lp_centerY, lp_arc, lp_arcSpeed, lp_bullet, lp_targetFighter);
}

void gf_MobAttack (unit lp_mob, point lp_target) {
    string auto6F423F11_val;

    // Variable Declarations
    string lv_type;
    point lv_modifiedPoint;

    // Variable Initialization

    // Implementation
    lv_type = UnitGetType(lp_mob);
    lv_modifiedPoint = libNtve_gf_PointFromXYZ(PointGetX(lp_target), PointGetY(lp_target), 15.0);
    auto6F423F11_val = lv_type;
    if (auto6F423F11_val == "SS_Scout") {
        UnitIssueOrder(lp_mob, OrderTargetingPoint(AbilityCommand("SS_ScoutAttack", 0), lv_modifiedPoint), c_orderQueueReplace);
    }
    else if (auto6F423F11_val == "SS_Phoenix") {
        UnitIssueOrder(lp_mob, Order(AbilityCommand("SS_PhoenixShooting", 0)), c_orderQueueReplace);
    }
    else if (auto6F423F11_val == "SS_Corruptor") {
        UnitIssueOrder(lp_mob, OrderTargetingPoint(AbilityCommand("SS_CorruptorAttack", 0), lv_modifiedPoint), c_orderQueueReplace);
    }
    else if (auto6F423F11_val == "SS_SwarmGuardian") {
        UnitIssueOrder(lp_mob, OrderTargetingPoint(AbilityCommand("SS_SwarmGuardianAttack", 0), lv_modifiedPoint), c_orderQueueReplace);
    }
    else if (auto6F423F11_val == "SS_Wraith") {
        UnitIssueOrder(lp_mob, OrderTargetingPoint(AbilityCommand("SS_WraithAttack", 0), lv_modifiedPoint), c_orderQueueReplace);
    }
    else if (auto6F423F11_val == "SS_ScienceVessel") {
        UnitIssueOrder(lp_mob, OrderTargetingPoint(AbilityCommand("SS_ScienceVesselAttack", 0), lv_modifiedPoint), c_orderQueueReplace);
    }
    else {
    }
}

void gf_MobSpawned (unit lp_mob) {
    string autoEA4D8E4B_val;

    // Implementation
    autoEA4D8E4B_val = UnitGetType(lp_mob);
    if (autoEA4D8E4B_val == "SS_SwarmGuardian") {
        gf_Level2SwarmGuardianMovement(lp_mob, UnitGetPosition(lp_mob));
    }
    else if (autoEA4D8E4B_val == "SS_ScienceVessel") {
        gf_Level3ScienceVesselMovement(lp_mob, UnitGetPosition(lp_mob));
    }
    else if (autoEA4D8E4B_val == "SS_Battlecruiser") {
        gf_Level3BattlecruiserBehavior(lp_mob, UnitGetPosition(lp_mob));
    }
    else {
    }
}

void gf_ReadyToSpawnPowerup (string lp_unitType) {
    // Implementation
    gv_powerupReady = lp_unitType;
}

void gf_CreatePowerup (point lp_pos, string lp_type) {
    // Implementation
    gv_levelTotalPowerups += 1;
    UnitCreate(1, lp_type, 0, gv_p0_NEUTRAL, lp_pos, libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_powerups, UnitLastCreated());
    UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
    UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
    UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
    UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
    gf_PowerupWonder(UnitLastCreated());
}

void gf_DespawnAllPowerupsOnMap () {
    unitgroup auto3F4C99E6_g;
    int auto3F4C99E6_u;
    unitgroup auto1B6E7E41_g;
    int auto1B6E7E41_u;
    unitgroup autoE3A7849B_g;
    int autoE3A7849B_u;
    unitgroup auto5262DC05_g;
    int auto5262DC05_u;

    // Variable Declarations
    unit lv_u;

    // Variable Initialization

    // Implementation
    auto3F4C99E6_g = UnitGroup("SS_PowerupBomb", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3F4C99E6_u = 1;
    for ( ; auto3F4C99E6_u <= UnitGroupCount(auto3F4C99E6_g, c_unitCountAll) ; auto3F4C99E6_u += BoolToInt(lv_u == UnitGroupUnit(auto3F4C99E6_g, auto3F4C99E6_u)) ) {
        lv_u = UnitGroupUnit(auto3F4C99E6_g, auto3F4C99E6_u);
        UnitRemove(lv_u);
    }
    auto1B6E7E41_g = UnitGroup("SS_PowerupHealth", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1B6E7E41_u = 1;
    for ( ; auto1B6E7E41_u <= UnitGroupCount(auto1B6E7E41_g, c_unitCountAll) ; auto1B6E7E41_u += BoolToInt(lv_u == UnitGroupUnit(auto1B6E7E41_g, auto1B6E7E41_u)) ) {
        lv_u = UnitGroupUnit(auto1B6E7E41_g, auto1B6E7E41_u);
        UnitRemove(lv_u);
    }
    autoE3A7849B_g = UnitGroup("SS_PowerupSideMissiles", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE3A7849B_u = 1;
    for ( ; autoE3A7849B_u <= UnitGroupCount(autoE3A7849B_g, c_unitCountAll) ; autoE3A7849B_u += BoolToInt(lv_u == UnitGroupUnit(autoE3A7849B_g, autoE3A7849B_u)) ) {
        lv_u = UnitGroupUnit(autoE3A7849B_g, autoE3A7849B_u);
        UnitRemove(lv_u);
    }
    auto5262DC05_g = UnitGroup("SS_PowerupStrongerMissiles", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5262DC05_u = 1;
    for ( ; auto5262DC05_u <= UnitGroupCount(auto5262DC05_g, c_unitCountAll) ; auto5262DC05_u += BoolToInt(lv_u == UnitGroupUnit(auto5262DC05_g, auto5262DC05_u)) ) {
        lv_u = UnitGroupUnit(auto5262DC05_g, auto5262DC05_u);
        UnitRemove(lv_u);
    }
}

trigger auto_gf_PowerupWonder_Trigger = null;
unit auto_gf_PowerupWonder_lp_powerup;

void gf_PowerupWonder (unit lp_powerup) {
    auto_gf_PowerupWonder_lp_powerup = lp_powerup;

    if (auto_gf_PowerupWonder_Trigger == null) {
        auto_gf_PowerupWonder_Trigger = TriggerCreate("auto_gf_PowerupWonder_TriggerFunc");
    }

    TriggerExecute(auto_gf_PowerupWonder_Trigger, false, false);
}

bool auto_gf_PowerupWonder_TriggerFunc (bool testConds, bool runActions) {
    unit lp_powerup = auto_gf_PowerupWonder_lp_powerup;

    int auto8D64FDEC_n;
    int auto8D64FDEC_i;

    // Variable Declarations
    point lv_center;
    point lv_newLoc;
    fixed lv_xLeft;
    fixed lv_xRight;
    fixed lv_yTop;
    fixed lv_yBottom;
    fixed lv_x;
    fixed lv_y;

    // Variable Initialization
    lv_xLeft = gf_ConvertShooterXToMapX(4.0);
    lv_xRight = gf_ConvertShooterXToMapX(16.0);
    lv_yTop = gf_ConvertShooterYToMapY(-5.0);
    lv_yBottom = gf_ConvertShooterYToMapY(-10.0);

    // Implementation
    lv_center = UnitGetPosition(lp_powerup);
    lv_x = MaxF(lv_xLeft, MinF(lv_xRight, PointGetX(lv_center)));
    lv_y = MaxF(lv_yBottom, MinF(lv_yTop, PointGetY(lv_center)));
    lv_center = Point(lv_x, lv_y);
    auto8D64FDEC_n = 6;
    for (auto8D64FDEC_i = 1; auto8D64FDEC_i <= auto8D64FDEC_n; auto8D64FDEC_i += 1) {
        if ((UnitIsAlive(lp_powerup) == false)) {
            return true;
        }
        else {
        }
        lv_newLoc = PointWithOffsetPolar(lv_center, RandomFixed(3.0, 4.0), libNtve_gf_RandomAngle());
        UnitIssueOrder(lp_powerup, OrderTargetingPoint(AbilityCommand("move", 0), lv_newLoc), c_orderQueueReplace);
        Wait(RandomFixed(4.0, 7.0), c_timeGame);
    }
    while (!((UnitTestState(lp_powerup, c_unitStateIdle) == true))) {
        Wait(1.0, c_timeGame);
    }
    while ((UnitHasBehavior(lp_powerup, "SS_PowerupMorphToBomb") == true)) {
        UnitBehaviorRemove(lp_powerup, "SS_PowerupMorphToBomb", 1);
    }
    while ((UnitHasBehavior(lp_powerup, "SS_PowerupMorphToHealth") == true)) {
        UnitBehaviorRemove(lp_powerup, "SS_PowerupMorphToHealth", 1);
    }
    while ((UnitHasBehavior(lp_powerup, "SS_PowerupMorphToSideMissiles") == true)) {
        UnitBehaviorRemove(lp_powerup, "SS_PowerupMorphToSideMissiles", 1);
    }
    while ((UnitHasBehavior(lp_powerup, "SS_PowerupMorphToStrongerMissiles") == true)) {
        UnitBehaviorRemove(lp_powerup, "SS_PowerupMorphToStrongerMissiles", 1);
    }
    lv_newLoc = PointWithOffsetPolar(UnitGetPosition(lp_powerup), 30.0, 270.0);
    UnitIssueOrder(lp_powerup, OrderTargetingPoint(AbilityCommand("move", 0), lv_newLoc), c_orderQueueReplace);
    Wait(10.0, c_timeGame);
    UnitRemove(lp_powerup);
    return true;
}

void gf_InitializePowerupDataSingle (string lp_type, string lp_icon, text lp_name) {
    // Implementation
    gv_powerupTypeCount += 1;
    gv_powerupTypeUnitTypes[gv_powerupTypeCount] = lp_type;
    gv_powerupTypeIcons[gv_powerupTypeCount] = lp_icon;
    gv_powerupTypeNames[gv_powerupTypeCount] = lp_name;
    gv_powerupTypePickedUp[gv_powerupTypeCount] = 0;
}

void gf_InitializePowerupData () {
    // Implementation
    gf_InitializePowerupDataSingle("SS_PowerupSideMissiles", "Assets\\Textures\\btn-lostviking_sidemissiles.dds", StringExternal("Param/Value/1A138220"));
    gf_InitializePowerupDataSingle("SS_PowerupStrongerMissiles", "Assets\\Textures\\btn-lostviking-plasmamissile.dds", StringExternal("Param/Value/B657760E"));
    gf_InitializePowerupDataSingle("SS_PowerupBomb", "Assets\\Textures\\btn-lostvinking-bomb.dds", StringExternal("Param/Value/393F8F64"));
    gf_InitializePowerupDataSingle("SS_PowerupHealth", "Assets\\Textures\\btn-lostvinking_drone.dds", StringExternal("Param/Value/EF14332A"));
}

void gf_CreatePowerupTextTag (text lp_text, color lp_color) {
    // Implementation
    TextTagCreate(lp_text, 24, UnitGetPosition(gv_viking), 1.0, true, false, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, lp_color);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.5);
    TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
}

void gf_FighterAttack () {
    // Implementation
    if (((UnitIsAlive(gv_viking) == false) || (gv_fighterAttackKeyDown == false) || (gv_fighterAttackEnabled == false))) {
        return ;
    }
    else {
    }
    UnitIssueOrder(gv_viking, Order(AbilityCommand("SS_FighterShooting", 0)), c_orderQueueReplace);
}

void gf_FighterEnableDisableAttack (bool lp_enableDisable) {
    // Implementation
    gv_fighterAttackEnabled = (lp_enableDisable == true);
}

void gf_FighterMove () {
    // Variable Declarations
    const fixed lv_moveUnit = 0.45;
    point lv_posCur;
    point lv_posNext;
    region lv_bounds;
    point lv_maxBound;
    point lv_minBound;
    fixed lv_x;
    fixed lv_y;
    int lv_moveDirectionCount;

    // Variable Initialization

    // Implementation
    if (((UnitIsAlive(gv_viking) == false) || (gv_fighterMoveEnabled == false))) {
        return ;
    }
    else {
    }
    lv_posCur = UnitGetPosition(gv_viking);
    lv_posNext = lv_posCur;
    if ((gv_fighterMoveLeftKeyDown == true)) {
        lv_posNext = PointWithOffset(lv_posNext, (lv_moveUnit * -1.0), 0.0);
    }
    else {
    }
    if ((gv_fighterMoveRightKeyDown == true)) {
        lv_posNext = PointWithOffset(lv_posNext, (lv_moveUnit * 1.0), 0.0);
    }
    else {
    }
    if ((gv_fighterMoveUpKeyDown == true)) {
        lv_posNext = PointWithOffset(lv_posNext, 0.0, (lv_moveUnit * 1.0));
    }
    else {
    }
    if ((gv_fighterMoveDownKeyDown == true)) {
        lv_posNext = PointWithOffset(lv_posNext, 0.0, (lv_moveUnit * -1.0));
    }
    else {
    }
    if ((PointGetX(lv_posNext) != PointGetX(lv_posCur)) && (PointGetY(lv_posNext) != PointGetY(lv_posCur))) {
        lv_posNext = PointWithOffsetPolar(lv_posCur, lv_moveUnit, AngleBetweenPoints(lv_posCur, lv_posNext));
    }
    else {
    }
    if ((PointGetX(lv_posNext) < PointGetX(lv_posCur))) {
        if ((gv_fighterMovingDirection != 0)) {
            gv_fighterMovingDirection = 0;
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_viking), c_animNameDefault, "Walk Left", c_animFlagPlayForever, c_animTimeDefault);
        }
        else {
        }
    }
    else if ((PointGetX(lv_posNext) > PointGetX(lv_posCur))) {
        if ((gv_fighterMovingDirection != 1)) {
            gv_fighterMovingDirection = 1;
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_viking), c_animNameDefault, "Walk Right", c_animFlagPlayForever, c_animTimeDefault);
        }
        else {
        }
    }
    else if ((true == true)) {
        if ((gv_fighterMovingDirection != 2)) {
            gv_fighterMovingDirection = 2;
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_viking), c_animNameDefault, "Walk", c_animFlagPlayForever, c_animTimeDefault);
        }
        else {
        }
    }
    lv_bounds = gf_GetCameraBoundary();
    if ((RegionContainsPoint(lv_bounds, lv_posNext) == false)) {
        lv_maxBound = RegionGetBoundsMax(lv_bounds);
        lv_minBound = RegionGetBoundsMin(lv_bounds);
        lv_x = PointGetX(lv_posNext);
        lv_y = PointGetY(lv_posNext);
        if ((lv_x < PointGetX(lv_minBound))) {
            lv_x = PointGetX(lv_minBound);
        }
        else if ((lv_x > PointGetX(lv_maxBound))) {
            lv_x = PointGetX(lv_maxBound);
        }
        if ((lv_y < PointGetY(lv_minBound))) {
            lv_y = PointGetY(lv_minBound);
        }
        else if ((lv_y > PointGetY(lv_maxBound))) {
            lv_y = PointGetY(lv_maxBound);
        }
        lv_posNext = Point(lv_x, lv_y);
    }
    else {
    }
    UnitSetPosition(gv_viking, lv_posNext, true);
}

void gf_FighterEnableDisableMove (bool lp_enableDisable) {
    // Implementation
    gv_fighterMoveEnabled = (lp_enableDisable == true);
}

void gf_CreateViking () {
    // Implementation
    gf_FighterEnableDisableControl(false);
    libNtve_gf_CreateUnitsAtPoint2(1, "SS_Fighter", 0, gv_p1_USER, RegionGetCenter(RegionEntireMap()));
    gv_viking = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(gv_viking, true);
    libNtve_gf_ShowHideUnit(gv_viking, false);
    UnitSetState(gv_viking, c_unitStateHighlightable, false);
    UnitSetState(gv_viking, c_unitStateCursorable, false);
    UnitSetState(gv_viking, c_unitStateSelectable, false);
    UnitSetState(gv_viking, c_unitStateStatusBar, false);
    UnitSetState(gv_viking, c_unitStateTooltipable, false);
    UnitSetFacing(gv_viking, 90.0, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_viking), "VikingFly", "Walk", c_animFlagPlayForever, c_animTimeDefault);
}

void gf_FighterEnableDisableControl (bool lp_enableDisable) {
    // Implementation
    gf_FighterEnableDisableAttack(lp_enableDisable);
    gf_FighterEnableDisableMove(lp_enableDisable);
}

void gf_DisplayBossComingMessage (text lp_warningMessage) {
    // Variable Declarations
    int lv_index;
    int lv_dlg;
    int lv_bg;
    int lv_text;
    const fixed lv_dur = 3.0;

    // Variable Initialization
    lv_dlg = c_invalidDialogId;
    lv_bg = c_invalidDialogControlId;
    lv_text = c_invalidDialogControlId;

    // Implementation
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "LostViking_MusicBossFightIntro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundPlay(SoundLink("UI_TerranKlaxonAlert", 0), PlayerGroupAll(), 100.0, 0.0);
    libCamp_gf_CreateDialogInGrid(40.0, 10.0, c_anchorCenter, 0.0, -2.5, false);
    lv_dlg = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libCamp_gf_CreateDialogItemInGrid(DialogLastCreated(), c_triggerControlTypeLabel, c_anchorCenter, 0.0, 0.0, 15.0, 6.0, lp_warningMessage);
    lv_text = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArcadeFighterWarning", PlayerGroupAll());
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    Wait(3.0, c_timeGame);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "LostViking_MusicBossFightLoop", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    Wait(4.0, c_timeGame);
    DialogControlFadeTransparency(lv_text, PlayerGroupAll(), lv_dur, 100.0);
    Wait(lv_dur, c_timeGame);
    DialogDestroy(lv_dlg);
}

trigger auto_gf_DisplayLevelStartLabel_Trigger = null;
int auto_gf_DisplayLevelStartLabel_lp_level;

void gf_DisplayLevelStartLabel (int lp_level) {
    auto_gf_DisplayLevelStartLabel_lp_level = lp_level;

    if (auto_gf_DisplayLevelStartLabel_Trigger == null) {
        auto_gf_DisplayLevelStartLabel_Trigger = TriggerCreate("auto_gf_DisplayLevelStartLabel_TriggerFunc");
    }

    TriggerExecute(auto_gf_DisplayLevelStartLabel_Trigger, false, false);
}

bool auto_gf_DisplayLevelStartLabel_TriggerFunc (bool testConds, bool runActions) {
    int lp_level = auto_gf_DisplayLevelStartLabel_lp_level;

    // Implementation
    libCamp_gf_CreateDialogInGrid(20.0, 4.0, c_anchorCenter, 0.0, -4.5, false);
    gv_levelStartLabelDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libCamp_gf_CreateDialogItemInGrid(DialogLastCreated(), c_triggerControlTypeLabel, c_anchorCenter, 0.0, 0.0, 20.0, 4.0, (StringExternal("Param/Value/90F37D06") + IntToText(((gv_repeatTimes * gf_NumberOfLevel()) + (lp_level)))));
    gv_levelStartLabelText = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CantinaLevelStart", PlayerGroupAll());
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    return true;
}

void gf_DestoryLevelStartLabel (bool lp_instant) {
    // Implementation
    if ((gv_levelStartLabelDialog == c_invalidDialogId)) {
        return ;
    }
    else {
    }
    if ((lp_instant == false)) {
        DialogControlFadeTransparency(gv_levelStartLabelText, PlayerGroupAll(), 3.0, 100.0);
        Wait(3.0, c_timeGame);
    }
    else {
    }
    DialogDestroy(gv_levelStartLabelDialog);
    gv_levelStartLabelDialog = c_invalidDialogId;
}

void gf_DisplayControlTip () {
    // Variable Declarations
    int lv_dlg;
    int lv_bg;
    int lv_text1;
    int lv_text2;

    // Variable Initialization
    lv_dlg = c_invalidDialogId;
    lv_bg = c_invalidDialogControlId;
    lv_text1 = c_invalidDialogControlId;
    lv_text2 = c_invalidDialogControlId;

    // Implementation
    UISetCursorAutoHide(PlayerGroupAll(), true, gv_c_MouseHideWait);
    if ((gv_controlTipDialog == c_invalidDialogId)) {
        libCamp_gf_CreateDialogInGrid(40.0, 25.0, c_anchorCenter, 0.0, -2.0, false);
        gv_controlTipDialog = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        libCamp_gf_CreateDialogItemInGrid(DialogLastCreated(), c_triggerControlTypeImage, c_anchorCenter, 0.0, 1.0, 14.0, 7.5, StringExternal("Param/Value/EC8CDF3E"));
        gv_controlTipBG = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_mission_statusbox01.dds", PlayerGroupAll());
        libCamp_gf_CreateDialogItemInGrid(DialogLastCreated(), c_triggerControlTypeLabel, c_anchorCenter, 3.9, 0.0, 20.0, 10.0, StringExternal("Param/Value/BEE4CD9C"));
        gv_controlTipLabel1 = DialogControlLastCreated();
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, gv_controlTipBG, c_anchorTopLeft, 100, 70);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArcadeFighterControlTipLeft", PlayerGroupAll());
        libCamp_gf_CreateDialogItemInGrid(DialogLastCreated(), c_triggerControlTypeLabel, c_anchorCenter, 10.0, 0.0, 20.0, 10.0, StringExternal("Param/Value/1BC71516"));
        gv_controlTipLabel2 = DialogControlLastCreated();
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, gv_controlTipLabel1, c_anchorTopLeft, 205, 0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArcadeFighterControlTipRight", PlayerGroupAll());
        libCamp_gf_CreateDialogItemInGrid(DialogLastCreated(), c_triggerControlTypeButton, c_anchorBottom, 0.0, -1.0, 4.0, 1.0, StringExternal("Param/Value/19E7F412"));
        libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), "WoL_CantinaArcade_StartButton", PlayerGroupAll());
        gv_controlTipStartButton = DialogControlLastCreated();
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, gv_controlTipBG, c_anchorBottom, 0, -70);
    }
    else {
    }
    DialogControlSetVisible(gv_controlTipStartButton, PlayerGroupAll(), true);
    DialogControlFadeTransparency(gv_controlTipBG, PlayerGroupAll(), 0.0, 0.0);
    DialogControlFadeTransparency(gv_controlTipLabel1, PlayerGroupAll(), 0.0, 0.0);
    DialogControlFadeTransparency(gv_controlTipLabel2, PlayerGroupAll(), 0.0, 0.0);
    DialogSetVisible(gv_controlTipDialog, PlayerGroupAll(), true);
    TriggerEnable(gt_StartButtonClicked, true);
    gv_controlTipStartButtonClicked = false;
    while (!((gv_controlTipStartButtonClicked == true))) {
        Wait(0.5, c_timeGame);
    }
    UISetCursorAutoHide(PlayerGroupAll(), true, gv_c_MouseHideWait);
}

void gf_HideControlTip (bool lp_instant) {
    // Variable Declarations
    const fixed lv_dur = 1.5;

    // Variable Initialization

    // Implementation
    gv_controlTipStartButtonClicked = true;
    if ((lp_instant == true)) {
        DialogSetVisible(gv_controlTipDialog, PlayerGroupAll(), false);
        return ;
    }
    else {
    }
    DialogControlSetVisible(gv_controlTipStartButton, PlayerGroupAll(), false);
    DialogControlFadeTransparency(gv_controlTipBG, PlayerGroupAll(), lv_dur, 100.0);
    DialogControlFadeTransparency(gv_controlTipLabel1, PlayerGroupAll(), lv_dur, 100.0);
    DialogControlFadeTransparency(gv_controlTipLabel2, PlayerGroupAll(), lv_dur, 100.0);
    Wait(lv_dur, c_timeGame);
    DialogSetVisible(gv_controlTipDialog, PlayerGroupAll(), false);
}

void gf_AddScore (int lp_points) {
    // Implementation
    gv_score = (gv_score + gf_ModifyScoreWithBonusMultiplier(lp_points));
    if ((gv_score > gv_highScore)) {
        gf_SetHighScore(gv_score);
        gv_recordBroke = true;
    }
    else {
    }
    if ((gv_score >= 125000)) {
        AchievementAward(1, "LostVikingBronze");
    }
    else {
    }
    if ((gv_score >= 250000)) {
        AchievementAward(1, "LostVikingSilver");
    }
    else {
    }
    if ((gv_score >= 500000)) {
        AchievementAward(1, "LostVikingGold");
    }
    else {
    }
    TriggerExecute(gt_VikingExtraLifes, true, false);
}

void gf_SetHighScore (int lp_newHighScore) {
    // Implementation
    gv_highScore = lp_newHighScore;
    ConversationDataStateSetValue("ArcadeGameVariables|HiScore", gv_highScore);
}

int gf_ModifyScoreWithBonusMultiplier (int lp_points) {
    // Variable Declarations
    int lv_modifiedPoints;

    // Variable Initialization

    // Implementation
    lv_modifiedPoints = FixedToInt((IntToFixed(lp_points) * (1.0 + (IntToFixed(gv_repeatTimes) * gv_c_ScoreBonus))));
    return lv_modifiedPoints;
}

int gf_ScoreofUnitType (string lp_unitType) {
    // Variable Declarations
    string lv_string;

    // Variable Initialization
    lv_string = "";

    // Implementation
    lv_string = CatalogFieldValueGet(c_gameCatalogUnit, (lp_unitType), "ScoreKill", c_playerAny);
    return StringToInt(lv_string);
}

void gf_ResetScoreTracking () {
    // Implementation
    gv_levelTotalEnemy = 0;
    gv_levelTotalPowerups = 0;
    gf_ResetPowerupPickCount();
}

void gf_ResetPowerupPickCount () {
    int auto1E8A60F8_ae;
    int auto1E8A60F8_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    auto1E8A60F8_ae = gv_powerupTypeCount;
    auto1E8A60F8_ai = 1;
    lv_index = 1;
    for ( ; ( (auto1E8A60F8_ai >= 0 && lv_index <= auto1E8A60F8_ae) || (auto1E8A60F8_ai <= 0 && lv_index >= auto1E8A60F8_ae) ) ; lv_index += auto1E8A60F8_ai ) {
        gv_powerupTypePickedUp[lv_index] = 0;
    }
}

void gf_DisplayScoreScreen (int lp_level) {
    int auto5B73AECA_ae;
    int auto5B73AECA_ai;
    int auto7AC55151_ae;
    int auto7AC55151_ai;

    // Variable Declarations
    int lv_dlg;
    int lv_dlg2;
    int lv_bg;
    int lv_titleGlow;
    int lv_textLeft;
    int lv_textRight;
    fixed lv_accuracy;
    const fixed lv_x1 = 1.0;
    const fixed lv_x2 = 1.25;
    const fixed lv_x3 = 0.0;
    const fixed lv_x4 = 1.0;
    fixed lv_y;
    int lv_index;
    int lv_shotDownTotal;
    int lv_pickupTotal;
    int lv_scoreTotal;

    // Variable Initialization
    lv_dlg = c_invalidDialogId;
    lv_dlg2 = c_invalidDialogId;
    lv_bg = c_invalidDialogControlId;
    lv_titleGlow = c_invalidDialogControlId;
    lv_textLeft = c_invalidDialogControlId;
    lv_textRight = c_invalidDialogControlId;

    // Implementation
    UISetCursorAutoHide(PlayerGroupAll(), false, gv_c_MouseHideWait);
    libCamp_gf_CreateDialogInGrid(10.0, 15.0, c_anchorCenter, 0.0, 0.0, false);
    lv_dlg = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libCamp_gf_CreateDialogItemInGrid(DialogLastCreated(), c_triggerControlTypeImage, c_anchorCenter, 0.0, 0.0, 10.0, 15.0, StringExternal("Param/Value/8C1D1E68"));
    lv_bg = DialogControlLastCreated();
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_mission_statusbox02.dds", PlayerGroupAll());
    lv_y = 0.3;
    libCamp_gf_CreateDialogItemInGrid(DialogLastCreated(), c_triggerControlTypeImage, c_anchorTop, 0.0, lv_y, 13.0, 1.5, StringExternal("Param/Value/302455AB"));
    lv_titleGlow = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_challenge_glow4text.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 4.71), PlayerGroupAll());
    libCamp_gf_CreateDialogItemInGrid(DialogLastCreated(), c_triggerControlTypeLabel, c_anchorTop, 0.0, lv_y, 15.0, 1.0, (StringExternal("Param/Value/2462A73D") + IntToText(((lp_level) + (gv_repeatTimes * 3))) + StringExternal("Param/Value/1437965B")));
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArcadeFighterLevelScoreTitle", PlayerGroupAll());
    libCamp_gf_MoveDialogItemInGridRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_titleGlow, c_anchorCenter, 0.0, 0.0);
    lv_y += 1.55;
    libCamp_gf_CreateDialogItemInGrid(DialogLastCreated(), c_triggerControlTypeImage, c_anchorTop, 0.0, lv_y, 9.0, 5.1, StringExternal("Param/Value/843512C2"));
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeHorizontalBorder, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_challenge_frame_innerborder.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(12.94, 75.69, 73.73), PlayerGroupAll());
    lv_y += 0.2;
    libCamp_gf_CreateDialogItemInGrid(DialogLastCreated(), c_triggerControlTypeLabel, c_anchorTopLeft, lv_x1, lv_y, 7.0, 6.0, (StringExternal("Param/Value/5550E323")));
    lv_textLeft = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArcadeFighterLevelScoreText", PlayerGroupAll());
    libCamp_gf_CreateDialogItemInGrid(DialogLastCreated(), c_triggerControlTypeLabel, c_anchorTopRight, lv_x4, lv_y, 7.0, 6.0, StringExternal("Param/Value/36158CDC"));
    lv_textRight = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArcadeFighterLevelScore", PlayerGroupAll());
    lv_y += 0.8;
    auto5B73AECA_ae = gv_levelWavePlaneTypeCount[(gf_CurrentLevel())];
    auto5B73AECA_ai = 1;
    lv_index = 1;
    for ( ; ( (auto5B73AECA_ai >= 0 && lv_index <= auto5B73AECA_ae) || (auto5B73AECA_ai <= 0 && lv_index >= auto5B73AECA_ae) ) ; lv_index += auto5B73AECA_ai ) {
        libCamp_gf_CreateDialogItemInGrid(DialogLastCreated(), c_triggerControlTypeImage, c_anchorTopLeft, lv_x2, (lv_y - 0.15), 0.8, 0.8, StringExternal("Param/Value/8A7FA170"));
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), gv_levelWavePlaneIcon[(lp_level)][lv_index], PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), gv_levelWavePlaneName[(lp_level)][lv_index], PlayerGroupAll());
        libCamp_gf_CreateDialogItemInGrid(DialogLastCreated(), c_triggerControlTypeLabel, c_anchorTopLeft, lv_x3, lv_y, 4.3, 1.0, (IntToText(gf_ModifyScoreWithBonusMultiplier(gf_ScoreofUnitType(gv_levelWavePlaneType[(lp_level)][lv_index]))) + StringExternal("Param/Value/D5464ECA")));
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArcadeFighterLevelScoreTextSingle", PlayerGroupAll());
        libCamp_gf_CreateDialogItemInGrid(DialogLastCreated(), c_triggerControlTypeLabel, c_anchorTopRight, lv_x4, lv_y, 7.0, 6.0, (IntToText(gv_levelWaveShotDown[(lp_level)][lv_index])));
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArcadeFighterLevelScoreSingle", PlayerGroupAll());
        lv_shotDownTotal += gv_levelWaveShotDown[(lp_level)][lv_index];
        lv_scoreTotal += (gf_ModifyScoreWithBonusMultiplier(gf_ScoreofUnitType(gv_levelWavePlaneType[(lp_level)][lv_index])) * gv_levelWaveShotDown[(lp_level)][lv_index]);
        lv_y += 0.8;
    }
    if ((gv_levelTotalEnemy > 0)) {
        libNtve_gf_SetDialogItemText(lv_textRight, (IntToText(lv_shotDownTotal) + StringExternal("Param/Value/C4230C9B") + IntToText(FixedToInt((IntToFixed((lv_shotDownTotal * 100)) / IntToFixed(gv_levelTotalEnemy)))) + StringExternal("Param/Value/DDBC414E")), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemText(lv_textRight, (IntToText(lv_shotDownTotal) + StringExternal("Param/Value/75C25378") + IntToText(0) + StringExternal("Param/Value/EA25C3C3")), PlayerGroupAll());
    }
    lv_y = 7.4;
    libCamp_gf_CreateDialogItemInGrid(DialogLastCreated(), c_triggerControlTypeImage, c_anchorTop, 0.0, lv_y, 9.0, 4.4, StringExternal("Param/Value/E2AAE2FF"));
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeHorizontalBorder, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_challenge_frame_innerborder.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(12.94, 75.69, 73.73), PlayerGroupAll());
    lv_y += 0.2;
    libCamp_gf_CreateDialogItemInGrid(DialogLastCreated(), c_triggerControlTypeLabel, c_anchorTopLeft, lv_x1, lv_y, 7.0, 6.0, (StringExternal("Param/Value/B17203A0")));
    lv_textLeft = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArcadeFighterLevelScoreText", PlayerGroupAll());
    libCamp_gf_CreateDialogItemInGrid(DialogLastCreated(), c_triggerControlTypeLabel, c_anchorTopRight, lv_x4, lv_y, 7.0, 6.0, StringExternal("Param/Value/BA7FDEDF"));
    lv_textRight = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArcadeFighterLevelScore", PlayerGroupAll());
    lv_y += 0.8;
    auto7AC55151_ae = gv_powerupTypeCount;
    auto7AC55151_ai = 1;
    lv_index = 1;
    for ( ; ( (auto7AC55151_ai >= 0 && lv_index <= auto7AC55151_ae) || (auto7AC55151_ai <= 0 && lv_index >= auto7AC55151_ae) ) ; lv_index += auto7AC55151_ai ) {
        libCamp_gf_CreateDialogItemInGrid(DialogLastCreated(), c_triggerControlTypeImage, c_anchorTopLeft, lv_x2, (lv_y - 0.15), 0.8, 0.8, StringExternal("Param/Value/40977116"));
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), gv_powerupTypeIcons[lv_index], PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), gv_powerupTypeNames[lv_index], PlayerGroupAll());
        libCamp_gf_CreateDialogItemInGrid(DialogLastCreated(), c_triggerControlTypeLabel, c_anchorTopLeft, lv_x3, lv_y, 4.3, 1.0, (IntToText(gf_ModifyScoreWithBonusMultiplier(gf_ScoreofUnitType(gv_powerupTypeUnitTypes[lv_index]))) + StringExternal("Param/Value/4E444533")));
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArcadeFighterLevelScoreTextSingle", PlayerGroupAll());
        libCamp_gf_CreateDialogItemInGrid(DialogLastCreated(), c_triggerControlTypeLabel, c_anchorTopRight, lv_x4, lv_y, 7.0, 6.0, (IntToText(gv_powerupTypePickedUp[lv_index])));
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArcadeFighterLevelScoreSingle", PlayerGroupAll());
        lv_pickupTotal += gv_powerupTypePickedUp[lv_index];
        lv_scoreTotal += (gf_ModifyScoreWithBonusMultiplier(gf_ScoreofUnitType(gv_powerupTypeUnitTypes[lv_index])) * gv_powerupTypePickedUp[lv_index]);
        lv_y += 0.8;
    }
    if ((gv_levelTotalPowerups > 0)) {
        libNtve_gf_SetDialogItemText(lv_textRight, (IntToText(lv_pickupTotal) + StringExternal("Param/Value/CBF8FDF4") + IntToText(FixedToInt((IntToFixed((lv_pickupTotal * 100)) / IntToFixed(gv_levelTotalPowerups)))) + StringExternal("Param/Value/A4B46239")), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemText(lv_textRight, (IntToText(lv_pickupTotal) + StringExternal("Param/Value/F18B9843") + IntToText(0) + StringExternal("Param/Value/BFEE0BF7")), PlayerGroupAll());
    }
    lv_y += 0.7;
    libCamp_gf_CreateDialogItemInGrid(DialogLastCreated(), c_triggerControlTypeLabel, c_anchorTopLeft, lv_x1, lv_y, 7.0, 6.0, (StringExternal("Param/Value/0FE2CE8A")));
    lv_textLeft = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArcadeFighterLevelScoreText", PlayerGroupAll());
    libCamp_gf_CreateDialogItemInGrid(DialogLastCreated(), c_triggerControlTypeLabel, c_anchorTopRight, lv_x4, lv_y, 7.0, 6.0, (IntToText(lv_scoreTotal)));
    lv_textRight = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArcadeFighterLevelScore", PlayerGroupAll());
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libCamp_gf_CreateDialogItemInGrid(DialogLastCreated(), c_triggerControlTypeButton, c_anchorBottom, 0.0, 0.5, 4.5, 1.834, StringExternal("Param/Value/BB520EAF"));
    libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), "WoL_CantinaArcade_ContinueButton", PlayerGroupAll());
    gv_scoreScreenCloseButton = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ScreenButton", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_confirmation_normalpressed_terran.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_button_confirmation_normaloverpressedover_terran.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeEndCap, PlayerGroupAll());
    DialogCreate(1000, 100, c_anchorCenter, 0, 0, false);
    lv_dlg2 = DialogLastCreated();
    DialogSetPositionRelative(DialogLastCreated(), c_anchorTop, lv_dlg, c_anchorBottom, 0, -20);
    DialogSetImageVisible(DialogLastCreated(), false);
    libCamp_gf_CreateDialogItemInGrid(DialogLastCreated(), c_triggerControlTypeLabel, c_anchorCenter, 0.0, 0.0, 19.0, 1.6, StringExternal("Param/Value/CA138096"));
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArcadeFighterLevelScoreTitle", PlayerGroupAll());
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    TriggerEnable(gt_ScoreScreenCloseButtonClicked, true);
    TriggerEnable(gt_ScoreScreenSpacebarPressed, true);
    while (!((gv_scoreScreenCloseButton == c_invalidDialogControlId))) {
        Wait(0.25, c_timeGame);
    }
    DialogDestroy(lv_dlg);
    DialogDestroy(lv_dlg2);
    TriggerEnable(gt_ScoreScreenCloseButtonClicked, false);
    TriggerEnable(gt_ScoreScreenSpacebarPressed, false);
    UISetCursorAutoHide(PlayerGroupAll(), true, gv_c_MouseHideWait);
}

void gf_DisplayBossHPBar (text lp_name) {
    // Variable Declarations
    int lv_tempDialog;
    const int lv_barHight = 40;
    const int lv_innerBarHight = 32;
    int lv_barLabel;

    // Variable Initialization
    lv_tempDialog = c_invalidDialogId;
    lv_barLabel = c_invalidDialogControlId;

    // Implementation
    DialogCreate((gv_bossHPBarWidth + 0), lv_barHight, c_anchorTopRight, 10, 10, false);
    gv_bossHPBarDlg = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetTransparency(DialogLastCreated(), 0.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_mission_leaderboard_progressbar_fill.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, ((gv_bossHPBarWidth - gv_bossHPBarInnerWidth) / 2), 0);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100.00, 0.00, 0.00), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv_bossHPBarInnerWidth, lv_innerBarHight);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_bossHPBar = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_mission_leaderboard_progressbar_fill.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, ((gv_bossHPBarWidth - gv_bossHPBarInnerWidth) / 2), 0);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv_bossHPBarInnerWidth, lv_innerBarHight);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_mission_leaderboard_progressbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 0, 0);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(21.96, 79.61, 78.43), PlayerGroupAll());
    DialogCreate(400, 30, c_anchorTopRight, 10, 10, false);
    gv_bossHPBarLabelDlg = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetPositionRelative(DialogLastCreated(), c_anchorRight, gv_bossHPBarDlg, c_anchorLeft, -10, 0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 0, 0);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (lp_name + StringExternal("Param/Value/2C7CAC21")), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArcadeFighterBossBarTitle", PlayerGroupAll());
    DialogSetVisible(gv_bossHPBarDlg, PlayerGroupAll(), true);
    DialogSetVisible(gv_bossHPBarLabelDlg, PlayerGroupAll(), true);
}

void gf_DisplayUnitHPBar (text lp_name) {
    // Variable Declarations
    int lv_tempDialog;
    const int lv_barHight = 40;
    const int lv_innerBarHight = 32;
    int lv_barLabel;

    // Variable Initialization
    lv_tempDialog = c_invalidDialogId;
    lv_barLabel = c_invalidDialogControlId;

    // Implementation
    DialogCreate((gv_unitHPBarWidth + 0), lv_barHight, c_anchorTopRight, 10, 55, false);
    gv_unitHPBarDlg = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetTransparency(DialogLastCreated(), 0.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_mission_leaderboard_progressbar_fill.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, ((gv_unitHPBarWidth - gv_unitHPBarInnerWidth) / 2), 0);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100.00, 0.00, 0.00), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv_unitHPBarInnerWidth, lv_innerBarHight);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_unitHPBarDialogBar = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_mission_leaderboard_progressbar_fill.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, ((gv_unitHPBarWidth - gv_unitHPBarInnerWidth) / 2), 0);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv_unitHPBarInnerWidth, lv_innerBarHight);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_mission_leaderboard_progressbar_frame.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 0, 0);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(21.96, 79.61, 78.43), PlayerGroupAll());
    DialogCreate(400, 30, c_anchorTopRight, 10, 10, false);
    gv_unitHPBarLabelDlg = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetPositionRelative(DialogLastCreated(), c_anchorTopRight, gv_unitHPBarDlg, c_anchorTopLeft, -10, 0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 0, 0);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 400, lv_barHight);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (lp_name + StringExternal("Param/Value/83992C50")), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArcadeFighterBossBarTitle", PlayerGroupAll());
    DialogSetVisible(gv_unitHPBarDlg, PlayerGroupAll(), true);
    DialogSetVisible(gv_unitHPBarLabelDlg, PlayerGroupAll(), true);
}

void gf_CreateUI () {
    int autoF3DC6E58_ae;
    int autoF3DC6E58_ai;
    int auto905DACB1_ae;
    int auto905DACB1_ai;

    // Variable Declarations
    int lv_scoreTitle;
    int lv_highScoreTitle;
    int lv_index;

    // Variable Initialization
    lv_scoreTitle = c_invalidDialogControlId;
    lv_highScoreTitle = c_invalidDialogControlId;

    // Implementation
    DialogCreate(10, 10, c_anchorCenter, 0, 0, false);
    gv_uI_Dlg = DialogLastCreated();
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    lv_scoreTitle = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArcadeFighterScoreTitle", PlayerGroupAll());
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/07FB6665"), PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 30, 10);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 300, 100);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_uI_ScoreLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArcadeFighterScore", PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_scoreTitle, c_anchorTopLeft, 0, 25);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 180, 100);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    lv_highScoreTitle = DialogControlLastCreated();
    gv_uI_HighScoreTitle = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArcadeFighterHiScoreTitle", PlayerGroupAll());
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/79644248"), PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 300, 10);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 300, 100);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_uI_HighScoreLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArcadeFighterHiScore", PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_highScoreTitle, c_anchorTopLeft, 0, 25);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 180, 100);
    autoF3DC6E58_ae = gv_uI_LifeIconsMaxCount;
    autoF3DC6E58_ai = 1;
    lv_index = 1;
    for ( ; ( (autoF3DC6E58_ai >= 0 && lv_index <= autoF3DC6E58_ae) || (autoF3DC6E58_ai <= 0 && lv_index >= autoF3DC6E58_ae) ) ; lv_index += autoF3DC6E58_ai ) {
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
        gv_uI_LifeIcons[lv_index] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-terran-vikingfighter.dds", PlayerGroupAll());
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 64, 64);
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, gv_uI_ScoreLabel, c_anchorTopLeft, (((lv_index - 1) * 67) - 10), 25);
    }
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_uI_LifeLabelLargeIcon = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-terran-vikingfighter.dds", PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 64, 64);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 20, 60);
    DialogControlSetVisible(gv_uI_LifeLabelLargeIcon, PlayerGroupAll(), false);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_uI_LifeLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArcadeFighterExtraLife", PlayerGroupAll());
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/607FA80C"), PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, gv_uI_LifeLabelLargeIcon, c_anchorBottomRight, 16, -5);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 120);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    auto905DACB1_ae = gv_uI_BombIconsMaxCount;
    auto905DACB1_ai = 1;
    lv_index = 1;
    for ( ; ( (auto905DACB1_ai >= 0 && lv_index <= auto905DACB1_ae) || (auto905DACB1_ai <= 0 && lv_index >= auto905DACB1_ae) ) ; lv_index += auto905DACB1_ai ) {
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
        gv_uI_BombIcons[lv_index] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-techupgrade-terran-attacksair.dds", PlayerGroupAll());
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 64, 64);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, (((lv_index - 1) * 67) + 20), 20);
    }
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_uI_BombLabelLargeIcon = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-techupgrade-terran-attacksair.dds", PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 64, 64);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, 20, 20);
    DialogControlSetVisible(gv_uI_BombLabelLargeIcon, PlayerGroupAll(), false);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_uI_BombLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArcadeFighterExtraLife", PlayerGroupAll());
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/6F9F5C01"), PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, gv_uI_BombLabelLargeIcon, c_anchorBottomRight, 16, 0);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 120);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
}

void gf_ShowHideUI (bool lp_showHide) {
    // Implementation
    DialogSetVisible(gv_uI_Dlg, PlayerGroupAll(), lp_showHide);
    libNtve_gf_HideScreenButton(lp_showHide, gv_c_ScreenButton_Quit);
}

void gf_UpdateUI () {
    int auto10ECD791_ae;
    int auto10ECD791_ai;
    int auto3484A54A_ae;
    int auto3484A54A_ai;
    int auto37D22AC8_ae;
    int auto37D22AC8_ai;
    int autoC7445413_ae;
    int autoC7445413_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    if ((gv_recordBroke == true)) {
        TriggerExecute(gt_RecordBrokeThread, true, false);
    }
    else {
    }
    libNtve_gf_SetDialogItemText(gv_uI_ScoreLabel, FormatNumber(gv_score), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_uI_HighScoreLabel, FormatNumber(gv_highScore), PlayerGroupAll());
    if ((gv_vikingLife >= 6)) {
        auto10ECD791_ae = gv_uI_LifeIconsMaxCount;
        auto10ECD791_ai = 1;
        lv_index = 1;
        for ( ; ( (auto10ECD791_ai >= 0 && lv_index <= auto10ECD791_ae) || (auto10ECD791_ai <= 0 && lv_index >= auto10ECD791_ae) ) ; lv_index += auto10ECD791_ai ) {
            DialogControlSetVisible(gv_uI_LifeIcons[lv_index], PlayerGroupAll(), false);
        }
        libNtve_gf_SetDialogItemText(gv_uI_LifeLabel, (StringExternal("Param/Value/52474599") + IntToText(gv_vikingLife)), PlayerGroupAll());
        DialogControlSetVisible(gv_uI_LifeLabel, PlayerGroupAll(), true);
        DialogControlSetVisible(gv_uI_LifeLabelLargeIcon, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(gv_uI_LifeLabel, PlayerGroupAll(), false);
        DialogControlSetVisible(gv_uI_LifeLabelLargeIcon, PlayerGroupAll(), false);
        auto3484A54A_ae = gv_uI_LifeIconsMaxCount;
        auto3484A54A_ai = 1;
        lv_index = 1;
        for ( ; ( (auto3484A54A_ai >= 0 && lv_index <= auto3484A54A_ae) || (auto3484A54A_ai <= 0 && lv_index >= auto3484A54A_ae) ) ; lv_index += auto3484A54A_ai ) {
            if ((lv_index <= gv_vikingLife)) {
                DialogControlSetVisible(gv_uI_LifeIcons[lv_index], PlayerGroupAll(), true);
            }
            else {
                DialogControlSetVisible(gv_uI_LifeIcons[lv_index], PlayerGroupAll(), false);
            }
        }
    }
    if ((gv_bombCount >= 6)) {
        auto37D22AC8_ae = gv_uI_BombIconsMaxCount;
        auto37D22AC8_ai = 1;
        lv_index = 1;
        for ( ; ( (auto37D22AC8_ai >= 0 && lv_index <= auto37D22AC8_ae) || (auto37D22AC8_ai <= 0 && lv_index >= auto37D22AC8_ae) ) ; lv_index += auto37D22AC8_ai ) {
            DialogControlSetVisible(gv_uI_BombIcons[lv_index], PlayerGroupAll(), false);
        }
        libNtve_gf_SetDialogItemText(gv_uI_BombLabel, (StringExternal("Param/Value/0F5B42D4") + IntToText(gv_bombCount)), PlayerGroupAll());
        DialogControlSetVisible(gv_uI_BombLabel, PlayerGroupAll(), true);
        DialogControlSetVisible(gv_uI_BombLabelLargeIcon, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(gv_uI_BombLabel, PlayerGroupAll(), false);
        DialogControlSetVisible(gv_uI_BombLabelLargeIcon, PlayerGroupAll(), false);
        autoC7445413_ae = gv_uI_BombIconsMaxCount;
        autoC7445413_ai = 1;
        lv_index = 1;
        for ( ; ( (autoC7445413_ai >= 0 && lv_index <= autoC7445413_ae) || (autoC7445413_ai <= 0 && lv_index >= autoC7445413_ae) ) ; lv_index += autoC7445413_ai ) {
            if ((lv_index <= gv_bombCount)) {
                DialogControlSetVisible(gv_uI_BombIcons[lv_index], PlayerGroupAll(), true);
            }
            else {
                DialogControlSetVisible(gv_uI_BombIcons[lv_index], PlayerGroupAll(), false);
            }
        }
    }
}

void gf_FromatBackPlayButton (int lp_button) {
    // Implementation
    libNtve_gf_SetDialogItemImageType(lp_button, c_triggerImageTypeEndCap, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(lp_button, "Assets\\Textures\\ui_button_generic_greenglow_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(lp_button, "Assets\\Textures\\ui_button_generic_greenglow_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(lp_button, "ArcadeBackButton", PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lp_button, TextCase(libNtve_gf_DialogItemText(lp_button, 1), true), PlayerGroupAll());
}

void gf_FadeInOutWithPicture (bool lp_fadeIn, fixed lp_duration, bool lp_waitUntilDone) {
    // Implementation
    CinematicFade(lp_fadeIn, lp_duration, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    if ((lp_waitUntilDone == true)) {
        gf_FadeInOutCore(lp_fadeIn, lp_duration);
    }
    else {
        gf_FadeInOutSeperateThread(lp_fadeIn, lp_duration, lp_waitUntilDone);
    }
}

trigger auto_gf_FadeInOutSeperateThread_Trigger = null;
bool auto_gf_FadeInOutSeperateThread_lp_fadeIn;
fixed auto_gf_FadeInOutSeperateThread_lp_duration;
bool auto_gf_FadeInOutSeperateThread_lp_waitUntilDone;

void gf_FadeInOutSeperateThread (bool lp_fadeIn, fixed lp_duration, bool lp_waitUntilDone) {
    auto_gf_FadeInOutSeperateThread_lp_fadeIn = lp_fadeIn;
    auto_gf_FadeInOutSeperateThread_lp_duration = lp_duration;
    auto_gf_FadeInOutSeperateThread_lp_waitUntilDone = lp_waitUntilDone;

    if (auto_gf_FadeInOutSeperateThread_Trigger == null) {
        auto_gf_FadeInOutSeperateThread_Trigger = TriggerCreate("auto_gf_FadeInOutSeperateThread_TriggerFunc");
    }

    TriggerExecute(auto_gf_FadeInOutSeperateThread_Trigger, false, false);
}

bool auto_gf_FadeInOutSeperateThread_TriggerFunc (bool testConds, bool runActions) {
    bool lp_fadeIn = auto_gf_FadeInOutSeperateThread_lp_fadeIn;
    fixed lp_duration = auto_gf_FadeInOutSeperateThread_lp_duration;
    bool lp_waitUntilDone = auto_gf_FadeInOutSeperateThread_lp_waitUntilDone;

    // Implementation
    gf_FadeInOutCore(lp_fadeIn, lp_duration);
    return true;
}

void gf_FadeInOutCore (bool lp_fadeIn, fixed lp_duration) {
    // Variable Declarations
    string[11] lv_images;
    int lv_index;

    // Variable Initialization

    // Implementation
    if ((gv_fadeDialog == c_invalidDialogId)) {
        if ((lp_fadeIn == true)) {
            Wait(lp_duration, c_timeGame);
            return ;
        }
        else {
        }
        DialogCreate(2119, 1200, c_anchorCenter, 0, 0, true);
        gv_fadeDialog = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
        gv_fadeImage = DialogControlLastCreated();
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
        lv_images[1] = "Assets\\Textures\\loading-agria.dds";
        lv_images[2] = "Assets\\Textures\\loading-aiur.dds";
        lv_images[3] = "Assets\\Textures\\loading-tyrador.dds";
        lv_images[4] = "Assets\\Textures\\loading-avernus.dds";
        lv_images[5] = "Assets\\Textures\\loading-belshir.dds";
        lv_images[6] = "Assets\\Textures\\loading-braxisalpha.dds";
        lv_images[7] = "Assets\\Textures\\loading-char.dds";
        lv_images[8] = "Assets\\Textures\\loading-korhal.dds";
        lv_images[9] = "Assets\\Textures\\loading-marsara.dds";
        lv_images[10] = "Assets\\Textures\\loading-xil.dds";
        libNtve_gf_SetDialogItemImage(gv_fadeImage, lv_images[RandomInt(1, 10)], PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_fadeImage, lv_images[2], PlayerGroupAll());
    }
    else {
    }
    if ((lp_fadeIn == true)) {
        DialogControlFadeTransparency(gv_fadeImage, PlayerGroupAll(), 0.0, 0.0);
        DialogControlFadeTransparency(gv_fadeImage, PlayerGroupAll(), lp_duration, 100.0);
    }
    else {
        DialogControlFadeTransparency(gv_fadeImage, PlayerGroupAll(), 0.0, 100.0);
        DialogControlFadeTransparency(gv_fadeImage, PlayerGroupAll(), lp_duration, 0.0);
    }
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    Wait(lp_duration, c_timeGame);
    if ((lp_fadeIn == true)) {
        DialogDestroy(gv_fadeDialog);
        gv_fadeDialog = c_invalidDialogId;
    }
    else {
    }
}

trigger auto_gf_EndCinematicText_Trigger = null;

void gf_EndCinematicText () {
    if (auto_gf_EndCinematicText_Trigger == null) {
        auto_gf_EndCinematicText_Trigger = TriggerCreate("auto_gf_EndCinematicText_TriggerFunc");
    }

    TriggerExecute(auto_gf_EndCinematicText_Trigger, false, false);
}

bool auto_gf_EndCinematicText_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_bg;
    int lv_text;

    // Variable Initialization
    lv_bg = c_invalidDialogControlId;
    lv_text = c_invalidDialogControlId;

    // Implementation
    libCamp_gf_CreateDialogInGrid(17.0, 10.0, c_anchorCenter, 0.0, -3.0, false);
    gv_endCineTextDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libCamp_gf_CreateDialogItemInGrid(DialogLastCreated(), c_triggerControlTypeImage, c_anchorCenter, 0.0, 0.6, 17.0, 7.0, StringExternal("Param/Value/7DE30036"));
    lv_bg = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_mission_statusbox01.dds", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    libCamp_gf_CreateDialogItemInGrid(DialogLastCreated(), c_triggerControlTypeLabel, c_anchorCenter, 0.0, 0.6, 14.0, 7.0, StringExternal("Param/Value/BEAACFD9"));
    lv_text = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTextWriteout(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemTextWriteoutDuration(DialogControlLastCreated(), 13.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), ConversationDataStateText("StoryText|StoryText03", "Text"), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArcadeIntroText", PlayerGroupAll());
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    Wait(24.0, c_timeReal);
    if ((gv_endCineTextDialog == c_invalidDialogId)) {
        return true;
    }
    else {
    }
    DialogControlFadeTransparency(lv_bg, PlayerGroupAll(), 2.0, 100.0);
    DialogControlFadeTransparency(lv_text, PlayerGroupAll(), 2.0, 100.0);
    Wait(2.0, c_timeGame);
    if ((gv_endCineTextDialog == c_invalidDialogId)) {
        return true;
    }
    else {
    }
    DialogDestroy(gv_endCineTextDialog);
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init - Preload
//--------------------------------------------------------------------------------------------------
bool gt_InitPreload_Func (bool testConds, bool runActions) {
    int auto8396104F_ae;
    int auto8396104F_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    PreloadObject(c_gameCatalogUnit, ("SS_Fighter"), false);
    PreloadImage("Assets\\Textures\\loading-agria.dds", false);
    PreloadImage("Assets\\Textures\\loading-aiur.dds", false);
    PreloadImage("Assets\\Textures\\loading-tyrador.dds", false);
    PreloadImage("Assets\\Textures\\loading-avernus.dds", false);
    PreloadImage("Assets\\Textures\\loading-belshir.dds", false);
    PreloadImage("Assets\\Textures\\loading-braxisalpha.dds", false);
    PreloadImage("Assets\\Textures\\loading-char.dds", false);
    PreloadImage("Assets\\Textures\\loading-korhal.dds", false);
    PreloadImage("Assets\\Textures\\loading-marsara.dds", false);
    PreloadImage("Assets\\Textures\\loading-xil.dds", false);
    gf_Level1Preload();
    gf_Level2Preload();
    gf_Level3Preload();
    auto8396104F_ae = gv_powerupTypeCount;
    auto8396104F_ai = 1;
    lv_index = 1;
    for ( ; ( (auto8396104F_ai >= 0 && lv_index <= auto8396104F_ae) || (auto8396104F_ai <= 0 && lv_index >= auto8396104F_ae) ) ; lv_index += auto8396104F_ai ) {
        libNtve_gf_PreloadUnit(gv_powerupTypeUnitTypes[lv_index], false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitPreload_Init () {
    gt_InitPreload = TriggerCreate("gt_InitPreload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init
//--------------------------------------------------------------------------------------------------
bool gt_Init_Func (bool testConds, bool runActions) {
    unitgroup auto22B9CD29_g;
    int auto22B9CD29_u;

    // Variable Declarations
    unit lv_indexUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_debug_IsForDebug = false;
    if ((gf_IsForDebug() == true)) {
        ConsoleCommand("god", true, true);
    }
    else {
    }
    GameCheatAllow(c_gameCheatVictory, false);
    GameSetSpeedValue(c_gameSpeedNormal);
    GameSetSpeedLocked(true);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libCamp_gf_LoadCampaignData(32);
    TriggerExecute(gt_InitPreload, true, false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
    CameraLockInput(gv_p1_USER, true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, c_transitionDurationImmediate);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    UISetCommandDisallowedMessage(PlayerGroupAll(), StringExternal("Param/Value/A6C3041C"));
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, true);
    gv_endCinematicGroup = UnitGroup(null, gv_p3_CINE, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAdd(gv_endCinematicGroup, UnitFromId(9));
    auto22B9CD29_g = gv_endCinematicGroup;
    auto22B9CD29_u = 1;
    for ( ; auto22B9CD29_u <= UnitGroupCount(auto22B9CD29_g, c_unitCountAll) ; auto22B9CD29_u += BoolToInt(lv_indexUnit == UnitGroupUnit(auto22B9CD29_g, auto22B9CD29_u)) ) {
        lv_indexUnit = UnitGroupUnit(auto22B9CD29_g, auto22B9CD29_u);
        libNtve_gf_PauseUnit(lv_indexUnit, true);
        libNtve_gf_ShowHideUnit(lv_indexUnit, false);
    }
    VisRevealArea(gv_p0_NEUTRAL, RegionEntireMap(), 0.0, false);
    VisRevealArea(gv_p1_USER, RegionEntireMap(), 0.0, false);
    VisRevealArea(gv_p2_ENEMY, RegionEntireMap(), 0.0, false);
    gv_highScore = ConversationDataStateGetValue("ArcadeGameVariables|HiScore");
    gf_InitCamera();
    gf_PrepareBorder();
    gf_InitBackgroundData();
    gf_InitializeLevelWaveData();
    gf_InitializePowerupData();
    gf_CreateUI();
    gf_CreateViking();
    TriggerExecute(gt_InitializePresetSawTargets, true, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "LostViking_MusicLevelStartIntro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_FighterEnableDisableControl(false);
    TriggerExecute(gt_IntroCinematic, true, true);
    gf_FighterEnableDisableControl(true);
    UISetCursorAutoHide(PlayerGroupAll(), true, gv_c_MouseHideWait);
    libNtve_gf_DisplayScreenButton(gv_c_ScreenButton_Quit, StringExternal("Param/Value/6655B697"), 240, 80, c_anchorBottomRight, 40, 35, gt_QuitButtonClicked);
    libNtve_gf_SetDialogItemHandle(libNtve_gf_ScreenButton(gv_c_ScreenButton_Quit), "WoL_CantinaArcade_QuitButton", PlayerGroupAll());
    gf_FromatBackPlayButton(libNtve_gf_ScreenButton(gv_c_ScreenButton_Quit));
    libNtve_gf_SetDialogItemTooltip(libNtve_gf_ScreenButton(gv_c_ScreenButton_Quit), StringExternal("Param/Value/7B6BAF53"), PlayerGroupAll());
    TriggerEnable(gt_EscapeKeyMenu, true);
    while (true) {
        gv_gameResult = 0;
        gf_InitCamera();
        gf_InitializeLevelScoreData();
        if ((gf_IsForDebug() == false)) {
            gf_Level1Start();
            gf_Level2Start();
            gf_Level3Start();
        }
        else {
            gf_Level3Start();
        }
        if ((gv_gameResult == 3)) {
            while (!((gv_gameRestartFinished == true))) {
                Wait(0.5, c_timeGame);
            }
        }
        else {
            TriggerExecute(gt_EndCinematic, true, true);
            gv_repeatTimes += 1;
        }
    }
    libCamp_gf_PrepareForStoryMode(c_gameOverVictory, PlayerDifficulty(gv_p1_USER));
    GameOver(gv_p1_USER, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init_Init () {
    gt_Init = TriggerCreate("gt_Init_Func");
    TriggerAddEventMapInit(gt_Init);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_Sin
//--------------------------------------------------------------------------------------------------
bool gt_Debug_Sin_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/797FA206") + FixedToText(Sin(180.0), 2)));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/4D1A6221") + FixedToText(Sin(90.0), 2)));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/B772DDA5") + FixedToText(Sin(gv_c_Pai), 2)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_Sin_Init () {
    gt_Debug_Sin = TriggerCreate("gt_Debug_Sin_Func");
    TriggerAddEventChatMessage(gt_Debug_Sin, 1, "sine", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_LeaveBehind
//--------------------------------------------------------------------------------------------------
bool gt_Debug_LeaveBehind_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SendWave("SS_Phoenix", 1, 0.3, Point(-2.0, -2.0), 0, 4.0, -5.0, 0.0, 0.0, 0.0, 0.0, 1, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_LeaveBehind_Init () {
    gt_Debug_LeaveBehind = TriggerCreate("gt_Debug_LeaveBehind_Func");
    TriggerAddEventChatMessage(gt_Debug_LeaveBehind, 1, "behind", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_MoveBG
//--------------------------------------------------------------------------------------------------
bool gt_Debug_MoveBG_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(gv_backgroundCurrent, gv_bGStart, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_MoveBG_Init () {
    gt_Debug_MoveBG = TriggerCreate("gt_Debug_MoveBG_Func");
    TriggerAddEventChatMessage(gt_Debug_MoveBG, 1, "-mb", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_BOSS
//--------------------------------------------------------------------------------------------------
bool gt_Debug_BOSS_Func (bool testConds, bool runActions) {
    int autoC568A82C_val;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_debug_BossCheatEnabled = true;
    autoC568A82C_val = gf_CurrentLevel();
    if (autoC568A82C_val == 1) {
        TriggerStop(gt_Level1SpawnWaves);
    }
    else if (autoC568A82C_val == 2) {
        TriggerStop(gt_Level2SpawnWaves);
    }
    else if (autoC568A82C_val == 3) {
        TriggerStop(gt_Level3SpawnWaves);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_BOSS_Init () {
    gt_Debug_BOSS = TriggerCreate("gt_Debug_BOSS_Func");
    TriggerAddEventChatMessage(gt_Debug_BOSS, 1, "-BOSS", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_LEVELCLEAR
//--------------------------------------------------------------------------------------------------
bool gt_Debug_LEVELCLEAR_Func (bool testConds, bool runActions) {
    int autoE909B39A_val;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_levelCleared = true;
    autoE909B39A_val = gf_CurrentLevel();
    if (autoE909B39A_val == 1) {
        TriggerStop(gt_Level1SpawnWaves);
    }
    else if (autoE909B39A_val == 2) {
        TriggerStop(gt_Level2SpawnWaves);
    }
    else if (autoE909B39A_val == 3) {
        TriggerStop(gt_Level3SpawnWaves);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_LEVELCLEAR_Init () {
    gt_Debug_LEVELCLEAR = TriggerCreate("gt_Debug_LEVELCLEAR_Func");
    TriggerAddEventChatMessage(gt_Debug_LEVELCLEAR, 1, "-LEVELCLEAR", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_Bonus
//--------------------------------------------------------------------------------------------------
bool gt_Debug_Bonus_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((StringEqual(StringWord(EventChatMessage(false), 1), EventChatMessage(true), c_stringNoCase) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_DisplayScoreScreen(1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_Bonus_Init () {
    gt_Debug_Bonus = TriggerCreate("gt_Debug_Bonus_Func");
    TriggerAddEventChatMessage(gt_Debug_Bonus, 1, "-BONUS", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_PowerUp
//--------------------------------------------------------------------------------------------------
bool gt_Debug_PowerUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_bounds;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_bounds = gf_GetCameraBoundary();
    gf_CreatePowerup(RegionGetCenter(lv_bounds), "SS_PowerupBomb");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_PowerUp_Init () {
    gt_Debug_PowerUp = TriggerCreate("gt_Debug_PowerUp_Func");
    TriggerAddEventChatMessage(gt_Debug_PowerUp, 1, "-pu", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_Life
//--------------------------------------------------------------------------------------------------
bool gt_Debug_Life_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_vikingLife = 10;
    gf_UpdateUI();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_Life_Init () {
    gt_Debug_Life = TriggerCreate("gt_Debug_Life_Func");
    TriggerAddEventChatMessage(gt_Debug_Life, c_playerAny, "-LIFE", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_Cineamtic
//--------------------------------------------------------------------------------------------------
bool gt_Debug_Cineamtic_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_Init);
    TriggerExecute(gt_Debug_LEVELCLEAR, false, false);
    TriggerExecute(gt_EndCinematic, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_Cineamtic_Init () {
    gt_Debug_Cineamtic = TriggerCreate("gt_Debug_Cineamtic_Func");
    TriggerAddEventChatMessage(gt_Debug_Cineamtic, c_playerAny, "-end", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_SS
//--------------------------------------------------------------------------------------------------
bool gt_Debug_SS_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DisplayBossComingMessage(StringExternal("Param/Value/54BA2AC5"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_SS_Init () {
    gt_Debug_SS = TriggerCreate("gt_Debug_SS_Func");
    TriggerAddEventChatMessage(gt_Debug_SS, c_playerAny, "-ss", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_AddScore
//--------------------------------------------------------------------------------------------------
bool gt_Debug_AddScore_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_AddScore(StringToInt(StringWord(EventChatMessage(false), 2)));
    gf_UpdateUI();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_AddScore_Init () {
    gt_Debug_AddScore = TriggerCreate("gt_Debug_AddScore_Func");
    TriggerAddEventChatMessage(gt_Debug_AddScore, c_playerAny, "-score", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_HIDEQUIT
//--------------------------------------------------------------------------------------------------
bool gt_Debug_HIDEQUIT_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_HideScreenButton(false, gv_c_ScreenButton_Quit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_HIDEQUIT_Init () {
    gt_Debug_HIDEQUIT = TriggerCreate("gt_Debug_HIDEQUIT_Func");
    TriggerAddEventChatMessage(gt_Debug_HIDEQUIT, c_playerAny, "-NOQUIT", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_ADDLIFE
//--------------------------------------------------------------------------------------------------
bool gt_Debug_ADDLIFE_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_VikingExtraLifes, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_ADDLIFE_Init () {
    gt_Debug_ADDLIFE = TriggerCreate("gt_Debug_ADDLIFE_Func");
    TriggerAddEventChatMessage(gt_Debug_ADDLIFE, c_playerAny, "-ADDLIFE", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level 1 Spawn Waves
//--------------------------------------------------------------------------------------------------
bool gt_Level1SpawnWaves_Func (bool testConds, bool runActions) {
    int auto50E5A859_n;
    int auto50E5A859_i;

    // Variable Declarations
    const fixed lv_correctionInterval = 0.5;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto50E5A859_n = 1;
    for (auto50E5A859_i = 1; auto50E5A859_i <= auto50E5A859_n; auto50E5A859_i += 1) {
        gf_SendWave("SS_Scout", 1, 0.3, Point(4.0, 2.0), 0, 4.0, -5.0, 0.0, 0.0, 0.0, 0.0, 0, false);
        Wait(0.5, c_timeGame);
        gf_SendWave("SS_Scout", 1, 0.3, Point(2.0, 1.0), 0, 3.0, -4.0, 0.0, 0.0, 0.0, 0.0, 0, false);
        Wait(0.5, c_timeGame);
        gf_SendWave("SS_Scout", 1, 0.3, Point(3.0, 2.0), 0, 5.0, -3.0, 0.0, 0.0, 0.0, 0.0, 1, true);
        Wait(2.0, c_timeGame);
        gf_SendWave("SS_Scout", 1, 0.3, Point(16.0, 2.0), 0, 14.0, -3.0, 0.0, 0.0, 0.0, 0.0, 0, false);
        Wait(0.5, c_timeGame);
        gf_SendWave("SS_Scout", 1, 0.3, Point(21.0, 1.0), 0, 16.0, -4.0, 0.0, 0.0, 0.0, 0.0, 1, true);
        Wait(0.5, c_timeGame);
        gf_SendWave("SS_Scout", 1, 0.3, Point(12.0, 3.0), 0, 11.0, -5.0, 0.0, 0.0, 0.0, 0.0, 1, true);
        Wait(1.0, c_timeGame);
        gf_SendWave("SS_Scout", 6, lv_correctionInterval, Point(16.0, 2.0), 2, 8.0, -6.0, 1.0, 2.0, 0.0, 0.0, 0, false);
        Wait(5.0, c_timeGame);
        gf_SendWave("SS_Scout", 1, 0.3, Point(3.0, 3.0), 0, 5.0, -4.0, 0.0, 0.0, 0.0, 0.0, 0, false);
        Wait(1.0, c_timeGame);
        gf_SendWave("SS_Scout", 1, 0.3, Point(3.0, 3.0), 0, 4.0, -5.0, 0.0, 0.0, 0.0, 0.0, 1, true);
        Wait(1.0, c_timeGame);
        gf_SendWave("SS_Scout", 6, lv_correctionInterval, Point(-2.0, 0.0), 2, 6.0, -6.0, 22.0, 2.0, 0.0, 0.0, 0, false);
        Wait(5.0, c_timeGame);
        gf_SendWave("SS_Scout", 1, 0.3, Point(-2.0, 2.0), 0, 4.0, -5.0, 0.0, 0.0, 0.0, 0.0, 1, false);
        Wait(1.0, c_timeGame);
        gf_SendWave("SS_Scout", 1, 0.3, Point(19.0, 3.0), 0, 16.0, -5.0, 0.0, 0.0, 0.0, 0.0, 1, true);
        Wait(1.0, c_timeGame);
        gf_ReadyToSpawnPowerup("SS_PowerupSideMissiles");
        gf_SendWave("SS_Scout", 6, lv_correctionInterval, Point(-2.0, -5.0), 2, 14.0, -2.0, 22.0, -11.0, 0.0, 0.0, 0, false);
        Wait(3.0, c_timeGame);
        Wait(3.0, c_timeGame);
        gf_SendWave("SS_Scout", 1, 0.3, Point(22.0, 1.0), 0, 14.0, -4.0, 0.0, 0.0, 0.0, 0.0, 0, false);
        Wait(0.5, c_timeGame);
        gf_SendWave("SS_Scout", 1, 0.3, Point(22.0, 1.0), 0, 16.0, -5.0, 0.0, 0.0, 0.0, 0.0, 1, true);
        gf_SendWave("SS_Scout", 1, 0.3, Point(22.0, 1.0), 0, 17.0, -4.0, 0.0, 0.0, 0.0, 0.0, 1, true);
        Wait(1.0, c_timeGame);
        gf_SendWave("SS_Scout", 1, 0.3, Point(12.0, 1.0), 0, 13.0, -5.0, 0.0, 0.0, 0.0, 0.0, 1, true);
        gf_SendWave("SS_Scout", 1, 0.3, Point(7.0, 1.0), 0, 6.0, -4.0, 0.0, 0.0, 0.0, 0.0, 1, true);
        Wait(3.0, c_timeGame);
        gf_SendWave("SS_Scout", 1, 0.3, Point(2.0, 1.0), 0, 3.0, -4.0, 0.0, 0.0, 0.0, 0.0, 1, true);
        Wait(0.5, c_timeGame);
        gf_SendWave("SS_Scout", 1, 0.3, Point(12.0, 1.0), 0, 13.0, -5.0, 0.0, 0.0, 0.0, 0.0, 1, true);
        gf_SendWave("SS_Scout", 1, 0.3, Point(14.0, 1.0), 0, 15.0, -4.0, 0.0, 0.0, 0.0, 0.0, 1, true);
        Wait(3.0, c_timeGame);
        gf_SendWave("SS_Scout", 1, 0.3, Point(2.0, 1.0), 0, 3.0, -4.0, 0.0, 0.0, 0.0, 0.0, 1, true);
        Wait(0.5, c_timeGame);
        gf_SendWave("SS_Scout", 1, 0.3, Point(2.0, 1.0), 0, 4.0, -5.0, 0.0, 0.0, 0.0, 0.0, 0, false);
        gf_SendWave("SS_Scout", 1, 0.3, Point(2.0, 1.0), 0, 6.0, -4.0, 0.0, 0.0, 0.0, 0.0, 0, false);
        gf_ReadyToSpawnPowerup("SS_PowerupBomb");
        Wait(1.0, c_timeGame);
        gf_SendWave("SS_Scout", 8, lv_correctionInterval, Point(6.0, 2.0), 2, 21.0, -6.0, 22.0, -6.0, 0.0, 0.0, 0, false);
        Wait(5.0, c_timeGame);
        gf_SendWave("SS_Phoenix", 1, 0.3, Point(22.0, 1.0), 0, 14.0, -3.0, 6.0, 60.0, 0.0, 0.0, 10, false);
        Wait(0.5, c_timeGame);
        gf_SendWave("SS_Phoenix", 1, 0.3, Point(22.0, 1.0), 0, 16.0, -4.0, 6.0, 60.0, 0.0, 0.0, 10, true);
        Wait(5.0, c_timeGame);
        gf_ReadyToSpawnPowerup("SS_PowerupStrongerMissiles");
        gf_SendWave("SS_Phoenix", 1, 0.3, Point(2.0, 1.0), 0, 2.0, -3.0, 6.0, 60.0, 0.0, 0.0, 10, true);
        Wait(0.5, c_timeGame);
        gf_SendWave("SS_Phoenix", 1, 0.3, Point(2.0, 1.0), 0, 4.0, -4.0, 6.0, 60.0, 0.0, 0.0, 10, false);
        gf_SendWave("SS_Scout", 8, lv_correctionInterval, Point(-2.0, -6.0), 2, 21.0, -2.0, 22.0, -2.0, 0.0, 0.0, 0, false);
        Wait(4.0, c_timeGame);
        gf_SendWave("SS_Scout", 8, lv_correctionInterval, Point(21.0, -6.0), 2, -1.0, -2.0, -2.0, -2.0, 0.0, 0.0, 0, false);
        Wait(6.0, c_timeGame);
        gf_SendWave("SS_Phoenix", 1, 0.3, Point(22.0, 1.0), 0, 14.0, -3.0, 6.0, 60.0, 0.0, 0.0, 10, false);
        Wait(0.5, c_timeGame);
        gf_SendWave("SS_Phoenix", 1, 0.3, Point(2.0, 1.0), 0, 4.0, -4.0, 6.0, 60.0, 0.0, 0.0, 10, true);
        gf_SendWave("SS_Phoenix", 1, 0.3, Point(22.0, 1.0), 0, 17.0, -3.0, 6.0, 60.0, 0.0, 0.0, 10, true);
        Wait(5.0, c_timeGame);
        gf_ReadyToSpawnPowerup("SS_PowerupBomb");
        gf_SendWave("SS_Phoenix", 1, 0.3, Point(2.0, 1.0), 0, 2.0, -3.0, 6.0, 60.0, 0.0, 0.0, 10, false);
        Wait(0.5, c_timeGame);
        gf_SendWave("SS_Phoenix", 1, 0.3, Point(22.0, 1.0), 0, 16.0, -4.0, 6.0, 60.0, 0.0, 0.0, 10, true);
        gf_SendWave("SS_Phoenix", 1, 0.3, Point(2.0, 1.0), 0, 6.0, -3.0, 6.0, 60.0, 0.0, 0.0, 10, true);
        Wait(5.0, c_timeGame);
        gf_SendWave("SS_Scout", 8, 0.3, Point(-2.0, -6.0), 2, 21.0, -2.0, 22.0, -2.0, 0.0, 0.0, 0, false);
        gf_SendWave("SS_Scout", 8, 0.3, Point(21.0, -6.0), 2, -1.0, -2.0, -2.0, -2.0, 0.0, 0.0, 0, false);
        Wait(6.0, c_timeGame);
        gf_SendWave("SS_Scout", 1, 0.7, Point(-2.0, -4.0), 2, 9.0, -4.0, 14.0, 2.0, 5.0, 1.0, 1, true);
        gf_SendWave("SS_Scout", 1, 0.7, Point(22.0, -4.0), 2, 12.0, -4.0, 5.0, 2.0, 5.0, 1.0, 1, true);
        Wait(0.5, c_timeGame);
        gf_SendWave("SS_Scout", 1, 0.7, Point(-2.0, -3.0), 2, 8.0, -3.0, 15.0, 2.0, 5.0, 1.0, 1, true);
        gf_SendWave("SS_Scout", 1, 0.7, Point(22.0, -3.0), 2, 13.0, -3.0, 6.0, 2.0, 5.0, 1.0, 1, true);
        Wait(0.5, c_timeGame);
        gf_SendWave("SS_Scout", 1, 0.7, Point(-2.0, -4.0), 2, 7.0, -4.0, 16.0, 2.0, 5.0, 1.0, 1, true);
        gf_SendWave("SS_Scout", 1, 0.7, Point(22.0, -4.0), 2, 14.0, -4.0, 7.0, 2.0, 5.0, 1.0, 1, true);
        Wait(0.5, c_timeGame);
        gf_SendWave("SS_Scout", 1, 0.7, Point(-2.0, -3.0), 2, 6.0, -3.0, 17.0, 2.0, 5.0, 1.0, 1, true);
        gf_SendWave("SS_Scout", 1, 0.7, Point(22.0, -3.0), 2, 15.0, -3.0, 8.0, 2.0, 5.0, 1.0, 1, true);
        Wait(0.5, c_timeGame);
        gf_SendWave("SS_Scout", 1, 0.7, Point(-2.0, -4.0), 2, 5.0, -4.0, 18.0, 2.0, 5.0, 1.0, 1, true);
        gf_SendWave("SS_Scout", 1, 0.7, Point(22.0, -4.0), 2, 16.0, -4.0, 9.0, 2.0, 5.0, 1.0, 1, true);
        Wait(0.5, c_timeGame);
        gf_SendWave("SS_Scout", 1, 0.7, Point(-2.0, -3.0), 2, 4.0, -3.0, 19.0, 2.0, 5.0, 1.0, 1, true);
        gf_SendWave("SS_Scout", 1, 0.7, Point(22.0, -3.0), 2, 17.0, -3.0, 10.0, 2.0, 5.0, 1.0, 1, true);
        Wait(0.5, c_timeGame);
        gf_SendWave("SS_Scout", 1, 0.7, Point(-2.0, -4.0), 2, 3.0, -4.0, 20.0, 2.0, 5.0, 1.0, 1, true);
        gf_SendWave("SS_Scout", 1, 0.7, Point(22.0, -4.0), 2, 18.0, -4.0, 11.0, 2.0, 5.0, 1.0, 1, true);
        Wait(0.5, c_timeGame);
        gf_SendWave("SS_Scout", 1, 0.7, Point(-2.0, -3.0), 2, 2.0, -3.0, 20.0, 2.0, 5.0, 1.0, 1, true);
        gf_SendWave("SS_Scout", 1, 0.7, Point(22.0, -3.0), 2, 19.0, -3.0, 12.0, 2.0, 5.0, 1.0, 1, true);
        Wait(0.5, c_timeGame);
        gf_ReadyToSpawnPowerup("SS_PowerupSideMissiles");
        Wait(4.0, c_timeGame);
        gf_SendWave("SS_Phoenix", 1, 0.3, Point(2.0, 2.0), 0, 4.0, -3.0, 7.0, 60.0, 0.0, 0.0, 10, false);
        Wait(0.5, c_timeGame);
        gf_SendWave("SS_Phoenix", 1, 0.3, Point(5.0, 2.0), 0, 6.0, -3.0, 6.0, 60.0, 0.0, 0.0, 10, true);
        gf_SendWave("SS_Phoenix", 1, 0.3, Point(16.0, 2.0), 0, 15.0, -3.0, 6.0, 60.0, 0.0, 0.0, 10, true);
        Wait(1.0, c_timeGame);
        gf_SendWave("SS_Phoenix", 1, 0.3, Point(14.0, 2.0), 0, 12.0, -2.0, 6.0, 60.0, 0.0, 0.0, 10, true);
        Wait(3.0, c_timeGame);
        gf_SendWave("SS_Scout", 8, 0.3, Point(-2.0, -6.0), 2, 21.0, -2.0, 22.0, -2.0, 0.0, 0.0, 0, false);
        gf_SendWave("SS_Scout", 8, 0.3, Point(21.0, -6.0), 2, -1.0, -2.0, -2.0, -2.0, 0.0, 0.0, 0, false);
        Wait(6.0, c_timeGame);
        gf_SendWave("SS_Scout", 1, 0.7, Point(-2.0, -4.0), 2, 9.0, -4.0, 14.0, 2.0, 5.0, 1.0, 1, true);
        gf_SendWave("SS_Scout", 1, 0.7, Point(22.0, -4.0), 2, 12.0, -4.0, 5.0, 2.0, 5.0, 1.0, 1, true);
        Wait(0.5, c_timeGame);
        gf_SendWave("SS_Scout", 1, 0.7, Point(-2.0, -3.0), 2, 8.0, -3.0, 15.0, 2.0, 5.0, 1.0, 1, true);
        gf_SendWave("SS_Scout", 1, 0.7, Point(22.0, -3.0), 2, 13.0, -3.0, 6.0, 2.0, 5.0, 1.0, 1, true);
        Wait(0.5, c_timeGame);
        gf_SendWave("SS_Scout", 1, 0.7, Point(-2.0, -4.0), 2, 7.0, -4.0, 16.0, 2.0, 5.0, 1.0, 1, true);
        gf_SendWave("SS_Scout", 1, 0.7, Point(22.0, -4.0), 2, 14.0, -4.0, 7.0, 2.0, 5.0, 1.0, 1, true);
        Wait(0.5, c_timeGame);
        gf_SendWave("SS_Scout", 1, 0.7, Point(-2.0, -3.0), 2, 6.0, -3.0, 17.0, 2.0, 5.0, 1.0, 1, true);
        gf_SendWave("SS_Scout", 1, 0.7, Point(22.0, -3.0), 2, 15.0, -3.0, 8.0, 2.0, 5.0, 1.0, 1, true);
        Wait(0.5, c_timeGame);
        gf_SendWave("SS_Scout", 1, 0.7, Point(-2.0, -4.0), 2, 5.0, -4.0, 18.0, 2.0, 5.0, 1.0, 1, true);
        gf_SendWave("SS_Scout", 1, 0.7, Point(22.0, -4.0), 2, 16.0, -4.0, 9.0, 2.0, 5.0, 1.0, 1, true);
        Wait(0.5, c_timeGame);
        gf_SendWave("SS_Scout", 1, 0.7, Point(-2.0, -3.0), 2, 4.0, -3.0, 19.0, 2.0, 5.0, 1.0, 1, true);
        gf_SendWave("SS_Scout", 1, 0.7, Point(22.0, -3.0), 2, 17.0, -3.0, 10.0, 2.0, 5.0, 1.0, 1, true);
        Wait(0.5, c_timeGame);
        gf_SendWave("SS_Scout", 1, 0.7, Point(-2.0, -4.0), 2, 3.0, -4.0, 20.0, 2.0, 5.0, 1.0, 1, true);
        gf_SendWave("SS_Scout", 1, 0.7, Point(22.0, -4.0), 2, 18.0, -4.0, 11.0, 2.0, 5.0, 1.0, 1, true);
        Wait(0.5, c_timeGame);
        gf_SendWave("SS_Scout", 1, 0.7, Point(-2.0, -3.0), 2, 2.0, -3.0, 20.0, 2.0, 5.0, 1.0, 1, true);
        gf_SendWave("SS_Scout", 1, 0.7, Point(22.0, -3.0), 2, 19.0, -3.0, 12.0, 2.0, 5.0, 1.0, 1, true);
        Wait(0.5, c_timeGame);
        Wait(7.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Level1SpawnWaves_Init () {
    gt_Level1SpawnWaves = TriggerCreate("gt_Level1SpawnWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Level 1 Boss - Carrier
//--------------------------------------------------------------------------------------------------
bool gt_SpawnLevel1BossCarrier_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_birth;
    region lv_bounds;
    point lv_spawnLoc;
    point lv_targetLoc;
    int lv_tempDialog;

    // Variable Initialization
    lv_tempDialog = c_invalidDialogId;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_Level1BossInterceptorSpawned, true);
    lv_bounds = gf_GetCameraBoundary();
    lv_spawnLoc = RegionGetCenter(lv_bounds);
    lv_spawnLoc = PointWithOffset(lv_spawnLoc, 0.0, 4.0);
    libNtve_gf_CreateModelAtPoint("SS_CarrierBossBirth", libNtve_gf_PointWithZOffset(lv_spawnLoc, gv_c_PlaneHeight));
    lv_birth = libNtve_gf_ActorLastCreated();
    ActorSend(lv_birth, "SetTeamColor 0,66,255 0,66,255");
    SoundPlayAtPoint(SoundLink("LostViking_CarrierBirth", -1), PlayerGroupAll(), lv_spawnLoc, 8.0, 100.0, 0.0);
    Wait(6.667, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "SS_CarrierBoss", 0, gv_p2_ENEMY, lv_spawnLoc);
    gv_boss = UnitLastCreated();
    if ((gv_repeatTimes > 0)) {
        UnitBehaviorAdd(gv_boss, "SS_StrongerEnemyBuff", gv_boss, gv_repeatTimes);
    }
    else {
    }
    gf_PrepareUnitForShooterGame(gv_boss);
    gf_DisplayBossHPBar(StringExternal("Param/Value/ED3EE7BC"));
    TriggerExecute(gt_Level1BossCarrierBehavior, true, false);
    libNtve_gf_KillModel(lv_birth);
    while (!((UnitIsAlive(gv_boss) == false))) {
        Wait(0.25, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnLevel1BossCarrier_Init () {
    gt_SpawnLevel1BossCarrier = TriggerCreate("gt_SpawnLevel1BossCarrier_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level 1 Boss - Carrier Dies
//--------------------------------------------------------------------------------------------------
bool gt_Level1BossCarrierDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_boss))) {
            return false;
        }

        if (!((gf_CurrentLevel() == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "LostViking_MusicBossKilled", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libNtve_gf_MakeUnitInvulnerable(gv_viking, true);
    TriggerStop(gt_Level1BossCarrierBehavior);
    TriggerStop(gt_Level1BossRoundTimer);
    TriggerEnable(gt_Level1BossInterceptorSpawned, false);
    Wait(3.0, c_timeGame);
    gv_levelCleared = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Level1BossCarrierDies_Init () {
    gt_Level1BossCarrierDies = TriggerCreate("gt_Level1BossCarrierDies_Func");
    TriggerAddEventUnitDied(gt_Level1BossCarrierDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level 1 Boss - Carrier Behavior
//--------------------------------------------------------------------------------------------------
bool gt_Level1BossCarrierBehavior_Func (bool testConds, bool runActions) {
    int autoFA68D4A3_ae;
    int autoFA68D4A3_ai;
    int auto728B51A3_ae;
    int auto728B51A3_ai;
    int auto4EAA6EED_n;
    int auto4EAA6EED_i;

    // Variable Declarations
    point lv_tempLoc;
    int lv_index;
    int lv_deadInterceptorCount;
    int lv_respawnInterceptorCount;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_Level1BossCarrierDies, true);
    Wait(1.0, c_timeGame);
    if ((UnitIsAlive(gv_boss) == false)) {
        return true;
    }
    else {
    }
    gv_level1InterceptorCount = 0;
    gf_Level1BossSpawnInterceptor(10.0, -7.0);
    gf_Level1BossSpawnInterceptor(8.0, -7.0);
    gf_Level1BossSpawnInterceptor(7.0, -5.0);
    gf_Level1BossSpawnInterceptor(6.0, -6.0);
    gf_Level1BossSpawnInterceptor(6.0, -3.0);
    gf_Level1BossSpawnInterceptor(5.0, -7.0);
    gf_Level1BossSpawnInterceptor(5.0, -4.0);
    gf_Level1BossSpawnInterceptor(4.0, -5.0);
    gf_Level1BossSpawnInterceptor(3.0, -3.0);
    gf_Level1BossSpawnInterceptor(12.0, -7.0);
    gf_Level1BossSpawnInterceptor(13.0, -5.0);
    gf_Level1BossSpawnInterceptor(14.0, -6.0);
    gf_Level1BossSpawnInterceptor(14.0, -3.0);
    gf_Level1BossSpawnInterceptor(15.0, -7.0);
    gf_Level1BossSpawnInterceptor(15.0, -4.0);
    gf_Level1BossSpawnInterceptor(16.0, -5.0);
    gf_Level1BossSpawnInterceptor(17.0, -3.0);
    Wait(4.0, c_timeGame);
    while (true) {
        TriggerExecute(gt_Level1BossRoundTimer, true, false);
        if ((UnitIsAlive(gv_boss) == false)) {
            return true;
        }
        else {
        }
        gf_Level1BossCarrierMove();
        UnitIssueOrder(gv_boss, OrderTargetingUnit(AbilityCommand("SS_CarrierBossAttackTarget", 0), gv_viking), c_orderQueueReplace);
        Wait(10.0, c_timeGame);
        gf_Level1BossCarrierMove();
        lv_deadInterceptorCount = 0;
        autoFA68D4A3_ae = gv_level1InterceptorCount;
        autoFA68D4A3_ai = 1;
        lv_index = 1;
        for ( ; ( (autoFA68D4A3_ai >= 0 && lv_index <= autoFA68D4A3_ae) || (autoFA68D4A3_ai <= 0 && lv_index >= autoFA68D4A3_ae) ) ; lv_index += autoFA68D4A3_ai ) {
            if ((UnitIsAlive(gv_level1Interceptors[lv_index]) == false)) {
                lv_deadInterceptorCount += 1;
                gv_level1InterceptorCurrentIndex = lv_index;
            }
            else {
            }
        }
        lv_respawnInterceptorCount = FixedToInt(((IntToFixed(lv_deadInterceptorCount) + 1.0) * 0.666));
        auto728B51A3_ae = gv_level1InterceptorCount;
        auto728B51A3_ai = 1;
        lv_index = 1;
        for ( ; ( (auto728B51A3_ai >= 0 && lv_index <= auto728B51A3_ae) || (auto728B51A3_ai <= 0 && lv_index >= auto728B51A3_ae) ) ; lv_index += auto728B51A3_ai ) {
            if ((UnitIsAlive(gv_level1Interceptors[lv_index]) == false)) {
                gv_level1InterceptorCurrentIndex = lv_index;
                UnitIssueOrder(gv_boss, OrderTargetingPoint(AbilityCommand("SS_CarrierSpawnInterceptor", 0), gv_level1InterceptorLocs[lv_index]), c_orderQueueReplace);
                auto4EAA6EED_n = 4;
                for (auto4EAA6EED_i = 1; auto4EAA6EED_i <= auto4EAA6EED_n; auto4EAA6EED_i += 1) {
                    Wait(0.5, c_timeGame);
                    if ((gv_level1InterceptorCurrentIndex <= 0)) {
                        break;
                    }
                    else {
                    }
                }
            }
            else {
            }
        }
        while (!((gv_level1BossRoundTimerExpires == true))) {
            Wait(0.5, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Level1BossCarrierBehavior_Init () {
    gt_Level1BossCarrierBehavior = TriggerCreate("gt_Level1BossCarrierBehavior_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level 1 Boss - Interceptor Spawned
//--------------------------------------------------------------------------------------------------
bool gt_Level1BossInterceptorSpawned_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_interceptor;
    point lv_target;
    int lv_shootDelay;
    int lv_index;
    bool lv_shootViking;
    point lv_posViking;
    point lv_posInterceptor;
    int lv_interceptorInfo;
    fixed lv_angle;
    point lv_modifiedPoint;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SS_Interceptor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_interceptor = EventUnit();
    gv_level1Interceptors[gv_level1InterceptorCurrentIndex] = lv_interceptor;
    gv_level1InterceptorCurrentIndex = -1;
    gf_PrepareUnitForShooterGame(lv_interceptor);
    while (!(((UnitIsAlive(lv_interceptor) == false) || (UnitTestState(lv_interceptor, c_unitStateIdle) == true)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(lv_interceptor) == false)) {
        return true;
    }
    else {
    }
    lv_shootDelay = -1;
    while (true) {
        if ((UnitIsAlive(lv_interceptor) == false)) {
            return true;
        }
        else {
        }
        Wait(RandomFixed(1.0, 2.0), c_timeGame);
        if ((lv_shootDelay <= 0)) {
            lv_shootDelay = RandomInt(1, 1);
            lv_index = 0;
        }
        else {
        }
        if ((lv_index >= lv_shootDelay)) {
            lv_shootDelay = -1;
            lv_posInterceptor = UnitGetPosition(lv_interceptor);
            lv_posViking = UnitGetPosition(gv_viking);
            lv_angle = AngleBetweenPoints(lv_posInterceptor, lv_posViking);
            if ((UnitIsAlive(gv_viking) == true) && (RandomInt(1, 3) == 1)) {
                lv_target = PointWithOffsetPolar(lv_posInterceptor, 30.0, lv_angle);
            }
            else {
                lv_target = PointWithOffsetPolar(lv_posInterceptor, 30.0, RandomFixed((lv_angle - 30.0), (lv_angle + 30.0)));
            }
            lv_modifiedPoint = libNtve_gf_PointFromXYZ(PointGetX(lv_target), PointGetY(lv_target), 15.0);
            UnitIssueOrder(lv_interceptor, OrderTargetingPoint(AbilityCommand("SS_InterceptorAttack", 0), lv_modifiedPoint), c_orderQueueReplace);
        }
        else {
            lv_index += 1;
        }
        Wait(RandomFixed(3.0, 5.0), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Level1BossInterceptorSpawned_Init () {
    gt_Level1BossInterceptorSpawned = TriggerCreate("gt_Level1BossInterceptorSpawned_Func");
    TriggerEnable(gt_Level1BossInterceptorSpawned, false);
    TriggerAddEventUnitRegion(gt_Level1BossInterceptorSpawned, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level 1 Boss - Interceptor Died
//--------------------------------------------------------------------------------------------------
bool gt_Level1BossInterceptorDied_Func (bool testConds, bool runActions) {
    int auto76C66E33_ae;
    int auto76C66E33_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SS_Interceptor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto76C66E33_ae = gv_level1InterceptorCount;
    auto76C66E33_ai = 1;
    lv_index = 1;
    for ( ; ( (auto76C66E33_ai >= 0 && lv_index <= auto76C66E33_ae) || (auto76C66E33_ai <= 0 && lv_index >= auto76C66E33_ae) ) ; lv_index += auto76C66E33_ai ) {
        if ((gv_level1Interceptors[lv_index] == EventUnit())) {
            gv_level1Interceptors[lv_index] = null;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Level1BossInterceptorDied_Init () {
    gt_Level1BossInterceptorDied = TriggerCreate("gt_Level1BossInterceptorDied_Func");
    TriggerAddEventUnitDied(gt_Level1BossInterceptorDied, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level 1 Boss - Round Timer
//--------------------------------------------------------------------------------------------------
bool gt_Level1BossRoundTimer_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_level1BossRoundTimerExpires = false;
    Wait(14.0, c_timeGame);
    gv_level1BossRoundTimerExpires = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Level1BossRoundTimer_Init () {
    gt_Level1BossRoundTimer = TriggerCreate("gt_Level1BossRoundTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level 2 Spawn Waves
//--------------------------------------------------------------------------------------------------
bool gt_Level2SpawnWaves_Func (bool testConds, bool runActions) {
    int auto2ED24956_n;
    int auto2ED24956_i;

    // Variable Declarations
    fixed lv_y;
    fixed lv_x;
    fixed lv_xOff1;
    fixed lv_xOff2;
    fixed lv_yOff1;
    fixed lv_yOff2;
    int lv_index;
    fixed lv_wait;
    fixed lv_speed;
    fixed lv_speed1;
    bool lv_over;

    // Variable Initialization
    lv_xOff1 = -2.0;
    lv_xOff2 = 22.0;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Level2SpawnWavesScourgeDownBack(2.0, 8.0, 2, 0.5);
    Wait(1.0, c_timeGame);
    gf_Level2SpawnWavesScourgeDownBack(12.0, 18.0, 2, 0.5);
    Wait(3.0, c_timeGame);
    gf_Level2SpawnWavesScourgeDownBack(2.0, 8.0, 2, 0.5);
    Wait(1.0, c_timeGame);
    gf_Level2SpawnWavesScourgeDownBack(12.0, 18.0, 2, 0.5);
    Wait(3.0, c_timeGame);
    gf_Level2SpawnWavesScourgeDownBack(2.0, 9.0, 5, 0.7);
    Wait(3.0, c_timeGame);
    gf_Level2SpawnWavesScourgeDownBack(10.0, 18.0, 5, 0.7);
    Wait(3.0, c_timeGame);
    gf_ReadyToSpawnPowerup("SS_PowerupSideMissiles");
    gf_Level2SpawnWavesScourgeDownBack(2.0, 9.0, 8, 0.7);
    Wait(1.0, c_timeGame);
    gf_Level2SpawnWavesScourgeDownBack(11.0, 18.0, 8, 0.7);
    Wait(4.0, c_timeGame);
    gf_SendWave("SS_Scourge", 12, 0.2, Point(-3.0, -4.0), 5, -1.0, -4.0, 0.0, 8.0, 90.0, 2.0, 0, true);
    Wait(6.0, c_timeGame);
    gf_SendWave("SS_Scourge", 12, 0.2, Point(22.0, -6.0), 5, 21.0, -4.0, 16.0, -1.0, 180.0, 4.0, 1, true);
    Wait(8.0, c_timeGame);
    gf_ReadyToSpawnPowerup("SS_PowerupStrongerMissiles");
    gf_SendWave("SS_Corruptor", 1, 0.3, Point(22.0, 1.0), 0, 14.0, -3.0, 6.0, 60.0, 0.0, 0.0, 3, false);
    Wait(1.0, c_timeGame);
    gf_SendWave("SS_Corruptor", 1, 0.3, Point(2.0, 1.0), 0, 4.0, -4.0, 6.0, 60.0, 0.0, 0.0, 3, true);
    Wait(5.0, c_timeGame);
    gf_ReadyToSpawnPowerup("SS_PowerupBomb");
    gf_SendWave("SS_Scourge", 20, 0.5, Point(3.0, 1.0), 6, 5.0, 300.0, 20.0, 5.0, 180.0, 0.0, 0, false);
    Wait(12.0, c_timeGame);
    gf_SendWave("SS_Corruptor", 1, 0.3, Point(2.0, 1.0), 0, 2.0, -3.0, 6.0, 60.0, 0.0, 0.0, 3, false);
    Wait(1.0, c_timeGame);
    gf_SendWave("SS_Corruptor", 1, 0.3, Point(22.0, 1.0), 0, 16.0, -4.0, 6.0, 60.0, 0.0, 0.0, 3, true);
    Wait(2.0, c_timeGame);
    gf_Level2SpawnWavesScourgeDownBack(0.0, 9.0, 4, 0.5);
    Wait(0.5, c_timeGame);
    gf_Level2SpawnWavesScourgeDownBack(12.0, 20.0, 4, 0.5);
    Wait(7.0, c_timeGame);
    gf_Level2SpawnWavesScourgeDownBack(0.0, 9.0, 8, 0.5);
    Wait(1.0, c_timeGame);
    gf_SendWave("SS_Scourge", 8, 0.3, Point(-2.0, -6.0), 2, 21.0, -2.0, 22.0, -2.0, 0.0, 0.0, 0, false);
    Wait(4.0, c_timeGame);
    gf_Level2SpawnWavesScourgeDownBack(12.0, 20.0, 8, 0.5);
    Wait(6.0, c_timeGame);
    gf_SendWave("SS_Scourge", 8, 0.3, Point(21.0, -6.0), 2, -1.0, -2.0, -2.0, -2.0, 0.0, 0.0, 0, false);
    Wait(8.0, c_timeGame);
    gf_SendWave("SS_Scourge", 12, 0.2, Point(22.0, -6.0), 5, 21.0, -4.0, 16.0, -1.0, 180.0, 4.0, 1, true);
    Wait(0.5, c_timeGame);
    gf_Level2SpawnWavesScourgeDownBack(0.0, 9.0, 4, 0.5);
    Wait(0.5, c_timeGame);
    gf_Level2SpawnWavesScourgeDownBack(12.0, 20.0, 4, 0.5);
    Wait(4.0, c_timeGame);
    gf_ReadyToSpawnPowerup("SS_PowerupBomb");
    gf_SendWave("SS_Corruptor", 1, 0.3, Point(22.0, 1.0), 0, 14.0, -3.0, 6.0, 60.0, 0.0, 0.0, 3, false);
    Wait(0.5, c_timeGame);
    gf_SendWave("SS_Corruptor", 1, 0.3, Point(2.0, 1.0), 0, 4.0, -4.0, 6.0, 60.0, 0.0, 0.0, 3, true);
    gf_SendWave("SS_Corruptor", 1, 0.3, Point(22.0, 1.0), 0, 17.0, -3.0, 6.0, 60.0, 0.0, 0.0, 3, true);
    Wait(5.0, c_timeGame);
    gf_ReadyToSpawnPowerup("SS_PowerupHealth");
    gf_SendWave("SS_Scourge", 20, 0.5, Point(15.0, 3.0), 6, 6.0, 220.0, 20.0, 5.0, 90.0, 0.0, 0, false);
    Wait(12.0, c_timeGame);
    gf_SendWave("SS_Corruptor", 1, 0.3, Point(2.0, 1.0), 0, 2.0, -3.0, 6.0, 60.0, 0.0, 0.0, 3, false);
    Wait(0.5, c_timeGame);
    gf_SendWave("SS_Corruptor", 1, 0.3, Point(22.0, 1.0), 0, 16.0, -4.0, 6.0, 60.0, 0.0, 0.0, 3, true);
    gf_SendWave("SS_Corruptor", 1, 0.3, Point(2.0, 1.0), 0, 6.0, -3.0, 6.0, 60.0, 0.0, 0.0, 3, true);
    Wait(8.0, c_timeGame);
    gf_Level2SpawnWavesScourgePatternFlyAway();
    Wait(13.0, c_timeGame);
    gf_Level2SpawnWavesScourgePatternFlyAway();
    Wait(13.0, c_timeGame);
    gf_ReadyToSpawnPowerup("SS_PowerupSideMissiles");
    auto2ED24956_n = 2;
    for (auto2ED24956_i = 1; auto2ED24956_i <= auto2ED24956_n; auto2ED24956_i += 1) {
        gf_SendWave("SS_SwarmGuardian", 1, 0.3, Point(22.0, 1.0), 0, 14.0, -3.0, 240.0, 120.0, 1.0, 0.0, 99, true);
        Wait(0.5, c_timeGame);
        gf_SendWave("SS_SwarmGuardian", 1, 0.3, Point(2.0, 1.0), 0, 4.0, -4.0, 240.0, 120.0, 1.0, 0.0, 99, true);
        Wait(5.0, c_timeGame);
        lv_over = false;
        while (true) {
            if ((UnitGroupCount(UnitGroup("SS_SwarmGuardian", gv_p2_ENEMY, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                lv_over = true;
            }
            else {
            }
            gf_ReadyToSpawnPowerup("SS_PowerupStrongerMissiles");
            gf_Level2SpawnWavesScourgeDownBack(0.0, 9.0, 4, 0.5);
            Wait(0.5, c_timeGame);
            gf_Level2SpawnWavesScourgeDownBack(12.0, 20.0, 4, 0.5);
            Wait(7.0, c_timeGame);
            gf_Level2SpawnWavesScourgeDownBack(0.0, 20.0, 10, 0.5);
            Wait(0.5, c_timeGame);
            gf_Level2SpawnWavesScourgeDownBack(12.0, 20.0, 8, 0.5);
            Wait(0.5, c_timeGame);
            gf_SendWave("SS_Scourge", 8, 0.3, Point(21.0, -6.0), 2, -1.0, -2.0, -2.0, -2.0, 0.0, 0.0, 0, false);
            Wait(7.0, c_timeGame);
            if ((lv_over == true)) {
                break;
            }
            else {
            }
            if ((UnitGroupCount(UnitGroup("SS_SwarmGuardian", gv_p2_ENEMY, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                lv_over = true;
            }
            else {
            }
            gf_ReadyToSpawnPowerup("SS_PowerupStrongerMissiles");
            gf_SendWave("SS_Scourge", 12, 0.2, Point(-3.0, -4.0), 5, -1.0, -4.0, 0.0, 8.0, 90.0, 2.0, 0, true);
            Wait(4.0, c_timeGame);
            gf_SendWave("SS_Scourge", 20, 0.5, Point(15.0, 3.0), 6, 6.0, 220.0, 20.0, 5.0, 90.0, 0.0, 0, false);
            Wait(8.0, c_timeGame);
            gf_SendWave("SS_Scourge", 12, 0.2, Point(22.0, -6.0), 5, 21.0, -4.0, 16.0, -1.0, 180.0, 4.0, 1, true);
            Wait(4.0, c_timeGame);
            gf_SendWave("SS_Scourge", 20, 0.5, Point(3.0, 1.0), 6, 5.0, 300.0, 20.0, 5.0, 180.0, 0.0, 0, false);
            Wait(8.0, c_timeGame);
            if ((lv_over == true)) {
                break;
            }
            else {
            }
        }
    }
    gf_ReadyToSpawnPowerup("SS_PowerupBomb");
    gf_SendWave("SS_Corruptor", 1, 0.3, Point(22.0, 1.0), 0, 14.0, -3.0, 6.0, 60.0, 0.0, 0.0, 3, false);
    Wait(0.5, c_timeGame);
    gf_SendWave("SS_Corruptor", 1, 0.3, Point(2.0, 1.0), 0, 4.0, -4.0, 6.0, 60.0, 0.0, 0.0, 3, true);
    gf_SendWave("SS_Corruptor", 1, 0.3, Point(22.0, 1.0), 0, 17.0, -3.0, 6.0, 60.0, 0.0, 0.0, 3, true);
    Wait(3.0, c_timeGame);
    gf_SendWave("SS_Scourge", 20, 0.5, Point(15.0, 3.0), 6, 6.0, 220.0, 20.0, 5.0, 90.0, 0.0, 0, false);
    Wait(5.0, c_timeGame);
    gf_Level2SpawnWavesScourgePatternFlyAway();
    Wait(13.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Level2SpawnWaves_Init () {
    gt_Level2SpawnWaves = TriggerCreate("gt_Level2SpawnWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Level 2 Boss - Leviathan
//--------------------------------------------------------------------------------------------------
bool gt_SpawnLevel2BossLeviathan_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_birth;
    region lv_bounds;
    point lv_spawnLoc;
    point lv_targetLoc;
    int lv_tempDialog;

    // Variable Initialization
    lv_tempDialog = c_invalidDialogId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_bounds = gf_GetCameraBoundary();
    lv_spawnLoc = gf_ConvertShooterCoordToMapCoord(Point(10.0, gv_c_LeviathanY));
    libNtve_gf_CreateUnitsAtPoint2(1, "SS_Leviathan", 0, gv_p0_NEUTRAL, lv_spawnLoc);
    gv_boss = UnitLastCreated();
    ActorScopeSend(ActorScopeFromUnit(gv_boss), "AnimPlay Birth Birth 0 0.000000");
    if ((gv_repeatTimes > 0)) {
        UnitBehaviorAdd(gv_boss, "SS_StrongerEnemyBuff", gv_boss, gv_repeatTimes);
    }
    else {
    }
    UnitSetTeamColorIndex(gv_boss, 1);
    SoundPlayOnUnit(SoundLink("Ultralisk_Roar", 0), PlayerGroupAll(), gv_boss, 0.0, 100.0, 0.0);
    libNtve_gf_MakeUnitInvulnerable(gv_boss, true);
    gf_PrepareUnitForShooterGame(gv_boss);
    Wait(7.0, c_timeGame);
    gf_DisplayBossHPBar(StringExternal("Param/Value/EFB6AA84"));
    libNtve_gf_MakeUnitInvulnerable(gv_boss, false);
    UnitSetOwner(gv_boss, gv_p2_ENEMY, true);
    TriggerExecute(gt_Level2BossLeviathanBehavior, true, false);
    while (!((UnitIsAlive(gv_boss) == false))) {
        Wait(0.25, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnLevel2BossLeviathan_Init () {
    gt_SpawnLevel2BossLeviathan = TriggerCreate("gt_SpawnLevel2BossLeviathan_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level 2 Boss - Leviathan Dies
//--------------------------------------------------------------------------------------------------
bool gt_Level2BossLeviathanDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_boss))) {
            return false;
        }

        if (!((gf_CurrentLevel() == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "LostViking_MusicBossKilled", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libNtve_gf_MakeUnitInvulnerable(gv_viking, true);
    TriggerStop(gt_Level2BossLeviathanBehavior);
    TriggerStop(gt_Level2BossLeviathanCharge);
    TriggerStop(gt_Level2BossLeviathanTentacle);
    CameraShakeStop(gv_p1_USER);
    Wait(3.0, c_timeGame);
    gv_levelCleared = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Level2BossLeviathanDies_Init () {
    gt_Level2BossLeviathanDies = TriggerCreate("gt_Level2BossLeviathanDies_Func");
    TriggerEnable(gt_Level2BossLeviathanDies, false);
    TriggerAddEventUnitDied(gt_Level2BossLeviathanDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level 2 Boss - Leviathan Behavior
//--------------------------------------------------------------------------------------------------
bool gt_Level2BossLeviathanBehavior_Func (bool testConds, bool runActions) {
    int autoA64BF4F5_n;
    int autoA64BF4F5_i;

    // Variable Declarations
    point lv_tempLoc;
    int lv_index;
    int lv_deadInterceptorCount;
    int lv_respawnInterceptorCount;
    int lv_tentacleTimes;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_Level2BossLeviathanDies, true);
    while (true) {
        lv_tentacleTimes = RandomInt(2, 4);
        gf_Level2BossLeviathanSpawnBombs((1 * lv_tentacleTimes));
        Wait(3.0, c_timeGame);
        autoA64BF4F5_n = lv_tentacleTimes;
        for (autoA64BF4F5_i = 1; autoA64BF4F5_i <= autoA64BF4F5_n; autoA64BF4F5_i += 1) {
            TriggerExecute(gt_Level2BossLeviathanTentacle, true, false);
            Wait(5.0, c_timeGame);
            gf_Level2BossLeviathanMove(gv_leviathanTentacleX);
            Wait(5.0, c_timeGame);
        }
        TriggerExecute(gt_Level2BossLeviathanCharge, true, false);
        while (!((UnitTestState(gv_boss, c_unitStateIdle) == true))) {
            Wait(0.5, c_timeGame);
        }
        while (!((UnitTestState(gv_boss, c_unitStateIdle) == false))) {
            Wait(0.5, c_timeGame);
        }
        while (!((UnitTestState(gv_boss, c_unitStateIdle) == true))) {
            Wait(0.5, c_timeGame);
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Level2BossLeviathanBehavior_Init () {
    gt_Level2BossLeviathanBehavior = TriggerCreate("gt_Level2BossLeviathanBehavior_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level 2 Boss - Leviathan Tentacle
//--------------------------------------------------------------------------------------------------
bool gt_Level2BossLeviathanTentacle_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((RandomInt(1, 3) == 1)) {
        UnitIssueOrder(gv_boss, OrderTargetingPoint(AbilityCommand("SS_LeviathanTentacleAttackL1", 0), gf_ConvertShooterCoordToMapCoord(Point(6.0, RandomFixed(-10.0, -15.0)))), c_orderQueueReplace);
        Wait(0.25, c_timeGame);
        UnitIssueOrder(gv_boss, OrderTargetingPoint(AbilityCommand("SS_LeviathanTentacleAttackR1NoDelay", 0), gf_ConvertShooterCoordToMapCoord(Point(13.0, RandomFixed(-10.0, -15.0)))), c_orderQueueReplace);
        Wait(1.0, c_timeGame);
        UnitIssueOrder(gv_boss, OrderTargetingPoint(AbilityCommand("SS_LeviathanTentacleAttackL2NoDelay", 0), gf_ConvertShooterCoordToMapCoord(Point(1.0, RandomFixed(-10.0, -15.0)))), c_orderQueueReplace);
        Wait(0.25, c_timeGame);
        UnitIssueOrder(gv_boss, OrderTargetingPoint(AbilityCommand("SS_LeviathanTentacleAttackR2NoDelay", 0), gf_ConvertShooterCoordToMapCoord(Point(19.0, RandomFixed(-10.0, -15.0)))), c_orderQueueReplace);
        gv_leviathanTentacleX = RandomFixed(5.0, 15.0);
    }
    else {
        if ((UnitIsAlive(gv_viking) == true)) {
            UnitIssueOrder(gv_boss, OrderTargetingPoint(AbilityCommand("SS_LeviathanTentacleAttackL1", 0), UnitGetPosition(gv_viking)), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(gv_boss, OrderTargetingPoint(AbilityCommand("SS_LeviathanTentacleAttackL1", 0), gf_ConvertShooterCoordToMapCoord(Point(6.0, RandomFixed(-10.0, -15.0)))), c_orderQueueReplace);
        }
        Wait(0.5, c_timeGame);
        if ((UnitIsAlive(gv_viking) == true)) {
            UnitIssueOrder(gv_boss, OrderTargetingPoint(AbilityCommand("SS_LeviathanTentacleAttackR1NoDelay", 0), UnitGetPosition(gv_viking)), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(gv_boss, OrderTargetingPoint(AbilityCommand("SS_LeviathanTentacleAttackR1NoDelay", 0), gf_ConvertShooterCoordToMapCoord(Point(13.0, RandomFixed(-10.0, -15.0)))), c_orderQueueReplace);
        }
        Wait(1.0, c_timeGame);
        if ((UnitIsAlive(gv_viking) == true)) {
            UnitIssueOrder(gv_boss, OrderTargetingPoint(AbilityCommand("SS_LeviathanTentacleAttackL2NoDelay", 0), UnitGetPosition(gv_viking)), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(gv_boss, OrderTargetingPoint(AbilityCommand("SS_LeviathanTentacleAttackL2NoDelay", 0), gf_ConvertShooterCoordToMapCoord(Point(1.0, RandomFixed(-10.0, -15.0)))), c_orderQueueReplace);
        }
        Wait(0.5, c_timeGame);
        if ((UnitIsAlive(gv_viking) == true)) {
            UnitIssueOrder(gv_boss, OrderTargetingPoint(AbilityCommand("SS_LeviathanTentacleAttackR2NoDelay", 0), UnitGetPosition(gv_viking)), c_orderQueueReplace);
            gv_leviathanTentacleX = PointGetX(UnitGetPosition(gv_viking));
        }
        else {
            UnitIssueOrder(gv_boss, OrderTargetingPoint(AbilityCommand("SS_LeviathanTentacleAttackR2NoDelay", 0), gf_ConvertShooterCoordToMapCoord(Point(19.0, RandomFixed(-10.0, -15.0)))), c_orderQueueReplace);
            gv_leviathanTentacleX = RandomFixed(3.0, 16.0);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Level2BossLeviathanTentacle_Init () {
    gt_Level2BossLeviathanTentacle = TriggerCreate("gt_Level2BossLeviathanTentacle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level 2 Boss - Leviathan Charge
//--------------------------------------------------------------------------------------------------
bool gt_Level2BossLeviathanCharge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_oldLoc;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_oldLoc = UnitGetPosition(gv_boss);
    SoundPlayOnUnit(SoundLink("Ultralisk_Roar", 0), PlayerGroupAll(), gv_boss, 0.0, 100.0, 0.0);
    libNtve_gf_SendActorMessageToUnit(gv_boss, "AnimBracketStart Default Stand,Work,Start Stand,Work Stand,Work,End");
    Wait(3.0, c_timeGame);
    SoundPlayOnUnit(SoundLink("SS_LeviathanCharge", 0), PlayerGroupAll(), gv_boss, 8.0, 100.0, 0.0);
    UnitSetPropertyFixed(gv_boss, c_unitPropMovementSpeed, 30.0);
    UnitIssueOrder(gv_boss, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(lv_oldLoc, 0.0, -8.0)), c_orderQueueReplace);
    Wait(0.3, c_timeGame);
    if ((UnitIsAlive(gv_boss) == false)) {
        return true;
    }
    else {
    }
    libNtve_gf_SendActorMessageToUnit(gv_boss, "AnimBracketStop Default");
    SoundPlayOnUnit(SoundLink("SS_LeviathanChargeImpact", 0), PlayerGroupAll(), gv_boss, 8.0, 100.0, 0.0);
    CameraShakeStart(gv_p1_USER, c_cameraPositionTarget, c_cameraDirectionXY, 0.5, 1.0, 100.0, 0.0);
    Wait(0.5, c_timeGame);
    CameraShakeStart(gv_p1_USER, c_cameraPositionTarget, c_cameraDirectionXY, 0.25, 0.5, 100.0, 0.0);
    Wait(0.25, c_timeGame);
    CameraShakeStart(gv_p1_USER, c_cameraPositionTarget, c_cameraDirectionXY, 0.125, 0.25, 100.0, 0.0);
    Wait(0.25, c_timeGame);
    CameraShakeStop(gv_p1_USER);
    UnitSetPropertyFixed(gv_boss, c_unitPropMovementSpeed, UnitGetPropertyFixed(gv_boss, c_unitPropMovementSpeed, c_unitPropNormal));
    Wait(1.5, c_timeGame);
    UnitIssueOrder(gv_boss, OrderTargetingPoint(AbilityCommand("move", 0), lv_oldLoc), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Level2BossLeviathanCharge_Init () {
    gt_Level2BossLeviathanCharge = TriggerCreate("gt_Level2BossLeviathanCharge_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level 3 Spawn Waves
//--------------------------------------------------------------------------------------------------
bool gt_Level3SpawnWaves_Func (bool testConds, bool runActions) {
    int auto0D3BE8CA_n;
    int auto0D3BE8CA_i;

    // Variable Declarations
    bool lv_over;
    fixed lv_lightningProjectorOnTime;
    fixed lv_lightningProjectorOffTime;
    fixed lv_lightningProjectorDistanceModifier;

    // Variable Initialization
    lv_lightningProjectorOnTime = 2.0;
    lv_lightningProjectorOffTime = 2.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_repeatTimes <= 15)) {
        lv_lightningProjectorOnTime += (IntToFixed(gv_repeatTimes) * 0.1);
        lv_lightningProjectorOffTime -= (IntToFixed(gv_repeatTimes) * 0.1);
    }
    else {
        lv_lightningProjectorOnTime = 3.5;
        lv_lightningProjectorOffTime = 0.5;
    }
    if ((gv_repeatTimes <= 5)) {
        lv_lightningProjectorDistanceModifier = ((IntToFixed(gv_repeatTimes) - 1.0) * 0.5);
    }
    else {
        lv_lightningProjectorDistanceModifier = 2.0;
    }
    auto0D3BE8CA_n = 1;
    for (auto0D3BE8CA_i = 1; auto0D3BE8CA_i <= auto0D3BE8CA_n; auto0D3BE8CA_i += 1) {
        if ((gv_repeatTimes >= 1)) {
            gf_SpawnLightningProjectors(2, (8.0 - lv_lightningProjectorDistanceModifier), 1.0, lv_lightningProjectorOnTime, lv_lightningProjectorOffTime, true);
            Wait(8.0, c_timeGame);
        }
        else {
        }
        gf_Level3SpawnWavesWraithGroupDrop(10.0, 5, true);
        Wait(4.0, c_timeGame);
        gf_Level3SpawnWavesWraithGroupHMove(-3.0, 8, false, 4.0, 2);
        Wait(0.5, c_timeGame);
        gf_Level3SpawnWavesWraithGroupHMove(-4.5, 8, false, 4.0, 2);
        Wait(8.0, c_timeGame);
        gf_SpawnLightningProjectors(3, (10.0 - lv_lightningProjectorDistanceModifier), 1.0, lv_lightningProjectorOnTime, lv_lightningProjectorOffTime, true);
        gf_Level3SpawnWavesWraithGroupDropBack(7.0);
        Wait(4.0, c_timeGame);
        gf_Level3SpawnWavesWraithGroupDropBack(13.0);
        Wait(4.0, c_timeGame);
        gf_SendWaveCircle("SS_Wraith", 12, 0.5, 17.0, 3.0, 17.0, 2.0, 10.0, 2.0, 270.0, 3.0, 2, true);
        Wait(8.0, c_timeGame);
        gf_ReadyToSpawnPowerup("SS_PowerupSideMissiles");
        gf_SendWaveCircle("SS_Wraith", 12, 0.5, 2.0, 3.0, 2.0, 2.0, 9.0, -1.0, 270.0, 3.0, 6, true);
        gf_SendWaveCircle("SS_Wraith", 12, 0.5, 3.0, 3.0, 3.0, 2.0, 9.0, -1.0, 270.0, 3.0, 6, true);
        Wait(4.0, c_timeGame);
        gf_Level3SpawnWavesWraithGroupHMove(-3.0, 12, false, 4.0, 6);
        Wait(3.0, c_timeGame);
        gf_SendWaveCircle("SS_Wraith", 12, 0.5, 24.0, -13.0, 22.0, -13.0, 18.0, -7.0, 270.0, 3.0, 8, false);
        Wait(4.0, c_timeGame);
        gf_Level3SpawnWavesWraithGroupHMove(-4.0, 12, true, 4.0, 6);
        Wait(1.0, c_timeGame);
        gf_Level3SpawnWavesWraithGroupDropBack(13.0);
        Wait(4.0, c_timeGame);
        gf_SendWave("SS_ScienceVessel", 1, 0.3, Point(22.0, 1.0), 0, 14.0, -3.0, 45.0, 120.0, 1.0, 0.0, 99, true);
        Wait(0.5, c_timeGame);
        gf_SendWave("SS_ScienceVessel", 1, 0.3, Point(2.0, 1.0), 0, 4.0, -4.0, 45.0, 120.0, 1.0, 0.0, 99, true);
        gf_ReadyToSpawnPowerup("SS_PowerupBomb");
        Wait(8.0, c_timeGame);
        if ((gv_repeatTimes >= 2)) {
            gf_SpawnLightningProjectors(2, (9.0 - lv_lightningProjectorDistanceModifier), 1.0, lv_lightningProjectorOnTime, lv_lightningProjectorOffTime, true);
        }
        else {
        }
        gf_Level3SpawnWavesWraithGroupDropBack(14.0);
        Wait(4.0, c_timeGame);
        gf_SendWaveCircle("SS_Wraith", 12, 0.5, 1.0, 3.0, 1.0, 2.0, -2.0, -6.0, 270.0, 3.0, 6, true);
        gf_SendWaveCircle("SS_Wraith", 12, 0.5, 1.0, 2.0, 1.0, 1.0, -2.0, -6.0, 270.0, 3.0, 6, true);
        Wait(4.0, c_timeGame);
        gf_Level3SpawnWavesWraithGroupDrop(16.0, 8, true);
        Wait(4.0, c_timeGame);
        gf_SendWaveCircle("SS_Wraith", 12, 0.5, 0.0, 3.0, 0.0, 2.0, 6.0, 0.0, 270.0, 3.0, 6, true);
        gf_SendWaveCircle("SS_Wraith", 12, 0.5, 19.0, 3.0, 19.0, 2.0, 13.0, 0.0, 270.0, 3.0, 6, true);
        Wait(6.0, c_timeGame);
        gf_Level3SpawnWavesWraithGroupHMove(-3.0, 8, false, 4.0, 3);
        gf_SendWaveCircle("SS_Wraith", 12, 0.5, 24.0, -12.0, 23.0, -12.0, 18.0, -1.0, 180.0, 2.0, 9, true);
        Wait(8.0, c_timeGame);
        gf_SendWave("SS_ScienceVessel", 1, 0.3, Point(22.0, 1.0), 0, 14.0, -3.0, 45.0, 120.0, 1.0, 0.0, 99, true);
        Wait(0.5, c_timeGame);
        gf_SendWave("SS_ScienceVessel", 1, 0.3, Point(2.0, 1.0), 0, 4.0, -4.0, 45.0, 120.0, 1.0, 0.0, 99, true);
        gf_ReadyToSpawnPowerup("SS_PowerupHealth");
        Wait(8.0, c_timeGame);
        gf_Level3SpawnWavesWraithGroupHMove(-4.5, 10, true, 4.0, 0);
        gf_SendWaveCircle("SS_Wraith", 12, 0.5, 22.0, 3.0, 22.0, 2.0, 14.0, 1.0, 240.0, 2.0, 9, true);
        Wait(1.0, c_timeGame);
        gf_Level3SpawnWavesWraithGroupDrop(5.0, 5, true);
        Wait(8.0, c_timeGame);
        gf_SpawnLightningProjectors(2, (10.0 - lv_lightningProjectorDistanceModifier), 1.0, lv_lightningProjectorOnTime, lv_lightningProjectorOffTime, false);
        gf_SendWaveCircle("SS_Wraith", 12, 0.5, -4.0, -6.0, -3.0, -6.0, -3.0, 1.0, 180.0, 3.0, 6, true);
        gf_SendWaveCircle("SS_Wraith", 12, 0.5, 24.0, -2.0, 23.0, -2.0, 23.0, -14.0, 180.0, 2.0, 6, true);
        gf_ReadyToSpawnPowerup("SS_PowerupStrongerMissiles");
        Wait(8.0, c_timeGame);
        gf_Level3SpawnWavesWraithGroupHMove(-4.5, 10, true, 6.0, 8);
        Wait(2.0, c_timeGame);
        gf_Level3SpawnWavesWraithGroupHMove(-3.0, 8, false, 6.0, 8);
        Wait(0.5, c_timeGame);
        gf_Level3SpawnWavesWraithGroupHMove(-4.5, 8, false, 6.0, 8);
        Wait(4.0, c_timeGame);
        gf_SendWaveCircle("SS_Wraith", 12, 0.5, 0.0, 3.0, 0.0, 2.0, 6.0, 0.0, 270.0, 3.0, 6, true);
        gf_SendWaveCircle("SS_Wraith", 12, 0.5, 19.0, 3.0, 19.0, 2.0, 13.0, 0.0, 270.0, 3.0, 6, true);
        Wait(6.0, c_timeGame);
        gf_Level3SpawnWavesWraithGroupHMove(-3.0, 8, false, 4.0, 3);
        gf_SendWaveCircle("SS_Wraith", 12, 0.5, 24.0, -12.0, 23.0, -12.0, 18.0, -1.0, 180.0, 2.0, 9, true);
        Wait(8.0, c_timeGame);
        gf_SendWave("SS_ScienceVessel", 1, 0.3, Point(22.0, 1.0), 0, 14.0, -3.0, 45.0, 120.0, 1.0, 0.0, 99, true);
        Wait(0.5, c_timeGame);
        gf_SendWave("SS_ScienceVessel", 1, 0.3, Point(2.0, 1.0), 0, 4.0, -4.0, 45.0, 120.0, 1.0, 0.0, 99, true);
        gf_ReadyToSpawnPowerup("SS_PowerupStrongerMissiles");
        Wait(8.0, c_timeGame);
        gf_SpawnLightningProjectors(4, (8.0 - lv_lightningProjectorDistanceModifier), 1.0, lv_lightningProjectorOnTime, lv_lightningProjectorOffTime, true);
        gf_Level3SpawnWavesWraithGroupDrop(10.0, 6, true);
        Wait(4.0, c_timeGame);
        gf_Level3SpawnWavesWraithGroupVMove(10.0, 16, 4.0, 6);
        Wait(2.0, c_timeGame);
        gf_SendWaveCircle("SS_Wraith", 12, 0.5, 6.0, 3.0, 6.0, 2.0, 0.0, 1.0, 180.0, 4.0, 6, true);
        gf_SendWaveCircle("SS_Wraith", 12, 0.5, 14.0, 3.0, 14.0, 2.0, 20.0, 1.0, 180.0, 4.0, 6, true);
        Wait(10.0, c_timeGame);
        gf_Level3SpawnWavesWraithMassGroupDrop(60, 25, true);
        gf_ReadyToSpawnPowerup("SS_PowerupBomb");
        Wait(12.0, c_timeGame);
        gf_Level3SpawnWavesWraithGroupHMove(-4.0, 12, true, 4.0, 8);
        gf_SendWaveCircle("SS_Wraith", 12, 0.5, 5.0, 3.0, 6.0, 2.0, 1.0, -6.0, 180.0, 2.0, 8, true);
        gf_SendWaveCircle("SS_Wraith", 12, 0.5, 12.0, 3.0, 12.0, 2.0, -2.0, 4.0, 180.0, 2.0, 8, true);
        Wait(8.0, c_timeGame);
        gf_SendWave("SS_Battlecruiser", 1, 0.3, Point(22.0, 1.0), 0, 14.0, -3.0, 99999.0, 120.0, 1.0, 0.0, 99999, true);
        Wait(0.5, c_timeGame);
        gf_SendWave("SS_Battlecruiser", 1, 0.3, Point(2.0, 1.0), 0, 4.0, -4.0, 99999.0, 120.0, 1.0, 0.0, 99999, true);
        Wait(5.0, c_timeGame);
        lv_over = false;
        while (true) {
            gf_Level3SpawnWavesWraithGroupHMove(-3.0, 8, false, 4.0, 2);
            Wait(0.5, c_timeGame);
            gf_Level3SpawnWavesWraithGroupHMove(-4.5, 8, false, 4.0, 2);
            Wait(8.0, c_timeGame);
            if ((gv_repeatTimes >= 3)) {
                gf_SpawnLightningProjectors(1, (7.0 - lv_lightningProjectorDistanceModifier), 1.0, lv_lightningProjectorOnTime, lv_lightningProjectorOffTime, false);
            }
            else {
            }
            gf_SendWaveCircle("SS_Wraith", 12, 0.5, 2.0, 3.0, 2.0, 2.0, 9.0, -1.0, 270.0, 3.0, 2, true);
            Wait(4.0, c_timeGame);
            if ((UnitGroupCount(UnitGroup("SS_Battlecruiser", gv_p2_ENEMY, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                lv_over = true;
            }
            else {
            }
            gf_ReadyToSpawnPowerup("SS_PowerupHealth");
            gf_Level3SpawnWavesWraithGroupDropBack(7.0);
            Wait(2.5, c_timeGame);
            if ((gv_repeatTimes >= 4)) {
                gf_SpawnLightningProjectors(1, (7.0 - lv_lightningProjectorDistanceModifier), 1.0, lv_lightningProjectorOnTime, lv_lightningProjectorOffTime, false);
            }
            else {
            }
            gf_Level3SpawnWavesWraithGroupDropBack(13.0);
            Wait(8.0, c_timeGame);
            gf_SendWaveCircle("SS_Wraith", 12, 0.5, 6.0, 3.0, 6.0, 2.0, 0.0, 1.0, 180.0, 3.0, 6, true);
            gf_SendWaveCircle("SS_Wraith", 12, 0.5, 14.0, 3.0, 14.0, 2.0, 20.0, 1.0, 180.0, 3.0, 6, true);
            Wait(8.0, c_timeGame);
            if ((lv_over == true)) {
                break;
            }
            else {
            }
        }
        gf_SpawnLightningProjectors(3, (7.0 - lv_lightningProjectorDistanceModifier), 1.0, lv_lightningProjectorOnTime, lv_lightningProjectorOffTime, false);
        gf_Level3SpawnWavesWraithMassGroupDrop(60, 25, true);
        Wait(12.0, c_timeGame);
        gf_Level3SpawnWavesWraithGroupHMove(-4.0, 12, true, 4.0, 8);
        gf_SendWaveCircle("SS_Wraith", 12, 0.5, 5.0, 3.0, 6.0, 2.0, 1.0, -6.0, 180.0, 2.0, 8, true);
        gf_SendWaveCircle("SS_Wraith", 12, 0.5, 12.0, 3.0, 12.0, 2.0, -2.0, 4.0, 180.0, 2.0, 8, true);
        gf_ReadyToSpawnPowerup("SS_PowerupSideMissiles");
        Wait(8.0, c_timeGame);
        gf_SendWaveCorrectionMark("SS_Wraith", 12, 0.5, 16.0, 2.0, 12.0, -4.0, -4.0, -6.0, 3.0, 0.5, 8, true);
        Wait(8.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Level3SpawnWaves_Init () {
    gt_Level3SpawnWaves = TriggerCreate("gt_Level3SpawnWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Level 3 Boss - Terra Tron
//--------------------------------------------------------------------------------------------------
bool gt_SpawnLevel3BossTerraTron_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_birth;
    region lv_bounds;
    point lv_spawnLoc;
    point lv_targetLoc;
    int lv_tempDialog;
    string lv_scaleString;

    // Variable Initialization
    lv_tempDialog = c_invalidDialogId;
    lv_scaleString = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_scaleString = CatalogFieldValueGet(c_gameCatalogModel, "SS_TerraTron", "ScaleMin", 1);
    lv_scaleString = StringSub(lv_scaleString, 1, 6);
    gv_terraTronScale = StringToFixed(lv_scaleString);
    lv_bounds = gf_GetCameraBoundary();
    lv_spawnLoc = gf_ConvertShooterCoordToMapCoord(Point(10.0, gv_c_TerraTronY));
    libNtve_gf_CreateUnitsAtPoint2(1, "SS_TerraTron", 0, gv_p0_NEUTRAL, lv_spawnLoc);
    gv_boss = UnitLastCreated();
    if ((gv_repeatTimes > 0)) {
        UnitBehaviorAdd(gv_boss, "SS_StrongerEnemyBuff", gv_boss, gv_repeatTimes);
    }
    else {
    }
    UnitSetTeamColorIndex(gv_boss, 1);
    SoundPlayOnUnit(SoundLink("LostViking_TerraTronBirth", 0), PlayerGroupAll(), gv_boss, 0.0, 100.0, 0.0);
    libNtve_gf_MakeUnitInvulnerable(gv_boss, true);
    gf_PrepareUnitForShooterGame(gv_boss);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_boss), c_animNameDefault, "Birth", c_animFlagFullMatch | c_animFlagNonLooping, 0.0);
    Wait(7.0, c_timeGame);
    gf_DisplayBossHPBar(StringExternal("Param/Value/C742B90D"));
    libNtve_gf_MakeUnitInvulnerable(gv_boss, false);
    UnitSetOwner(gv_boss, gv_p2_ENEMY, true);
    TriggerExecute(gt_Level3BossTerraTronBehavior, true, false);
    while (!((UnitIsAlive(gv_boss) == false))) {
        Wait(0.25, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnLevel3BossTerraTron_Init () {
    gt_SpawnLevel3BossTerraTron = TriggerCreate("gt_SpawnLevel3BossTerraTron_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level 3 Boss - Terra Tron Behavior
//--------------------------------------------------------------------------------------------------
bool gt_Level3BossTerraTronBehavior_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_Level3BossTerraTronDies, true);
    gf_TerraTronRandomArmAttack();
    Wait(1.0, c_timeGame);
    gf_TerraTronSpawnMissileSpinners();
    Wait(1.0, c_timeGame);
    TriggerEnable(gt_TerraTronSawSpawned, true);
    while (true) {
        gf_TerraTronRandomBeamAttack();
        Wait(4.0, c_timeGame);
        gf_TerraTronRandomArmAttack();
        Wait(2.0, c_timeGame);
        gf_TerraTronSawAttack(10);
        Wait(12.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Level3BossTerraTronBehavior_Init () {
    gt_Level3BossTerraTronBehavior = TriggerCreate("gt_Level3BossTerraTronBehavior_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level 3 Boss - Terra Tron Dies
//--------------------------------------------------------------------------------------------------
bool gt_Level3BossTerraTronDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_boss))) {
            return false;
        }

        if (!((gf_CurrentLevel() == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "LostViking_MusicBossKilled", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libNtve_gf_MakeUnitInvulnerable(gv_viking, true);
    TriggerStop(gt_TerraTronSawSpawned);
    TriggerStop(gt_TerraTronSawBehavior);
    TriggerEnable(gt_TerraTronSawBehavior, false);
    TriggerStop(gt_Level3BossTerraTronBehavior);
    TriggerStop(gt_FireSpinMissiles);
    TimerPause(gv_missileSpinnerFireTimer, true);
    AchievementAward(1, "TStory01_13");
    Wait(3.0, c_timeGame);
    gv_levelCleared = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Level3BossTerraTronDies_Init () {
    gt_Level3BossTerraTronDies = TriggerCreate("gt_Level3BossTerraTronDies_Func");
    TriggerEnable(gt_Level3BossTerraTronDies, false);
    TriggerAddEventUnitDied(gt_Level3BossTerraTronDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fire Spin Missiles
//--------------------------------------------------------------------------------------------------
bool gt_FireSpinMissiles_Func (bool testConds, bool runActions) {
    int auto07AA28E6_ae;
    int auto07AA28E6_ai;
    int autoF929C3E5_ae;
    int autoF929C3E5_ai;
    int auto724CBDA6_ae;
    int auto724CBDA6_ai;

    // Variable Declarations
    fixed lv_timeIntervalBetweenVolleys;
    fixed lv_timeIntervalBetweenShots;
    fixed lv_angleDeltaBetweenShots;
    int lv_numberOfMissilesPerSide;
    fixed lv_timeIntervalBetweenShotsAlternateAttack;
    int lv_numberOfMissilesInLineAlternateAttack;
    fixed lv_randomFacing;
    fixed lv_facingL;
    fixed lv_facingR;
    int lv_i;
    int lv_k;
    bool lv_spinnerLHasDied;
    bool lv_spinnerRHasDied;

    // Variable Initialization
    lv_timeIntervalBetweenVolleys = 10.0;
    lv_timeIntervalBetweenShots = 0.0625;
    lv_angleDeltaBetweenShots = 15.0;
    lv_numberOfMissilesPerSide = 40;
    lv_timeIntervalBetweenShotsAlternateAttack = 0.5;
    lv_numberOfMissilesInLineAlternateAttack = 3;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_missileSpinnerL) == false) && (UnitIsAlive(gv_missileSpinnerR) == false)) {
        return true;
    }
    else {
    }
    libNtve_gf_SendActorMessageToUnit(gv_missileSpinnerL, "AnimBracketStart Spin Stand,Work,Start Stand,Work IGNORE");
    libNtve_gf_SendActorMessageToUnit(gv_missileSpinnerR, "AnimBracketStart Spin Stand,Work,Start Stand,Work IGNORE");
    Wait(1.0, c_timeGame);
    if ((gv_alternateSpinAttack == false)) {
        lv_randomFacing = libNtve_gf_RandomAngle();
        lv_facingL = lv_randomFacing;
        lv_facingR = lv_randomFacing;
        auto724CBDA6_ae = lv_numberOfMissilesPerSide;
        auto724CBDA6_ai = 1;
        lv_i = 1;
        for ( ; ( (auto724CBDA6_ai >= 0 && lv_i <= auto724CBDA6_ae) || (auto724CBDA6_ai <= 0 && lv_i >= auto724CBDA6_ae) ) ; lv_i += auto724CBDA6_ai ) {
            if ((UnitIsAlive(gv_missileSpinnerL) == true) && (lv_spinnerLHasDied == false)) {
                UnitCreate(1, "SS_TerraTronMissileSpinnerLauncher", c_unitCreateIgnorePlacement, UnitGetOwner(gv_boss), UnitGetPosition(gv_missileSpinnerL), lv_facingL);
            }
            else {
                lv_spinnerLHasDied = true;
            }
            if ((UnitIsAlive(gv_missileSpinnerR) == true) && (lv_spinnerRHasDied == false)) {
                UnitCreate(1, "SS_TerraTronMissileSpinnerLauncher", c_unitCreateIgnorePlacement, UnitGetOwner(gv_boss), UnitGetPosition(gv_missileSpinnerR), lv_facingR);
            }
            else {
                lv_spinnerRHasDied = true;
            }
            lv_facingL -= lv_angleDeltaBetweenShots;
            lv_facingR += lv_angleDeltaBetweenShots;
            Wait(lv_timeIntervalBetweenShots, c_timeGame);
        }
    }
    else {
        auto07AA28E6_ae = lv_numberOfMissilesInLineAlternateAttack;
        auto07AA28E6_ai = 1;
        lv_i = 1;
        for ( ; ( (auto07AA28E6_ai >= 0 && lv_i <= auto07AA28E6_ae) || (auto07AA28E6_ai <= 0 && lv_i >= auto07AA28E6_ae) ) ; lv_i += auto07AA28E6_ai ) {
            lv_facingL = 180.0;
            lv_facingR = 180.0;
            autoF929C3E5_ae = FixedToInt((180.0 / lv_angleDeltaBetweenShots));
            autoF929C3E5_ai = 1;
            lv_k = 1;
            for ( ; ( (autoF929C3E5_ai >= 0 && lv_k <= autoF929C3E5_ae) || (autoF929C3E5_ai <= 0 && lv_k >= autoF929C3E5_ae) ) ; lv_k += autoF929C3E5_ai ) {
                if ((UnitIsAlive(gv_missileSpinnerL) == true) && (lv_spinnerLHasDied == false)) {
                    UnitCreate(1, "SS_TerraTronMissileSpinnerLauncher", c_unitCreateIgnorePlacement, UnitGetOwner(gv_boss), UnitGetPosition(gv_missileSpinnerL), lv_facingL);
                }
                else {
                    lv_spinnerLHasDied = true;
                }
                if ((UnitIsAlive(gv_missileSpinnerR) == true) && (lv_spinnerRHasDied == false)) {
                    UnitCreate(1, "SS_TerraTronMissileSpinnerLauncher", c_unitCreateIgnorePlacement, UnitGetOwner(gv_boss), UnitGetPosition(gv_missileSpinnerR), lv_facingR);
                }
                else {
                    lv_spinnerRHasDied = true;
                }
                lv_facingL += lv_angleDeltaBetweenShots;
                lv_facingR += lv_angleDeltaBetweenShots;
            }
            Wait(lv_timeIntervalBetweenShotsAlternateAttack, c_timeGame);
        }
    }
    libNtve_gf_SendActorMessageToUnit(gv_missileSpinnerL, "AnimBracketStop Spin");
    libNtve_gf_SendActorMessageToUnit(gv_missileSpinnerR, "AnimBracketStop Spin");
    gv_alternateSpinAttack = !(gv_alternateSpinAttack);
    TimerStart(gv_missileSpinnerFireTimer, lv_timeIntervalBetweenVolleys, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FireSpinMissiles_Init () {
    gt_FireSpinMissiles = TriggerCreate("gt_FireSpinMissiles_Func");
    TriggerAddEventTimer(gt_FireSpinMissiles, gv_missileSpinnerFireTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Preset Saw Targets
//--------------------------------------------------------------------------------------------------
bool gt_InitializePresetSawTargets_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_rowY;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rowY = 121.15;
    gv_presetSawTargets[1][1] = Point(121.15, lv_rowY);
    gv_presetSawTargets[2][1] = Point(124.3, lv_rowY);
    gv_presetSawTargets[3][1] = Point(126.1, lv_rowY);
    gv_presetSawTargets[4][1] = Point(128.3, lv_rowY);
    gv_presetSawTargets[5][1] = Point(130.6, lv_rowY);
    gv_presetSawTargets[6][1] = Point(133.3, lv_rowY);
    gv_presetSawTargets[7][1] = Point(136.89, lv_rowY);
    lv_rowY = 124.3;
    gv_presetSawTargets[1][2] = Point(119.35, lv_rowY);
    gv_presetSawTargets[2][2] = Point(122.0, lv_rowY);
    gv_presetSawTargets[3][2] = Point(124.29, lv_rowY);
    gv_presetSawTargets[4][2] = Point(127.2, lv_rowY);
    gv_presetSawTargets[5][2] = Point(129.0, lv_rowY);
    gv_presetSawTargets[6][2] = Point(132.15, lv_rowY);
    gv_presetSawTargets[7][2] = Point(135.75, lv_rowY);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializePresetSawTargets_Init () {
    gt_InitializePresetSawTargets = TriggerCreate("gt_InitializePresetSawTargets_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terra Tron Saw Spawned
//--------------------------------------------------------------------------------------------------
bool gt_TerraTronSawSpawned_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_vikingPosition;
    point lv_sawTargetPoint;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SS_TerraTronSaw"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_boss) == false)) {
        UnitRemove(EventUnit());
        return true;
    }
    else {
    }
    gv_currentSawBounces = 0;
    gv_terraTronSaw = EventUnit();
    gv_lastSawPosition = UnitGetPosition(gv_terraTronSaw);
    lv_vikingPosition = UnitGetPosition(gv_viking);
    if ((PointGetY(lv_vikingPosition) >= 127.0)) {
        if ((PointGetX(lv_vikingPosition) > 128.0)) {
            lv_sawTargetPoint = Point(137.1, 120.7);
        }
        else {
            lv_sawTargetPoint = Point(124.5, 119.8);
        }
    }
    else {
        lv_sawTargetPoint = gf_GetNearestSawTarget(lv_vikingPosition);
    }
    UnitIssueOrder(gv_terraTronSaw, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(gv_lastSawPosition, 50.0, lv_sawTargetPoint)), c_orderQueueReplace);
    TriggerEnable(gt_TerraTronSawBehavior, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerraTronSawSpawned_Init () {
    gt_TerraTronSawSpawned = TriggerCreate("gt_TerraTronSawSpawned_Func");
    TriggerEnable(gt_TerraTronSawSpawned, false);
    TriggerAddEventUnitRegion(gt_TerraTronSawSpawned, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terra Tron Saw Behavior
//--------------------------------------------------------------------------------------------------
bool gt_TerraTronSawBehavior_Func (bool testConds, bool runActions) {
    fixed auto0C5F33C2_val;

    // Variable Declarations
    fixed lv_reflectionAngleVariability;
    point lv_currentSawPosition;
    fixed lv_xofSawPosition;
    fixed lv_yofSawPosition;
    fixed lv_reflectionNormalFacing;
    point lv_reflectionVector;
    point lv_newDestination;

    // Variable Initialization
    lv_reflectionAngleVariability = 10.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentSawPosition = UnitGetPosition(gv_terraTronSaw);
    if ((RegionContainsPoint(RegionRect(PointGetX(gv_screenLowerBound), PointGetY(gv_screenLowerBound), PointGetX(gv_screenUpperBound), PointGetY(gv_screenUpperBound)), lv_currentSawPosition) == false)) {
        gv_currentSawBounces += 1;
        if ((gv_currentSawBounces > gv_totalSawBounces)) {
            TriggerEnable(TriggerGetCurrent(), false);
            UnitKill(gv_terraTronSaw);
        }
        else {
            lv_reflectionNormalFacing = gf_GetNormalFacing(lv_currentSawPosition);
            auto0C5F33C2_val = lv_reflectionNormalFacing;
            if (auto0C5F33C2_val == 0.0) {
                UnitSetPosition(gv_terraTronSaw, Point(PointGetX(gv_screenLowerBound), PointGetY(lv_currentSawPosition)), true);
            }
            else if (auto0C5F33C2_val == 90.0) {
                UnitSetPosition(gv_terraTronSaw, Point(PointGetX(lv_currentSawPosition), PointGetY(gv_screenLowerBound)), true);
            }
            else if (auto0C5F33C2_val == 180.0) {
                UnitSetPosition(gv_terraTronSaw, Point(PointGetX(gv_screenUpperBound), PointGetY(lv_currentSawPosition)), true);
            }
            else if (auto0C5F33C2_val == 270.0) {
                UnitSetPosition(gv_terraTronSaw, Point(PointGetX(lv_currentSawPosition), PointGetY(gv_screenUpperBound)), true);
            }
            else {
            }
            lv_currentSawPosition = UnitGetPosition(gv_terraTronSaw);
            lv_reflectionVector = PointReflect(gv_lastSawPosition, lv_currentSawPosition, lv_reflectionNormalFacing);
            lv_newDestination = libNtve_gf_PointOffsetTowardsPoint(lv_currentSawPosition, 50.0, lv_reflectionVector);
            UnitIssueOrder(gv_terraTronSaw, OrderTargetingPoint(AbilityCommand("move", 0), lv_newDestination), c_orderQueueReplace);
            gv_lastSawPosition = lv_currentSawPosition;
            SoundPlayOnUnit(SoundLink("SS_SawBounce", 0), PlayerGroupAll(), gv_terraTronSaw, 8.0, 100.0, 0.0);
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerraTronSawBehavior_Init () {
    gt_TerraTronSawBehavior = TriggerCreate("gt_TerraTronSawBehavior_Func");
    TriggerEnable(gt_TerraTronSawBehavior, false);
    TriggerAddEventTimePeriodic(gt_TerraTronSawBehavior, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Background Manager
//--------------------------------------------------------------------------------------------------
bool gt_BackgroundManager_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_pos;
    point lv_posNext;
    unit lv_bGSwapTemp;
    int lv_indexNew;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_BGUpdatePosition();
    Wait(0.1, c_timeGame);
    if ((gv_currentBackgroundIndex == 0)) {
        gv_currentBackgroundIndex = RandomInt(1, gv_selectedBackgroundCount);
    }
    else {
        lv_indexNew = RandomInt(1, (gv_selectedBackgroundCount - 1));
        if ((lv_indexNew == gv_currentBackgroundIndex)) {
            lv_indexNew += 1;
            if ((lv_indexNew > gv_selectedBackgroundCount)) {
                lv_indexNew = 1;
            }
            else {
            }
            gv_currentBackgroundIndex = lv_indexNew;
        }
        else {
        }
    }
    gf_CreateBackground(gv_selectedBackgroundIDs[gv_currentBackgroundIndex]);
    gv_backgroundCurrent = UnitLastCreated();
    UnitSetPosition(gv_backgroundCurrent, gv_bGStart, false);
    gv_nextBackgroundIndex = RandomInt(1, gv_selectedBackgroundCount);
    gf_CreateBackground(gv_selectedBackgroundIDs[gv_nextBackgroundIndex]);
    gv_backgroundNext = UnitLastCreated();
    UnitSetPosition(gv_backgroundNext, gv_bGStartNext, false);
    UnitIssueOrder(gf_CurrentBackgroundUnit(), OrderTargetingPoint(AbilityCommand("move", 0), gv_bGTarget), c_orderQueueReplace);
    UnitIssueOrder(gf_NextBackgroundUnit(), OrderTargetingPoint(AbilityCommand("move", 0), gv_bGTarget), c_orderQueueReplace);
    if ((gf_BGPaused() == true)) {
        gf_StopBGMove();
    }
    else {
    }
    while (true) {
        while (!((gv_bGPaused == false))) {
            Wait(0.5, c_timeGame);
        }
        Wait(0.5, c_timeGame);
        lv_pos = UnitGetPosition(gf_CurrentBackgroundUnit());
        lv_posNext = PointWithOffset(lv_pos, 0.0, (2.0 * gv_c_BGHeight));
        if ((AbsF((PointGetY(lv_pos) - PointGetY(gv_bGTarget))) < 2.0)) {
            lv_indexNew = RandomInt(1, gv_selectedBackgroundCount);
            if ((lv_indexNew != gv_currentBackgroundIndex)) {
                UnitRemove(gf_CurrentBackgroundUnit());
                gv_currentBackgroundIndex = lv_indexNew;
                gf_CreateBackground(gv_selectedBackgroundIDs[gv_currentBackgroundIndex]);
                gv_backgroundCurrent = UnitLastCreated();
            }
            else {
            }
            lv_pos = PointWithOffset(lv_pos, 0.0, (2.0 * gv_c_BGHeight));
            UnitSetPosition(gf_CurrentBackgroundUnit(), lv_posNext, false);
            UnitIssueOrder(gf_CurrentBackgroundUnit(), OrderTargetingPoint(AbilityCommand("move", 0), gv_bGTarget), c_orderQueueReplace);
            lv_bGSwapTemp = gf_CurrentBackgroundUnit();
            gf_SetBackground(gf_NextBackgroundUnit());
            gf_SetBackgroundNext(lv_bGSwapTemp);
            Wait(2.0, c_timeGame);
            UnitIssueOrder(gf_NextBackgroundUnit(), OrderTargetingPoint(AbilityCommand("move", 0), gv_bGTarget), c_orderQueueReplace);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BackgroundManager_Init () {
    gt_BackgroundManager = TriggerCreate("gt_BackgroundManager_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Wave
//--------------------------------------------------------------------------------------------------
bool gt_SendWave_Func (bool testConds, bool runActions) {
    int auto8DE89970_ae;
    int auto8DE89970_ai;
    int autoCE2DCCF0_val;

    // Variable Declarations
    gs_Rec_WaveInfo lv_waveInfo;
    int lv_index;
    bool lv_shoot;
    int lv_bulletSingle;
    int lv_bulletLeft;

    // Variable Initialization
    lv_waveInfo.lv_patten = 2;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveInfo.lv_unitType = gv_tP_SendWave_WaveInfo.lv_unitType;
    lv_waveInfo.lv_count = gv_tP_SendWave_WaveInfo.lv_count;
    lv_waveInfo.lv_interval = gv_tP_SendWave_WaveInfo.lv_interval;
    lv_waveInfo.lv_startPoint = gv_tP_SendWave_WaveInfo.lv_startPoint;
    lv_waveInfo.lv_patten = gv_tP_SendWave_WaveInfo.lv_patten;
    lv_waveInfo.lv_patternParam1 = gv_tP_SendWave_WaveInfo.lv_patternParam1;
    lv_waveInfo.lv_patternParam2 = gv_tP_SendWave_WaveInfo.lv_patternParam2;
    lv_waveInfo.lv_patternParam3 = gv_tP_SendWave_WaveInfo.lv_patternParam3;
    lv_waveInfo.lv_patternParam4 = gv_tP_SendWave_WaveInfo.lv_patternParam4;
    lv_waveInfo.lv_patternParam5 = gv_tP_SendWave_WaveInfo.lv_patternParam5;
    lv_waveInfo.lv_patternParam6 = gv_tP_SendWave_WaveInfo.lv_patternParam6;
    lv_waveInfo.lv_bullet = gv_tP_SendWave_WaveInfo.lv_bullet;
    lv_waveInfo.lv_bulletTargetFighter = gv_tP_SendWave_WaveInfo.lv_bulletTargetFighter;
    lv_bulletLeft = lv_waveInfo.lv_bullet;
    auto8DE89970_ae = lv_waveInfo.lv_count;
    auto8DE89970_ai = 1;
    lv_index = 1;
    for ( ; ( (auto8DE89970_ai >= 0 && lv_index <= auto8DE89970_ae) || (auto8DE89970_ai <= 0 && lv_index >= auto8DE89970_ae) ) ; lv_index += auto8DE89970_ai ) {
        lv_bulletSingle = 0;
        if ((lv_waveInfo.lv_count > 1)) {
            if ((lv_bulletLeft > 0)) {
                if ((lv_bulletLeft >= ((lv_waveInfo.lv_count - lv_index) + 1))) {
                    lv_bulletSingle = 1;
                }
                else {
                    if ((RandomInt(1, lv_waveInfo.lv_count) <= lv_waveInfo.lv_bullet)) {
                        lv_bulletSingle = 1;
                    }
                    else {
                    }
                }
            }
            else {
            }
            if ((lv_bulletSingle > 0)) {
                lv_bulletLeft -= 1;
            }
            else {
            }
        }
        else {
            lv_bulletSingle = lv_bulletLeft;
        }
        gv_tP_SendWave_WaveInfo.lv_unitType = lv_waveInfo.lv_unitType;
        gv_tP_SendWave_WaveInfo.lv_count = lv_waveInfo.lv_count;
        gv_tP_SendWave_WaveInfo.lv_startPoint = lv_waveInfo.lv_startPoint;
        gv_tP_SendWave_WaveInfo.lv_patternParam1 = lv_waveInfo.lv_patternParam1;
        gv_tP_SendWave_WaveInfo.lv_patternParam2 = lv_waveInfo.lv_patternParam2;
        gv_tP_SendWave_WaveInfo.lv_patternParam3 = lv_waveInfo.lv_patternParam3;
        gv_tP_SendWave_WaveInfo.lv_patternParam4 = lv_waveInfo.lv_patternParam4;
        gv_tP_SendWave_WaveInfo.lv_patternParam5 = lv_waveInfo.lv_patternParam5;
        gv_tP_SendWave_WaveInfo.lv_patternParam6 = lv_waveInfo.lv_patternParam6;
        gv_tP_SendWave_WaveInfo.lv_bullet = lv_bulletSingle;
        gv_tP_SendWave_WaveInfo.lv_bulletTargetFighter = lv_waveInfo.lv_bulletTargetFighter;
        autoCE2DCCF0_val = lv_waveInfo.lv_patten;
        if (autoCE2DCCF0_val == 0) {
            TriggerExecute(gt_SendWaveLeaveBehind, true, false);
        }
        else if (autoCE2DCCF0_val == 1) {
            TriggerExecute(gt_SendWaveStraightLine, true, false);
        }
        else if (autoCE2DCCF0_val == 2) {
            TriggerExecute(gt_SendWaveCorrectionMark, true, false);
        }
        else if (autoCE2DCCF0_val == 3) {
            TriggerExecute(gt_SendWaveDownBack, true, false);
        }
        else if (autoCE2DCCF0_val == 4) {
            TriggerExecute(gt_SendWaveMoveDrop, true, false);
        }
        else if (autoCE2DCCF0_val == 5) {
            TriggerExecute(gt_SendWaveCircle, true, false);
        }
        else if (autoCE2DCCF0_val == 6) {
            TriggerExecute(gt_SendWaveSine, true, false);
        }
        else {
        }
        Wait(lv_waveInfo.lv_interval, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendWave_Init () {
    gt_SendWave = TriggerCreate("gt_SendWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Wave - Leave Behind
//--------------------------------------------------------------------------------------------------
bool gt_SendWaveLeaveBehind_Func (bool testConds, bool runActions) {
    // Variable Declarations
    gs_Rec_WaveInfo lv_waveInfo;
    point lv_posTurn;
    point lv_posSpawn;
    point lv_posFinish;
    point lv_posCurrent;
    unit lv_plane;
    region lv_outerBounds;
    int lv_index;
    int lv_shootDelay;
    fixed lv_shootAngle;
    fixed lv_waitingTime;
    fixed lv_time;
    fixed lv_shootingInterval;
    bool lv_lowerSide;
    fixed lv_lowerSideY;
    bool lv_facingViking;
    fixed lv_oldSpeed;

    // Variable Initialization
    lv_waveInfo.lv_patten = 2;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveInfo.lv_unitType = gv_tP_SendWave_WaveInfo.lv_unitType;
    lv_waveInfo.lv_startPoint = gv_tP_SendWave_WaveInfo.lv_startPoint;
    lv_waveInfo.lv_patternParam1 = gv_tP_SendWave_WaveInfo.lv_patternParam1;
    lv_waveInfo.lv_patternParam2 = gv_tP_SendWave_WaveInfo.lv_patternParam2;
    lv_waveInfo.lv_patternParam3 = gv_tP_SendWave_WaveInfo.lv_patternParam3;
    lv_waveInfo.lv_patternParam4 = gv_tP_SendWave_WaveInfo.lv_patternParam4;
    lv_waveInfo.lv_patternParam5 = gv_tP_SendWave_WaveInfo.lv_patternParam5;
    lv_waveInfo.lv_patternParam6 = gv_tP_SendWave_WaveInfo.lv_patternParam6;
    lv_waveInfo.lv_bullet = gv_tP_SendWave_WaveInfo.lv_bullet;
    lv_waveInfo.lv_bulletTargetFighter = gv_tP_SendWave_WaveInfo.lv_bulletTargetFighter;
    lv_posSpawn = gf_ConvertShooterCoordToMapCoord(lv_waveInfo.lv_startPoint);
    lv_posTurn = Point(lv_waveInfo.lv_patternParam1, lv_waveInfo.lv_patternParam2);
    lv_posTurn = gf_ConvertShooterCoordToMapCoord(lv_posTurn);
    lv_waitingTime = lv_waveInfo.lv_patternParam3;
    lv_shootingInterval = lv_waveInfo.lv_patternParam4;
    lv_facingViking = (lv_waveInfo.lv_patternParam5 == 0.0);
    gf_SpawnMob(1, lv_waveInfo.lv_unitType, lv_posSpawn, 270.0);
    lv_plane = UnitLastCreated();
    lv_oldSpeed = UnitGetPropertyFixed(lv_plane, c_unitPropMovementSpeed, c_unitPropNormal);
    gf_PrepareUnitForShooterGame(lv_plane);
    UnitSetPropertyFixed(lv_plane, c_unitPropMovementSpeed, 3.5);
    UnitIssueOrder(lv_plane, OrderTargetingPoint(AbilityCommand("move", 0), lv_posTurn), c_orderQueueReplace);
    while (true) {
        Wait(0.25, c_timeGame);
        if ((UnitIsAlive(lv_plane) == false)) {
            return true;
        }
        else {
        }
        if ((UnitTestState(lv_plane, c_unitStateIdle) == true)) {
            break;
        }
        else {
        }
    }
    gf_MobSpawned(lv_plane);
    lv_index = 0;
    lv_time = 0.0;
    lv_shootDelay = RandomInt(1, 5);
    lv_outerBounds = gf_GetOuterBoundary();
    UnitSetPropertyFixed(lv_plane, c_unitPropMovementSpeed, lv_oldSpeed);
    while (true) {
        if ((UnitIsAlive(lv_plane) == false)) {
            return true;
        }
        else {
        }
        lv_posCurrent = UnitGetPosition(lv_plane);
        if ((RegionContainsPoint(lv_outerBounds, lv_posCurrent) == false)) {
            UnitRemove(lv_plane);
            return true;
        }
        else {
        }
        if ((lv_facingViking == true) && (UnitIsAlive(gv_viking) == true)) {
            libNtve_gf_MakeUnitFacePoint(lv_plane, UnitGetPosition(gv_viking), (AbsF((UnitGetFacing(lv_plane) - AngleBetweenPoints(lv_posCurrent, UnitGetPosition(gv_viking)))) / 30.0));
        }
        else {
        }
        if ((lv_waveInfo.lv_bullet > 0) && (UnitIsAlive(gv_viking) == true) && (lv_index == lv_shootDelay)) {
            lv_waveInfo.lv_bullet = (lv_waveInfo.lv_bullet - 1);
            lv_index = 0;
            lv_shootDelay = FixedToInt((lv_shootingInterval + RandomFixed(-10.0, 10.0)));
            if ((lv_shootDelay < 10)) {
                lv_shootDelay = 10;
            }
            else {
            }
            lv_shootAngle = AngleBetweenPoints(UnitGetPosition(lv_plane), UnitGetPosition(gv_viking));
            if ((lv_waveInfo.lv_bulletTargetFighter == false)) {
                lv_shootAngle = RandomFixed((lv_shootAngle - 45.0), (lv_shootAngle + 45.0));
            }
            else {
            }
            gf_MobAttack(lv_plane, PointWithOffsetPolar(UnitGetPosition(lv_plane), 30.0, lv_shootAngle));
        }
        else {
        }
        if ((lv_time > lv_waitingTime)) {
            UnitSetCustomValue(lv_plane, 0, 1.0);
            lv_posCurrent = PointWithOffset(lv_posCurrent, 0.0, -0.1);
            UnitSetPosition(lv_plane, lv_posCurrent, true);
        }
        else {
        }
        lv_lowerSideY = (PointGetY(RegionGetBoundsMin(lv_outerBounds)) + (libNtve_gf_HeightOfRegion(lv_outerBounds) * 0.333));
        if ((lv_lowerSide == false) && (PointGetY(lv_posCurrent) <= lv_lowerSideY)) {
            lv_lowerSide = true;
        }
        else {
        }
        Wait(0.0625, c_timeGame);
        lv_time += 0.0625;
        if ((lv_lowerSide == false)) {
            lv_index += 1;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendWaveLeaveBehind_Init () {
    gt_SendWaveLeaveBehind = TriggerCreate("gt_SendWaveLeaveBehind_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Wave - Straight Line
//--------------------------------------------------------------------------------------------------
bool gt_SendWaveStraightLine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    gs_Rec_WaveInfo lv_waveInfo;
    point lv_posTurn;
    point lv_posSpawn;
    point lv_posFinish;
    point lv_posCurrent;
    unit lv_plane;
    region lv_outerBounds;
    int lv_index;
    int lv_shootDelay;
    fixed lv_shootAngle;
    fixed lv_speed;
    fixed lv_delay;

    // Variable Initialization
    lv_waveInfo.lv_patten = 2;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveInfo.lv_unitType = gv_tP_SendWave_WaveInfo.lv_unitType;
    lv_waveInfo.lv_startPoint = gv_tP_SendWave_WaveInfo.lv_startPoint;
    lv_waveInfo.lv_patternParam1 = gv_tP_SendWave_WaveInfo.lv_patternParam1;
    lv_waveInfo.lv_patternParam2 = gv_tP_SendWave_WaveInfo.lv_patternParam2;
    lv_waveInfo.lv_patternParam3 = gv_tP_SendWave_WaveInfo.lv_patternParam3;
    lv_waveInfo.lv_patternParam4 = gv_tP_SendWave_WaveInfo.lv_patternParam4;
    lv_waveInfo.lv_patternParam5 = gv_tP_SendWave_WaveInfo.lv_patternParam5;
    lv_waveInfo.lv_patternParam6 = gv_tP_SendWave_WaveInfo.lv_patternParam6;
    lv_waveInfo.lv_bullet = gv_tP_SendWave_WaveInfo.lv_bullet;
    lv_waveInfo.lv_bulletTargetFighter = gv_tP_SendWave_WaveInfo.lv_bulletTargetFighter;
    lv_posSpawn = gf_ConvertShooterCoordToMapCoord(lv_waveInfo.lv_startPoint);
    lv_posFinish = Point(lv_waveInfo.lv_patternParam1, lv_waveInfo.lv_patternParam2);
    lv_posFinish = gf_ConvertShooterCoordToMapCoord(lv_posFinish);
    lv_speed = lv_waveInfo.lv_patternParam5;
    gf_SpawnMob(1, lv_waveInfo.lv_unitType, lv_posSpawn, 270.0);
    lv_plane = UnitLastCreated();
    gf_PrepareUnitForShooterGame(lv_plane);
    if ((lv_speed > 0.0)) {
        UnitSetPropertyFixed(lv_plane, c_unitPropMovementSpeed, lv_speed);
    }
    else {
    }
    gf_MobSpawned(lv_plane);
    lv_index = 0;
    lv_outerBounds = gf_GetOuterBoundary();
    lv_posCurrent = UnitGetPosition(lv_plane);
    lv_posFinish = PointWithOffsetPolar(lv_posCurrent, 30.0, AngleBetweenPoints(lv_posCurrent, lv_posFinish));
    UnitIssueOrder(lv_plane, OrderTargetingPoint(AbilityCommand("move", 0), lv_posFinish), c_orderQueueReplace);
    lv_shootDelay = RandomInt(4, 12);
    while (true) {
        if ((UnitIsAlive(lv_plane) == false)) {
            return true;
        }
        else {
        }
        if ((lv_waveInfo.lv_bullet > 0) && (UnitIsAlive(gv_viking) == true) && (lv_index == lv_shootDelay)) {
            lv_shootAngle = AngleBetweenPoints(UnitGetPosition(lv_plane), UnitGetPosition(gv_viking));
            if ((lv_waveInfo.lv_bulletTargetFighter == false)) {
                lv_shootAngle = RandomFixed((lv_shootAngle - 45.0), (lv_shootAngle + 45.0));
            }
            else {
            }
            gf_MobAttack(lv_plane, PointWithOffsetPolar(UnitGetPosition(lv_plane), 30.0, lv_shootAngle));
        }
        else {
        }
        lv_posCurrent = UnitGetPosition(lv_plane);
        if ((RegionContainsPoint(lv_outerBounds, lv_posCurrent) == false)) {
            UnitRemove(lv_plane);
            return true;
        }
        else {
        }
        Wait(0.25, c_timeGame);
        lv_index += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendWaveStraightLine_Init () {
    gt_SendWaveStraightLine = TriggerCreate("gt_SendWaveStraightLine_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Wave - Correction Mark
//--------------------------------------------------------------------------------------------------
bool gt_SendWaveCorrectionMark_Func (bool testConds, bool runActions) {
    // Variable Declarations
    gs_Rec_WaveInfo lv_waveInfo;
    point lv_posTurn;
    point lv_posSpawn;
    point lv_posFinish;
    point lv_posCurrent;
    unit lv_plane;
    region lv_outerBounds;
    int lv_index;
    int lv_shootDelay;
    fixed lv_shootAngle;
    fixed lv_speed;
    fixed lv_delay;

    // Variable Initialization
    lv_waveInfo.lv_patten = 2;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveInfo.lv_unitType = gv_tP_SendWave_WaveInfo.lv_unitType;
    lv_waveInfo.lv_startPoint = gv_tP_SendWave_WaveInfo.lv_startPoint;
    lv_waveInfo.lv_patternParam1 = gv_tP_SendWave_WaveInfo.lv_patternParam1;
    lv_waveInfo.lv_patternParam2 = gv_tP_SendWave_WaveInfo.lv_patternParam2;
    lv_waveInfo.lv_patternParam3 = gv_tP_SendWave_WaveInfo.lv_patternParam3;
    lv_waveInfo.lv_patternParam4 = gv_tP_SendWave_WaveInfo.lv_patternParam4;
    lv_waveInfo.lv_patternParam5 = gv_tP_SendWave_WaveInfo.lv_patternParam5;
    lv_waveInfo.lv_patternParam6 = gv_tP_SendWave_WaveInfo.lv_patternParam6;
    lv_waveInfo.lv_bullet = gv_tP_SendWave_WaveInfo.lv_bullet;
    lv_waveInfo.lv_bulletTargetFighter = gv_tP_SendWave_WaveInfo.lv_bulletTargetFighter;
    lv_posSpawn = gf_ConvertShooterCoordToMapCoord(lv_waveInfo.lv_startPoint);
    lv_posTurn = Point(lv_waveInfo.lv_patternParam1, lv_waveInfo.lv_patternParam2);
    lv_posTurn = gf_ConvertShooterCoordToMapCoord(lv_posTurn);
    lv_posFinish = Point(lv_waveInfo.lv_patternParam3, lv_waveInfo.lv_patternParam4);
    lv_posFinish = gf_ConvertShooterCoordToMapCoord(lv_posFinish);
    lv_speed = lv_waveInfo.lv_patternParam5;
    lv_delay = lv_waveInfo.lv_patternParam6;
    gf_SpawnMob(1, lv_waveInfo.lv_unitType, lv_posSpawn, 270.0);
    lv_plane = UnitLastCreated();
    gf_PrepareUnitForShooterGame(lv_plane);
    UnitIssueOrder(lv_plane, OrderTargetingPoint(AbilityCommand("move", 0), lv_posTurn), c_orderQueueReplace);
    while (true) {
        Wait(0.25, c_timeGame);
        if ((UnitIsAlive(lv_plane) == false)) {
            return true;
        }
        else {
        }
        if ((UnitTestState(lv_plane, c_unitStateIdle) == true)) {
            break;
        }
        else {
        }
    }
    gf_MobSpawned(lv_plane);
    Wait(lv_delay, c_timeGame);
    if ((lv_speed > 0.0)) {
        UnitSetPropertyFixed(lv_plane, c_unitPropMovementSpeed, lv_speed);
    }
    else {
    }
    if ((lv_waveInfo.lv_bullet > 0) && (UnitIsAlive(gv_viking) == true) && (gf_CurrentLevel() != 3)) {
        lv_shootAngle = AngleBetweenPoints(UnitGetPosition(lv_plane), UnitGetPosition(gv_viking));
        if ((lv_waveInfo.lv_bulletTargetFighter == false)) {
            lv_shootAngle = RandomFixed((lv_shootAngle - 45.0), (lv_shootAngle + 45.0));
        }
        else {
        }
        gf_MobAttack(lv_plane, PointWithOffsetPolar(UnitGetPosition(lv_plane), 30.0, lv_shootAngle));
    }
    else {
    }
    lv_index = 0;
    lv_outerBounds = gf_GetOuterBoundary();
    lv_posCurrent = UnitGetPosition(lv_plane);
    lv_posFinish = PointWithOffsetPolar(lv_posCurrent, 30.0, AngleBetweenPoints(lv_posCurrent, lv_posFinish));
    UnitIssueOrder(lv_plane, OrderTargetingPoint(AbilityCommand("move", 0), lv_posFinish), c_orderQueueReplace);
    lv_shootDelay = RandomInt(20, 36);
    while (true) {
        if ((UnitIsAlive(lv_plane) == false)) {
            return true;
        }
        else {
        }
        if ((lv_waveInfo.lv_bullet > 0) && (UnitIsAlive(gv_viking) == true) && (gf_CurrentLevel() == 3) && (lv_index == lv_shootDelay)) {
            lv_shootAngle = AngleBetweenPoints(UnitGetPosition(lv_plane), UnitGetPosition(gv_viking));
            if ((lv_waveInfo.lv_bulletTargetFighter == false)) {
                lv_shootAngle = RandomFixed((lv_shootAngle - 45.0), (lv_shootAngle + 45.0));
            }
            else {
            }
            gf_MobAttack(lv_plane, PointWithOffsetPolar(UnitGetPosition(lv_plane), 30.0, lv_shootAngle));
        }
        else {
        }
        lv_posCurrent = UnitGetPosition(lv_plane);
        if ((RegionContainsPoint(lv_outerBounds, lv_posCurrent) == false)) {
            UnitRemove(lv_plane);
            return true;
        }
        else {
        }
        Wait(0.25, c_timeGame);
        lv_index += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendWaveCorrectionMark_Init () {
    gt_SendWaveCorrectionMark = TriggerCreate("gt_SendWaveCorrectionMark_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Wave - Down&Back
//--------------------------------------------------------------------------------------------------
bool gt_SendWaveDownBack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    gs_Rec_WaveInfo lv_waveInfo;
    point lv_posTurn;
    point lv_posSpawn;
    point lv_posFinish;
    point lv_posCurrent;
    unit lv_plane;
    region lv_outerBounds;
    int lv_index;
    int lv_shootDelay;
    fixed lv_shootAngle;
    fixed lv_speed1;
    fixed lv_speed2;

    // Variable Initialization
    lv_waveInfo.lv_patten = 2;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveInfo.lv_unitType = gv_tP_SendWave_WaveInfo.lv_unitType;
    lv_waveInfo.lv_startPoint = gv_tP_SendWave_WaveInfo.lv_startPoint;
    lv_waveInfo.lv_patternParam1 = gv_tP_SendWave_WaveInfo.lv_patternParam1;
    lv_waveInfo.lv_patternParam2 = gv_tP_SendWave_WaveInfo.lv_patternParam2;
    lv_waveInfo.lv_patternParam3 = gv_tP_SendWave_WaveInfo.lv_patternParam3;
    lv_waveInfo.lv_patternParam4 = gv_tP_SendWave_WaveInfo.lv_patternParam4;
    lv_waveInfo.lv_patternParam5 = gv_tP_SendWave_WaveInfo.lv_patternParam5;
    lv_waveInfo.lv_patternParam6 = gv_tP_SendWave_WaveInfo.lv_patternParam6;
    lv_waveInfo.lv_bullet = gv_tP_SendWave_WaveInfo.lv_bullet;
    lv_waveInfo.lv_bulletTargetFighter = gv_tP_SendWave_WaveInfo.lv_bulletTargetFighter;
    lv_posSpawn = gf_ConvertShooterCoordToMapCoord(lv_waveInfo.lv_startPoint);
    lv_posTurn = Point(PointGetX(lv_waveInfo.lv_startPoint), lv_waveInfo.lv_patternParam1);
    lv_posTurn = gf_ConvertShooterCoordToMapCoord(lv_posTurn);
    lv_posFinish = Point(PointGetX(lv_waveInfo.lv_startPoint), 10.0);
    lv_posFinish = gf_ConvertShooterCoordToMapCoord(lv_posFinish);
    lv_speed1 = lv_waveInfo.lv_patternParam5;
    lv_speed2 = lv_waveInfo.lv_patternParam6;
    gf_SpawnMob(1, lv_waveInfo.lv_unitType, lv_posSpawn, 270.0);
    lv_plane = UnitLastCreated();
    gf_PrepareUnitForShooterGame(lv_plane);
    gf_MobSpawned(lv_plane);
    UnitSetPropertyFixed(lv_plane, c_unitPropMovementSpeed, lv_speed1);
    UnitIssueOrder(lv_plane, OrderTargetingPoint(AbilityCommand("move", 0), lv_posTurn), c_orderQueueReplace);
    while (true) {
        Wait(0.25, c_timeGame);
        if ((UnitIsAlive(lv_plane) == false)) {
            return true;
        }
        else {
        }
        if ((UnitTestState(lv_plane, c_unitStateIdle) == true)) {
            break;
        }
        else {
        }
    }
    UnitSetPropertyFixed(lv_plane, c_unitPropMovementSpeed, UnitTypeGetProperty(UnitGetType(lv_plane), c_unitPropMovementSpeed));
    Wait(0.3, c_timeGame);
    lv_index = 0;
    lv_shootDelay = RandomInt(2, 5);
    lv_outerBounds = gf_GetOuterBoundary();
    UnitSetPropertyFixed(lv_plane, c_unitPropMovementSpeed, lv_speed2);
    UnitIssueOrder(lv_plane, OrderTargetingPoint(AbilityCommand("move", 0), lv_posFinish), c_orderQueueReplace);
    while (true) {
        if ((UnitIsAlive(lv_plane) == false)) {
            return true;
        }
        else {
        }
        if ((lv_waveInfo.lv_bullet > 0) && (UnitIsAlive(gv_viking) == true) && (lv_index == lv_shootDelay)) {
            lv_shootAngle = AngleBetweenPoints(UnitGetPosition(lv_plane), UnitGetPosition(gv_viking));
            if ((lv_waveInfo.lv_bulletTargetFighter == false)) {
                lv_shootAngle = RandomFixed((lv_shootAngle - 45.0), (lv_shootAngle + 45.0));
            }
            else {
            }
            gf_MobAttack(lv_plane, PointWithOffsetPolar(UnitGetPosition(lv_plane), 30.0, lv_shootAngle));
        }
        else {
        }
        lv_posCurrent = UnitGetPosition(lv_plane);
        if ((RegionContainsPoint(lv_outerBounds, lv_posCurrent) == false)) {
            UnitRemove(lv_plane);
            return true;
        }
        else {
        }
        Wait(0.25, c_timeGame);
        lv_index += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendWaveDownBack_Init () {
    gt_SendWaveDownBack = TriggerCreate("gt_SendWaveDownBack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Wave - Move & Drop
//--------------------------------------------------------------------------------------------------
bool gt_SendWaveMoveDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    gs_Rec_WaveInfo lv_waveInfo;
    point lv_posTurn;
    point lv_posSpawn;
    point lv_posFinish;
    point lv_posCurrent;
    unit lv_plane;
    region lv_outerBounds;
    int lv_index;
    int lv_shootDelay;
    fixed lv_shootAngle;
    fixed lv_delay;
    fixed lv_speed;
    fixed lv_speedInit;

    // Variable Initialization
    lv_waveInfo.lv_patten = 2;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveInfo.lv_unitType = gv_tP_SendWave_WaveInfo.lv_unitType;
    lv_waveInfo.lv_startPoint = gv_tP_SendWave_WaveInfo.lv_startPoint;
    lv_waveInfo.lv_patternParam1 = gv_tP_SendWave_WaveInfo.lv_patternParam1;
    lv_waveInfo.lv_patternParam2 = gv_tP_SendWave_WaveInfo.lv_patternParam2;
    lv_waveInfo.lv_patternParam3 = gv_tP_SendWave_WaveInfo.lv_patternParam3;
    lv_waveInfo.lv_patternParam4 = gv_tP_SendWave_WaveInfo.lv_patternParam4;
    lv_waveInfo.lv_patternParam5 = gv_tP_SendWave_WaveInfo.lv_patternParam5;
    lv_waveInfo.lv_patternParam6 = gv_tP_SendWave_WaveInfo.lv_patternParam6;
    lv_waveInfo.lv_bullet = gv_tP_SendWave_WaveInfo.lv_bullet;
    lv_waveInfo.lv_bulletTargetFighter = gv_tP_SendWave_WaveInfo.lv_bulletTargetFighter;
    lv_posSpawn = gf_ConvertShooterCoordToMapCoord(lv_waveInfo.lv_startPoint);
    lv_posTurn = Point(lv_waveInfo.lv_patternParam1, lv_waveInfo.lv_patternParam2);
    lv_posTurn = gf_ConvertShooterCoordToMapCoord(lv_posTurn);
    lv_posFinish = PointWithOffset(lv_posTurn, 0.0, -30.0);
    lv_speedInit = lv_waveInfo.lv_patternParam4;
    lv_speed = lv_waveInfo.lv_patternParam5;
    lv_delay = lv_waveInfo.lv_patternParam6;
    gf_SpawnMob(1, lv_waveInfo.lv_unitType, lv_posSpawn, 270.0);
    lv_plane = UnitLastCreated();
    gf_PrepareUnitForShooterGame(lv_plane);
    if ((lv_speedInit > 0.0)) {
        UnitSetPropertyFixed(lv_plane, c_unitPropMovementSpeed, lv_speedInit);
    }
    else {
    }
    UnitIssueOrder(lv_plane, OrderTargetingPoint(AbilityCommand("move", 0), lv_posTurn), c_orderQueueReplace);
    while (true) {
        Wait(0.25, c_timeGame);
        if ((UnitIsAlive(lv_plane) == false)) {
            return true;
        }
        else {
        }
        if ((UnitTestState(lv_plane, c_unitStateIdle) == true)) {
            break;
        }
        else {
        }
    }
    gf_MobSpawned(lv_plane);
    Wait(lv_delay, c_timeGame);
    lv_index = 0;
    lv_shootDelay = RandomInt(1, 1);
    lv_outerBounds = gf_GetOuterBoundary();
    if ((lv_speed > 0.0)) {
        UnitSetPropertyFixed(lv_plane, c_unitPropMovementSpeed, lv_speed);
    }
    else {
    }
    UnitIssueOrder(lv_plane, OrderTargetingPoint(AbilityCommand("move", 0), lv_posFinish), c_orderQueueReplace);
    while (true) {
        if ((UnitIsAlive(lv_plane) == false)) {
            return true;
        }
        else {
        }
        if ((lv_waveInfo.lv_bullet > 0) && (UnitIsAlive(gv_viking) == true) && (lv_index == lv_shootDelay)) {
            lv_shootAngle = AngleBetweenPoints(UnitGetPosition(lv_plane), UnitGetPosition(gv_viking));
            if ((lv_waveInfo.lv_bulletTargetFighter == false)) {
                lv_shootAngle = RandomFixed((lv_shootAngle - 45.0), (lv_shootAngle + 45.0));
            }
            else {
            }
            gf_MobAttack(lv_plane, PointWithOffsetPolar(UnitGetPosition(lv_plane), 30.0, lv_shootAngle));
        }
        else {
        }
        lv_posCurrent = UnitGetPosition(lv_plane);
        if ((RegionContainsPoint(lv_outerBounds, lv_posCurrent) == false)) {
            UnitRemove(lv_plane);
            return true;
        }
        else {
        }
        Wait(0.25, c_timeGame);
        lv_index += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendWaveMoveDrop_Init () {
    gt_SendWaveMoveDrop = TriggerCreate("gt_SendWaveMoveDrop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Wave - Circle
//--------------------------------------------------------------------------------------------------
bool gt_SendWaveCircle_Func (bool testConds, bool runActions) {
    int auto5B399C11_ae;
    int auto5B399C11_ai;

    // Variable Declarations
    gs_Rec_WaveInfo lv_waveInfo;
    point lv_posTurn;
    point lv_posSpawn;
    point lv_posFinish;
    point lv_posCurrent;
    unit lv_plane;
    region lv_outerBounds;
    int lv_index;
    int lv_shootDelay;
    fixed lv_shootAngle;
    point lv_center;
    fixed lv_angleInterval;
    fixed lv_angleStart;
    fixed lv_radius;
    int lv_turnTimes;
    int lv_turnIndex;
    point lv_turnTarget;
    fixed lv_speed;

    // Variable Initialization
    lv_waveInfo.lv_patten = 2;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveInfo.lv_unitType = gv_tP_SendWave_WaveInfo.lv_unitType;
    lv_waveInfo.lv_startPoint = gv_tP_SendWave_WaveInfo.lv_startPoint;
    lv_waveInfo.lv_patternParam1 = gv_tP_SendWave_WaveInfo.lv_patternParam1;
    lv_waveInfo.lv_patternParam2 = gv_tP_SendWave_WaveInfo.lv_patternParam2;
    lv_waveInfo.lv_patternParam3 = gv_tP_SendWave_WaveInfo.lv_patternParam3;
    lv_waveInfo.lv_patternParam4 = gv_tP_SendWave_WaveInfo.lv_patternParam4;
    lv_waveInfo.lv_patternParam5 = gv_tP_SendWave_WaveInfo.lv_patternParam5;
    lv_waveInfo.lv_patternParam6 = gv_tP_SendWave_WaveInfo.lv_patternParam6;
    lv_waveInfo.lv_bullet = gv_tP_SendWave_WaveInfo.lv_bullet;
    lv_waveInfo.lv_bulletTargetFighter = gv_tP_SendWave_WaveInfo.lv_bulletTargetFighter;
    lv_posSpawn = gf_ConvertShooterCoordToMapCoord(lv_waveInfo.lv_startPoint);
    lv_posTurn = Point(lv_waveInfo.lv_patternParam1, lv_waveInfo.lv_patternParam2);
    lv_posTurn = gf_ConvertShooterCoordToMapCoord(lv_posTurn);
    lv_center = Point(lv_waveInfo.lv_patternParam3, lv_waveInfo.lv_patternParam4);
    lv_center = gf_ConvertShooterCoordToMapCoord(lv_center);
    lv_radius = DistanceBetweenPoints(lv_center, lv_posTurn);
    lv_angleStart = AngleBetweenPoints(lv_center, lv_posTurn);
    lv_angleInterval = lv_waveInfo.lv_patternParam6;
    if ((PointGetX(lv_posTurn) > PointGetX(lv_center))) {
        lv_angleInterval = (-1.0 * lv_angleInterval);
    }
    else {
    }
    lv_turnTimes = FixedToInt((lv_waveInfo.lv_patternParam5 / AbsF(lv_angleInterval)));
    lv_speed = ((2.0 * gv_c_Pai) * (lv_radius * (lv_angleInterval / 360.0)));
    lv_speed = AbsF((lv_speed / 0.0625));
    gf_SpawnMob(1, lv_waveInfo.lv_unitType, lv_posSpawn, 270.0);
    lv_plane = UnitLastCreated();
    gf_PrepareUnitForShooterGame(lv_plane);
    UnitIssueOrder(lv_plane, OrderTargetingPoint(AbilityCommand("move", 0), lv_posTurn), c_orderQueueReplace);
    UnitSetPropertyFixed(lv_plane, c_unitPropMovementSpeed, lv_speed);
    while (true) {
        Wait(0.0625, c_timeGame);
        if ((UnitIsAlive(lv_plane) == false)) {
            return true;
        }
        else {
        }
        lv_posCurrent = UnitGetPosition(lv_plane);
        if ((DistanceBetweenPoints(lv_posCurrent, lv_posTurn) < 1.0)) {
            break;
        }
        else {
        }
    }
    gf_MobSpawned(lv_plane);
    UnitIssueOrder(lv_plane, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_plane), c_animNameDefault, "Walk", c_animFlagPlayForever, c_animTimeDefault);
    lv_index = 0;
    lv_shootDelay = RandomInt(40, 50);
    auto5B399C11_ae = lv_turnTimes;
    auto5B399C11_ai = 1;
    lv_turnIndex = 1;
    for ( ; ( (auto5B399C11_ai >= 0 && lv_turnIndex <= auto5B399C11_ae) || (auto5B399C11_ai <= 0 && lv_turnIndex >= auto5B399C11_ae) ) ; lv_turnIndex += auto5B399C11_ai ) {
        if ((UnitIsAlive(lv_plane) == false)) {
            return true;
        }
        else {
        }
        if ((lv_waveInfo.lv_bullet > 0) && (UnitIsAlive(gv_viking) == true) && (lv_index == lv_shootDelay)) {
            lv_shootAngle = AngleBetweenPoints(UnitGetPosition(lv_plane), UnitGetPosition(gv_viking));
            if ((lv_waveInfo.lv_bulletTargetFighter == false)) {
                lv_shootAngle = RandomFixed((lv_shootAngle - 45.0), (lv_shootAngle + 45.0));
            }
            else {
            }
            gf_MobAttack(lv_plane, PointWithOffsetPolar(UnitGetPosition(lv_plane), 30.0, lv_shootAngle));
        }
        else {
        }
        lv_angleStart += lv_angleInterval;
        lv_turnTarget = PointWithOffsetPolar(lv_center, lv_radius, lv_angleStart);
        libNtve_gf_MakeUnitFacePoint(lv_plane, lv_turnTarget, 0.0625);
        UnitSetPosition(lv_plane, lv_turnTarget, true);
        Wait(0.0625, c_timeGame);
        lv_index += 1;
    }
    UnitSetPropertyFixed(lv_plane, c_unitPropMovementSpeed, lv_speed);
    lv_outerBounds = gf_GetOuterBoundary();
    UnitIssueOrder(lv_plane, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_plane), 30.0, UnitGetFacing(lv_plane))), c_orderQueueReplace);
    while (true) {
        if ((UnitIsAlive(lv_plane) == false)) {
            return true;
        }
        else {
        }
        lv_posCurrent = UnitGetPosition(lv_plane);
        if ((RegionContainsPoint(lv_outerBounds, lv_posCurrent) == false)) {
            UnitRemove(lv_plane);
            return true;
        }
        else {
        }
        Wait(0.25, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendWaveCircle_Init () {
    gt_SendWaveCircle = TriggerCreate("gt_SendWaveCircle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Wave - Sine
//--------------------------------------------------------------------------------------------------
bool gt_SendWaveSine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    gs_Rec_WaveInfo lv_waveInfo;
    point lv_posTurn;
    point lv_posSpawn;
    point lv_posFinish;
    point lv_posCurrent;
    unit lv_plane;
    region lv_outerBounds;
    int lv_index;
    int lv_shootDelay;
    fixed lv_shootAngle;
    fixed lv_speed;
    fixed lv_angle;
    fixed lv_xCoe;
    fixed lv_yCoe;
    fixed lv_trigAngleStart;
    fixed lv_x;
    fixed lv_x1;
    fixed lv_y;
    fixed lv_y1;
    point lv_posTarget;
    fixed lv_alpha;
    fixed lv_distance;

    // Variable Initialization
    lv_waveInfo.lv_patten = 2;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveInfo.lv_unitType = gv_tP_SendWave_WaveInfo.lv_unitType;
    lv_waveInfo.lv_startPoint = gv_tP_SendWave_WaveInfo.lv_startPoint;
    lv_waveInfo.lv_patternParam1 = gv_tP_SendWave_WaveInfo.lv_patternParam1;
    lv_waveInfo.lv_patternParam2 = gv_tP_SendWave_WaveInfo.lv_patternParam2;
    lv_waveInfo.lv_patternParam3 = gv_tP_SendWave_WaveInfo.lv_patternParam3;
    lv_waveInfo.lv_patternParam4 = gv_tP_SendWave_WaveInfo.lv_patternParam4;
    lv_waveInfo.lv_patternParam5 = gv_tP_SendWave_WaveInfo.lv_patternParam5;
    lv_waveInfo.lv_patternParam6 = gv_tP_SendWave_WaveInfo.lv_patternParam6;
    lv_waveInfo.lv_bullet = gv_tP_SendWave_WaveInfo.lv_bullet;
    lv_waveInfo.lv_bulletTargetFighter = gv_tP_SendWave_WaveInfo.lv_bulletTargetFighter;
    lv_posSpawn = gf_ConvertShooterCoordToMapCoord(lv_waveInfo.lv_startPoint);
    lv_speed = lv_waveInfo.lv_patternParam1;
    lv_angle = lv_waveInfo.lv_patternParam2;
    lv_xCoe = lv_waveInfo.lv_patternParam3;
    lv_yCoe = lv_waveInfo.lv_patternParam4;
    lv_trigAngleStart = lv_waveInfo.lv_patternParam5;
    gf_SpawnMob(1, lv_waveInfo.lv_unitType, lv_posSpawn, 270.0);
    lv_plane = UnitLastCreated();
    gf_PrepareUnitForShooterGame(lv_plane);
    gf_MobSpawned(lv_plane);
    UnitSetPropertyFixed(lv_plane, c_unitPropMovementSpeed, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_plane), c_animNameDefault, "Walk", c_animFlagPlayForever, c_animTimeDefault);
    lv_index = 0;
    lv_x = 0.0;
    lv_shootDelay = RandomInt(10, 15);
    lv_outerBounds = gf_GetOuterBoundary();
    while (true) {
        Wait(0.0625, c_timeGame);
        if ((UnitIsAlive(lv_plane) == false)) {
            return true;
        }
        else {
        }
        if ((lv_waveInfo.lv_bullet > 0) && (UnitIsAlive(gv_viking) == true) && (lv_index == lv_shootDelay)) {
            lv_shootAngle = AngleBetweenPoints(UnitGetPosition(lv_plane), UnitGetPosition(gv_viking));
            if ((lv_waveInfo.lv_bulletTargetFighter == false)) {
                lv_shootAngle = RandomFixed((lv_shootAngle - 45.0), (lv_shootAngle + 45.0));
            }
            else {
            }
            gf_MobAttack(lv_plane, PointWithOffsetPolar(UnitGetPosition(lv_plane), 30.0, lv_shootAngle));
        }
        else {
        }
        if ((lv_index > 48)) {
            lv_posCurrent = UnitGetPosition(lv_plane);
            if ((RegionContainsPoint(lv_outerBounds, lv_posCurrent) == false)) {
                UnitRemove(lv_plane);
                return true;
            }
            else {
            }
        }
        else {
        }
        lv_x += (lv_speed * 0.0625);
        lv_y = (lv_yCoe * Sin(((lv_xCoe * lv_x) - lv_trigAngleStart)));
        lv_alpha = AngleBetweenPoints(Point(0.0, 0.0), Point(lv_x, lv_y));
        lv_distance = DistanceBetweenPoints(Point(0.0, 0.0), Point(lv_x, lv_y));
        lv_posTarget = Point(((lv_distance * Cos((lv_alpha + lv_angle))) + PointGetX(lv_posSpawn)), ((lv_distance * Sin((lv_alpha + lv_angle))) + PointGetY(lv_posSpawn)));
        libNtve_gf_MakeUnitFacePoint(lv_plane, lv_posTarget, 0.0625);
        UnitSetPosition(lv_plane, lv_posTarget, true);
        lv_index += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendWaveSine_Init () {
    gt_SendWaveSine = TriggerCreate("gt_SendWaveSine_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss Movement
//--------------------------------------------------------------------------------------------------
bool gt_BossMovement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_bounds;
    point lv_targetLoc;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_bounds = gf_GetCameraBoundary();
    while (true) {
        Wait(RandomFixed(4.0, 7.0), c_timeGame);
        if ((UnitIsAlive(gv_boss) == false)) {
            return true;
        }
        else {
        }
        while (!((gv_bossStopped == false))) {
            Wait(0.5, c_timeGame);
        }
        lv_targetLoc = RegionGetCenter(lv_bounds);
        lv_targetLoc = PointWithOffset(lv_targetLoc, RandomFixed((-1.0 * (libNtve_gf_WidthOfRegion(lv_bounds) / 4.0)), (libNtve_gf_WidthOfRegion(lv_bounds) / 4.0)), RandomFixed(2.0, 6.0));
        UnitIssueOrder(gv_boss, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetLoc), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BossMovement_Init () {
    gt_BossMovement = TriggerCreate("gt_BossMovement_Func");
    TriggerEnable(gt_BossMovement, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Mothership
//--------------------------------------------------------------------------------------------------
bool gt_SpawnMothership_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_birth;
    region lv_bounds;
    point lv_spawnLoc;
    point lv_targetLoc;
    int lv_tempDialog;

    // Variable Initialization
    lv_tempDialog = c_invalidDialogId;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_bounds = gf_GetCameraBoundary();
    lv_spawnLoc = RegionGetCenter(lv_bounds);
    lv_spawnLoc = PointWithOffset(lv_spawnLoc, 0.0, 4.0);
    libNtve_gf_CreateModelAtPoint("MothershipTeleportIn", libNtve_gf_PointWithZOffset(lv_spawnLoc, gv_c_PlaneHeight));
    lv_birth = libNtve_gf_ActorLastCreated();
    Wait(1.2, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "SS_Boss", 0, gv_p2_ENEMY, lv_spawnLoc);
    gv_mothership = UnitLastCreated();
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 600.0);
    gv_boss = gv_mothership;
    UnitSetPosition(gv_boss, lv_spawnLoc, false);
    gf_PrepareUnitForShooterGame(gv_boss);
    gf_DisplayBossHPBar(StringExternal("Param/Value/97BFB0D3"));
    TriggerExecute(gt_BossMovement, true, false);
    while (true) {
        UnitBehaviorAdd(gv_boss, "SS_BossAOEMissile", gv_boss, 1);
        Wait(6.0, c_timeGame);
        TriggerExecute(gt_MothershipPlanetCracker, true, true);
        TriggerEnable(gt_BossMovement, false);
        UnitIssueOrder(gv_boss, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitIssueOrder(gv_boss, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(UnitGetPosition(gv_boss), 10.0, 270.0)), c_orderQueueReplace);
        Wait(2.0, c_timeGame);
        UnitBehaviorAdd(gv_boss, "SS_BossAOEMissile1", gv_boss, 1);
        Wait(25.0, c_timeGame);
        UnitBehaviorRemove(gv_boss, "SS_BossAOEMissile1", 1);
        TriggerEnable(gt_BossMovement, true);
        Wait(10.0, c_timeGame);
        TriggerExecute(gt_MothershipPlanetCracker, true, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnMothership_Init () {
    gt_SpawnMothership = TriggerCreate("gt_SpawnMothership_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mothership Planet Cracker
//--------------------------------------------------------------------------------------------------
bool gt_MothershipPlanetCracker_Func (bool testConds, bool runActions) {
    int auto7DC5C2E9_ae;
    int auto7DC5C2E9_ai;
    int autoBF15FEA3_n;
    int autoBF15FEA3_i;

    // Variable Declarations
    point lv_bossPos;
    int lv_index;
    actor[11] lv_beams;
    point lv_posLeftTop;
    point lv_posRightBot;
    point lv_pos;
    region lv_damageRegion;
    const fixed lv_beamUnit = 0.5;
    int lv_beamCount;

    // Variable Initialization
    lv_beamCount = 6;

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_boss) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_bossStopped = true;
    UnitIssueOrder(gv_boss, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_mothership, Order(AbilityCommand("BossLaser", 0)), c_orderQueueReplace);
    Wait(5.0, c_timeGame);
    lv_bossPos = UnitGetPosition(gv_boss);
    lv_pos = PointWithOffset(lv_bossPos, (lv_beamUnit * (-1.0 * 2.0)), 0.0);
    lv_posLeftTop = PointWithOffset(lv_pos, 0.0, 0.0);
    lv_posRightBot = PointWithOffset(lv_posLeftTop, 4.0, -30.0);
    auto7DC5C2E9_ae = lv_beamCount;
    auto7DC5C2E9_ai = 1;
    lv_index = 1;
    for ( ; ( (auto7DC5C2E9_ai >= 0 && lv_index <= auto7DC5C2E9_ae) || (auto7DC5C2E9_ai <= 0 && lv_index >= auto7DC5C2E9_ae) ) ; lv_index += auto7DC5C2E9_ai ) {
        libNtve_gf_CreateModelAtPoint("SS_BossLaserBeam", lv_pos);
        lv_beams[lv_index] = libNtve_gf_ActorLastCreated();
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(1.0, 1.0, 1.0, 0.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetHeight(gv_c_PlaneHeight));
        lv_pos = PointWithOffset(lv_pos, lv_beamUnit, 0.0);
    }
    lv_damageRegion = RegionRect((PointGetX(lv_posLeftTop) - 1.5), PointGetY(lv_posRightBot), (PointGetX(lv_posRightBot) + 1.5), PointGetY(lv_posLeftTop));
    autoBF15FEA3_n = 48;
    for (autoBF15FEA3_i = 1; autoBF15FEA3_i <= autoBF15FEA3_n; autoBF15FEA3_i += 1) {
        Wait(0.125, c_timeGame);
        if ((libNtve_gf_UnitInRegion(gv_viking, lv_damageRegion) == true)) {
            UnitKill(gv_viking);
        }
        else {
        }
    }
    UnitIssueOrder(gv_mothership, Order(AbilityCommand("BossLaser", 1)), c_orderQueueReplace);
    gv_bossStopped = false;
    TriggerExecute(gt_BossMovement, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MothershipPlanetCracker_Init () {
    gt_MothershipPlanetCracker = TriggerCreate("gt_MothershipPlanetCracker_Func");
    TriggerEnable(gt_MothershipPlanetCracker, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mothership Dies
//--------------------------------------------------------------------------------------------------
bool gt_MothershipDies_Func (bool testConds, bool runActions) {
    int auto16A612AD_n;
    int auto16A612AD_i;

    // Variable Declarations
    actor lv_explosion;
    point lv_center;
    region lv_region;
    fixed lv_height;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_mothership))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_height = UnitGetPropertyFixed(EventUnit(), c_unitPropHeight, c_unitPropCurrent);
    lv_center = UnitGetPosition(EventUnit());
    lv_region = RegionCircle(lv_center, 3.0);
    libNtve_gf_CreateModelAtPoint("ProtossLargeUnitDeath", lv_center);
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetHeight(lv_height));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(2.0, 2.0, 2.0, 0.0));
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    auto16A612AD_n = 10;
    for (auto16A612AD_i = 1; auto16A612AD_i <= auto16A612AD_n; auto16A612AD_i += 1) {
        libNtve_gf_CreateModelAtPoint("ProtossLargeUnitDeath", RegionRandomPoint(lv_region));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetHeight(lv_height));
        libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MothershipDies_Init () {
    gt_MothershipDies = TriggerCreate("gt_MothershipDies_Func");
    TriggerAddEventUnitDied(gt_MothershipDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Powerup
//--------------------------------------------------------------------------------------------------
bool gt_SpawnPowerup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_powerup;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_powerupReady != null))) {
            return false;
        }

        if (!((UnitIsValid(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), 0)) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p2_ENEMY))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_powerup = gv_powerupReady;
    gv_powerupReady = null;
    gf_CreatePowerup(UnitGetPosition(EventUnit()), lv_powerup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnPowerup_Init () {
    gt_SpawnPowerup = TriggerCreate("gt_SpawnPowerup_Func");
    TriggerAddEventUnitDied(gt_SpawnPowerup, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Power-up Pick Up
//--------------------------------------------------------------------------------------------------
bool gt_PowerupPickUp_Func (bool testConds, bool runActions) {
    unitgroup auto77B05B4A_g;
    int auto77B05B4A_u;
    int auto03FC87D1_ae;
    int auto03FC87D1_ai;
    string autoB7505698_val;

    // Variable Declarations
    int lv_index;
    unit lv_indexUnit;
    string lv_unitType;
    unit lv_powerup;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_viking) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto77B05B4A_g = UnitGroup(null, gv_p0_NEUTRAL, RegionCircle(UnitGetPosition(gv_viking), 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto77B05B4A_u = 1;
    for ( ; auto77B05B4A_u <= UnitGroupCount(auto77B05B4A_g, c_unitCountAll) ; auto77B05B4A_u += BoolToInt(lv_indexUnit == UnitGroupUnit(auto77B05B4A_g, auto77B05B4A_u)) ) {
        lv_indexUnit = UnitGroupUnit(auto77B05B4A_g, auto77B05B4A_u);
        lv_unitType = UnitGetType(lv_indexUnit);
        auto03FC87D1_ae = gv_powerupTypeCount;
        auto03FC87D1_ai = 1;
        lv_index = 1;
        for ( ; ( (auto03FC87D1_ai >= 0 && lv_index <= auto03FC87D1_ae) || (auto03FC87D1_ai <= 0 && lv_index >= auto03FC87D1_ae) ) ; lv_index += auto03FC87D1_ai ) {
            if ((gv_powerupTypeUnitTypes[lv_index] == lv_unitType)) {
                if ((gv_powerupScoreEnabled == true)) {
                    gv_powerupTypePickedUp[lv_index] += 1;
                    gv_powerupTypePickedUpCurrent[lv_index] += 1;
                }
                else {
                }
                autoB7505698_val = lv_unitType;
                if (autoB7505698_val == "SS_PowerupBomb") {
                    gv_bombCount += 1;
                    gv_powerupTypePickedUpCurrent[lv_index] = 0;
                    if ((gv_powerupScoreEnabled == true)) {
                        gf_CreatePowerupTextTag((StringExternal("Param/Value/8A0AD8C4") + IntToText(gf_ModifyScoreWithBonusMultiplier(gf_ScoreofUnitType(lv_unitType))) + StringExternal("Param/Value/85F0F7CB")), Color(50.98, 91.76, 91.76));
                    }
                    else {
                        gf_CreatePowerupTextTag((StringExternal("Param/Value/995E88CF")), Color(50.98, 91.76, 91.76));
                    }
                }
                else if (autoB7505698_val == "SS_PowerupSideMissiles") {
                    if ((UnitHasBehavior(gv_viking, "SS_PowerUpStrong") == true)) {
                        UnitBehaviorRemove(gv_viking, "SS_PowerUpStrong", 2);
                    }
                    else {
                    }
                    if ((UnitHasBehavior(gv_viking, "SS_PowerUpDiagonal1") == true)) {
                        UnitBehaviorAddPlayer(gv_viking, "SS_PowerUpDiagonal2", gv_p1_USER, 1);
                    }
                    else {
                        UnitBehaviorAddPlayer(gv_viking, "SS_PowerUpDiagonal1", gv_p1_USER, 1);
                    }
                    if ((gv_powerupScoreEnabled == true)) {
                        gf_CreatePowerupTextTag((StringExternal("Param/Value/42A56067") + IntToText(gf_ModifyScoreWithBonusMultiplier(gf_ScoreofUnitType(lv_unitType))) + StringExternal("Param/Value/183CCB40")), Color(92.16, 78.82, 51.37));
                    }
                    else {
                        gf_CreatePowerupTextTag((StringExternal("Param/Value/C7CD6DED")), Color(92.16, 78.82, 51.37));
                    }
                    if ((gv_powerupTypePickedUpCurrent[lv_index] > 2)) {
                        gv_powerupTypePickedUpCurrent[lv_index] = 2;
                    }
                    else {
                    }
                    gv_powerupTypePickedUpCurrent[(2)] = 0;
                }
                else if (autoB7505698_val == "SS_PowerupHealth") {
                    if ((UnitHasBehavior(gv_viking, "SS_PowerUpHealth1") == true)) {
                        UnitBehaviorAddPlayer(gv_viking, "SS_PowerUpHealth2", gv_p1_USER, 1);
                    }
                    else {
                        UnitBehaviorAddPlayer(gv_viking, "SS_PowerUpHealth1", gv_p1_USER, 1);
                    }
                    if ((gv_powerupScoreEnabled == true)) {
                        gf_CreatePowerupTextTag((StringExternal("Param/Value/59173292") + IntToText(gf_ModifyScoreWithBonusMultiplier(gf_ScoreofUnitType(lv_unitType))) + StringExternal("Param/Value/BE051841")), Color(89.41, 43.92, 45.10));
                    }
                    else {
                        gf_CreatePowerupTextTag((StringExternal("Param/Value/1C5871AE")), Color(89.41, 43.92, 45.10));
                    }
                    gv_powerupTypePickedUpCurrent[lv_index] = 0;
                }
                else if (autoB7505698_val == "SS_PowerupStrongerMissiles") {
                    if ((UnitHasBehavior(gv_viking, "SS_PowerUpDiagonal1") == true)) {
                        UnitBehaviorRemove(gv_viking, "SS_PowerUpDiagonal1", 2);
                        UnitBehaviorRemove(gv_viking, "SS_PowerUpDiagonal2", 2);
                    }
                    else {
                    }
                    UnitBehaviorAddPlayer(gv_viking, "SS_PowerUpStrong", gv_p1_USER, 1);
                    if ((gv_powerupScoreEnabled == true)) {
                        gf_CreatePowerupTextTag((StringExternal("Param/Value/18281567") + IntToText(gf_ModifyScoreWithBonusMultiplier(gf_ScoreofUnitType(lv_unitType))) + StringExternal("Param/Value/39DA31CD")), Color(74.51, 45.10, 87.45));
                    }
                    else {
                        gf_CreatePowerupTextTag((StringExternal("Param/Value/E007C599")), Color(74.51, 45.10, 87.45));
                    }
                    if ((gv_powerupTypePickedUpCurrent[lv_index] > 2)) {
                        gv_powerupTypePickedUpCurrent[lv_index] = 2;
                    }
                    else {
                    }
                    gv_powerupTypePickedUpCurrent[(1)] = 0;
                }
                else {
                }
                if ((gv_powerupScoreEnabled == true)) {
                    gf_AddScore(gf_ScoreofUnitType(lv_unitType));
                }
                else {
                }
                gf_UpdateUI();
                UnitKill(lv_indexUnit);
            }
            else {
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PowerupPickUp_Init () {
    gt_PowerupPickUp = TriggerCreate("gt_PowerupPickUp_Func");
    TriggerAddEventTimer(gt_PowerupPickUp, gv_powerupPickupTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fighter Attack Key Down
//--------------------------------------------------------------------------------------------------
bool gt_FighterAttackKeyDown_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_fighterAttackKeyDown = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FighterAttackKeyDown_Init () {
    gt_FighterAttackKeyDown = TriggerCreate("gt_FighterAttackKeyDown_Func");
    TriggerAddEventKeyPressed(gt_FighterAttackKeyDown, c_playerAny, c_keySpace, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateExclude);
    TriggerAddEventKeyPressed(gt_FighterAttackKeyDown, c_playerAny, c_keyNumPad0, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateExclude);
    TriggerAddEventKeyPressed(gt_FighterAttackKeyDown, c_playerAny, c_keyV, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fighter Attack Key Up
//--------------------------------------------------------------------------------------------------
bool gt_FighterAttackKeyUp_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_FighterAttack();
    gv_fighterAttackKeyDown = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FighterAttackKeyUp_Init () {
    gt_FighterAttackKeyUp = TriggerCreate("gt_FighterAttackKeyUp_Func");
    TriggerAddEventKeyPressed(gt_FighterAttackKeyUp, c_playerAny, c_keySpace, false, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateExclude);
    TriggerAddEventKeyPressed(gt_FighterAttackKeyUp, c_playerAny, c_keyNumPad0, false, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateExclude);
    TriggerAddEventKeyPressed(gt_FighterAttackKeyUp, c_playerAny, c_keyV, false, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fighter Attack 
//--------------------------------------------------------------------------------------------------
bool gt_FighterAttack_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_FighterAttack();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FighterAttack_Init () {
    gt_FighterAttack = TriggerCreate("gt_FighterAttack_Func");
    TriggerAddEventTimePeriodic(gt_FighterAttack, 0.375, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fighter Bomb Key Down
//--------------------------------------------------------------------------------------------------
bool gt_FighterBombKeyDown_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_viking) == true))) {
            return false;
        }

        if (!((gv_fighterAttackEnabled == true))) {
            return false;
        }

        if (!((gv_bombCount > 0))) {
            return false;
        }

        if (!((gv_gameResult == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_bombCount -= 1;
    UnitIssueOrder(gv_viking, Order(AbilityCommand("SS_FighterBomb", 0)), c_orderQueueReplace);
    gf_UpdateUI();
    libNtve_gf_SetAllSoundChannelVolumes(1, PlayerGroupAll(), 0.5);
    GameSetLighting("ArcadeSkyboxSpaceLightSpecial", 0.5);
    Wait(0.5, c_timeGame);
    libNtve_gf_SetAllSoundChannelVolumes(2, PlayerGroupAll(), 1.0);
    Wait(0.5, c_timeGame);
    GameSetLighting(gv_levelLight, 1.0);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FighterBombKeyDown_Init () {
    gt_FighterBombKeyDown = TriggerCreate("gt_FighterBombKeyDown_Func");
    TriggerAddEventKeyPressed(gt_FighterBombKeyDown, c_playerAny, c_keyControl, true, c_keyModifierStateExclude, c_keyModifierStateIgnore, c_keyModifierStateExclude);
    TriggerAddEventKeyPressed(gt_FighterBombKeyDown, c_playerAny, c_keyB, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fighter Move Left Key Down
//--------------------------------------------------------------------------------------------------
bool gt_FighterMoveLeftKeyDown_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_fighterMoveLeftKeyDown = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FighterMoveLeftKeyDown_Init () {
    gt_FighterMoveLeftKeyDown = TriggerCreate("gt_FighterMoveLeftKeyDown_Func");
    TriggerAddEventKeyPressed(gt_FighterMoveLeftKeyDown, c_playerAny, c_keyLeft, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(gt_FighterMoveLeftKeyDown, c_playerAny, c_keyA, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fighter Move Left Key Up
//--------------------------------------------------------------------------------------------------
bool gt_FighterMoveLeftKeyUp_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_fighterMoveLeftKeyDown = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FighterMoveLeftKeyUp_Init () {
    gt_FighterMoveLeftKeyUp = TriggerCreate("gt_FighterMoveLeftKeyUp_Func");
    TriggerAddEventKeyPressed(gt_FighterMoveLeftKeyUp, c_playerAny, c_keyLeft, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(gt_FighterMoveLeftKeyUp, c_playerAny, c_keyA, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fighter Move Right Key Down
//--------------------------------------------------------------------------------------------------
bool gt_FighterMoveRightKeyDown_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_fighterMoveRightKeyDown = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FighterMoveRightKeyDown_Init () {
    gt_FighterMoveRightKeyDown = TriggerCreate("gt_FighterMoveRightKeyDown_Func");
    TriggerAddEventKeyPressed(gt_FighterMoveRightKeyDown, c_playerAny, c_keyRight, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(gt_FighterMoveRightKeyDown, c_playerAny, c_keyD, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fighter Move Right Key Up
//--------------------------------------------------------------------------------------------------
bool gt_FighterMoveRightKeyUp_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_fighterMoveRightKeyDown = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FighterMoveRightKeyUp_Init () {
    gt_FighterMoveRightKeyUp = TriggerCreate("gt_FighterMoveRightKeyUp_Func");
    TriggerAddEventKeyPressed(gt_FighterMoveRightKeyUp, c_playerAny, c_keyRight, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(gt_FighterMoveRightKeyUp, c_playerAny, c_keyD, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fighter Move Up Key Down
//--------------------------------------------------------------------------------------------------
bool gt_FighterMoveUpKeyDown_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_fighterMoveUpKeyDown = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FighterMoveUpKeyDown_Init () {
    gt_FighterMoveUpKeyDown = TriggerCreate("gt_FighterMoveUpKeyDown_Func");
    TriggerAddEventKeyPressed(gt_FighterMoveUpKeyDown, c_playerAny, c_keyUp, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(gt_FighterMoveUpKeyDown, c_playerAny, c_keyW, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fighter Move Up Key Up
//--------------------------------------------------------------------------------------------------
bool gt_FighterMoveUpKeyUp_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_fighterMoveUpKeyDown = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FighterMoveUpKeyUp_Init () {
    gt_FighterMoveUpKeyUp = TriggerCreate("gt_FighterMoveUpKeyUp_Func");
    TriggerAddEventKeyPressed(gt_FighterMoveUpKeyUp, c_playerAny, c_keyUp, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(gt_FighterMoveUpKeyUp, c_playerAny, c_keyW, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fighter Move Down Key Down
//--------------------------------------------------------------------------------------------------
bool gt_FighterMoveDownKeyDown_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_fighterMoveDownKeyDown = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FighterMoveDownKeyDown_Init () {
    gt_FighterMoveDownKeyDown = TriggerCreate("gt_FighterMoveDownKeyDown_Func");
    TriggerAddEventKeyPressed(gt_FighterMoveDownKeyDown, c_playerAny, c_keyDown, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(gt_FighterMoveDownKeyDown, c_playerAny, c_keyS, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fighter Move Down Key Up
//--------------------------------------------------------------------------------------------------
bool gt_FighterMoveDownKeyUp_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_fighterMoveDownKeyDown = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FighterMoveDownKeyUp_Init () {
    gt_FighterMoveDownKeyUp = TriggerCreate("gt_FighterMoveDownKeyUp_Func");
    TriggerAddEventKeyPressed(gt_FighterMoveDownKeyUp, c_playerAny, c_keyDown, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(gt_FighterMoveDownKeyUp, c_playerAny, c_keyS, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fighter Move
//--------------------------------------------------------------------------------------------------
bool gt_FighterMove_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_FighterMove();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FighterMove_Init () {
    gt_FighterMove = TriggerCreate("gt_FighterMove_Func");
    TriggerAddEventTimePeriodic(gt_FighterMove, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Viking
//--------------------------------------------------------------------------------------------------
bool gt_SpawnViking_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_bounds;
    point lv_spawnLoc;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("LostViking_LevelStart", 0), PlayerGroupAll(), 100.0, 0.0);
    if ((UnitIsAlive(gv_viking) == false)) {
        gf_CreateViking();
    }
    else {
    }
    UnitBehaviorAddPlayer(gv_viking, "SS_Invulnerable", gv_p1_USER, 1);
    UnitBehaviorAddPlayer(gv_viking, "SS_VikingRespawn", gv_p1_USER, 1);
    lv_bounds = gf_GetCameraBoundary();
    lv_spawnLoc = PointWithOffset(RegionGetCenter(lv_bounds), 0.0, -5.0);
    UnitSetPosition(gv_viking, lv_spawnLoc, false);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_viking), c_animNameDefault, "Birth", c_animFlagNonLooping, 0.25);
    Wait(0.25, c_timeGame);
    libNtve_gf_ShowHideUnit(gv_viking, true);
    gf_FighterEnableDisableControl(true);
    Wait(4.0, c_timeGame);
    UnitBehaviorRemovePlayer(gv_viking, "SS_Invulnerable", gv_p1_USER, 1);
    libNtve_gf_MakeUnitInvulnerable(gv_viking, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnViking_Init () {
    gt_SpawnViking = TriggerCreate("gt_SpawnViking_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Viking Dies
//--------------------------------------------------------------------------------------------------
bool gt_VikingDies_Func (bool testConds, bool runActions) {
    int auto6E76C9F8_ae;
    int auto6E76C9F8_ai;
    int autoE869AE38_n;
    int autoE869AE38_i;

    // Variable Declarations
    point lv_pos;
    int lv_index;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_viking))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_PowerupPickUp, false);
    SoundPlay(SoundLink("Terran_ExplosionMedium", 3), PlayerGroupAll(), 100.0, 0.0);
    lv_pos = UnitGetPosition(gv_viking);
    auto6E76C9F8_ae = gv_powerupTypeCount;
    auto6E76C9F8_ai = 1;
    lv_index = 1;
    for ( ; ( (auto6E76C9F8_ai >= 0 && lv_index <= auto6E76C9F8_ae) || (auto6E76C9F8_ai <= 0 && lv_index >= auto6E76C9F8_ae) ) ; lv_index += auto6E76C9F8_ai ) {
        autoE869AE38_n = gv_powerupTypePickedUpCurrent[lv_index];
        for (autoE869AE38_i = 1; autoE869AE38_i <= autoE869AE38_n; autoE869AE38_i += 1) {
            gf_CreatePowerup(lv_pos, gv_powerupTypeUnitTypes[lv_index]);
        }
        gv_powerupTypePickedUpCurrent[lv_index] = 0;
    }
    if ((gv_vikingLife > 0)) {
        gv_vikingLife -= 1;
    }
    else {
        TriggerExecute(gt_Defeat, true, true);
        return true;
    }
    gf_UpdateUI();
    Wait(3.0, c_timeGame);
    TriggerEnable(gt_PowerupPickUp, true);
    TriggerExecute(gt_SpawnViking, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VikingDies_Init () {
    gt_VikingDies = TriggerCreate("gt_VikingDies_Func");
    TriggerAddEventUnitDied(gt_VikingDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Viking Extra Lifes
//--------------------------------------------------------------------------------------------------
bool gt_VikingExtraLifes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_effect;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((gv_score - gv_scoreLastBonusLife) >= (gv_c_BonusLifeScore * gv_extraLifeMulpitier)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_scoreLastBonusLife += (gv_c_BonusLifeScore * gv_extraLifeMulpitier);
    if ((gv_extraLifeMulpitier > 5)) {
        gv_extraLifeMulpitier += 2;
    }
    else {
        gv_extraLifeMulpitier += 1;
    }
    gv_vikingLife += 1;
    gf_UpdateUI();
    SoundPlay(SoundLink("LostViking_GainLIfe", 0), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_AttachModelToUnit(gv_viking, "VikingMercenaryFighterReentry", "Ref_Origin");
    lv_effect = libNtve_gf_ActorLastCreated();
    TextTagCreate((StringExternal("Param/Value/B43D0432") + StringExternal("Param/Value/C82958EB") + IntToText(((gv_scoreLastBonusLife + (gv_c_BonusLifeScore * gv_extraLifeMulpitier)) / 1000)) + StringExternal("Param/Value/56F048BC") + StringExternal("Param/Value/474EC002")), 100, PointWithOffset(RegionGetCenter(gf_GetCameraBoundary()), 0.0, 8.0), 0.0, true, false, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 6.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 4.0);
    TextTagSetVelocity(TextTagLastCreated(), 180.0, 270.0);
    Wait(1.2, c_timeReal);
    TextTagSetVelocity(TextTagLastCreated(), 0.0, 270.0);
    Wait(2.0, c_timeReal);
    libNtve_gf_KillModel(lv_effect);
    Wait(0.5, c_timeReal);
    TextTagSetVelocity(TextTagLastCreated(), 40.0, 90.0);
    Wait(4.0, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VikingExtraLifes_Init () {
    gt_VikingExtraLifes = TriggerCreate("gt_VikingExtraLifes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Button Clicked
//--------------------------------------------------------------------------------------------------
bool gt_StartButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const fixed lv_dur = 3.0;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_controlTipStartButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_HideControlTip(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartButtonClicked_Init () {
    gt_StartButtonClicked = TriggerCreate("gt_StartButtonClicked_Func");
    TriggerEnable(gt_StartButtonClicked, false);
    TriggerAddEventDialogControl(gt_StartButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score Mob Dies
//--------------------------------------------------------------------------------------------------
bool gt_ScoreMobDies_Func (bool testConds, bool runActions) {
    int auto5EB582AA_ae;
    int auto5EB582AA_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p2_ENEMY))) {
            return false;
        }

        if (!((libNtve_gf_KillingPlayer() == gv_p1_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto5EB582AA_ae = gv_levelWavePlaneTypeCount[(gf_CurrentLevel())];
    auto5EB582AA_ai = 1;
    lv_index = 1;
    for ( ; ( (auto5EB582AA_ai >= 0 && lv_index <= auto5EB582AA_ae) || (auto5EB582AA_ai <= 0 && lv_index >= auto5EB582AA_ae) ) ; lv_index += auto5EB582AA_ai ) {
        if ((gv_levelWavePlaneType[(gf_CurrentLevel())][lv_index] == UnitGetType(EventUnit()))) {
            gv_levelWaveShotDown[(gf_CurrentLevel())][lv_index] += 1;
            gf_AddScore(gf_ScoreofUnitType(UnitGetType(EventUnit())));
            gf_UpdateUI();
            return true;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScoreMobDies_Init () {
    gt_ScoreMobDies = TriggerCreate("gt_ScoreMobDies_Func");
    TriggerAddEventUnitDied(gt_ScoreMobDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score Screen Close Button Clicked
//--------------------------------------------------------------------------------------------------
bool gt_ScoreScreenCloseButtonClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_scoreScreenCloseButton))) {
            return false;
        }

        if (!((gv_scoreScreenCloseButton != c_invalidDialogControlId))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_scoreScreenCloseButton = c_invalidDialogControlId;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScoreScreenCloseButtonClicked_Init () {
    gt_ScoreScreenCloseButtonClicked = TriggerCreate("gt_ScoreScreenCloseButtonClicked_Func");
    TriggerEnable(gt_ScoreScreenCloseButtonClicked, false);
    TriggerAddEventDialogControl(gt_ScoreScreenCloseButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score Screen Spacebar Pressed
//--------------------------------------------------------------------------------------------------
bool gt_ScoreScreenSpacebarPressed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_scoreScreenCloseButton != c_invalidDialogControlId))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_scoreScreenCloseButton = c_invalidDialogControlId;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScoreScreenSpacebarPressed_Init () {
    gt_ScoreScreenSpacebarPressed = TriggerCreate("gt_ScoreScreenSpacebarPressed_Func");
    TriggerEnable(gt_ScoreScreenSpacebarPressed, false);
    TriggerAddEventKeyPressed(gt_ScoreScreenSpacebarPressed, c_playerAny, c_keySpace, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss HP Bar
//--------------------------------------------------------------------------------------------------
bool gt_BossHPBar_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_widthOld;
    int lv_widthNew;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_boss))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_widthOld = DialogControlGetWidth(gv_bossHPBar, gv_p1_USER);
    lv_widthNew = FixedToInt((IntToFixed(gv_bossHPBarInnerWidth) * ((UnitGetPropertyFixed(gv_boss, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(gv_boss, c_unitPropShields, c_unitPropCurrent)) / (UnitGetPropertyFixed(gv_boss, c_unitPropLifeMax, c_unitPropCurrent) + UnitGetPropertyFixed(gv_boss, c_unitPropShieldsMax, c_unitPropCurrent)))));
    DialogControlSetSize(gv_bossHPBar, PlayerGroupAll(), lv_widthNew, DialogControlGetHeight(gv_bossHPBar, gv_p1_USER));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BossHPBar_Init () {
    gt_BossHPBar = TriggerCreate("gt_BossHPBar_Func");
    TriggerAddEventUnitDamaged(gt_BossHPBar, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss Dies
//--------------------------------------------------------------------------------------------------
bool gt_BossDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_boss))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogDestroy(gv_bossHPBarLabelDlg);
    DialogDestroy(gv_bossHPBarDlg);
    gv_bossHPBarDlg = c_invalidDialogId;
    libNtve_gf_MakeUnitInvulnerable(gv_viking, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BossDies_Init () {
    gt_BossDies = TriggerCreate("gt_BossDies_Func");
    TriggerAddEventUnitDied(gt_BossDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit HP Bar
//--------------------------------------------------------------------------------------------------
bool gt_UnitHPBar_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_widthOld;
    int lv_widthNew;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "SS_SwarmGuardian") || (UnitGetType(EventUnit()) == "SS_Battlecruiser")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_unitHPBarUnit = EventUnit();
    if ((gv_unitHPBarDlg == c_invalidDialogId)) {
        gf_DisplayUnitHPBar(gf_GetMobUnitName(UnitGetType(gv_unitHPBarUnit)));
    }
    else {
    }
    lv_widthOld = DialogControlGetWidth(gv_unitHPBarDialogBar, gv_p1_USER);
    lv_widthNew = FixedToInt((IntToFixed(gv_unitHPBarInnerWidth) * ((UnitGetPropertyFixed(gv_unitHPBarUnit, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(gv_unitHPBarUnit, c_unitPropShields, c_unitPropCurrent)) / (UnitGetPropertyFixed(gv_unitHPBarUnit, c_unitPropLifeMax, c_unitPropCurrent) + UnitGetPropertyFixed(gv_unitHPBarUnit, c_unitPropShieldsMax, c_unitPropCurrent)))));
    DialogControlSetSize(gv_unitHPBarDialogBar, PlayerGroupAll(), lv_widthNew, DialogControlGetHeight(gv_unitHPBarDialogBar, gv_p1_USER));
    TimerStart(gv_unitHPBarFadeTimer, 5.0, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitHPBar_Init () {
    gt_UnitHPBar = TriggerCreate("gt_UnitHPBar_Func");
    TriggerAddEventUnitDamaged(gt_UnitHPBar, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HP Bar UnitDies
//--------------------------------------------------------------------------------------------------
bool gt_HPBarUnitDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_unitHPBarUnit))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogDestroy(gv_unitHPBarLabelDlg);
    DialogDestroy(gv_unitHPBarDlg);
    gv_unitHPBarDlg = c_invalidDialogId;
    TimerPause(gv_unitHPBarFadeTimer, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HPBarUnitDies_Init () {
    gt_HPBarUnitDies = TriggerCreate("gt_HPBarUnitDies_Func");
    TriggerAddEventUnitDied(gt_HPBarUnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fade Unit HP Bar
//--------------------------------------------------------------------------------------------------
bool gt_FadeUnitHPBar_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    DialogDestroy(gv_unitHPBarLabelDlg);
    DialogDestroy(gv_unitHPBarDlg);
    gv_unitHPBarDlg = c_invalidDialogId;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FadeUnitHPBar_Init () {
    gt_FadeUnitHPBar = TriggerCreate("gt_FadeUnitHPBar_Func");
    TriggerAddEventTimer(gt_FadeUnitHPBar, gv_unitHPBarFadeTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RecordBrokeThread
//--------------------------------------------------------------------------------------------------
bool gt_RecordBrokeThread_Func (bool testConds, bool runActions) {
    int auto5F4F2340_n;
    int auto5F4F2340_i;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_recordBroke == false)) {
        return true;
    }
    else {
    }
    while (true) {
        auto5F4F2340_n = 5;
        for (auto5F4F2340_i = 1; auto5F4F2340_i <= auto5F4F2340_n; auto5F4F2340_i += 1) {
            libNtve_gf_SetDialogItemText(gv_uI_HighScoreTitle, StringExternal("Param/Value/BC023697"), PlayerGroupAll());
            Wait(0.5, c_timeGame);
            libNtve_gf_SetDialogItemText(gv_uI_HighScoreTitle, StringExternal("Param/Value/210E3168"), PlayerGroupAll());
            Wait(0.5, c_timeGame);
        }
        Wait(5.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RecordBrokeThread_Init () {
    gt_RecordBrokeThread = TriggerCreate("gt_RecordBrokeThread_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    int auto09E27C03_val;

    // Variable Declarations
    unit lv_indexUnit;
    int lv_index;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameResult == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_levelCleared = true;
    gv_gameResult = 4;
    auto09E27C03_val = gf_CurrentLevel();
    if (auto09E27C03_val == 1) {
        TriggerStop(gt_Level1SpawnWaves);
    }
    else if (auto09E27C03_val == 2) {
        TriggerStop(gt_Level2SpawnWaves);
    }
    else if (auto09E27C03_val == 3) {
        TriggerStop(gt_Level3SpawnWaves);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
    TriggerAddEventCheatUsed(gt_Victory, c_playerAny, c_gameCheatVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameResult = 2;
    Wait(4.0, c_timeGame);
    UIClearCustomMenuItemList(PlayerGroupAll());
    UISetCustomMenuItemText(PlayerGroupAll(), c_gameMenuDialogGenericButton1, StringExternal("Param/Value/04238907"));
    UISetCustomMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogGenericButton1, true);
    UISetCustomMenuItemText(PlayerGroupAll(), c_gameMenuDialogGenericButton2, StringExternal("Param/Value/9D577A69"));
    UISetCustomMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogGenericButton2, true);
    UIShowCustomMenu(PlayerGroupAll(), StringExternal("Param/Value/66BCC477"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
    TriggerAddEventCheatUsed(gt_Defeat, c_playerAny, c_gameCheatDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Play Again Clicked
//--------------------------------------------------------------------------------------------------
bool gt_PlayAgainClicked_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SaveArcadeGameData();
    RestartGame(PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayAgainClicked_Init () {
    gt_PlayAgainClicked = TriggerCreate("gt_PlayAgainClicked_Func");
    TriggerAddEventGameMenuItemSelected(gt_PlayAgainClicked, c_playerAny, c_gameMenuDialogGenericButton1);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Quit Clicked
//--------------------------------------------------------------------------------------------------
bool gt_QuitClicked_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_PrepareForStoryMode(c_gameOverVictory, PlayerDifficulty(1));
    libCamp_gf_CreateStoryModeTransitionSave(libCamp_gf_MissionName(32), null);
    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QuitClicked_Init () {
    gt_QuitClicked = TriggerCreate("gt_QuitClicked_Func");
    TriggerAddEventGameMenuItemSelected(gt_QuitClicked, c_playerAny, c_gameMenuDialogGenericButton2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Return To Game Clicked
//--------------------------------------------------------------------------------------------------
bool gt_ReturnToGameClicked_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UISetCursorAutoHide(PlayerGroupAll(), true, 5.0);
    TriggerEnable(gt_EscapeKeyMenu, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReturnToGameClicked_Init () {
    gt_ReturnToGameClicked = TriggerCreate("gt_ReturnToGameClicked_Func");
    TriggerAddEventGameMenuItemSelected(gt_ReturnToGameClicked, c_playerAny, c_gameMenuDialogReturnToGameplayButton);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Quit Query Yet Clicked
//--------------------------------------------------------------------------------------------------
bool gt_QuitQueryYetClicked_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_HideScreenButton(false, gv_c_ScreenButton_Quit);
    TriggerExecute(gt_QuitClicked, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QuitQueryYetClicked_Init () {
    gt_QuitQueryYetClicked = TriggerCreate("gt_QuitQueryYetClicked_Func");
    TriggerAddEventCustomDialogDismissed(gt_QuitQueryYetClicked, c_playerAny, 1);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Quit Query No Clicked
//--------------------------------------------------------------------------------------------------
bool gt_QuitQueryNoClicked_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UISetCursorVisible(PlayerGroupAll(), false);
    UISetCursorAutoHide(PlayerGroupAll(), true, 5.0);
    TriggerEnable(gt_EscapeKeyMenu, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QuitQueryNoClicked_Init () {
    gt_QuitQueryNoClicked = TriggerCreate("gt_QuitQueryNoClicked_Func");
    TriggerAddEventCustomDialogDismissed(gt_QuitQueryNoClicked, c_playerAny, 2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Quit Button Clicked
//--------------------------------------------------------------------------------------------------
bool gt_QuitButtonClicked_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_fighterAttackKeyDown = false;
    gv_fighterMoveDownKeyDown = false;
    gv_fighterMoveLeftKeyDown = false;
    gv_fighterMoveRightKeyDown = false;
    gv_fighterMoveUpKeyDown = false;
    UISetCursorAutoHide(PlayerGroupAll(), false, 5.0);
    UISetCursorVisible(PlayerGroupAll(), true);
    UIShowCustomDialog(PlayerGroupAll(), 1, StringExternal("Param/Value/2D8B36F5"), StringExternal("Param/Value/B690D296"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QuitButtonClicked_Init () {
    gt_QuitButtonClicked = TriggerCreate("gt_QuitButtonClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape Key Menu
//--------------------------------------------------------------------------------------------------
bool gt_EscapeKeyMenu_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_gameResult != 0)) {
        return true;
    }
    else {
    }
    gv_fighterAttackKeyDown = false;
    gv_fighterMoveDownKeyDown = false;
    gv_fighterMoveLeftKeyDown = false;
    gv_fighterMoveRightKeyDown = false;
    gv_fighterMoveUpKeyDown = false;
    UIClearCustomMenuItemList(PlayerGroupAll());
    UISetCustomMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogOptionsButton, true);
    UISetCustomMenuItemText(PlayerGroupAll(), c_gameMenuDialogGenericButton1, StringExternal("Param/Value/69974529"));
    UISetCustomMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogGenericButton1, true);
    UISetCustomMenuItemText(PlayerGroupAll(), c_gameMenuDialogGenericButton2, StringExternal("Param/Value/82C49B70"));
    UISetCustomMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogGenericButton2, true);
    UISetCustomMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogReturnToGameplayButton, true);
    UIShowCustomMenu(PlayerGroupAll(), StringExternal("Param/Value/14A8C48E"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeKeyMenu_Init () {
    gt_EscapeKeyMenu = TriggerCreate("gt_EscapeKeyMenu_Func");
    TriggerEnable(gt_EscapeKeyMenu, false);
    TriggerAddEventKeyPressed(gt_EscapeKeyMenu, c_playerAny, c_keyEscape, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UISetWorldVisible(PlayerGroupAll(), false);
    UISetCursorVisible(PlayerGroupAll(), false);
    DialogCreate(1, 1, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    gv_introFlashingShadow = DialogControlLastCreated();
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0,0,0), PlayerGroupAll());
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, -100);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 800, 1200);
    libNtve_gf_SetDialogItemTextWriteout(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemTextWriteoutDuration(DialogControlLastCreated(), 9.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/EC38987D"), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArcadeIntroText", PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    gv_introFlashingLabel = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 800, 100);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 50);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/765E4325") + TextCase(StringExternal("Param/Value/E8F22CDE"), true) + StringExternal("Param/Value/390804C2")), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArcadeIntroText", PlayerGroupAll());
    DialogControlSetVisible(gv_introFlashingLabel, PlayerGroupAll(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    PortraitSetVisible(PortraitLastCreated(), PlayerGroupAll(), true, false);
    TriggerExecute(gt_IntroCinematicSkippable, true, true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0,0,0), PlayerGroupAll());
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 2.0, 0.0);
    Wait(2.0, c_timeGame);
    PortraitDestroy(PortraitLastCreated());
    DialogDestroy(DialogLastCreated());
    UISetWorldVisible(PlayerGroupAll(), true);
    UISetCursorVisible(PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic Skippable
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicSkippable_Func (bool testConds, bool runActions) {
    int autoB3395213_n;
    int autoB3395213_i;
    int autoB000171E_n;
    int autoB000171E_i;
    int auto889A51FE_n;
    int auto889A51FE_i;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    Wait(2.0, c_timeReal);
    Wait(2.0, c_timeReal);
    Wait(3.0, c_timeReal);
    Wait(3.0, c_timeReal);
    autoB3395213_n = 4;
    for (autoB3395213_i = 1; autoB3395213_i <= autoB3395213_n; autoB3395213_i += 1) {
        DialogControlSetVisible(gv_introFlashingLabel, PlayerGroupAll(), true);
        Wait(0.1, c_timeGame);
        DialogControlSetVisible(gv_introFlashingLabel, PlayerGroupAll(), false);
        Wait(0.1, c_timeGame);
    }
    autoB000171E_n = 1;
    for (autoB000171E_i = 1; autoB000171E_i <= autoB000171E_n; autoB000171E_i += 1) {
        DialogControlSetVisible(gv_introFlashingLabel, PlayerGroupAll(), true);
        Wait(0.15, c_timeGame);
        DialogControlSetVisible(gv_introFlashingLabel, PlayerGroupAll(), false);
        Wait(0.15, c_timeGame);
    }
    auto889A51FE_n = 2;
    for (auto889A51FE_i = 1; auto889A51FE_i <= auto889A51FE_n; auto889A51FE_i += 1) {
        DialogControlSetVisible(gv_introFlashingLabel, PlayerGroupAll(), true);
        Wait(0.2, c_timeGame);
        DialogControlSetVisible(gv_introFlashingLabel, PlayerGroupAll(), false);
        Wait(0.2, c_timeGame);
    }
    DialogControlSetVisible(gv_introFlashingLabel, PlayerGroupAll(), true);
    Wait(3.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicSkippable_Init () {
    gt_IntroCinematicSkippable = TriggerCreate("gt_IntroCinematicSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Skip End Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_SkipEndCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_EndCinematicNotSkippable);
    TriggerStop(gt_EndCinematicSkippable);
    TriggerStop(gt_EndCinematicCamera);
    TriggerStop(gt_EndCinematicViking);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(1), null, c_animNameDefault, "Stand", c_animFlagPlayForever, 0.0);
    UnitRemove(gv_vikingCine);
    CameraApplyInfo(1, CameraInfoFromId(343), 0.0, -1, 10, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SkipEndCinematic_Init () {
    gt_SkipEndCinematic = TriggerCreate("gt_SkipEndCinematic_Func");
    TriggerEnable(gt_SkipEndCinematic, false);
    TriggerAddEventKeyPressed(gt_SkipEndCinematic, c_playerAny, c_keyEscape, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: End Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_EndCinematic_Func (bool testConds, bool runActions) {
    unitgroup auto08DD2036_g;
    int auto08DD2036_u;

    // Variable Declarations
    unit lv_indexUnit;
    sound lv_music;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_fadeDialog == c_invalidDialogId)) {
        gf_FadeInOutWithPicture(false, 0.0, true);
    }
    else {
    }
    TriggerExecute(gt_EndCinematicMusic, true, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, 0.0);
    GameSetLighting("ArcadeCityLight", 0.0);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    TriggerEnable(gt_EscapeKeyMenu, false);
    libNtve_gf_HideScreenButton(false, gv_c_ScreenButton_Quit);
    gf_ShowHideUI(false);
    auto08DD2036_g = gv_endCinematicGroup;
    auto08DD2036_u = 1;
    for ( ; auto08DD2036_u <= UnitGroupCount(auto08DD2036_g, c_unitCountAll) ; auto08DD2036_u += BoolToInt(lv_indexUnit == UnitGroupUnit(auto08DD2036_g, auto08DD2036_u)) ) {
        lv_indexUnit = UnitGroupUnit(auto08DD2036_g, auto08DD2036_u);
        libNtve_gf_PauseUnit(lv_indexUnit, false);
        libNtve_gf_ShowHideUnit(lv_indexUnit, true);
    }
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(1), null, c_animNameDefault, "Death", c_animFlagPlayForever, 0.0);
    Wait(3.0, c_timeGame);
    TriggerExecute(gt_EndCinematicNotSkippable, true, true);
    TriggerExecute(gt_EndCinematicSkippable, true, true);
    TriggerEnable(gt_SkipEndCinematic, false);
    gf_EndCinematicText();
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, c_transitionDurationDefault);
    UISetCursorVisible(PlayerGroupAll(), true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, true);
    libNtve_gf_HideScreenButton(true, gv_c_ScreenButton_Quit);
    libNtve_gf_DisplayScreenButton(gv_c_ScreenButton_Continue, StringExternal("Param/Value/7E637B3B"), 280, 80, c_anchorBottomRight, 250, 35, gt_EndCinematicContinueButtonClicked);
    gf_FromatBackPlayButton(libNtve_gf_ScreenButton(gv_c_ScreenButton_Continue));
    libNtve_gf_SetDialogItemTooltip(libNtve_gf_ScreenButton(gv_c_ScreenButton_Continue), StringExternal("Param/Value/629EF19B"), PlayerGroupAll());
    while (true) {
        Wait(10.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndCinematic_Init () {
    gt_EndCinematic = TriggerCreate("gt_EndCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: End Cinematic Not Skippable
//--------------------------------------------------------------------------------------------------
bool gt_EndCinematicNotSkippable_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(1, CameraInfoFromId(193), 0.0, -1, 10, true);
    gf_FadeInOutWithPicture(true, 4.0, false);
    TriggerExecute(gt_EndCinematicCamera, true, false);
    TriggerExecute(gt_EndCinematicViking, true, false);
    TriggerExecute(gt_EndCinematicDance, true, false);
    Wait(4.0, c_timeGame);
    TriggerEnable(gt_SkipEndCinematic, true);
    Wait(13.0, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(1), null, c_animNameDefault, "Stand", c_animFlagPlayForever, 0.0);
    Wait(2.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndCinematicNotSkippable_Init () {
    gt_EndCinematicNotSkippable = TriggerCreate("gt_EndCinematicNotSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: End Cinematic Skippable
//--------------------------------------------------------------------------------------------------
bool gt_EndCinematicSkippable_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(3.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndCinematicSkippable_Init () {
    gt_EndCinematicSkippable = TriggerCreate("gt_EndCinematicSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: End Cinematic Camera
//--------------------------------------------------------------------------------------------------
bool gt_EndCinematicCamera_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(1, CameraInfoFromId(1), 6.0, -1, 10, true);
    Wait(5.0, c_timeGame);
    CameraApplyInfo(1, CameraInfoFromId(342), 10.0, -1, 0, true);
    Wait(9.0, c_timeGame);
    CameraApplyInfo(1, CameraInfoFromId(343), 10.0, -1, 40, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndCinematicCamera_Init () {
    gt_EndCinematicCamera = TriggerCreate("gt_EndCinematicCamera_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: End Cinematic Viking
//--------------------------------------------------------------------------------------------------
bool gt_EndCinematicViking_Func (bool testConds, bool runActions) {
    int autoD36A2922_n;
    int autoD36A2922_i;
    int auto1DDD63C5_n;
    int auto1DDD63C5_i;

    // Variable Declarations
    point lv_pos;
    fixed lv_height;
    fixed lv_angle;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "SS_Fighter", 0, 1, PointFromId(195), 90.0);
    gv_vikingCine = UnitLastCreated();
    lv_height = 4.0;
    UnitSetPropertyFixed(gv_vikingCine, c_unitPropHeight, lv_height);
    lv_pos = PointFromId(195);
    lv_angle = 90.0;
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_vikingCine), c_animNameDefault, "Walk", c_animFlagPlayForever, c_animTimeDefault);
    autoD36A2922_n = 250;
    for (autoD36A2922_i = 1; autoD36A2922_i <= autoD36A2922_n; autoD36A2922_i += 1) {
        lv_pos = PointWithOffsetPolar(lv_pos, 0.143, lv_angle);
        UnitSetPosition(gv_vikingCine, lv_pos, true);
        Wait(0.0625, c_timeGame);
    }
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_vikingCine), c_animNameDefault, "Walk Right", c_animFlagPlayForever, c_animTimeDefault);
    SoundPlay(SoundLink("LostViking_VikingMovement", 0), PlayerGroupAll(), 100.0, 0.0);
    lv_height = 2.0;
    UnitSetPropertyFixed(gv_vikingCine, c_unitPropHeight, lv_height);
    lv_pos = PointFromId(128);
    lv_angle = 90.0;
    auto1DDD63C5_n = 600;
    for (auto1DDD63C5_i = 1; auto1DDD63C5_i <= auto1DDD63C5_n; auto1DDD63C5_i += 1) {
        lv_height += 0.1;
        UnitSetPropertyFixed(gv_vikingCine, c_unitPropHeight, lv_height);
        lv_angle -= 0.83;
        lv_pos = PointWithOffsetPolar(lv_pos, 0.4, lv_angle);
        UnitSetPosition(gv_vikingCine, lv_pos, true);
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndCinematicViking_Init () {
    gt_EndCinematicViking = TriggerCreate("gt_EndCinematicViking_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: End Cinematic Dance
//--------------------------------------------------------------------------------------------------
bool gt_EndCinematicDance_Func (bool testConds, bool runActions) {
    unitgroup auto54453533_g;
    int auto54453533_u;
    unitgroup autoAD090A78_g;
    int autoAD090A78_u;

    // Variable Declarations
    unit lv_indexUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto54453533_g = gv_endCinematicGroup;
    auto54453533_u = 1;
    for ( ; auto54453533_u <= UnitGroupCount(auto54453533_g, c_unitCountAll) ; auto54453533_u += BoolToInt(lv_indexUnit == UnitGroupUnit(auto54453533_g, auto54453533_u)) ) {
        lv_indexUnit = UnitGroupUnit(auto54453533_g, auto54453533_u);
        if (((UnitGetType(lv_indexUnit) == "Marine") || (UnitGetType(lv_indexUnit) == "Marauder")) && (RandomInt(1, 2) == 1)) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_indexUnit), c_animNameDefault, "Stand Dance", c_animFlagPlayForever | c_animFlagRandomStartOffset, c_animTimeDefault);
        }
        else {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_indexUnit), c_animNameDefault, "Stand Victory", c_animFlagPlayForever, c_animTimeDefault);
        }
    }
    while (true) {
        autoAD090A78_g = gv_endCinematicGroup;
        autoAD090A78_u = 1;
        for ( ; autoAD090A78_u <= UnitGroupCount(autoAD090A78_g, c_unitCountAll) ; autoAD090A78_u += BoolToInt(lv_indexUnit == UnitGroupUnit(autoAD090A78_g, autoAD090A78_u)) ) {
            lv_indexUnit = UnitGroupUnit(autoAD090A78_g, autoAD090A78_u);
            if ((UnitGetType(lv_indexUnit) == "Marine")) {
                if ((RandomInt(1, 2) == 1)) {
                    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_indexUnit), c_animNameDefault, "Stand Dance", c_animFlagPlayForever | c_animFlagRandomStartOffset, c_animTimeDefault);
                }
                else {
                    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_indexUnit), c_animNameDefault, "Stand Victory", c_animFlagPlayForever, c_animTimeDefault);
                }
            }
            else {
            }
        }
        Wait(5.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndCinematicDance_Init () {
    gt_EndCinematicDance = TriggerCreate("gt_EndCinematicDance_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: End Cinematic Music
//--------------------------------------------------------------------------------------------------
bool gt_EndCinematicMusic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "LostViking_MusicVictory", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndCinematicMusic_Init () {
    gt_EndCinematicMusic = TriggerCreate("gt_EndCinematicMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: End Cinematic Continue Button Clicked
//--------------------------------------------------------------------------------------------------
bool gt_EndCinematicContinueButtonClicked_Func (bool testConds, bool runActions) {
    unitgroup autoB93ABDBE_g;
    int autoB93ABDBE_u;

    // Variable Declarations
    unit lv_pickedUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_HideScreenButton(false, gv_c_ScreenButton_Continue);
    libNtve_gf_HideScreenButton(false, gv_c_ScreenButton_Quit);
    TriggerStop(gt_EndCinematicCamera);
    TriggerStop(gt_EndCinematicViking);
    TriggerStop(gt_EndCinematicDance);
    TriggerStop(gt_EndCinematicMusic);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    gv_endCinematicMusic = null;
    DialogDestroy(gv_endCineTextDialog);
    gv_endCineTextDialog = c_invalidDialogId;
    Wait(1.0, c_timeReal);
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, true);
    UISetCursorVisible(PlayerGroupAll(), false);
    autoB93ABDBE_g = gv_endCinematicGroup;
    autoB93ABDBE_u = 1;
    for ( ; autoB93ABDBE_u <= UnitGroupCount(autoB93ABDBE_g, c_unitCountAll) ; autoB93ABDBE_u += BoolToInt(lv_pickedUnit == UnitGroupUnit(autoB93ABDBE_g, autoB93ABDBE_u)) ) {
        lv_pickedUnit = UnitGroupUnit(autoB93ABDBE_g, autoB93ABDBE_u);
        libNtve_gf_PauseUnit(lv_pickedUnit, true);
        libNtve_gf_ShowHideUnit(lv_pickedUnit, false);
    }
    TriggerEnable(gt_EscapeKeyMenu, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    TriggerStop(gt_EndCinematic);
    FogSetEnabled(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndCinematicContinueButtonClicked_Init () {
    gt_EndCinematicContinueButtonClicked = TriggerCreate("gt_EndCinematicContinueButtonClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_InitPreload_Init();
    gt_Init_Init();
    gt_Debug_Sin_Init();
    gt_Debug_LeaveBehind_Init();
    gt_Debug_MoveBG_Init();
    gt_Debug_BOSS_Init();
    gt_Debug_LEVELCLEAR_Init();
    gt_Debug_Bonus_Init();
    gt_Debug_PowerUp_Init();
    gt_Debug_Life_Init();
    gt_Debug_Cineamtic_Init();
    gt_Debug_SS_Init();
    gt_Debug_AddScore_Init();
    gt_Debug_HIDEQUIT_Init();
    gt_Debug_ADDLIFE_Init();
    gt_Level1SpawnWaves_Init();
    gt_SpawnLevel1BossCarrier_Init();
    gt_Level1BossCarrierDies_Init();
    gt_Level1BossCarrierBehavior_Init();
    gt_Level1BossInterceptorSpawned_Init();
    gt_Level1BossInterceptorDied_Init();
    gt_Level1BossRoundTimer_Init();
    gt_Level2SpawnWaves_Init();
    gt_SpawnLevel2BossLeviathan_Init();
    gt_Level2BossLeviathanDies_Init();
    gt_Level2BossLeviathanBehavior_Init();
    gt_Level2BossLeviathanTentacle_Init();
    gt_Level2BossLeviathanCharge_Init();
    gt_Level3SpawnWaves_Init();
    gt_SpawnLevel3BossTerraTron_Init();
    gt_Level3BossTerraTronBehavior_Init();
    gt_Level3BossTerraTronDies_Init();
    gt_FireSpinMissiles_Init();
    gt_InitializePresetSawTargets_Init();
    gt_TerraTronSawSpawned_Init();
    gt_TerraTronSawBehavior_Init();
    gt_BackgroundManager_Init();
    gt_SendWave_Init();
    gt_SendWaveLeaveBehind_Init();
    gt_SendWaveStraightLine_Init();
    gt_SendWaveCorrectionMark_Init();
    gt_SendWaveDownBack_Init();
    gt_SendWaveMoveDrop_Init();
    gt_SendWaveCircle_Init();
    gt_SendWaveSine_Init();
    gt_BossMovement_Init();
    gt_SpawnMothership_Init();
    gt_MothershipPlanetCracker_Init();
    gt_MothershipDies_Init();
    gt_SpawnPowerup_Init();
    gt_PowerupPickUp_Init();
    gt_FighterAttackKeyDown_Init();
    gt_FighterAttackKeyUp_Init();
    gt_FighterAttack_Init();
    gt_FighterBombKeyDown_Init();
    gt_FighterMoveLeftKeyDown_Init();
    gt_FighterMoveLeftKeyUp_Init();
    gt_FighterMoveRightKeyDown_Init();
    gt_FighterMoveRightKeyUp_Init();
    gt_FighterMoveUpKeyDown_Init();
    gt_FighterMoveUpKeyUp_Init();
    gt_FighterMoveDownKeyDown_Init();
    gt_FighterMoveDownKeyUp_Init();
    gt_FighterMove_Init();
    gt_SpawnViking_Init();
    gt_VikingDies_Init();
    gt_VikingExtraLifes_Init();
    gt_StartButtonClicked_Init();
    gt_ScoreMobDies_Init();
    gt_ScoreScreenCloseButtonClicked_Init();
    gt_ScoreScreenSpacebarPressed_Init();
    gt_BossHPBar_Init();
    gt_BossDies_Init();
    gt_UnitHPBar_Init();
    gt_HPBarUnitDies_Init();
    gt_FadeUnitHPBar_Init();
    gt_RecordBrokeThread_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_PlayAgainClicked_Init();
    gt_QuitClicked_Init();
    gt_ReturnToGameClicked_Init();
    gt_QuitQueryYetClicked_Init();
    gt_QuitQueryNoClicked_Init();
    gt_QuitButtonClicked_Init();
    gt_EscapeKeyMenu_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicSkippable_Init();
    gt_SkipEndCinematic_Init();
    gt_EndCinematic_Init();
    gt_EndCinematicNotSkippable_Init();
    gt_EndCinematicSkippable_Init();
    gt_EndCinematicCamera_Init();
    gt_EndCinematicViking_Init();
    gt_EndCinematicDance_Init();
    gt_EndCinematicMusic_Init();
    gt_EndCinematicContinueButtonClicked_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
