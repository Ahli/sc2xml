//==================================================================================================
// 
// Generated Map Script
// 
// Name:   The Dig
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/CampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libCamp_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_p1_USER = 1;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_inCinematic;
int gv_p2_NE_PROTOSSMiddle;
int gv_p3_WARPEDINPROTOSS;
int gv_p4_SE_PROTOSSRight;
int gv_p5_NW_PROTOSSLeft;
int gv_p6_PROTOSSAir;
int gv_p7_ABANDONED_BASE;
int gv_p8_ANCIENT_TEMPLE;
unit gv_tHEONEDRILL;
unit gv_tHEONEDOOR;
unit gv_superWarpGateP6;
unitgroup gv_sCVs;
playergroup gv_protossPlayerGroup;
int gv_unstableTransmission;
bool gv_interruptTransmission;
int gv_laserDrillPing;
unit gv_siegeTankDropship;
actor gv_siegeTankPingActor;
bool gv_playerControlsLaserDrill;
int gv_inCombatIndicator;
int gv_templeDoorBossBar;
trigger[5] gv_lDAttackedByEnemyTriggers;
bool gv_lDAdviceToRepairTheDrill;
int gv_lDAttackedIndex;
int gv_statLaserDrillKills;
int gv_anniversaryStatLaserKillsTracking;
region gv_soundRegion;
actor gv_soundRegionActor;
bool gv_soundRegionCreated;
timer gv_laserSoundDelayTimer;
unit gv_laserDrillTargetUnit;
unit gv_lastWarpedInPhasePrism;
fixed gv_phasePrismSpawnRate;
int gv_phasePrismAggroLevel;
int[4] gv_phasePrismCurrentlyTrained;
int[4] gv_phasePrismWaveSize;
unitgroup[4] gv_phasePrismUnitGroups;
point[4][5] gv_phasePrismAttackPoints;
point[4][4] gv_phasePrismSpawnPoints;
bool gv_airWarningIssued;
int gv_dAWAttacker;
int gv_dAWArrivalTime;
int gv_dAWLingerTime;
int[11] gv_dAWUnitQuantities;
string[11] gv_dAWUnitTypes;
int gv_dAWUnitCount;
point gv_dAWWaypoint;
unitgroup gv_suicidalBullies;
int gv_shrinePing1;
int gv_shrinePing2;
int gv_shrinePing3;
unitgroup gv_carrionBirds;
unit gv_carrionBirdParameter;
int gv_statProtossRemaining;
int gv_statSiegeTankKills;
int gv_statProtossStructureKills;
int gv_primaryObjectiveExplorePreviousExpedition;
int gv_primaryObjectiveLaserDrillMustSurvive;
int gv_primaryObjectiveMeltOpenTemple;
int gv_bonusObjectiveCollectRelics;
int gv_bonusObjectiveCollectRelicsNeeded;
int gv_bonusObjectiveCollectRelicsFound;
actor[5] gv_midCinematicPings;
unitgroup gv_midCinematicProtoss;
unitgroup gv_midHiddenUnitGroup;
bool gv_midCinematicCompleted;
point[9] gv_victoryMarineFormationLeft;
point[9] gv_victoryMarineFormationRight;
unit gv_victoryTruck;
unitgroup gv_victoryHiddenUnitGroup;
bool gv_victoryCinematicCompleted;
unit gv_victoryMarine1;
unit gv_victoryMarine2;

void InitGlobals () {
    int init_i;

    gv_p2_NE_PROTOSSMiddle = 2;
    gv_p3_WARPEDINPROTOSS = 3;
    gv_p4_SE_PROTOSSRight = 4;
    gv_p5_NW_PROTOSSLeft = 5;
    gv_p6_PROTOSSAir = 6;
    gv_p7_ABANDONED_BASE = 7;
    gv_p8_ANCIENT_TEMPLE = 8;
    gv_sCVs = UnitGroupEmpty();
    gv_protossPlayerGroup = PlayerGroupEmpty();
    gv_unstableTransmission = c_invalidTransmissionId;
    gv_lDAttackedIndex = 1;
    gv_laserSoundDelayTimer = TimerCreate();
    gv_phasePrismSpawnRate = 35.0;
    gv_phasePrismAggroLevel = 1;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_phasePrismUnitGroups[init_i] = UnitGroupEmpty();
    }
    gv_suicidalBullies = UnitGroupEmpty();
    gv_shrinePing1 = c_invalidPingId;
    gv_shrinePing2 = c_invalidPingId;
    gv_shrinePing3 = c_invalidPingId;
    gv_carrionBirds = UnitGroupEmpty();
    gv_primaryObjectiveExplorePreviousExpedition = c_invalidObjectiveId;
    gv_primaryObjectiveLaserDrillMustSurvive = c_invalidObjectiveId;
    gv_primaryObjectiveMeltOpenTemple = c_invalidObjectiveId;
    gv_bonusObjectiveCollectRelics = c_invalidObjectiveId;
    gv_midCinematicProtoss = UnitGroupEmpty();
    gv_midHiddenUnitGroup = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
bool gf_PlayerIsInCombat (int lp_player);
void gf_AddDelayedAttackWaveUnitTypes (int lp_qty, string lp_type);
void gf_SetDelayedAttackWaveWaypoint (point lp_waypoint);
void gf_SendDelayedAttackWave (int lp_attacker, int lp_arrivalTime, int lp_lingerTime);
void gf_SuicideBullyUnits (int lp_quantity, string lp_unitType, int lp_player);
void gf_AIWarpInUnits (int lp_qty, abilcmd lp_trainCmd, point lp_location);
void gf_SetResearchForAllProtoss (int lp_qty, string lp_upgrade);
void gf_OrderCarrionBirdtoFlyAway (unit lp_carrionBird);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04Music;
trigger gt_Init05Environment;
trigger gt_Init06Difficulty;
trigger gt_Init07Help;
trigger gt_IntroSequence;
trigger gt_StartGameTacticalPhase;
trigger gt_MMDropoff;
trigger gt_ZealotAggroQ;
trigger gt_RaynorQ;
trigger gt_RemoveDropships;
trigger gt_SiegeTankIntroQ;
trigger gt_SiegeTanksComeIn;
trigger gt_SiegeTankDropoff;
trigger gt_SiegeTankTipQ;
trigger gt_SiegeTankCameraPan1;
trigger gt_SiegeTankTutorialQ;
trigger gt_SiegeTankCameraPan2;
trigger gt_StalkerAggro;
trigger gt_TacticalVictory;
trigger gt_StartGameDefensePhase;
trigger gt_WeneedTanksandBunkersQ15s;
trigger gt_ProtossincomingQ65s;
trigger gt_UseLaserDrillQ360s;
trigger gt_RevealRelicShrinesQ;
trigger gt_DelayedRelicReveal630s;
trigger gt_CampaignTipsQ;
trigger gt_PlayerIsInCombat;
trigger gt_PlayerIsInCombatIndicatorDiminish;
trigger gt_CreateTempleDoorBossBar;
trigger gt_Laserdrillunderattack01Q;
trigger gt_Laserdrillunderattack02Q;
trigger gt_Laserdrillunderattack03Q;
trigger gt_Laserdrillunderattack04Q;
trigger gt_DrillisrepairabletipQ;
trigger gt_Laserisattackedbyenemy;
trigger gt_LaserisattackedbyplayerQ;
trigger gt_LaserkillsaplayerunitQ;
trigger gt_Laserkillsaprotossunit;
trigger gt__10AnniversaryAchievementLaserKillsTracking;
trigger gt_LaserSoundFiringDelay;
trigger gt_LaserSoundRegionClear;
trigger gt_LaserSoundFiring;
trigger gt_LaserDrillDies;
trigger gt_TempleHPEvents;
trigger gt_TempleHPLow1Q;
trigger gt_TempleHPLow2Q;
trigger gt_TempleHPLow3Q19m;
trigger gt_TempleHPLow4Q;
trigger gt_PrismAttackPhase1Training;
trigger gt_PrismAttackPhase1aWarpedIn;
trigger gt_PrismAttackPhase2NW;
trigger gt_PrismAttackPhase2NE;
trigger gt_PrismAttackPhase2SE;
trigger gt_PrismAttackPhase2aWarnPlayer;
trigger gt_PrismAttackPhase3Arrival;
trigger gt_IncomingPrismAttack01Q;
trigger gt_IncomingPrismAttack02Q;
trigger gt_IncomingPrismAttack03Q;
trigger gt_SendDelayedAttackWaveThread;
trigger gt_StartAI;
trigger gt_AIAttackWaves;
trigger gt_AIColossusWave;
trigger gt_AIEndSuicide;
trigger gt_AIP6WarpInSuicide;
trigger gt_AIP6CargoDropSuicide;
trigger gt_PingDangerousUnits;
trigger gt_PingDangerousUnitsDeathTransfer;
trigger gt_PingDangerousUnitsBullyRemoval;
trigger gt_AIEndlessMinerals;
trigger gt_AIEndlessGas;
trigger gt_Shrine1Killed;
trigger gt_Shrine2Killed;
trigger gt_Shrine3Killed;
trigger gt_CarrionBirds;
trigger gt_CarrionBirdFlysAway;
trigger gt_SiegeTankKills;
trigger gt_DetermineRemainingProtoss;
trigger gt_AchievementLaserDrill20Kills;
trigger gt_Achievement50ProtossStructuresDestroyed;
trigger gt_VictoryDestroyDoor;
trigger gt_VictoryDestroyProtoss;
trigger gt_VictoryDestroyProtossDialogueQ;
trigger gt_Victory;
trigger gt_DefeatTacticalTroopsDestroyed;
trigger gt_DefeatLaserDrillDestroyed;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_PrimaryObjectiveExploreCreate;
trigger gt_PrimaryObjectiveExploreDiscovered;
trigger gt_PrimaryObjectiveExploreCompleted;
trigger gt_PrimaryObjectiveOpenShrineCreate;
trigger gt_PrimaryObjectiveOpenShrineDiscovered;
trigger gt_PrimaryObjectiveOpenShrineCompleted;
trigger gt_ObjectiveRelicsCreateQ;
trigger gt_ObjectiveRelicsUpdate;
trigger gt_ObjectiveRelicsComplete;
trigger gt_BriefingQ;
trigger gt_BriefingScene00;
trigger gt_BriefingScene01;
trigger gt_BriefingScene02;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_MidMovePlayerUnits;
trigger gt_MidCinematicWarpIn;
trigger gt_MidCinematicWarpInOrders;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryInitialMarineMove;
trigger gt_VictoryDropship;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
bool gf_PlayerIsInCombat (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_inCombatIndicator > 0)) {
        return true;
    }
    else {
        return false;
    }
}

void gf_AddDelayedAttackWaveUnitTypes (int lp_qty, string lp_type) {
    // Automatic Variable Declarations
    // Implementation
    gv_dAWUnitCount = (gv_dAWUnitCount + 1);
    gv_dAWUnitQuantities[gv_dAWUnitCount] = lp_qty;
    gv_dAWUnitTypes[gv_dAWUnitCount] = lp_type;
}

void gf_SetDelayedAttackWaveWaypoint (point lp_waypoint) {
    // Automatic Variable Declarations
    // Implementation
    gv_dAWWaypoint = lp_waypoint;
}

void gf_SendDelayedAttackWave (int lp_attacker, int lp_arrivalTime, int lp_lingerTime) {
    // Automatic Variable Declarations
    // Implementation
    gv_dAWAttacker = lp_attacker;
    gv_dAWArrivalTime = lp_arrivalTime;
    gv_dAWLingerTime = lp_lingerTime;
    TriggerExecute(gt_SendDelayedAttackWaveThread, true, false);
}

void gf_SuicideBullyUnits (int lp_quantity, string lp_unitType, int lp_player) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    unitgroup auto689ABB5F_g;
    int auto689ABB5F_u;

    // Variable Initialization

    // Implementation
    auto689ABB5F_g = UnitGroupFilter(lp_unitType, lp_player, gv_suicidalBullies, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), lp_quantity);
    auto689ABB5F_u = UnitGroupCount(auto689ABB5F_g, c_unitCountAll);
    for (;; auto689ABB5F_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto689ABB5F_g, auto689ABB5F_u);
        if (lv_u == null) { break; }
        AISetUnitSuicide(lv_u, true);
        UnitGroupRemove(gv_suicidalBullies, lv_u);
    }
}

void gf_AIWarpInUnits (int lp_qty, abilcmd lp_trainCmd, point lp_location) {
    // Automatic Variable Declarations
    int autoE815C2BD_n;
    int autoE815C2BD_i;

    // Implementation
    autoE815C2BD_n = lp_qty;
    for (autoE815C2BD_i = 1; autoE815C2BD_i <= autoE815C2BD_n; autoE815C2BD_i += 1) {
        UnitIssueOrder(gv_superWarpGateP6, OrderTargetingPoint(lp_trainCmd, lp_location), c_orderQueueReplace);
    }
}

void gf_SetResearchForAllProtoss (int lp_qty, string lp_upgrade) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    playergroup auto04CF1353_g;

    // Variable Initialization

    // Implementation
    if ((lp_qty > 0)) {
        auto04CF1353_g = gv_protossPlayerGroup;
        lv_p = -1;
        while (true) {
            lv_p = PlayerGroupNextPlayer(auto04CF1353_g, lv_p);
            if (lv_p < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(lv_p, lp_upgrade, lp_qty);
        }
    }

}

void gf_OrderCarrionBirdtoFlyAway (unit lp_carrionBird) {
    // Automatic Variable Declarations
    // Implementation
    gv_carrionBirdParameter = lp_carrionBird;
    TriggerExecute(gt_CarrionBirdFlysAway, true, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_LoadCampaignData(libCamp_ge_MapID_MapTTychus02);
    TriggerExecute(gt_Init01Technology, true, false);
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04Music, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulty, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    libCamp_gf_RegisterFootageRecording(gt_BriefingQ);
    libCamp_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_IntroSequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeUpgradeAddLevel(gv_p6_PROTOSSAir, "WarpGateResearch", 1);
    TechTreeUpgradeAddLevel(gv_p1_USER, "SiegeTech", 1);
    libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesSiegeTank, gv_p1_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto09E5D80C_g;
    int auto09E5D80C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_protossPlayerGroup, gv_p2_NE_PROTOSSMiddle);
    PlayerGroupAdd(gv_protossPlayerGroup, gv_p3_WARPEDINPROTOSS);
    PlayerGroupAdd(gv_protossPlayerGroup, gv_p4_SE_PROTOSSRight);
    PlayerGroupAdd(gv_protossPlayerGroup, gv_p5_NW_PROTOSSLeft);
    PlayerGroupAdd(gv_protossPlayerGroup, gv_p6_PROTOSSAir);
    libNtve_gf_SetAlliance(gv_p2_NE_PROTOSSMiddle, gv_p3_WARPEDINPROTOSS, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p2_NE_PROTOSSMiddle, gv_p4_SE_PROTOSSRight, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p2_NE_PROTOSSMiddle, gv_p5_NW_PROTOSSLeft, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p2_NE_PROTOSSMiddle, gv_p6_PROTOSSAir, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p3_WARPEDINPROTOSS, gv_p4_SE_PROTOSSRight, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p3_WARPEDINPROTOSS, gv_p5_NW_PROTOSSLeft, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p3_WARPEDINPROTOSS, gv_p6_PROTOSSAir, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p4_SE_PROTOSSRight, gv_p5_NW_PROTOSSLeft, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p4_SE_PROTOSSRight, gv_p6_PROTOSSAir, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p5_NW_PROTOSSLeft, gv_p6_PROTOSSAir, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p7_ABANDONED_BASE, gv_p1_USER, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p7_ABANDONED_BASE, gv_p6_PROTOSSAir, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p7_ABANDONED_BASE, gv_p8_ANCIENT_TEMPLE, libNtve_ge_AllianceSetting_Enemy);
    auto09E5D80C_g = gv_protossPlayerGroup;
    auto09E5D80C_var = -1;
    while (true) {
        auto09E5D80C_var = PlayerGroupNextPlayer(auto09E5D80C_g, auto09E5D80C_var);
        if (auto09E5D80C_var < 0) { break; }
        libNtve_gf_SetAlliance(gv_p8_ANCIENT_TEMPLE, auto09E5D80C_var, libNtve_ge_AllianceSetting_Neutral);
        PlayerSetColorIndex(auto09E5D80C_var, 3, true);
    }
    PlayerModifyPropertyInt(gv_p1_USER, c_playerPropMinerals, c_playerPropOperSetTo, 500);
    PlayerModifyPropertyInt(gv_p1_USER, c_playerPropVespene, c_playerPropOperSetTo, 300);
    PlayerModifyPropertyInt(gv_p2_NE_PROTOSSMiddle, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p2_NE_PROTOSSMiddle, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p3_WARPEDINPROTOSS, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p3_WARPEDINPROTOSS, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p4_SE_PROTOSSRight, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p4_SE_PROTOSSRight, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p5_NW_PROTOSSLeft, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p5_NW_PROTOSSLeft, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p6_PROTOSSAir, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p6_PROTOSSAir, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2980A265_g;
    int auto2980A265_u;
    unit auto2980A265_var;
    unitgroup autoC88233E6_g;
    int autoC88233E6_u;
    unit autoC88233E6_var;
    unitgroup autoE010A74A_g;
    int autoE010A74A_u;
    unit autoE010A74A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_tHEONEDRILL = UnitFromId(409);
    gv_tHEONEDOOR = UnitFromId(125);
    gv_lDAttackedByEnemyTriggers[1] = gt_Laserdrillunderattack01Q;
    gv_lDAttackedByEnemyTriggers[2] = gt_Laserdrillunderattack02Q;
    gv_lDAttackedByEnemyTriggers[3] = gt_Laserdrillunderattack03Q;
    gv_lDAttackedByEnemyTriggers[4] = gt_Laserdrillunderattack04Q;
    gv_phasePrismAttackPoints[1][1] = PointFromId(79);
    gv_phasePrismAttackPoints[1][2] = PointFromId(71);
    gv_phasePrismAttackPoints[1][3] = PointFromId(83);
    gv_phasePrismAttackPoints[1][4] = PointFromId(607);
    gv_phasePrismAttackPoints[2][1] = PointFromId(37);
    gv_phasePrismAttackPoints[2][2] = PointFromId(64);
    gv_phasePrismAttackPoints[2][3] = PointFromId(18);
    gv_phasePrismAttackPoints[2][4] = PointFromId(609);
    gv_phasePrismAttackPoints[3][1] = PointFromId(32);
    gv_phasePrismAttackPoints[3][2] = PointFromId(12);
    gv_phasePrismAttackPoints[3][3] = PointFromId(11);
    gv_phasePrismAttackPoints[3][4] = PointFromId(608);
    gv_phasePrismSpawnPoints[1][1] = PointFromId(778);
    gv_phasePrismSpawnPoints[1][2] = PointFromId(787);
    gv_phasePrismSpawnPoints[1][3] = PointFromId(788);
    gv_phasePrismSpawnPoints[2][1] = PointFromId(789);
    gv_phasePrismSpawnPoints[2][2] = PointFromId(790);
    gv_phasePrismSpawnPoints[2][3] = PointFromId(791);
    gv_phasePrismSpawnPoints[3][1] = PointFromId(96);
    gv_phasePrismSpawnPoints[3][2] = PointFromId(793);
    gv_phasePrismSpawnPoints[3][3] = PointFromId(792);
    gv_superWarpGateP6 = UnitFromId(197);
    libNtve_gf_ShowHideUnit(gv_superWarpGateP6, false);
    libNtve_gf_PauseUnit(gv_tHEONEDRILL, true);
    UnitSetInfoText(gv_tHEONEDRILL, StringToText(""), StringExternal("Param/Value/408B5421"), StringToText(""));
    auto2980A265_g = UnitGroup("XelNagaShrineXil", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2980A265_u = UnitGroupCount(auto2980A265_g, c_unitCountAll);
    for (;; auto2980A265_u -= 1) {
        auto2980A265_var = UnitGroupUnitFromEnd(auto2980A265_g, auto2980A265_u);
        if (auto2980A265_var == null) { break; }
        UnitSetInfoText(auto2980A265_var, StringExternal("Param/Value/863781AF"), StringExternal("Param/Value/32EDEBF4"), StringToText(""));
        UnitSetState(auto2980A265_var, c_unitStateTooltipable, true);
    }
    gv_bonusObjectiveCollectRelicsNeeded = UnitGroupCount(UnitGroup("ProtossRelic", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    autoC88233E6_g = UnitGroup("ProtossRelic", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC88233E6_u = UnitGroupCount(autoC88233E6_g, c_unitCountAll);
    for (;; autoC88233E6_u -= 1) {
        autoC88233E6_var = UnitGroupUnitFromEnd(autoC88233E6_g, autoC88233E6_u);
        if (autoC88233E6_var == null) { break; }
        UnitSetInfoText(autoC88233E6_var, StringExternal("Param/Value/E6EDC84A"), StringExternal("Param/Value/16A5637E"), StringToText(""));
        UnitSetState(autoC88233E6_var, c_unitStateTooltipable, true);
        libNtve_gf_ShowHideUnit(autoC88233E6_var, false);
    }
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_tHEONEDRILL), c_animNameDefault, "Stand Work End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    UnitSetState(UnitFromId(317), c_unitStateTargetable, false);
    libNtve_gf_MakeUnitUncommandable(UnitFromId(317), true);
    UnitCargoCreate(UnitFromId(317), "Marauder", 1);
    UnitCargoCreate(UnitFromId(317), "Marine", 4);
    UnitCargoCreate(UnitFromId(317), "Medic", 2);
    autoE010A74A_g = UnitGroup("SCV", gv_p7_ABANDONED_BASE, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE010A74A_u = UnitGroupCount(autoE010A74A_g, c_unitCountAll);
    for (;; autoE010A74A_u -= 1) {
        autoE010A74A_var = UnitGroupUnitFromEnd(autoE010A74A_g, autoE010A74A_u);
        if (autoE010A74A_var == null) { break; }
        UnitGroupAdd(gv_sCVs, autoE010A74A_var);
        libNtve_gf_ShowHideUnit(autoE010A74A_var, false);
    }
    UnitSetTeamColorIndex(UnitFromId(409), 5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init04Music_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, false);
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus02MusicIntro", c_soundtrackCueAny, c_soundtrackIndexAny);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Music_Init () {
    gt_Init04Music = TriggerCreate("gt_Init04Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    TriggerExecute(gt_CarrionBirds, true, false);
    GameSetBackground(c_backgroundFixed, null, 100.0);
    libLbty_gf_AutoRevealRegion(RegionFromId(24), RegionFromId(25), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(26), RegionFromId(27), gv_p1_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulty
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulty_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(1, 0, 0, 0) == 1)) {
        PlayerModifyPropertyInt(gv_p2_NE_PROTOSSMiddle, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p3_WARPEDINPROTOSS, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p4_SE_PROTOSSRight, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p5_NW_PROTOSSLeft, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p6_PROTOSSAir, c_playerPropHandicap, c_playerPropOperSetTo, 50);
    }

    gv_phasePrismSpawnRate = libNtve_gf_DifficultyValueFixed(40.0, 30.0, 25.0, 20.0);
    gv_phasePrismWaveSize[1] = libNtve_gf_DifficultyValueInt(1, 1, 2, 2);
    gv_phasePrismWaveSize[2] = libNtve_gf_DifficultyValueInt(1, 2, 2, 3);
    gv_phasePrismWaveSize[3] = libNtve_gf_DifficultyValueInt(2, 3, 3, 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulty_Init () {
    gt_Init06Difficulty = TriggerCreate("gt_Init06Difficulty_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_AddUnitTypeToUnitHelpPanel("Probe", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Stalker", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Sentry", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("HighTemplar", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Colossus", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Archon", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Scout", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("PhotonCannon", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("WarpPrism", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Immortal", false, gv_p1_USER);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("VoidRay", false, gv_p1_USER);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Phoenix", false, gv_p1_USER);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Carrier", false, gv_p1_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Sequence
//--------------------------------------------------------------------------------------------------
bool gt_IntroSequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitIssueOrder(UnitFromId(317), OrderTargetingPoint(AbilityCommand("SpecOpsDropshipTransport", 2), PointFromId(463)), c_orderQueueReplace);
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/B8B156BC"), null, PointFromId(10));
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_p1_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PlayerStartLocation(gv_p1_USER), 1.5);
    CinematicFade(true, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    GamePauseAllCharges(true);
    GamePauseAllCooldowns(true);
    TriggerExecute(gt_StartGameTacticalPhase, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSequence_Init () {
    gt_IntroSequence = TriggerCreate("gt_IntroSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Tactical Phase
//--------------------------------------------------------------------------------------------------
bool gt_StartGameTacticalPhase_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.5, c_timeReal);
    TriggerExecute(gt_RaynorQ, true, true);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_PrimaryObjectiveExploreDiscovered, true, true);
    Wait(2.0, c_timeReal);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(gv_tHEONEDRILL), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/A5AD1AB4"));
    VisRevealArea(gv_p1_USER, RegionFromId(7), 0.1, false);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_tHEONEDRILL), 4.0, Color(0.00, 100.00, 0.00));
    gv_laserDrillPing = PingLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameTacticalPhase_Init () {
    gt_StartGameTacticalPhase = TriggerCreate("gt_StartGameTacticalPhase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: M&M Dropoff
//--------------------------------------------------------------------------------------------------
bool gt_MMDropoff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    fixed auto36505A94_val;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnitCargo(), c_unitPropEnergyPercent, 100.0);
    Wait(0.2, c_timeGame);
    auto36505A94_val = UnitGetCustomValue(UnitFromId(317), 0);
    if (auto36505A94_val == 0.0) {
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(483)), c_orderQueueReplace);
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(483), 1.0, PointGetFacing(PointFromId(483)))), c_orderQueueAddToEnd);
    }
    else if (auto36505A94_val == 1.0) {
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(484)), c_orderQueueReplace);
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(484), 1.0, PointGetFacing(PointFromId(484)))), c_orderQueueAddToEnd);
    }
    else if (auto36505A94_val == 2.0) {
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(485)), c_orderQueueReplace);
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(485), 1.0, PointGetFacing(PointFromId(485)))), c_orderQueueAddToEnd);
    }
    else if (auto36505A94_val == 3.0) {
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(486)), c_orderQueueReplace);
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(486), 1.0, PointGetFacing(PointFromId(486)))), c_orderQueueAddToEnd);
    }
    else if (auto36505A94_val == 4.0) {
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(487)), c_orderQueueReplace);
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(487), 1.0, PointGetFacing(PointFromId(487)))), c_orderQueueAddToEnd);
    }
    else if (auto36505A94_val == 5.0) {
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(488)), c_orderQueueReplace);
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(488), 1.0, PointGetFacing(PointFromId(488)))), c_orderQueueAddToEnd);
    }
    else if (auto36505A94_val == 6.0) {
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(391)), c_orderQueueReplace);
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(391), 1.0, PointGetFacing(PointFromId(391)))), c_orderQueueAddToEnd);
        Wait(1.0, c_timeGame);
        UnitIssueOrder(UnitFromId(317), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(489)), c_orderQueueReplace);
    }
    else {
    }
    UnitSetCustomValue(UnitFromId(317), 0, (UnitGetCustomValue(UnitFromId(317), 0) + 1.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MMDropoff_Init () {
    gt_MMDropoff = TriggerCreate("gt_MMDropoff_Func");
    TriggerAddEventUnitCargo(gt_MMDropoff, UnitRefFromUnit(UnitFromId(317)), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zealot Aggro Q
//--------------------------------------------------------------------------------------------------
bool gt_ZealotAggroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto41FF063F_g;
    int auto41FF063F_u;
    unit auto41FF063F_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(UnitFromId(520), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(471)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(507), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(471)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(550), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(471)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(448), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(471)), c_orderQueueReplace);
    libNtve_gf_ShareVisionofUnit(UnitFromId(520), true, gv_p1_USER);
    libNtve_gf_ShareVisionofUnit(UnitFromId(507), true, gv_p1_USER);
    libNtve_gf_ShareVisionofUnit(UnitFromId(448), true, gv_p1_USER);
    libNtve_gf_ShareVisionofUnit(UnitFromId(550), true, gv_p1_USER);
    auto41FF063F_g = UnitGroup(null, gv_p6_PROTOSSAir, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto41FF063F_u = UnitGroupCount(auto41FF063F_g, c_unitCountAll);
    for (;; auto41FF063F_u -= 1) {
        auto41FF063F_var = UnitGroupUnitFromEnd(auto41FF063F_g, auto41FF063F_u);
        if (auto41FF063F_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(auto41FF063F_var, true, gv_p1_USER);
    }
    TriggerQueueEnter();
    if (((gv_interruptTransmission == true) || (gv_gameOver == true))) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus02TalDarimExecutor00001", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02TalDarimExecutor00001", -1), c_transmissionDurationAdd, 0.0, false);
    gv_unstableTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    if ((gv_interruptTransmission == true)) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        return true;
    }

    // Transmission - SoundLink("TTychus02Raynor00002", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Raynor00002", -1), c_transmissionDurationAdd, 0.0, false);
    gv_unstableTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZealotAggroQ_Init () {
    gt_ZealotAggroQ = TriggerCreate("gt_ZealotAggroQ_Func");
    TriggerAddEventUnitRegion(gt_ZealotAggroQ, null, RegionFromId(12), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Q
//--------------------------------------------------------------------------------------------------
bool gt_RaynorQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus02Raynor00048", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Raynor00048", -1), c_transmissionDurationAdd, 0.0, false);
    gv_unstableTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorQ_Init () {
    gt_RaynorQ = TriggerCreate("gt_RaynorQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Dropships
//--------------------------------------------------------------------------------------------------
bool gt_RemoveDropships_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SpecialOpsDropship"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveDropships_Init () {
    gt_RemoveDropships = TriggerCreate("gt_RemoveDropships_Func");
    TriggerAddEventUnitRegion(gt_RemoveDropships, null, RegionFromId(1), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Siege Tank Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_SiegeTankIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_DefeatTacticalTroopsDestroyed, false);
    gv_interruptTransmission = true;
    TransmissionClear(gv_unstableTransmission);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerExecute(gt_SiegeTanksComeIn, true, false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    TriggerExecute(gt_SiegeTankCameraPan1, true, false);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    UnitGroupIssueOrder(UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    // Transmission - SoundLink("TTychus02Raynor00003", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Raynor00003", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTychus02Swann00004", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Swann00004", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SiegeTankIntroQ_Init () {
    gt_SiegeTankIntroQ = TriggerCreate("gt_SiegeTankIntroQ_Func");
    TriggerAddEventUnitRegion(gt_SiegeTankIntroQ, null, RegionFromId(11), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Siege Tanks Come In
//--------------------------------------------------------------------------------------------------
bool gt_SiegeTanksComeIn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(4.0, c_timeReal);
    libNtve_gf_CreateUnitsAtPoint2(1, "SpecialOpsDropship", 0, gv_p1_USER, PointFromId(348));
    gv_siegeTankDropship = UnitLastCreated();
    libNtve_gf_MakeUnitUncommandable(gv_siegeTankDropship, true);
    libNtve_gf_MakeUnitInvulnerable(gv_siegeTankDropship, true);
    UnitSetState(gv_siegeTankDropship, c_unitStateTargetable, false);
    UnitSetState(gv_siegeTankDropship, c_unitStateUsingSupply, false);
    UnitCargoCreate(UnitLastCreated(), "SiegeTank", 2);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("SpecOpsDropshipTransport", 2), PointFromId(530)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(1))), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SiegeTanksComeIn_Init () {
    gt_SiegeTanksComeIn = TriggerCreate("gt_SiegeTanksComeIn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Siege Tank Dropoff
//--------------------------------------------------------------------------------------------------
bool gt_SiegeTankDropoff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    fixed autoA8EF11DC_val;

    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_siegeTankDropship))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.2, c_timeGame);
    autoA8EF11DC_val = UnitGetCustomValue(gv_siegeTankDropship, 0);
    if (autoA8EF11DC_val == 0.0) {
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(531)), c_orderQueueReplace);
    }
    else if (autoA8EF11DC_val == 1.0) {
        TriggerEnable(gt_DefeatTacticalTroopsDestroyed, true);
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(532)), c_orderQueueReplace);
    }
    else {
    }
    UnitIssueOrder(EventUnitCargo(), Order(AbilityCommand("SiegeMode", 0)), c_orderQueueAddToEnd);
    UnitSetCustomValue(gv_siegeTankDropship, 0, (UnitGetCustomValue(gv_siegeTankDropship, 0) + 1.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SiegeTankDropoff_Init () {
    gt_SiegeTankDropoff = TriggerCreate("gt_SiegeTankDropoff_Func");
    TriggerAddEventUnitCargo(gt_SiegeTankDropoff, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Siege Tank Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_SiegeTankTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("PhotonCannon", gv_p6_PROTOSSAir, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus02Swann00005", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Swann00005", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTychus02Swann00006", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Swann00006", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    libCamp_gf_CreateTipFromConversationState("StoryTips|Tychus02_SiegeTanks", libNtve_ge_TipType_NewUnit, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SiegeTankTipQ_Init () {
    gt_SiegeTankTipQ = TriggerCreate("gt_SiegeTankTipQ_Func");
    TriggerAddEventUnitDied(gt_SiegeTankTipQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Siege Tank Camera Pan 1
//--------------------------------------------------------------------------------------------------
bool gt_SiegeTankCameraPan1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB02445E5_g;
    int autoB02445E5_u;
    unit autoB02445E5_var;
    unitgroup autoB899A2E8_g;
    int autoB899A2E8_u;
    unit autoB899A2E8_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoB02445E5_g = UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB02445E5_u = UnitGroupCount(autoB02445E5_g, c_unitCountAll);
    for (;; autoB02445E5_u -= 1) {
        autoB02445E5_var = UnitGroupUnitFromEnd(autoB02445E5_g, autoB02445E5_u);
        if (autoB02445E5_var == null) { break; }
        libNtve_gf_PauseUnit(autoB02445E5_var, true);
    }
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(151), 1.0, -1, 10, true);
    CameraLockInput(gv_p1_USER, true);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_p1_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    CameraLockInput(gv_p1_USER, false);
    autoB899A2E8_g = UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB899A2E8_u = UnitGroupCount(autoB899A2E8_g, c_unitCountAll);
    for (;; autoB899A2E8_u -= 1) {
        autoB899A2E8_var = UnitGroupUnitFromEnd(autoB899A2E8_g, autoB899A2E8_u);
        if (autoB899A2E8_var == null) { break; }
        libNtve_gf_PauseUnit(autoB899A2E8_var, false);
        UnitIssueOrder(autoB899A2E8_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SiegeTankCameraPan1_Init () {
    gt_SiegeTankCameraPan1 = TriggerCreate("gt_SiegeTankCameraPan1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Siege Tank Tutorial Q
//--------------------------------------------------------------------------------------------------
bool gt_SiegeTankTutorialQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7A510927_g;
    int auto7A510927_u;
    unit auto7A510927_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(130)) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_SiegeTankCameraPan2, true, false);
    auto7A510927_g = UnitGroup(null, gv_p6_PROTOSSAir, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7A510927_u = UnitGroupCount(auto7A510927_g, c_unitCountAll);
    for (;; auto7A510927_u -= 1) {
        auto7A510927_var = UnitGroupUnitFromEnd(auto7A510927_g, auto7A510927_u);
        if (auto7A510927_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(auto7A510927_var, true, gv_p1_USER);
    }
    Wait(3.0, c_timeGame);
    gv_siegeTankPingActor = libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", PointFromId(573));
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    UIAlertUnit("Trigger", gv_p1_USER, StringToText(""), null, EventUnit());
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus02Raynor00014", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Raynor00014", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SiegeTankTutorialQ_Init () {
    gt_SiegeTankTutorialQ = TriggerCreate("gt_SiegeTankTutorialQ_Func");
    TriggerAddEventUnitRegion(gt_SiegeTankTutorialQ, null, RegionFromId(3), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Siege Tank Camera Pan 2
//--------------------------------------------------------------------------------------------------
bool gt_SiegeTankCameraPan2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto872D5E07_g;
    int auto872D5E07_u;
    unit auto872D5E07_var;
    unitgroup autoE07EEE0D_g;
    int autoE07EEE0D_u;
    unit autoE07EEE0D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto872D5E07_g = UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto872D5E07_u = UnitGroupCount(auto872D5E07_g, c_unitCountAll);
    for (;; auto872D5E07_u -= 1) {
        auto872D5E07_var = UnitGroupUnitFromEnd(auto872D5E07_g, auto872D5E07_u);
        if (auto872D5E07_var == null) { break; }
        libNtve_gf_PauseUnit(auto872D5E07_var, true);
    }
    CameraLockInput(gv_p1_USER, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(399), 0.75, -1, 10, true);
    Wait(2.25, c_timeGame);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(404), 0.75, -1, 10, true);
    Wait(0.75, c_timeGame);
    CameraApplyInfo(gv_p1_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    CameraLockInput(gv_p1_USER, false);
    autoE07EEE0D_g = UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE07EEE0D_u = UnitGroupCount(autoE07EEE0D_g, c_unitCountAll);
    for (;; autoE07EEE0D_u -= 1) {
        autoE07EEE0D_var = UnitGroupUnitFromEnd(autoE07EEE0D_g, autoE07EEE0D_u);
        if (autoE07EEE0D_var == null) { break; }
        libNtve_gf_PauseUnit(autoE07EEE0D_var, false);
        UnitIssueOrder(autoE07EEE0D_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SiegeTankCameraPan2_Init () {
    gt_SiegeTankCameraPan2 = TriggerCreate("gt_SiegeTankCameraPan2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stalker Aggro
//--------------------------------------------------------------------------------------------------
bool gt_StalkerAggro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(UnitGroup(null, gv_p6_PROTOSSAir, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), EventUnit()) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_siegeTankPingActor);
    UnitIssueOrder(UnitFromId(130), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(571)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(123), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(572)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(117), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(9)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(117), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(9)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(450), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(452)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(451), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(460)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(470), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(469)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StalkerAggro_Init () {
    gt_StalkerAggro = TriggerCreate("gt_StalkerAggro_Func");
    TriggerAddEventUnitDamaged(gt_StalkerAggro, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tactical Victory
//--------------------------------------------------------------------------------------------------
bool gt_TacticalVictory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(gv_siegeTankPingActor);
    TriggerEnable(gt_SiegeTankTipQ, false);
    TriggerEnable(gt_DefeatTacticalTroopsDestroyed, false);
    TriggerExecute(gt_PrimaryObjectiveExploreCompleted, true, false);
    PingDestroy(gv_laserDrillPing);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_MidQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TacticalVictory_Init () {
    gt_TacticalVictory = TriggerCreate("gt_TacticalVictory_Func");
    TriggerAddEventUnitRegion(gt_TacticalVictory, null, RegionFromId(8), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Defense Phase
//--------------------------------------------------------------------------------------------------
bool gt_StartGameDefensePhase_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto8992C0F7_g;
    int auto8992C0F7_var;
    playergroup auto10E30015_g;
    int auto10E30015_var;
    unitgroup autoC51C3702_g;
    int autoC51C3702_u;
    unit autoC51C3702_var;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    GamePauseAllCharges(false);
    GamePauseAllCooldowns(false);
    auto8992C0F7_g = gv_protossPlayerGroup;
    auto8992C0F7_var = -1;
    while (true) {
        auto8992C0F7_var = PlayerGroupNextPlayer(auto8992C0F7_g, auto8992C0F7_var);
        if (auto8992C0F7_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto8992C0F7_var, "WarpGateResearch", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(auto8992C0F7_var, "ProtossShieldsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(auto8992C0F7_var, "ProtossGroundArmorsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        TechTreeUpgradeAddLevel(auto8992C0F7_var, "ProtossAirArmorsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        TechTreeUpgradeAddLevel(auto8992C0F7_var, "haltech", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        TechTreeUpgradeAddLevel(auto8992C0F7_var, "PsiStormTech", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        TechTreeUpgradeAddLevel(auto8992C0F7_var, "HighTemplarKhaydarinAmulet", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
    }
    Wait(0.5, c_timeReal);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        auto10E30015_g = gv_protossPlayerGroup;
        auto10E30015_var = -1;
        while (true) {
            auto10E30015_var = PlayerGroupNextPlayer(auto10E30015_g, auto10E30015_var);
            if (auto10E30015_var < 0) { break; }
            autoC51C3702_g = UnitGroup("Gateway", auto10E30015_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoC51C3702_u = UnitGroupCount(autoC51C3702_g, c_unitCountAll);
            for (;; autoC51C3702_u -= 1) {
                autoC51C3702_var = UnitGroupUnitFromEnd(autoC51C3702_g, autoC51C3702_u);
                if (autoC51C3702_var == null) { break; }
                UnitIssueOrder(autoC51C3702_var, Order(AbilityCommand("UpgradeToWarpGate", 0)), c_orderQueueReplace);
                AISetUnitScriptControlled(autoC51C3702_var, false);
            }
        }
    }

    Wait(0.5, c_timeReal);
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/3DCF9366"));
    TriggerExecute(gt_ProtossincomingQ65s, true, false);
    TriggerExecute(gt_UseLaserDrillQ360s, true, false);
    TriggerExecute(gt_DelayedRelicReveal630s, true, false);
    TriggerExecute(gt_StartAI, true, false);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_PrimaryObjectiveOpenShrineDiscovered, true, true);
    Wait(2.0, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(316), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/EFA780FD"));
    TriggerExecute(gt_CreateTempleDoorBossBar, true, false);
    Wait(8.0, c_timeGame);
    TriggerExecute(gt_WeneedTanksandBunkersQ15s, true, false);
    TriggerEnable(gt_PingDangerousUnits, true);
    TriggerEnable(gt_Laserisattackedbyenemy, true);
    TriggerEnable(gt_LaserisattackedbyplayerQ, true);
    TriggerEnable(gt_LaserkillsaplayerunitQ, true);
    TriggerEnable(gt_Laserkillsaprotossunit, true);
    Wait(15.0, c_timeGame);
    TriggerExecute(gt_CampaignTipsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameDefensePhase_Init () {
    gt_StartGameDefensePhase = TriggerCreate("gt_StartGameDefensePhase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: We need Tanks and Bunkers Q - 15s
//--------------------------------------------------------------------------------------------------
bool gt_WeneedTanksandBunkersQ15s_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    UIAlertUnit("Trigger", gv_p1_USER, StringToText(""), null, UnitFromId(409));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus02Raynor00009", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Raynor00009", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    libCamp_gf_CreateTipFromConversationState("StoryTips|Tychus02_DefenseStrat", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WeneedTanksandBunkersQ15s_Init () {
    gt_WeneedTanksandBunkersQ15s = TriggerCreate("gt_WeneedTanksandBunkersQ15s_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss incoming Q - 65s
//--------------------------------------------------------------------------------------------------
bool gt_ProtossincomingQ65s_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE4FDEE91_g;
    int autoE4FDEE91_u;
    unit autoE4FDEE91_var;
    unitgroup auto2E1E36A3_g;
    int auto2E1E36A3_u;
    unit auto2E1E36A3_var;
    unitgroup auto06F7C351_g;
    int auto06F7C351_u;
    unit auto06F7C351_var;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(65.0, c_timeGame);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus02Horner00038", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Horner00038", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(1.0, c_timeReal);
    autoE4FDEE91_g = UnitGroup(null, gv_p2_NE_PROTOSSMiddle, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE4FDEE91_u = UnitGroupCount(autoE4FDEE91_g, c_unitCountAll);
    for (;; autoE4FDEE91_u -= 1) {
        autoE4FDEE91_var = UnitGroupUnitFromEnd(autoE4FDEE91_g, autoE4FDEE91_u);
        if (autoE4FDEE91_var == null) { break; }
        MinimapPing(PlayerGroupAll(), UnitGetPosition(autoE4FDEE91_var), 2.0, Color(100.00, 0.00, 0.00));
    }
    auto2E1E36A3_g = UnitGroup(null, gv_p4_SE_PROTOSSRight, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2E1E36A3_u = UnitGroupCount(auto2E1E36A3_g, c_unitCountAll);
    for (;; auto2E1E36A3_u -= 1) {
        auto2E1E36A3_var = UnitGroupUnitFromEnd(auto2E1E36A3_g, auto2E1E36A3_u);
        if (auto2E1E36A3_var == null) { break; }
        MinimapPing(PlayerGroupAll(), UnitGetPosition(auto2E1E36A3_var), 2.0, Color(100.00, 0.00, 0.00));
    }
    auto06F7C351_g = UnitGroup(null, gv_p5_NW_PROTOSSLeft, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto06F7C351_u = UnitGroupCount(auto06F7C351_g, c_unitCountAll);
    for (;; auto06F7C351_u -= 1) {
        auto06F7C351_var = UnitGroupUnitFromEnd(auto06F7C351_g, auto06F7C351_u);
        if (auto06F7C351_var == null) { break; }
        MinimapPing(PlayerGroupAll(), UnitGetPosition(auto06F7C351_var), 2.0, Color(100.00, 0.00, 0.00));
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossincomingQ65s_Init () {
    gt_ProtossincomingQ65s = TriggerCreate("gt_ProtossincomingQ65s_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Laser Drill Q - 360s
//--------------------------------------------------------------------------------------------------
bool gt_UseLaserDrillQ360s_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(360.0, c_timeGame);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    gv_playerControlsLaserDrill = true;
    UnitSetOwner(UnitFromId(409), gv_p1_USER, true);
    libNtve_gf_MakeUnitUncommandable(gv_tHEONEDRILL, false);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus02TalDarimExecutor00023", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02TalDarimExecutor00023", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTychus02Horner00042", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Horner00042", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTychus02Horner00043", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Horner00043", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTychus02Raynor00016", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Raynor00016", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    UIAlertUnit("Trigger", gv_p1_USER, StringToText(""), null, UnitFromId(409));
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    libCamp_gf_CreateTipFromConversationState("StoryTips|Tychus02_LaserDrillControl", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UseLaserDrillQ360s_Init () {
    gt_UseLaserDrillQ360s = TriggerCreate("gt_UseLaserDrillQ360s_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Relic Shrines Q
//--------------------------------------------------------------------------------------------------
bool gt_RevealRelicShrinesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD4EC2E03_g;
    int autoD4EC2E03_u;
    unit autoD4EC2E03_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((gf_PlayerIsInCombat(gv_p1_USER) == false))) {
        Wait(0.25, c_timeGame);
    }
    TriggerQueueEnter();
    if (((gv_gameOver == true) || (ObjectiveGetState(gv_bonusObjectiveCollectRelics) == c_objectiveStateCompleted))) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus02Horner00035", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Horner00035", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    autoD4EC2E03_g = UnitGroup("XelNagaShrineXil", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD4EC2E03_u = UnitGroupCount(autoD4EC2E03_g, c_unitCountAll);
    for (;; autoD4EC2E03_u -= 1) {
        autoD4EC2E03_var = UnitGroupUnitFromEnd(autoD4EC2E03_g, autoD4EC2E03_u);
        if (autoD4EC2E03_var == null) { break; }
        UnitFlashSelection(autoD4EC2E03_var, 6.0);
    }
    if ((UnitIsAlive(UnitFromId(90)) == true)) {
        SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupAll(), 100.0, 0.0);
        VisRevealArea(gv_p1_USER, RegionCircle(UnitGetPosition(UnitFromId(90)), 7.0), 12.0, false);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitFromId(90)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/29D314AB"));
        gv_shrinePing1 = PingLastCreated();
        Wait(1.0, c_timeReal);
    }

    if ((UnitIsAlive(UnitFromId(271)) == true)) {
        SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupAll(), 100.0, 0.0);
        VisRevealArea(gv_p1_USER, RegionCircle(UnitGetPosition(UnitFromId(271)), 7.0), 12.0, false);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitFromId(271)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/E1E518F4"));
        gv_shrinePing2 = PingLastCreated();
        Wait(1.0, c_timeReal);
    }

    if ((UnitIsAlive(UnitFromId(592)) == true)) {
        SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupAll(), 100.0, 0.0);
        VisRevealArea(gv_p1_USER, RegionCircle(UnitGetPosition(UnitFromId(592)), 7.0), 12.0, false);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitFromId(592)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/E2EFCE6A"));
        gv_shrinePing3 = PingLastCreated();
        Wait(1.0, c_timeReal);
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus02Raynor00036", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Raynor00036", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    TriggerExecute(gt_ObjectiveRelicsCreateQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealRelicShrinesQ_Init () {
    gt_RevealRelicShrinesQ = TriggerCreate("gt_RevealRelicShrinesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Delayed Relic Reveal - 630s
//--------------------------------------------------------------------------------------------------
bool gt_DelayedRelicReveal630s_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(630.0, c_timeGame);
    TriggerExecute(gt_RevealRelicShrinesQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DelayedRelicReveal630s_Init () {
    gt_DelayedRelicReveal630s = TriggerCreate("gt_DelayedRelicReveal630s_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Campaign Tips Q
//--------------------------------------------------------------------------------------------------
bool gt_CampaignTipsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateStorymodeTips();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CampaignTipsQ_Init () {
    gt_CampaignTipsQ = TriggerCreate("gt_CampaignTipsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Is In Combat
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIsInCombat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "DrakkenLaserDrill"))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_p1_USER) || (UnitGetOwner(EventUnitTarget()) == gv_p1_USER)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCombatIndicator = 7;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIsInCombat_Init () {
    gt_PlayerIsInCombat = TriggerCreate("gt_PlayerIsInCombat_Func");
    TriggerAddEventUnitStartedAttack(gt_PlayerIsInCombat, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Is In Combat Indicator Diminish
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIsInCombatIndicatorDiminish_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_inCombatIndicator > 0)) {
        gv_inCombatIndicator = (gv_inCombatIndicator - 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIsInCombatIndicatorDiminish_Init () {
    gt_PlayerIsInCombatIndicatorDiminish = TriggerCreate("gt_PlayerIsInCombatIndicatorDiminish_Func");
    TriggerAddEventTimePeriodic(gt_PlayerIsInCombatIndicatorDiminish, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Temple Door Boss Bar
//--------------------------------------------------------------------------------------------------
bool gt_CreateTempleDoorBossBar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_DisplayBossBar(1, "Assets\\Textures\\btn-tips-relicshrine.dds", StringExternal("Param/Value/7AE87D2E"), 100, PlayerGroupAll());
    gv_templeDoorBossBar = 1;
    libNtve_gf_SetBossBarMaximumValue(gv_templeDoorBossBar, FixedToInt(UnitGetPropertyFixed(gv_tHEONEDRILL, c_unitPropLife, c_unitPropNormal)), true);
    libNtve_gf_SetBossBarCurrentValue(gv_templeDoorBossBar, FixedToInt(UnitGetPropertyFixed(gv_tHEONEDOOR, c_unitPropLife, c_unitPropCurrent)), true);
    libNtve_gf_SetBossBarBoss(gv_templeDoorBossBar, UnitFromId(125), true);
    libNtve_gf_MoveBossBar(gv_templeDoorBossBar, c_anchorTop, 0, 50);
    libNtve_gf_SetBossBarRace(gv_templeDoorBossBar, libNtve_ge_BossBarRace_Protoss, true);
    libNtve_gf_ShowHideBossBar(true, gv_templeDoorBossBar);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateTempleDoorBossBar_Init () {
    gt_CreateTempleDoorBossBar = TriggerCreate("gt_CreateTempleDoorBossBar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Laser drill under attack 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_Laserdrillunderattack01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    SoundPlay(SoundLink("TUIWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_tHEONEDRILL), 5.0, Color(100.00, 0.00, 0.00));
    Wait(1.0, c_timeReal);
    if ((gv_gameOver == true)) {
        return true;
    }

    UIAlertUnit("Trigger", gv_p1_USER, StringToText(""), null, UnitFromId(409));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus02Raynor00018", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Raynor00018", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Laserdrillunderattack01Q_Init () {
    gt_Laserdrillunderattack01Q = TriggerCreate("gt_Laserdrillunderattack01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Laser drill under attack 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_Laserdrillunderattack02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    SoundPlay(SoundLink("TUIWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_tHEONEDRILL), 5.0, Color(100.00, 0.00, 0.00));
    Wait(1.0, c_timeReal);
    if ((gv_gameOver == true)) {
        return true;
    }

    UIAlertUnit("Trigger", gv_p1_USER, StringToText(""), null, UnitFromId(409));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus02Tychus00019", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Tychus00019", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Laserdrillunderattack02Q_Init () {
    gt_Laserdrillunderattack02Q = TriggerCreate("gt_Laserdrillunderattack02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Laser drill under attack 03 Q
//--------------------------------------------------------------------------------------------------
bool gt_Laserdrillunderattack03Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    SoundPlay(SoundLink("TUIWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_tHEONEDRILL), 5.0, Color(100.00, 0.00, 0.00));
    Wait(1.0, c_timeReal);
    if ((gv_gameOver == true)) {
        return true;
    }

    UIAlertUnit("Trigger", gv_p1_USER, StringToText(""), null, UnitFromId(409));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus02Tychus00021", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Tychus00021", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Laserdrillunderattack03Q_Init () {
    gt_Laserdrillunderattack03Q = TriggerCreate("gt_Laserdrillunderattack03Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Laser drill under attack 04 Q
//--------------------------------------------------------------------------------------------------
bool gt_Laserdrillunderattack04Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    SoundPlay(SoundLink("TUIWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_tHEONEDRILL), 5.0, Color(100.00, 0.00, 0.00));
    Wait(1.0, c_timeReal);
    if ((gv_gameOver == true)) {
        return true;
    }

    UIAlertUnit("Trigger", gv_p1_USER, StringToText(""), null, UnitFromId(409));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus02Raynor00020", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Raynor00020", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Laserdrillunderattack04Q_Init () {
    gt_Laserdrillunderattack04Q = TriggerCreate("gt_Laserdrillunderattack04Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drill is repairable tip Q
//--------------------------------------------------------------------------------------------------
bool gt_DrillisrepairabletipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    UIAlertUnit("Trigger", gv_p1_USER, StringToText(""), null, UnitFromId(409));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus02Raynor00011", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Raynor00011", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    libCamp_gf_CreateTipFromConversationState("StoryTips|Tychus02_LaserDrillRepair", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DrillisrepairabletipQ_Init () {
    gt_DrillisrepairabletipQ = TriggerCreate("gt_DrillisrepairabletipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Laser is attacked by enemy
//--------------------------------------------------------------------------------------------------
bool gt_Laserisattackedbyenemy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetPropertyFixed(gv_tHEONEDRILL, c_unitPropLifePercent, c_unitPropCurrent) <= 70.0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) != gv_p1_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gv_lDAttackedByEnemyTriggers[gv_lDAttackedIndex], true, true);
    gv_lDAttackedIndex = (gv_lDAttackedIndex + 1);
    if ((gv_lDAttackedIndex == 5)) {
        gv_lDAttackedIndex = 1;
    }

    if ((UnitGetPropertyFixed(gv_tHEONEDRILL, c_unitPropLifePercent, c_unitPropCurrent) <= 50.0)) {
        TriggerExecute(gt_DrillisrepairabletipQ, true, true);
    }

    Wait(45.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Laserisattackedbyenemy_Init () {
    gt_Laserisattackedbyenemy = TriggerCreate("gt_Laserisattackedbyenemy_Func");
    TriggerEnable(gt_Laserisattackedbyenemy, false);
    TriggerAddEventUnitDamaged(gt_Laserisattackedbyenemy, UnitRefFromUnit(UnitFromId(409)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Laser is attacked by player Q
//--------------------------------------------------------------------------------------------------
bool gt_LaserisattackedbyplayerQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetEvalCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == gv_p1_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_tHEONEDRILL), 2.0, Color(100.00, 0.00, 0.00));
    Wait(1.0, c_timeReal);
    if ((gv_gameOver == true)) {
        return true;
    }

    UIAlertUnit("Trigger", gv_p1_USER, StringToText(""), null, UnitFromId(409));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus02Tychus00010", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Tychus00010", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LaserisattackedbyplayerQ_Init () {
    gt_LaserisattackedbyplayerQ = TriggerCreate("gt_LaserisattackedbyplayerQ_Func");
    TriggerEnable(gt_LaserisattackedbyplayerQ, false);
    TriggerAddEventUnitDamaged(gt_LaserisattackedbyplayerQ, UnitRefFromUnit(UnitFromId(409)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Laser kills a player unit Q
//--------------------------------------------------------------------------------------------------
bool gt_LaserkillsaplayerunitQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingUnit() == UnitFromId(409)))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_tHEONEDRILL), 2.0, Color(100.00, 0.00, 0.00));
    Wait(1.0, c_timeReal);
    if ((gv_gameOver == true)) {
        return true;
    }

    UIAlertUnit("Trigger", gv_p1_USER, StringToText(""), null, EventUnit());
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus02Raynor00012", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Raynor00012", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    Wait(15.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LaserkillsaplayerunitQ_Init () {
    gt_LaserkillsaplayerunitQ = TriggerCreate("gt_LaserkillsaplayerunitQ_Func");
    TriggerEnable(gt_LaserkillsaplayerunitQ, false);
    TriggerAddEventUnitDied(gt_LaserkillsaplayerunitQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Laser kills a protoss unit
//--------------------------------------------------------------------------------------------------
bool gt_Laserkillsaprotossunit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libNtve_gf_KillingUnit() == UnitFromId(409)))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "XelNagaTemple"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != gv_p1_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_statLaserDrillKills += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Laserkillsaprotossunit_Init () {
    gt_Laserkillsaprotossunit = TriggerCreate("gt_Laserkillsaprotossunit_Func");
    TriggerEnable(gt_Laserkillsaprotossunit, false);
    TriggerAddEventUnitDied(gt_Laserkillsaprotossunit, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 10 Anniversary Achievement - Laser Kills Tracking
//--------------------------------------------------------------------------------------------------
bool gt__10AnniversaryAchievementLaserKillsTracking_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libNtve_gf_KillingUnit() == UnitFromId(409)))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "XelNagaTemple"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != gv_p1_USER))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_anniversaryStatLaserKillsTracking += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__10AnniversaryAchievementLaserKillsTracking_Init () {
    gt__10AnniversaryAchievementLaserKillsTracking = TriggerCreate("gt__10AnniversaryAchievementLaserKillsTracking_Func");
    TriggerAddEventUnitDied(gt__10AnniversaryAchievementLaserKillsTracking, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Laser Sound Firing Delay
//--------------------------------------------------------------------------------------------------
bool gt_LaserSoundFiringDelay_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitTarget() == gv_tHEONEDRILL))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_soundRegionCreated == true)) {
        ActorScopeSend(ActorScopeFromActor(gv_soundRegionActor), "Signal StopSound");
        gv_soundRegion = RegionEmpty();
        gv_soundRegionCreated = false;
    }

    TimerStart(gv_laserSoundDelayTimer, 3.0, false, c_timeGame);
    gv_laserDrillTargetUnit = EventUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LaserSoundFiringDelay_Init () {
    gt_LaserSoundFiringDelay = TriggerCreate("gt_LaserSoundFiringDelay_Func");
    TriggerAddEventUnitAttacked(gt_LaserSoundFiringDelay, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Laser Sound Region Clear
//--------------------------------------------------------------------------------------------------
bool gt_LaserSoundRegionClear_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_soundRegionCreated == true)) {
        ActorScopeSend(ActorScopeFromActor(gv_soundRegionActor), "Signal StopSound");
        gv_soundRegion = RegionEmpty();
        gv_soundRegionCreated = false;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LaserSoundRegionClear_Init () {
    gt_LaserSoundRegionClear = TriggerCreate("gt_LaserSoundRegionClear_Func");
    TriggerAddEventUnitAbility(gt_LaserSoundRegionClear, UnitRefFromVariable("gv_tHEONEDRILL"), AbilityCommand("AttackAllowsInvulnerable", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Laser Sound Firing
//--------------------------------------------------------------------------------------------------
bool gt_LaserSoundFiring_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_a;
    point lv_b;
    fixed lv_d;
    int lv_di;
    fixed lv_facing;
    int lv_i;
    fixed lv_x;
    fixed lv_y;

    // Automatic Variable Declarations
    int auto04D15821_ae;
    const int auto04D15821_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_soundRegionCreated == true)) {
        ActorScopeSend(ActorScopeFromActor(gv_soundRegionActor), "Signal StopSound");
        gv_soundRegion = RegionEmpty();
        gv_soundRegionCreated = false;
    }

    lv_a = UnitGetPosition(gv_tHEONEDRILL);
    lv_b = UnitGetPosition(gv_laserDrillTargetUnit);
    lv_facing = AngleBetweenPoints(lv_a, lv_b);
    lv_d = DistanceBetweenPoints(lv_a, lv_b);
    lv_di = FixedToInt((lv_d / 5.0));
    lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * 5.0));
    lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * 5.0));
    gv_soundRegion = RegionCircle(Point(lv_x, lv_y), 1.0);
    auto04D15821_ae = lv_di;
    lv_i = 1;
    for ( ; ( (auto04D15821_ai >= 0 && lv_i <= auto04D15821_ae) || (auto04D15821_ai < 0 && lv_i >= auto04D15821_ae) ) ; lv_i += auto04D15821_ai ) {
        lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        RegionAddCircle(gv_soundRegion, true, Point(lv_x, lv_y), 3.0);
    }
    ActorRegionCreate(null, "LaserRegion", gv_soundRegion);
    gv_soundRegionActor = libNtve_gf_ActorLastCreated();
    gv_soundRegionCreated = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LaserSoundFiring_Init () {
    gt_LaserSoundFiring = TriggerCreate("gt_LaserSoundFiring_Func");
    TriggerAddEventTimer(gt_LaserSoundFiring, gv_laserSoundDelayTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Laser Drill Dies
//--------------------------------------------------------------------------------------------------
bool gt_LaserDrillDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_tHEONEDRILL))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_soundRegionCreated == true)) {
        ActorScopeSend(ActorScopeFromActor(gv_soundRegionActor), "Signal StopSound");
        gv_soundRegion = RegionEmpty();
        gv_soundRegionCreated = false;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LaserDrillDies_Init () {
    gt_LaserDrillDies = TriggerCreate("gt_LaserDrillDies_Func");
    TriggerAddEventUnitDied(gt_LaserDrillDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temple HP Events
//--------------------------------------------------------------------------------------------------
bool gt_TempleHPEvents_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_tHEONEDOOR) == true))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(gv_tHEONEDOOR, c_unitPropLifePercent, c_unitPropCurrent) <= 70.0) && (TriggerIsEnabled(gt_TempleHPLow1Q) == true)) {
        TriggerExecute(gt_TempleHPLow1Q, true, false);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_tHEONEDOOR), c_animNameDefault, "Stand B", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
        Wait(6.65, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_tHEONEDOOR), c_animNameDefault, "Stand B End", c_animFlagPlayForever, c_animTimeDefault);
    }

    if ((UnitGetPropertyFixed(gv_tHEONEDOOR, c_unitPropLifePercent, c_unitPropCurrent) <= 50.0) && (TriggerIsEnabled(gt_TempleHPLow2Q) == true)) {
        TriggerExecute(gt_TempleHPLow2Q, true, false);
        libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/0E2BE404"));
    }

    if ((UnitGetPropertyFixed(gv_tHEONEDOOR, c_unitPropLifePercent, c_unitPropCurrent) <= 33.0) && (TriggerIsEnabled(gt_TempleHPLow3Q19m) == true)) {
        TriggerExecute(gt_TempleHPLow3Q19m, true, false);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_tHEONEDOOR), c_animNameDefault, "Stand C", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
        Wait(6.65, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_tHEONEDOOR), c_animNameDefault, "Stand C End", c_animFlagPlayForever, c_animTimeDefault);
        TriggerExecute(gt_AIColossusWave, true, false);
    }

    if ((UnitGetPropertyFixed(gv_tHEONEDOOR, c_unitPropLifePercent, c_unitPropCurrent) <= 3.0) && (TriggerIsEnabled(gt_TempleHPLow4Q) == true)) {
        TriggerExecute(gt_AIEndSuicide, true, false);
        TriggerExecute(gt_TempleHPLow4Q, true, false);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TempleHPEvents_Init () {
    gt_TempleHPEvents = TriggerCreate("gt_TempleHPEvents_Func");
    TriggerAddEventTimePeriodic(gt_TempleHPEvents, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temple HP Low 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_TempleHPLow1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    UIAlertUnit("Trigger", gv_p1_USER, StringToText(""), null, UnitFromId(125));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus02Adjutant00013", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Adjutant00013", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TempleHPLow1Q_Init () {
    gt_TempleHPLow1Q = TriggerCreate("gt_TempleHPLow1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temple HP Low 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_TempleHPLow2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    UIAlertUnit("Trigger", gv_p1_USER, StringToText(""), null, UnitFromId(125));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus02Adjutant00022", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Adjutant00022", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TempleHPLow2Q_Init () {
    gt_TempleHPLow2Q = TriggerCreate("gt_TempleHPLow2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temple HP Low 3 Q - 19m
//--------------------------------------------------------------------------------------------------
bool gt_TempleHPLow3Q19m_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    UIAlertUnit("Trigger", gv_p1_USER, StringToText(""), null, UnitFromId(125));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus02Adjutant00024", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Adjutant00024", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTychus02TalDarimExecutor00027", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02TalDarimExecutor00027", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TempleHPLow3Q19m_Init () {
    gt_TempleHPLow3Q19m = TriggerCreate("gt_TempleHPLow3Q19m_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temple HP Low 4 Q
//--------------------------------------------------------------------------------------------------
bool gt_TempleHPLow4Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    UIAlertUnit("Trigger", gv_p1_USER, StringToText(""), null, UnitFromId(125));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus02Adjutant00026", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Adjutant00026", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTychus02TalDarimExecutor00028", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02TalDarimExecutor00028", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TempleHPLow4Q_Init () {
    gt_TempleHPLow4Q = TriggerCreate("gt_TempleHPLow4Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prism Attack Phase 1 - Training
//--------------------------------------------------------------------------------------------------
bool gt_PrismAttackPhase1Training_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    int auto4F1246C9_n;
    int auto4F1246C9_i;

    // Variable Initialization
    lv_int = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_airWarningIssued = false;
    auto4F1246C9_n = gv_phasePrismWaveSize[gv_phasePrismAggroLevel];
    for (auto4F1246C9_i = 1; auto4F1246C9_i <= auto4F1246C9_n; auto4F1246C9_i += 1) {
        if ((UnitGroupCount(UnitGroup("Pylon", gv_p6_PROTOSSAir, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            UnitIssueOrder(gv_superWarpGateP6, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 16), gv_phasePrismSpawnPoints[1][lv_int]), c_orderQueueReplace);
        }

        if ((UnitGroupCount(UnitGroup("Pylon", gv_p6_PROTOSSAir, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            UnitIssueOrder(gv_superWarpGateP6, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 16), gv_phasePrismSpawnPoints[2][lv_int]), c_orderQueueReplace);
        }

        if ((UnitGroupCount(UnitGroup("Pylon", gv_p6_PROTOSSAir, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            UnitIssueOrder(gv_superWarpGateP6, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 16), gv_phasePrismSpawnPoints[3][lv_int]), c_orderQueueReplace);
        }

        lv_int += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrismAttackPhase1Training_Init () {
    gt_PrismAttackPhase1Training = TriggerCreate("gt_PrismAttackPhase1Training_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prism Attack Phase 1a - Warped In
//--------------------------------------------------------------------------------------------------
bool gt_PrismAttackPhase1aWarpedIn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_p6_PROTOSSAir))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "WarpPrism"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_lastWarpedInPhasePrism = EventUnitProgressUnit();
    if ((RegionContainsPoint(RegionFromId(15), UnitGetPosition(EventUnitProgressUnit())) == true)) {
        if ((gv_phasePrismAggroLevel == 3)) {
            UnitCargoCreate(EventUnitProgressUnit(), "Zealot", libNtve_gf_DifficultyValueInt(0, 0, 1, 0));
            UnitCargoCreate(EventUnitProgressUnit(), "Archon", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        }
        else {
            UnitCargoCreate(EventUnitProgressUnit(), "Stalker", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        }
        TriggerExecute(gt_PrismAttackPhase2NE, true, false);
    }

    if ((RegionContainsPoint(RegionFromId(16), UnitGetPosition(EventUnitProgressUnit())) == true)) {
        if ((gv_phasePrismAggroLevel == 3)) {
            UnitCargoCreate(EventUnitProgressUnit(), "Zealot", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        }
        else {
            UnitCargoCreate(EventUnitProgressUnit(), "Stalker", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        }
        TriggerExecute(gt_PrismAttackPhase2NW, true, false);
    }

    if ((RegionContainsPoint(RegionFromId(4), UnitGetPosition(EventUnitProgressUnit())) == true)) {
        if ((gv_phasePrismAggroLevel == 3)) {
            UnitCargoCreate(EventUnitProgressUnit(), "Zealot", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        }
        else {
            UnitCargoCreate(EventUnitProgressUnit(), "Stalker", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        }
        TriggerExecute(gt_PrismAttackPhase2SE, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrismAttackPhase1aWarpedIn_Init () {
    gt_PrismAttackPhase1aWarpedIn = TriggerCreate("gt_PrismAttackPhase1aWarpedIn_Func");
    TriggerAddEventUnitConstructProgress(gt_PrismAttackPhase1aWarpedIn, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prism Attack Phase 2 - NW
//--------------------------------------------------------------------------------------------------
bool gt_PrismAttackPhase2NW_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    int autoDB3F6B00_val;
    int auto3E3124EF_ae;
    int auto3E3124EF_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = gv_lastWarpedInPhasePrism;
    UnitGroupAdd(gv_phasePrismUnitGroups[2], lv_unit);
    gv_phasePrismCurrentlyTrained[2] = (gv_phasePrismCurrentlyTrained[2] + 1);
    if ((gv_phasePrismCurrentlyTrained[2] == gv_phasePrismWaveSize[gv_phasePrismAggroLevel])) {
        TriggerExecute(gt_PrismAttackPhase2aWarnPlayer, true, false);
        while (!((gv_airWarningIssued == true))) {
            Wait(1.0, c_timeGame);
        }
        autoDB3F6B00_val = gv_phasePrismAggroLevel;
        if (autoDB3F6B00_val == 1) {
            AIAttackWaveAddUnits4(0, 0, 0, 1, "VoidRay");
        }
        else if (autoDB3F6B00_val == 2) {
            AIAttackWaveAddUnits4(1, 1, 2, 1, "Scout");
            AIAttackWaveAddUnits4(0, 0, 0, 1, "VoidRay");
            AIAttackWaveAddUnits4(0, 0, 0, 1, "Carrier");
        }
        else if (autoDB3F6B00_val == 3) {
            AIAttackWaveAddUnits4(1, 1, 1, 1, "Scout");
            AIAttackWaveAddUnits4(0, 0, 0, 2, "Phoenix");
            AIAttackWaveAddUnits4(0, 0, 1, 0, "VoidRay");
        }
        else {
        }
        AIAttackWaveSend(gv_p5_NW_PROTOSSLeft, 0, false);
        gv_phasePrismCurrentlyTrained[2] = 0;
        auto3E3124EF_ae = UnitGroupCount(gv_phasePrismUnitGroups[2], c_unitCountAlive);
        auto3E3124EF_var = 1;
        for ( ; auto3E3124EF_var <= auto3E3124EF_ae; auto3E3124EF_var += 1 ) {
            lv_unit = UnitGroupRandomUnit(gv_phasePrismUnitGroups[2], c_unitCountAlive);
            if ((UnitGroupCount(UnitCargoGroup(lv_unit), c_unitCountAlive) == 0)) {
                UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("move", 0), gv_phasePrismAttackPoints[2][auto3E3124EF_var]), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("WarpPrismTransport", 2), gv_phasePrismAttackPoints[2][auto3E3124EF_var]), c_orderQueueReplace);
            }
            UnitIssueOrder(lv_unit, Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
            UnitGroupRemove(gv_phasePrismUnitGroups[2], lv_unit);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrismAttackPhase2NW_Init () {
    gt_PrismAttackPhase2NW = TriggerCreate("gt_PrismAttackPhase2NW_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prism Attack Phase 2 - NE
//--------------------------------------------------------------------------------------------------
bool gt_PrismAttackPhase2NE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    int autoCC7399E6_val;
    int auto0B859F94_ae;
    int auto0B859F94_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = gv_lastWarpedInPhasePrism;
    UnitGroupAdd(gv_phasePrismUnitGroups[1], lv_unit);
    gv_phasePrismCurrentlyTrained[1] = (gv_phasePrismCurrentlyTrained[1] + 1);
    if ((gv_phasePrismCurrentlyTrained[1] == gv_phasePrismWaveSize[gv_phasePrismAggroLevel])) {
        TriggerExecute(gt_PrismAttackPhase2aWarnPlayer, true, false);
        while (!((gv_airWarningIssued == true))) {
            Wait(1.0, c_timeGame);
        }
        autoCC7399E6_val = gv_phasePrismAggroLevel;
        if (autoCC7399E6_val == 1) {
            AIAttackWaveAddUnits4(0, 1, 1, 0, "VoidRay");
            AIAttackWaveAddUnits4(0, 0, 1, 2, "Scout");
        }
        else if (autoCC7399E6_val == 2) {
            AIAttackWaveAddUnits4(1, 1, 2, 2, "Scout");
            AIAttackWaveAddUnits4(0, 0, 1, 0, "VoidRay");
        }
        else if (autoCC7399E6_val == 3) {
            AIAttackWaveAddUnits4(1, 1, 0, 2, "Scout");
            AIAttackWaveAddUnits4(0, 0, 1, 1, "VoidRay");
            AIAttackWaveAddUnits4(0, 0, 1, 1, "Carrier");
        }
        else {
        }
        AIAttackWaveSend(gv_p2_NE_PROTOSSMiddle, 0, false);
        gv_phasePrismCurrentlyTrained[1] = 0;
        auto0B859F94_ae = UnitGroupCount(gv_phasePrismUnitGroups[1], c_unitCountAlive);
        auto0B859F94_var = 1;
        for ( ; auto0B859F94_var <= auto0B859F94_ae; auto0B859F94_var += 1 ) {
            lv_unit = UnitGroupRandomUnit(gv_phasePrismUnitGroups[1], c_unitCountAlive);
            if ((UnitGroupCount(UnitCargoGroup(lv_unit), c_unitCountAlive) == 0)) {
                UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("move", 0), gv_phasePrismAttackPoints[1][auto0B859F94_var]), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("WarpPrismTransport", 2), gv_phasePrismAttackPoints[1][auto0B859F94_var]), c_orderQueueReplace);
            }
            UnitIssueOrder(lv_unit, Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
            UnitGroupRemove(gv_phasePrismUnitGroups[1], lv_unit);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrismAttackPhase2NE_Init () {
    gt_PrismAttackPhase2NE = TriggerCreate("gt_PrismAttackPhase2NE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prism Attack Phase 2 - SE
//--------------------------------------------------------------------------------------------------
bool gt_PrismAttackPhase2SE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    int auto26D415F6_val;
    int autoFDA0D90C_ae;
    int autoFDA0D90C_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = gv_lastWarpedInPhasePrism;
    UnitGroupAdd(gv_phasePrismUnitGroups[3], lv_unit);
    gv_phasePrismCurrentlyTrained[3] = (gv_phasePrismCurrentlyTrained[3] + 1);
    if ((gv_phasePrismCurrentlyTrained[3] == gv_phasePrismWaveSize[gv_phasePrismAggroLevel])) {
        TriggerExecute(gt_PrismAttackPhase2aWarnPlayer, true, false);
        while (!((gv_airWarningIssued == true))) {
            Wait(1.0, c_timeGame);
        }
        auto26D415F6_val = gv_phasePrismAggroLevel;
        if (auto26D415F6_val == 1) {
            AIAttackWaveAddUnits4(0, 0, 1, 1, "Scout");
        }
        else if (auto26D415F6_val == 2) {
            AIAttackWaveAddUnits4(1, 1, 1, 2, "Scout");
            AIAttackWaveAddUnits4(0, 0, 1, 0, "VoidRay");
        }
        else if (auto26D415F6_val == 3) {
            AIAttackWaveAddUnits4(1, 1, 1, 0, "Scout");
            AIAttackWaveAddUnits4(0, 0, 0, 2, "Phoenix");
            AIAttackWaveAddUnits4(0, 0, 1, 2, "VoidRay");
            AIAttackWaveAddUnits4(0, 0, 0, 1, "Carrier");
        }
        else {
        }
        AIAttackWaveSend(gv_p4_SE_PROTOSSRight, 0, false);
        gv_phasePrismCurrentlyTrained[3] = 0;
        autoFDA0D90C_ae = UnitGroupCount(gv_phasePrismUnitGroups[3], c_unitCountAlive);
        autoFDA0D90C_var = 1;
        for ( ; autoFDA0D90C_var <= autoFDA0D90C_ae; autoFDA0D90C_var += 1 ) {
            lv_unit = UnitGroupRandomUnit(gv_phasePrismUnitGroups[3], c_unitCountAlive);
            if ((UnitGroupCount(UnitCargoGroup(lv_unit), c_unitCountAlive) == 0)) {
                UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("move", 0), gv_phasePrismAttackPoints[3][autoFDA0D90C_var]), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("WarpPrismTransport", 2), gv_phasePrismAttackPoints[3][autoFDA0D90C_var]), c_orderQueueReplace);
            }
            UnitIssueOrder(lv_unit, Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
            UnitGroupRemove(gv_phasePrismUnitGroups[3], lv_unit);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrismAttackPhase2SE_Init () {
    gt_PrismAttackPhase2SE = TriggerCreate("gt_PrismAttackPhase2SE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prism Attack Phase 2a - Warn Player
//--------------------------------------------------------------------------------------------------
bool gt_PrismAttackPhase2aWarnPlayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_phasePrismAggroLevel == 1)) {
        TriggerExecute(gt_IncomingPrismAttack01Q, true, false);
    }

    if ((gv_phasePrismAggroLevel == 2)) {
        TriggerExecute(gt_IncomingPrismAttack02Q, true, false);
    }

    if ((gv_phasePrismAggroLevel == 3)) {
        TriggerExecute(gt_IncomingPrismAttack03Q, true, false);
    }

    Wait(8.0, c_timeGame);
    gv_airWarningIssued = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrismAttackPhase2aWarnPlayer_Init () {
    gt_PrismAttackPhase2aWarnPlayer = TriggerCreate("gt_PrismAttackPhase2aWarnPlayer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prism Attack Phase 3 - Arrival
//--------------------------------------------------------------------------------------------------
bool gt_PrismAttackPhase3Arrival_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(libNtve_gf_DifficultyValueFixed(5.0, 5.0, 25.0, 20.0), c_timeGame);
    while (true) {
        if ((UnitIsAlive(EventUnit()) == true)) {
            if ((gv_phasePrismAggroLevel == 1)) {
                UnitIssueOrder(gv_superWarpGateP6, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(EventUnit())), c_orderQueueReplace);
                Wait(gv_phasePrismSpawnRate, c_timeGame);
            }

            if ((gv_phasePrismAggroLevel == 2)) {
                UnitIssueOrder(gv_superWarpGateP6, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(EventUnit())), c_orderQueueReplace);
                Wait(gv_phasePrismSpawnRate, c_timeGame);
                UnitIssueOrder(gv_superWarpGateP6, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), UnitGetPosition(EventUnit())), c_orderQueueReplace);
                Wait(gv_phasePrismSpawnRate, c_timeGame);
            }

            if ((gv_phasePrismAggroLevel == 3)) {
                UnitIssueOrder(gv_superWarpGateP6, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(EventUnit())), c_orderQueueReplace);
                Wait(gv_phasePrismSpawnRate, c_timeGame);
                UnitIssueOrder(gv_superWarpGateP6, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), UnitGetPosition(EventUnit())), c_orderQueueReplace);
                Wait(gv_phasePrismSpawnRate, c_timeGame);
            }

        }
        else {
            return true;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrismAttackPhase3Arrival_Init () {
    gt_PrismAttackPhase3Arrival = TriggerCreate("gt_PrismAttackPhase3Arrival_Func");
    TriggerAddEventUnitAbility(gt_PrismAttackPhase3Arrival, null, AbilityCommand("PhasingMode", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Incoming Prism Attack 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_IncomingPrismAttack01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    gv_airWarningIssued = true;
    Wait(5.0, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus02Adjutant00029", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Adjutant00029", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTychus02Raynor00030", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Raynor00030", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(libCamp_gv_campaignHintDelay, c_timeGame);
    libCamp_gf_CreateTipFromConversationState("StoryTips|Tychus02_LaserDrillAA", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IncomingPrismAttack01Q_Init () {
    gt_IncomingPrismAttack01Q = TriggerCreate("gt_IncomingPrismAttack01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Incoming Prism Attack 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_IncomingPrismAttack02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    gv_airWarningIssued = true;
    Wait(5.0, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus02Horner00031", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Horner00031", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTychus02Raynor00032", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Raynor00032", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IncomingPrismAttack02Q_Init () {
    gt_IncomingPrismAttack02Q = TriggerCreate("gt_IncomingPrismAttack02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Incoming Prism Attack 03 Q
//--------------------------------------------------------------------------------------------------
bool gt_IncomingPrismAttack03Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    gv_airWarningIssued = true;
    Wait(5.0, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus02Horner00033", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Horner00033", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTychus02Raynor00034", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Raynor00034", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IncomingPrismAttack03Q_Init () {
    gt_IncomingPrismAttack03Q = TriggerCreate("gt_IncomingPrismAttack03Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Delayed Attack Wave Thread
//--------------------------------------------------------------------------------------------------
bool gt_SendDelayedAttackWaveThread_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_qty;
    int lv_attacker;
    int lv_arrivalTime;
    int lv_lingerTime;
    int[11] lv_unitQuantities;
    string[11] lv_unitTypes;
    int lv_unitCount;
    point lv_waypoint;

    // Automatic Variable Declarations
    int autoE1D09B31_ae;
    const int autoE1D09B31_ai = 1;
    int auto433B3895_ae;
    const int auto433B3895_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attacker = gv_dAWAttacker;
    lv_arrivalTime = gv_dAWArrivalTime;
    lv_lingerTime = gv_dAWLingerTime;
    lv_waypoint = gv_dAWWaypoint;
    lv_unitCount = gv_dAWUnitCount;
    autoE1D09B31_ae = lv_unitCount;
    lv_index = 1;
    for ( ; ( (autoE1D09B31_ai >= 0 && lv_index <= autoE1D09B31_ae) || (autoE1D09B31_ai < 0 && lv_index >= autoE1D09B31_ae) ) ; lv_index += autoE1D09B31_ai ) {
        lv_unitQuantities[lv_index] = gv_dAWUnitQuantities[lv_index];
        lv_unitTypes[lv_index] = gv_dAWUnitTypes[lv_index];
    }
    gv_dAWUnitCount = 0;
    gv_dAWWaypoint = null;
    lv_lingerTime = MinI(lv_lingerTime, lv_arrivalTime);
    Wait(IntToFixed((lv_arrivalTime - lv_lingerTime)), c_timeAI);
    auto433B3895_ae = lv_unitCount;
    lv_index = 1;
    for ( ; ( (auto433B3895_ai >= 0 && lv_index <= auto433B3895_ae) || (auto433B3895_ai < 0 && lv_index >= auto433B3895_ae) ) ; lv_index += auto433B3895_ai ) {
        lv_qty = lv_unitQuantities[lv_index];
        AIAttackWaveAddUnits4(lv_qty, lv_qty, lv_qty, lv_qty, lv_unitTypes[lv_index]);
    }
    if ((lv_waypoint != null)) {
        AIAttackWaveAddWaypoint(lv_attacker, lv_waypoint, false);
    }

    AIAttackWaveSetGatherEarlyNoReplace(lv_attacker);
    AIAttackWaveSend(lv_attacker, lv_lingerTime, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendDelayedAttackWaveThread_Init () {
    gt_SendDelayedAttackWaveThread = TriggerCreate("gt_SendDelayedAttackWaveThread_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AICampaignStart(gv_p2_NE_PROTOSSMiddle);
    AICampaignStart(gv_p3_WARPEDINPROTOSS);
    AICampaignStart(gv_p4_SE_PROTOSSRight);
    AICampaignStart(gv_p5_NW_PROTOSSLeft);
    AIAttackWaveSetTargetPlayer(gv_p2_NE_PROTOSSMiddle, PlayerGroupSingle(gv_p1_USER));
    AIAttackWaveSetTargetPlayer(gv_p4_SE_PROTOSSRight, PlayerGroupSingle(gv_p1_USER));
    AIAttackWaveSetTargetPlayer(gv_p5_NW_PROTOSSLeft, PlayerGroupSingle(gv_p1_USER));
    AIAttackWaveSetGatherPoint(gv_p2_NE_PROTOSSMiddle, PointFromId(229));
    AIAttackWaveSetGatherPoint(gv_p4_SE_PROTOSSRight, PointFromId(232));
    AIAttackWaveSetGatherPoint(gv_p5_NW_PROTOSSLeft, PointFromId(255));
    AISetBullyAttackWavePercent(100, gv_p2_NE_PROTOSSMiddle);
    AISetBullyAttackWavePercent(100, gv_p4_SE_PROTOSSRight);
    AISetBullyAttackWavePercent(100, gv_p5_NW_PROTOSSLeft);
    TriggerExecute(gt_AIAttackWaves, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_AIAttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_SetResearchForAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ProtossGroundWeaponsLevel1");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Stalker");
    gf_SendDelayedAttackWave(gv_p5_NW_PROTOSSLeft, 120, libNtve_gf_DifficultyValueInt(90, 90, 90, 90));
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Stalker");
    gf_SendDelayedAttackWave(gv_p4_SE_PROTOSSRight, 150, libNtve_gf_DifficultyValueInt(90, 90, 90, 90));
    Wait(150.0, c_timeAI);
    gf_SetResearchForAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 1, 0), "ProtossGroundWeaponsLevel1");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Zealot");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Stalker");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 2), "Sentry");
    gf_SendDelayedAttackWave(gv_p4_SE_PROTOSSRight, 120, libNtve_gf_DifficultyValueInt(90, 90, 75, 65));
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Zealot");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(2, 2, 4, 3), "Stalker");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "Sentry");
    gf_SendDelayedAttackWave(gv_p2_NE_PROTOSSMiddle, 150, libNtve_gf_DifficultyValueInt(90, 90, 75, 65));
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(3, 3, 3, 3), "Stalker");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "Sentry");
    gf_SendDelayedAttackWave(gv_p5_NW_PROTOSSLeft, 150, libNtve_gf_DifficultyValueInt(70, 70, 60, 50));
    Wait(150.0, c_timeAI);
    gf_SetResearchForAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 1, 0), "ProtossAirWeaponsLevel1");
    gf_SetResearchForAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ProtossAirWeaponsLevel1");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Archon");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 1, 2), "Immortal");
    gf_SendDelayedAttackWave(gv_p2_NE_PROTOSSMiddle, 120, libNtve_gf_DifficultyValueInt(90, 90, 75, 65));
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(2, 2, 3, 2), "Zealot");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "Sentry");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(1, 1, 3, 4), "Stalker");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 1, 2), "Immortal");
    gf_SendDelayedAttackWave(gv_p5_NW_PROTOSSLeft, 125, libNtve_gf_DifficultyValueInt(90, 90, 75, 65));
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Archon");
    gf_SendDelayedAttackWave(gv_p4_SE_PROTOSSRight, 140, libNtve_gf_DifficultyValueInt(90, 90, 75, 65));
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(2, 2, 4, 3), "Stalker");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "Sentry");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Archon");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "Immortal");
    gf_SendDelayedAttackWave(gv_p5_NW_PROTOSSLeft, 180, libNtve_gf_DifficultyValueInt(60, 60, 45, 35));
    Wait(180.0, c_timeAI);
    gf_SetResearchForAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ProtossGroundWeaponsLevel2");
    Wait(60.0, c_timeAI);
    gv_phasePrismAggroLevel = 1;
    TriggerExecute(gt_PrismAttackPhase1Training, true, false);
    gf_SetResearchForAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 1, 0), "ProtossGroundArmorsLevel1");
    gf_SetResearchForAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ProtossGroundArmorsLevel2");
    gf_SetResearchForAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ProtossAirWeaponsLevel2");
    gf_SetResearchForAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ProtossAirArmorsLevel2");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(4, 4, 6, 7), "Stalker");
    gf_SendDelayedAttackWave(gv_p5_NW_PROTOSSLeft, 140, libNtve_gf_DifficultyValueInt(90, 90, 75, 65));
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(5, 5, 2, 3), "Zealot");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Stalker");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 2), "Sentry");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "Archon");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 2, 2), "Immortal");
    gf_SetDelayedAttackWaveWaypoint(PointFromId(216));
    gf_SendDelayedAttackWave(gv_p2_NE_PROTOSSMiddle, 170, libNtve_gf_DifficultyValueInt(90, 90, 75, 65));
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(3, 3, 4, 3), "Zealot");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(2, 2, 5, 4), "Stalker");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 3), "Sentry");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 1, 2), "Immortal");
    gf_SendDelayedAttackWave(gv_p4_SE_PROTOSSRight, 180, libNtve_gf_DifficultyValueInt(90, 90, 75, 65));
    Wait(180.0, c_timeAI);
    gf_SetResearchForAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ProtossShieldsLevel2");
    gf_SetResearchForAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 1, 0), "ProtossAirArmorsLevel1");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(2, 2, 4, 0), "Zealot");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(5, 5, 5, 6), "Stalker");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(2, 2, 3, 5), "Archon");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "Sentry");
    gf_SendDelayedAttackWave(gv_p5_NW_PROTOSSLeft, 120, libNtve_gf_DifficultyValueInt(90, 90, 75, 65));
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(2, 2, 6, 2), "Stalker");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(3, 3, 4, 5), "Archon");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "Archon");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 1, 2), "Immortal");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "Sentry");
    gf_SendDelayedAttackWave(gv_p4_SE_PROTOSSRight, 150, libNtve_gf_DifficultyValueInt(90, 90, 75, 65));
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(7, 7, 8, 5), "Zealot");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(1, 1, 3, 7), "Archon");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 1, 2), "Immortal");
    gf_SetDelayedAttackWaveWaypoint(PointFromId(216));
    gf_SendDelayedAttackWave(gv_p2_NE_PROTOSSMiddle, 180, libNtve_gf_DifficultyValueInt(50, 50, 35, 25));
    Wait(180.0, c_timeAI);
    gf_SetResearchForAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ProtossGroundWeaponsLevel3");
    gf_SetResearchForAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ProtossAirWeaponsLevel3");
    Wait(60.0, c_timeAI);
    gv_phasePrismAggroLevel = 2;
    TriggerExecute(gt_PrismAttackPhase1Training, true, false);
    gf_SetResearchForAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 1, 0), "ProtossGroundWeaponsLevel2");
    gf_SetResearchForAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 1, 0), "ProtossAirWeaponsLevel2");
    gf_SetResearchForAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ProtossGroundArmorsLevel3");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(4, 4, 2, 2), "Zealot");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Stalker");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "Archon");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "HighTemplar");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 2, 2), "Immortal");
    gf_SendDelayedAttackWave(gv_p5_NW_PROTOSSLeft, 120, libNtve_gf_DifficultyValueInt(80, 80, 65, 55));
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(3, 3, 4, 6), "Zealot");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Stalker");
    gf_SendDelayedAttackWave(gv_p4_SE_PROTOSSRight, 130, libNtve_gf_DifficultyValueInt(80, 80, 65, 55));
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Archon");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "Immortal");
    gf_SendDelayedAttackWave(gv_p2_NE_PROTOSSMiddle, 170, libNtve_gf_DifficultyValueInt(80, 80, 65, 55));
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(3, 3, 5, 6), "Stalker");
    gf_SendDelayedAttackWave(gv_p5_NW_PROTOSSLeft, 170, libNtve_gf_DifficultyValueInt(20, 20, 20, 20));
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Archon");
    gf_SetDelayedAttackWaveWaypoint(PointFromId(216));
    gf_SendDelayedAttackWave(gv_p2_NE_PROTOSSMiddle, 180, libNtve_gf_DifficultyValueInt(80, 80, 65, 55));
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(3, 3, 4, 2), "Stalker");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 2), "Archon");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 2, 1), "Immortal");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "HighTemplar");
    gf_SendDelayedAttackWave(gv_p4_SE_PROTOSSRight, 180, libNtve_gf_DifficultyValueInt(20, 20, 20, 20));
    Wait(180.0, c_timeAI);
    gf_SetResearchForAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 1, 0), "ProtossGroundArmorsLevel2");
    gf_SetResearchForAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 1, 0), "ProtossAirArmorsLevel2");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(3, 3, 4, 5), "Archon");
    gf_SendDelayedAttackWave(gv_p5_NW_PROTOSSLeft, 95, libNtve_gf_DifficultyValueInt(90, 90, 75, 65));
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(3, 3, 5, 3), "Zealot");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(2, 2, 3, 5), "Archon");
    gf_SendDelayedAttackWave(gv_p2_NE_PROTOSSMiddle, 100, libNtve_gf_DifficultyValueInt(70, 70, 55, 45));
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(4, 4, 5, 4), "Stalker");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 2, 2), "Immortal");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "HighTemplar");
    gf_SendDelayedAttackWave(gv_p5_NW_PROTOSSLeft, 110, libNtve_gf_DifficultyValueInt(20, 20, 20, 20));
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(3, 3, 4, 2), "Stalker");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(2, 2, 0, 1), "Archon");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 1, 2), "Immortal");
    gf_SendDelayedAttackWave(gv_p4_SE_PROTOSSRight, 170, libNtve_gf_DifficultyValueInt(80, 80, 65, 55));
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(4, 4, 5, 6), "Stalker");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(1, 1, 4, 5), "Archon");
    gf_SetDelayedAttackWaveWaypoint(PointFromId(216));
    gf_SendDelayedAttackWave(gv_p2_NE_PROTOSSMiddle, 175, libNtve_gf_DifficultyValueInt(60, 60, 45, 35));
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(4, 4, 5, 3), "Zealot");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(2, 2, 2, 3), "Stalker");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 1, 3), "Archon");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "Immortal");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "HighTemplar");
    gf_SendDelayedAttackWave(gv_p2_NE_PROTOSSMiddle, 180, libNtve_gf_DifficultyValueInt(20, 20, 20, 20));
    Wait(180.0, c_timeAI);
    gf_SetResearchForAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "Charge");
    gf_SetResearchForAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 1, 0), "ProtossShieldsLevel2");
    Wait(60.0, c_timeAI);
    gv_phasePrismAggroLevel = 3;
    TriggerExecute(gt_PrismAttackPhase1Training, true, false);
    gf_SetResearchForAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ProtossAirArmorsLevel3");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(6, 6, 6, 7), "Zealot");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Colossus");
    gf_SendDelayedAttackWave(gv_p2_NE_PROTOSSMiddle, 100, libNtve_gf_DifficultyValueInt(100, 100, 85, 75));
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Zealot");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(3, 3, 5, 2), "Stalker");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 2), "Archon");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 2, 2), "Immortal");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "Colossus");
    gf_SendDelayedAttackWave(gv_p5_NW_PROTOSSLeft, 105, libNtve_gf_DifficultyValueInt(65, 65, 50, 40));
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(2, 2, 5, 6), "Zealot");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(3, 3, 4, 2), "Stalker");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 3), "Sentry");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "HighTemplar");
    gf_SendDelayedAttackWave(gv_p4_SE_PROTOSSRight, 130, libNtve_gf_DifficultyValueInt(90, 90, 75, 65));
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Archon");
    gf_SendDelayedAttackWave(gv_p4_SE_PROTOSSRight, 130, libNtve_gf_DifficultyValueInt(20, 20, 20, 20));
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Stalker");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Colossus");
    gf_SetDelayedAttackWaveWaypoint(PointFromId(216));
    gf_SendDelayedAttackWave(gv_p2_NE_PROTOSSMiddle, 170, libNtve_gf_DifficultyValueInt(60, 60, 45, 35));
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(2, 2, 4, 0), "Stalker");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Colossus");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 1, 2), "Zealot");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 2), "Sentry");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "HighTemplar");
    gf_SendDelayedAttackWave(gv_p5_NW_PROTOSSLeft, 180, libNtve_gf_DifficultyValueInt(60, 60, 45, 35));
    Wait(180.0, c_timeAI);
    gf_SetResearchForAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 1, 0), "Charge");
    gf_SetResearchForAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ProtossShieldsLevel3");
    while (true) {
        gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Stalker");
        gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 2), "Sentry");
        gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Archon");
        gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(1, 1, 2, 4), "Colossus");
        gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 3), "HighTemplar");
        gf_SendDelayedAttackWave(gv_p4_SE_PROTOSSRight, 110, libNtve_gf_DifficultyValueInt(80, 80, 65, 55));
        gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(6, 6, 8, 6), "Zealot");
        gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(3, 3, 4, 5), "Stalker");
        gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "Sentry");
        gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 2), "Archon");
        gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 1, 3), "Immortal");
        gf_SetDelayedAttackWaveWaypoint(PointFromId(216));
        gf_SendDelayedAttackWave(gv_p2_NE_PROTOSSMiddle, 120, libNtve_gf_DifficultyValueInt(80, 80, 65, 55));
        gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(4, 4, 5, 5), "Stalker");
        gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 2), "Sentry");
        gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(2, 2, 3, 5), "Archon");
        gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 3), "HighTemplar");
        gf_SendDelayedAttackWave(gv_p5_NW_PROTOSSLeft, 170, libNtve_gf_DifficultyValueInt(80, 80, 65, 55));
        gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(2, 2, 0, 3), "Stalker");
        gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(1, 1, 2, 4), "Colossus");
        gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 3, 3), "Immortal");
        gf_SendDelayedAttackWave(gv_p2_NE_PROTOSSMiddle, 180, libNtve_gf_DifficultyValueInt(80, 80, 65, 55));
        Wait(180.0, c_timeAI);
        gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(6, 6, 8, 6), "Zealot");
        gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(3, 3, 4, 5), "Stalker");
        gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "Sentry");
        gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 2), "Archon");
        gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 1, 3), "Immortal");
        gf_SendDelayedAttackWave(gv_p4_SE_PROTOSSRight, 110, libNtve_gf_DifficultyValueInt(80, 80, 65, 55));
        gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Stalker");
        gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 2), "Sentry");
        gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Archon");
        gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(1, 1, 2, 4), "Colossus");
        gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 3), "HighTemplar");
        gf_SendDelayedAttackWave(gv_p2_NE_PROTOSSMiddle, 120, libNtve_gf_DifficultyValueInt(80, 80, 65, 55));
        gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(2, 2, 0, 3), "Stalker");
        gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(1, 1, 2, 4), "Colossus");
        gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 3, 3), "Immortal");
        gf_SendDelayedAttackWave(gv_p5_NW_PROTOSSLeft, 170, libNtve_gf_DifficultyValueInt(80, 80, 65, 55));
        gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(4, 4, 5, 5), "Stalker");
        gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 2), "Sentry");
        gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(2, 2, 3, 5), "Archon");
        gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 0, 3), "HighTemplar");
        gf_SendDelayedAttackWave(gv_p2_NE_PROTOSSMiddle, 180, libNtve_gf_DifficultyValueInt(80, 80, 65, 55));
        Wait(180.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIAttackWaves_Init () {
    gt_AIAttackWaves = TriggerCreate("gt_AIAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Colossus Wave
//--------------------------------------------------------------------------------------------------
bool gt_AIColossusWave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Colossus");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "Stalker");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Sentry");
    gf_SendDelayedAttackWave(gv_p2_NE_PROTOSSMiddle, 120, 105);
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Colossus");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "Stalker");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Sentry");
    gf_SendDelayedAttackWave(gv_p5_NW_PROTOSSLeft, 120, 105);
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Colossus");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(0, 0, 2, 2), "Stalker");
    gf_AddDelayedAttackWaveUnitTypes(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Sentry");
    gf_SendDelayedAttackWave(gv_p4_SE_PROTOSSRight, 120, 105);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIColossusWave_Init () {
    gt_AIColossusWave = TriggerCreate("gt_AIColossusWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI End Suicide
//--------------------------------------------------------------------------------------------------
bool gt_AIEndSuicide_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        gf_AIWarpInUnits(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), AbilityCommand("SuperWarpGateTrain", 0), PointFromId(439));
        gf_AIWarpInUnits(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), AbilityCommand("SuperWarpGateTrain", 1), PointFromId(439));
        gf_AIWarpInUnits(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), AbilityCommand("SuperWarpGateTrain", 0), PointFromId(440));
        gf_AIWarpInUnits(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), AbilityCommand("SuperWarpGateTrain", 0), PointFromId(442));
        gf_AIWarpInUnits(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), AbilityCommand("SuperWarpGateTrain", 1), PointFromId(442));
        Wait(10.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIEndSuicide_Init () {
    gt_AIEndSuicide = TriggerCreate("gt_AIEndSuicide_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI P6 Warp In Suicide
//--------------------------------------------------------------------------------------------------
bool gt_AIP6WarpInSuicide_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_p6_PROTOSSAir))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnitProgressUnit(), gv_p3_WARPEDINPROTOSS, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "WarpPrism"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(EventUnitProgressUnit(), gv_p3_WARPEDINPROTOSS, true);
    AISetUnitSuicide(EventUnitProgressUnit(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIP6WarpInSuicide_Init () {
    gt_AIP6WarpInSuicide = TriggerCreate("gt_AIP6WarpInSuicide_Func");
    TriggerAddEventUnitConstructProgress(gt_AIP6WarpInSuicide, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI P6 Cargo Drop Suicide
//--------------------------------------------------------------------------------------------------
bool gt_AIP6CargoDropSuicide_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p6_PROTOSSAir))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.2, c_timeGame);
    UnitSetOwner(EventUnitCargo(), gv_p3_WARPEDINPROTOSS, true);
    AISetUnitSuicide(EventUnitCargo(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIP6CargoDropSuicide_Init () {
    gt_AIP6CargoDropSuicide = TriggerCreate("gt_AIP6CargoDropSuicide_Func");
    TriggerAddEventUnitCargo(gt_AIP6CargoDropSuicide, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping Dangerous Units
//--------------------------------------------------------------------------------------------------
bool gt_PingDangerousUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_localUnits;

    // Automatic Variable Declarations
    unitgroup auto6C20341F_g;
    int auto6C20341F_u;
    unit auto6C20341F_var;

    // Variable Initialization
    lv_localUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Archon") || (UnitGetType(EventUnit()) == "Colossus") || (UnitGetType(EventUnit()) == "Immortal") || (UnitGetType(EventUnit()) == "Carrier") || (UnitGetType(EventUnit()) == "WarpPrism")))) {
            return false;
        }

        if (!((UnitGetCustomValue(EventUnit(), 0) < 1.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) != "WarpPrism")) {
        lv_localUnits = UnitGroup("Archon", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("Colossus", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_localUnits);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("Immortal", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_localUnits);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("Carrier", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_localUnits);
        UnitGroupRemove(lv_localUnits, EventUnit());
        auto6C20341F_g = lv_localUnits;
        auto6C20341F_u = UnitGroupCount(auto6C20341F_g, c_unitCountAll);
        for (;; auto6C20341F_u -= 1) {
            auto6C20341F_var = UnitGroupUnitFromEnd(auto6C20341F_g, auto6C20341F_u);
            if (auto6C20341F_var == null) { break; }
            if ((UnitGetCustomValue(auto6C20341F_var, 0) > 1.0)) {
                return true;
            }

        }
    }

    UnitSetCustomValue(EventUnit(), 0, 2.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(EventUnit()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetScale(PingLastCreated(), 0.8);
    PingSetUnit(PingLastCreated(), EventUnit());
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/103608D2"));
    SoundPlay(SoundLink("UI_TerranReminderPing", -1), PlayerGroupAll(), 100.0, 0.0);
    while (!(((UnitIsAlive(EventUnit()) == false) || (RegionContainsPoint(RegionFromId(20), UnitGetPosition(EventUnit())) == true)))) {
        Wait(1.0, c_timeGame);
    }
    PingDestroy(PingLastCreated());
    if ((UnitIsAlive(EventUnit()) == true)) {
        UnitSetCustomValue(EventUnit(), 0, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PingDangerousUnits_Init () {
    gt_PingDangerousUnits = TriggerCreate("gt_PingDangerousUnits_Func");
    TriggerEnable(gt_PingDangerousUnits, false);
    TriggerAddEventUnitRegion(gt_PingDangerousUnits, null, RegionFromId(6), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping Dangerous Units Death Transfer
//--------------------------------------------------------------------------------------------------
bool gt_PingDangerousUnitsDeathTransfer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_localUnits;
    unit lv_transferUnit;

    // Automatic Variable Declarations
    unitgroup autoF58A53C8_g;
    int autoF58A53C8_u;
    unit autoF58A53C8_var;

    // Variable Initialization
    lv_localUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetCustomValue(EventUnit(), 0) > 1.0))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Archon") || (UnitGetType(EventUnit()) == "Colossus") || (UnitGetType(EventUnit()) == "Immortal") || (UnitGetType(EventUnit()) == "Carrier")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_localUnits = UnitGroup("Archon", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("Colossus", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_localUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("Immortal", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_localUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("Carrier", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_localUnits);
    UnitGroupRemove(lv_localUnits, EventUnit());
    autoF58A53C8_g = lv_localUnits;
    autoF58A53C8_u = UnitGroupCount(autoF58A53C8_g, c_unitCountAll);
    for (;; autoF58A53C8_u -= 1) {
        autoF58A53C8_var = UnitGroupUnitFromEnd(autoF58A53C8_g, autoF58A53C8_u);
        if (autoF58A53C8_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(autoF58A53C8_var, RegionFromId(6)) == false)) {
            UnitGroupRemove(lv_localUnits, autoF58A53C8_var);
        }

    }
    if ((UnitGroupCount(lv_localUnits, c_unitCountAlive) >= 1)) {
        lv_transferUnit = UnitGroupUnit(lv_localUnits, 1);
    }
    else {
        return true;
    }
    if ((UnitGetCustomValue(lv_transferUnit, 0) > 1.0)) {
        return true;
    }

    UnitSetCustomValue(lv_transferUnit, 0, 2.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(lv_transferUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetScale(PingLastCreated(), 0.8);
    PingSetUnit(PingLastCreated(), lv_transferUnit);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/37015A8D"));
    while (!(((UnitIsAlive(lv_transferUnit) == false) || (RegionContainsPoint(RegionFromId(20), UnitGetPosition(lv_transferUnit)) == true)))) {
        Wait(1.0, c_timeGame);
    }
    PingDestroy(PingLastCreated());
    if ((UnitIsAlive(lv_transferUnit) == true)) {
        UnitSetCustomValue(lv_transferUnit, 0, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PingDangerousUnitsDeathTransfer_Init () {
    gt_PingDangerousUnitsDeathTransfer = TriggerCreate("gt_PingDangerousUnitsDeathTransfer_Func");
    TriggerAddEventUnitDied(gt_PingDangerousUnitsDeathTransfer, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping Dangerous Units Bully Removal
//--------------------------------------------------------------------------------------------------
bool gt_PingDangerousUnitsBullyRemoval_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_localUnits;
    unit lv_transferUnit;

    // Automatic Variable Declarations
    unitgroup autoB08D0E56_g;
    int autoB08D0E56_u;
    unit autoB08D0E56_var;

    // Variable Initialization
    lv_localUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetCustomValue(EventUnit(), 0) > 1.0))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Archon") || (UnitGetType(EventUnit()) == "Colossus") || (UnitGetType(EventUnit()) == "Immortal") || (UnitGetType(EventUnit()) == "Carrier")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_localUnits = UnitGroup("Archon", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("Colossus", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_localUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("Immortal", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_localUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("Carrier", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_localUnits);
    UnitGroupRemove(lv_localUnits, EventUnit());
    autoB08D0E56_g = lv_localUnits;
    autoB08D0E56_u = UnitGroupCount(autoB08D0E56_g, c_unitCountAll);
    for (;; autoB08D0E56_u -= 1) {
        autoB08D0E56_var = UnitGroupUnitFromEnd(autoB08D0E56_g, autoB08D0E56_u);
        if (autoB08D0E56_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(autoB08D0E56_var, RegionFromId(6)) == false)) {
            UnitGroupRemove(lv_localUnits, autoB08D0E56_var);
        }

    }
    if ((UnitGroupCount(lv_localUnits, c_unitCountAlive) >= 1)) {
        lv_transferUnit = UnitGroupUnit(lv_localUnits, 1);
    }
    else {
        return true;
    }
    if ((UnitGetCustomValue(lv_transferUnit, 0) > 1.0)) {
        return true;
    }

    UnitSetCustomValue(lv_transferUnit, 0, 2.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(lv_transferUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetScale(PingLastCreated(), 0.8);
    PingSetUnit(PingLastCreated(), lv_transferUnit);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/9E61A0F9"));
    while (!(((UnitIsAlive(lv_transferUnit) == false) || (RegionContainsPoint(RegionFromId(20), UnitGetPosition(lv_transferUnit)) == true)))) {
        Wait(1.0, c_timeGame);
    }
    PingDestroy(PingLastCreated());
    if ((UnitIsAlive(lv_transferUnit) == true)) {
        UnitSetCustomValue(lv_transferUnit, 0, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PingDangerousUnitsBullyRemoval_Init () {
    gt_PingDangerousUnitsBullyRemoval = TriggerCreate("gt_PingDangerousUnitsBullyRemoval_Func");
    TriggerAddEventUnitRegion(gt_PingDangerousUnitsBullyRemoval, null, RegionFromId(20), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Endless Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIEndlessMinerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 3000)) {
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 3000);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIEndlessMinerals_Init () {
    gt_AIEndlessMinerals = TriggerCreate("gt_AIEndlessMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIEndlessMinerals, gv_p2_NE_PROTOSSMiddle, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIEndlessMinerals, gv_p4_SE_PROTOSSRight, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIEndlessMinerals, gv_p5_NW_PROTOSSLeft, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIEndlessMinerals, gv_p6_PROTOSSAir, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Endless Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIEndlessGas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 3000)) {
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 3000);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIEndlessGas_Init () {
    gt_AIEndlessGas = TriggerCreate("gt_AIEndlessGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIEndlessGas, gv_p2_NE_PROTOSSMiddle, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIEndlessGas, gv_p4_SE_PROTOSSRight, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIEndlessGas, gv_p5_NW_PROTOSSLeft, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIEndlessGas, gv_p6_PROTOSSAir, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shrine 1 Killed
//--------------------------------------------------------------------------------------------------
bool gt_Shrine1Killed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0AF2A1D0_g;
    int auto0AF2A1D0_u;
    unit auto0AF2A1D0_var;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto0AF2A1D0_g = UnitGroup("PathingBlocker1x1", 0, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0AF2A1D0_u = UnitGroupCount(auto0AF2A1D0_g, c_unitCountAll);
    for (;; auto0AF2A1D0_u -= 1) {
        auto0AF2A1D0_var = UnitGroupUnitFromEnd(auto0AF2A1D0_g, auto0AF2A1D0_u);
        if (auto0AF2A1D0_var == null) { break; }
        UnitRemove(auto0AF2A1D0_var);
    }
    TriggerExecute(gt_RevealRelicShrinesQ, true, false);
    libNtve_gf_ShowHideUnit(UnitFromId(139), true);
    PingDestroy(gv_shrinePing1);
    libNtve_gf_AttachModelToUnit(UnitFromId(139), "BriefingUnitSelect", "Ref_Center");
    while (true) {
        Wait(0.5, c_timeGame);
        if ((UnitIsAlive(UnitFromId(139)) == false)) {
            libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Shrine1Killed_Init () {
    gt_Shrine1Killed = TriggerCreate("gt_Shrine1Killed_Func");
    TriggerAddEventUnitDied(gt_Shrine1Killed, UnitRefFromUnit(UnitFromId(90)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shrine 2 Killed
//--------------------------------------------------------------------------------------------------
bool gt_Shrine2Killed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7824B385_g;
    int auto7824B385_u;
    unit auto7824B385_var;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto7824B385_g = UnitGroup("PathingBlocker1x1", 0, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7824B385_u = UnitGroupCount(auto7824B385_g, c_unitCountAll);
    for (;; auto7824B385_u -= 1) {
        auto7824B385_var = UnitGroupUnitFromEnd(auto7824B385_g, auto7824B385_u);
        if (auto7824B385_var == null) { break; }
        UnitRemove(auto7824B385_var);
    }
    TriggerExecute(gt_RevealRelicShrinesQ, true, false);
    libNtve_gf_ShowHideUnit(UnitFromId(109), true);
    PingDestroy(gv_shrinePing2);
    libNtve_gf_AttachModelToUnit(UnitFromId(109), "BriefingUnitSelect", "Ref_Center");
    while (true) {
        Wait(0.5, c_timeGame);
        if ((UnitIsAlive(UnitFromId(109)) == false)) {
            libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Shrine2Killed_Init () {
    gt_Shrine2Killed = TriggerCreate("gt_Shrine2Killed_Func");
    TriggerAddEventUnitDied(gt_Shrine2Killed, UnitRefFromUnit(UnitFromId(271)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shrine 3 Killed
//--------------------------------------------------------------------------------------------------
bool gt_Shrine3Killed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA518B08A_g;
    int autoA518B08A_u;
    unit autoA518B08A_var;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA518B08A_g = UnitGroup("PathingBlocker1x1", 0, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA518B08A_u = UnitGroupCount(autoA518B08A_g, c_unitCountAll);
    for (;; autoA518B08A_u -= 1) {
        autoA518B08A_var = UnitGroupUnitFromEnd(autoA518B08A_g, autoA518B08A_u);
        if (autoA518B08A_var == null) { break; }
        UnitRemove(autoA518B08A_var);
    }
    TriggerExecute(gt_RevealRelicShrinesQ, true, false);
    libNtve_gf_ShowHideUnit(UnitFromId(126), true);
    PingDestroy(gv_shrinePing3);
    libNtve_gf_AttachModelToUnit(UnitFromId(126), "BriefingUnitSelect", "Ref_Center");
    while (true) {
        Wait(0.5, c_timeGame);
        if ((UnitIsAlive(UnitFromId(126)) == false)) {
            libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Shrine3Killed_Init () {
    gt_Shrine3Killed = TriggerCreate("gt_Shrine3Killed_Func");
    TriggerAddEventUnitDied(gt_Shrine3Killed, UnitRefFromUnit(UnitFromId(592)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Carrion Birds
//--------------------------------------------------------------------------------------------------
bool gt_CarrionBirds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB9279F3F_g;
    int autoB9279F3F_u;
    unit autoB9279F3F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_carrionBirds, UnitFromId(1117));
    UnitGroupAdd(gv_carrionBirds, UnitFromId(1120));
    UnitGroupAdd(gv_carrionBirds, UnitFromId(1121));
    while (true) {
        if ((UnitGroupCount(gv_carrionBirds, c_unitCountAlive) == 0)) {
            return true;
        }

        autoB9279F3F_g = gv_carrionBirds;
        autoB9279F3F_u = UnitGroupCount(autoB9279F3F_g, c_unitCountAll);
        for (;; autoB9279F3F_u -= 1) {
            autoB9279F3F_var = UnitGroupUnitFromEnd(autoB9279F3F_g, autoB9279F3F_u);
            if (autoB9279F3F_var == null) { break; }
            if ((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionCircle(UnitGetPosition(autoB9279F3F_var), 5.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                UnitGroupRemove(gv_carrionBirds, autoB9279F3F_var);
                gf_OrderCarrionBirdtoFlyAway(autoB9279F3F_var);
            }

        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CarrionBirds_Init () {
    gt_CarrionBirds = TriggerCreate("gt_CarrionBirds_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Carrion Bird Flys Away
//--------------------------------------------------------------------------------------------------
bool gt_CarrionBirdFlysAway_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_carrionBirdLocal;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_carrionBirdLocal = gv_carrionBirdParameter;
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_carrionBirdLocal), c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(6.666, c_timeGame);
    UnitRemove(lv_carrionBirdLocal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CarrionBirdFlysAway_Init () {
    gt_CarrionBirdFlysAway = TriggerCreate("gt_CarrionBirdFlysAway_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Siege Tank Kills
//--------------------------------------------------------------------------------------------------
bool gt_SiegeTankKills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(libNtve_gf_KillingUnit()) == "SiegeTankSieged") || (UnitGetType(libNtve_gf_KillingUnit()) == "SiegeTank")))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != gv_p1_USER))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_statSiegeTankKills += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SiegeTankKills_Init () {
    gt_SiegeTankKills = TriggerCreate("gt_SiegeTankKills_Func");
    TriggerAddEventUnitDied(gt_SiegeTankKills, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Determine Remaining Protoss
//--------------------------------------------------------------------------------------------------
bool gt_DetermineRemainingProtoss_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto178C9D5D_g;
    int auto178C9D5D_u;
    unit auto178C9D5D_var;
    unitgroup auto97CCAEEE_g;
    int auto97CCAEEE_u;
    unit auto97CCAEEE_var;
    unitgroup auto2DE8B14F_g;
    int auto2DE8B14F_u;
    unit auto2DE8B14F_var;
    unitgroup auto0AB3AE1A_g;
    int auto0AB3AE1A_u;
    unit auto0AB3AE1A_var;
    unitgroup auto571B3761_g;
    int auto571B3761_u;
    unit auto571B3761_var;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto178C9D5D_g = UnitGroup(null, gv_p2_NE_PROTOSSMiddle, RegionPlayableMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto178C9D5D_u = UnitGroupCount(auto178C9D5D_g, c_unitCountAll);
    for (;; auto178C9D5D_u -= 1) {
        auto178C9D5D_var = UnitGroupUnitFromEnd(auto178C9D5D_g, auto178C9D5D_u);
        if (auto178C9D5D_var == null) { break; }
        gv_statProtossRemaining += 1;
    }
    auto97CCAEEE_g = UnitGroup(null, gv_p3_WARPEDINPROTOSS, RegionPlayableMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto97CCAEEE_u = UnitGroupCount(auto97CCAEEE_g, c_unitCountAll);
    for (;; auto97CCAEEE_u -= 1) {
        auto97CCAEEE_var = UnitGroupUnitFromEnd(auto97CCAEEE_g, auto97CCAEEE_u);
        if (auto97CCAEEE_var == null) { break; }
        gv_statProtossRemaining += 1;
    }
    auto2DE8B14F_g = UnitGroup(null, gv_p4_SE_PROTOSSRight, RegionPlayableMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2DE8B14F_u = UnitGroupCount(auto2DE8B14F_g, c_unitCountAll);
    for (;; auto2DE8B14F_u -= 1) {
        auto2DE8B14F_var = UnitGroupUnitFromEnd(auto2DE8B14F_g, auto2DE8B14F_u);
        if (auto2DE8B14F_var == null) { break; }
        gv_statProtossRemaining += 1;
    }
    auto0AB3AE1A_g = UnitGroup(null, gv_p5_NW_PROTOSSLeft, RegionPlayableMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0AB3AE1A_u = UnitGroupCount(auto0AB3AE1A_g, c_unitCountAll);
    for (;; auto0AB3AE1A_u -= 1) {
        auto0AB3AE1A_var = UnitGroupUnitFromEnd(auto0AB3AE1A_g, auto0AB3AE1A_u);
        if (auto0AB3AE1A_var == null) { break; }
        gv_statProtossRemaining += 1;
    }
    auto571B3761_g = UnitGroup(null, gv_p6_PROTOSSAir, RegionPlayableMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto571B3761_u = UnitGroupCount(auto571B3761_g, c_unitCountAll);
    for (;; auto571B3761_u -= 1) {
        auto571B3761_var = UnitGroupUnitFromEnd(auto571B3761_g, auto571B3761_u);
        if (auto571B3761_var == null) { break; }
        if ((UnitGetType(auto571B3761_var) != "XelNagaShrineXil")) {
            gv_statProtossRemaining += 1;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DetermineRemainingProtoss_Init () {
    gt_DetermineRemainingProtoss = TriggerCreate("gt_DetermineRemainingProtoss_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Laser Drill 20 Kills
//--------------------------------------------------------------------------------------------------
bool gt_AchievementLaserDrill20Kills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1))) {
            return false;
        }

        if (!((gv_statLaserDrillKills >= 20))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AchievementAward(gv_p1_USER, "TTychus02_2");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementLaserDrill20Kills_Init () {
    gt_AchievementLaserDrill20Kills = TriggerCreate("gt_AchievementLaserDrill20Kills_Func");
    TriggerAddEventTimePeriodic(gt_AchievementLaserDrill20Kills, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - 50 Protoss Structures Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_Achievement50ProtossStructuresDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1))) {
            return false;
        }

        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_p2_NE_PROTOSSMiddle) || (UnitGetOwner(EventUnit()) == gv_p3_WARPEDINPROTOSS) || (UnitGetOwner(EventUnit()) == gv_p4_SE_PROTOSSRight) || (UnitGetOwner(EventUnit()) == gv_p5_NW_PROTOSSLeft) || (UnitGetOwner(EventUnit()) == gv_p6_PROTOSSAir)))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_statProtossStructureKills += 1;
    if ((gv_statProtossStructureKills >= 50)) {
        TriggerEnable(TriggerGetCurrent(), false);
        AchievementAward(gv_p1_USER, "TTychus02_3");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Achievement50ProtossStructuresDestroyed_Init () {
    gt_Achievement50ProtossStructuresDestroyed = TriggerCreate("gt_Achievement50ProtossStructuresDestroyed_Func");
    TriggerAddEventUnitDied(gt_Achievement50ProtossStructuresDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Destroy Door
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDestroyDoor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_location;
    fixed lv_facing;
    unit lv_temple;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_tHEONEDOOR))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ChangeUnitDamage(gv_tHEONEDRILL, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Stand D End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_ShowHideBossBar(false, gv_templeDoorBossBar);
    TriggerStop(gt_AIEndSuicide);
    gv_gameOver = true;
    TriggerExecute(gt_DetermineRemainingProtoss, true, false);
    lv_location = UnitGetPosition(EventUnit());
    lv_facing = UnitGetFacing(EventUnit());
    UnitRemove(EventUnit());
    UnitCreate(1, "XelNagaTemple", 0, gv_p8_ANCIENT_TEMPLE, lv_location, lv_facing);
    lv_temple = UnitLastCreated();
    UnitSetPosition(lv_temple, lv_location, false);
    UnitSetState(lv_temple, c_unitStateSelectable, false);
    UnitSetState(lv_temple, c_unitStateHighlightable, false);
    UnitSetState(lv_temple, c_unitStateStatusBar, false);
    UnitSetState(lv_temple, c_unitStateTooltipable, false);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_temple), c_animNameDefault, "Stand D End", c_animFlagPlayForever, c_animTimeDefault);
    lv_location = UnitGetPosition(gv_tHEONEDRILL);
    lv_facing = UnitGetFacing(gv_tHEONEDRILL);
    lv_player = UnitGetOwner(gv_tHEONEDRILL);
    UnitRemove(gv_tHEONEDRILL);
    UnitCreate(1, "DrakkenLaserDrill", c_unitCreateIgnorePlacement, lv_player, lv_location, lv_facing);
    gv_tHEONEDRILL = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_tHEONEDRILL), c_animNameDefault, "Stand Work End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_PauseUnit(gv_tHEONEDRILL, true);
    libNtve_gf_MakeUnitInvulnerable(gv_tHEONEDRILL, true);
    TriggerExecute(gt_PrimaryObjectiveOpenShrineCompleted, true, true);
    libCamp_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDestroyDoor_Init () {
    gt_VictoryDestroyDoor = TriggerCreate("gt_VictoryDestroyDoor_Func");
    TriggerAddEventUnitDied(gt_VictoryDestroyDoor, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Destroy Protoss
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDestroyProtoss_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    point lv_location;
    fixed lv_facing;

    // Automatic Variable Declarations
    playergroup autoB29F918D_g;
    int autoB29F918D_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p2_NE_PROTOSSMiddle, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p3_WARPEDINPROTOSS, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p4_SE_PROTOSSRight, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p5_NW_PROTOSSLeft, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p6_PROTOSSAir, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ShowHideBossBar(false, gv_templeDoorBossBar);
    gv_gameOver = true;
    TriggerExecute(gt_DetermineRemainingProtoss, true, false);
    autoB29F918D_g = gv_protossPlayerGroup;
    autoB29F918D_var = -1;
    while (true) {
        autoB29F918D_var = PlayerGroupNextPlayer(autoB29F918D_g, autoB29F918D_var);
        if (autoB29F918D_var < 0) { break; }
        PlayerModifyPropertyInt(autoB29F918D_var, c_playerPropMinerals, c_playerPropOperSetTo, 0);
        PlayerModifyPropertyInt(autoB29F918D_var, c_playerPropVespene, c_playerPropOperSetTo, 0);
    }
    libNtve_gf_ChangeUnitDamage(gv_tHEONEDOOR, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    lv_location = UnitGetPosition(gv_tHEONEDRILL);
    lv_facing = UnitGetFacing(gv_tHEONEDRILL);
    lv_player = UnitGetOwner(gv_tHEONEDRILL);
    UnitRemove(gv_tHEONEDRILL);
    UnitCreate(1, "DrakkenLaserDrill", c_unitCreateIgnorePlacement, lv_player, lv_location, lv_facing);
    gv_tHEONEDRILL = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_tHEONEDRILL), c_animNameDefault, "Stand Work End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_PauseUnit(gv_tHEONEDRILL, true);
    libNtve_gf_MakeUnitInvulnerable(gv_tHEONEDRILL, true);
    TriggerExecute(gt_VictoryDestroyProtossDialogueQ, true, true);
    TriggerExecute(gt_PrimaryObjectiveOpenShrineCompleted, true, true);
    libCamp_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDestroyProtoss_Init () {
    gt_VictoryDestroyProtoss = TriggerCreate("gt_VictoryDestroyProtoss_Func");
    TriggerAddEventTimePeriodic(gt_VictoryDestroyProtoss, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Destroy Protoss Dialogue Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDestroyProtossDialogueQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus02Horner00044", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Horner00044", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDestroyProtossDialogueQ_Init () {
    gt_VictoryDestroyProtossDialogueQ = TriggerCreate("gt_VictoryDestroyProtossDialogueQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((ObjectiveGetState(gv_primaryObjectiveMeltOpenTemple) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_primaryObjectiveLaserDrillMustSurvive) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_bonusObjectiveCollectRelics) == c_objectiveStateCompleted)) {
        AchievementAward(gv_p1_USER, "TTychus02_1");
    }

    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_anniversaryStatLaserKillsTracking <= 0)) {
        AchievementAward(gv_p1_USER, "Anniversary_TTychus02");
        TriggerDebugOutput(1, StringExternal("Param/Value/47D5A648"), false);
    }

    VictoryPanelAddAchievement("TTychus02_1");
    VictoryPanelAddAchievement("TTychus02_2");
    VictoryPanelAddAchievement("TTychus02_3");
    TriggerExecute(gt_DetermineRemainingProtoss, true, false);
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/5BDA1E62"), IntToText(gv_statLaserDrillKills));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/3A6F072D"), IntToText(gv_statSiegeTankKills));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/392B4F4E"), IntToText(gv_statProtossRemaining));
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/41184483"), (IntToText(gv_bonusObjectiveCollectRelicsFound) + StringExternal("Param/Value/E3F06CBF") + IntToText(gv_bonusObjectiveCollectRelicsNeeded)));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/DEB3929B"), IntToText(gv_bonusObjectiveCollectRelicsFound));
    libCamp_gf_EndCampaignMission(gv_p1_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Tactical Troops Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatTacticalTroopsDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerExecute(gt_PrimaryObjectiveExploreCreate, true, false);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/9474CC9B"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatTacticalTroopsDestroyed_Init () {
    gt_DefeatTacticalTroopsDestroyed = TriggerCreate("gt_DefeatTacticalTroopsDestroyed_Func");
    TriggerAddEventUnitDied(gt_DefeatTacticalTroopsDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Laser Drill Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatLaserDrillDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_tHEONEDRILL))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerExecute(gt_PrimaryObjectiveOpenShrineCreate, true, false);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/E0A24292"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatLaserDrillDestroyed_Init () {
    gt_DefeatLaserDrillDestroyed = TriggerCreate("gt_DefeatLaserDrillDestroyed_Func");
    TriggerAddEventUnitDied(gt_DefeatLaserDrillDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_EndCampaignMission(gv_p1_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    libCamp_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_p1_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_p1_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Primary Objective Explore Create
//--------------------------------------------------------------------------------------------------
bool gt_PrimaryObjectiveExploreCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveCreate(StringExternal("Param/Value/9F7E8FE1"), StringExternal("Param/Value/A0CD3338"), c_objectiveStateActive, true);
    gv_primaryObjectiveExplorePreviousExpedition = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TTychus02Objective1, ObjectiveLastCreated(), StringExternal("Param/Value/404193A5"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrimaryObjectiveExploreCreate_Init () {
    gt_PrimaryObjectiveExploreCreate = TriggerCreate("gt_PrimaryObjectiveExploreCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Primary Objective Explore Discovered
//--------------------------------------------------------------------------------------------------
bool gt_PrimaryObjectiveExploreDiscovered_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_PrimaryObjectiveExploreCreate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrimaryObjectiveExploreDiscovered_Init () {
    gt_PrimaryObjectiveExploreDiscovered = TriggerCreate("gt_PrimaryObjectiveExploreDiscovered_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Primary Objective Explore Completed
//--------------------------------------------------------------------------------------------------
bool gt_PrimaryObjectiveExploreCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_PrimaryObjectiveExploreCreate, true, false);
    ObjectiveSetState(gv_primaryObjectiveExplorePreviousExpedition, c_objectiveStateCompleted);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrimaryObjectiveExploreCompleted_Init () {
    gt_PrimaryObjectiveExploreCompleted = TriggerCreate("gt_PrimaryObjectiveExploreCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Primary Objective Open Shrine Create
//--------------------------------------------------------------------------------------------------
bool gt_PrimaryObjectiveOpenShrineCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveCreate(StringExternal("Param/Value/BEB494E2"), StringExternal("Param/Value/5881BE00"), c_objectiveStateActive, true);
    gv_primaryObjectiveMeltOpenTemple = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TTychus02Objective2, ObjectiveLastCreated(), StringExternal("Param/Value/0478497B"));
    Wait(2.0, c_timeGame);
    ObjectiveCreate(StringExternal("Param/Value/3EC50D05"), StringExternal("Param/Value/BD1F81D5"), c_objectiveStateActive, true);
    gv_primaryObjectiveLaserDrillMustSurvive = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TTychus02Objective3, ObjectiveLastCreated(), StringExternal("Param/Value/47DB3148"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrimaryObjectiveOpenShrineCreate_Init () {
    gt_PrimaryObjectiveOpenShrineCreate = TriggerCreate("gt_PrimaryObjectiveOpenShrineCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Primary Objective Open Shrine Discovered
//--------------------------------------------------------------------------------------------------
bool gt_PrimaryObjectiveOpenShrineDiscovered_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_PrimaryObjectiveOpenShrineCreate, true, false);
    Wait(2.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrimaryObjectiveOpenShrineDiscovered_Init () {
    gt_PrimaryObjectiveOpenShrineDiscovered = TriggerCreate("gt_PrimaryObjectiveOpenShrineDiscovered_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Primary Objective Open Shrine Completed
//--------------------------------------------------------------------------------------------------
bool gt_PrimaryObjectiveOpenShrineCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_PrimaryObjectiveOpenShrineCreate, true, false);
    ObjectiveSetState(gv_primaryObjectiveMeltOpenTemple, c_objectiveStateCompleted);
    ObjectiveSetState(gv_primaryObjectiveLaserDrillMustSurvive, c_objectiveStateCompleted);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrimaryObjectiveOpenShrineCompleted_Init () {
    gt_PrimaryObjectiveOpenShrineCompleted = TriggerCreate("gt_PrimaryObjectiveOpenShrineCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Relics - Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRelicsCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate((StringExternal("Param/Value/CE389A84") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectFindProtossRelics, libCamp_ge_StoryResearchObjectiveTextStyle_Multipart, gv_bonusObjectiveCollectRelicsNeeded, gv_bonusObjectiveCollectRelicsFound)), StringExternal("Param/Value/54858326"), c_objectiveStateActive, false);
    gv_bonusObjectiveCollectRelics = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TTychus02Objective32, ObjectiveLastCreated(), StringExternal("Param/Value/AAB93443"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    libCamp_gf_CreateTipFromConversationState("StoryTips|Tychus02_RelicShrines", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRelicsCreateQ_Init () {
    gt_ObjectiveRelicsCreateQ = TriggerCreate("gt_ObjectiveRelicsCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Relics - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRelicsUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/177B7A17"), null, UnitGetPosition(EventUnit()));
    gv_bonusObjectiveCollectRelicsFound += 1;
    TriggerExecute(gt_ObjectiveRelicsCreateQ, true, false);
    libCamp_gf_DisplayResearchPointsGiventoPlayer(libCamp_ge_StoryResearchObject_ResearchObjectFindProtossRelics, EventUnit(), gv_p1_USER);
    UnitKill(EventUnit());
    ObjectiveSetName(gv_bonusObjectiveCollectRelics, (StringExternal("Param/Value/D8039732") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectFindProtossRelics, libCamp_ge_StoryResearchObjectiveTextStyle_Multipart, gv_bonusObjectiveCollectRelicsNeeded, gv_bonusObjectiveCollectRelicsFound)));
    if ((gv_bonusObjectiveCollectRelicsFound == gv_bonusObjectiveCollectRelicsNeeded)) {
        TriggerExecute(gt_ObjectiveRelicsComplete, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRelicsUpdate_Init () {
    gt_ObjectiveRelicsUpdate = TriggerCreate("gt_ObjectiveRelicsUpdate_Func");
    TriggerAddEventUnitAbility(gt_ObjectiveRelicsUpdate, null, AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Relics - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRelicsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveRelicsCreateQ, true, false);
    ObjectiveSetName(gv_bonusObjectiveCollectRelics, (StringExternal("Param/Value/51D38407") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectFindProtossRelics, libCamp_ge_StoryResearchObjectiveTextStyle_Multipart, gv_bonusObjectiveCollectRelicsNeeded, gv_bonusObjectiveCollectRelicsFound)));
    ObjectiveSetState(gv_bonusObjectiveCollectRelics, c_objectiveStateCompleted);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRelicsComplete_Init () {
    gt_ObjectiveRelicsComplete = TriggerCreate("gt_ObjectiveRelicsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_unitGroup;

    // Automatic Variable Declarations
    unitgroup auto7211007A_g;
    int auto7211007A_u;
    unit auto7211007A_var;
    unitgroup autoEA65F53F_g;
    int autoEA65F53F_u;
    unit autoEA65F53F_var;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_StartGameTacticalPhase);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    gv_inCinematic = true;
    gv_gameOver = true;
    lv_unitGroup = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupRemove(lv_unitGroup, UnitFromId(409));
    UnitGroupRemove(lv_unitGroup, UnitFromId(125));
    UnitGroupRemove(lv_unitGroup, UnitFromId(90));
    UnitGroupRemove(lv_unitGroup, UnitFromId(271));
    auto7211007A_g = UnitGroupFilter(null, gv_p7_ABANDONED_BASE, lv_unitGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7211007A_u = UnitGroupCount(auto7211007A_g, c_unitCountAll);
    for (;; auto7211007A_u -= 1) {
        auto7211007A_var = UnitGroupUnitFromEnd(auto7211007A_g, auto7211007A_u);
        if (auto7211007A_var == null) { break; }
        UnitGroupRemove(lv_unitGroup, auto7211007A_var);
    }
    autoEA65F53F_g = lv_unitGroup;
    autoEA65F53F_u = UnitGroupCount(autoEA65F53F_g, c_unitCountAll);
    for (;; autoEA65F53F_u -= 1) {
        autoEA65F53F_var = UnitGroupUnitFromEnd(autoEA65F53F_g, autoEA65F53F_u);
        if (autoEA65F53F_var == null) { break; }
        UnitRemove(autoEA65F53F_var);
    }
    UnitPauseAll(true);
    AITimePause(true);
    GameTimeOfDayPause(true);
    GameSetBackground(c_backgroundFixed, "XilSkybox", 100.0);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    TriggerExecute(gt_BriefingScene00, true, true);
    TriggerExecute(gt_BriefingScene01, true, true);
    TriggerExecute(gt_BriefingScene02, true, true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UnitPauseAll(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(264), 0.0, -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(246), (SoundLengthSync(SoundLink("TTychus02BriefingTychus00007", -1)) - 1.0), -1, 10, true);
    MovieStartRecording("Briefing_Video_TTychus02_00");
    SoundPlay(SoundLink("TTychus02BriefingTychus00007", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTychus02BriefingTychus00007", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus02BriefingTychus00007", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00_Init () {
    gt_BriefingScene00 = TriggerCreate("gt_BriefingScene00_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(182), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(183), (SoundLengthSync(SoundLink("TTychus02BriefingTychus00009", -1)) - 1.0), -1, 10, true);
    MovieStartRecording("Briefing_Video_TTychus02_01");
    SoundPlay(SoundLink("TTychus02BriefingTychus00009", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("TTychus02BriefingTychus00009", -1)), c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(671), (SoundLengthSync(SoundLink("TTychus02BriefingTychus00003", -1)) + SoundLengthSync(SoundLink("TTychus02BriefingAdjutant00001", -1))), -1, 10, true);
    SoundPlay(SoundLink("TTychus02BriefingTychus00003", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("TTychus02BriefingTychus00003", -1)), c_timeReal);
    SoundPlay(SoundLink("TTychus02BriefingAdjutant00001", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("TTychus02BriefingAdjutant00001", -1)), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus02BriefingTychus00009", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus02BriefingTychus00003", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus02BriefingAdjutant00001", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01_Init () {
    gt_BriefingScene01 = TriggerCreate("gt_BriefingScene01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 02
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(38), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(115), (SoundLengthSync(SoundLink("TTychus02BriefingRaynor00011", -1)) + SoundLengthSync(SoundLink("TTychus02BriefingRaynor00004", -1))), -1, 10, true);
    MovieStartRecording("Briefing_Video_TTychus02_02");
    SoundPlay(SoundLink("TTychus02BriefingRaynor00011", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTychus02BriefingRaynor00011", -1))), c_timeReal);
    SoundPlay(SoundLink("TTychus02BriefingRaynor00004", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTychus02BriefingRaynor00004", -1))), c_timeReal);
    SoundPlay(SoundLink("TTychus02BriefingTychus00002", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTychus02BriefingTychus00002", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus02BriefingRaynor00011", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus02BriefingRaynor00004", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus02BriefingTychus00002", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene02_Init () {
    gt_BriefingScene02 = TriggerCreate("gt_BriefingScene02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto091BD106_g;
    int auto091BD106_var;
    unitgroup auto5ED0527B_g;
    int auto5ED0527B_u;
    unit auto5ED0527B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_p1_USER);
    libNtve_gf_StoreUnitSelection(gv_p1_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    GameSetBackground(c_backgroundFixed, "XilSkybox", 100.0);
    UnitPauseAll(true);
    gv_midHiddenUnitGroup = UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroupFilterRegion(UnitGroup(null, gv_p2_NE_PROTOSSMiddle, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionPlayableMap(), 0), gv_midHiddenUnitGroup);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroupFilterRegion(UnitGroup(null, gv_p4_SE_PROTOSSRight, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionPlayableMap(), 0), gv_midHiddenUnitGroup);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroupFilterRegion(UnitGroup(null, gv_p5_NW_PROTOSSLeft, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionPlayableMap(), 0), gv_midHiddenUnitGroup);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroupFilterRegion(UnitGroup(null, gv_p6_PROTOSSAir, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionPlayableMap(), 0), gv_midHiddenUnitGroup);
    UnitGroupRemove(gv_midHiddenUnitGroup, gv_tHEONEDOOR);
    libNtve_gf_ShareVisionofUnit(gv_tHEONEDOOR, true, gv_p7_ABANDONED_BASE);
    auto091BD106_g = gv_protossPlayerGroup;
    auto091BD106_var = -1;
    while (true) {
        auto091BD106_var = PlayerGroupNextPlayer(auto091BD106_g, auto091BD106_var);
        if (auto091BD106_var < 0) { break; }
        libNtve_gf_SetAlliance(auto091BD106_var, gv_p7_ABANDONED_BASE, libNtve_ge_AllianceSetting_Enemy);
    }
    auto5ED0527B_g = gv_midHiddenUnitGroup;
    auto5ED0527B_u = UnitGroupCount(auto5ED0527B_g, c_unitCountAll);
    for (;; auto5ED0527B_u -= 1) {
        auto5ED0527B_var = UnitGroupUnitFromEnd(auto5ED0527B_g, auto5ED0527B_u);
        if (auto5ED0527B_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto5ED0527B_var, false);
    }
    TriggerEnable(gt_MidCinematicWarpInOrders, true);
    libNtve_gf_PauseUnit(gv_superWarpGateP6, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoBAD08B60_g;
    int autoBAD08B60_u;
    unit autoBAD08B60_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(400), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(567), 15.0, -1, 10, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus02MusicAlt", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_midCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    // Transmission - SoundLink("TTychus02Adjutant00040", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Adjutant00040", -1), c_transmissionDurationAdd, 0.0, true);
    autoBAD08B60_g = UnitGroup(null, gv_p7_ABANDONED_BASE, RegionFromId(10), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBAD08B60_u = UnitGroupCount(autoBAD08B60_g, c_unitCountAll);
    for (;; autoBAD08B60_u -= 1) {
        autoBAD08B60_var = UnitGroupUnitFromEnd(autoBAD08B60_g, autoBAD08B60_u);
        if (autoBAD08B60_var == null) { break; }
        if ((UnitGetType(autoBAD08B60_var) == "MissileTurret")) {
            libNtve_gf_PauseUnit(autoBAD08B60_var, false);
        }

        libNtve_gf_RescueUnit(autoBAD08B60_var, gv_p1_USER, true);
        Wait(0.25, c_timeGame);
    }
    libNtve_gf_RescueUnit(UnitFromId(44), gv_p1_USER, true);
    Wait(2.0, c_timeGame);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(566), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(568), (SoundLengthSync(SoundLink("TTychus02Tychus00008", -1)) - 1.0), -1, 10, true);
    // Transmission - SoundLink("TTychus02Tychus00008", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Tychus00008", -1), c_transmissionDurationAdd, 0.0, false);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_tHEONEDRILL), "Default");
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_tHEONEDRILL), c_animNameDefault, "Stand Work Start 01", c_animFlagNonLooping, c_animTimeDefault);
    Wait(6.0, c_timeReal);
    SoundPlay(SoundLink("Battlecruiser_YamatoAttackChargeUp", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_PauseUnit(gv_tHEONEDRILL, false);
    UnitIssueOrder(gv_tHEONEDRILL, OrderTargetingUnit(AbilityCommand("AttackAllowsInvulnerable", 0), gv_tHEONEDOOR), c_orderQueueReplace);
    Wait((SoundLengthSync(SoundLink("TTychus02Tychus00008", -1)) - 4.0), c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(393), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(549), (SoundLengthSync(SoundLink("TTychus02Horner00039", -1)) - 1.0), -1, 10, true);
    // Transmission - SoundLink("TTychus02Horner00039", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Horner00039", -1), c_transmissionDurationAdd, 0.0, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Nexus", 0, gv_p6_PROTOSSAir, PointFromId(696));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Gateway", 0, gv_p6_PROTOSSAir, PointFromId(697));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Gateway", 0, gv_p6_PROTOSSAir, PointFromId(699));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Pylon", 0, gv_p6_PROTOSSAir, PointFromId(701));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Pylon", 0, gv_p6_PROTOSSAir, PointFromId(700));
    libNtve_gf_CreateUnitsAtPoint2(1, "Probe", 0, gv_p6_PROTOSSAir, PointFromId(1034));
    libNtve_gf_CreateUnitsAtPoint2(1, "Probe", 0, gv_p6_PROTOSSAir, PointFromId(1035));
    libNtve_gf_CreateUnitsAtPoint2(1, "Probe", 0, gv_p6_PROTOSSAir, PointFromId(1036));
    libNtve_gf_CreateUnitsAtPoint2(1, "Probe", 0, gv_p6_PROTOSSAir, PointFromId(1037));
    libNtve_gf_CreateUnitsAtPoint2(1, "Probe", 0, gv_p6_PROTOSSAir, PointFromId(1038));
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_p6_PROTOSSAir);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(674), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(675), (SoundLengthSync(SoundLink("TTychus02Horner00037", -1)) - 0.0), -1, 10, true);
    TriggerExecute(gt_MidCinematicWarpIn, true, false);
    SoundPlay(SoundLink("TUIWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
    // Transmission - SoundLink("TTychus02Horner00037", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Horner00037", -1), c_transmissionDurationAdd, 2.0, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(499), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(587), SoundLengthSync(SoundLink("TTychus02Raynor00041", -1)), -1, 10, true);
    // Transmission - SoundLink("TTychus02Raynor00041", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Raynor00041", -1), c_transmissionDurationAdd, 1.0, false);
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectLarge", PointFromId(257));
    gv_midCinematicPings[1] = libNtve_gf_ActorLastCreated();
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectLarge", PointFromId(669));
    gv_midCinematicPings[2] = libNtve_gf_ActorLastCreated();
    Wait(3.0, c_timeGame);
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectLarge", PointFromId(672));
    gv_midCinematicPings[3] = libNtve_gf_ActorLastCreated();
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectLarge", PointFromId(673));
    gv_midCinematicPings[4] = libNtve_gf_ActorLastCreated();
    Wait(3.0, c_timeGame);
    gv_midCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_midCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    const int auto3EF974CF_ae = 4;
    int auto3EF974CF_var;
    unitgroup autoBEA7B7A9_g;
    int autoBEA7B7A9_u;
    unit autoBEA7B7A9_var;
    unitgroup auto3349F88C_g;
    int auto3349F88C_u;
    unit auto3349F88C_var;
    unitgroup autoAF2C96E9_g;
    int autoAF2C96E9_u;
    unit autoAF2C96E9_var;
    unitgroup auto08823487_g;
    int auto08823487_u;
    unit auto08823487_var;
    unitgroup autoF6C0C4EE_g;
    int autoF6C0C4EE_u;
    unit autoF6C0C4EE_var;
    unitgroup auto8C8E2B83_g;
    int auto8C8E2B83_u;
    unit auto8C8E2B83_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_MidCinematicWarpInOrders, false);
    TriggerStop(gt_MidCinematicWarpIn);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_tHEONEDOOR), c_animNameDefault, "Stand A End", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_tHEONEDRILL), "Default");
    auto3EF974CF_var = 1;
    for ( ; auto3EF974CF_var <= auto3EF974CF_ae; auto3EF974CF_var += 1 ) {
        libNtve_gf_KillModel(gv_midCinematicPings[auto3EF974CF_var]);
    }
    autoBEA7B7A9_g = UnitGroup(null, gv_p6_PROTOSSAir, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBEA7B7A9_u = UnitGroupCount(autoBEA7B7A9_g, c_unitCountAll);
    for (;; autoBEA7B7A9_u -= 1) {
        autoBEA7B7A9_var = UnitGroupUnitFromEnd(autoBEA7B7A9_g, autoBEA7B7A9_u);
        if (autoBEA7B7A9_var == null) { break; }
        UnitRemove(autoBEA7B7A9_var);
    }
    auto3349F88C_g = gv_midCinematicProtoss;
    auto3349F88C_u = UnitGroupCount(auto3349F88C_g, c_unitCountAll);
    for (;; auto3349F88C_u -= 1) {
        auto3349F88C_var = UnitGroupUnitFromEnd(auto3349F88C_g, auto3349F88C_u);
        if (auto3349F88C_var == null) { break; }
        UnitRemove(auto3349F88C_var);
    }
    autoAF2C96E9_g = gv_midHiddenUnitGroup;
    autoAF2C96E9_u = UnitGroupCount(autoAF2C96E9_g, c_unitCountAll);
    for (;; autoAF2C96E9_u -= 1) {
        autoAF2C96E9_var = UnitGroupUnitFromEnd(autoAF2C96E9_g, autoAF2C96E9_u);
        if (autoAF2C96E9_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoAF2C96E9_var, true);
    }
    auto08823487_g = UnitGroup(null, gv_p6_PROTOSSAir, RegionCircle(RegionGetCenter(RegionFromId(2)), 24.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto08823487_u = UnitGroupCount(auto08823487_g, c_unitCountAll);
    for (;; auto08823487_u -= 1) {
        auto08823487_var = UnitGroupUnitFromEnd(auto08823487_g, auto08823487_u);
        if (auto08823487_var == null) { break; }
        AISetUnitSuicide(auto08823487_var, true);
    }
    TriggerExecute(gt_MidMovePlayerUnits, true, false);
    UnitPauseAll(false);
    libNtve_gf_PauseUnit(gv_tHEONEDRILL, false);
    libNtve_gf_ShareVisionofUnit(gv_tHEONEDOOR, true, gv_p1_USER);
    libNtve_gf_ShareVisionofUnit(gv_tHEONEDOOR, true, UnitGetOwner(gv_tHEONEDRILL));
    libNtve_gf_MakeUnitInvulnerable(gv_tHEONEDOOR, false);
    UnitIssueOrder(gv_tHEONEDRILL, OrderTargetingUnit(AbilityCommand("AttackAllowsInvulnerable", 0), gv_tHEONEDOOR), c_orderQueueReplace);
    UnitSetPropertyFixed(gv_tHEONEDOOR, c_unitPropLifePercent, 100.0);
    autoF6C0C4EE_g = gv_sCVs;
    autoF6C0C4EE_u = UnitGroupCount(autoF6C0C4EE_g, c_unitCountAll);
    for (;; autoF6C0C4EE_u -= 1) {
        autoF6C0C4EE_var = UnitGroupUnitFromEnd(autoF6C0C4EE_g, autoF6C0C4EE_u);
        if (autoF6C0C4EE_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoF6C0C4EE_var, true);
        libNtve_gf_RescueUnit(autoF6C0C4EE_var, gv_p1_USER, true);
    }
    auto8C8E2B83_g = UnitGroup(null, gv_p7_ABANDONED_BASE, RegionFromId(10), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8C8E2B83_u = UnitGroupCount(auto8C8E2B83_g, c_unitCountAll);
    for (;; auto8C8E2B83_u -= 1) {
        auto8C8E2B83_var = UnitGroupUnitFromEnd(auto8C8E2B83_g, auto8C8E2B83_u);
        if (auto8C8E2B83_var == null) { break; }
        libNtve_gf_RescueUnit(auto8C8E2B83_var, gv_p1_USER, true);
    }
    libNtve_gf_RescueUnit(UnitFromId(44), gv_p1_USER, true);
    UnitSetPropertyFixed(UnitFromId(508), c_unitPropEnergy, 50.0);
    GameTimeOfDayPause(false);
    GameSetBackground(c_backgroundFixed, null, 100.0);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, true);
    libNtve_gf_RestoreUnitSelection(gv_p1_USER);
    CameraRestore(gv_p1_USER, 0.0, -1, 10);
    libNtve_gf_SwooshCamera(gv_p1_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), UnitGetPosition(UnitFromId(508)), 1.5);
    VisRevealArea(gv_p1_USER, RegionFromId(6), 0.0, false);
    VisRevealArea(gv_p1_USER, RegionFromId(5), 0.1, false);
    VisRevealArea(gv_p1_USER, RegionFromId(13), 0.1, false);
    VisRevealArea(gv_p1_USER, RegionFromId(14), 0.1, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus02MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    if ((gv_midCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, true);
    TriggerExecute(gt_StartGameDefensePhase, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Move Player Units
//--------------------------------------------------------------------------------------------------
bool gt_MidMovePlayerUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_siegeTankGroup;
    unitgroup lv_infantryGroup;
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto2DB2A002_g;
    int auto2DB2A002_u;
    unit auto2DB2A002_var;
    int auto7E34D74B_ae;
    const int auto7E34D74B_ai = 1;

    // Variable Initialization
    lv_siegeTankGroup = UnitGroupEmpty();
    lv_infantryGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto2DB2A002_g = UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2DB2A002_u = UnitGroupCount(auto2DB2A002_g, c_unitCountAll);
    for (;; auto2DB2A002_u -= 1) {
        auto2DB2A002_var = UnitGroupUnitFromEnd(auto2DB2A002_g, auto2DB2A002_u);
        if (auto2DB2A002_var == null) { break; }
        UnitIssueOrder(auto2DB2A002_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        if ((UnitGetType(auto2DB2A002_var) != "SiegeTankSieged") && (UnitGetType(auto2DB2A002_var) != "SiegeTank")) {
            UnitGroupAdd(lv_infantryGroup, auto2DB2A002_var);
        }
        else {
            UnitGroupAdd(lv_siegeTankGroup, auto2DB2A002_var);
        }
    }
    UnitSetPosition(UnitGroupUnit(lv_siegeTankGroup, 1), PointFromId(359), false);
    UnitSetPosition(UnitGroupUnit(lv_siegeTankGroup, 2), PointFromId(1032), false);
    auto7E34D74B_ae = UnitGroupCount(lv_infantryGroup, c_unitCountAlive);
    lv_i = 1;
    for ( ; ( (auto7E34D74B_ai >= 0 && lv_i <= auto7E34D74B_ae) || (auto7E34D74B_ai < 0 && lv_i >= auto7E34D74B_ae) ) ; lv_i += auto7E34D74B_ai ) {
        UnitSetPosition(UnitGroupUnit(lv_infantryGroup, lv_i), PointWithOffsetPolar(PointFromId(58), 1.5, (IntToFixed(lv_i) * (360.0 / IntToFixed(UnitGroupCount(lv_infantryGroup, c_unitCountAlive))))), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidMovePlayerUnits_Init () {
    gt_MidMovePlayerUnits = TriggerCreate("gt_MidMovePlayerUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic Warp In
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicWarpIn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_superWarpGateP6, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(676)), c_orderQueueReplace);
    Wait(0.25, c_timeGame);
    UnitIssueOrder(gv_superWarpGateP6, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(682)), c_orderQueueReplace);
    Wait(0.25, c_timeGame);
    UnitIssueOrder(gv_superWarpGateP6, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(681)), c_orderQueueReplace);
    Wait(0.25, c_timeGame);
    UnitIssueOrder(gv_superWarpGateP6, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(677)), c_orderQueueReplace);
    Wait(0.25, c_timeGame);
    UnitIssueOrder(gv_superWarpGateP6, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(685)), c_orderQueueReplace);
    Wait(0.25, c_timeGame);
    UnitIssueOrder(gv_superWarpGateP6, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(678)), c_orderQueueReplace);
    Wait(0.25, c_timeGame);
    UnitIssueOrder(gv_superWarpGateP6, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(679)), c_orderQueueReplace);
    Wait(0.25, c_timeGame);
    UnitIssueOrder(gv_superWarpGateP6, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(680)), c_orderQueueReplace);
    Wait(1.5, c_timeGame);
    UnitIssueOrder(gv_superWarpGateP6, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(684)), c_orderQueueReplace);
    Wait(0.25, c_timeGame);
    UnitIssueOrder(gv_superWarpGateP6, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(686)), c_orderQueueReplace);
    Wait(0.25, c_timeGame);
    UnitIssueOrder(gv_superWarpGateP6, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(687)), c_orderQueueReplace);
    Wait(0.25, c_timeGame);
    UnitIssueOrder(gv_superWarpGateP6, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(1033)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicWarpIn_Init () {
    gt_MidCinematicWarpIn = TriggerCreate("gt_MidCinematicWarpIn_Func");
    TriggerEnable(gt_MidCinematicWarpIn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic Warp In Orders
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicWarpInOrders_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p6_PROTOSSAir))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Zealot") || (UnitGetType(EventUnit()) == "Stalker")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_midCinematicProtoss, EventUnit());
    Wait(8.0, c_timeGame);
    if ((RandomInt(1, 2) == 1)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(688)), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(772)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicWarpInOrders_Init () {
    gt_MidCinematicWarpInOrders = TriggerCreate("gt_MidCinematicWarpInOrders_Func");
    TriggerEnable(gt_MidCinematicWarpInOrders, false);
    TriggerAddEventUnitRegion(gt_MidCinematicWarpInOrders, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pickedUnit;

    // Automatic Variable Declarations
    unitgroup auto0C470240_g;
    int auto0C470240_u;
    unit auto0C470240_var;
    unitgroup auto5B360A22_g;
    int auto5B360A22_u;
    unit auto5B360A22_var;
    unitgroup auto460A93BD_g;
    int auto460A93BD_u;
    unit auto460A93BD_var;
    unitgroup auto5FBD5882_g;
    int auto5FBD5882_u;
    unit auto5FBD5882_var;
    unitgroup autoB6155044_g;
    int autoB6155044_u;
    unit autoB6155044_var;
    unitgroup autoB60AC8BC_g;
    int autoB60AC8BC_u;
    unit autoB60AC8BC_var;
    unitgroup autoAA124B84_g;
    int autoAA124B84_u;
    unit autoAA124B84_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.2);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_p1_USER);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, false);
    GameTimeOfDaySetLength(0.0);
    GameSetBackground(c_backgroundFixed, "XilSkybox", 100.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitGroupUnit(UnitGroup("XelNagaTemple", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1)), c_animNameDefault, "Stand D End", c_animFlagPlayForever, c_animTimeDefault);
    if ((gv_soundRegionCreated == true)) {
        ActorScopeSend(ActorScopeFromActor(gv_soundRegionActor), "Signal StopSound");
        gv_soundRegion = RegionEmpty();
        gv_soundRegionCreated = false;
    }

    UnitPauseAll(true);
    AITimePause(true);
    UnitRemove(gv_tHEONEDRILL);
    auto0C470240_g = UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0C470240_u = UnitGroupCount(auto0C470240_g, c_unitCountAll);
    for (;; auto0C470240_u -= 1) {
        auto0C470240_var = UnitGroupUnitFromEnd(auto0C470240_g, auto0C470240_u);
        if (auto0C470240_var == null) { break; }
        UnitRemove(auto0C470240_var);
    }
    auto5B360A22_g = UnitGroup(null, gv_p2_NE_PROTOSSMiddle, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5B360A22_u = UnitGroupCount(auto5B360A22_g, c_unitCountAll);
    for (;; auto5B360A22_u -= 1) {
        auto5B360A22_var = UnitGroupUnitFromEnd(auto5B360A22_g, auto5B360A22_u);
        if (auto5B360A22_var == null) { break; }
        UnitRemove(auto5B360A22_var);
    }
    auto460A93BD_g = UnitGroup(null, gv_p3_WARPEDINPROTOSS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto460A93BD_u = UnitGroupCount(auto460A93BD_g, c_unitCountAll);
    for (;; auto460A93BD_u -= 1) {
        auto460A93BD_var = UnitGroupUnitFromEnd(auto460A93BD_g, auto460A93BD_u);
        if (auto460A93BD_var == null) { break; }
        UnitRemove(auto460A93BD_var);
    }
    auto5FBD5882_g = UnitGroup(null, gv_p4_SE_PROTOSSRight, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5FBD5882_u = UnitGroupCount(auto5FBD5882_g, c_unitCountAll);
    for (;; auto5FBD5882_u -= 1) {
        auto5FBD5882_var = UnitGroupUnitFromEnd(auto5FBD5882_g, auto5FBD5882_u);
        if (auto5FBD5882_var == null) { break; }
        UnitRemove(auto5FBD5882_var);
    }
    autoB6155044_g = UnitGroup(null, gv_p5_NW_PROTOSSLeft, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB6155044_u = UnitGroupCount(autoB6155044_g, c_unitCountAll);
    for (;; autoB6155044_u -= 1) {
        autoB6155044_var = UnitGroupUnitFromEnd(autoB6155044_g, autoB6155044_u);
        if (autoB6155044_var == null) { break; }
        UnitRemove(autoB6155044_var);
    }
    autoB60AC8BC_g = UnitGroup(null, gv_p6_PROTOSSAir, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB60AC8BC_u = UnitGroupCount(autoB60AC8BC_g, c_unitCountAll);
    for (;; autoB60AC8BC_u -= 1) {
        autoB60AC8BC_var = UnitGroupUnitFromEnd(autoB60AC8BC_g, autoB60AC8BC_u);
        if (autoB60AC8BC_var == null) { break; }
        UnitRemove(autoB60AC8BC_var);
    }
    autoAA124B84_g = UnitGroup("PathingBlocker1x1", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoAA124B84_u = UnitGroupCount(autoAA124B84_g, c_unitCountAll);
    for (;; autoAA124B84_u -= 1) {
        autoAA124B84_var = UnitGroupUnitFromEnd(autoAA124B84_g, autoAA124B84_u);
        if (autoAA124B84_var == null) { break; }
        UnitRemove(autoAA124B84_var);
    }
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "FlatbedTruck", 0, 0, PointFromId(1039));
    libNtve_gf_AttachModelToUnit(UnitLastCreated(), "ArtifactPiece3", "Ref_Hardpoint");
    gv_victoryTruck = UnitLastCreated();
    gv_victoryMarineFormationLeft[1] = PointFromId(604);
    gv_victoryMarineFormationLeft[2] = PointFromId(605);
    gv_victoryMarineFormationLeft[3] = PointFromId(606);
    gv_victoryMarineFormationLeft[4] = PointFromId(611);
    gv_victoryMarineFormationLeft[5] = PointFromId(612);
    gv_victoryMarineFormationLeft[6] = PointFromId(647);
    gv_victoryMarineFormationLeft[7] = PointFromId(663);
    gv_victoryMarineFormationLeft[8] = PointFromId(666);
    gv_victoryMarineFormationRight[1] = PointFromId(596);
    gv_victoryMarineFormationRight[2] = PointFromId(597);
    gv_victoryMarineFormationRight[3] = PointFromId(598);
    gv_victoryMarineFormationRight[4] = PointFromId(599);
    gv_victoryMarineFormationRight[5] = PointFromId(600);
    gv_victoryMarineFormationRight[6] = PointFromId(601);
    gv_victoryMarineFormationRight[7] = PointFromId(602);
    gv_victoryMarineFormationRight[8] = PointFromId(603);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_victoryMarinesLeft;
    unitgroup lv_victoryMarinesRight;
    unit lv_victoryTANK1;
    unit lv_victoryTANK2;
    unit lv_victoryDropship;

    // Automatic Variable Declarations
    const int autoAC1EACCB_ae = 8;
    int autoAC1EACCB_var;
    const int auto7F03A934_ae = 8;
    int auto7F03A934_var;

    // Variable Initialization
    lv_victoryMarinesLeft = UnitGroupEmpty();
    lv_victoryMarinesRight = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PauseUnit(gv_tHEONEDRILL, false);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(346), 0.0, -1, 10, true);
    TriggerExecute(gt_VictoryDropship, true, false);
    PlayerScoreValueEnable(gv_p1_USER, "UnitsTotalCount", false);
    autoAC1EACCB_var = 1;
    for ( ; autoAC1EACCB_var <= autoAC1EACCB_ae; autoAC1EACCB_var += 1 ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, 1, gv_victoryMarineFormationLeft[autoAC1EACCB_var]);
        UnitGroupAdd(lv_victoryMarinesLeft, UnitLastCreated());
    }
    auto7F03A934_var = 1;
    for ( ; auto7F03A934_var <= auto7F03A934_ae; auto7F03A934_var += 1 ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, 1, gv_victoryMarineFormationRight[auto7F03A934_var]);
        UnitGroupAdd(lv_victoryMarinesRight, UnitLastCreated());
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p1_USER, PointFromId(1496));
    gv_victoryMarine1 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p1_USER, PointFromId(1495));
    gv_victoryMarine2 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "SiegeTank", 0, 1, PointFromId(594));
    lv_victoryTANK1 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "SiegeTank", 0, 1, PointFromId(594));
    lv_victoryTANK2 = UnitLastCreated();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus02MusicOutro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupSingle(gv_p1_USER), 0, null, true, true);
    gv_victoryCinematicCompleted = false;
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(347), 8.0, -1, 10, true);
    TriggerExecute(gt_VictoryInitialMarineMove, true, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UnitIssueOrder(gv_victoryTruck, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1168)), c_orderQueueReplace);
    // Transmission - SoundLink("TTychus02TalDarimExecutor00066", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02TalDarimExecutor00066", -1), c_transmissionDurationAdd, 0.0, false);
    Wait((SoundLengthSync(SoundLink("TTychus02TalDarimExecutor00066", -1)) - 2.0), c_timeReal);
    UnitGroupIssueOrder(lv_victoryMarinesLeft, OrderTargetingRelativePoint(AbilityCommand("attack", 0), PointFromId(374)), c_orderQueueReplace);
    UnitGroupIssueOrder(lv_victoryMarinesRight, OrderTargetingRelativePoint(AbilityCommand("attack", 0), PointFromId(376)), c_orderQueueReplace);
    UnitIssueOrder(lv_victoryTANK1, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(378)), c_orderQueueReplace);
    UnitIssueOrder(lv_victoryTANK1, Order(AbilityCommand("SiegeMode", 0)), c_orderQueueAddToEnd);
    UnitIssueOrder(lv_victoryTANK2, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(558)), c_orderQueueReplace);
    UnitIssueOrder(lv_victoryTANK2, Order(AbilityCommand("SiegeMode", 0)), c_orderQueueAddToEnd);
    Wait(2.0, c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(1040), ((SoundLengthSync(SoundLink("TTychus02Raynor00067", -1)) + SoundLengthSync(SoundLink("TTychus02Tychus00007", -1))) + 1.0), -1, 10, true);
    // Transmission - SoundLink("TTychus02Raynor00067", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Raynor00067", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTychus02Tychus00007", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Tychus00007", -1), c_transmissionDurationAdd, 0.0, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(1041), SoundLengthSync(SoundLink("TTychus02Raynor00015", -1)), -1, 10, true);
    // Transmission - SoundLink("TTychus02Raynor00015", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02Raynor00015", -1), c_transmissionDurationAdd, 0.0, true);
    gv_victoryCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victoryCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Victory, true, false);
    UnitPauseAll(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Initial Marine Move
//--------------------------------------------------------------------------------------------------
bool gt_VictoryInitialMarineMove_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(6.0, c_timeGame);
    UnitIssueOrder(gv_victoryMarine1, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1127)), c_orderQueueReplace);
    UnitIssueOrder(gv_victoryMarine2, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1122)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryInitialMarineMove_Init () {
    gt_VictoryInitialMarineMove = TriggerCreate("gt_VictoryInitialMarineMove_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Dropship
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDropship_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_victoryDropship;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "SpecialOpsDropship", 0, gv_p1_USER, PointFromId(258));
    lv_victoryDropship = UnitLastCreated();
    Wait(1.0, c_timeReal);
    Wait((SoundLengthSync(SoundLink("TTychus02TalDarimExecutor00066", -1)) - 0.0), c_timeReal);
    UnitIssueOrder(lv_victoryDropship, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1143)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDropship_Init () {
    gt_VictoryDropship = TriggerCreate("gt_VictoryDropship_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04Music_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulty_Init();
    gt_Init07Help_Init();
    gt_IntroSequence_Init();
    gt_StartGameTacticalPhase_Init();
    gt_MMDropoff_Init();
    gt_ZealotAggroQ_Init();
    gt_RaynorQ_Init();
    gt_RemoveDropships_Init();
    gt_SiegeTankIntroQ_Init();
    gt_SiegeTanksComeIn_Init();
    gt_SiegeTankDropoff_Init();
    gt_SiegeTankTipQ_Init();
    gt_SiegeTankCameraPan1_Init();
    gt_SiegeTankTutorialQ_Init();
    gt_SiegeTankCameraPan2_Init();
    gt_StalkerAggro_Init();
    gt_TacticalVictory_Init();
    gt_StartGameDefensePhase_Init();
    gt_WeneedTanksandBunkersQ15s_Init();
    gt_ProtossincomingQ65s_Init();
    gt_UseLaserDrillQ360s_Init();
    gt_RevealRelicShrinesQ_Init();
    gt_DelayedRelicReveal630s_Init();
    gt_CampaignTipsQ_Init();
    gt_PlayerIsInCombat_Init();
    gt_PlayerIsInCombatIndicatorDiminish_Init();
    gt_CreateTempleDoorBossBar_Init();
    gt_Laserdrillunderattack01Q_Init();
    gt_Laserdrillunderattack02Q_Init();
    gt_Laserdrillunderattack03Q_Init();
    gt_Laserdrillunderattack04Q_Init();
    gt_DrillisrepairabletipQ_Init();
    gt_Laserisattackedbyenemy_Init();
    gt_LaserisattackedbyplayerQ_Init();
    gt_LaserkillsaplayerunitQ_Init();
    gt_Laserkillsaprotossunit_Init();
    gt__10AnniversaryAchievementLaserKillsTracking_Init();
    gt_LaserSoundFiringDelay_Init();
    gt_LaserSoundRegionClear_Init();
    gt_LaserSoundFiring_Init();
    gt_LaserDrillDies_Init();
    gt_TempleHPEvents_Init();
    gt_TempleHPLow1Q_Init();
    gt_TempleHPLow2Q_Init();
    gt_TempleHPLow3Q19m_Init();
    gt_TempleHPLow4Q_Init();
    gt_PrismAttackPhase1Training_Init();
    gt_PrismAttackPhase1aWarpedIn_Init();
    gt_PrismAttackPhase2NW_Init();
    gt_PrismAttackPhase2NE_Init();
    gt_PrismAttackPhase2SE_Init();
    gt_PrismAttackPhase2aWarnPlayer_Init();
    gt_PrismAttackPhase3Arrival_Init();
    gt_IncomingPrismAttack01Q_Init();
    gt_IncomingPrismAttack02Q_Init();
    gt_IncomingPrismAttack03Q_Init();
    gt_SendDelayedAttackWaveThread_Init();
    gt_StartAI_Init();
    gt_AIAttackWaves_Init();
    gt_AIColossusWave_Init();
    gt_AIEndSuicide_Init();
    gt_AIP6WarpInSuicide_Init();
    gt_AIP6CargoDropSuicide_Init();
    gt_PingDangerousUnits_Init();
    gt_PingDangerousUnitsDeathTransfer_Init();
    gt_PingDangerousUnitsBullyRemoval_Init();
    gt_AIEndlessMinerals_Init();
    gt_AIEndlessGas_Init();
    gt_Shrine1Killed_Init();
    gt_Shrine2Killed_Init();
    gt_Shrine3Killed_Init();
    gt_CarrionBirds_Init();
    gt_CarrionBirdFlysAway_Init();
    gt_SiegeTankKills_Init();
    gt_DetermineRemainingProtoss_Init();
    gt_AchievementLaserDrill20Kills_Init();
    gt_Achievement50ProtossStructuresDestroyed_Init();
    gt_VictoryDestroyDoor_Init();
    gt_VictoryDestroyProtoss_Init();
    gt_VictoryDestroyProtossDialogueQ_Init();
    gt_Victory_Init();
    gt_DefeatTacticalTroopsDestroyed_Init();
    gt_DefeatLaserDrillDestroyed_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_PrimaryObjectiveExploreCreate_Init();
    gt_PrimaryObjectiveExploreDiscovered_Init();
    gt_PrimaryObjectiveExploreCompleted_Init();
    gt_PrimaryObjectiveOpenShrineCreate_Init();
    gt_PrimaryObjectiveOpenShrineDiscovered_Init();
    gt_PrimaryObjectiveOpenShrineCompleted_Init();
    gt_ObjectiveRelicsCreateQ_Init();
    gt_ObjectiveRelicsUpdate_Init();
    gt_ObjectiveRelicsComplete_Init();
    gt_BriefingQ_Init();
    gt_BriefingScene00_Init();
    gt_BriefingScene01_Init();
    gt_BriefingScene02_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_MidMovePlayerUnits_Init();
    gt_MidCinematicWarpIn_Init();
    gt_MidCinematicWarpInOrders_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryInitialMarineMove_Init();
    gt_VictoryDropship_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
