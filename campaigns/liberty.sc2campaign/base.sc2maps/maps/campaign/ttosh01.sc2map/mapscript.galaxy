//==================================================================================================
// 
// Generated Map Script
// 
// Name:   The Devil's Playground
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/CampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libCamp_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_p01_USER = 1;
const int gv_p02_ZERG = 2;
const int gv_p03_LAVA = 3;
const int gv_p04_ZERG = 4;
const int gv_p05_TOSH = 5;
const int gv_p06_SWANN = 6;
const int gv_cRITTER_GROUPS = 11;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_RECORD_Ambusher {
    unit lv_ambusher;
    point lv_position;
    fixed lv_burrowedHealth;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_inCinematic;
int gv_noOfLavaSurges;
playergroup gv_zergPlayers;
int gv_eventNumber;
unitgroup gv_dirtyBanelingCrew;
unitgroup[16] gv_critterGroups;
region[16] gv_critterHavens;
unitgroup gv_startingMineralFields;
int gv_mineralBoard;
int gv_toshMinersPing;
bool gv_toshMinersRescued;
int gv_brutaliskPing;
actor gv_brutaliskPingActor;
timer gv_sCVLossTimer;
int gv_sCVsLost;
int gv_combatUnitsTrained;
int gv_unitsRescued;
int gv_totalUnitsToRescue;
int gv_mineralsFromPickups;
unitgroup gv_toshReapers;
timer gv_lavaTimer;
timer gv_warning01Timer;
timer gv_warning02Timer;
int gv_lavaTimerWindow;
fixed gv_lavaInterval;
bool gv_lowGroundIsSafe;
bool gv_timerCreated;
bool gv_firstWarning;
int gv_objectiveMineralsQuota;
int gv_objectiveCollect;
int gv_objectiveRescue;
int gv_researchObjectiveKilltheBrutalisk;
int gv_brutaliskKilled;
unit gv_brutalisk;
unit gv_briefing_SCV5;
unit gv_briefing_SCV4;
unit gv_briefing_SCV3;
unit gv_briefing_SCV2;
unit gv_briefing_SCV1;
unit gv_briefing_CoCe;
unit gv_victoryDropship;
unit gv_victoryCoCe;
unitgroup gv_victorySCV;
unitgroup gv_victoryZergling;
unitgroup gv_victoryMarines;
unitgroup gv_victoryHiddenUnitGroup;
bool gv_victoryCinematicCompleted;

void InitGlobals () {
    int init_i;

    gv_zergPlayers = PlayerGroupEmpty();
    gv_dirtyBanelingCrew = UnitGroupEmpty();
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_critterGroups[init_i] = UnitGroupEmpty();
    }
    gv_startingMineralFields = UnitGroupEmpty();
    gv_mineralBoard = c_timerWindowNone;
    gv_toshMinersPing = c_invalidPingId;
    gv_brutaliskPing = c_invalidPingId;
    gv_sCVLossTimer = TimerCreate();
    gv_toshReapers = UnitGroupEmpty();
    gv_lavaTimer = TimerCreate();
    gv_warning01Timer = TimerCreate();
    gv_warning02Timer = TimerCreate();
    gv_lowGroundIsSafe = true;
    gv_firstWarning = true;
    gv_objectiveMineralsQuota = libNtve_gf_DifficultyValueInt(7000, 8000, 8000, 8000);
    gv_objectiveCollect = c_invalidObjectiveId;
    gv_objectiveRescue = c_invalidObjectiveId;
    gv_researchObjectiveKilltheBrutalisk = c_invalidObjectiveId;
    gv_victorySCV = UnitGroupEmpty();
    gv_victoryZergling = UnitGroupEmpty();
    gv_victoryMarines = UnitGroupEmpty();
    gv_victoryHiddenUnitGroup = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
unitgroup gf_CrittersInRegion (region lp_area);
void gf_ZerglingStampede (int lp_noOfZerglings, point lp_spawnPoint);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04Music;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_IntroSequence;
trigger gt_StartGame;
trigger gt_StartHarvesting;
trigger gt_EventTiming;
trigger gt_StartAI;
trigger gt_P2ZergAIWaves;
trigger gt_P4ZergAIWaves;
trigger gt_AIGiveMinerals;
trigger gt_AIGiveGas;
trigger gt_DirtyBanelingCrewListen;
trigger gt_DirtyBanelingCrewViaDamage;
trigger gt_DirtyBanelingCrewViaMovement;
trigger gt_DirtyBanelingCrewActions;
trigger gt_CritterInit;
trigger gt_MakeCrittersFlee;
trigger gt_MakeCrittersReturn;
trigger gt_CritterBabies;
trigger gt_CreateLeaderboard;
trigger gt_UpdateLeaderboard;
trigger gt_BurrowAmbushGlobalTrigger;
trigger gt_BurrowAmbushRegion04;
trigger gt_BrutaliskIntroTimed;
trigger gt_BrutaliskIntroProximity;
trigger gt_BrutaliskCallout;
trigger gt_BrutaliskRemovePingActor;
trigger gt_FindToshsMiners;
trigger gt_RescuedToshsMiners;
trigger gt_HatcheryDestroyedShowResources;
trigger gt_SpawnResourcesRightSide;
trigger gt_SCVReinforcements;
trigger gt_SCVReinforcementsTimeout;
trigger gt_StartingBaseMinedOut;
trigger gt_CommandCenterReplacement;
trigger gt_MineralPickups;
trigger gt_IntroReapersChangeOwner;
trigger gt_IntroReapersChangeFailsafe;
trigger gt_ReapersReinforcements01;
trigger gt_ReapersReinforcements02;
trigger gt_ReapersReinforcements03;
trigger gt_ReapersReinforcements04;
trigger gt_ReapersReinforcements05;
trigger gt_FirstSurge;
trigger gt_LavaTimerCreate;
trigger gt_LavaSurgeMusic;
trigger gt_CameraShakeWeak;
trigger gt_CameraShakeStrong;
trigger gt_CameraShakeDuringLava;
trigger gt_LavaTurnsON;
trigger gt_LavaTurnsOFF;
trigger gt_LavaDamage;
trigger gt_LavaWarning01Q;
trigger gt_LavaWarning02Q;
trigger gt_ItsSafeQ;
trigger gt_TransmissionSCVReinforcementsQ;
trigger gt_TransmissionCommandCenterReplacementQ;
trigger gt_TransmissionIntroLavaTimerQ;
trigger gt_TransmissionReaperIntroQ;
trigger gt_TransmissionWatchSpendingWarningQ;
trigger gt_TransmissionFindToshsMissingMinersQ;
trigger gt_TransmissionMissingMinersFoundQ;
trigger gt_TransmissionBrutaliskWarningQ;
trigger gt_TransmissionMineralNodeReveal1Q;
trigger gt_MineralNodeReveal1;
trigger gt_TransmissionMineralNodeReveal2Q;
trigger gt_MineralNodeReveal2;
trigger gt_TransmissionMineralNodeReveal3Q;
trigger gt_MineralNodeReveal3;
trigger gt_TransmissionMilestone4000MineralsQ;
trigger gt_TransmissionMilestone6500MineralsQ;
trigger gt_CommandCenterLiftOffTipQ;
trigger gt_ReaperTip;
trigger gt_RichMineralTipQ;
trigger gt_ZergBrutaliskTipQ;
trigger gt_StorymodeTipsQ;
trigger gt_AchievementAllReapersFound;
trigger gt_FeatofStrengthDestroyAllZerg;
trigger gt_VictoryCollectedQuota;
trigger gt_Victory;
trigger gt_DefeatBaseDead;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_ObjectiveCollectCreateQ;
trigger gt_ObjectiveCollectComplete;
trigger gt_ObjectiveRescuePartyCreateQ;
trigger gt_ObjectiveRescuePartyComplete;
trigger gt_ResearchObjectiveKilltheBrutaliskCreateQ;
trigger gt_ResearchObjectiveKilltheBrutaliskUpdate;
trigger gt_BriefingQ;
trigger gt_BriefingScene00;
trigger gt_BriefingScene01;
trigger gt_BriefingScene02;
trigger gt_BriefingRetreat;
trigger gt_BriefingZerglings;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryScene;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
unitgroup gf_CrittersInRegion (region lp_area) {
    // Variable Declarations
    unit lv_u;
    unitgroup lv_critters;

    // Automatic Variable Declarations
    unitgroup autoB434AD4D_g;
    int autoB434AD4D_u;

    // Variable Initialization
    lv_critters = UnitGroupEmpty();

    // Implementation
    autoB434AD4D_g = UnitGroup(null, 0, lp_area, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoB434AD4D_u = UnitGroupCount(autoB434AD4D_g, c_unitCountAll);
    for (;; autoB434AD4D_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(autoB434AD4D_g, autoB434AD4D_u);
        if (lv_u == null) { break; }
        if (((UnitGetType(lv_u) == "RedstoneLavaCritter") || (UnitGetType(lv_u) == "RedstoneLavaCritterBurrowed") || (UnitGetType(lv_u) == "RedstoneLavaCritterInjured") || (UnitGetType(lv_u) == "RedstoneLavaCritterInjuredBurrowed"))) {
            UnitGroupAdd(lv_critters, lv_u);
        }

    }
    return lv_critters;
}

void gf_ZerglingStampede (int lp_noOfZerglings, point lp_spawnPoint) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateUnitsAtPoint2(lp_noOfZerglings, "Zergling", 0, gv_p04_ZERG, lp_spawnPoint);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(105)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(136)), c_orderQueueAddToEnd);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_LoadCampaignData(libCamp_ge_MapID_MapTTosh01);
    TriggerExecute(gt_Init01Technology, true, true);
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04Music, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    libCamp_gf_RegisterFootageRecording(gt_BriefingQ);
    libCamp_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_IntroSequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("D8Charge", 0), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_p01_USER, gv_p02_ZERG, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p03_LAVA, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p04_ZERG, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p05_TOSH, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    PlayerSetAlliance(gv_p05_TOSH, c_allianceIdVision, gv_p01_USER, false);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p06_SWANN, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p02_ZERG, gv_p04_ZERG, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p03_LAVA, gv_p02_ZERG, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p03_LAVA, gv_p04_ZERG, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p05_TOSH, gv_p02_ZERG, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p05_TOSH, gv_p04_ZERG, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p05_TOSH, gv_p06_SWANN, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p06_SWANN, gv_p02_ZERG, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p06_SWANN, gv_p04_ZERG, libNtve_ge_AllianceSetting_Enemy);
    PlayerGroupAdd(gv_zergPlayers, gv_p02_ZERG);
    PlayerGroupAdd(gv_zergPlayers, gv_p04_ZERG);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 300);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropVespene, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_p02_ZERG, c_playerPropMinerals, c_playerPropOperSetTo, 4960);
    PlayerModifyPropertyInt(gv_p02_ZERG, c_playerPropVespene, c_playerPropOperSetTo, 2500);
    PlayerModifyPropertyInt(gv_p04_ZERG, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p05_TOSH, c_playerPropMinerals, c_playerPropOperSetTo, 200);
    PlayerSetColorIndex(gv_p04_ZERG, 4, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_playerHasMercTech;
    int lv_merc;

    // Automatic Variable Declarations
    unitgroup auto14D8C9E8_g;
    int auto14D8C9E8_u;
    unit auto14D8C9E8_var;
    unitgroup autoFB8B7089_g;
    int autoFB8B7089_u;
    unit autoFB8B7089_var;
    unitgroup auto0AC6FF7D_g;
    int auto0AC6FF7D_u;
    unit auto0AC6FF7D_var;
    unitgroup autoC6E77A2C_g;
    int autoC6E77A2C_u;
    unit autoC6E77A2C_var;

    // Variable Initialization
    lv_merc = libCamp_ge_StoryMercID_MercNone;

    // Actions
    if (!runActions) {
        return true;
    }

    PreloadSound("LocalizedData\\Sounds\\TerranUnitVO\\Reaper\\Reaper_Attack02.ogg", false);
    PreloadSound("LocalizedData\\Sounds\\TerranUnitVO\\Reaper\\Reaper_Attack04.ogg", false);
    PreloadSound("LocalizedData\\Sounds\\TerranUnitVO\\Reaper\\Reaper_Attack05.ogg", false);
    PreloadSound("LocalizedData\\Sounds\\TerranUnitVO\\Reaper\\Reaper_Pissed01.ogg", false);
    PreloadSound("LocalizedData\\Sounds\\TerranUnitVO\\Reaper\\Reaper_What02.ogg", false);
    PreloadSound("LocalizedData\\Sounds\\TerranUnitVO\\Reaper\\Reaper_What03.ogg", false);
    gv_brutalisk = UnitFromId(407);
    gv_startingMineralFields = UnitGroup("RichMineralField", 0, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    TriggerExecute(gt_CritterInit, true, false);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "CharAshWeather", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    UnitGroupAdd(gv_toshReapers, UnitFromId(1163));
    UnitGroupAdd(gv_toshReapers, UnitFromId(1159));
    UnitGroupAdd(gv_toshReapers, UnitFromId(1155));
    UnitGroupAdd(gv_toshReapers, UnitFromId(1154));
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(660), true);
    UnitSetState(UnitFromId(660), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(660), c_unitStateTargetable, false);
    auto14D8C9E8_g = UnitGroup(null, gv_p05_TOSH, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto14D8C9E8_u = UnitGroupCount(auto14D8C9E8_g, c_unitCountAll);
    for (;; auto14D8C9E8_u -= 1) {
        auto14D8C9E8_var = UnitGroupUnitFromEnd(auto14D8C9E8_g, auto14D8C9E8_u);
        if (auto14D8C9E8_var == null) { break; }
        UnitSetInfoText(auto14D8C9E8_var, StringToText(""), StringExternal("Param/Value/564FC2A3"), StringToText(""));
    }
    autoFB8B7089_g = UnitGroup(null, gv_p05_TOSH, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFB8B7089_u = UnitGroupCount(autoFB8B7089_g, c_unitCountAll);
    for (;; autoFB8B7089_u -= 1) {
        autoFB8B7089_var = UnitGroupUnitFromEnd(autoFB8B7089_g, autoFB8B7089_u);
        if (autoFB8B7089_var == null) { break; }
        gv_totalUnitsToRescue += 1;
    }
    auto0AC6FF7D_g = UnitGroup("BanelingBurrowed", gv_p02_ZERG, RegionFromId(68), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0AC6FF7D_u = UnitGroupCount(auto0AC6FF7D_g, c_unitCountAll);
    for (;; auto0AC6FF7D_u -= 1) {
        auto0AC6FF7D_var = UnitGroupUnitFromEnd(auto0AC6FF7D_g, auto0AC6FF7D_u);
        if (auto0AC6FF7D_var == null) { break; }
        UnitIssueOrder(auto0AC6FF7D_var, OrderSetAutoCast(AbilityCommand("BurrowZerglingUp", 0), true), c_orderQueueReplace);
        AISetUnitScriptControlled(auto0AC6FF7D_var, true);
        UnitGroupAdd(gv_dirtyBanelingCrew, auto0AC6FF7D_var);
    }
    autoC6E77A2C_g = UnitGroup("BanelingNest", gv_p02_ZERG, RegionFromId(68), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC6E77A2C_u = UnitGroupCount(autoC6E77A2C_g, c_unitCountAll);
    for (;; autoC6E77A2C_u -= 1) {
        autoC6E77A2C_var = UnitGroupUnitFromEnd(autoC6E77A2C_g, autoC6E77A2C_u);
        if (autoC6E77A2C_var == null) { break; }
        UnitGroupAdd(gv_dirtyBanelingCrew, autoC6E77A2C_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init04Music_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTosh01MusicMainMain", c_soundtrackCueAny, c_soundtrackIndexAny);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Music_Init () {
    gt_Init04Music = TriggerCreate("gt_Init04Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    VisExploreArea(gv_p01_USER, RegionFromId(20), true, false);
    GameTimeOfDaySet("08:00:00");
    GameTimeOfDayPause(true);
    GameSetLighting("TTosh01Normal", 0.0);
    libLbty_gf_AutoRevealRegion(RegionFromId(23), RegionFromId(23), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(25), RegionFromId(25), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(27), RegionFromId(27), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(28), RegionFromId(28), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(29), RegionFromId(29), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(31), RegionFromId(31), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(33), RegionFromId(33), gv_p01_USER);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        libLbty_gf_AutoRevealRegion(RegionFromId(68), RegionFromId(70), gv_p01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto1A82A6A6_g;
    int auto1A82A6A6_var;
    playergroup autoC02C0F37_g;
    int autoC02C0F37_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_lavaInterval = libNtve_gf_DifficultyValueFixed(300.0, 300.0, 270.0, 240.0);
    if ((libNtve_gf_DifficultyValueInt(1, 0, 0, 0) == 1)) {
        auto1A82A6A6_g = gv_zergPlayers;
        auto1A82A6A6_var = -1;
        while (true) {
            auto1A82A6A6_var = PlayerGroupNextPlayer(auto1A82A6A6_g, auto1A82A6A6_var);
            if (auto1A82A6A6_var < 0) { break; }
            PlayerModifyPropertyInt(auto1A82A6A6_var, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        }
    }

    autoC02C0F37_g = gv_zergPlayers;
    autoC02C0F37_var = -1;
    while (true) {
        autoC02C0F37_var = PlayerGroupNextPlayer(autoC02C0F37_g, autoC02C0F37_var);
        if (autoC02C0F37_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoC02C0F37_var, "hydraliskspeed", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(autoC02C0F37_var, "ZergMeleeWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        TechTreeUpgradeAddLevel(autoC02C0F37_var, "ZergMissileWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        TechTreeUpgradeAddLevel(autoC02C0F37_var, "ZergFlyerWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
    }
    UnitSetPropertyFixed(UnitFromId(407), c_unitPropMovementSpeed, libNtve_gf_DifficultyValueFixed(1.5, 1.5, 2.0, 2.5));
    UnitSetPropertyFixed(UnitFromId(407), c_unitPropLifeMax, libNtve_gf_DifficultyValueFixed(400.0, 750.0, 1000.0, 1500.0));
    UnitSetPropertyFixed(UnitFromId(407), c_unitPropLifePercent, 100.0);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        TriggerEnable(gt_DirtyBanelingCrewListen, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_AddUnitTypeToUnitHelpPanel("Drone", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Zergling", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Overlord", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Mutalisk", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Brutalisk", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SporeCrawler", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SpineCrawler", false, gv_p01_USER);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Roach", false, gv_p01_USER);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Overseer", false, gv_p01_USER);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Baneling", false, gv_p01_USER);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Infestor", false, gv_p01_USER);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("BroodLord", false, gv_p01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Sequence
//--------------------------------------------------------------------------------------------------
bool gt_IntroSequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.1, c_timeReal);
    TriggerExecute(gt_StartHarvesting, true, false);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_p01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PlayerStartLocation(gv_p01_USER), 1.5);
    CinematicFade(true, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_StartGame, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSequence_Init () {
    gt_IntroSequence = TriggerCreate("gt_IntroSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game
//--------------------------------------------------------------------------------------------------
bool gt_StartGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/7EB94612"), null, PointFromId(10));
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        TriggerEnable(gt_SCVReinforcements, false);
        TriggerEnable(gt_SCVReinforcementsTimeout, false);
        TriggerEnable(gt_CommandCenterReplacement, false);
    }

    gv_lowGroundIsSafe = true;
    WaterSetState("Template 1|[Default]", 4.0, c_wtcLinear);
    TriggerExecute(gt_FirstSurge, true, false);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveCollectCreateQ, true, false);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_CreateLeaderboard, true, false);
    Wait(4.0, c_timeReal);
    TriggerExecute(gt_RichMineralTipQ, true, false);
    Wait(8.0, c_timeReal);
    TriggerExecute(gt_StorymodeTipsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGame_Init () {
    gt_StartGame = TriggerCreate("gt_StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Harvesting
//--------------------------------------------------------------------------------------------------
bool gt_StartHarvesting_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_mineralGroup;
    unitgroup lv_mineralHarvesters;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mineralGroup = UnitGroupEmpty();
    lv_mineralHarvesters = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mineralGroup = UnitGroup("RichMineralField", c_playerAny, RegionFromId(1), UnitFilter(0, 0, 0, 0), 0);
    lv_mineralHarvesters = UnitGroup("SCV", gv_p01_USER, RegionFromId(1), UnitFilter(0, 0, 0, 0), 0);
    UnitGroupIssueOrder(lv_mineralHarvesters, OrderTargetingUnitGroup(AbilityCommand("SCVHarvest", 0), lv_mineralGroup), c_orderQueueReplace);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionPlayableMap(), gv_p02_ZERG);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionPlayableMap(), gv_p04_ZERG);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartHarvesting_Init () {
    gt_StartHarvesting = TriggerCreate("gt_StartHarvesting_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Event Timing
//--------------------------------------------------------------------------------------------------
bool gt_EventTiming_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoB1F26F62_val;
    playergroup auto75FDF84D_g;
    int auto75FDF84D_var;
    playergroup auto31750779_g;
    int auto31750779_var;
    playergroup auto66FF1E36_g;
    int auto66FF1E36_var;

    // Conditions
    if (testConds) {
        if (!((gv_lowGroundIsSafe == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_eventNumber += 1;
    autoB1F26F62_val = gv_eventNumber;
    if (autoB1F26F62_val == 1) {
        Wait((gv_lavaInterval * 0.2), c_timeGame);
        TriggerExecute(gt_TransmissionReaperIntroQ, true, false);
        Wait((gv_lavaInterval * 0.2), c_timeGame);
        TriggerExecute(gt_FindToshsMiners, true, false);
        Wait((gv_lavaInterval * 0.2), c_timeGame);
        TriggerExecute(gt_BrutaliskIntroTimed, true, false);
    }
    else if (autoB1F26F62_val == 2) {
        auto75FDF84D_g = gv_zergPlayers;
        auto75FDF84D_var = -1;
        while (true) {
            auto75FDF84D_var = PlayerGroupNextPlayer(auto75FDF84D_g, auto75FDF84D_var);
            if (auto75FDF84D_var < 0) { break; }
            TechTreeUpgradeAddLevel(auto75FDF84D_var, "zerglingmovementspeed", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
            TechTreeUpgradeAddLevel(auto75FDF84D_var, "ZergGroundArmorsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
            TechTreeUpgradeAddLevel(auto75FDF84D_var, "ZergFlyerArmorsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        }
        Wait((gv_lavaInterval * 0.4), c_timeGame);
        TriggerExecute(gt_TransmissionMineralNodeReveal1Q, true, true);
    }
    else if (autoB1F26F62_val == 3) {
        auto31750779_g = gv_zergPlayers;
        auto31750779_var = -1;
        while (true) {
            auto31750779_var = PlayerGroupNextPlayer(auto31750779_g, auto31750779_var);
            if (auto31750779_var < 0) { break; }
            TechTreeUpgradeAddLevel(auto31750779_var, "ZergMeleeWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 0));
            TechTreeUpgradeAddLevel(auto31750779_var, "ZergMissileWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 0));
            TechTreeUpgradeAddLevel(auto31750779_var, "ZergFlyerWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 0));
        }
        Wait((gv_lavaInterval * 0.8), c_timeGame);
        TriggerExecute(gt_TransmissionMineralNodeReveal2Q, true, true);
    }
    else if (autoB1F26F62_val == 4) {
        auto66FF1E36_g = gv_zergPlayers;
        auto66FF1E36_var = -1;
        while (true) {
            auto66FF1E36_var = PlayerGroupNextPlayer(auto66FF1E36_g, auto66FF1E36_var);
            if (auto66FF1E36_var < 0) { break; }
            TechTreeUpgradeAddLevel(auto66FF1E36_var, "ZergMeleeWeaponsLevel2", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
            TechTreeUpgradeAddLevel(auto66FF1E36_var, "ZergMissileWeaponsLevel2", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
            TechTreeUpgradeAddLevel(auto66FF1E36_var, "ZergFlyerWeaponsLevel2", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        }
        Wait((gv_lavaInterval * 0.6), c_timeGame);
        TriggerExecute(gt_TransmissionMineralNodeReveal3Q, true, true);
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EventTiming_Init () {
    gt_EventTiming = TriggerCreate("gt_EventTiming_Func");
    TriggerAddEventTimer(gt_EventTiming, gv_lavaTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AICampaignStart(gv_p02_ZERG);
    AICampaignStart(gv_p04_ZERG);
    TriggerExecute(gt_P2ZergAIWaves, true, false);
    TriggerExecute(gt_P4ZergAIWaves, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 Zerg - AI Waves
//--------------------------------------------------------------------------------------------------
bool gt_P2ZergAIWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPlayer(gv_p02_ZERG, PlayerGroupSingle(gv_p01_USER));
    AIAttackWaveSetGatherPoint(gv_p02_ZERG, PointFromId(106));
    Wait(170.0, c_timeAI);
    AIAttackWaveAddUnits4(2, 4, 8, 10, "Zergling");
    AIAttackWaveSend(gv_p02_ZERG, 120, true);
    Wait(libNtve_gf_DifficultyValueFixed(40.0, 40.0, 10.0, 0.0), c_timeAI);
    AIAttackWaveAddUnits4(2, 5, 4, 8, "Zergling");
    AIAttackWaveAddUnits4(0, 0, 1, 2, "Hydralisk");
    AIAttackWaveSend(gv_p02_ZERG, libNtve_gf_DifficultyValueInt(120, 120, 120, 100), true);
    Wait(50.0, c_timeAI);
    AIAttackWaveAddWaypoint(gv_p02_ZERG, PointFromId(557), false);
    AIAttackWaveAddUnits4(4, 6, 10, 16, "Zergling");
    AIAttackWaveSend(gv_p02_ZERG, 120, true);
    Wait(libNtve_gf_DifficultyValueFixed(50.0, 50.0, 20.0, 0.0), c_timeAI);
    AIAttackWaveAddUnits4(5, 10, 11, 12, "Zergling");
    AIAttackWaveAddUnits4(0, 0, 1, 2, "Hydralisk");
    AIAttackWaveAddUnits4(0, 0, 1, 1, "Mutalisk");
    AIAttackWaveSend(gv_p02_ZERG, libNtve_gf_DifficultyValueInt(120, 120, 120, 110), true);
    Wait(libNtve_gf_DifficultyValueFixed(80.0, 80.0, 50.0, 20.0), c_timeAI);
    AIAttackWaveAddUnits4(4, 6, 10, 20, "Zergling");
    AIAttackWaveAddUnits4(0, 0, 1, 2, "Mutalisk");
    AIAttackWaveSend(gv_p02_ZERG, 120, true);
    AIAttackWaveAddUnits4(5, 2, 3, 13, "Zergling");
    AIAttackWaveAddUnits4(0, 1, 2, 2, "Hydralisk");
    AIAttackWaveAddUnits4(0, 0, 1, 2, "Mutalisk");
    AIAttackWaveSend(gv_p02_ZERG, 100, true);
    Wait(60.0, c_timeAI);
    AIAttackWaveAddWaypoint(gv_p02_ZERG, PointFromId(557), false);
    AIAttackWaveAddUnits4(4, 4, 8, 11, "Zergling");
    AIAttackWaveSend(gv_p02_ZERG, 120, false);
    Wait(20.0, c_timeAI);
    AIAttackWaveAddWaypoint(gv_p02_ZERG, PointFromId(555), false);
    AIAttackWaveAddUnits4(0, 4, 8, 11, "Zergling");
    AIAttackWaveSend(gv_p02_ZERG, 120, true);
    while (true) {
        AIAttackWaveAddUnits4(5, 6, 11, 11, "Zergling");
        AIAttackWaveAddUnits4(0, 1, 1, 3, "Hydralisk");
        AIAttackWaveAddUnits4(0, 0, 2, 3, "Mutalisk");
        AIAttackWaveSend(gv_p02_ZERG, libNtve_gf_DifficultyValueInt(140, 140, 110, 80), true);
        Wait(59.0, c_timeAI);
        AIAttackWaveAddUnits4(6, 10, 16, 20, "Zergling");
        AIAttackWaveAddUnits4(0, 0, 1, 2, "Hydralisk");
        AIAttackWaveSend(gv_p02_ZERG, 120, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2ZergAIWaves_Init () {
    gt_P2ZergAIWaves = TriggerCreate("gt_P2ZergAIWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P4 Zerg - AI Waves
//--------------------------------------------------------------------------------------------------
bool gt_P4ZergAIWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPlayer(gv_p04_ZERG, PlayerGroupSingle(gv_p01_USER));
    AIAttackWaveSetGatherPoint(gv_p04_ZERG, PointFromId(8));
    Wait(libNtve_gf_DifficultyValueFixed(670.0, 670.0, 610.0, 550.0), c_timeAI);
    AIAttackWaveAddUnits4(0, 0, 4, 8, "Zergling");
    AIAttackWaveSend(gv_p04_ZERG, 120, true);
    Wait(libNtve_gf_DifficultyValueFixed(80.0, 80.0, 50.0, 20.0), c_timeAI);
    AIAttackWaveAddUnits4(0, 0, 1, 2, "Hydralisk");
    AIAttackWaveSend(gv_p04_ZERG, 120, true);
    AIAttackWaveAddUnits4(0, 0, 6, 8, "Zergling");
    AIAttackWaveSend(gv_p04_ZERG, 100, true);
    Wait(libNtve_gf_DifficultyValueFixed(80.0, 80.0, 50.0, 20.0), c_timeAI);
    AIAttackWaveAddUnits4(0, 0, 1, 3, "Mutalisk");
    AIAttackWaveSend(gv_p04_ZERG, 120, true);
    while (true) {
        AIAttackWaveAddUnits4(0, 0, 8, 14, "Zergling");
        AIAttackWaveAddUnits4(0, 0, 0, 2, "Hydralisk");
        AIAttackWaveSend(gv_p04_ZERG, libNtve_gf_DifficultyValueInt(140, 140, 110, 80), true);
        Wait(59.0, c_timeAI);
        AIAttackWaveAddUnits4(0, 0, 6, 12, "Zergling");
        AIAttackWaveAddUnits4(0, 0, 1, 3, "Mutalisk");
        AIAttackWaveSend(gv_p04_ZERG, 120, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P4ZergAIWaves_Init () {
    gt_P4ZergAIWaves = TriggerCreate("gt_P4ZergAIWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveMinerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveMinerals_Init () {
    gt_AIGiveMinerals = TriggerCreate("gt_AIGiveMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p02_ZERG, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p04_ZERG, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveGas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveGas_Init () {
    gt_AIGiveGas = TriggerCreate("gt_AIGiveGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p02_ZERG, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p04_ZERG, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dirty Baneling Crew Listen
//--------------------------------------------------------------------------------------------------
bool gt_DirtyBanelingCrewListen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_DirtyBanelingCrewViaDamage, true);
    TriggerEnable(gt_DirtyBanelingCrewViaMovement, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DirtyBanelingCrewListen_Init () {
    gt_DirtyBanelingCrewListen = TriggerCreate("gt_DirtyBanelingCrewListen_Func");
    TriggerEnable(gt_DirtyBanelingCrewListen, false);
    TriggerAddEventUnitRegion(gt_DirtyBanelingCrewListen, null, RegionFromId(70), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dirty Baneling Crew Via Damage
//--------------------------------------------------------------------------------------------------
bool gt_DirtyBanelingCrewViaDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitMoverExists(EventUnitDamageSourceUnit(), "Fly") == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_dirtyBanelingCrew, EventUnit()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(EventUnit(), gv_p04_ZERG) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_DirtyBanelingCrewActions, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DirtyBanelingCrewViaDamage_Init () {
    gt_DirtyBanelingCrewViaDamage = TriggerCreate("gt_DirtyBanelingCrewViaDamage_Func");
    TriggerEnable(gt_DirtyBanelingCrewViaDamage, false);
    TriggerAddEventUnitDamaged(gt_DirtyBanelingCrewViaDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dirty Baneling Crew Via Movement
//--------------------------------------------------------------------------------------------------
bool gt_DirtyBanelingCrewViaMovement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(EventUnit(), gv_p04_ZERG) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_DirtyBanelingCrewActions, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DirtyBanelingCrewViaMovement_Init () {
    gt_DirtyBanelingCrewViaMovement = TriggerCreate("gt_DirtyBanelingCrewViaMovement_Func");
    TriggerEnable(gt_DirtyBanelingCrewViaMovement, false);
    TriggerAddEventUnitRegion(gt_DirtyBanelingCrewViaMovement, null, RegionFromId(68), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dirty Baneling Crew Actions
//--------------------------------------------------------------------------------------------------
bool gt_DirtyBanelingCrewActions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto77EFDEB6_g;
    int auto77EFDEB6_u;
    unit auto77EFDEB6_var;
    unitgroup autoD1992A21_g;
    int autoD1992A21_u;
    unit autoD1992A21_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_DirtyBanelingCrewViaDamage, false);
    TriggerEnable(gt_DirtyBanelingCrewViaMovement, false);
    auto77EFDEB6_g = gv_dirtyBanelingCrew;
    auto77EFDEB6_u = UnitGroupCount(auto77EFDEB6_g, c_unitCountAll);
    for (;; auto77EFDEB6_u -= 1) {
        auto77EFDEB6_var = UnitGroupUnitFromEnd(auto77EFDEB6_g, auto77EFDEB6_u);
        if (auto77EFDEB6_var == null) { break; }
        UnitIssueOrder(auto77EFDEB6_var, Order(AbilityCommand("BurrowBanelingUp", 0)), c_orderQueueReplace);
        Wait(RandomFixed(0.1, 0.25), c_timeGame);
    }
    Wait(0.5, c_timeGame);
    autoD1992A21_g = gv_dirtyBanelingCrew;
    autoD1992A21_u = UnitGroupCount(autoD1992A21_g, c_unitCountAll);
    for (;; autoD1992A21_u -= 1) {
        autoD1992A21_var = UnitGroupUnitFromEnd(autoD1992A21_g, autoD1992A21_u);
        if (autoD1992A21_var == null) { break; }
        AISetUnitScriptControlled(autoD1992A21_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DirtyBanelingCrewActions_Init () {
    gt_DirtyBanelingCrewActions = TriggerCreate("gt_DirtyBanelingCrewActions_Func");
    TriggerEnable(gt_DirtyBanelingCrewActions, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Critter Init
//--------------------------------------------------------------------------------------------------
bool gt_CritterInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_index;

    // Automatic Variable Declarations
    const int auto016A94F4_ae = gv_cRITTER_GROUPS;
    const int auto016A94F4_ai = 1;
    unitgroup auto4ED6C7B6_g;
    int auto4ED6C7B6_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_critterHavens[1] = RegionFromId(34);
    gv_critterHavens[2] = RegionFromId(35);
    gv_critterHavens[3] = RegionFromId(46);
    gv_critterHavens[4] = RegionFromId(45);
    gv_critterHavens[5] = RegionFromId(47);
    gv_critterHavens[6] = RegionFromId(49);
    gv_critterHavens[7] = RegionFromId(50);
    gv_critterHavens[8] = RegionFromId(51);
    gv_critterHavens[9] = RegionFromId(52);
    gv_critterHavens[10] = RegionFromId(53);
    gv_critterHavens[11] = RegionFromId(54);
    gv_critterGroups[1] = gf_CrittersInRegion(RegionFromId(30));
    gv_critterGroups[2] = gf_CrittersInRegion(RegionFromId(32));
    gv_critterGroups[3] = gf_CrittersInRegion(RegionFromId(36));
    gv_critterGroups[4] = gf_CrittersInRegion(RegionFromId(37));
    gv_critterGroups[5] = gf_CrittersInRegion(RegionFromId(38));
    gv_critterGroups[6] = gf_CrittersInRegion(RegionFromId(39));
    gv_critterGroups[7] = gf_CrittersInRegion(RegionFromId(40));
    gv_critterGroups[8] = gf_CrittersInRegion(RegionFromId(41));
    gv_critterGroups[9] = gf_CrittersInRegion(RegionFromId(42));
    gv_critterGroups[10] = gf_CrittersInRegion(RegionFromId(43));
    gv_critterGroups[11] = gf_CrittersInRegion(RegionFromId(44));
    lv_index = 1;
    for ( ; ( (auto016A94F4_ai >= 0 && lv_index <= auto016A94F4_ae) || (auto016A94F4_ai < 0 && lv_index >= auto016A94F4_ae) ) ; lv_index += auto016A94F4_ai ) {
        auto4ED6C7B6_g = gv_critterGroups[lv_index];
        auto4ED6C7B6_u = UnitGroupCount(auto4ED6C7B6_g, c_unitCountAll);
        for (;; auto4ED6C7B6_u -= 1) {
            lv_u = UnitGroupUnitFromEnd(auto4ED6C7B6_g, auto4ED6C7B6_u);
            if (lv_u == null) { break; }
            if ((UnitFilterMatch(lv_u, gv_p01_USER, UnitFilter((1 << c_targetFilterBuried), 0, 0, 0)) == true)) {
                UnitSetCustomValue(lv_u, 0, 1.0);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CritterInit_Init () {
    gt_CritterInit = TriggerCreate("gt_CritterInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make Critters Flee
//--------------------------------------------------------------------------------------------------
bool gt_MakeCrittersFlee_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    unit lv_u;

    // Automatic Variable Declarations
    const int auto1404183A_ae = gv_cRITTER_GROUPS;
    const int auto1404183A_ai = 1;
    unitgroup auto590DA8AC_g;
    int auto590DA8AC_u;
    const int auto7570B64E_ae = gv_cRITTER_GROUPS;
    const int auto7570B64E_ai = 1;
    unitgroup autoF97BAD66_g;
    int autoF97BAD66_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 1;
    for ( ; ( (auto1404183A_ai >= 0 && lv_index <= auto1404183A_ae) || (auto1404183A_ai < 0 && lv_index >= auto1404183A_ae) ) ; lv_index += auto1404183A_ai ) {
        auto590DA8AC_g = gv_critterGroups[lv_index];
        auto590DA8AC_u = UnitGroupCount(auto590DA8AC_g, c_unitCountAll);
        for (;; auto590DA8AC_u -= 1) {
            lv_u = UnitGroupUnitFromEnd(auto590DA8AC_g, auto590DA8AC_u);
            if (lv_u == null) { break; }
            if ((UnitGetCustomValue(lv_u, 0) == 1.0)) {
                UnitIssueOrder(lv_u, Order(AbilityCommand("RedstoneLavaCritterUnburrow", 0)), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(lv_u, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            }
        }
    }
    Wait(1.0, c_timeGame);
    lv_index = 1;
    for ( ; ( (auto7570B64E_ai >= 0 && lv_index <= auto7570B64E_ae) || (auto7570B64E_ai < 0 && lv_index >= auto7570B64E_ae) ) ; lv_index += auto7570B64E_ai ) {
        autoF97BAD66_g = gv_critterGroups[lv_index];
        autoF97BAD66_u = UnitGroupCount(autoF97BAD66_g, c_unitCountAll);
        for (;; autoF97BAD66_u -= 1) {
            lv_u = UnitGroupUnitFromEnd(autoF97BAD66_g, autoF97BAD66_u);
            if (lv_u == null) { break; }
            UnitSetCustomValue(lv_u, 1, PointGetX(UnitGetPosition(lv_u)));
            UnitSetCustomValue(lv_u, 2, PointGetY(UnitGetPosition(lv_u)));
            UnitIssueOrder(lv_u, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(gv_critterHavens[lv_index])), c_orderQueueReplace);
            UnitIssueOrder(lv_u, Order(AbilityCommand("RedstoneLavaCritterBurrow", 0)), c_orderQueueAddToEnd);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakeCrittersFlee_Init () {
    gt_MakeCrittersFlee = TriggerCreate("gt_MakeCrittersFlee_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make Critters Return
//--------------------------------------------------------------------------------------------------
bool gt_MakeCrittersReturn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    unit lv_u;

    // Automatic Variable Declarations
    const int auto7979D0B2_ae = gv_cRITTER_GROUPS;
    const int auto7979D0B2_ai = 1;
    unitgroup autoCB102E37_g;
    int autoCB102E37_u;
    const int autoB010B73C_ae = gv_cRITTER_GROUPS;
    const int autoB010B73C_ai = 1;
    unitgroup autoE96914E3_g;
    int autoE96914E3_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 1;
    for ( ; ( (auto7979D0B2_ai >= 0 && lv_index <= auto7979D0B2_ae) || (auto7979D0B2_ai < 0 && lv_index >= auto7979D0B2_ae) ) ; lv_index += auto7979D0B2_ai ) {
        autoCB102E37_g = gv_critterGroups[lv_index];
        autoCB102E37_u = UnitGroupCount(autoCB102E37_g, c_unitCountAll);
        for (;; autoCB102E37_u -= 1) {
            lv_u = UnitGroupUnitFromEnd(autoCB102E37_g, autoCB102E37_u);
            if (lv_u == null) { break; }
            UnitIssueOrder(lv_u, Order(AbilityCommand("RedstoneLavaCritterUnburrow", 0)), c_orderQueueReplace);
        }
    }
    Wait(1.0, c_timeGame);
    lv_index = 1;
    for ( ; ( (autoB010B73C_ai >= 0 && lv_index <= autoB010B73C_ae) || (autoB010B73C_ai < 0 && lv_index >= autoB010B73C_ae) ) ; lv_index += autoB010B73C_ai ) {
        autoE96914E3_g = gv_critterGroups[lv_index];
        autoE96914E3_u = UnitGroupCount(autoE96914E3_g, c_unitCountAll);
        for (;; autoE96914E3_u -= 1) {
            lv_u = UnitGroupUnitFromEnd(autoE96914E3_g, autoE96914E3_u);
            if (lv_u == null) { break; }
            UnitIssueOrder(lv_u, OrderTargetingPoint(AbilityCommand("move", 0), Point(UnitGetCustomValue(lv_u, 1), UnitGetCustomValue(lv_u, 2))), c_orderQueueReplace);
            if ((UnitGetCustomValue(lv_u, 0) == 1.0)) {
                UnitIssueOrder(lv_u, Order(AbilityCommand("RedstoneLavaCritterBurrow", 0)), c_orderQueueAddToEnd);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakeCrittersReturn_Init () {
    gt_MakeCrittersReturn = TriggerCreate("gt_MakeCrittersReturn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Critter Babies
//--------------------------------------------------------------------------------------------------
bool gt_CritterBabies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CritterBabies_Init () {
    gt_CritterBabies = TriggerCreate("gt_CritterBabies_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Leaderboard
//--------------------------------------------------------------------------------------------------
bool gt_CreateLeaderboard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    BoardCreate(3, 1, StringToText(""), Color(0.00, 100.00, 0.00));
    gv_mineralBoard = BoardLastCreated();
    BoardSetState(gv_mineralBoard, PlayerGroupAll(), c_boardStateShowTitle, false);
    BoardSetState(gv_mineralBoard, PlayerGroupAll(), c_boardStateShowHeader, false);
    BoardSetGroupCount(gv_mineralBoard, 1);
    BoardRowSetGroup(gv_mineralBoard, 1, 1);
    BoardItemSetText(gv_mineralBoard, c_boardColGroups, 1, StringExternal("Param/Value/CE8A3BEC"));
    BoardItemSetText(gv_mineralBoard, 1, 1, StringExternal("Param/Value/480399D2"));
    BoardItemSetText(gv_mineralBoard, 2, 1, IntToText(PlayerGetPropertyInt(gv_p01_USER, c_playerPropMinerals)));
    BoardItemSetText(gv_mineralBoard, 3, 1, (StringExternal("Param/Value/1ED6C969") + IntToText(gv_objectiveMineralsQuota)));
    BoardItemSetIcon(gv_mineralBoard, 3, 1, "Assets\\Textures\\icon-highyieldmineral-terran.dds", false);
    BoardMinimizeShow(gv_mineralBoard, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateLeaderboard_Init () {
    gt_CreateLeaderboard = TriggerCreate("gt_CreateLeaderboard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Leaderboard
//--------------------------------------------------------------------------------------------------
bool gt_UpdateLeaderboard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(gv_p01_USER, c_playerPropMinerals) >= gv_objectiveMineralsQuota)) {
        BoardItemSetText(gv_mineralBoard, 2, 1, IntToText(gv_objectiveMineralsQuota));
        BoardItemSetText(gv_mineralBoard, 3, 1, (StringExternal("Param/Value/7290E156") + IntToText(gv_objectiveMineralsQuota)));
    }
    else {
        BoardItemSetText(gv_mineralBoard, 2, 1, IntToText(PlayerGetPropertyInt(gv_p01_USER, c_playerPropMinerals)));
        BoardItemSetText(gv_mineralBoard, 3, 1, (StringExternal("Param/Value/9E245720") + IntToText(gv_objectiveMineralsQuota)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateLeaderboard_Init () {
    gt_UpdateLeaderboard = TriggerCreate("gt_UpdateLeaderboard_Func");
    TriggerAddEventPlayerPropChange(gt_UpdateLeaderboard, gv_p01_USER, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Burrow Ambush Global Trigger
//--------------------------------------------------------------------------------------------------
bool gt_BurrowAmbushGlobalTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_triggeringRegion;

    // Automatic Variable Declarations
    unitgroup auto7DD3870B_g;
    int auto7DD3870B_u;
    unit auto7DD3870B_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), 0)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringRegion = EventUnitRegion();
    auto7DD3870B_g = UnitGroup(null, gv_p02_ZERG, lv_triggeringRegion, UnitFilter(0, 0, 0, 0), 0);
    auto7DD3870B_u = UnitGroupCount(auto7DD3870B_g, c_unitCountAll);
    for (;; auto7DD3870B_u -= 1) {
        auto7DD3870B_var = UnitGroupUnitFromEnd(auto7DD3870B_g, auto7DD3870B_u);
        if (auto7DD3870B_var == null) { break; }
        UnitIssueOrder(auto7DD3870B_var, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BurrowAmbushGlobalTrigger_Init () {
    gt_BurrowAmbushGlobalTrigger = TriggerCreate("gt_BurrowAmbushGlobalTrigger_Func");
    TriggerAddEventUnitRegion(gt_BurrowAmbushGlobalTrigger, null, RegionFromId(3), true);
    TriggerAddEventUnitRegion(gt_BurrowAmbushGlobalTrigger, null, RegionFromId(4), true);
    TriggerAddEventUnitRegion(gt_BurrowAmbushGlobalTrigger, null, RegionFromId(5), true);
    TriggerAddEventUnitRegion(gt_BurrowAmbushGlobalTrigger, null, RegionFromId(17), true);
    TriggerAddEventUnitRegion(gt_BurrowAmbushGlobalTrigger, null, RegionFromId(19), true);
    TriggerAddEventUnitRegion(gt_BurrowAmbushGlobalTrigger, null, RegionFromId(13), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Burrow Ambush (Region 04)
//--------------------------------------------------------------------------------------------------
bool gt_BurrowAmbushRegion04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    gs_RECORD_Ambusher[16] lv_zergGroup;
    int lv_zergNumber;
    int lv_i;
    int lv_n;

    // Automatic Variable Declarations
    unitgroup auto3D8B0D95_g;
    int auto3D8B0D95_u;
    unit auto3D8B0D95_var;
    int autoE356BDD2_ae;
    const int autoE356BDD2_ai = 1;
    int auto70D33007_ae;
    const int auto70D33007_ai = 1;
    int autoF9D38813_ae;
    const int autoF9D38813_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), 0)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto3D8B0D95_g = UnitGroup(null, gv_p02_ZERG, RegionFromId(6), UnitFilter((1 << c_targetFilterBuried), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3D8B0D95_u = UnitGroupCount(auto3D8B0D95_g, c_unitCountAll);
    for (;; auto3D8B0D95_u -= 1) {
        auto3D8B0D95_var = UnitGroupUnitFromEnd(auto3D8B0D95_g, auto3D8B0D95_u);
        if (auto3D8B0D95_var == null) { break; }
        lv_zergNumber += 1;
        lv_zergGroup[lv_zergNumber].lv_ambusher = auto3D8B0D95_var;
        lv_zergGroup[lv_zergNumber].lv_position = UnitGetPosition(auto3D8B0D95_var);
        lv_zergGroup[lv_zergNumber].lv_burrowedHealth = UnitGetPropertyFixed(auto3D8B0D95_var, c_unitPropLife, c_unitPropCurrent);
        if ((UnitGetType(auto3D8B0D95_var) == "ZerglingBurrowed")) {
            UnitIssueOrder(auto3D8B0D95_var, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(auto3D8B0D95_var, Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        }
        if ((lv_zergNumber == 15)) {
            break;
        }

    }
    while (true) {
        Wait(1.0, c_timeGame);
        autoE356BDD2_ae = lv_zergNumber;
        lv_i = 1;
        for ( ; ( (autoE356BDD2_ai >= 0 && lv_i <= autoE356BDD2_ae) || (autoE356BDD2_ai < 0 && lv_i >= autoE356BDD2_ae) ) ; lv_i += autoE356BDD2_ai ) {
            if ((UnitIsAlive(lv_zergGroup[lv_i].lv_ambusher) == true)) {
                lv_i = 0;
                break;
            }

        }
        if ((lv_i != 0)) {
            return true;
        }

        auto70D33007_ae = lv_zergNumber;
        lv_i = 1;
        for ( ; ( (auto70D33007_ai >= 0 && lv_i <= auto70D33007_ae) || (auto70D33007_ai < 0 && lv_i >= auto70D33007_ae) ) ; lv_i += auto70D33007_ai ) {
            if (((UnitGetType(lv_zergGroup[lv_i].lv_ambusher) == "ZerglingBurrowed") || (UnitGetType(lv_zergGroup[lv_i].lv_ambusher) == "HydraliskBurrowed"))) {
                if (((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionCircle(UnitGetPosition(lv_zergGroup[lv_i].lv_ambusher), 4.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || ((lv_zergGroup[lv_i].lv_burrowedHealth > UnitGetPropertyFixed(lv_zergGroup[lv_i].lv_ambusher, c_unitPropLife, c_unitPropCurrent)) && (UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionCircle(UnitGetPosition(lv_zergGroup[lv_i].lv_ambusher), 16.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)))) {
                    autoF9D38813_ae = lv_zergNumber;
                    lv_n = 1;
                    for ( ; ( (autoF9D38813_ai >= 0 && lv_n <= autoF9D38813_ae) || (autoF9D38813_ai < 0 && lv_n >= autoF9D38813_ae) ) ; lv_n += autoF9D38813_ai ) {
                        if ((UnitGetType(lv_zergGroup[lv_n].lv_ambusher) == "ZerglingBurrowed")) {
                            UnitIssueOrder(lv_zergGroup[lv_n].lv_ambusher, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
                        }

                        if ((UnitGetType(lv_zergGroup[lv_n].lv_ambusher) == "HydraliskBurrowed")) {
                            UnitIssueOrder(lv_zergGroup[lv_n].lv_ambusher, Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
                        }

                    }
                }

            }
            else {
                if ((UnitGetType(lv_zergGroup[lv_i].lv_ambusher) == "Zergling")) {
                    if ((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionCircle(UnitGetPosition(lv_zergGroup[lv_i].lv_ambusher), 16.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                        UnitIssueOrder(lv_zergGroup[lv_i].lv_ambusher, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(lv_zergGroup[lv_i].lv_ambusher), UnitGroup(null, gv_p01_USER, RegionCircle(UnitGetPosition(lv_zergGroup[lv_i].lv_ambusher), 16.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)))), c_orderQueueReplace);
                    }
                    else {
                        UnitIssueOrder(lv_zergGroup[lv_i].lv_ambusher, OrderTargetingPoint(AbilityCommand("move", 0), lv_zergGroup[lv_i].lv_position), c_orderQueueReplace);
                        UnitIssueOrder(lv_zergGroup[lv_i].lv_ambusher, Order(AbilityCommand("BurrowZerglingDown", 0)), c_orderQueueAddToEnd);
                        lv_zergGroup[lv_i].lv_burrowedHealth = UnitGetPropertyFixed(lv_zergGroup[lv_i].lv_ambusher, c_unitPropLife, c_unitPropCurrent);
                    }
                }
                else {
                    if ((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionCircle(UnitGetPosition(lv_zergGroup[lv_i].lv_ambusher), 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                        UnitIssueOrder(lv_zergGroup[lv_i].lv_ambusher, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(lv_zergGroup[lv_i].lv_ambusher), UnitGroup(null, gv_p01_USER, RegionCircle(UnitGetPosition(lv_zergGroup[lv_i].lv_ambusher), 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)))), c_orderQueueReplace);
                    }
                    else {
                        UnitIssueOrder(lv_zergGroup[lv_i].lv_ambusher, OrderTargetingPoint(AbilityCommand("move", 0), lv_zergGroup[lv_i].lv_position), c_orderQueueReplace);
                        UnitIssueOrder(lv_zergGroup[lv_i].lv_ambusher, Order(AbilityCommand("BurrowHydraliskDown", 0)), c_orderQueueAddToEnd);
                        lv_zergGroup[lv_i].lv_burrowedHealth = UnitGetPropertyFixed(lv_zergGroup[lv_i].lv_ambusher, c_unitPropLife, c_unitPropCurrent);
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BurrowAmbushRegion04_Init () {
    gt_BurrowAmbushRegion04 = TriggerCreate("gt_BurrowAmbushRegion04_Func");
    TriggerAddEventUnitRegion(gt_BurrowAmbushRegion04, null, RegionFromId(6), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brutalisk Intro - Timed
//--------------------------------------------------------------------------------------------------
bool gt_BrutaliskIntroTimed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_BrutaliskIntroProximity, false);
    TriggerExecute(gt_BrutaliskCallout, true, false);
    TriggerExecute(gt_TransmissionBrutaliskWarningQ, true, true);
    TriggerExecute(gt_ResearchObjectiveKilltheBrutaliskCreateQ, true, false);
    TriggerExecute(gt_ZergBrutaliskTipQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BrutaliskIntroTimed_Init () {
    gt_BrutaliskIntroTimed = TriggerCreate("gt_BrutaliskIntroTimed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brutalisk Intro - Proximity
//--------------------------------------------------------------------------------------------------
bool gt_BrutaliskIntroProximity_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), 0)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_BrutaliskIntroTimed, false);
    TriggerExecute(gt_BrutaliskCallout, true, false);
    TriggerExecute(gt_TransmissionBrutaliskWarningQ, true, true);
    TriggerExecute(gt_ResearchObjectiveKilltheBrutaliskCreateQ, true, false);
    TriggerExecute(gt_ZergBrutaliskTipQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BrutaliskIntroProximity_Init () {
    gt_BrutaliskIntroProximity = TriggerCreate("gt_BrutaliskIntroProximity_Func");
    TriggerAddEventUnitRegion(gt_BrutaliskIntroProximity, null, RegionFromId(26), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brutalisk Callout
//--------------------------------------------------------------------------------------------------
bool gt_BrutaliskCallout_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(gv_brutalisk), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    gv_brutaliskPing = PingLastCreated();
    PingSetTooltip(gv_brutaliskPing, StringExternal("Param/Value/390CF5AB"));
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_brutalisk), 8.0, Color(100.00, 100.00, 0.00));
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/07B0C8A1"), null, gv_brutalisk);
    VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(gv_brutalisk), 5.0), 20.0, false);
    libNtve_gf_AttachModelToUnit(gv_brutalisk, "BriefingUnitSelectLargeRed", "Ref_Origin");
    gv_brutaliskPingActor = libNtve_gf_ActorLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BrutaliskCallout_Init () {
    gt_BrutaliskCallout = TriggerCreate("gt_BrutaliskCallout_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brutalisk Remove Ping Actor
//--------------------------------------------------------------------------------------------------
bool gt_BrutaliskRemovePingActor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_brutaliskPingActor);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BrutaliskRemovePingActor_Init () {
    gt_BrutaliskRemovePingActor = TriggerCreate("gt_BrutaliskRemovePingActor_Func");
    TriggerAddEventUnitDamaged(gt_BrutaliskRemovePingActor, UnitRefFromUnit(UnitFromId(407)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Find Tosh's Miners
//--------------------------------------------------------------------------------------------------
bool gt_FindToshsMiners_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_toshMinersRescued == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveRescuePartyCreateQ, true, false);
    Wait(2.0, c_timeReal);
    if ((gv_toshMinersRescued == true)) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(443), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    gv_toshMinersPing = PingLastCreated();
    PingSetTooltip(gv_toshMinersPing, StringExternal("Param/Value/BE9A5152"));
    VisExploreArea(gv_p01_USER, RegionCircle(PointFromId(443), 8.0), true, false);
    MinimapPing(PlayerGroupAll(), PointFromId(443), 8.0, Color(100.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/CF3F607E"), null, PointFromId(443));
    TriggerExecute(gt_TransmissionFindToshsMissingMinersQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FindToshsMiners_Init () {
    gt_FindToshsMiners = TriggerCreate("gt_FindToshsMiners_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rescued Tosh's Miners
//--------------------------------------------------------------------------------------------------
bool gt_RescuedToshsMiners_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_playerGroup;

    // Automatic Variable Declarations
    unitgroup auto2AFE1C29_g;
    int auto2AFE1C29_u;
    unit auto2AFE1C29_var;

    // Variable Initialization
    lv_playerGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(24), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerGroup = UnitGroup(null, gv_p01_USER, RegionFromId(24), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_playerGroup, c_unitCountAlive) > 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_toshMinersRescued = true;
        PingDestroy(gv_toshMinersPing);
        TriggerExecute(gt_ObjectiveRescuePartyComplete, true, false);
        TriggerExecute(gt_TransmissionMissingMinersFoundQ, true, false);
        CameraLockInput(gv_p01_USER, true);
        CameraPan(gv_p01_USER, PointFromId(1086), 1.0, -1, 10, true);
        CameraLockInput(gv_p01_USER, false);
        VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(UnitFromId(1)), 8.0), 12.0, false);
        MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(1)), 8.0, Color(0.00, 100.00, 0.00));
        UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/F6BB0018"), "Assets\\Textures\\btn-building-terran-commandcenter.dds", UnitFromId(1));
        auto2AFE1C29_g = UnitGroup(null, gv_p05_TOSH, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto2AFE1C29_u = UnitGroupCount(auto2AFE1C29_g, c_unitCountAll);
        for (;; auto2AFE1C29_u -= 1) {
            auto2AFE1C29_var = UnitGroupUnitFromEnd(auto2AFE1C29_g, auto2AFE1C29_u);
            if (auto2AFE1C29_var == null) { break; }
            gv_unitsRescued += 1;
            libNtve_gf_RescueUnit(auto2AFE1C29_var, gv_p01_USER, true);
            UnitClearInfoText(auto2AFE1C29_var);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RescuedToshsMiners_Init () {
    gt_RescuedToshsMiners = TriggerCreate("gt_RescuedToshsMiners_Func");
    TriggerAddEventTimePeriodic(gt_RescuedToshsMiners, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery Destroyed - Show Resources
//--------------------------------------------------------------------------------------------------
bool gt_HatcheryDestroyedShowResources_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto84C0A073_g;
    int auto84C0A073_u;
    unit auto84C0A073_var;
    unitgroup auto2242DAAB_g;
    int auto2242DAAB_u;
    unit auto2242DAAB_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Hatchery") || (UnitGetType(EventUnit()) == "Lair") || (UnitGetType(EventUnit()) == "Hive")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto84C0A073_g = UnitGroup("NaturalMinerals", 0, RegionCircle(UnitGetPosition(EventUnit()), 6.0), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto84C0A073_u = UnitGroupCount(auto84C0A073_g, c_unitCountAll);
    for (;; auto84C0A073_u -= 1) {
        auto84C0A073_var = UnitGroupUnitFromEnd(auto84C0A073_g, auto84C0A073_u);
        if (auto84C0A073_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto84C0A073_var, true);
    }
    auto2242DAAB_g = UnitGroup("NaturalGas", 0, RegionCircle(UnitGetPosition(EventUnit()), 6.0), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto2242DAAB_u = UnitGroupCount(auto2242DAAB_g, c_unitCountAll);
    for (;; auto2242DAAB_u -= 1) {
        auto2242DAAB_var = UnitGroupUnitFromEnd(auto2242DAAB_g, auto2242DAAB_u);
        if (auto2242DAAB_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto2242DAAB_var, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HatcheryDestroyedShowResources_Init () {
    gt_HatcheryDestroyedShowResources = TriggerCreate("gt_HatcheryDestroyedShowResources_Func");
    TriggerAddEventUnitDied(gt_HatcheryDestroyedShowResources, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Resources Right Side
//--------------------------------------------------------------------------------------------------
bool gt_SpawnResourcesRightSide_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalMinerals", 0, 0, PointFromId(240));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalMinerals", 0, 0, PointFromId(295));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalMinerals", 0, 0, PointFromId(989));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalMinerals", 0, 0, PointFromId(1040));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalMinerals", 0, 0, PointFromId(1041));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalMinerals", 0, 0, PointFromId(1042));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalMinerals", 0, 0, PointFromId(1043));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalMinerals", 0, 0, PointFromId(1044));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalMinerals", 0, 0, PointFromId(1045));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalMinerals", 0, 0, PointFromId(1046));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalMinerals", 0, 0, PointFromId(1047));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalMinerals", 0, 0, PointFromId(1048));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalMinerals", 0, 0, PointFromId(515));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalMinerals", 0, 0, PointFromId(1049));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalMinerals", 0, 0, PointFromId(1050));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalMinerals", 0, 0, PointFromId(1100));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalMinerals", 0, 0, PointFromId(1105));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalMinerals", 0, 0, PointFromId(1115));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalMinerals", 0, 0, PointFromId(935));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalMinerals", 0, 0, PointFromId(1118));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalMinerals", 0, 0, PointFromId(1119));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalMinerals", 0, 0, PointFromId(1121));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalMinerals", 0, 0, PointFromId(1124));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalMinerals", 0, 0, PointFromId(1149));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalMinerals", 0, 0, PointFromId(1181));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalMinerals", 0, 0, PointFromId(947));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalMinerals", 0, 0, PointFromId(965));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalMinerals", 0, 0, PointFromId(971));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalMinerals", 0, 0, PointFromId(986));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalMinerals", 0, 0, PointFromId(987));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalMinerals", 0, 0, PointFromId(988));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalMinerals", 0, 0, PointFromId(59));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(1183));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(1358));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(1360));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(1364));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(1365));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(1497));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(1657));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(1658));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(1184));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(1663));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(1665));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(1668));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(1186));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(1187));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(1320));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(1321));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(1356));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGas", 0, 0, PointFromId(1357));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnResourcesRightSide_Init () {
    gt_SpawnResourcesRightSide = TriggerCreate("gt_SpawnResourcesRightSide_Func");
    TriggerAddEventUnitRegion(gt_SpawnResourcesRightSide, null, RegionFromId(67), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCV Reinforcements
//--------------------------------------------------------------------------------------------------
bool gt_SCVReinforcements_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dropship;

    // Automatic Variable Declarations
    unitgroup auto99D50804_g;
    int auto99D50804_u;
    unit auto99D50804_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SCV"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_sCVLossTimer, 8.0, false, c_timeAI);
    gv_sCVsLost = (gv_sCVsLost + 1);
    if ((gv_sCVsLost >= 6)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TimerPause(gv_sCVLossTimer, true);
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_TransmissionSCVReinforcementsQ, true, false);
        libNtve_gf_CreateUnitsAtPoint2(1, "SpecialOpsDropship", 0, gv_p06_SWANN, PointFromId(862));
        lv_dropship = UnitLastCreated();
        libNtve_gf_MakeUnitInvulnerable(lv_dropship, true);
        UnitSetState(lv_dropship, c_unitStateTargetable, false);
        UnitCargoCreate(lv_dropship, "SCV", 6);
        libLbty_gf_OrderTransporttoUnloadAllthenDespawn(lv_dropship, PointFromId(863), PointFromId(862));
        Wait(5.0, c_timeGame);
        UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/0E5F3E16"), null, PointFromId(863));
        MinimapPing(PlayerGroupAll(), PointFromId(863), 3.0, Color(100.00, 100.00, 0.00));
        auto99D50804_g = UnitCargoLastCreatedGroup();
        auto99D50804_u = UnitGroupCount(auto99D50804_g, c_unitCountAll);
        for (;; auto99D50804_u -= 1) {
            auto99D50804_var = UnitGroupUnitFromEnd(auto99D50804_g, auto99D50804_u);
            if (auto99D50804_var == null) { break; }
            libNtve_gf_RescueUnit(auto99D50804_var, gv_p01_USER, true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SCVReinforcements_Init () {
    gt_SCVReinforcements = TriggerCreate("gt_SCVReinforcements_Func");
    TriggerAddEventUnitDied(gt_SCVReinforcements, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCV Reinforcements Timeout
//--------------------------------------------------------------------------------------------------
bool gt_SCVReinforcementsTimeout_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_sCVsLost = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SCVReinforcementsTimeout_Init () {
    gt_SCVReinforcementsTimeout = TriggerCreate("gt_SCVReinforcementsTimeout_Func");
    TriggerAddEventTimer(gt_SCVReinforcementsTimeout, gv_sCVLossTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Starting Base Mined Out
//--------------------------------------------------------------------------------------------------
bool gt_StartingBaseMinedOut_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_startingMineralFields, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_CommandCenterLiftOffTipQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartingBaseMinedOut_Init () {
    gt_StartingBaseMinedOut = TriggerCreate("gt_StartingBaseMinedOut_Func");
    TriggerAddEventTimePeriodic(gt_StartingBaseMinedOut, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Command Center Replacement
//--------------------------------------------------------------------------------------------------
bool gt_CommandCenterReplacement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_coCe;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "CommandCenter") || (UnitGetType(EventUnit()) == "CommandCenterFlying")))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup("CommandCenter", gv_p01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("CommandCenterFlying", gv_p01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libNtve_gf_UnitCreateFacingPoint(1, "CommandCenterFlying", 0, 0, PointFromId(862), PointFromId(863));
        lv_coCe = UnitLastCreated();
        UnitIssueOrder(lv_coCe, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(863)), c_orderQueueReplace);
        Wait(((DistanceBetweenPoints(PointFromId(862), PointFromId(863)) / UnitGetPropertyFixed(lv_coCe, c_unitPropMovementSpeed, c_unitPropCurrent)) + 0.0), c_timeGame);
        if ((UnitIsAlive(lv_coCe) == true)) {
            UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/19BDCD39"), null, lv_coCe);
            MinimapPing(PlayerGroupAll(), UnitGetPosition(lv_coCe), 5.0, Color(100.00, 100.00, 0.00));
            libNtve_gf_RescueUnit(lv_coCe, gv_p01_USER, true);
            TriggerExecute(gt_TransmissionCommandCenterReplacementQ, true, false);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CommandCenterReplacement_Init () {
    gt_CommandCenterReplacement = TriggerCreate("gt_CommandCenterReplacement_Func");
    TriggerAddEventUnitDied(gt_CommandCenterReplacement, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mineral Pickups
//--------------------------------------------------------------------------------------------------
bool gt_MineralPickups_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mineralsFromPickups += 100;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralPickups_Init () {
    gt_MineralPickups = TriggerCreate("gt_MineralPickups_Func");
    TriggerAddEventUnitAbility(gt_MineralPickups, null, AbilityCommand("PickupMinerals100", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Reapers Change Owner
//--------------------------------------------------------------------------------------------------
bool gt_IntroReapersChangeOwner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoDFF77333_g;
    int autoDFF77333_u;
    unit autoDFF77333_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p05_TOSH))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Reaper"))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(18)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.5, c_timeGame);
    UnitGroupRemove(gv_toshReapers, EventUnit());
    libNtve_gf_RescueUnit(EventUnit(), gv_p01_USER, true);
    autoDFF77333_g = gv_toshReapers;
    autoDFF77333_u = UnitGroupCount(autoDFF77333_g, c_unitCountAll);
    for (;; autoDFF77333_u -= 1) {
        autoDFF77333_var = UnitGroupUnitFromEnd(autoDFF77333_g, autoDFF77333_u);
        if (autoDFF77333_var == null) { break; }
        UnitIssueOrder(autoDFF77333_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(18))), c_orderQueueReplace);
    }
    TriggerExecute(gt_AchievementAllReapersFound, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroReapersChangeOwner_Init () {
    gt_IntroReapersChangeOwner = TriggerCreate("gt_IntroReapersChangeOwner_Func");
    TriggerAddEventUnitBecomesIdle(gt_IntroReapersChangeOwner, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Reapers Change Failsafe
//--------------------------------------------------------------------------------------------------
bool gt_IntroReapersChangeFailsafe_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2D9551B0_g;
    int auto2D9551B0_u;
    unit auto2D9551B0_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(25.0, c_timeGame);
    auto2D9551B0_g = gv_toshReapers;
    auto2D9551B0_u = UnitGroupCount(auto2D9551B0_g, c_unitCountAll);
    for (;; auto2D9551B0_u -= 1) {
        auto2D9551B0_var = UnitGroupUnitFromEnd(auto2D9551B0_g, auto2D9551B0_u);
        if (auto2D9551B0_var == null) { break; }
        UnitGroupRemove(gv_toshReapers, auto2D9551B0_var);
        UnitIssueOrder(auto2D9551B0_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(18))), c_orderQueueReplace);
        libNtve_gf_RescueUnit(auto2D9551B0_var, gv_p01_USER, true);
    }
    TriggerExecute(gt_AchievementAllReapersFound, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroReapersChangeFailsafe_Init () {
    gt_IntroReapersChangeFailsafe = TriggerCreate("gt_IntroReapersChangeFailsafe_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reapers Reinforcements 01
//--------------------------------------------------------------------------------------------------
bool gt_ReapersReinforcements01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_playerGroup;
    unitgroup lv_reaperGroup;

    // Automatic Variable Declarations
    unitgroup autoC03B76C5_g;
    int autoC03B76C5_u;
    unit autoC03B76C5_var;
    unitgroup autoDB292AD8_g;
    int autoDB292AD8_u;
    unit autoDB292AD8_var;

    // Variable Initialization
    lv_playerGroup = UnitGroupEmpty();
    lv_reaperGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(55), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerGroup = UnitGroup(null, gv_p01_USER, RegionFromId(55), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_playerGroup, c_unitCountAlive) > 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        SoundPlay(SoundLink("Reaper_Pissed", 0), PlayerGroupAll(), 100.0, 0.0);
        UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/83BA4089"), null, UnitGetPosition(UnitFromId(803)));
        autoC03B76C5_g = UnitGroup(null, gv_p05_TOSH, RegionFromId(48), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoC03B76C5_u = UnitGroupCount(autoC03B76C5_g, c_unitCountAll);
        for (;; autoC03B76C5_u -= 1) {
            autoC03B76C5_var = UnitGroupUnitFromEnd(autoC03B76C5_g, autoC03B76C5_u);
            if (autoC03B76C5_var == null) { break; }
            UnitGroupAdd(lv_reaperGroup, autoC03B76C5_var);
            libNtve_gf_ShareVisionofUnit(autoC03B76C5_var, true, gv_p01_USER);
            UnitIssueOrder(autoC03B76C5_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1927)), c_orderQueueReplace);
        }
        Wait(2.5, c_timeGame);
        autoDB292AD8_g = lv_reaperGroup;
        autoDB292AD8_u = UnitGroupCount(autoDB292AD8_g, c_unitCountAll);
        for (;; autoDB292AD8_u -= 1) {
            autoDB292AD8_var = UnitGroupUnitFromEnd(autoDB292AD8_g, autoDB292AD8_u);
            if (autoDB292AD8_var == null) { break; }
            libNtve_gf_RescueUnit(autoDB292AD8_var, gv_p01_USER, true);
            gv_unitsRescued += 1;
        }
        TriggerExecute(gt_AchievementAllReapersFound, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReapersReinforcements01_Init () {
    gt_ReapersReinforcements01 = TriggerCreate("gt_ReapersReinforcements01_Func");
    TriggerAddEventTimePeriodic(gt_ReapersReinforcements01, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reapers Reinforcements 02
//--------------------------------------------------------------------------------------------------
bool gt_ReapersReinforcements02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_playerGroup;
    unitgroup lv_reaperGroup;

    // Automatic Variable Declarations
    unitgroup auto20B79E52_g;
    int auto20B79E52_u;
    unit auto20B79E52_var;
    unitgroup auto1D10E944_g;
    int auto1D10E944_u;
    unit auto1D10E944_var;

    // Variable Initialization
    lv_playerGroup = UnitGroupEmpty();
    lv_reaperGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(57), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerGroup = UnitGroup(null, gv_p01_USER, RegionFromId(57), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_playerGroup, c_unitCountAlive) > 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        SoundPlay(SoundLink("Reaper_Attack", 4), PlayerGroupAll(), 100.0, 0.0);
        UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/8A5216EA"), null, UnitGetPosition(UnitFromId(1392)));
        auto20B79E52_g = UnitGroup(null, gv_p05_TOSH, RegionFromId(56), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto20B79E52_u = UnitGroupCount(auto20B79E52_g, c_unitCountAll);
        for (;; auto20B79E52_u -= 1) {
            auto20B79E52_var = UnitGroupUnitFromEnd(auto20B79E52_g, auto20B79E52_u);
            if (auto20B79E52_var == null) { break; }
            UnitGroupAdd(lv_reaperGroup, auto20B79E52_var);
            libNtve_gf_ShareVisionofUnit(auto20B79E52_var, true, gv_p01_USER);
            UnitIssueOrder(auto20B79E52_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1925)), c_orderQueueReplace);
        }
        Wait(2.5, c_timeGame);
        auto1D10E944_g = lv_reaperGroup;
        auto1D10E944_u = UnitGroupCount(auto1D10E944_g, c_unitCountAll);
        for (;; auto1D10E944_u -= 1) {
            auto1D10E944_var = UnitGroupUnitFromEnd(auto1D10E944_g, auto1D10E944_u);
            if (auto1D10E944_var == null) { break; }
            libNtve_gf_RescueUnit(auto1D10E944_var, gv_p01_USER, true);
            gv_unitsRescued += 1;
        }
        TriggerExecute(gt_AchievementAllReapersFound, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReapersReinforcements02_Init () {
    gt_ReapersReinforcements02 = TriggerCreate("gt_ReapersReinforcements02_Func");
    TriggerAddEventTimePeriodic(gt_ReapersReinforcements02, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reapers Reinforcements 03
//--------------------------------------------------------------------------------------------------
bool gt_ReapersReinforcements03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_playerGroup;
    unitgroup lv_reaperGroup;

    // Automatic Variable Declarations
    unitgroup autoE81781EA_g;
    int autoE81781EA_u;
    unit autoE81781EA_var;
    unitgroup auto59045EC4_g;
    int auto59045EC4_u;
    unit auto59045EC4_var;

    // Variable Initialization
    lv_playerGroup = UnitGroupEmpty();
    lv_reaperGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(58), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerGroup = UnitGroup(null, gv_p01_USER, RegionFromId(58), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_playerGroup, c_unitCountAlive) > 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        SoundPlay(SoundLink("Reaper_Attack", 3), PlayerGroupAll(), 100.0, 0.0);
        UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/D4674BF0"), null, UnitGetPosition(UnitFromId(1405)));
        autoE81781EA_g = UnitGroup(null, gv_p05_TOSH, RegionFromId(59), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoE81781EA_u = UnitGroupCount(autoE81781EA_g, c_unitCountAll);
        for (;; autoE81781EA_u -= 1) {
            autoE81781EA_var = UnitGroupUnitFromEnd(autoE81781EA_g, autoE81781EA_u);
            if (autoE81781EA_var == null) { break; }
            UnitGroupAdd(lv_reaperGroup, autoE81781EA_var);
            libNtve_gf_ShareVisionofUnit(autoE81781EA_var, true, gv_p01_USER);
            UnitIssueOrder(autoE81781EA_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1912)), c_orderQueueReplace);
        }
        Wait(2.5, c_timeGame);
        auto59045EC4_g = lv_reaperGroup;
        auto59045EC4_u = UnitGroupCount(auto59045EC4_g, c_unitCountAll);
        for (;; auto59045EC4_u -= 1) {
            auto59045EC4_var = UnitGroupUnitFromEnd(auto59045EC4_g, auto59045EC4_u);
            if (auto59045EC4_var == null) { break; }
            libNtve_gf_RescueUnit(auto59045EC4_var, gv_p01_USER, true);
            gv_unitsRescued += 1;
        }
        TriggerExecute(gt_AchievementAllReapersFound, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReapersReinforcements03_Init () {
    gt_ReapersReinforcements03 = TriggerCreate("gt_ReapersReinforcements03_Func");
    TriggerAddEventTimePeriodic(gt_ReapersReinforcements03, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reapers Reinforcements 04
//--------------------------------------------------------------------------------------------------
bool gt_ReapersReinforcements04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_playerGroup;
    unitgroup lv_reaperGroup;

    // Automatic Variable Declarations
    unitgroup autoFD3BFCD1_g;
    int autoFD3BFCD1_u;
    unit autoFD3BFCD1_var;
    unitgroup autoFF38DCB0_g;
    int autoFF38DCB0_u;
    unit autoFF38DCB0_var;

    // Variable Initialization
    lv_playerGroup = UnitGroupEmpty();
    lv_reaperGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(63), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerGroup = UnitGroup(null, gv_p01_USER, RegionFromId(63), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_playerGroup, c_unitCountAlive) > 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        SoundPlay(SoundLink("Reaper_Attack", 1), PlayerGroupAll(), 100.0, 0.0);
        UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/ABFF9FFB"), null, UnitGetPosition(UnitFromId(1915)));
        autoFD3BFCD1_g = UnitGroup(null, gv_p05_TOSH, RegionFromId(60), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoFD3BFCD1_u = UnitGroupCount(autoFD3BFCD1_g, c_unitCountAll);
        for (;; autoFD3BFCD1_u -= 1) {
            autoFD3BFCD1_var = UnitGroupUnitFromEnd(autoFD3BFCD1_g, autoFD3BFCD1_u);
            if (autoFD3BFCD1_var == null) { break; }
            UnitGroupAdd(lv_reaperGroup, autoFD3BFCD1_var);
            libNtve_gf_ShareVisionofUnit(autoFD3BFCD1_var, true, gv_p01_USER);
            UnitIssueOrder(autoFD3BFCD1_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1917)), c_orderQueueReplace);
        }
        Wait(2.5, c_timeGame);
        autoFF38DCB0_g = lv_reaperGroup;
        autoFF38DCB0_u = UnitGroupCount(autoFF38DCB0_g, c_unitCountAll);
        for (;; autoFF38DCB0_u -= 1) {
            autoFF38DCB0_var = UnitGroupUnitFromEnd(autoFF38DCB0_g, autoFF38DCB0_u);
            if (autoFF38DCB0_var == null) { break; }
            libNtve_gf_RescueUnit(autoFF38DCB0_var, gv_p01_USER, true);
            gv_unitsRescued += 1;
        }
        TriggerExecute(gt_AchievementAllReapersFound, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReapersReinforcements04_Init () {
    gt_ReapersReinforcements04 = TriggerCreate("gt_ReapersReinforcements04_Func");
    TriggerAddEventTimePeriodic(gt_ReapersReinforcements04, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reapers Reinforcements 05
//--------------------------------------------------------------------------------------------------
bool gt_ReapersReinforcements05_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_playerGroup;
    unitgroup lv_reaperGroup;

    // Automatic Variable Declarations
    unitgroup autoC926F1D5_g;
    int autoC926F1D5_u;
    unit autoC926F1D5_var;
    unitgroup autoF7D09147_g;
    int autoF7D09147_u;
    unit autoF7D09147_var;

    // Variable Initialization
    lv_playerGroup = UnitGroupEmpty();
    lv_reaperGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(62), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerGroup = UnitGroup(null, gv_p01_USER, RegionFromId(62), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_playerGroup, c_unitCountAlive) > 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        SoundPlay(SoundLink("Reaper_What", 2), PlayerGroupAll(), 100.0, 0.0);
        UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/8D9E3F4F"), null, UnitGetPosition(UnitFromId(1922)));
        autoC926F1D5_g = UnitGroup(null, gv_p05_TOSH, RegionFromId(61), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoC926F1D5_u = UnitGroupCount(autoC926F1D5_g, c_unitCountAll);
        for (;; autoC926F1D5_u -= 1) {
            autoC926F1D5_var = UnitGroupUnitFromEnd(autoC926F1D5_g, autoC926F1D5_u);
            if (autoC926F1D5_var == null) { break; }
            UnitGroupAdd(lv_reaperGroup, autoC926F1D5_var);
            libNtve_gf_ShareVisionofUnit(autoC926F1D5_var, true, gv_p01_USER);
            UnitIssueOrder(autoC926F1D5_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1926)), c_orderQueueReplace);
        }
        Wait(2.5, c_timeGame);
        autoF7D09147_g = lv_reaperGroup;
        autoF7D09147_u = UnitGroupCount(autoF7D09147_g, c_unitCountAll);
        for (;; autoF7D09147_u -= 1) {
            autoF7D09147_var = UnitGroupUnitFromEnd(autoF7D09147_g, autoF7D09147_u);
            if (autoF7D09147_var == null) { break; }
            libNtve_gf_RescueUnit(autoF7D09147_var, gv_p01_USER, true);
            gv_unitsRescued += 1;
        }
        TriggerExecute(gt_AchievementAllReapersFound, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReapersReinforcements05_Init () {
    gt_ReapersReinforcements05 = TriggerCreate("gt_ReapersReinforcements05_Func");
    TriggerAddEventTimePeriodic(gt_ReapersReinforcements05, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Surge
//--------------------------------------------------------------------------------------------------
bool gt_FirstSurge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_warning01Timer, (60.0 - 30.0), false, c_timeAI);
    TimerStart(gv_warning02Timer, (60.0 - 10.0), false, c_timeAI);
    TimerStart(gv_lavaTimer, 60.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstSurge_Init () {
    gt_FirstSurge = TriggerCreate("gt_FirstSurge_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lava Timer Create
//--------------------------------------------------------------------------------------------------
bool gt_LavaTimerCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeReal);
    TimerWindowCreate(gv_lavaTimer, StringExternal("Param/Value/B68D184A"), true, false);
    gv_lavaTimerWindow = TimerWindowLastCreated();
    TimerWindowSetFormat(gv_lavaTimerWindow, StringToText("<mintotal/>:<sec2/>"));
    TimerWindowSetColor(gv_lavaTimerWindow, c_timerWindowColorTime, Color(0.00, 100.00, 0.00), 0.0);
    TriggerExecute(gt_TransmissionIntroLavaTimerQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LavaTimerCreate_Init () {
    gt_LavaTimerCreate = TriggerCreate("gt_LavaTimerCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lava Surge Music
//--------------------------------------------------------------------------------------------------
bool gt_LavaSurgeMusic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTosh01MusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LavaSurgeMusic_Init () {
    gt_LavaSurgeMusic = TriggerCreate("gt_LavaSurgeMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Camera Shake - Weak
//--------------------------------------------------------------------------------------------------
bool gt_CameraShakeWeak_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.05, 2.0, 100.0, 3.0);
    WaterSetState("Template 1|Alternate Setting 1", 15.0, c_wtcLinear);
    GameSetLighting("TTosh01Warning", 15.0);
    Wait(2.0, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "TTosh01FlameGeyser", "StandWork", "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CameraShakeWeak_Init () {
    gt_CameraShakeWeak = TriggerCreate("gt_CameraShakeWeak_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Camera Shake - Strong
//--------------------------------------------------------------------------------------------------
bool gt_CameraShakeStrong_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 2.0, 100.0, 4.0);
    Wait(4.0, c_timeGame);
    TriggerExecute(gt_MakeCrittersFlee, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CameraShakeStrong_Init () {
    gt_CameraShakeStrong = TriggerCreate("gt_CameraShakeStrong_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Camera Shake - During Lava
//--------------------------------------------------------------------------------------------------
bool gt_CameraShakeDuringLava_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 2.0, 100.0, 4.0);
    Wait(4.0, c_timeGame);
    CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.06, 2.0, 100.0, 2.0);
    libNtve_gf_KillDoodadsInRegion(RegionCircle(CameraGetTarget(gv_p01_USER), 15.0), "TTosh01RockSpires");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CameraShakeDuringLava_Init () {
    gt_CameraShakeDuringLava = TriggerCreate("gt_CameraShakeDuringLava_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lava Turns ON
//--------------------------------------------------------------------------------------------------
bool gt_LavaTurnsON_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_lowGroundIsSafe == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_noOfLavaSurges += 1;
    TimerWindowShow(gv_lavaTimerWindow, PlayerGroupAll(), false);
    TriggerExecute(gt_CameraShakeDuringLava, true, false);
    SoundPlay(SoundLink("TUILavaRising", -1), PlayerGroupAll(), 100.0, 0.0);
    WaterSetState("Template 1|Alternate Setting 2", 4.0, c_wtcLinear);
    GameSetLighting("TTosh01Eruption", 4.0);
    libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionEntireMap(), "TTosh01FlameGeyser", "StandWork");
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "CharAshWeather", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    Wait(2.0, c_timeGame);
    gv_lowGroundIsSafe = false;
    TriggerEnable(gt_LavaDamage, true);
    TimerStart(gv_lavaTimer, 15.0, false, c_timeAI);
    Wait(2.0, c_timeGame);
    TriggerEnable(gt_LavaTurnsOFF, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LavaTurnsON_Init () {
    gt_LavaTurnsON = TriggerCreate("gt_LavaTurnsON_Func");
    TriggerAddEventTimer(gt_LavaTurnsON, gv_lavaTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lava Turns OFF
//--------------------------------------------------------------------------------------------------
bool gt_LavaTurnsOFF_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_lowGroundIsSafe == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("TUILavaRising", -1), PlayerGroupAll(), 100.0, 0.0);
    WaterSetState("Template 1|[Default]", 10.0, c_wtcLinear);
    GameSetLighting("TTosh01Normal", 10.0);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "CharAshWeather", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    Wait(2.0, c_timeGame);
    gv_lowGroundIsSafe = true;
    TriggerEnable(gt_LavaDamage, false);
    TriggerExecute(gt_MakeCrittersReturn, true, false);
    TimerStart(gv_warning01Timer, (gv_lavaInterval - 30.0), false, c_timeAI);
    TimerStart(gv_warning02Timer, (gv_lavaInterval - 10.0), false, c_timeAI);
    TimerStart(gv_lavaTimer, gv_lavaInterval, false, c_timeAI);
    if ((libNtve_gf_DifficultyValueInt(1, 1, 1, 0) == 1)) {
        TimerWindowShow(gv_lavaTimerWindow, PlayerGroupAll(), true);
    }

    Wait(2.0, c_timeGame);
    TriggerEnable(gt_LavaTurnsON, true);
    TriggerExecute(gt_ItsSafeQ, true, false);
    if ((libNtve_gf_DifficultyValueInt(1, 1, 1, 0) == 1) && (gv_timerCreated == false)) {
        TriggerExecute(gt_LavaTimerCreate, true, false);
        gv_timerCreated = true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LavaTurnsOFF_Init () {
    gt_LavaTurnsOFF = TriggerCreate("gt_LavaTurnsOFF_Func");
    TriggerEnable(gt_LavaTurnsOFF, false);
    TriggerAddEventTimer(gt_LavaTurnsOFF, gv_lavaTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lava Damage
//--------------------------------------------------------------------------------------------------
bool gt_LavaDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD2B9032B_g;
    int autoD2B9032B_u;
    unit autoD2B9032B_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD2B9032B_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    autoD2B9032B_u = UnitGroupCount(autoD2B9032B_g, c_unitCountAll);
    for (;; autoD2B9032B_u -= 1) {
        autoD2B9032B_var = UnitGroupUnitFromEnd(autoD2B9032B_g, autoD2B9032B_u);
        if (autoD2B9032B_var == null) { break; }
        if ((WorldHeight(c_heightMapGround, UnitGetPosition(autoD2B9032B_var)) <= 8.5)) {
            UnitBehaviorAddPlayer(autoD2B9032B_var, "LavaDamage", gv_p03_LAVA, 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LavaDamage_Init () {
    gt_LavaDamage = TriggerCreate("gt_LavaDamage_Func");
    TriggerEnable(gt_LavaDamage, false);
    TriggerAddEventTimePeriodic(gt_LavaDamage, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lava Warning 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_LavaWarning01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_CameraShakeWeak, true, false);
    SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundWait(SoundLastPlayed(), 1.0, c_soundOffsetEnd);
    TriggerExecute(gt_LavaSurgeMusic, true, false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    if ((gv_firstWarning == true)) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TTosh01Adjutant00013", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh01Adjutant00013", -1), c_transmissionDurationAdd, 0.0, true);
        // Transmission - SoundLink("TTosh01Raynor00001", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh01Raynor00001", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }
    else {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TTosh01Adjutant00010", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh01Adjutant00010", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LavaWarning01Q_Init () {
    gt_LavaWarning01Q = TriggerCreate("gt_LavaWarning01Q_Func");
    TriggerAddEventTimer(gt_LavaWarning01Q, gv_warning01Timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lava Warning 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_LavaWarning02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_CameraShakeStrong, true, false);
    if ((gv_firstWarning == true)) {
        gv_firstWarning = false;
        Wait(4.0, c_timeGame);
        CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.05, 2.0, 100.0, 4.0);
    }
    else {
        TriggerQueueEnter();
        if ((gv_gameOver == true)) {
            return true;
        }

        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TTosh01Adjutant00013", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh01Adjutant00013", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LavaWarning02Q_Init () {
    gt_LavaWarning02Q = TriggerCreate("gt_LavaWarning02Q_Func");
    TriggerAddEventTimer(gt_LavaWarning02Q, gv_warning02Timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: "It's Safe" Q
//--------------------------------------------------------------------------------------------------
bool gt_ItsSafeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh01Adjutant00037", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh01Adjutant00037", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ItsSafeQ_Init () {
    gt_ItsSafeQ = TriggerCreate("gt_ItsSafeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - SCV Reinforcements Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSCVReinforcementsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh01Raynor00017", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh01Raynor00017", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionSCVReinforcementsQ_Init () {
    gt_TransmissionSCVReinforcementsQ = TriggerCreate("gt_TransmissionSCVReinforcementsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Command Center Replacement Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionCommandCenterReplacementQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh01Horner00018", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh01Horner00018", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionCommandCenterReplacementQ_Init () {
    gt_TransmissionCommandCenterReplacementQ = TriggerCreate("gt_TransmissionCommandCenterReplacementQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Intro Lava Timer Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionIntroLavaTimerQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh01Horner00008", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh01Horner00008", -1), c_transmissionDurationAdd, 1.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionIntroLavaTimerQ_Init () {
    gt_TransmissionIntroLavaTimerQ = TriggerCreate("gt_TransmissionIntroLavaTimerQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Reaper Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionReaperIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB5E80A33_g;
    int autoB5E80A33_u;
    unit autoB5E80A33_var;
    unitgroup auto59E65917_g;
    int auto59E65917_u;
    unit auto59E65917_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupInfantryReaper, gv_p01_USER);
    autoB5E80A33_g = gv_toshReapers;
    autoB5E80A33_u = UnitGroupCount(autoB5E80A33_g, c_unitCountAll);
    for (;; autoB5E80A33_u -= 1) {
        autoB5E80A33_var = UnitGroupUnitFromEnd(autoB5E80A33_g, autoB5E80A33_u);
        if (autoB5E80A33_var == null) { break; }
        UnitIssueOrder(autoB5E80A33_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(18))), c_orderQueueReplace);
    }
    TriggerExecute(gt_IntroReapersChangeFailsafe, true, false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh01Tosh00012", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh01Tosh00012", -1), c_transmissionDurationAdd, 0.0, true);
    auto59E65917_g = gv_toshReapers;
    auto59E65917_u = UnitGroupCount(auto59E65917_g, c_unitCountAll);
    for (;; auto59E65917_u -= 1) {
        auto59E65917_var = UnitGroupUnitFromEnd(auto59E65917_g, auto59E65917_u);
        if (auto59E65917_var == null) { break; }
        gv_unitsRescued += 1;
        libNtve_gf_ShareVisionofUnit(auto59E65917_var, true, gv_p01_USER);
    }
    // Transmission - SoundLink("TTosh01Swann00002", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh01Swann00002", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/CF04682F"), null, UnitGroupRandomUnit(gv_toshReapers, c_unitCountAlive));
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(18)), 2.0, Color(0.00, 100.00, 0.00));
    Wait(2.0, c_timeReal);
    if ((libNtve_gf_UnitGroupIsDead(gv_toshReapers) == false)) {
        SoundPlay(SoundLink("Reaper_What", 1), PlayerGroupAll(), 100.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    }

    TriggerExecute(gt_ReaperTip, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionReaperIntroQ_Init () {
    gt_TransmissionReaperIntroQ = TriggerCreate("gt_TransmissionReaperIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Watch Spending Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionWatchSpendingWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitProgressUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "SCV"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_combatUnitsTrained = (gv_combatUnitsTrained + 1);
    if ((gv_combatUnitsTrained < 8)) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh01Horner00016", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh01Horner00016", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionWatchSpendingWarningQ_Init () {
    gt_TransmissionWatchSpendingWarningQ = TriggerCreate("gt_TransmissionWatchSpendingWarningQ_Func");
    TriggerAddEventUnitTrainProgress(gt_TransmissionWatchSpendingWarningQ, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Find Tosh's Missing Miners Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFindToshsMissingMinersQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_toshMinersRescued == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if (((gv_gameOver == true) || (gv_toshMinersRescued == true))) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh01Tosh00040", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh01Tosh00040", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFindToshsMissingMinersQ_Init () {
    gt_TransmissionFindToshsMissingMinersQ = TriggerCreate("gt_TransmissionFindToshsMissingMinersQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Missing Miners Found Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionMissingMinersFoundQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh01SCV00041", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh01SCV00041", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionMissingMinersFoundQ_Init () {
    gt_TransmissionMissingMinersFoundQ = TriggerCreate("gt_TransmissionMissingMinersFoundQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Brutalisk Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBrutaliskWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh01Stetmann00005", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh01Stetmann00005", -1), c_transmissionDurationAdd, 1.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBrutaliskWarningQ_Init () {
    gt_TransmissionBrutaliskWarningQ = TriggerCreate("gt_TransmissionBrutaliskWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Mineral Node Reveal 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionMineralNodeReveal1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh01Tosh00046", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh01Tosh00046", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerExecute(gt_MineralNodeReveal1, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionMineralNodeReveal1Q_Init () {
    gt_TransmissionMineralNodeReveal1Q = TriggerCreate("gt_TransmissionMineralNodeReveal1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mineral Node Reveal 1
//--------------------------------------------------------------------------------------------------
bool gt_MineralNodeReveal1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoFB64C290_g;
    int autoFB64C290_u;
    unit autoFB64C290_var;
    unitgroup auto54C05CEA_g;
    int auto54C05CEA_u;
    unit auto54C05CEA_var;
    unitgroup autoF08FD742_g;
    int autoF08FD742_u;
    unit autoF08FD742_var;
    unitgroup auto16481552_g;
    int auto16481552_u;
    unit auto16481552_var;
    unitgroup auto32D3A7DE_g;
    int auto32D3A7DE_u;
    unit auto32D3A7DE_var;
    unitgroup auto187B1827_g;
    int auto187B1827_u;
    unit auto187B1827_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(7)), 5.0, Color(0.00, 100.00, 0.00));
        autoFB64C290_g = UnitGroup("MineralField", c_playerAny, RegionFromId(7), UnitFilter(0, 0, 0, 0), 0);
        autoFB64C290_u = UnitGroupCount(autoFB64C290_g, c_unitCountAll);
        for (;; autoFB64C290_u -= 1) {
            autoFB64C290_var = UnitGroupUnitFromEnd(autoFB64C290_g, autoFB64C290_u);
            if (autoFB64C290_var == null) { break; }
            VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(autoFB64C290_var), 1.0), 0.1, false);
            VisExploreArea(gv_p01_USER, RegionCircle(UnitGetPosition(autoFB64C290_var), 2.0), true, false);
        }
        auto54C05CEA_g = UnitGroup("RichMineralField", c_playerAny, RegionFromId(7), UnitFilter(0, 0, 0, 0), 0);
        auto54C05CEA_u = UnitGroupCount(auto54C05CEA_g, c_unitCountAll);
        for (;; auto54C05CEA_u -= 1) {
            auto54C05CEA_var = UnitGroupUnitFromEnd(auto54C05CEA_g, auto54C05CEA_u);
            if (auto54C05CEA_var == null) { break; }
            VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(auto54C05CEA_var), 1.0), 0.1, false);
            VisExploreArea(gv_p01_USER, RegionCircle(UnitGetPosition(auto54C05CEA_var), 2.0), true, false);
        }
        Wait(2.0, c_timeReal);
    }

    if ((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(8)), 5.0, Color(0.00, 100.00, 0.00));
        autoF08FD742_g = UnitGroup("MineralField", c_playerAny, RegionFromId(8), UnitFilter(0, 0, 0, 0), 0);
        autoF08FD742_u = UnitGroupCount(autoF08FD742_g, c_unitCountAll);
        for (;; autoF08FD742_u -= 1) {
            autoF08FD742_var = UnitGroupUnitFromEnd(autoF08FD742_g, autoF08FD742_u);
            if (autoF08FD742_var == null) { break; }
            VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(autoF08FD742_var), 1.0), 0.1, false);
            VisExploreArea(gv_p01_USER, RegionCircle(UnitGetPosition(autoF08FD742_var), 2.0), true, false);
        }
        auto16481552_g = UnitGroup("RichMineralField", c_playerAny, RegionFromId(8), UnitFilter(0, 0, 0, 0), 0);
        auto16481552_u = UnitGroupCount(auto16481552_g, c_unitCountAll);
        for (;; auto16481552_u -= 1) {
            auto16481552_var = UnitGroupUnitFromEnd(auto16481552_g, auto16481552_u);
            if (auto16481552_var == null) { break; }
            VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(auto16481552_var), 1.0), 0.1, false);
            VisExploreArea(gv_p01_USER, RegionCircle(UnitGetPosition(auto16481552_var), 2.0), true, false);
        }
        Wait(2.0, c_timeReal);
    }

    if ((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(9)), 5.0, Color(0.00, 100.00, 0.00));
        auto32D3A7DE_g = UnitGroup("MineralField", c_playerAny, RegionFromId(9), UnitFilter(0, 0, 0, 0), 0);
        auto32D3A7DE_u = UnitGroupCount(auto32D3A7DE_g, c_unitCountAll);
        for (;; auto32D3A7DE_u -= 1) {
            auto32D3A7DE_var = UnitGroupUnitFromEnd(auto32D3A7DE_g, auto32D3A7DE_u);
            if (auto32D3A7DE_var == null) { break; }
            VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(auto32D3A7DE_var), 1.0), 0.1, false);
            VisExploreArea(gv_p01_USER, RegionCircle(UnitGetPosition(auto32D3A7DE_var), 2.0), true, false);
        }
        auto187B1827_g = UnitGroup("RichMineralField", c_playerAny, RegionFromId(9), UnitFilter(0, 0, 0, 0), 0);
        auto187B1827_u = UnitGroupCount(auto187B1827_g, c_unitCountAll);
        for (;; auto187B1827_u -= 1) {
            auto187B1827_var = UnitGroupUnitFromEnd(auto187B1827_g, auto187B1827_u);
            if (auto187B1827_var == null) { break; }
            VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(auto187B1827_var), 1.0), 0.1, false);
            VisExploreArea(gv_p01_USER, RegionCircle(UnitGetPosition(auto187B1827_var), 2.0), true, false);
        }
        Wait(2.0, c_timeReal);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralNodeReveal1_Init () {
    gt_MineralNodeReveal1 = TriggerCreate("gt_MineralNodeReveal1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Mineral Node Reveal 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionMineralNodeReveal2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh01Tosh00047", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh01Tosh00047", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerExecute(gt_MineralNodeReveal2, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionMineralNodeReveal2Q_Init () {
    gt_TransmissionMineralNodeReveal2Q = TriggerCreate("gt_TransmissionMineralNodeReveal2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mineral Node Reveal 2
//--------------------------------------------------------------------------------------------------
bool gt_MineralNodeReveal2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE35494DE_g;
    int autoE35494DE_u;
    unit autoE35494DE_var;
    unitgroup autoF24145D4_g;
    int autoF24145D4_u;
    unit autoF24145D4_var;
    unitgroup auto897EAB2A_g;
    int auto897EAB2A_u;
    unit auto897EAB2A_var;
    unitgroup auto7E122AC5_g;
    int auto7E122AC5_u;
    unit auto7E122AC5_var;
    unitgroup autoCF66015A_g;
    int autoCF66015A_u;
    unit autoCF66015A_var;
    unitgroup auto10802A19_g;
    int auto10802A19_u;
    unit auto10802A19_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(10)), 5.0, Color(0.00, 100.00, 0.00));
        autoE35494DE_g = UnitGroup("MineralField", c_playerAny, RegionFromId(10), UnitFilter(0, 0, 0, 0), 0);
        autoE35494DE_u = UnitGroupCount(autoE35494DE_g, c_unitCountAll);
        for (;; autoE35494DE_u -= 1) {
            autoE35494DE_var = UnitGroupUnitFromEnd(autoE35494DE_g, autoE35494DE_u);
            if (autoE35494DE_var == null) { break; }
            VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(autoE35494DE_var), 1.0), 0.1, false);
            VisExploreArea(gv_p01_USER, RegionCircle(UnitGetPosition(autoE35494DE_var), 2.0), true, false);
        }
        autoF24145D4_g = UnitGroup("RichMineralField", c_playerAny, RegionFromId(10), UnitFilter(0, 0, 0, 0), 0);
        autoF24145D4_u = UnitGroupCount(autoF24145D4_g, c_unitCountAll);
        for (;; autoF24145D4_u -= 1) {
            autoF24145D4_var = UnitGroupUnitFromEnd(autoF24145D4_g, autoF24145D4_u);
            if (autoF24145D4_var == null) { break; }
            VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(autoF24145D4_var), 1.0), 0.1, false);
            VisExploreArea(gv_p01_USER, RegionCircle(UnitGetPosition(autoF24145D4_var), 2.0), true, false);
        }
        Wait(2.0, c_timeReal);
    }

    if ((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(11)), 5.0, Color(0.00, 100.00, 0.00));
        auto897EAB2A_g = UnitGroup("MineralField", c_playerAny, RegionFromId(11), UnitFilter(0, 0, 0, 0), 0);
        auto897EAB2A_u = UnitGroupCount(auto897EAB2A_g, c_unitCountAll);
        for (;; auto897EAB2A_u -= 1) {
            auto897EAB2A_var = UnitGroupUnitFromEnd(auto897EAB2A_g, auto897EAB2A_u);
            if (auto897EAB2A_var == null) { break; }
            VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(auto897EAB2A_var), 1.0), 0.1, false);
            VisExploreArea(gv_p01_USER, RegionCircle(UnitGetPosition(auto897EAB2A_var), 2.0), true, false);
        }
        auto7E122AC5_g = UnitGroup("RichMineralField", c_playerAny, RegionFromId(11), UnitFilter(0, 0, 0, 0), 0);
        auto7E122AC5_u = UnitGroupCount(auto7E122AC5_g, c_unitCountAll);
        for (;; auto7E122AC5_u -= 1) {
            auto7E122AC5_var = UnitGroupUnitFromEnd(auto7E122AC5_g, auto7E122AC5_u);
            if (auto7E122AC5_var == null) { break; }
            VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(auto7E122AC5_var), 1.0), 0.1, false);
            VisExploreArea(gv_p01_USER, RegionCircle(UnitGetPosition(auto7E122AC5_var), 2.0), true, false);
        }
        Wait(2.0, c_timeReal);
    }

    if ((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(12)), 5.0, Color(0.00, 100.00, 0.00));
        autoCF66015A_g = UnitGroup("MineralField", c_playerAny, RegionFromId(12), UnitFilter(0, 0, 0, 0), 0);
        autoCF66015A_u = UnitGroupCount(autoCF66015A_g, c_unitCountAll);
        for (;; autoCF66015A_u -= 1) {
            autoCF66015A_var = UnitGroupUnitFromEnd(autoCF66015A_g, autoCF66015A_u);
            if (autoCF66015A_var == null) { break; }
            VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(autoCF66015A_var), 1.0), 0.1, false);
            VisExploreArea(gv_p01_USER, RegionCircle(UnitGetPosition(autoCF66015A_var), 2.0), true, false);
        }
        auto10802A19_g = UnitGroup("RichMineralField", c_playerAny, RegionFromId(12), UnitFilter(0, 0, 0, 0), 0);
        auto10802A19_u = UnitGroupCount(auto10802A19_g, c_unitCountAll);
        for (;; auto10802A19_u -= 1) {
            auto10802A19_var = UnitGroupUnitFromEnd(auto10802A19_g, auto10802A19_u);
            if (auto10802A19_var == null) { break; }
            VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(auto10802A19_var), 1.0), 0.1, false);
            VisExploreArea(gv_p01_USER, RegionCircle(UnitGetPosition(auto10802A19_var), 2.0), true, false);
        }
        Wait(2.0, c_timeReal);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralNodeReveal2_Init () {
    gt_MineralNodeReveal2 = TriggerCreate("gt_MineralNodeReveal2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Mineral Node Reveal 3 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionMineralNodeReveal3Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh01Tosh00048", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh01Tosh00048", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerExecute(gt_MineralNodeReveal3, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionMineralNodeReveal3Q_Init () {
    gt_TransmissionMineralNodeReveal3Q = TriggerCreate("gt_TransmissionMineralNodeReveal3Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mineral Node Reveal 3
//--------------------------------------------------------------------------------------------------
bool gt_MineralNodeReveal3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoAA9765E3_g;
    int autoAA9765E3_u;
    unit autoAA9765E3_var;
    unitgroup auto1419673B_g;
    int auto1419673B_u;
    unit auto1419673B_var;
    unitgroup auto742E4B24_g;
    int auto742E4B24_u;
    unit auto742E4B24_var;
    unitgroup auto23140AAD_g;
    int auto23140AAD_u;
    unit auto23140AAD_var;
    unitgroup autoC799E74B_g;
    int autoC799E74B_u;
    unit autoC799E74B_var;
    unitgroup auto18E4D2A9_g;
    int auto18E4D2A9_u;
    unit auto18E4D2A9_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(14)), 5.0, Color(0.00, 100.00, 0.00));
        autoAA9765E3_g = UnitGroup("MineralField", c_playerAny, RegionFromId(14), UnitFilter(0, 0, 0, 0), 0);
        autoAA9765E3_u = UnitGroupCount(autoAA9765E3_g, c_unitCountAll);
        for (;; autoAA9765E3_u -= 1) {
            autoAA9765E3_var = UnitGroupUnitFromEnd(autoAA9765E3_g, autoAA9765E3_u);
            if (autoAA9765E3_var == null) { break; }
            VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(autoAA9765E3_var), 1.0), 0.1, false);
            VisExploreArea(gv_p01_USER, RegionCircle(UnitGetPosition(autoAA9765E3_var), 2.0), true, false);
        }
        auto1419673B_g = UnitGroup("RichMineralField", c_playerAny, RegionFromId(14), UnitFilter(0, 0, 0, 0), 0);
        auto1419673B_u = UnitGroupCount(auto1419673B_g, c_unitCountAll);
        for (;; auto1419673B_u -= 1) {
            auto1419673B_var = UnitGroupUnitFromEnd(auto1419673B_g, auto1419673B_u);
            if (auto1419673B_var == null) { break; }
            VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(auto1419673B_var), 1.0), 0.1, false);
            VisExploreArea(gv_p01_USER, RegionCircle(UnitGetPosition(auto1419673B_var), 2.0), true, false);
        }
        Wait(2.0, c_timeReal);
    }

    if ((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(16)), 5.0, Color(0.00, 100.00, 0.00));
        auto742E4B24_g = UnitGroup("MineralField", c_playerAny, RegionFromId(16), UnitFilter(0, 0, 0, 0), 0);
        auto742E4B24_u = UnitGroupCount(auto742E4B24_g, c_unitCountAll);
        for (;; auto742E4B24_u -= 1) {
            auto742E4B24_var = UnitGroupUnitFromEnd(auto742E4B24_g, auto742E4B24_u);
            if (auto742E4B24_var == null) { break; }
            VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(auto742E4B24_var), 1.0), 0.1, false);
            VisExploreArea(gv_p01_USER, RegionCircle(UnitGetPosition(auto742E4B24_var), 2.0), true, false);
        }
        auto23140AAD_g = UnitGroup("RichMineralField", c_playerAny, RegionFromId(16), UnitFilter(0, 0, 0, 0), 0);
        auto23140AAD_u = UnitGroupCount(auto23140AAD_g, c_unitCountAll);
        for (;; auto23140AAD_u -= 1) {
            auto23140AAD_var = UnitGroupUnitFromEnd(auto23140AAD_g, auto23140AAD_u);
            if (auto23140AAD_var == null) { break; }
            VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(auto23140AAD_var), 1.0), 0.1, false);
            VisExploreArea(gv_p01_USER, RegionCircle(UnitGetPosition(auto23140AAD_var), 2.0), true, false);
        }
        Wait(2.0, c_timeReal);
    }

    if ((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(2)), 5.0, Color(0.00, 100.00, 0.00));
        autoC799E74B_g = UnitGroup("MineralField", c_playerAny, RegionFromId(2), UnitFilter(0, 0, 0, 0), 0);
        autoC799E74B_u = UnitGroupCount(autoC799E74B_g, c_unitCountAll);
        for (;; autoC799E74B_u -= 1) {
            autoC799E74B_var = UnitGroupUnitFromEnd(autoC799E74B_g, autoC799E74B_u);
            if (autoC799E74B_var == null) { break; }
            VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(autoC799E74B_var), 1.0), 0.1, false);
            VisExploreArea(gv_p01_USER, RegionCircle(UnitGetPosition(autoC799E74B_var), 2.0), true, false);
        }
        auto18E4D2A9_g = UnitGroup("RichMineralField", c_playerAny, RegionFromId(2), UnitFilter(0, 0, 0, 0), 0);
        auto18E4D2A9_u = UnitGroupCount(auto18E4D2A9_g, c_unitCountAll);
        for (;; auto18E4D2A9_u -= 1) {
            auto18E4D2A9_var = UnitGroupUnitFromEnd(auto18E4D2A9_g, auto18E4D2A9_u);
            if (auto18E4D2A9_var == null) { break; }
            VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(auto18E4D2A9_var), 1.0), 0.1, false);
            VisExploreArea(gv_p01_USER, RegionCircle(UnitGetPosition(auto18E4D2A9_var), 2.0), true, false);
        }
        Wait(2.0, c_timeReal);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralNodeReveal3_Init () {
    gt_MineralNodeReveal3 = TriggerCreate("gt_MineralNodeReveal3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Milestone - 4000 Minerals Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionMilestone4000MineralsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(gv_p01_USER, c_playerPropMinerals) >= 4000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh01Tosh00003", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh01Tosh00003", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(2.0, c_timeReal);
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/A5B2EEF0"));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionMilestone4000MineralsQ_Init () {
    gt_TransmissionMilestone4000MineralsQ = TriggerCreate("gt_TransmissionMilestone4000MineralsQ_Func");
    TriggerAddEventTimePeriodic(gt_TransmissionMilestone4000MineralsQ, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Milestone - 6500 Minerals Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionMilestone6500MineralsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(gv_p01_USER, c_playerPropMinerals) >= 6500))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh01Tosh00004", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh01Tosh00004", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(2.0, c_timeReal);
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/42922E77"));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionMilestone6500MineralsQ_Init () {
    gt_TransmissionMilestone6500MineralsQ = TriggerCreate("gt_TransmissionMilestone6500MineralsQ_Func");
    TriggerAddEventTimePeriodic(gt_TransmissionMilestone6500MineralsQ, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Command Center Lift Off Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_CommandCenterLiftOffTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_CreateTipFromConversationState("StoryTips|Tosh01_Liftoff", libNtve_ge_TipType_NewAbility, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CommandCenterLiftOffTipQ_Init () {
    gt_CommandCenterLiftOffTipQ = TriggerCreate("gt_CommandCenterLiftOffTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reaper Tip
//--------------------------------------------------------------------------------------------------
bool gt_ReaperTip_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_CreateTipFromConversationState("StoryTips|Tosh01_Reapers", libNtve_ge_TipType_NewUnit, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReaperTip_Init () {
    gt_ReaperTip = TriggerCreate("gt_ReaperTip_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rich Mineral Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_RichMineralTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_CreateTipFromConversationState("StoryTips|Tosh01_RichMinerals", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RichMineralTipQ_Init () {
    gt_RichMineralTipQ = TriggerCreate("gt_RichMineralTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Brutalisk Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergBrutaliskTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_CreateTipFromConversationState("StoryTips|Tosh01_Brutalisk", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergBrutaliskTipQ_Init () {
    gt_ZergBrutaliskTipQ = TriggerCreate("gt_ZergBrutaliskTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Storymode Tips Q
//--------------------------------------------------------------------------------------------------
bool gt_StorymodeTipsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_CreateStorymodeTips();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StorymodeTipsQ_Init () {
    gt_StorymodeTipsQ = TriggerCreate("gt_StorymodeTipsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - All Reapers Found
//--------------------------------------------------------------------------------------------------
bool gt_AchievementAllReapersFound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1))) {
            return false;
        }

        if (!((gv_unitsRescued >= gv_totalUnitsToRescue))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AchievementAward(gv_p01_USER, "TTosh01_3");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementAllReapersFound_Init () {
    gt_AchievementAllReapersFound = TriggerCreate("gt_AchievementAllReapersFound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Feat of Strength - Destroy All Zerg
//--------------------------------------------------------------------------------------------------
bool gt_FeatofStrengthDestroyAllZerg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p02_ZERG, RegionPlayableMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p04_ZERG, RegionPlayableMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AchievementAward(gv_p01_USER, "FeatOfStrength_TTosh01");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FeatofStrengthDestroyAllZerg_Init () {
    gt_FeatofStrengthDestroyAllZerg = TriggerCreate("gt_FeatofStrengthDestroyAllZerg_Func");
    TriggerAddEventTimePeriodic(gt_FeatofStrengthDestroyAllZerg, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Collected Quota
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCollectedQuota_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(gv_p01_USER, c_playerPropMinerals) >= gv_objectiveMineralsQuota))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerExecute(gt_ObjectiveCollectComplete, true, true);
    libCamp_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCollectedQuota_Init () {
    gt_VictoryCollectedQuota = TriggerCreate("gt_VictoryCollectedQuota_Func");
    TriggerAddEventPlayerPropChange(gt_VictoryCollectedQuota, gv_p01_USER, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitPauseAll(true);
    if ((gv_unitsRescued > gv_totalUnitsToRescue)) {
        gv_unitsRescued = 26;
    }

    if ((ObjectiveGetState(gv_objectiveCollect) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveRescue) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_researchObjectiveKilltheBrutalisk) == c_objectiveStateCompleted)) {
        AchievementAward(gv_p01_USER, "TTosh01_1");
    }

    VictoryPanelAddAchievement("TTosh01_1");
    VictoryPanelAddAchievement("TTosh01_2");
    VictoryPanelAddAchievement("TTosh01_3");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/40A2BE2F"), FormatNumber((PlayerScoreValueGetAsInt(gv_p01_USER, "MineralsCollected") + gv_mineralsFromPickups)));
    VictoryPanelAddTrackedStatistic("MineralsSpent");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/FDD0DDC6"), (IntToText(gv_unitsRescued) + StringExternal("Param/Value/7F2DC9D8") + IntToText(gv_totalUnitsToRescue)));
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    if ((gv_brutaliskKilled == 1)) {
        VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/AFBF7182"), StringExternal("Param/Value/3F7597D4"));
    }
    else {
        VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/E6D939CA"), StringExternal("Param/Value/2B58366B"));
    }
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/2E368B64"), (IntToText((gv_brutaliskKilled * libCamp_gf_StoryResearchObjectReward(libCamp_ge_StoryResearchObject_ResearchObjectKilltheBrutalisk, libCamp_ge_StoryResearchCategory_ResearchCategoryZerg)))));
    libCamp_gf_EndCampaignMission(gv_p01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/24E1C1CC"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_EndCampaignMission(gv_p01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    libCamp_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_p01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_p01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Collect Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCollectCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate((TextReplaceWord(StringExternal("Param/Value/D3C035F7"), StringExternal("Param/Value/8BAF666E"), IntToText(gv_objectiveMineralsQuota), c_stringReplaceAll, c_stringCase)), StringExternal("Param/Value/0022CD68"), c_objectiveStateActive, true);
    gv_objectiveCollect = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TTosh01Objective1, ObjectiveLastCreated(), (TextReplaceWord(StringExternal("Param/Value/21CBD08C"), StringExternal("Param/Value/9163F2DB"), IntToText(gv_objectiveMineralsQuota), c_stringReplaceAll, c_stringCase)));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCollectCreateQ_Init () {
    gt_ObjectiveCollectCreateQ = TriggerCreate("gt_ObjectiveCollectCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Collect Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCollectComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveCollectCreateQ, true, false);
    ObjectiveSetState(gv_objectiveCollect, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCollectComplete_Init () {
    gt_ObjectiveCollectComplete = TriggerCreate("gt_ObjectiveCollectComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Rescue Party Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRescuePartyCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/F42E1CF8"), StringExternal("Param/Value/51C93208"), c_objectiveStateActive, false);
    gv_objectiveRescue = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TTosh01Objective2, ObjectiveLastCreated(), StringExternal("Param/Value/72448821"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRescuePartyCreateQ_Init () {
    gt_ObjectiveRescuePartyCreateQ = TriggerCreate("gt_ObjectiveRescuePartyCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Rescue Party Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRescuePartyComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveRescuePartyCreateQ, true, true);
    ObjectiveSetState(gv_objectiveRescue, c_objectiveStateCompleted);
    Wait(5.0, c_timeReal);
    TriggerExecute(gt_CommandCenterLiftOffTipQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRescuePartyComplete_Init () {
    gt_ObjectiveRescuePartyComplete = TriggerCreate("gt_ObjectiveRescuePartyComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Research Objective Kill the Brutalisk Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ResearchObjectiveKilltheBrutaliskCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate((StringExternal("Param/Value/E070E0FC") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectKilltheBrutalisk, libCamp_ge_StoryResearchObjectiveTextStyle_Lumpsum, 1, 0)), StringExternal("Param/Value/E8235891"), c_objectiveStateActive, false);
    gv_researchObjectiveKilltheBrutalisk = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TTosh01Objective3, ObjectiveLastCreated(), StringExternal("Param/Value/F6AF0A0A"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResearchObjectiveKilltheBrutaliskCreateQ_Init () {
    gt_ResearchObjectiveKilltheBrutaliskCreateQ = TriggerCreate("gt_ResearchObjectiveKilltheBrutaliskCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Research Objective Kill the Brutalisk Update
//--------------------------------------------------------------------------------------------------
bool gt_ResearchObjectiveKilltheBrutaliskUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Brutalisk"))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(EventUnit()), 5.0), 3.0, false);
    PingDestroy(gv_brutaliskPing);
    gv_brutaliskKilled = 1;
    libCamp_gf_DisplayResearchPointsGiventoPlayer(libCamp_ge_StoryResearchObject_ResearchObjectKilltheBrutalisk, EventUnit(), gv_p01_USER);
    TriggerExecute(gt_ResearchObjectiveKilltheBrutaliskCreateQ, true, true);
    ObjectiveSetState(gv_researchObjectiveKilltheBrutalisk, c_objectiveStateCompleted);
    ObjectiveSetName(gv_researchObjectiveKilltheBrutalisk, (StringExternal("Param/Value/9C764397") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectKilltheBrutalisk, libCamp_ge_StoryResearchObjectiveTextStyle_Lumpsum, 1, 1)));
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (libNtve_gf_KillingPlayer() == gv_p03_LAVA)) {
        AchievementAward(gv_p01_USER, "TTosh01_2");
    }

    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (libNtve_gf_UnitGetPropertyKills(EventUnit(), c_unitPropCurrent) == 0)) {
        AchievementAward(gv_p01_USER, "Anniversary_TTosh01");
        TriggerDebugOutput(1, StringExternal("Param/Value/6FAC3A22"), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResearchObjectiveKilltheBrutaliskUpdate_Init () {
    gt_ResearchObjectiveKilltheBrutaliskUpdate = TriggerCreate("gt_ResearchObjectiveKilltheBrutaliskUpdate_Func");
    TriggerAddEventUnitDied(gt_ResearchObjectiveKilltheBrutaliskUpdate, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9E678113_g;
    int auto9E678113_u;
    unit auto9E678113_var;
    unitgroup auto2D4741A3_g;
    int auto2D4741A3_u;
    unit auto2D4741A3_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_StartGame);
    TimerPause(gv_lavaTimer, true);
    TimerPause(gv_warning01Timer, true);
    TimerPause(gv_warning02Timer, true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    gv_inCinematic = true;
    gv_gameOver = true;
    UnitPauseAll(true);
    AITimePause(true);
    GameTimeOfDayPause(true);
    auto9E678113_g = UnitGroup(null, gv_p01_USER, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9E678113_u = UnitGroupCount(auto9E678113_g, c_unitCountAll);
    for (;; auto9E678113_u -= 1) {
        auto9E678113_var = UnitGroupUnitFromEnd(auto9E678113_g, auto9E678113_u);
        if (auto9E678113_var == null) { break; }
        UnitRemove(auto9E678113_var);
    }
    auto2D4741A3_g = UnitGroup("RedstoneLavaCritter", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2D4741A3_u = UnitGroupCount(auto2D4741A3_g, c_unitCountAll);
    for (;; auto2D4741A3_u -= 1) {
        auto2D4741A3_var = UnitGroupUnitFromEnd(auto2D4741A3_g, auto2D4741A3_u);
        if (auto2D4741A3_var == null) { break; }
        libNtve_gf_PauseUnit(auto2D4741A3_var, false);
    }
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_BriefingScene00, true, true);
    TriggerExecute(gt_BriefingScene01, true, true);
    TriggerExecute(gt_BriefingScene02, true, true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UnitPauseAll(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF8DCC965_g;
    int autoF8DCC965_u;
    unit autoF8DCC965_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoF8DCC965_g = UnitGroup(null, c_playerAny, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF8DCC965_u = UnitGroupCount(autoF8DCC965_g, c_unitCountAll);
    for (;; autoF8DCC965_u -= 1) {
        autoF8DCC965_var = UnitGroupUnitFromEnd(autoF8DCC965_g, autoF8DCC965_u);
        if (autoF8DCC965_var == null) { break; }
        UnitRemove(autoF8DCC965_var);
    }
    UnitRemove(UnitFromId(12));
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(728), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(730), ((SoundLengthSync(SoundLink("TTosh01BriefingRaynor00002", 0)) + SoundLengthSync(SoundLink("TTosh01BriefingRaynor00004", 0))) + 5.0), -1, 10, true);
    MovieStartRecording("Briefing_Video_TTosh01_00");
    SoundPlay(SoundLink("TTosh01BriefingRaynor00002", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("TTosh01BriefingRaynor00002", 0)), c_timeReal);
    SoundPlay(SoundLink("TTosh01BriefingRaynor00004", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("TTosh01BriefingRaynor00004", 0)), c_timeReal);
    Wait((0.5 * (SoundLengthSync(SoundLink("TTosh01BriefingRaynor00002", 0)) + SoundLengthSync(SoundLink("TTosh01BriefingRaynor00004", 0)))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00_Init () {
    gt_BriefingScene00 = TriggerCreate("gt_BriefingScene00_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "CommandCenter", 0, gv_p05_TOSH, PointFromId(317));
    gv_briefing_CoCe = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_p05_TOSH, PointFromId(329));
    gv_briefing_SCV1 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_p05_TOSH, PointFromId(330));
    gv_briefing_SCV2 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_p05_TOSH, PointFromId(398));
    gv_briefing_SCV3 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_p05_TOSH, PointFromId(385));
    gv_briefing_SCV4 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_p05_TOSH, PointFromId(391));
    gv_briefing_SCV5 = UnitLastCreated();
    UnitIssueOrder(gv_briefing_SCV1, OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitFromId(125)), c_orderQueueReplace);
    UnitIssueOrder(gv_briefing_SCV2, OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitFromId(174)), c_orderQueueReplace);
    UnitIssueOrder(gv_briefing_SCV3, OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitFromId(162)), c_orderQueueReplace);
    UnitIssueOrder(gv_briefing_SCV4, OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitFromId(830)), c_orderQueueReplace);
    UnitIssueOrder(gv_briefing_SCV5, OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitFromId(39)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(856), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(857), SoundLengthSync(SoundLink("TTosh01BriefingTosh00001", 0)), -1, 10, true);
    MovieStartRecording("Briefing_Video_TTosh01_01");
    SoundPlay(SoundLink("TTosh01BriefingTosh00001", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("TTosh01BriefingTosh00001", 0)), c_timeReal);
    SoundPlay(SoundLink("TTosh01BriefingTosh00007", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("TTosh01BriefingTosh00007", 0)), c_timeReal);
    SoundPlay(SoundLink("TTosh01BriefingRaynor00003", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("TTosh01BriefingRaynor00003", 0)), c_timeReal);
    TriggerExecute(gt_BriefingRetreat, true, false);
    WaterSetState("Template 1|Alternate Setting 1", (SoundLengthSync(SoundLink("TTosh01BriefingTosh00001", 0)) + 0.0), c_wtcLinear);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(56), (SoundLengthSync(SoundLink("TTosh01BriefingTosh00010", 0)) - 1.0), -1, 10, true);
    SoundPlay(SoundLink("TTosh01BriefingTosh00010", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("TTosh01BriefingTosh00010", 0)), c_timeReal);
    TriggerExecute(gt_CameraShakeDuringLava, true, false);
    WaterSetState("Template 1|Alternate Setting 2", 6.0, c_wtcLinear);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(65), (SoundLengthSync(SoundLink("TTosh01BriefingTosh00005", 0)) - 0.0), -1, 10, true);
    SoundPlay(SoundLink("TTosh01BriefingTosh00005", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("TTosh01BriefingTosh00005", 0)), c_timeReal);
    Wait((0.5 * ((SoundLengthSync(SoundLink("TTosh01BriefingTosh00001", 0)) + SoundLengthSync(SoundLink("TTosh01BriefingRaynor00003", 0))) + (SoundLengthSync(SoundLink("TTosh01BriefingTosh00010", 0)) + SoundLengthSync(SoundLink("TTosh01BriefingTosh00005", 0))))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh01BriefingTosh00007", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01_Init () {
    gt_BriefingScene01 = TriggerCreate("gt_BriefingScene01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 02
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_MakeCrittersReturn, true, false);
    WaterSetState("Template 1|[Default]", 1.0, c_wtcLinear);
    Wait(4.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Drone", 0, gv_p04_ZERG, PointFromId(379));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("ZergBuild", 15), PointFromId(384)), c_orderQueueReplace);
    TriggerExecute(gt_BriefingZerglings, true, false);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(258), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(259), (SoundLengthSync(SoundLink("TTosh01BriefingHorner00011", 0)) + SoundLengthSync(SoundLink("TTosh01BriefingHorner00006", 0))), -1, 10, true);
    MovieStartRecording("Briefing_Video_TTosh01_02");
    SoundPlay(SoundLink("TTosh01BriefingHorner00011", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTosh01BriefingHorner00011", 0))), c_timeReal);
    SoundPlay(SoundLink("TTosh01BriefingHorner00006", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTosh01BriefingHorner00006", 0))), c_timeReal);
    SoundPlay(SoundLink("TTosh01BriefingRaynor00012", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTosh01BriefingRaynor00012", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh01BriefingHorner00011", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh01BriefingHorner00006", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh01BriefingRaynor00012", 0))), c_timeReal);
    Wait(5.0, c_timeGame);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene02_Init () {
    gt_BriefingScene02 = TriggerCreate("gt_BriefingScene02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Retreat
//--------------------------------------------------------------------------------------------------
bool gt_BriefingRetreat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_briefing_SCV1, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(441)), c_orderQueueReplace);
    UnitIssueOrder(gv_briefing_SCV2, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(441)), c_orderQueueReplace);
    UnitIssueOrder(gv_briefing_SCV3, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(441)), c_orderQueueReplace);
    UnitIssueOrder(gv_briefing_SCV4, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(441)), c_orderQueueReplace);
    UnitIssueOrder(gv_briefing_SCV5, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(441)), c_orderQueueReplace);
    UnitIssueOrder(gv_briefing_CoCe, Order(AbilityCommand("CommandCenterLiftOff", 0)), c_orderQueueAddToEnd);
    TriggerExecute(gt_MakeCrittersFlee, true, false);
    Wait(3.0, c_timeGame);
    UnitIssueOrder(gv_briefing_CoCe, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(828)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingRetreat_Init () {
    gt_BriefingRetreat = TriggerCreate("gt_BriefingRetreat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Zerglings
//--------------------------------------------------------------------------------------------------
bool gt_BriefingZerglings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ZerglingStampede(2, PointFromId(313));
    Wait(1.0, c_timeGame);
    gf_ZerglingStampede(1, PointFromId(313));
    gf_ZerglingStampede(3, PointFromId(315));
    Wait(1.0, c_timeGame);
    gf_ZerglingStampede(3, PointFromId(315));
    Wait(1.0, c_timeGame);
    gf_ZerglingStampede(3, PointFromId(313));
    Wait(1.0, c_timeGame);
    gf_ZerglingStampede(2, PointFromId(313));
    Wait(1.0, c_timeGame);
    gf_ZerglingStampede(1, PointFromId(313));
    gf_ZerglingStampede(2, PointFromId(315));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingZerglings_Init () {
    gt_BriefingZerglings = TriggerCreate("gt_BriefingZerglings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1ADD92CE_g;
    int auto1ADD92CE_u;
    unit auto1ADD92CE_var;
    unitgroup auto18BF18DA_g;
    int auto18BF18DA_u;
    unit auto18BF18DA_var;
    unitgroup auto5ED1D1B3_g;
    int auto5ED1D1B3_u;
    unit auto5ED1D1B3_var;
    unitgroup auto368D1B8B_g;
    int auto368D1B8B_u;
    unit auto368D1B8B_var;
    unitgroup auto861D08B5_g;
    int auto861D08B5_u;
    unit auto861D08B5_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(1.0, c_timeReal);
    TriggerStop(gt_CameraShakeWeak);
    TriggerStop(gt_CameraShakeStrong);
    TriggerStop(gt_LavaTurnsON);
    TriggerEnable(gt_LavaTurnsOFF, false);
    TriggerEnable(gt_LavaDamage, false);
    WaterSetState("Template 1|[Default]", 1.0, c_wtcLinear);
    GameSetLighting("TTosh01Normal", 1.0);
    gv_lowGroundIsSafe = true;
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, false);
    GameTimeOfDaySetLength(0.0);
    TimerPause(gv_lavaTimer, true);
    UnitClearSelection(gv_p01_USER);
    UnitPauseAll(true);
    AITimePause(true);
    gv_victoryHiddenUnitGroup = UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_p02_ZERG, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_victoryHiddenUnitGroup);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_p04_ZERG, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_victoryHiddenUnitGroup);
    auto1ADD92CE_g = gv_victoryHiddenUnitGroup;
    auto1ADD92CE_u = UnitGroupCount(auto1ADD92CE_g, c_unitCountAll);
    for (;; auto1ADD92CE_u -= 1) {
        auto1ADD92CE_var = UnitGroupUnitFromEnd(auto1ADD92CE_g, auto1ADD92CE_u);
        if (auto1ADD92CE_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto1ADD92CE_var, false);
    }
    auto18BF18DA_g = UnitGroup("RedstoneLavaCritter", c_playerAny, RegionFromId(65), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto18BF18DA_u = UnitGroupCount(auto18BF18DA_g, c_unitCountAll);
    for (;; auto18BF18DA_u -= 1) {
        auto18BF18DA_var = UnitGroupUnitFromEnd(auto18BF18DA_g, auto18BF18DA_u);
        if (auto18BF18DA_var == null) { break; }
        UnitRemove(auto18BF18DA_var);
    }
    auto5ED1D1B3_g = UnitGroup("RedstoneLavaCritterInjured", c_playerAny, RegionFromId(65), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5ED1D1B3_u = UnitGroupCount(auto5ED1D1B3_g, c_unitCountAll);
    for (;; auto5ED1D1B3_u -= 1) {
        auto5ED1D1B3_var = UnitGroupUnitFromEnd(auto5ED1D1B3_g, auto5ED1D1B3_u);
        if (auto5ED1D1B3_var == null) { break; }
        UnitRemove(auto5ED1D1B3_var);
    }
    auto368D1B8B_g = UnitGroup("RedstoneLavaCritterBurrowed", c_playerAny, RegionFromId(65), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto368D1B8B_u = UnitGroupCount(auto368D1B8B_g, c_unitCountAll);
    for (;; auto368D1B8B_u -= 1) {
        auto368D1B8B_var = UnitGroupUnitFromEnd(auto368D1B8B_g, auto368D1B8B_u);
        if (auto368D1B8B_var == null) { break; }
        UnitRemove(auto368D1B8B_var);
    }
    auto861D08B5_g = UnitGroup("RedstoneLavaCritterInjuredBurrowed", c_playerAny, RegionFromId(65), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto861D08B5_u = UnitGroupCount(auto861D08B5_g, c_unitCountAll);
    for (;; auto861D08B5_u -= 1) {
        auto861D08B5_var = UnitGroupUnitFromEnd(auto861D08B5_g, auto861D08B5_u);
        if (auto861D08B5_var == null) { break; }
        UnitRemove(auto861D08B5_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto3F5C4282_n = 6;
    int auto3F5C4282_i;
    const int auto407E93C5_n = 2;
    int auto407E93C5_i;

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetBackground(c_backgroundFixed, "BraxisAlphaSkyBox", 100.0);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(76), 0.0, -1, 10, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CommandCenter", 0, gv_p01_USER, PointFromId(216));
    gv_victoryCoCe = UnitLastCreated();
    UnitCreate(1, "SpecialOpsDropship", 0, gv_p01_USER, PointFromId(792), 45.0);
    gv_victoryDropship = UnitLastCreated();
    UnitCreate(1, "SCV", 0, gv_p01_USER, PointFromId(291), libNtve_gf_RandomAngle());
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_victorySCV);
    UnitCreate(1, "SCV", 0, gv_p01_USER, PointFromId(787), libNtve_gf_RandomAngle());
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_victorySCV);
    UnitCreate(1, "SCV", 0, gv_p01_USER, PointFromId(788), libNtve_gf_RandomAngle());
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_victorySCV);
    UnitCreate(1, "SCV", 0, gv_p01_USER, PointFromId(789), libNtve_gf_RandomAngle());
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_victorySCV);
    UnitCreate(1, "SCV", 0, gv_p01_USER, PointFromId(790), libNtve_gf_RandomAngle());
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_victorySCV);
    for (auto3F5C4282_i = 1; auto3F5C4282_i <= auto3F5C4282_n; auto3F5C4282_i += 1) {
        UnitCreate(1, "Marine", 0, gv_p01_USER, RegionRandomPoint(RegionFromId(64)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_victoryMarines, UnitLastCreated());
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    }
    for (auto407E93C5_i = 1; auto407E93C5_i <= auto407E93C5_n; auto407E93C5_i += 1) {
        UnitCreate(1, "Medic", 0, gv_p01_USER, RegionRandomPoint(RegionFromId(66)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_victoryMarines, UnitLastCreated());
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    }
    TriggerSkippableBegin(PlayerGroupSingle(gv_p01_USER), 0, null, true, true);
    gv_victoryCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(77), 12.0, -1, 10, true);
    TriggerExecute(gt_VictoryScene, true, false);
    // Transmission - SoundLink("TTosh01Raynor00066", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh01Raynor00066", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTosh01Tosh00067", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh01Tosh00067", -1), c_transmissionDurationAdd, 0.0, true);
    gv_victoryCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victoryCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(lv_fadeDuration, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_VictoryScene);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Scene
//--------------------------------------------------------------------------------------------------
bool gt_VictoryScene_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4F983679_g;
    int auto4F983679_u;
    unit auto4F983679_var;

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTosh01MusicOutro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    UnitIssueOrder(gv_victoryCoCe, Order(AbilityCommand("CommandCenterTransport", 4)), c_orderQueueReplace);
    Wait(3.0, c_timeReal);
    libNtve_gf_UnitCreateFacingPoint(11, "Zergling", 0, gv_p02_ZERG, PointFromId(793), RegionGetCenter(RegionFromId(64)));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_victoryZergling);
    UnitGroupIssueOrder(gv_victoryZergling, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(216)), c_orderQueueReplace);
    Wait(3.0, c_timeReal);
    libNtve_gf_UnitCreateFacingPoint(2, "Zergling", 0, gv_p02_ZERG, PointFromId(793), RegionGetCenter(RegionFromId(64)));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_victoryZergling);
    UnitGroupIssueOrder(gv_victoryZergling, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(216)), c_orderQueueReplace);
    TriggerExecute(gt_CameraShakeWeak, true, false);
    UnitIssueOrder(gv_victoryCoCe, Order(AbilityCommand("CommandCenterLiftOff", 0)), c_orderQueueAddToEnd);
    Wait(1.5, c_timeReal);
    UnitIssueOrder(gv_victoryCoCe, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(261)), c_orderQueueAddToEnd);
    Wait(1.5, c_timeReal);
    UnitIssueOrder(gv_victoryDropship, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(64))), c_orderQueueReplace);
    libNtve_gf_UnitCreateFacingPoint(4, "Zergling", 0, gv_p02_ZERG, PointFromId(793), RegionGetCenter(RegionFromId(64)));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_victoryZergling);
    UnitGroupIssueOrder(gv_victoryZergling, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(216)), c_orderQueueReplace);
    TriggerExecute(gt_CameraShakeStrong, true, false);
    Wait(2.0, c_timeReal);
    libNtve_gf_UnitCreateFacingPoint(3, "Zergling", 0, gv_p02_ZERG, PointFromId(793), RegionGetCenter(RegionFromId(64)));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_victoryZergling);
    UnitGroupIssueOrder(gv_victoryZergling, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(216)), c_orderQueueReplace);
    WaterSetState("Template 1|Alternate Setting 2", 6.0, c_wtcLinear);
    GameSetLighting("TTosh01Warning", 5.0);
    SoundPlay(SoundLink("TUILavaRising", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(3, "Zergling", 0, gv_p02_ZERG, PointFromId(793), RegionGetCenter(RegionFromId(64)));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_victoryZergling);
    UnitGroupIssueOrder(gv_victoryZergling, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(216)), c_orderQueueReplace);
    auto4F983679_g = gv_victoryMarines;
    auto4F983679_u = UnitGroupCount(auto4F983679_g, c_unitCountAll);
    for (;; auto4F983679_u -= 1) {
        auto4F983679_var = UnitGroupUnitFromEnd(auto4F983679_g, auto4F983679_u);
        if (auto4F983679_var == null) { break; }
        UnitIssueOrder(auto4F983679_var, OrderTargetingUnit(null, gv_victoryDropship), c_orderQueueReplace);
    }
    Wait(2.0, c_timeReal);
    UnitIssueOrder(gv_victoryDropship, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(297)), c_orderQueueAddToEnd);
    Wait(2.0, c_timeGame);
    gv_lowGroundIsSafe = false;
    TriggerEnable(gt_LavaDamage, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryScene_Init () {
    gt_VictoryScene = TriggerCreate("gt_VictoryScene_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04Music_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_IntroSequence_Init();
    gt_StartGame_Init();
    gt_StartHarvesting_Init();
    gt_EventTiming_Init();
    gt_StartAI_Init();
    gt_P2ZergAIWaves_Init();
    gt_P4ZergAIWaves_Init();
    gt_AIGiveMinerals_Init();
    gt_AIGiveGas_Init();
    gt_DirtyBanelingCrewListen_Init();
    gt_DirtyBanelingCrewViaDamage_Init();
    gt_DirtyBanelingCrewViaMovement_Init();
    gt_DirtyBanelingCrewActions_Init();
    gt_CritterInit_Init();
    gt_MakeCrittersFlee_Init();
    gt_MakeCrittersReturn_Init();
    gt_CritterBabies_Init();
    gt_CreateLeaderboard_Init();
    gt_UpdateLeaderboard_Init();
    gt_BurrowAmbushGlobalTrigger_Init();
    gt_BurrowAmbushRegion04_Init();
    gt_BrutaliskIntroTimed_Init();
    gt_BrutaliskIntroProximity_Init();
    gt_BrutaliskCallout_Init();
    gt_BrutaliskRemovePingActor_Init();
    gt_FindToshsMiners_Init();
    gt_RescuedToshsMiners_Init();
    gt_HatcheryDestroyedShowResources_Init();
    gt_SpawnResourcesRightSide_Init();
    gt_SCVReinforcements_Init();
    gt_SCVReinforcementsTimeout_Init();
    gt_StartingBaseMinedOut_Init();
    gt_CommandCenterReplacement_Init();
    gt_MineralPickups_Init();
    gt_IntroReapersChangeOwner_Init();
    gt_IntroReapersChangeFailsafe_Init();
    gt_ReapersReinforcements01_Init();
    gt_ReapersReinforcements02_Init();
    gt_ReapersReinforcements03_Init();
    gt_ReapersReinforcements04_Init();
    gt_ReapersReinforcements05_Init();
    gt_FirstSurge_Init();
    gt_LavaTimerCreate_Init();
    gt_LavaSurgeMusic_Init();
    gt_CameraShakeWeak_Init();
    gt_CameraShakeStrong_Init();
    gt_CameraShakeDuringLava_Init();
    gt_LavaTurnsON_Init();
    gt_LavaTurnsOFF_Init();
    gt_LavaDamage_Init();
    gt_LavaWarning01Q_Init();
    gt_LavaWarning02Q_Init();
    gt_ItsSafeQ_Init();
    gt_TransmissionSCVReinforcementsQ_Init();
    gt_TransmissionCommandCenterReplacementQ_Init();
    gt_TransmissionIntroLavaTimerQ_Init();
    gt_TransmissionReaperIntroQ_Init();
    gt_TransmissionWatchSpendingWarningQ_Init();
    gt_TransmissionFindToshsMissingMinersQ_Init();
    gt_TransmissionMissingMinersFoundQ_Init();
    gt_TransmissionBrutaliskWarningQ_Init();
    gt_TransmissionMineralNodeReveal1Q_Init();
    gt_MineralNodeReveal1_Init();
    gt_TransmissionMineralNodeReveal2Q_Init();
    gt_MineralNodeReveal2_Init();
    gt_TransmissionMineralNodeReveal3Q_Init();
    gt_MineralNodeReveal3_Init();
    gt_TransmissionMilestone4000MineralsQ_Init();
    gt_TransmissionMilestone6500MineralsQ_Init();
    gt_CommandCenterLiftOffTipQ_Init();
    gt_ReaperTip_Init();
    gt_RichMineralTipQ_Init();
    gt_ZergBrutaliskTipQ_Init();
    gt_StorymodeTipsQ_Init();
    gt_AchievementAllReapersFound_Init();
    gt_FeatofStrengthDestroyAllZerg_Init();
    gt_VictoryCollectedQuota_Init();
    gt_Victory_Init();
    gt_DefeatBaseDead_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_ObjectiveCollectCreateQ_Init();
    gt_ObjectiveCollectComplete_Init();
    gt_ObjectiveRescuePartyCreateQ_Init();
    gt_ObjectiveRescuePartyComplete_Init();
    gt_ResearchObjectiveKilltheBrutaliskCreateQ_Init();
    gt_ResearchObjectiveKilltheBrutaliskUpdate_Init();
    gt_BriefingQ_Init();
    gt_BriefingScene00_Init();
    gt_BriefingScene01_Init();
    gt_BriefingScene02_Init();
    gt_BriefingRetreat_Init();
    gt_BriefingZerglings_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryScene_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
