//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Maw of the Void
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/CampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libCamp_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_ScriptedTOSS = 2;
const int gv_pLAYER_03_HighTOSS = 3;
const int gv_pLAYER_04_DarkTOSS = 4;
const int gv_pLAYER_05_WORLDSHIP = 5;
const int gv_pLAYER_06_VALERIAN = 6;
const int gv_pLAYER_07_Prisoners = 7;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
actor gv_outhouse;
bool gv_inCinematic;
bool gv_gameOver;
playergroup gv_fORCEGOOD_GUYS;
playergroup gv_fORCEBADGUYS;
unitgroup gv_gROUPPlayersStartingBASE;
unitgroup gv_gROUPUnitsnotinstart;
unitgroup gv_gROUPEmitters;
unitgroup gv_gROUPPrisons;
unit gv_uNIT_Toss02_SUPERWARPGATE;
unit gv_uNITVault;
fixed gv_daMuddaShipShields;
fixed gv_daMuddaShipLife;
region gv_mapAreaNormal;
unitgroup gv_gROUPLZEnemies;
int gv_inCombatIndicator;
timer gv_photonActortimeout;
actor[4] gv_photonActor;
timer gv_yamatoButtonFlashtimeout;
timer gv_warpPrismTimer;
bool gv_fLAGCanIbemeannow;
unit gv_uNITWarpPrismN;
unit gv_uNITWarpPrismE;
unit gv_uNITWarpPrismW;
unit gv_uNITWarpPrismNW;
unit gv_uNITWarpPrismNE;
unit[5] gv_uNITPrison;
actor[5] gv_aCTORPrisonReticule;
int[5] gv_pINGPrison;
unitgroup gv_gROUPEscapees;
int gv_iNTPrisonrelasedialogue;
int gv_index_DamageFields02;
int gv_index_DamageFields03;
unit gv_uNIT_RipFieldGeneratorINTRO;
unit gv_uNIT_RipFieldGenerator01;
unit[4] gv_uNIT_RipFieldGenerator02;
unit[4] gv_uNIT_RipFieldGenerator03;
actor[8] gv_aCTORRipFieldGeneratorReticule;
unitgroup gv_gROUPRipFieldGeneratorResponse01;
unitgroup gv_gROUPRipFieldGeneratorResponse02;
unitgroup gv_gROUPVaultResponse;
fixed gv_dAMAGEPULSEVALUE;
fixed gv_damageTracker;
unitgroup gv_vortexTargetGroup;
int gv_cOUNTERWarpinWave;
timer gv_tIMERVortexCooldown;
int gv_pINGMothership;
unit gv_uNITDaMothership;
unit gv_vortexTarget;
unitgroup gv_gROUPPlayersStartingUNITS;
unitgroup gv_eastLandPatrol;
int gv_statRipFieldDeaths;
int gv_statRipFieldEmittersDestroyed;
int gv_protossStructuresRemaining2;
int gv_protossStructuresRemaining3;
int gv_protossStructuresRemaining4;
int gv_protossStructuresRemaining5;
int gv_protossStructuresRemainingTotal;
unit gv_victoryArtifact;
int gv_objectiveClearLZ;
int gv_pINGClearLZ;
int gv_objectiveRetrieveArtifact;
int gv_pINGObjectiveArtifact;
actor gv_vaultReticule;
int gv_iNTProtossRescued;
int gv_objectiveRescuePrisoners;
bool gv_introCinematicCompleted;
unitgroup gv_introHiddenProtossGroup;
unitgroup gv_introCineProtossGroup;
unit gv_introStalker01;
unit gv_introStalker02;
bool gv_baseMidCinematicCompleted;
unitgroup gv_baseMidHiddenUnitGroup;
unitgroup gv_baseMidSpawnedUnitGroup;
unitgroup gv_sCVs;
unit gv_uNITCruiser01;
unit gv_uNITCruiser02;
unit gv_uNITCruiser03;
bool gv_prisonersMidCinematicCompleted;
unitgroup gv_prisonersMidHiddenTerranGroup;
unitgroup gv_prisonersMidHiddenProtossGroup;
bool gv_mothershipMidCinematicCompleted;
unitgroup gv_mothershipMidHiddenUnitGroup;
unitgroup gv_mothershipMidRipFieldGroup;
unitgroup gv_mothershipMidSpawnedUnitGroup;
bool gv_victoryCinematicCompleted;
unitgroup gv_victoryHiddenUnitGroup;

void InitGlobals () {
    int init_i;

    gv_fORCEGOOD_GUYS = PlayerGroupEmpty();
    gv_fORCEBADGUYS = PlayerGroupEmpty();
    gv_gROUPPlayersStartingBASE = UnitGroupEmpty();
    gv_gROUPUnitsnotinstart = UnitGroupEmpty();
    gv_gROUPEmitters = UnitGroupEmpty();
    gv_gROUPPrisons = UnitGroupEmpty();
    gv_uNIT_Toss02_SUPERWARPGATE = UnitFromId(210);
    gv_gROUPLZEnemies = UnitGroupEmpty();
    gv_photonActortimeout = TimerCreate();
    gv_yamatoButtonFlashtimeout = TimerCreate();
    gv_warpPrismTimer = TimerCreate();
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_pINGPrison[init_i] = c_invalidPingId;
    }
    gv_gROUPEscapees = UnitGroupEmpty();
    gv_index_DamageFields02 = 3;
    gv_index_DamageFields03 = 3;
    gv_gROUPRipFieldGeneratorResponse01 = UnitGroupEmpty();
    gv_gROUPRipFieldGeneratorResponse02 = UnitGroupEmpty();
    gv_gROUPVaultResponse = UnitGroupEmpty();
    gv_vortexTargetGroup = UnitGroupEmpty();
    gv_tIMERVortexCooldown = TimerCreate();
    gv_pINGMothership = c_invalidPingId;
    gv_gROUPPlayersStartingUNITS = UnitGroupEmpty();
    gv_eastLandPatrol = UnitGroupEmpty();
    gv_objectiveClearLZ = c_invalidObjectiveId;
    gv_objectiveRetrieveArtifact = c_invalidObjectiveId;
    gv_objectiveRescuePrisoners = c_invalidObjectiveId;
    gv_introHiddenProtossGroup = UnitGroupEmpty();
    gv_introCineProtossGroup = UnitGroupEmpty();
    gv_baseMidHiddenUnitGroup = UnitGroupEmpty();
    gv_baseMidSpawnedUnitGroup = UnitGroupEmpty();
    gv_sCVs = UnitGroupEmpty();
    gv_uNITCruiser01 = UnitFromId(128);
    gv_uNITCruiser02 = UnitFromId(184);
    gv_uNITCruiser03 = UnitFromId(182);
    gv_prisonersMidHiddenTerranGroup = UnitGroupEmpty();
    gv_prisonersMidHiddenProtossGroup = UnitGroupEmpty();
    gv_mothershipMidHiddenUnitGroup = UnitGroupEmpty();
    gv_mothershipMidRipFieldGroup = UnitGroupEmpty();
    gv_mothershipMidSpawnedUnitGroup = UnitGroupEmpty();
    gv_victoryHiddenUnitGroup = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_SetUnitMaxStats (unit lp_u, fixed lp_maxShields, fixed lp_maxLife);
bool gf_PlayerIsInCombat (int lp_player);
void gf_P03AttackWaveWaypointsRoute (int lp_player, bool lp_flank);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04Music;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_PlayerIsInCombatattacking;
trigger gt_PlayerIsInCombatbeingattacked;
trigger gt_PlayerIsInCombatIndicatorDiminish;
trigger gt_StartGameStage1;
trigger gt_StartGameStage2;
trigger gt_YamatoTeachingtrigger;
trigger gt_YamatoTeachingDialogueQ;
trigger gt_YamatoTeachingPingKiller;
trigger gt_PhotonCannonreveal;
trigger gt_YamatoButtonFlashkiller;
trigger gt_StartWarpPrizmDrops;
trigger gt_WarpPrizmDropsWarpSpawner;
trigger gt_WarpPrizmDropN1;
trigger gt_WarpPrizmDropN2;
trigger gt_WarpPrizmDropS1;
trigger gt_WarpPrizmDropS2;
trigger gt_WarpPrizmDropS3;
trigger gt_Prisonrelease1;
trigger gt_Prisonrelease2;
trigger gt_Prisonrelease3;
trigger gt_Prisonrelease4;
trigger gt_PrisonReticuleKiller;
trigger gt_PrisonDialogueQ;
trigger gt_DamagePulse;
trigger gt_RipFieldGeneratorResponse1;
trigger gt_RipFieldGeneratorResponse2;
trigger gt_XelnagaVaultResponse;
trigger gt_ReticuleRipFieldGenerator1;
trigger gt_ReticuleRipFieldGenerator2_1;
trigger gt_ReticuleRipFieldGenerator2_2;
trigger gt_ReticuleRipFieldGenerator2_3;
trigger gt_ReticuleRipFieldGenerator3;
trigger gt_ReticuleKiller;
trigger gt_MothershipCreate;
trigger gt_MothershipProximityAttack;
trigger gt_MothershipVortex;
trigger gt_MothershipWarpInAttack;
trigger gt_MothershipWarmholeVAULT;
trigger gt_MothershipWarmhole75health;
trigger gt_MothershipWarmhole30health;
trigger gt_MothershipDeathQ;
trigger gt_InitiatePatrols;
trigger gt_ResourcePickups;
trigger gt_ResourcePickupDialogueQ;
trigger gt_ResourcesLowDialogueQ;
trigger gt_XelnagaVaultReticuleKiller;
trigger gt_TIPCampaignTipsQ;
trigger gt_TIPBattlecruiserQ;
trigger gt_TIPYamatoQ;
trigger gt_TIPFusionCoreQ;
trigger gt_TIPRipFieldQ;
trigger gt_TIPPrisonersQ;
trigger gt_TIPVortexQ;
trigger gt_AchievementDestroyAllRipFieldEmitters;
trigger gt_StatRipFieldDeaths;
trigger gt_StatRipFieldEmittersDestroyed;
trigger gt_AchievementDestroyallenemystructures;
trigger gt_DefeatBaseDead;
trigger gt_DefeatLZUnitsDead;
trigger gt_VictoryRetrieveArtifactCompleted;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_StartAI;
trigger gt_StartAIWaves;
trigger gt_StartAIUpgradesH;
trigger gt_StartAIUpgradesI;
trigger gt_P04AttackWavesMiddle;
trigger gt_P03AttackWavesLeft;
trigger gt_StartP03WavesP02Dead;
trigger gt_StartP03WavesSafetyTripwire;
trigger gt_AIGiveMinerals;
trigger gt_AIGiveGas;
trigger gt_ObjectiveClearLZCreateQ;
trigger gt_ObjectiveClearLZComplete;
trigger gt_ObjectiveClearLZFailed;
trigger gt_ObjectiveArtifactCreateQ;
trigger gt_ObjectiveArtifactComplete;
trigger gt_ObjectiveArtifactFailed;
trigger gt_ObjectivePrisonersCreateQ;
trigger gt_ObjectivePrisonersUpdate;
trigger gt_ObjectivePrisonersComplete;
trigger gt_BriefingQ;
trigger gt_BriefingScene00;
trigger gt_BriefingScene00CamerasMovementandPings;
trigger gt_BriefingScene01;
trigger gt_BriefingScene01Yamato;
trigger gt_BriefingScene02;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroScene;
trigger gt_BaseMidQ;
trigger gt_BaseMidSetup;
trigger gt_BaseMidCinematic;
trigger gt_BaseMidCinematicEnd;
trigger gt_BaseMidCleanup;
trigger gt_BaseMidSCV;
trigger gt_PrisonersShowCineSafety;
trigger gt_PrisonersMidQ;
trigger gt_PrisonersMidSetup;
trigger gt_PrisonersMidCinematic;
trigger gt_PrisonersMidCinematicEnd;
trigger gt_PrisonersMidCleanup;
trigger gt_MothershipMidQ;
trigger gt_MothershipMidSetup;
trigger gt_MothershipMidCinematic;
trigger gt_MothershipMidCinematicEnd;
trigger gt_MothershipMidCleanup;
trigger gt_MothershipMidVault;
trigger gt_MothershipMidArrival;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_SetUnitMaxStats (unit lp_u, fixed lp_maxShields, fixed lp_maxLife) {
    // Automatic Variable Declarations
    // Implementation
    UnitSetPropertyFixed(lp_u, c_unitPropLifeMax, lp_maxLife);
    UnitSetPropertyFixed(lp_u, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(lp_u, c_unitPropShieldsMax, lp_maxShields);
    UnitSetPropertyFixed(lp_u, c_unitPropShieldsPercent, 100.0);
}

bool gf_PlayerIsInCombat (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_inCombatIndicator > 0)) {
        return true;
    }
    else {
        return false;
    }
}

void gf_P03AttackWaveWaypointsRoute (int lp_player, bool lp_flank) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_flank == false) || (libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1))) {
        AIAttackWaveAddWaypoint(lp_player, PointFromId(240), false);
        AIAttackWaveAddWaypoint(lp_player, PointFromId(252), false);
        AIAttackWaveAddWaypoint(lp_player, PointFromId(232), false);
    }
    else {
        AIAttackWaveAddWaypoint(lp_player, PointFromId(240), false);
        AIAttackWaveAddWaypoint(lp_player, PointFromId(336), false);
        AIAttackWaveAddWaypoint(lp_player, PointFromId(350), false);
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_LoadCampaignData(libCamp_ge_MapID_MapTTychus05);
    TriggerExecute(gt_Init01Technology, true, true);
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04Music, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    libCamp_gf_RegisterFootageRecording(gt_BriefingQ);
    libCamp_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_IntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsBattlecruiser, gv_pLAYER_01_USER);
    TechTreeAbilityAllow(gv_pLAYER_02_ScriptedTOSS, AbilityCommand("Blink", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_03_HighTOSS, AbilityCommand("Blink", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_04_DarkTOSS, AbilityCommand("Blink", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_06_VALERIAN, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_ScriptedTOSS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_03_HighTOSS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_04_DarkTOSS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_05_WORLDSHIP, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_07_Prisoners, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_06_VALERIAN, gv_pLAYER_02_ScriptedTOSS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_06_VALERIAN, gv_pLAYER_03_HighTOSS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_06_VALERIAN, gv_pLAYER_04_DarkTOSS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_ScriptedTOSS, gv_pLAYER_05_WORLDSHIP, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_02_ScriptedTOSS, gv_pLAYER_03_HighTOSS, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_02_ScriptedTOSS, gv_pLAYER_04_DarkTOSS, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_02_ScriptedTOSS, gv_pLAYER_07_Prisoners, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_03_HighTOSS, gv_pLAYER_05_WORLDSHIP, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_03_HighTOSS, gv_pLAYER_04_DarkTOSS, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_03_HighTOSS, gv_pLAYER_07_Prisoners, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_04_DarkTOSS, gv_pLAYER_05_WORLDSHIP, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_04_DarkTOSS, gv_pLAYER_07_Prisoners, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_05_WORLDSHIP, gv_pLAYER_07_Prisoners, libNtve_ge_AllianceSetting_Neutral);
    PlayerGroupAdd(gv_fORCEBADGUYS, gv_pLAYER_02_ScriptedTOSS);
    PlayerGroupAdd(gv_fORCEBADGUYS, gv_pLAYER_03_HighTOSS);
    PlayerGroupAdd(gv_fORCEBADGUYS, gv_pLAYER_04_DarkTOSS);
    PlayerGroupAdd(gv_fORCEGOOD_GUYS, gv_pLAYER_01_USER);
    PlayerGroupAdd(gv_fORCEGOOD_GUYS, gv_pLAYER_06_VALERIAN);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 600);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 400);
    PlayerModifyPropertyInt(gv_pLAYER_02_ScriptedTOSS, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_ScriptedTOSS, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_03_HighTOSS, c_playerPropMinerals, c_playerPropOperSetTo, 500);
    PlayerModifyPropertyInt(gv_pLAYER_03_HighTOSS, c_playerPropVespene, c_playerPropOperSetTo, 500);
    PlayerModifyPropertyInt(gv_pLAYER_04_DarkTOSS, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_04_DarkTOSS, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerSetColorIndex(gv_pLAYER_02_ScriptedTOSS, 3, true);
    PlayerSetColorIndex(gv_pLAYER_03_HighTOSS, 3, true);
    PlayerSetColorIndex(gv_pLAYER_04_DarkTOSS, 3, true);
    PlayerSetColorIndex(gv_pLAYER_05_WORLDSHIP, 1, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_playerHasMercTech;
    int lv_merc;
    unitgroup lv_energyGROUP;
    int lv_iNT;

    // Automatic Variable Declarations
    unitgroup autoFFDE84A2_g;
    int autoFFDE84A2_u;
    unit autoFFDE84A2_var;
    unitgroup autoC1B63ED8_g;
    int autoC1B63ED8_u;
    unit autoC1B63ED8_var;
    unitgroup auto6DB6490A_g;
    int auto6DB6490A_u;
    unit auto6DB6490A_var;
    unitgroup auto610A3CE2_g;
    int auto610A3CE2_u;
    unit auto610A3CE2_var;
    unitgroup auto6B610375_g;
    int auto6B610375_u;
    unit auto6B610375_var;
    unitgroup autoF295C8C7_g;
    int autoF295C8C7_u;
    unit autoF295C8C7_var;
    unitgroup auto99B520EB_g;
    int auto99B520EB_u;
    unit auto99B520EB_var;
    const int autoDAF55C44_ae = 4;
    const int autoDAF55C44_ai = 1;
    unitgroup auto8B2AEE24_g;
    int auto8B2AEE24_u;
    unit auto8B2AEE24_var;
    unitgroup auto9EDB466C_g;
    int auto9EDB466C_u;
    unit auto9EDB466C_var;

    // Variable Initialization
    lv_merc = libCamp_ge_StoryMercID_MercNone;
    lv_energyGROUP = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_eastLandPatrol = UnitGroup(null, gv_pLAYER_02_ScriptedTOSS, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_gROUPRipFieldGeneratorResponse01 = UnitGroup(null, gv_pLAYER_02_ScriptedTOSS, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_gROUPRipFieldGeneratorResponse02 = UnitGroup("Carrier", gv_pLAYER_04_DarkTOSS, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFFDE84A2_g = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFFDE84A2_u = UnitGroupCount(autoFFDE84A2_g, c_unitCountAll);
    for (;; autoFFDE84A2_u -= 1) {
        autoFFDE84A2_var = UnitGroupUnitFromEnd(autoFFDE84A2_g, autoFFDE84A2_u);
        if (autoFFDE84A2_var == null) { break; }
        UnitGroupAdd(gv_gROUPLZEnemies, autoFFDE84A2_var);
    }
    autoC1B63ED8_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC1B63ED8_u = UnitGroupCount(autoC1B63ED8_g, c_unitCountAll);
    for (;; autoC1B63ED8_u -= 1) {
        autoC1B63ED8_var = UnitGroupUnitFromEnd(autoC1B63ED8_g, autoC1B63ED8_u);
        if (autoC1B63ED8_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(autoC1B63ED8_var, RegionFromId(2)) != true) && (libNtve_gf_UnitInRegion(autoC1B63ED8_var, RegionFromId(18)) != true)) {
            UnitGroupAdd(gv_gROUPUnitsnotinstart, autoC1B63ED8_var);
        }

    }
    UnitGroupRemove(gv_gROUPUnitsnotinstart, UnitFromId(72));
    UnitGroupRemove(gv_gROUPUnitsnotinstart, UnitFromId(32));
    auto6DB6490A_g = gv_gROUPUnitsnotinstart;
    auto6DB6490A_u = UnitGroupCount(auto6DB6490A_g, c_unitCountAll);
    for (;; auto6DB6490A_u -= 1) {
        auto6DB6490A_var = UnitGroupUnitFromEnd(auto6DB6490A_g, auto6DB6490A_u);
        if (auto6DB6490A_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto6DB6490A_var, false);
        libNtve_gf_PauseUnit(auto6DB6490A_var, true);
    }
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("Battlecruiser", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_energyGROUP);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("HighTemplar", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_energyGROUP);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("Obelisk", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_energyGROUP);
    auto610A3CE2_g = lv_energyGROUP;
    auto610A3CE2_u = UnitGroupCount(auto610A3CE2_g, c_unitCountAll);
    for (;; auto610A3CE2_u -= 1) {
        auto610A3CE2_var = UnitGroupUnitFromEnd(auto610A3CE2_g, auto610A3CE2_u);
        if (auto610A3CE2_var == null) { break; }
        UnitSetPropertyFixed(auto610A3CE2_var, c_unitPropEnergyPercent, 100.0);
    }
    auto6B610375_g = UnitGroup(null, c_playerAny, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6B610375_u = UnitGroupCount(auto6B610375_g, c_unitCountAll);
    for (;; auto6B610375_u -= 1) {
        auto6B610375_var = UnitGroupUnitFromEnd(auto6B610375_g, auto6B610375_u);
        if (auto6B610375_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto6B610375_var, false);
    }
    autoF295C8C7_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF295C8C7_u = UnitGroupCount(autoF295C8C7_g, c_unitCountAll);
    for (;; autoF295C8C7_u -= 1) {
        autoF295C8C7_var = UnitGroupUnitFromEnd(autoF295C8C7_g, autoF295C8C7_u);
        if (autoF295C8C7_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoF295C8C7_var, false);
        libNtve_gf_PauseUnit(autoF295C8C7_var, true);
        UnitGroupAdd(gv_gROUPPlayersStartingBASE, autoF295C8C7_var);
    }
    gv_gROUPPlayersStartingUNITS = UnitGroup("Battlecruiser", gv_pLAYER_01_USER, RegionFromId(33), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_uNIT_RipFieldGeneratorINTRO = UnitFromId(37);
    gv_uNIT_RipFieldGenerator01 = UnitFromId(151);
    gv_uNIT_RipFieldGenerator02[1] = UnitFromId(137);
    gv_uNIT_RipFieldGenerator02[2] = UnitFromId(447);
    gv_uNIT_RipFieldGenerator02[3] = UnitFromId(394);
    gv_uNIT_RipFieldGenerator03[1] = UnitFromId(20);
    gv_uNIT_RipFieldGenerator03[2] = UnitFromId(297);
    gv_uNIT_RipFieldGenerator03[3] = UnitFromId(415);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("RipFieldGenerator", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), gv_gROUPEmitters);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("RipFieldGeneratorSmall", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), gv_gROUPEmitters);
    auto99B520EB_g = gv_gROUPEmitters;
    auto99B520EB_u = UnitGroupCount(auto99B520EB_g, c_unitCountAll);
    for (;; auto99B520EB_u -= 1) {
        auto99B520EB_var = UnitGroupUnitFromEnd(auto99B520EB_g, auto99B520EB_u);
        if (auto99B520EB_var == null) { break; }
        UnitSetInfoText(auto99B520EB_var, StringExternal("Param/Value/5213A7F1"), StringExternal("Param/Value/FF8A19FF"), StringToText(""));
        VisRevealArea(1, RegionCircle(UnitGetPosition(auto99B520EB_var), 3.0), 4.0, false);
    }
    gv_uNITVault = UnitFromId(3);
    gv_gROUPVaultResponse = UnitGroup(null, gv_pLAYER_02_ScriptedTOSS, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_uNITVault), c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    UnitSetInfoText(gv_uNITVault, StringExternal("Param/Value/10641E6B"), StringExternal("Param/Value/357ED5A3"), StringToText(""));
    gv_uNITPrison[1] = UnitFromId(17);
    gv_uNITPrison[2] = UnitFromId(565);
    gv_uNITPrison[3] = UnitFromId(569);
    gv_uNITPrison[4] = UnitFromId(567);
    lv_iNT = 1;
    for ( ; ( (autoDAF55C44_ai >= 0 && lv_iNT <= autoDAF55C44_ae) || (autoDAF55C44_ai < 0 && lv_iNT >= autoDAF55C44_ae) ) ; lv_iNT += autoDAF55C44_ai ) {
        UnitGroupAdd(gv_gROUPPrisons, gv_uNITPrison[lv_iNT]);
    }
    auto8B2AEE24_g = gv_gROUPPrisons;
    auto8B2AEE24_u = UnitGroupCount(auto8B2AEE24_g, c_unitCountAll);
    for (;; auto8B2AEE24_u -= 1) {
        auto8B2AEE24_var = UnitGroupUnitFromEnd(auto8B2AEE24_g, auto8B2AEE24_u);
        if (auto8B2AEE24_var == null) { break; }
        UnitSetState(auto8B2AEE24_var, c_unitStateTargetable, false);
        UnitSetState(auto8B2AEE24_var, c_unitStateSelectable, false);
        UnitSetState(auto8B2AEE24_var, c_unitStateInvulnerable, true);
        UnitSetState(auto8B2AEE24_var, c_unitStateTooltipable, true);
        VisRevealArea(1, RegionCircle(UnitGetPosition(auto8B2AEE24_var), 3.0), 4.0, false);
    }
    auto9EDB466C_g = UnitGroup("DarkTemplar", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto9EDB466C_u = UnitGroupCount(auto9EDB466C_g, c_unitCountAll);
    for (;; auto9EDB466C_u -= 1) {
        auto9EDB466C_var = UnitGroupUnitFromEnd(auto9EDB466C_g, auto9EDB466C_u);
        if (auto9EDB466C_var == null) { break; }
        UnitBehaviorAdd(auto9EDB466C_var, "SuppressCloak", auto9EDB466C_var, 1);
        UnitSetState(auto9EDB466C_var, c_unitStateInvulnerable, true);
        UnitIssueOrder(auto9EDB466C_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    gv_outhouse = ActorFromDoodad(DoodadFromId(622));
    if ((libCamp_gf_StoryState(libCamp_ge_StoryStateID_StoryStateTaurenOutHouseActivated) == 0)) {
        ActorSend(gv_outhouse, "Destroy");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init04Music_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus05MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus05MusicIntroA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Music_Init () {
    gt_Init04Music = TriggerCreate("gt_Init04Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    gv_mapAreaNormal = RegionPlayableMap();
    RegionPlayableMapSet(RegionFromId(2));
    libLbty_gf_AutoRevealRegion(RegionFromId(39), RegionFromId(38), gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoFB9F4BC8_g;
    int autoFB9F4BC8_u;
    unit autoFB9F4BC8_var;
    unitgroup auto6AD74C47_g;
    int auto6AD74C47_u;
    unit auto6AD74C47_var;
    playergroup autoCEDF08E4_g;
    int autoCEDF08E4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerDifficulty(gv_pLAYER_01_USER) == 1)) {
        PlayerModifyPropertyInt(gv_pLAYER_02_ScriptedTOSS, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_pLAYER_03_HighTOSS, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_pLAYER_04_DarkTOSS, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_pLAYER_05_WORLDSHIP, c_playerPropHandicap, c_playerPropOperSetTo, 50);
    }

    autoFB9F4BC8_g = gv_gROUPEmitters;
    autoFB9F4BC8_u = UnitGroupCount(autoFB9F4BC8_g, c_unitCountAll);
    for (;; autoFB9F4BC8_u -= 1) {
        autoFB9F4BC8_var = UnitGroupUnitFromEnd(autoFB9F4BC8_g, autoFB9F4BC8_u);
        if (autoFB9F4BC8_var == null) { break; }
        gf_SetUnitMaxStats(autoFB9F4BC8_var, libNtve_gf_DifficultyValueFixed(400.0, 500.0, 700.0, 800.0), libNtve_gf_DifficultyValueFixed(400.0, 500.0, 700.0, 800.0));
    }
    gv_dAMAGEPULSEVALUE = libNtve_gf_DifficultyValueFixed(1.25, 2.0, 2.5, 3.0);
    gf_SetUnitMaxStats(UnitFromId(3), libNtve_gf_DifficultyValueFixed(300.0, 600.0, 750.0, 1000.0), libNtve_gf_DifficultyValueFixed(300.0, 600.0, 750.0, 1000.0));
    gv_daMuddaShipLife = libNtve_gf_DifficultyValueFixed(400.0, 500.0, 750.0, 1000.0);
    gv_daMuddaShipShields = libNtve_gf_DifficultyValueFixed(600.0, 800.0, 1000.0, 1500.0);
    auto6AD74C47_g = gv_gROUPPrisons;
    auto6AD74C47_u = UnitGroupCount(auto6AD74C47_g, c_unitCountAll);
    for (;; auto6AD74C47_u -= 1) {
        auto6AD74C47_var = UnitGroupUnitFromEnd(auto6AD74C47_g, auto6AD74C47_u);
        if (auto6AD74C47_var == null) { break; }
        gf_SetUnitMaxStats(auto6AD74C47_var, libNtve_gf_DifficultyValueFixed(200.0, 400.0, 500.0, 600.0), libNtve_gf_DifficultyValueFixed(50.0, 100.0, 125.0, 150.0));
    }
    autoCEDF08E4_g = gv_fORCEBADGUYS;
    autoCEDF08E4_var = -1;
    while (true) {
        autoCEDF08E4_var = PlayerGroupNextPlayer(autoCEDF08E4_g, autoCEDF08E4_var);
        if (autoCEDF08E4_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoCEDF08E4_var, "PsiStormTech", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(autoCEDF08E4_var, "HighTemplarKhaydarinAmulet", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(autoCEDF08E4_var, "haltech", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(autoCEDF08E4_var, "WarpGateResearch", 1);
        TechTreeUpgradeAddLevel(autoCEDF08E4_var, "ObserverGraviticBooster", 1);
        TechTreeUpgradeAddLevel(autoCEDF08E4_var, "ProtossAirWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(autoCEDF08E4_var, "ProtossGroundWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(autoCEDF08E4_var, "ProtossAirArmorsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        TechTreeUpgradeAddLevel(autoCEDF08E4_var, "ProtossGroundArmorsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        TechTreeUpgradeAddLevel(autoCEDF08E4_var, "GraviticDrive", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_AddUnitTypeToUnitHelpPanel("PhotonCannon", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Stalker", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Phoenix", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Scout", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Archon", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("DarkTemplar", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Carrier", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("WarpPrism", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("TalDarimMothership", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Colossus", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Immortal", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Probe", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Observer", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("VoidRay", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("HighTemplar", false, gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Is In Combat -attacking
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIsInCombatattacking_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCombatIndicator = 4;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIsInCombatattacking_Init () {
    gt_PlayerIsInCombatattacking = TriggerCreate("gt_PlayerIsInCombatattacking_Func");
    TriggerAddEventUnitStartedAttack(gt_PlayerIsInCombatattacking, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Is In Combat -being attacked
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIsInCombatbeingattacked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCombatIndicator = 4;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIsInCombatbeingattacked_Init () {
    gt_PlayerIsInCombatbeingattacked = TriggerCreate("gt_PlayerIsInCombatbeingattacked_Func");
    TriggerAddEventUnitAttacked(gt_PlayerIsInCombatbeingattacked, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Is In Combat Indicator Diminish
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIsInCombatIndicatorDiminish_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_inCombatIndicator > 0)) {
        gv_inCombatIndicator = (gv_inCombatIndicator - 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIsInCombatIndicatorDiminish_Init () {
    gt_PlayerIsInCombatIndicatorDiminish = TriggerCreate("gt_PlayerIsInCombatIndicatorDiminish_Func");
    TriggerAddEventTimePeriodic(gt_PlayerIsInCombatIndicatorDiminish, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Stage 1
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerPauseAllCooldowns(gv_pLAYER_01_USER, true);
    PlayerPauseAllCharges(gv_pLAYER_01_USER, true);
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/F325FA28"), null, UnitFromId(128));
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_ObjectiveClearLZCreateQ, true, true);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_TIPBattlecruiserQ, true, true);
    TriggerExecute(gt_TIPYamatoQ, true, true);
    TriggerExecute(gt_TIPRipFieldQ, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage1_Init () {
    gt_StartGameStage1 = TriggerCreate("gt_StartGameStage1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerPauseAllCooldowns(gv_pLAYER_01_USER, false);
    PlayerPauseAllCharges(gv_pLAYER_01_USER, false);
    TriggerExecute(gt_StartWarpPrizmDrops, true, false);
    TriggerExecute(gt_ObjectiveArtifactCreateQ, true, true);
    TriggerEnable(gt_AchievementDestroyallenemystructures, true);
    Wait(10.0, c_timeGame);
    TriggerExecute(gt_ResourcePickupDialogueQ, true, true);
    Wait(10.0, c_timeGame);
    TriggerExecute(gt_TIPCampaignTipsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage2_Init () {
    gt_StartGameStage2 = TriggerCreate("gt_StartGameStage2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yamato Teaching trigger
//--------------------------------------------------------------------------------------------------
bool gt_YamatoTeachingtrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoEF1178D1_g;
    int autoEF1178D1_u;
    unit autoEF1178D1_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoEF1178D1_g = UnitGroup("PhotonCannon", gv_pLAYER_02_ScriptedTOSS, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEF1178D1_u = UnitGroupCount(autoEF1178D1_g, c_unitCountAll);
    for (;; autoEF1178D1_u -= 1) {
        autoEF1178D1_var = UnitGroupUnitFromEnd(autoEF1178D1_g, autoEF1178D1_u);
        if (autoEF1178D1_var == null) { break; }
        if ((UnitGroupCount(UnitGroup("Battlecruiser", gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(autoEF1178D1_var), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            TriggerEnable(TriggerGetCurrent(), false);
            VisRevealArea(gv_pLAYER_01_USER, RegionFromId(36), 10.0, false);
            libNtve_gf_AttachModelToUnit(UnitFromId(23), "BriefingUnitSelect", "Origin");
            gv_photonActor[1] = libNtve_gf_ActorLastCreated();
            libNtve_gf_AttachModelToUnit(UnitFromId(159), "BriefingUnitSelect", "Origin");
            gv_photonActor[2] = libNtve_gf_ActorLastCreated();
            libNtve_gf_AttachModelToUnit(UnitFromId(361), "BriefingUnitSelect", "Origin");
            gv_photonActor[3] = libNtve_gf_ActorLastCreated();
            TimerStart(gv_photonActortimeout, 120.0, false, c_timeGame);
            TriggerExecute(gt_YamatoTeachingDialogueQ, true, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YamatoTeachingtrigger_Init () {
    gt_YamatoTeachingtrigger = TriggerCreate("gt_YamatoTeachingtrigger_Func");
    TriggerAddEventTimePeriodic(gt_YamatoTeachingtrigger, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yamato Teaching Dialogue Q
//--------------------------------------------------------------------------------------------------
bool gt_YamatoTeachingDialogueQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus05Raynor00010", -1), c_transmissionDurationAdd, 0.0, false);
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/AD6487AA"), null, UnitFromId(159));
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("Yamato", 0), true);
    TimerStart(gv_yamatoButtonFlashtimeout, 30.0, false, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YamatoTeachingDialogueQ_Init () {
    gt_YamatoTeachingDialogueQ = TriggerCreate("gt_YamatoTeachingDialogueQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yamato Teaching Ping Killer
//--------------------------------------------------------------------------------------------------
bool gt_YamatoTeachingPingKiller_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto2E9638BD_ae = 3;
    int auto2E9638BD_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2E9638BD_var = 1;
    for ( ; auto2E9638BD_var <= auto2E9638BD_ae; auto2E9638BD_var += 1 ) {
        if ((gv_photonActor[auto2E9638BD_var] != null)) {
            libNtve_gf_KillModel(gv_photonActor[auto2E9638BD_var]);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YamatoTeachingPingKiller_Init () {
    gt_YamatoTeachingPingKiller = TriggerCreate("gt_YamatoTeachingPingKiller_Func");
    TriggerAddEventTimer(gt_YamatoTeachingPingKiller, gv_photonActortimeout);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Photon Cannon reveal
//--------------------------------------------------------------------------------------------------
bool gt_PhotonCannonreveal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dTs;
    unitgroup lv_closeCannons;

    // Automatic Variable Declarations
    unitgroup auto4FBC37CA_g;
    int auto4FBC37CA_u;
    unitgroup auto2C1D325E_g;
    int auto2C1D325E_u;
    unit auto2C1D325E_var;
    unitgroup auto9B0BEDAE_g;
    int auto9B0BEDAE_u;
    unit auto9B0BEDAE_var;

    // Variable Initialization
    lv_closeCannons = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto4FBC37CA_g = gv_gROUPEscapees;
    auto4FBC37CA_u = UnitGroupCount(auto4FBC37CA_g, c_unitCountAll);
    for (;; auto4FBC37CA_u -= 1) {
        lv_dTs = UnitGroupUnitFromEnd(auto4FBC37CA_g, auto4FBC37CA_u);
        if (lv_dTs == null) { break; }
        auto2C1D325E_g = UnitGroup("PhotonCannon", c_playerAny, RegionCircle(UnitGetPosition(lv_dTs), 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto2C1D325E_u = UnitGroupCount(auto2C1D325E_g, c_unitCountAll);
        for (;; auto2C1D325E_u -= 1) {
            auto2C1D325E_var = UnitGroupUnitFromEnd(auto2C1D325E_g, auto2C1D325E_u);
            if (auto2C1D325E_var == null) { break; }
            UnitGroupAdd(lv_closeCannons, auto2C1D325E_var);
        }
    }
    auto9B0BEDAE_g = lv_closeCannons;
    auto9B0BEDAE_u = UnitGroupCount(auto9B0BEDAE_g, c_unitCountAll);
    for (;; auto9B0BEDAE_u -= 1) {
        auto9B0BEDAE_var = UnitGroupUnitFromEnd(auto9B0BEDAE_g, auto9B0BEDAE_u);
        if (auto9B0BEDAE_var == null) { break; }
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(auto9B0BEDAE_var), 2.0), 1.1, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PhotonCannonreveal_Init () {
    gt_PhotonCannonreveal = TriggerCreate("gt_PhotonCannonreveal_Func");
    TriggerEnable(gt_PhotonCannonreveal, false);
    TriggerAddEventTimePeriodic(gt_PhotonCannonreveal, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yamato Button Flash killer
//--------------------------------------------------------------------------------------------------
bool gt_YamatoButtonFlashkiller_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("Yamato", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YamatoButtonFlashkiller_Init () {
    gt_YamatoButtonFlashkiller = TriggerCreate("gt_YamatoButtonFlashkiller_Func");
    TriggerAddEventTimer(gt_YamatoButtonFlashkiller, gv_yamatoButtonFlashtimeout);
    TriggerAddEventUnitAbility(gt_YamatoButtonFlashkiller, null, AbilityCommand("Yamato", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Warp Prizm Drops
//--------------------------------------------------------------------------------------------------
bool gt_StartWarpPrizmDrops_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_warpPrismTimer, 280.0, true, c_timeAI);
    Wait(666.0, c_timeAI);
    gv_fLAGCanIbemeannow = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartWarpPrizmDrops_Init () {
    gt_StartWarpPrizmDrops = TriggerCreate("gt_StartWarpPrizmDrops_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp Prizm Drops - Warp Spawner
//--------------------------------------------------------------------------------------------------
bool gt_WarpPrizmDropsWarpSpawner_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomDirectionPicker;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(3), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_randomDirectionPicker = RandomInt(1, 5);
    if ((lv_randomDirectionPicker == 1)) {
        if ((UnitIsAlive(gv_uNITWarpPrismNW) == false)) {
            libNtve_gf_CreateUnitsAtPoint2(1, "WarpPrism", 0, gv_pLAYER_02_ScriptedTOSS, PointFromId(215));
            gv_uNITWarpPrismNW = UnitLastCreated();
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(13))), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
            TriggerEnable(gt_WarpPrizmDropN1, true);
        }
        else {
            UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 3), RegionRandomPoint(RegionFromId(13))), c_orderQueueAddToEnd);
            UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(13))), c_orderQueueAddToEnd);
            UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(13))), c_orderQueueAddToEnd);
            Wait(7.0, c_timeGame);
            AIAttackWaveUseGroup(gv_pLAYER_02_ScriptedTOSS, UnitGroup(null, gv_pLAYER_02_ScriptedTOSS, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            AIAttackWaveSetGatherPoint(gv_pLAYER_02_ScriptedTOSS, RegionRandomPoint(RegionFromId(13)));
            AIAttackWaveSetTargetRegion(gv_pLAYER_02_ScriptedTOSS, RegionFromId(3), 0);
            AIAttackWaveSend(gv_pLAYER_02_ScriptedTOSS, 0, false);
        }
    }

    if ((lv_randomDirectionPicker == 2)) {
        if ((UnitIsAlive(gv_uNITWarpPrismW) == false)) {
            libNtve_gf_CreateUnitsAtPoint2(1, "WarpPrism", 0, gv_pLAYER_02_ScriptedTOSS, PointFromId(215));
            gv_uNITWarpPrismW = UnitLastCreated();
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(14))), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
            TriggerEnable(gt_WarpPrizmDropS3, true);
        }
        else {
            if ((gv_fLAGCanIbemeannow == true)) {
                UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), RegionRandomPoint(RegionFromId(14))), c_orderQueueAddToEnd);
            }
            else {
                UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), RegionRandomPoint(RegionFromId(14))), c_orderQueueAddToEnd);
            }
            UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 5), RegionRandomPoint(RegionFromId(14))), c_orderQueueAddToEnd);
            Wait(7.0, c_timeGame);
            AIAttackWaveSetGatherPoint(gv_pLAYER_02_ScriptedTOSS, RegionRandomPoint(RegionFromId(14)));
            AIAttackWaveUseGroup(gv_pLAYER_02_ScriptedTOSS, UnitGroup(null, gv_pLAYER_02_ScriptedTOSS, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            AIAttackWaveSetTargetRegion(gv_pLAYER_02_ScriptedTOSS, RegionFromId(3), 0);
            AIAttackWaveSend(gv_pLAYER_02_ScriptedTOSS, 0, false);
        }
    }

    if ((lv_randomDirectionPicker == 3)) {
        if ((UnitIsAlive(gv_uNITWarpPrismN) == false)) {
            libNtve_gf_CreateUnitsAtPoint2(1, "WarpPrism", 0, gv_pLAYER_02_ScriptedTOSS, PointFromId(215));
            gv_uNITWarpPrismN = UnitLastCreated();
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(15))), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
            TriggerEnable(gt_WarpPrizmDropS2, true);
        }
        else {
            UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(15))), c_orderQueueAddToEnd);
            UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(15))), c_orderQueueAddToEnd);
            if ((gv_fLAGCanIbemeannow == true)) {
                UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), RegionRandomPoint(RegionFromId(15))), c_orderQueueAddToEnd);
            }
            else {
                UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(15))), c_orderQueueAddToEnd);
            }
            Wait(7.0, c_timeGame);
            AIAttackWaveSetGatherPoint(gv_pLAYER_02_ScriptedTOSS, RegionRandomPoint(RegionFromId(15)));
            AIAttackWaveUseGroup(gv_pLAYER_02_ScriptedTOSS, UnitGroup(null, gv_pLAYER_02_ScriptedTOSS, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            AIAttackWaveSetTargetRegion(gv_pLAYER_02_ScriptedTOSS, RegionFromId(3), 0);
            AIAttackWaveSend(gv_pLAYER_02_ScriptedTOSS, 0, false);
        }
    }

    if ((lv_randomDirectionPicker == 4)) {
        if ((UnitIsAlive(gv_uNITWarpPrismNE) == false)) {
            libNtve_gf_CreateUnitsAtPoint2(1, "WarpPrism", 0, gv_pLAYER_02_ScriptedTOSS, PointFromId(215));
            gv_uNITWarpPrismNE = UnitLastCreated();
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(217)), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(16))), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
            TriggerEnable(gt_WarpPrizmDropN2, true);
        }
        else {
            if ((gv_fLAGCanIbemeannow == true)) {
                UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 4), RegionRandomPoint(RegionFromId(16))), c_orderQueueAddToEnd);
                UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 4), RegionRandomPoint(RegionFromId(16))), c_orderQueueAddToEnd);
            }
            else {
                UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), RegionRandomPoint(RegionFromId(16))), c_orderQueueAddToEnd);
            }
            UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), RegionRandomPoint(RegionFromId(16))), c_orderQueueAddToEnd);
            Wait(7.0, c_timeGame);
            AIAttackWaveSetGatherPoint(gv_pLAYER_02_ScriptedTOSS, RegionRandomPoint(RegionFromId(16)));
            AIAttackWaveUseGroup(gv_pLAYER_02_ScriptedTOSS, UnitGroup(null, gv_pLAYER_02_ScriptedTOSS, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            AIAttackWaveSetTargetRegion(gv_pLAYER_02_ScriptedTOSS, RegionFromId(3), 0);
            AIAttackWaveSend(gv_pLAYER_02_ScriptedTOSS, 0, false);
        }
    }

    if ((lv_randomDirectionPicker == 5)) {
        if ((UnitIsAlive(gv_uNITWarpPrismE) == false)) {
            libNtve_gf_CreateUnitsAtPoint2(1, "WarpPrism", 0, gv_pLAYER_02_ScriptedTOSS, PointFromId(215));
            gv_uNITWarpPrismE = UnitLastCreated();
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(217)), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(17))), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
            TriggerEnable(gt_WarpPrizmDropS1, true);
        }
        else {
            if ((gv_fLAGCanIbemeannow == true)) {
                UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), RegionRandomPoint(RegionFromId(17))), c_orderQueueAddToEnd);
                UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 9), RegionRandomPoint(RegionFromId(17))), c_orderQueueAddToEnd);
            }
            else {
                UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(17))), c_orderQueueAddToEnd);
            }
            UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), RegionRandomPoint(RegionFromId(17))), c_orderQueueAddToEnd);
            Wait(7.0, c_timeGame);
            AIAttackWaveSetGatherPoint(gv_pLAYER_02_ScriptedTOSS, RegionRandomPoint(RegionFromId(17)));
            AIAttackWaveUseGroup(gv_pLAYER_02_ScriptedTOSS, UnitGroup(null, gv_pLAYER_02_ScriptedTOSS, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            AIAttackWaveSetTargetRegion(gv_pLAYER_02_ScriptedTOSS, RegionFromId(3), 0);
            AIAttackWaveSend(gv_pLAYER_02_ScriptedTOSS, 0, false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpPrizmDropsWarpSpawner_Init () {
    gt_WarpPrizmDropsWarpSpawner = TriggerCreate("gt_WarpPrizmDropsWarpSpawner_Func");
    TriggerAddEventTimer(gt_WarpPrizmDropsWarpSpawner, gv_warpPrismTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp Prizm Drop - N1
//--------------------------------------------------------------------------------------------------
bool gt_WarpPrizmDropN1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup("WarpPrismPhasing", gv_pLAYER_02_ScriptedTOSS, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(13))), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(13))), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(13))), c_orderQueueAddToEnd);
    Wait(7.0, c_timeGame);
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_ScriptedTOSS, RegionRandomPoint(RegionFromId(13)));
    AIAttackWaveUseGroup(gv_pLAYER_02_ScriptedTOSS, UnitGroup(null, gv_pLAYER_02_ScriptedTOSS, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    AIAttackWaveSetTargetRegion(gv_pLAYER_02_ScriptedTOSS, RegionFromId(3), 0);
    AIAttackWaveSend(gv_pLAYER_02_ScriptedTOSS, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpPrizmDropN1_Init () {
    gt_WarpPrizmDropN1 = TriggerCreate("gt_WarpPrizmDropN1_Func");
    TriggerEnable(gt_WarpPrizmDropN1, false);
    TriggerAddEventTimePeriodic(gt_WarpPrizmDropN1, 9.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp Prizm Drop - N2
//--------------------------------------------------------------------------------------------------
bool gt_WarpPrizmDropN2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup("WarpPrismPhasing", gv_pLAYER_02_ScriptedTOSS, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_fLAGCanIbemeannow == true)) {
        UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 9), RegionRandomPoint(RegionFromId(16))), c_orderQueueAddToEnd);
    }
    else {
        UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), RegionRandomPoint(RegionFromId(16))), c_orderQueueAddToEnd);
    }
    UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), RegionRandomPoint(RegionFromId(16))), c_orderQueueAddToEnd);
    Wait(7.0, c_timeGame);
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_ScriptedTOSS, RegionRandomPoint(RegionFromId(16)));
    AIAttackWaveUseGroup(gv_pLAYER_02_ScriptedTOSS, UnitGroup(null, gv_pLAYER_02_ScriptedTOSS, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    AIAttackWaveSetTargetRegion(gv_pLAYER_02_ScriptedTOSS, RegionFromId(3), 0);
    AIAttackWaveSend(gv_pLAYER_02_ScriptedTOSS, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpPrizmDropN2_Init () {
    gt_WarpPrizmDropN2 = TriggerCreate("gt_WarpPrizmDropN2_Func");
    TriggerEnable(gt_WarpPrizmDropN2, false);
    TriggerAddEventTimePeriodic(gt_WarpPrizmDropN2, 9.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp Prizm Drop - S1
//--------------------------------------------------------------------------------------------------
bool gt_WarpPrizmDropS1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup("WarpPrismPhasing", gv_pLAYER_02_ScriptedTOSS, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_fLAGCanIbemeannow == true)) {
        UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), RegionRandomPoint(RegionFromId(17))), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 9), RegionRandomPoint(RegionFromId(17))), c_orderQueueAddToEnd);
    }
    else {
        UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(17))), c_orderQueueAddToEnd);
    }
    UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), RegionRandomPoint(RegionFromId(17))), c_orderQueueAddToEnd);
    Wait(7.0, c_timeGame);
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_ScriptedTOSS, RegionRandomPoint(RegionFromId(17)));
    AIAttackWaveUseGroup(gv_pLAYER_02_ScriptedTOSS, UnitGroup(null, gv_pLAYER_02_ScriptedTOSS, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    AIAttackWaveSetTargetRegion(gv_pLAYER_02_ScriptedTOSS, RegionFromId(3), 0);
    AIAttackWaveSend(gv_pLAYER_02_ScriptedTOSS, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpPrizmDropS1_Init () {
    gt_WarpPrizmDropS1 = TriggerCreate("gt_WarpPrizmDropS1_Func");
    TriggerEnable(gt_WarpPrizmDropS1, false);
    TriggerAddEventTimePeriodic(gt_WarpPrizmDropS1, 9.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp Prizm Drop - S2
//--------------------------------------------------------------------------------------------------
bool gt_WarpPrizmDropS2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup("WarpPrismPhasing", gv_pLAYER_02_ScriptedTOSS, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(15))), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(15))), c_orderQueueAddToEnd);
    if ((gv_fLAGCanIbemeannow == true)) {
        UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), RegionRandomPoint(RegionFromId(15))), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), RegionRandomPoint(RegionFromId(15))), c_orderQueueAddToEnd);
    }
    else {
        UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(15))), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(15))), c_orderQueueAddToEnd);
    }
    Wait(7.0, c_timeGame);
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_ScriptedTOSS, RegionRandomPoint(RegionFromId(15)));
    AIAttackWaveUseGroup(gv_pLAYER_02_ScriptedTOSS, UnitGroup(null, gv_pLAYER_02_ScriptedTOSS, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    AIAttackWaveSetTargetRegion(gv_pLAYER_02_ScriptedTOSS, RegionFromId(3), 0);
    AIAttackWaveSend(gv_pLAYER_02_ScriptedTOSS, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpPrizmDropS2_Init () {
    gt_WarpPrizmDropS2 = TriggerCreate("gt_WarpPrizmDropS2_Func");
    TriggerEnable(gt_WarpPrizmDropS2, false);
    TriggerAddEventTimePeriodic(gt_WarpPrizmDropS2, 9.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp Prizm Drop - S3
//--------------------------------------------------------------------------------------------------
bool gt_WarpPrizmDropS3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup("WarpPrismPhasing", gv_pLAYER_02_ScriptedTOSS, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_fLAGCanIbemeannow == true)) {
        UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), RegionRandomPoint(RegionFromId(14))), c_orderQueueAddToEnd);
    }
    else {
        UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionFromId(14))), c_orderQueueAddToEnd);
    }
    UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 5), RegionRandomPoint(RegionFromId(14))), c_orderQueueAddToEnd);
    Wait(7.0, c_timeGame);
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_ScriptedTOSS, RegionRandomPoint(RegionFromId(14)));
    AIAttackWaveUseGroup(gv_pLAYER_02_ScriptedTOSS, UnitGroup(null, gv_pLAYER_02_ScriptedTOSS, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    AIAttackWaveSetTargetRegion(gv_pLAYER_02_ScriptedTOSS, RegionFromId(3), 0);
    AIAttackWaveSend(gv_pLAYER_02_ScriptedTOSS, 1, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpPrizmDropS3_Init () {
    gt_WarpPrizmDropS3 = TriggerCreate("gt_WarpPrizmDropS3_Func");
    TriggerEnable(gt_WarpPrizmDropS3, false);
    TriggerAddEventTimePeriodic(gt_WarpPrizmDropS3, 9.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prison release 1
//--------------------------------------------------------------------------------------------------
bool gt_Prisonrelease1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto3BC1DEE1_g;
    int auto3BC1DEE1_u;
    unit auto3BC1DEE1_var;

    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_uNITPrison[1]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_iNTProtossRescued += 1;
    libNtve_gf_KillModel(gv_aCTORPrisonReticule[1]);
    PingDestroy(gv_pINGPrison[1]);
    TriggerExecute(gt_TIPPrisonersQ, true, false);
    Wait(3.33, c_timeGame);
    auto3BC1DEE1_g = UnitGroup(null, gv_pLAYER_07_Prisoners, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3BC1DEE1_u = UnitGroupCount(auto3BC1DEE1_g, c_unitCountAll);
    for (;; auto3BC1DEE1_u -= 1) {
        auto3BC1DEE1_var = UnitGroupUnitFromEnd(auto3BC1DEE1_g, auto3BC1DEE1_u);
        if (auto3BC1DEE1_var == null) { break; }
        UnitBehaviorRemove(auto3BC1DEE1_var, "SuppressCloak", 1);
        UnitSetState(auto3BC1DEE1_var, c_unitStateInvulnerable, false);
        libNtve_gf_RescueUnit(auto3BC1DEE1_var, gv_pLAYER_01_USER, true);
        UnitGroupAdd(gv_gROUPEscapees, auto3BC1DEE1_var);
    }
    TriggerExecute(gt_PrisonDialogueQ, true, false);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/89CA9AB7"), null, RegionGetCenter(RegionFromId(6)));
    TriggerExecute(gt_ObjectivePrisonersUpdate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Prisonrelease1_Init () {
    gt_Prisonrelease1 = TriggerCreate("gt_Prisonrelease1_Func");
    TriggerAddEventUnitDied(gt_Prisonrelease1, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prison release 2
//--------------------------------------------------------------------------------------------------
bool gt_Prisonrelease2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC50B9DC9_g;
    int autoC50B9DC9_u;
    unit autoC50B9DC9_var;

    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_uNITPrison[2]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_iNTProtossRescued += 1;
    libNtve_gf_KillModel(gv_aCTORPrisonReticule[2]);
    PingDestroy(gv_pINGPrison[2]);
    TriggerExecute(gt_TIPPrisonersQ, true, false);
    Wait(3.33, c_timeGame);
    autoC50B9DC9_g = UnitGroup(null, gv_pLAYER_07_Prisoners, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC50B9DC9_u = UnitGroupCount(autoC50B9DC9_g, c_unitCountAll);
    for (;; autoC50B9DC9_u -= 1) {
        autoC50B9DC9_var = UnitGroupUnitFromEnd(autoC50B9DC9_g, autoC50B9DC9_u);
        if (autoC50B9DC9_var == null) { break; }
        UnitBehaviorRemove(autoC50B9DC9_var, "SuppressCloak", 1);
        UnitSetState(autoC50B9DC9_var, c_unitStateInvulnerable, false);
        libNtve_gf_RescueUnit(autoC50B9DC9_var, gv_pLAYER_01_USER, true);
        UnitGroupAdd(gv_gROUPEscapees, autoC50B9DC9_var);
    }
    TriggerExecute(gt_PrisonDialogueQ, true, false);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/A1F38A4A"), null, RegionGetCenter(RegionFromId(11)));
    TriggerExecute(gt_ObjectivePrisonersUpdate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Prisonrelease2_Init () {
    gt_Prisonrelease2 = TriggerCreate("gt_Prisonrelease2_Func");
    TriggerAddEventUnitDied(gt_Prisonrelease2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prison release 3
//--------------------------------------------------------------------------------------------------
bool gt_Prisonrelease3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoBE5341A9_g;
    int autoBE5341A9_u;
    unit autoBE5341A9_var;

    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_uNITPrison[3]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_iNTProtossRescued += 1;
    libNtve_gf_KillModel(gv_aCTORPrisonReticule[3]);
    PingDestroy(gv_pINGPrison[3]);
    TriggerExecute(gt_TIPPrisonersQ, true, false);
    Wait(3.33, c_timeGame);
    autoBE5341A9_g = UnitGroup(null, gv_pLAYER_07_Prisoners, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBE5341A9_u = UnitGroupCount(autoBE5341A9_g, c_unitCountAll);
    for (;; autoBE5341A9_u -= 1) {
        autoBE5341A9_var = UnitGroupUnitFromEnd(autoBE5341A9_g, autoBE5341A9_u);
        if (autoBE5341A9_var == null) { break; }
        UnitBehaviorRemove(autoBE5341A9_var, "SuppressCloak", 1);
        UnitSetState(autoBE5341A9_var, c_unitStateInvulnerable, false);
        libNtve_gf_RescueUnit(autoBE5341A9_var, gv_pLAYER_01_USER, true);
        UnitGroupAdd(gv_gROUPEscapees, autoBE5341A9_var);
    }
    TriggerExecute(gt_PrisonDialogueQ, true, false);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/77854CB5"), null, RegionGetCenter(RegionFromId(9)));
    TriggerExecute(gt_ObjectivePrisonersUpdate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Prisonrelease3_Init () {
    gt_Prisonrelease3 = TriggerCreate("gt_Prisonrelease3_Func");
    TriggerAddEventUnitDied(gt_Prisonrelease3, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prison release 4
//--------------------------------------------------------------------------------------------------
bool gt_Prisonrelease4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE715E49F_g;
    int autoE715E49F_u;
    unit autoE715E49F_var;

    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_uNITPrison[4]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_iNTProtossRescued += 1;
    libNtve_gf_KillModel(gv_aCTORPrisonReticule[4]);
    PingDestroy(gv_pINGPrison[4]);
    TriggerExecute(gt_TIPPrisonersQ, true, false);
    Wait(3.33, c_timeGame);
    autoE715E49F_g = UnitGroup(null, gv_pLAYER_07_Prisoners, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE715E49F_u = UnitGroupCount(autoE715E49F_g, c_unitCountAll);
    for (;; autoE715E49F_u -= 1) {
        autoE715E49F_var = UnitGroupUnitFromEnd(autoE715E49F_g, autoE715E49F_u);
        if (autoE715E49F_var == null) { break; }
        UnitBehaviorRemove(autoE715E49F_var, "SuppressCloak", 1);
        UnitSetState(autoE715E49F_var, c_unitStateInvulnerable, false);
        libNtve_gf_RescueUnit(autoE715E49F_var, gv_pLAYER_01_USER, true);
        UnitGroupAdd(gv_gROUPEscapees, autoE715E49F_var);
    }
    TriggerExecute(gt_PrisonDialogueQ, true, false);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/4A58CA35"), null, RegionGetCenter(RegionFromId(19)));
    TriggerExecute(gt_ObjectivePrisonersUpdate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Prisonrelease4_Init () {
    gt_Prisonrelease4 = TriggerCreate("gt_Prisonrelease4_Func");
    TriggerAddEventUnitDied(gt_Prisonrelease4, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prison Reticule Killer
//--------------------------------------------------------------------------------------------------
bool gt_PrisonReticuleKiller_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unit auto3ED64133_val;

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_gROUPPrisons, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto3ED64133_val = EventUnit();
    if (auto3ED64133_val == gv_uNITPrison[1]) {
        libNtve_gf_KillModel(gv_aCTORPrisonReticule[1]);
    }
    else if (auto3ED64133_val == gv_uNITPrison[2]) {
        libNtve_gf_KillModel(gv_aCTORPrisonReticule[2]);
    }
    else if (auto3ED64133_val == gv_uNITPrison[3]) {
        libNtve_gf_KillModel(gv_aCTORPrisonReticule[3]);
    }
    else if (auto3ED64133_val == gv_uNITPrison[4]) {
        libNtve_gf_KillModel(gv_aCTORPrisonReticule[4]);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrisonReticuleKiller_Init () {
    gt_PrisonReticuleKiller = TriggerCreate("gt_PrisonReticuleKiller_Func");
    TriggerAddEventUnitAttacked(gt_PrisonReticuleKiller, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prison Dialogue Q
//--------------------------------------------------------------------------------------------------
bool gt_PrisonDialogueQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto9079F0A0_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_iNTPrisonrelasedialogue += 1;
    auto9079F0A0_val = gv_iNTPrisonrelasedialogue;
    if (auto9079F0A0_val == 1) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TTychus05DarkTemplar00025", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus05DarkTemplar00025", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else if (auto9079F0A0_val == 2) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TTychus05DarkTemplar00024", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus05DarkTemplar00024", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else if (auto9079F0A0_val == 3) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TTychus05DarkTemplar00022", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus05DarkTemplar00022", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else if (auto9079F0A0_val == 4) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TTychus05DarkTemplar00026", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus05DarkTemplar00026", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrisonDialogueQ_Init () {
    gt_PrisonDialogueQ = TriggerCreate("gt_PrisonDialogueQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Damage Pulse
//--------------------------------------------------------------------------------------------------
bool gt_DamagePulse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_generatorIndex;
    unitgroup lv_damageGroup;
    fixed lv_damageFieldRadii;
    fixed lv_damageFieldRadiismall;

    // Automatic Variable Declarations
    unitgroup auto36320978_g;
    int auto36320978_u;
    unit auto36320978_var;
    unitgroup auto9EBDACB1_g;
    int auto9EBDACB1_u;
    unit auto9EBDACB1_var;
    int autoB4D515A0_ae;
    const int autoB4D515A0_ai = 1;
    unitgroup auto4A0B5E8D_g;
    int auto4A0B5E8D_u;
    unit auto4A0B5E8D_var;
    int autoA20988B5_ae;
    const int autoA20988B5_ai = 1;
    unitgroup autoAC850E86_g;
    int autoAC850E86_u;
    unit autoAC850E86_var;
    unitgroup auto1789B74F_g;
    int auto1789B74F_u;
    unit auto1789B74F_var;

    // Variable Initialization
    lv_damageGroup = UnitGroupEmpty();
    lv_damageFieldRadii = 40.0;
    lv_damageFieldRadiismall = 15.0;

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_uNIT_RipFieldGeneratorINTRO) == true)) {
        auto36320978_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(gv_uNIT_RipFieldGeneratorINTRO), lv_damageFieldRadiismall), UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHasShields - 32))), 0);
        auto36320978_u = UnitGroupCount(auto36320978_g, c_unitCountAll);
        for (;; auto36320978_u -= 1) {
            auto36320978_var = UnitGroupUnitFromEnd(auto36320978_g, auto36320978_u);
            if (auto36320978_var == null) { break; }
            if ((UnitGetType(auto36320978_var) != "TalDarimPrisonCrystal") && (UnitGetType(auto36320978_var) != "TalDarimPrison")) {
                UnitGroupAdd(lv_damageGroup, auto36320978_var);
            }

        }
    }

    if ((UnitIsAlive(gv_uNIT_RipFieldGenerator01) == true)) {
        auto9EBDACB1_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(gv_uNIT_RipFieldGenerator01), lv_damageFieldRadii), UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHasShields - 32))), 0);
        auto9EBDACB1_u = UnitGroupCount(auto9EBDACB1_g, c_unitCountAll);
        for (;; auto9EBDACB1_u -= 1) {
            auto9EBDACB1_var = UnitGroupUnitFromEnd(auto9EBDACB1_g, auto9EBDACB1_u);
            if (auto9EBDACB1_var == null) { break; }
            if ((UnitGetType(auto9EBDACB1_var) != "TalDarimPrisonCrystal") && (UnitGetType(auto9EBDACB1_var) != "TalDarimPrison")) {
            }

            UnitGroupAdd(lv_damageGroup, auto9EBDACB1_var);
        }
    }

    autoB4D515A0_ae = gv_index_DamageFields02;
    lv_generatorIndex = 1;
    for ( ; ( (autoB4D515A0_ai >= 0 && lv_generatorIndex <= autoB4D515A0_ae) || (autoB4D515A0_ai < 0 && lv_generatorIndex >= autoB4D515A0_ae) ) ; lv_generatorIndex += autoB4D515A0_ai ) {
        if ((UnitIsAlive(gv_uNIT_RipFieldGenerator02[lv_generatorIndex]) == true)) {
            auto4A0B5E8D_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(gv_uNIT_RipFieldGenerator02[lv_generatorIndex]), lv_damageFieldRadii), UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHasShields - 32))), 0);
            auto4A0B5E8D_u = UnitGroupCount(auto4A0B5E8D_g, c_unitCountAll);
            for (;; auto4A0B5E8D_u -= 1) {
                auto4A0B5E8D_var = UnitGroupUnitFromEnd(auto4A0B5E8D_g, auto4A0B5E8D_u);
                if (auto4A0B5E8D_var == null) { break; }
                if ((UnitGetType(auto4A0B5E8D_var) != "TalDarimPrisonCrystal") && (UnitGetType(auto4A0B5E8D_var) != "TalDarimPrison")) {
                    UnitGroupAdd(lv_damageGroup, auto4A0B5E8D_var);
                }

            }
        }

    }
    autoA20988B5_ae = gv_index_DamageFields03;
    lv_generatorIndex = 1;
    for ( ; ( (autoA20988B5_ai >= 0 && lv_generatorIndex <= autoA20988B5_ae) || (autoA20988B5_ai < 0 && lv_generatorIndex >= autoA20988B5_ae) ) ; lv_generatorIndex += autoA20988B5_ai ) {
        if ((UnitIsAlive(gv_uNIT_RipFieldGenerator03[lv_generatorIndex]) == true)) {
            autoAC850E86_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(gv_uNIT_RipFieldGenerator03[lv_generatorIndex]), lv_damageFieldRadii), UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHasShields - 32))), 0);
            autoAC850E86_u = UnitGroupCount(autoAC850E86_g, c_unitCountAll);
            for (;; autoAC850E86_u -= 1) {
                autoAC850E86_var = UnitGroupUnitFromEnd(autoAC850E86_g, autoAC850E86_u);
                if (autoAC850E86_var == null) { break; }
                if ((UnitGetType(autoAC850E86_var) != "TalDarimPrisonCrystal") && (UnitGetType(autoAC850E86_var) != "TalDarimPrison")) {
                    UnitGroupAdd(lv_damageGroup, autoAC850E86_var);
                }

            }
        }

    }
    auto1789B74F_g = lv_damageGroup;
    auto1789B74F_u = UnitGroupCount(auto1789B74F_g, c_unitCountAll);
    for (;; auto1789B74F_u -= 1) {
        auto1789B74F_var = UnitGroupUnitFromEnd(auto1789B74F_g, auto1789B74F_u);
        if (auto1789B74F_var == null) { break; }
        UnitSetPropertyFixed(auto1789B74F_var, c_unitPropLife, (UnitGetPropertyFixed(auto1789B74F_var, c_unitPropLife, c_unitPropCurrent) - gv_dAMAGEPULSEVALUE));
        libNtve_gf_AttachActorToUnit(auto1789B74F_var, "XelNagaShieldDomeImpact", "Ref_Center");
        gv_damageTracker += 1.0;
        if ((UnitGetPropertyFixed(auto1789B74F_var, c_unitPropLife, c_unitPropCurrent) <= 0.0) && (UnitGetOwner(auto1789B74F_var) == gv_pLAYER_01_USER)) {
            gv_statRipFieldDeaths += 1;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DamagePulse_Init () {
    gt_DamagePulse = TriggerCreate("gt_DamagePulse_Func");
    TriggerAddEventTimePeriodic(gt_DamagePulse, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rip Field Generator Response 1
//--------------------------------------------------------------------------------------------------
bool gt_RipFieldGeneratorResponse1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_uNIT_RipFieldGenerator01))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupIssueOrder(gv_gROUPRipFieldGeneratorResponse01, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitDamageSourceUnit())), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RipFieldGeneratorResponse1_Init () {
    gt_RipFieldGeneratorResponse1 = TriggerCreate("gt_RipFieldGeneratorResponse1_Func");
    TriggerAddEventUnitDamaged(gt_RipFieldGeneratorResponse1, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rip Field Generator Response 2
//--------------------------------------------------------------------------------------------------
bool gt_RipFieldGeneratorResponse2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventUnit() == gv_uNIT_RipFieldGenerator02[1]) || (EventUnit() == gv_uNIT_RipFieldGenerator02[2])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupIssueOrder(gv_gROUPRipFieldGeneratorResponse02, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitDamageSourceUnit())), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RipFieldGeneratorResponse2_Init () {
    gt_RipFieldGeneratorResponse2 = TriggerCreate("gt_RipFieldGeneratorResponse2_Func");
    TriggerAddEventUnitDamaged(gt_RipFieldGeneratorResponse2, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Xel'naga Vault Response
//--------------------------------------------------------------------------------------------------
bool gt_XelnagaVaultResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_uNITVault))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupIssueOrder(gv_gROUPVaultResponse, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitDamageSourceUnit())), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XelnagaVaultResponse_Init () {
    gt_XelnagaVaultResponse = TriggerCreate("gt_XelnagaVaultResponse_Func");
    TriggerAddEventUnitDamaged(gt_XelnagaVaultResponse, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reticule - Rip Field Generator 1
//--------------------------------------------------------------------------------------------------
bool gt_ReticuleRipFieldGenerator1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_uNIT_RipFieldGenerator01), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(gv_uNIT_RipFieldGenerator01) == true)) {
        libNtve_gf_AttachModelToUnit(gv_uNIT_RipFieldGenerator01, "BriefingUnitSelectRed", "Ref_Center");
        gv_aCTORRipFieldGeneratorReticule[1] = libNtve_gf_ActorLastCreated();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReticuleRipFieldGenerator1_Init () {
    gt_ReticuleRipFieldGenerator1 = TriggerCreate("gt_ReticuleRipFieldGenerator1_Func");
    TriggerAddEventTimePeriodic(gt_ReticuleRipFieldGenerator1, 1.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reticule - Rip Field Generator 2_1
//--------------------------------------------------------------------------------------------------
bool gt_ReticuleRipFieldGenerator2_1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_uNIT_RipFieldGenerator02[1]), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(gv_uNIT_RipFieldGenerator02[1]) == true)) {
        libNtve_gf_AttachModelToUnit(gv_uNIT_RipFieldGenerator02[1], "BriefingUnitSelectRed", "Ref_Center");
        gv_aCTORRipFieldGeneratorReticule[2] = libNtve_gf_ActorLastCreated();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReticuleRipFieldGenerator2_1_Init () {
    gt_ReticuleRipFieldGenerator2_1 = TriggerCreate("gt_ReticuleRipFieldGenerator2_1_Func");
    TriggerAddEventTimePeriodic(gt_ReticuleRipFieldGenerator2_1, 1.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reticule - Rip Field Generator 2_2
//--------------------------------------------------------------------------------------------------
bool gt_ReticuleRipFieldGenerator2_2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_uNIT_RipFieldGenerator02[2]), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(gv_uNIT_RipFieldGenerator02[2]) == true)) {
        libNtve_gf_AttachModelToUnit(gv_uNIT_RipFieldGenerator02[2], "BriefingUnitSelectRed", "Ref_Center");
        gv_aCTORRipFieldGeneratorReticule[3] = libNtve_gf_ActorLastCreated();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReticuleRipFieldGenerator2_2_Init () {
    gt_ReticuleRipFieldGenerator2_2 = TriggerCreate("gt_ReticuleRipFieldGenerator2_2_Func");
    TriggerAddEventTimePeriodic(gt_ReticuleRipFieldGenerator2_2, 1.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reticule - Rip Field Generator 2_3
//--------------------------------------------------------------------------------------------------
bool gt_ReticuleRipFieldGenerator2_3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_uNIT_RipFieldGenerator02[3]), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(gv_uNIT_RipFieldGenerator02[3]) == true)) {
        libNtve_gf_AttachModelToUnit(gv_uNIT_RipFieldGenerator02[3], "BriefingUnitSelectRed", "Ref_Center");
        gv_aCTORRipFieldGeneratorReticule[4] = libNtve_gf_ActorLastCreated();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReticuleRipFieldGenerator2_3_Init () {
    gt_ReticuleRipFieldGenerator2_3 = TriggerCreate("gt_ReticuleRipFieldGenerator2_3_Func");
    TriggerAddEventTimePeriodic(gt_ReticuleRipFieldGenerator2_3, 1.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reticule - Rip Field Generator 3
//--------------------------------------------------------------------------------------------------
bool gt_ReticuleRipFieldGenerator3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_generatorIndex;
    int lv_pingIndex;

    // Automatic Variable Declarations
    int auto3A11D611_ae;
    const int auto3A11D611_ai = 1;

    // Variable Initialization
    lv_pingIndex = 5;

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto3A11D611_ae = gv_index_DamageFields03;
    lv_generatorIndex = 1;
    for ( ; ( (auto3A11D611_ai >= 0 && lv_generatorIndex <= auto3A11D611_ae) || (auto3A11D611_ai < 0 && lv_generatorIndex >= auto3A11D611_ae) ) ; lv_generatorIndex += auto3A11D611_ai ) {
        if ((UnitIsAlive(gv_uNIT_RipFieldGenerator03[lv_generatorIndex]) == true) && (gv_aCTORRipFieldGeneratorReticule[lv_pingIndex] == null) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_uNIT_RipFieldGenerator03[lv_generatorIndex]), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            libNtve_gf_AttachModelToUnit(gv_uNIT_RipFieldGenerator03[lv_generatorIndex], "BriefingUnitSelectRed", "Ref_Center");
            gv_aCTORRipFieldGeneratorReticule[lv_pingIndex] = libNtve_gf_ActorLastCreated();
        }

        lv_pingIndex += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReticuleRipFieldGenerator3_Init () {
    gt_ReticuleRipFieldGenerator3 = TriggerCreate("gt_ReticuleRipFieldGenerator3_Func");
    TriggerAddEventTimePeriodic(gt_ReticuleRipFieldGenerator3, 1.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reticule Killer
//--------------------------------------------------------------------------------------------------
bool gt_ReticuleKiller_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unit auto6BEE37E3_val;
    unit auto6AA0775D_val;
    unit autoE40AD731_val;
    unit auto6E2F41B1_val;
    unit autoCD29F2D4_val;
    unit auto8DC41856_val;
    unit auto9C4E19C4_val;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitTarget()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "RipFieldGenerator"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6BEE37E3_val = EventUnit();
    if (auto6BEE37E3_val == gv_uNIT_RipFieldGenerator01) {
        libNtve_gf_KillModel(gv_aCTORRipFieldGeneratorReticule[1]);
    }
    else {
    }
    auto6AA0775D_val = EventUnit();
    if (auto6AA0775D_val == gv_uNIT_RipFieldGenerator02[1]) {
        libNtve_gf_KillModel(gv_aCTORRipFieldGeneratorReticule[2]);
    }
    else {
    }
    autoE40AD731_val = EventUnit();
    if (autoE40AD731_val == gv_uNIT_RipFieldGenerator02[2]) {
        libNtve_gf_KillModel(gv_aCTORRipFieldGeneratorReticule[3]);
    }
    else {
    }
    auto6E2F41B1_val = EventUnit();
    if (auto6E2F41B1_val == gv_uNIT_RipFieldGenerator02[3]) {
        libNtve_gf_KillModel(gv_aCTORRipFieldGeneratorReticule[4]);
    }
    else {
    }
    autoCD29F2D4_val = EventUnit();
    if (autoCD29F2D4_val == gv_uNIT_RipFieldGenerator03[1]) {
        libNtve_gf_KillModel(gv_aCTORRipFieldGeneratorReticule[5]);
    }
    else {
    }
    auto8DC41856_val = EventUnit();
    if (auto8DC41856_val == gv_uNIT_RipFieldGenerator03[2]) {
        libNtve_gf_KillModel(gv_aCTORRipFieldGeneratorReticule[6]);
    }
    else {
    }
    auto9C4E19C4_val = EventUnit();
    if (auto9C4E19C4_val == gv_uNIT_RipFieldGenerator03[3]) {
        libNtve_gf_KillModel(gv_aCTORRipFieldGeneratorReticule[7]);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReticuleKiller_Init () {
    gt_ReticuleKiller = TriggerCreate("gt_ReticuleKiller_Func");
    TriggerAddEventUnitAttacked(gt_ReticuleKiller, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mothership - Create
//--------------------------------------------------------------------------------------------------
bool gt_MothershipCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "TalDarimMothership", 0, gv_pLAYER_02_ScriptedTOSS, UnitGetPosition(gv_uNITVault));
    gv_uNITDaMothership = UnitLastCreated();
    gf_SetUnitMaxStats(gv_uNITDaMothership, gv_daMuddaShipShields, gv_daMuddaShipShields);
    UnitSetPropertyFixed(gv_uNITDaMothership, c_unitPropEnergyPercent, 100.0);
    libNtve_gf_ShareVisionofUnit(gv_uNITDaMothership, true, gv_pLAYER_01_USER);
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_02_ScriptedTOSS, "TalDarimMothership", "", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MothershipCreate_Init () {
    gt_MothershipCreate = TriggerCreate("gt_MothershipCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mothership - Proximity Attack
//--------------------------------------------------------------------------------------------------
bool gt_MothershipProximityAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_uNITDaMothership) == true))) {
            return false;
        }

        if (!((UnitOrder(gv_uNITDaMothership, 0) == null))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_uNITDaMothership, OrderTargetingPoint(AbilityCommand("attack", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventUnit()), -6.0, UnitGetPosition(gv_uNITDaMothership))), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MothershipProximityAttack_Init () {
    gt_MothershipProximityAttack = TriggerCreate("gt_MothershipProximityAttack_Func");
    TriggerAddEventUnitRange(gt_MothershipProximityAttack, null, UnitFromId(3), 30.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mothership - Vortex
//--------------------------------------------------------------------------------------------------
bool gt_MothershipVortex_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_targetRichEnvironment;

    // Automatic Variable Declarations
    unitgroup autoDAD5E4FA_g;
    int autoDAD5E4FA_u;
    unit autoDAD5E4FA_var;
    unitgroup autoD1A466A2_g;
    int autoD1A466A2_u;
    unit autoD1A466A2_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_uNITDaMothership) == true))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_tIMERVortexCooldown) <= 0.0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_02_ScriptedTOSS, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_uNITDaMothership), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_vortexTargetGroup = UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_uNITDaMothership), 15.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDAD5E4FA_g = gv_vortexTargetGroup;
    autoDAD5E4FA_u = UnitGroupCount(autoDAD5E4FA_g, c_unitCountAll);
    for (;; autoDAD5E4FA_u -= 1) {
        autoDAD5E4FA_var = UnitGroupUnitFromEnd(autoDAD5E4FA_g, autoDAD5E4FA_u);
        if (autoDAD5E4FA_var == null) { break; }
        UnitSetCustomValue(autoDAD5E4FA_var, 0, IntToFixed(UnitGroupCount(UnitGroupAlliance(gv_pLAYER_02_ScriptedTOSS, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(autoDAD5E4FA_var), 2.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32))), 0), c_unitCountAlive)));
    }
    autoD1A466A2_g = gv_vortexTargetGroup;
    autoD1A466A2_u = UnitGroupCount(autoD1A466A2_g, c_unitCountAll);
    for (;; autoD1A466A2_u -= 1) {
        autoD1A466A2_var = UnitGroupUnitFromEnd(autoD1A466A2_g, autoD1A466A2_u);
        if (autoD1A466A2_var == null) { break; }
        if ((UnitGetCustomValue(autoD1A466A2_var, 0) > lv_targetRichEnvironment)) {
            lv_targetRichEnvironment = UnitGetCustomValue(autoD1A466A2_var, 0);
            gv_vortexTarget = autoD1A466A2_var;
        }

    }
    if ((gv_vortexTarget != null)) {
        UnitIssueOrder(gv_uNITDaMothership, OrderTargetingPoint(AbilityCommand("TalDarimVortex", 0), UnitGetPosition(gv_vortexTarget)), c_orderQueueReplace);
        TimerStart(gv_tIMERVortexCooldown, 40.0, false, c_timeGame);
        TriggerExecute(gt_MothershipWarpInAttack, true, false);
        TriggerExecute(gt_TIPVortexQ, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MothershipVortex_Init () {
    gt_MothershipVortex = TriggerCreate("gt_MothershipVortex_Func");
    TriggerAddEventTimePeriodic(gt_MothershipVortex, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mothership - Warp In Attack
//--------------------------------------------------------------------------------------------------
bool gt_MothershipWarpInAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoFC2BECAC_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoFC2BECAC_val = gv_cOUNTERWarpinWave;
    if (autoFC2BECAC_val == 0) {
        gv_cOUNTERWarpinWave += 1;
        UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 7), PointWithOffset(UnitGetPosition(gv_uNITDaMothership), 4.0, 4.0)), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 7), PointWithOffset(UnitGetPosition(gv_uNITDaMothership), -4.0, 0.0)), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 7), PointWithOffset(UnitGetPosition(gv_uNITDaMothership), 4.0, -4.0)), c_orderQueueAddToEnd);
        if (((PlayerDifficulty(gv_pLAYER_01_USER) == 3) || (PlayerDifficulty(gv_pLAYER_01_USER) == 4))) {
            UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 14), PointWithOffset(UnitGetPosition(gv_uNITDaMothership), -4.0, 4.0)), c_orderQueueAddToEnd);
            UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 14), PointWithOffset(UnitGetPosition(gv_uNITDaMothership), -4.0, -4.0)), c_orderQueueAddToEnd);
        }

    }
    else if (autoFC2BECAC_val == 1) {
        gv_cOUNTERWarpinWave += 1;
        UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointWithOffset(UnitGetPosition(gv_uNITDaMothership), 4.0, 4.0)), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointWithOffset(UnitGetPosition(gv_uNITDaMothership), -4.0, 0.0)), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointWithOffset(UnitGetPosition(gv_uNITDaMothership), 4.0, 0.0)), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointWithOffset(UnitGetPosition(gv_uNITDaMothership), 4.0, -4.0)), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointWithOffset(UnitGetPosition(gv_uNITDaMothership), 0.0, 4.0)), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointWithOffset(UnitGetPosition(gv_uNITDaMothership), 0.0, -4.0)), c_orderQueueAddToEnd);
        if (((PlayerDifficulty(gv_pLAYER_01_USER) == 3) || (PlayerDifficulty(gv_pLAYER_01_USER) == 4))) {
            UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 8), PointWithOffset(UnitGetPosition(gv_uNITDaMothership), -4.0, 4.0)), c_orderQueueAddToEnd);
            UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 8), PointWithOffset(UnitGetPosition(gv_uNITDaMothership), -4.0, -4.0)), c_orderQueueAddToEnd);
        }

    }
    else if (autoFC2BECAC_val == 2) {
        gv_cOUNTERWarpinWave += 1;
        UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 6), PointWithOffset(UnitGetPosition(gv_uNITDaMothership), 4.0, 4.0)), c_orderQueueReplace);
        UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 6), PointWithOffset(UnitGetPosition(gv_uNITDaMothership), -4.0, 0.0)), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 6), PointWithOffset(UnitGetPosition(gv_uNITDaMothership), 4.0, -4.0)), c_orderQueueAddToEnd);
        if (((PlayerDifficulty(gv_pLAYER_01_USER) == 3) || (PlayerDifficulty(gv_pLAYER_01_USER) == 4))) {
            UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 8), PointWithOffset(UnitGetPosition(gv_uNITDaMothership), -4.0, 4.0)), c_orderQueueAddToEnd);
            UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 8), PointWithOffset(UnitGetPosition(gv_uNITDaMothership), -4.0, -4.0)), c_orderQueueAddToEnd);
        }

    }
    else {
        UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 7), PointWithOffset(UnitGetPosition(gv_uNITDaMothership), 4.0, 4.0)), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 7), PointWithOffset(UnitGetPosition(gv_uNITDaMothership), -4.0, 0.0)), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 7), PointWithOffset(UnitGetPosition(gv_uNITDaMothership), 4.0, -4.0)), c_orderQueueAddToEnd);
        if (((PlayerDifficulty(gv_pLAYER_01_USER) == 3) || (PlayerDifficulty(gv_pLAYER_01_USER) == 4))) {
            UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 14), PointWithOffset(UnitGetPosition(gv_uNITDaMothership), -4.0, 4.0)), c_orderQueueAddToEnd);
            UnitIssueOrder(gv_uNIT_Toss02_SUPERWARPGATE, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 14), PointWithOffset(UnitGetPosition(gv_uNITDaMothership), -4.0, -4.0)), c_orderQueueAddToEnd);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MothershipWarpInAttack_Init () {
    gt_MothershipWarpInAttack = TriggerCreate("gt_MothershipWarpInAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mothership - Warmhole VAULT
//--------------------------------------------------------------------------------------------------
bool gt_MothershipWarmholeVAULT_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((EventUnit() == gv_uNITVault))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_uNITDaMothership, RegionFromId(41)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ChangeUnitDamage(gv_uNITDaMothership, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitIssueOrder(gv_uNITDaMothership, OrderTargetingPoint(AbilityCommand("WormholeTransit", 0), RegionRandomPoint(RegionFromId(20))), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    libNtve_gf_ChangeUnitDamage(gv_uNITDaMothership, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MothershipWarmholeVAULT_Init () {
    gt_MothershipWarmholeVAULT = TriggerCreate("gt_MothershipWarmholeVAULT_Func");
    TriggerAddEventUnitDamaged(gt_MothershipWarmholeVAULT, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mothership - Warmhole 75% health
//--------------------------------------------------------------------------------------------------
bool gt_MothershipWarmhole75health_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((EventUnit() == gv_uNITDaMothership))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_uNITDaMothership, c_unitPropLifePercent, c_unitPropCurrent) <= 75.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ChangeUnitDamage(gv_uNITDaMothership, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    AISetUnitScriptControlled(gv_uNITDaMothership, true);
    UnitIssueOrder(gv_uNITDaMothership, OrderTargetingPoint(AbilityCommand("WormholeTransit", 0), RegionRandomPoint(RegionFromId(20))), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    libNtve_gf_ChangeUnitDamage(gv_uNITDaMothership, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    Wait(5.0, c_timeGame);
    AISetUnitScriptControlled(gv_uNITDaMothership, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MothershipWarmhole75health_Init () {
    gt_MothershipWarmhole75health = TriggerCreate("gt_MothershipWarmhole75health_Func");
    TriggerAddEventUnitDamaged(gt_MothershipWarmhole75health, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mothership - Warmhole 30% health
//--------------------------------------------------------------------------------------------------
bool gt_MothershipWarmhole30health_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((EventUnit() == gv_uNITDaMothership))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_uNITDaMothership, c_unitPropLifePercent, c_unitPropCurrent) <= 30.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ChangeUnitDamage(gv_uNITDaMothership, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    AISetUnitScriptControlled(gv_uNITDaMothership, true);
    UnitIssueOrder(gv_uNITDaMothership, OrderTargetingPoint(AbilityCommand("WormholeTransit", 0), RegionRandomPoint(RegionFromId(20))), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    libNtve_gf_ChangeUnitDamage(gv_uNITDaMothership, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    Wait(5.0, c_timeGame);
    AISetUnitScriptControlled(gv_uNITDaMothership, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MothershipWarmhole30health_Init () {
    gt_MothershipWarmhole30health = TriggerCreate("gt_MothershipWarmhole30health_Func");
    TriggerAddEventUnitDamaged(gt_MothershipWarmhole30health, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mothership - Death Q
//--------------------------------------------------------------------------------------------------
bool gt_MothershipDeathQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((EventUnit() == gv_uNITDaMothership))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/EBB89FB0"), null, UnitGetPosition(EventUnit()));
    PingDestroy(gv_pINGMothership);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus05TalDarimExecutor00017", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus05TalDarimExecutor00017", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MothershipDeathQ_Init () {
    gt_MothershipDeathQ = TriggerCreate("gt_MothershipDeathQ_Func");
    TriggerAddEventUnitDied(gt_MothershipDeathQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initiate Patrols
//--------------------------------------------------------------------------------------------------
bool gt_InitiatePatrols_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupIssueOrder(gv_eastLandPatrol, OrderTargetingRelativePoint(AbilityCommand("move", 1), PointFromId(271)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitiatePatrols_Init () {
    gt_InitiatePatrols = TriggerCreate("gt_InitiatePatrols_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Pickups
//--------------------------------------------------------------------------------------------------
bool gt_ResourcePickups_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoCE9ECBB5_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoCE9ECBB5_val = UnitGetType(EventUnit());
    if (autoCE9ECBB5_val == "NaturalMinerals") {
        libCamp_gf_DestroyCacheAndGivePlayerResources(EventUnit(), c_resourceTypeMinerals, 100, gv_pLAYER_01_USER);
    }
    else if (autoCE9ECBB5_val == "NaturalGas") {
        libCamp_gf_DestroyCacheAndGivePlayerResources(EventUnit(), c_resourceTypeVespene, 100, gv_pLAYER_01_USER);
    }
    else if (autoCE9ECBB5_val == "GasCanisterProtoss") {
        libCamp_gf_DestroyCacheAndGivePlayerResources(EventUnit(), c_resourceTypeVespene, 100, gv_pLAYER_01_USER);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourcePickups_Init () {
    gt_ResourcePickups = TriggerCreate("gt_ResourcePickups_Func");
    TriggerAddEventUnitAbility(gt_ResourcePickups, null, AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Pickup - Dialogue Q
//--------------------------------------------------------------------------------------------------
bool gt_ResourcePickupDialogueQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0E026239_g;
    int auto0E026239_u;
    unit auto0E026239_var;
    unitgroup auto20811A7C_g;
    int auto20811A7C_u;
    unit auto20811A7C_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus05Horner00020", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus05Raynor00021", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    auto0E026239_g = UnitGroup("NaturalGas", c_playerAny, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0E026239_u = UnitGroupCount(auto0E026239_g, c_unitCountAll);
    for (;; auto0E026239_u -= 1) {
        auto0E026239_var = UnitGroupUnitFromEnd(auto0E026239_g, auto0E026239_u);
        if (auto0E026239_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(auto0E026239_var, true, gv_pLAYER_01_USER);
    }
    auto20811A7C_g = UnitGroup("NaturalMinerals", c_playerAny, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto20811A7C_u = UnitGroupCount(auto20811A7C_g, c_unitCountAll);
    for (;; auto20811A7C_u -= 1) {
        auto20811A7C_var = UnitGroupUnitFromEnd(auto20811A7C_g, auto20811A7C_u);
        if (auto20811A7C_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(auto20811A7C_var, true, gv_pLAYER_01_USER);
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourcePickupDialogueQ_Init () {
    gt_ResourcePickupDialogueQ = TriggerCreate("gt_ResourcePickupDialogueQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resources Low Dialogue Q
//--------------------------------------------------------------------------------------------------
bool gt_ResourcesLowDialogueQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rESOURCES;

    // Automatic Variable Declarations
    unitgroup autoBC161B9B_g;
    int autoBC161B9B_u;
    unit autoBC161B9B_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoBC161B9B_g = UnitGroup("MineralField", c_playerAny, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBC161B9B_u = UnitGroupCount(autoBC161B9B_g, c_unitCountAll);
    for (;; autoBC161B9B_u -= 1) {
        autoBC161B9B_var = UnitGroupUnitFromEnd(autoBC161B9B_g, autoBC161B9B_u);
        if (autoBC161B9B_var == null) { break; }
        lv_rESOURCES += libNtve_gf_UnitGetPropertyResources(autoBC161B9B_var, c_unitPropCurrent);
    }
    if ((lv_rESOURCES <= 500) && (UnitGroupCount(UnitGroup("CommandCenter", gv_pLAYER_01_USER, RegionFromId(25), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("OrbitalCommand", gv_pLAYER_01_USER, RegionFromId(25), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("PlanetaryFortress", gv_pLAYER_01_USER, RegionFromId(25), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        TriggerQueueEnter();
        TriggerEnable(TriggerGetCurrent(), false);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TTychus05Adjutant00044", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus05Adjutant00044", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/03F27144"), null, RegionGetCenter(RegionFromId(32)));
        libNtve_gf_CreatePingFacingAngle(gv_fORCEGOOD_GUYS, "PingSimple", RegionGetCenter(RegionFromId(32)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 4.0, 270.0);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourcesLowDialogueQ_Init () {
    gt_ResourcesLowDialogueQ = TriggerCreate("gt_ResourcesLowDialogueQ_Func");
    TriggerAddEventTimePeriodic(gt_ResourcesLowDialogueQ, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Xel'naga Vault Reticule Killer
//--------------------------------------------------------------------------------------------------
bool gt_XelnagaVaultReticuleKiller_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_vaultReticule != null))) {
            return false;
        }

        if (!((EventUnit() == gv_uNITVault))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_vaultReticule);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XelnagaVaultReticuleKiller_Init () {
    gt_XelnagaVaultReticuleKiller = TriggerCreate("gt_XelnagaVaultReticuleKiller_Func");
    TriggerAddEventUnitAttacked(gt_XelnagaVaultReticuleKiller, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TIP-Campaign Tips Q
//--------------------------------------------------------------------------------------------------
bool gt_TIPCampaignTipsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateStorymodeTips();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TIPCampaignTipsQ_Init () {
    gt_TIPCampaignTipsQ = TriggerCreate("gt_TIPCampaignTipsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TIP-Battlecruiser Q
//--------------------------------------------------------------------------------------------------
bool gt_TIPBattlecruiserQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Tychus05_BattleCruisers", libNtve_ge_TipType_NewUnit, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TIPBattlecruiserQ_Init () {
    gt_TIPBattlecruiserQ = TriggerCreate("gt_TIPBattlecruiserQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TIP-Yamato Q
//--------------------------------------------------------------------------------------------------
bool gt_TIPYamatoQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Tychus05_Yamato", libNtve_ge_TipType_NewAbility, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TIPYamatoQ_Init () {
    gt_TIPYamatoQ = TriggerCreate("gt_TIPYamatoQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TIP- Fusion Core Q
//--------------------------------------------------------------------------------------------------
bool gt_TIPFusionCoreQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "FusionCore"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Tychus05_FusionCore", libNtve_ge_TipType_NewStructure, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TIPFusionCoreQ_Init () {
    gt_TIPFusionCoreQ = TriggerCreate("gt_TIPFusionCoreQ_Func");
    TriggerAddEventUnitSelected(gt_TIPFusionCoreQ, null, gv_pLAYER_01_USER, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TIP- Rip Field Q
//--------------------------------------------------------------------------------------------------
bool gt_TIPRipFieldQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Tychus05_RipFields", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TIPRipFieldQ_Init () {
    gt_TIPRipFieldQ = TriggerCreate("gt_TIPRipFieldQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TIP- Prisoners Q
//--------------------------------------------------------------------------------------------------
bool gt_TIPPrisonersQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Tychus05_Prisoners", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TIPPrisonersQ_Init () {
    gt_TIPPrisonersQ = TriggerCreate("gt_TIPPrisonersQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TIP- Vortex Q
//--------------------------------------------------------------------------------------------------
bool gt_TIPVortexQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Tychus05_Vortex", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TIPVortexQ_Init () {
    gt_TIPVortexQ = TriggerCreate("gt_TIPVortexQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Destroy All Rip Field Emitters
//--------------------------------------------------------------------------------------------------
bool gt_AchievementDestroyAllRipFieldEmitters_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1))) {
            return false;
        }

        if (!((UnitGroupCount(gv_gROUPEmitters, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AchievementAward(gv_pLAYER_01_USER, "TTychus05_2");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementDestroyAllRipFieldEmitters_Init () {
    gt_AchievementDestroyAllRipFieldEmitters = TriggerCreate("gt_AchievementDestroyAllRipFieldEmitters_Func");
    TriggerAddEventTimePeriodic(gt_AchievementDestroyAllRipFieldEmitters, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - Rip Field Deaths
//--------------------------------------------------------------------------------------------------
bool gt_StatRipFieldDeaths_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatRipFieldDeaths_Init () {
    gt_StatRipFieldDeaths = TriggerCreate("gt_StatRipFieldDeaths_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - Rip Field Emitters Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_StatRipFieldEmittersDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "RipFieldGenerator") || (UnitGetType(EventUnit()) == "RipFieldGeneratorSmall")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_statRipFieldEmittersDestroyed += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatRipFieldEmittersDestroyed_Init () {
    gt_StatRipFieldEmittersDestroyed = TriggerCreate("gt_StatRipFieldEmittersDestroyed_Func");
    TriggerAddEventUnitDied(gt_StatRipFieldEmittersDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Destroy all enemy structures
//--------------------------------------------------------------------------------------------------
bool gt_AchievementDestroyallenemystructures_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(gv_pLAYER_01_USER, UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_ScriptedTOSS, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) <= 0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_03_HighTOSS, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) <= 0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_04_DarkTOSS, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) <= 0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_05_WORLDSHIP, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) <= 0)) {
        AchievementAward(gv_pLAYER_01_USER, "Anniversary_TTychus05");
        TriggerDebugOutput(1, StringExternal("Param/Value/454EEC4A"), false);
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
        gv_protossStructuresRemaining2 = UnitGroupCount(UnitGroup(null, gv_pLAYER_02_ScriptedTOSS, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
        gv_protossStructuresRemaining3 = UnitGroupCount(UnitGroup(null, gv_pLAYER_03_HighTOSS, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
        gv_protossStructuresRemaining4 = UnitGroupCount(UnitGroup(null, gv_pLAYER_04_DarkTOSS, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
        gv_protossStructuresRemaining5 = UnitGroupCount(UnitGroup(null, gv_pLAYER_05_WORLDSHIP, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
        gv_protossStructuresRemainingTotal = (gv_protossStructuresRemaining2 + gv_protossStructuresRemaining3 + gv_protossStructuresRemaining4 + gv_protossStructuresRemaining5);
        TriggerDebugOutput(1, IntToText(gv_protossStructuresRemainingTotal), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementDestroyallenemystructures_Init () {
    gt_AchievementDestroyallenemystructures = TriggerCreate("gt_AchievementDestroyallenemystructures_Func");
    TriggerEnable(gt_AchievementDestroyallenemystructures, false);
    TriggerAddEventUnitDied(gt_AchievementDestroyallenemystructures, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/954F49D2"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerEnable(gt_DefeatBaseDead, false);
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat LZ Units Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatLZUnitsDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Battlecruiser", gv_pLAYER_01_USER, null, UnitFilter(0, 0, 0, (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerExecute(gt_ObjectiveClearLZFailed, true, false);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/9CC73EFB"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatLZUnitsDead_Init () {
    gt_DefeatLZUnitsDead = TriggerCreate("gt_DefeatLZUnitsDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatLZUnitsDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Retrieve Artifact Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryRetrieveArtifactCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((EventUnit() == gv_uNITVault))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ArtifactPiece5", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(321));
    gv_victoryArtifact = UnitLastCreated();
    TriggerExecute(gt_ObjectiveArtifactComplete, true, true);
    libCamp_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryRetrieveArtifactCompleted_Init () {
    gt_VictoryRetrieveArtifactCompleted = TriggerCreate("gt_VictoryRetrieveArtifactCompleted_Func");
    TriggerAddEventUnitDied(gt_VictoryRetrieveArtifactCompleted, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_totalShieldDamage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_totalShieldDamage = (gv_damageTracker * gv_dAMAGEPULSEVALUE);
    if ((ObjectiveGetState(gv_objectiveRetrieveArtifact) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveRescuePrisoners) == c_objectiveStateCompleted)) {
        AchievementAward(gv_pLAYER_01_USER, "TTychus05_1");
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1) && (gv_statRipFieldDeaths == 0)) {
        AchievementAward(gv_pLAYER_01_USER, "TTychus05_3");
    }

    VictoryPanelAddAchievement("TTychus05_1");
    VictoryPanelAddAchievement("TTychus05_2");
    VictoryPanelAddAchievement("TTychus05_3");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/B2DE68BD"), IntToText(gv_statRipFieldEmittersDestroyed));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/74194369"), IntToText(gv_statRipFieldDeaths));
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/474FD73D"), (IntToText(gv_iNTProtossRescued) + StringExternal("Param/Value/9F239AD7")));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/EBA42EA0"), IntToText(gv_iNTProtossRescued));
    libCamp_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    libCamp_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CampaignInitAI();
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_ScriptedTOSS, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPlayer(gv_pLAYER_03_HighTOSS, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPlayer(gv_pLAYER_04_DarkTOSS, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER_03_HighTOSS, PointFromId(109));
    AIAttackWaveSetGatherPoint(gv_pLAYER_04_DarkTOSS, PointFromId(284));
    AIToggleBulliesInRegion(gv_pLAYER_03_HighTOSS, RegionFromId(24), true);
    AIToggleBulliesInRegion(gv_pLAYER_04_DarkTOSS, RegionFromId(30), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI Waves
//--------------------------------------------------------------------------------------------------
bool gt_StartAIWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_P04AttackWavesMiddle, true, false);
    TriggerExecute(gt_StartAIUpgradesH, true, false);
    TriggerExecute(gt_StartAIUpgradesI, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAIWaves_Init () {
    gt_StartAIWaves = TriggerCreate("gt_StartAIWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI Upgrades H
//--------------------------------------------------------------------------------------------------
bool gt_StartAIUpgradesH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto3C898798_g;
    int auto3C898798_var;
    playergroup autoA9904CDF_g;
    int autoA9904CDF_var;
    playergroup autoD1C2EFF5_g;
    int autoD1C2EFF5_var;
    playergroup auto7FFC8092_g;
    int auto7FFC8092_var;
    playergroup auto16949520_g;
    int auto16949520_var;
    playergroup auto50915219_g;
    int auto50915219_var;
    playergroup autoC70F93C2_g;
    int autoC70F93C2_var;
    playergroup auto59AB1A11_g;
    int auto59AB1A11_var;
    playergroup auto2309E24B_g;
    int auto2309E24B_var;
    playergroup auto5FD832E5_g;
    int auto5FD832E5_var;
    playergroup autoA8CDF262_g;
    int autoA8CDF262_var;
    playergroup auto55F9F496_g;
    int auto55F9F496_var;

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 1, 0) == 1))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(200.0, c_timeAI);
    auto3C898798_g = gv_fORCEBADGUYS;
    auto3C898798_var = -1;
    while (true) {
        auto3C898798_var = PlayerGroupNextPlayer(auto3C898798_g, auto3C898798_var);
        if (auto3C898798_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto3C898798_var, "ProtossAirArmorsLevel1", 1);
    }
    Wait(200.0, c_timeAI);
    autoA9904CDF_g = gv_fORCEBADGUYS;
    autoA9904CDF_var = -1;
    while (true) {
        autoA9904CDF_var = PlayerGroupNextPlayer(autoA9904CDF_g, autoA9904CDF_var);
        if (autoA9904CDF_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoA9904CDF_var, "ProtossGroundArmorsLevel1", 1);
    }
    Wait(200.0, c_timeAI);
    autoD1C2EFF5_g = gv_fORCEBADGUYS;
    autoD1C2EFF5_var = -1;
    while (true) {
        autoD1C2EFF5_var = PlayerGroupNextPlayer(autoD1C2EFF5_g, autoD1C2EFF5_var);
        if (autoD1C2EFF5_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoD1C2EFF5_var, "ProtossShieldsLevel1", 1);
    }
    Wait(200.0, c_timeAI);
    auto7FFC8092_g = gv_fORCEBADGUYS;
    auto7FFC8092_var = -1;
    while (true) {
        auto7FFC8092_var = PlayerGroupNextPlayer(auto7FFC8092_g, auto7FFC8092_var);
        if (auto7FFC8092_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto7FFC8092_var, "ProtossAirWeaponsLevel2", 1);
    }
    Wait(200.0, c_timeAI);
    auto16949520_g = gv_fORCEBADGUYS;
    auto16949520_var = -1;
    while (true) {
        auto16949520_var = PlayerGroupNextPlayer(auto16949520_g, auto16949520_var);
        if (auto16949520_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto16949520_var, "ProtossGroundArmorsLevel2", 1);
    }
    Wait(200.0, c_timeAI);
    auto50915219_g = gv_fORCEBADGUYS;
    auto50915219_var = -1;
    while (true) {
        auto50915219_var = PlayerGroupNextPlayer(auto50915219_g, auto50915219_var);
        if (auto50915219_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto50915219_var, "ProtossShieldsLevel2", 1);
    }
    Wait(200.0, c_timeAI);
    autoC70F93C2_g = gv_fORCEBADGUYS;
    autoC70F93C2_var = -1;
    while (true) {
        autoC70F93C2_var = PlayerGroupNextPlayer(autoC70F93C2_g, autoC70F93C2_var);
        if (autoC70F93C2_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoC70F93C2_var, "ProtossGroundWeaponsLevel2", 1);
    }
    Wait(200.0, c_timeAI);
    auto59AB1A11_g = gv_fORCEBADGUYS;
    auto59AB1A11_var = -1;
    while (true) {
        auto59AB1A11_var = PlayerGroupNextPlayer(auto59AB1A11_g, auto59AB1A11_var);
        if (auto59AB1A11_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto59AB1A11_var, "ProtossAirArmorsLevel2", 1);
    }
    Wait(200.0, c_timeAI);
    auto2309E24B_g = gv_fORCEBADGUYS;
    auto2309E24B_var = -1;
    while (true) {
        auto2309E24B_var = PlayerGroupNextPlayer(auto2309E24B_g, auto2309E24B_var);
        if (auto2309E24B_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto2309E24B_var, "Charge", 1);
    }
    Wait(200.0, c_timeAI);
    auto5FD832E5_g = gv_fORCEBADGUYS;
    auto5FD832E5_var = -1;
    while (true) {
        auto5FD832E5_var = PlayerGroupNextPlayer(auto5FD832E5_g, auto5FD832E5_var);
        if (auto5FD832E5_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto5FD832E5_var, "CarrierLaunchSpeedUpgrade", 1);
    }
    Wait(200.0, c_timeAI);
    autoA8CDF262_g = gv_fORCEBADGUYS;
    autoA8CDF262_var = -1;
    while (true) {
        autoA8CDF262_var = PlayerGroupNextPlayer(autoA8CDF262_g, autoA8CDF262_var);
        if (autoA8CDF262_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoA8CDF262_var, "ExtendedThermalLance", 1);
        TechTreeUpgradeAddLevel(autoA8CDF262_var, "VoidRaySpeedUpgrade", 1);
    }
    Wait(200.0, c_timeAI);
    auto55F9F496_g = gv_fORCEBADGUYS;
    auto55F9F496_var = -1;
    while (true) {
        auto55F9F496_var = PlayerGroupNextPlayer(auto55F9F496_g, auto55F9F496_var);
        if (auto55F9F496_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto55F9F496_var, "GraviticThrusters", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAIUpgradesH_Init () {
    gt_StartAIUpgradesH = TriggerCreate("gt_StartAIUpgradesH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI Upgrades I
//--------------------------------------------------------------------------------------------------
bool gt_StartAIUpgradesI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoA959774B_g;
    int autoA959774B_var;
    playergroup auto9B2D00E1_g;
    int auto9B2D00E1_var;
    playergroup autoEA223605_g;
    int autoEA223605_var;
    playergroup auto34E7AE59_g;
    int auto34E7AE59_var;
    playergroup auto50C1E0C9_g;
    int auto50C1E0C9_var;
    playergroup auto6DF3A237_g;
    int auto6DF3A237_var;
    playergroup auto511BE9DF_g;
    int auto511BE9DF_var;
    playergroup autoFD18DCE9_g;
    int autoFD18DCE9_var;
    playergroup autoBBDD5043_g;
    int autoBBDD5043_var;
    playergroup auto9FEBE277_g;
    int auto9FEBE277_var;
    playergroup auto28760415_g;
    int auto28760415_var;
    playergroup autoEA07C5F4_g;
    int autoEA07C5F4_var;

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(200.0, c_timeAI);
    autoA959774B_g = gv_fORCEBADGUYS;
    autoA959774B_var = -1;
    while (true) {
        autoA959774B_var = PlayerGroupNextPlayer(autoA959774B_g, autoA959774B_var);
        if (autoA959774B_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoA959774B_var, "ProtossShieldsLevel1", 1);
    }
    Wait(200.0, c_timeAI);
    auto9B2D00E1_g = gv_fORCEBADGUYS;
    auto9B2D00E1_var = -1;
    while (true) {
        auto9B2D00E1_var = PlayerGroupNextPlayer(auto9B2D00E1_g, auto9B2D00E1_var);
        if (auto9B2D00E1_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto9B2D00E1_var, "GraviticThrusters", 1);
    }
    Wait(200.0, c_timeAI);
    autoEA223605_g = gv_fORCEBADGUYS;
    autoEA223605_var = -1;
    while (true) {
        autoEA223605_var = PlayerGroupNextPlayer(autoEA223605_g, autoEA223605_var);
        if (autoEA223605_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoEA223605_var, "Charge", 1);
    }
    Wait(200.0, c_timeAI);
    auto34E7AE59_g = gv_fORCEBADGUYS;
    auto34E7AE59_var = -1;
    while (true) {
        auto34E7AE59_var = PlayerGroupNextPlayer(auto34E7AE59_g, auto34E7AE59_var);
        if (auto34E7AE59_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto34E7AE59_var, "ProtossAirWeaponsLevel2", 1);
    }
    Wait(200.0, c_timeAI);
    auto50C1E0C9_g = gv_fORCEBADGUYS;
    auto50C1E0C9_var = -1;
    while (true) {
        auto50C1E0C9_var = PlayerGroupNextPlayer(auto50C1E0C9_g, auto50C1E0C9_var);
        if (auto50C1E0C9_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto50C1E0C9_var, "ProtossGroundArmorsLevel2", 1);
    }
    Wait(200.0, c_timeAI);
    auto6DF3A237_g = gv_fORCEBADGUYS;
    auto6DF3A237_var = -1;
    while (true) {
        auto6DF3A237_var = PlayerGroupNextPlayer(auto6DF3A237_g, auto6DF3A237_var);
        if (auto6DF3A237_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto6DF3A237_var, "VoidRaySpeedUpgrade", 1);
        TechTreeUpgradeAddLevel(auto6DF3A237_var, "ProtossGroundWeaponsLevel2", 1);
    }
    Wait(200.0, c_timeAI);
    auto511BE9DF_g = gv_fORCEBADGUYS;
    auto511BE9DF_var = -1;
    while (true) {
        auto511BE9DF_var = PlayerGroupNextPlayer(auto511BE9DF_g, auto511BE9DF_var);
        if (auto511BE9DF_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto511BE9DF_var, "ProtossAirArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(auto511BE9DF_var, "ExtendedThermalLance", 1);
    }
    Wait(200.0, c_timeAI);
    autoFD18DCE9_g = gv_fORCEBADGUYS;
    autoFD18DCE9_var = -1;
    while (true) {
        autoFD18DCE9_var = PlayerGroupNextPlayer(autoFD18DCE9_g, autoFD18DCE9_var);
        if (autoFD18DCE9_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoFD18DCE9_var, "ProtossShieldsLevel2", 1);
        TechTreeUpgradeAddLevel(autoFD18DCE9_var, "ProtossAirArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(autoFD18DCE9_var, "CarrierLaunchSpeedUpgrade", 1);
    }
    Wait(200.0, c_timeAI);
    autoBBDD5043_g = gv_fORCEBADGUYS;
    autoBBDD5043_var = -1;
    while (true) {
        autoBBDD5043_var = PlayerGroupNextPlayer(autoBBDD5043_g, autoBBDD5043_var);
        if (autoBBDD5043_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoBBDD5043_var, "ProtossAirWeaponsLevel3", 1);
    }
    Wait(200.0, c_timeAI);
    auto9FEBE277_g = gv_fORCEBADGUYS;
    auto9FEBE277_var = -1;
    while (true) {
        auto9FEBE277_var = PlayerGroupNextPlayer(auto9FEBE277_g, auto9FEBE277_var);
        if (auto9FEBE277_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto9FEBE277_var, "ProtossGroundWeaponsLevel3", 1);
    }
    Wait(200.0, c_timeAI);
    auto28760415_g = gv_fORCEBADGUYS;
    auto28760415_var = -1;
    while (true) {
        auto28760415_var = PlayerGroupNextPlayer(auto28760415_g, auto28760415_var);
        if (auto28760415_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto28760415_var, "ProtossShieldsLevel3", 1);
    }
    Wait(200.0, c_timeAI);
    autoEA07C5F4_g = gv_fORCEBADGUYS;
    autoEA07C5F4_var = -1;
    while (true) {
        autoEA07C5F4_var = PlayerGroupNextPlayer(autoEA07C5F4_g, autoEA07C5F4_var);
        if (autoEA07C5F4_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoEA07C5F4_var, "ProtossGroundArmorsLevel3", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAIUpgradesI_Init () {
    gt_StartAIUpgradesI = TriggerCreate("gt_StartAIUpgradesI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P04 Attack Waves - Middle
//--------------------------------------------------------------------------------------------------
bool gt_P04AttackWavesMiddle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_thisAI;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_thisAI = gv_pLAYER_04_DarkTOSS;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((TriggerGetExecCount(gt_P03AttackWavesLeft) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPlayer(lv_thisAI, PlayerGroupSingle(gv_pLAYER_01_USER));
    Wait(60.0, c_timeAI);
    AIAttackWaveAddUnits4(2, 2, 3, 4, "Zealot");
    AIAttackWaveAddUnits4(1, 1, 2, 2, "Stalker");
    AIAttackWaveAddWaypoint(lv_thisAI, PointFromId(364), false);
    AIAttackWaveSend(lv_thisAI, 180, true);
    AIAttackWaveAddUnits4(3, 3, 5, 5, "Zealot");
    AIAttackWaveAddUnits4(1, 1, 2, 1, "Archon");
    AIAttackWaveAddUnits4(0, 0, 0, 1, "Carrier");
    AIAttackWaveAddWaypoint(lv_thisAI, PointFromId(232), false);
    AIAttackWaveSend(lv_thisAI, 180, true);
    while (true) {
        Wait(30.0, c_timeAI);
        AIAttackWaveAddUnits4(0, 0, 2, 0, "Scout");
        AIAttackWaveAddUnits4(0, 0, 0, 2, "VoidRay");
        AIAttackWaveAddWaypoint(lv_thisAI, PointFromId(350), false);
        AIAttackWaveSend(lv_thisAI, 180, false);
        AIAttackWaveAddUnits4(2, 2, 3, 4, "Zealot");
        AIAttackWaveAddUnits4(2, 2, 2, 4, "Stalker");
        AIAttackWaveAddUnits4(2, 2, 0, 0, "Phoenix");
        AIAttackWaveAddWaypoint(lv_thisAI, PointFromId(364), false);
        AIAttackWaveSend(lv_thisAI, 180, true);
        AIAttackWaveAddUnits4(2, 2, 3, 4, "Zealot");
        AIAttackWaveAddUnits4(2, 2, 3, 4, "Archon");
        AIAttackWaveAddWaypoint(lv_thisAI, PointFromId(232), false);
        AIAttackWaveSend(lv_thisAI, 180, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P04AttackWavesMiddle_Init () {
    gt_P04AttackWavesMiddle = TriggerCreate("gt_P04AttackWavesMiddle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P03 Attack Waves - Left
//--------------------------------------------------------------------------------------------------
bool gt_P03AttackWavesLeft_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_thisAI;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_thisAI = gv_pLAYER_03_HighTOSS;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_StartAI, true, false);
    TriggerStop(gt_P04AttackWavesMiddle);
    AIAttackWaveSetTargetPlayer(lv_thisAI, PlayerGroupSingle(gv_pLAYER_01_USER));
    Wait(90.0, c_timeAI);
    AIAttackWaveAddUnits4(1, 1, 2, 2, "Scout");
    AIAttackWaveAddUnits4(0, 0, 0, 1, "VoidRay");
    AIAttackWaveAddUnits4(1, 1, 2, 2, "Carrier");
    AIAttackWaveAddUnits4(0, 0, 0, 1, "Observer");
    gf_P03AttackWaveWaypointsRoute(lv_thisAI, true);
    AIAttackWaveSend(lv_thisAI, 120, true);
    Wait(120.0, c_timeAI);
    AIAttackWaveAddUnits4(4, 4, 4, 0, "Zealot");
    AIAttackWaveAddUnits4(0, 0, 2, 3, "Stalker");
    AIAttackWaveAddUnits4(0, 0, 2, 5, "Sentry");
    AIAttackWaveAddUnits4(1, 1, 1, 2, "Colossus");
    gf_P03AttackWaveWaypointsRoute(lv_thisAI, false);
    AIAttackWaveSend(lv_thisAI, 120, false);
    Wait(60.0, c_timeAI);
    AIAttackWaveAddUnits4(2, 2, 3, 4, "VoidRay");
    AIAttackWaveAddUnits4(0, 0, 1, 1, "Observer");
    gf_P03AttackWaveWaypointsRoute(lv_thisAI, true);
    AIAttackWaveSend(lv_thisAI, 120, true);
    Wait(120.0, c_timeAI);
    AIAttackWaveAddUnits4(2, 2, 3, 2, "Immortal");
    AIAttackWaveAddUnits4(0, 0, 0, 2, "Sentry");
    gf_P03AttackWaveWaypointsRoute(lv_thisAI, false);
    AIAttackWaveSend(lv_thisAI, 120, false);
    AIAttackWaveAddUnits4(1, 1, 2, 2, "Carrier");
    AIAttackWaveAddUnits4(0, 0, 2, 3, "Phoenix");
    gf_P03AttackWaveWaypointsRoute(lv_thisAI, true);
    AIAttackWaveSend(lv_thisAI, 120, true);
    Wait(60.0, c_timeAI);
    AIAttackWaveAddUnits4(1, 1, 2, 3, "Scout");
    AIAttackWaveAddUnits4(2, 2, 3, 3, "Colossus");
    AIAttackWaveAddUnits4(0, 0, 0, 1, "Observer");
    gf_P03AttackWaveWaypointsRoute(lv_thisAI, false);
    AIAttackWaveSend(lv_thisAI, 120, true);
    Wait(90.0, c_timeAI);
    AIAttackWaveAddUnits4(2, 2, 3, 3, "Zealot");
    AIAttackWaveAddUnits4(2, 2, 2, 2, "Stalker");
    AIAttackWaveAddUnits4(0, 0, 2, 3, "Sentry");
    AIAttackWaveAddUnits4(0, 0, 0, 1, "HighTemplar");
    AIAttackWaveAddUnits4(0, 0, 1, 1, "Observer");
    gf_P03AttackWaveWaypointsRoute(lv_thisAI, false);
    AIAttackWaveSend(lv_thisAI, 120, false);
    AIAttackWaveAddUnits4(1, 1, 2, 2, "Carrier");
    gf_P03AttackWaveWaypointsRoute(lv_thisAI, true);
    AIAttackWaveSend(lv_thisAI, 120, true);
    while (true) {
        Wait(90.0, c_timeAI);
        AIAttackWaveAddUnits4(1, 1, 2, 2, "Scout");
        AIAttackWaveAddUnits4(2, 2, 3, 4, "Carrier");
        AIAttackWaveAddUnits4(0, 1, 1, 1, "Observer");
        gf_P03AttackWaveWaypointsRoute(lv_thisAI, true);
        AIAttackWaveSend(lv_thisAI, 120, true);
        Wait(90.0, c_timeAI);
        AIAttackWaveAddUnits4(2, 2, 3, 3, "Immortal");
        AIAttackWaveAddUnits4(2, 2, 3, 3, "Colossus");
        AIAttackWaveAddUnits4(0, 0, 0, 3, "Sentry");
        AIAttackWaveAddUnits4(0, 0, 1, 2, "Stalker");
        gf_P03AttackWaveWaypointsRoute(lv_thisAI, false);
        AIAttackWaveSend(lv_thisAI, 120, true);
        Wait(60.0, c_timeAI);
        AIAttackWaveAddUnits4(2, 2, 3, 5, "Zealot");
        AIAttackWaveAddUnits4(0, 0, 2, 3, "Sentry");
        AIAttackWaveAddUnits4(0, 0, 1, 1, "HighTemplar");
        gf_P03AttackWaveWaypointsRoute(lv_thisAI, false);
        AIAttackWaveSend(lv_thisAI, 120, false);
        AIAttackWaveAddUnits4(2, 2, 3, 3, "VoidRay");
        AIAttackWaveAddUnits4(1, 1, 1, 1, "Observer");
        gf_P03AttackWaveWaypointsRoute(lv_thisAI, true);
        AIAttackWaveSend(lv_thisAI, 120, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P03AttackWavesLeft_Init () {
    gt_P03AttackWavesLeft = TriggerCreate("gt_P03AttackWavesLeft_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start P03 Waves - P02 Dead
//--------------------------------------------------------------------------------------------------
bool gt_StartP03WavesP02Dead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_ScriptedTOSS, RegionFromId(25), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_P03AttackWavesLeft, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartP03WavesP02Dead_Init () {
    gt_StartP03WavesP02Dead = TriggerCreate("gt_StartP03WavesP02Dead_Func");
    TriggerAddEventTimePeriodic(gt_StartP03WavesP02Dead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start P03 Waves - Safety Tripwire
//--------------------------------------------------------------------------------------------------
bool gt_StartP03WavesSafetyTripwire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_P03AttackWavesLeft, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartP03WavesSafetyTripwire_Init () {
    gt_StartP03WavesSafetyTripwire = TriggerCreate("gt_StartP03WavesSafetyTripwire_Func");
    TriggerAddEventUnitRegion(gt_StartP03WavesSafetyTripwire, null, RegionFromId(7), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveMinerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveMinerals_Init () {
    gt_AIGiveMinerals = TriggerCreate("gt_AIGiveMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_03_HighTOSS, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_04_DarkTOSS, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveGas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveGas_Init () {
    gt_AIGiveGas = TriggerCreate("gt_AIGiveGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_03_HighTOSS, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_04_DarkTOSS, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Clear LZ Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveClearLZCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/80FDEA62"), StringExternal("Param/Value/F1616B29"), c_objectiveStateActive, true);
    gv_objectiveClearLZ = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TTychus05Objective1, ObjectiveLastCreated(), StringExternal("Param/Value/92D46B9F"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    PingCreate(gv_fORCEGOOD_GUYS, "PingObjective", UnitGetPosition(UnitFromId(37)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/E2824F0B"), null, UnitFromId(37));
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/C573F9BB"));
    gv_pINGClearLZ = PingLastCreated();
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveClearLZCreateQ_Init () {
    gt_ObjectiveClearLZCreateQ = TriggerCreate("gt_ObjectiveClearLZCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Clear LZ Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveClearLZComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(gv_gROUPLZEnemies, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_pINGClearLZ);
    TriggerEnable(gt_DefeatLZUnitsDead, false);
    TriggerExecute(gt_ObjectiveClearLZCreateQ, true, false);
    ObjectiveSetState(gv_objectiveClearLZ, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_BaseMidQ, true, true);
    TriggerExecute(gt_StartGameStage2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveClearLZComplete_Init () {
    gt_ObjectiveClearLZComplete = TriggerCreate("gt_ObjectiveClearLZComplete_Func");
    TriggerAddEventUnitDied(gt_ObjectiveClearLZComplete, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Clear LZ Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveClearLZFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveClearLZCreateQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveClearLZFailed_Init () {
    gt_ObjectiveClearLZFailed = TriggerCreate("gt_ObjectiveClearLZFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Artifact Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveArtifactCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/21481D55"), StringExternal("Param/Value/F7199170"), c_objectiveStateActive, true);
    gv_objectiveRetrieveArtifact = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TTychus05Objective2, ObjectiveLastCreated(), StringExternal("Param/Value/1345D7BB"));
    PingCreate(gv_fORCEGOOD_GUYS, "PingObjective", UnitGetPosition(gv_uNITVault), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/B86C6224"));
    libNtve_gf_AttachModelToUnit(gv_uNITVault, "BriefingUnitSelectLargeRed", "Ref_Center");
    gv_vaultReticule = libNtve_gf_ActorLastCreated();
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveArtifactCreateQ_Init () {
    gt_ObjectiveArtifactCreateQ = TriggerCreate("gt_ObjectiveArtifactCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Artifact Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveArtifactComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveArtifactCreateQ, true, false);
    ObjectiveSetState(gv_objectiveRetrieveArtifact, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveArtifactComplete_Init () {
    gt_ObjectiveArtifactComplete = TriggerCreate("gt_ObjectiveArtifactComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Artifact Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveArtifactFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveArtifactCreateQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveArtifactFailed_Init () {
    gt_ObjectiveArtifactFailed = TriggerCreate("gt_ObjectiveArtifactFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Prisoners Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePrisonersCreateQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iNT;

    // Automatic Variable Declarations
    const int auto100BE4B3_ae = 4;
    const int auto100BE4B3_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate((StringExternal("Param/Value/5A16E74C") + IntToText(gv_iNTProtossRescued) + StringExternal("Param/Value/294EF17E")), StringExternal("Param/Value/3DBB5373"), c_objectiveStateActive, false);
    gv_objectiveRescuePrisoners = ObjectiveLastCreated();
    lv_iNT = 2;
    for ( ; ( (auto100BE4B3_ai >= 0 && lv_iNT <= auto100BE4B3_ae) || (auto100BE4B3_ai < 0 && lv_iNT >= auto100BE4B3_ae) ) ; lv_iNT += auto100BE4B3_ai ) {
        if ((gv_aCTORPrisonReticule[lv_iNT] == null) && (UnitIsAlive(gv_uNITPrison[lv_iNT]) == true)) {
            libNtve_gf_CreatePingFacingAngle(gv_fORCEGOOD_GUYS, "PingObjective", UnitGetPosition(gv_uNITPrison[lv_iNT]), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
            PingSetScale(PingLastCreated(), 0.75);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/99F2B24E"));
            gv_pINGPrison[lv_iNT] = PingLastCreated();
            VisRevealArea(1, RegionCircle(UnitGetPosition(gv_uNITPrison[lv_iNT]), 3.0), 4.0, false);
            libNtve_gf_AttachModelToUnit(gv_uNITPrison[lv_iNT], "BriefingUnitSelectLargeRed", "Ref_Origin");
            gv_aCTORPrisonReticule[lv_iNT] = libNtve_gf_ActorLastCreated();
            Wait(0.5, c_timeGame);
        }

    }
    UIAlertUnit("Trigger", 1, StringToText(""), null, gv_uNITPrison[1]);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePrisonersCreateQ_Init () {
    gt_ObjectivePrisonersCreateQ = TriggerCreate("gt_ObjectivePrisonersCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Prisoners Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePrisonersUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_iNTProtossRescued == 4)) {
        ObjectiveSetName(gv_objectiveRescuePrisoners, (StringExternal("Param/Value/91ECA2BB") + IntToText(gv_iNTProtossRescued) + StringExternal("Param/Value/0CA88BB7")));
        libCamp_gf_AddProgressToStoryResearch(libCamp_ge_StoryResearchObject_ResearchObjectRescuePrisoners, 1);
        TriggerExecute(gt_ObjectivePrisonersComplete, true, false);
    }
    else {
        ObjectiveSetName(gv_objectiveRescuePrisoners, (StringExternal("Param/Value/A760AABE") + IntToText(gv_iNTProtossRescued) + StringExternal("Param/Value/CBB57BC3")));
        libCamp_gf_AddProgressToStoryResearch(libCamp_ge_StoryResearchObject_ResearchObjectRescuePrisoners, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePrisonersUpdate_Init () {
    gt_ObjectivePrisonersUpdate = TriggerCreate("gt_ObjectivePrisonersUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Prisoners Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePrisonersComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectivePrisonersCreateQ, true, false);
    ObjectiveSetState(gv_objectiveRescuePrisoners, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePrisonersComplete_Init () {
    gt_ObjectivePrisonersComplete = TriggerCreate("gt_ObjectivePrisonersComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_StartGameStage1);
    TriggerStop(gt_StartAI);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    gv_inCinematic = true;
    gv_gameOver = true;
    UnitPauseAll(true);
    AITimePause(true);
    GameTimeOfDayPause(true);
    CameraSetBounds(gv_fORCEGOOD_GUYS, gv_mapAreaNormal, true);
    RegionPlayableMapSet(gv_mapAreaNormal);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_BriefingScene00, true, true);
    TriggerExecute(gt_BriefingScene01, true, true);
    TriggerExecute(gt_BriefingScene02, true, true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UnitPauseAll(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1719A881_g;
    int auto1719A881_u;
    unit auto1719A881_var;
    unitgroup autoC4315E27_g;
    int autoC4315E27_u;
    unit autoC4315E27_var;
    unitgroup autoC698C0E8_g;
    int autoC698C0E8_u;
    unit autoC698C0E8_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto1719A881_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto1719A881_u = UnitGroupCount(auto1719A881_g, c_unitCountAll);
    for (;; auto1719A881_u -= 1) {
        auto1719A881_var = UnitGroupUnitFromEnd(auto1719A881_g, auto1719A881_u);
        if (auto1719A881_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(auto1719A881_var, RegionFromId(2)) != true)) {
            libNtve_gf_ShowHideUnit(auto1719A881_var, true);
            libNtve_gf_PauseUnit(auto1719A881_var, false);
        }

    }
    autoC4315E27_g = UnitGroup("RipFieldGenerator", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoC4315E27_u = UnitGroupCount(autoC4315E27_g, c_unitCountAll);
    for (;; autoC4315E27_u -= 1) {
        autoC4315E27_var = UnitGroupUnitFromEnd(autoC4315E27_g, autoC4315E27_u);
        if (autoC4315E27_var == null) { break; }
        UnitBehaviorRemove(autoC4315E27_var, "TTychus05ObjectiveShield", 1);
    }
    autoC698C0E8_g = UnitGroup("RipFieldGeneratorSmall", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoC698C0E8_u = UnitGroupCount(autoC698C0E8_g, c_unitCountAll);
    for (;; autoC698C0E8_u -= 1) {
        autoC698C0E8_var = UnitGroupUnitFromEnd(autoC698C0E8_g, autoC698C0E8_u);
        if (autoC698C0E8_var == null) { break; }
        UnitBehaviorRemove(autoC698C0E8_var, "TTychus05ObjectiveSmallShield", 1);
    }
    UnitRemove(UnitGroupUnit(UnitGroup("RipFieldGenerator", gv_pLAYER_05_WORLDSHIP, RegionCircle(PointFromId(169), 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1));
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(8), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    MovieStartRecording("Briefing_Video_TTychus05_00");
    TriggerExecute(gt_BriefingScene00CamerasMovementandPings, true, false);
    // Transmission - SoundLink("TTychus05BriefingValerian00004", -1)
    SoundPlay(SoundLink("TTychus05BriefingValerian00004", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTychus05BriefingValerian00004", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus05BriefingValerian00004", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00_Init () {
    gt_BriefingScene00 = TriggerCreate("gt_BriefingScene00_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00 Cameras Movement and Pings
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00CamerasMovementandPings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeReal);
    libNtve_gf_AttachModelToUnit(gv_uNITVault, "BriefingUnitSelectLargeRed", "Ref_Overhead");
    Wait(3.0, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(12), 0.0, -1, 10, true);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    libNtve_gf_AttachModelToUnit(UnitFromId(20), "BriefingUnitSelectLargeRed", "Ref_Center");
    Wait(10.0, c_timeReal);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00CamerasMovementandPings_Init () {
    gt_BriefingScene00CamerasMovementandPings = TriggerCreate("gt_BriefingScene00CamerasMovementandPings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0933AB20_g;
    int auto0933AB20_u;
    unit auto0933AB20_var;
    unitgroup auto8C6A23F7_g;
    int auto8C6A23F7_u;
    unit auto8C6A23F7_var;
    unitgroup auto0A7DAF82_g;
    int auto0A7DAF82_u;
    unit auto0A7DAF82_var;
    unitgroup autoBFDC0A5A_g;
    int autoBFDC0A5A_u;
    unit autoBFDC0A5A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "RipFieldGenerator", c_unitCreateIgnorePlacement, gv_pLAYER_05_WORLDSHIP, PointFromId(169), 270.0);
    auto0933AB20_g = UnitGroup("RipFieldGenerator", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto0933AB20_u = UnitGroupCount(auto0933AB20_g, c_unitCountAll);
    for (;; auto0933AB20_u -= 1) {
        auto0933AB20_var = UnitGroupUnitFromEnd(auto0933AB20_g, auto0933AB20_u);
        if (auto0933AB20_var == null) { break; }
        UnitBehaviorRemove(auto0933AB20_var, "TTychus05ObjectiveShield", 1);
    }
    auto8C6A23F7_g = UnitGroup("RipFieldGeneratorSmall", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto8C6A23F7_u = UnitGroupCount(auto8C6A23F7_g, c_unitCountAll);
    for (;; auto8C6A23F7_u -= 1) {
        auto8C6A23F7_var = UnitGroupUnitFromEnd(auto8C6A23F7_g, auto8C6A23F7_u);
        if (auto8C6A23F7_var == null) { break; }
        UnitBehaviorRemove(auto8C6A23F7_var, "TTychus05ObjectiveSmallShield", 1);
    }
    UnitRemove(UnitGroupUnit(UnitGroup("RipFieldGenerator", gv_pLAYER_05_WORLDSHIP, RegionCircle(PointFromId(169), 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1));
    auto0A7DAF82_g = UnitGroup(null, gv_pLAYER_02_ScriptedTOSS, RegionCircle(PointFromId(324), 24.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0A7DAF82_u = UnitGroupCount(auto0A7DAF82_g, c_unitCountAll);
    for (;; auto0A7DAF82_u -= 1) {
        auto0A7DAF82_var = UnitGroupUnitFromEnd(auto0A7DAF82_g, auto0A7DAF82_u);
        if (auto0A7DAF82_var == null) { break; }
        UnitRemove(auto0A7DAF82_var);
    }
    autoBFDC0A5A_g = UnitGroup(null, gv_pLAYER_04_DarkTOSS, RegionCircle(PointFromId(324), 24.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBFDC0A5A_u = UnitGroupCount(autoBFDC0A5A_g, c_unitCountAll);
    for (;; autoBFDC0A5A_u -= 1) {
        autoBFDC0A5A_var = UnitGroupUnitFromEnd(autoBFDC0A5A_g, autoBFDC0A5A_u);
        if (autoBFDC0A5A_var == null) { break; }
        UnitRemove(autoBFDC0A5A_var);
    }
    libNtve_gf_UnitCreateFacingPoint(1, "Battlecruiser", 0, gv_pLAYER_01_USER, PointFromId(139), UnitGetPosition(UnitFromId(137)));
    libNtve_gf_UnitCreateFacingPoint(1, "Battlecruiser", 0, gv_pLAYER_01_USER, PointFromId(179), UnitGetPosition(UnitFromId(137)));
    libNtve_gf_UnitCreateFacingPoint(1, "Battlecruiser", 0, gv_pLAYER_01_USER, PointFromId(183), UnitGetPosition(UnitFromId(137)));
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(86), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(198), (SoundLengthSync(SoundLink("TTychus05BriefingValerian00013", -1)) - 1.0), -1, 10, true);
    MovieStartRecording("Briefing_Video_TTychus05_01");
    TriggerExecute(gt_BriefingScene01Yamato, true, false);
    // Transmission - SoundLink("TTychus05BriefingValerian00013", -1)
    SoundPlay(SoundLink("TTychus05BriefingValerian00013", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTychus05BriefingValerian00013", -1))), c_timeReal);
    // Transmission - SoundLink("TTychus05BriefingRaynor00002", -1)
    SoundPlay(SoundLink("TTychus05BriefingRaynor00002", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * (SoundLengthSync(SoundLink("TTychus05BriefingRaynor00002", -1)) - 6.0)), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus05BriefingValerian00013", -1))), c_timeReal);
    Wait((0.5 * (SoundLengthSync(SoundLink("TTychus05BriefingRaynor00002", -1)) - 6.0)), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01_Init () {
    gt_BriefingScene01 = TriggerCreate("gt_BriefingScene01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01 Yamato
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01Yamato_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0B7696AF_g;
    int auto0B7696AF_u;
    unit auto0B7696AF_var;
    unitgroup auto5F8B7757_g;
    int auto5F8B7757_u;
    unit auto5F8B7757_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(UnitFromId(137), c_unitPropLife, 400.0);
    UnitSetPropertyFixed(UnitFromId(137), c_unitPropShields, 400.0);
    auto0B7696AF_g = UnitGroup("Battlecruiser", gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(137)), 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0B7696AF_u = UnitGroupCount(auto0B7696AF_g, c_unitCountAll);
    for (;; auto0B7696AF_u -= 1) {
        auto0B7696AF_var = UnitGroupUnitFromEnd(auto0B7696AF_g, auto0B7696AF_u);
        if (auto0B7696AF_var == null) { break; }
        UnitSetPropertyFixed(auto0B7696AF_var, c_unitPropEnergyPercent, 100.0);
    }
    UnitIssueOrder(UnitGroupUnit(UnitGroup("Battlecruiser", gv_pLAYER_01_USER, RegionCircle(PointFromId(139), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), OrderTargetingUnit(AbilityCommand("Yamato", 0), UnitFromId(137)), c_orderQueueReplace);
    Wait(0.5, c_timeReal);
    UnitIssueOrder(UnitGroupUnit(UnitGroup("Battlecruiser", gv_pLAYER_01_USER, RegionCircle(PointFromId(179), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), OrderTargetingUnit(AbilityCommand("Yamato", 0), UnitFromId(137)), c_orderQueueReplace);
    Wait(0.5, c_timeReal);
    UnitIssueOrder(UnitGroupUnit(UnitGroup("Battlecruiser", gv_pLAYER_01_USER, RegionCircle(PointFromId(183), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), OrderTargetingUnit(AbilityCommand("Yamato", 0), UnitFromId(137)), c_orderQueueReplace);
    auto5F8B7757_g = UnitGroup("Battlecruiser", gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(137)), 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5F8B7757_u = UnitGroupCount(auto5F8B7757_g, c_unitCountAll);
    for (;; auto5F8B7757_u -= 1) {
        auto5F8B7757_var = UnitGroupUnitFromEnd(auto5F8B7757_g, auto5F8B7757_u);
        if (auto5F8B7757_var == null) { break; }
        UnitIssueOrder(auto5F8B7757_var, OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(137)), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01Yamato_Init () {
    gt_BriefingScene01Yamato = TriggerCreate("gt_BriefingScene01Yamato_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 02
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(327), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(328), 16.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_TTychus05_02");
    // Transmission - SoundLink("TTychus05BriefingValerian00006", -1)
    SoundPlay(SoundLink("TTychus05BriefingValerian00006", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTychus05BriefingValerian00006", -1))), c_timeReal);
    // Transmission - SoundLink("TTychus05BriefingTychus00007", -1)
    SoundPlay(SoundLink("TTychus05BriefingTychus00007", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTychus05BriefingTychus00007", -1))), c_timeReal);
    // Transmission - SoundLink("TTychus05BriefingRaynor00008", -1)
    SoundPlay(SoundLink("TTychus05BriefingRaynor00008", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTychus05BriefingRaynor00008", -1))), c_timeReal);
    // Transmission - SoundLink("TTychus05BriefingTychus00009", -1)
    SoundPlay(SoundLink("TTychus05BriefingTychus00009", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTychus05BriefingTychus00009", -1))), c_timeReal);
    // Transmission - SoundLink("TTychus05BriefingRaynor00012", -1)
    SoundPlay(SoundLink("TTychus05BriefingRaynor00012", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTychus05BriefingRaynor00012", -1))), c_timeReal);
    // Transmission - SoundLink("TTychus05BriefingTychus00010", -1)
    SoundPlay(SoundLink("TTychus05BriefingTychus00010", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTychus05BriefingTychus00010", -1))), c_timeReal);
    // Transmission - SoundLink("TTychus05BriefingRaynor00011", -1)
    SoundPlay(SoundLink("TTychus05BriefingRaynor00011", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTychus05BriefingRaynor00011", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus05BriefingValerian00006", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus05BriefingTychus00007", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus05BriefingRaynor00008", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus05BriefingTychus00009", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus05BriefingRaynor00012", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus05BriefingTychus00010", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus05BriefingRaynor00011", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene02_Init () {
    gt_BriefingScene02 = TriggerCreate("gt_BriefingScene02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0835F1BE_g;
    int auto0835F1BE_u;
    unit auto0835F1BE_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitPauseAll(true);
    gv_introHiddenProtossGroup = UnitGroup(null, gv_pLAYER_02_ScriptedTOSS, RegionFromId(2), UnitFilter(0, 0, 0, 0), 0);
    auto0835F1BE_g = gv_introHiddenProtossGroup;
    auto0835F1BE_u = UnitGroupCount(auto0835F1BE_g, c_unitCountAll);
    for (;; auto0835F1BE_u -= 1) {
        auto0835F1BE_var = UnitGroupUnitFromEnd(auto0835F1BE_g, auto0835F1BE_u);
        if (auto0835F1BE_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto0835F1BE_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(123), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(563), 12.0, -1, 10, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "Stalker", 0, gv_pLAYER_02_ScriptedTOSS, PointFromId(573));
    UnitGroupAdd(gv_introCineProtossGroup, UnitLastCreated());
    gv_introStalker01 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "Stalker", 0, gv_pLAYER_02_ScriptedTOSS, PointFromId(572));
    UnitGroupAdd(gv_introCineProtossGroup, UnitLastCreated());
    gv_introStalker02 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "Stalker", 0, gv_pLAYER_02_ScriptedTOSS, PointFromId(571));
    UnitGroupAdd(gv_introCineProtossGroup, UnitLastCreated());
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_introCinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_IntroScene, true, false);
    // Transmission - SoundLink("TTychus05Adjutant00011", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus05Adjutant00011", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTychus05Raynor00019", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus05Raynor00019", -1), c_transmissionDurationAdd, 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(130), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(161), 8.0, -1, 10, true);
    // Transmission - SoundLink("TTychus05Horner00006", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus05Horner00006", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTychus05Raynor00007", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus05Raynor00007", -1), c_transmissionDurationAdd, 0.0, true);
    gv_introCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_introCinematicCompleted == true)) {
        lv_fadeDuration = 0.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto97F3A6A2_g;
    int auto97F3A6A2_u;
    unit auto97F3A6A2_var;
    unitgroup auto97D1B544_g;
    int auto97D1B544_u;
    unit auto97D1B544_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitPauseAll(false);
    auto97F3A6A2_g = gv_introCineProtossGroup;
    auto97F3A6A2_u = UnitGroupCount(auto97F3A6A2_g, c_unitCountAll);
    for (;; auto97F3A6A2_u -= 1) {
        auto97F3A6A2_var = UnitGroupUnitFromEnd(auto97F3A6A2_g, auto97F3A6A2_u);
        if (auto97F3A6A2_var == null) { break; }
        UnitRemove(auto97F3A6A2_var);
    }
    auto97D1B544_g = gv_introHiddenProtossGroup;
    auto97D1B544_u = UnitGroupCount(auto97D1B544_g, c_unitCountAll);
    for (;; auto97D1B544_u -= 1) {
        auto97D1B544_var = UnitGroupUnitFromEnd(auto97D1B544_g, auto97D1B544_u);
        if (auto97D1B544_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto97D1B544_var, true);
    }
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(161), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    TriggerExecute(gt_StartAI, true, false);
    TriggerStop(gt_IntroScene);
    UnitSetPosition(gv_uNITCruiser01, PointFromId(280), false);
    UnitSetPosition(gv_uNITCruiser02, PointFromId(483), false);
    UnitSetPosition(gv_uNITCruiser03, PointFromId(335), false);
    UnitGroupSelect(gv_gROUPPlayersStartingUNITS, gv_pLAYER_01_USER, true);
    if ((gv_introCinematicCompleted == true)) {
        lv_fadeDuration = 0.0;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.0);
    libNtve_gf_GlobalCinematicSetting(false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    TriggerExecute(gt_StartGameStage1, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Scene
//--------------------------------------------------------------------------------------------------
bool gt_IntroScene_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.5, c_timeGame);
    UnitIssueOrder(gv_introStalker01, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(564)), c_orderQueueReplace);
    Wait(1.5, c_timeGame);
    UnitIssueOrder(gv_introStalker02, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(570)), c_orderQueueReplace);
    Wait(6.0, c_timeGame);
    libNtve_gf_PauseUnit(gv_uNITCruiser01, false);
    libNtve_gf_PauseUnit(gv_uNITCruiser02, false);
    libNtve_gf_PauseUnit(gv_uNITCruiser03, false);
    UnitIssueOrder(gv_uNITCruiser01, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(280)), c_orderQueueReplace);
    UnitIssueOrder(gv_uNITCruiser02, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(483)), c_orderQueueReplace);
    UnitIssueOrder(gv_uNITCruiser03, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(335)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroScene_Init () {
    gt_IntroScene = TriggerCreate("gt_IntroScene_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Base Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_BaseMidQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_BaseMidSetup, true, true);
    TriggerExecute(gt_BaseMidCinematic, true, true);
    TriggerExecute(gt_BaseMidCinematicEnd, true, true);
    TriggerExecute(gt_BaseMidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BaseMidQ_Init () {
    gt_BaseMidQ = TriggerCreate("gt_BaseMidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Base Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_BaseMidSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7D4154A3_g;
    int auto7D4154A3_u;
    unit auto7D4154A3_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSetValue(gv_pLAYER_01_USER, c_cameraValueShadowClip, 500.0, 0.0, -1, 10);
    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libNtve_gf_RemoveDeathModelsinRegion(RegionFromId(3));
    UnitPauseAll(true);
    auto7D4154A3_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7D4154A3_u = UnitGroupCount(auto7D4154A3_g, c_unitCountAll);
    for (;; auto7D4154A3_u -= 1) {
        auto7D4154A3_var = UnitGroupUnitFromEnd(auto7D4154A3_g, auto7D4154A3_u);
        if (auto7D4154A3_var == null) { break; }
        UnitGroupAdd(gv_baseMidHiddenUnitGroup, auto7D4154A3_var);
        libNtve_gf_ShowHideUnit(auto7D4154A3_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BaseMidSetup_Init () {
    gt_BaseMidSetup = TriggerCreate("gt_BaseMidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Base Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_BaseMidCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(143), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(144), 12.0, -1, 10, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "BarracksFlying", 0, gv_pLAYER_01_USER, PointFromId(205));
    UnitGroupAdd(gv_baseMidSpawnedUnitGroup, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("BarracksLand", 0), UnitGetPosition(UnitFromId(229))), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "CommandCenterFlying", 0, gv_pLAYER_01_USER, PointFromId(199));
    UnitGroupAdd(gv_baseMidSpawnedUnitGroup, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("CommandCenterLand", 0), UnitGetPosition(UnitFromId(228))), c_orderQueueReplace);
    UnitCargoCreate(UnitLastCreated(), "SCV", 5);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitCargoLastCreatedGroup(), gv_sCVs);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitCargoLastCreatedGroup(), gv_baseMidSpawnedUnitGroup);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("CommandCenterTransport", 1)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "FactoryFlying", 0, gv_pLAYER_01_USER, PointFromId(203));
    UnitGroupAdd(gv_baseMidSpawnedUnitGroup, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("FactoryLand", 0), UnitGetPosition(UnitFromId(299))), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "StarportFlying", 0, gv_pLAYER_01_USER, PointFromId(202));
    UnitGroupAdd(gv_baseMidSpawnedUnitGroup, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("StarportLand", 0), UnitGetPosition(UnitFromId(305))), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Battlecruiser", 0, gv_pLAYER_01_USER, PointFromId(77));
    UnitGroupAdd(gv_baseMidSpawnedUnitGroup, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(110)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "Battlecruiser", 0, gv_pLAYER_01_USER, PointFromId(76));
    UnitGroupAdd(gv_baseMidSpawnedUnitGroup, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(117)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "Battlecruiser", 0, gv_pLAYER_01_USER, PointFromId(333));
    UnitGroupAdd(gv_baseMidSpawnedUnitGroup, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(256)), c_orderQueueAddToEnd);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus05MusicIntroB", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gv_baseMidCinematicCompleted = false;
    CinematicFade(true, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    // Transmission - SoundLink("TTychus05Horner00035", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus05Horner00035", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTychus05Raynor00002", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus05Raynor00002", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTychus05Valerian00033", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus05Valerian00033", -1), c_transmissionDurationAdd, 0.0, true);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_baseMidCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BaseMidCinematic_Init () {
    gt_BaseMidCinematic = TriggerCreate("gt_BaseMidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Base Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_BaseMidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_baseMidCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BaseMidCinematicEnd_Init () {
    gt_BaseMidCinematicEnd = TriggerCreate("gt_BaseMidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Base Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_BaseMidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_vespeneGeyserPoint;
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto3A4E12C9_g;
    int auto3A4E12C9_u;
    unit auto3A4E12C9_var;
    unitgroup auto457FEC30_g;
    int auto457FEC30_u;
    unit auto457FEC30_var;
    unitgroup auto88C70C9C_g;
    int auto88C70C9C_u;
    unit auto88C70C9C_var;
    unitgroup auto6F437502_g;
    int auto6F437502_u;
    unit auto6F437502_var;
    unitgroup autoD57C938E_g;
    int autoD57C938E_u;
    unit autoD57C938E_var;
    unitgroup autoB843FD74_g;
    int autoB843FD74_u;
    unit autoB843FD74_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    RegionPlayableMapSet(gv_mapAreaNormal);
    auto3A4E12C9_g = gv_gROUPEmitters;
    auto3A4E12C9_u = UnitGroupCount(auto3A4E12C9_g, c_unitCountAll);
    for (;; auto3A4E12C9_u -= 1) {
        auto3A4E12C9_var = UnitGroupUnitFromEnd(auto3A4E12C9_g, auto3A4E12C9_u);
        if (auto3A4E12C9_var == null) { break; }
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(auto3A4E12C9_var), 3.0), 4.0, false);
    }
    auto457FEC30_g = gv_baseMidSpawnedUnitGroup;
    auto457FEC30_u = UnitGroupCount(auto457FEC30_g, c_unitCountAll);
    for (;; auto457FEC30_u -= 1) {
        auto457FEC30_var = UnitGroupUnitFromEnd(auto457FEC30_g, auto457FEC30_u);
        if (auto457FEC30_var == null) { break; }
        UnitRemove(auto457FEC30_var);
    }
    auto88C70C9C_g = UnitGroup(null, c_playerAny, RegionFromId(3), UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto88C70C9C_u = UnitGroupCount(auto88C70C9C_g, c_unitCountAll);
    for (;; auto88C70C9C_u -= 1) {
        auto88C70C9C_var = UnitGroupUnitFromEnd(auto88C70C9C_g, auto88C70C9C_u);
        if (auto88C70C9C_var == null) { break; }
        UnitRemove(auto88C70C9C_var);
    }
    lv_vespeneGeyserPoint = UnitGetPosition(UnitFromId(84));
    UnitRemove(UnitFromId(84));
    if ((libCamp_gf_StoryResearchStateCheck(libCamp_ge_StoryResearchID_ResearchP31AutomatedRefinery, libCamp_ge_StoryResearchState_ResearchStatePurchased) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "AutomatedRefinery", 0, gv_pLAYER_01_USER, lv_vespeneGeyserPoint);
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Refinery", 0, gv_pLAYER_01_USER, lv_vespeneGeyserPoint);
    }
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropResources, 1500.0);
    auto6F437502_g = gv_gROUPUnitsnotinstart;
    auto6F437502_u = UnitGroupCount(auto6F437502_g, c_unitCountAll);
    for (;; auto6F437502_u -= 1) {
        auto6F437502_var = UnitGroupUnitFromEnd(auto6F437502_g, auto6F437502_u);
        if (auto6F437502_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto6F437502_var, true);
    }
    autoD57C938E_g = gv_gROUPPlayersStartingBASE;
    autoD57C938E_u = UnitGroupCount(autoD57C938E_g, c_unitCountAll);
    for (;; autoD57C938E_u -= 1) {
        autoD57C938E_var = UnitGroupUnitFromEnd(autoD57C938E_g, autoD57C938E_u);
        if (autoD57C938E_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoD57C938E_var, true);
    }
    autoB843FD74_g = gv_baseMidHiddenUnitGroup;
    autoB843FD74_u = UnitGroupCount(autoB843FD74_g, c_unitCountAll);
    for (;; autoB843FD74_u -= 1) {
        autoB843FD74_var = UnitGroupUnitFromEnd(autoB843FD74_g, autoB843FD74_u);
        if (autoB843FD74_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoB843FD74_var, true);
    }
    UnitPauseAll(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libNtve_gf_RestoreUnitSelection(gv_pLAYER_01_USER);
    CameraRestore(gv_pLAYER_01_USER, 0.0, -1, 10);
    VisExploreArea(gv_pLAYER_01_USER, gv_mapAreaNormal, true, false);
    TriggerExecute(gt_StartAIWaves, true, false);
    TriggerExecute(gt_InitiatePatrols, true, false);
    AIToggleBulliesInRegion(gv_pLAYER_02_ScriptedTOSS, RegionFromId(3), false);
    Wait(0.1, c_timeGame);
    TriggerEnable(gt_DefeatBaseDead, true);
    UnitSetPropertyFixed(UnitFromId(228), c_unitPropEnergy, 50.0);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 600);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 400);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(35), 0.5, false);
    UnitGroupIssueOrder(gv_gROUPPlayersStartingUNITS, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetPosition(gv_uNITCruiser01, PointFromId(110), false);
    UnitSetFacing(gv_uNITCruiser01, 227.0, 0.0);
    UnitSetPosition(gv_uNITCruiser02, PointFromId(117), false);
    UnitSetFacing(gv_uNITCruiser02, 227.0, 0.0);
    UnitSetPosition(gv_uNITCruiser03, PointFromId(256), false);
    UnitSetFacing(gv_uNITCruiser03, 227.0, 0.0);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionFromId(32), gv_pLAYER_02_ScriptedTOSS);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, gv_pLAYER_01_USER, PointFromId(49));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, gv_pLAYER_01_USER, PointFromId(96));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, gv_pLAYER_01_USER, PointFromId(115));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, gv_pLAYER_01_USER, PointFromId(131));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, gv_pLAYER_01_USER, PointFromId(164));
    if ((gv_baseMidCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/76E5D544"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BaseMidCleanup_Init () {
    gt_BaseMidCleanup = TriggerCreate("gt_BaseMidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Base  Mid SCV
//--------------------------------------------------------------------------------------------------
bool gt_BaseMidSCV_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iNT;

    // Automatic Variable Declarations
    unitgroup auto34E0FCB9_g;
    int auto34E0FCB9_u;
    unit auto34E0FCB9_var;
    int auto18C6FC3F_val;

    // Variable Initialization
    lv_iNT = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    auto34E0FCB9_g = gv_sCVs;
    auto34E0FCB9_u = UnitGroupCount(auto34E0FCB9_g, c_unitCountAll);
    for (;; auto34E0FCB9_u -= 1) {
        auto34E0FCB9_var = UnitGroupUnitFromEnd(auto34E0FCB9_g, auto34E0FCB9_u);
        if (auto34E0FCB9_var == null) { break; }
        auto18C6FC3F_val = lv_iNT;
        if (auto18C6FC3F_val == 1) {
            if ((libCamp_gf_StoryResearchStateCheck(libCamp_ge_StoryResearchID_ResearchP21OrbitalDepots, libCamp_ge_StoryResearchState_ResearchStatePurchased) == true)) {
                UnitIssueOrder(auto34E0FCB9_var, OrderTargetingPoint(AbilityCommand("TerranBuildDrop", 0), UnitGetPosition(UnitFromId(26))), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(auto34E0FCB9_var, OrderTargetingPoint(AbilityCommand("TerranBuild", 1), UnitGetPosition(UnitFromId(26))), c_orderQueueReplace);
            }
        }
        else if (auto18C6FC3F_val == 2) {
            if ((libCamp_gf_StoryResearchStateCheck(libCamp_ge_StoryResearchID_ResearchP21OrbitalDepots, libCamp_ge_StoryResearchState_ResearchStatePurchased) == true)) {
                UnitIssueOrder(auto34E0FCB9_var, OrderTargetingPoint(AbilityCommand("TerranBuildDrop", 0), UnitGetPosition(UnitFromId(74))), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(auto34E0FCB9_var, OrderTargetingPoint(AbilityCommand("TerranBuild", 1), UnitGetPosition(UnitFromId(74))), c_orderQueueReplace);
            }
        }
        else if (auto18C6FC3F_val == 3) {
            if ((libCamp_gf_StoryResearchStateCheck(libCamp_ge_StoryResearchID_ResearchP31AutomatedRefinery, libCamp_ge_StoryResearchState_ResearchStatePurchased) == true)) {
                UnitIssueOrder(auto34E0FCB9_var, OrderTargetingUnit(AbilityCommand("TerranBuild", 18), UnitFromId(84)), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(auto34E0FCB9_var, OrderTargetingUnit(AbilityCommand("TerranBuild", 2), UnitFromId(84)), c_orderQueueReplace);
            }
        }
        else if (auto18C6FC3F_val == 4) {
            if ((libCamp_gf_StoryResearchStateCheck(libCamp_ge_StoryResearchID_ResearchP21OrbitalDepots, libCamp_ge_StoryResearchState_ResearchStatePurchased) == true)) {
                UnitIssueOrder(auto34E0FCB9_var, OrderTargetingPoint(AbilityCommand("TerranBuildDrop", 0), UnitGetPosition(UnitFromId(25))), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(auto34E0FCB9_var, OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitFromId(121)), c_orderQueueReplace);
            }
        }
        else if (auto18C6FC3F_val == 5) {
            if ((libCamp_gf_StoryResearchStateCheck(libCamp_ge_StoryResearchID_ResearchP21OrbitalDepots, libCamp_ge_StoryResearchState_ResearchStatePurchased) == true)) {
                UnitIssueOrder(auto34E0FCB9_var, OrderTargetingPoint(AbilityCommand("TerranBuildDrop", 0), UnitGetPosition(UnitFromId(372))), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(auto34E0FCB9_var, OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitFromId(187)), c_orderQueueReplace);
            }
        }
        else {
            UnitIssueOrder(auto34E0FCB9_var, OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitFromId(187)), c_orderQueueReplace);
        }
        lv_iNT += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BaseMidSCV_Init () {
    gt_BaseMidSCV = TriggerCreate("gt_BaseMidSCV_Func");
    TriggerAddEventUnitAbility(gt_BaseMidSCV, null, AbilityCommand("CommandCenterTransport", 1), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prisoners - Show Cine Safety
//--------------------------------------------------------------------------------------------------
bool gt_PrisonersShowCineSafety_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_PrisonersMidQ, false, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrisonersShowCineSafety_Init () {
    gt_PrisonersShowCineSafety = TriggerCreate("gt_PrisonersShowCineSafety_Func");
    TriggerAddEventUnitRegion(gt_PrisonersShowCineSafety, null, RegionFromId(22), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prisoners-Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_PrisonersMidQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_tIMEOUT;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tIMEOUT = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_uNIT_RipFieldGenerator01))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PrisonersShowCineSafety, false);
    TimerStart(lv_tIMEOUT, c_timerDurationInfinite, false, c_timeGame);
    while (!(((gf_PlayerIsInCombat(gv_pLAYER_01_USER) == false) || (TimerGetElapsed(lv_tIMEOUT) >= 30.0)))) {
        Wait(0.2, c_timeGame);
    }
    TriggerQueueEnter();
    TriggerExecute(gt_PrisonersMidSetup, true, true);
    TriggerExecute(gt_PrisonersMidCinematic, true, true);
    TriggerExecute(gt_PrisonersMidCinematicEnd, true, true);
    TriggerExecute(gt_PrisonersMidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrisonersMidQ_Init () {
    gt_PrisonersMidQ = TriggerCreate("gt_PrisonersMidQ_Func");
    TriggerAddEventUnitDied(gt_PrisonersMidQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prisoners-Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_PrisonersMidSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5977921D_g;
    int auto5977921D_u;
    unit auto5977921D_var;
    unitgroup autoF32A5555_g;
    int autoF32A5555_u;
    unit autoF32A5555_var;
    unitgroup auto1A1CD2F6_g;
    int auto1A1CD2F6_u;
    unit auto1A1CD2F6_var;
    unitgroup autoA8F8CF0C_g;
    int autoA8F8CF0C_u;
    unit autoA8F8CF0C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    TimerPause(gv_tIMERVortexCooldown, true);
    TimerPause(gv_warpPrismTimer, true);
    UnitPauseAll(true);
    auto5977921D_g = UnitGroup(null, gv_pLAYER_02_ScriptedTOSS, RegionFromId(40), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5977921D_u = UnitGroupCount(auto5977921D_g, c_unitCountAll);
    for (;; auto5977921D_u -= 1) {
        auto5977921D_var = UnitGroupUnitFromEnd(auto5977921D_g, auto5977921D_u);
        if (auto5977921D_var == null) { break; }
        UnitGroupAdd(gv_prisonersMidHiddenProtossGroup, auto5977921D_var);
        libNtve_gf_ShowHideUnit(auto5977921D_var, false);
    }
    autoF32A5555_g = UnitGroup(null, gv_pLAYER_03_HighTOSS, RegionFromId(40), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF32A5555_u = UnitGroupCount(autoF32A5555_g, c_unitCountAll);
    for (;; autoF32A5555_u -= 1) {
        autoF32A5555_var = UnitGroupUnitFromEnd(autoF32A5555_g, autoF32A5555_u);
        if (autoF32A5555_var == null) { break; }
        UnitGroupAdd(gv_prisonersMidHiddenProtossGroup, autoF32A5555_var);
        libNtve_gf_ShowHideUnit(autoF32A5555_var, false);
    }
    auto1A1CD2F6_g = UnitGroup(null, gv_pLAYER_04_DarkTOSS, RegionFromId(40), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1A1CD2F6_u = UnitGroupCount(auto1A1CD2F6_g, c_unitCountAll);
    for (;; auto1A1CD2F6_u -= 1) {
        auto1A1CD2F6_var = UnitGroupUnitFromEnd(auto1A1CD2F6_g, auto1A1CD2F6_u);
        if (auto1A1CD2F6_var == null) { break; }
        UnitGroupAdd(gv_prisonersMidHiddenProtossGroup, auto1A1CD2F6_var);
        libNtve_gf_ShowHideUnit(auto1A1CD2F6_var, false);
    }
    autoA8F8CF0C_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA8F8CF0C_u = UnitGroupCount(autoA8F8CF0C_g, c_unitCountAll);
    for (;; autoA8F8CF0C_u -= 1) {
        autoA8F8CF0C_var = UnitGroupUnitFromEnd(autoA8F8CF0C_g, autoA8F8CF0C_u);
        if (autoA8F8CF0C_var == null) { break; }
        UnitGroupAdd(gv_prisonersMidHiddenTerranGroup, autoA8F8CF0C_var);
        libNtve_gf_ShowHideUnit(autoA8F8CF0C_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrisonersMidSetup_Init () {
    gt_PrisonersMidSetup = TriggerCreate("gt_PrisonersMidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prisoners-Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_PrisonersMidCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(204), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(238), 16.0, -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_prisonersMidCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus05MusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    // Transmission - SoundLink("TTychus05DarkTemplar00004", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus05DarkTemplar00004", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTychus05DarkTemplar00008", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus05DarkTemplar00008", -1), c_transmissionDurationAdd, 0.0, true);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_prisonersMidCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrisonersMidCinematic_Init () {
    gt_PrisonersMidCinematic = TriggerCreate("gt_PrisonersMidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prisoners-Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_PrisonersMidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_prisonersMidCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrisonersMidCinematicEnd_Init () {
    gt_PrisonersMidCinematicEnd = TriggerCreate("gt_PrisonersMidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prisoners-Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_PrisonersMidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto69726EB8_g;
    int auto69726EB8_u;
    unit auto69726EB8_var;
    unitgroup autoED220B59_g;
    int autoED220B59_u;
    unit autoED220B59_var;
    unitgroup autoE5A53589_g;
    int autoE5A53589_u;
    unit autoE5A53589_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto69726EB8_g = gv_prisonersMidHiddenProtossGroup;
    auto69726EB8_u = UnitGroupCount(auto69726EB8_g, c_unitCountAll);
    for (;; auto69726EB8_u -= 1) {
        auto69726EB8_var = UnitGroupUnitFromEnd(auto69726EB8_g, auto69726EB8_u);
        if (auto69726EB8_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto69726EB8_var, true);
    }
    autoED220B59_g = gv_prisonersMidHiddenTerranGroup;
    autoED220B59_u = UnitGroupCount(autoED220B59_g, c_unitCountAll);
    for (;; autoED220B59_u -= 1) {
        autoED220B59_var = UnitGroupUnitFromEnd(autoED220B59_g, autoED220B59_u);
        if (autoED220B59_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoED220B59_var, true);
    }
    UnitPauseAll(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libNtve_gf_RestoreUnitSelection(gv_pLAYER_01_USER);
    CameraRestore(gv_pLAYER_01_USER, 0.0, -1, 10);
    TimerPause(gv_tIMERVortexCooldown, false);
    TimerPause(gv_warpPrismTimer, false);
    VisRevealerCreate(1, RegionFromId(23));
    VisRevealerCreate(1, RegionFromId(28));
    VisRevealerCreate(1, RegionFromId(31));
    VisRevealerCreate(1, RegionFromId(29));
    TriggerEnable(gt_PhotonCannonreveal, true);
    libNtve_gf_CreatePingFacingAngle(gv_fORCEGOOD_GUYS, "PingObjective", UnitGetPosition(gv_uNITPrison[1]), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetScale(PingLastCreated(), 0.75);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/18A5F570"));
    gv_pINGPrison[1] = PingLastCreated();
    if ((gv_aCTORPrisonReticule[1] == null) && (UnitIsAlive(gv_uNITPrison[1]) == true)) {
        libNtve_gf_AttachModelToUnit(gv_uNITPrison[1], "BriefingUnitSelectLargeRed", "Ref_Center");
        gv_aCTORPrisonReticule[1] = libNtve_gf_ActorLastCreated();
    }

    autoE5A53589_g = gv_gROUPPrisons;
    autoE5A53589_u = UnitGroupCount(autoE5A53589_g, c_unitCountAll);
    for (;; autoE5A53589_u -= 1) {
        autoE5A53589_var = UnitGroupUnitFromEnd(autoE5A53589_g, autoE5A53589_u);
        if (autoE5A53589_var == null) { break; }
        UnitSetInfoText(autoE5A53589_var, StringExternal("Param/Value/995F2F60"), StringExternal("Param/Value/0AB0B2B1"), StringExternal("Param/Value/E892103F"));
        UnitSetState(autoE5A53589_var, c_unitStateTargetable, true);
        UnitSetState(autoE5A53589_var, c_unitStateSelectable, true);
        UnitSetState(autoE5A53589_var, c_unitStateInvulnerable, false);
        gf_SetUnitMaxStats(autoE5A53589_var, libNtve_gf_DifficultyValueFixed(200.0, 400.0, 500.0, 600.0), libNtve_gf_DifficultyValueFixed(50.0, 100.0, 125.0, 150.0));
    }
    if ((gv_prisonersMidCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/F960349D"));
    TriggerExecute(gt_ObjectivePrisonersCreateQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrisonersMidCleanup_Init () {
    gt_PrisonersMidCleanup = TriggerCreate("gt_PrisonersMidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mothership-Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MothershipMidQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_tIMEOUT;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tIMEOUT = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!(((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(37), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitIsAlive(gv_uNIT_RipFieldGenerator02[1]) == false) || (UnitIsAlive(gv_uNIT_RipFieldGenerator02[2]) == false) || (UnitIsAlive(gv_uNIT_RipFieldGenerator02[3]) == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_tIMEOUT, c_timerDurationInfinite, false, c_timeGame);
    while (!(((gf_PlayerIsInCombat(gv_pLAYER_01_USER) == false) || (TimerGetElapsed(lv_tIMEOUT) >= 15.0)))) {
        Wait(0.2, c_timeGame);
    }
    TriggerQueueEnter();
    TriggerExecute(gt_MothershipMidSetup, true, true);
    TriggerExecute(gt_MothershipMidCinematic, true, true);
    TriggerExecute(gt_MothershipMidCinematicEnd, true, true);
    TriggerExecute(gt_MothershipMidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MothershipMidQ_Init () {
    gt_MothershipMidQ = TriggerCreate("gt_MothershipMidQ_Func");
    TriggerAddEventTimePeriodic(gt_MothershipMidQ, 1.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mothership-Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MothershipMidSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto793D219F_g;
    int auto793D219F_u;
    unit auto793D219F_var;
    unitgroup autoE1FFC82C_g;
    int autoE1FFC82C_u;
    unit autoE1FFC82C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    auto793D219F_g = UnitGroup("RipFieldGenerator", gv_pLAYER_05_WORLDSHIP, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto793D219F_u = UnitGroupCount(auto793D219F_g, c_unitCountAll);
    for (;; auto793D219F_u -= 1) {
        auto793D219F_var = UnitGroupUnitFromEnd(auto793D219F_g, auto793D219F_u);
        if (auto793D219F_var == null) { break; }
        UnitGroupAdd(gv_mothershipMidRipFieldGroup, auto793D219F_var);
        UnitBehaviorRemove(auto793D219F_var, "TTychus05ObjectiveShield", 1);
    }
    autoE1FFC82C_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE1FFC82C_u = UnitGroupCount(autoE1FFC82C_g, c_unitCountAll);
    for (;; autoE1FFC82C_u -= 1) {
        autoE1FFC82C_var = UnitGroupUnitFromEnd(autoE1FFC82C_g, autoE1FFC82C_u);
        if (autoE1FFC82C_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoE1FFC82C_var, false);
        UnitGroupAdd(gv_mothershipMidHiddenUnitGroup, autoE1FFC82C_var);
    }
    UnitPauseAll(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MothershipMidSetup_Init () {
    gt_MothershipMidSetup = TriggerCreate("gt_MothershipMidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mothership-Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MothershipMidCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mOTHERSHIP;
    actor lv_targetDesignator;

    // Automatic Variable Declarations
    unitgroup auto4F122CFE_g;
    int auto4F122CFE_u;
    unit auto4F122CFE_var;
    unitgroup autoDA86D5B3_g;
    int autoDA86D5B3_u;
    unit autoDA86D5B3_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(207), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(206), 12.0, -1, 10, true);
    auto4F122CFE_g = UnitGroup(null, c_playerAny, RegionFromId(24), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4F122CFE_u = UnitGroupCount(auto4F122CFE_g, c_unitCountAll);
    for (;; auto4F122CFE_u -= 1) {
        auto4F122CFE_var = UnitGroupUnitFromEnd(auto4F122CFE_g, auto4F122CFE_u);
        if (auto4F122CFE_var == null) { break; }
        libNtve_gf_PauseUnit(auto4F122CFE_var, false);
    }
    autoDA86D5B3_g = UnitGroup("WarpPrismPhasing", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDA86D5B3_u = UnitGroupCount(autoDA86D5B3_g, c_unitCountAll);
    for (;; autoDA86D5B3_u -= 1) {
        autoDA86D5B3_var = UnitGroupUnitFromEnd(autoDA86D5B3_g, autoDA86D5B3_u);
        if (autoDA86D5B3_var == null) { break; }
        libNtve_gf_PauseUnit(autoDA86D5B3_var, false);
    }
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_mothershipMidCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_MothershipMidVault, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus05MusicEventB", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    // Transmission - SoundLink("TTychus05Valerian00034", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus05Valerian00034", -1), c_transmissionDurationAdd, 2.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(152), 18.0, -1, 10, true);
    TriggerExecute(gt_MothershipMidArrival, true, false);
    // Transmission - SoundLink("TTychus05TalDarimExecutor00012", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus05TalDarimExecutor00012", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTychus05Horner00032", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus05Horner00032", -1), c_transmissionDurationAdd, 0.0, true);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_mothershipMidCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MothershipMidCinematic_Init () {
    gt_MothershipMidCinematic = TriggerCreate("gt_MothershipMidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mothership-Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MothershipMidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_mothershipMidCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MothershipMidCinematicEnd_Init () {
    gt_MothershipMidCinematicEnd = TriggerCreate("gt_MothershipMidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mothership-Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MothershipMidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto6D45936A_g;
    int auto6D45936A_u;
    unit auto6D45936A_var;
    unitgroup auto4ED9D494_g;
    int auto4ED9D494_u;
    unit auto4ED9D494_var;
    unitgroup auto6C9F41C6_g;
    int auto6C9F41C6_u;
    unit auto6C9F41C6_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto6D45936A_g = gv_mothershipMidRipFieldGroup;
    auto6D45936A_u = UnitGroupCount(auto6D45936A_g, c_unitCountAll);
    for (;; auto6D45936A_u -= 1) {
        auto6D45936A_var = UnitGroupUnitFromEnd(auto6D45936A_g, auto6D45936A_u);
        if (auto6D45936A_var == null) { break; }
        UnitBehaviorAdd(auto6D45936A_var, "TTychus05ObjectiveShield", auto6D45936A_var, 1);
    }
    auto4ED9D494_g = gv_mothershipMidHiddenUnitGroup;
    auto4ED9D494_u = UnitGroupCount(auto4ED9D494_g, c_unitCountAll);
    for (;; auto4ED9D494_u -= 1) {
        auto4ED9D494_var = UnitGroupUnitFromEnd(auto4ED9D494_g, auto4ED9D494_u);
        if (auto4ED9D494_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto4ED9D494_var, true);
    }
    UnitPauseAll(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libNtve_gf_RestoreUnitSelection(gv_pLAYER_01_USER);
    CameraRestore(gv_pLAYER_01_USER, 0.0, -1, 10);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_uNITVault), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    TriggerExecute(gt_MothershipCreate, true, true);
    auto6C9F41C6_g = gv_mothershipMidSpawnedUnitGroup;
    auto6C9F41C6_u = UnitGroupCount(auto6C9F41C6_g, c_unitCountAll);
    for (;; auto6C9F41C6_u -= 1) {
        auto6C9F41C6_var = UnitGroupUnitFromEnd(auto6C9F41C6_g, auto6C9F41C6_u);
        if (auto6C9F41C6_var == null) { break; }
        UnitRemove(auto6C9F41C6_var);
    }
    if ((gv_mothershipMidCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/CC367D36"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MothershipMidCleanup_Init () {
    gt_MothershipMidCleanup = TriggerCreate("gt_MothershipMidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mothership Mid Vault
//--------------------------------------------------------------------------------------------------
bool gt_MothershipMidVault_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_uNITVault), c_animNameDefault, "Stand Work Start", c_animFlagNonLooping, c_animTimeDefault);
    Wait(9.0, c_timeReal);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_uNITVault), c_animNameDefault, "Stand Work", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MothershipMidVault_Init () {
    gt_MothershipMidVault = TriggerCreate("gt_MothershipMidVault_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mothership Mid Arrival
//--------------------------------------------------------------------------------------------------
bool gt_MothershipMidArrival_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mOTHERSHIP;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "TalDarimMothership", 0, gv_pLAYER_02_ScriptedTOSS, PointFromId(296));
    lv_mOTHERSHIP = UnitLastCreated();
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
    UnitBehaviorRemove(lv_mOTHERSHIP, "CloakField", 1);
    UnitGroupAdd(gv_mothershipMidSpawnedUnitGroup, UnitLastCreated());
    UnitIssueOrder(lv_mOTHERSHIP, OrderTargetingPoint(AbilityCommand("WormholeTransit", 0), RegionGetCenter(RegionFromId(20))), c_orderQueueReplace);
    Wait(3.0, c_timeGame);
    UnitIssueOrder(lv_mOTHERSHIP, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(574)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MothershipMidArrival_Init () {
    gt_MothershipMidArrival = TriggerCreate("gt_MothershipMidArrival_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto18BC790B_g;
    int auto18BC790B_u;
    unit auto18BC790B_var;
    playergroup autoDFC5865A_g;
    int autoDFC5865A_var;
    unitgroup auto99A4ECC3_g;
    int auto99A4ECC3_u;
    unit auto99A4ECC3_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    CameraSetBounds(gv_fORCEGOOD_GUYS, gv_mapAreaNormal, true);
    RegionPlayableMapSet(gv_mapAreaNormal);
    UnitGroupIssueOrder(UnitGroup(null, c_playerAny, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    GameDestroyEffects(PointFromId(321), 15.0, 0, "VortexCreatePersistent");
    GameDestroyEffects(PointFromId(321), 15.0, 0, "VortexCreatePersistentInitial");
    ActorWorldParticleFXDestroy();
    UnitPauseAll(true);
    UnitRemove(gv_uNITDaMothership);
    if ((UnitGroupCount(gv_gROUPEmitters, c_unitCountAlive) > 0)) {
        TriggerEnable(gt_AchievementDestroyAllRipFieldEmitters, false);
        auto18BC790B_g = gv_gROUPEmitters;
        auto18BC790B_u = UnitGroupCount(auto18BC790B_g, c_unitCountAll);
        for (;; auto18BC790B_u -= 1) {
            auto18BC790B_var = UnitGroupUnitFromEnd(auto18BC790B_g, auto18BC790B_u);
            if (auto18BC790B_var == null) { break; }
            UnitRemove(auto18BC790B_var);
        }
    }

    gv_victoryHiddenUnitGroup = UnitGroup(null, gv_pLAYER_03_HighTOSS, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_victoryHiddenUnitGroup);
    autoDFC5865A_g = gv_fORCEBADGUYS;
    autoDFC5865A_var = -1;
    while (true) {
        autoDFC5865A_var = PlayerGroupNextPlayer(autoDFC5865A_g, autoDFC5865A_var);
        if (autoDFC5865A_var < 0) { break; }
        libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, autoDFC5865A_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_victoryHiddenUnitGroup);
    }
    auto99A4ECC3_g = gv_victoryHiddenUnitGroup;
    auto99A4ECC3_u = UnitGroupCount(auto99A4ECC3_g, c_unitCountAll);
    for (;; auto99A4ECC3_u -= 1) {
        auto99A4ECC3_var = UnitGroupUnitFromEnd(auto99A4ECC3_g, auto99A4ECC3_u);
        if (auto99A4ECC3_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto99A4ECC3_var, false);
    }
    libNtve_gf_ShowHideUnit(UnitFromId(3), true);
    libNtve_gf_PauseUnit(UnitFromId(3), false);
    if ((UnitIsAlive(UnitFromId(3)) == true)) {
        UnitKill(UnitFromId(3));
        Wait(0.1, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dropship;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(314), 0.0, -1, 10, true);
    if ((UnitIsAlive(gv_victoryArtifact) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ArtifactPiece5", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(321));
        gv_victoryArtifact = UnitLastCreated();
    }
    else {
        libNtve_gf_ShowHideUnit(gv_victoryArtifact, true);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "SpecialOpsDropship", 0, gv_pLAYER_01_USER, PointFromId(322));
    lv_dropship = UnitLastCreated();
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_victoryCinematicCompleted = false;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus05MusicOutro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(16), (SoundLengthSync(SoundLink("TTychus05Raynor00029", -1)) + 2.0), -1, 10, true);
    UnitIssueOrder(lv_dropship, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(321)), c_orderQueueReplace);
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus05Raynor00029", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    UnitKill(gv_victoryArtifact);
    SoundPlayOnUnit(SoundLink("Medivac_Load", -1), PlayerGroupAll(), lv_dropship, 0.0, 100.0, 0.0);
    UnitIssueOrder(lv_dropship, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(196)), c_orderQueueAddToEnd);
    Wait(2.0, c_timeReal);
    gv_victoryCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuratioin;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victoryCinematicCompleted == true)) {
        lv_fadeDuratioin = 2.0;
    }
    else {
        lv_fadeDuratioin = 0.5;
    }
    CinematicFade(false, lv_fadeDuratioin, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(lv_fadeDuratioin, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04Music_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_PlayerIsInCombatattacking_Init();
    gt_PlayerIsInCombatbeingattacked_Init();
    gt_PlayerIsInCombatIndicatorDiminish_Init();
    gt_StartGameStage1_Init();
    gt_StartGameStage2_Init();
    gt_YamatoTeachingtrigger_Init();
    gt_YamatoTeachingDialogueQ_Init();
    gt_YamatoTeachingPingKiller_Init();
    gt_PhotonCannonreveal_Init();
    gt_YamatoButtonFlashkiller_Init();
    gt_StartWarpPrizmDrops_Init();
    gt_WarpPrizmDropsWarpSpawner_Init();
    gt_WarpPrizmDropN1_Init();
    gt_WarpPrizmDropN2_Init();
    gt_WarpPrizmDropS1_Init();
    gt_WarpPrizmDropS2_Init();
    gt_WarpPrizmDropS3_Init();
    gt_Prisonrelease1_Init();
    gt_Prisonrelease2_Init();
    gt_Prisonrelease3_Init();
    gt_Prisonrelease4_Init();
    gt_PrisonReticuleKiller_Init();
    gt_PrisonDialogueQ_Init();
    gt_DamagePulse_Init();
    gt_RipFieldGeneratorResponse1_Init();
    gt_RipFieldGeneratorResponse2_Init();
    gt_XelnagaVaultResponse_Init();
    gt_ReticuleRipFieldGenerator1_Init();
    gt_ReticuleRipFieldGenerator2_1_Init();
    gt_ReticuleRipFieldGenerator2_2_Init();
    gt_ReticuleRipFieldGenerator2_3_Init();
    gt_ReticuleRipFieldGenerator3_Init();
    gt_ReticuleKiller_Init();
    gt_MothershipCreate_Init();
    gt_MothershipProximityAttack_Init();
    gt_MothershipVortex_Init();
    gt_MothershipWarpInAttack_Init();
    gt_MothershipWarmholeVAULT_Init();
    gt_MothershipWarmhole75health_Init();
    gt_MothershipWarmhole30health_Init();
    gt_MothershipDeathQ_Init();
    gt_InitiatePatrols_Init();
    gt_ResourcePickups_Init();
    gt_ResourcePickupDialogueQ_Init();
    gt_ResourcesLowDialogueQ_Init();
    gt_XelnagaVaultReticuleKiller_Init();
    gt_TIPCampaignTipsQ_Init();
    gt_TIPBattlecruiserQ_Init();
    gt_TIPYamatoQ_Init();
    gt_TIPFusionCoreQ_Init();
    gt_TIPRipFieldQ_Init();
    gt_TIPPrisonersQ_Init();
    gt_TIPVortexQ_Init();
    gt_AchievementDestroyAllRipFieldEmitters_Init();
    gt_StatRipFieldDeaths_Init();
    gt_StatRipFieldEmittersDestroyed_Init();
    gt_AchievementDestroyallenemystructures_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatLZUnitsDead_Init();
    gt_VictoryRetrieveArtifactCompleted_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_StartAI_Init();
    gt_StartAIWaves_Init();
    gt_StartAIUpgradesH_Init();
    gt_StartAIUpgradesI_Init();
    gt_P04AttackWavesMiddle_Init();
    gt_P03AttackWavesLeft_Init();
    gt_StartP03WavesP02Dead_Init();
    gt_StartP03WavesSafetyTripwire_Init();
    gt_AIGiveMinerals_Init();
    gt_AIGiveGas_Init();
    gt_ObjectiveClearLZCreateQ_Init();
    gt_ObjectiveClearLZComplete_Init();
    gt_ObjectiveClearLZFailed_Init();
    gt_ObjectiveArtifactCreateQ_Init();
    gt_ObjectiveArtifactComplete_Init();
    gt_ObjectiveArtifactFailed_Init();
    gt_ObjectivePrisonersCreateQ_Init();
    gt_ObjectivePrisonersUpdate_Init();
    gt_ObjectivePrisonersComplete_Init();
    gt_BriefingQ_Init();
    gt_BriefingScene00_Init();
    gt_BriefingScene00CamerasMovementandPings_Init();
    gt_BriefingScene01_Init();
    gt_BriefingScene01Yamato_Init();
    gt_BriefingScene02_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroScene_Init();
    gt_BaseMidQ_Init();
    gt_BaseMidSetup_Init();
    gt_BaseMidCinematic_Init();
    gt_BaseMidCinematicEnd_Init();
    gt_BaseMidCleanup_Init();
    gt_BaseMidSCV_Init();
    gt_PrisonersShowCineSafety_Init();
    gt_PrisonersMidQ_Init();
    gt_PrisonersMidSetup_Init();
    gt_PrisonersMidCinematic_Init();
    gt_PrisonersMidCinematicEnd_Init();
    gt_PrisonersMidCleanup_Init();
    gt_MothershipMidQ_Init();
    gt_MothershipMidSetup_Init();
    gt_MothershipMidCinematic_Init();
    gt_MothershipMidCinematicEnd_Init();
    gt_MothershipMidCleanup_Init();
    gt_MothershipMidVault_Init();
    gt_MothershipMidArrival_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
