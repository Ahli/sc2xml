//==================================================================================================
// 
// Generated Map Script
// 
// Name:   All In
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/CampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libCamp_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_USER = 1;
const int gv_pLAYER_ZERG_MAIN = 2;
const int gv_pLAYER_ZERG_SPECIAL = 3;
const int gv_pLAYER_ZERG_SOUTH = 4;
const int gv_pLAYER_ZERG_EAST = 5;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_RECORD_ZergDefender {
    unit lv_unit;
    string lv_unitType;
    point lv_position;
    region lv_spawnRegion;
};

struct gs_RECORD_AmbientOverlord {
    unit lv_overlord;
    point lv_destination;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
playergroup gv_zergPlayers;
bool gv_gameOver;
bool gv_inCinematic;
unit gv_artifact;
fixed gv_artifactChargeIncrement;
fixed gv_artifactChargeMax;
fixed gv_artifactChargeCurrent;
int gv_artifactBoard;
revealer gv_artifactRevealer;
int gv_energyQPendingCount;
int gv_energyNovaKills;
int gv_energyNovasUsed;
int gv_recentBuildingDeaths;
int[11] gv_recentBuildingDeathHistory;
fixed gv_persistentWaitEarly;
fixed gv_persistentWaitLate;
region[17] gv_persistentSpawnRegions;
region[7] gv_mainSpawnRegions;
unitgroup gv_nextWaveUnits;
int gv_nextWavePlayer;
int gv_specialUnitColor;
unitgroup gv_airPingGroup;
unitgroup gv_airPingGroupBehind;
bool gv_firstAirTransmission;
unit gv_leviathan;
unitgroup gv_leviathanMutas;
unitgroup gv_leviathanBLords;
fixed gv_leviathanMaxHP;
fixed gv_leviathanMaxEnergy;
int gv_leviathanPing;
fixed gv_nydusSpitPeriod;
fixed gv_nydusWormHP;
region gv_spawnNydusWormRegion;
unit gv_kerrigan;
bool gv_kerriganHasRetreated;
bool gv_firstKerriganAttack;
fixed gv_kerriganMaxHP;
fixed gv_kerriganMaxEnergy;
int gv_kerriganEscortNumber;
int gv_kerriganPing;
timer gv_kerriganSpawnedTimer;
int gv_kerriganAttackCount;
int gv_kerriganKills;
gs_RECORD_ZergDefender[512] gv_zergDefenders;
int gv_zergDefendersSize;
gs_RECORD_AmbientOverlord[64] gv_ambientOverlords;
int gv_ambientOverlordsSize;
int gv_objective_Artifact;
bool gv_introCinematicCompleted;
unitgroup gv_introHiddenUnitGroup;
unitgroup gv_initialArtifactAttackers;
unit gv_cINEKerrigan;
bool gv_victoryCinematicCompleted;

void InitGlobals () {
    int init_i;

    gv_zergPlayers = PlayerGroupEmpty();
    gv_artifact = UnitFromId(42);
    gv_artifactChargeIncrement = 1.0;
    gv_artifactChargeMax = 2000.0;
    gv_artifactBoard = c_boardNone;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_persistentSpawnRegions[init_i] = RegionFromId(5);
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_mainSpawnRegions[init_i] = RegionFromId(5);
    }
    gv_nextWaveUnits = UnitGroupEmpty();
    gv_airPingGroup = UnitGroupEmpty();
    gv_airPingGroupBehind = UnitGroupEmpty();
    gv_firstAirTransmission = true;
    gv_leviathanMutas = UnitGroupEmpty();
    gv_leviathanBLords = UnitGroupEmpty();
    gv_leviathanMaxHP = 2000.0;
    gv_leviathanMaxEnergy = 2000.0;
    gv_leviathanPing = c_invalidPingId;
    gv_kerrigan = UnitFromId(1059);
    gv_kerriganHasRetreated = true;
    gv_firstKerriganAttack = true;
    gv_kerriganMaxHP = 1000.0;
    gv_kerriganMaxEnergy = 250.0;
    gv_kerriganSpawnedTimer = TimerCreate();
    for (init_i = 0; init_i <= 511; init_i += 1) {
        gv_zergDefenders[init_i].lv_unitType = "Hydralisk";
        gv_zergDefenders[init_i].lv_position = PointFromId(4);
    }
    gv_objective_Artifact = c_invalidObjectiveId;
    gv_introHiddenUnitGroup = UnitGroupEmpty();
    gv_initialArtifactAttackers = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
bool gf_ABChoiceA ();
string gf_ABUnit (string lp_aUnit, string lp_bUnit);
int gf_Lookup (int lp_index, int lp_val1, int lp_val2, int lp_val3, int lp_val4, int lp_val5, int lp_val6);
void gf_SpawnCrashingDoodad (point lp_crashPoint, string lp_crashingDoodadType);
fixed gf_ArtifactChargePercent ();
void gf_SetAttackWaveParameters (region lp_location);
void gf_AddUnitsToSpawnedAttackWave (int lp_number, string lp_unitType, region lp_location);
void gf_SendSpawnedAttackWave ();
void gf_AddUpgradeToZerg (string lp_upgrade);
void gf_WaitMinutes (fixed lp_minutes, int lp_type);
void gf_SpawnUnitsFromNydus (int lp_qty, string lp_type, unit lp_nydus, fixed lp_time, int lp_timeType);
void gf_SpawnAttackWaveFromNydusLight (unit lp_nydus);
void gf_SpawnAttackWaveFromNydusMedium (unit lp_nydus);
void gf_SpawnAttackWaveFromNydusHeavy (unit lp_nydus);
void gf_SpawnNydusWorm (int lp_count, region lp_region);
bool gf_CreepExistsAroundPoint (point lp_point);
region gf_ZergDefenderSpawnArea (point lp_location);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04Music;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_StartGame;
trigger gt_CampaignTipQ;
trigger gt_CreateCrashingDebris;
trigger gt_ArtifactStatus;
trigger gt_ArtifactCharging;
trigger gt_BunkerQ;
trigger gt_ArtifactCloseQ;
trigger gt_EnergyNovaQ;
trigger gt_EnergyNovaKills;
trigger gt_EnergyNovaUsed;
trigger gt_EnergyNovaButton;
trigger gt_EnergyNovaWarningQ;
trigger gt_BuildingDies;
trigger gt_BuildingDeathHistoryUpdate;
trigger gt_StartAI;
trigger gt_InitializeSpawnRegions;
trigger gt_ZergUpgradesAdvanced;
trigger gt_ZergUpgradesExpert;
trigger gt_ZergAttackWavesPersistent;
trigger gt_ZergAttackWavesMain;
trigger gt_ZergAttackWavesMainA08mins;
trigger gt_ZergAttackWavesMainB813mins;
trigger gt_ZergAttackWavesMainC1318mins;
trigger gt_ZergAttackWavesMainD1822minsLeviathan;
trigger gt_ZergAttackWavesMainE2226mins;
trigger gt_ZergAttackWavesMainF2629mins;
trigger gt_ZergAttackWavesMainG2930mins;
trigger gt_AIFreeMoney;
trigger gt_SpawnDropPod;
trigger gt_SpawnAirWave;
trigger gt_SpawnLeviathanWave;
trigger gt_LeviathanSpawnsMutaBLord;
trigger gt_LeviathanMutaBLordBehavior;
trigger gt_LeviathanDead;
trigger gt_AirQ;
trigger gt_AirBehindQ;
trigger gt_LeviathanQ;
trigger gt_AirPings;
trigger gt_SpawnNydusWorm;
trigger gt_SpawnNydusWormWave;
trigger gt_NydusPingSound;
trigger gt_NydusQ;
trigger gt_NydusWarningQ;
trigger gt_InitalKerriganPrep;
trigger gt_KerriganRetreatingfromLowLife;
trigger gt_SpawnKerriganWave;
trigger gt_KerriganSpawnChamberAnimations;
trigger gt_KerriganAttackTransmissionQ;
trigger gt_KerriganAttackTauntQ;
trigger gt_KerriganDeepTunnelQ;
trigger gt_KerriganPing;
trigger gt_KerriganGetsaKill;
trigger gt_KerriganOmegastormCooldown;
trigger gt_KerriganImplosionCooldown;
trigger gt_InitializeDefenders;
trigger gt_ReplaceZergDefender;
trigger gt_ZergRightExtraD;
trigger gt_ZergMiddleExtraD;
trigger gt_ZergLeftExtraD;
trigger gt_AmbientOverlordInitialization;
trigger gt_AmbientOverlordController;
trigger gt_OverlordAttack;
trigger gt_OverlordAttackQ;
trigger gt_VictoryArtifactCharged;
trigger gt_Victory;
trigger gt_AbortMission;
trigger gt_DefeatArtifactDestroyed;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_ObjectiveArtifactCreateQ;
trigger gt_ObjectiveArtifactComplete;
trigger gt_ObjectiveArtifactFailed;
trigger gt_BriefingQ;
trigger gt_BriefingScene00;
trigger gt_BriefingScene01;
trigger gt_BriefingScene02;
trigger gt_BriefingScene03;
trigger gt_BriefingZergAttacksMajor;
trigger gt_BriefingZergAttacksMinor;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroArtifactAttack;
trigger gt_InitialArtifactAttackPausing;
trigger gt_IntroKerriganAnimations;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
bool gf_ABChoiceA () {
    // Automatic Variable Declarations
    // Implementation
    if ((libCamp_gf_MissionStatusCheck(libCamp_ge_MapID_MapTValerian02A, libCamp_ge_MissionStatus_Completed) == true)) {
        return true;
    }
    else {
        return false;
    }
}

string gf_ABUnit (string lp_aUnit, string lp_bUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_ABChoiceA() == true)) {
        return lp_aUnit;
    }
    else {
        return lp_bUnit;
    }
}

int gf_Lookup (int lp_index, int lp_val1, int lp_val2, int lp_val3, int lp_val4, int lp_val5, int lp_val6) {
    // Automatic Variable Declarations
    int autoFD3CE240_val;

    // Implementation
    autoFD3CE240_val = lp_index;
    if (autoFD3CE240_val == 1) {
        return lp_val1;
    }
    else if (autoFD3CE240_val == 2) {
        return lp_val2;
    }
    else if (autoFD3CE240_val == 3) {
        return lp_val3;
    }
    else if (autoFD3CE240_val == 4) {
        return lp_val4;
    }
    else if (autoFD3CE240_val == 5) {
        return lp_val5;
    }
    else if (autoFD3CE240_val == 6) {
        return lp_val6;
    }
    else {
    }
    return 0;
}

trigger auto_gf_SpawnCrashingDoodad_Trigger = null;
point auto_gf_SpawnCrashingDoodad_lp_crashPoint;
string auto_gf_SpawnCrashingDoodad_lp_crashingDoodadType;

void gf_SpawnCrashingDoodad (point lp_crashPoint, string lp_crashingDoodadType) {
    auto_gf_SpawnCrashingDoodad_lp_crashPoint = lp_crashPoint;
    auto_gf_SpawnCrashingDoodad_lp_crashingDoodadType = lp_crashingDoodadType;

    if (auto_gf_SpawnCrashingDoodad_Trigger == null) {
        auto_gf_SpawnCrashingDoodad_Trigger = TriggerCreate("auto_gf_SpawnCrashingDoodad_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnCrashingDoodad_Trigger, false, false);
}

bool auto_gf_SpawnCrashingDoodad_TriggerFunc (bool testConds, bool runActions) {
    point lp_crashPoint = auto_gf_SpawnCrashingDoodad_lp_crashPoint;
    string lp_crashingDoodadType = auto_gf_SpawnCrashingDoodad_lp_crashingDoodadType;

    // Variable Declarations
    actor lv_crashingDoodad;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_CreateActorAtPoint(lp_crashingDoodadType, RegionRandomPoint(RegionFromId(30)));
    lv_crashingDoodad = libNtve_gf_ActorLastCreated();
    libNtve_gf_MakeModelFaceAngle(lv_crashingDoodad, libNtve_gf_RandomAngle());
    libNtve_gf_PlayAnimation(lv_crashingDoodad, c_animNameDefault, "Death", c_animFlagNonLooping, c_animTimeDefault);
    Wait(20.0, c_timeGame);
    ActorSend(lv_crashingDoodad, "Destroy");
    return true;
}

fixed gf_ArtifactChargePercent () {
    // Automatic Variable Declarations
    // Implementation
    return (100.0 * (gv_artifactChargeCurrent / gv_artifactChargeMax));
}

void gf_SetAttackWaveParameters (region lp_location) {
    // Automatic Variable Declarations
    region autoCCF4CD2E_val;

    // Implementation
    autoCCF4CD2E_val = lp_location;
    if (autoCCF4CD2E_val == RegionFromId(5)) {
        gv_nextWavePlayer = gv_pLAYER_ZERG_MAIN;
        AIAttackWaveSetTargetPlayer(gv_nextWavePlayer, PlayerGroupSingle(gv_pLAYER_USER));
        AIAttackWaveSetGatherEarlyNoReplace(gv_nextWavePlayer);
        AIAttackWaveSetGatherPoint(gv_nextWavePlayer, PointFromId(713));
        AIAttackWaveAddWaypoint(gv_nextWavePlayer, PointFromId(112), false);
        AIAttackWaveAddWaypoint(gv_nextWavePlayer, PointFromId(308), false);
        AIAttackWaveAddWaypoint(gv_nextWavePlayer, PointFromId(241), false);
    }
    else if (autoCCF4CD2E_val == RegionFromId(6)) {
        gv_nextWavePlayer = gv_pLAYER_ZERG_SOUTH;
        AIAttackWaveSetTargetPlayer(gv_nextWavePlayer, PlayerGroupSingle(gv_pLAYER_USER));
        AIAttackWaveSetGatherEarlyNoReplace(gv_nextWavePlayer);
        AIAttackWaveSetGatherPoint(gv_nextWavePlayer, PointFromId(715));
        AIAttackWaveAddWaypoint(gv_nextWavePlayer, PointFromId(114), false);
        AIAttackWaveAddWaypoint(gv_nextWavePlayer, PointFromId(307), false);
    }
    else if (autoCCF4CD2E_val == RegionFromId(7)) {
        gv_nextWavePlayer = gv_pLAYER_ZERG_SOUTH;
        AIAttackWaveSetTargetPlayer(gv_nextWavePlayer, PlayerGroupSingle(gv_pLAYER_USER));
        AIAttackWaveSetGatherEarlyNoReplace(gv_nextWavePlayer);
        AIAttackWaveSetGatherPoint(gv_nextWavePlayer, PointFromId(742));
        AIAttackWaveAddWaypoint(gv_nextWavePlayer, PointFromId(309), false);
        AIAttackWaveAddWaypoint(gv_nextWavePlayer, PointFromId(665), false);
    }
    else if (autoCCF4CD2E_val == RegionFromId(8)) {
        gv_nextWavePlayer = gv_pLAYER_ZERG_MAIN;
        AIAttackWaveSetTargetPlayer(gv_nextWavePlayer, PlayerGroupSingle(gv_pLAYER_USER));
        AIAttackWaveSetGatherEarlyNoReplace(gv_nextWavePlayer);
        AIAttackWaveSetGatherPoint(gv_nextWavePlayer, PointFromId(714));
        AIAttackWaveAddWaypoint(gv_nextWavePlayer, PointFromId(113), false);
        AIAttackWaveAddWaypoint(gv_nextWavePlayer, PointFromId(273), false);
        AIAttackWaveAddWaypoint(gv_nextWavePlayer, PointFromId(701), false);
    }
    else if (autoCCF4CD2E_val == RegionFromId(9)) {
        gv_nextWavePlayer = gv_pLAYER_ZERG_EAST;
        AIAttackWaveSetTargetPlayer(gv_nextWavePlayer, PlayerGroupSingle(gv_pLAYER_USER));
        AIAttackWaveSetGatherEarlyNoReplace(gv_nextWavePlayer);
        AIAttackWaveSetGatherPoint(gv_nextWavePlayer, PointFromId(746));
        AIAttackWaveAddWaypoint(gv_nextWavePlayer, PointFromId(685), false);
        AIAttackWaveAddWaypoint(gv_nextWavePlayer, PointFromId(700), false);
    }
    else if (autoCCF4CD2E_val == RegionFromId(10)) {
        gv_nextWavePlayer = gv_pLAYER_ZERG_EAST;
        AIAttackWaveSetTargetPlayer(gv_nextWavePlayer, PlayerGroupSingle(gv_pLAYER_USER));
        AIAttackWaveSetGatherEarlyNoReplace(gv_nextWavePlayer);
        AIAttackWaveSetGatherPoint(gv_nextWavePlayer, PointFromId(747));
        AIAttackWaveAddWaypoint(gv_nextWavePlayer, PointFromId(703), false);
        AIAttackWaveAddWaypoint(gv_nextWavePlayer, PointFromId(702), false);
    }
    else if (autoCCF4CD2E_val == RegionFromId(2)) {
        gv_nextWavePlayer = gv_pLAYER_ZERG_SPECIAL;
        AIAttackWaveSetTargetPoint(gv_nextWavePlayer, UnitGetPosition(gv_artifact));
        AIAttackWaveSetGatherEarlyNoReplace(gv_nextWavePlayer);
        if ((RandomInt(1, 2) == 1)) {
            AIAttackWaveSetGatherPoint(gv_nextWavePlayer, PointFromId(713));
        }
        else {
            AIAttackWaveSetGatherPoint(gv_nextWavePlayer, PointFromId(714));
        }
    }
    else if (autoCCF4CD2E_val == RegionFromId(11)) {
        gv_nextWavePlayer = gv_pLAYER_ZERG_SPECIAL;
        AIAttackWaveSetTargetPoint(gv_nextWavePlayer, UnitGetPosition(gv_artifact));
        AIAttackWaveSetGatherPoint(gv_nextWavePlayer, PointFromId(748));
    }
    else {
        gv_nextWavePlayer = gv_pLAYER_ZERG_SPECIAL;
        AIAttackWaveSetTargetPlayer(gv_nextWavePlayer, PlayerGroupSingle(gv_pLAYER_USER));
        AIAttackWaveSetGatherPoint(gv_nextWavePlayer, RegionGetCenter(lp_location));
    }
}

void gf_AddUnitsToSpawnedAttackWave (int lp_number, string lp_unitType, region lp_location) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto02214A1F_ae;
    const int auto02214A1F_ai = 1;
    region autoC61110BC_val;

    // Variable Initialization

    // Implementation
    auto02214A1F_ae = lp_number;
    lv_i = 1;
    for ( ; ( (auto02214A1F_ai >= 0 && lv_i <= auto02214A1F_ae) || (auto02214A1F_ai < 0 && lv_i >= auto02214A1F_ae) ) ; lv_i += auto02214A1F_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, lp_unitType, 0, gv_nextWavePlayer, RegionRandomPoint(lp_location), PlayerStartLocation(gv_pLAYER_USER));
        UnitGroupAdd(gv_nextWaveUnits, UnitLastCreated());
        if ((UnitGetType(UnitLastCreated()) == "Leviathan")) {
            gv_leviathan = UnitLastCreated();
            UnitSetTeamColorIndex(UnitLastCreated(), gv_specialUnitColor);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_leviathanMaxHP);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyMax, gv_leviathanMaxEnergy);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
            RegionAttachToUnit(RegionFromId(28), gv_leviathan, Point(0.0, 0.0));
        }

        autoC61110BC_val = lp_location;
        if (autoC61110BC_val == RegionFromId(2)) {
            UnitSetTeamColorIndex(UnitLastCreated(), gv_specialUnitColor);
            if ((UnitGetType(UnitLastCreated()) != "Scourge")) {
                UnitGroupAdd(gv_airPingGroup, UnitLastCreated());
            }

        }
        else if (autoC61110BC_val == RegionFromId(11)) {
            UnitSetTeamColorIndex(UnitLastCreated(), gv_specialUnitColor);
            if ((UnitGetType(UnitLastCreated()) != "Scourge")) {
                UnitGroupAdd(gv_airPingGroupBehind, UnitLastCreated());
            }

        }
        else {
        }
    }
}

void gf_SendSpawnedAttackWave () {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGroupCount(gv_nextWaveUnits, c_unitCountAlive) > 0)) {
        AIAttackWaveUseGroup(gv_nextWavePlayer, gv_nextWaveUnits);
        AIAttackWaveSend(gv_nextWavePlayer, 0, false);
    }

    gv_nextWaveUnits = UnitGroupEmpty();
}

void gf_AddUpgradeToZerg (string lp_upgrade) {
    // Automatic Variable Declarations
    playergroup autoF78CF180_g;
    int autoF78CF180_var;

    // Implementation
    autoF78CF180_g = gv_zergPlayers;
    autoF78CF180_var = -1;
    while (true) {
        autoF78CF180_var = PlayerGroupNextPlayer(autoF78CF180_g, autoF78CF180_var);
        if (autoF78CF180_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoF78CF180_var, lp_upgrade, 1);
    }
}

void gf_WaitMinutes (fixed lp_minutes, int lp_type) {
    // Automatic Variable Declarations
    // Implementation
    Wait((lp_minutes * 60.0), lp_type);
}

void gf_SpawnUnitsFromNydus (int lp_qty, string lp_type, unit lp_nydus, fixed lp_time, int lp_timeType) {
    // Automatic Variable Declarations
    unitgroup auto56D3AD49_g;
    int auto56D3AD49_u;
    unit auto56D3AD49_var;

    // Implementation
    if (((UnitIsAlive(lp_nydus) == false) || (gv_gameOver == true) || (lp_qty <= 0) || (lp_type == null) || (PlayerGetPropertyInt(gv_pLAYER_ZERG_MAIN, c_playerPropSuppliesUsed) >= 300))) {
        return ;
    }

    while (!((gv_inCinematic == false))) {
        Wait(0.1, c_timeGame);
    }
    libNtve_gf_UnitCreateFacingPoint(lp_qty, lp_type, 0, gv_pLAYER_ZERG_MAIN, libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_nydus), 1.0, UnitGetPosition(gv_artifact)), UnitGetPosition(gv_artifact));
    auto56D3AD49_g = UnitLastCreatedGroup();
    auto56D3AD49_u = UnitGroupCount(auto56D3AD49_g, c_unitCountAll);
    for (;; auto56D3AD49_u -= 1) {
        auto56D3AD49_var = UnitGroupUnitFromEnd(auto56D3AD49_g, auto56D3AD49_u);
        if (auto56D3AD49_var == null) { break; }
        UnitSetTeamColorIndex(auto56D3AD49_var, gv_specialUnitColor);
    }
    AISetGroupSuicide(UnitLastCreatedGroup(), true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_nydus), c_animNameDefault, "Spell", 0, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), lp_nydus, 0.0, 100.0, 0.0);
    Wait(lp_time, lp_timeType);
}

void gf_SpawnAttackWaveFromNydusLight (unit lp_nydus) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_ArtifactChargePercent() <= 33.0)) {
        gf_SpawnUnitsFromNydus(2, "Zergling", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
        gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Zergling", lp_nydus, 0.0, c_timeAI);
        gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), "Roach", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
        gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(2, 3, 4, 4), "Zergling", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
        gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Zergling", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
        gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Zergling", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
        gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(2, 2, 2, 3), "Zergling", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
        gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(0, 0, 1, 2), "Hydralisk", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
        return ;
    }

    gf_SpawnUnitsFromNydus(3, "Zergling", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
    gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(1, 1, 2, 0), "Zergling", lp_nydus, 0.0, c_timeAI);
    gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), "Roach", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
    gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), "Hydralisk", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
    gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(1, 2, 2, 2), "Zergling", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
    gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(1, 2, 2, 2), "Zergling", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
    gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(2, 3, 4, 5), "Zergling", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
    gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(0, 0, 1, 2), "Baneling", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
}

void gf_SpawnAttackWaveFromNydusMedium (unit lp_nydus) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_ArtifactChargePercent() <= 33.0)) {
        gf_SpawnUnitsFromNydus(3, "Zergling", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
        gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Zergling", lp_nydus, 0.0, c_timeAI);
        gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Roach", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
        gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(2, 4, 4, 6), "Zergling", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
        gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Zergling", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
        gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), libNtve_gf_DifficultyValueUnitType("Roach", "Roach", "Hydralisk", "Hydralisk"), lp_nydus, gv_nydusSpitPeriod, c_timeAI);
        gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(2, 4, 5, 6), "Zergling", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
        gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(0, 0, 1, 2), "Baneling", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
        return ;
    }

    gf_SpawnUnitsFromNydus(4, "Zergling", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
    gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Zergling", lp_nydus, 0.0, c_timeAI);
    gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "Roach", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
    gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(2, 2, 2, 2), "Hydralisk", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
    gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(1, 5, 4, 5), "Zergling", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
    gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "Infestor", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
    gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Zergling", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
    gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Baneling", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
}

void gf_SpawnAttackWaveFromNydusHeavy (unit lp_nydus) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_ArtifactChargePercent() <= 33.0)) {
        gf_SpawnUnitsFromNydus(5, "Zergling", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
        gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(2, 4, 5, 6), "Zergling", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
        gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), libNtve_gf_DifficultyValueUnitType("Roach", "Roach", "Hydralisk", "Hydralisk"), lp_nydus, gv_nydusSpitPeriod, c_timeAI);
        gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(3, 4, 5, 7), "Zergling", lp_nydus, 0.0, c_timeAI);
        gf_SpawnUnitsFromNydus(1, libNtve_gf_DifficultyValueUnitType("Roach", "Ultralisk", "Ultralisk", "Ultralisk"), lp_nydus, gv_nydusSpitPeriod, c_timeAI);
        gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(0, 0, 3, 4), "Zergling", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
        gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(1, 1, 2, 4), "Baneling", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
        return ;
    }

    gf_SpawnUnitsFromNydus(6, "Zergling", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
    gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Hydralisk", lp_nydus, 0.0, c_timeAI);
    gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Roach", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
    gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "Infestor", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
    gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(1, 2, 2, 3), "Hydralisk", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
    gf_SpawnUnitsFromNydus(1, "Ultralisk", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
    gf_SpawnUnitsFromNydus(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Baneling", lp_nydus, gv_nydusSpitPeriod, c_timeAI);
}

void gf_SpawnNydusWorm (int lp_count, region lp_region) {
    // Automatic Variable Declarations
    int auto395A7D1C_n;
    int auto395A7D1C_i;

    // Implementation
    if ((lp_count >= 1)) {
        gv_spawnNydusWormRegion = lp_region;
        auto395A7D1C_n = lp_count;
        for (auto395A7D1C_i = 1; auto395A7D1C_i <= auto395A7D1C_n; auto395A7D1C_i += 1) {
            TriggerExecute(gt_SpawnNydusWorm, true, false);
        }
    }

}

bool gf_CreepExistsAroundPoint (point lp_point) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoAD293901_ae = 4;
    const int autoAD293901_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CreepIsPresent(lp_point) == false)) {
        return false;
    }

    lv_i = 1;
    for ( ; ( (autoAD293901_ai >= 0 && lv_i <= autoAD293901_ae) || (autoAD293901_ai < 0 && lv_i >= autoAD293901_ae) ) ; lv_i += autoAD293901_ai ) {
        if ((CreepIsPresent(PointWithOffsetPolar(lp_point, 1.0, (IntToFixed(lv_i) * 90.0))) == false)) {
            return false;
        }

    }
    return true;
}

region gf_ZergDefenderSpawnArea (point lp_location) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((RegionContainsPoint(RegionFromId(18), lp_location) == true)) {
        return RegionFromId(5);
    }

    if ((RegionContainsPoint(RegionFromId(17), lp_location) == true)) {
        return RegionFromId(6);
    }

    if ((RegionContainsPoint(RegionFromId(16), lp_location) == true)) {
        return RegionFromId(7);
    }

    if ((RegionContainsPoint(RegionFromId(19), lp_location) == true)) {
        return RegionFromId(8);
    }

    if ((RegionContainsPoint(RegionFromId(20), lp_location) == true)) {
        return RegionFromId(9);
    }

    if ((RegionContainsPoint(RegionFromId(21), lp_location) == true)) {
        return RegionFromId(10);
    }

    if ((RegionContainsPoint(RegionFromId(39), lp_location) == true)) {
        return RegionFromId(11);
    }

    return RegionFromId(5);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_LoadCampaignData(libCamp_ge_MapID_MapTValerian03);
    TriggerExecute(gt_Init01Technology, true, true);
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04Music, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    libCamp_gf_RegisterFootageRecording(gt_BriefingQ);
    libCamp_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_IntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoF4746E7F_g;
    int autoF4746E7F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_zergPlayers, gv_pLAYER_ZERG_MAIN);
    PlayerGroupAdd(gv_zergPlayers, gv_pLAYER_ZERG_SOUTH);
    PlayerGroupAdd(gv_zergPlayers, gv_pLAYER_ZERG_EAST);
    PlayerGroupAdd(gv_zergPlayers, gv_pLAYER_ZERG_SPECIAL);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_ZERG_MAIN, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_ZERG_SOUTH, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_ZERG_EAST, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_ZERG_SPECIAL, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetPlayerGroupAlliance(gv_zergPlayers, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    PlayerModifyPropertyInt(gv_pLAYER_USER, c_playerPropMinerals, c_playerPropOperSetTo, 1200);
    PlayerModifyPropertyInt(gv_pLAYER_USER, c_playerPropVespene, c_playerPropOperSetTo, 1000);
    autoF4746E7F_g = gv_zergPlayers;
    autoF4746E7F_var = -1;
    while (true) {
        autoF4746E7F_var = PlayerGroupNextPlayer(autoF4746E7F_g, autoF4746E7F_var);
        if (autoF4746E7F_var < 0) { break; }
        PlayerModifyPropertyInt(autoF4746E7F_var, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
        PlayerModifyPropertyInt(autoF4746E7F_var, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    }
    PlayerModifyPropertyInt(gv_pLAYER_ZERG_MAIN, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 400);
    PlayerModifyPropertyInt(gv_pLAYER_ZERG_SOUTH, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 400);
    PlayerModifyPropertyInt(gv_pLAYER_ZERG_EAST, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 400);
    PlayerSetColorIndex(gv_pLAYER_ZERG_SOUTH, 4, true);
    PlayerSetColorIndex(gv_pLAYER_ZERG_EAST, 4, true);
    PlayerSetColorIndex(gv_pLAYER_ZERG_SPECIAL, 4, true);
    gv_specialUnitColor = 6;
    PlayerSetState(gv_pLAYER_ZERG_SPECIAL, c_playerStateShowScore, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto02146F9D_g;
    int auto02146F9D_u;
    unit auto02146F9D_var;
    unitgroup auto0098B004_g;
    int auto0098B004_u;
    unit auto0098B004_var;
    unitgroup autoE675049B_g;
    int autoE675049B_u;
    unit autoE675049B_var;
    unitgroup autoDEB2E354_g;
    int autoDEB2E354_u;
    unit autoDEB2E354_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_AmbientOverlordInitialization, true, false);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("EnergyNova", 0), false);
    UnitSetPropertyFixed(UnitFromId(1543), c_unitPropLifePercent, 73.0);
    UnitSetPropertyFixed(UnitFromId(1025), c_unitPropLifePercent, 62.0);
    UnitSetPropertyFixed(UnitFromId(1), c_unitPropEnergy, 50.0);
    auto02146F9D_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterCanHaveEnergy), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto02146F9D_u = UnitGroupCount(auto02146F9D_g, c_unitCountAll);
    for (;; auto02146F9D_u -= 1) {
        auto02146F9D_var = UnitGroupUnitFromEnd(auto02146F9D_g, auto02146F9D_u);
        if (auto02146F9D_var == null) { break; }
        UnitSetPropertyFixed(auto02146F9D_var, c_unitPropEnergyPercent, 100.0);
    }
    TriggerExecute(gt_InitializeDefenders, true, false);
    auto0098B004_g = UnitGroup("CreepTumorBurrowed", gv_pLAYER_ZERG_SPECIAL, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0098B004_u = UnitGroupCount(auto0098B004_g, c_unitCountAll);
    for (;; auto0098B004_u -= 1) {
        auto0098B004_var = UnitGroupUnitFromEnd(auto0098B004_g, auto0098B004_u);
        if (auto0098B004_var == null) { break; }
        CreepModify(UnitGetPosition(auto0098B004_var), 10.0, true, true);
        UnitRemove(auto0098B004_var);
    }
    autoE675049B_g = UnitGroup("SpineCrawler", gv_pLAYER_ZERG_SPECIAL, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE675049B_u = UnitGroupCount(autoE675049B_g, c_unitCountAll);
    for (;; autoE675049B_u -= 1) {
        autoE675049B_var = UnitGroupUnitFromEnd(autoE675049B_g, autoE675049B_u);
        if (autoE675049B_var == null) { break; }
        if ((CreepIsPresent(UnitGetPosition(autoE675049B_var)) == false)) {
            UnitKill(autoE675049B_var);
        }

    }
    autoDEB2E354_g = UnitGroup("SporeCrawler", gv_pLAYER_ZERG_SPECIAL, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDEB2E354_u = UnitGroupCount(autoDEB2E354_g, c_unitCountAll);
    for (;; autoDEB2E354_u -= 1) {
        autoDEB2E354_var = UnitGroupUnitFromEnd(autoDEB2E354_g, autoDEB2E354_u);
        if (autoDEB2E354_var == null) { break; }
        if ((CreepIsPresent(UnitGetPosition(autoDEB2E354_var)) == false)) {
            UnitKill(autoDEB2E354_var);
        }

    }
    AISetUnitScriptControlled(gv_kerrigan, true);
    if ((gf_ABChoiceA() == true)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "BroodLord", 0, gv_pLAYER_ZERG_SOUTH, PointFromId(587));
        UnitRemove(UnitFromId(269));
        UnitRemove(UnitFromId(268));
        UnitRemove(UnitFromId(306));
        UnitRemove(UnitFromId(377));
        UnitRemove(UnitFromId(369));
    }
    else {
        libNtve_gf_CreateUnitsAtPoint2(1, "Ultralisk", 0, gv_pLAYER_ZERG_SOUTH, PointFromId(587));
        UnitRemove(UnitFromId(1570));
        UnitRemove(UnitFromId(1571));
        UnitRemove(UnitFromId(267));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init04Music_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TValerian03MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Music_Init () {
    gt_Init04Music = TriggerCreate("gt_Init04Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealerCreate(gv_pLAYER_USER, RegionFromId(1));
    gv_artifactRevealer = VisRevealerLastCreated();
    VisRevealerEnable(gv_artifactRevealer, false);
    VisRevealerCreate(gv_pLAYER_USER, RegionFromId(33));
    GameTimeOfDaySet("08:00:00");
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "CharRibs", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    GameSetBackground(c_backgroundFixed, null, 100.0);
    if ((gf_ABChoiceA() == true)) {
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "DestroyedPlatformChunks");
    }
    else {
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "DestroyedNydusWorm");
    }
    libNtve_gf_PreloadModelObject("ArtifactFullyCharged", false);
    libNtve_gf_PreloadModelObject("ArtifactActivated", false);
    libNtve_gf_PreloadModelObject("PowerOverwhelming", false);
    CreepModify(PointFromId(215), 10.0, true, true);
    CreepModify(PointFromId(216), 10.0, true, true);
    CreepModify(PointFromId(217), 10.0, true, true);
    CreepModify(PointFromId(349), 10.0, true, true);
    CreepModify(PointFromId(350), 10.0, true, true);
    CreepModify(PointFromId(351), 10.0, true, true);
    CreepModify(PointFromId(352), 10.0, true, true);
    CreepModify(PointFromId(353), 10.0, true, true);
    CreepModify(PointFromId(355), 10.0, true, true);
    CreepModify(PointFromId(358), 10.0, true, true);
    CreepModify(PointFromId(361), 10.0, true, true);
    CreepModify(PointFromId(365), 10.0, true, true);
    CreepModify(PointFromId(368), 10.0, true, true);
    CreepModify(PointFromId(225), 10.0, true, true);
    CreepModify(PointFromId(631), 10.0, true, true);
    CreepModify(PointFromId(657), 10.0, true, true);
    CreepModify(PointFromId(662), 10.0, true, true);
    CreepModify(PointFromId(664), 10.0, true, true);
    CreepModify(PointFromId(666), 10.0, true, true);
    CreepModify(PointFromId(667), 10.0, true, true);
    CreepModify(PointFromId(668), 10.0, true, true);
    CreepModify(PointFromId(324), 10.0, true, true);
    CreepModify(PointFromId(376), 10.0, true, true);
    CreepModify(PointFromId(378), 10.0, true, true);
    CreepModify(PointFromId(531), 10.0, true, true);
    CreepModify(PointFromId(533), 10.0, true, true);
    CreepModify(PointFromId(425), 10.0, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto2008B5F2_g;
    int auto2008B5F2_var;
    playergroup auto8D73373B_g;
    int auto8D73373B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerDifficulty(gv_pLAYER_USER) == 1)) {
        auto2008B5F2_g = gv_zergPlayers;
        auto2008B5F2_var = -1;
        while (true) {
            auto2008B5F2_var = PlayerGroupNextPlayer(auto2008B5F2_g, auto2008B5F2_var);
            if (auto2008B5F2_var < 0) { break; }
            PlayerModifyPropertyInt(auto2008B5F2_var, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        }
    }

    gv_artifactChargeMax = 1800.0;
    gv_artifactChargeIncrement = 1.0;
    gv_persistentWaitEarly = libNtve_gf_DifficultyValueFixed(30.0, 30.0, 25.0, 20.0);
    gv_persistentWaitLate = libNtve_gf_DifficultyValueFixed(20.0, 20.0, 15.0, 13.0);
    gv_kerriganEscortNumber = libNtve_gf_DifficultyValueInt(0, 0, 3, 6);
    gv_nydusWormHP = libNtve_gf_DifficultyValueFixed(200.0, 300.0, 400.0, 500.0);
    gv_leviathanMaxHP = libNtve_gf_DifficultyValueFixed(1500.0, 2000.0, 2500.0, 3000.0);
    gv_leviathanMaxEnergy = libNtve_gf_DifficultyValueFixed(500.0, 500.0, 750.0, 1000.0);
    gv_nydusSpitPeriod = libNtve_gf_DifficultyValueFixed(0.6, 0.6, 0.55, 0.5);
    gv_kerriganMaxHP = libNtve_gf_DifficultyValueFixed(600.0, 1000.0, 1250.0, 1500.0);
    gv_kerriganMaxEnergy = libNtve_gf_DifficultyValueFixed(250.0, 250.0, 375.0, 500.0);
    auto8D73373B_g = gv_zergPlayers;
    auto8D73373B_var = -1;
    while (true) {
        auto8D73373B_var = PlayerGroupNextPlayer(auto8D73373B_g, auto8D73373B_var);
        if (auto8D73373B_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto8D73373B_var, "zerglingmovementspeed", 1);
        TechTreeUpgradeAddLevel(auto8D73373B_var, "hydraliskspeed", 1);
        TechTreeUpgradeAddLevel(auto8D73373B_var, "GlialReconstitution", 1);
        TechTreeUpgradeAddLevel(auto8D73373B_var, "AbdominalFortitude", 1);
        TechTreeUpgradeAddLevel(auto8D73373B_var, "CentrificalHooks", 1);
        TechTreeUpgradeAddLevel(auto8D73373B_var, "InfestorEnergyUpgrade", 1);
        TechTreeUpgradeAddLevel(auto8D73373B_var, "ZergMeleeWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(auto8D73373B_var, "ZergMissileWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(auto8D73373B_var, "ZergFlyerWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(auto8D73373B_var, "ZergGroundArmorsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        TechTreeUpgradeAddLevel(auto8D73373B_var, "ZergFlyerArmorsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
    }
    TechTreeAbilityAllow(gv_pLAYER_ZERG_MAIN, AbilityCommand("OmegaStorm", 0), false);
    TechTreeUpgradeAddLevel(gv_pLAYER_ZERG_MAIN, "overlordtransport", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_ZERG_MAIN, "overlordspeed", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_AddUnitTypeToUnitHelpPanel("Drone", false, gv_pLAYER_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Zergling", false, gv_pLAYER_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Baneling", false, gv_pLAYER_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Roach", false, gv_pLAYER_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", false, gv_pLAYER_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Infestor", false, gv_pLAYER_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Ultralisk", false, gv_pLAYER_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("KerriganChar", false, gv_pLAYER_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Overlord", false, gv_pLAYER_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Overseer", false, gv_pLAYER_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SpineCrawler", false, gv_pLAYER_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SporeCrawler", false, gv_pLAYER_USER);
    if ((gf_ABChoiceA() == true)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Mutalisk", false, gv_pLAYER_USER);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Scourge", false, gv_pLAYER_USER);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Corruptor", false, gv_pLAYER_USER);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("BroodLord", false, gv_pLAYER_USER);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Leviathan", false, gv_pLAYER_USER);
    }
    else {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("NydusCanal", false, gv_pLAYER_USER);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game
//--------------------------------------------------------------------------------------------------
bool gt_StartGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_KerriganPing, true, false);
    TriggerExecute(gt_InitalKerriganPrep, true, false);
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_ObjectiveArtifactCreateQ, true, false);
    TriggerExecute(gt_ArtifactStatus, true, false);
    TriggerExecute(gt_ZergAttackWavesMain, true, false);
    TriggerExecute(gt_ZergUpgradesAdvanced, true, false);
    TriggerExecute(gt_ZergUpgradesExpert, true, false);
    TriggerExecute(gt_ZergAttackWavesPersistent, true, false);
    TriggerExecute(gt_KerriganRetreatingfromLowLife, true, false);
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_BunkerQ, true, false);
    Wait(4.0, c_timeReal);
    TriggerExecute(gt_CampaignTipQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGame_Init () {
    gt_StartGame = TriggerCreate("gt_StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Campaign Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_CampaignTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateStorymodeTips();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CampaignTipQ_Init () {
    gt_CampaignTipQ = TriggerCreate("gt_CampaignTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Crashing Debris
//--------------------------------------------------------------------------------------------------
bool gt_CreateCrashingDebris_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gf_ABChoiceA() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnCrashingDoodad(PointFromId(2076), "CharCrashingDebrisFire");
    Wait(1.0, c_timeGame);
    gf_SpawnCrashingDoodad(PointFromId(2076), "CharCrashingDebrisFire");
    Wait(1.0, c_timeGame);
    gf_SpawnCrashingDoodad(PointFromId(2076), "CharCrashingDebrisFire");
    Wait(1.0, c_timeGame);
    gf_SpawnCrashingDoodad(PointFromId(2076), "CharCrashingDebrisFire");
    Wait(1.0, c_timeGame);
    gf_SpawnCrashingDoodad(PointFromId(2076), "CharCrashingDebrisFire");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateCrashingDebris_Init () {
    gt_CreateCrashingDebris = TriggerCreate("gt_CreateCrashingDebris_Func");
    TriggerAddEventTimePeriodic(gt_CreateCrashingDebris, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Artifact Status
//--------------------------------------------------------------------------------------------------
bool gt_ArtifactStatus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_energyNovaButtonText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ArtifactCharging, true, false);
    VisRevealerEnable(gv_artifactRevealer, true);
    BoardCreate(1, 2, StringExternal("Param/Value/21DB17A4"), Color(100.00, 100.00, 100.00));
    gv_artifactBoard = BoardLastCreated();
    BoardItemSetText(gv_artifactBoard, 1, c_boardRowHeader, StringExternal("Param/Value/9C83DB5C"));
    BoardItemSetTextColor(gv_artifactBoard, 1, c_boardRowHeader, Color(0.00, 100.00, 0.00));
    BoardSetState(gv_artifactBoard, PlayerGroupAll(), c_boardStateShowHeader, true);
    BoardSetState(gv_artifactBoard, PlayerGroupAll(), c_boardStateShowTitle, false);
    BoardSetColumnWidth(gv_artifactBoard, 1, 25.0);
    BoardItemSetAlignment(gv_artifactBoard, 1, 1, c_alignCenter);
    BoardItemSetAlignment(gv_artifactBoard, 1, 2, c_alignCenter);
    BoardItemSetAlignment(gv_artifactBoard, 1, 3, c_alignCenter);
    BoardItemSetProgressShow(gv_artifactBoard, 1, 2, true);
    BoardItemSetProgressRange(gv_artifactBoard, 1, 2, 0.0, 1.0);
    BoardItemSetProgressColor(gv_artifactBoard, 1, 2, Color(50.20, 50.20, 100.00), 1);
    BoardItemSetProgressValue(gv_artifactBoard, 1, 2, (gv_artifactChargeCurrent / gv_artifactChargeMax));
    BoardItemSetText(gv_artifactBoard, 1, 1, (StringExternal("Param/Value/DE6AFFF6") + FixedToText(gf_ArtifactChargePercent(), 1) + StringExternal("Param/Value/F2914021")));
    BoardItemSetFontSize(gv_artifactBoard, 1, 1, 18);
    BoardShowAll(true, PlayerGroupAll());
    libNtve_gf_DisplayScreenButton(1, (StringExternal("Param/Value/EE7FA59B") + StringExternal("Param/Value/470B45ED") + libCamp_gf_FormatTimeCampaign(FixedToInt(UnitAbilityGetCooldown(gv_artifact, "EnergyNova", "Abil/Supernova"))) + StringExternal("Param/Value/21D8590C")), 400, 132, c_anchorTopRight, 15, 225, gt_EnergyNovaButton);
    DialogControlSetEnabled(libNtve_gf_ScreenButton(1), PlayerGroupAll(), false);
    libNtve_gf_HideScreenButton(true, 1);
    SoundPlay(SoundLink("UI_DropdownListSelect", -1), PlayerGroupAll(), 100.0, 0.0);
    while (true) {
        Wait(1.0, c_timeGame);
        BoardItemSetProgressValue(gv_artifactBoard, 1, 2, (gv_artifactChargeCurrent / gv_artifactChargeMax));
        BoardItemSetText(gv_artifactBoard, 1, 1, (StringExternal("Param/Value/CE5FAE7A") + FixedToText(gf_ArtifactChargePercent(), 1) + StringExternal("Param/Value/CEEF6569")));
        if ((gv_gameOver == true)) {
            return true;
        }

        if ((UnitAbilityGetCooldown(gv_artifact, "EnergyNova", "Abil/Supernova") == 0.0)) {
            libNtve_gf_SetDialogItemText(libNtve_gf_ScreenButton(1), StringExternal("Param/Value/FC58AB37"), PlayerGroupAll());
            DialogControlSetEnabled(libNtve_gf_ScreenButton(1), PlayerGroupAll(), true);
            libNtve_gf_FlashScreenButton(1, 2.0, ColorWithAlpha(0.00, 100.00, 100.00, 0.00), ColorWithAlpha(100.00, 100.00, 100.00, 0.00));
        }
        else {
            libNtve_gf_SetDialogItemText(libNtve_gf_ScreenButton(1), (StringExternal("Param/Value/ADB51156") + StringExternal("Param/Value/D927B1B4") + libCamp_gf_FormatTimeCampaign(FixedToInt(UnitAbilityGetCooldown(gv_artifact, "EnergyNova", "Abil/Supernova"))) + StringExternal("Param/Value/4B589141")), PlayerGroupAll());
            DialogControlSetEnabled(libNtve_gf_ScreenButton(1), PlayerGroupAll(), false);
            libNtve_gf_StopFlashingScreenButton(1);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArtifactStatus_Init () {
    gt_ArtifactStatus = TriggerCreate("gt_ArtifactStatus_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Artifact Charging
//--------------------------------------------------------------------------------------------------
bool gt_ArtifactCharging_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeAI);
        gv_artifactChargeCurrent += gv_artifactChargeIncrement;
        if ((gv_artifactChargeCurrent >= gv_artifactChargeMax)) {
            gv_artifactChargeCurrent = gv_artifactChargeMax;
            TriggerExecute(gt_VictoryArtifactCharged, true, false);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArtifactCharging_Init () {
    gt_ArtifactCharging = TriggerCreate("gt_ArtifactCharging_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bunker Q
//--------------------------------------------------------------------------------------------------
bool gt_BunkerQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian03Horner00042", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian03Horner00042", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TValerian03Horner00043", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian03Horner00043", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(2.0, c_timeReal);
    libCamp_gf_CreateTipFromConversationState("StoryTips|Valerian03_EnergyNova", libNtve_ge_TipType_NewAbility, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BunkerQ_Init () {
    gt_BunkerQ = TriggerCreate("gt_BunkerQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Artifact Close Q
//--------------------------------------------------------------------------------------------------
bool gt_ArtifactCloseQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian03Horner00041", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian03Horner00041", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArtifactCloseQ_Init () {
    gt_ArtifactCloseQ = TriggerCreate("gt_ArtifactCloseQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Energy Nova Q
//--------------------------------------------------------------------------------------------------
bool gt_EnergyNovaQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_energyQPendingCount += 1;
    while (true) {
        Wait(1.0, c_timeGame);
        if ((gv_energyQPendingCount > 1)) {
            gv_energyQPendingCount -= 1;
            return true;
        }

        if ((UnitAbilityGetCooldown(UnitFromId(42), "EnergyNova", "Abil/Supernova") == 0.0)) {
            gv_energyQPendingCount -= 1;
            break;
        }

    }
    TriggerQueueEnter();
    if (((gv_gameOver == true) || (gv_energyQPendingCount > 0))) {
        return true;
    }

    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(42)), 5.0, Color(0.00, 100.00, 100.00));
    UIAlertUnit("Trigger", gv_pLAYER_USER, StringExternal("Param/Value/90A15ECA"), "Assets\\Textures\\btn-ability-terran-emp.dds", UnitFromId(42));
    Wait(1.0, c_timeReal);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian03Adjutant00003", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian03Adjutant00003", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnergyNovaQ_Init () {
    gt_EnergyNovaQ = TriggerCreate("gt_EnergyNovaQ_Func");
    TriggerAddEventUnitAbility(gt_EnergyNovaQ, UnitRefFromUnit(UnitFromId(42)), AbilityCommand("EnergyNova", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Energy Nova Kills
//--------------------------------------------------------------------------------------------------
bool gt_EnergyNovaKills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((libNtve_gf_KillingUnit() == gv_artifact))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_energyNovaKills += 1;
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_energyNovaKills == 150)) {
        AchievementAward(gv_pLAYER_USER, "TValerian03_2");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnergyNovaKills_Init () {
    gt_EnergyNovaKills = TriggerCreate("gt_EnergyNovaKills_Func");
    TriggerAddEventUnitDied(gt_EnergyNovaKills, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Energy Nova Used
//--------------------------------------------------------------------------------------------------
bool gt_EnergyNovaUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_energyNovasUsed += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnergyNovaUsed_Init () {
    gt_EnergyNovaUsed = TriggerCreate("gt_EnergyNovaUsed_Func");
    TriggerAddEventUnitAbility(gt_EnergyNovaUsed, UnitRefFromUnit(UnitFromId(42)), AbilityCommand("EnergyNova", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Energy Nova Button
//--------------------------------------------------------------------------------------------------
bool gt_EnergyNovaButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("UI_ActionButtonSelect", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitIssueOrder(gv_artifact, Order(AbilityCommand("EnergyNova", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnergyNovaButton_Init () {
    gt_EnergyNovaButton = TriggerCreate("gt_EnergyNovaButton_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Energy Nova Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_EnergyNovaWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto87B403FB_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitAbilityGetCooldown(gv_artifact, "EnergyNova", "Abil/Supernova") == 0.0))) {
            return false;
        }

        if (!(((gv_recentBuildingDeaths >= 3) || (UnitGroupCount(UnitGroupAlliance(gv_pLAYER_USER, c_unitAllianceEnemy, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 75)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if (((gv_gameOver == true) || (UnitAbilityGetCooldown(gv_artifact, "EnergyNova", "Abil/Supernova") != 0.0) || ((gv_recentBuildingDeaths < 2) && (UnitGroupCount(UnitGroupAlliance(gv_pLAYER_USER, c_unitAllianceEnemy, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 60)))) {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    auto87B403FB_val = RandomInt(1, 3);
    if (auto87B403FB_val == 1) {
        // Transmission - SoundLink("TValerian03Horner00070", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian03Horner00070", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else if (auto87B403FB_val == 2) {
        // Transmission - SoundLink("TValerian03Horner00071", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian03Horner00071", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else if (auto87B403FB_val == 3) {
        // Transmission - SoundLink("TValerian03Horner00072", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian03Horner00072", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else {
    }
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    Wait(60.0, c_timeReal);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnergyNovaWarningQ_Init () {
    gt_EnergyNovaWarningQ = TriggerCreate("gt_EnergyNovaWarningQ_Func");
    TriggerAddEventTimePeriodic(gt_EnergyNovaWarningQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Building Dies
//--------------------------------------------------------------------------------------------------
bool gt_BuildingDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_USER))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "DefenseWallE"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "DefenseWallN"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "DefenseWallNE"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "DefenseWallNW"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "DefenseWallS"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "DefenseWallSE"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "DefenseWallSW"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "DefenseWallW"))) {
            return false;
        }

        if (!(((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_ZERG_MAIN) || (UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_ZERG_SOUTH) || (UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_ZERG_EAST) || (UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_ZERG_SPECIAL)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_recentBuildingDeaths += 1;
    gv_recentBuildingDeathHistory[10] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuildingDies_Init () {
    gt_BuildingDies = TriggerCreate("gt_BuildingDies_Func");
    TriggerAddEventUnitDied(gt_BuildingDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Building Death History Update
//--------------------------------------------------------------------------------------------------
bool gt_BuildingDeathHistoryUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto6459C174_ae = 9;
    const int auto6459C174_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_recentBuildingDeaths = (gv_recentBuildingDeaths - gv_recentBuildingDeathHistory[1]);
    gv_recentBuildingDeaths = MaxI(gv_recentBuildingDeaths, 0);
    lv_i = 1;
    for ( ; ( (auto6459C174_ai >= 0 && lv_i <= auto6459C174_ae) || (auto6459C174_ai < 0 && lv_i >= auto6459C174_ae) ) ; lv_i += auto6459C174_ai ) {
        gv_recentBuildingDeathHistory[lv_i] = gv_recentBuildingDeathHistory[(lv_i + 1)];
    }
    gv_recentBuildingDeathHistory[10] = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuildingDeathHistoryUpdate_Init () {
    gt_BuildingDeathHistoryUpdate = TriggerCreate("gt_BuildingDeathHistoryUpdate_Func");
    TriggerAddEventTimePeriodic(gt_BuildingDeathHistoryUpdate, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_AIFreeMoney, true, false);
    TriggerExecute(gt_InitializeSpawnRegions, true, false);
    AICampaignStart(gv_pLAYER_ZERG_MAIN);
    AICampaignStart(gv_pLAYER_ZERG_SOUTH);
    AICampaignStart(gv_pLAYER_ZERG_EAST);
    AICampaignStart(gv_pLAYER_ZERG_SPECIAL);
    AISetAPM(gv_pLAYER_ZERG_MAIN, 9001);
    AISetAPM(gv_pLAYER_ZERG_SOUTH, 9001);
    AISetAPM(gv_pLAYER_ZERG_EAST, 9001);
    AISetAPM(gv_pLAYER_ZERG_SPECIAL, 9001);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Spawn Regions
//--------------------------------------------------------------------------------------------------
bool gt_InitializeSpawnRegions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mainSpawnRegions[1] = RegionFromId(5);
    gv_mainSpawnRegions[2] = RegionFromId(6);
    gv_mainSpawnRegions[3] = RegionFromId(7);
    gv_mainSpawnRegions[4] = RegionFromId(8);
    gv_mainSpawnRegions[5] = RegionFromId(9);
    gv_mainSpawnRegions[6] = RegionFromId(10);
    gv_persistentSpawnRegions[0] = RegionFromId(5);
    gv_persistentSpawnRegions[1] = RegionFromId(8);
    gv_persistentSpawnRegions[2] = RegionFromId(6);
    gv_persistentSpawnRegions[3] = RegionFromId(9);
    gv_persistentSpawnRegions[4] = RegionFromId(7);
    gv_persistentSpawnRegions[5] = RegionFromId(10);
    gv_persistentSpawnRegions[6] = RegionFromId(8);
    gv_persistentSpawnRegions[7] = RegionFromId(5);
    gv_persistentSpawnRegions[8] = RegionFromId(6);
    gv_persistentSpawnRegions[9] = RegionFromId(8);
    gv_persistentSpawnRegions[10] = RegionFromId(10);
    gv_persistentSpawnRegions[11] = RegionFromId(5);
    gv_persistentSpawnRegions[12] = RegionFromId(9);
    gv_persistentSpawnRegions[13] = RegionFromId(5);
    gv_persistentSpawnRegions[14] = RegionFromId(7);
    gv_persistentSpawnRegions[15] = RegionFromId(8);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeSpawnRegions_Init () {
    gt_InitializeSpawnRegions = TriggerCreate("gt_InitializeSpawnRegions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Upgrades - Advanced
//--------------------------------------------------------------------------------------------------
bool gt_ZergUpgradesAdvanced_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 1, 0) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_WaitMinutes(5.0, c_timeAI);
    gf_AddUpgradeToZerg("ZergGroundArmorsLevel1");
    gf_AddUpgradeToZerg("ZergFlyerArmorsLevel1");
    gf_WaitMinutes(3.0, c_timeAI);
    gf_AddUpgradeToZerg("ZergMeleeWeaponsLevel2");
    gf_WaitMinutes(3.0, c_timeAI);
    gf_AddUpgradeToZerg("ZergMissileWeaponsLevel2");
    gf_AddUpgradeToZerg("ZergFlyerWeaponsLevel2");
    gf_WaitMinutes(3.0, c_timeAI);
    gf_AddUpgradeToZerg("ZergFlyerArmorsLevel2");
    gf_WaitMinutes(4.0, c_timeAI);
    gf_AddUpgradeToZerg("ZergGroundArmorsLevel2");
    gf_AddUpgradeToZerg("ZergMeleeWeaponsLevel3");
    gf_WaitMinutes(4.0, c_timeAI);
    gf_AddUpgradeToZerg("ZergMissileWeaponsLevel3");
    gf_WaitMinutes(4.0, c_timeAI);
    gf_AddUpgradeToZerg("ZergGroundArmorsLevel3");
    gf_WaitMinutes(3.0, c_timeAI);
    gf_AddUpgradeToZerg("ZergFlyerWeaponsLevel3");
    gf_AddUpgradeToZerg("ZergFlyerArmorsLevel3");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergUpgradesAdvanced_Init () {
    gt_ZergUpgradesAdvanced = TriggerCreate("gt_ZergUpgradesAdvanced_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Upgrades - Expert
//--------------------------------------------------------------------------------------------------
bool gt_ZergUpgradesExpert_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_WaitMinutes(5.0, c_timeAI);
    gf_AddUpgradeToZerg("ZergMeleeWeaponsLevel2");
    gf_AddUpgradeToZerg("ZergMissileWeaponsLevel2");
    gf_WaitMinutes(3.0, c_timeAI);
    gf_AddUpgradeToZerg("ZergFlyerWeaponsLevel2");
    gf_AddUpgradeToZerg("ZergFlyerArmorsLevel2");
    gf_WaitMinutes(3.0, c_timeAI);
    gf_AddUpgradeToZerg("ZergGroundArmorsLevel2");
    gf_WaitMinutes(3.0, c_timeAI);
    gf_AddUpgradeToZerg("ZergMeleeWeaponsLevel3");
    gf_WaitMinutes(4.0, c_timeAI);
    gf_AddUpgradeToZerg("ZergMissileWeaponsLevel3");
    gf_WaitMinutes(4.0, c_timeAI);
    gf_AddUpgradeToZerg("ZergGroundArmorsLevel3");
    gf_WaitMinutes(4.0, c_timeAI);
    gf_AddUpgradeToZerg("ZergFlyerWeaponsLevel3");
    gf_AddUpgradeToZerg("ZergFlyerArmorsLevel3");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergUpgradesExpert_Init () {
    gt_ZergUpgradesExpert = TriggerCreate("gt_ZergUpgradesExpert_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack Waves - Persistent
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackWavesPersistent_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_delayFirstWave;
    int lv_currentRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentRegion = 15;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_delayFirstWave == 0)) {
        Wait(30.0, c_timeAI);
        lv_delayFirstWave = 1;
    }

    Wait(60.0, c_timeAI);
    while (true) {
        if ((gv_gameOver == true)) {
            return true;
        }

        lv_currentRegion += 1;
        if ((lv_currentRegion >= 16)) {
            lv_currentRegion = 0;
        }

        gf_SetAttackWaveParameters(gv_persistentSpawnRegions[lv_currentRegion]);
        if ((gf_ArtifactChargePercent() < 25.0)) {
            gf_AddUnitsToSpawnedAttackWave(libNtve_gf_DifficultyValueInt(4, 4, 6, 6), "Zergling", gv_persistentSpawnRegions[lv_currentRegion]);
            gf_AddUnitsToSpawnedAttackWave(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), gf_ABUnit("Mutalisk", "Hydralisk"), gv_persistentSpawnRegions[lv_currentRegion]);
        }

        if ((gf_ArtifactChargePercent() >= 25.0) && (gf_ArtifactChargePercent() < 60.0)) {
            gf_AddUnitsToSpawnedAttackWave(libNtve_gf_DifficultyValueInt(4, 4, 7, 7), "Zergling", gv_persistentSpawnRegions[lv_currentRegion]);
            gf_AddUnitsToSpawnedAttackWave(libNtve_gf_DifficultyValueInt(2, 2, 2, 3), gf_ABUnit("Mutalisk", "Roach"), gv_persistentSpawnRegions[lv_currentRegion]);
        }

        if ((gf_ArtifactChargePercent() >= 60.0)) {
            gf_AddUnitsToSpawnedAttackWave(libNtve_gf_DifficultyValueInt(6, 6, 7, 8), "Zergling", gv_persistentSpawnRegions[lv_currentRegion]);
            gf_AddUnitsToSpawnedAttackWave(libNtve_gf_DifficultyValueInt(3, 3, 3, 4), gf_ABUnit("Mutalisk", "Hydralisk"), gv_persistentSpawnRegions[lv_currentRegion]);
        }

        gf_SendSpawnedAttackWave();
        if ((gf_ArtifactChargePercent() >= 80.0)) {
            Wait(gv_persistentWaitLate, c_timeAI);
        }
        else {
            Wait(gv_persistentWaitEarly, c_timeAI);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackWavesPersistent_Init () {
    gt_ZergAttackWavesPersistent = TriggerCreate("gt_ZergAttackWavesPersistent_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack Waves - Main
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackWavesMain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ZergAttackWavesMainA08mins, true, true);
    TriggerExecute(gt_ZergAttackWavesMainB813mins, true, true);
    TriggerExecute(gt_ZergAttackWavesMainC1318mins, true, true);
    TriggerExecute(gt_ZergAttackWavesMainD1822minsLeviathan, true, true);
    TriggerExecute(gt_ZergAttackWavesMainE2226mins, true, true);
    TriggerExecute(gt_ZergAttackWavesMainF2629mins, true, true);
    TriggerExecute(gt_ZergAttackWavesMainG2930mins, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackWavesMain_Init () {
    gt_ZergAttackWavesMain = TriggerCreate("gt_ZergAttackWavesMain_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack Waves - Main A (0 - 8 mins)
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackWavesMainA08mins_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoA24794ED_ae = 3;
    const int autoA24794ED_ai = 1;
    const int autoB59DDC6A_ae = 6;
    const int autoB59DDC6A_ai = 1;
    const int autoFAE12993_ae = 3;
    const int autoFAE12993_ai = 1;
    const int auto9F4D3885_ae = 6;
    const int auto9F4D3885_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(60.0, c_timeAI);
    lv_i = 1;
    for ( ; ( (autoA24794ED_ai >= 0 && lv_i <= autoA24794ED_ae) || (autoA24794ED_ai < 0 && lv_i >= autoA24794ED_ae) ) ; lv_i += autoA24794ED_ai ) {
        gf_SetAttackWaveParameters(gv_mainSpawnRegions[lv_i]);
        AIAttackWaveAddUnits4(8, 8, 7, 7, "Zergling");
        AIAttackWaveAddUnits4(0, 0, 1, 2, "Roach");
        AIAttackWaveSend(gv_nextWavePlayer, 120, false);
        gf_SetAttackWaveParameters(gv_mainSpawnRegions[lv_i]);
        AIAttackWaveAddUnits4(1, 1, 2, gf_Lookup(lv_i, 2, 2, 2, 2, 1, 2), gf_ABUnit("Mutalisk", "Hydralisk"));
        AIAttackWaveSend(gv_nextWavePlayer, 130, false);
        Wait(5.0, c_timeAI);
    }
    Wait(45.0, c_timeAI);
    lv_i = 4;
    for ( ; ( (autoB59DDC6A_ai >= 0 && lv_i <= autoB59DDC6A_ae) || (autoB59DDC6A_ai < 0 && lv_i >= autoB59DDC6A_ae) ) ; lv_i += autoB59DDC6A_ai ) {
        gf_SetAttackWaveParameters(gv_mainSpawnRegions[lv_i]);
        AIAttackWaveAddUnits4(12, 12, 13, 20, "Zergling");
        AIAttackWaveSend(gv_nextWavePlayer, 120, false);
        gf_SetAttackWaveParameters(gv_mainSpawnRegions[lv_i]);
        AIAttackWaveAddUnits4(1, 1, 2, gf_Lookup(lv_i, 2, 2, 2, 2, 1, 2), gf_ABUnit("Mutalisk", "Hydralisk"));
        AIAttackWaveSend(gv_nextWavePlayer, 130, false);
        Wait(5.0, c_timeAI);
    }
    Wait(105.0, c_timeAI);
    if ((gf_ABChoiceA() == true)) {
        gf_SetAttackWaveParameters(gv_mainSpawnRegions[4]);
        AIAttackWaveAddUnits4(1, 1, 1, 1, "BroodLord");
        AIAttackWaveSend(gv_nextWavePlayer, 120, false);
    }
    else {
        gf_SetAttackWaveParameters(gv_mainSpawnRegions[2]);
        AIAttackWaveAddUnits4(2, 2, 2, 2, "Hydralisk");
        AIAttackWaveSend(gv_nextWavePlayer, 120, false);
        gf_SetAttackWaveParameters(gv_mainSpawnRegions[4]);
        AIAttackWaveAddUnits4(2, 2, 2, 0, "Hydralisk");
        AIAttackWaveAddUnits4(0, 0, 0, 1, "Ultralisk");
        AIAttackWaveSend(gv_nextWavePlayer, 120, false);
    }
    lv_i = 1;
    for ( ; ( (autoFAE12993_ai >= 0 && lv_i <= autoFAE12993_ae) || (autoFAE12993_ai < 0 && lv_i >= autoFAE12993_ae) ) ; lv_i += autoFAE12993_ai ) {
        gf_SetAttackWaveParameters(gv_mainSpawnRegions[lv_i]);
        AIAttackWaveAddUnits4(2, 2, 3, 1, "Roach");
        AIAttackWaveSend(gv_nextWavePlayer, 120, false);
        gf_SetAttackWaveParameters(gv_mainSpawnRegions[lv_i]);
        AIAttackWaveAddUnits4(12, 12, 16, 20, "Zergling");
        AIAttackWaveSend(gv_nextWavePlayer, 130, false);
        Wait(5.0, c_timeAI);
    }
    TriggerExecute(gt_SpawnDropPod, true, false);
    Wait(35.0, c_timeAI);
    TriggerExecute(gt_SpawnNydusWormWave, true, false);
    Wait(10.0, c_timeAI);
    TriggerExecute(gt_SpawnAirWave, true, false);
    Wait(60.0, c_timeAI);
    lv_i = 4;
    for ( ; ( (auto9F4D3885_ai >= 0 && lv_i <= auto9F4D3885_ae) || (auto9F4D3885_ai < 0 && lv_i >= auto9F4D3885_ae) ) ; lv_i += auto9F4D3885_ai ) {
        gf_SetAttackWaveParameters(gv_mainSpawnRegions[lv_i]);
        AIAttackWaveAddUnits4(12, 12, 13, 15, "Zergling");
        AIAttackWaveAddUnits4(1, 1, 2, gf_Lookup(lv_i, 2, 2, 2, 2, 1, 2), gf_ABUnit("Mutalisk", "Hydralisk"));
        AIAttackWaveSend(gv_nextWavePlayer, 120, false);
        gf_SetAttackWaveParameters(gv_mainSpawnRegions[lv_i]);
        AIAttackWaveAddUnits4(2, 2, 3, gf_Lookup(lv_i, 3, 3, 4, 3, 3, 4), "Roach");
        AIAttackWaveSend(gv_nextWavePlayer, 130, false);
        Wait(5.0, c_timeAI);
    }
    TriggerExecute(gt_SpawnDropPod, true, false);
    Wait(15.0, c_timeAI);
    TriggerExecute(gt_SpawnDropPod, true, false);
    Wait(20.0, c_timeAI);
    TriggerExecute(gt_SpawnNydusWormWave, true, false);
    Wait(10.0, c_timeAI);
    TriggerExecute(gt_SpawnAirWave, true, false);
    Wait(60.0, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackWavesMainA08mins_Init () {
    gt_ZergAttackWavesMainA08mins = TriggerCreate("gt_ZergAttackWavesMainA08mins_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack Waves - Main B (8 - 13 mins)
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackWavesMainB813mins_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto621A6501_ae = 6;
    const int auto621A6501_ai = 1;
    const int auto616D34D1_ae = 3;
    const int auto616D34D1_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 4;
    for ( ; ( (auto621A6501_ai >= 0 && lv_i <= auto621A6501_ae) || (auto621A6501_ai < 0 && lv_i >= auto621A6501_ae) ) ; lv_i += auto621A6501_ai ) {
        gf_SetAttackWaveParameters(gv_mainSpawnRegions[lv_i]);
        AIAttackWaveAddUnits4(3, 3, 3, 4, "Roach");
        AIAttackWaveAddUnits4(2, 2, 3, 3, "Baneling");
        AIAttackWaveSend(gv_nextWavePlayer, 120, false);
        gf_SetAttackWaveParameters(gv_mainSpawnRegions[lv_i]);
        AIAttackWaveAddUnits4(2, 2, 3, 3, gf_ABUnit("Mutalisk", "Hydralisk"));
        AIAttackWaveAddUnits4(1, 1, 2, gf_Lookup(lv_i, 2, 3, 2, 3, 3, 2), "Hydralisk");
        AIAttackWaveAddUnits4(0, 0, 0, 1, "Overseer");
        AIAttackWaveSend(gv_nextWavePlayer, 130, false);
        Wait(5.0, c_timeAI);
    }
    TriggerExecute(gt_SpawnDropPod, true, false);
    Wait(15.0, c_timeAI);
    TriggerExecute(gt_SpawnKerriganWave, true, false);
    Wait(50.0, c_timeAI);
    TriggerExecute(gt_SpawnNydusWormWave, true, false);
    Wait(10.0, c_timeAI);
    TriggerExecute(gt_SpawnAirWave, true, false);
    Wait(15.0, c_timeAI);
    lv_i = 1;
    for ( ; ( (auto616D34D1_ai >= 0 && lv_i <= auto616D34D1_ae) || (auto616D34D1_ai < 0 && lv_i >= auto616D34D1_ae) ) ; lv_i += auto616D34D1_ai ) {
        gf_SetAttackWaveParameters(gv_mainSpawnRegions[lv_i]);
        AIAttackWaveAddUnits4(1, 1, 1, gf_Lookup(lv_i, 1, 2, 2, 1, 2, 2), gf_ABUnit("Mutalisk", "Hydralisk"));
        AIAttackWaveAddUnits4(3, 3, 5, 4, "Roach");
        AIAttackWaveAddUnits4(0, 0, 0, 1, "Overseer");
        AIAttackWaveSend(gv_nextWavePlayer, 120, false);
        gf_SetAttackWaveParameters(gv_mainSpawnRegions[lv_i]);
        AIAttackWaveAddUnits4(14, 14, 18, 22, "Zergling");
        AIAttackWaveAddUnits4(0, 0, gf_Lookup(lv_i, 1, 0, 1, 0, 0, 0), 1, gf_ABUnit("BroodLord", "Ultralisk"));
        AIAttackWaveSend(gv_nextWavePlayer, 130, false);
        Wait(5.0, c_timeAI);
    }
    Wait(40.0, c_timeAI);
    TriggerExecute(gt_SpawnDropPod, true, false);
    Wait(5.0, c_timeAI);
    TriggerExecute(gt_SpawnDropPod, true, false);
    Wait(5.0, c_timeAI);
    TriggerExecute(gt_SpawnNydusWormWave, true, false);
    Wait(10.0, c_timeAI);
    TriggerExecute(gt_SpawnAirWave, true, false);
    Wait(75.0, c_timeAI);
    TriggerExecute(gt_OverlordAttack, true, false);
    Wait(45.0, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackWavesMainB813mins_Init () {
    gt_ZergAttackWavesMainB813mins = TriggerCreate("gt_ZergAttackWavesMainB813mins_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack Waves - Main C (13 - 18 mins)
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackWavesMainC1318mins_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoC57477DC_ae = 6;
    const int autoC57477DC_ai = 1;
    const int autoF8A94010_ae = 3;
    const int autoF8A94010_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 4;
    for ( ; ( (autoC57477DC_ai >= 0 && lv_i <= autoC57477DC_ae) || (autoC57477DC_ai < 0 && lv_i >= autoC57477DC_ae) ) ; lv_i += autoC57477DC_ai ) {
        gf_SetAttackWaveParameters(gv_mainSpawnRegions[lv_i]);
        AIAttackWaveAddUnits4(0, 0, 10, 12, "Zergling");
        AIAttackWaveAddUnits4(3, 3, 2, 3, "Baneling");
        AIAttackWaveSend(gv_nextWavePlayer, 120, false);
        gf_SetAttackWaveParameters(gv_mainSpawnRegions[lv_i]);
        AIAttackWaveAddUnits4(1, 1, gf_Lookup(lv_i, 0, 0, 0, 1, 2, 1), 2, gf_ABUnit("BroodLord", libNtve_gf_DifficultyValueUnitType("Infestor", "Infestor", "Ultralisk", "Ultralisk")));
        AIAttackWaveSend(gv_nextWavePlayer, 125, false);
        Wait(5.0, c_timeAI);
    }
    TriggerExecute(gt_SpawnDropPod, true, false);
    Wait(5.0, c_timeAI);
    TriggerExecute(gt_SpawnDropPod, true, false);
    Wait(5.0, c_timeAI);
    TriggerExecute(gt_SpawnDropPod, true, false);
    Wait(5.0, c_timeAI);
    TriggerExecute(gt_SpawnKerriganWave, true, false);
    Wait(50.0, c_timeAI);
    TriggerExecute(gt_SpawnNydusWormWave, true, false);
    Wait(10.0, c_timeAI);
    TriggerExecute(gt_SpawnAirWave, true, false);
    Wait(15.0, c_timeAI);
    lv_i = 1;
    for ( ; ( (autoF8A94010_ai >= 0 && lv_i <= autoF8A94010_ae) || (autoF8A94010_ai < 0 && lv_i >= autoF8A94010_ae) ) ; lv_i += autoF8A94010_ai ) {
        gf_SetAttackWaveParameters(gv_mainSpawnRegions[lv_i]);
        AIAttackWaveAddUnits4(19, 19, 17, 20, "Zergling");
        AIAttackWaveAddUnits4(0, 0, 1, 2, "Roach");
        AIAttackWaveSend(gv_nextWavePlayer, 120, false);
        gf_SetAttackWaveParameters(gv_mainSpawnRegions[lv_i]);
        AIAttackWaveAddUnits4(3, 3, 4, 3, gf_ABUnit("Mutalisk", "Hydralisk"));
        AIAttackWaveAddUnits4(0, 0, gf_Lookup(lv_i, 1, 0, 0, 0, 0, 0), 1, gf_ABUnit("BroodLord", "Ultralisk"));
        AIAttackWaveAddUnits4(0, 0, 1, 1, "Overseer");
        AIAttackWaveSend(gv_nextWavePlayer, 130, false);
        Wait(5.0, c_timeAI);
    }
    Wait(15.0, c_timeAI);
    gf_SetAttackWaveParameters(RegionFromId(6));
    AIAttackWaveAddUnits4(1, 1, 1, 2, gf_ABUnit("BroodLord", "Infestor"));
    AIAttackWaveSend(gv_nextWavePlayer, 130, false);
    TriggerExecute(gt_SpawnDropPod, true, false);
    Wait(20.0, c_timeAI);
    TriggerExecute(gt_SpawnNydusWormWave, true, false);
    Wait(10.0, c_timeAI);
    TriggerExecute(gt_SpawnDropPod, true, false);
    TriggerExecute(gt_SpawnAirWave, true, false);
    Wait(135.0, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackWavesMainC1318mins_Init () {
    gt_ZergAttackWavesMainC1318mins = TriggerCreate("gt_ZergAttackWavesMainC1318mins_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack Waves - Main D (18 - 22 mins) - Leviathan
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackWavesMainD1822minsLeviathan_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto9C4D0561_ae = 3;
    const int auto9C4D0561_ai = 1;
    const int autoD13E5E21_ae = 1;
    const int autoD13E5E21_ai = -1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (auto9C4D0561_ai >= 0 && lv_i <= auto9C4D0561_ae) || (auto9C4D0561_ai < 0 && lv_i >= auto9C4D0561_ae) ) ; lv_i += auto9C4D0561_ai ) {
        gf_SetAttackWaveParameters(gv_mainSpawnRegions[lv_i]);
        AIAttackWaveAddUnits4(6, 6, 7, 8, "Roach");
        AIAttackWaveSend(gv_nextWavePlayer, 120, false);
        gf_SetAttackWaveParameters(gv_mainSpawnRegions[lv_i]);
        AIAttackWaveAddUnits4(3, 3, 4, 5, gf_ABUnit("Mutalisk", "Hydralisk"));
        AIAttackWaveAddUnits4(0, 1, 1, 1, "Overseer");
        AIAttackWaveSend(gv_nextWavePlayer, 130, false);
        Wait(5.0, c_timeAI);
    }
    gf_SetAttackWaveParameters(RegionFromId(9));
    AIAttackWaveAddUnits4(1, 1, 2, 3, gf_ABUnit("BroodLord", "Infestor"));
    AIAttackWaveSend(gv_nextWavePlayer, 120, false);
    TriggerExecute(gt_SpawnDropPod, true, false);
    TriggerExecute(gt_SpawnDropPod, true, false);
    TechTreeAbilityAllow(gv_pLAYER_ZERG_MAIN, AbilityCommand("OmegaStorm", 0), true);
    TriggerExecute(gt_SpawnKerriganWave, true, false);
    Wait(50.0, c_timeAI);
    TriggerExecute(gt_SpawnNydusWormWave, true, false);
    Wait(10.0, c_timeAI);
    TriggerExecute(gt_SpawnDropPod, true, false);
    TriggerExecute(gt_SpawnAirWave, true, false);
    Wait(30.0, c_timeAI);
    lv_i = 6;
    for ( ; ( (autoD13E5E21_ai >= 0 && lv_i <= autoD13E5E21_ae) || (autoD13E5E21_ai < 0 && lv_i >= autoD13E5E21_ae) ) ; lv_i += autoD13E5E21_ai ) {
        gf_SetAttackWaveParameters(gv_mainSpawnRegions[lv_i]);
        AIAttackWaveAddUnits4(1, 1, 3, 2, gf_ABUnit("Mutalisk", "Hydralisk"));
        AIAttackWaveAddUnits4(2, 3, 4, gf_Lookup(lv_i, 4, 5, 5, 4, 5, 4), "Baneling");
        AIAttackWaveAddUnits4(1, 1, 1, 1, "Overseer");
        AIAttackWaveSend(gv_nextWavePlayer, 120, false);
        gf_SetAttackWaveParameters(gv_mainSpawnRegions[lv_i]);
        AIAttackWaveAddUnits4(12, 12, 8, 0, "Zergling");
        AIAttackWaveAddUnits4(0, 0, gf_Lookup(lv_i, 1, 0, 1, 0, 0, 1), gf_Lookup(lv_i, 2, 0, 1, 1, 1, 1), "Ultralisk");
        AIAttackWaveSend(gv_nextWavePlayer, 130, false);
        Wait(5.0, c_timeAI);
    }
    Wait(15.0, c_timeAI);
    gf_SetAttackWaveParameters(RegionFromId(7));
    AIAttackWaveAddUnits4(1, 1, 2, 3, gf_ABUnit("BroodLord", "Infestor"));
    AIAttackWaveSend(gv_nextWavePlayer, 120, false);
    TriggerExecute(gt_SpawnDropPod, true, false);
    TriggerExecute(gt_SpawnLeviathanWave, true, false);
    Wait(5.0, c_timeAI);
    TriggerExecute(gt_SpawnNydusWormWave, true, false);
    Wait(10.0, c_timeAI);
    TriggerExecute(gt_SpawnDropPod, true, false);
    Wait(5.0, c_timeAI);
    TriggerExecute(gt_SpawnDropPod, true, false);
    Wait(60.0, c_timeAI);
    TriggerExecute(gt_SpawnNydusWormWave, true, false);
    Wait(10.0, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackWavesMainD1822minsLeviathan_Init () {
    gt_ZergAttackWavesMainD1822minsLeviathan = TriggerCreate("gt_ZergAttackWavesMainD1822minsLeviathan_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack Waves - Main E (22 - 26 mins)
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackWavesMainE2226mins_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoC8D3BC15_ae = 6;
    const int autoC8D3BC15_ai = 1;
    const int auto3DA27499_ae = 1;
    const int auto3DA27499_ai = -1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (autoC8D3BC15_ai >= 0 && lv_i <= autoC8D3BC15_ae) || (autoC8D3BC15_ai < 0 && lv_i >= autoC8D3BC15_ae) ) ; lv_i += autoC8D3BC15_ai ) {
        gf_SetAttackWaveParameters(gv_mainSpawnRegions[lv_i]);
        AIAttackWaveAddUnits4(gf_Lookup(lv_i, 1, 1, 0, 1, 1, 0), gf_Lookup(lv_i, 1, 1, 0, 1, 1, 0), 1, gf_Lookup(lv_i, 1, 2, 1, 1, 2, 1), gf_ABUnit("BroodLord", "Ultralisk"));
        AIAttackWaveSend(gv_nextWavePlayer, 120, false);
        gf_SetAttackWaveParameters(gv_mainSpawnRegions[lv_i]);
        AIAttackWaveAddUnits4(1, 1, 3, 4, gf_ABUnit("Mutalisk", "Hydralisk"));
        AIAttackWaveAddUnits4(9, 9, 6, 3, "Zergling");
        AIAttackWaveAddUnits4(1, 1, 1, 1, "Overseer");
        AIAttackWaveSend(gv_nextWavePlayer, 130, false);
        Wait(5.0, c_timeAI);
    }
    gf_SetAttackWaveParameters(RegionFromId(10));
    AIAttackWaveAddUnits4(1, 1, 2, 3, gf_ABUnit("BroodLord", "Infestor"));
    AIAttackWaveSend(gv_nextWavePlayer, 120, false);
    TriggerExecute(gt_SpawnDropPod, true, false);
    TriggerExecute(gt_SpawnAirWave, true, false);
    Wait(15.0, c_timeAI);
    TriggerExecute(gt_SpawnDropPod, true, false);
    Wait(15.0, c_timeAI);
    TriggerExecute(gt_SpawnDropPod, true, false);
    Wait(30.0, c_timeAI);
    TriggerExecute(gt_SpawnKerriganWave, true, false);
    Wait(60.0, c_timeAI);
    lv_i = 6;
    for ( ; ( (auto3DA27499_ai >= 0 && lv_i <= auto3DA27499_ae) || (auto3DA27499_ai < 0 && lv_i >= auto3DA27499_ae) ) ; lv_i += auto3DA27499_ai ) {
        gf_SetAttackWaveParameters(gv_mainSpawnRegions[lv_i]);
        AIAttackWaveAddUnits4(11, 11, 10, 20, "Zergling");
        AIAttackWaveAddUnits4(2, 2, 3, 0, "Roach");
        AIAttackWaveAddUnits4(gf_Lookup(lv_i, 1, 0, 1, 1, 0, 1), gf_Lookup(lv_i, 1, 0, 1, 1, 0, 1), 1, 1, gf_ABUnit("BroodLord", "Ultralisk"));
        AIAttackWaveAddUnits4(1, 1, 1, 1, "Overseer");
        AIAttackWaveSend(gv_nextWavePlayer, 120, false);
        gf_SetAttackWaveParameters(gv_mainSpawnRegions[lv_i]);
        AIAttackWaveAddUnits4(1, 1, 2, 3, gf_ABUnit("Mutalisk", "Hydralisk"));
        AIAttackWaveSend(gv_nextWavePlayer, 130, false);
        Wait(5.0, c_timeAI);
    }
    TriggerExecute(gt_SpawnDropPod, true, false);
    Wait(5.0, c_timeAI);
    TriggerExecute(gt_SpawnDropPod, true, false);
    Wait(10.0, c_timeAI);
    TriggerExecute(gt_SpawnDropPod, true, false);
    Wait(5.0, c_timeAI);
    TriggerExecute(gt_SpawnNydusWormWave, true, false);
    Wait(3.0, c_timeAI);
    gf_SpawnNydusWorm(1, RegionFromId(23));
    Wait(10.0, c_timeAI);
    TriggerExecute(gt_SpawnDropPod, true, false);
    TriggerExecute(gt_SpawnAirWave, true, false);
    Wait(27.0, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackWavesMainE2226mins_Init () {
    gt_ZergAttackWavesMainE2226mins = TriggerCreate("gt_ZergAttackWavesMainE2226mins_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack Waves - Main F (26 - 29 mins)
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackWavesMainF2629mins_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto044B48DB_ae = 6;
    const int auto044B48DB_ai = 1;
    const int auto4DF433F1_n = 3;
    int auto4DF433F1_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (auto044B48DB_ai >= 0 && lv_i <= auto044B48DB_ae) || (auto044B48DB_ai < 0 && lv_i >= auto044B48DB_ae) ) ; lv_i += auto044B48DB_ai ) {
        gf_SetAttackWaveParameters(gv_mainSpawnRegions[lv_i]);
        AIAttackWaveAddUnits4(2, 2, 3, 4, gf_ABUnit("Mutalisk", "Hydralisk"));
        AIAttackWaveAddUnits4(0, 2, 3, 4, "Baneling");
        AIAttackWaveAddUnits4(1, 1, gf_Lookup(lv_i, 1, 1, 2, 1, 1, 2), gf_Lookup(lv_i, 2, 2, 1, 1, 2, 2), gf_ABUnit("BroodLord", "Ultralisk"));
        AIAttackWaveAddUnits4(1, 1, 1, 1, "Overseer");
        AIAttackWaveSend(gv_nextWavePlayer, 120, false);
    }
    gf_SetAttackWaveParameters(RegionFromId(8));
    AIAttackWaveAddUnits4(2, 2, 3, 3, gf_ABUnit("BroodLord", "Infestor"));
    AIAttackWaveSend(gv_nextWavePlayer, 120, false);
    gf_SetAttackWaveParameters(RegionFromId(6));
    AIAttackWaveAddUnits4(24, 24, 34, 42, "Zergling");
    AIAttackWaveSend(gv_nextWavePlayer, 150, false);
    AIAttackWaveAddUnits4(4, 4, 5, 6, gf_ABUnit("Mutalisk", "Hydralisk"));
    AIAttackWaveSend(gv_nextWavePlayer, 150, false);
    gf_SetAttackWaveParameters(RegionFromId(9));
    AIAttackWaveAddUnits4(45, 45, 50, 56, "Zergling");
    AIAttackWaveSend(gv_nextWavePlayer, 180, false);
    TriggerExecute(gt_SpawnDropPod, true, false);
    Wait(15.0, c_timeAI);
    TriggerExecute(gt_SpawnDropPod, true, false);
    Wait(5.0, c_timeAI);
    TriggerExecute(gt_SpawnNydusWormWave, true, false);
    Wait(10.0, c_timeAI);
    TriggerExecute(gt_SpawnDropPod, true, false);
    TriggerExecute(gt_SpawnAirWave, true, false);
    Wait(50.0, c_timeAI);
    TriggerExecute(gt_SpawnNydusWormWave, true, false);
    Wait(10.0, c_timeAI);
    TriggerExecute(gt_ArtifactCloseQ, true, false);
    TriggerExecute(gt_SpawnAirWave, true, false);
    Wait(60.0, c_timeAI);
    TriggerExecute(gt_SpawnKerriganWave, true, false);
    for (auto4DF433F1_i = 1; auto4DF433F1_i <= auto4DF433F1_n; auto4DF433F1_i += 1) {
        TriggerExecute(gt_SpawnDropPod, true, false);
        gf_SpawnNydusWorm(1, RegionFromId(23));
        Wait(5.0, c_timeAI);
        TriggerExecute(gt_SpawnDropPod, true, false);
        Wait(5.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackWavesMainF2629mins_Init () {
    gt_ZergAttackWavesMainF2629mins = TriggerCreate("gt_ZergAttackWavesMainF2629mins_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack Waves - Main G (29 - 30 mins)
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackWavesMainG2930mins_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto3F9EE331_n = 2;
    int auto3F9EE331_i;
    const int autoF6E95EEF_n = 3;
    int autoF6E95EEF_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(4.0, c_timeAI);
    for (auto3F9EE331_i = 1; auto3F9EE331_i <= auto3F9EE331_n; auto3F9EE331_i += 1) {
        TriggerExecute(gt_SpawnDropPod, true, false);
        gf_SpawnNydusWorm(1, RegionFromId(3));
        Wait(2.0, c_timeAI);
        TriggerExecute(gt_SpawnDropPod, true, false);
        Wait(2.0, c_timeAI);
        TriggerExecute(gt_SpawnDropPod, true, false);
        gf_SpawnNydusWorm(1, RegionFromId(3));
        Wait(3.5, c_timeAI);
    }
    Wait(5.0, c_timeAI);
    for (autoF6E95EEF_i = 1; autoF6E95EEF_i <= autoF6E95EEF_n; autoF6E95EEF_i += 1) {
        TriggerExecute(gt_SpawnDropPod, true, false);
        gf_SpawnNydusWorm(1, RegionFromId(3));
        Wait(1.0, c_timeAI);
        TriggerExecute(gt_SpawnDropPod, true, false);
        Wait(4.0, c_timeAI);
    }
    Wait(5.0, c_timeAI);
    gf_SpawnNydusWorm(1, RegionFromId(37));
    Wait(2.0, c_timeAI);
    TriggerExecute(gt_SpawnDropPod, true, false);
    gf_SpawnNydusWorm(1, RegionFromId(3));
    Wait(1.0, c_timeAI);
    TriggerExecute(gt_SpawnDropPod, true, false);
    gf_SpawnNydusWorm(1, RegionFromId(3));
    Wait(3.0, c_timeAI);
    TriggerExecute(gt_SpawnDropPod, true, false);
    gf_SpawnNydusWorm(1, RegionFromId(25));
    Wait(4.0, c_timeAI);
    TriggerExecute(gt_SpawnDropPod, true, false);
    gf_SpawnNydusWorm(1, RegionFromId(37));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackWavesMainG2930mins_Init () {
    gt_ZergAttackWavesMainG2930mins = TriggerCreate("gt_ZergAttackWavesMainG2930mins_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Free Money
//--------------------------------------------------------------------------------------------------
bool gt_AIFreeMoney_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    playergroup autoD0EC159D_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoD0EC159D_g = gv_zergPlayers;
    lv_p = -1;
    while (true) {
        lv_p = PlayerGroupNextPlayer(autoD0EC159D_g, lv_p);
        if (lv_p < 0) { break; }
        if ((PlayerGetPropertyInt(lv_p, c_playerPropMinerals) < 3000)) {
            PlayerModifyPropertyInt(lv_p, c_playerPropMinerals, c_playerPropOperAdd, 3173);
        }

        if ((PlayerGetPropertyInt(lv_p, c_playerPropVespene) < 3000)) {
            PlayerModifyPropertyInt(lv_p, c_playerPropVespene, c_playerPropOperAdd, 3627);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIFreeMoney_Init () {
    gt_AIFreeMoney = TriggerCreate("gt_AIFreeMoney_Func");
    TriggerAddEventTimePeriodic(gt_AIFreeMoney, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Drop Pod
//--------------------------------------------------------------------------------------------------
bool gt_SpawnDropPod_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropPodGroup;
    point lv_dropPodSpot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dropPodGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gf_ABChoiceA() == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(libNtve_gf_DifficultyValueInt(4, 3, 4, 5), "Zergling", 0, gv_pLAYER_ZERG_SPECIAL, RegionRandomPoint(RegionFromId(11)), PlayerStartLocation(gv_pLAYER_USER));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropPodGroup);
    libNtve_gf_UnitCreateFacingPoint(libNtve_gf_DifficultyValueInt(0, 1, 1, 1), "Hydralisk", 0, gv_pLAYER_ZERG_SPECIAL, RegionRandomPoint(RegionFromId(11)), PlayerStartLocation(gv_pLAYER_USER));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_dropPodGroup);
    AISetGroupScriptControlled(lv_dropPodGroup, true);
    if ((gf_ArtifactChargePercent() >= 95.0)) {
        if ((libNtve_gf_RandomPercent() <= 20.0)) {
            lv_dropPodSpot = RegionRandomPoint(RegionFromId(25));
        }
        else {
            lv_dropPodSpot = RegionRandomPoint(RegionFromId(3));
        }
    }
    else {
        if ((libNtve_gf_RandomPercent() <= 50.0)) {
            if ((libNtve_gf_RandomPercent() <= 33.0)) {
                lv_dropPodSpot = RegionRandomPoint(RegionFromId(38));
            }
            else {
                lv_dropPodSpot = RegionRandomPoint(RegionFromId(23));
            }
        }
        else {
            lv_dropPodSpot = RegionRandomPoint(RegionFromId(13));
        }
    }
    libCamp_gf_CreateDropPod(libCamp_ge_DropPodRace_Zerg, lv_dropPodSpot, lv_dropPodGroup, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", c_unitCreateConstruct, gv_pLAYER_ZERG_MAIN, lv_dropPodSpot);
    AISetGroupScriptControlled(lv_dropPodGroup, false);
    AISetGroupSuicide(lv_dropPodGroup, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnDropPod_Init () {
    gt_SpawnDropPod = TriggerCreate("gt_SpawnDropPod_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Air Wave
//--------------------------------------------------------------------------------------------------
bool gt_SpawnAirWave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gf_ABChoiceA() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1) && (gf_ArtifactChargePercent() > 33.0) && (TriggerIsEnabled(gt_AirBehindQ) == true)) {
        TriggerExecute(gt_AirBehindQ, true, false);
    }
    else {
        TriggerExecute(gt_AirQ, true, false);
    }
    if ((gf_ArtifactChargePercent() <= 33.0)) {
        gf_SetAttackWaveParameters(RegionFromId(2));
        gf_AddUnitsToSpawnedAttackWave(libNtve_gf_DifficultyValueInt(6, 6, 8, 9), "Mutalisk", RegionFromId(2));
        gf_SendSpawnedAttackWave();
        return true;
    }

    if ((gf_ArtifactChargePercent() <= 67.0)) {
        gf_SetAttackWaveParameters(RegionFromId(2));
        gf_AddUnitsToSpawnedAttackWave(libNtve_gf_DifficultyValueInt(7, 7, 6, 7), "Mutalisk", RegionFromId(2));
        gf_AddUnitsToSpawnedAttackWave(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Corruptor", RegionFromId(2));
        gf_AddUnitsToSpawnedAttackWave(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "BroodLord", RegionFromId(2));
        gf_AddUnitsToSpawnedAttackWave(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "Overseer", RegionFromId(2));
        gf_SendSpawnedAttackWave();
        if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
            gf_SetAttackWaveParameters(RegionFromId(11));
            gf_AddUnitsToSpawnedAttackWave(libNtve_gf_DifficultyValueInt(0, 0, 3, 2), "Mutalisk", RegionFromId(11));
            gf_AddUnitsToSpawnedAttackWave(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "BroodLord", RegionFromId(11));
            gf_SendSpawnedAttackWave();
        }

        return true;
    }

    gf_SetAttackWaveParameters(RegionFromId(2));
    gf_AddUnitsToSpawnedAttackWave(libNtve_gf_DifficultyValueInt(7, 7, 4, 5), "Mutalisk", RegionFromId(2));
    gf_AddUnitsToSpawnedAttackWave(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), "BroodLord", RegionFromId(2));
    gf_AddUnitsToSpawnedAttackWave(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Corruptor", RegionFromId(2));
    gf_AddUnitsToSpawnedAttackWave(libNtve_gf_DifficultyValueInt(2, 2, 4, 5), "Scourge", RegionFromId(2));
    gf_AddUnitsToSpawnedAttackWave(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Overseer", RegionFromId(2));
    gf_SendSpawnedAttackWave();
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        gf_SetAttackWaveParameters(RegionFromId(11));
        gf_AddUnitsToSpawnedAttackWave(libNtve_gf_DifficultyValueInt(0, 0, 3, 3), "Mutalisk", RegionFromId(11));
        gf_AddUnitsToSpawnedAttackWave(libNtve_gf_DifficultyValueInt(0, 0, 1, 2), "BroodLord", RegionFromId(11));
        gf_AddUnitsToSpawnedAttackWave(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "Overseer", RegionFromId(2));
        gf_SendSpawnedAttackWave();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnAirWave_Init () {
    gt_SpawnAirWave = TriggerCreate("gt_SpawnAirWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Leviathan Wave
//--------------------------------------------------------------------------------------------------
bool gt_SpawnLeviathanWave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gf_ABChoiceA() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_LeviathanQ, true, false);
    TriggerEnable(gt_LeviathanDead, true);
    gf_SetAttackWaveParameters(RegionFromId(2));
    gf_AddUnitsToSpawnedAttackWave(1, "Leviathan", RegionFromId(29));
    gf_AddUnitsToSpawnedAttackWave(libNtve_gf_DifficultyValueInt(6, 6, 7, 8), "Mutalisk", RegionFromId(2));
    gf_SendSpawnedAttackWave();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnLeviathanWave_Init () {
    gt_SpawnLeviathanWave = TriggerCreate("gt_SpawnLeviathanWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leviathan Spawns Muta/BLord
//--------------------------------------------------------------------------------------------------
bool gt_LeviathanSpawnsMutaBLord_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_leviathanHomePoint;
    int lv_mutaWaves;

    // Automatic Variable Declarations
    int autoCF271187_n;
    int autoCF271187_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Leviathan"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_ZERG_SPECIAL))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_leviathanHomePoint = UnitGetPosition(gv_leviathan);
    AIRemoveUnitFromAnyWaves(gv_leviathan);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    while (true) {
        lv_mutaWaves += 1;
        autoCF271187_n = libNtve_gf_DifficultyValueInt(3, 4, 4, 5);
        for (autoCF271187_i = 1; autoCF271187_i <= autoCF271187_n; autoCF271187_i += 1) {
            if ((UnitIsAlive(gv_leviathan) == false)) {
                return true;
            }

            if ((UnitGroupCount(gv_leviathanMutas, c_unitCountAlive) < libNtve_gf_DifficultyValueInt(3, 4, 7, 10))) {
                UnitIssueOrder(gv_leviathan, Order(AbilityCommand("LeviathanSpawnMutalisk", 0)), c_orderQueueReplace);
                UnitIssueOrder(gv_leviathan, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
            }

            Wait(libNtve_gf_DifficultyValueFixed(1.5, 1.5, 1.0, 0.75), c_timeAI);
        }
        if ((UnitIsAlive(gv_leviathan) == false)) {
            return true;
        }

        if ((lv_mutaWaves >= libNtve_gf_DifficultyValueInt(5, 4, 3, 2))) {
            if ((UnitGroupCount(gv_leviathanBLords, c_unitCountAlive) < libNtve_gf_DifficultyValueInt(1, 2, 3, 3))) {
                UnitIssueOrder(gv_leviathan, Order(AbilityCommand("LeviathanSpawnBroodLord", 0)), c_orderQueueReplace);
                UnitIssueOrder(gv_leviathan, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
            }

        }

        Wait(1.0, c_timeAI);
        if ((DistanceBetweenPoints(UnitGetPosition(gv_leviathan), lv_leviathanHomePoint) >= 4.0)) {
            UnitIssueOrder(gv_leviathan, OrderTargetingPoint(AbilityCommand("move", 0), lv_leviathanHomePoint), c_orderQueueReplace);
            UnitIssueOrder(gv_leviathan, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_artifact)), c_orderQueueAddToEnd);
            UnitIssueOrder(gv_leviathan, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
            Wait(4.0, c_timeAI);
            AISetUnitScriptControlled(gv_leviathan, false);
            Wait(libNtve_gf_DifficultyValueFixed(8.5, 7.0, 6.0, 5.25), c_timeAI);
        }
        else {
            UnitIssueOrder(gv_leviathan, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_artifact)), c_orderQueueReplace);
            UnitIssueOrder(gv_leviathan, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
            Wait(1.0, c_timeAI);
            AISetUnitScriptControlled(gv_leviathan, false);
            Wait(libNtve_gf_DifficultyValueFixed(11.5, 10.0, 9.0, 8.25), c_timeAI);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeviathanSpawnsMutaBLord_Init () {
    gt_LeviathanSpawnsMutaBLord = TriggerCreate("gt_LeviathanSpawnsMutaBLord_Func");
    TriggerAddEventUnitRegion(gt_LeviathanSpawnsMutaBLord, null, RegionFromId(27), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leviathan Muta/BLord Behavior
//--------------------------------------------------------------------------------------------------
bool gt_LeviathanMutaBLordBehavior_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_leviathan) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Mutalisk") || (UnitGetType(EventUnit()) == "BroodLord")))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_ZERG_SPECIAL))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AISetUnitSuicide(EventUnit(), true);
    UnitSetTeamColorIndex(EventUnit(), gv_specialUnitColor);
    if ((UnitGetType(EventUnit()) == "Mutalisk")) {
        UnitGroupAdd(gv_leviathanMutas, EventUnit());
    }

    if ((UnitGetType(EventUnit()) == "BroodLord")) {
        UnitGroupAdd(gv_leviathanBLords, EventUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeviathanMutaBLordBehavior_Init () {
    gt_LeviathanMutaBLordBehavior = TriggerCreate("gt_LeviathanMutaBLordBehavior_Func");
    TriggerAddEventUnitRegion(gt_LeviathanMutaBLordBehavior, null, RegionFromId(28), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leviathan Dead
//--------------------------------------------------------------------------------------------------
bool gt_LeviathanDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_leviathan))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_leviathanPing);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeviathanDead_Init () {
    gt_LeviathanDead = TriggerCreate("gt_LeviathanDead_Func");
    TriggerEnable(gt_LeviathanDead, false);
    TriggerAddEventUnitDied(gt_LeviathanDead, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Air Q
//--------------------------------------------------------------------------------------------------
bool gt_AirQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto22463A28_val;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_ABChoiceA() == false)) {
        return true;
    }

    TriggerQueueEnter();
    Wait(2.0, c_timeGame);
    if ((gv_gameOver == true)) {
        return true;
    }

    SoundPlay(SoundLink("IncomingTransmission", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("IncomingTransmission", 0)), c_timeReal);
    SoundPlay(SoundLink("TUIWarningPing", 0), PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_AirPings, true, false);
    Wait(1.0, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    if ((gv_firstAirTransmission == true)) {
        gv_firstAirTransmission = false;
        // Transmission - SoundLink("TValerian03Horner00006", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian03Horner00006", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else {
        auto22463A28_val = RandomInt(1, 3);
        if (auto22463A28_val == 1) {
            // Transmission - SoundLink("TValerian03Horner00044", -1)
            libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian03Horner00044", -1), c_transmissionDurationAdd, 0.0, true);
        }
        else if (auto22463A28_val == 2) {
            // Transmission - SoundLink("TValerian03Horner00047", -1)
            libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian03Horner00047", -1), c_transmissionDurationAdd, 0.0, true);
        }
        else if (auto22463A28_val == 3) {
            // Transmission - SoundLink("TValerian03Horner00065", -1)
            libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian03Horner00065", -1), c_transmissionDurationAdd, 0.0, true);
        }
        else {
        }
    }
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AirQ_Init () {
    gt_AirQ = TriggerCreate("gt_AirQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Air Behind Q
//--------------------------------------------------------------------------------------------------
bool gt_AirBehindQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gf_ABChoiceA() == false)) {
        return true;
    }

    TriggerQueueEnter();
    Wait(2.0, c_timeGame);
    if ((gv_gameOver == true)) {
        return true;
    }

    SoundPlay(SoundLink("TUIWarningPing", 0), PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_AirPings, true, false);
    Wait(1.0, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian03Horner00037", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian03Horner00037", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AirBehindQ_Init () {
    gt_AirBehindQ = TriggerCreate("gt_AirBehindQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leviathan Q
//--------------------------------------------------------------------------------------------------
bool gt_LeviathanQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_ABChoiceA() == false)) {
        return true;
    }

    TriggerQueueEnter();
    Wait(10.0, c_timeGame);
    if ((gv_gameOver == true)) {
        return true;
    }

    SoundPlay(SoundLink("TUIWarningPing", 0), PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_AirPings, true, false);
    UIAlertUnit("Trigger", gv_pLAYER_USER, StringExternal("Param/Value/94636AF4"), null, gv_leviathan);
    libNtve_gf_ShareVisionofUnit(UnitGroupUnit(UnitGroup("Leviathan", gv_pLAYER_ZERG_SPECIAL, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), true, gv_pLAYER_USER);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(gv_leviathan), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetUnit(PingLastCreated(), gv_leviathan);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/4D391C1F"));
    PingSetScale(PingLastCreated(), 0.8);
    gv_leviathanPing = PingLastCreated();
    Wait(1.0, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TValerian03MusicEventD", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    // Transmission - SoundLink("TValerian03Adjutant00066", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian03Adjutant00066", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TValerian03Horner00067", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian03Horner00067", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeviathanQ_Init () {
    gt_LeviathanQ = TriggerCreate("gt_LeviathanQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Air Pings
//--------------------------------------------------------------------------------------------------
bool gt_AirPings_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_airPing;
    int lv_airPingBehind;
    timer lv_pingTimeout;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pingTimeout = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_pingTimeout, 60.0, false, c_timeAI);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(gv_pLAYER_USER), "PingWarning", RegionGetCenter(RegionFromId(2)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    lv_airPing = PingLastCreated();
    PingSetTooltip(lv_airPing, StringExternal("Param/Value/32833B91"));
    PingSetScale(lv_airPing, 0.6);
    PingSetVisible(lv_airPing, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(gv_pLAYER_USER), "PingWarning", RegionGetCenter(RegionFromId(11)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    lv_airPingBehind = PingLastCreated();
    PingSetTooltip(lv_airPingBehind, StringExternal("Param/Value/1451B2A2"));
    PingSetScale(lv_airPingBehind, 0.6);
    PingSetVisible(lv_airPingBehind, false);
    while (true) {
        if ((gv_gameOver == true)) {
            PingDestroy(lv_airPing);
            PingDestroy(lv_airPingBehind);
            return true;
        }

        if ((TimerGetRemaining(lv_pingTimeout) == 0.0)) {
            UnitGroupClear(gv_airPingGroup);
            UnitGroupClear(gv_airPingGroupBehind);
        }

        if ((UnitGroupCount(gv_airPingGroup, c_unitCountAlive) == 0)) {
            PingSetVisible(lv_airPing, false);
        }
        else {
            PingSetVisible(lv_airPing, true);
            PingSetPosition(lv_airPing, libNtve_gf_CenterOfUnitGroup(gv_airPingGroup));
        }
        if ((UnitGroupCount(gv_airPingGroupBehind, c_unitCountAlive) == 0)) {
            PingSetVisible(lv_airPingBehind, false);
        }
        else {
            PingSetVisible(lv_airPingBehind, true);
            PingSetPosition(lv_airPingBehind, libNtve_gf_CenterOfUnitGroup(gv_airPingGroupBehind));
        }
        if ((UnitGroupCount(gv_airPingGroup, c_unitCountAlive) == 0) && (UnitGroupCount(gv_airPingGroupBehind, c_unitCountAlive) == 0)) {
            PingDestroy(lv_airPing);
            PingDestroy(lv_airPingBehind);
            Wait(4.0, c_timeGame);
            TriggerExecute(gt_SpawnDropPod, true, false);
            Wait(8.0, c_timeGame);
            TriggerExecute(gt_SpawnDropPod, true, false);
            return true;
        }

        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AirPings_Init () {
    gt_AirPings = TriggerCreate("gt_AirPings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Nydus Worm
//--------------------------------------------------------------------------------------------------
bool gt_SpawnNydusWorm_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_nydusWorm;
    region lv_nydusRegion;
    timer lv_timoutTimer;
    point lv_spawnPoint;

    // Automatic Variable Declarations
    const int auto1147E322_n = 5;
    int auto1147E322_i;
    const int auto684E7A0F_n = 4;
    int auto684E7A0F_i;
    int autoBA275CC2_n;
    int autoBA275CC2_i;
    int autoB075E9D1_n;
    int autoB075E9D1_i;

    // Variable Initialization
    lv_timoutTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((gf_ABChoiceA() == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_nydusRegion = gv_spawnNydusWormRegion;
    if ((lv_nydusRegion == RegionFromId(14))) {
        if ((UnitGroupCount(UnitGroup("NydusCanal", gv_pLAYER_ZERG_MAIN, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= libNtve_gf_DifficultyValueInt(2, 3, 4, 4))) {
            lv_nydusRegion = RegionFromId(13);
        }

    }

    for (auto1147E322_i = 1; auto1147E322_i <= auto1147E322_n; auto1147E322_i += 1) {
        lv_spawnPoint = RegionRandomPoint(lv_nydusRegion);
        if ((UnitGroupCount(UnitGroup("NydusCanal", c_playerAny, RegionCircle(lv_spawnPoint, 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            break;
        }

    }
    libNtve_gf_CreateUnitsAtPoint2(1, "NydusCanal", 0, gv_pLAYER_ZERG_MAIN, lv_spawnPoint);
    UnitSetTeamColorIndex(UnitLastCreated(), gv_specialUnitColor);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_nydusWormHP);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
    lv_nydusWorm = UnitLastCreated();
    libNtve_gf_ShareVisionofUnit(lv_nydusWorm, true, gv_pLAYER_USER);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_nydusWorm), c_animNameDefault, "Birth", 0, c_animTimeDefault);
    SoundPlayAtPoint(SoundLink("NydusWorm_Birth", 0), PlayerGroupAll(), UnitGetPosition(UnitLastCreated()), 0.0, 100.0, 0.0);
    TriggerExecute(gt_NydusPingSound, true, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGetPosition(lv_nydusWorm), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetScale(PingLastCreated(), 0.7);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/D8050BC4"));
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringExternal("Param/Value/CE4CF34A"), null, UnitGetPosition(lv_nydusWorm));
    Wait(3.0, c_timeAI);
    for (auto684E7A0F_i = 1; auto684E7A0F_i <= auto684E7A0F_n; auto684E7A0F_i += 1) {
        if ((UnitIsAlive(lv_nydusWorm) == false)) {
            PingDestroy(PingLastCreated());
            return true;
        }

        Wait(1.0, c_timeAI);
    }
    autoBA275CC2_n = libNtve_gf_DifficultyValueInt(5, 3, 2, 2);
    for (autoBA275CC2_i = 1; autoBA275CC2_i <= autoBA275CC2_n; autoBA275CC2_i += 1) {
        if (((UnitIsAlive(lv_nydusWorm) == false) || (gv_gameOver == true))) {
            PingDestroy(PingLastCreated());
            return true;
        }

        TimerStart(lv_timoutTimer, c_timerDurationInfinite, false, c_timeAI);
        gf_SpawnAttackWaveFromNydusLight(lv_nydusWorm);
        while (!(((TimerGetElapsed(lv_timoutTimer) > 35.0) || (UnitIsAlive(lv_nydusWorm) == false)))) {
            Wait(1.0, c_timeAI);
        }
    }
    autoB075E9D1_n = libNtve_gf_DifficultyValueInt(4, 2, 1, 1);
    for (autoB075E9D1_i = 1; autoB075E9D1_i <= autoB075E9D1_n; autoB075E9D1_i += 1) {
        if (((UnitIsAlive(lv_nydusWorm) == false) || (gv_gameOver == true))) {
            PingDestroy(PingLastCreated());
            return true;
        }

        TimerStart(lv_timoutTimer, c_timerDurationInfinite, false, c_timeAI);
        gf_SpawnAttackWaveFromNydusMedium(lv_nydusWorm);
        while (!(((TimerGetElapsed(lv_timoutTimer) > 35.0) || (UnitIsAlive(lv_nydusWorm) == false)))) {
            Wait(1.0, c_timeAI);
        }
    }
    while (true) {
        TriggerExecute(gt_NydusWarningQ, true, false);
        if (((UnitIsAlive(lv_nydusWorm) == false) || (gv_gameOver == true))) {
            PingDestroy(PingLastCreated());
            return true;
        }

        TimerStart(lv_timoutTimer, c_timerDurationInfinite, false, c_timeAI);
        gf_SpawnAttackWaveFromNydusHeavy(lv_nydusWorm);
        while (!(((TimerGetElapsed(lv_timoutTimer) > 35.0) || (UnitIsAlive(lv_nydusWorm) == false)))) {
            Wait(1.0, c_timeAI);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnNydusWorm_Init () {
    gt_SpawnNydusWorm = TriggerCreate("gt_SpawnNydusWorm_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Nydus Worm Wave
//--------------------------------------------------------------------------------------------------
bool gt_SpawnNydusWormWave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gf_ABChoiceA() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraShakeStart(gv_pLAYER_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.03, 2.0, 100.0, 3.0);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_NydusQ, true, true);
    if ((gf_ArtifactChargePercent() <= 25.0)) {
        gf_SpawnNydusWorm(1, RegionFromId(23));
        Wait(3.0, c_timeAI);
        gf_SpawnNydusWorm(1, RegionFromId(38));
        Wait(3.0, c_timeAI);
        gf_SpawnNydusWorm(1, RegionFromId(31));
        Wait(3.0, c_timeAI);
        if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 0) == 1)) {
            gf_SpawnNydusWorm(1, RegionFromId(13));
        }
        else {
            if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
                gf_SpawnNydusWorm(1, RegionFromId(14));
            }

        }
        return true;
    }

    if ((gf_ArtifactChargePercent() <= 50.0)) {
        gf_SpawnNydusWorm(1, RegionFromId(38));
        Wait(2.0, c_timeAI);
        gf_SpawnNydusWorm(1, RegionFromId(31));
        Wait(3.0, c_timeAI);
        gf_SpawnNydusWorm(1, RegionFromId(13));
        Wait(3.0, c_timeAI);
        if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1)) {
            gf_SpawnNydusWorm(1, RegionFromId(14));
        }

        return true;
    }

    if ((gf_ArtifactChargePercent() <= 75.0)) {
        gf_SpawnNydusWorm(1, RegionFromId(38));
        Wait(2.0, c_timeAI);
        gf_SpawnNydusWorm(1, RegionFromId(31));
        Wait(3.0, c_timeAI);
        gf_SpawnNydusWorm(1, RegionFromId(13));
        Wait(2.0, c_timeAI);
        gf_SpawnNydusWorm(1, RegionFromId(13));
        Wait(2.0, c_timeAI);
        gf_SpawnNydusWorm(libNtve_gf_DifficultyValueInt(0, 1, 1, 1), RegionFromId(14));
        return true;
    }

    gf_SpawnNydusWorm(1, RegionFromId(3));
    Wait(2.0, c_timeAI);
    gf_SpawnNydusWorm(1, RegionFromId(31));
    Wait(3.0, c_timeAI);
    gf_SpawnNydusWorm(1, RegionFromId(13));
    Wait(2.0, c_timeAI);
    if ((libNtve_gf_DifficultyValueInt(1, 1, 1, 0) == 1)) {
        gf_SpawnNydusWorm(1, RegionFromId(13));
    }
    else {
        gf_SpawnNydusWorm(1, RegionFromId(14));
    }
    Wait(2.0, c_timeAI);
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1)) {
        gf_SpawnNydusWorm(1, RegionFromId(14));
    }
    else {
        gf_SpawnNydusWorm(1, RegionFromId(13));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnNydusWormWave_Init () {
    gt_SpawnNydusWormWave = TriggerCreate("gt_SpawnNydusWormWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Ping Sound
//--------------------------------------------------------------------------------------------------
bool gt_NydusPingSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("UI_TerranReminderPing", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(0.5, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusPingSound_Init () {
    gt_NydusPingSound = TriggerCreate("gt_NydusPingSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Q
//--------------------------------------------------------------------------------------------------
bool gt_NydusQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_ABChoiceA() == true)) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian03Adjutant00039", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian03Adjutant00039", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusQ_Init () {
    gt_NydusQ = TriggerCreate("gt_NydusQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_NydusWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_ABChoiceA() == true)) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if (((gv_gameOver == true) || (gf_ArtifactChargePercent() <= 95.0))) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus03Horner00033", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus03Horner00033", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    Wait(100.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusWarningQ_Init () {
    gt_NydusWarningQ = TriggerCreate("gt_NydusWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Inital Kerrigan Prep
//--------------------------------------------------------------------------------------------------
bool gt_InitalKerriganPrep_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShowHideUnit(gv_kerrigan, false);
    UnitSetOwner(gv_kerrigan, 0, false);
    UnitSetState(gv_kerrigan, c_unitStateTargetable, false);
    UnitSetState(gv_kerrigan, c_unitStateSelectable, false);
    UnitSetState(gv_kerrigan, c_unitStateStatusBar, false);
    libNtve_gf_MakeUnitInvulnerable(gv_kerrigan, true);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(132), 16.0), "QueenChamber", c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.0, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(132), 16.0), "QueenChamber", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    Wait(1.0, c_timeGame);
    UnitSetFacing(gv_kerrigan, 315.0, 0.0);
    Wait(0.5, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_kerrigan), c_animNameDefault, "Stand Cover", c_animFlagPlayForever, c_animTimeDefault);
    Wait(0.5, c_timeGame);
    libNtve_gf_PauseUnit(gv_kerrigan, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitalKerriganPrep_Init () {
    gt_InitalKerriganPrep = TriggerCreate("gt_InitalKerriganPrep_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Retreating from Low Life
//--------------------------------------------------------------------------------------------------
bool gt_KerriganRetreatingfromLowLife_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1DD65D10_g;
    int auto1DD65D10_u;
    unit auto1DD65D10_var;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeGame);
        if ((UnitIsAlive(gv_kerrigan) == false)) {
            return true;
        }

        if ((UnitGetPropertyFixed(gv_kerrigan, c_unitPropLife, c_unitPropCurrent) <= 150.0)) {
            PingSetVisible(gv_kerriganPing, false);
            AIRemoveUnitFromAnyWaves(gv_kerrigan);
            AISetUnitScriptControlled(gv_kerrigan, true);
            UnitBehaviorRemove(gv_kerrigan, "Stunned", 1);
            UnitBehaviorRemove(gv_kerrigan, "UltrasonicPulseStun", 1);
            UnitSetState(gv_kerrigan, c_unitStateTargetable, false);
            UnitSetState(gv_kerrigan, c_unitStateSelectable, false);
            UnitSetState(gv_kerrigan, c_unitStateStatusBar, false);
            libNtve_gf_MakeUnitInvulnerable(gv_kerrigan, true);
            UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("Val03QueenOfBladesBurrow", 0)), c_orderQueueReplace);
            TriggerExecute(gt_KerriganDeepTunnelQ, true, false);
            Wait(3.6, c_timeGame);
            auto1DD65D10_g = UnitGroup("HunterKiller", gv_pLAYER_ZERG_MAIN, RegionCircle(UnitGetPosition(gv_kerrigan), 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto1DD65D10_u = UnitGroupCount(auto1DD65D10_g, c_unitCountAll);
            for (;; auto1DD65D10_u -= 1) {
                auto1DD65D10_var = UnitGroupUnitFromEnd(auto1DD65D10_g, auto1DD65D10_u);
                if (auto1DD65D10_var == null) { break; }
                AIRemoveUnitFromAnyWaves(auto1DD65D10_var);
                UnitIssueOrder(auto1DD65D10_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_artifact)), c_orderQueueReplace);
            }
            libNtve_gf_ShowHideUnit(gv_kerrigan, false);
            UnitSetPosition(gv_kerrigan, PointFromId(132), false);
            UnitSetPropertyFixed(gv_kerrigan, c_unitPropLifePercent, 100.0);
            UnitSetOwner(gv_kerrigan, 0, false);
            UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("Val03QueenOfBladesUnburrow", 0)), c_orderQueueReplace);
            libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(132), 16.0), "QueenChamber", c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
            Wait(1.0, c_timeGame);
            libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(132), 16.0), "QueenChamber", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
            Wait(1.0, c_timeGame);
            UnitSetFacing(gv_kerrigan, 315.0, 0.0);
            Wait(0.5, c_timeGame);
            libNtve_gf_PauseUnit(gv_kerrigan, true);
            gv_kerriganHasRetreated = true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganRetreatingfromLowLife_Init () {
    gt_KerriganRetreatingfromLowLife = TriggerCreate("gt_KerriganRetreatingfromLowLife_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Kerrigan Wave
//--------------------------------------------------------------------------------------------------
bool gt_SpawnKerriganWave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_hunterKillers;

    // Automatic Variable Declarations
    int auto520D7E8D_ae;
    const int auto520D7E8D_ai = 1;
    unitgroup auto8ED32D2A_g;
    int auto8ED32D2A_u;
    unit auto8ED32D2A_var;

    // Variable Initialization
    lv_hunterKillers = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_kerriganHasRetreated == false) || (UnitIsAlive(gv_kerrigan) == false))) {
        return true;
    }

    gv_kerriganHasRetreated = false;
    TriggerExecute(gt_KerriganSpawnChamberAnimations, true, false);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_kerrigan), c_animNameDefault, "Stand Unpowered Start A", 0, c_animTimeDefault);
    libNtve_gf_ShowHideUnit(gv_kerrigan, true);
    Wait(6.667, c_timeGame);
    libNtve_gf_PauseUnit(gv_kerrigan, false);
    UnitSetOwner(gv_kerrigan, gv_pLAYER_ZERG_MAIN, false);
    UnitSetState(gv_kerrigan, c_unitStateTargetable, true);
    UnitSetState(gv_kerrigan, c_unitStateSelectable, true);
    UnitSetState(gv_kerrigan, c_unitStateStatusBar, true);
    libNtve_gf_MakeUnitInvulnerable(gv_kerrigan, false);
    UnitSetPropertyFixed(gv_kerrigan, c_unitPropLifeMax, gv_kerriganMaxHP);
    UnitSetPropertyFixed(gv_kerrigan, c_unitPropEnergyMax, gv_kerriganMaxEnergy);
    UnitSetPropertyFixed(gv_kerrigan, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_kerrigan, c_unitPropEnergyPercent, 100.0);
    UnitAbilityEnable(gv_kerrigan, "Implosion", true);
    UnitAbilityEnable(gv_kerrigan, "OmegaStorm", true);
    UnitIssueOrder(gv_kerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(819)), c_orderQueueReplace);
    UnitIssueOrder(gv_kerrigan, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    Wait(2.0, c_timeGame);
    auto520D7E8D_ae = gv_kerriganEscortNumber;
    lv_i = 1;
    for ( ; ( (auto520D7E8D_ai >= 0 && lv_i <= auto520D7E8D_ae) || (auto520D7E8D_ai < 0 && lv_i >= auto520D7E8D_ae) ) ; lv_i += auto520D7E8D_ai ) {
        libNtve_gf_CreateUnitsAtPoint2(1, "HunterKillerBurrowed", 0, gv_pLAYER_ZERG_MAIN, PointWithOffsetPolar(UnitGetPosition(gv_kerrigan), 3.0, ((360.0 / IntToFixed(gv_kerriganEscortNumber)) * IntToFixed(lv_i))));
        UnitGroupAdd(lv_hunterKillers, UnitLastCreated());
    }
    UnitGroupIssueOrder(lv_hunterKillers, Order(AbilityCommand("BurrowHunterKillerUp", 0)), c_orderQueueReplace);
    Wait(3.0, c_timeGame);
    if ((RandomInt(1, 2) == 1)) {
        gf_SetAttackWaveParameters(RegionFromId(5));
    }
    else {
        gf_SetAttackWaveParameters(RegionFromId(8));
    }
    auto8ED32D2A_g = lv_hunterKillers;
    auto8ED32D2A_u = UnitGroupCount(auto8ED32D2A_g, c_unitCountAll);
    for (;; auto8ED32D2A_u -= 1) {
        auto8ED32D2A_var = UnitGroupUnitFromEnd(auto8ED32D2A_g, auto8ED32D2A_u);
        if (auto8ED32D2A_var == null) { break; }
        AISetUnitScriptControlled(auto8ED32D2A_var, false);
        AIAttackWaveUseUnit(gv_pLAYER_ZERG_MAIN, auto8ED32D2A_var);
    }
    AISetUnitScriptControlled(gv_kerrigan, false);
    AIAttackWaveUseUnit(gv_pLAYER_ZERG_MAIN, gv_kerrigan);
    AIAttackWaveSend(gv_pLAYER_ZERG_MAIN, 0, false);
    gv_kerriganAttackCount += 1;
    TriggerExecute(gt_KerriganAttackTransmissionQ, true, false);
    TriggerExecute(gt_KerriganAttackTauntQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnKerriganWave_Init () {
    gt_SpawnKerriganWave = TriggerCreate("gt_SpawnKerriganWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Spawn Chamber Animations
//--------------------------------------------------------------------------------------------------
bool gt_KerriganSpawnChamberAnimations_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayAtPoint(SoundLink("CreepTumor_Explode", 5), PlayerGroupAll(), PointFromId(132), 16.0, 100.0, 0.0);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(132), 16.0), "QueenChamber", c_animNameDefault, "Stand Work End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(2.0, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(132), 16.0), "QueenChamber", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganSpawnChamberAnimations_Init () {
    gt_KerriganSpawnChamberAnimations = TriggerCreate("gt_KerriganSpawnChamberAnimations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Attack Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_KerriganAttackTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    if ((gv_kerriganHasRetreated == true)) {
        return true;
    }

    SoundPlay(SoundLink("TUIWarningPing", 0), PlayerGroupAll(), 100.0, 0.0);
    PingSetVisible(gv_kerriganPing, true);
    PingSetScale(gv_kerriganPing, 0.6);
    Wait(2.0, c_timeReal);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    if ((gv_firstKerriganAttack == true)) {
        gv_firstKerriganAttack = false;
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TValerian03MusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        // Transmission - SoundLink("TValerian03Adjutant00001", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian03Adjutant00001", 0), c_transmissionDurationAdd, 0.0, true);
        // Transmission - SoundLink("TValerian03Adjutant00009", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian03Adjutant00009", 0), c_transmissionDurationAdd, 0.0, true);
    }
    else {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TValerian03MusicEventB", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        // Transmission - SoundLink("TValerian03Adjutant00008", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian03Adjutant00008", 0), c_transmissionDurationAdd, 0.0, true);
    }
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganAttackTransmissionQ_Init () {
    gt_KerriganAttackTransmissionQ = TriggerCreate("gt_KerriganAttackTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Attack Taunt Q
//--------------------------------------------------------------------------------------------------
bool gt_KerriganAttackTauntQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoF693D03F_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    autoF693D03F_val = gv_kerriganAttackCount;
    if (autoF693D03F_val == 1) {
        // Transmission - SoundLink("TValerian03Kerrigan00048", -1)
        libCamp_gf_SendTransmissionCampaign(gv_kerrigan, SoundLink("TValerian03Kerrigan00048", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else if (autoF693D03F_val == 2) {
        // Transmission - SoundLink("TValerian03Kerrigan00014", -1)
        libCamp_gf_SendTransmissionCampaign(gv_kerrigan, SoundLink("TValerian03Kerrigan00014", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else if (autoF693D03F_val == 3) {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TValerian03MusicEventC", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        // Transmission - SoundLink("TValerian03Kerrigan00013", -1)
        libCamp_gf_SendTransmissionCampaign(gv_kerrigan, SoundLink("TValerian03Kerrigan00013", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else if (autoF693D03F_val == 4) {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TValerian03MusicEventE", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        // Transmission - SoundLink("TValerian03Kerrigan00054", -1)
        libCamp_gf_SendTransmissionCampaign(gv_kerrigan, SoundLink("TValerian03Kerrigan00054", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else if (autoF693D03F_val == 5) {
        // Transmission - SoundLink("TValerian03Kerrigan00002", -1)
        libCamp_gf_SendTransmissionCampaign(gv_kerrigan, SoundLink("TValerian03Kerrigan00002", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else {
        // Transmission - SoundLink("TValerian03Kerrigan00002", -1)
        libCamp_gf_SendTransmissionCampaign(gv_kerrigan, SoundLink("TValerian03Kerrigan00002", -1), c_transmissionDurationAdd, 0.0, true);
    }
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganAttackTauntQ_Init () {
    gt_KerriganAttackTauntQ = TriggerCreate("gt_KerriganAttackTauntQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Deep Tunnel Q
//--------------------------------------------------------------------------------------------------
bool gt_KerriganDeepTunnelQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto5D28AA2D_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    auto5D28AA2D_val = gv_kerriganAttackCount;
    if (auto5D28AA2D_val == 1) {
        // Transmission - SoundLink("TValerian03Kerrigan00058", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian03Kerrigan00058", -1), c_transmissionDurationAdd, 0.0, true);
        // Transmission - SoundLink("TValerian03Raynor00020", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian03Raynor00020", -1), c_transmissionDurationAdd, 0.0, true);
        Wait(2.0, c_timeReal);
        libCamp_gf_CreateMissionAutosavePoint((StringExternal("Param/Value/001EB8FC") + FixedToText(gf_ArtifactChargePercent(), 1) + StringExternal("Param/Value/40499C88")));
    }
    else if (auto5D28AA2D_val == 2) {
        // Transmission - SoundLink("TValerian03Warfield00025", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian03Warfield00025", -1), c_transmissionDurationAdd, 0.0, true);
        Wait(2.0, c_timeReal);
        libCamp_gf_CreateMissionAutosavePoint((StringExternal("Param/Value/EAB5D976") + FixedToText(gf_ArtifactChargePercent(), 1) + StringExternal("Param/Value/8F6AFC37")));
    }
    else if (auto5D28AA2D_val == 3) {
        // Transmission - SoundLink("TValerian03Raynor00028", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian03Raynor00028", -1), c_transmissionDurationAdd, 0.0, true);
        Wait(2.0, c_timeReal);
        libCamp_gf_CreateMissionAutosavePoint((StringExternal("Param/Value/E75186CD") + FixedToText(gf_ArtifactChargePercent(), 1) + StringExternal("Param/Value/CDE6292E")));
    }
    else if (auto5D28AA2D_val == 4) {
        // Transmission - SoundLink("TValerian03Tychus00032", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian03Tychus00032", -1), c_transmissionDurationAdd, 0.0, true);
        Wait(2.0, c_timeReal);
        libCamp_gf_CreateMissionAutosavePoint((StringExternal("Param/Value/1AD4E910") + FixedToText(gf_ArtifactChargePercent(), 1) + StringExternal("Param/Value/A6904814")));
    }
    else if (auto5D28AA2D_val == 5) {
        // Transmission - SoundLink("TValerian03Queen00033", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian03Queen00033", -1), c_transmissionDurationAdd, 0.0, true);
        // Transmission - SoundLink("TValerian03Sarah00034", -1)
        libCamp_gf_SendTransmissionCampaign(gv_kerrigan, SoundLink("TValerian03Sarah00034", -1), c_transmissionDurationAdd, 0.0, true);
        // Transmission - SoundLink("TValerian03Raynor00075", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian03Raynor00075", -1), c_transmissionDurationAdd, 0.0, true);
        // Transmission - SoundLink("TValerian03Tychus00074", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian03Tychus00074", -1), c_transmissionDurationAdd, 0.0, true);
    }
    else {
        // Transmission - SoundLink("TValerian03Queen00017", -1)
        libCamp_gf_SendTransmissionCampaign(gv_kerrigan, SoundLink("TValerian03Queen00017", -1), c_transmissionDurationAdd, 0.0, true);
    }
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganDeepTunnelQ_Init () {
    gt_KerriganDeepTunnelQ = TriggerCreate("gt_KerriganDeepTunnelQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Ping
//--------------------------------------------------------------------------------------------------
bool gt_KerriganPing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(gv_pLAYER_USER), "PingBoss", UnitGetPosition(gv_kerrigan), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_kerriganPing = PingLastCreated();
    PingSetTooltip(gv_kerriganPing, StringExternal("Param/Value/A1B8C475"));
    PingSetScale(gv_kerriganPing, 0.8);
    PingSetVisible(gv_kerriganPing, false);
    while (true) {
        Wait(0.1, c_timeGame);
        if ((gv_gameOver == true)) {
            return true;
        }

        PingSetPosition(gv_kerriganPing, UnitGetPosition(gv_kerrigan));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganPing_Init () {
    gt_KerriganPing = TriggerCreate("gt_KerriganPing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Gets a Kill
//--------------------------------------------------------------------------------------------------
bool gt_KerriganGetsaKill_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!((libNtve_gf_KillingUnit() == gv_kerrigan))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_kerriganKills += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganGetsaKill_Init () {
    gt_KerriganGetsaKill = TriggerCreate("gt_KerriganGetsaKill_Func");
    TriggerAddEventUnitDied(gt_KerriganGetsaKill, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Omegastorm Cooldown
//--------------------------------------------------------------------------------------------------
bool gt_KerriganOmegastormCooldown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityEnable(gv_kerrigan, "OmegaStorm", false);
    Wait(libNtve_gf_DifficultyValueFixed(18.0, 14.0, 10.0, 10.0), c_timeGame);
    UnitAbilityEnable(gv_kerrigan, "OmegaStorm", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganOmegastormCooldown_Init () {
    gt_KerriganOmegastormCooldown = TriggerCreate("gt_KerriganOmegastormCooldown_Func");
    TriggerAddEventUnitAbility(gt_KerriganOmegastormCooldown, null, AbilityCommand("OmegaStorm", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Implosion Cooldown
//--------------------------------------------------------------------------------------------------
bool gt_KerriganImplosionCooldown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityEnable(gv_kerrigan, "Implosion", false);
    Wait(libNtve_gf_DifficultyValueFixed(14.0, 8.0, 6.0, 6.0), c_timeGame);
    UnitAbilityEnable(gv_kerrigan, "Implosion", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganImplosionCooldown_Init () {
    gt_KerriganImplosionCooldown = TriggerCreate("gt_KerriganImplosionCooldown_Func");
    TriggerAddEventUnitAbility(gt_KerriganImplosionCooldown, null, AbilityCommand("Implosion", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Defenders
//--------------------------------------------------------------------------------------------------
bool gt_InitializeDefenders_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto5CD6FB6E_g;
    int auto5CD6FB6E_u;
    unit auto5CD6FB6E_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto5CD6FB6E_g = UnitGroup(null, gv_pLAYER_ZERG_SPECIAL, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5CD6FB6E_u = UnitGroupCount(auto5CD6FB6E_g, c_unitCountAll);
    for (;; auto5CD6FB6E_u -= 1) {
        auto5CD6FB6E_var = UnitGroupUnitFromEnd(auto5CD6FB6E_g, auto5CD6FB6E_u);
        if (auto5CD6FB6E_var == null) { break; }
        if ((UnitGetType(auto5CD6FB6E_var) != "Overlord") && (UnitGetType(auto5CD6FB6E_var) != "CreepTumorBurrowed") && (UnitGetType(auto5CD6FB6E_var) != "Hive")) {
            lv_i += 1;
            gv_zergDefenders[lv_i].lv_unit = auto5CD6FB6E_var;
            if ((UnitGetType(auto5CD6FB6E_var) == "SpineCrawler")) {
                gv_zergDefenders[lv_i].lv_unitType = "SpineCrawlerUprooted";
            }
            else {
                if ((UnitGetType(auto5CD6FB6E_var) == "SporeCrawler")) {
                    gv_zergDefenders[lv_i].lv_unitType = "SporeCrawlerUprooted";
                }
                else {
                    gv_zergDefenders[lv_i].lv_unitType = UnitGetType(auto5CD6FB6E_var);
                }
            }
            gv_zergDefenders[lv_i].lv_position = UnitGetPosition(auto5CD6FB6E_var);
            gv_zergDefenders[lv_i].lv_spawnRegion = gf_ZergDefenderSpawnArea(UnitGetPosition(auto5CD6FB6E_var));
        }

    }
    gv_zergDefendersSize = lv_i;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeDefenders_Init () {
    gt_InitializeDefenders = TriggerCreate("gt_InitializeDefenders_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Replace Zerg Defender
//--------------------------------------------------------------------------------------------------
bool gt_ReplaceZergDefender_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_unitIndex;

    // Automatic Variable Declarations
    int auto2B3737B0_ae;
    const int auto2B3737B0_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_ZERG_SPECIAL))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Overlord"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CreepTumorBurrowed"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2B3737B0_ae = gv_zergDefendersSize;
    lv_i = 1;
    for ( ; ( (auto2B3737B0_ai >= 0 && lv_i <= auto2B3737B0_ae) || (auto2B3737B0_ai < 0 && lv_i >= auto2B3737B0_ae) ) ; lv_i += auto2B3737B0_ai ) {
        if ((EventUnit() == gv_zergDefenders[lv_i].lv_unit)) {
            lv_unitIndex = lv_i;
        }

    }
    if ((lv_unitIndex == 0)) {
        return true;
    }

    Wait(RandomFixed(0.0, 1.0), c_timeAI);
    Wait(libNtve_gf_DifficultyValueFixed(32.0, 32.0, 24.0, 16.0), c_timeAI);
    if (((gv_zergDefenders[lv_unitIndex].lv_unitType == "SpineCrawlerUprooted") || (gv_zergDefenders[lv_unitIndex].lv_unitType == "SporeCrawlerUprooted"))) {
        while (!((gf_CreepExistsAroundPoint(gv_zergDefenders[lv_unitIndex].lv_position) == true) && (UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(gv_zergDefenders[lv_unitIndex].lv_position, 2.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            Wait(1.0, c_timeAI);
        }
    }

    libNtve_gf_UnitCreateFacingPoint(1, gv_zergDefenders[lv_unitIndex].lv_unitType, 0, gv_pLAYER_ZERG_SPECIAL, RegionRandomPoint(gv_zergDefenders[lv_unitIndex].lv_spawnRegion), PlayerStartLocation(gv_pLAYER_USER));
    gv_zergDefenders[lv_unitIndex].lv_unit = UnitLastCreated();
    while (true) {
        if ((UnitGetType(gv_zergDefenders[lv_unitIndex].lv_unit) == "SpineCrawlerUprooted")) {
            UnitIssueOrder(gv_zergDefenders[lv_unitIndex].lv_unit, OrderTargetingPoint(AbilityCommand("SpineCrawlerRoot", 0), gv_zergDefenders[lv_unitIndex].lv_position), c_orderQueueReplace);
        }
        else {
            if ((UnitGetType(gv_zergDefenders[lv_unitIndex].lv_unit) == "SporeCrawlerUprooted")) {
                UnitIssueOrder(gv_zergDefenders[lv_unitIndex].lv_unit, OrderTargetingPoint(AbilityCommand("SporeCrawlerRoot", 0), gv_zergDefenders[lv_unitIndex].lv_position), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(gv_zergDefenders[lv_unitIndex].lv_unit, OrderTargetingPoint(AbilityCommand("attack", 0), gv_zergDefenders[lv_unitIndex].lv_position), c_orderQueueReplace);
            }
        }
        Wait(1.0, c_timeAI);
        if (((UnitIsAlive(gv_zergDefenders[lv_unitIndex].lv_unit) == false) || (gv_gameOver == true))) {
            return true;
        }

        if ((UnitGetType(gv_zergDefenders[lv_unitIndex].lv_unit) != "SpineCrawlerUprooted") && (UnitGetType(gv_zergDefenders[lv_unitIndex].lv_unit) != "SporeCrawlerUprooted") && (libNtve_gf_UnitInRegion(gv_zergDefenders[lv_unitIndex].lv_unit, RegionCircle(gv_zergDefenders[lv_unitIndex].lv_position, 1.0)) == true)) {
            AISetUnitScriptControlled(gv_zergDefenders[lv_unitIndex].lv_unit, false);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReplaceZergDefender_Init () {
    gt_ReplaceZergDefender = TriggerCreate("gt_ReplaceZergDefender_Func");
    TriggerAddEventUnitDied(gt_ReplaceZergDefender, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Right Extra D
//--------------------------------------------------------------------------------------------------
bool gt_ZergRightExtraD_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(10, "ZerglingBurrowed", 0, gv_pLAYER_ZERG_EAST, RegionRandomPoint(RegionFromId(9)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(10, "ZerglingBurrowed", 0, gv_pLAYER_ZERG_EAST, RegionRandomPoint(RegionFromId(9)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(10, "ZerglingBurrowed", 0, gv_pLAYER_ZERG_EAST, RegionRandomPoint(RegionFromId(9)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(6, "UltraliskBurrowed", 0, gv_pLAYER_ZERG_EAST, RegionRandomPoint(RegionFromId(9)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(10, "HydraliskBurrowed", 0, gv_pLAYER_ZERG_EAST, RegionRandomPoint(RegionFromId(9)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(10, "HydraliskBurrowed", 0, gv_pLAYER_ZERG_EAST, RegionRandomPoint(RegionFromId(9)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(10, "HydraliskBurrowed", 0, gv_pLAYER_ZERG_EAST, RegionRandomPoint(RegionFromId(9)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(10, "RoachBurrowed", 0, gv_pLAYER_ZERG_EAST, RegionRandomPoint(RegionFromId(9)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(10, "RoachBurrowed", 0, gv_pLAYER_ZERG_EAST, RegionRandomPoint(RegionFromId(9)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(5, "BanelingBurrowed", 0, gv_pLAYER_ZERG_EAST, RegionRandomPoint(RegionFromId(9)));
    AIToggleBulliesInRegion(gv_pLAYER_ZERG_EAST, RegionFromId(34), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergRightExtraD_Init () {
    gt_ZergRightExtraD = TriggerCreate("gt_ZergRightExtraD_Func");
    TriggerAddEventUnitRegion(gt_ZergRightExtraD, null, RegionFromId(34), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Middle Extra D
//--------------------------------------------------------------------------------------------------
bool gt_ZergMiddleExtraD_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(10, "ZerglingBurrowed", 0, gv_pLAYER_ZERG_MAIN, RegionRandomPoint(RegionFromId(5)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(10, "ZerglingBurrowed", 0, gv_pLAYER_ZERG_MAIN, RegionRandomPoint(RegionFromId(5)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(10, "ZerglingBurrowed", 0, gv_pLAYER_ZERG_MAIN, RegionRandomPoint(RegionFromId(5)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(6, "UltraliskBurrowed", 0, gv_pLAYER_ZERG_MAIN, RegionRandomPoint(RegionFromId(5)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(10, "HydraliskBurrowed", 0, gv_pLAYER_ZERG_MAIN, RegionRandomPoint(RegionFromId(5)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(10, "HydraliskBurrowed", 0, gv_pLAYER_ZERG_MAIN, RegionRandomPoint(RegionFromId(5)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(10, "HydraliskBurrowed", 0, gv_pLAYER_ZERG_MAIN, RegionRandomPoint(RegionFromId(5)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(10, "RoachBurrowed", 0, gv_pLAYER_ZERG_MAIN, RegionRandomPoint(RegionFromId(5)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(10, "RoachBurrowed", 0, gv_pLAYER_ZERG_MAIN, RegionRandomPoint(RegionFromId(5)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(5, "BanelingBurrowed", 0, gv_pLAYER_ZERG_MAIN, RegionRandomPoint(RegionFromId(5)));
    AIToggleBulliesInRegion(gv_pLAYER_ZERG_MAIN, RegionFromId(36), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMiddleExtraD_Init () {
    gt_ZergMiddleExtraD = TriggerCreate("gt_ZergMiddleExtraD_Func");
    TriggerAddEventUnitRegion(gt_ZergMiddleExtraD, null, RegionFromId(36), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Left Extra D
//--------------------------------------------------------------------------------------------------
bool gt_ZergLeftExtraD_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(10, "ZerglingBurrowed", 0, gv_pLAYER_ZERG_SOUTH, RegionRandomPoint(RegionFromId(6)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(10, "ZerglingBurrowed", 0, gv_pLAYER_ZERG_SOUTH, RegionRandomPoint(RegionFromId(6)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(10, "ZerglingBurrowed", 0, gv_pLAYER_ZERG_SOUTH, RegionRandomPoint(RegionFromId(6)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(6, "UltraliskBurrowed", 0, gv_pLAYER_ZERG_SOUTH, RegionRandomPoint(RegionFromId(6)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(10, "HydraliskBurrowed", 0, gv_pLAYER_ZERG_SOUTH, RegionRandomPoint(RegionFromId(6)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(10, "HydraliskBurrowed", 0, gv_pLAYER_ZERG_SOUTH, RegionRandomPoint(RegionFromId(6)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(10, "HydraliskBurrowed", 0, gv_pLAYER_ZERG_SOUTH, RegionRandomPoint(RegionFromId(6)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(10, "RoachBurrowed", 0, gv_pLAYER_ZERG_SOUTH, RegionRandomPoint(RegionFromId(6)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(10, "RoachBurrowed", 0, gv_pLAYER_ZERG_SOUTH, RegionRandomPoint(RegionFromId(6)));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(5, "BanelingBurrowed", 0, gv_pLAYER_ZERG_SOUTH, RegionRandomPoint(RegionFromId(6)));
    AIToggleBulliesInRegion(gv_pLAYER_ZERG_SOUTH, RegionFromId(35), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergLeftExtraD_Init () {
    gt_ZergLeftExtraD = TriggerCreate("gt_ZergLeftExtraD_Func");
    TriggerAddEventUnitRegion(gt_ZergLeftExtraD, null, RegionFromId(35), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ambient Overlord Initialization
//--------------------------------------------------------------------------------------------------
bool gt_AmbientOverlordInitialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoEEC95453_g;
    int autoEEC95453_u;
    unit autoEEC95453_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoEEC95453_g = UnitGroup("Overlord", gv_pLAYER_ZERG_SPECIAL, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEEC95453_u = UnitGroupCount(autoEEC95453_g, c_unitCountAll);
    for (;; autoEEC95453_u -= 1) {
        autoEEC95453_var = UnitGroupUnitFromEnd(autoEEC95453_g, autoEEC95453_u);
        if (autoEEC95453_var == null) { break; }
        gv_ambientOverlordsSize += 1;
        gv_ambientOverlords[gv_ambientOverlordsSize].lv_overlord = autoEEC95453_var;
        gv_ambientOverlords[gv_ambientOverlordsSize].lv_destination = RegionRandomPoint(RegionFromId(26));
    }
    TriggerExecute(gt_AmbientOverlordController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmbientOverlordInitialization_Init () {
    gt_AmbientOverlordInitialization = TriggerCreate("gt_AmbientOverlordInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ambient Overlord Controller
//--------------------------------------------------------------------------------------------------
bool gt_AmbientOverlordController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoD0B8F7F2_ae;
    const int autoD0B8F7F2_ai = 1;
    int auto0DBDDF0D_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeGame);
        if ((gv_gameOver == true)) {
            return true;
        }

        autoD0B8F7F2_ae = gv_ambientOverlordsSize;
        lv_i = 1;
        for ( ; ( (autoD0B8F7F2_ai >= 0 && lv_i <= autoD0B8F7F2_ae) || (autoD0B8F7F2_ai < 0 && lv_i >= autoD0B8F7F2_ae) ) ; lv_i += autoD0B8F7F2_ai ) {
            if (((UnitIsAlive(gv_ambientOverlords[lv_i].lv_overlord) == false) || (UnitGetOwner(gv_ambientOverlords[lv_i].lv_overlord) == gv_pLAYER_USER))) {
                auto0DBDDF0D_val = RandomInt(1, 7);
                if (auto0DBDDF0D_val == 1) {
                    libNtve_gf_UnitCreateFacingPoint(1, "Overlord", 0, gv_pLAYER_ZERG_SPECIAL, RegionRandomPoint(RegionFromId(5)), PlayerStartLocation(gv_pLAYER_USER));
                }
                else if (auto0DBDDF0D_val == 2) {
                    libNtve_gf_UnitCreateFacingPoint(1, "Overlord", 0, gv_pLAYER_ZERG_SPECIAL, RegionRandomPoint(RegionFromId(6)), PlayerStartLocation(gv_pLAYER_USER));
                }
                else if (auto0DBDDF0D_val == 3) {
                    libNtve_gf_UnitCreateFacingPoint(1, "Overlord", 0, gv_pLAYER_ZERG_SPECIAL, RegionRandomPoint(RegionFromId(7)), PlayerStartLocation(gv_pLAYER_USER));
                }
                else if (auto0DBDDF0D_val == 4) {
                    libNtve_gf_UnitCreateFacingPoint(1, "Overlord", 0, gv_pLAYER_ZERG_SPECIAL, RegionRandomPoint(RegionFromId(8)), PlayerStartLocation(gv_pLAYER_USER));
                }
                else if (auto0DBDDF0D_val == 5) {
                    libNtve_gf_UnitCreateFacingPoint(1, "Overlord", 0, gv_pLAYER_ZERG_SPECIAL, RegionRandomPoint(RegionFromId(9)), PlayerStartLocation(gv_pLAYER_USER));
                }
                else if (auto0DBDDF0D_val == 6) {
                    libNtve_gf_UnitCreateFacingPoint(1, "Overlord", 0, gv_pLAYER_ZERG_SPECIAL, RegionRandomPoint(RegionFromId(10)), PlayerStartLocation(gv_pLAYER_USER));
                }
                else if (auto0DBDDF0D_val == 7) {
                    libNtve_gf_UnitCreateFacingPoint(1, "Overlord", 0, gv_pLAYER_ZERG_SPECIAL, RegionRandomPoint(RegionFromId(11)), PlayerStartLocation(gv_pLAYER_USER));
                }
                else {
                }
                gv_ambientOverlords[lv_i].lv_overlord = UnitLastCreated();
                gv_ambientOverlords[lv_i].lv_destination = RegionRandomPoint(RegionFromId(26));
            }

            if ((libNtve_gf_UnitInRegion(gv_ambientOverlords[lv_i].lv_overlord, RegionCircle(gv_ambientOverlords[lv_i].lv_destination, 1.0)) == true)) {
                gv_ambientOverlords[lv_i].lv_destination = RegionRandomPoint(RegionFromId(26));
            }

            UnitIssueOrder(gv_ambientOverlords[lv_i].lv_overlord, OrderTargetingPoint(AbilityCommand("move", 0), gv_ambientOverlords[lv_i].lv_destination), c_orderQueueReplace);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmbientOverlordController_Init () {
    gt_AmbientOverlordController = TriggerCreate("gt_AmbientOverlordController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overlord Attack
//--------------------------------------------------------------------------------------------------
bool gt_OverlordAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_overlordAttackGroup;
    point lv_randomPoint;

    // Automatic Variable Declarations
    int autoB3EFB1E4_n;
    int autoB3EFB1E4_i;
    int autoFDB8A229_val;
    int autoCD7EB0AC_val;
    unitgroup autoD6231E2F_g;
    int autoD6231E2F_u;
    unit autoD6231E2F_var;

    // Variable Initialization
    lv_overlordAttackGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(15.0, c_timeGame);
    TriggerExecute(gt_OverlordAttackQ, true, false);
    autoB3EFB1E4_n = libNtve_gf_DifficultyValueInt(50, 60, 60, 70);
    for (autoB3EFB1E4_i = 1; autoB3EFB1E4_i <= autoB3EFB1E4_n; autoB3EFB1E4_i += 1) {
        autoFDB8A229_val = RandomInt(1, 7);
        if (autoFDB8A229_val == 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "Overlord", 0, gv_pLAYER_ZERG_MAIN, RegionRandomPoint(RegionFromId(5)), PlayerStartLocation(gv_pLAYER_USER));
        }
        else if (autoFDB8A229_val == 2) {
            libNtve_gf_UnitCreateFacingPoint(1, "Overlord", 0, gv_pLAYER_ZERG_MAIN, RegionRandomPoint(RegionFromId(6)), PlayerStartLocation(gv_pLAYER_USER));
        }
        else if (autoFDB8A229_val == 3) {
            libNtve_gf_UnitCreateFacingPoint(1, "Overlord", 0, gv_pLAYER_ZERG_MAIN, RegionRandomPoint(RegionFromId(7)), PlayerStartLocation(gv_pLAYER_USER));
        }
        else if (autoFDB8A229_val == 4) {
            libNtve_gf_UnitCreateFacingPoint(1, "Overlord", 0, gv_pLAYER_ZERG_MAIN, RegionRandomPoint(RegionFromId(8)), PlayerStartLocation(gv_pLAYER_USER));
        }
        else if (autoFDB8A229_val == 5) {
            libNtve_gf_UnitCreateFacingPoint(1, "Overlord", 0, gv_pLAYER_ZERG_MAIN, RegionRandomPoint(RegionFromId(9)), PlayerStartLocation(gv_pLAYER_USER));
        }
        else if (autoFDB8A229_val == 6) {
            libNtve_gf_UnitCreateFacingPoint(1, "Overlord", 0, gv_pLAYER_ZERG_MAIN, RegionRandomPoint(RegionFromId(10)), PlayerStartLocation(gv_pLAYER_USER));
        }
        else if (autoFDB8A229_val == 7) {
            libNtve_gf_UnitCreateFacingPoint(1, "Overlord", 0, gv_pLAYER_ZERG_MAIN, RegionRandomPoint(RegionFromId(11)), PlayerStartLocation(gv_pLAYER_USER));
        }
        else {
        }
        autoCD7EB0AC_val = RandomInt(1, 3);
        if (autoCD7EB0AC_val == 1) {
            UnitCargoCreate(UnitLastCreated(), "InfestedCivilian", libNtve_gf_DifficultyValueInt(1, 1, 2, 3));
        }
        else if (autoCD7EB0AC_val == 2) {
            UnitCargoCreate(UnitLastCreated(), "Zergling", libNtve_gf_DifficultyValueInt(1, 1, 2, 2));
        }
        else if (autoCD7EB0AC_val == 3) {
            UnitCargoCreate(UnitLastCreated(), "InfestedCivilian", libNtve_gf_DifficultyValueInt(1, 2, 0, 1));
            UnitCargoCreate(UnitLastCreated(), "InfestedTerranCampaign", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        }
        else {
        }
        lv_randomPoint = RegionRandomPoint(RegionFromId(22));
        UnitSetCustomValue(UnitLastCreated(), 0, PointGetX(lv_randomPoint));
        UnitSetCustomValue(UnitLastCreated(), 1, PointGetY(lv_randomPoint));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("OverlordTransport", 2), Point(UnitGetCustomValue(UnitLastCreated(), 0), UnitGetCustomValue(UnitLastCreated(), 1))), c_orderQueueReplace);
        UnitGroupAdd(lv_overlordAttackGroup, UnitLastCreated());
        Wait(0.1, c_timeAI);
    }
    while (true) {
        Wait(1.0, c_timeAI);
        if ((UnitGroupCount(lv_overlordAttackGroup, c_unitCountAlive) == 0)) {
            return true;
        }

        autoD6231E2F_g = lv_overlordAttackGroup;
        autoD6231E2F_u = UnitGroupCount(autoD6231E2F_g, c_unitCountAll);
        for (;; autoD6231E2F_u -= 1) {
            autoD6231E2F_var = UnitGroupUnitFromEnd(autoD6231E2F_g, autoD6231E2F_u);
            if (autoD6231E2F_var == null) { break; }
            if ((libNtve_gf_UnitInRegion(autoD6231E2F_var, RegionCircle(Point(UnitGetCustomValue(autoD6231E2F_var, 0), UnitGetCustomValue(autoD6231E2F_var, 1)), 1.0)) == true) && (UnitGroupCount(UnitCargoGroup(autoD6231E2F_var), c_unitCountAlive) == 0)) {
                UnitIssueOrder(autoD6231E2F_var, Order(AbilityCommand("GenerateCreep", 0)), c_orderQueueReplace);
                UnitGroupRemove(lv_overlordAttackGroup, autoD6231E2F_var);
            }
            else {
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("OverlordTransport", 2), Point(UnitGetCustomValue(UnitLastCreated(), 0), UnitGetCustomValue(UnitLastCreated(), 1))), c_orderQueueReplace);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverlordAttack_Init () {
    gt_OverlordAttack = TriggerCreate("gt_OverlordAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overlord Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_OverlordAttackQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TValerian03Horner00040", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian03Horner00040", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverlordAttackQ_Init () {
    gt_OverlordAttackQ = TriggerCreate("gt_OverlordAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory - Artifact Charged
//--------------------------------------------------------------------------------------------------
bool gt_VictoryArtifactCharged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    libNtve_gf_ChangeUnitDamage(gv_artifact, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    TriggerQueueClear(c_triggerQueueRetain);
    TriggerExecute(gt_ObjectiveArtifactComplete, true, false);
    Wait(2.0, c_timeReal);
    libCamp_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryArtifactCharged_Init () {
    gt_VictoryArtifactCharged = TriggerCreate("gt_VictoryArtifactCharged_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    BoardDestroy(gv_artifactBoard);
    libNtve_gf_HideScreenButton(false, 1);
    TriggerStop(gt_ArtifactCharging);
    TriggerStop(gt_ReplaceZergDefender);
    TriggerStop(gt_KerriganRetreatingfromLowLife);
    TriggerStop(gt_ZergAttackWavesMain);
    TriggerStop(gt_ZergAttackWavesMainA08mins);
    TriggerStop(gt_ZergAttackWavesMainB813mins);
    TriggerStop(gt_ZergAttackWavesMainC1318mins);
    TriggerStop(gt_ZergAttackWavesMainD1822minsLeviathan);
    TriggerStop(gt_ZergAttackWavesMainE2226mins);
    TriggerStop(gt_ZergAttackWavesMainF2629mins);
    TriggerStop(gt_ZergAttackWavesMainG2930mins);
    TriggerStop(gt_ZergAttackWavesPersistent);
    if ((ObjectiveGetState(gv_objective_Artifact) == c_objectiveStateCompleted)) {
        AchievementAward(gv_pLAYER_USER, "TValerian03_1");
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1) && (gv_energyNovasUsed < 2)) {
        AchievementAward(gv_pLAYER_USER, "TValerian03_3");
    }

    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_energyNovasUsed == 0)) {
        AchievementAward(gv_pLAYER_USER, "Anniversary_TValerian03");
        TriggerDebugOutput(1, StringExternal("Param/Value/A3D605D8"), false);
    }

    VictoryPanelAddAchievement("TValerian03_1");
    VictoryPanelAddAchievement("TValerian03_2");
    VictoryPanelAddAchievement("TValerian03_3");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddTrackedStatistic("MineralsCollected");
    VictoryPanelAddTrackedStatistic("UnitsPeakCount");
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/9566A49E"), IntToText(gv_energyNovasUsed));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/EB580377"), IntToText(gv_energyNovaKills));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/3D236DCD"), IntToText(gv_kerriganKills));
    libCamp_gf_EndCampaignMission(gv_pLAYER_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Abort Mission
//--------------------------------------------------------------------------------------------------
bool gt_AbortMission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    DialogControlSetEnabled(libNtve_gf_ScreenButton(1), PlayerGroupAll(), false);
    BoardShowAll(false, PlayerGroupAll());
    libNtve_gf_HideScreenButton(false, 1);
    libNtve_gf_ChangeUnitDamage(gv_artifact, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    TriggerQueueClear(c_triggerQueueRetain);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AbortMission_Init () {
    gt_AbortMission = TriggerCreate("gt_AbortMission_Func");
    TriggerAddEventAbortMission(gt_AbortMission, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat - Artifact Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatArtifactDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/D98A6E70"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatArtifactDestroyed_Init () {
    gt_DefeatArtifactDestroyed = TriggerCreate("gt_DefeatArtifactDestroyed_Func");
    TriggerAddEventUnitDied(gt_DefeatArtifactDestroyed, UnitRefFromUnit(UnitFromId(42)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitPauseAll(true);
    AITimePause(true);
    TriggerStop(gt_ZergAttackWavesMain);
    TriggerStop(gt_ZergAttackWavesPersistent);
    libCamp_gf_EndCampaignMission(gv_pLAYER_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    libCamp_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Artifact - Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveArtifactCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/CA604703"), StringExternal("Param/Value/BFB1AA45"), c_objectiveStateActive, true);
    gv_objective_Artifact = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TValerian03Objective1, ObjectiveLastCreated(), StringExternal("Param/Value/BCFF1976"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(gv_pLAYER_USER), "PingObjective", UnitGetPosition(gv_artifact), ColorWithAlpha(0.00, 100.00, 100.00, 0.00), 0.0, 135.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/0140CB99"));
    PingSetScale(PingLastCreated(), 0.8);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveArtifactCreateQ_Init () {
    gt_ObjectiveArtifactCreateQ = TriggerCreate("gt_ObjectiveArtifactCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Artifact - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveArtifactComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveArtifactCreateQ, true, false);
    ObjectiveSetState(gv_objective_Artifact, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    BoardShowAll(false, PlayerGroupAll());
    libNtve_gf_HideScreenButton(false, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveArtifactComplete_Init () {
    gt_ObjectiveArtifactComplete = TriggerCreate("gt_ObjectiveArtifactComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Artifact - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveArtifactFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveArtifactCreateQ, true, false);
    ObjectiveSetState(gv_objective_Artifact, c_objectiveStateFailed);
    libNtve_gf_HideScreenButton(false, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveArtifactFailed_Init () {
    gt_ObjectiveArtifactFailed = TriggerCreate("gt_ObjectiveArtifactFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_StartGame);
    TriggerStop(gt_StartAI);
    TriggerStop(gt_ZergAttackWavesMain);
    TriggerStop(gt_SpawnAirWave);
    TriggerStop(gt_SpawnNydusWormWave);
    TriggerStop(gt_ZergAttackWavesPersistent);
    TriggerStop(gt_SpawnKerriganWave);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    gv_inCinematic = true;
    gv_gameOver = true;
    UnitPauseAll(true);
    AITimePause(true);
    GameTimeOfDayPause(true);
    DialogControlSetEnabled(libNtve_gf_ScreenButton(1), PlayerGroupAll(), false);
    libNtve_gf_HideScreenButton(false, 1);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_BriefingScene00, true, true);
    TriggerExecute(gt_BriefingScene01, true, true);
    TriggerExecute(gt_BriefingScene02, true, true);
    TriggerExecute(gt_BriefingScene03, true, true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UnitPauseAll(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_tempSpot;

    // Automatic Variable Declarations
    unitgroup autoA2A2FDCD_g;
    int autoA2A2FDCD_u;
    unit autoA2A2FDCD_var;
    unitgroup auto73B2B4A3_g;
    int auto73B2B4A3_u;
    unit auto73B2B4A3_var;
    unitgroup auto51456F4F_g;
    int auto51456F4F_u;
    unit auto51456F4F_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetBackground(c_backgroundFixed, "CharSkyBox", 100.0);
    UnitClearSelection(gv_pLAYER_USER);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_pLAYER_USER);
    PlayerModifyPropertyInt(gv_pLAYER_USER, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_USER, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    TechTreeUnitAllow(gv_pLAYER_USER, "Armory", true);
    TechTreeUnitAllow(gv_pLAYER_USER, "FusionCore", true);
    TechTreeUnitAllow(gv_pLAYER_USER, "MissileTurret", true);
    TechTreeUnitAllow(gv_pLAYER_USER, "Bunker", true);
    UnitIssueOrder(UnitFromId(285), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1006)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(282), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1008)), c_orderQueueReplace);
    lv_tempSpot = UnitGetPosition(UnitFromId(1025));
    UnitRemove(UnitFromId(1025));
    autoA2A2FDCD_g = UnitGroup(null, gv_pLAYER_USER, RegionCircle(lv_tempSpot, 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA2A2FDCD_u = UnitGroupCount(autoA2A2FDCD_g, c_unitCountAll);
    for (;; autoA2A2FDCD_u -= 1) {
        autoA2A2FDCD_var = UnitGroupUnitFromEnd(autoA2A2FDCD_g, autoA2A2FDCD_u);
        if (autoA2A2FDCD_var == null) { break; }
        UnitRemove(autoA2A2FDCD_var);
    }
    lv_tempSpot = UnitGetPosition(UnitFromId(1543));
    UnitRemove(UnitFromId(1543));
    auto73B2B4A3_g = UnitGroup(null, gv_pLAYER_USER, RegionCircle(lv_tempSpot, 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto73B2B4A3_u = UnitGroupCount(auto73B2B4A3_g, c_unitCountAll);
    for (;; auto73B2B4A3_u -= 1) {
        auto73B2B4A3_var = UnitGroupUnitFromEnd(auto73B2B4A3_g, auto73B2B4A3_u);
        if (auto73B2B4A3_var == null) { break; }
        UnitRemove(auto73B2B4A3_var);
    }
    UnitRemove(UnitGroupUnit(UnitGroup("MercCompound", gv_pLAYER_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1));
    UnitRemove(UnitFromId(228));
    UnitRemove(UnitFromId(142));
    UnitRemove(UnitFromId(170));
    UnitRemove(UnitFromId(8));
    UnitRemove(UnitFromId(1106));
    UnitRemove(UnitFromId(168));
    UnitRemove(UnitFromId(12));
    UnitRemove(UnitFromId(164));
    UnitRemove(UnitFromId(192));
    UnitRemove(UnitFromId(194));
    UnitRemove(UnitFromId(1570));
    UnitRemove(UnitFromId(1571));
    UnitRemove(UnitFromId(269));
    UnitRemove(UnitFromId(268));
    UnitRemove(UnitFromId(306));
    UnitRemove(UnitFromId(377));
    UnitRemove(UnitFromId(369));
    UnitRemove(UnitFromId(267));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, gv_pLAYER_USER, PointFromId(1083));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("TerranBuild", 15), PointFromId(652)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitFromId(13)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, gv_pLAYER_USER, PointFromId(534));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("TerranBuild", 2), PointFromId(534)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitFromId(13)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, gv_pLAYER_USER, PointFromId(535));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("TerranBuild", 2), PointFromId(535)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitFromId(13)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, gv_pLAYER_USER, PointFromId(597));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("TerranBuild", 2), PointFromId(597)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitFromId(13)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, gv_pLAYER_USER, PointFromId(599));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("TerranBuild", 2), PointFromId(599)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitFromId(13)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, gv_pLAYER_USER, PointFromId(674));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("TerranBuild", 2), PointFromId(674)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitFromId(117)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, gv_pLAYER_USER, PointFromId(660));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("TerranBuild", 2), PointFromId(660)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitFromId(117)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, gv_pLAYER_USER, PointFromId(1084));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("TerranBuild", 13), PointFromId(653)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitFromId(117)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SiegeTank", 0, gv_pLAYER_USER, PointFromId(379));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(654)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("SiegeMode", 0)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SiegeTank", 0, gv_pLAYER_USER, PointFromId(412));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1085)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("SiegeMode", 0)), c_orderQueueAddToEnd);
    auto51456F4F_g = UnitGroup(null, gv_pLAYER_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto51456F4F_u = UnitGroupCount(auto51456F4F_g, c_unitCountAll);
    for (;; auto51456F4F_u -= 1) {
        auto51456F4F_var = UnitGroupUnitFromEnd(auto51456F4F_g, auto51456F4F_u);
        if (auto51456F4F_var == null) { break; }
        libNtve_gf_PauseUnit(auto51456F4F_var, false);
    }
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(525), 0.0, -1, 10, true);
    Wait(0.1, c_timeGame);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(526), ((SoundLengthSync(SoundLink("TValerian03BriefingWarfield00001", -1)) + SoundLengthSync(SoundLink("TValerian03BriefingWarfield00002", -1))) - 1.0), -1, 10, true);
    MovieStartRecording("Briefing_Video_TValerian03_00");
    SoundPlay(SoundLink("TValerian03BriefingWarfield00001", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian03BriefingWarfield00001", -1))), c_timeReal);
    SoundPlay(SoundLink("TValerian03BriefingWarfield00002", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian03BriefingWarfield00002", -1))), c_timeReal);
    SoundPlay(SoundLink("TValerian03BriefingTychus00003", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian03BriefingTychus00003", -1))), c_timeReal);
    SoundPlay(SoundLink("TValerian03BriefingWarfield00004", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian03BriefingWarfield00004", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian03BriefingWarfield00001", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian03BriefingWarfield00002", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian03BriefingTychus00003", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian03BriefingWarfield00004", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00_Init () {
    gt_BriefingScene00 = TriggerCreate("gt_BriefingScene00_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_tempUnitGroup;

    // Automatic Variable Declarations
    unitgroup auto440E5A5E_g;
    int auto440E5A5E_u;
    unit auto440E5A5E_var;

    // Variable Initialization
    lv_tempUnitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto440E5A5E_g = UnitGroup("Overlord", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto440E5A5E_u = UnitGroupCount(auto440E5A5E_g, c_unitCountAll);
    for (;; auto440E5A5E_u -= 1) {
        auto440E5A5E_var = UnitGroupUnitFromEnd(auto440E5A5E_g, auto440E5A5E_u);
        if (auto440E5A5E_var == null) { break; }
        libNtve_gf_PauseUnit(auto440E5A5E_var, false);
    }
    TriggerExecute(gt_BriefingZergAttacksMinor, true, false);
    Wait(4.0, c_timeGame);
    lv_tempUnitGroup = UnitGroup(null, gv_pLAYER_USER, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupIssueOrder(lv_tempUnitGroup, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(527)), c_orderQueueReplace);
    UnitGroupIssueOrder(lv_tempUnitGroup, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(527), 1.0, PointGetFacing(PointFromId(527)))), c_orderQueueAddToEnd);
    lv_tempUnitGroup = UnitGroup(null, gv_pLAYER_USER, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupIssueOrder(lv_tempUnitGroup, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(528)), c_orderQueueReplace);
    UnitGroupIssueOrder(lv_tempUnitGroup, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(528), 1.0, PointGetFacing(PointFromId(528)))), c_orderQueueAddToEnd);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(1237), 0.0, -1, 10, true);
    Wait(0.1, c_timeGame);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(1238), ((SoundLengthSync(SoundLink("TValerian03BriefingWarfield00005", -1)) + SoundLengthSync(SoundLink("TValerian03BriefingWarfield00006", -1))) - 1.0), -1, 10, true);
    MovieStartRecording("Briefing_Video_TValerian03_01");
    SoundPlay(SoundLink("TValerian03BriefingWarfield00005", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian03BriefingWarfield00005", -1))), c_timeReal);
    SoundPlay(SoundLink("TValerian03BriefingWarfield00006", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian03BriefingWarfield00006", -1))), c_timeReal);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(1239), (SoundLengthSync(SoundLink("TValerian03BriefingRaynor00007", -1)) + SoundLengthSync(SoundLink("TValerian03BriefingWarfield00012", -1))), -1, 10, true);
    SoundPlay(SoundLink("TValerian03BriefingRaynor00007", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian03BriefingRaynor00007", -1))), c_timeReal);
    SoundPlay(SoundLink("TValerian03BriefingWarfield00012", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian03BriefingWarfield00012", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian03BriefingWarfield00005", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian03BriefingWarfield00006", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian03BriefingRaynor00007", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian03BriefingWarfield00012", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerStop(gt_BriefingZergAttacksMinor);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01_Init () {
    gt_BriefingScene01 = TriggerCreate("gt_BriefingScene01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 02
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("EnergyNova", 0), true);
    UnitAbilityReset(gv_artifact, AbilityCommand("EnergyNova", 0), c_spendLocationAll);
    TriggerExecute(gt_BriefingZergAttacksMajor, true, false);
    Wait(10.0, c_timeGame);
    TriggerStop(gt_BriefingZergAttacksMajor);
    Wait(4.0, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(214), 0.0, -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(450), 4.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_TValerian03_02");
    Wait(1.5, c_timeGame);
    UnitIssueOrder(gv_artifact, Order(AbilityCommand("EnergyNova", 0)), c_orderQueueReplace);
    SoundPlay(SoundLink("Artifact_EnergyNova", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeReal);
    SoundPlay(SoundLink("Artifact_EnergyNovaImpact", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(3.0, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Cinematic);
    SoundPlay(SoundLink("TValerian03BriefingRaynor00014", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian03BriefingRaynor00014", -1))), c_timeReal);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(559), (SoundLengthSync(SoundLink("TValerian03BriefingWarfield00013", -1)) + SoundLengthSync(SoundLink("TValerian03BriefingRaynor00008", -1))), -1, 10, true);
    SoundPlay(SoundLink("TValerian03BriefingWarfield00013", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian03BriefingWarfield00013", -1))), c_timeReal);
    SoundPlay(SoundLink("TValerian03BriefingRaynor00008", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian03BriefingRaynor00008", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian03BriefingRaynor00014", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian03BriefingWarfield00013", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian03BriefingRaynor00008", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene02_Init () {
    gt_BriefingScene02 = TriggerCreate("gt_BriefingScene02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 03
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_tempUnitGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tempUnitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(1271), 0.0, -1, 10, true);
    Wait(0.1, c_timeGame);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(1240), ((SoundLengthSync(SoundLink("TValerian03BriefingRaynor00010", -1)) + SoundLengthSync(SoundLink("TValerian03BriefingTychus00011", -1))) + 1.0), -1, 10, true);
    MovieStartRecording("Briefing_Video_TValerian03_03");
    SoundPlay(SoundLink("TValerian03BriefingRaynor00010", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian03BriefingRaynor00010", -1))), c_timeReal);
    SoundPlay(SoundLink("TValerian03BriefingTychus00011", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TValerian03BriefingTychus00011", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian03BriefingRaynor00010", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TValerian03BriefingTychus00011", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene03_Init () {
    gt_BriefingScene03 = TriggerCreate("gt_BriefingScene03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Zerg Attacks Major
//--------------------------------------------------------------------------------------------------
bool gt_BriefingZergAttacksMajor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ultralisk", 0, gv_pLAYER_ZERG_MAIN, PointFromId(713));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(527)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ultralisk", 0, gv_pLAYER_ZERG_MAIN, PointFromId(714));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(528)), c_orderQueueReplace);
    while (true) {
        if ((RandomInt(1, 3) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, gv_pLAYER_ZERG_MAIN, PointFromId(713));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Zergling", 0, gv_pLAYER_ZERG_MAIN, PointFromId(713));
        }
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(527)), c_orderQueueReplace);
        if ((RandomInt(1, 3) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, gv_pLAYER_ZERG_MAIN, PointFromId(714));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Zergling", 0, gv_pLAYER_ZERG_MAIN, PointFromId(714));
        }
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(528)), c_orderQueueReplace);
        Wait(RandomFixed(0.5, 1.0), c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingZergAttacksMajor_Init () {
    gt_BriefingZergAttacksMajor = TriggerCreate("gt_BriefingZergAttacksMajor_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Zerg Attacks Minor
//--------------------------------------------------------------------------------------------------
bool gt_BriefingZergAttacksMinor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((RandomInt(1, 3) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, gv_pLAYER_ZERG_MAIN, PointFromId(713));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Zergling", 0, gv_pLAYER_ZERG_MAIN, PointFromId(713));
        }
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(527)), c_orderQueueReplace);
        if ((RandomInt(1, 3) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, gv_pLAYER_ZERG_MAIN, PointFromId(714));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Zergling", 0, gv_pLAYER_ZERG_MAIN, PointFromId(714));
        }
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(528)), c_orderQueueReplace);
        Wait(RandomFixed(2.0, 3.0), c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingZergAttacksMinor_Init () {
    gt_BriefingZergAttacksMinor = TriggerCreate("gt_BriefingZergAttacksMinor_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8FFD78FD_g;
    int auto8FFD78FD_u;
    unit auto8FFD78FD_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    PlayerSetState(gv_pLAYER_ZERG_MAIN, c_playerStateFidgetingEnabled, false);
    libNtve_gf_ShowHideUnit(gv_kerrigan, false);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_ZERG_SOUTH, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_introHiddenUnitGroup);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_ZERG_EAST, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_introHiddenUnitGroup);
    auto8FFD78FD_g = gv_introHiddenUnitGroup;
    auto8FFD78FD_u = UnitGroupCount(auto8FFD78FD_g, c_unitCountAll);
    for (;; auto8FFD78FD_u -= 1) {
        auto8FFD78FD_var = UnitGroupUnitFromEnd(auto8FFD78FD_g, auto8FFD78FD_u);
        if (auto8FFD78FD_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto8FFD78FD_var, false);
    }
    TriggerExecute(gt_IntroArtifactAttack, true, false);
    TriggerEnable(gt_InitialArtifactAttackPausing, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(1878), 0.0, -1, 10, true);
    libNtve_gf_UnitCreateFacingPoint(1, "KerriganChar", 0, gv_pLAYER_ZERG_MAIN, PointFromId(132), UnitGetPosition(UnitFromId(1)));
    gv_cINEKerrigan = UnitLastCreated();
    libNtve_gf_ShowHideUnit(gv_cINEKerrigan, false);
    UnitBehaviorAdd(gv_cINEKerrigan, "KerriganWalk", gv_cINEKerrigan, 1);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "QueenChamber", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_introCinematicCompleted = false;
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(1266), 9.0, -1, 10, true);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_IntroKerriganAnimations, true, false);
    Wait(2.0, c_timeGame);
    // Transmission - SoundLink("TValerian03Kerrigan00046", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian03Kerrigan00046", -1), c_transmissionDurationAdd, 0.0, true);
    SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeReal);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(1858), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(1879), (SoundLengthSync(SoundLink("TValerian03Adjutant00068", -1)) - 1.0), -1, 10, true);
    // Transmission - SoundLink("TValerian03Adjutant00068", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian03Adjutant00068", -1), c_transmissionDurationAdd, 0.0, true);
    TriggerEnable(gt_InitialArtifactAttackPausing, false);
    UnitGroupIssueOrder(gv_initialArtifactAttackers, OrderTargetingUnit(AbilityCommand("attack", 0), gv_artifact), c_orderQueueReplace);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(1880), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(1881), (SoundLengthSync(SoundLink("TValerian03Horner00069", -1)) - 1.0), -1, 10, true);
    // Transmission - SoundLink("TValerian03Horner00069", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian03Horner00069", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("EnergyNova", 0), true);
    UnitIssueOrder(gv_artifact, Order(AbilityCommand("EnergyNova", 0)), c_orderQueueReplace);
    SoundPlay(SoundLink("Artifact_EnergyNova", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeReal);
    SoundPlay(SoundLink("Artifact_EnergyNovaImpact", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(4.0, c_timeReal);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(1064), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(1054), (SoundLengthSync(SoundLink("TValerian03Kerrigan00049", -1)) + SoundLengthSync(SoundLink("TValerian03Kerrigan00053", -1))), -1, 10, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Cinematic);
    UnitIssueOrder(gv_cINEKerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1035)), c_orderQueueReplace);
    // Transmission - SoundLink("TValerian03Kerrigan00049", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian03Kerrigan00049", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TValerian03Kerrigan00053", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian03Kerrigan00053", -1), c_transmissionDurationAdd, 0.0, true);
    gv_introCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_introCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
        UnitBehaviorRemove(gv_artifact, "ArtifactRecharging", 1);
        libNtve_gf_SendActorMessageToUnit(gv_artifact, "AnimBracketStop Work");
        UnitBehaviorAdd(gv_artifact, "ArtifactRecharging", gv_artifact, 1);
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto7C4CA4CD_g;
    int auto7C4CA4CD_u;
    unit auto7C4CA4CD_var;
    unitgroup autoB6BA7366_g;
    int autoB6BA7366_u;
    unit autoB6BA7366_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_InitialArtifactAttackPausing, false);
    TriggerStop(gt_IntroArtifactAttack);
    TriggerStop(gt_IntroKerriganAnimations);
    auto7C4CA4CD_g = gv_initialArtifactAttackers;
    auto7C4CA4CD_u = UnitGroupCount(auto7C4CA4CD_g, c_unitCountAll);
    for (;; auto7C4CA4CD_u -= 1) {
        auto7C4CA4CD_var = UnitGroupUnitFromEnd(auto7C4CA4CD_g, auto7C4CA4CD_u);
        if (auto7C4CA4CD_var == null) { break; }
        UnitRemove(auto7C4CA4CD_var);
    }
    autoB6BA7366_g = gv_introHiddenUnitGroup;
    autoB6BA7366_u = UnitGroupCount(autoB6BA7366_g, c_unitCountAll);
    for (;; autoB6BA7366_u -= 1) {
        autoB6BA7366_var = UnitGroupUnitFromEnd(autoB6BA7366_g, autoB6BA7366_u);
        if (autoB6BA7366_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoB6BA7366_var, true);
    }
    UnitPauseAll(false);
    UnitRemove(gv_cINEKerrigan);
    libNtve_gf_ShowHideUnit(gv_kerrigan, true);
    libNtve_gf_ShowHideUnit(UnitFromId(1682), true);
    libNtve_gf_ShowHideUnit(UnitFromId(1557), true);
    libNtve_gf_ShowHideUnit(UnitFromId(1683), true);
    libNtve_gf_ShowHideUnit(UnitFromId(1596), true);
    libNtve_gf_ShowHideUnit(UnitFromId(1694), true);
    libNtve_gf_ShowHideUnit(UnitFromId(1602), true);
    libNtve_gf_ShowHideUnit(UnitFromId(1606), true);
    libNtve_gf_ShowHideUnit(UnitFromId(1337), true);
    libNtve_gf_ShowHideUnit(UnitFromId(1349), true);
    UnitSetPropertyFixed(UnitFromId(42), c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(UnitFromId(42), c_unitPropKills, 0.0);
    UnitSetPropertyFixed(UnitFromId(1543), c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(UnitFromId(1025), c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(UnitFromId(1), c_unitPropEnergy, 50.0);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_USER, c_playerStateXPGain, true);
    PlayerSetState(gv_pLAYER_ZERG_MAIN, c_playerStateFidgetingEnabled, true);
    TriggerEnable(gt_IntroKerriganAnimations, false);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_pLAYER_USER, RegionEntireMap(), false, false);
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.1, c_timeReal);
    UnitAbilitySpend(gv_artifact, AbilityCommand("EnergyNova", 0), c_spendLocationAll);
    libNtve_gf_UnitAbilityRemoveCooldown(gv_artifact, "EnergyNova", "Abil/Supernova");
    UnitAbilityAddCooldown(gv_artifact, "EnergyNova", "Abil/Supernova", 184.0);
    gv_energyNovasUsed = 0;
    UnitIssueOrder(UnitFromId(285), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1006)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(282), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1008)), c_orderQueueReplace);
    UnitSelect(UnitGroupUnit(UnitGroup("CommandCenter", gv_pLAYER_USER, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), gv_pLAYER_USER, true);
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringExternal("Param/Value/850C034D"), null, PointFromId(2));
    if ((gv_introCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_pLAYER_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PlayerStartLocation(gv_pLAYER_USER), 1.5);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    TriggerExecute(gt_StartGame, true, false);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("EnergyNova", 0), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Artifact Attack
//--------------------------------------------------------------------------------------------------
bool gt_IntroArtifactAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto8865FA28_n = 2;
    int auto8865FA28_i;
    const int auto5E4B1D2F_n = 6;
    int auto5E4B1D2F_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto8865FA28_i = 1; auto8865FA28_i <= auto8865FA28_n; auto8865FA28_i += 1) {
        UnitCreate(1, "Ultralisk", 0, gv_pLAYER_ZERG_SPECIAL, PointFromId(1062), 315.0);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_initialArtifactAttackers);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_artifact), c_orderQueueReplace);
        UnitCreate(1, "Ultralisk", 0, gv_pLAYER_ZERG_SPECIAL, PointFromId(1040), 315.0);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_initialArtifactAttackers);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_artifact), c_orderQueueReplace);
        Wait(1.0, c_timeGame);
    }
    for (auto5E4B1D2F_i = 1; auto5E4B1D2F_i <= auto5E4B1D2F_n; auto5E4B1D2F_i += 1) {
        UnitCreate(8, "Zergling", 0, gv_pLAYER_ZERG_SPECIAL, PointFromId(1062), 315.0);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_initialArtifactAttackers);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_artifact), c_orderQueueReplace);
        UnitCreate(2, "Hydralisk", 0, gv_pLAYER_ZERG_SPECIAL, PointFromId(1062), 315.0);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_initialArtifactAttackers);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_artifact), c_orderQueueReplace);
        UnitCreate(8, "Zergling", 0, gv_pLAYER_ZERG_SPECIAL, PointFromId(1040), 315.0);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_initialArtifactAttackers);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_artifact), c_orderQueueReplace);
        UnitCreate(2, "Hydralisk", 0, gv_pLAYER_ZERG_SPECIAL, PointFromId(1040), 315.0);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_initialArtifactAttackers);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_artifact), c_orderQueueReplace);
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroArtifactAttack_Init () {
    gt_IntroArtifactAttack = TriggerCreate("gt_IntroArtifactAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initial Artifact Attack Pausing
//--------------------------------------------------------------------------------------------------
bool gt_InitialArtifactAttackPausing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_initialArtifactAttackers, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(RandomFixed(0.5, 2.0), c_timeGame);
    if ((TriggerIsEnabled(TriggerGetCurrent()) == true)) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_artifact), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitialArtifactAttackPausing_Init () {
    gt_InitialArtifactAttackPausing = TriggerCreate("gt_InitialArtifactAttackPausing_Func");
    TriggerEnable(gt_InitialArtifactAttackPausing, false);
    TriggerAddEventUnitRegion(gt_InitialArtifactAttackPausing, null, RegionFromId(15), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Kerrigan Animations
//--------------------------------------------------------------------------------------------------
bool gt_IntroKerriganAnimations_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TValerian03MusicIntro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_cINEKerrigan), c_animNameDefault, "Stand Unpowered Start", 0, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "QueenChamber", c_animNameDefault, "Stand Work End", 0, c_animTimeDefault);
    Wait(0.2, c_timeGame);
    libNtve_gf_ShowHideUnit(gv_cINEKerrigan, true);
    Wait(0.5, c_timeGame);
    SoundPlay(SoundLink("HydraliskDen_Explode", 2), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.3, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "QueenChamber", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    Wait(5.634, c_timeGame);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(373), 2.0, -1, 10, true);
    Wait(0.7, c_timeGame);
    Wait(2.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(1053), 3.0, -1, 10, true);
    UnitIssueOrder(gv_cINEKerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(625)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroKerriganAnimations_Init () {
    gt_IntroKerriganAnimations = TriggerCreate("gt_IntroKerriganAnimations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pickedUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.0);
    UnitClearSelection(gv_pLAYER_USER);
    PlayerSetState(gv_pLAYER_USER, c_playerStateXPGain, false);
    DialogControlSetEnabled(libNtve_gf_ScreenButton(1), PlayerGroupAll(), false);
    libNtve_gf_HideScreenButton(false, 1);
    GameTimeOfDayPause(true);
    GameSetBackground(c_backgroundFixed, "CharSkyBox", 100.0);
    AITimePause(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_artifactPosition;

    // Automatic Variable Declarations
    unitgroup autoE89A9445_g;
    int autoE89A9445_u;
    unit autoE89A9445_var;
    unitgroup auto6239B03C_g;
    int auto6239B03C_u;
    unit auto6239B03C_var;
    unitgroup autoD511FF67_g;
    int autoD511FF67_u;
    unit autoD511FF67_var;
    unitgroup auto7EEA8647_g;
    int auto7EEA8647_u;
    unit auto7EEA8647_var;
    const int auto20295560_n = 80;
    int auto20295560_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(271), 0.0, -1, 0, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TValerian03MusicOutro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerStop(gt_ZergAttackWavesMain);
    TriggerStop(gt_ZergAttackWavesPersistent);
    TriggerStop(gt_ReplaceZergDefender);
    TriggerEnable(gt_ReplaceZergDefender, false);
    TriggerStop(gt_EnergyNovaKills);
    TriggerEnable(gt_EnergyNovaKills, false);
    TriggerStop(gt_KerriganGetsaKill);
    TriggerEnable(gt_KerriganGetsaKill, false);
    TriggerStop(gt_ArtifactStatus);
    libNtve_gf_PauseUnit(gv_kerrigan, true);
    libNtve_gf_ShowHideUnit(gv_kerrigan, false);
    autoE89A9445_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(gv_artifact), 6.0), UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE89A9445_u = UnitGroupCount(autoE89A9445_g, c_unitCountAll);
    for (;; autoE89A9445_u -= 1) {
        autoE89A9445_var = UnitGroupUnitFromEnd(autoE89A9445_g, autoE89A9445_u);
        if (autoE89A9445_var == null) { break; }
        UnitSetPosition(autoE89A9445_var, PointWithOffsetPolar(UnitGetPosition(autoE89A9445_var), 6.0, AngleBetweenPoints(UnitGetPosition(gv_artifact), UnitGetPosition(autoE89A9445_var))), false);
    }
    auto6239B03C_g = UnitGroup(null, gv_pLAYER_ZERG_MAIN, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6239B03C_u = UnitGroupCount(auto6239B03C_g, c_unitCountAll);
    for (;; auto6239B03C_u -= 1) {
        auto6239B03C_var = UnitGroupUnitFromEnd(auto6239B03C_g, auto6239B03C_u);
        if (auto6239B03C_var == null) { break; }
        UnitSetPropertyFixed(auto6239B03C_var, c_unitPropLife, 50.0);
    }
    autoD511FF67_g = UnitGroup(null, gv_pLAYER_ZERG_SOUTH, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD511FF67_u = UnitGroupCount(autoD511FF67_g, c_unitCountAll);
    for (;; autoD511FF67_u -= 1) {
        autoD511FF67_var = UnitGroupUnitFromEnd(autoD511FF67_g, autoD511FF67_u);
        if (autoD511FF67_var == null) { break; }
        UnitSetPropertyFixed(autoD511FF67_var, c_unitPropLife, 50.0);
    }
    auto7EEA8647_g = UnitGroup(null, gv_pLAYER_ZERG_EAST, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7EEA8647_u = UnitGroupCount(auto7EEA8647_g, c_unitCountAll);
    for (;; auto7EEA8647_u -= 1) {
        auto7EEA8647_var = UnitGroupUnitFromEnd(auto7EEA8647_g, auto7EEA8647_u);
        if (auto7EEA8647_var == null) { break; }
        UnitSetPropertyFixed(auto7EEA8647_var, c_unitPropLife, 50.0);
    }
    lv_artifactPosition = UnitGetPosition(gv_artifact);
    UnitRemove(gv_artifact);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Artifact", c_unitCreateIgnorePlacement, gv_pLAYER_USER, lv_artifactPosition);
    gv_artifact = UnitLastCreated();
    UnitAbilityReset(gv_artifact, AbilityCommand("EnergyNova", 0), c_spendLocationAll);
    Wait(0.5, c_timeGame);
    libNtve_gf_TurnAnimationPropertiesOff(libNtve_gf_MainActorofUnit(gv_artifact), "Work");
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_artifact), c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    Wait(0.5, c_timeGame);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_victoryCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(1.0, c_timeReal);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(270), ((SoundLengthSync(SoundLink("TValerian03Adjutant00063", -1)) + SoundLengthSync(SoundLink("TValerian03Raynor00064", -1))) + 2.0), -1, 0, true);
    // Transmission - SoundLink("TValerian03Adjutant00063", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian03Adjutant00063", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TValerian03Raynor00064", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TValerian03Raynor00064", -1), c_transmissionDurationAdd, 0.0, true);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(77), 4.0, -1, 0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    libNtve_gf_AttachModelToUnit(gv_artifact, "ArtifactFullyCharged", "Ref_Origin");
    SoundPlay(SoundLink("ZergMothership_Birth", 0), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_artifact), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(2.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_artifact), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_AttachModelToUnit(gv_artifact, "PowerOverwhelming", "Ref_Origin");
    Wait(1.0, c_timeReal);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 50.0, 0.0);
    SoundPlay(SoundLink("WarpGate_MorphToGateway", 2), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeReal);
    SoundPlay(SoundLink("XelNagaShrine_StandWork", 0), PlayerGroupAll(), 100.0, 0.0);
    TriggerEnable(gt_EnergyNovaUsed, false);
    UnitIssueOrder(gv_artifact, Order(AbilityCommand("EnergyNova", 0)), c_orderQueueReplace);
    Wait(1.0, c_timeReal);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_artifact), c_animNameDefault, "Stand Work End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_artifact), c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    for (auto20295560_i = 1; auto20295560_i <= auto20295560_n; auto20295560_i += 1) {
        if ((RandomInt(1, 4) != 1)) {
            libNtve_gf_UnitCreateFacingPoint(1, "Zergling", 0, gv_pLAYER_ZERG_MAIN, RegionRandomPoint(RegionFromId(24)), UnitGetPosition(gv_artifact));
        }
        else {
            if ((RandomInt(1, 4) != 1)) {
                libNtve_gf_UnitCreateFacingPoint(1, "Hydralisk", 0, gv_pLAYER_ZERG_MAIN, RegionRandomPoint(RegionFromId(24)), UnitGetPosition(gv_artifact));
            }
            else {
                libNtve_gf_UnitCreateFacingPoint(1, "Ultralisk", 0, gv_pLAYER_ZERG_MAIN, RegionRandomPoint(RegionFromId(24)), UnitGetPosition(gv_artifact));
            }
        }
    }
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(548), 0.0, -1, 0, true);
    UnitRemove(gv_artifact);
    GameSetLighting("AiurFlashback", 8.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Artifact", c_unitCreateIgnorePlacement, gv_pLAYER_USER, PointFromId(549));
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("EnergyNova", 0)), c_orderQueueReplace);
    UnitRemove(UnitLastCreated());
    Wait(2.0, c_timeReal);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(550), 0.0, -1, 0, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Artifact", c_unitCreateIgnorePlacement, gv_pLAYER_USER, PointFromId(551));
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("EnergyNova", 0)), c_orderQueueReplace);
    UnitRemove(UnitLastCreated());
    Wait(2.0, c_timeReal);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(552), 0.0, -1, 0, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Artifact", c_unitCreateIgnorePlacement, gv_pLAYER_USER, PointFromId(553));
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("EnergyNova", 0)), c_orderQueueReplace);
    UnitRemove(UnitLastCreated());
    Wait(2.0, c_timeReal);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(554), 0.0, -1, 0, true);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(558), 8.0, -1, 0, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Artifact", c_unitCreateIgnorePlacement, gv_pLAYER_USER, PointFromId(555));
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("EnergyNova", 0)), c_orderQueueReplace);
    UnitRemove(UnitLastCreated());
    Wait(9.0, c_timeReal);
    CinematicFade(false, 4.0, c_fadeStyleNormal, Color(100.00, 100.00, 100.00), 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Cinematic);
    Wait(4.0, c_timeReal);
    gv_victoryCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victoryCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(lv_fadeDuration, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pickedUnit;
    fixed lv_fadeDuratioin;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(false);
    gv_inCinematic = false;
    TriggerExecute(gt_Victory, true, false);
    UnitPauseAll(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04Music_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_StartGame_Init();
    gt_CampaignTipQ_Init();
    gt_CreateCrashingDebris_Init();
    gt_ArtifactStatus_Init();
    gt_ArtifactCharging_Init();
    gt_BunkerQ_Init();
    gt_ArtifactCloseQ_Init();
    gt_EnergyNovaQ_Init();
    gt_EnergyNovaKills_Init();
    gt_EnergyNovaUsed_Init();
    gt_EnergyNovaButton_Init();
    gt_EnergyNovaWarningQ_Init();
    gt_BuildingDies_Init();
    gt_BuildingDeathHistoryUpdate_Init();
    gt_StartAI_Init();
    gt_InitializeSpawnRegions_Init();
    gt_ZergUpgradesAdvanced_Init();
    gt_ZergUpgradesExpert_Init();
    gt_ZergAttackWavesPersistent_Init();
    gt_ZergAttackWavesMain_Init();
    gt_ZergAttackWavesMainA08mins_Init();
    gt_ZergAttackWavesMainB813mins_Init();
    gt_ZergAttackWavesMainC1318mins_Init();
    gt_ZergAttackWavesMainD1822minsLeviathan_Init();
    gt_ZergAttackWavesMainE2226mins_Init();
    gt_ZergAttackWavesMainF2629mins_Init();
    gt_ZergAttackWavesMainG2930mins_Init();
    gt_AIFreeMoney_Init();
    gt_SpawnDropPod_Init();
    gt_SpawnAirWave_Init();
    gt_SpawnLeviathanWave_Init();
    gt_LeviathanSpawnsMutaBLord_Init();
    gt_LeviathanMutaBLordBehavior_Init();
    gt_LeviathanDead_Init();
    gt_AirQ_Init();
    gt_AirBehindQ_Init();
    gt_LeviathanQ_Init();
    gt_AirPings_Init();
    gt_SpawnNydusWorm_Init();
    gt_SpawnNydusWormWave_Init();
    gt_NydusPingSound_Init();
    gt_NydusQ_Init();
    gt_NydusWarningQ_Init();
    gt_InitalKerriganPrep_Init();
    gt_KerriganRetreatingfromLowLife_Init();
    gt_SpawnKerriganWave_Init();
    gt_KerriganSpawnChamberAnimations_Init();
    gt_KerriganAttackTransmissionQ_Init();
    gt_KerriganAttackTauntQ_Init();
    gt_KerriganDeepTunnelQ_Init();
    gt_KerriganPing_Init();
    gt_KerriganGetsaKill_Init();
    gt_KerriganOmegastormCooldown_Init();
    gt_KerriganImplosionCooldown_Init();
    gt_InitializeDefenders_Init();
    gt_ReplaceZergDefender_Init();
    gt_ZergRightExtraD_Init();
    gt_ZergMiddleExtraD_Init();
    gt_ZergLeftExtraD_Init();
    gt_AmbientOverlordInitialization_Init();
    gt_AmbientOverlordController_Init();
    gt_OverlordAttack_Init();
    gt_OverlordAttackQ_Init();
    gt_VictoryArtifactCharged_Init();
    gt_Victory_Init();
    gt_AbortMission_Init();
    gt_DefeatArtifactDestroyed_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_ObjectiveArtifactCreateQ_Init();
    gt_ObjectiveArtifactComplete_Init();
    gt_ObjectiveArtifactFailed_Init();
    gt_BriefingQ_Init();
    gt_BriefingScene00_Init();
    gt_BriefingScene01_Init();
    gt_BriefingScene02_Init();
    gt_BriefingScene03_Init();
    gt_BriefingZergAttacksMajor_Init();
    gt_BriefingZergAttacksMinor_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroArtifactAttack_Init();
    gt_InitialArtifactAttackPausing_Init();
    gt_IntroKerriganAnimations_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
