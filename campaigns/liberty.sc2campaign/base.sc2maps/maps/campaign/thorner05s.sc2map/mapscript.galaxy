//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Piercing the Shroud
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/CampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libCamp_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_p01_USER = 1;
const int gv_p02_DOMINION = 2;
const int gv_p03_HERCULES = 3;
const int gv_p04_HYBRID = 4;
const int gv_p05_ZERG_LAB_SPECIMENS = 5;
const int gv_p06_PROTOSS_LAB_SPECIMENS = 6;
const int gv_p07_NEUTRAL = 7;
const int gv_p08_AUTOTURRET_FRIENDLY = 8;
const int gv_p09_NEUTRAL_ATTACK = 9;
const int gv_p10_SCIENTISTS = 10;
const int gv_p11_BRUTALISK = 11;
const int gv_p12_AUTOTURRET_ENEMY = 12;
const int gv_p13_DOMINION_LABS = 13;
const fixed gv_cameraDefault = 27.0;
const int gv_buttonBackPositionHeight = -450;
const int gv_button1stPositionHeight = -350;
const int gv_button2ndPositionHeight = -250;
const int gv_button3rdPositionHeight = -150;
const int gv_button4thPositionHeight = -50;
const int gv_buttonSizeWidth = 370;
const int gv_buttonSizeHeight = 114;
const int gv_labelOffsetWidth = 23;
const int gv_labelOffsetHeight = 23;
const int gv_labelDimensionWidth = 300;
const int gv_labelDimensionHeight = 60;
const int gv_computer01SecurityCam = 16;
const int gv_computer01DeactivateRightFloorGuns = 17;
const int gv_computer01DeactivateLeftFloorGuns = 18;
const int gv_computer01Back = 19;
const int gv_hacking01OneDot = 39;
const int gv_hacking02OneDot = 40;
const int gv_hackingProgress01TwoDot = 41;
const int gv_hackingProgress02TwoDot = 42;
const int gv_hackingProgress01ThreeDot = 43;
const int gv_hackingProgress02ThreeDot = 44;
const int gv_computer02SecurityCam = 20;
const int gv_computer02ReleaseZealots = 21;
const int gv_computer02ReleaseZerg = 22;
const int gv_computer02ReleaseUltras = 23;
const int gv_computer02Back = 24;
const int gv_computer04SecurityCam = 25;
const int gv_computer04AddMissile = 26;
const int gv_computer04AddNapalm = 27;
const int gv_computer04AddGatlingGun = 28;
const int gv_computer04Back = 29;
const int gv_escapeX88tbotButton = 15;
const int gv_computer05SecurityCam = 30;
const int gv_computer05MarineButton = 31;
const int gv_computer05MarauderButton = 32;
const int gv_computer05FirebatButton = 33;
const int gv_computer05MedicButton = 34;
const int gv_computer05Back = 35;
const int gv_computer06Back = 38;
const int gv_computer06BrutaliskReleaseButton = 37;
const int gv_computer06SecurityCam = 36;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_inCinematic;
bool gv_inSecondHalf;
unit gv_warbot;
unit gv_escapeWarbot;
unit gv_hybrid;
unitgroup gv_vikings;
unitgroup gv_tanks;
unit gv_brutalisk;
int gv_brutaliskPing;
unit gv_brutaliskInForceField;
actor gv_hybridChamber;
actor gv_actorBrutaliskInPrison;
unitgroup gv_playerGroupforAI;
unitgroup gv_scientistsGroup;
unitgroup gv_eggsGroup;
unitgroup gv_hybridGroup;
soundlink gv_soundWarbotInitiateButton;
soundlink gv_soundTerminalButtonPush;
soundlink gv_soundBeacon;
fixed gv_raynorMaximumHP;
fixed gv_brutaliskMaximumHP;
int gv_brutaliskResearchGranted;
actor gv_outhouse;
bool gv_terminalInUse;
unit gv_grenades01;
unit gv_grenades02;
unit gv_grenades03;
unit gv_grenades04;
unit gv_grenades05;
unit gv_plasmaGun01;
unit gv_plasmaGun02;
unit gv_plasmaGun03;
unit gv_plasmaGun04;
unit gv_gatlingGun2;
unit gv_gatlingGun22;
unit gv_gatlingGun23;
unit gv_gatlingGun;
bool gv_chronosAlreadyHave;
bool gv_grenadesAlreadyHave;
bool gv_plasmaAlreadyHave;
bool gv_flashButtonGrenade;
bool gv_flashButtonPlasma;
bool gv_flashButtonChronos;
bool gv_flashButtonBreachingCharge;
bool gv_buttonBreachingChargeClicked;
revealer gv_revealerHybridArea;
unit gv_scientistRunning;
bool gv_computerInUse;
bool gv_doorLab01Lowered;
bool gv_doorLab02Lowered;
unit gv_turret01;
unit gv_turret02;
unit gv_turret03;
unit gv_turret04;
unit gv_turret05;
unit gv_turret06;
unit gv_turret07;
unit gv_turret08;
unit gv_turret09;
int gv_buttonComputer01SecurityCam;
int gv_buttonComputer01DeactivateRightFloorGuns;
int gv_buttonComputer01DeactivateLeftFloorGuns;
int gv_buttonComputer01Back;
revealer gv_computer01Revealer01;
revealer gv_computer01Revealer02;
bool gv_computer01DialogueDone;
bool gv_computer01InCameraMode;
bool gv_computer01Active;
bool gv_computer01AllDone;
unitgroup gv_enemyGroupTurretArea;
bool gv_enemyGroupTurretAreaAllDead;
bool gv_midLab01Zerglings;
int gv_buttonHacking01OneDot;
int gv_buttonHacking02OneDot;
int gv_buttonHackingProgress01TwoDot;
int gv_buttonHackingProgress02TwoDot;
int gv_buttonHackingProgress01ThreeDot;
int gv_buttonHackingProgress02ThreeDot;
sound gv_soundHackingLoop;
int gv_buttonComputer02SecurityCam;
int gv_buttonComputer02ReleaseZealots;
int gv_buttonComputer02ReleaseZerg;
int gv_buttonComputer02Ultras;
int gv_buttonComputer02Back;
revealer gv_revealerLab02;
revealer gv_revealerLab02Activated;
bool gv_computer02Active;
bool gv_computer02NoCamera;
bool gv_computer02InCameraMode;
bool gv_computer02Zerglings;
bool gv_computer02Zealots;
bool gv_computer02Ultralisks;
bool gv_computer02AllDone;
bool gv_midLab02Protoss;
bool gv_midLab02Zerg;
bool gv_midLab02AllDeadCheck;
unitgroup gv_lab02DominionUnitGroup;
unitgroup gv_lab02PrisonerUnitGroup;
int gv_buttonComputer04SecurityCam;
int gv_buttonComputer04Missile;
int gv_buttonComputer04Napalm;
int gv_buttonComputer04GatlingGun;
int gv_buttonComputer04Back;
revealer gv_revealerTankBay;
revealer gv_revealerWarbotBay;
bool gv_computer04Active;
bool gv_computer04AllDone;
int gv_buttonEscapeX88tbot;
bool gv_computer04InCameraMode;
int gv_buttonComputer05SecurityCam;
int gv_buttonComputer05Marine;
int gv_buttonComputer05Marauder;
int gv_buttonComputer05Firebat;
int gv_buttonComputer05Medic;
int gv_buttonComputer05Back;
revealer gv_revealerLab03;
revealer gv_revealerLab03Computer;
bool gv_computer05Active;
bool gv_computer05AllDone;
bool gv_computer05InCameraMode;
bool gv_computer05Marines;
bool gv_computer05Marauder;
bool gv_computer05Firebat;
bool gv_computer05Medic;
unit gv_dropshipComputer05;
bool gv_computer06AllDone;
bool gv_computer06Active;
int gv_buttonComputer06Back;
int gv_buttonComputer06BrutaliskRelease;
int gv_buttonComputer06SecurityCam;
bool gv_brutaliskReleased;
actor gv_actorC4FrontDoor;
revealer gv_revealerC4FrontDoor;
unitgroup gv_tankBayEnemyGroup;
actor gv_actorSpeak01;
actor gv_actorSpeak02;
actor gv_actorSpeak03;
actor gv_actorSpeak04;
actor gv_actorSpeak05;
actor gv_actorSpeak06;
actor gv_actorSpeak07;
actor gv_actorSpeak08;
actor gv_actorSpeak09;
actor gv_actorSpeak010;
revealer gv_revealerSnipers;
revealer gv_revealerFailedHybrid;
int gv_computer01Dialogue;
int gv_computer02Dialogue;
actor gv_actorSelectionFusionCore;
int gv_computer04Dialogue;
int gv_computer05Dialogue;
sound gv_soundStatic;
int gv_computer06Dialogue;
bool gv_achievementUnitLosttoBrutalisk;
int gv_achievementPickUpsRemaining;
int gv_achievementWeaponKillls;
int gv_grenadeKills;
int gv_raynorKills;
int gv_statTotalRaynorAndGrenadeKills;
int gv_statWeaponsCollected;
int gv_statBrutaliskKilled;
bool gv_escapeGameStarted;
int gv_pingHercules;
actor gv_actorComputerAutoBot;
actor gv_actorFlameGun;
actor gv_actorRocks01;
unit gv_ultraliskMom;
unit gv_marineEscapeToTransport;
bool gv_escapeComputerActive;
bool gv_escapeComputerAllDone;
unitgroup gv_playerUnitGroup;
unitgroup gv_hybridUnitGroup;
int gv_objectiveInvestigate;
int gv_objectiveFusionReactor;
int gv_pingFusionCore;
int gv_objectiveRaynorSurvive;
int gv_objectiveEscape;
int gv_researchObjectiveBrutalisk;
bool gv_brutaliskDead;
int gv_objectiveProtossRelics;
int gv_obejctiveProtossRelics;
int gv_obejctiveProtossRelicsTotalFirstHalf;
bool gv_protossRelicsSecondHalf;
unitgroup gv_protossRelicsGroup;
int gv_obejctiveProtossRelicsTotalSecondHalf;
bool gv_introCinematicCompleted;
unitgroup gv_introHiddenUnitGroup;
unitgroup gv_introDropshipCargoGroup;
unit gv_introDropship;
unit gv_raynor;
int gv_marineMove;
int gv_medicMove;
unitgroup gv_midHiddenUnitGroupLab01;
bool gv_midCinematicCompletedLab01;
unitgroup gv_zerglingUnitGroupPen01;
actor gv_actorEnergyDoor01;
actor gv_actorEnergyDoor02;
actor gv_actorPenTarget;
unitgroup gv_midHiddenUnitGroupLab02;
bool gv_midCinematicCompletedLab02;
unitgroup gv_midHiddenUnitGroupLab03;
bool gv_midCinematicCompletedLab03;
bool gv_victoryCinematicCompleted;
unitgroup gv_victoryHiddenUnitGroup;
unit gv_escapeDropship;
unit gv_hercules;

void InitGlobals () {
    gv_vikings = UnitGroupEmpty();
    gv_tanks = UnitGroupEmpty();
    gv_brutaliskPing = c_invalidPingId;
    gv_playerGroupforAI = UnitGroupEmpty();
    gv_scientistsGroup = UnitGroupEmpty();
    gv_eggsGroup = UnitGroupEmpty();
    gv_hybridGroup = UnitGroupEmpty();
    gv_soundWarbotInitiateButton = SoundLink("UI_NavButtonSelect", -1);
    gv_soundTerminalButtonPush = SoundLink("UI_Horner05sTerminalButton", -1);
    gv_soundBeacon = SoundLink("Event_Horner05sTerminalActivation", -1);
    gv_buttonComputer01SecurityCam = c_invalidDialogId;
    gv_buttonComputer01DeactivateRightFloorGuns = c_invalidDialogId;
    gv_buttonComputer01DeactivateLeftFloorGuns = c_invalidDialogId;
    gv_buttonComputer01Back = c_invalidDialogId;
    gv_enemyGroupTurretArea = UnitGroupEmpty();
    gv_buttonHacking01OneDot = c_invalidDialogId;
    gv_buttonHacking02OneDot = c_invalidDialogId;
    gv_buttonHackingProgress01TwoDot = c_invalidDialogId;
    gv_buttonHackingProgress02TwoDot = c_invalidDialogId;
    gv_buttonHackingProgress01ThreeDot = c_invalidDialogId;
    gv_buttonHackingProgress02ThreeDot = c_invalidDialogId;
    gv_buttonComputer02SecurityCam = c_invalidDialogId;
    gv_buttonComputer02ReleaseZealots = c_invalidDialogId;
    gv_buttonComputer02ReleaseZerg = c_invalidDialogId;
    gv_buttonComputer02Ultras = c_invalidDialogId;
    gv_buttonComputer02Back = c_invalidDialogId;
    gv_lab02DominionUnitGroup = UnitGroupEmpty();
    gv_lab02PrisonerUnitGroup = UnitGroupEmpty();
    gv_buttonComputer04SecurityCam = c_invalidDialogId;
    gv_buttonComputer04Missile = c_invalidDialogId;
    gv_buttonComputer04Napalm = c_invalidDialogId;
    gv_buttonComputer04GatlingGun = c_invalidDialogId;
    gv_buttonComputer04Back = c_invalidDialogId;
    gv_buttonEscapeX88tbot = c_invalidDialogId;
    gv_buttonComputer05SecurityCam = c_invalidDialogId;
    gv_buttonComputer05Marine = c_invalidDialogId;
    gv_buttonComputer05Marauder = c_invalidDialogId;
    gv_buttonComputer05Firebat = c_invalidDialogId;
    gv_buttonComputer05Medic = c_invalidDialogId;
    gv_buttonComputer05Back = c_invalidDialogId;
    gv_buttonComputer06Back = c_invalidDialogId;
    gv_buttonComputer06BrutaliskRelease = c_invalidDialogId;
    gv_buttonComputer06SecurityCam = c_invalidDialogId;
    gv_tankBayEnemyGroup = UnitGroup(null, gv_p02_DOMINION, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_pingHercules = c_invalidPingId;
    gv_escapeComputerActive = true;
    gv_playerUnitGroup = UnitGroupEmpty();
    gv_hybridUnitGroup = UnitGroupEmpty();
    gv_objectiveInvestigate = c_invalidObjectiveId;
    gv_objectiveFusionReactor = c_invalidObjectiveId;
    gv_pingFusionCore = c_invalidPingId;
    gv_objectiveRaynorSurvive = c_invalidObjectiveId;
    gv_objectiveEscape = c_invalidObjectiveId;
    gv_researchObjectiveBrutalisk = c_invalidObjectiveId;
    gv_objectiveProtossRelics = c_invalidObjectiveId;
    gv_obejctiveProtossRelicsTotalFirstHalf = 2;
    gv_protossRelicsGroup = UnitGroupEmpty();
    gv_obejctiveProtossRelicsTotalSecondHalf = 4;
    gv_introHiddenUnitGroup = UnitGroupEmpty();
    gv_introDropshipCargoGroup = UnitGroupEmpty();
    gv_marineMove = 1;
    gv_medicMove = 1;
    gv_midHiddenUnitGroupLab01 = UnitGroupEmpty();
    gv_zerglingUnitGroupPen01 = UnitGroupEmpty();
    gv_midHiddenUnitGroupLab02 = UnitGroupEmpty();
    gv_midHiddenUnitGroupLab03 = UnitGroupEmpty();
    gv_victoryHiddenUnitGroup = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_SetUnitMaxStats (unit lp_unit, fixed lp_maxShields, fixed lp_maxLife);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04Music;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_StartGame;
trigger gt_TerminalUseSafety;
trigger gt_CreateGrenades;
trigger gt_CreatePlasmaGuns;
trigger gt_CreateMedicCharges;
trigger gt_CreateChronoCharges;
trigger gt_Grenades01;
trigger gt_PlasmaGun01;
trigger gt_ChronoChargePickup01;
trigger gt_HealthandEnergyPickup;
trigger gt_ButtonFlashGrenadesOn;
trigger gt_ButtonFlashGrenadesOff;
trigger gt_ButtonFlashPlasmaGunOn;
trigger gt_ButtonFlashPlasmaGunOff;
trigger gt_ButtonFlashChronosOn;
trigger gt_ButtonFlashChronosOff;
trigger gt_ButtonFlashBreachingChargeOn;
trigger gt_ButtonFlashBreachingChargeOff;
trigger gt_DoorOutsideBlownwithBreachingCharge;
trigger gt_DoorMaintenanceBlownwithBreachingCharge;
trigger gt_Pen01BlownwithBreachingCharge;
trigger gt_DoorLab1BlownwithBreachingCharge;
trigger gt_DoorLab11BlownwithBreachingCharge;
trigger gt_DoorLab2SupplyRoomBlownwithBreachingCharge;
trigger gt_DoorLab2EntranceBlownwithBreachingCharge;
trigger gt_DoorHybridRoom1BlownwithBreachingCharge;
trigger gt_DoorHybridRoom2BlownwithBreachingCharge;
trigger gt_AlertTeamResponseAttack;
trigger gt_HybridAreaLastRoom;
trigger gt_ShutDoor01;
trigger gt_ShutDoor02;
trigger gt_Stasis01;
trigger gt_Stasis02;
trigger gt_Stasis03;
trigger gt_Stasis04;
trigger gt_Stasis05;
trigger gt_ScientistsRunFromFire;
trigger gt_ScientistsRunFromPlayer;
trigger gt_ScientistsRunFromBrutalisk;
trigger gt_ScientistsRunFromHybrid;
trigger gt_ScientistsRunning;
trigger gt_RestoreNormalGameplayUI;
trigger gt_Computer01TurretGunsEnter;
trigger gt_Computer01TurretGunsLeave;
trigger gt_Computer01CameraButtonDisplay;
trigger gt_Computer01CameraActivated;
trigger gt_Computer01ButtonsHacked;
trigger gt_Computer01CameraGunsLeftDisabled;
trigger gt_Computer01CameraGunsRightDisabled;
trigger gt_Computer01Back;
trigger gt_Computer01DefendersMove;
trigger gt_Computer01DoorDiesDefendersMove;
trigger gt_Computer01ButtonHackingLoop;
trigger gt_Computer01TurretDiesLeft;
trigger gt_Computer01TurretDiesRight;
trigger gt_Computer01TurretGunsVisibilityEnter;
trigger gt_Computer01TurretGunsVisibilityLeave;
trigger gt_MakeAutoTurretsUnselectable;
trigger gt_EnemyGroupDies;
trigger gt_AllTurretsDead;
trigger gt_LeftTurretsDead;
trigger gt_RightTurretsDead;
trigger gt_Computer02Enter;
trigger gt_Computer02Leave;
trigger gt_Computer02CameraButtonDisplay;
trigger gt_Computer02CameraActivated;
trigger gt_Computer02ReleaseZealots;
trigger gt_Computer02ReleaseZerg;
trigger gt_Computer02ReleaseUltralisk;
trigger gt_Computer02ReleasePrisonersCombined;
trigger gt_Lab02alldead;
trigger gt_Lab02alldeadCintriggerwithoutcamerasafety;
trigger gt_Lab02DominionDead;
trigger gt_Computer02Back;
trigger gt_MoveAreaLab02DominionAllDead;
trigger gt_Lab01PenDies2;
trigger gt_Computer02DefendersMove;
trigger gt_Computer02DoorDiesDefendersMove;
trigger gt_Computer04Enter;
trigger gt_Computer04Leave;
trigger gt_Computer04CameraButtondisplay;
trigger gt_Computer04CameraActivated;
trigger gt_Computer04AddMissile;
trigger gt_Computer04AddNapalm;
trigger gt_Computer04AddCannons;
trigger gt_Computer04WarbotWeaponActivated;
trigger gt_Computer04PanonWarbot;
trigger gt_Computer04Back;
trigger gt_Computer04WarbotHelpPanel;
trigger gt_Computer05Enter;
trigger gt_Computer05Leave;
trigger gt_Computer05CameraButtonDisplay;
trigger gt_Computer05CameraActivated;
trigger gt_Computer05Marines;
trigger gt_Computer05Marauder;
trigger gt_Computer05Firebat;
trigger gt_Computer05Medic;
trigger gt_Computer05ReinforcementChosen;
trigger gt_Computer05PanonDropship;
trigger gt_Computer05DropshipPurge;
trigger gt_Computer05Back;
trigger gt_Computer05BrutaliskHelpPanel;
trigger gt_Computer06Enter;
trigger gt_Computer06Leave;
trigger gt_Computer06ButtonDisplay;
trigger gt_Computer06CameraActivated;
trigger gt_Computer06BrutaliskReleased;
trigger gt_Computer06Back;
trigger gt_AIReleaseBrutalisk;
trigger gt_FusionReactorDestroyed;
trigger gt_AttackTheWarbot;
trigger gt_MarinesAttackLab04;
trigger gt_FirebatAttackLab03;
trigger gt_BarrelCamShake01;
trigger gt_BarrelCamShake02;
trigger gt_GhostsMove01;
trigger gt_GhostsMove02;
trigger gt_UltraliskChainedDies;
trigger gt_FusionCoreTakesDamage;
trigger gt_Rockstakedamage;
trigger gt_Vikingattackback;
trigger gt_Thorattackback;
trigger gt_AutoSaveBeforeComputer02;
trigger gt_AutoSaveBeforeLab03Brutalisk;
trigger gt_AutoSaveMidMission;
trigger gt_AutoSaveHalfOut;
trigger gt_TipGrenadeQ;
trigger gt_TipPlasmaGunQ;
trigger gt_TipChronoRiftQ;
trigger gt_TipComputerQ;
trigger gt_TipStorymodeQ;
trigger gt_DialogueOutsideDoorSealedQ;
trigger gt_DialogueYoureUnderArrestQ;
trigger gt_DialogueFryanyRebelandAdjutantQ1;
trigger gt_DialogueFryanyRebelandAdjutantQ2;
trigger gt_DialogueFryanyRebelandAdjutantQ3;
trigger gt_DialogueFryanyRebelandAdjutantQ4;
trigger gt_DialogueFryanyRebelandAdjutantQ5;
trigger gt_DialogueFirebatResponseQ;
trigger gt_DialogueLab01DestroythePenQ;
trigger gt_DialogueLab01ExperimentalWeapon;
trigger gt_DialogueLab01ScientistQ;
trigger gt_DialogueHall01MarineQ;
trigger gt_DialogueLab01ExperimentalWeapon2;
trigger gt_DialogueLab02RaynorLotoffirepowerLabQ1;
trigger gt_DialogueLab02RaynorLotoffirepowerLabQ2;
trigger gt_DialogueGetChronoDeviceQ;
trigger gt_DialoguePowerCoreObjQ;
trigger gt_DialogueRaynorComputer4OhyeahQ1;
trigger gt_DialogueRaynorComputer4OhyeahQ2;
trigger gt_DialogueRaynorTankBayQ;
trigger gt_DialogueWarbotLimitedLifeQ;
trigger gt_DialogueRaynorWarbotdownQ;
trigger gt_DialogueRaynorComlinkQ1;
trigger gt_DialogueRaynorComlinkQ2;
trigger gt_DialogueRaynorComlinkQ3;
trigger gt_DialogueHornerReplyQ;
trigger gt_DialogueRaynorReleaseBrutaliskQ1;
trigger gt_DialogueRaynorReleaseBrutaliskQ2;
trigger gt_DialogueRaynorReleaseBrutaliskQ3;
trigger gt_DialogueRaynorLab03Q;
trigger gt_AchievementBrutaliskKillsPlayerUnit;
trigger gt_AchievmentWeaponpickups;
trigger gt_GrenadeKillsforStats;
trigger gt_RaynorKillsforStats;
trigger gt_RaynorPlasmaKillsforStats;
trigger gt_AchievementRaynorWeaponKills;
trigger gt_StartGameEscape;
trigger gt_InitEscape;
trigger gt_TipRubbleEscapeQ;
trigger gt_EscapeDialogueHornerBeCarefulQ;
trigger gt_EscapeDialogueBlastthroughthatrubbleQ;
trigger gt_EscapeDialogueTheHybridQ;
trigger gt_EscapeDialogueRaynorItsontheMoveQ;
trigger gt_EscapeDialogueRaynorWarbotonAutoAttackQ;
trigger gt_EscapeDialogueAutoBotAttackingLetsMoveQ;
trigger gt_EscapeDialogueAutoBotDiesQ;
trigger gt_EscapeDialogueFallingApartQ;
trigger gt_EscapeDialogueRaynorWheredidtheHybridGoQ;
trigger gt_EscapeDialogueHolyCrapQ;
trigger gt_EscapeDialogueGettotheTransportQ;
trigger gt_Explosion01;
trigger gt_Explosion02;
trigger gt_Explosion03;
trigger gt_Explosion04;
trigger gt_Explosion05;
trigger gt_Explosion06;
trigger gt_Explosion07;
trigger gt_Explosion08;
trigger gt_EscapeZergAttack01;
trigger gt_EscapeProtossAttack01;
trigger gt_EscapeUltraliskAttack;
trigger gt_EscapeProtossStayInArea;
trigger gt_EscapeHybridTunnelInitiate;
trigger gt_EscapeHybridSurprise;
trigger gt_EscapeProtossZergFight;
trigger gt_EscapeZergMarineFight;
trigger gt_EscapeHerculesRescue;
trigger gt_RandomMoveAreas;
trigger gt_EscapeComputerEnterWarbot;
trigger gt_EscapeComputerXbotActivate;
trigger gt_StartAIEscape;
trigger gt_StartAIWavesEscape;
trigger gt_EggsBreakwhenclose;
trigger gt_HybridCreate;
trigger gt_HybridPingSound;
trigger gt_HybridAttackRocks;
trigger gt_HybridForceDestroyRocks;
trigger gt_HybridRegeneration;
trigger gt_HybridRocksDestroyed;
trigger gt_HybridCastStunifplayerisclose;
trigger gt_HybridCastConsumeDNAonZerg;
trigger gt_HybridCastConsumeDNAonProtoss;
trigger gt_VictoryEscapeFlyOutUnits;
trigger gt_VictoryEscapeFlyOutRaynor;
trigger gt_VictoryEscape;
trigger gt_Victory;
trigger gt_DefeatRaynorDiesObjectiveFailed;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_ObjectiveInvestigateCreate;
trigger gt_ObjectiveInvestigateComplete;
trigger gt_ObjectiveInvestigateFailed;
trigger gt_ObjectiveFusionReactorCreateQ;
trigger gt_ObjectiveFusionReactorComplete;
trigger gt_ObjectiveFusionReactorFailed;
trigger gt_ObjectiveFusionReactorPing;
trigger gt_ObjectiveRaynorCreateQ;
trigger gt_ObjectiveRaynorComplete;
trigger gt_ObjectiveEscapeCreateQ;
trigger gt_ObjectiveEscapeComplete;
trigger gt_ObjectiveEscapeFailed;
trigger gt_ResearchObjectiveBrutaliskCreateQ;
trigger gt_ResearchObjectiveBrutaliskUpdateQ;
trigger gt_ObjectiveProtossRelicsCreateQ;
trigger gt_ObjectiveProtossRelicsUpdate;
trigger gt_ObjectiveProtossRelicsComplete;
trigger gt_ObjectiveProtossRelicsFailed;
trigger gt_CreateProtossRelicsObjects;
trigger gt_ObjectiveProtossRelicsUpdateSecondHalf;
trigger gt_ObjectiveProtossRelicsCompleteSecondHalf;
trigger gt_BriefingQ;
trigger gt_BriefingScene00;
trigger gt_BriefingScene01;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_DropshipCargoMove;
trigger gt_MidLab01Q;
trigger gt_MidLab01Setup;
trigger gt_MidLab01Cinematic;
trigger gt_MidLab01CinematicEnd;
trigger gt_MidLab01Cleanup;
trigger gt_Lab01ZerglingCreate;
trigger gt_Lab01PenDies;
trigger gt_DialoguePen;
trigger gt_MidLab02Q;
trigger gt_MidLab02Setup;
trigger gt_MidLab02Cinematic;
trigger gt_MidLab02CinematicEnd;
trigger gt_MidLab02Cleanup;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_MidHybridRemove;
trigger gt_MidHybridKillsScientistsnearhim;
trigger gt_MoveAreaScientsts;
trigger gt_MidHybridAttacks;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictorySceneTiming;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_SetUnitMaxStats (unit lp_unit, fixed lp_maxShields, fixed lp_maxLife) {
    // Automatic Variable Declarations
    // Implementation
    UnitSetPropertyFixed(lp_unit, c_unitPropShieldsMax, lp_maxShields);
    UnitSetPropertyFixed(lp_unit, c_unitPropShieldsPercent, 100.0);
    UnitSetPropertyFixed(lp_unit, c_unitPropLifeMax, lp_maxLife);
    UnitSetPropertyFixed(lp_unit, c_unitPropLifePercent, 100.0);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_LoadCampaignData(libCamp_ge_MapID_MapTHorner05S);
    TriggerExecute(gt_Init01Technology, true, true);
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04Music, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    libCamp_gf_RegisterFootageRecording(gt_BriefingQ);
    libCamp_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_IntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_p02_DOMINION, gv_p05_ZERG_LAB_SPECIMENS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p02_DOMINION, gv_p06_PROTOSS_LAB_SPECIMENS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p02_DOMINION, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p05_ZERG_LAB_SPECIMENS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p06_PROTOSS_LAB_SPECIMENS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p09_NEUTRAL_ATTACK, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p10_SCIENTISTS, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p07_NEUTRAL, gv_p02_DOMINION, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p07_NEUTRAL, gv_p10_SCIENTISTS, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    libNtve_gf_SetAlliance(gv_p07_NEUTRAL, gv_p03_HERCULES, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    libNtve_gf_SetAlliance(gv_p10_SCIENTISTS, gv_p02_DOMINION, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p10_SCIENTISTS, gv_p03_HERCULES, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    libNtve_gf_SetAlliance(gv_p05_ZERG_LAB_SPECIMENS, gv_p10_SCIENTISTS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p06_PROTOSS_LAB_SPECIMENS, gv_p10_SCIENTISTS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p11_BRUTALISK, gv_p04_HYBRID, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p11_BRUTALISK, gv_p05_ZERG_LAB_SPECIMENS, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_p11_BRUTALISK, gv_p06_PROTOSS_LAB_SPECIMENS, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_p08_AUTOTURRET_FRIENDLY, gv_p02_DOMINION, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p08_AUTOTURRET_FRIENDLY, gv_p01_USER, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    libNtve_gf_SetAlliance(gv_p12_AUTOTURRET_ENEMY, gv_p02_DOMINION, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_p08_AUTOTURRET_FRIENDLY, gv_p12_AUTOTURRET_ENEMY, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p13_DOMINION_LABS, gv_p02_DOMINION, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_p06_PROTOSS_LAB_SPECIMENS, gv_p13_DOMINION_LABS, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p05_ZERG_LAB_SPECIMENS, gv_p13_DOMINION_LABS, libNtve_ge_AllianceSetting_Neutral);
    PlayerSetState(gv_p07_NEUTRAL, c_playerStateShowScore, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC18DB74C_g;
    int autoC18DB74C_u;
    unit autoC18DB74C_var;
    unitgroup autoFC03208E_g;
    int autoFC03208E_u;
    unit autoFC03208E_var;
    unitgroup auto7239A252_g;
    int auto7239A252_u;
    unit auto7239A252_var;
    unitgroup auto4DD7B44B_g;
    int auto4DD7B44B_u;
    unit auto4DD7B44B_var;
    unitgroup auto8CE2489D_g;
    int auto8CE2489D_u;
    unit auto8CE2489D_var;
    unitgroup auto52F81063_g;
    int auto52F81063_u;
    unit auto52F81063_var;
    unitgroup autoDC6AB5E6_g;
    int autoDC6AB5E6_u;
    unit autoDC6AB5E6_var;
    unitgroup auto71589922_g;
    int auto71589922_u;
    unit auto71589922_var;
    unitgroup auto0B5DED9A_g;
    int auto0B5DED9A_u;
    unit auto0B5DED9A_var;
    unitgroup autoD18E9BE4_g;
    int autoD18E9BE4_u;
    unit autoD18E9BE4_var;
    unitgroup auto35FE4116_g;
    int auto35FE4116_u;
    unit auto35FE4116_var;
    unitgroup auto33CC760C_g;
    int auto33CC760C_u;
    unit auto33CC760C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(1, 0, 0, 0) == 1)) {
        autoC18DB74C_g = UnitGroup("Beacon_Terran", gv_p07_NEUTRAL, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoC18DB74C_u = UnitGroupCount(autoC18DB74C_g, c_unitCountAll);
        for (;; autoC18DB74C_u -= 1) {
            autoC18DB74C_var = UnitGroupUnitFromEnd(autoC18DB74C_g, autoC18DB74C_u);
            if (autoC18DB74C_var == null) { break; }
            UnitSetState(autoC18DB74C_var, c_unitStateTooltipable, true);
        }
    }

    autoFC03208E_g = UnitGroup("Beacon_Terran", gv_p07_NEUTRAL, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFC03208E_u = UnitGroupCount(autoFC03208E_g, c_unitCountAll);
    for (;; autoFC03208E_u -= 1) {
        autoFC03208E_var = UnitGroupUnitFromEnd(autoFC03208E_g, autoFC03208E_u);
        if (autoFC03208E_var == null) { break; }
        UnitSetInfoText(autoFC03208E_var, StringExternal("Param/Value/E9797FD9"), StringExternal("Param/Value/00228AC0"), StringToText(""));
    }
    TriggerExecute(gt_CreateGrenades, true, false);
    TriggerExecute(gt_CreatePlasmaGuns, true, false);
    TriggerExecute(gt_CreateMedicCharges, true, false);
    TriggerExecute(gt_CreateChronoCharges, true, false);
    gv_turret01 = UnitFromId(1807);
    gv_turret02 = UnitFromId(2448);
    gv_turret03 = UnitFromId(524);
    gv_turret04 = UnitFromId(531);
    gv_turret05 = UnitFromId(1799);
    gv_turret06 = UnitFromId(870);
    UnitAbilityEnable(gv_turret01, "SentryGunBurrow", false);
    UnitAbilityEnable(gv_turret02, "SentryGunBurrow", false);
    UnitAbilityEnable(gv_turret03, "SentryGunBurrow", false);
    UnitAbilityEnable(gv_turret04, "SentryGunBurrow", false);
    UnitAbilityEnable(gv_turret05, "SentryGunBurrow", false);
    UnitAbilityEnable(gv_turret06, "SentryGunBurrow", false);
    auto7239A252_g = UnitGroup("Firebat", gv_p02_DOMINION, RegionFromId(157), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7239A252_u = UnitGroupCount(auto7239A252_g, c_unitCountAll);
    for (;; auto7239A252_u -= 1) {
        auto7239A252_var = UnitGroupUnitFromEnd(auto7239A252_g, auto7239A252_u);
        if (auto7239A252_var == null) { break; }
        UnitGroupAdd(gv_enemyGroupTurretArea, auto7239A252_var);
    }
    auto4DD7B44B_g = UnitGroup("Marine", gv_p02_DOMINION, RegionFromId(157), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4DD7B44B_u = UnitGroupCount(auto4DD7B44B_g, c_unitCountAll);
    for (;; auto4DD7B44B_u -= 1) {
        auto4DD7B44B_var = UnitGroupUnitFromEnd(auto4DD7B44B_g, auto4DD7B44B_u);
        if (auto4DD7B44B_var == null) { break; }
        UnitGroupAdd(gv_enemyGroupTurretArea, auto4DD7B44B_var);
    }
    gv_turret07 = UnitFromId(530);
    gv_turret08 = UnitFromId(454);
    gv_turret09 = UnitFromId(1020);
    UnitAbilityEnable(gv_turret07, "SentryGunBurrow", false);
    UnitAbilityEnable(gv_turret08, "SentryGunBurrow", false);
    UnitAbilityEnable(gv_turret09, "SentryGunBurrow", false);
    UnitAbilityEnable(UnitFromId(2387), "SentryGunBurrow", false);
    UnitAbilityEnable(UnitFromId(532), "SentryGunBurrow", false);
    UnitSetPropertyFixed(UnitFromId(459), c_unitPropLifeMax, libNtve_gf_DifficultyValueFixed(400.0, 400.0, 500.0, 600.0));
    auto8CE2489D_g = UnitGroup("SiegeTank", c_playerAny, RegionFromId(95), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8CE2489D_u = UnitGroupCount(auto8CE2489D_g, c_unitCountAll);
    for (;; auto8CE2489D_u -= 1) {
        auto8CE2489D_var = UnitGroupUnitFromEnd(auto8CE2489D_g, auto8CE2489D_u);
        if (auto8CE2489D_var == null) { break; }
        UnitGroupAdd(gv_tanks, auto8CE2489D_var);
    }
    auto52F81063_g = UnitGroup("SiegeTankSieged", c_playerAny, RegionFromId(95), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto52F81063_u = UnitGroupCount(auto52F81063_g, c_unitCountAll);
    for (;; auto52F81063_u -= 1) {
        auto52F81063_var = UnitGroupUnitFromEnd(auto52F81063_g, auto52F81063_u);
        if (auto52F81063_var == null) { break; }
        UnitGroupAdd(gv_tanks, auto52F81063_var);
    }
    autoDC6AB5E6_g = UnitGroup("VikingAssault", c_playerAny, RegionFromId(95), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDC6AB5E6_u = UnitGroupCount(autoDC6AB5E6_g, c_unitCountAll);
    for (;; autoDC6AB5E6_u -= 1) {
        autoDC6AB5E6_var = UnitGroupUnitFromEnd(autoDC6AB5E6_g, autoDC6AB5E6_u);
        if (autoDC6AB5E6_var == null) { break; }
        UnitGroupAdd(gv_vikings, autoDC6AB5E6_var);
    }
    UnitSetPropertyFixed(UnitFromId(2898), c_unitPropLifeMax, 250.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "Warbot", 0, gv_p07_NEUTRAL, PointFromId(165));
    gv_warbot = UnitLastCreated();
    UnitSetState(gv_warbot, c_unitStateFidget, false);
    gf_SetUnitMaxStats(gv_warbot, 0.0, 1500.0);
    UnitSetState(gv_warbot, c_unitStateTargetable, false);
    libNtve_gf_MakeUnitInvulnerable(gv_warbot, true);
    libNtve_gf_PauseUnit(gv_warbot, true);
    UnitBehaviorRemove(gv_warbot, "WarbotFate", 1);
    UnitSetPropertyFixed(UnitFromId(68), c_unitPropEnergyPercent, 100.0);
    UnitSetState(UnitFromId(1488), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(1488), c_unitStateStatusBar, false);
    UnitSetState(UnitFromId(1488), c_unitStateTargetable, false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(162), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(202), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(298), true);
    UnitSetPropertyFixed(UnitFromId(2600), c_unitPropLifePercent, 40.0);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(2658), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(282), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(421), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(427), true);
    UnitSetState(UnitFromId(2658), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(2658), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(898), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(898), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(956), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(956), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(956), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(956), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(955), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(955), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(812), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(812), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(949), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(949), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(954), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(954), c_unitStateSelectable, false);
    auto71589922_g = UnitGroup("ExplodingBarrelLarge", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto71589922_u = UnitGroupCount(auto71589922_g, c_unitCountAll);
    for (;; auto71589922_u -= 1) {
        auto71589922_var = UnitGroupUnitFromEnd(auto71589922_g, auto71589922_u);
        if (auto71589922_var == null) { break; }
        UnitSetPropertyFixed(auto71589922_var, c_unitPropLifeMax, 5.0);
    }
    auto0B5DED9A_g = UnitGroup("PygaliskCocoon", gv_p05_ZERG_LAB_SPECIMENS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0B5DED9A_u = UnitGroupCount(auto0B5DED9A_g, c_unitCountAll);
    for (;; auto0B5DED9A_u -= 1) {
        auto0B5DED9A_var = UnitGroupUnitFromEnd(auto0B5DED9A_g, auto0B5DED9A_u);
        if (auto0B5DED9A_var == null) { break; }
        UnitGroupAdd(gv_eggsGroup, auto0B5DED9A_var);
    }
    autoD18E9BE4_g = UnitGroup(null, gv_p10_SCIENTISTS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD18E9BE4_u = UnitGroupCount(autoD18E9BE4_g, c_unitCountAll);
    for (;; autoD18E9BE4_u -= 1) {
        autoD18E9BE4_var = UnitGroupUnitFromEnd(autoD18E9BE4_g, autoD18E9BE4_u);
        if (autoD18E9BE4_var == null) { break; }
        UnitGroupAdd(gv_scientistsGroup, autoD18E9BE4_var);
    }
    auto35FE4116_g = UnitGroup(null, gv_p02_DOMINION, RegionFromId(48), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto35FE4116_u = UnitGroupCount(auto35FE4116_g, c_unitCountAll);
    for (;; auto35FE4116_u -= 1) {
        auto35FE4116_var = UnitGroupUnitFromEnd(auto35FE4116_g, auto35FE4116_u);
        if (auto35FE4116_var == null) { break; }
        UnitGroupAdd(gv_lab02DominionUnitGroup, auto35FE4116_var);
    }
    UnitGroupAdd(gv_lab02DominionUnitGroup, gv_turret07);
    UnitGroupAdd(gv_lab02DominionUnitGroup, gv_turret08);
    UnitGroupAdd(gv_lab02DominionUnitGroup, gv_turret09);
    ActorSend(ActorFromDoodad(DoodadFromId(235)), libNtve_gf_ModelSwap("HybridHoldingCellDeath", 0));
    ActorSend(ActorFromDoodad(DoodadFromId(235)), "AnimPlay '' Death PlayForever");
    auto33CC760C_g = UnitGroup(null, c_playerAny, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32))), 0);
    auto33CC760C_u = UnitGroupCount(auto33CC760C_g, c_unitCountAll);
    for (;; auto33CC760C_u -= 1) {
        auto33CC760C_var = UnitGroupUnitFromEnd(auto33CC760C_g, auto33CC760C_u);
        if (auto33CC760C_var == null) { break; }
        libNtve_gf_PauseUnit(auto33CC760C_var, true);
    }
    gv_outhouse = ActorFromDoodad(DoodadFromId(1509));
    if ((libCamp_gf_StoryState(libCamp_ge_StoryStateID_StoryStateTaurenOutHouseActivated) == 0)) {
        ActorSend(gv_outhouse, "Destroy");
    }

    UnitSetOwner(UnitFromId(459), gv_p13_DOMINION_LABS, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init04Music_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner05SMusicMain", c_soundtrackCueAny, c_soundtrackIndexAny);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Music_Init () {
    gt_Init04Music = TriggerCreate("gt_Init04Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    CameraSetBounds(PlayerGroupAll(), RegionRect(128.0, 2.0, 256.0, 195.0), true);
    libLbty_gf_AutoRevealRegion(RegionFromId(97), RegionFromId(97), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(17), RegionFromId(17), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(37), RegionFromId(37), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(82), RegionFromId(82), gv_p01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(156), RegionFromId(156), gv_p01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8C370B87_g;
    int auto8C370B87_u;
    unit auto8C370B87_var;
    unitgroup auto39955CC4_g;
    int auto39955CC4_u;
    unit auto39955CC4_var;
    unitgroup autoE743C772_g;
    int autoE743C772_u;
    unit autoE743C772_var;
    unitgroup auto71DBAC7F_g;
    int auto71DBAC7F_u;
    unit auto71DBAC7F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(1, 0, 0, 0) == 1)) {
        PlayerModifyPropertyInt(gv_p02_DOMINION, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p05_ZERG_LAB_SPECIMENS, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p06_PROTOSS_LAB_SPECIMENS, c_playerPropHandicap, c_playerPropOperSetTo, 50);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(gv_p02_DOMINION, "TerranInfantryWeaponsLevel1", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_p02_DOMINION, "TerranVehicleWeaponsLevel1", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_p05_ZERG_LAB_SPECIMENS, "ZergMeleeWeaponsLevel1", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_p06_PROTOSS_LAB_SPECIMENS, "ProtossGroundWeaponsLevel1", 1);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(gv_p02_DOMINION, "TerranInfantryArmorsLevel1", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_p02_DOMINION, "TerranVehicleArmorsLevel1", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_p05_ZERG_LAB_SPECIMENS, "ZergGroundArmorsLevel1", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_p06_PROTOSS_LAB_SPECIMENS, "ProtossGroundArmorsLevel1", 1);
    }

    auto8C370B87_g = UnitGroup("Medic", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8C370B87_u = UnitGroupCount(auto8C370B87_g, c_unitCountAll);
    for (;; auto8C370B87_u -= 1) {
        auto8C370B87_var = UnitGroupUnitFromEnd(auto8C370B87_g, auto8C370B87_u);
        if (auto8C370B87_var == null) { break; }
        UnitSetPropertyFixed(auto8C370B87_var, c_unitPropEnergyPercent, 100.0);
    }
    gv_raynorMaximumHP = libNtve_gf_DifficultyValueFixed(500.0, 500.0, 350.0, 250.0);
    gv_brutaliskMaximumHP = libNtve_gf_DifficultyValueFixed(1000.0, 1500.0, 1500.0, 1500.0);
    auto39955CC4_g = UnitGroup("SentryGun", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32))), 0);
    auto39955CC4_u = UnitGroupCount(auto39955CC4_g, c_unitCountAll);
    for (;; auto39955CC4_u -= 1) {
        auto39955CC4_var = UnitGroupUnitFromEnd(auto39955CC4_g, auto39955CC4_u);
        if (auto39955CC4_var == null) { break; }
        UnitSetPropertyFixed(auto39955CC4_var, c_unitPropLifeMax, libNtve_gf_DifficultyValueFixed(63.0, 125.0, 250.0, 300.0));
        UnitSetPropertyFixed(auto39955CC4_var, c_unitPropLifePercent, 100.0);
    }
    autoE743C772_g = UnitGroup("SentryGunUnderground", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32))), 0);
    autoE743C772_u = UnitGroupCount(autoE743C772_g, c_unitCountAll);
    for (;; autoE743C772_u -= 1) {
        autoE743C772_var = UnitGroupUnitFromEnd(autoE743C772_g, autoE743C772_u);
        if (autoE743C772_var == null) { break; }
        UnitSetPropertyFixed(autoE743C772_var, c_unitPropLifeMax, libNtve_gf_DifficultyValueFixed(63.0, 125.0, 250.0, 300.0));
        UnitSetPropertyFixed(autoE743C772_var, c_unitPropLifePercent, 100.0);
    }
    UnitSetPropertyFixed(UnitFromId(2387), c_unitPropLifeMax, 125.0);
    UnitSetPropertyFixed(UnitFromId(2387), c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(UnitFromId(532), c_unitPropLifeMax, 125.0);
    UnitSetPropertyFixed(UnitFromId(532), c_unitPropLifePercent, 100.0);
    auto71DBAC7F_g = UnitGroup("PerditionTurret", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32))), 0);
    auto71DBAC7F_u = UnitGroupCount(auto71DBAC7F_g, c_unitCountAll);
    for (;; auto71DBAC7F_u -= 1) {
        auto71DBAC7F_var = UnitGroupUnitFromEnd(auto71DBAC7F_g, auto71DBAC7F_u);
        if (auto71DBAC7F_var == null) { break; }
        UnitSetPropertyFixed(auto71DBAC7F_var, c_unitPropLifeMax, 125.0);
        UnitSetPropertyFixed(auto71DBAC7F_var, c_unitPropLifePercent, 100.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PreloadImage("Assets\\Textures\\btn-ability-terran-raynorplasmagun.dds", false);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Marine", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Firebat", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Medic", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("PerditionTurret", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SentryGun", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Marauder", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SiegeTankSieged", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("VikingAssault", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Ghost", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Raynor", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Scientist", false, gv_p01_USER);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("HammerSecurity", false, 1);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("WarPig", false, 1);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("SiegeBreaker", false, 1);
    }

    libCamp_gf_AddUnitTypeToUnitHelpPanel("Zergling", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Roach", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Pygalisk", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Ultralisk", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Warbot", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Brutalisk", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Hybrid", false, gv_p01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game
//--------------------------------------------------------------------------------------------------
bool gt_StartGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(4.0, c_timeReal);
    TriggerExecute(gt_ObjectiveInvestigateCreate, true, false);
    TriggerExecute(gt_ObjectiveRaynorCreateQ, true, false);
    TriggerExecute(gt_ObjectiveProtossRelicsCreateQ, true, false);
    TriggerExecute(gt_ObjectiveFusionReactorCreateQ, true, false);
    TriggerExecute(gt_ObjectiveEscapeCreateQ, true, false);
    TriggerExecute(gt_TipStorymodeQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGame_Init () {
    gt_StartGame = TriggerCreate("gt_StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terminal Use Safety
//--------------------------------------------------------------------------------------------------
bool gt_TerminalUseSafety_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_terminalInUse == true))) {
            return false;
        }

        if (!(((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(147), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0) && (UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(76), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0) && (UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0) && (UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0) && (UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_terminalInUse = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerminalUseSafety_Init () {
    gt_TerminalUseSafety = TriggerCreate("gt_TerminalUseSafety_Func");
    TriggerAddEventTimePeriodic(gt_TerminalUseSafety, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Grenades
//--------------------------------------------------------------------------------------------------
bool gt_CreateGrenades_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "PickupGrenades", c_unitCreateIgnorePlacement, gv_p07_NEUTRAL, PointFromId(959));
    gv_grenades01 = UnitLastCreated();
    gv_achievementPickUpsRemaining += 1;
    UnitSetState(gv_grenades01, c_unitStateTooltipable, true);
    UnitSetInfoText(gv_grenades01, StringExternal("Param/Value/69893BF3"), StringExternal("Param/Value/FC3BF07C"), StringToText(""));
    libNtve_gf_CreateUnitsAtPoint2(1, "PickupGrenades", c_unitCreateIgnorePlacement, gv_p07_NEUTRAL, PointFromId(981));
    gv_grenades02 = UnitLastCreated();
    gv_achievementPickUpsRemaining += 1;
    UnitSetState(gv_grenades02, c_unitStateTooltipable, true);
    UnitSetInfoText(gv_grenades02, StringExternal("Param/Value/9303EA1D"), StringExternal("Param/Value/055EC923"), StringToText(""));
    libNtve_gf_CreateUnitsAtPoint2(1, "PickupGrenades", c_unitCreateIgnorePlacement, gv_p07_NEUTRAL, PointFromId(875));
    gv_grenades03 = UnitLastCreated();
    gv_achievementPickUpsRemaining += 1;
    UnitSetState(gv_grenades03, c_unitStateTooltipable, true);
    UnitSetInfoText(gv_grenades03, StringExternal("Param/Value/29B20723"), StringExternal("Param/Value/FC067EC6"), StringToText(""));
    libNtve_gf_CreateUnitsAtPoint2(1, "PickupGrenades", c_unitCreateIgnorePlacement, gv_p07_NEUTRAL, PointFromId(618));
    gv_grenades04 = UnitLastCreated();
    gv_achievementPickUpsRemaining += 1;
    UnitSetState(gv_grenades04, c_unitStateTooltipable, true);
    UnitSetInfoText(gv_grenades04, StringExternal("Param/Value/C6DE4E0F"), StringExternal("Param/Value/61B19EDA"), StringToText(""));
    libNtve_gf_CreateUnitsAtPoint2(1, "PickupGrenades", c_unitCreateIgnorePlacement, gv_p07_NEUTRAL, PointFromId(239));
    gv_grenades05 = UnitLastCreated();
    gv_achievementPickUpsRemaining += 1;
    UnitSetState(gv_grenades05, c_unitStateTooltipable, true);
    UnitSetInfoText(gv_grenades05, StringExternal("Param/Value/8031F396"), StringExternal("Param/Value/21C884CE"), StringToText(""));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateGrenades_Init () {
    gt_CreateGrenades = TriggerCreate("gt_CreateGrenades_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Plasma Guns
//--------------------------------------------------------------------------------------------------
bool gt_CreatePlasmaGuns_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "PickupPlasmaGun", c_unitCreateIgnorePlacement, gv_p07_NEUTRAL, PointFromId(16));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, 1.0);
    gv_plasmaGun01 = UnitLastCreated();
    gv_achievementPickUpsRemaining += 1;
    UnitSetState(gv_plasmaGun01, c_unitStateTooltipable, true);
    UnitSetInfoText(gv_plasmaGun01, StringExternal("Param/Value/12F822AB"), StringExternal("Param/Value/F7EEB73B"), StringToText(""));
    libNtve_gf_CreateUnitsAtPoint2(1, "PickupPlasmaGun", c_unitCreateIgnorePlacement, gv_p07_NEUTRAL, PointFromId(1213));
    gv_plasmaGun02 = UnitLastCreated();
    gv_achievementPickUpsRemaining += 1;
    UnitSetState(gv_plasmaGun02, c_unitStateTooltipable, true);
    UnitSetInfoText(gv_plasmaGun02, StringExternal("Param/Value/4600DB3D"), StringExternal("Param/Value/EAB4BA13"), StringToText(""));
    libNtve_gf_CreateUnitsAtPoint2(1, "PickupPlasmaGun", c_unitCreateIgnorePlacement, gv_p07_NEUTRAL, PointFromId(670));
    gv_plasmaGun03 = UnitLastCreated();
    gv_achievementPickUpsRemaining += 1;
    UnitSetState(gv_plasmaGun03, c_unitStateTooltipable, true);
    UnitSetInfoText(gv_plasmaGun03, StringExternal("Param/Value/5CCF6C8F"), StringExternal("Param/Value/824EB5D4"), StringToText(""));
    libNtve_gf_CreateUnitsAtPoint2(1, "PickupPlasmaGun", c_unitCreateIgnorePlacement, gv_p07_NEUTRAL, PointFromId(9));
    gv_plasmaGun04 = UnitLastCreated();
    gv_achievementPickUpsRemaining += 1;
    UnitSetState(gv_plasmaGun04, c_unitStateTooltipable, true);
    UnitSetInfoText(gv_plasmaGun04, StringExternal("Param/Value/F02B5B60"), StringExternal("Param/Value/85560A41"), StringToText(""));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreatePlasmaGuns_Init () {
    gt_CreatePlasmaGuns = TriggerCreate("gt_CreatePlasmaGuns_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Medic Charges
//--------------------------------------------------------------------------------------------------
bool gt_CreateMedicCharges_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "PickupRestorationCharge", c_unitCreateIgnorePlacement, gv_p07_NEUTRAL, PointFromId(409));
    UnitSetState(UnitLastCreated(), c_unitStateTooltipable, true);
    UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/57B7604E"), StringExternal("Param/Value/1BFAE0E5"), StringToText(""));
    libNtve_gf_CreateUnitsAtPoint2(1, "PickupRestorationCharge", c_unitCreateIgnorePlacement, gv_p07_NEUTRAL, PointFromId(1025));
    UnitSetState(UnitLastCreated(), c_unitStateTooltipable, true);
    UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/81439D52"), StringExternal("Param/Value/98FB3C48"), StringToText(""));
    libNtve_gf_CreateUnitsAtPoint2(1, "PickupRestorationCharge", c_unitCreateIgnorePlacement, gv_p07_NEUTRAL, PointFromId(2648));
    UnitSetState(UnitLastCreated(), c_unitStateTooltipable, true);
    UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/5ACF9436"), StringExternal("Param/Value/87ABCDA4"), StringToText(""));
    libNtve_gf_CreateUnitsAtPoint2(1, "PickupRestorationCharge", c_unitCreateIgnorePlacement, gv_p07_NEUTRAL, PointFromId(134));
    UnitSetState(UnitLastCreated(), c_unitStateTooltipable, true);
    UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/34C7B4D6"), StringExternal("Param/Value/4CB42B6B"), StringToText(""));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateMedicCharges_Init () {
    gt_CreateMedicCharges = TriggerCreate("gt_CreateMedicCharges_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Chrono Charges
//--------------------------------------------------------------------------------------------------
bool gt_CreateChronoCharges_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "PickupChronoRiftDevice", 0, gv_p07_NEUTRAL, PointFromId(313));
    gv_gatlingGun2 = UnitLastCreated();
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, 1.0);
    UnitSetState(gv_gatlingGun2, c_unitStateTooltipable, true);
    UnitSetInfoText(gv_gatlingGun2, StringExternal("Param/Value/801C9BF8"), StringExternal("Param/Value/4684D028"), StringToText(""));
    gv_achievementPickUpsRemaining += 1;
    libNtve_gf_CreateUnitsAtPoint2(1, "PickupChronoRiftCharge", 0, gv_p07_NEUTRAL, PointFromId(70));
    gv_gatlingGun22 = UnitLastCreated();
    UnitSetState(gv_gatlingGun22, c_unitStateTooltipable, true);
    UnitSetInfoText(gv_gatlingGun22, StringExternal("Param/Value/66AEA8D4"), StringExternal("Param/Value/DB2720BB"), StringToText(""));
    gv_achievementPickUpsRemaining += 1;
    libNtve_gf_CreateUnitsAtPoint2(1, "PickupChronoRiftCharge", 0, gv_p07_NEUTRAL, PointFromId(478));
    gv_gatlingGun23 = UnitLastCreated();
    UnitSetState(gv_gatlingGun23, c_unitStateTooltipable, true);
    UnitSetInfoText(gv_gatlingGun23, StringExternal("Param/Value/06CBBC96"), StringExternal("Param/Value/D4519C80"), StringToText(""));
    gv_achievementPickUpsRemaining += 1;
    libNtve_gf_CreateUnitsAtPoint2(1, "PickupChronoRiftCharge", 0, gv_p07_NEUTRAL, PointFromId(980));
    gv_gatlingGun = UnitLastCreated();
    UnitSetState(gv_gatlingGun, c_unitStateTooltipable, true);
    UnitSetInfoText(gv_gatlingGun, StringExternal("Param/Value/C1C2DF09"), StringExternal("Param/Value/FCB36CB8"), StringToText(""));
    gv_achievementPickUpsRemaining += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateChronoCharges_Init () {
    gt_CreateChronoCharges = TriggerCreate("gt_CreateChronoCharges_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Grenades01
//--------------------------------------------------------------------------------------------------
bool gt_Grenades01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_textLoc;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_textLoc = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "PickupGrenades"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_grenadesAlreadyHave == false)) {
        TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("TossGrenade", 0), true);
        TriggerExecute(gt_ButtonFlashGrenadesOn, true, false);
        UnitAbilityEnable(gv_raynor, "TossGrenade", true);
        UnitAbilityShow(gv_raynor, "TossGrenade", true);
        gv_grenadesAlreadyHave = true;
        TriggerExecute(gt_TipGrenadeQ, true, false);
        if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
            TextTagCreate(StringExternal("Param/Value/28F7B3F3"), 22, lv_textLoc, 0.4, true, true, PlayerGroupAll());
        }
        else {
            gv_achievementPickUpsRemaining -= 1;
            TextTagCreate(StringExternal("Param/Value/39F32FF0"), 22, lv_textLoc, 0.4, true, true, PlayerGroupAll());
            TriggerExecute(gt_AchievmentWeaponpickups, true, false);
        }
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 0.00));
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
        TextTagSetVelocity(TextTagLastCreated(), 2.0, 90.0);
    }
    else {
        if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
            TextTagCreate(StringExternal("Param/Value/9BD3E383"), 22, lv_textLoc, 0.4, true, true, PlayerGroupAll());
        }
        else {
            gv_achievementPickUpsRemaining -= 1;
            TextTagCreate(StringExternal("Param/Value/F6FE2311"), 22, lv_textLoc, 0.4, true, true, PlayerGroupAll());
            TriggerExecute(gt_AchievmentWeaponpickups, true, false);
        }
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 0.00));
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
        TextTagSetVelocity(TextTagLastCreated(), 2.0, 90.0);
    }
    gv_statWeaponsCollected += 1;
    UnitRemove(EventUnit());
    SoundPlay(SoundLink("TUISecret", 0), PlayerGroupAll(), 100.0, 0.0);
    if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
        UnitAddChargeUsed(gv_raynor, "RaynorTossGrenade", -3.0);
    }
    else {
        UnitAddChargeUsed(gv_raynor, "RaynorTossGrenade", -2.0);
    }
    Wait(1.0, c_timeGame);
    SoundStop(SoundLastPlayed(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Grenades01_Init () {
    gt_Grenades01 = TriggerCreate("gt_Grenades01_Func");
    TriggerAddEventUnitAbility(gt_Grenades01, null, AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PlasmaGun01
//--------------------------------------------------------------------------------------------------
bool gt_PlasmaGun01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_textLoc;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_textLoc = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "PickupPlasmaGun"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_plasmaAlreadyHave == false)) {
        TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ExperimentalPlasmaGun", 0), true);
        TriggerExecute(gt_ButtonFlashPlasmaGunOn, true, false);
        UnitAbilityEnable(gv_raynor, "ExperimentalPlasmaGun", true);
        UnitAbilityShow(gv_raynor, "ExperimentalPlasmaGun", true);
        gv_plasmaAlreadyHave = true;
        TriggerExecute(gt_DialogueLab01ExperimentalWeapon, true, false);
        TriggerExecute(gt_TipPlasmaGunQ, true, false);
        if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
            TextTagCreate(StringExternal("Param/Value/1F273B6C"), 22, lv_textLoc, 0.4, true, true, PlayerGroupAll());
        }
        else {
            gv_achievementPickUpsRemaining -= 1;
            TextTagCreate(StringExternal("Param/Value/EDE6B222"), 22, lv_textLoc, 0.4, true, true, PlayerGroupAll());
            TriggerExecute(gt_AchievmentWeaponpickups, true, false);
        }
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 0.00));
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
        TextTagSetVelocity(TextTagLastCreated(), 2.0, 90.0);
    }
    else {
        if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
            TextTagCreate(StringExternal("Param/Value/F2D7048C"), 22, lv_textLoc, 0.4, true, true, PlayerGroupAll());
        }
        else {
            gv_achievementPickUpsRemaining -= 1;
            TextTagCreate(StringExternal("Param/Value/BAB21FB6"), 22, lv_textLoc, 0.4, true, true, PlayerGroupAll());
            TriggerExecute(gt_AchievmentWeaponpickups, true, false);
        }
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 0.00));
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
        TextTagSetVelocity(TextTagLastCreated(), 2.0, 90.0);
    }
    gv_statWeaponsCollected += 1;
    UnitRemove(EventUnit());
    SoundPlay(SoundLink("TUISecret", 0), PlayerGroupAll(), 100.0, 0.0);
    if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
        UnitAddChargeUsed(gv_raynor, "RaynorPlasmaGun", -3.0);
    }
    else {
        UnitAddChargeUsed(gv_raynor, "RaynorPlasmaGun", -2.0);
    }
    Wait(1.0, c_timeGame);
    SoundStop(SoundLastPlayed(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlasmaGun01_Init () {
    gt_PlasmaGun01 = TriggerCreate("gt_PlasmaGun01_Func");
    TriggerAddEventUnitAbility(gt_PlasmaGun01, null, AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chrono Charge Pickup 01
//--------------------------------------------------------------------------------------------------
bool gt_ChronoChargePickup01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_textLoc;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_textLoc = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "PickupChronoRiftDevice") || (UnitGetType(EventUnit()) == "PickupChronoRiftCharge")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_chronosAlreadyHave == false)) {
        TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("TheMorosDevice", 0), true);
        TriggerExecute(gt_ButtonFlashChronosOn, true, false);
        UnitAbilityEnable(gv_raynor, "TheMorosDevice", true);
        UnitAbilityShow(gv_raynor, "TheMorosDevice", true);
        gv_chronosAlreadyHave = true;
        TriggerExecute(gt_DialogueGetChronoDeviceQ, true, false);
        TriggerExecute(gt_TipChronoRiftQ, true, false);
        if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
            TextTagCreate(StringExternal("Param/Value/EE248095"), 22, lv_textLoc, 0.4, true, true, PlayerGroupAll());
        }
        else {
            gv_achievementPickUpsRemaining -= 1;
            TextTagCreate(StringExternal("Param/Value/99DF0C11"), 22, lv_textLoc, 0.4, true, true, PlayerGroupAll());
            TriggerExecute(gt_AchievmentWeaponpickups, true, false);
        }
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 0.00));
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
        TextTagSetVelocity(TextTagLastCreated(), 2.0, 90.0);
    }
    else {
        if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
            TextTagCreate(StringExternal("Param/Value/69AB9669"), 22, lv_textLoc, 0.4, true, true, PlayerGroupAll());
        }
        else {
            gv_achievementPickUpsRemaining -= 1;
            TextTagCreate(StringExternal("Param/Value/E6AE60D0"), 22, lv_textLoc, 0.4, true, true, PlayerGroupAll());
            TriggerExecute(gt_AchievmentWeaponpickups, true, false);
        }
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 0.00));
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
        TextTagSetVelocity(TextTagLastCreated(), 2.0, 90.0);
    }
    gv_statWeaponsCollected += 1;
    UnitRemove(EventUnit());
    SoundPlay(SoundLink("TUISecret", 0), PlayerGroupAll(), 100.0, 0.0);
    if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
        UnitAddChargeUsed(gv_raynor, "RaynorTimeBomb", -1.0);
    }
    else {
        UnitAddChargeUsed(gv_raynor, "RaynorTimeBomb", -1.0);
    }
    Wait(1.0, c_timeGame);
    SoundStop(SoundLastPlayed(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChronoChargePickup01_Init () {
    gt_ChronoChargePickup01 = TriggerCreate("gt_ChronoChargePickup01_Func");
    TriggerAddEventUnitAbility(gt_ChronoChargePickup01, null, AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Health and Energy Pickup
//--------------------------------------------------------------------------------------------------
bool gt_HealthandEnergyPickup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto22FC4D74_g;
    int auto22FC4D74_u;
    unit auto22FC4D74_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "PickupRestorationCharge"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(StringExternal("Param/Value/C0CD930D"), 22, UnitGetPosition(EventUnitTargetUnit()), 0.4, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 0.00));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    TextTagSetVelocity(TextTagLastCreated(), 2.0, 90.0);
    UnitRemove(EventUnit());
    SoundPlay(SoundLink("UI_ResourcePickup", 0), PlayerGroupAll(), 100.0, 0.0);
    auto22FC4D74_g = UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto22FC4D74_u = UnitGroupCount(auto22FC4D74_g, c_unitCountAll);
    for (;; auto22FC4D74_u -= 1) {
        auto22FC4D74_var = UnitGroupUnitFromEnd(auto22FC4D74_g, auto22FC4D74_u);
        if (auto22FC4D74_var == null) { break; }
        UnitSetPropertyFixed(auto22FC4D74_var, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(auto22FC4D74_var, c_unitPropEnergyPercent, 100.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HealthandEnergyPickup_Init () {
    gt_HealthandEnergyPickup = TriggerCreate("gt_HealthandEnergyPickup_Func");
    TriggerAddEventUnitAbility(gt_HealthandEnergyPickup, null, AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Flash Grenades On
//--------------------------------------------------------------------------------------------------
bool gt_ButtonFlashGrenadesOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_flashButtonGrenade == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("TossGrenade", 0), true);
    gv_flashButtonGrenade = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonFlashGrenadesOn_Init () {
    gt_ButtonFlashGrenadesOn = TriggerCreate("gt_ButtonFlashGrenadesOn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Flash Grenades Off
//--------------------------------------------------------------------------------------------------
bool gt_ButtonFlashGrenadesOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_flashButtonGrenade == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("TossGrenade", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonFlashGrenadesOff_Init () {
    gt_ButtonFlashGrenadesOff = TriggerCreate("gt_ButtonFlashGrenadesOff_Func");
    TriggerAddEventButtonPressed(gt_ButtonFlashGrenadesOff, c_playerAny, "TossGrenade");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Flash Plasma Gun On
//--------------------------------------------------------------------------------------------------
bool gt_ButtonFlashPlasmaGunOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_flashButtonPlasma == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("ExperimentalPlasmaGun", 0), true);
    gv_flashButtonPlasma = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonFlashPlasmaGunOn_Init () {
    gt_ButtonFlashPlasmaGunOn = TriggerCreate("gt_ButtonFlashPlasmaGunOn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Flash Plasma Gun Off
//--------------------------------------------------------------------------------------------------
bool gt_ButtonFlashPlasmaGunOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_flashButtonPlasma == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("ExperimentalPlasmaGun", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonFlashPlasmaGunOff_Init () {
    gt_ButtonFlashPlasmaGunOff = TriggerCreate("gt_ButtonFlashPlasmaGunOff_Func");
    TriggerAddEventButtonPressed(gt_ButtonFlashPlasmaGunOff, c_playerAny, "ExperimentalPlasmaGun");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Flash Chronos On
//--------------------------------------------------------------------------------------------------
bool gt_ButtonFlashChronosOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_flashButtonChronos == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("TheMorosDevice", 0), true);
    gv_flashButtonChronos = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonFlashChronosOn_Init () {
    gt_ButtonFlashChronosOn = TriggerCreate("gt_ButtonFlashChronosOn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Flash Chronos Off
//--------------------------------------------------------------------------------------------------
bool gt_ButtonFlashChronosOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_flashButtonChronos == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("TheMorosDevice", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonFlashChronosOff_Init () {
    gt_ButtonFlashChronosOff = TriggerCreate("gt_ButtonFlashChronosOff_Func");
    TriggerAddEventButtonPressed(gt_ButtonFlashChronosOff, c_playerAny, "TheMorosDevice");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Flash Breaching Charge On
//--------------------------------------------------------------------------------------------------
bool gt_ButtonFlashBreachingChargeOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_flashButtonBreachingCharge == false))) {
            return false;
        }

        if (!((gv_buttonBreachingChargeClicked == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("RaynorC4", 0), true);
    gv_flashButtonBreachingCharge = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonFlashBreachingChargeOn_Init () {
    gt_ButtonFlashBreachingChargeOn = TriggerCreate("gt_ButtonFlashBreachingChargeOn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Flash Breaching Charge Off
//--------------------------------------------------------------------------------------------------
bool gt_ButtonFlashBreachingChargeOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("RaynorC4", 0), false);
    gv_buttonBreachingChargeClicked = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonFlashBreachingChargeOff_Init () {
    gt_ButtonFlashBreachingChargeOff = TriggerCreate("gt_ButtonFlashBreachingChargeOff_Func");
    TriggerAddEventButtonPressed(gt_ButtonFlashBreachingChargeOff, c_playerAny, "PlantC4Charge");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Door Outside Blown with Breaching Charge
//--------------------------------------------------------------------------------------------------
bool gt_DoorOutsideBlownwithBreachingCharge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == UnitFromId(162)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_actorC4FrontDoor);
    VisRevealerDestroy(gv_revealerC4FrontDoor);
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 1.0, 100.0, 1.0);
    Wait(2.0, c_timeGame);
    SoundPlayAtPoint(SoundLink("UI_TerranKlaxonAlert", 0), PlayerGroupAll(), PointFromId(176), 0.0, 100.0, 0.0);
    Wait(2.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoorOutsideBlownwithBreachingCharge_Init () {
    gt_DoorOutsideBlownwithBreachingCharge = TriggerCreate("gt_DoorOutsideBlownwithBreachingCharge_Func");
    TriggerAddEventUnitDied(gt_DoorOutsideBlownwithBreachingCharge, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Door Maintenance Blown with Breaching Charge
//--------------------------------------------------------------------------------------------------
bool gt_DoorMaintenanceBlownwithBreachingCharge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoBF6960A8_g;
    int autoBF6960A8_u;
    unit autoBF6960A8_var;

    // Conditions
    if (testConds) {
        if (!((EventUnit() == UnitFromId(202)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PlayerSetAlliance(gv_p12_AUTOTURRET_ENEMY, c_allianceIdVision, gv_p01_USER, true);
    PlayerSetAlliance(gv_p08_AUTOTURRET_FRIENDLY, c_allianceIdVision, gv_p01_USER, true);
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 1.0, 100.0, 1.0);
    autoBF6960A8_g = UnitGroup(null, gv_p10_SCIENTISTS, RegionFromId(62), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBF6960A8_u = UnitGroupCount(autoBF6960A8_g, c_unitCountAll);
    for (;; autoBF6960A8_u -= 1) {
        autoBF6960A8_var = UnitGroupUnitFromEnd(autoBF6960A8_g, autoBF6960A8_u);
        if (autoBF6960A8_var == null) { break; }
        UnitKill(autoBF6960A8_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoorMaintenanceBlownwithBreachingCharge_Init () {
    gt_DoorMaintenanceBlownwithBreachingCharge = TriggerCreate("gt_DoorMaintenanceBlownwithBreachingCharge_Func");
    TriggerAddEventUnitDied(gt_DoorMaintenanceBlownwithBreachingCharge, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pen01 Blown with Breaching Charge
//--------------------------------------------------------------------------------------------------
bool gt_Pen01BlownwithBreachingCharge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto57BDA02E_g;
    int auto57BDA02E_u;
    unit auto57BDA02E_var;

    // Conditions
    if (testConds) {
        if (!((EventUnit() == UnitFromId(459)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto57BDA02E_g = UnitGroup(null, gv_p10_SCIENTISTS, RegionFromId(75), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto57BDA02E_u = UnitGroupCount(auto57BDA02E_g, c_unitCountAll);
    for (;; auto57BDA02E_u -= 1) {
        auto57BDA02E_var = UnitGroupUnitFromEnd(auto57BDA02E_g, auto57BDA02E_u);
        if (auto57BDA02E_var == null) { break; }
        UnitKill(auto57BDA02E_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Pen01BlownwithBreachingCharge_Init () {
    gt_Pen01BlownwithBreachingCharge = TriggerCreate("gt_Pen01BlownwithBreachingCharge_Func");
    TriggerAddEventUnitDied(gt_Pen01BlownwithBreachingCharge, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Door Lab 1 Blown with Breaching Charge
//--------------------------------------------------------------------------------------------------
bool gt_DoorLab1BlownwithBreachingCharge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto79304629_g;
    int auto79304629_u;
    unit auto79304629_var;

    // Conditions
    if (testConds) {
        if (!((EventUnit() == UnitFromId(857)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto79304629_g = UnitGroup(null, gv_p10_SCIENTISTS, RegionFromId(84), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto79304629_u = UnitGroupCount(auto79304629_g, c_unitCountAll);
    for (;; auto79304629_u -= 1) {
        auto79304629_var = UnitGroupUnitFromEnd(auto79304629_g, auto79304629_u);
        if (auto79304629_var == null) { break; }
        UnitKill(auto79304629_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoorLab1BlownwithBreachingCharge_Init () {
    gt_DoorLab1BlownwithBreachingCharge = TriggerCreate("gt_DoorLab1BlownwithBreachingCharge_Func");
    TriggerAddEventUnitDied(gt_DoorLab1BlownwithBreachingCharge, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Door Lab 1.1 Blown with Breaching Charge
//--------------------------------------------------------------------------------------------------
bool gt_DoorLab11BlownwithBreachingCharge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoBB91371A_g;
    int autoBB91371A_u;
    unit autoBB91371A_var;

    // Conditions
    if (testConds) {
        if (!((EventUnit() == UnitFromId(2658)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoBB91371A_g = UnitGroup(null, gv_p10_SCIENTISTS, RegionFromId(136), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBB91371A_u = UnitGroupCount(autoBB91371A_g, c_unitCountAll);
    for (;; autoBB91371A_u -= 1) {
        autoBB91371A_var = UnitGroupUnitFromEnd(autoBB91371A_g, autoBB91371A_u);
        if (autoBB91371A_var == null) { break; }
        UnitKill(autoBB91371A_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoorLab11BlownwithBreachingCharge_Init () {
    gt_DoorLab11BlownwithBreachingCharge = TriggerCreate("gt_DoorLab11BlownwithBreachingCharge_Func");
    TriggerAddEventUnitDied(gt_DoorLab11BlownwithBreachingCharge, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Door Lab 2 Supply Room Blown with Breaching Charge
//--------------------------------------------------------------------------------------------------
bool gt_DoorLab2SupplyRoomBlownwithBreachingCharge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB3679912_g;
    int autoB3679912_u;
    unit autoB3679912_var;

    // Conditions
    if (testConds) {
        if (!((EventUnit() == UnitFromId(427)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 1.0, 100.0, 1.0);
    Wait(1.0, c_timeGame);
    autoB3679912_g = UnitGroup(null, gv_p10_SCIENTISTS, RegionFromId(45), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB3679912_u = UnitGroupCount(autoB3679912_g, c_unitCountAll);
    for (;; autoB3679912_u -= 1) {
        autoB3679912_var = UnitGroupUnitFromEnd(autoB3679912_g, autoB3679912_u);
        if (autoB3679912_var == null) { break; }
        UnitKill(autoB3679912_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoorLab2SupplyRoomBlownwithBreachingCharge_Init () {
    gt_DoorLab2SupplyRoomBlownwithBreachingCharge = TriggerCreate("gt_DoorLab2SupplyRoomBlownwithBreachingCharge_Func");
    TriggerAddEventUnitDied(gt_DoorLab2SupplyRoomBlownwithBreachingCharge, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Door Lab 2 Entrance Blown with Breaching Charge
//--------------------------------------------------------------------------------------------------
bool gt_DoorLab2EntranceBlownwithBreachingCharge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1E8BF10F_g;
    int auto1E8BF10F_u;
    unit auto1E8BF10F_var;

    // Conditions
    if (testConds) {
        if (!((EventUnit() == UnitFromId(421)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 1.0, 100.0, 1.0);
    Wait(1.0, c_timeGame);
    auto1E8BF10F_g = UnitGroup(null, gv_p10_SCIENTISTS, RegionFromId(65), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1E8BF10F_u = UnitGroupCount(auto1E8BF10F_g, c_unitCountAll);
    for (;; auto1E8BF10F_u -= 1) {
        auto1E8BF10F_var = UnitGroupUnitFromEnd(auto1E8BF10F_g, auto1E8BF10F_u);
        if (auto1E8BF10F_var == null) { break; }
        UnitKill(auto1E8BF10F_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoorLab2EntranceBlownwithBreachingCharge_Init () {
    gt_DoorLab2EntranceBlownwithBreachingCharge = TriggerCreate("gt_DoorLab2EntranceBlownwithBreachingCharge_Func");
    TriggerAddEventUnitDied(gt_DoorLab2EntranceBlownwithBreachingCharge, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Door Hybrid Room 1 Blown with Breaching Charge
//--------------------------------------------------------------------------------------------------
bool gt_DoorHybridRoom1BlownwithBreachingCharge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto576738E4_g;
    int auto576738E4_u;
    unit auto576738E4_var;

    // Conditions
    if (testConds) {
        if (!((EventUnit() == UnitFromId(298)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 1.0, 100.0, 1.0);
    auto576738E4_g = UnitGroup(null, gv_p10_SCIENTISTS, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto576738E4_u = UnitGroupCount(auto576738E4_g, c_unitCountAll);
    for (;; auto576738E4_u -= 1) {
        auto576738E4_var = UnitGroupUnitFromEnd(auto576738E4_g, auto576738E4_u);
        if (auto576738E4_var == null) { break; }
        UnitKill(auto576738E4_var);
    }
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_AutoSaveBeforeLab03Brutalisk, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoorHybridRoom1BlownwithBreachingCharge_Init () {
    gt_DoorHybridRoom1BlownwithBreachingCharge = TriggerCreate("gt_DoorHybridRoom1BlownwithBreachingCharge_Func");
    TriggerAddEventUnitDied(gt_DoorHybridRoom1BlownwithBreachingCharge, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Door Hybrid Room 2 Blown with Breaching Charge
//--------------------------------------------------------------------------------------------------
bool gt_DoorHybridRoom2BlownwithBreachingCharge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoFB3D03A8_g;
    int autoFB3D03A8_u;
    unit autoFB3D03A8_var;

    // Conditions
    if (testConds) {
        if (!((EventUnit() == UnitFromId(282)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 1.0, 100.0, 1.0);
    autoFB3D03A8_g = UnitGroup(null, gv_p10_SCIENTISTS, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFB3D03A8_u = UnitGroupCount(autoFB3D03A8_g, c_unitCountAll);
    for (;; autoFB3D03A8_u -= 1) {
        autoFB3D03A8_var = UnitGroupUnitFromEnd(autoFB3D03A8_g, autoFB3D03A8_u);
        if (autoFB3D03A8_var == null) { break; }
        UnitKill(autoFB3D03A8_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoorHybridRoom2BlownwithBreachingCharge_Init () {
    gt_DoorHybridRoom2BlownwithBreachingCharge = TriggerCreate("gt_DoorHybridRoom2BlownwithBreachingCharge_Func");
    TriggerAddEventUnitDied(gt_DoorHybridRoom2BlownwithBreachingCharge, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alert Team Response Attack
//--------------------------------------------------------------------------------------------------
bool gt_AlertTeamResponseAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoCB026C0A_g;
    int autoCB026C0A_u;
    unit autoCB026C0A_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(698), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(739)), c_orderQueueReplace);
    autoCB026C0A_g = UnitGroupFilterRegion(UnitGroup(null, gv_p02_DOMINION, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionFromId(3), 0);
    autoCB026C0A_u = UnitGroupCount(autoCB026C0A_g, c_unitCountAll);
    for (;; autoCB026C0A_u -= 1) {
        autoCB026C0A_var = UnitGroupUnitFromEnd(autoCB026C0A_g, autoCB026C0A_u);
        if (autoCB026C0A_var == null) { break; }
        UnitIssueOrder(autoCB026C0A_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(324)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AlertTeamResponseAttack_Init () {
    gt_AlertTeamResponseAttack = TriggerCreate("gt_AlertTeamResponseAttack_Func");
    TriggerAddEventUnitRegion(gt_AlertTeamResponseAttack, null, RegionFromId(30), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid AreaLastRoom
//--------------------------------------------------------------------------------------------------
bool gt_HybridAreaLastRoom_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealerCreate(gv_p01_USER, RegionFromId(25));
    gv_revealerHybridArea = VisRevealerLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridAreaLastRoom_Init () {
    gt_HybridAreaLastRoom = TriggerCreate("gt_HybridAreaLastRoom_Func");
    TriggerAddEventUnitRegion(gt_HybridAreaLastRoom, null, RegionFromId(25), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shut Door 01
//--------------------------------------------------------------------------------------------------
bool gt_ShutDoor01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(UnitFromId(202), Order(AbilityCommand("DestructibleGateDiagonalBLUR", 0)), c_orderQueueReplace);
    UnitSetState(UnitFromId(202), c_unitStateSelectable, true);
    UnitSetState(UnitFromId(202), c_unitStateTargetable, true);
    Wait(4.0, c_timeGame);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(202), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShutDoor01_Init () {
    gt_ShutDoor01 = TriggerCreate("gt_ShutDoor01_Func");
    TriggerAddEventUnitRegion(gt_ShutDoor01, null, RegionFromId(71), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shut Door 02
//--------------------------------------------------------------------------------------------------
bool gt_ShutDoor02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_DialogueLab01ExperimentalWeapon2, true, false);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(UnitFromId(421), Order(AbilityCommand("DestructibleGateDiagonalBLUR", 0)), c_orderQueueReplace);
    UnitSetState(UnitFromId(421), c_unitStateSelectable, true);
    UnitSetState(UnitFromId(421), c_unitStateTargetable, true);
    Wait(4.0, c_timeGame);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(421), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShutDoor02_Init () {
    gt_ShutDoor02 = TriggerCreate("gt_ShutDoor02_Func");
    TriggerAddEventUnitRegion(gt_ShutDoor02, null, RegionFromId(66), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stasis01
//--------------------------------------------------------------------------------------------------
bool gt_Stasis01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ActorSend(ActorFromDoodad(DoodadFromId(2469)), "AnimBracketStart Rise Stand,Work,Start Stand,Work Stand,Work,End");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Stasis01_Init () {
    gt_Stasis01 = TriggerCreate("gt_Stasis01_Func");
    TriggerAddEventUnitRegion(gt_Stasis01, null, RegionFromId(133), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stasis02
//--------------------------------------------------------------------------------------------------
bool gt_Stasis02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ActorSend(ActorFromDoodad(DoodadFromId(2467)), "AnimBracketStart Rise Stand,Work,Start Stand,Work Stand,Work,End");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Stasis02_Init () {
    gt_Stasis02 = TriggerCreate("gt_Stasis02_Func");
    TriggerAddEventUnitRegion(gt_Stasis02, null, RegionFromId(137), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stasis03
//--------------------------------------------------------------------------------------------------
bool gt_Stasis03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ActorSend(ActorFromDoodad(DoodadFromId(2466)), "AnimBracketStart Rise Stand,Work,Start Stand,Work Stand,Work,End");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Stasis03_Init () {
    gt_Stasis03 = TriggerCreate("gt_Stasis03_Func");
    TriggerAddEventUnitRegion(gt_Stasis03, null, RegionFromId(138), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stasis04
//--------------------------------------------------------------------------------------------------
bool gt_Stasis04_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ActorSend(ActorFromDoodad(DoodadFromId(1045)), "AnimBracketStart Rise Stand,Work,Start Stand,Work Stand,Work,End");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Stasis04_Init () {
    gt_Stasis04 = TriggerCreate("gt_Stasis04_Func");
    TriggerAddEventUnitRegion(gt_Stasis04, null, RegionFromId(144), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stasis05
//--------------------------------------------------------------------------------------------------
bool gt_Stasis05_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ActorSend(ActorFromDoodad(DoodadFromId(464)), "AnimBracketStart Rise Stand,Work,Start Stand,Work Stand,Work,End");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Stasis05_Init () {
    gt_Stasis05 = TriggerCreate("gt_Stasis05_Func");
    TriggerAddEventUnitRegion(gt_Stasis05, null, RegionFromId(145), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scientists Run From Fire
//--------------------------------------------------------------------------------------------------
bool gt_ScientistsRunFromFire_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_scientist;
    fixed lv_angle;
    point lv_whereToRun;
    unitgroup lv_group;
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup autoC6F67F0C_g;
    int autoC6F67F0C_u;

    // Variable Initialization
    lv_group = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_group = UnitGroup(null, gv_p10_SCIENTISTS, RegionCircle(UnitGetPosition(EventUnit()), 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC6F67F0C_g = lv_group;
    autoC6F67F0C_u = UnitGroupCount(autoC6F67F0C_g, c_unitCountAll);
    for (;; autoC6F67F0C_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoC6F67F0C_g, autoC6F67F0C_u);
        if (lv_indexUnit == null) { break; }
        if ((UnitGroupHasUnit(gv_scientistsGroup, lv_indexUnit) == true) && (UnitGetCustomValue(lv_indexUnit, 0) == 0.0)) {
            lv_scientist = lv_indexUnit;
            UnitSetCustomValue(lv_scientist, 0, 1.0);
            if ((lv_scientist == EventUnit())) {
                lv_angle = AngleBetweenPoints(UnitGetPosition(EventUnitDamageSourceUnit()), UnitGetPosition(lv_scientist));
            }
            else {
                lv_angle = AngleBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(lv_scientist));
            }
            lv_whereToRun = PointWithOffsetPolar(UnitGetPosition(lv_scientist), RandomFixed(3.0, 9.0), (lv_angle + RandomFixed(-20.0, 20.0)));
            UnitBehaviorAdd(lv_scientist, "Run", lv_scientist, 1);
            UnitIssueOrder(lv_scientist, OrderTargetingPoint(AbilityCommand("move", 0), lv_whereToRun), c_orderQueueReplace);
            gv_scientistRunning = lv_scientist;
            TriggerExecute(gt_ScientistsRunning, true, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScientistsRunFromFire_Init () {
    gt_ScientistsRunFromFire = TriggerCreate("gt_ScientistsRunFromFire_Func");
    TriggerAddEventUnitDamaged(gt_ScientistsRunFromFire, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scientists Run From Player
//--------------------------------------------------------------------------------------------------
bool gt_ScientistsRunFromPlayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_scientist;
    unitgroup lv_intruderGroup;
    point lv_whereToRun;

    // Automatic Variable Declarations
    unitgroup auto8FF98E81_g;
    int auto8FF98E81_u;

    // Variable Initialization
    lv_intruderGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto8FF98E81_g = gv_scientistsGroup;
    auto8FF98E81_u = UnitGroupCount(auto8FF98E81_g, c_unitCountAll);
    for (;; auto8FF98E81_u -= 1) {
        lv_scientist = UnitGroupUnitFromEnd(auto8FF98E81_g, auto8FF98E81_u);
        if (lv_scientist == null) { break; }
        if ((UnitGetCustomValue(lv_scientist, 0) == 0.0)) {
            lv_intruderGroup = UnitGroup(null, gv_p01_USER, RegionCircle(UnitGetPosition(lv_scientist), 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
            if ((UnitGroupCount(lv_intruderGroup, c_unitCountAlive) > 0)) {
                UnitSetCustomValue(lv_scientist, 0, 1.0);
                lv_whereToRun = libNtve_gf_RandomPointBetweenPoints(UnitGetPosition(lv_scientist), PointWithOffsetPolar(UnitGetPosition(lv_scientist), RandomFixed(8.0, 12.0), (AngleBetweenPoints(UnitGetPosition(lv_scientist), UnitGetPosition(UnitGroupUnit(lv_intruderGroup, 1))) + 180.0)));
                UnitBehaviorAdd(lv_scientist, "Run", lv_scientist, 1);
                UnitIssueOrder(lv_scientist, OrderTargetingPoint(AbilityCommand("move", 0), lv_whereToRun), c_orderQueueReplace);
                gv_scientistRunning = lv_scientist;
                TriggerExecute(gt_ScientistsRunning, true, false);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScientistsRunFromPlayer_Init () {
    gt_ScientistsRunFromPlayer = TriggerCreate("gt_ScientistsRunFromPlayer_Func");
    TriggerAddEventTimePeriodic(gt_ScientistsRunFromPlayer, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scientists Run From Brutalisk
//--------------------------------------------------------------------------------------------------
bool gt_ScientistsRunFromBrutalisk_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_scientist;
    unitgroup lv_brutaliskGroup;
    point lv_whereToRun;

    // Automatic Variable Declarations
    unitgroup auto3943785C_g;
    int auto3943785C_u;

    // Variable Initialization
    lv_brutaliskGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto3943785C_g = gv_scientistsGroup;
    auto3943785C_u = UnitGroupCount(auto3943785C_g, c_unitCountAll);
    for (;; auto3943785C_u -= 1) {
        lv_scientist = UnitGroupUnitFromEnd(auto3943785C_g, auto3943785C_u);
        if (lv_scientist == null) { break; }
        if ((UnitGetCustomValue(lv_scientist, 0) == 0.0)) {
            lv_brutaliskGroup = UnitGroup(null, gv_p11_BRUTALISK, RegionCircle(UnitGetPosition(lv_scientist), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
            if ((UnitGroupCount(lv_brutaliskGroup, c_unitCountAlive) > 0)) {
                UnitSetCustomValue(lv_scientist, 0, 1.0);
                lv_whereToRun = libNtve_gf_RandomPointBetweenPoints(UnitGetPosition(lv_scientist), PointWithOffsetPolar(UnitGetPosition(lv_scientist), RandomFixed(8.0, 12.0), (AngleBetweenPoints(UnitGetPosition(lv_scientist), UnitGetPosition(UnitGroupUnit(lv_brutaliskGroup, 1))) + 180.0)));
                UnitBehaviorAdd(lv_scientist, "Run", lv_scientist, 1);
                UnitIssueOrder(lv_scientist, OrderTargetingPoint(AbilityCommand("move", 0), lv_whereToRun), c_orderQueueReplace);
                gv_scientistRunning = lv_scientist;
                TriggerExecute(gt_ScientistsRunning, true, false);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScientistsRunFromBrutalisk_Init () {
    gt_ScientistsRunFromBrutalisk = TriggerCreate("gt_ScientistsRunFromBrutalisk_Func");
    TriggerAddEventTimePeriodic(gt_ScientistsRunFromBrutalisk, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scientists Run From Hybrid
//--------------------------------------------------------------------------------------------------
bool gt_ScientistsRunFromHybrid_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_scientist;
    unitgroup lv_hybridGroup;
    point lv_whereToRun;

    // Automatic Variable Declarations
    unitgroup auto9C1505DC_g;
    int auto9C1505DC_u;

    // Variable Initialization
    lv_hybridGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9C1505DC_g = gv_scientistsGroup;
    auto9C1505DC_u = UnitGroupCount(auto9C1505DC_g, c_unitCountAll);
    for (;; auto9C1505DC_u -= 1) {
        lv_scientist = UnitGroupUnitFromEnd(auto9C1505DC_g, auto9C1505DC_u);
        if (lv_scientist == null) { break; }
        if ((UnitGetCustomValue(lv_scientist, 0) == 0.0)) {
            lv_hybridGroup = UnitGroup(null, gv_p04_HYBRID, RegionCircle(UnitGetPosition(lv_scientist), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
            if ((UnitGroupCount(lv_hybridGroup, c_unitCountAlive) > 0)) {
                UnitSetCustomValue(lv_scientist, 0, 1.0);
                lv_whereToRun = libNtve_gf_RandomPointBetweenPoints(UnitGetPosition(lv_scientist), PointWithOffsetPolar(UnitGetPosition(lv_scientist), RandomFixed(8.0, 12.0), (AngleBetweenPoints(UnitGetPosition(lv_scientist), UnitGetPosition(UnitGroupUnit(lv_hybridGroup, 1))) + 180.0)));
                UnitBehaviorAdd(lv_scientist, "Run", lv_scientist, 1);
                UnitIssueOrder(lv_scientist, OrderTargetingPoint(AbilityCommand("move", 0), lv_whereToRun), c_orderQueueReplace);
                gv_scientistRunning = lv_scientist;
                TriggerExecute(gt_ScientistsRunning, true, false);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScientistsRunFromHybrid_Init () {
    gt_ScientistsRunFromHybrid = TriggerCreate("gt_ScientistsRunFromHybrid_Func");
    TriggerAddEventTimePeriodic(gt_ScientistsRunFromHybrid, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scientists Running
//--------------------------------------------------------------------------------------------------
bool gt_ScientistsRunning_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_scientist;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_scientist = gv_scientistRunning;
    while (true) {
        Wait(0.5, c_timeGame);
        if ((UnitIsAlive(lv_scientist) == false)) {
            return true;
        }

        if ((UnitTestState(lv_scientist, c_unitStateIdle) == true)) {
            libNtve_gf_TurnAnimationPropertiesOff(libNtve_gf_MainActorofUnit(lv_scientist), "Fast");
            libNtve_gf_SendActorMessageToUnit(lv_scientist, "AnimBracketStart Scared Fidget,Inferior,Start Fidget,Inferior Fidget,Inferior,E");
            Wait(5.0, c_timeReal);
            libNtve_gf_SendActorMessageToUnit(lv_scientist, "AnimBracketStop Scared");
            Wait(1.0, c_timeReal);
            UnitSetCustomValue(lv_scientist, 0, 0.0);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScientistsRunning_Init () {
    gt_ScientistsRunning = TriggerCreate("gt_ScientistsRunning_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: RestoreNormalGameplayUI
//--------------------------------------------------------------------------------------------------
bool gt_RestoreNormalGameplayUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto82494D70_g;
    int auto82494D70_u;
    unit auto82494D70_var;
    unitgroup auto2D28BE19_g;
    int auto2D28BE19_u;
    unit auto2D28BE19_var;
    unitgroup auto8AEF50B0_g;
    int auto8AEF50B0_u;
    unit auto8AEF50B0_var;
    unitgroup auto3310EB0C_g;
    int auto3310EB0C_u;
    unit auto3310EB0C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto82494D70_g = UnitGroupFilterRegion(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionPlayableMap(), 0);
    auto82494D70_u = UnitGroupCount(auto82494D70_g, c_unitCountAll);
    for (;; auto82494D70_u -= 1) {
        auto82494D70_var = UnitGroupUnitFromEnd(auto82494D70_g, auto82494D70_u);
        if (auto82494D70_var == null) { break; }
        UnitSetState(auto82494D70_var, c_unitStateSelectable, true);
        UnitSetState(auto82494D70_var, c_unitStateHighlightable, true);
        UnitSetState(auto82494D70_var, c_unitStateStatusBar, true);
    }
    UnitSetState(gv_warbot, c_unitStateSelectable, true);
    UnitSetState(gv_warbot, c_unitStateHighlightable, true);
    UnitSetState(gv_warbot, c_unitStateStatusBar, true);
    auto2D28BE19_g = UnitGroupFilterRegion(UnitGroup(null, gv_p07_NEUTRAL, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionPlayableMap(), 0);
    auto2D28BE19_u = UnitGroupCount(auto2D28BE19_g, c_unitCountAll);
    for (;; auto2D28BE19_u -= 1) {
        auto2D28BE19_var = UnitGroupUnitFromEnd(auto2D28BE19_g, auto2D28BE19_u);
        if (auto2D28BE19_var == null) { break; }
        UnitSetState(auto2D28BE19_var, c_unitStateStatusBar, false);
        UnitSetState(auto2D28BE19_var, c_unitStateTargetable, false);
        UnitSetState(auto2D28BE19_var, c_unitStateHighlightable, false);
    }
    auto8AEF50B0_g = UnitGroup("PathingBlocker1x1", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8AEF50B0_u = UnitGroupCount(auto8AEF50B0_g, c_unitCountAll);
    for (;; auto8AEF50B0_u -= 1) {
        auto8AEF50B0_var = UnitGroupUnitFromEnd(auto8AEF50B0_g, auto8AEF50B0_u);
        if (auto8AEF50B0_var == null) { break; }
        UnitSetState(auto8AEF50B0_var, c_unitStateSelectable, false);
        UnitSetState(auto8AEF50B0_var, c_unitStateHighlightable, false);
        UnitSetState(auto8AEF50B0_var, c_unitStateStatusBar, false);
        UnitSetState(auto8AEF50B0_var, c_unitStateTargetable, false);
    }
    auto3310EB0C_g = gv_playerUnitGroup;
    auto3310EB0C_u = UnitGroupCount(auto3310EB0C_g, c_unitCountAll);
    for (;; auto3310EB0C_u -= 1) {
        auto3310EB0C_var = UnitGroupUnitFromEnd(auto3310EB0C_g, auto3310EB0C_u);
        if (auto3310EB0C_var == null) { break; }
        libNtve_gf_PauseUnit(auto3310EB0C_var, false);
        libNtve_gf_ShowHideUnit(auto3310EB0C_var, true);
        libNtve_gf_MakeUnitInvulnerable(auto3310EB0C_var, false);
        UnitSetState(auto3310EB0C_var, c_unitStateSelectable, true);
        UnitSetState(auto3310EB0C_var, c_unitStateHighlightable, true);
        UnitSetState(auto3310EB0C_var, c_unitStateStatusBar, true);
    }
    if ((gv_doorLab01Lowered == true)) {
        UnitSetState(UnitFromId(202), c_unitStateStatusBar, false);
        UnitSetState(UnitFromId(202), c_unitStateTargetable, false);
        UnitSetState(UnitFromId(202), c_unitStateHighlightable, false);
        UnitSetState(UnitFromId(202), c_unitStateSelectable, false);
    }

    if ((gv_doorLab02Lowered == true)) {
        UnitSetState(UnitFromId(421), c_unitStateStatusBar, false);
        UnitSetState(UnitFromId(421), c_unitStateTargetable, false);
        UnitSetState(UnitFromId(421), c_unitStateHighlightable, false);
        UnitSetState(UnitFromId(421), c_unitStateSelectable, false);
    }

    UnitSetState(UnitFromId(2658), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(2658), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(857), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(857), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(898), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(898), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(1108), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(1108), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(1108), c_unitStateHighlightable, false);
    UnitSetState(UnitFromId(149), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(149), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(149), c_unitStateHighlightable, false);
    UnitSetState(UnitFromId(956), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(956), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(956), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(956), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(955), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(955), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(812), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(812), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(949), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(949), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(954), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(954), c_unitStateSelectable, false);
    GameSetLighting("Castanar", 0.0);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTipAlertPanel, true);
    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    CameraLockInput(gv_p01_USER, false);
    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    libNtve_gf_RestoreUnitSelection(gv_p01_USER);
    CinematicOverlay(false, 0.0, "Assets\\Textures\\securitycam1.dds", 0.0, true);
    UnitSetState(gv_turret01, c_unitStateSelectable, true);
    UnitSetState(gv_turret02, c_unitStateSelectable, true);
    UnitSetState(gv_turret03, c_unitStateSelectable, true);
    UnitSetState(gv_turret04, c_unitStateSelectable, true);
    UnitSetState(gv_turret05, c_unitStateSelectable, true);
    UnitSetState(gv_turret06, c_unitStateSelectable, true);
    UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowSmartClick, true);
    UnitSetState(UnitFromId(1488), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(1488), c_unitStateStatusBar, false);
    UnitSetState(UnitFromId(1488), c_unitStateTargetable, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RestoreNormalGameplayUI_Init () {
    gt_RestoreNormalGameplayUI = TriggerCreate("gt_RestoreNormalGameplayUI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer01 Turret Guns Enter
//--------------------------------------------------------------------------------------------------
bool gt_Computer01TurretGunsEnter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_computer01Active == false))) {
            return false;
        }

        if (!((gv_computer01InCameraMode == false))) {
            return false;
        }

        if (!((gv_terminalInUse == false))) {
            return false;
        }

        if (!((gv_computer01AllDone == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(147), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(gv_soundBeacon, PlayerGroupAll(), 100.0, 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner05SMusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gv_computer01Active = true;
    gv_terminalInUse = true;
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    TriggerExecute(gt_Computer01CameraButtonDisplay, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer01TurretGunsEnter_Init () {
    gt_Computer01TurretGunsEnter = TriggerCreate("gt_Computer01TurretGunsEnter_Func");
    TriggerAddEventTimePeriodic(gt_Computer01TurretGunsEnter, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer01 Turret Guns Leave
//--------------------------------------------------------------------------------------------------
bool gt_Computer01TurretGunsLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_computer01InCameraMode == false))) {
            return false;
        }

        if (!((gv_computer01Active == true))) {
            return false;
        }

        if (!((gv_computer01AllDone == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(147), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(gv_soundBeacon, PlayerGroupAll(), 100.0, 0.0);
    gv_computer01Active = false;
    gv_terminalInUse = false;
    libNtve_gf_HideScreenButton(false, gv_hacking01OneDot);
    libNtve_gf_HideScreenButton(false, gv_hacking02OneDot);
    libNtve_gf_HideScreenButton(false, gv_hackingProgress01TwoDot);
    libNtve_gf_HideScreenButton(false, gv_hackingProgress02TwoDot);
    libNtve_gf_HideScreenButton(false, gv_hackingProgress01ThreeDot);
    libNtve_gf_HideScreenButton(false, gv_hackingProgress02ThreeDot);
    libNtve_gf_HideScreenButton(false, gv_computer01SecurityCam);
    libNtve_gf_HideScreenButton(false, gv_computer01Back);
    libNtve_gf_HideScreenButton(false, gv_computer01DeactivateRightFloorGuns);
    libNtve_gf_HideScreenButton(false, gv_computer01DeactivateLeftFloorGuns);
    if ((gv_enemyGroupTurretAreaAllDead == true)) {
        VisRevealerDestroy(gv_computer01Revealer01);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer01TurretGunsLeave_Init () {
    gt_Computer01TurretGunsLeave = TriggerCreate("gt_Computer01TurretGunsLeave_Func");
    TriggerAddEventTimePeriodic(gt_Computer01TurretGunsLeave, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer01 Camera Button Display
//--------------------------------------------------------------------------------------------------
bool gt_Computer01CameraButtonDisplay_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_DisplayScreenButton(gv_computer01SecurityCam, StringExternal("Param/Value/5C7FD2E2"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, -400, gt_Computer01CameraActivated);
    gv_buttonComputer01SecurityCam = libNtve_gf_ScreenButtonDialog(gv_computer01SecurityCam);
    libNtve_gf_CreateDialogItemLabel(gv_buttonComputer01SecurityCam, gv_labelDimensionWidth, gv_labelDimensionHeight, c_anchorTopLeft, gv_labelOffsetWidth, gv_labelOffsetHeight, StringExternal("Param/Value/DCBED363"), Color(100,100,100), false, 2.0);
    DialogSetVisible(gv_buttonComputer01SecurityCam, PlayerGroupAll(), true);
    libNtve_gf_FlashScreenButton(gv_computer01SecurityCam, 2.0, ColorWithAlpha(0.00, 0.00, 100.00, 0.00), ColorWithAlpha(0.00, 0.00, 0.00, 0.00));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer01CameraButtonDisplay_Init () {
    gt_Computer01CameraButtonDisplay = TriggerCreate("gt_Computer01CameraButtonDisplay_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer01 Camera Activated
//--------------------------------------------------------------------------------------------------
bool gt_Computer01CameraActivated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC1CCDDDD_g;
    int autoC1CCDDDD_u;
    unit autoC1CCDDDD_var;
    unitgroup autoF1459CB4_g;
    int autoF1459CB4_u;
    unit autoF1459CB4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowSmartClick, false);
    UIAlertClear(gv_p01_USER);
    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(gv_soundTerminalButtonPush, PlayerGroupAll(), 100.0, 0.0);
    gv_computer01InCameraMode = true;
    gv_computerInUse = true;
    TransmissionClearAll();
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    TriggerExecute(gt_Computer01ButtonsHacked, true, false);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    libNtve_gf_StoreUnitSelection(gv_p01_USER, libNtve_ge_UnitSelectionStoreOption_DoNotClearUnitSelection);
    autoC1CCDDDD_g = UnitGroupFilterRegion(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionPlayableMap(), 0);
    autoC1CCDDDD_u = UnitGroupCount(autoC1CCDDDD_g, c_unitCountAll);
    for (;; autoC1CCDDDD_u -= 1) {
        autoC1CCDDDD_var = UnitGroupUnitFromEnd(autoC1CCDDDD_g, autoC1CCDDDD_u);
        if (autoC1CCDDDD_var == null) { break; }
        UnitSetState(autoC1CCDDDD_var, c_unitStateSelectable, false);
        UnitSetState(autoC1CCDDDD_var, c_unitStateHighlightable, false);
        UnitSetState(autoC1CCDDDD_var, c_unitStateStatusBar, false);
    }
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_playerUnitGroup);
    autoF1459CB4_g = gv_playerUnitGroup;
    autoF1459CB4_u = UnitGroupCount(autoF1459CB4_g, c_unitCountAll);
    for (;; autoF1459CB4_u -= 1) {
        autoF1459CB4_var = UnitGroupUnitFromEnd(autoF1459CB4_g, autoF1459CB4_u);
        if (autoF1459CB4_var == null) { break; }
        libNtve_gf_PauseUnit(autoF1459CB4_var, true);
        libNtve_gf_MakeUnitInvulnerable(autoF1459CB4_var, true);
        libNtve_gf_ShowHideUnit(autoF1459CB4_var, false);
    }
    VisRevealerCreate(gv_p01_USER, RegionFromId(12));
    gv_computer01Revealer01 = VisRevealerLastCreated();
    PlayerSetAlliance(gv_p08_AUTOTURRET_FRIENDLY, c_allianceIdVision, gv_p01_USER, true);
    PlayerSetAlliance(gv_p12_AUTOTURRET_ENEMY, c_allianceIdVision, gv_p01_USER, true);
    TriggerExecute(gt_Computer01DefendersMove, true, false);
    CinematicOverlay(true, 0.0, "Assets\\Textures\\securitycam1.dds", 0.0, true);
    GameSetLighting("THorner05SSecurityCam", 0.0);
    CameraLockInput(gv_p01_USER, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(418), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(419), 12.0, -1, 10, true);
    libNtve_gf_HideScreenButton(false, gv_computer01SecurityCam);
    TriggerExecute(gt_DialogueFryanyRebelandAdjutantQ1, true, false);
    TriggerExecute(gt_DialogueFryanyRebelandAdjutantQ2, true, false);
    TriggerExecute(gt_DialogueFryanyRebelandAdjutantQ3, true, false);
    TriggerExecute(gt_DialogueFryanyRebelandAdjutantQ4, true, false);
    TriggerExecute(gt_DialogueFryanyRebelandAdjutantQ5, true, false);
    Wait(2.0, c_timeGame);
    UnitAbilityEnable(gv_turret01, "SentryGunBurrow", true);
    UnitAbilityEnable(gv_turret02, "SentryGunBurrow", true);
    UnitAbilityEnable(gv_turret03, "SentryGunBurrow", true);
    UnitAbilityEnable(gv_turret04, "SentryGunBurrow", true);
    UnitAbilityEnable(gv_turret05, "SentryGunBurrow", true);
    UnitAbilityEnable(gv_turret06, "SentryGunBurrow", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer01CameraActivated_Init () {
    gt_Computer01CameraActivated = TriggerCreate("gt_Computer01CameraActivated_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer01 Buttons Hacked
//--------------------------------------------------------------------------------------------------
bool gt_Computer01ButtonsHacked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_computer01InCameraMode == true))) {
            return false;
        }

        if (!((gv_computer01DialogueDone == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_Computer01ButtonHackingLoop);
    SoundStop(gv_soundHackingLoop, false);
    libNtve_gf_HideScreenButton(false, gv_hacking01OneDot);
    libNtve_gf_HideScreenButton(false, gv_hacking02OneDot);
    libNtve_gf_HideScreenButton(false, gv_hackingProgress01TwoDot);
    libNtve_gf_HideScreenButton(false, gv_hackingProgress02TwoDot);
    libNtve_gf_HideScreenButton(false, gv_hackingProgress01ThreeDot);
    libNtve_gf_HideScreenButton(false, gv_hackingProgress02ThreeDot);
    libNtve_gf_DisplayScreenButton(gv_computer01DeactivateLeftFloorGuns, StringExternal("Param/Value/F81CFBC7"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, -350, gt_Computer01CameraGunsLeftDisabled);
    gv_buttonComputer01DeactivateLeftFloorGuns = libNtve_gf_ScreenButtonDialog(gv_computer01DeactivateLeftFloorGuns);
    libNtve_gf_CreateDialogItemLabel(gv_buttonComputer01DeactivateLeftFloorGuns, gv_labelDimensionWidth, gv_labelDimensionHeight, c_anchorTopLeft, gv_labelOffsetWidth, gv_labelOffsetHeight, StringExternal("Param/Value/9E1B7C4C"), Color(100,100,100), false, 2.0);
    DialogSetVisible(gv_buttonComputer01DeactivateLeftFloorGuns, PlayerGroupAll(), true);
    libNtve_gf_FlashScreenButton(gv_computer01DeactivateLeftFloorGuns, 2.0, ColorWithAlpha(0.00, 0.00, 100.00, 0.00), ColorWithAlpha(0.00, 0.00, 0.00, 0.00));
    libNtve_gf_DisplayScreenButton(gv_computer01DeactivateRightFloorGuns, StringExternal("Param/Value/CC9ADFD9"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, -250, gt_Computer01CameraGunsRightDisabled);
    gv_buttonComputer01DeactivateRightFloorGuns = libNtve_gf_ScreenButtonDialog(gv_computer01DeactivateRightFloorGuns);
    libNtve_gf_CreateDialogItemLabel(gv_buttonComputer01DeactivateRightFloorGuns, gv_labelDimensionWidth, gv_labelDimensionHeight, c_anchorTopLeft, gv_labelOffsetWidth, gv_labelOffsetHeight, StringExternal("Param/Value/9C1BA11F"), Color(100,100,100), false, 2.0);
    DialogSetVisible(gv_buttonComputer01DeactivateRightFloorGuns, PlayerGroupAll(), true);
    libNtve_gf_FlashScreenButton(gv_computer01DeactivateRightFloorGuns, 2.0, ColorWithAlpha(0.00, 0.00, 100.00, 0.00), ColorWithAlpha(0.00, 0.00, 0.00, 0.00));
    gv_computer01Dialogue = 3;
    libNtve_gf_DisplayScreenButton(gv_computer01Back, StringExternal("Param/Value/27AF4044"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, gv_buttonBackPositionHeight, gt_Computer01Back);
    gv_buttonComputer01Back = libNtve_gf_ScreenButtonDialog(gv_computer01Back);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer01ButtonsHacked_Init () {
    gt_Computer01ButtonsHacked = TriggerCreate("gt_Computer01ButtonsHacked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer01 Camera Guns Left Disabled
//--------------------------------------------------------------------------------------------------
bool gt_Computer01CameraGunsLeftDisabled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(gv_soundTerminalButtonPush, PlayerGroupAll(), 100.0, 0.0);
    gv_computer01AllDone = true;
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    SoundPlay(SoundLink("SupplyDepot_What", 0), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_HideScreenButton(false, gv_hacking01OneDot);
    libNtve_gf_HideScreenButton(false, gv_hacking02OneDot);
    libNtve_gf_HideScreenButton(false, gv_hackingProgress01TwoDot);
    libNtve_gf_HideScreenButton(false, gv_hackingProgress02TwoDot);
    libNtve_gf_HideScreenButton(false, gv_hackingProgress01ThreeDot);
    libNtve_gf_HideScreenButton(false, gv_hackingProgress02ThreeDot);
    libNtve_gf_HideScreenButton(false, gv_computer01DeactivateRightFloorGuns);
    libNtve_gf_HideScreenButton(false, gv_computer01DeactivateLeftFloorGuns);
    gv_doorLab01Lowered = true;
    UnitSetState(UnitFromId(202), c_unitStateStatusBar, false);
    UnitSetState(UnitFromId(202), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(202), c_unitStateHighlightable, false);
    UnitSetState(UnitFromId(202), c_unitStateSelectable, false);
    UnitIssueOrder(UnitFromId(202), Order(AbilityCommand("DestructibleGateDiagonalBLURLowered", 0)), c_orderQueueReplace);
    UnitKill(UnitFromId(1038));
    Wait(2.0, c_timeGame);
    UnitSetOwner(gv_turret01, gv_p12_AUTOTURRET_ENEMY, false);
    UnitSetOwner(gv_turret02, gv_p12_AUTOTURRET_ENEMY, false);
    UnitSetOwner(gv_turret03, gv_p12_AUTOTURRET_ENEMY, false);
    UnitSetOwner(gv_turret04, gv_p08_AUTOTURRET_FRIENDLY, true);
    UnitSetOwner(gv_turret05, gv_p08_AUTOTURRET_FRIENDLY, true);
    UnitSetOwner(gv_turret06, gv_p08_AUTOTURRET_FRIENDLY, true);
    VisRevealerCreate(gv_p01_USER, RegionFromId(12));
    gv_computer01Revealer02 = VisRevealerLastCreated();
    Wait(0.2, c_timeGame);
    UnitIssueOrder(gv_turret01, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_turret02, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_turret03, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(UnitFromId(1292), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2485)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(2482), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2485)), c_orderQueueReplace);
    PlayerSetAlliance(gv_p08_AUTOTURRET_FRIENDLY, c_allianceIdVision, gv_p01_USER, true);
    libNtve_gf_SetAlliance(gv_p12_AUTOTURRET_ENEMY, gv_p01_USER, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_DialogueFirebatResponseQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer01CameraGunsLeftDisabled_Init () {
    gt_Computer01CameraGunsLeftDisabled = TriggerCreate("gt_Computer01CameraGunsLeftDisabled_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer01 Camera Guns Right Disabled
//--------------------------------------------------------------------------------------------------
bool gt_Computer01CameraGunsRightDisabled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(gv_soundTerminalButtonPush, PlayerGroupAll(), 100.0, 0.0);
    gv_computer01AllDone = true;
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    SoundPlay(SoundLink("SupplyDepot_What", 0), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_HideScreenButton(false, gv_hacking01OneDot);
    libNtve_gf_HideScreenButton(false, gv_hacking02OneDot);
    libNtve_gf_HideScreenButton(false, gv_hackingProgress01TwoDot);
    libNtve_gf_HideScreenButton(false, gv_hackingProgress02TwoDot);
    libNtve_gf_HideScreenButton(false, gv_hackingProgress01ThreeDot);
    libNtve_gf_HideScreenButton(false, gv_hackingProgress02ThreeDot);
    libNtve_gf_HideScreenButton(false, gv_computer01DeactivateRightFloorGuns);
    libNtve_gf_HideScreenButton(false, gv_computer01DeactivateLeftFloorGuns);
    gv_doorLab01Lowered = true;
    UnitSetState(UnitFromId(202), c_unitStateStatusBar, false);
    UnitSetState(UnitFromId(202), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(202), c_unitStateHighlightable, false);
    UnitSetState(UnitFromId(202), c_unitStateSelectable, false);
    UnitIssueOrder(UnitFromId(202), Order(AbilityCommand("DestructibleGateDiagonalBLURLowered", 0)), c_orderQueueReplace);
    UnitKill(UnitFromId(1038));
    Wait(2.0, c_timeGame);
    UnitSetOwner(gv_turret01, gv_p08_AUTOTURRET_FRIENDLY, true);
    UnitSetOwner(gv_turret02, gv_p08_AUTOTURRET_FRIENDLY, true);
    UnitSetOwner(gv_turret03, gv_p08_AUTOTURRET_FRIENDLY, true);
    UnitSetOwner(gv_turret04, gv_p12_AUTOTURRET_ENEMY, false);
    UnitSetOwner(gv_turret05, gv_p12_AUTOTURRET_ENEMY, false);
    UnitSetOwner(gv_turret06, gv_p12_AUTOTURRET_ENEMY, false);
    VisRevealerCreate(gv_p01_USER, RegionFromId(12));
    gv_computer01Revealer02 = VisRevealerLastCreated();
    Wait(0.2, c_timeGame);
    UnitIssueOrder(gv_turret04, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_turret05, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_turret06, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(UnitFromId(2532), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2483)), c_orderQueueReplace);
    PlayerSetAlliance(gv_p08_AUTOTURRET_FRIENDLY, c_allianceIdVision, gv_p01_USER, true);
    libNtve_gf_SetAlliance(gv_p12_AUTOTURRET_ENEMY, gv_p01_USER, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_DialogueFirebatResponseQ, true, false);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        Wait(9.0, c_timeGame);
        UnitIssueOrder(UnitFromId(2532), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2483)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(1212), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2485)), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer01CameraGunsRightDisabled_Init () {
    gt_Computer01CameraGunsRightDisabled = TriggerCreate("gt_Computer01CameraGunsRightDisabled_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer01 Back
//--------------------------------------------------------------------------------------------------
bool gt_Computer01Back_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealerDestroy(gv_computer01Revealer01);
    gv_computer01InCameraMode = false;
    gv_computerInUse = false;
    gv_computer01Active = false;
    TransmissionClearAll();
    SoundPlay(gv_soundTerminalButtonPush, PlayerGroupAll(), 100.0, 0.0);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    libNtve_gf_KillModel(gv_actorSpeak01);
    libNtve_gf_KillModel(gv_actorSpeak05);
    if ((gv_computer01AllDone == false)) {
        PlayerSetAlliance(gv_p08_AUTOTURRET_FRIENDLY, c_allianceIdVision, gv_p01_USER, false);
        PlayerSetAlliance(gv_p12_AUTOTURRET_ENEMY, c_allianceIdVision, gv_p01_USER, false);
    }

    if ((gv_computer01AllDone == false)) {
        libNtve_gf_DisplayScreenButton(gv_computer01SecurityCam, StringExternal("Param/Value/54E83A5D"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, -400, gt_Computer01CameraActivated);
        gv_buttonComputer01SecurityCam = libNtve_gf_ScreenButtonDialog(gv_computer01SecurityCam);
    }

    TriggerStop(gt_Computer01ButtonHackingLoop);
    SoundStop(gv_soundHackingLoop, false);
    libNtve_gf_HideScreenButton(false, gv_hacking01OneDot);
    libNtve_gf_HideScreenButton(false, gv_hacking02OneDot);
    libNtve_gf_HideScreenButton(false, gv_hackingProgress01TwoDot);
    libNtve_gf_HideScreenButton(false, gv_hackingProgress02TwoDot);
    libNtve_gf_HideScreenButton(false, gv_hackingProgress01ThreeDot);
    libNtve_gf_HideScreenButton(false, gv_hackingProgress02ThreeDot);
    libNtve_gf_HideScreenButton(false, gv_computer01Back);
    libNtve_gf_HideScreenButton(false, gv_computer01DeactivateRightFloorGuns);
    libNtve_gf_HideScreenButton(false, gv_computer01DeactivateLeftFloorGuns);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(185), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1279), 0.0, -1, 10, false);
    TriggerExecute(gt_RestoreNormalGameplayUI, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer01Back_Init () {
    gt_Computer01Back = TriggerCreate("gt_Computer01Back_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer01 Defenders Move
//--------------------------------------------------------------------------------------------------
bool gt_Computer01DefendersMove_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(192), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(426)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(199), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1307)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(423), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1308)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(191), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1309)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1212), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1311)), c_orderQueueReplace);
    Wait(4.0, c_timeGame);
    libNtve_gf_MakeUnitFacePoint(UnitFromId(1212), PointWithOffset(PointFromId(131), 0.0, 0.0), 0.3);
    libNtve_gf_MakeUnitFacePoint(UnitFromId(191), PointWithOffset(PointFromId(131), 0.0, 0.0), 0.3);
    Wait(0.2, c_timeGame);
    libNtve_gf_MakeUnitFacePoint(UnitFromId(199), PointWithOffset(PointFromId(131), 0.0, 0.0), 0.3);
    libNtve_gf_MakeUnitFacePoint(UnitFromId(423), PointWithOffset(PointFromId(131), 0.0, 0.0), 0.3);
    Wait(0.2, c_timeGame);
    libNtve_gf_MakeUnitFacePoint(UnitFromId(192), PointWithOffset(PointFromId(131), 0.0, 0.0), 0.3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer01DefendersMove_Init () {
    gt_Computer01DefendersMove = TriggerCreate("gt_Computer01DefendersMove_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer01 Door Dies Defenders Move
//--------------------------------------------------------------------------------------------------
bool gt_Computer01DoorDiesDefendersMove_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == UnitFromId(202)))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_Computer01DefendersMove, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer01DoorDiesDefendersMove_Init () {
    gt_Computer01DoorDiesDefendersMove = TriggerCreate("gt_Computer01DoorDiesDefendersMove_Func");
    TriggerAddEventUnitDied(gt_Computer01DoorDiesDefendersMove, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer01 Button Hacking Loop
//--------------------------------------------------------------------------------------------------
bool gt_Computer01ButtonHackingLoop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_computer01DialogueDone == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        SoundPlay(SoundLink("Event_Horner05sTerminalHack", 0), PlayerGroupAll(), 100.0, 0.0);
        gv_soundHackingLoop = SoundLastPlayed();
        libNtve_gf_DisplayScreenButton(gv_hacking01OneDot, StringExternal("Param/Value/C1906276"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, -350, null);
        gv_buttonHacking01OneDot = libNtve_gf_ScreenButtonDialog(gv_hacking01OneDot);
        libNtve_gf_DisplayScreenButton(gv_hacking02OneDot, StringExternal("Param/Value/F03D5FA5"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, -250, null);
        gv_buttonHacking02OneDot = libNtve_gf_ScreenButtonDialog(gv_hacking02OneDot);
        Wait(0.5, c_timeGame);
        libNtve_gf_HideScreenButton(false, gv_hacking01OneDot);
        libNtve_gf_HideScreenButton(false, gv_hacking02OneDot);
        libNtve_gf_DisplayScreenButton(gv_hackingProgress01TwoDot, StringExternal("Param/Value/735B7ADE"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, -350, null);
        gv_buttonHackingProgress01TwoDot = libNtve_gf_ScreenButtonDialog(gv_hackingProgress01TwoDot);
        libNtve_gf_DisplayScreenButton(gv_hackingProgress02TwoDot, StringExternal("Param/Value/EC539FE4"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, -250, null);
        gv_buttonHackingProgress02TwoDot = libNtve_gf_ScreenButtonDialog(gv_hackingProgress02TwoDot);
        Wait(0.5, c_timeGame);
        libNtve_gf_HideScreenButton(false, gv_hackingProgress01TwoDot);
        libNtve_gf_HideScreenButton(false, gv_hackingProgress02TwoDot);
        libNtve_gf_DisplayScreenButton(gv_hackingProgress01ThreeDot, StringExternal("Param/Value/6DD35D5F"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, -350, null);
        gv_buttonHackingProgress01ThreeDot = libNtve_gf_ScreenButtonDialog(gv_hackingProgress01ThreeDot);
        libNtve_gf_DisplayScreenButton(gv_hackingProgress02ThreeDot, StringExternal("Param/Value/7A521723"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, -250, null);
        gv_buttonHackingProgress02ThreeDot = libNtve_gf_ScreenButtonDialog(gv_hackingProgress02ThreeDot);
        Wait(0.5, c_timeGame);
        libNtve_gf_HideScreenButton(false, gv_hackingProgress01ThreeDot);
        libNtve_gf_HideScreenButton(false, gv_hackingProgress02ThreeDot);
        SoundStop(gv_soundHackingLoop, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer01ButtonHackingLoop_Init () {
    gt_Computer01ButtonHackingLoop = TriggerCreate("gt_Computer01ButtonHackingLoop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer01 Turret Dies Left
//--------------------------------------------------------------------------------------------------
bool gt_Computer01TurretDiesLeft_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_turret01))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    libNtve_gf_MakeUnitFacePoint(UnitFromId(1212), PointWithOffset(PointFromId(131), 0.0, 0.0), 0.3);
    Wait(1.0, c_timeGame);
    libNtve_gf_MakeUnitFacePoint(UnitFromId(2532), PointWithOffset(PointFromId(131), 0.0, 0.0), 0.3);
    Wait(0.5, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer01TurretDiesLeft_Init () {
    gt_Computer01TurretDiesLeft = TriggerCreate("gt_Computer01TurretDiesLeft_Func");
    TriggerAddEventUnitDied(gt_Computer01TurretDiesLeft, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer01 Turret Dies Right
//--------------------------------------------------------------------------------------------------
bool gt_Computer01TurretDiesRight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0CAB902A_g;
    int auto0CAB902A_u;
    unit auto0CAB902A_var;

    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_turret05))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    libNtve_gf_MakeUnitFacePoint(UnitFromId(2482), PointWithOffset(PointFromId(131), 0.0, 0.0), 0.3);
    Wait(1.0, c_timeGame);
    auto0CAB902A_g = UnitGroup("Marine", gv_p02_DOMINION, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0CAB902A_u = UnitGroupCount(auto0CAB902A_g, c_unitCountAll);
    for (;; auto0CAB902A_u -= 1) {
        auto0CAB902A_var = UnitGroupUnitFromEnd(auto0CAB902A_g, auto0CAB902A_u);
        if (auto0CAB902A_var == null) { break; }
        libNtve_gf_MakeUnitFacePoint(auto0CAB902A_var, PointWithOffset(PointFromId(164), 0.0, 0.0), 0.2);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer01TurretDiesRight_Init () {
    gt_Computer01TurretDiesRight = TriggerCreate("gt_Computer01TurretDiesRight_Func");
    TriggerAddEventUnitDied(gt_Computer01TurretDiesRight, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer01 Turret Guns Visibility Enter
//--------------------------------------------------------------------------------------------------
bool gt_Computer01TurretGunsVisibilityEnter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(153), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerSetAlliance(gv_p08_AUTOTURRET_FRIENDLY, c_allianceIdVision, gv_p01_USER, true);
    PlayerSetAlliance(gv_p12_AUTOTURRET_ENEMY, c_allianceIdVision, gv_p01_USER, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer01TurretGunsVisibilityEnter_Init () {
    gt_Computer01TurretGunsVisibilityEnter = TriggerCreate("gt_Computer01TurretGunsVisibilityEnter_Func");
    TriggerAddEventUnitRegion(gt_Computer01TurretGunsVisibilityEnter, null, RegionFromId(153), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer01 Turret Guns Visibility Leave
//--------------------------------------------------------------------------------------------------
bool gt_Computer01TurretGunsVisibilityLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(153), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_enemyGroupTurretAreaAllDead == true)) {
        PlayerSetAlliance(gv_p08_AUTOTURRET_FRIENDLY, c_allianceIdVision, gv_p01_USER, false);
        PlayerSetAlliance(gv_p12_AUTOTURRET_ENEMY, c_allianceIdVision, gv_p01_USER, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer01TurretGunsVisibilityLeave_Init () {
    gt_Computer01TurretGunsVisibilityLeave = TriggerCreate("gt_Computer01TurretGunsVisibilityLeave_Func");
    TriggerAddEventUnitRegion(gt_Computer01TurretGunsVisibilityLeave, null, RegionFromId(153), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make AutoTurrets Unselectable
//--------------------------------------------------------------------------------------------------
bool gt_MakeAutoTurretsUnselectable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_computer01InCameraMode == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(153)) == true))) {
            return false;
        }

        if (!((gv_enemyGroupTurretAreaAllDead == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "SentryGun") || (UnitGetType(EventUnit()) == "SentryGunUnderground")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(EventUnit(), c_unitStateSelectable, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakeAutoTurretsUnselectable_Init () {
    gt_MakeAutoTurretsUnselectable = TriggerCreate("gt_MakeAutoTurretsUnselectable_Func");
    TriggerAddEventUnitAbility(gt_MakeAutoTurretsUnselectable, null, AbilityCommand("SentryGunBurrow", 0), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(gt_MakeAutoTurretsUnselectable, null, AbilityCommand("SentryGunUnburrow", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Group Dies
//--------------------------------------------------------------------------------------------------
bool gt_EnemyGroupDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitGroupIsDead(gv_enemyGroupTurretArea) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_enemyGroupTurretAreaAllDead = true;
    gv_computer01AllDone = true;
    UnitRemove(UnitFromId(1038));
    DialogSetVisible(gv_buttonComputer01SecurityCam, PlayerGroupAll(), false);
    VisRevealerDestroy(gv_computer01Revealer01);
    VisRevealerDestroy(gv_computer01Revealer02);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyGroupDies_Init () {
    gt_EnemyGroupDies = TriggerCreate("gt_EnemyGroupDies_Func");
    TriggerAddEventUnitDied(gt_EnemyGroupDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: All Turrets Dead
//--------------------------------------------------------------------------------------------------
bool gt_AllTurretsDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_turret01) == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_turret02) == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_turret03) == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_turret04) == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_turret05) == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_turret06) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_computer01AllDone = true;
    UnitRemove(UnitFromId(1038));
    DialogSetVisible(gv_buttonComputer01SecurityCam, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AllTurretsDead_Init () {
    gt_AllTurretsDead = TriggerCreate("gt_AllTurretsDead_Func");
    TriggerAddEventUnitDied(gt_AllTurretsDead, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Left Turrets Dead
//--------------------------------------------------------------------------------------------------
bool gt_LeftTurretsDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_turret01) == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_turret02) == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_turret03) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_computer01AllDone = true;
    UnitRemove(UnitFromId(1038));
    DialogSetVisible(gv_buttonComputer01SecurityCam, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeftTurretsDead_Init () {
    gt_LeftTurretsDead = TriggerCreate("gt_LeftTurretsDead_Func");
    TriggerAddEventUnitDied(gt_LeftTurretsDead, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Right Turrets Dead
//--------------------------------------------------------------------------------------------------
bool gt_RightTurretsDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_turret04) == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_turret05) == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_turret06) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_computer01AllDone = true;
    UnitRemove(UnitFromId(1038));
    DialogSetVisible(gv_buttonComputer01SecurityCam, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RightTurretsDead_Init () {
    gt_RightTurretsDead = TriggerCreate("gt_RightTurretsDead_Func");
    TriggerAddEventUnitDied(gt_RightTurretsDead, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer02 Enter
//--------------------------------------------------------------------------------------------------
bool gt_Computer02Enter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_computer02Active == false))) {
            return false;
        }

        if (!((gv_computer02NoCamera == false))) {
            return false;
        }

        if (!((gv_computer02InCameraMode == false))) {
            return false;
        }

        if (!((gv_terminalInUse == false))) {
            return false;
        }

        if (!((gv_computer02AllDone == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(76), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(gv_soundBeacon, PlayerGroupAll(), 100.0, 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner05SMusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gv_computer02Active = true;
    gv_terminalInUse = true;
    TriggerExecute(gt_Computer02CameraButtonDisplay, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer02Enter_Init () {
    gt_Computer02Enter = TriggerCreate("gt_Computer02Enter_Func");
    TriggerAddEventTimePeriodic(gt_Computer02Enter, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer02 Leave
//--------------------------------------------------------------------------------------------------
bool gt_Computer02Leave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(76), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
            return false;
        }

        if (!((gv_computer02Active == true))) {
            return false;
        }

        if (!((gv_computer02AllDone == false))) {
            return false;
        }

        if (!((gv_computer02InCameraMode == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_computer02Active = false;
    gv_terminalInUse = false;
    SoundPlay(gv_soundBeacon, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_HideScreenButton(false, gv_computer02SecurityCam);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer02Leave_Init () {
    gt_Computer02Leave = TriggerCreate("gt_Computer02Leave_Func");
    TriggerAddEventTimePeriodic(gt_Computer02Leave, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer02 Camera Button Display
//--------------------------------------------------------------------------------------------------
bool gt_Computer02CameraButtonDisplay_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(gv_soundBeacon, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_DisplayScreenButton(gv_computer02SecurityCam, StringExternal("Param/Value/7D3BE86B"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, -400, gt_Computer02CameraActivated);
    gv_buttonComputer02SecurityCam = libNtve_gf_ScreenButtonDialog(gv_computer02SecurityCam);
    libNtve_gf_FlashScreenButton(gv_computer02SecurityCam, 2.0, ColorWithAlpha(0.00, 0.00, 100.00, 0.00), ColorWithAlpha(0.00, 0.00, 0.00, 0.00));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer02CameraButtonDisplay_Init () {
    gt_Computer02CameraButtonDisplay = TriggerCreate("gt_Computer02CameraButtonDisplay_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer02 Camera Activated
//--------------------------------------------------------------------------------------------------
bool gt_Computer02CameraActivated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA9DE0D84_g;
    int autoA9DE0D84_u;
    unit autoA9DE0D84_var;
    unitgroup auto48E250A9_g;
    int auto48E250A9_u;
    unit auto48E250A9_var;

    // Conditions
    if (testConds) {
        if (!((gv_computer02NoCamera == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_computer02InCameraMode = true;
    gv_computerInUse = true;
    UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowSmartClick, false);
    UIAlertClear(gv_p01_USER);
    TransmissionClearAll();
    autoA9DE0D84_g = UnitGroupFilterRegion(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionPlayableMap(), 0);
    autoA9DE0D84_u = UnitGroupCount(autoA9DE0D84_g, c_unitCountAll);
    for (;; autoA9DE0D84_u -= 1) {
        autoA9DE0D84_var = UnitGroupUnitFromEnd(autoA9DE0D84_g, autoA9DE0D84_u);
        if (autoA9DE0D84_var == null) { break; }
        UnitSetState(autoA9DE0D84_var, c_unitStateSelectable, false);
        UnitSetState(autoA9DE0D84_var, c_unitStateHighlightable, false);
        UnitSetState(autoA9DE0D84_var, c_unitStateStatusBar, false);
    }
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    TriggerExecute(gt_Computer02DefendersMove, true, false);
    libNtve_gf_StoreUnitSelection(gv_p01_USER, libNtve_ge_UnitSelectionStoreOption_DoNotClearUnitSelection);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_playerUnitGroup);
    auto48E250A9_g = gv_playerUnitGroup;
    auto48E250A9_u = UnitGroupCount(auto48E250A9_g, c_unitCountAll);
    for (;; auto48E250A9_u -= 1) {
        auto48E250A9_var = UnitGroupUnitFromEnd(auto48E250A9_g, auto48E250A9_u);
        if (auto48E250A9_var == null) { break; }
        libNtve_gf_PauseUnit(auto48E250A9_var, true);
        libNtve_gf_MakeUnitInvulnerable(auto48E250A9_var, true);
        libNtve_gf_ShowHideUnit(auto48E250A9_var, false);
    }
    VisRevealerCreate(gv_p01_USER, RegionFromId(74));
    gv_revealerLab02 = VisRevealerLastCreated();
    CinematicOverlay(true, 0.0, "Assets\\Textures\\securitycam1.dds", 0.0, true);
    GameSetLighting("THorner05SSecurityCam", 0.0);
    CameraLockInput(gv_p01_USER, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(458), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1196), 12.0, -1, 10, true);
    libNtve_gf_HideScreenButton(false, gv_computer02SecurityCam);
    libNtve_gf_DisplayScreenButton(gv_computer02Back, StringExternal("Param/Value/37F32875"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, gv_buttonBackPositionHeight, gt_Computer02Back);
    gv_buttonComputer02Back = libNtve_gf_ScreenButtonDialog(gv_computer02Back);
    if ((libNtve_gf_DifficultyValueInt(1, 0, 0, 0) == 1)) {
        libNtve_gf_DisplayScreenButton(gv_computer02ReleaseZealots, StringExternal("Param/Value/88F88025"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, gv_button1stPositionHeight, gt_Computer02ReleaseZealots);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 1, 0, 0) == 1)) {
        libNtve_gf_DisplayScreenButton(gv_computer02ReleaseZealots, StringExternal("Param/Value/21E41046"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, gv_button1stPositionHeight, gt_Computer02ReleaseZealots);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 0) == 1)) {
        libNtve_gf_DisplayScreenButton(gv_computer02ReleaseZealots, StringExternal("Param/Value/7F817154"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, gv_button1stPositionHeight, gt_Computer02ReleaseZealots);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        libNtve_gf_DisplayScreenButton(gv_computer02ReleaseZealots, StringExternal("Param/Value/163D9C3F"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, gv_button1stPositionHeight, gt_Computer02ReleaseZealots);
    }

    gv_buttonComputer02ReleaseZealots = libNtve_gf_ScreenButtonDialog(gv_computer02ReleaseZealots);
    libNtve_gf_CreateDialogItemLabel(gv_buttonComputer02ReleaseZealots, gv_labelDimensionWidth, gv_labelDimensionHeight, c_anchorTopLeft, gv_labelOffsetWidth, gv_labelOffsetHeight, StringExternal("Param/Value/31FE07F1"), Color(100,100,100), false, 2.0);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_FlashScreenButton(gv_computer02ReleaseZealots, 2.0, ColorWithAlpha(0.00, 0.00, 100.00, 0.00), ColorWithAlpha(0.00, 0.00, 0.00, 0.00));
    if ((libNtve_gf_DifficultyValueInt(1, 0, 0, 0) == 1)) {
        libNtve_gf_DisplayScreenButton(gv_computer02ReleaseZerg, StringExternal("Param/Value/64F6E3B4"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, gv_button2ndPositionHeight, gt_Computer02ReleaseZerg);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 1, 0, 0) == 1)) {
        libNtve_gf_DisplayScreenButton(gv_computer02ReleaseZerg, StringExternal("Param/Value/3A100204"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, gv_button2ndPositionHeight, gt_Computer02ReleaseZerg);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 0) == 1)) {
        libNtve_gf_DisplayScreenButton(gv_computer02ReleaseZerg, StringExternal("Param/Value/1A4547FA"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, gv_button2ndPositionHeight, gt_Computer02ReleaseZerg);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        libNtve_gf_DisplayScreenButton(gv_computer02ReleaseZerg, StringExternal("Param/Value/DF845446"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, gv_button2ndPositionHeight, gt_Computer02ReleaseZerg);
    }

    gv_buttonComputer02ReleaseZerg = libNtve_gf_ScreenButtonDialog(gv_computer02ReleaseZerg);
    libNtve_gf_CreateDialogItemLabel(gv_buttonComputer02ReleaseZerg, gv_labelDimensionWidth, gv_labelDimensionHeight, c_anchorTopLeft, gv_labelOffsetWidth, gv_labelOffsetHeight, StringExternal("Param/Value/0E6B1062"), Color(100,100,100), false, 2.0);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_FlashScreenButton(gv_computer02ReleaseZerg, 2.0, ColorWithAlpha(0.00, 0.00, 100.00, 0.00), ColorWithAlpha(0.00, 0.00, 0.00, 0.00));
    if ((libNtve_gf_DifficultyValueInt(1, 0, 0, 0) == 1)) {
        libNtve_gf_DisplayScreenButton(gv_computer02ReleaseUltras, StringExternal("Param/Value/B3153C44"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, gv_button3rdPositionHeight, gt_Computer02ReleaseUltralisk);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 1, 0, 0) == 1)) {
        libNtve_gf_DisplayScreenButton(gv_computer02ReleaseUltras, StringExternal("Param/Value/281988E0"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, gv_button3rdPositionHeight, gt_Computer02ReleaseUltralisk);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 0) == 1)) {
        libNtve_gf_DisplayScreenButton(gv_computer02ReleaseUltras, StringExternal("Param/Value/70B2C489"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, gv_button3rdPositionHeight, gt_Computer02ReleaseUltralisk);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        libNtve_gf_DisplayScreenButton(gv_computer02ReleaseUltras, StringExternal("Param/Value/E624C386"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, gv_button3rdPositionHeight, gt_Computer02ReleaseUltralisk);
    }

    gv_buttonComputer02Ultras = libNtve_gf_ScreenButtonDialog(gv_computer02ReleaseUltras);
    libNtve_gf_CreateDialogItemLabel(gv_buttonComputer02Ultras, gv_labelDimensionWidth, gv_labelOffsetHeight, c_anchorTopLeft, gv_labelOffsetWidth, gv_labelOffsetHeight, StringExternal("Param/Value/CC5D376D"), Color(100,100,100), false, 2.0);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_FlashScreenButton(gv_computer02ReleaseUltras, 2.0, ColorWithAlpha(0.00, 0.00, 100.00, 0.00), ColorWithAlpha(0.00, 0.00, 0.00, 0.00));
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_DialogueLab02RaynorLotoffirepowerLabQ1, true, false);
    TriggerExecute(gt_DialogueLab02RaynorLotoffirepowerLabQ2, true, false);
    Wait(6.0, c_timeGame);
    if ((gv_computerInUse == true)) {
        CameraApplyInfo(gv_p01_USER, CameraInfoFromId(458), 12.0, -1, 10, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer02CameraActivated_Init () {
    gt_Computer02CameraActivated = TriggerCreate("gt_Computer02CameraActivated_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer02 Release Zealots
//--------------------------------------------------------------------------------------------------
bool gt_Computer02ReleaseZealots_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_computer02Zealots = true;
    TriggerExecute(gt_Computer02ReleasePrisonersCombined, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer02ReleaseZealots_Init () {
    gt_Computer02ReleaseZealots = TriggerCreate("gt_Computer02ReleaseZealots_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer02 Release Zerg
//--------------------------------------------------------------------------------------------------
bool gt_Computer02ReleaseZerg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_computer02Zerglings = true;
    TriggerExecute(gt_Computer02ReleasePrisonersCombined, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer02ReleaseZerg_Init () {
    gt_Computer02ReleaseZerg = TriggerCreate("gt_Computer02ReleaseZerg_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer02 Release Ultralisk
//--------------------------------------------------------------------------------------------------
bool gt_Computer02ReleaseUltralisk_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_computer02Ultralisks = true;
    TriggerExecute(gt_Computer02ReleasePrisonersCombined, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer02ReleaseUltralisk_Init () {
    gt_Computer02ReleaseUltralisk = TriggerCreate("gt_Computer02ReleaseUltralisk_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer02 Release Prisoners Combined
//--------------------------------------------------------------------------------------------------
bool gt_Computer02ReleasePrisonersCombined_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2351BC32_g;
    int auto2351BC32_u;
    unit auto2351BC32_var;
    unitgroup autoA877E08A_g;
    int autoA877E08A_u;
    unit autoA877E08A_var;
    unitgroup autoA3BEC6E3_g;
    int autoA3BEC6E3_u;
    unit autoA3BEC6E3_var;
    unitgroup autoFE8AF1C5_g;
    int autoFE8AF1C5_u;
    unit autoFE8AF1C5_var;
    unitgroup autoF7FB834D_g;
    int autoF7FB834D_u;
    unit autoF7FB834D_var;
    unitgroup autoF38B2368_g;
    int autoF38B2368_u;
    unit autoF38B2368_var;
    unitgroup auto1F624CC5_g;
    int auto1F624CC5_u;
    unit auto1F624CC5_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_lab02DominionUnitGroup = UnitGroup(null, gv_p02_DOMINION, RegionFromId(80), UnitFilter(0, 0, 0, 0), 0);
    SoundPlay(SoundLink("TUIWarningPing", 0), PlayerGroupAll(), 100.0, 0.0);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    libNtve_gf_PauseUnit(gv_turret05, false);
    libNtve_gf_PauseUnit(gv_turret06, false);
    libNtve_gf_PauseUnit(gv_turret07, false);
    gv_computer02AllDone = true;
    gv_midLab02Protoss = true;
    libNtve_gf_HideScreenButton(false, gv_computer02ReleaseUltras);
    libNtve_gf_HideScreenButton(false, gv_computer02ReleaseZealots);
    libNtve_gf_HideScreenButton(false, gv_computer02ReleaseZerg);
    UnitKill(UnitFromId(183));
    SoundPlay(SoundLink("Terran_BuildingLand", 0), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(2388)), c_animNameDefault, "Stand Work", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(2.0, c_timeGame);
    UnitRemove(UnitFromId(2596));
    UnitRemove(UnitFromId(2951));
    UnitRemove(UnitFromId(2952));
    Wait(2.0, c_timeGame);
    gv_doorLab02Lowered = true;
    UnitSetState(UnitFromId(421), c_unitStateStatusBar, false);
    UnitSetState(UnitFromId(421), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(421), c_unitStateHighlightable, false);
    UnitSetState(UnitFromId(421), c_unitStateSelectable, false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(421), true);
    UnitIssueOrder(UnitFromId(421), Order(AbilityCommand("DestructibleGateDiagonalBLURLowered", 0)), c_orderQueueReplace);
    if ((gv_computer02Zealots == true)) {
        libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(10, 10, 10, 10), "PrisonZealot", 0, gv_p06_PROTOSS_LAB_SPECIMENS, PointFromId(934));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_lab02PrisonerUnitGroup);
        auto2351BC32_g = gv_lab02PrisonerUnitGroup;
        auto2351BC32_u = UnitGroupCount(auto2351BC32_g, c_unitCountAll);
        for (;; auto2351BC32_u -= 1) {
            auto2351BC32_var = UnitGroupUnitFromEnd(auto2351BC32_g, auto2351BC32_u);
            if (auto2351BC32_var == null) { break; }
            UnitIssueOrder(auto2351BC32_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1340)), c_orderQueueReplace);
        }
        Wait(5.0, c_timeGame);
        libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(5, 7, 9, 10), "PrisonZealot", 0, gv_p06_PROTOSS_LAB_SPECIMENS, PointFromId(934));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_lab02PrisonerUnitGroup);
        autoA877E08A_g = gv_lab02PrisonerUnitGroup;
        autoA877E08A_u = UnitGroupCount(autoA877E08A_g, c_unitCountAll);
        for (;; autoA877E08A_u -= 1) {
            autoA877E08A_var = UnitGroupUnitFromEnd(autoA877E08A_g, autoA877E08A_u);
            if (autoA877E08A_var == null) { break; }
            UnitIssueOrder(autoA877E08A_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1340)), c_orderQueueReplace);
        }
    }
    else if ((gv_computer02Zerglings == true)) {
        libNtve_gf_CreateUnitsAtPoint2(20, "Zergling", 0, gv_p05_ZERG_LAB_SPECIMENS, PointFromId(936));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_lab02PrisonerUnitGroup);
        autoA3BEC6E3_g = UnitGroup(null, gv_p05_ZERG_LAB_SPECIMENS, RegionFromId(77), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoA3BEC6E3_u = UnitGroupCount(autoA3BEC6E3_g, c_unitCountAll);
        for (;; autoA3BEC6E3_u -= 1) {
            autoA3BEC6E3_var = UnitGroupUnitFromEnd(autoA3BEC6E3_g, autoA3BEC6E3_u);
            if (autoA3BEC6E3_var == null) { break; }
            UnitIssueOrder(autoA3BEC6E3_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1340)), c_orderQueueReplace);
        }
        Wait(3.0, c_timeGame);
        libNtve_gf_CreateUnitsAtPoint2(20, "Zergling", 0, gv_p05_ZERG_LAB_SPECIMENS, PointFromId(934));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_lab02PrisonerUnitGroup);
        autoFE8AF1C5_g = UnitGroup(null, gv_p05_ZERG_LAB_SPECIMENS, RegionFromId(77), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoFE8AF1C5_u = UnitGroupCount(autoFE8AF1C5_g, c_unitCountAll);
        for (;; autoFE8AF1C5_u -= 1) {
            autoFE8AF1C5_var = UnitGroupUnitFromEnd(autoFE8AF1C5_g, autoFE8AF1C5_u);
            if (autoFE8AF1C5_var == null) { break; }
            UnitIssueOrder(autoFE8AF1C5_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1340)), c_orderQueueReplace);
        }
        Wait(3.0, c_timeGame);
        libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(20, 20, 20, 20), "Zergling", 0, gv_p05_ZERG_LAB_SPECIMENS, PointFromId(935));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_lab02PrisonerUnitGroup);
        autoF7FB834D_g = UnitGroup(null, gv_p05_ZERG_LAB_SPECIMENS, RegionFromId(77), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoF7FB834D_u = UnitGroupCount(autoF7FB834D_g, c_unitCountAll);
        for (;; autoF7FB834D_u -= 1) {
            autoF7FB834D_var = UnitGroupUnitFromEnd(autoF7FB834D_g, autoF7FB834D_u);
            if (autoF7FB834D_var == null) { break; }
            UnitIssueOrder(autoF7FB834D_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1340)), c_orderQueueReplace);
        }
        Wait(3.0, c_timeGame);
        libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(5, 5, 10, 10), "Zergling", 0, gv_p05_ZERG_LAB_SPECIMENS, PointFromId(935));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_lab02PrisonerUnitGroup);
        autoF38B2368_g = UnitGroup(null, gv_p05_ZERG_LAB_SPECIMENS, RegionFromId(77), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoF38B2368_u = UnitGroupCount(autoF38B2368_g, c_unitCountAll);
        for (;; autoF38B2368_u -= 1) {
            autoF38B2368_var = UnitGroupUnitFromEnd(autoF38B2368_g, autoF38B2368_u);
            if (autoF38B2368_var == null) { break; }
            UnitIssueOrder(autoF38B2368_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1340)), c_orderQueueReplace);
        }
        Wait(3.0, c_timeGame);
        libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(0, 0, 5, 0), "Zergling", 0, gv_p05_ZERG_LAB_SPECIMENS, PointFromId(935));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_lab02PrisonerUnitGroup);
        auto1F624CC5_g = UnitGroup(null, gv_p05_ZERG_LAB_SPECIMENS, RegionFromId(77), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto1F624CC5_u = UnitGroupCount(auto1F624CC5_g, c_unitCountAll);
        for (;; auto1F624CC5_u -= 1) {
            auto1F624CC5_var = UnitGroupUnitFromEnd(auto1F624CC5_g, auto1F624CC5_u);
            if (auto1F624CC5_var == null) { break; }
            UnitIssueOrder(auto1F624CC5_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1340)), c_orderQueueReplace);
        }
    }
    else if ((gv_computer02Ultralisks == true)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Ultralisk", 0, gv_p05_ZERG_LAB_SPECIMENS, PointFromId(934));
        UnitGroupAdd(gv_lab02PrisonerUnitGroup, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2660)), c_orderQueueReplace);
        Wait(3.0, c_timeGame);
        libNtve_gf_CreateUnitsAtPoint2(1, "Ultralisk", 0, gv_p05_ZERG_LAB_SPECIMENS, PointFromId(935));
        UnitGroupAdd(gv_lab02PrisonerUnitGroup, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2661)), c_orderQueueReplace);
        Wait(2.0, c_timeGame);
        libNtve_gf_CreateUnitsAtPoint2(1, "Ultralisk", 0, gv_p05_ZERG_LAB_SPECIMENS, PointFromId(936));
        UnitGroupAdd(gv_lab02PrisonerUnitGroup, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2660)), c_orderQueueReplace);
        Wait(2.0, c_timeGame);
        SoundPlay(SoundLink("Ultralisk_Pissed", 0), PlayerGroupAll(), 100.0, 0.0);
        libNtve_gf_CreateUnitsAtPoint2(1, "Ultralisk", 0, gv_p05_ZERG_LAB_SPECIMENS, PointFromId(935));
        UnitGroupAdd(gv_lab02PrisonerUnitGroup, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2661)), c_orderQueueReplace);
        Wait(2.0, c_timeGame);
        libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "Ultralisk", 0, gv_p05_ZERG_LAB_SPECIMENS, PointFromId(934));
        UnitGroupAdd(gv_lab02PrisonerUnitGroup, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2660)), c_orderQueueReplace);
    }
    gv_midLab02AllDeadCheck = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer02ReleasePrisonersCombined_Init () {
    gt_Computer02ReleasePrisonersCombined = TriggerCreate("gt_Computer02ReleasePrisonersCombined_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lab02 all dead
//--------------------------------------------------------------------------------------------------
bool gt_Lab02alldead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_lab02PrisonerUnitGroup, c_unitCountAlive) <= 0))) {
            return false;
        }

        if (!((UnitGroupCount(gv_lab02DominionUnitGroup, c_unitCountAlive) <= 0))) {
            return false;
        }

        if (!((gv_midLab02AllDeadCheck == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitSetState(UnitFromId(2388), c_unitStateTargetable, true);
    UnitSetState(UnitFromId(2388), c_unitStateStatusBar, true);
    UnitSetState(UnitFromId(2388), c_unitStateInvulnerable, false);
    UnitRemove(UnitFromId(2596));
    UnitRemove(UnitFromId(2951));
    UnitRemove(UnitFromId(2952));
    TriggerExecute(gt_ObjectiveInvestigateComplete, true, false);
    Wait(5.0, c_timeGame);
    TriggerExecute(gt_MidLab02Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Lab02alldead_Init () {
    gt_Lab02alldead = TriggerCreate("gt_Lab02alldead_Func");
    TriggerAddEventUnitDied(gt_Lab02alldead, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lab02 all dead Cin trigger without camera safety
//--------------------------------------------------------------------------------------------------
bool gt_Lab02alldeadCintriggerwithoutcamerasafety_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_lab02DominionUnitGroup, c_unitCountAlive) <= 0))) {
            return false;
        }

        if (!((UnitGroupCount(gv_lab02PrisonerUnitGroup, c_unitCountAlive) <= 0))) {
            return false;
        }

        if (!((gv_computer02AllDone == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitSetState(UnitFromId(2388), c_unitStateTargetable, true);
    UnitSetState(UnitFromId(2388), c_unitStateStatusBar, true);
    UnitSetState(UnitFromId(2388), c_unitStateInvulnerable, false);
    UnitRemove(UnitFromId(183));
    gv_computer02NoCamera = true;
    Wait(6.0, c_timeGame);
    TriggerExecute(gt_MidLab02Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Lab02alldeadCintriggerwithoutcamerasafety_Init () {
    gt_Lab02alldeadCintriggerwithoutcamerasafety = TriggerCreate("gt_Lab02alldeadCintriggerwithoutcamerasafety_Func");
    TriggerAddEventUnitDied(gt_Lab02alldeadCintriggerwithoutcamerasafety, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lab02 DominionDead
//--------------------------------------------------------------------------------------------------
bool gt_Lab02DominionDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_lab02DominionUnitGroup, c_unitCountAlive) <= 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_MoveAreaLab02DominionAllDead, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Lab02DominionDead_Init () {
    gt_Lab02DominionDead = TriggerCreate("gt_Lab02DominionDead_Func");
    TriggerAddEventUnitDied(gt_Lab02DominionDead, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer02 Back
//--------------------------------------------------------------------------------------------------
bool gt_Computer02Back_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_computer02InCameraMode = false;
    gv_computerInUse = false;
    gv_computer02Active = false;
    TransmissionClearAll();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    libNtve_gf_HideScreenButton(false, gv_computer02Back);
    libNtve_gf_HideScreenButton(false, gv_computer02ReleaseUltras);
    libNtve_gf_HideScreenButton(false, gv_computer02ReleaseZealots);
    libNtve_gf_HideScreenButton(false, gv_computer02ReleaseZerg);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(173), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1279), 0.0, -1, 10, false);
    TriggerExecute(gt_RestoreNormalGameplayUI, true, false);
    if ((gv_computer02AllDone == false)) {
        VisRevealerDestroy(gv_revealerLab02);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer02Back_Init () {
    gt_Computer02Back = TriggerCreate("gt_Computer02Back_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Move Area Lab02 DominionAllDead
//--------------------------------------------------------------------------------------------------
bool gt_MoveAreaLab02DominionAllDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoCC094DED_g;
    int autoCC094DED_u;
    unit autoCC094DED_var;
    unitgroup autoE20FB2BA_g;
    int autoE20FB2BA_u;
    unit autoE20FB2BA_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoCC094DED_g = gv_lab02PrisonerUnitGroup;
    autoCC094DED_u = UnitGroupCount(autoCC094DED_g, c_unitCountAll);
    for (;; autoCC094DED_u -= 1) {
        autoCC094DED_var = UnitGroupUnitFromEnd(autoCC094DED_g, autoCC094DED_u);
        if (autoCC094DED_var == null) { break; }
        UnitIssueOrder(autoCC094DED_var, OrderTargetingRelativePoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(126))), c_orderQueueReplace);
    }
    autoE20FB2BA_g = gv_lab02PrisonerUnitGroup;
    autoE20FB2BA_u = UnitGroupCount(autoE20FB2BA_g, c_unitCountAll);
    for (;; autoE20FB2BA_u -= 1) {
        autoE20FB2BA_var = UnitGroupUnitFromEnd(autoE20FB2BA_g, autoE20FB2BA_u);
        if (autoE20FB2BA_var == null) { break; }
        UnitIssueOrder(autoE20FB2BA_var, OrderTargetingRelativePoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(126))), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoveAreaLab02DominionAllDead_Init () {
    gt_MoveAreaLab02DominionAllDead = TriggerCreate("gt_MoveAreaLab02DominionAllDead_Func");
    TriggerEnable(gt_MoveAreaLab02DominionAllDead, false);
    TriggerAddEventTimePeriodic(gt_MoveAreaLab02DominionAllDead, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lab 02 Pen Dies
//--------------------------------------------------------------------------------------------------
bool gt_Lab01PenDies2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == UnitFromId(2388)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "ProtossRelic", 0, gv_p07_NEUTRAL, PointFromId(2957));
    UnitGroupAdd(gv_protossRelicsGroup, UnitLastCreated());
    UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/2A815D7A"), StringExternal("Param/Value/4B0759D3"), StringToText(""));
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 1.0, 100.0, 1.0);
    UnitRemove(UnitFromId(2596));
    UnitRemove(UnitFromId(2951));
    UnitRemove(UnitFromId(2952));
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(2936));
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(2939));
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(2940));
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(2942));
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(2941));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Lab01PenDies2_Init () {
    gt_Lab01PenDies2 = TriggerCreate("gt_Lab01PenDies2_Func");
    TriggerAddEventUnitDied(gt_Lab01PenDies2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer02 Defenders Move
//--------------------------------------------------------------------------------------------------
bool gt_Computer02DefendersMove_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(274), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1331)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(273), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1333)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(272), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1332)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(251), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1334)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(250), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1335)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(249), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1336)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(241), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1337)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(230), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1338)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(229), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1339)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(2599), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2594)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(2582), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2595)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(2602), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2597)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(2601), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2598)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(972), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1393)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(973), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1490)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(989), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1508)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(852), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1340)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(UnitFromId(2994), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2992)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(2995), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2993)), c_orderQueueReplace);
    Wait(2.5, c_timeGame);
    UnitIssueOrder(UnitFromId(1326), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1325)), c_orderQueueReplace);
    Wait(0.3, c_timeGame);
    UnitIssueOrder(UnitFromId(1299), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1327)), c_orderQueueReplace);
    Wait(0.2, c_timeGame);
    UnitIssueOrder(UnitFromId(1330), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1329)), c_orderQueueReplace);
    Wait(0.2, c_timeGame);
    UnitIssueOrder(UnitFromId(1302), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1328)), c_orderQueueReplace);
    Wait(15.0, c_timeGame);
    libNtve_gf_MakeUnitFacePoint(UnitFromId(1326), PointWithOffset(PointFromId(1340), 0.0, 0.0), 0.3);
    libNtve_gf_MakeUnitFacePoint(UnitFromId(1330), PointWithOffset(PointFromId(1340), 0.0, 0.0), 0.3);
    libNtve_gf_MakeUnitFacePoint(UnitFromId(1302), PointWithOffset(PointFromId(1340), 0.0, 0.0), 0.3);
    libNtve_gf_MakeUnitFacePoint(UnitFromId(1299), PointWithOffset(PointFromId(1340), 0.0, 0.0), 0.3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer02DefendersMove_Init () {
    gt_Computer02DefendersMove = TriggerCreate("gt_Computer02DefendersMove_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer02 Door Dies Defenders Move
//--------------------------------------------------------------------------------------------------
bool gt_Computer02DoorDiesDefendersMove_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == UnitFromId(421)))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_Computer02DefendersMove, true, false);
    libNtve_gf_PauseUnit(gv_turret05, false);
    libNtve_gf_PauseUnit(gv_turret06, false);
    libNtve_gf_PauseUnit(gv_turret07, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer02DoorDiesDefendersMove_Init () {
    gt_Computer02DoorDiesDefendersMove = TriggerCreate("gt_Computer02DoorDiesDefendersMove_Func");
    TriggerAddEventUnitDied(gt_Computer02DoorDiesDefendersMove, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer04 Enter
//--------------------------------------------------------------------------------------------------
bool gt_Computer04Enter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((gv_computer04Active == false))) {
            return false;
        }

        if (!((gv_terminalInUse == false))) {
            return false;
        }

        if (!((gv_computer04InCameraMode == false))) {
            return false;
        }

        if (!((gv_computer04AllDone == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(gv_soundBeacon, PlayerGroupAll(), 100.0, 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner05SMusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gv_computer04Active = true;
    gv_terminalInUse = true;
    TriggerExecute(gt_Computer04CameraButtondisplay, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer04Enter_Init () {
    gt_Computer04Enter = TriggerCreate("gt_Computer04Enter_Func");
    TriggerAddEventTimePeriodic(gt_Computer04Enter, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer04 Leave
//--------------------------------------------------------------------------------------------------
bool gt_Computer04Leave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
            return false;
        }

        if (!((gv_computer04Active == true))) {
            return false;
        }

        if (!((gv_computer04AllDone == false))) {
            return false;
        }

        if (!((gv_computer04InCameraMode == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_computer04Active = false;
    gv_terminalInUse = false;
    SoundPlay(gv_soundBeacon, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_HideScreenButton(false, gv_computer04SecurityCam);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer04Leave_Init () {
    gt_Computer04Leave = TriggerCreate("gt_Computer04Leave_Func");
    TriggerAddEventTimePeriodic(gt_Computer04Leave, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer04 Camera Button display
//--------------------------------------------------------------------------------------------------
bool gt_Computer04CameraButtondisplay_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(gv_soundBeacon, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_DisplayScreenButton(gv_computer04SecurityCam, StringExternal("Param/Value/BE866312"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, -400, gt_Computer04CameraActivated);
    gv_buttonComputer04SecurityCam = libNtve_gf_ScreenButtonDialog(gv_computer04SecurityCam);
    libNtve_gf_FlashScreenButton(gv_computer04SecurityCam, 2.0, ColorWithAlpha(0.00, 0.00, 100.00, 0.00), ColorWithAlpha(0.00, 0.00, 0.00, 0.00));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer04CameraButtondisplay_Init () {
    gt_Computer04CameraButtondisplay = TriggerCreate("gt_Computer04CameraButtondisplay_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer04 Camera Activated
//--------------------------------------------------------------------------------------------------
bool gt_Computer04CameraActivated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto566A582C_g;
    int auto566A582C_u;
    unit auto566A582C_var;
    unitgroup autoF31D618A_g;
    int autoF31D618A_u;
    unit autoF31D618A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Computer04WarbotHelpPanel, true, false);
    gv_computer04InCameraMode = true;
    UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowSmartClick, false);
    gv_computerInUse = true;
    TransmissionClearAll();
    auto566A582C_g = UnitGroupFilterRegion(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionPlayableMap(), 0);
    auto566A582C_u = UnitGroupCount(auto566A582C_g, c_unitCountAll);
    for (;; auto566A582C_u -= 1) {
        auto566A582C_var = UnitGroupUnitFromEnd(auto566A582C_g, auto566A582C_u);
        if (auto566A582C_var == null) { break; }
        UnitSetState(auto566A582C_var, c_unitStateSelectable, false);
        UnitSetState(auto566A582C_var, c_unitStateHighlightable, false);
        UnitSetState(auto566A582C_var, c_unitStateStatusBar, false);
    }
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    libNtve_gf_StoreUnitSelection(gv_p01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_playerUnitGroup);
    autoF31D618A_g = gv_playerUnitGroup;
    autoF31D618A_u = UnitGroupCount(autoF31D618A_g, c_unitCountAll);
    for (;; autoF31D618A_u -= 1) {
        autoF31D618A_var = UnitGroupUnitFromEnd(autoF31D618A_g, autoF31D618A_u);
        if (autoF31D618A_var == null) { break; }
        libNtve_gf_PauseUnit(autoF31D618A_var, true);
        libNtve_gf_MakeUnitInvulnerable(autoF31D618A_var, true);
        libNtve_gf_ShowHideUnit(autoF31D618A_var, false);
    }
    VisRevealerCreate(1, RegionFromId(95));
    gv_revealerTankBay = VisRevealerLastCreated();
    CinematicOverlay(true, 0.0, "Assets\\Textures\\securitycam1.dds", 0.0, true);
    GameSetLighting("THorner05SSecurityCam", 0.0);
    UIAlertClear(gv_p01_USER);
    CameraLockInput(gv_p01_USER, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1197), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1198), 8.0, -1, 10, true);
    libNtve_gf_HideScreenButton(false, gv_computer04SecurityCam);
    TriggerExecute(gt_DialogueRaynorComputer4OhyeahQ1, true, false);
    TriggerExecute(gt_DialogueRaynorComputer4OhyeahQ2, true, false);
    Wait(7.0, c_timeGame);
    VisRevealerCreate(gv_p01_USER, RegionFromId(143));
    gv_revealerWarbotBay = VisRevealerLastCreated();
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(363), 0.0, -1, 10, true);
    libNtve_gf_DisplayScreenButton(gv_computer04Back, StringExternal("Param/Value/304679E2"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, gv_buttonBackPositionHeight, gt_Computer04Back);
    gv_buttonComputer04Back = libNtve_gf_ScreenButtonDialog(gv_computer04Back);
    libNtve_gf_DisplayScreenButton(gv_computer04AddMissile, StringExternal("Param/Value/0CA5CD4B"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, gv_button1stPositionHeight, gt_Computer04AddMissile);
    gv_buttonComputer04Missile = libNtve_gf_ScreenButtonDialog(gv_computer04AddMissile);
    libNtve_gf_CreateDialogItemLabel(gv_buttonComputer04Missile, gv_labelDimensionWidth, gv_labelDimensionHeight, c_anchorTopLeft, gv_labelOffsetWidth, gv_labelOffsetHeight, StringExternal("Param/Value/48B84FF9"), Color(100,100,100), false, 2.0);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_FlashScreenButton(gv_computer04AddMissile, 2.0, ColorWithAlpha(0.00, 0.00, 100.00, 0.00), ColorWithAlpha(0.00, 0.00, 0.00, 0.00));
    libNtve_gf_DisplayScreenButton(gv_computer04AddNapalm, StringExternal("Param/Value/E59B7255"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, gv_button2ndPositionHeight, gt_Computer04AddNapalm);
    gv_buttonComputer04Napalm = libNtve_gf_ScreenButtonDialog(gv_computer04AddNapalm);
    libNtve_gf_CreateDialogItemLabel(gv_buttonComputer04Napalm, gv_labelDimensionWidth, gv_labelOffsetHeight, c_anchorTopLeft, gv_labelOffsetWidth, gv_labelOffsetHeight, StringExternal("Param/Value/E94F8409"), Color(100,100,100), false, 2.0);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_FlashScreenButton(gv_computer04AddNapalm, 2.0, ColorWithAlpha(0.00, 0.00, 100.00, 0.00), ColorWithAlpha(0.00, 0.00, 0.00, 0.00));
    libNtve_gf_DisplayScreenButton(gv_computer04AddGatlingGun, StringExternal("Param/Value/68B52C1E"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, gv_button3rdPositionHeight, gt_Computer04AddCannons);
    gv_buttonComputer04GatlingGun = libNtve_gf_ScreenButtonDialog(gv_computer04AddGatlingGun);
    libNtve_gf_CreateDialogItemLabel(gv_buttonComputer04GatlingGun, gv_labelDimensionWidth, gv_labelOffsetHeight, c_anchorTopLeft, gv_labelOffsetWidth, gv_labelOffsetHeight, StringExternal("Param/Value/141ECFDD"), Color(100,100,100), false, 2.0);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_FlashScreenButton(gv_computer04AddGatlingGun, 2.0, ColorWithAlpha(0.00, 0.00, 100.00, 0.00), ColorWithAlpha(0.00, 0.00, 0.00, 0.00));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer04CameraActivated_Init () {
    gt_Computer04CameraActivated = TriggerCreate("gt_Computer04CameraActivated_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer04 Add Missile
//--------------------------------------------------------------------------------------------------
bool gt_Computer04AddMissile_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_computer04AllDone == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitBehaviorAdd(gv_warbot, "WarbotB", gv_warbot, 1);
    TriggerExecute(gt_Computer04WarbotWeaponActivated, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer04AddMissile_Init () {
    gt_Computer04AddMissile = TriggerCreate("gt_Computer04AddMissile_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer04 Add Napalm
//--------------------------------------------------------------------------------------------------
bool gt_Computer04AddNapalm_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_computer04AllDone == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitBehaviorAdd(gv_warbot, "WarbotC", gv_warbot, 1);
    TriggerExecute(gt_Computer04WarbotWeaponActivated, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer04AddNapalm_Init () {
    gt_Computer04AddNapalm = TriggerCreate("gt_Computer04AddNapalm_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer04 Add Cannons
//--------------------------------------------------------------------------------------------------
bool gt_Computer04AddCannons_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_computer04AllDone == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitBehaviorAdd(gv_warbot, "WarbotA", gv_warbot, 1);
    TriggerExecute(gt_Computer04WarbotWeaponActivated, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer04AddCannons_Init () {
    gt_Computer04AddCannons = TriggerCreate("gt_Computer04AddCannons_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer04 Warbot Weapon Activated
//--------------------------------------------------------------------------------------------------
bool gt_Computer04WarbotWeaponActivated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_computer04AllDone = true;
    gv_computerInUse = false;
    TransmissionClearAll();
    VisRevealerDestroy(gv_revealerWarbotBay);
    libNtve_gf_HideScreenButton(false, gv_computer04AddMissile);
    libNtve_gf_HideScreenButton(false, gv_computer04Back);
    libNtve_gf_HideScreenButton(false, gv_computer04AddNapalm);
    libNtve_gf_HideScreenButton(false, gv_computer04AddGatlingGun);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    UnitKill(UnitFromId(221));
    VisRevealerDestroy(gv_revealerTankBay);
    SoundPlay(gv_soundWarbotInitiateButton, PlayerGroupAll(), 100.0, 0.0);
    VisRevealArea(gv_p01_USER, RegionFromId(143), 5.0, false);
    UnitBehaviorAdd(gv_warbot, "WarbotFate", gv_warbot, 1);
    UnitSetState(gv_warbot, c_unitStateTargetable, true);
    libNtve_gf_MakeUnitInvulnerable(gv_warbot, false);
    UnitGroupAdd(gv_playerUnitGroup, gv_warbot);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1200), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1279), 0.0, -1, 10, false);
    TriggerExecute(gt_RestoreNormalGameplayUI, true, false);
    SoundPlay(SoundLink("Thor_Build", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(gv_warbot, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(714)), c_orderQueueReplace);
    TriggerExecute(gt_Computer04PanonWarbot, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer04WarbotWeaponActivated_Init () {
    gt_Computer04WarbotWeaponActivated = TriggerCreate("gt_Computer04WarbotWeaponActivated_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer04 Pan on Warbot
//--------------------------------------------------------------------------------------------------
bool gt_Computer04PanonWarbot_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraPan(gv_p01_USER, PointFromId(714), 1.5, -1, 10, true);
    Wait(2.0, c_timeGame);
    libNtve_gf_PauseUnit(gv_warbot, false);
    libNtve_gf_TurnAnimationPropertiesOn(libNtve_gf_MainActorofUnit(gv_warbot), "Fidget");
    libNtve_gf_RescueUnit(gv_warbot, gv_p01_USER, true);
    TriggerExecute(gt_DialogueWarbotLimitedLifeQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer04PanonWarbot_Init () {
    gt_Computer04PanonWarbot = TriggerCreate("gt_Computer04PanonWarbot_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer04 Back
//--------------------------------------------------------------------------------------------------
bool gt_Computer04Back_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto18999A7B_g;
    int auto18999A7B_u;
    unit auto18999A7B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_computer04InCameraMode = false;
    gv_computerInUse = false;
    gv_computer04Active = false;
    TransmissionClearAll();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    auto18999A7B_g = UnitGroupFilterRegion(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionPlayableMap(), 0);
    auto18999A7B_u = UnitGroupCount(auto18999A7B_g, c_unitCountAll);
    for (;; auto18999A7B_u -= 1) {
        auto18999A7B_var = UnitGroupUnitFromEnd(auto18999A7B_g, auto18999A7B_u);
        if (auto18999A7B_var == null) { break; }
        UnitSetState(auto18999A7B_var, c_unitStateSelectable, true);
        UnitSetState(auto18999A7B_var, c_unitStateHighlightable, true);
        UnitSetState(auto18999A7B_var, c_unitStateStatusBar, true);
    }
    VisRevealerDestroy(gv_revealerTankBay);
    CameraLockInput(gv_p01_USER, false);
    if ((gv_computer04AllDone == false)) {
        libNtve_gf_DisplayScreenButton(gv_computer04SecurityCam, StringExternal("Param/Value/55B025F4"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, -400, gt_Computer04CameraActivated);
        gv_buttonComputer04SecurityCam = libNtve_gf_ScreenButtonDialog(gv_computer04SecurityCam);
    }

    libNtve_gf_HideScreenButton(false, gv_computer04AddMissile);
    libNtve_gf_HideScreenButton(false, gv_computer04Back);
    libNtve_gf_HideScreenButton(false, gv_computer04AddNapalm);
    libNtve_gf_HideScreenButton(false, gv_computer04AddGatlingGun);
    VisRevealerDestroy(gv_revealerWarbotBay);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1200), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1279), 0.0, -1, 10, false);
    TriggerExecute(gt_RestoreNormalGameplayUI, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer04Back_Init () {
    gt_Computer04Back = TriggerCreate("gt_Computer04Back_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer04 Warbot Help Panel
//--------------------------------------------------------------------------------------------------
bool gt_Computer04WarbotHelpPanel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer04WarbotHelpPanel_Init () {
    gt_Computer04WarbotHelpPanel = TriggerCreate("gt_Computer04WarbotHelpPanel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer05 Enter
//--------------------------------------------------------------------------------------------------
bool gt_Computer05Enter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((gv_computer05Active == false))) {
            return false;
        }

        if (!((gv_terminalInUse == false))) {
            return false;
        }

        if (!((gv_computer05InCameraMode == false))) {
            return false;
        }

        if (!((gv_computer05AllDone == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(gv_soundBeacon, PlayerGroupAll(), 100.0, 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner05SMusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gv_computer05Active = true;
    gv_terminalInUse = true;
    TriggerExecute(gt_Computer05CameraButtonDisplay, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer05Enter_Init () {
    gt_Computer05Enter = TriggerCreate("gt_Computer05Enter_Func");
    TriggerAddEventTimePeriodic(gt_Computer05Enter, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer05 Leave
//--------------------------------------------------------------------------------------------------
bool gt_Computer05Leave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
            return false;
        }

        if (!((gv_computer05Active == true))) {
            return false;
        }

        if (!((gv_computer05AllDone == false))) {
            return false;
        }

        if (!((gv_computer05InCameraMode == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_computer05Active = false;
    gv_terminalInUse = false;
    SoundPlay(gv_soundBeacon, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_HideScreenButton(false, gv_computer05SecurityCam);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer05Leave_Init () {
    gt_Computer05Leave = TriggerCreate("gt_Computer05Leave_Func");
    TriggerAddEventTimePeriodic(gt_Computer05Leave, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer05 Camera Button Display
//--------------------------------------------------------------------------------------------------
bool gt_Computer05CameraButtonDisplay_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(gv_soundBeacon, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_DisplayScreenButton(gv_computer05SecurityCam, StringExternal("Param/Value/F54E31A4"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, -400, gt_Computer05CameraActivated);
    gv_buttonComputer05SecurityCam = libNtve_gf_ScreenButtonDialog(gv_computer05SecurityCam);
    libNtve_gf_FlashScreenButton(gv_computer05SecurityCam, 2.0, ColorWithAlpha(0.00, 0.00, 100.00, 0.00), ColorWithAlpha(0.00, 0.00, 0.00, 0.00));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer05CameraButtonDisplay_Init () {
    gt_Computer05CameraButtonDisplay = TriggerCreate("gt_Computer05CameraButtonDisplay_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer05 Camera Activated
//--------------------------------------------------------------------------------------------------
bool gt_Computer05CameraActivated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoBBC4CB69_g;
    int autoBBC4CB69_u;
    unit autoBBC4CB69_var;
    unitgroup auto70458DD4_g;
    int auto70458DD4_u;
    unit auto70458DD4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_computer05InCameraMode = true;
    UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowSmartClick, false);
    UIAlertClear(gv_p01_USER);
    TriggerExecute(gt_Computer05BrutaliskHelpPanel, true, false);
    gv_computerInUse = true;
    TransmissionClearAll();
    autoBBC4CB69_g = UnitGroupFilterRegion(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionPlayableMap(), 0);
    autoBBC4CB69_u = UnitGroupCount(autoBBC4CB69_g, c_unitCountAll);
    for (;; autoBBC4CB69_u -= 1) {
        autoBBC4CB69_var = UnitGroupUnitFromEnd(autoBBC4CB69_g, autoBBC4CB69_u);
        if (autoBBC4CB69_var == null) { break; }
        UnitSetState(autoBBC4CB69_var, c_unitStateSelectable, false);
        UnitSetState(autoBBC4CB69_var, c_unitStateHighlightable, false);
        UnitSetState(autoBBC4CB69_var, c_unitStateStatusBar, false);
    }
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    libNtve_gf_StoreUnitSelection(gv_p01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_playerUnitGroup);
    auto70458DD4_g = gv_playerUnitGroup;
    auto70458DD4_u = UnitGroupCount(auto70458DD4_g, c_unitCountAll);
    for (;; auto70458DD4_u -= 1) {
        auto70458DD4_var = UnitGroupUnitFromEnd(auto70458DD4_g, auto70458DD4_u);
        if (auto70458DD4_var == null) { break; }
        libNtve_gf_PauseUnit(auto70458DD4_var, true);
        libNtve_gf_MakeUnitInvulnerable(auto70458DD4_var, true);
        libNtve_gf_ShowHideUnit(auto70458DD4_var, false);
    }
    TriggerExecute(gt_DialogueRaynorComlinkQ1, true, false);
    TriggerExecute(gt_DialogueRaynorComlinkQ2, true, false);
    TriggerExecute(gt_DialogueRaynorComlinkQ3, true, false);
    VisRevealerCreate(1, RegionFromId(97));
    gv_revealerLab03 = VisRevealerLastCreated();
    CinematicOverlay(true, 0.0, "Assets\\Textures\\securitycam1.dds", 0.0, true);
    GameSetLighting("THorner05SSecurityCam", 0.0);
    CameraLockInput(gv_p01_USER, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(441), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1211), 12.0, -1, 10, true);
    libNtve_gf_HideScreenButton(false, gv_computer05SecurityCam);
    libNtve_gf_DisplayScreenButton(gv_computer05Back, StringExternal("Param/Value/C9CE141C"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, gv_buttonBackPositionHeight, gt_Computer05Back);
    gv_buttonComputer05Back = libNtve_gf_ScreenButtonDialog(gv_computer05Back);
    libNtve_gf_DisplayScreenButton(gv_computer05MarineButton, StringExternal("Param/Value/C0D11339"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, gv_button1stPositionHeight, gt_Computer05Marines);
    gv_buttonComputer05Marine = libNtve_gf_ScreenButtonDialog(gv_computer05MarineButton);
    libNtve_gf_CreateDialogItemLabel(gv_buttonComputer05Marine, gv_labelDimensionWidth, gv_labelOffsetHeight, c_anchorTopLeft, gv_labelOffsetWidth, gv_labelOffsetHeight, StringExternal("Param/Value/B8A55D31"), Color(100,100,100), false, 2.0);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_FlashScreenButton(gv_computer05MarineButton, 2.0, ColorWithAlpha(0.00, 0.00, 100.00, 0.00), ColorWithAlpha(0.00, 0.00, 0.00, 0.00));
    libNtve_gf_DisplayScreenButton(gv_computer05MarauderButton, StringExternal("Param/Value/B3607D5C"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, gv_button2ndPositionHeight, gt_Computer05Marauder);
    gv_buttonComputer05Marauder = libNtve_gf_ScreenButtonDialog(gv_computer05MarauderButton);
    libNtve_gf_CreateDialogItemLabel(gv_buttonComputer05Marauder, gv_labelDimensionWidth, gv_labelDimensionHeight, c_anchorTopLeft, gv_labelOffsetWidth, gv_labelOffsetHeight, StringExternal("Param/Value/2529EEA7"), Color(100,100,100), false, 2.0);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_FlashScreenButton(gv_computer05MarauderButton, 2.0, ColorWithAlpha(0.00, 0.00, 100.00, 0.00), ColorWithAlpha(0.00, 0.00, 0.00, 0.00));
    libNtve_gf_DisplayScreenButton(gv_computer05FirebatButton, StringExternal("Param/Value/2D902983"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, gv_button3rdPositionHeight, gt_Computer05Firebat);
    gv_buttonComputer05Firebat = libNtve_gf_ScreenButtonDialog(gv_computer05FirebatButton);
    libNtve_gf_CreateDialogItemLabel(gv_buttonComputer05Firebat, gv_labelDimensionWidth, gv_labelDimensionHeight, c_anchorTopLeft, gv_labelOffsetWidth, gv_labelOffsetHeight, StringExternal("Param/Value/EEC0388A"), Color(100,100,100), false, 2.0);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_FlashScreenButton(gv_computer05FirebatButton, 2.0, ColorWithAlpha(0.00, 0.00, 100.00, 0.00), ColorWithAlpha(0.00, 0.00, 0.00, 0.00));
    libNtve_gf_DisplayScreenButton(gv_computer05MedicButton, StringExternal("Param/Value/BB0EF13C"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, gv_button4thPositionHeight, gt_Computer05Medic);
    gv_buttonComputer05Medic = libNtve_gf_ScreenButtonDialog(gv_computer05MedicButton);
    libNtve_gf_CreateDialogItemLabel(gv_buttonComputer05Medic, gv_labelDimensionWidth, gv_labelDimensionHeight, c_anchorTopLeft, gv_labelOffsetWidth, gv_labelOffsetHeight, StringExternal("Param/Value/C31BC14C"), Color(100,100,100), false, 2.0);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_FlashScreenButton(gv_computer05MedicButton, 2.0, ColorWithAlpha(0.00, 0.00, 100.00, 0.00), ColorWithAlpha(0.00, 0.00, 0.00, 0.00));
    Wait(12.0, c_timeGame);
    if ((gv_computerInUse == true)) {
        CameraApplyInfo(gv_p01_USER, CameraInfoFromId(441), 12.0, -1, 10, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer05CameraActivated_Init () {
    gt_Computer05CameraActivated = TriggerCreate("gt_Computer05CameraActivated_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer05 Marines
//--------------------------------------------------------------------------------------------------
bool gt_Computer05Marines_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_computer05Marines = true;
    TriggerExecute(gt_Computer05ReinforcementChosen, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer05Marines_Init () {
    gt_Computer05Marines = TriggerCreate("gt_Computer05Marines_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer05 Marauder
//--------------------------------------------------------------------------------------------------
bool gt_Computer05Marauder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_computer05Marauder = true;
    TriggerExecute(gt_Computer05ReinforcementChosen, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer05Marauder_Init () {
    gt_Computer05Marauder = TriggerCreate("gt_Computer05Marauder_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer05 Firebat
//--------------------------------------------------------------------------------------------------
bool gt_Computer05Firebat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_computer05Firebat = true;
    TriggerExecute(gt_Computer05ReinforcementChosen, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer05Firebat_Init () {
    gt_Computer05Firebat = TriggerCreate("gt_Computer05Firebat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer05 Medic
//--------------------------------------------------------------------------------------------------
bool gt_Computer05Medic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_computer05Medic = true;
    TriggerExecute(gt_Computer05ReinforcementChosen, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer05Medic_Init () {
    gt_Computer05Medic = TriggerCreate("gt_Computer05Medic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer05 Reinforcement Chosen
//--------------------------------------------------------------------------------------------------
bool gt_Computer05ReinforcementChosen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_computer05AllDone = true;
    SoundStop(gv_soundStatic, true);
    gv_computerInUse = false;
    TransmissionClearAll();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerExecute(gt_DialogueHornerReplyQ, true, false);
    VisRevealerDestroy(gv_revealerLab03);
    SoundPlay(gv_soundBeacon, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_HideScreenButton(false, gv_computer05Back);
    libNtve_gf_HideScreenButton(false, gv_computer05MarineButton);
    libNtve_gf_HideScreenButton(false, gv_computer05MarauderButton);
    libNtve_gf_HideScreenButton(false, gv_computer05FirebatButton);
    libNtve_gf_HideScreenButton(false, gv_computer05MedicButton);
    UnitKill(UnitFromId(411));
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(257), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1279), 0.0, -1, 10, false);
    TriggerExecute(gt_RestoreNormalGameplayUI, true, false);
    Wait(2.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "SpecialOpsDropship", 0, gv_p01_USER, PointFromId(800));
    gv_dropshipComputer05 = UnitLastCreated();
    UnitSetState(gv_dropshipComputer05, c_unitStateTargetable, false);
    UnitSetState(gv_dropshipComputer05, c_unitStateSelectable, false);
    if ((gv_computer05Marines == true)) {
        UnitCargoCreate(gv_dropshipComputer05, "Marine", 8);
    }
    else if ((gv_computer05Marauder == true)) {
        UnitCargoCreate(gv_dropshipComputer05, "Marauder", 3);
    }
    else if ((gv_computer05Firebat == true)) {
        UnitCargoCreate(gv_dropshipComputer05, "Firebat", 4);
    }
    else if ((gv_computer05Medic == true)) {
        UnitCargoCreate(gv_dropshipComputer05, "Marine", 3);
        UnitCargoCreate(gv_dropshipComputer05, "Medic", 3);
    }
    UnitIssueOrder(gv_dropshipComputer05, OrderTargetingPoint(AbilityCommand("SpecOpsDropshipTransport", 2), PointFromId(240)), c_orderQueueReplace);
    TriggerExecute(gt_Computer05PanonDropship, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer05ReinforcementChosen_Init () {
    gt_Computer05ReinforcementChosen = TriggerCreate("gt_Computer05ReinforcementChosen_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer05 Pan on Dropship
//--------------------------------------------------------------------------------------------------
bool gt_Computer05PanonDropship_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    CameraPan(gv_p01_USER, PointWithOffset(PointFromId(240), 0.0, 0.0), 1.5, -1, 10, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner05SMusicEventE", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer05PanonDropship_Init () {
    gt_Computer05PanonDropship = TriggerCreate("gt_Computer05PanonDropship_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer05 Dropship Purge
//--------------------------------------------------------------------------------------------------
bool gt_Computer05DropshipPurge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitCargoGroup(gv_dropshipComputer05), c_unitCountAlive) <= 0))) {
            return false;
        }

        if (!((EventUnit() == gv_dropshipComputer05))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    UnitIssueOrder(gv_dropshipComputer05, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(801)), c_orderQueueReplace);
    Wait(5.0, c_timeGame);
    UnitRemove(gv_dropshipComputer05);
    TriggerExecute(gt_ResearchObjectiveBrutaliskCreateQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer05DropshipPurge_Init () {
    gt_Computer05DropshipPurge = TriggerCreate("gt_Computer05DropshipPurge_Func");
    TriggerAddEventUnitCargo(gt_Computer05DropshipPurge, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer05 Back
//--------------------------------------------------------------------------------------------------
bool gt_Computer05Back_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_computerInUse = false;
    gv_computer05Active = false;
    TransmissionClearAll();
    SoundStop(gv_soundStatic, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    VisRevealerDestroy(gv_revealerLab03);
    CameraLockInput(gv_p01_USER, false);
    if ((gv_computer05AllDone == false)) {
        libNtve_gf_DisplayScreenButton(gv_computer05SecurityCam, StringExternal("Param/Value/09781FD7"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, -400, gt_Computer05CameraActivated);
        gv_buttonComputer05SecurityCam = libNtve_gf_ScreenButtonDialog(gv_computer05SecurityCam);
    }

    libNtve_gf_HideScreenButton(false, gv_computer05Back);
    libNtve_gf_HideScreenButton(false, gv_computer05MarineButton);
    libNtve_gf_HideScreenButton(false, gv_computer05MarauderButton);
    libNtve_gf_HideScreenButton(false, gv_computer05FirebatButton);
    libNtve_gf_HideScreenButton(false, gv_computer05MedicButton);
    gv_computer05InCameraMode = false;
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(257), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1279), 0.0, -1, 10, false);
    TriggerExecute(gt_RestoreNormalGameplayUI, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer05Back_Init () {
    gt_Computer05Back = TriggerCreate("gt_Computer05Back_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer05 Brutalisk Help Panel
//--------------------------------------------------------------------------------------------------
bool gt_Computer05BrutaliskHelpPanel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer05BrutaliskHelpPanel_Init () {
    gt_Computer05BrutaliskHelpPanel = TriggerCreate("gt_Computer05BrutaliskHelpPanel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer06 Enter
//--------------------------------------------------------------------------------------------------
bool gt_Computer06Enter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((gv_computer06Active == false))) {
            return false;
        }

        if (!((gv_terminalInUse == false))) {
            return false;
        }

        if (!((gv_computer06AllDone == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(gv_soundBeacon, PlayerGroupAll(), 100.0, 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner05SMusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gv_computer06Active = true;
    gv_terminalInUse = true;
    TriggerExecute(gt_Computer06ButtonDisplay, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer06Enter_Init () {
    gt_Computer06Enter = TriggerCreate("gt_Computer06Enter_Func");
    TriggerAddEventTimePeriodic(gt_Computer06Enter, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer06 Leave
//--------------------------------------------------------------------------------------------------
bool gt_Computer06Leave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
            return false;
        }

        if (!((gv_computer06Active == true))) {
            return false;
        }

        if (!((gv_computer06AllDone == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_computer06Active = false;
    gv_terminalInUse = false;
    SoundPlay(gv_soundBeacon, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_HideScreenButton(false, gv_computer06SecurityCam);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer06Leave_Init () {
    gt_Computer06Leave = TriggerCreate("gt_Computer06Leave_Func");
    TriggerAddEventTimePeriodic(gt_Computer06Leave, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer06 Button Display
//--------------------------------------------------------------------------------------------------
bool gt_Computer06ButtonDisplay_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_DisplayScreenButton(gv_computer06SecurityCam, StringExternal("Param/Value/44583A89"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, -400, gt_Computer06CameraActivated);
    gv_buttonComputer06SecurityCam = libNtve_gf_ScreenButtonDialog(gv_computer06SecurityCam);
    libNtve_gf_FlashScreenButton(gv_computer06SecurityCam, 2.0, ColorWithAlpha(0.00, 0.00, 100.00, 0.00), ColorWithAlpha(0.00, 0.00, 0.00, 0.00));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer06ButtonDisplay_Init () {
    gt_Computer06ButtonDisplay = TriggerCreate("gt_Computer06ButtonDisplay_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer06 Camera Activated
//--------------------------------------------------------------------------------------------------
bool gt_Computer06CameraActivated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2E39B59B_g;
    int auto2E39B59B_u;
    unit auto2E39B59B_var;
    unitgroup autoF36C2F2E_g;
    int autoF36C2F2E_u;
    unit autoF36C2F2E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_computerInUse = true;
    UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowSmartClick, false);
    UIAlertClear(gv_p01_USER);
    TransmissionClearAll();
    SoundPlay(gv_soundTerminalButtonPush, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    auto2E39B59B_g = UnitGroupFilterRegion(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionPlayableMap(), 0);
    auto2E39B59B_u = UnitGroupCount(auto2E39B59B_g, c_unitCountAll);
    for (;; auto2E39B59B_u -= 1) {
        auto2E39B59B_var = UnitGroupUnitFromEnd(auto2E39B59B_g, auto2E39B59B_u);
        if (auto2E39B59B_var == null) { break; }
        UnitSetState(auto2E39B59B_var, c_unitStateSelectable, false);
        UnitSetState(auto2E39B59B_var, c_unitStateHighlightable, false);
        UnitSetState(auto2E39B59B_var, c_unitStateStatusBar, false);
    }
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTipAlertPanel, false);
    libNtve_gf_StoreUnitSelection(gv_p01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_playerUnitGroup);
    autoF36C2F2E_g = gv_playerUnitGroup;
    autoF36C2F2E_u = UnitGroupCount(autoF36C2F2E_g, c_unitCountAll);
    for (;; autoF36C2F2E_u -= 1) {
        autoF36C2F2E_var = UnitGroupUnitFromEnd(autoF36C2F2E_g, autoF36C2F2E_u);
        if (autoF36C2F2E_var == null) { break; }
        libNtve_gf_PauseUnit(autoF36C2F2E_var, true);
        libNtve_gf_MakeUnitInvulnerable(autoF36C2F2E_var, true);
    }
    VisRevealerCreate(1, RegionFromId(97));
    gv_revealerLab03 = VisRevealerLastCreated();
    CinematicOverlay(true, 0.0, "Assets\\Textures\\securitycam1.dds", 0.0, true);
    GameSetLighting("THorner05SSecurityCam", 0.0);
    CameraLockInput(gv_p01_USER, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(495), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(527), 12.0, -1, 10, true);
    libNtve_gf_HideScreenButton(false, gv_computer06SecurityCam);
    libNtve_gf_DisplayScreenButton(gv_computer06Back, StringExternal("Param/Value/FA1FB40A"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, gv_buttonBackPositionHeight, gt_Computer06Back);
    gv_buttonComputer06Back = libNtve_gf_ScreenButtonDialog(gv_computer06Back);
    libNtve_gf_DisplayScreenButton(gv_computer06BrutaliskReleaseButton, StringExternal("Param/Value/41437E4C"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, gv_button1stPositionHeight, gt_Computer06BrutaliskReleased);
    gv_buttonComputer06BrutaliskRelease = libNtve_gf_ScreenButtonDialog(gv_computer06BrutaliskReleaseButton);
    libNtve_gf_CreateDialogItemLabel(gv_buttonComputer06BrutaliskRelease, gv_labelDimensionWidth, gv_labelDimensionHeight, c_anchorTopLeft, gv_labelOffsetWidth, gv_labelOffsetHeight, StringExternal("Param/Value/601B41BF"), Color(100,100,100), false, 2.0);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_FlashScreenButton(gv_computer06BrutaliskReleaseButton, 2.0, ColorWithAlpha(100.00, 0.00, 0.00, 0.00), ColorWithAlpha(0.00, 0.00, 0.00, 0.00));
    TriggerExecute(gt_DialogueRaynorReleaseBrutaliskQ1, true, false);
    TriggerExecute(gt_DialogueRaynorReleaseBrutaliskQ2, true, false);
    TriggerExecute(gt_DialogueRaynorReleaseBrutaliskQ3, true, false);
    Wait(6.0, c_timeGame);
    if ((gv_computerInUse == true)) {
        CameraApplyInfo(gv_p01_USER, CameraInfoFromId(495), 12.0, -1, 10, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer06CameraActivated_Init () {
    gt_Computer06CameraActivated = TriggerCreate("gt_Computer06CameraActivated_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer06 Brutalisk Released
//--------------------------------------------------------------------------------------------------
bool gt_Computer06BrutaliskReleased_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA2D537AE_g;
    int autoA2D537AE_u;
    unit autoA2D537AE_var;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(gv_soundTerminalButtonPush, PlayerGroupAll(), 100.0, 0.0);
    gv_brutaliskReleased = true;
    gv_computer06AllDone = true;
    gv_computerInUse = false;
    TransmissionClearAll();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    UnitKill(UnitFromId(448));
    libNtve_gf_HideScreenButton(false, gv_computer06Back);
    libNtve_gf_HideScreenButton(false, gv_computer06BrutaliskReleaseButton);
    autoA2D537AE_g = UnitGroup("PathingBlocker1x1", c_playerAny, RegionFromId(85), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA2D537AE_u = UnitGroupCount(autoA2D537AE_g, c_unitCountAll);
    for (;; autoA2D537AE_u -= 1) {
        autoA2D537AE_var = UnitGroupUnitFromEnd(autoA2D537AE_g, autoA2D537AE_u);
        if (autoA2D537AE_var == null) { break; }
        UnitRemove(autoA2D537AE_var);
    }
    libNtve_gf_KillModel(gv_actorBrutaliskInPrison);
    UnitRemove(gv_brutaliskInForceField);
    Wait(0.2, c_timeGame);
    ActorSend(ActorFromDoodad(DoodadFromId(2458)), "AnimBracketStart Work Stand,Work,Start Stand,Work IGNORE");
    Wait(2.25, c_timeGame);
    SoundPlay(SoundLink("Ultralisk_Ready", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("TUIWarningPing", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.75, c_timeGame);
    VisRevealerDestroy(gv_revealerLab03);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1806), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1279), 0.0, -1, 10, false);
    TriggerExecute(gt_RestoreNormalGameplayUI, true, false);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Brutalisk", 0, gv_p11_BRUTALISK, PointFromId(481));
    gv_brutalisk = UnitLastCreated();
    TriggerExecute(gt_AIReleaseBrutalisk, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer06BrutaliskReleased_Init () {
    gt_Computer06BrutaliskReleased = TriggerCreate("gt_Computer06BrutaliskReleased_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer06 Back
//--------------------------------------------------------------------------------------------------
bool gt_Computer06Back_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_computerInUse = false;
    TransmissionClearAll();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    VisRevealerDestroy(gv_revealerLab03);
    CameraLockInput(gv_p01_USER, false);
    if ((gv_computer06AllDone == false)) {
        libNtve_gf_DisplayScreenButton(gv_computer06SecurityCam, StringExternal("Param/Value/21A2E42C"), gv_buttonSizeWidth, gv_buttonSizeHeight, c_anchorRight, 0, -400, gt_Computer06CameraActivated);
        gv_buttonComputer06SecurityCam = libNtve_gf_ScreenButtonDialog(gv_computer06SecurityCam);
    }

    SoundPlay(gv_soundTerminalButtonPush, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_HideScreenButton(false, gv_computer06Back);
    libNtve_gf_HideScreenButton(false, gv_computer06BrutaliskReleaseButton);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1806), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1279), 0.0, -1, 10, false);
    TriggerExecute(gt_RestoreNormalGameplayUI, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computer06Back_Init () {
    gt_Computer06Back = TriggerCreate("gt_Computer06Back_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Release Brutalisk
//--------------------------------------------------------------------------------------------------
bool gt_AIReleaseBrutalisk_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingCreate(PlayerGroupAll(), "PingObjective", UnitGetPosition(gv_brutalisk), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0);
    gv_brutaliskPing = PingLastCreated();
    PingSetScale(gv_brutaliskPing, 1.0);
    PingSetTooltip(gv_brutaliskPing, StringExternal("Param/Value/E0AB3011"));
    PingSetUnit(gv_brutaliskPing, gv_brutalisk);
    TransmissionClearAll();
    UnitSetPropertyFixed(gv_brutalisk, c_unitPropLifeMax, gv_brutaliskMaximumHP);
    UnitSetPropertyFixed(gv_brutalisk, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_brutalisk, c_unitPropMovementSpeed, 4.0);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_playerUnitGroup);
    Wait(0.2, c_timeGame);
    AIAttackWaveSetTargetPlayer(gv_p11_BRUTALISK, PlayerGroupSingle(gv_p01_USER));
    AIAttackWaveUseUnit(gv_p11_BRUTALISK, gv_brutalisk);
    AIAttackWaveSetGatherPoint(gv_p11_BRUTALISK, PointFromId(481));
    AIAttackWaveSend(gv_p11_BRUTALISK, 1, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIReleaseBrutalisk_Init () {
    gt_AIReleaseBrutalisk = TriggerCreate("gt_AIReleaseBrutalisk_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fusion Reactor Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_FusionReactorDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == UnitFromId(2898)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogDestroyAll();
    TriggerExecute(gt_RestoreNormalGameplayUI, true, false);
    PingDestroy(gv_pingFusionCore);
    PingDestroy(gv_brutaliskPing);
    TriggerExecute(gt_ObjectiveFusionReactorComplete, true, false);
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 1.0, 100.0, 1.0);
    Wait(3.0, c_timeGame);
    SoundPlay(SoundLink("Protoss_PowerDownLarge", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    GameSetLighting("CastanarCampaign", 0.0);
    Wait(3.0, c_timeGame);
    TriggerExecute(gt_MidQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FusionReactorDestroyed_Init () {
    gt_FusionReactorDestroyed = TriggerCreate("gt_FusionReactorDestroyed_Func");
    TriggerAddEventUnitDied(gt_FusionReactorDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack The Warbot
//--------------------------------------------------------------------------------------------------
bool gt_AttackTheWarbot_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoDEE496E6_g;
    int autoDEE496E6_u;
    unit autoDEE496E6_var;

    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_warbot))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoDEE496E6_g = UnitGroup(null, gv_p02_DOMINION, RegionFromId(61), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDEE496E6_u = UnitGroupCount(autoDEE496E6_g, c_unitCountAll);
    for (;; autoDEE496E6_u -= 1) {
        autoDEE496E6_var = UnitGroupUnitFromEnd(autoDEE496E6_g, autoDEE496E6_u);
        if (autoDEE496E6_var == null) { break; }
        UnitIssueOrder(autoDEE496E6_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(440)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackTheWarbot_Init () {
    gt_AttackTheWarbot = TriggerCreate("gt_AttackTheWarbot_Func");
    TriggerAddEventUnitRegion(gt_AttackTheWarbot, null, RegionFromId(60), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarinesAttackLab04
//--------------------------------------------------------------------------------------------------
bool gt_MarinesAttackLab04_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto58EFFB0C_g;
    int auto58EFFB0C_u;
    unit auto58EFFB0C_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto58EFFB0C_g = UnitGroup(null, gv_p02_DOMINION, RegionFromId(116), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto58EFFB0C_u = UnitGroupCount(auto58EFFB0C_g, c_unitCountAll);
    for (;; auto58EFFB0C_u -= 1) {
        auto58EFFB0C_var = UnitGroupUnitFromEnd(auto58EFFB0C_g, auto58EFFB0C_u);
        if (auto58EFFB0C_var == null) { break; }
        UnitIssueOrder(auto58EFFB0C_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1168)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarinesAttackLab04_Init () {
    gt_MarinesAttackLab04 = TriggerCreate("gt_MarinesAttackLab04_Func");
    TriggerAddEventUnitRegion(gt_MarinesAttackLab04, null, RegionFromId(25), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: FirebatAttackLab03
//--------------------------------------------------------------------------------------------------
bool gt_FirebatAttackLab03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(457), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1044)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirebatAttackLab03_Init () {
    gt_FirebatAttackLab03 = TriggerCreate("gt_FirebatAttackLab03_Func");
    TriggerAddEventUnitRegion(gt_FirebatAttackLab03, null, RegionFromId(132), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Barrel Cam Shake01
//--------------------------------------------------------------------------------------------------
bool gt_BarrelCamShake01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 1.0, 100.0, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BarrelCamShake01_Init () {
    gt_BarrelCamShake01 = TriggerCreate("gt_BarrelCamShake01_Func");
    TriggerAddEventUnitDied(gt_BarrelCamShake01, UnitRefFromUnit(UnitFromId(295)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Barrel Cam Shake02
//--------------------------------------------------------------------------------------------------
bool gt_BarrelCamShake02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 1.0, 100.0, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BarrelCamShake02_Init () {
    gt_BarrelCamShake02 = TriggerCreate("gt_BarrelCamShake02_Func");
    TriggerAddEventUnitDied(gt_BarrelCamShake02, UnitRefFromUnit(UnitFromId(2430)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: GhostsMove01
//--------------------------------------------------------------------------------------------------
bool gt_GhostsMove01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(505), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(470)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GhostsMove01_Init () {
    gt_GhostsMove01 = TriggerCreate("gt_GhostsMove01_Func");
    TriggerAddEventUnitRegion(gt_GhostsMove01, null, RegionFromId(128), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GhostsMove02
//--------------------------------------------------------------------------------------------------
bool gt_GhostsMove02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(507), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2607)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GhostsMove02_Init () {
    gt_GhostsMove02 = TriggerCreate("gt_GhostsMove02_Func");
    TriggerAddEventUnitRegion(gt_GhostsMove02, null, RegionFromId(129), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ultralisk Chained Dies
//--------------------------------------------------------------------------------------------------
bool gt_UltraliskChainedDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoFA7A1974_n = 3;
    int autoFA7A1974_i;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CastanarUltraliskShackledUnit"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    for (autoFA7A1974_i = 1; autoFA7A1974_i <= autoFA7A1974_n; autoFA7A1974_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Broodling", 0, gv_p05_ZERG_LAB_SPECIMENS, UnitGetPosition(EventUnit()));
        UnitBehaviorAdd(UnitLastCreated(), "BroodlingFate", UnitLastCreated(), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UltraliskChainedDies_Init () {
    gt_UltraliskChainedDies = TriggerCreate("gt_UltraliskChainedDies_Func");
    TriggerAddEventUnitDied(gt_UltraliskChainedDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: FusionCoreTakesDamage
//--------------------------------------------------------------------------------------------------
bool gt_FusionCoreTakesDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == UnitFromId(2898)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    libNtve_gf_KillModel(gv_actorSelectionFusionCore);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FusionCoreTakesDamage_Init () {
    gt_FusionCoreTakesDamage = TriggerCreate("gt_FusionCoreTakesDamage_Func");
    TriggerEnable(gt_FusionCoreTakesDamage, false);
    TriggerAddEventUnitDamaged(gt_FusionCoreTakesDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rocks take damage
//--------------------------------------------------------------------------------------------------
bool gt_Rockstakedamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventUnit() == UnitFromId(813)) || (EventUnit() == UnitFromId(847)) || (EventUnit() == UnitFromId(931)) || (EventUnit() == UnitFromId(707))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.5, c_timeGame);
    libNtve_gf_KillModel(gv_actorRocks01);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Rockstakedamage_Init () {
    gt_Rockstakedamage = TriggerCreate("gt_Rockstakedamage_Func");
    TriggerEnable(gt_Rockstakedamage, false);
    TriggerAddEventUnitDamaged(gt_Rockstakedamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Viking attack back
//--------------------------------------------------------------------------------------------------
bool gt_Vikingattackback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(215), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(329)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Vikingattackback_Init () {
    gt_Vikingattackback = TriggerCreate("gt_Vikingattackback_Func");
    TriggerAddEventUnitAttacked(gt_Vikingattackback, UnitRefFromUnit(UnitFromId(215)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thor attack back
//--------------------------------------------------------------------------------------------------
bool gt_Thorattackback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitTarget()) == "Warbot"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(68), OrderTargetingUnit(AbilityCommand("250mmStrikeCannons", 0), EventUnitTarget()), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Thorattackback_Init () {
    gt_Thorattackback = TriggerCreate("gt_Thorattackback_Func");
    TriggerAddEventUnitAttacked(gt_Thorattackback, UnitRefFromUnit(UnitFromId(68)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto-SaveBeforeComputer02
//--------------------------------------------------------------------------------------------------
bool gt_AutoSaveBeforeComputer02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/38995714"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutoSaveBeforeComputer02_Init () {
    gt_AutoSaveBeforeComputer02 = TriggerCreate("gt_AutoSaveBeforeComputer02_Func");
    TriggerAddEventUnitRegion(gt_AutoSaveBeforeComputer02, null, RegionFromId(152), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto-SaveBeforeLab03Brutalisk
//--------------------------------------------------------------------------------------------------
bool gt_AutoSaveBeforeLab03Brutalisk_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/D4546CB9"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutoSaveBeforeLab03Brutalisk_Init () {
    gt_AutoSaveBeforeLab03Brutalisk = TriggerCreate("gt_AutoSaveBeforeLab03Brutalisk_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto-SaveMidMission
//--------------------------------------------------------------------------------------------------
bool gt_AutoSaveMidMission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/89F27F0D"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutoSaveMidMission_Init () {
    gt_AutoSaveMidMission = TriggerCreate("gt_AutoSaveMidMission_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto-SaveHalfOut
//--------------------------------------------------------------------------------------------------
bool gt_AutoSaveHalfOut_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/8CC100B0"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutoSaveHalfOut_Init () {
    gt_AutoSaveHalfOut = TriggerCreate("gt_AutoSaveHalfOut_Func");
    TriggerAddEventUnitRegion(gt_AutoSaveHalfOut, null, RegionFromId(91), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Grenade Q
//--------------------------------------------------------------------------------------------------
bool gt_TipGrenadeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Horner05_Grenade", libNtve_ge_TipType_NewAbility, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipGrenadeQ_Init () {
    gt_TipGrenadeQ = TriggerCreate("gt_TipGrenadeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip PlasmaGun Q
//--------------------------------------------------------------------------------------------------
bool gt_TipPlasmaGunQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Horner05_Plasma", libNtve_ge_TipType_NewAbility, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipPlasmaGunQ_Init () {
    gt_TipPlasmaGunQ = TriggerCreate("gt_TipPlasmaGunQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Chrono Rift Q
//--------------------------------------------------------------------------------------------------
bool gt_TipChronoRiftQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Horner05_ChronoDevice", libNtve_ge_TipType_NewAbility, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipChronoRiftQ_Init () {
    gt_TipChronoRiftQ = TriggerCreate("gt_TipChronoRiftQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Computer Q
//--------------------------------------------------------------------------------------------------
bool gt_TipComputerQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Horner05_ComputerTerminals", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipComputerQ_Init () {
    gt_TipComputerQ = TriggerCreate("gt_TipComputerQ_Func");
    TriggerAddEventUnitRegion(gt_TipComputerQ, null, RegionFromId(87), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Storymode Q
//--------------------------------------------------------------------------------------------------
bool gt_TipStorymodeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_CreateStorymodeTips();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipStorymodeQ_Init () {
    gt_TipStorymodeQ = TriggerCreate("gt_TipStorymodeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Outside Door Sealed Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueOutsideDoorSealedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("BreachingCharge", c_playerAny, RegionFromId(1), UnitFilter(0, 0, 0, 0), 0), c_unitCountAlive) <= 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    VisRevealerCreate(gv_p01_USER, RegionFromId(94));
    gv_revealerC4FrontDoor = VisRevealerLastCreated();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Horner05_BreachingCharge", libNtve_ge_TipType_NewAbility, PlayerGroupAll());
    TriggerExecute(gt_ButtonFlashBreachingChargeOn, true, false);
    libNtve_gf_AttachModelToUnit(UnitFromId(162), "BriefingUnitSelectRed", "Ref_Hardpoint");
    gv_actorC4FrontDoor = libNtve_gf_ActorLastCreated();
    if ((gv_computerInUse == false)) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }

    if ((gv_computerInUse == false)) {
        UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/6829C698"), null, gv_raynor);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        // Transmission - SoundLink("THorner05SRaynor00023", -1)
        libCamp_gf_SendTransmissionCampaign(gv_raynor, SoundLink("THorner05SRaynor00023", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueOutsideDoorSealedQ_Init () {
    gt_DialogueOutsideDoorSealedQ = TriggerCreate("gt_DialogueOutsideDoorSealedQ_Func");
    TriggerAddEventUnitRegion(gt_DialogueOutsideDoorSealedQ, null, RegionFromId(11), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue You're Under Arrest Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueYoureUnderArrestQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(203)) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitIsAlive(UnitFromId(203)) == true)) {
        if ((gv_computerInUse == false)) {
            libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        }

        if ((gv_computerInUse == false)) {
            libNtve_gf_AttachModelToUnit(UnitFromId(196), "TalkIcon", "Origin");
            gv_actorSpeak02 = libNtve_gf_ActorLastCreated();
            UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/21D24269"), null, UnitFromId(196));
            libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
            // Transmission - SoundLink("THorner05SDominionOfficer400005", -1)
            libCamp_gf_SendTransmissionCampaign(UnitFromId(196), SoundLink("THorner05SDominionOfficer400005", c_soundIndexAny), c_transmissionDurationSub, 0.0, true);
            libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
            libNtve_gf_KillModel(gv_actorSpeak02);
        }

        if ((gv_computerInUse == false)) {
            UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/853BB4CF"), null, gv_raynor);
            libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
            // Transmission - SoundLink("THorner05SRaynor00006", -1)
            libCamp_gf_SendTransmissionCampaign(gv_raynor, SoundLink("THorner05SRaynor00006", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
            libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        }

    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueYoureUnderArrestQ_Init () {
    gt_DialogueYoureUnderArrestQ = TriggerCreate("gt_DialogueYoureUnderArrestQ_Func");
    TriggerAddEventUnitRegion(gt_DialogueYoureUnderArrestQ, null, RegionFromId(30), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Fry any Rebel and Adjutant Q 1
//--------------------------------------------------------------------------------------------------
bool gt_DialogueFryanyRebelandAdjutantQ1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_computer01Dialogue == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_enemyGroupTurretAreaAllDead == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(1212)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_computerInUse == true)) {
        libNtve_gf_AttachModelToUnit(UnitFromId(1212), "TalkIcon", "Origin");
        gv_actorSpeak01 = libNtve_gf_ActorLastCreated();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        // Transmission - SoundLink("THorner05SFirebat00022", -1)
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft), SoundLink("THorner05SFirebat00022", 0), 0.0, c_transmissionDurationAdd, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        libNtve_gf_KillModel(gv_actorSpeak01);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueFryanyRebelandAdjutantQ1_Init () {
    gt_DialogueFryanyRebelandAdjutantQ1 = TriggerCreate("gt_DialogueFryanyRebelandAdjutantQ1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Fry any Rebel and Adjutant Q 2
//--------------------------------------------------------------------------------------------------
bool gt_DialogueFryanyRebelandAdjutantQ2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_computer01Dialogue <= 1))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_enemyGroupTurretAreaAllDead == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_computerInUse == true)) {
        gv_computer01Dialogue = 1;
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        // Transmission - SoundLink("THorner05SRaynor00024", -1)
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft), SoundLink("THorner05SRaynor00024", 0), 0.0, c_transmissionDurationAdd, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueFryanyRebelandAdjutantQ2_Init () {
    gt_DialogueFryanyRebelandAdjutantQ2 = TriggerCreate("gt_DialogueFryanyRebelandAdjutantQ2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Fry any Rebel and Adjutant Q 3
//--------------------------------------------------------------------------------------------------
bool gt_DialogueFryanyRebelandAdjutantQ3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_computer01Dialogue <= 2))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_enemyGroupTurretAreaAllDead == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_computerInUse == true)) {
        gv_computer01Dialogue = 2;
        SoundPlay(gv_soundBeacon, PlayerGroupAll(), 100.0, 0.0);
        Wait(0.5, c_timeGame);
    }

    if ((gv_computerInUse == true)) {
        TriggerExecute(gt_Computer01ButtonHackingLoop, true, false);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        // Transmission - SoundLink("THorner05SAdjutant00040", -1)
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft), SoundLink("THorner05SAdjutant00040", 0), 0.0, c_transmissionDurationAdd, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        gv_computer01DialogueDone = true;
        TriggerExecute(gt_Computer01ButtonsHacked, true, false);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueFryanyRebelandAdjutantQ3_Init () {
    gt_DialogueFryanyRebelandAdjutantQ3 = TriggerCreate("gt_DialogueFryanyRebelandAdjutantQ3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Fry any Rebel and Adjutant Q 4
//--------------------------------------------------------------------------------------------------
bool gt_DialogueFryanyRebelandAdjutantQ4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_computer01Dialogue <= 3))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_enemyGroupTurretAreaAllDead == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_computerInUse == true)) {
        gv_computer01Dialogue = 3;
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        // Transmission - SoundLink("THorner05SRaynor00078", -1)
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft), SoundLink("THorner05SRaynor00078", 0), 0.0, c_transmissionDurationAdd, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueFryanyRebelandAdjutantQ4_Init () {
    gt_DialogueFryanyRebelandAdjutantQ4 = TriggerCreate("gt_DialogueFryanyRebelandAdjutantQ4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Fry any Rebel and Adjutant Q 5
//--------------------------------------------------------------------------------------------------
bool gt_DialogueFryanyRebelandAdjutantQ5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_computer01Dialogue <= 3))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_enemyGroupTurretAreaAllDead == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_computerInUse == true)) {
        gv_computer01Dialogue = 4;
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueFryanyRebelandAdjutantQ5_Init () {
    gt_DialogueFryanyRebelandAdjutantQ5 = TriggerCreate("gt_DialogueFryanyRebelandAdjutantQ5_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Firebat Response Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueFirebatResponseQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_computer01InCameraMode == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(1212)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_computerInUse == true)) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }

    if ((gv_computerInUse == true)) {
        libNtve_gf_AttachModelToUnit(UnitFromId(1212), "TalkIcon", "Origin");
        gv_actorSpeak05 = libNtve_gf_ActorLastCreated();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        // Transmission - SoundLink("THorner05SFirebat00034", -1)
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft), SoundLink("THorner05SFirebat00034", 0), 0.0, c_transmissionDurationAdd, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        libNtve_gf_KillModel(gv_actorSpeak05);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueFirebatResponseQ_Init () {
    gt_DialogueFirebatResponseQ = TriggerCreate("gt_DialogueFirebatResponseQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Lab 01 Destroy the Pen Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueLab01DestroythePenQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_computerInUse == false)) {
        CameraPan(gv_p01_USER, PointWithOffset(PointFromId(724), 0.0, 0.0), 1.5, -1, 10, true);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }

    if ((gv_computerInUse == false)) {
        UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/9D8B3F83"), null, gv_raynor);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        // Transmission - SoundLink("THorner05SRaynor00026", -1)
        libCamp_gf_SendTransmissionCampaign(gv_raynor, SoundLink("THorner05SRaynor00026", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueLab01DestroythePenQ_Init () {
    gt_DialogueLab01DestroythePenQ = TriggerCreate("gt_DialogueLab01DestroythePenQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Lab 01 Testing Weapons Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueLab01ExperimentalWeapon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_computerInUse == false)) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }

    if ((gv_computerInUse == false)) {
        UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/D02808D8"), null, gv_raynor);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        // Transmission - SoundLink("THorner05SRaynor00010", -1)
        libCamp_gf_SendTransmissionCampaign(gv_raynor, SoundLink("THorner05SRaynor00010", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueLab01ExperimentalWeapon_Init () {
    gt_DialogueLab01ExperimentalWeapon = TriggerCreate("gt_DialogueLab01ExperimentalWeapon_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Lab 01 Scientist Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueLab01ScientistQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_computerInUse == false)) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }

    if ((gv_computerInUse == false)) {
        UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/6000CEA9"), null, UnitFromId(1316));
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        // Transmission - SoundLink("THorner05SScientist00055", -1)
        libCamp_gf_SendTransmissionCampaign(UnitFromId(1316), SoundLink("THorner05SScientist00055", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueLab01ScientistQ_Init () {
    gt_DialogueLab01ScientistQ = TriggerCreate("gt_DialogueLab01ScientistQ_Func");
    TriggerAddEventUnitRegion(gt_DialogueLab01ScientistQ, null, RegionFromId(127), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Hall 01 Marine Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueHall01MarineQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_computerInUse == false)) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }

    if ((gv_computerInUse == false)) {
        libNtve_gf_AttachModelToUnit(UnitFromId(756), "TalkIcon", "Origin");
        gv_actorSpeak03 = libNtve_gf_ActorLastCreated();
        UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/562DBCEF"), null, gv_raynor);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        // Transmission - SoundLink("THorner05SDominionMarine100027", -1)
        libCamp_gf_SendTransmissionCampaign(UnitFromId(756), SoundLink("THorner05SDominionMarine100027", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        libNtve_gf_KillModel(gv_actorSpeak03);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueHall01MarineQ_Init () {
    gt_DialogueHall01MarineQ = TriggerCreate("gt_DialogueHall01MarineQ_Func");
    TriggerAddEventUnitRegion(gt_DialogueHall01MarineQ, null, RegionFromId(8), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Lab02 Don't let em in Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueLab01ExperimentalWeapon2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_computerInUse == false)) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }

    if ((gv_computerInUse == false)) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        // Transmission - SoundLink("THorner05SDominionMarauder00028", -1)
        libCamp_gf_SendTransmissionCampaign(UnitFromId(189), SoundLink("THorner05SDominionMarauder00028", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueLab01ExperimentalWeapon2_Init () {
    gt_DialogueLab01ExperimentalWeapon2 = TriggerCreate("gt_DialogueLab01ExperimentalWeapon2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Lab02 Raynor Lot of firepower Lab Q 1
//--------------------------------------------------------------------------------------------------
bool gt_DialogueLab02RaynorLotoffirepowerLabQ1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_computer02Dialogue <= 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_computerInUse == true)) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }

    if ((gv_computerInUse == true)) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        // Transmission - SoundLink("THorner05SRaynor00029", -1)
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft), SoundLink("THorner05SRaynor00029", 0), 0.0, c_transmissionDurationAdd, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueLab02RaynorLotoffirepowerLabQ1_Init () {
    gt_DialogueLab02RaynorLotoffirepowerLabQ1 = TriggerCreate("gt_DialogueLab02RaynorLotoffirepowerLabQ1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Lab02 Raynor Lot of firepower Lab Q 2
//--------------------------------------------------------------------------------------------------
bool gt_DialogueLab02RaynorLotoffirepowerLabQ2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_computer02Dialogue <= 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_computerInUse == true)) {
        gv_computer02Dialogue = 1;
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueLab02RaynorLotoffirepowerLabQ2_Init () {
    gt_DialogueLab02RaynorLotoffirepowerLabQ2 = TriggerCreate("gt_DialogueLab02RaynorLotoffirepowerLabQ2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Get Chrono Device Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueGetChronoDeviceQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_computerInUse == false)) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }

    if ((gv_computerInUse == false)) {
        UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/648076DB"), null, gv_raynor);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        // Transmission - SoundLink("THorner05SRaynor00030", -1)
        libCamp_gf_SendTransmissionCampaign(gv_raynor, SoundLink("THorner05SRaynor00030", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueGetChronoDeviceQ_Init () {
    gt_DialogueGetChronoDeviceQ = TriggerCreate("gt_DialogueGetChronoDeviceQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Power Core Obj Q
//--------------------------------------------------------------------------------------------------
bool gt_DialoguePowerCoreObjQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_computerInUse == false)) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }

    if ((gv_computerInUse == false)) {
        UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/EA2B4AA7"), null, gv_raynor);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        // Transmission - SoundLink("THorner05SRaynor00064", -1)
        libCamp_gf_SendTransmissionCampaign(gv_raynor, SoundLink("THorner05SRaynor00064", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    if ((gv_computerInUse == false)) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        // Transmission - SoundLink("THorner05SHorner00041", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner05SHorner00041", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    if ((gv_computerInUse == false)) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        // Transmission - SoundLink("THorner05SRaynor00066", -1)
        libCamp_gf_SendTransmissionCampaign(gv_raynor, SoundLink("THorner05SRaynor00066", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    ObjectiveDestroy(gv_objectiveInvestigate);
    ObjectiveShow(gv_objectiveFusionReactor, PlayerGroupAll(), true);
    TriggerExecute(gt_ObjectiveFusionReactorPing, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialoguePowerCoreObjQ_Init () {
    gt_DialoguePowerCoreObjQ = TriggerCreate("gt_DialoguePowerCoreObjQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Raynor Computer 4 Oh yeah Q 1
//--------------------------------------------------------------------------------------------------
bool gt_DialogueRaynorComputer4OhyeahQ1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_computer04Dialogue <= 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(1.0, c_timeGame);
    if ((gv_computerInUse == true)) {
    }

    if ((gv_computerInUse == true) && ((UnitGroupCount(gv_tanks, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_vikings, c_unitCountAlive) >= 1))) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        // Transmission - SoundLink("THorner05SRaynor00035", -1)
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft), SoundLink("THorner05SRaynor00035", 0), 0.0, c_transmissionDurationAdd, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueRaynorComputer4OhyeahQ1_Init () {
    gt_DialogueRaynorComputer4OhyeahQ1 = TriggerCreate("gt_DialogueRaynorComputer4OhyeahQ1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Raynor Computer 4 Oh yeah Q 2
//--------------------------------------------------------------------------------------------------
bool gt_DialogueRaynorComputer4OhyeahQ2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_computer04Dialogue <= 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_computerInUse == true) && ((UnitGroupCount(gv_tanks, c_unitCountAlive) >= 1) && (UnitGroupCount(gv_vikings, c_unitCountAlive) >= 1))) {
        gv_computer04Dialogue = 1;
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueRaynorComputer4OhyeahQ2_Init () {
    gt_DialogueRaynorComputer4OhyeahQ2 = TriggerCreate("gt_DialogueRaynorComputer4OhyeahQ2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Raynor Tank Bay Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueRaynorTankBayQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_tankBayEnemyGroup, c_unitCountAlive) <= 0))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_escapeGameStarted == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    Wait(1.0, c_timeGame);
    if ((gv_computerInUse == false)) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }

    if ((gv_computerInUse == false)) {
        UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/6315777C"), null, gv_raynor);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        // Transmission - SoundLink("THorner05SRaynor00033", -1)
        libCamp_gf_SendTransmissionCampaign(gv_raynor, SoundLink("THorner05SRaynor00033", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueRaynorTankBayQ_Init () {
    gt_DialogueRaynorTankBayQ = TriggerCreate("gt_DialogueRaynorTankBayQ_Func");
    TriggerAddEventUnitDied(gt_DialogueRaynorTankBayQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Warbot Limited Life Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueWarbotLimitedLifeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_computerInUse == false)) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }

    if ((gv_computerInUse == false)) {
        UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/7F47886C"), null, gv_raynor);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        // Transmission - SoundLink("THorner05SRaynor00036", -1)
        libCamp_gf_SendTransmissionCampaign(gv_raynor, SoundLink("THorner05SRaynor00036", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueWarbotLimitedLifeQ_Init () {
    gt_DialogueWarbotLimitedLifeQ = TriggerCreate("gt_DialogueWarbotLimitedLifeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Raynor Warbot down Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueRaynorWarbotdownQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_warbot))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) <= 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    if ((gv_computerInUse == false)) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }

    if ((gv_computerInUse == false)) {
        UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/91EABE95"), null, gv_raynor);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        // Transmission - SoundLink("THorner05SRaynor00047", -1)
        libCamp_gf_SendTransmissionCampaign(gv_raynor, SoundLink("THorner05SRaynor00070", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueRaynorWarbotdownQ_Init () {
    gt_DialogueRaynorWarbotdownQ = TriggerCreate("gt_DialogueRaynorWarbotdownQ_Func");
    TriggerAddEventUnitDied(gt_DialogueRaynorWarbotdownQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Raynor Comlink Q 1
//--------------------------------------------------------------------------------------------------
bool gt_DialogueRaynorComlinkQ1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_computer05Dialogue <= 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(1.0, c_timeGame);
    if ((gv_computerInUse == true)) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }

    if ((gv_computerInUse == true)) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        // Transmission - SoundLink("THorner05SRaynor00037", -1)
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft), SoundLink("THorner05SRaynor00037", 0), 0.0, c_transmissionDurationAdd, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueRaynorComlinkQ1_Init () {
    gt_DialogueRaynorComlinkQ1 = TriggerCreate("gt_DialogueRaynorComlinkQ1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Raynor Comlink Q 2
//--------------------------------------------------------------------------------------------------
bool gt_DialogueRaynorComlinkQ2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_computer05Dialogue <= 1))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_computerInUse == true)) {
        gv_computer05Dialogue = 1;
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        // Transmission - SoundLink("THorner05SHorner00038", -1)
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft), SoundLink("THorner05SHorner00038", 0), 0.0, c_transmissionDurationAdd, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueRaynorComlinkQ2_Init () {
    gt_DialogueRaynorComlinkQ2 = TriggerCreate("gt_DialogueRaynorComlinkQ2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Raynor Comlink Q 3
//--------------------------------------------------------------------------------------------------
bool gt_DialogueRaynorComlinkQ3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_computer05Dialogue <= 2))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_computerInUse == true)) {
        gv_computer05Dialogue = 2;
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueRaynorComlinkQ3_Init () {
    gt_DialogueRaynorComlinkQ3 = TriggerCreate("gt_DialogueRaynorComlinkQ3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Horner Reply Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueHornerReplyQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    sound lv_soundStatic;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) <= 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_computerInUse == false)) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }

    if ((gv_computerInUse == false)) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        // Transmission - SoundLink("THorner05SHorner00053", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner05SHorner00053", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueHornerReplyQ_Init () {
    gt_DialogueHornerReplyQ = TriggerCreate("gt_DialogueHornerReplyQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Raynor Release Brutalisk Q 1
//--------------------------------------------------------------------------------------------------
bool gt_DialogueRaynorReleaseBrutaliskQ1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_computer06Dialogue <= 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_computer06AllDone == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_computerInUse == true)) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }

    if ((gv_computerInUse == true)) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        // Transmission - SoundLink("THorner05SRaynor00039", -1)
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft), SoundLink("THorner05SRaynor00039", 0), 0.0, c_transmissionDurationAdd, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueRaynorReleaseBrutaliskQ1_Init () {
    gt_DialogueRaynorReleaseBrutaliskQ1 = TriggerCreate("gt_DialogueRaynorReleaseBrutaliskQ1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Raynor Release Brutalisk Q 2
//--------------------------------------------------------------------------------------------------
bool gt_DialogueRaynorReleaseBrutaliskQ2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_computer06Dialogue <= 1))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_computer06AllDone == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_computerInUse == true)) {
        gv_computer06Dialogue = 1;
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        // Transmission - SoundLink("THorner05SHorner00052", -1)
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft), SoundLink("THorner05SHorner00052", 0), 0.0, c_transmissionDurationAdd, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueRaynorReleaseBrutaliskQ2_Init () {
    gt_DialogueRaynorReleaseBrutaliskQ2 = TriggerCreate("gt_DialogueRaynorReleaseBrutaliskQ2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Raynor Release Brutalisk Q 3
//--------------------------------------------------------------------------------------------------
bool gt_DialogueRaynorReleaseBrutaliskQ3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_computer06Dialogue <= 2))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_computer06AllDone == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_computerInUse == true)) {
        gv_computer06Dialogue = 2;
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueRaynorReleaseBrutaliskQ3_Init () {
    gt_DialogueRaynorReleaseBrutaliskQ3 = TriggerCreate("gt_DialogueRaynorReleaseBrutaliskQ3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Raynor Lab 03 Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueRaynorLab03Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_computerInUse == false)) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }

    if ((gv_computerInUse == false)) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        // Transmission - SoundLink("THorner05SHorner00079", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner05SHorner00079", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueRaynorLab03Q_Init () {
    gt_DialogueRaynorLab03Q = TriggerCreate("gt_DialogueRaynorLab03Q_Func");
    TriggerAddEventUnitRegion(gt_DialogueRaynorLab03Q, null, RegionFromId(25), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Brutalisk Kills Player Unit
//--------------------------------------------------------------------------------------------------
bool gt_AchievementBrutaliskKillsPlayerUnit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1))) {
            return false;
        }

        if (!((UnitGetType(libNtve_gf_KillingUnit()) == "Brutalisk"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_achievementUnitLosttoBrutalisk = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementBrutaliskKillsPlayerUnit_Init () {
    gt_AchievementBrutaliskKillsPlayerUnit = TriggerCreate("gt_AchievementBrutaliskKillsPlayerUnit_Func");
    TriggerAddEventUnitDied(gt_AchievementBrutaliskKillsPlayerUnit, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievment - Weapon pick ups
//--------------------------------------------------------------------------------------------------
bool gt_AchievmentWeaponpickups_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1) && (gv_achievementPickUpsRemaining == 0)) {
        AchievementAward(gv_p01_USER, "THorner05_2");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievmentWeaponpickups_Init () {
    gt_AchievmentWeaponpickups = TriggerCreate("gt_AchievmentWeaponpickups_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Grenade Kills for Stats
//--------------------------------------------------------------------------------------------------
bool gt_GrenadeKillsforStats_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageEffect() == "TossGrenadeDamage"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != gv_p10_SCIENTISTS))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_grenadeKills = (gv_grenadeKills + 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GrenadeKillsforStats_Init () {
    gt_GrenadeKillsforStats = TriggerCreate("gt_GrenadeKillsforStats_Func");
    TriggerAddEventUnitDied(gt_GrenadeKillsforStats, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Kills for Stats
//--------------------------------------------------------------------------------------------------
bool gt_RaynorKillsforStats_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageEffect() == "RaynorWeaponU"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != gv_p10_SCIENTISTS))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_raynorKills = (gv_raynorKills + 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorKillsforStats_Init () {
    gt_RaynorKillsforStats = TriggerCreate("gt_RaynorKillsforStats_Func");
    TriggerAddEventUnitDied(gt_RaynorKillsforStats, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Plasma Kills for Stats
//--------------------------------------------------------------------------------------------------
bool gt_RaynorPlasmaKillsforStats_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageEffect() == "ExperimentalPlasmaGunDamage"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != gv_p10_SCIENTISTS))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_raynorKills = (gv_raynorKills + 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorPlasmaKillsforStats_Init () {
    gt_RaynorPlasmaKillsforStats = TriggerCreate("gt_RaynorPlasmaKillsforStats_Func");
    TriggerAddEventUnitDied(gt_RaynorPlasmaKillsforStats, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Raynor Weapon Kills
//--------------------------------------------------------------------------------------------------
bool gt_AchievementRaynorWeaponKills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1))) {
            return false;
        }

        if (!(((EventUnitDamageEffect() == "TossGrenadeDamage") || (EventUnitDamageEffect() == "ExperimentalPlasmaGunDamage")))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != gv_p10_SCIENTISTS))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_achievementWeaponKillls += 1;
    AchievementTermQuantitySet(gv_p01_USER, "Anniversary_THorner05S", gv_achievementWeaponKillls);
    TextExpressionSetToken("Param/Expression/898DF7CE", "A", IntToText(gv_achievementWeaponKillls));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/898DF7CE"), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementRaynorWeaponKills_Init () {
    gt_AchievementRaynorWeaponKills = TriggerCreate("gt_AchievementRaynorWeaponKills_Func");
    TriggerAddEventUnitDied(gt_AchievementRaynorWeaponKills, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Escape
//--------------------------------------------------------------------------------------------------
bool gt_StartGameEscape_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetRestartLoadingScreen(ConversationDataStateText("Maps|THorner05S", "Loading Screen Restart 2"));
    TriggerExecute(gt_InitEscape, true, false);
    gv_hercules = UnitFromId(492);
    UnitSetTeamColorIndex(gv_hercules, 1);
    UnitSetState(gv_hercules, c_unitStateTargetable, false);
    libNtve_gf_ChangeUnitDamage(gv_hercules, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    ObjectiveShow(gv_objectiveEscape, PlayerGroupAll(), true);
    ObjectiveShow(gv_objectiveRaynorSurvive, PlayerGroupAll(), true);
    Wait(0.2, c_timeGame);
    ObjectiveShow(gv_objectiveRaynorSurvive, PlayerGroupAll(), true);
    PingCreate(PlayerGroupAll(), "PingObjective", PointFromId(1808), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
    gv_pingHercules = PingLastCreated();
    PingSetTooltip(gv_pingHercules, StringExternal("Param/Value/D8282D88"));
    VisRevealArea(gv_p01_USER, RegionFromId(81), 1.0, false);
    gv_escapeGameStarted = true;
    Wait(2.0, c_timeGame);
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 1.0, 100.0, 1.0);
    UnitBehaviorAdd(gv_raynor, "Flashlight", gv_raynor, 1);
    TriggerExecute(gt_EscapeDialogueHornerBeCarefulQ, true, false);
    TriggerExecute(gt_StartAIEscape, true, false);
    TriggerEnable(gt_EggsBreakwhenclose, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameEscape_Init () {
    gt_StartGameEscape = TriggerCreate("gt_StartGameEscape_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Escape
//--------------------------------------------------------------------------------------------------
bool gt_InitEscape_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto89564189_g;
    int auto89564189_u;
    unit auto89564189_var;
    unitgroup auto6DA7A6C1_g;
    int auto6DA7A6C1_u;
    unit auto6DA7A6C1_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "Warbot", 0, gv_p07_NEUTRAL, PointFromId(596));
    gv_escapeWarbot = UnitLastCreated();
    UnitSetPropertyFixed(gv_escapeWarbot, c_unitPropLife, 298.0);
    UnitBehaviorRemove(gv_escapeWarbot, "WarbotFate", 1);
    UnitSetState(gv_escapeWarbot, c_unitStateTargetable, false);
    UnitSetState(gv_escapeWarbot, c_unitStateStatusBar, false);
    UnitSetState(gv_escapeWarbot, c_unitStateInvulnerable, true);
    UnitSetState(gv_escapeWarbot, c_unitStateFidget, false);
    UnitSetState(gv_escapeWarbot, c_unitStateTargetable, false);
    UnitSetState(gv_escapeWarbot, c_unitStateStatusBar, false);
    UnitSetState(UnitFromId(501), c_unitStateTooltipable, true);
    UnitSetInfoText(UnitFromId(501), StringExternal("Param/Value/0C0A6F8B"), StringExternal("Param/Value/5B696962"), StringToText(""));
    UnitSetState(UnitFromId(1028), c_unitStateTooltipable, true);
    UnitSetInfoText(UnitFromId(1028), StringExternal("Param/Value/09DF416D"), StringExternal("Param/Value/9F59187B"), StringToText(""));
    auto89564189_g = UnitGroup("PygaliskCocoon", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32))), 0);
    auto89564189_u = UnitGroupCount(auto89564189_g, c_unitCountAll);
    for (;; auto89564189_u -= 1) {
        auto89564189_var = UnitGroupUnitFromEnd(auto89564189_g, auto89564189_u);
        if (auto89564189_var == null) { break; }
        UnitSetPropertyFixed(auto89564189_var, c_unitPropLifeMax, 10.0);
    }
    auto6DA7A6C1_g = UnitGroup("CastanarDestructibleDebris", 0, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32))), 0);
    auto6DA7A6C1_u = UnitGroupCount(auto6DA7A6C1_g, c_unitCountAll);
    for (;; auto6DA7A6C1_u -= 1) {
        auto6DA7A6C1_var = UnitGroupUnitFromEnd(auto6DA7A6C1_g, auto6DA7A6C1_u);
        if (auto6DA7A6C1_var == null) { break; }
        UnitSetPropertyFixed(auto6DA7A6C1_var, c_unitPropLifeMax, 240.0);
    }
    UnitSetPropertyFixed(UnitFromId(615), c_unitPropLifeMax, 500.0);
    UnitSetPropertyFixed(UnitFromId(627), c_unitPropLifeMax, 500.0);
    UnitSetPropertyFixed(UnitFromId(615), c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(UnitFromId(627), c_unitPropLifePercent, 100.0);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(615), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(627), true);
    UnitSetState(UnitFromId(615), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(627), c_unitStateTargetable, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitEscape_Init () {
    gt_InitEscape = TriggerCreate("gt_InitEscape_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Rubble Escape Q
//--------------------------------------------------------------------------------------------------
bool gt_TipRubbleEscapeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Horner05_Rubble", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipRubbleEscapeQ_Init () {
    gt_TipRubbleEscapeQ = TriggerCreate("gt_TipRubbleEscapeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape Dialogue Horner Be Careful Q
//--------------------------------------------------------------------------------------------------
bool gt_EscapeDialogueHornerBeCarefulQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    sound lv_soundStatic;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_escapeGameStarted == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/FD7595D3"), null, gv_raynor);
    // Transmission - SoundLink("THorner05SRaynor00016", -1)
    libCamp_gf_SendTransmissionCampaign(gv_raynor, SoundLink("THorner05SRaynor00016", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    SoundPlay(SoundLink("SMTVStatic", 0), PlayerGroupAll(), 100.0, 0.0);
    lv_soundStatic = SoundLastPlayed();
    Wait(1.6, c_timeGame);
    SoundStop(lv_soundStatic, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    // Transmission - SoundLink("THorner05SHorner00017", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner05SHorner00017", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/A7331FF6"), null, gv_raynor);
    // Transmission - SoundLink("THorner05SRaynor00018", -1)
    libCamp_gf_SendTransmissionCampaign(gv_raynor, SoundLink("THorner05SRaynor00018", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeDialogueHornerBeCarefulQ_Init () {
    gt_EscapeDialogueHornerBeCarefulQ = TriggerCreate("gt_EscapeDialogueHornerBeCarefulQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape Dialogue Blast through that rubble Q
//--------------------------------------------------------------------------------------------------
bool gt_EscapeDialogueBlastthroughthatrubbleQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((gv_escapeGameStarted == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitIsAlive(UnitFromId(813)) == true)) {
        VisRevealArea(gv_p01_USER, RegionFromId(148), 5.0, false);
        libNtve_gf_CreateModelAtPoint("BriefingUnitSelectRed", PointFromId(593));
        gv_actorRocks01 = libNtve_gf_ActorLastCreated();
        TriggerEnable(gt_Rockstakedamage, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/ECD96742"), null, gv_raynor);
        CameraPan(gv_p01_USER, PointWithOffset(PointFromId(593), 0.0, 0.0), 1.5, -1, 10, true);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THorner05SRaynor00042", -1)
        libCamp_gf_SendTransmissionCampaign(gv_raynor, SoundLink("THorner05SRaynor00042", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        libNtve_gf_KillModel(gv_actorRocks01);
        TriggerExecute(gt_TipRubbleEscapeQ, true, false);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeDialogueBlastthroughthatrubbleQ_Init () {
    gt_EscapeDialogueBlastthroughthatrubbleQ = TriggerCreate("gt_EscapeDialogueBlastthroughthatrubbleQ_Func");
    TriggerAddEventUnitRegion(gt_EscapeDialogueBlastthroughthatrubbleQ, null, RegionFromId(19), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape Dialogue The Hybrid! Q
//--------------------------------------------------------------------------------------------------
bool gt_EscapeDialogueTheHybridQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_escapeGameStarted == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/AADB0788"), null, gv_raynor);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner05SHorner00069", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner05SHorner00069", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("THorner05SRaynor00043", -1)
    libCamp_gf_SendTransmissionCampaign(gv_raynor, SoundLink("THorner05SRaynor00043", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeDialogueTheHybridQ_Init () {
    gt_EscapeDialogueTheHybridQ = TriggerCreate("gt_EscapeDialogueTheHybridQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape Dialogue Raynor It's on the Move Q
//--------------------------------------------------------------------------------------------------
bool gt_EscapeDialogueRaynorItsontheMoveQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_escapeGameStarted == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/7DB47E6B"), null, gv_raynor);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner05SHorner00044", -1)
    libCamp_gf_SendTransmissionCampaign(gv_raynor, SoundLink("THorner05SHorner00044", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeDialogueRaynorItsontheMoveQ_Init () {
    gt_EscapeDialogueRaynorItsontheMoveQ = TriggerCreate("gt_EscapeDialogueRaynorItsontheMoveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape Dialogue Raynor Warbot on Auto-Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_EscapeDialogueRaynorWarbotonAutoAttackQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_escapeGameStarted == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_EscapeComputerXbotActivate, true, false);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/C57E2841"), null, gv_raynor);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner05SRaynor00045", -1)
    libCamp_gf_SendTransmissionCampaign(gv_raynor, SoundLink("THorner05SRaynor00045", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeDialogueRaynorWarbotonAutoAttackQ_Init () {
    gt_EscapeDialogueRaynorWarbotonAutoAttackQ = TriggerCreate("gt_EscapeDialogueRaynorWarbotonAutoAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape Dialogue Auto-Bot Attacking Let's Move Q
//--------------------------------------------------------------------------------------------------
bool gt_EscapeDialogueAutoBotAttackingLetsMoveQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_escapeGameStarted == true))) {
            return false;
        }

        if (!((EventUnit() == gv_escapeWarbot))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/BCCAA3AC"), null, gv_raynor);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner05SRaynor00046", -1)
    libCamp_gf_SendTransmissionCampaign(gv_raynor, SoundLink("THorner05SRaynor00046", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeDialogueAutoBotAttackingLetsMoveQ_Init () {
    gt_EscapeDialogueAutoBotAttackingLetsMoveQ = TriggerCreate("gt_EscapeDialogueAutoBotAttackingLetsMoveQ_Func");
    TriggerAddEventUnitStartedAttack(gt_EscapeDialogueAutoBotAttackingLetsMoveQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape Dialogue Auto-Bot Dies Q
//--------------------------------------------------------------------------------------------------
bool gt_EscapeDialogueAutoBotDiesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_escapeWarbot))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_StartAIWavesEscape, true, false);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/92BB493E"), null, gv_raynor);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner05SRaynor00047", -1)
    libCamp_gf_SendTransmissionCampaign(gv_raynor, SoundLink("THorner05SRaynor00047", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeDialogueAutoBotDiesQ_Init () {
    gt_EscapeDialogueAutoBotDiesQ = TriggerCreate("gt_EscapeDialogueAutoBotDiesQ_Func");
    TriggerAddEventUnitDied(gt_EscapeDialogueAutoBotDiesQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape Dialogue Falling Apart Q
//--------------------------------------------------------------------------------------------------
bool gt_EscapeDialogueFallingApartQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((gv_escapeGameStarted == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/DA645A23"), null, gv_raynor);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner05SRaynor00048", -1)
    libCamp_gf_SendTransmissionCampaign(gv_raynor, SoundLink("THorner05SRaynor00048", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeDialogueFallingApartQ_Init () {
    gt_EscapeDialogueFallingApartQ = TriggerCreate("gt_EscapeDialogueFallingApartQ_Func");
    TriggerAddEventUnitRegion(gt_EscapeDialogueFallingApartQ, null, RegionFromId(40), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape Dialogue Raynor Where did the Hybrid Go Q
//--------------------------------------------------------------------------------------------------
bool gt_EscapeDialogueRaynorWheredidtheHybridGoQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_escapeGameStarted == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner05SHorner00049", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner05SHorner00049", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/CBAEDFC9"), null, gv_raynor);
    // Transmission - SoundLink("THorner05SRaynor00050", -1)
    libCamp_gf_SendTransmissionCampaign(gv_raynor, SoundLink("THorner05SRaynor00050", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeDialogueRaynorWheredidtheHybridGoQ_Init () {
    gt_EscapeDialogueRaynorWheredidtheHybridGoQ = TriggerCreate("gt_EscapeDialogueRaynorWheredidtheHybridGoQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape Dialogue Holy Crap! Q
//--------------------------------------------------------------------------------------------------
bool gt_EscapeDialogueHolyCrapQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_escapeGameStarted == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/AA275322"), null, gv_raynor);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner05SRaynor00051", -1)
    libCamp_gf_SendTransmissionCampaign(gv_raynor, SoundLink("THorner05SRaynor00051", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeDialogueHolyCrapQ_Init () {
    gt_EscapeDialogueHolyCrapQ = TriggerCreate("gt_EscapeDialogueHolyCrapQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape Dialogue Get to the Transport Q
//--------------------------------------------------------------------------------------------------
bool gt_EscapeDialogueGettotheTransportQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((gv_escapeGameStarted == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/FD376361"), null, gv_marineEscapeToTransport);
    // Transmission - SoundLink("THorner05SDominionMarine800067", -1)
    libCamp_gf_SendTransmissionCampaign(gv_marineEscapeToTransport, SoundLink("THorner05SDominionMarine800067", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
    UIAlertUnit("Trigger", gv_p01_USER, StringExternal("Param/Value/08B18B76"), null, gv_raynor);
    VisRevealArea(gv_p01_USER, RegionFromId(15), 0.0, false);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner05SRaynor00068", -1)
    libCamp_gf_SendTransmissionCampaign(gv_raynor, SoundLink("THorner05SRaynor00068", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeDialogueGettotheTransportQ_Init () {
    gt_EscapeDialogueGettotheTransportQ = TriggerCreate("gt_EscapeDialogueGettotheTransportQ_Func");
    TriggerAddEventUnitRegion(gt_EscapeDialogueGettotheTransportQ, null, RegionFromId(107), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Explosion01
//--------------------------------------------------------------------------------------------------
bool gt_Explosion01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 1.0, 100.0, 1.0);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(753));
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(753));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Explosion01_Init () {
    gt_Explosion01 = TriggerCreate("gt_Explosion01_Func");
    TriggerAddEventUnitRegion(gt_Explosion01, null, RegionFromId(50), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Explosion02
//--------------------------------------------------------------------------------------------------
bool gt_Explosion02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 1.0, 100.0, 1.0);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(1029));
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(1029));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Explosion02_Init () {
    gt_Explosion02 = TriggerCreate("gt_Explosion02_Func");
    TriggerAddEventUnitRegion(gt_Explosion02, null, RegionFromId(53), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Explosion03
//--------------------------------------------------------------------------------------------------
bool gt_Explosion03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 1.0, 100.0, 1.0);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(62));
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(62));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Explosion03_Init () {
    gt_Explosion03 = TriggerCreate("gt_Explosion03_Func");
    TriggerAddEventUnitRegion(gt_Explosion03, null, RegionFromId(54), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Explosion04
//--------------------------------------------------------------------------------------------------
bool gt_Explosion04_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 1.0, 100.0, 1.0);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(1063));
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(1063));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Explosion04_Init () {
    gt_Explosion04 = TriggerCreate("gt_Explosion04_Func");
    TriggerAddEventUnitRegion(gt_Explosion04, null, RegionFromId(117), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Explosion05
//--------------------------------------------------------------------------------------------------
bool gt_Explosion05_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 1.0, 100.0, 1.0);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(1075));
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(1075));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Explosion05_Init () {
    gt_Explosion05 = TriggerCreate("gt_Explosion05_Func");
    TriggerAddEventUnitRegion(gt_Explosion05, null, RegionFromId(118), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Explosion06
//--------------------------------------------------------------------------------------------------
bool gt_Explosion06_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 1.0, 100.0, 1.0);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(1079));
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(1079));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Explosion06_Init () {
    gt_Explosion06 = TriggerCreate("gt_Explosion06_Func");
    TriggerAddEventUnitRegion(gt_Explosion06, null, RegionFromId(119), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Explosion07
//--------------------------------------------------------------------------------------------------
bool gt_Explosion07_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 1.0, 100.0, 1.0);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(2621));
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(2621));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Explosion07_Init () {
    gt_Explosion07 = TriggerCreate("gt_Explosion07_Func");
    TriggerAddEventUnitRegion(gt_Explosion07, null, RegionFromId(130), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Explosion08
//--------------------------------------------------------------------------------------------------
bool gt_Explosion08_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 1.0, 100.0, 1.0);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(1436));
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(1436));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Explosion08_Init () {
    gt_Explosion08 = TriggerCreate("gt_Explosion08_Func");
    TriggerAddEventUnitRegion(gt_Explosion08, null, RegionFromId(131), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EscapeZerg Attack01
//--------------------------------------------------------------------------------------------------
bool gt_EscapeZergAttack01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p05_ZERG_LAB_SPECIMENS, PointFromId(692));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(86)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p05_ZERG_LAB_SPECIMENS, PointFromId(692));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(86)), c_orderQueueReplace);
    Wait(0.75, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p05_ZERG_LAB_SPECIMENS, PointFromId(692));
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        Wait(0.75, c_timeGame);
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p05_ZERG_LAB_SPECIMENS, PointFromId(692));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(86)), c_orderQueueReplace);
        Wait(0.75, c_timeGame);
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p05_ZERG_LAB_SPECIMENS, PointFromId(692));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(86)), c_orderQueueReplace);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        Wait(0.75, c_timeGame);
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p05_ZERG_LAB_SPECIMENS, PointFromId(692));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(86)), c_orderQueueReplace);
        Wait(0.75, c_timeGame);
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p05_ZERG_LAB_SPECIMENS, PointFromId(692));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(86)), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeZergAttack01_Init () {
    gt_EscapeZergAttack01 = TriggerCreate("gt_EscapeZergAttack01_Func");
    TriggerAddEventUnitRegion(gt_EscapeZergAttack01, null, RegionFromId(31), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EscapeProtoss Attack01
//--------------------------------------------------------------------------------------------------
bool gt_EscapeProtossAttack01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(2, "PrisonZealot", 0, gv_p06_PROTOSS_LAB_SPECIMENS, PointFromId(699));
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        Wait(0.75, c_timeGame);
        libNtve_gf_CreateUnitsAtPoint2(1, "PrisonZealot", 0, gv_p06_PROTOSS_LAB_SPECIMENS, PointFromId(699));
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        Wait(0.75, c_timeGame);
        libNtve_gf_CreateUnitsAtPoint2(1, "PrisonZealot", 0, gv_p06_PROTOSS_LAB_SPECIMENS, PointFromId(699));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeProtossAttack01_Init () {
    gt_EscapeProtossAttack01 = TriggerCreate("gt_EscapeProtossAttack01_Func");
    TriggerAddEventUnitRegion(gt_EscapeProtossAttack01, null, RegionFromId(47), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EscapeUltralisk Attack
//--------------------------------------------------------------------------------------------------
bool gt_EscapeUltraliskAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("Ultralisk_Ready", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "Ultralisk", 0, gv_p05_ZERG_LAB_SPECIMENS, PointFromId(200));
    gv_ultraliskMom = UnitLastCreated();
    UnitIssueOrder(gv_ultraliskMom, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(198)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeUltraliskAttack_Init () {
    gt_EscapeUltraliskAttack = TriggerCreate("gt_EscapeUltraliskAttack_Func");
    TriggerAddEventUnitRegion(gt_EscapeUltraliskAttack, null, RegionFromId(100), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EscapeProtossStayInArea
//--------------------------------------------------------------------------------------------------
bool gt_EscapeProtossStayInArea_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p06_PROTOSS_LAB_SPECIMENS))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingRelativePoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(52))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeProtossStayInArea_Init () {
    gt_EscapeProtossStayInArea = TriggerCreate("gt_EscapeProtossStayInArea_Func");
    TriggerAddEventUnitRegion(gt_EscapeProtossStayInArea, null, RegionFromId(52), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EscapeHybridTunnelInitiate
//--------------------------------------------------------------------------------------------------
bool gt_EscapeHybridTunnelInitiate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 1.0, 100.0, 1.0);
    Wait(2.0, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, UnitGetPosition(gv_hybrid));
    Wait(0.4, c_timeGame);
    libNtve_gf_ShowHideUnit(gv_hybrid, false);
    libNtve_gf_PauseUnit(gv_hybrid, true);
    TriggerEnable(gt_HybridPingSound, false);
    TriggerExecute(gt_EscapeDialogueRaynorWheredidtheHybridGoQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeHybridTunnelInitiate_Init () {
    gt_EscapeHybridTunnelInitiate = TriggerCreate("gt_EscapeHybridTunnelInitiate_Func");
    TriggerAddEventUnitRegion(gt_EscapeHybridTunnelInitiate, null, RegionFromId(58), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EscapeHybridSurprise
//--------------------------------------------------------------------------------------------------
bool gt_EscapeHybridSurprise_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_SetAlliance(gv_p05_ZERG_LAB_SPECIMENS, gv_p04_HYBRID, libNtve_ge_AllianceSetting_Neutral);
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 1.0, 100.0, 1.0);
    Wait(1.5, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(96));
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(484));
    UnitSetPosition(gv_hybrid, PointFromId(99), false);
    libNtve_gf_ShowHideUnit(gv_hybrid, true);
    libNtve_gf_PauseUnit(gv_hybrid, false);
    TriggerEnable(gt_HybridPingSound, true);
    TriggerExecute(gt_EscapeDialogueHolyCrapQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeHybridSurprise_Init () {
    gt_EscapeHybridSurprise = TriggerCreate("gt_EscapeHybridSurprise_Func");
    TriggerAddEventUnitRegion(gt_EscapeHybridSurprise, null, RegionFromId(18), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EscapeProtossZergFight
//--------------------------------------------------------------------------------------------------
bool gt_EscapeProtossZergFight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC4F58A7A_g;
    int autoC4F58A7A_u;
    unit autoC4F58A7A_var;

    // Conditions
    if (testConds) {
        if (!((EventUnit() == UnitFromId(835)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, UnitGetType(UnitFromId(103)), 0, gv_p06_PROTOSS_LAB_SPECIMENS, PointFromId(301));
    libNtve_gf_CreateUnitsAtPoint2(1, UnitGetType(UnitFromId(103)), 0, gv_p06_PROTOSS_LAB_SPECIMENS, PointFromId(303));
    libNtve_gf_CreateUnitsAtPoint2(1, UnitGetType(UnitFromId(103)), 0, gv_p06_PROTOSS_LAB_SPECIMENS, PointFromId(304));
    libNtve_gf_CreateUnitsAtPoint2(1, UnitGetType(UnitFromId(103)), 0, gv_p06_PROTOSS_LAB_SPECIMENS, PointFromId(308));
    libNtve_gf_CreateUnitsAtPoint2(1, UnitGetType(UnitFromId(103)), 0, gv_p06_PROTOSS_LAB_SPECIMENS, PointFromId(305));
    libNtve_gf_CreateUnitsAtPoint2(1, UnitGetType(UnitFromId(103)), 0, gv_p06_PROTOSS_LAB_SPECIMENS, PointFromId(306));
    autoC4F58A7A_g = UnitGroup(null, c_playerAny, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32))), 0);
    autoC4F58A7A_u = UnitGroupCount(autoC4F58A7A_g, c_unitCountAll);
    for (;; autoC4F58A7A_u -= 1) {
        autoC4F58A7A_var = UnitGroupUnitFromEnd(autoC4F58A7A_g, autoC4F58A7A_u);
        if (autoC4F58A7A_var == null) { break; }
        libNtve_gf_PauseUnit(autoC4F58A7A_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeProtossZergFight_Init () {
    gt_EscapeProtossZergFight = TriggerCreate("gt_EscapeProtossZergFight_Func");
    TriggerAddEventUnitDied(gt_EscapeProtossZergFight, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EscapeZergMarineFight
//--------------------------------------------------------------------------------------------------
bool gt_EscapeZergMarineFight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF5DDEBEF_g;
    int autoF5DDEBEF_u;
    unit autoF5DDEBEF_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_DOMINION, PointFromId(1465));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_DOMINION, PointFromId(1466));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_DOMINION, PointFromId(1467));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_DOMINION, PointFromId(1468));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_DOMINION, PointFromId(1469));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_DOMINION, PointFromId(1439));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_DOMINION, PointFromId(1440));
    gv_marineEscapeToTransport = UnitLastCreated();
    autoF5DDEBEF_g = UnitGroup(null, c_playerAny, RegionFromId(101), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32))), 0);
    autoF5DDEBEF_u = UnitGroupCount(autoF5DDEBEF_g, c_unitCountAll);
    for (;; autoF5DDEBEF_u -= 1) {
        autoF5DDEBEF_var = UnitGroupUnitFromEnd(autoF5DDEBEF_g, autoF5DDEBEF_u);
        if (autoF5DDEBEF_var == null) { break; }
        libNtve_gf_PauseUnit(autoF5DDEBEF_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeZergMarineFight_Init () {
    gt_EscapeZergMarineFight = TriggerCreate("gt_EscapeZergMarineFight_Func");
    TriggerAddEventUnitRegion(gt_EscapeZergMarineFight, null, RegionFromId(101), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EscapeHerculesRescue
//--------------------------------------------------------------------------------------------------
bool gt_EscapeHerculesRescue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_pingHercules);
    libNtve_gf_PauseUnit(gv_hercules, true);
    SoundPlay(SoundLink("UI_TerranRescueUnit", 0), PlayerGroupAll(), 100.0, 0.0);
    UnitIssueOrder(gv_hercules, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_PauseUnit(gv_hercules, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeHerculesRescue_Init () {
    gt_EscapeHerculesRescue = TriggerCreate("gt_EscapeHerculesRescue_Func");
    TriggerAddEventUnitRegion(gt_EscapeHerculesRescue, null, RegionFromId(81), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Random Move Areas
//--------------------------------------------------------------------------------------------------
bool gt_RandomMoveAreas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD3D75B12_g;
    int autoD3D75B12_u;
    unit autoD3D75B12_var;
    unitgroup autoE1CD9104_g;
    int autoE1CD9104_u;
    unit autoE1CD9104_var;
    unitgroup autoD860B59B_g;
    int autoD860B59B_u;
    unit autoD860B59B_var;
    unitgroup autoEFECE46F_g;
    int autoEFECE46F_u;
    unit autoEFECE46F_var;
    unitgroup auto4046689C_g;
    int auto4046689C_u;
    unit auto4046689C_var;
    unitgroup autoC277B8BF_g;
    int autoC277B8BF_u;
    unit autoC277B8BF_var;
    unitgroup autoF664984A_g;
    int autoF664984A_u;
    unit autoF664984A_var;
    unitgroup auto83F039C2_g;
    int auto83F039C2_u;
    unit auto83F039C2_var;
    unitgroup auto42246A93_g;
    int auto42246A93_u;
    unit auto42246A93_var;
    unitgroup auto575DDE1E_g;
    int auto575DDE1E_u;
    unit auto575DDE1E_var;
    unitgroup auto469E23EB_g;
    int auto469E23EB_u;
    unit auto469E23EB_var;
    unitgroup autoE00B2200_g;
    int autoE00B2200_u;
    unit autoE00B2200_var;
    unitgroup autoDE281780_g;
    int autoDE281780_u;
    unit autoDE281780_var;
    unitgroup auto2931BC2C_g;
    int auto2931BC2C_u;
    unit auto2931BC2C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoD3D75B12_g = UnitGroup(null, gv_p02_DOMINION, RegionFromId(112), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD3D75B12_u = UnitGroupCount(autoD3D75B12_g, c_unitCountAll);
    for (;; autoD3D75B12_u -= 1) {
        autoD3D75B12_var = UnitGroupUnitFromEnd(autoD3D75B12_g, autoD3D75B12_u);
        if (autoD3D75B12_var == null) { break; }
        UnitIssueOrder(autoD3D75B12_var, OrderTargetingRelativePoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(112))), c_orderQueueReplace);
    }
    Wait(0.2, c_timeGame);
    autoE1CD9104_g = UnitGroup(null, gv_p02_DOMINION, RegionFromId(51), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE1CD9104_u = UnitGroupCount(autoE1CD9104_g, c_unitCountAll);
    for (;; autoE1CD9104_u -= 1) {
        autoE1CD9104_var = UnitGroupUnitFromEnd(autoE1CD9104_g, autoE1CD9104_u);
        if (autoE1CD9104_var == null) { break; }
        UnitIssueOrder(autoE1CD9104_var, OrderTargetingRelativePoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(51))), c_orderQueueReplace);
    }
    Wait(0.2, c_timeGame);
    autoD860B59B_g = UnitGroup(null, gv_p06_PROTOSS_LAB_SPECIMENS, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD860B59B_u = UnitGroupCount(autoD860B59B_g, c_unitCountAll);
    for (;; autoD860B59B_u -= 1) {
        autoD860B59B_var = UnitGroupUnitFromEnd(autoD860B59B_g, autoD860B59B_u);
        if (autoD860B59B_var == null) { break; }
        UnitIssueOrder(autoD860B59B_var, OrderTargetingRelativePoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(47))), c_orderQueueReplace);
    }
    Wait(0.2, c_timeGame);
    autoEFECE46F_g = UnitGroup(null, gv_p05_ZERG_LAB_SPECIMENS, RegionFromId(103), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEFECE46F_u = UnitGroupCount(autoEFECE46F_g, c_unitCountAll);
    for (;; autoEFECE46F_u -= 1) {
        autoEFECE46F_var = UnitGroupUnitFromEnd(autoEFECE46F_g, autoEFECE46F_u);
        if (autoEFECE46F_var == null) { break; }
        UnitIssueOrder(autoEFECE46F_var, OrderTargetingRelativePoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(103))), c_orderQueueReplace);
    }
    Wait(0.2, c_timeGame);
    auto4046689C_g = UnitGroup(null, gv_p02_DOMINION, RegionFromId(55), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4046689C_u = UnitGroupCount(auto4046689C_g, c_unitCountAll);
    for (;; auto4046689C_u -= 1) {
        auto4046689C_var = UnitGroupUnitFromEnd(auto4046689C_g, auto4046689C_u);
        if (auto4046689C_var == null) { break; }
        UnitIssueOrder(auto4046689C_var, OrderTargetingRelativePoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(55))), c_orderQueueReplace);
    }
    Wait(0.2, c_timeGame);
    autoC277B8BF_g = UnitGroup(null, gv_p05_ZERG_LAB_SPECIMENS, RegionFromId(56), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC277B8BF_u = UnitGroupCount(autoC277B8BF_g, c_unitCountAll);
    for (;; autoC277B8BF_u -= 1) {
        autoC277B8BF_var = UnitGroupUnitFromEnd(autoC277B8BF_g, autoC277B8BF_u);
        if (autoC277B8BF_var == null) { break; }
        UnitIssueOrder(autoC277B8BF_var, OrderTargetingRelativePoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(56))), c_orderQueueReplace);
    }
    Wait(0.2, c_timeGame);
    autoF664984A_g = UnitGroup(null, gv_p05_ZERG_LAB_SPECIMENS, RegionFromId(57), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF664984A_u = UnitGroupCount(autoF664984A_g, c_unitCountAll);
    for (;; autoF664984A_u -= 1) {
        autoF664984A_var = UnitGroupUnitFromEnd(autoF664984A_g, autoF664984A_u);
        if (autoF664984A_var == null) { break; }
        UnitIssueOrder(autoF664984A_var, OrderTargetingRelativePoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(57))), c_orderQueueReplace);
    }
    Wait(0.2, c_timeGame);
    auto83F039C2_g = UnitGroup(null, gv_p05_ZERG_LAB_SPECIMENS, RegionFromId(92), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto83F039C2_u = UnitGroupCount(auto83F039C2_g, c_unitCountAll);
    for (;; auto83F039C2_u -= 1) {
        auto83F039C2_var = UnitGroupUnitFromEnd(auto83F039C2_g, auto83F039C2_u);
        if (auto83F039C2_var == null) { break; }
        UnitIssueOrder(auto83F039C2_var, OrderTargetingRelativePoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(92))), c_orderQueueReplace);
    }
    auto42246A93_g = UnitGroup(null, gv_p05_ZERG_LAB_SPECIMENS, RegionFromId(68), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto42246A93_u = UnitGroupCount(auto42246A93_g, c_unitCountAll);
    for (;; auto42246A93_u -= 1) {
        auto42246A93_var = UnitGroupUnitFromEnd(auto42246A93_g, auto42246A93_u);
        if (auto42246A93_var == null) { break; }
        UnitIssueOrder(auto42246A93_var, OrderTargetingRelativePoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(92))), c_orderQueueReplace);
    }
    Wait(0.2, c_timeGame);
    auto575DDE1E_g = UnitGroup(null, gv_p05_ZERG_LAB_SPECIMENS, RegionFromId(31), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto575DDE1E_u = UnitGroupCount(auto575DDE1E_g, c_unitCountAll);
    for (;; auto575DDE1E_u -= 1) {
        auto575DDE1E_var = UnitGroupUnitFromEnd(auto575DDE1E_g, auto575DDE1E_u);
        if (auto575DDE1E_var == null) { break; }
        UnitIssueOrder(auto575DDE1E_var, OrderTargetingRelativePoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(31))), c_orderQueueReplace);
    }
    Wait(0.2, c_timeGame);
    auto469E23EB_g = UnitGroup(null, gv_p05_ZERG_LAB_SPECIMENS, RegionFromId(73), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto469E23EB_u = UnitGroupCount(auto469E23EB_g, c_unitCountAll);
    for (;; auto469E23EB_u -= 1) {
        auto469E23EB_var = UnitGroupUnitFromEnd(auto469E23EB_g, auto469E23EB_u);
        if (auto469E23EB_var == null) { break; }
        UnitIssueOrder(auto469E23EB_var, OrderTargetingRelativePoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(73))), c_orderQueueReplace);
    }
    Wait(0.2, c_timeGame);
    autoE00B2200_g = UnitGroup(null, gv_p05_ZERG_LAB_SPECIMENS, RegionFromId(108), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE00B2200_u = UnitGroupCount(autoE00B2200_g, c_unitCountAll);
    for (;; autoE00B2200_u -= 1) {
        autoE00B2200_var = UnitGroupUnitFromEnd(autoE00B2200_g, autoE00B2200_u);
        if (autoE00B2200_var == null) { break; }
        UnitIssueOrder(autoE00B2200_var, OrderTargetingRelativePoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(108))), c_orderQueueReplace);
    }
    Wait(0.2, c_timeGame);
    autoDE281780_g = UnitGroup(null, gv_p06_PROTOSS_LAB_SPECIMENS, RegionFromId(79), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDE281780_u = UnitGroupCount(autoDE281780_g, c_unitCountAll);
    for (;; autoDE281780_u -= 1) {
        autoDE281780_var = UnitGroupUnitFromEnd(autoDE281780_g, autoDE281780_u);
        if (autoDE281780_var == null) { break; }
        UnitIssueOrder(autoDE281780_var, OrderTargetingRelativePoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(79))), c_orderQueueReplace);
    }
    Wait(0.2, c_timeGame);
    auto2931BC2C_g = UnitGroup(null, gv_p05_ZERG_LAB_SPECIMENS, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2931BC2C_u = UnitGroupCount(auto2931BC2C_g, c_unitCountAll);
    for (;; auto2931BC2C_u -= 1) {
        auto2931BC2C_var = UnitGroupUnitFromEnd(auto2931BC2C_g, auto2931BC2C_u);
        if (auto2931BC2C_var == null) { break; }
        UnitIssueOrder(auto2931BC2C_var, OrderTargetingRelativePoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(4))), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RandomMoveAreas_Init () {
    gt_RandomMoveAreas = TriggerCreate("gt_RandomMoveAreas_Func");
    TriggerAddEventTimePeriodic(gt_RandomMoveAreas, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EscapeComputer Enter Warbot
//--------------------------------------------------------------------------------------------------
bool gt_EscapeComputerEnterWarbot_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((gv_escapeComputerActive == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(gv_soundBeacon, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_EscapeDialogueRaynorWarbotonAutoAttackQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeComputerEnterWarbot_Init () {
    gt_EscapeComputerEnterWarbot = TriggerCreate("gt_EscapeComputerEnterWarbot_Func");
    TriggerAddEventUnitRegion(gt_EscapeComputerEnterWarbot, null, RegionFromId(111), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EscapeComputerXbot Activate
//--------------------------------------------------------------------------------------------------
bool gt_EscapeComputerXbotActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(4.0, c_timeGame);
    gv_escapeComputerActive = false;
    UnitRemove(UnitFromId(501));
    libNtve_gf_HideScreenButton(false, gv_escapeX88tbotButton);
    DialogDestroy(gv_buttonEscapeX88tbot);
    SoundPlay(SoundLink("Thor_Build", 0), PlayerGroupAll(), 100.0, 0.0);
    UnitSetOwner(gv_escapeWarbot, gv_p09_NEUTRAL_ATTACK, false);
    libNtve_gf_KillModel(gv_actorComputerAutoBot);
    UnitSetState(gv_escapeWarbot, c_unitStateTargetable, true);
    UnitSetState(gv_escapeWarbot, c_unitStateStatusBar, true);
    UnitSetState(gv_escapeWarbot, c_unitStateInvulnerable, false);
    UnitBehaviorAdd(gv_escapeWarbot, "WarbotA", gv_escapeWarbot, 1);
    Wait(0.2, c_timeGame);
    AICampaignStart(gv_p09_NEUTRAL_ATTACK);
    Wait(0.2, c_timeGame);
    AIAttackWaveSetTargetUnitGroup(gv_p09_NEUTRAL_ATTACK, gv_hybridUnitGroup);
    AIAttackWaveSetGatherPoint(gv_p09_NEUTRAL_ATTACK, UnitGetPosition(gv_escapeWarbot));
    AIAttackWaveUseUnit(gv_p04_HYBRID, gv_escapeWarbot);
    AIAttackWaveSend(gv_p09_NEUTRAL_ATTACK, 1, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeComputerXbotActivate_Init () {
    gt_EscapeComputerXbotActivate = TriggerCreate("gt_EscapeComputerXbotActivate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI - Escape!
//--------------------------------------------------------------------------------------------------
bool gt_StartAIEscape_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AICampaignStart(gv_p04_HYBRID);
    libNtve_gf_SetTacticalAIThink(gv_p04_HYBRID, "Hybrid", "", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAIEscape_Init () {
    gt_StartAIEscape = TriggerCreate("gt_StartAIEscape_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI Waves - Escape!
//--------------------------------------------------------------------------------------------------
bool gt_StartAIWavesEscape_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetUnitGroup(gv_p04_HYBRID, gv_playerGroupforAI);
    AIAttackWaveSetGatherPoint(gv_p04_HYBRID, UnitGetPosition(gv_hybrid));
    AIAttackWaveUseUnit(gv_p04_HYBRID, gv_hybrid);
    AIAttackWaveSend(gv_p04_HYBRID, 1, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAIWavesEscape_Init () {
    gt_StartAIWavesEscape = TriggerCreate("gt_StartAIWavesEscape_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Eggs Break when close
//--------------------------------------------------------------------------------------------------
bool gt_EggsBreakwhenclose_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_egg;
    unitgroup lv_player;

    // Automatic Variable Declarations
    unitgroup autoEA6E5487_g;
    int autoEA6E5487_u;

    // Variable Initialization
    lv_player = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoEA6E5487_g = gv_eggsGroup;
    autoEA6E5487_u = UnitGroupCount(autoEA6E5487_g, c_unitCountAll);
    for (;; autoEA6E5487_u -= 1) {
        lv_egg = UnitGroupUnitFromEnd(autoEA6E5487_g, autoEA6E5487_u);
        if (lv_egg == null) { break; }
        if ((UnitGetCustomValue(lv_egg, 0) == 0.0)) {
            lv_player = UnitGroup(null, gv_p01_USER, RegionCircle(UnitGetPosition(lv_egg), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
            if ((UnitGroupCount(lv_player, c_unitCountAlive) > 0)) {
                UnitSetCustomValue(lv_egg, 0, 1.0);
                UnitKill(lv_egg);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Pygalisk", 0, gv_p05_ZERG_LAB_SPECIMENS, UnitGetPosition(lv_egg));
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EggsBreakwhenclose_Init () {
    gt_EggsBreakwhenclose = TriggerCreate("gt_EggsBreakwhenclose_Func");
    TriggerEnable(gt_EggsBreakwhenclose, false);
    TriggerAddEventTimePeriodic(gt_EggsBreakwhenclose, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Create
//--------------------------------------------------------------------------------------------------
bool gt_HybridCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto74F3A32A_g;
    int auto74F3A32A_u;
    unit auto74F3A32A_var;

    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(36), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(615), false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(627), false);
    UnitSetState(UnitFromId(615), c_unitStateTargetable, true);
    UnitSetState(UnitFromId(627), c_unitStateTargetable, true);
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 1.0, 100.0, 1.0);
    Wait(2.0, c_timeGame);
    auto74F3A32A_g = UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto74F3A32A_u = UnitGroupCount(auto74F3A32A_g, c_unitCountAll);
    for (;; auto74F3A32A_u -= 1) {
        auto74F3A32A_var = UnitGroupUnitFromEnd(auto74F3A32A_g, auto74F3A32A_u);
        if (auto74F3A32A_var == null) { break; }
        UnitGroupAdd(gv_playerUnitGroup, auto74F3A32A_var);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "Hybrid", 0, gv_p04_HYBRID, PointFromId(648));
    gv_hybrid = UnitLastCreated();
    UnitGroupAdd(gv_hybridUnitGroup, gv_hybrid);
    if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
        UnitSetPropertyFixed(gv_hybrid, c_unitPropBaseMovementSpeed, 1.5);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 0) == 1)) {
        UnitSetPropertyFixed(gv_hybrid, c_unitPropBaseMovementSpeed, 1.8);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        UnitSetPropertyFixed(gv_hybrid, c_unitPropBaseMovementSpeed, 2.5);
    }

    CameraPan(gv_p01_USER, PointFromId(451), 1.0, -1, 10, false);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p04_HYBRID, libNtve_ge_AllianceSetting_EnemyWithSharedVision);
    UnitIssueOrder(gv_hybrid, OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(627)), c_orderQueueReplace);
    TriggerEnable(gt_HybridAttackRocks, true);
    TriggerEnable(gt_HybridPingSound, true);
    TriggerEnable(gt_HybridForceDestroyRocks, true);
    TriggerEnable(gt_HybridCastStunifplayerisclose, true);
    TriggerEnable(gt_HybridCastConsumeDNAonZerg, true);
    TriggerEnable(gt_HybridCastConsumeDNAonProtoss, true);
    Wait(4.0, c_timeGame);
    TriggerExecute(gt_EscapeDialogueTheHybridQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridCreate_Init () {
    gt_HybridCreate = TriggerCreate("gt_HybridCreate_Func");
    TriggerAddEventTimePeriodic(gt_HybridCreate, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Ping Sound
//--------------------------------------------------------------------------------------------------
bool gt_HybridPingSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_hybrid) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("UI_TerranReminderPing", 0), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(gv_hybrid), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 2.0, 270.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridPingSound_Init () {
    gt_HybridPingSound = TriggerCreate("gt_HybridPingSound_Func");
    TriggerEnable(gt_HybridPingSound, false);
    TriggerAddEventTimePeriodic(gt_HybridPingSound, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Attack Rocks
//--------------------------------------------------------------------------------------------------
bool gt_HybridAttackRocks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(627)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_hybrid, OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(627)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridAttackRocks_Init () {
    gt_HybridAttackRocks = TriggerCreate("gt_HybridAttackRocks_Func");
    TriggerEnable(gt_HybridAttackRocks, false);
    TriggerAddEventTimePeriodic(gt_HybridAttackRocks, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Force Destroy Rocks
//--------------------------------------------------------------------------------------------------
bool gt_HybridForceDestroyRocks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_raynor))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitSetPropertyFixed(UnitFromId(615), c_unitPropLife, 5.0);
    UnitSetPropertyFixed(UnitFromId(627), c_unitPropLife, 5.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridForceDestroyRocks_Init () {
    gt_HybridForceDestroyRocks = TriggerCreate("gt_HybridForceDestroyRocks_Func");
    TriggerEnable(gt_HybridForceDestroyRocks, false);
    TriggerAddEventUnitRegion(gt_HybridForceDestroyRocks, null, RegionFromId(150), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Regeneration
//--------------------------------------------------------------------------------------------------
bool gt_HybridRegeneration_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_hybrid))) {
            return false;
        }

        if (!((gv_hybrid != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropLifePercent, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridRegeneration_Init () {
    gt_HybridRegeneration = TriggerCreate("gt_HybridRegeneration_Func");
    TriggerAddEventUnitDamaged(gt_HybridRegeneration, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Rocks Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_HybridRocksDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_EscapeDialogueRaynorItsontheMoveQ, true, false);
    TriggerExecute(gt_StartAIWavesEscape, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridRocksDestroyed_Init () {
    gt_HybridRocksDestroyed = TriggerCreate("gt_HybridRocksDestroyed_Func");
    TriggerAddEventUnitDied(gt_HybridRocksDestroyed, UnitRefFromUnit(UnitFromId(627)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Cast Stun if player is close
//--------------------------------------------------------------------------------------------------
bool gt_HybridCastStunifplayerisclose_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hybridLocal;
    unitgroup lv_playerGroup;

    // Automatic Variable Declarations
    unitgroup auto610B5130_g;
    int auto610B5130_u;

    // Variable Initialization
    lv_playerGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto610B5130_g = gv_hybridUnitGroup;
    auto610B5130_u = UnitGroupCount(auto610B5130_g, c_unitCountAll);
    for (;; auto610B5130_u -= 1) {
        lv_hybridLocal = UnitGroupUnitFromEnd(auto610B5130_g, auto610B5130_u);
        if (lv_hybridLocal == null) { break; }
        if ((UnitGetCustomValue(lv_hybridLocal, 0) == 0.0)) {
            lv_playerGroup = UnitGroup(null, gv_p01_USER, RegionCircle(UnitGetPosition(lv_hybridLocal), 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 2);
            if ((UnitGroupCount(lv_playerGroup, c_unitCountAlive) > 0)) {
                AICast(gv_hybrid, Order(AbilityCommand("HybridFAoEStun", 0)), null, false);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridCastStunifplayerisclose_Init () {
    gt_HybridCastStunifplayerisclose = TriggerCreate("gt_HybridCastStunifplayerisclose_Func");
    TriggerEnable(gt_HybridCastStunifplayerisclose, false);
    TriggerAddEventTimePeriodic(gt_HybridCastStunifplayerisclose, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Cast Consume DNA on Zerg
//--------------------------------------------------------------------------------------------------
bool gt_HybridCastConsumeDNAonZerg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hybridLocal;
    unitgroup lv_zergGroup;

    // Automatic Variable Declarations
    unitgroup auto2FE74A07_g;
    int auto2FE74A07_u;

    // Variable Initialization
    lv_zergGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2FE74A07_g = gv_hybridUnitGroup;
    auto2FE74A07_u = UnitGroupCount(auto2FE74A07_g, c_unitCountAll);
    for (;; auto2FE74A07_u -= 1) {
        lv_hybridLocal = UnitGroupUnitFromEnd(auto2FE74A07_g, auto2FE74A07_u);
        if (lv_hybridLocal == null) { break; }
        if ((UnitGetCustomValue(lv_hybridLocal, 0) == 0.0)) {
            lv_zergGroup = UnitGroup(null, gv_p05_ZERG_LAB_SPECIMENS, RegionCircle(UnitGetPosition(lv_hybridLocal), 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
            if ((UnitGroupCount(lv_zergGroup, c_unitCountAlive) > 0)) {
                AICast(gv_hybrid, OrderTargetingUnit(AbilityCommand("ConsumeDNA", 0), UnitGroupRandomUnit(lv_zergGroup, c_unitCountAlive)), null, false);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridCastConsumeDNAonZerg_Init () {
    gt_HybridCastConsumeDNAonZerg = TriggerCreate("gt_HybridCastConsumeDNAonZerg_Func");
    TriggerEnable(gt_HybridCastConsumeDNAonZerg, false);
    TriggerAddEventTimePeriodic(gt_HybridCastConsumeDNAonZerg, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Cast Consume DNA on Protoss
//--------------------------------------------------------------------------------------------------
bool gt_HybridCastConsumeDNAonProtoss_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hybridLocal;
    unitgroup lv_protossGroup;

    // Automatic Variable Declarations
    unitgroup auto7BC81B6F_g;
    int auto7BC81B6F_u;

    // Variable Initialization
    lv_protossGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto7BC81B6F_g = gv_hybridUnitGroup;
    auto7BC81B6F_u = UnitGroupCount(auto7BC81B6F_g, c_unitCountAll);
    for (;; auto7BC81B6F_u -= 1) {
        lv_hybridLocal = UnitGroupUnitFromEnd(auto7BC81B6F_g, auto7BC81B6F_u);
        if (lv_hybridLocal == null) { break; }
        if ((UnitGetCustomValue(lv_hybridLocal, 0) == 0.0)) {
            lv_protossGroup = UnitGroup(null, gv_p06_PROTOSS_LAB_SPECIMENS, RegionCircle(UnitGetPosition(lv_hybridLocal), 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
            if ((UnitGroupCount(lv_protossGroup, c_unitCountAlive) > 0)) {
                AICast(gv_hybrid, OrderTargetingUnit(AbilityCommand("ConsumeDNA", 0), UnitGroupRandomUnit(lv_protossGroup, c_unitCountAlive)), null, false);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridCastConsumeDNAonProtoss_Init () {
    gt_HybridCastConsumeDNAonProtoss = TriggerCreate("gt_HybridCastConsumeDNAonProtoss_Func");
    TriggerEnable(gt_HybridCastConsumeDNAonProtoss, false);
    TriggerAddEventTimePeriodic(gt_HybridCastConsumeDNAonProtoss, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Escape Fly Out Units
//--------------------------------------------------------------------------------------------------
bool gt_VictoryEscapeFlyOutUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((EventUnit() != gv_raynor))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("Medivac_Load", 0), PlayerGroupAll(), 100.0, 0.0);
    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryEscapeFlyOutUnits_Init () {
    gt_VictoryEscapeFlyOutUnits = TriggerCreate("gt_VictoryEscapeFlyOutUnits_Func");
    TriggerAddEventUnitRegion(gt_VictoryEscapeFlyOutUnits, null, RegionFromId(161), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Escape Fly Out Raynor
//--------------------------------------------------------------------------------------------------
bool gt_VictoryEscapeFlyOutRaynor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_raynor))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(UnitFromId(1028));
    libNtve_gf_MakeUnitInvulnerable(gv_raynor, true);
    TriggerEnable(gt_HybridPingSound, false);
    Wait(0.5, c_timeGame);
    SoundPlay(SoundLink("Medivac_Load", 0), PlayerGroupAll(), 100.0, 0.0);
    UnitRemove(EventUnit());
    UnitIssueOrder(gv_hybrid, OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(492)), c_orderQueueReplace);
    TriggerExecute(gt_VictoryEscape, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryEscapeFlyOutRaynor_Init () {
    gt_VictoryEscapeFlyOutRaynor = TriggerCreate("gt_VictoryEscapeFlyOutRaynor_Func");
    TriggerAddEventUnitRegion(gt_VictoryEscapeFlyOutRaynor, null, RegionFromId(161), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory - Escape!
//--------------------------------------------------------------------------------------------------
bool gt_VictoryEscape_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerExecute(gt_ObjectiveEscapeComplete, true, true);
    TriggerExecute(gt_ObjectiveRaynorComplete, true, true);
    libCamp_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryEscape_Init () {
    gt_VictoryEscape = TriggerCreate("gt_VictoryEscape_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((ObjectiveGetState(gv_objectiveFusionReactor) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveEscape) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveProtossRelics) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_researchObjectiveBrutalisk) == c_objectiveStateCompleted)) {
        AchievementAward(gv_p01_USER, "THorner05_1");
    }

    VictoryPanelAddAchievement("THorner05_1");
    VictoryPanelAddAchievement("THorner05_3");
    VictoryPanelAddAchievement("THorner05_2");
    gv_statTotalRaynorAndGrenadeKills = (gv_raynorKills + gv_grenadeKills);
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/0B54EACA"), IntToText(gv_statTotalRaynorAndGrenadeKills));
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/2D006445"), (IntToText(gv_statWeaponsCollected) + StringExternal("Param/Value/F5C7AC1A")));
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    if ((gv_statBrutaliskKilled == 1)) {
        VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/B2ACFA86"), StringExternal("Param/Value/A47D0EB0"));
    }
    else {
        VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/679B78A0"), StringExternal("Param/Value/5D283B44"));
    }
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/0725AA97"), IntToText(gv_brutaliskResearchGranted));
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/30CE4193"), (IntToText(gv_obejctiveProtossRelics) + StringExternal("Param/Value/E38056A1") + IntToText(gv_obejctiveProtossRelicsTotalSecondHalf)));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/336600A8"), IntToText(gv_obejctiveProtossRelics));
    libCamp_gf_EndCampaignMission(gv_p01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Raynor Dies Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatRaynorDiesObjectiveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((EventUnit() == gv_raynor))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/C8D9919C"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatRaynorDiesObjectiveFailed_Init () {
    gt_DefeatRaynorDiesObjectiveFailed = TriggerCreate("gt_DefeatRaynorDiesObjectiveFailed_Func");
    TriggerAddEventUnitDied(gt_DefeatRaynorDiesObjectiveFailed, UnitRefFromVariable("gv_raynor"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_EndCampaignMission(gv_p01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    libCamp_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, c_playerAny, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, c_playerAny, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Investigate Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveInvestigateCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveCreate(StringExternal("Param/Value/7F3E9E69"), StringExternal("Param/Value/45CD0F73"), c_objectiveStateActive, true);
    gv_objectiveInvestigate = ObjectiveLastCreated();
    ObjectiveCreate(StringExternal("Param/Value/C8F06BE4"), StringExternal("Param/Value/25108B5E"), c_objectiveStateHidden, true);
    gv_objectiveFusionReactor = ObjectiveLastCreated();
    ObjectiveCreate(StringExternal("Param/Value/9067AA1F"), StringExternal("Param/Value/D20106AB"), c_objectiveStateHidden, true);
    gv_objectiveEscape = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_THorner05Objective2, gv_objectiveInvestigate, StringExternal("Param/Value/62441C9A"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveInvestigateCreate_Init () {
    gt_ObjectiveInvestigateCreate = TriggerCreate("gt_ObjectiveInvestigateCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Investigate Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveInvestigateComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveInvestigateCreate, true, false);
    ObjectiveSetState(gv_objectiveInvestigate, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveInvestigateComplete_Init () {
    gt_ObjectiveInvestigateComplete = TriggerCreate("gt_ObjectiveInvestigateComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Investigate Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveInvestigateFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveInvestigateCreate, true, false);
    ObjectiveSetState(gv_objectiveInvestigate, c_objectiveStateFailed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveInvestigateFailed_Init () {
    gt_ObjectiveInvestigateFailed = TriggerCreate("gt_ObjectiveInvestigateFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Fusion Reactor Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFusionReactorCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_THorner05Objective2, gv_objectiveFusionReactor, StringExternal("Param/Value/F7927309"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFusionReactorCreateQ_Init () {
    gt_ObjectiveFusionReactorCreateQ = TriggerCreate("gt_ObjectiveFusionReactorCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Fusion Reactor Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFusionReactorComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveFusionReactorCreateQ, true, false);
    ObjectiveSetState(gv_objectiveFusionReactor, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFusionReactorComplete_Init () {
    gt_ObjectiveFusionReactorComplete = TriggerCreate("gt_ObjectiveFusionReactorComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Fusion Reactor Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFusionReactorFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveFusionReactorCreateQ, true, false);
    ObjectiveSetState(gv_objectiveFusionReactor, c_objectiveStateFailed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFusionReactorFailed_Init () {
    gt_ObjectiveFusionReactorFailed = TriggerCreate("gt_ObjectiveFusionReactorFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Fusion Reactor Ping
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFusionReactorPing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    revealer lv_revealerCore;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    PingCreate(PlayerGroupAll(), "PingObjective", PointFromId(194), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0);
    gv_pingFusionCore = PingLastCreated();
    PingSetTooltip(gv_pingFusionCore, StringExternal("Param/Value/ED378059"));
    PingSetColor(gv_pingFusionCore, Color(0.00, 100.00, 0.00));
    VisRevealerCreate(gv_p01_USER, RegionFromId(21));
    lv_revealerCore = VisRevealerLastCreated();
    Wait(1.0, c_timeGame);
    VisRevealerDestroy(lv_revealerCore);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFusionReactorPing_Init () {
    gt_ObjectiveFusionReactorPing = TriggerCreate("gt_ObjectiveFusionReactorPing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Raynor Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRaynorCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/FF4B30F8"), StringExternal("Param/Value/3AA81C0C"), c_objectiveStateActive, true);
    gv_objectiveRaynorSurvive = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_THorner05Objective3, ObjectiveLastCreated(), StringExternal("Param/Value/0BFAB47A"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRaynorCreateQ_Init () {
    gt_ObjectiveRaynorCreateQ = TriggerCreate("gt_ObjectiveRaynorCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Raynor Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRaynorComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveRaynorCreateQ, true, false);
    ObjectiveSetState(gv_objectiveRaynorSurvive, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRaynorComplete_Init () {
    gt_ObjectiveRaynorComplete = TriggerCreate("gt_ObjectiveRaynorComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Escape Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveEscapeCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_THorner05Objective4, gv_objectiveEscape, StringExternal("Param/Value/2B2188EF"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveEscapeCreateQ_Init () {
    gt_ObjectiveEscapeCreateQ = TriggerCreate("gt_ObjectiveEscapeCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Escape Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveEscapeComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveEscapeCreateQ, true, false);
    ObjectiveSetState(gv_objectiveEscape, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveEscapeComplete_Init () {
    gt_ObjectiveEscapeComplete = TriggerCreate("gt_ObjectiveEscapeComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Escape Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveEscapeFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveEscapeCreateQ, true, false);
    ObjectiveSetState(gv_objectiveEscape, c_objectiveStateFailed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveEscapeFailed_Init () {
    gt_ObjectiveEscapeFailed = TriggerCreate("gt_ObjectiveEscapeFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Research Objective Brutalisk Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ResearchObjectiveBrutaliskCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate((StringExternal("Param/Value/91F3CB3D") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectKilltheBrutalisk, libCamp_ge_StoryResearchObjectiveTextStyle_Lumpsum, 1, 0)), StringExternal("Param/Value/AF4A6014"), c_objectiveStateActive, false);
    gv_researchObjectiveBrutalisk = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_THorner05Objective5, ObjectiveLastCreated(), StringExternal("Param/Value/0E2AB04E"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResearchObjectiveBrutaliskCreateQ_Init () {
    gt_ResearchObjectiveBrutaliskCreateQ = TriggerCreate("gt_ResearchObjectiveBrutaliskCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Research Objective Brutalisk Update Q
//--------------------------------------------------------------------------------------------------
bool gt_ResearchObjectiveBrutaliskUpdateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventUnit() == gv_brutalisk))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_brutaliskPing);
    gv_brutaliskDead = true;
    gv_statBrutaliskKilled += 1;
    gv_brutaliskResearchGranted += 3;
    libCamp_gf_DisplayResearchPointsGiventoPlayer(libCamp_ge_StoryResearchObject_ResearchObjectKilltheBrutalisk, EventUnit(), gv_p01_USER);
    TriggerExecute(gt_ResearchObjectiveBrutaliskCreateQ, true, false);
    if ((ObjectiveGetState(gv_researchObjectiveBrutalisk) != c_objectiveStateCompleted)) {
        TriggerQueueEnter();
        ObjectiveSetState(gv_researchObjectiveBrutalisk, c_objectiveStateCompleted);
        ObjectiveSetName(gv_researchObjectiveBrutalisk, (StringExternal("Param/Value/F8BA0C74") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectKilltheBrutalisk, libCamp_ge_StoryResearchObjectiveTextStyle_Lumpsum, 1, 1)));
        Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
        TriggerQueueExit();
    }

    if ((libNtve_gf_KillingUnit() == gv_warbot) && (libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_brutaliskReleased == true)) {
        AchievementAward(gv_p01_USER, "FeatOfStrength_THorner05S");
    }

    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_achievementUnitLosttoBrutalisk == false) && (gv_brutaliskReleased == true)) {
        AchievementAward(gv_p01_USER, "THorner05_3");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResearchObjectiveBrutaliskUpdateQ_Init () {
    gt_ResearchObjectiveBrutaliskUpdateQ = TriggerCreate("gt_ResearchObjectiveBrutaliskUpdateQ_Func");
    TriggerAddEventUnitDied(gt_ResearchObjectiveBrutaliskUpdateQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Protoss Relics Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProtossRelicsCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate((StringExternal("Param/Value/C2FF6FE6") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectFindProtossRelics, libCamp_ge_StoryResearchObjectiveTextStyle_Multipart, gv_obejctiveProtossRelicsTotalFirstHalf, 0)), StringExternal("Param/Value/322A1BDF"), c_objectiveStateActive, false);
    gv_objectiveProtossRelics = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_THorner05Objective52, ObjectiveLastCreated(), StringExternal("Param/Value/EA5A26DE"));
    TriggerExecute(gt_CreateProtossRelicsObjects, true, false);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProtossRelicsCreateQ_Init () {
    gt_ObjectiveProtossRelicsCreateQ = TriggerCreate("gt_ObjectiveProtossRelicsCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Protoss Relics Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProtossRelicsUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "ProtossRelic"))) {
            return false;
        }

        if (!((gv_protossRelicsSecondHalf == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_obejctiveProtossRelics += 1;
    TriggerExecute(gt_ObjectiveProtossRelicsCreateQ, true, false);
    libCamp_gf_DisplayResearchPointsGiventoPlayer(libCamp_ge_StoryResearchObject_ResearchObjectFindProtossRelics, EventUnit(), gv_p01_USER);
    UnitKill(EventUnit());
    ObjectiveSetName(gv_objectiveProtossRelics, (StringExternal("Param/Value/A43486E9") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectFindProtossRelics, libCamp_ge_StoryResearchObjectiveTextStyle_Multipart, gv_obejctiveProtossRelicsTotalFirstHalf, gv_obejctiveProtossRelics)));
    if ((gv_obejctiveProtossRelics == gv_obejctiveProtossRelicsTotalFirstHalf)) {
        TriggerExecute(gt_ObjectiveProtossRelicsComplete, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProtossRelicsUpdate_Init () {
    gt_ObjectiveProtossRelicsUpdate = TriggerCreate("gt_ObjectiveProtossRelicsUpdate_Func");
    TriggerAddEventUnitAbility(gt_ObjectiveProtossRelicsUpdate, null, AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Protoss Relics Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProtossRelicsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveProtossRelicsCreateQ, true, false);
    ObjectiveSetState(gv_objectiveProtossRelics, c_objectiveStateCompleted);
    ObjectiveSetName(gv_objectiveProtossRelics, (StringExternal("Param/Value/31655236") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectFindProtossRelics, libCamp_ge_StoryResearchObjectiveTextStyle_Multipart, gv_obejctiveProtossRelicsTotalFirstHalf, gv_obejctiveProtossRelics)));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProtossRelicsComplete_Init () {
    gt_ObjectiveProtossRelicsComplete = TriggerCreate("gt_ObjectiveProtossRelicsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Protoss Relics Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProtossRelicsFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveProtossRelicsCreateQ, true, false);
    ObjectiveSetState(gv_objectiveProtossRelics, c_objectiveStateFailed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProtossRelicsFailed_Init () {
    gt_ObjectiveProtossRelicsFailed = TriggerCreate("gt_ObjectiveProtossRelicsFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Protoss Relics Objects
//--------------------------------------------------------------------------------------------------
bool gt_CreateProtossRelicsObjects_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "ProtossRelic", 0, gv_p07_NEUTRAL, PointFromId(2958));
    UnitGroupAdd(gv_protossRelicsGroup, UnitLastCreated());
    UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/E1FE759F"), StringExternal("Param/Value/6B206A3F"), StringToText(""));
    libNtve_gf_CreateUnitsAtPoint2(1, "ProtossRelic", 0, gv_p07_NEUTRAL, PointFromId(2959));
    UnitGroupAdd(gv_protossRelicsGroup, UnitLastCreated());
    UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/17F59DAF"), StringExternal("Param/Value/6194ABE5"), StringToText(""));
    libNtve_gf_CreateUnitsAtPoint2(1, "ProtossRelic", 0, gv_p07_NEUTRAL, PointFromId(2960));
    UnitGroupAdd(gv_protossRelicsGroup, UnitLastCreated());
    UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/9427A838"), StringExternal("Param/Value/32123B42"), StringToText(""));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateProtossRelicsObjects_Init () {
    gt_CreateProtossRelicsObjects = TriggerCreate("gt_CreateProtossRelicsObjects_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Protoss Relics Update Second Half
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProtossRelicsUpdateSecondHalf_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "ProtossRelic"))) {
            return false;
        }

        if (!((gv_protossRelicsSecondHalf == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_obejctiveProtossRelics += 1;
    TriggerExecute(gt_ObjectiveProtossRelicsCreateQ, true, false);
    libCamp_gf_DisplayResearchPointsGiventoPlayer(libCamp_ge_StoryResearchObject_ResearchObjectFindProtossRelics, EventUnit(), gv_p01_USER);
    UnitKill(EventUnit());
    ObjectiveSetName(gv_objectiveProtossRelics, (StringExternal("Param/Value/9F164517") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectFindProtossRelics, libCamp_ge_StoryResearchObjectiveTextStyle_Multipart, gv_obejctiveProtossRelicsTotalSecondHalf, gv_obejctiveProtossRelics)));
    if ((gv_obejctiveProtossRelics == gv_obejctiveProtossRelicsTotalSecondHalf)) {
        TriggerExecute(gt_ObjectiveProtossRelicsCompleteSecondHalf, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProtossRelicsUpdateSecondHalf_Init () {
    gt_ObjectiveProtossRelicsUpdateSecondHalf = TriggerCreate("gt_ObjectiveProtossRelicsUpdateSecondHalf_Func");
    TriggerAddEventUnitAbility(gt_ObjectiveProtossRelicsUpdateSecondHalf, null, AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Protoss Relics Complete Second Half
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProtossRelicsCompleteSecondHalf_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_protossRelicsSecondHalf == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveProtossRelicsCreateQ, true, false);
    ObjectiveSetState(gv_objectiveProtossRelics, c_objectiveStateCompleted);
    ObjectiveSetName(gv_objectiveProtossRelics, (StringExternal("Param/Value/4A3E218A") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectFindProtossRelics, libCamp_ge_StoryResearchObjectiveTextStyle_Multipart, gv_obejctiveProtossRelicsTotalSecondHalf, gv_obejctiveProtossRelics) + StringToText("")));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProtossRelicsCompleteSecondHalf_Init () {
    gt_ObjectiveProtossRelicsCompleteSecondHalf = TriggerCreate("gt_ObjectiveProtossRelicsCompleteSecondHalf_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_StartGame);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    gv_inCinematic = true;
    gv_gameOver = true;
    UnitPauseAll(true);
    AITimePause(true);
    GameTimeOfDayPause(true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_BriefingScene00, true, true);
    TriggerExecute(gt_BriefingScene01, true, true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UnitPauseAll(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0A4F3B12_g;
    int auto0A4F3B12_u;
    unit auto0A4F3B12_var;
    unitgroup auto74A14EAF_g;
    int auto74A14EAF_u;
    unit auto74A14EAF_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto0A4F3B12_g = UnitGroupFilterRegion(UnitGroup(null, gv_p02_DOMINION, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionPlayableMap(), 0);
    auto0A4F3B12_u = UnitGroupCount(auto0A4F3B12_g, c_unitCountAll);
    for (;; auto0A4F3B12_u -= 1) {
        auto0A4F3B12_var = UnitGroupUnitFromEnd(auto0A4F3B12_g, auto0A4F3B12_u);
        if (auto0A4F3B12_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto0A4F3B12_var, false);
    }
    auto74A14EAF_g = UnitGroupFilterRegion(UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionPlayableMap(), 0);
    auto74A14EAF_u = UnitGroupCount(auto74A14EAF_g, c_unitCountAll);
    for (;; auto74A14EAF_u -= 1) {
        auto74A14EAF_var = UnitGroupUnitFromEnd(auto74A14EAF_g, auto74A14EAF_u);
        if (auto74A14EAF_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto74A14EAF_var, false);
    }
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1358), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1359), (SoundLengthSync(SoundLink("THorner05SBriefingRaynor00001", 0)) + SoundLengthSync(SoundLink("THorner05SBriefingHorner00008", 0))), -1, 10, true);
    MovieStartRecording("Briefing_Video_THorner05S_00");
    // Transmission - SoundLink("THorner05SBriefingRaynor00001", 0)
    SoundPlay(SoundLink("THorner05SBriefingRaynor00001", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("THorner05SBriefingRaynor00001", 0)), c_timeReal);
    // Transmission - SoundLink("THorner05SBriefingHorner00008", 0)
    SoundPlay(SoundLink("THorner05SBriefingHorner00008", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("THorner05SBriefingHorner00008", 0)), c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1360), SoundLengthSync(SoundLink("THorner05SBriefingRaynor00002", 0)), -1, 10, true);
    // Transmission - SoundLink("THorner05SBriefingRaynor00002", 0)
    SoundPlay(SoundLink("THorner05SBriefingRaynor00002", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("THorner05SBriefingRaynor00002", 0)), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner05SBriefingRaynor00001", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner05SBriefingHorner00008", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner05SBriefingRaynor00002", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00_Init () {
    gt_BriefingScene00 = TriggerCreate("gt_BriefingScene00_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1360), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1507), 12.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_THorner05S_01");
    // Transmission - SoundLink("THorner05SBriefingRaynor00005", 0)
    SoundPlay(SoundLink("THorner05SBriefingRaynor00005", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("THorner05SBriefingRaynor00005", 0)), c_timeReal);
    // Transmission - SoundLink("THorner05SBriefingHorner00011", 0)
    SoundPlay(SoundLink("THorner05SBriefingHorner00011", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("THorner05SBriefingHorner00011", 0)), c_timeReal);
    // Transmission - SoundLink("THorner05SBriefingRaynor00007", 0)
    SoundPlay(SoundLink("THorner05SBriefingRaynor00007", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("THorner05SBriefingRaynor00007", 0)), c_timeReal);
    // Transmission - SoundLink("THorner05SBriefingRaynor00010", 0)
    SoundPlay(SoundLink("THorner05SBriefingRaynor00010", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("THorner05SBriefingRaynor00010", 0)), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner05SBriefingRaynor00005", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner05SBriefingHorner00011", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner05SBriefingRaynor00007", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner05SBriefingRaynor00010", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01_Init () {
    gt_BriefingScene01 = TriggerCreate("gt_BriefingScene01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF68E5AF0_g;
    int autoF68E5AF0_u;
    unit autoF68E5AF0_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitPauseAll(true);
    gv_introHiddenUnitGroup = UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    autoF68E5AF0_g = gv_introHiddenUnitGroup;
    autoF68E5AF0_u = UnitGroupCount(autoF68E5AF0_g, c_unitCountAll);
    for (;; autoF68E5AF0_u -= 1) {
        autoF68E5AF0_var = UnitGroupUnitFromEnd(autoF68E5AF0_g, autoF68E5AF0_u);
        if (autoF68E5AF0_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoF68E5AF0_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(2), 10.0, -1, 10, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "SpecialOpsDropship", 0, gv_p01_USER, PointFromId(161));
    gv_introDropship = UnitLastCreated();
    UnitCargoCreate(gv_introDropship, "Marine", 5);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitCargoLastCreatedGroup(), gv_introDropshipCargoGroup);
    UnitCargoCreate(gv_introDropship, "Medic", 2);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitCargoLastCreatedGroup(), gv_introDropshipCargoGroup);
    UnitCargoCreate(UnitLastCreated(), "Raynor", 1);
    gv_raynor = UnitLastCreated();
    UnitGroupAdd(gv_introDropshipCargoGroup, gv_raynor);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner05SMusicIntro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gv_introCinematicCompleted = false;
    UnitIssueOrder(gv_introDropship, OrderTargetingPoint(AbilityCommand("SpecOpsDropshipTransport", 2), PointFromId(163)), c_orderQueueReplace);
    UnitIssueOrder(gv_introDropship, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(161)), c_orderQueueAddToEnd);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    // Transmission - SoundLink("THorner05SHorner00001", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner05SHorner00001", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("THorner05SRaynor00002", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner05SRaynor00002", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("THorner05SHorner00003", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner05SHorner00003", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("THorner05SRaynor00004", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner05SRaynor00004", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
    gv_introCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_introCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto63549DD7_g;
    int auto63549DD7_u;
    unit auto63549DD7_var;
    unitgroup autoBBFAB371_g;
    int autoBBFAB371_u;
    unit autoBBFAB371_var;
    unitgroup autoF7D8012E_g;
    int autoF7D8012E_u;
    unit autoF7D8012E_var;
    unitgroup auto494534DA_g;
    int auto494534DA_u;
    unit auto494534DA_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_DropshipCargoMove, false);
    UnitRemove(gv_introDropship);
    auto63549DD7_g = UnitGroupFilterRegion(UnitGroup(null, gv_p01_USER, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionFromId(2), 0);
    auto63549DD7_u = UnitGroupCount(auto63549DD7_g, c_unitCountAll);
    for (;; auto63549DD7_u -= 1) {
        auto63549DD7_var = UnitGroupUnitFromEnd(auto63549DD7_g, auto63549DD7_u);
        if (auto63549DD7_var == null) { break; }
        UnitRemove(auto63549DD7_var);
    }
    autoBBFAB371_g = gv_introHiddenUnitGroup;
    autoBBFAB371_u = UnitGroupCount(autoBBFAB371_g, c_unitCountAll);
    for (;; autoBBFAB371_u -= 1) {
        autoBBFAB371_var = UnitGroupUnitFromEnd(autoBBFAB371_g, autoBBFAB371_u);
        if (autoBBFAB371_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoBBFAB371_var, true);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p01_USER, PointFromId(7));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p01_USER, PointFromId(15));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p01_USER, PointFromId(159));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p01_USER, PointFromId(182));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p01_USER, PointFromId(227));
    libNtve_gf_CreateUnitsAtPoint2(1, "Medic", 0, gv_p01_USER, PointFromId(279));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "Medic", 0, gv_p01_USER, PointFromId(245));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "Raynor", 0, gv_p01_USER, PointFromId(283));
    gv_raynor = UnitLastCreated();
    UnitSetPropertyFixed(gv_raynor, c_unitPropLifeMax, gv_raynorMaximumHP);
    UnitSetPropertyFixed(gv_raynor, c_unitPropLifePercent, 100.0);
    UnitPauseAll(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1279), 0.0, -1, 10, false);
    VisExploreArea(gv_p01_USER, RegionEntireMap(), false, false);
    AICampaignStart(gv_p05_ZERG_LAB_SPECIMENS);
    AICampaignStart(gv_p11_BRUTALISK);
    Wait(0.1, c_timeReal);
    UnitSetState(UnitFromId(2658), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(2658), c_unitStateTargetable, false);
    autoF7D8012E_g = UnitGroup(null, gv_p02_DOMINION, RegionFromId(70), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF7D8012E_u = UnitGroupCount(autoF7D8012E_g, c_unitCountAll);
    for (;; autoF7D8012E_u -= 1) {
        autoF7D8012E_var = UnitGroupUnitFromEnd(autoF7D8012E_g, autoF7D8012E_u);
        if (autoF7D8012E_var == null) { break; }
        UnitIssueOrder(autoF7D8012E_var, OrderTargetingPoint(AbilityCommand("move", 1), PointFromId(206)), c_orderQueueReplace);
    }
    UnitAbilityEnable(gv_raynor, "TheMorosDevice", false);
    UnitAbilityEnable(gv_raynor, "ExperimentalPlasmaGun", false);
    UnitAbilityShow(gv_raynor, "TheMorosDevice", false);
    UnitAbilityShow(gv_raynor, "ExperimentalPlasmaGun", false);
    auto494534DA_g = UnitGroup(null, gv_p01_USER, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto494534DA_u = UnitGroupCount(auto494534DA_g, c_unitCountAll);
    for (;; auto494534DA_u -= 1) {
        auto494534DA_var = UnitGroupUnitFromEnd(auto494534DA_g, auto494534DA_u);
        if (auto494534DA_var == null) { break; }
        UnitGroupAdd(gv_playerUnitGroup, auto494534DA_var);
    }
    if ((gv_introCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    UnitGroupSelect(UnitGroupFilterPlayer(gv_playerUnitGroup, gv_p01_USER, 0), gv_p01_USER, true);
    libNtve_gf_SwooshCamera(gv_p01_USER, (gv_cameraDefault + 8.0), gv_cameraDefault, PlayerStartLocation(gv_p01_USER), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/9C68C38F"), null, PointFromId(3));
    TriggerExecute(gt_StartGame, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dropship Cargo Move
//--------------------------------------------------------------------------------------------------
bool gt_DropshipCargoMove_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoA608E7AA_val;
    int autoB230251B_val;

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitCargo()) == "Raynor") || (UnitGetType(EventUnitCargo()) == "Marine") || (UnitGetType(EventUnitCargo()) == "Medic")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnitCargo()) == "Raynor")) {
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(283)), c_orderQueueReplace);
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1482)), c_orderQueueAddToEnd);
        UnitIssueOrder(EventUnitCargo(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
        return true;
    }

    if ((UnitGetType(EventUnitCargo()) == "Marine")) {
        Wait(0.2, c_timeGame);
        autoA608E7AA_val = gv_marineMove;
        if (autoA608E7AA_val == 1) {
            UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(7)), c_orderQueueReplace);
        }
        else if (autoA608E7AA_val == 2) {
            UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(15)), c_orderQueueReplace);
        }
        else if (autoA608E7AA_val == 3) {
            UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(159)), c_orderQueueReplace);
        }
        else if (autoA608E7AA_val == 4) {
            UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(182)), c_orderQueueReplace);
        }
        else if (autoA608E7AA_val == 5) {
            UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(227)), c_orderQueueReplace);
        }
        else {
        }
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1482)), c_orderQueueAddToEnd);
        UnitIssueOrder(EventUnitCargo(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
        gv_marineMove += 1;
        return true;
    }

    if ((UnitGetType(EventUnitCargo()) == "Medic")) {
        Wait(0.2, c_timeGame);
        autoB230251B_val = gv_medicMove;
        if (autoB230251B_val == 1) {
            UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(279)), c_orderQueueReplace);
        }
        else if (autoB230251B_val == 2) {
            UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(245)), c_orderQueueReplace);
        }
        else {
        }
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1482)), c_orderQueueAddToEnd);
        UnitIssueOrder(EventUnitCargo(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
        gv_medicMove += 1;
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DropshipCargoMove_Init () {
    gt_DropshipCargoMove = TriggerCreate("gt_DropshipCargoMove_Func");
    TriggerAddEventUnitCargo(gt_DropshipCargoMove, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Lab 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_MidLab01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_computerInUse == false) && (TriggerQueueIsEmpty() == true))) {
        Wait(0.1, c_timeGame);
    }
    TriggerQueueEnter();
    TriggerExecute(gt_MidLab01Setup, true, true);
    TriggerExecute(gt_MidLab01Cinematic, true, true);
    TriggerExecute(gt_MidLab01CinematicEnd, true, true);
    TriggerExecute(gt_MidLab01Cleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidLab01Q_Init () {
    gt_MidLab01Q = TriggerCreate("gt_MidLab01Q_Func");
    TriggerAddEventUnitRegion(gt_MidLab01Q, null, RegionFromId(63), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Lab 01 Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidLab01Setup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto031D8962_g;
    int auto031D8962_u;
    unit auto031D8962_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_p01_USER);
    libNtve_gf_StoreUnitSelection(gv_p01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libNtve_gf_ShowHideUnit(gv_grenades01, false);
    UnitPauseAll(true);
    libNtve_gf_PauseUnit(UnitFromId(2658), false);
    libNtve_gf_PauseUnit(UnitFromId(857), false);
    UnitRemove(UnitFromId(1038));
    gv_midHiddenUnitGroupLab01 = UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto031D8962_g = gv_midHiddenUnitGroupLab01;
    auto031D8962_u = UnitGroupCount(auto031D8962_g, c_unitCountAll);
    for (;; auto031D8962_u -= 1) {
        auto031D8962_var = UnitGroupUnitFromEnd(auto031D8962_g, auto031D8962_u);
        if (auto031D8962_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto031D8962_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidLab01Setup_Init () {
    gt_MidLab01Setup = TriggerCreate("gt_MidLab01Setup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Lab 01 Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidLab01Cinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(155), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(867), 10.0, -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_midCinematicCompletedLab01 = false;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner05SMusicEventB", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    // Transmission - SoundLink("THorner05SRaynor00007", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner05SRaynor00007", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("THorner05SHorner00008", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner05SHorner00008", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("THorner05SRaynor00009", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner05SRaynor00009", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
    libNtve_gf_PauseUnit(UnitFromId(756), false);
    libNtve_gf_MakeUnitFacePoint(UnitFromId(756), PointWithOffset(PointFromId(1281), 0.0, 0.0), 0.3);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(999), 0.0, -1, 10, true);
    // Transmission - SoundLink("THorner05SDominionMarine100025", -1)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(756), SoundLink("THorner05SDominionMarine100025", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(871), 0.0, -1, 10, true);
    SoundPlay(SoundLink("TArmoryCraneStand04", 0), PlayerGroupAll(), 100.0, 0.0);
    UnitIssueOrder(UnitFromId(2658), Order(AbilityCommand("DestructibleGateDiagonalBLUR", 0)), c_orderQueueAddToEnd);
    libNtve_gf_PauseUnit(UnitFromId(849), false);
    Wait(0.2, c_timeGame);
    libNtve_gf_MakeUnitFacePoint(UnitFromId(849), PointWithOffset(PointFromId(1281), 0.0, 0.0), 0.3);
    libNtve_gf_PauseUnit(UnitFromId(738), false);
    Wait(0.2, c_timeGame);
    libNtve_gf_MakeUnitFacePoint(UnitFromId(738), PointWithOffset(PointFromId(1281), 0.0, 0.0), 0.3);
    Wait(4.1, c_timeGame);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(872), 0.0, -1, 10, true);
    UnitIssueOrder(UnitFromId(857), Order(AbilityCommand("DestructibleGateDiagonalBLUR", 0)), c_orderQueueAddToEnd);
    // Transmission - SoundLink("THorner05SDominionMarine200032", -1)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(849), SoundLink("THorner05SDominionMarine200032", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
    Wait(1.0, c_timeGame);
    gv_midCinematicCompletedLab01 = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidLab01Cinematic_Init () {
    gt_MidLab01Cinematic = TriggerCreate("gt_MidLab01Cinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Lab 01 Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidLab01CinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_midCinematicCompletedLab03 == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidLab01CinematicEnd_Init () {
    gt_MidLab01CinematicEnd = TriggerCreate("gt_MidLab01CinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Lab 01 Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidLab01Cleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto9D0F427A_g;
    int auto9D0F427A_u;
    unit auto9D0F427A_var;
    unitgroup autoB98EB130_g;
    int autoB98EB130_u;
    unit autoB98EB130_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_Computer01TurretGunsVisibilityEnter, false);
    PlayerSetAlliance(gv_p08_AUTOTURRET_FRIENDLY, c_allianceIdVision, gv_p01_USER, false);
    PlayerSetAlliance(gv_p12_AUTOTURRET_ENEMY, c_allianceIdVision, gv_p01_USER, false);
    gv_midLab01Zerglings = true;
    auto9D0F427A_g = gv_midHiddenUnitGroupLab01;
    auto9D0F427A_u = UnitGroupCount(auto9D0F427A_g, c_unitCountAll);
    for (;; auto9D0F427A_u -= 1) {
        auto9D0F427A_var = UnitGroupUnitFromEnd(auto9D0F427A_g, auto9D0F427A_u);
        if (auto9D0F427A_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto9D0F427A_var, true);
    }
    UnitPauseAll(false);
    libNtve_gf_ShowHideUnit(gv_grenades01, true);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, true);
    libNtve_gf_RestoreUnitSelection(gv_p01_USER);
    CameraRestore(gv_p01_USER, 0.0, -1, 10);
    UnitIssueOrder(UnitFromId(2658), Order(AbilityCommand("DestructibleGateDiagonalBLUR", 0)), c_orderQueueAddToEnd);
    UnitSetState(UnitFromId(2658), c_unitStateSelectable, true);
    UnitSetState(UnitFromId(2658), c_unitStateTargetable, true);
    UnitIssueOrder(UnitFromId(857), Order(AbilityCommand("DestructibleGateDiagonalBLUR", 0)), c_orderQueueAddToEnd);
    UnitSetState(UnitFromId(857), c_unitStateSelectable, true);
    UnitSetState(UnitFromId(857), c_unitStateTargetable, true);
    autoB98EB130_g = UnitGroup(null, gv_p01_USER, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB98EB130_u = UnitGroupCount(autoB98EB130_g, c_unitCountAll);
    for (;; autoB98EB130_u -= 1) {
        autoB98EB130_var = UnitGroupUnitFromEnd(autoB98EB130_g, autoB98EB130_u);
        if (autoB98EB130_var == null) { break; }
        UnitSetPosition(autoB98EB130_var, PointFromId(65), false);
    }
    if ((gv_midCinematicCompletedLab03 == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    SoundPlay(SoundLink("TUIWarningPing", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    SoundPlay(SoundLink("Terran_BuildingLand", 0), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(459)), c_animNameDefault, "Stand Work", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    TriggerExecute(gt_Lab01ZerglingCreate, true, false);
    Wait(2.0, c_timeGame);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(2658), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(857), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidLab01Cleanup_Init () {
    gt_MidLab01Cleanup = TriggerCreate("gt_MidLab01Cleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lab01 Zergling Create
//--------------------------------------------------------------------------------------------------
bool gt_Lab01ZerglingCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_zerglingRespawnRate;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_midLab01Zerglings == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_playerUnitGroup);
    lv_zerglingRespawnRate = libNtve_gf_DifficultyValueFixed(1.5, 1.5, 1.2, 1.1);
    gv_playerUnitGroup = UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    while (true) {
        if ((UnitGroupCount(gv_zerglingUnitGroupPen01, c_unitCountAlive) <= 10)) {
            libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p05_ZERG_LAB_SPECIMENS, PointFromId(877));
            UnitGroupAdd(gv_zerglingUnitGroupPen01, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1004)), c_orderQueueReplace);
            Wait(lv_zerglingRespawnRate, c_timeGame);
            TriggerExecute(gt_DialoguePen, true, false);
        }

        if ((gv_midLab01Zerglings == false)) {
            return true;
        }

        if ((UnitGroupCount(gv_zerglingUnitGroupPen01, c_unitCountAlive) <= 10)) {
            libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p05_ZERG_LAB_SPECIMENS, PointFromId(876));
            UnitGroupAdd(gv_zerglingUnitGroupPen01, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1005)), c_orderQueueReplace);
            Wait(lv_zerglingRespawnRate, c_timeGame);
            TriggerExecute(gt_DialoguePen, true, false);
        }

        if ((gv_midLab01Zerglings == false)) {
            return true;
        }

        if ((UnitGroupCount(gv_zerglingUnitGroupPen01, c_unitCountAlive) <= 10)) {
            libNtve_gf_CreateUnitsAtPoint2(1, "Swarmling", 0, gv_p05_ZERG_LAB_SPECIMENS, PointFromId(876));
            UnitGroupAdd(gv_zerglingUnitGroupPen01, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1004)), c_orderQueueReplace);
            Wait(lv_zerglingRespawnRate, c_timeGame);
            TriggerExecute(gt_DialoguePen, true, false);
        }

        if ((gv_midLab01Zerglings == false)) {
            return true;
        }

        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Lab01ZerglingCreate_Init () {
    gt_Lab01ZerglingCreate = TriggerCreate("gt_Lab01ZerglingCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lab 01 Pen Dies
//--------------------------------------------------------------------------------------------------
bool gt_Lab01PenDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == UnitFromId(459)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_SetAllianceOneWay(gv_p05_ZERG_LAB_SPECIMENS, gv_p02_DOMINION, libNtve_ge_AllianceSetting_Enemy);
    gv_midLab01Zerglings = false;
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 1.0, 100.0, 1.0);
    libNtve_gf_KillModel(gv_actorPenTarget);
    libNtve_gf_KillModel(gv_actorEnergyDoor01);
    libNtve_gf_KillModel(gv_actorEnergyDoor02);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(2923));
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(1750));
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(2924));
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(2928));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Lab01PenDies_Init () {
    gt_Lab01PenDies = TriggerCreate("gt_Lab01PenDies_Func");
    TriggerAddEventUnitDied(gt_Lab01PenDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Pen
//--------------------------------------------------------------------------------------------------
bool gt_DialoguePen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerExecute(gt_DialogueLab01DestroythePenQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialoguePen_Init () {
    gt_DialoguePen = TriggerCreate("gt_DialoguePen_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Lab 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_MidLab02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inSecondHalf == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_computerInUse == false) && (TriggerQueueIsEmpty() == true))) {
        Wait(0.1, c_timeGame);
    }
    TriggerQueueEnter();
    TriggerExecute(gt_MidLab02Setup, true, true);
    TriggerExecute(gt_MidLab02Cinematic, true, true);
    TriggerExecute(gt_MidLab02CinematicEnd, true, true);
    TriggerExecute(gt_MidLab02Cleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidLab02Q_Init () {
    gt_MidLab02Q = TriggerCreate("gt_MidLab02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Lab 02 Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidLab02Setup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8A69FE36_g;
    int auto8A69FE36_u;
    unit auto8A69FE36_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_p01_USER);
    libNtve_gf_StoreUnitSelection(gv_p01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitPauseAll(true);
    gv_midHiddenUnitGroupLab02 = UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto8A69FE36_g = gv_midHiddenUnitGroupLab02;
    auto8A69FE36_u = UnitGroupCount(auto8A69FE36_g, c_unitCountAll);
    for (;; auto8A69FE36_u -= 1) {
        auto8A69FE36_var = UnitGroupUnitFromEnd(auto8A69FE36_g, auto8A69FE36_u);
        if (auto8A69FE36_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto8A69FE36_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidLab02Setup_Init () {
    gt_MidLab02Setup = TriggerCreate("gt_MidLab02Setup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Lab 02 Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidLab02Cinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(829), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(929), 16.0, -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_midCinematicCompletedLab02 = false;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner05SMusicEventC", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    ActorSend(ActorFromDoodad(DoodadFromId(169)), "AnimBracketStart Rise Stand,Work,Start Stand,Work Stand,Work,End");
    Wait(0.125, c_timeGame);
    ActorSend(ActorFromDoodad(DoodadFromId(856)), "AnimBracketStart Rise Stand,Work,Start Stand,Work Stand,Work,End");
    Wait(0.09, c_timeGame);
    ActorSend(ActorFromDoodad(DoodadFromId(172)), "AnimBracketStart Rise Stand,Work,Start Stand,Work Stand,Work,End");
    Wait(1.0, c_timeGame);
    // Transmission - SoundLink("THorner05SRaynor00011", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner05SRaynor00011", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(947), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(948), 10.0, -1, 10, true);
    // Transmission - SoundLink("THorner05SHorner00012", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner05SHorner00012", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
    gv_midCinematicCompletedLab02 = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidLab02Cinematic_Init () {
    gt_MidLab02Cinematic = TriggerCreate("gt_MidLab02Cinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Lab 02 Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidLab02CinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_midCinematicCompletedLab03 == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidLab02CinematicEnd_Init () {
    gt_MidLab02CinematicEnd = TriggerCreate("gt_MidLab02CinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Lab02 Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidLab02Cleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto62A25B1C_g;
    int auto62A25B1C_u;
    unit auto62A25B1C_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto62A25B1C_g = gv_midHiddenUnitGroupLab02;
    auto62A25B1C_u = UnitGroupCount(auto62A25B1C_g, c_unitCountAll);
    for (;; auto62A25B1C_u -= 1) {
        auto62A25B1C_var = UnitGroupUnitFromEnd(auto62A25B1C_g, auto62A25B1C_u);
        if (auto62A25B1C_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto62A25B1C_var, true);
    }
    UnitPauseAll(false);
    VisRevealerDestroy(gv_revealerLab02);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, true);
    libNtve_gf_RestoreUnitSelection(gv_p01_USER);
    CameraRestore(gv_p01_USER, 0.0, -1, 10);
    if ((gv_midCinematicCompletedLab03 == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    TriggerExecute(gt_DialoguePowerCoreObjQ, true, false);
    libNtve_gf_AttachModelToUnit(UnitFromId(2898), "BriefingUnitSelectRed", "Ref_Head");
    gv_actorSelectionFusionCore = libNtve_gf_ActorLastCreated();
    ActorSend(gv_actorSelectionFusionCore, libNtve_gf_SetScale(1.3, 1.3, 1.3, 0.0));
    TriggerEnable(gt_FusionCoreTakesDamage, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidLab02Cleanup_Init () {
    gt_MidLab02Cleanup = TriggerCreate("gt_MidLab02Cleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_computerInUse == false) && (TriggerQueueIsEmpty() == true))) {
        Wait(0.1, c_timeGame);
    }
    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4770FB46_g;
    int auto4770FB46_u;
    unit auto4770FB46_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_p01_USER);
    libNtve_gf_StoreUnitSelection(gv_p01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    TriggerEnable(gt_MidHybridKillsScientistsnearhim, true);
    TriggerEnable(gt_MoveAreaScientsts, true);
    UnitPauseAll(true);
    libNtve_gf_ShowHideUnit(gv_brutalisk, false);
    gv_midHiddenUnitGroupLab03 = UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto4770FB46_g = gv_midHiddenUnitGroupLab03;
    auto4770FB46_u = UnitGroupCount(auto4770FB46_g, c_unitCountAll);
    for (;; auto4770FB46_u -= 1) {
        auto4770FB46_var = UnitGroupUnitFromEnd(auto4770FB46_g, auto4770FB46_u);
        if (auto4770FB46_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto4770FB46_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1C6905DE_g;
    int auto1C6905DE_u;
    unit auto1C6905DE_var;
    unitgroup auto878916A2_g;
    int auto878916A2_u;
    unit auto878916A2_var;
    unitgroup auto6150524C_g;
    int auto6150524C_u;
    unit auto6150524C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(434), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(175), 14.0, -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner05SMusicEventD", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gv_midCinematicCompletedLab03 = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    SoundPlay(SoundLink("TUIWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    // Transmission - SoundLink("THorner05SAdjutant00014", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner05SAdjutant00014", c_soundIndexAny), c_transmissionDurationAdd, 0.0, false);
    Wait(4.0, c_timeGame);
    auto1C6905DE_g = UnitGroup("Scientist", c_playerAny, RegionFromId(25), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1C6905DE_u = UnitGroupCount(auto1C6905DE_g, c_unitCountAll);
    for (;; auto1C6905DE_u -= 1) {
        auto1C6905DE_var = UnitGroupUnitFromEnd(auto1C6905DE_g, auto1C6905DE_u);
        if (auto1C6905DE_var == null) { break; }
        libNtve_gf_PauseUnit(auto1C6905DE_var, false);
    }
    libNtve_gf_MakeUnitFacePoint(UnitFromId(400), PointWithOffset(PointFromId(1073), 0.0, 0.0), 0.3);
    Wait(0.2, c_timeGame);
    auto878916A2_g = UnitGroup("Scientist", c_playerAny, RegionFromId(124), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto878916A2_u = UnitGroupCount(auto878916A2_g, c_unitCountAll);
    for (;; auto878916A2_u -= 1) {
        auto878916A2_var = UnitGroupUnitFromEnd(auto878916A2_g, auto878916A2_u);
        if (auto878916A2_var == null) { break; }
        UnitIssueOrder(auto878916A2_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1015)), c_orderQueueReplace);
    }
    libNtve_gf_MakeUnitFacePoint(UnitFromId(1037), PointWithOffset(PointFromId(1073), 0.0, 0.0), 0.3);
    Wait(0.3, c_timeGame);
    auto6150524C_g = UnitGroup("Scientist", c_playerAny, RegionFromId(125), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6150524C_u = UnitGroupCount(auto6150524C_g, c_unitCountAll);
    for (;; auto6150524C_u -= 1) {
        auto6150524C_var = UnitGroupUnitFromEnd(auto6150524C_g, auto6150524C_u);
        if (auto6150524C_var == null) { break; }
        UnitIssueOrder(auto6150524C_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2389)), c_orderQueueReplace);
    }
    libNtve_gf_MakeUnitFacePoint(UnitFromId(1031), PointWithOffset(PointFromId(1073), 0.0, 0.0), 0.3);
    Wait(0.2, c_timeGame);
    libNtve_gf_MakeUnitFacePoint(UnitFromId(1021), PointWithOffset(PointFromId(1073), 0.0, 0.0), 0.3);
    Wait(2.0, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(1067));
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(1067));
    // Transmission - SoundLink("THorner05SScientist00060", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, SoundLink("THorner05SScientist00060", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(1.2, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(1068));
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(1068));
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(1069));
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(1069));
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(1067));
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(1072));
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(1072));
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(1071));
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(1071));
    ActorSend(ActorFromDoodad(DoodadFromId(20)), "ModelSwap HybridHoldingCellDeath");
    ActorSend(ActorFromDoodad(DoodadFromId(20)), "AnimPlay '' Death PlayForever");
    libNtve_gf_CreateUnitsAtPoint2(1, "Hybrid", c_unitCreateIgnorePlacement, gv_p07_NEUTRAL, PointFromId(473));
    gv_hybrid = UnitLastCreated();
    UnitGroupAdd(gv_hybridGroup, gv_hybrid);
    TriggerEnable(gt_MidHybridAttacks, true);
    Wait(1.2, c_timeGame);
    // Transmission - SoundLink("THorner05SScientist00059", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, SoundLink("THorner05SScientist00059", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(1.0, c_timeGame);
    // Transmission - SoundLink("THorner05SScientist00062", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, SoundLink("THorner05SScientist00062", 0), 0.0, c_transmissionDurationAdd, false);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_hybrid), c_animNameDefault, "Stand Angry", 0, c_animTimeDefault);
    Wait(0.1, c_timeGame);
    UnitKill(UnitFromId(1021));
    UnitKill(UnitFromId(1031));
    UnitKill(UnitFromId(1030));
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(731), 10.0, -1, 10, true);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(gv_hybrid, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(277)), c_orderQueueAddToEnd);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(1070));
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(1070));
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 1.0, 100.0, 1.0);
    Wait(2.0, c_timeGame);
    UnitKill(UnitFromId(1033));
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 1.0, 100.0, 1.0);
    SoundPlay(SoundLink("Thor_Explode", 2), PlayerGroupAll(), 100.0, 0.0);
    Wait(4.0, c_timeGame);
    UnitIssueOrder(gv_hybrid, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(992)), c_orderQueueAddToEnd);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(537));
    UnitKill(UnitFromId(2393));
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(733));
    SoundPlayAtPoint(SoundLink("UI_TerranKlaxonAlert", 0), PlayerGroupAll(), PointFromId(473), 0.0, 100.0, 0.0);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(300));
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 1.0, 100.0, 1.0);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(546));
    // Transmission - SoundLink("THorner05SRaynor00013", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner05SRaynor00013", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 1.0, 100.0, 1.0);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(573));
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(732));
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(732));
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(732));
    UnitIssueOrder(gv_hybrid, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(557)), c_orderQueueAddToEnd);
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(727));
    Wait(1.5, c_timeGame);
    // Transmission - SoundLink("THorner05SScientist00056", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, SoundLink("THorner05SScientist00056", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(729));
    libNtve_gf_CreateActorAtPoint("FireMedium", PointFromId(729));
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(730));
    UnitKill(UnitFromId(1034));
    Wait(1.0, c_timeGame);
    UnitIssueOrder(gv_hybrid, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(728)), c_orderQueueAddToEnd);
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 1.0, 100.0, 1.0);
    // Transmission - SoundLink("THorner05SRaynor00015", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner05SRaynor00015", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
    gv_midCinematicCompletedLab03 = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_midCinematicCompletedLab03 == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto102181C2_g;
    int auto102181C2_u;
    unit auto102181C2_var;
    unitgroup autoF3E38675_g;
    int autoF3E38675_u;
    unit autoF3E38675_var;
    unitgroup auto58DFE7D0_g;
    int auto58DFE7D0_u;
    unit auto58DFE7D0_var;
    unitgroup autoC881B46F_g;
    int autoC881B46F_u;
    unit autoC881B46F_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inSecondHalf = true;
    gv_protossRelicsSecondHalf = true;
    ObjectiveSetName(gv_objectiveProtossRelics, (StringExternal("Param/Value/8E6D4431") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectFindProtossRelics, libCamp_ge_StoryResearchObjectiveTextStyle_Multipart, gv_obejctiveProtossRelicsTotalSecondHalf, gv_obejctiveProtossRelics) + StringExternal("Param/Value/3BF968F3")));
    ObjectiveSetState(gv_objectiveProtossRelics, c_objectiveStateActive);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), gv_playerUnitGroup);
    Wait(0.2, c_timeGame);
    auto102181C2_g = gv_playerUnitGroup;
    auto102181C2_u = UnitGroupCount(auto102181C2_g, c_unitCountAll);
    for (;; auto102181C2_u -= 1) {
        auto102181C2_var = UnitGroupUnitFromEnd(auto102181C2_g, auto102181C2_u);
        if (auto102181C2_var == null) { break; }
        UnitSetPosition(auto102181C2_var, PointWithOffset(PointFromId(634), 0.0, 0.0), false);
    }
    UnitPauseAll(false);
    autoF3E38675_g = gv_midHiddenUnitGroupLab03;
    autoF3E38675_u = UnitGroupCount(autoF3E38675_g, c_unitCountAll);
    for (;; autoF3E38675_u -= 1) {
        autoF3E38675_var = UnitGroupUnitFromEnd(autoF3E38675_g, autoF3E38675_u);
        if (autoF3E38675_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoF3E38675_var, true);
    }
    auto58DFE7D0_g = gv_playerUnitGroup;
    auto58DFE7D0_u = UnitGroupCount(auto58DFE7D0_g, c_unitCountAll);
    for (;; auto58DFE7D0_u -= 1) {
        auto58DFE7D0_var = UnitGroupUnitFromEnd(auto58DFE7D0_g, auto58DFE7D0_u);
        if (auto58DFE7D0_var == null) { break; }
        UnitIssueOrder(auto58DFE7D0_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        UnitSetPropertyFixed(auto58DFE7D0_var, c_unitPropEnergyPercent, 100.0);
        UnitSetPropertyFixed(auto58DFE7D0_var, c_unitPropLifePercent, 100.0);
        UnitGroupAdd(gv_playerGroupforAI, auto58DFE7D0_var);
    }
    GameTimeOfDayPause(false);
    VisRevealerDestroy(gv_revealerHybridArea);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, true);
    autoC881B46F_g = UnitGroup(null, c_playerAny, RegionFromId(102), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC881B46F_u = UnitGroupCount(autoC881B46F_g, c_unitCountAll);
    for (;; autoC881B46F_u -= 1) {
        autoC881B46F_var = UnitGroupUnitFromEnd(autoC881B46F_g, autoC881B46F_u);
        if (autoC881B46F_var == null) { break; }
        UnitRemove(autoC881B46F_var);
    }
    TriggerEnable(gt_MidHybridKillsScientistsnearhim, false);
    TriggerEnable(gt_MoveAreaScientsts, false);
    UnitRemove(gv_hybrid);
    Wait(0.2, c_timeGame);
    libNtve_gf_RestoreUnitSelection(gv_p01_USER);
    CameraSetBounds(PlayerGroupAll(), RegionRect(17.0, 12.0, 128.0, 203.0), true);
    CameraRestore(gv_p01_USER, 0.0, -1, 10);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1279), 0.0, -1, 10, false);
    libNtve_gf_SwooshCamera(gv_p01_USER, (gv_cameraDefault + 8.0), gv_cameraDefault, PointWithOffset(PointFromId(634), 0.0, 0.0), lv_fadeDuration);
    if ((gv_midCinematicCompletedLab03 == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    TriggerExecute(gt_StartGameEscape, true, false);
    TriggerExecute(gt_AutoSaveMidMission, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Hybrid Remove
//--------------------------------------------------------------------------------------------------
bool gt_MidHybridRemove_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_hybrid))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(281));
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(290));
    UnitRemove(gv_hybrid);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidHybridRemove_Init () {
    gt_MidHybridRemove = TriggerCreate("gt_MidHybridRemove_Func");
    TriggerAddEventUnitRegion(gt_MidHybridRemove, null, RegionFromId(23), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Hybrid Kills Scientists near him
//--------------------------------------------------------------------------------------------------
bool gt_MidHybridKillsScientistsnearhim_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_scientist;
    unitgroup lv_hybridLocalFirst;

    // Automatic Variable Declarations
    unitgroup auto593D9A39_g;
    int auto593D9A39_u;

    // Variable Initialization
    lv_hybridLocalFirst = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto593D9A39_g = gv_scientistsGroup;
    auto593D9A39_u = UnitGroupCount(auto593D9A39_g, c_unitCountAll);
    for (;; auto593D9A39_u -= 1) {
        lv_scientist = UnitGroupUnitFromEnd(auto593D9A39_g, auto593D9A39_u);
        if (lv_scientist == null) { break; }
        if ((UnitGetCustomValue(lv_scientist, 0) == 0.0)) {
            lv_hybridLocalFirst = UnitGroup(null, gv_p07_NEUTRAL, RegionCircle(UnitGetPosition(lv_scientist), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
            if ((UnitGroupCount(lv_hybridLocalFirst, c_unitCountAlive) > 0)) {
                UnitKill(lv_scientist);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidHybridKillsScientistsnearhim_Init () {
    gt_MidHybridKillsScientistsnearhim = TriggerCreate("gt_MidHybridKillsScientistsnearhim_Func");
    TriggerEnable(gt_MidHybridKillsScientistsnearhim, false);
    TriggerAddEventTimePeriodic(gt_MidHybridKillsScientistsnearhim, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Move Area Scientsts
//--------------------------------------------------------------------------------------------------
bool gt_MoveAreaScientsts_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoBA7A257D_g;
    int autoBA7A257D_u;
    unit autoBA7A257D_var;
    unitgroup auto7114991B_g;
    int auto7114991B_u;
    unit auto7114991B_var;

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoBA7A257D_g = UnitGroup(null, gv_p10_SCIENTISTS, RegionFromId(154), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBA7A257D_u = UnitGroupCount(autoBA7A257D_g, c_unitCountAll);
    for (;; autoBA7A257D_u -= 1) {
        autoBA7A257D_var = UnitGroupUnitFromEnd(autoBA7A257D_g, autoBA7A257D_u);
        if (autoBA7A257D_var == null) { break; }
        libNtve_gf_PauseUnit(autoBA7A257D_var, false);
        Wait(2.0, c_timeGame);
        UnitIssueOrder(autoBA7A257D_var, OrderTargetingRelativePoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(154))), c_orderQueueReplace);
    }
    auto7114991B_g = UnitGroup(null, gv_p10_SCIENTISTS, RegionFromId(154), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7114991B_u = UnitGroupCount(auto7114991B_g, c_unitCountAll);
    for (;; auto7114991B_u -= 1) {
        auto7114991B_var = UnitGroupUnitFromEnd(auto7114991B_g, auto7114991B_u);
        if (auto7114991B_var == null) { break; }
        libNtve_gf_PauseUnit(auto7114991B_var, false);
        Wait(1.0, c_timeGame);
        UnitIssueOrder(auto7114991B_var, OrderTargetingRelativePoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(155))), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoveAreaScientsts_Init () {
    gt_MoveAreaScientsts = TriggerCreate("gt_MoveAreaScientsts_Func");
    TriggerEnable(gt_MoveAreaScientsts, false);
    TriggerAddEventTimePeriodic(gt_MoveAreaScientsts, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Hybrid Attacks
//--------------------------------------------------------------------------------------------------
bool gt_MidHybridAttacks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Hybrid"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_hybrid), c_animNameDefault, "Attack", c_animFlagNonLooping, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidHybridAttacks_Init () {
    gt_MidHybridAttacks = TriggerCreate("gt_MidHybridAttacks_Func");
    TriggerEnable(gt_MidHybridAttacks, false);
    TriggerAddEventUnitRegion(gt_MidHybridAttacks, null, RegionFromId(158), true);
    TriggerAddEventUnitRegion(gt_MidHybridAttacks, null, RegionFromId(159), true);
    TriggerAddEventUnitRegion(gt_MidHybridAttacks, null, RegionFromId(160), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto815F8DB4_g;
    int auto815F8DB4_u;
    unit auto815F8DB4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_p01_USER);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitRemove(UnitFromId(1028));
    UnitPauseAll(true);
    gv_victoryHiddenUnitGroup = UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto815F8DB4_g = gv_victoryHiddenUnitGroup;
    auto815F8DB4_u = UnitGroupCount(auto815F8DB4_g, c_unitCountAll);
    for (;; auto815F8DB4_u -= 1) {
        auto815F8DB4_var = UnitGroupUnitFromEnd(auto815F8DB4_g, auto815F8DB4_u);
        if (auto815F8DB4_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto815F8DB4_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    sound lv_soundStatic;

    // Automatic Variable Declarations
    const int auto64AEDF89_n = 26;
    int auto64AEDF89_i;
    unitgroup auto80222410_g;
    int auto80222410_u;
    unit auto80222410_var;
    unitgroup auto41E84B64_g;
    int auto41E84B64_u;
    unit auto41E84B64_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(628), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(629), 12.0, -1, 10, true);
    libNtve_gf_PauseUnit(gv_hercules, false);
    libNtve_gf_PauseUnit(gv_hybrid, false);
    UnitIssueOrder(gv_hybrid, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(758)), c_orderQueueReplace);
    libNtve_gf_MakeUnitFacePoint(gv_hybrid, UnitGetPosition(UnitFromId(492)), 0.0);
    UnitIssueOrder(gv_hybrid, OrderTargetingUnit(AbilityCommand("attack", 0), gv_hercules), c_orderQueueAddToEnd);
    for (auto64AEDF89_i = 1; auto64AEDF89_i <= auto64AEDF89_n; auto64AEDF89_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p05_ZERG_LAB_SPECIMENS, RegionRandomPoint(RegionFromId(104)));
    }
    Wait(0.2, c_timeGame);
    auto80222410_g = UnitGroupFilterPlayer(gv_playerUnitGroup, gv_p01_USER, 0);
    auto80222410_u = UnitGroupCount(auto80222410_g, c_unitCountAll);
    for (;; auto80222410_u -= 1) {
        auto80222410_var = UnitGroupUnitFromEnd(auto80222410_g, auto80222410_u);
        if (auto80222410_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto80222410_var, true);
        libNtve_gf_MakeUnitInvulnerable(auto80222410_var, true);
        libNtve_gf_PauseUnit(auto80222410_var, false);
    }
    PlayerSetAlliance(gv_p07_NEUTRAL, c_allianceIdVision, gv_p01_USER, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner05SMusicOutro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_victoryCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(gv_hercules, OrderTargetingUnitGroup(AbilityCommand("HerculesTransport", 0), gv_playerUnitGroup), c_orderQueueReplace);
    Wait(0.2, c_timeGame);
    SoundPlay(SoundLink("Medivac_Load", 0), PlayerGroupAll(), 100.0, 0.0);
    auto41E84B64_g = UnitGroupFilterPlayer(gv_playerUnitGroup, gv_p01_USER, 0);
    auto41E84B64_u = UnitGroupCount(auto41E84B64_g, c_unitCountAll);
    for (;; auto41E84B64_u -= 1) {
        auto41E84B64_var = UnitGroupUnitFromEnd(auto41E84B64_g, auto41E84B64_u);
        if (auto41E84B64_var == null) { break; }
        UnitRemove(auto41E84B64_var);
    }
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_VictorySceneTiming, true, false);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    // Transmission - SoundLink("THorner05SRaynor00063", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner05SRaynor00063", c_soundIndexAny), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("THorner05SRaynor00019", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner05SRaynor00019", c_soundIndexAny), c_transmissionDurationAdd, 1.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    gv_victoryCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuratioin;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victoryCinematicCompleted == true)) {
        lv_fadeDuratioin = 2.0;
    }
    else {
        lv_fadeDuratioin = 0.5;
    }
    CinematicFade(false, lv_fadeDuratioin, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UnitPauseAll(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Victory, true, false);
    UnitPauseAll(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Scene Timing
//--------------------------------------------------------------------------------------------------
bool gt_VictorySceneTiming_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_hybrid, OrderTargetingUnit(AbilityCommand("attack", 0), gv_hercules), c_orderQueueAddToEnd);
    Wait(3.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_hybrid), c_animNameDefault, "Stand Angry", 0, c_animTimeDefault);
    UnitIssueOrder(gv_hercules, Order(AbilityCommand("HerculesLiftOff", 0)), c_orderQueueReplace);
    Wait(1.5, c_timeGame);
    UnitSetPropertyFixed(gv_hercules, c_unitPropMovementSpeed, 2.0);
    UnitIssueOrder(gv_hercules, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1544)), c_orderQueueReplace);
    Wait(3.0, c_timeGame);
    UnitIssueOrder(gv_hybrid, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(318)), c_orderQueueReplace);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_hercules), c_animNameDefault, "Land Forward", c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.5, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_hybrid), c_animNameDefault, "Stand Angry", 0, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySceneTiming_Init () {
    gt_VictorySceneTiming = TriggerCreate("gt_VictorySceneTiming_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04Music_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_StartGame_Init();
    gt_TerminalUseSafety_Init();
    gt_CreateGrenades_Init();
    gt_CreatePlasmaGuns_Init();
    gt_CreateMedicCharges_Init();
    gt_CreateChronoCharges_Init();
    gt_Grenades01_Init();
    gt_PlasmaGun01_Init();
    gt_ChronoChargePickup01_Init();
    gt_HealthandEnergyPickup_Init();
    gt_ButtonFlashGrenadesOn_Init();
    gt_ButtonFlashGrenadesOff_Init();
    gt_ButtonFlashPlasmaGunOn_Init();
    gt_ButtonFlashPlasmaGunOff_Init();
    gt_ButtonFlashChronosOn_Init();
    gt_ButtonFlashChronosOff_Init();
    gt_ButtonFlashBreachingChargeOn_Init();
    gt_ButtonFlashBreachingChargeOff_Init();
    gt_DoorOutsideBlownwithBreachingCharge_Init();
    gt_DoorMaintenanceBlownwithBreachingCharge_Init();
    gt_Pen01BlownwithBreachingCharge_Init();
    gt_DoorLab1BlownwithBreachingCharge_Init();
    gt_DoorLab11BlownwithBreachingCharge_Init();
    gt_DoorLab2SupplyRoomBlownwithBreachingCharge_Init();
    gt_DoorLab2EntranceBlownwithBreachingCharge_Init();
    gt_DoorHybridRoom1BlownwithBreachingCharge_Init();
    gt_DoorHybridRoom2BlownwithBreachingCharge_Init();
    gt_AlertTeamResponseAttack_Init();
    gt_HybridAreaLastRoom_Init();
    gt_ShutDoor01_Init();
    gt_ShutDoor02_Init();
    gt_Stasis01_Init();
    gt_Stasis02_Init();
    gt_Stasis03_Init();
    gt_Stasis04_Init();
    gt_Stasis05_Init();
    gt_ScientistsRunFromFire_Init();
    gt_ScientistsRunFromPlayer_Init();
    gt_ScientistsRunFromBrutalisk_Init();
    gt_ScientistsRunFromHybrid_Init();
    gt_ScientistsRunning_Init();
    gt_RestoreNormalGameplayUI_Init();
    gt_Computer01TurretGunsEnter_Init();
    gt_Computer01TurretGunsLeave_Init();
    gt_Computer01CameraButtonDisplay_Init();
    gt_Computer01CameraActivated_Init();
    gt_Computer01ButtonsHacked_Init();
    gt_Computer01CameraGunsLeftDisabled_Init();
    gt_Computer01CameraGunsRightDisabled_Init();
    gt_Computer01Back_Init();
    gt_Computer01DefendersMove_Init();
    gt_Computer01DoorDiesDefendersMove_Init();
    gt_Computer01ButtonHackingLoop_Init();
    gt_Computer01TurretDiesLeft_Init();
    gt_Computer01TurretDiesRight_Init();
    gt_Computer01TurretGunsVisibilityEnter_Init();
    gt_Computer01TurretGunsVisibilityLeave_Init();
    gt_MakeAutoTurretsUnselectable_Init();
    gt_EnemyGroupDies_Init();
    gt_AllTurretsDead_Init();
    gt_LeftTurretsDead_Init();
    gt_RightTurretsDead_Init();
    gt_Computer02Enter_Init();
    gt_Computer02Leave_Init();
    gt_Computer02CameraButtonDisplay_Init();
    gt_Computer02CameraActivated_Init();
    gt_Computer02ReleaseZealots_Init();
    gt_Computer02ReleaseZerg_Init();
    gt_Computer02ReleaseUltralisk_Init();
    gt_Computer02ReleasePrisonersCombined_Init();
    gt_Lab02alldead_Init();
    gt_Lab02alldeadCintriggerwithoutcamerasafety_Init();
    gt_Lab02DominionDead_Init();
    gt_Computer02Back_Init();
    gt_MoveAreaLab02DominionAllDead_Init();
    gt_Lab01PenDies2_Init();
    gt_Computer02DefendersMove_Init();
    gt_Computer02DoorDiesDefendersMove_Init();
    gt_Computer04Enter_Init();
    gt_Computer04Leave_Init();
    gt_Computer04CameraButtondisplay_Init();
    gt_Computer04CameraActivated_Init();
    gt_Computer04AddMissile_Init();
    gt_Computer04AddNapalm_Init();
    gt_Computer04AddCannons_Init();
    gt_Computer04WarbotWeaponActivated_Init();
    gt_Computer04PanonWarbot_Init();
    gt_Computer04Back_Init();
    gt_Computer04WarbotHelpPanel_Init();
    gt_Computer05Enter_Init();
    gt_Computer05Leave_Init();
    gt_Computer05CameraButtonDisplay_Init();
    gt_Computer05CameraActivated_Init();
    gt_Computer05Marines_Init();
    gt_Computer05Marauder_Init();
    gt_Computer05Firebat_Init();
    gt_Computer05Medic_Init();
    gt_Computer05ReinforcementChosen_Init();
    gt_Computer05PanonDropship_Init();
    gt_Computer05DropshipPurge_Init();
    gt_Computer05Back_Init();
    gt_Computer05BrutaliskHelpPanel_Init();
    gt_Computer06Enter_Init();
    gt_Computer06Leave_Init();
    gt_Computer06ButtonDisplay_Init();
    gt_Computer06CameraActivated_Init();
    gt_Computer06BrutaliskReleased_Init();
    gt_Computer06Back_Init();
    gt_AIReleaseBrutalisk_Init();
    gt_FusionReactorDestroyed_Init();
    gt_AttackTheWarbot_Init();
    gt_MarinesAttackLab04_Init();
    gt_FirebatAttackLab03_Init();
    gt_BarrelCamShake01_Init();
    gt_BarrelCamShake02_Init();
    gt_GhostsMove01_Init();
    gt_GhostsMove02_Init();
    gt_UltraliskChainedDies_Init();
    gt_FusionCoreTakesDamage_Init();
    gt_Rockstakedamage_Init();
    gt_Vikingattackback_Init();
    gt_Thorattackback_Init();
    gt_AutoSaveBeforeComputer02_Init();
    gt_AutoSaveBeforeLab03Brutalisk_Init();
    gt_AutoSaveMidMission_Init();
    gt_AutoSaveHalfOut_Init();
    gt_TipGrenadeQ_Init();
    gt_TipPlasmaGunQ_Init();
    gt_TipChronoRiftQ_Init();
    gt_TipComputerQ_Init();
    gt_TipStorymodeQ_Init();
    gt_DialogueOutsideDoorSealedQ_Init();
    gt_DialogueYoureUnderArrestQ_Init();
    gt_DialogueFryanyRebelandAdjutantQ1_Init();
    gt_DialogueFryanyRebelandAdjutantQ2_Init();
    gt_DialogueFryanyRebelandAdjutantQ3_Init();
    gt_DialogueFryanyRebelandAdjutantQ4_Init();
    gt_DialogueFryanyRebelandAdjutantQ5_Init();
    gt_DialogueFirebatResponseQ_Init();
    gt_DialogueLab01DestroythePenQ_Init();
    gt_DialogueLab01ExperimentalWeapon_Init();
    gt_DialogueLab01ScientistQ_Init();
    gt_DialogueHall01MarineQ_Init();
    gt_DialogueLab01ExperimentalWeapon2_Init();
    gt_DialogueLab02RaynorLotoffirepowerLabQ1_Init();
    gt_DialogueLab02RaynorLotoffirepowerLabQ2_Init();
    gt_DialogueGetChronoDeviceQ_Init();
    gt_DialoguePowerCoreObjQ_Init();
    gt_DialogueRaynorComputer4OhyeahQ1_Init();
    gt_DialogueRaynorComputer4OhyeahQ2_Init();
    gt_DialogueRaynorTankBayQ_Init();
    gt_DialogueWarbotLimitedLifeQ_Init();
    gt_DialogueRaynorWarbotdownQ_Init();
    gt_DialogueRaynorComlinkQ1_Init();
    gt_DialogueRaynorComlinkQ2_Init();
    gt_DialogueRaynorComlinkQ3_Init();
    gt_DialogueHornerReplyQ_Init();
    gt_DialogueRaynorReleaseBrutaliskQ1_Init();
    gt_DialogueRaynorReleaseBrutaliskQ2_Init();
    gt_DialogueRaynorReleaseBrutaliskQ3_Init();
    gt_DialogueRaynorLab03Q_Init();
    gt_AchievementBrutaliskKillsPlayerUnit_Init();
    gt_AchievmentWeaponpickups_Init();
    gt_GrenadeKillsforStats_Init();
    gt_RaynorKillsforStats_Init();
    gt_RaynorPlasmaKillsforStats_Init();
    gt_AchievementRaynorWeaponKills_Init();
    gt_StartGameEscape_Init();
    gt_InitEscape_Init();
    gt_TipRubbleEscapeQ_Init();
    gt_EscapeDialogueHornerBeCarefulQ_Init();
    gt_EscapeDialogueBlastthroughthatrubbleQ_Init();
    gt_EscapeDialogueTheHybridQ_Init();
    gt_EscapeDialogueRaynorItsontheMoveQ_Init();
    gt_EscapeDialogueRaynorWarbotonAutoAttackQ_Init();
    gt_EscapeDialogueAutoBotAttackingLetsMoveQ_Init();
    gt_EscapeDialogueAutoBotDiesQ_Init();
    gt_EscapeDialogueFallingApartQ_Init();
    gt_EscapeDialogueRaynorWheredidtheHybridGoQ_Init();
    gt_EscapeDialogueHolyCrapQ_Init();
    gt_EscapeDialogueGettotheTransportQ_Init();
    gt_Explosion01_Init();
    gt_Explosion02_Init();
    gt_Explosion03_Init();
    gt_Explosion04_Init();
    gt_Explosion05_Init();
    gt_Explosion06_Init();
    gt_Explosion07_Init();
    gt_Explosion08_Init();
    gt_EscapeZergAttack01_Init();
    gt_EscapeProtossAttack01_Init();
    gt_EscapeUltraliskAttack_Init();
    gt_EscapeProtossStayInArea_Init();
    gt_EscapeHybridTunnelInitiate_Init();
    gt_EscapeHybridSurprise_Init();
    gt_EscapeProtossZergFight_Init();
    gt_EscapeZergMarineFight_Init();
    gt_EscapeHerculesRescue_Init();
    gt_RandomMoveAreas_Init();
    gt_EscapeComputerEnterWarbot_Init();
    gt_EscapeComputerXbotActivate_Init();
    gt_StartAIEscape_Init();
    gt_StartAIWavesEscape_Init();
    gt_EggsBreakwhenclose_Init();
    gt_HybridCreate_Init();
    gt_HybridPingSound_Init();
    gt_HybridAttackRocks_Init();
    gt_HybridForceDestroyRocks_Init();
    gt_HybridRegeneration_Init();
    gt_HybridRocksDestroyed_Init();
    gt_HybridCastStunifplayerisclose_Init();
    gt_HybridCastConsumeDNAonZerg_Init();
    gt_HybridCastConsumeDNAonProtoss_Init();
    gt_VictoryEscapeFlyOutUnits_Init();
    gt_VictoryEscapeFlyOutRaynor_Init();
    gt_VictoryEscape_Init();
    gt_Victory_Init();
    gt_DefeatRaynorDiesObjectiveFailed_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_ObjectiveInvestigateCreate_Init();
    gt_ObjectiveInvestigateComplete_Init();
    gt_ObjectiveInvestigateFailed_Init();
    gt_ObjectiveFusionReactorCreateQ_Init();
    gt_ObjectiveFusionReactorComplete_Init();
    gt_ObjectiveFusionReactorFailed_Init();
    gt_ObjectiveFusionReactorPing_Init();
    gt_ObjectiveRaynorCreateQ_Init();
    gt_ObjectiveRaynorComplete_Init();
    gt_ObjectiveEscapeCreateQ_Init();
    gt_ObjectiveEscapeComplete_Init();
    gt_ObjectiveEscapeFailed_Init();
    gt_ResearchObjectiveBrutaliskCreateQ_Init();
    gt_ResearchObjectiveBrutaliskUpdateQ_Init();
    gt_ObjectiveProtossRelicsCreateQ_Init();
    gt_ObjectiveProtossRelicsUpdate_Init();
    gt_ObjectiveProtossRelicsComplete_Init();
    gt_ObjectiveProtossRelicsFailed_Init();
    gt_CreateProtossRelicsObjects_Init();
    gt_ObjectiveProtossRelicsUpdateSecondHalf_Init();
    gt_ObjectiveProtossRelicsCompleteSecondHalf_Init();
    gt_BriefingQ_Init();
    gt_BriefingScene00_Init();
    gt_BriefingScene01_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_DropshipCargoMove_Init();
    gt_MidLab01Q_Init();
    gt_MidLab01Setup_Init();
    gt_MidLab01Cinematic_Init();
    gt_MidLab01CinematicEnd_Init();
    gt_MidLab01Cleanup_Init();
    gt_Lab01ZerglingCreate_Init();
    gt_Lab01PenDies_Init();
    gt_DialoguePen_Init();
    gt_MidLab02Q_Init();
    gt_MidLab02Setup_Init();
    gt_MidLab02Cinematic_Init();
    gt_MidLab02CinematicEnd_Init();
    gt_MidLab02Cleanup_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_MidHybridRemove_Init();
    gt_MidHybridKillsScientistsnearhim_Init();
    gt_MoveAreaScientsts_Init();
    gt_MidHybridAttacks_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictorySceneTiming_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
