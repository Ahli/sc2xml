//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Outbreak
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/CampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libCamp_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_REFUGEES = 2;
const int gv_pLAYER_03_INFESTED_REFUGEES = 3;
const int gv_pLAYER_04_INFESTEDREFUGEES = 4;
const int gv_pLAYER_05_REFUGEES = 5;
const int gv_pLAYER_06_INFESTORS = 6;
const int gv_pLAYER_08_SWANN = 8;

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_PRESET_TimeOfDay_Day = 0;
const int ge_PRESET_TimeOfDay_Night = 1;
const int ge_AttackDirection_Left = 0;
const int ge_AttackDirection_Right = 1;
const int ge_AttackDirection_South = 2;
const int ge_AttackDirection_SouthLeftfallback = 3;
const int ge_AttackDirection_SouthRightfallback = 4;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_inCinematic;
int[16] gv_infestableStructuresPings;
unitgroup gv_infestedStructureGroup;
unit[201] gv_infestableStructure;
fixed[201] gv_infestableStructureHealth;
int gv_infestableStructureSize;
unit gv_mainInfestor;
unit gv_infestor1;
unit gv_infestor2;
unitgroup gv_infestorGroup;
playergroup gv_zergPlayerGroup;
int gv_night;
int gv_day;
int gv_timeOfDay;
fixed gv_dAY_DURATION;
fixed gv_nIGHT_DURATION;
timer gv_mainTimer;
int gv_mainTimerWindow;
timer gv_transitionToDay;
timer gv_transitionToNight;
unitgroup gv_infestorAggressionInhibitor;
int gv_infestorPing01;
int gv_infestorPing02;
int gv_infestedMarineQty;
int gv_infestedTerranQty;
int gv_spawnCooldown;
actor gv_structureSelectionActor;
bool gv_nightReactionThrottle;
int gv_reactionCounter;
fixed gv_nightDefenderCooldown;
unit gv_nightDefenderPingUnit;
bool gv_area01Cleared;
bool gv_area02Cleared;
bool gv_area03Cleared;
bool gv_area04Cleared;
bool gv_area05Cleared;
bool gv_area06Cleared;
bool gv_area07Cleared;
bool gv_area08Cleared;
bool gv_area09Cleared;
bool gv_area10Cleared;
bool gv_area11Cleared;
bool gv_area01Revealed;
bool gv_area02Revealed;
bool gv_area03Revealed;
bool gv_area04Revealed;
bool gv_area05Revealed;
bool gv_area06Revealed;
bool gv_area07Revealed;
bool gv_area08Revealed;
bool gv_area09Revealed;
bool gv_area10Revealed;
bool gv_area11Revealed;
int gv_areasCleared;
int gv_infestedBuildingsKilled;
unitgroup gv_rockDestroyers;
actor gv_aberrationSelectionActor;
unit gv_pickedInfestedUnit;
unit gv_firstSightInfestedStructure;
unitgroup gv_firstSightInfestedGroup;
bool gv_finalFive;
int gv_statStructuresRazedAtNight;
int gv_objectiveCleanseInfestation;
int gv_researchObjectiveKilltheInfestors;
int gv_infestorsKilled;
unitgroup gv_briefingCinematicUnits;
bool gv_victoryCinematicCompleted;
unitgroup gv_victoryHiddenUnitGroup;

void InitGlobals () {
    int init_i;

    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_infestableStructuresPings[init_i] = c_invalidPingId;
    }
    gv_infestedStructureGroup = UnitGroupEmpty();
    gv_mainInfestor = UnitFromId(186);
    gv_infestor1 = UnitFromId(1110);
    gv_infestor2 = UnitFromId(927);
    gv_infestorGroup = UnitGroupEmpty();
    gv_zergPlayerGroup = PlayerGroupEmpty();
    gv_timeOfDay = ge_PRESET_TimeOfDay_Day;
    gv_mainTimer = TimerCreate();
    gv_transitionToDay = TimerCreate();
    gv_transitionToNight = TimerCreate();
    gv_infestorAggressionInhibitor = UnitGroupEmpty();
    gv_infestorPing01 = c_invalidPingId;
    gv_infestorPing02 = c_invalidPingId;
    gv_rockDestroyers = UnitGroupEmpty();
    gv_firstSightInfestedGroup = UnitGroupEmpty();
    gv_objectiveCleanseInfestation = c_invalidObjectiveId;
    gv_researchObjectiveKilltheInfestors = c_invalidObjectiveId;
    gv_briefingCinematicUnits = UnitGroupEmpty();
    gv_victoryHiddenUnitGroup = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
text gf_DebugUnitInfo (unit lp_u);
void gf_NightDefenderSpawn (unit lp_attackedStructure);
void gf_ResearchZergUpgrades (int lp_qty, string lp_upgrade);
void gf_PrepareAttackDirection (int lp_direction);
void gf_AttackWaveFromDirection (int lp_direction, int lp_delay, bool lp_waitOption, int lp_qty1, int lp_qty2, int lp_qty3);
void gf_AddWaypointToExpansion ();
void gf_BriefingSpawnInfestedColonists (int lp_number, string lp_unitType, region lp_spawnRegion);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04Music;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_IntroSequence;
trigger gt_StartGame;
trigger gt_FirstNight;
trigger gt_InitialAttack;
trigger gt_MapInitialInfestation;
trigger gt_TimerCycling;
trigger gt_InfestorCycling;
trigger gt_InfestorNorthFoundEarly;
trigger gt_InfestorSouthFoundEarly;
trigger gt_InfestorsBurrowUnburrow;
trigger gt_CreatePingsWhenInfestedUnburrows;
trigger gt_RemovePingsWhenInfestorBurrows;
trigger gt_DestroyPingsWhenInfestorKilled;
trigger gt_InfestorBehavior;
trigger gt_InfestorCooldown;
trigger gt_PlayDayMusic;
trigger gt_PlayNightMusic;
trigger gt_TransitionToDay;
trigger gt_TransitionToNight;
trigger gt_SolarCombustionCheck;
trigger gt_UpdateSpawnSettings;
trigger gt_InfestationSpawning;
trigger gt_ShowRemainingInfestedStructures;
trigger gt_RemoveInfestedStructurePing;
trigger gt_InfestationFirstSight;
trigger gt_ClearActoronInfestedBuilding;
trigger gt_NightDefenderReaction;
trigger gt_NightDefenderPing;
trigger gt_NightDefenderReactionQ;
trigger gt_InfestedBuildingDies;
trigger gt_AreaRevealers;
trigger gt_InfestedAreasClear;
trigger gt_InfestedAreaBullies;
trigger gt_IntroHellions;
trigger gt_ChangeOwnerofFactory;
trigger gt_RefugeeBehavior;
trigger gt_DestroyBarricade;
trigger gt_RocksDestroyed;
trigger gt_StartAI;
trigger gt_NightlyAttackWavesP03EN;
trigger gt_NightlyAttackWavesP03HI;
trigger gt_P03AttackWavesCleared0;
trigger gt_P03AttackWavesCleared12;
trigger gt_P03AttackWavesCleared34;
trigger gt_P03AttackWavesCleared56;
trigger gt_P03AttackWavesCleared78;
trigger gt_P03AttackWavesCleared910;
trigger gt_P03AttackWavesCleared11;
trigger gt_TransmissionBunkerUpQ;
trigger gt_TransmissionSouthBarricadeQ;
trigger gt_TransmissionShowRemainingInfestedStructuresQ;
trigger gt_TransmissionHellionIntroQ;
trigger gt_TransmissionInfestationFirstSightQ;
trigger gt_TransmissionInfestedRefugeeSightedQ;
trigger gt_TransmissionInfestedMarineSightedQ;
trigger gt_TransmissionAberrationSightedQ;
trigger gt_TransmissionInfestorsAtNightQ;
trigger gt_TransmissionInfestationAreaClearQ;
trigger gt_TransmissionDayNightin30SecondsQ;
trigger gt_TransmissionDaytimeQ;
trigger gt_TransmissionNightQ;
trigger gt_ClearActoronAberration;
trigger gt_CampaigntipsQ;
trigger gt_SensorTowerTipQ;
trigger gt_HellionTipQ;
trigger gt_DayandNightTipQ;
trigger gt_StatStructuresRazedatNight;
trigger gt_VictoryInfestationPurged;
trigger gt_Victory;
trigger gt_DefeatBaseDestroyed;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_ObjectiveCleansetheInfestationCreateQ;
trigger gt_ObjectiveCleansetheInfestationUpdate;
trigger gt_ObjectiveCleansetheInfestationComplete;
trigger gt_ObjectiveCleansetheInfestationFailed;
trigger gt_ResearchObjectiveKilltheInfestorsCreateQ;
trigger gt_ResearchObjectiveKilltheInfestorsUpdate;
trigger gt_ResearchObjectiveKilltheInfestorsComplete;
trigger gt_BriefingQ;
trigger gt_BriefingScene00;
trigger gt_BriefingScene01;
trigger gt_BriefingScene05;
trigger gt_BriefingScene02;
trigger gt_BriefingScene03;
trigger gt_BriefingScene04;
trigger gt_BriefingScene00Infestation;
trigger gt_BriefingScene01Infestation2;
trigger gt_BriefingScene02InfestedUnburrow;
trigger gt_BriefingScene03BaseDefense;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryDropships;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
text gf_DebugUnitInfo (unit lp_u) {
    // Variable Declarations
    text lv_msg;
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_msg = StringToText("");

    // Implementation
    lv_owner = UnitGetOwner(lp_u);
    lv_msg = StringExternal("Param/Value/1CC47A81");
    lv_msg = (lv_msg + StringExternal("Param/Value/0D9A275B") + IntToText(lv_owner) + StringExternal("Param/Value/FD0D998F"));
    lv_msg = (lv_msg + StringExternal("Param/Value/2A231D13"));
    lv_msg = (lv_msg + IntToText(PlayerGetPropertyInt(lv_owner, c_playerPropMinerals)) + StringExternal("Param/Value/BE10BB4A"));
    lv_msg = (lv_msg + StringExternal("Param/Value/562831B2"));
    lv_msg = (lv_msg + IntToText(PlayerGetPropertyInt(lv_owner, c_playerPropVespene)) + StringExternal("Param/Value/156249F0"));
    lv_msg = (lv_msg + StringExternal("Param/Value/3F7BDBA8"));
    lv_msg = (lv_msg + IntToText(PlayerGetPropertyInt(lv_owner, c_playerPropSuppliesUsed)) + StringToText(""));
    lv_msg = (lv_msg + StringExternal("Param/Value/36896677"));
    lv_msg = (lv_msg + IntToText(MinI(PlayerGetPropertyInt(lv_owner, c_playerPropSuppliesMade), PlayerGetPropertyInt(lv_owner, c_playerPropSuppliesLimit))) + StringExternal("Param/Value/BEC03128"));
    lv_msg = (lv_msg + StringExternal("Param/Value/9B853FD2"));
    lv_msg = (lv_msg + UnitTypeGetName(UnitGetType(lp_u)));
    lv_msg = (lv_msg + StringExternal("Param/Value/55F22AB1"));
    lv_msg = (lv_msg + FixedToText(UnitGetPropertyFixed(lp_u, c_unitPropShields, c_unitPropCurrent), 0));
    lv_msg = (lv_msg + StringExternal("Param/Value/D89A36FB"));
    lv_msg = (lv_msg + FixedToText(UnitGetPropertyFixed(lp_u, c_unitPropLife, c_unitPropCurrent), 0));
    lv_msg = (lv_msg + StringExternal("Param/Value/F8243572"));
    lv_msg = (lv_msg + FixedToText(UnitGetPropertyFixed(lp_u, c_unitPropEnergy, c_unitPropCurrent), 0));
    lv_msg = (lv_msg + StringExternal("Param/Value/BA132E60"));
    lv_msg = (lv_msg + StringExternal("Param/Value/F3633763"));
    lv_msg = (lv_msg + StringExternal("Param/Value/4522B9B9"));
    lv_msg = (lv_msg + FixedToText(PointGetX(UnitGetPosition(lp_u)), 0));
    lv_msg = (lv_msg + StringExternal("Param/Value/51A2F511"));
    lv_msg = (lv_msg + FixedToText(PointGetY(UnitGetPosition(lp_u)), 0));
    lv_msg = (lv_msg + StringExternal("Param/Value/8E58C295"));
    lv_msg = (lv_msg + FixedToText(UnitGetFacing(lp_u), 0));
    lv_msg = (lv_msg + StringExternal("Param/Value/6AAB8E2E"));
    if ((libNtve_gf_UnitIsPaused(lp_u) == true)) {
        lv_msg = (lv_msg + StringExternal("Param/Value/F010293A"));
    }

    if ((libNtve_gf_UnitIsHidden(lp_u) == true)) {
        lv_msg = (lv_msg + StringExternal("Param/Value/B708ECE2"));
    }

    if ((UnitIsAlive(lp_u) == false)) {
        lv_msg = (lv_msg + StringExternal("Param/Value/E8BFA0C9"));
    }

    lv_msg = (lv_msg + StringExternal("Param/Value/E93DE68D"));
    return lv_msg;
}

void gf_NightDefenderSpawn (unit lp_attackedStructure) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetCustomValue(lp_attackedStructure, 0) > 0.0)) {
        return ;
    }

    if ((UnitIsAlive(lp_attackedStructure) == true)) {
        UnitSetCustomValue(lp_attackedStructure, 0, gv_nightDefenderCooldown);
        gv_nightDefenderPingUnit = lp_attackedStructure;
        TriggerExecute(gt_NightDefenderPing, true, false);
        SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), UnitGetPosition(lp_attackedStructure), 0.0, 100.0, 0.0);
        libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(3, 4, 5, 6), "InfestedCivilian", 0, gv_pLAYER_04_INFESTEDREFUGEES, UnitGetPosition(lp_attackedStructure));
        AISetGroupScriptControlled(UnitLastCreatedGroup(), false);
        SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), UnitGetPosition(lp_attackedStructure), 0.0, 100.0, 0.0);
        if ((gv_infestedBuildingsKilled < 50)) {
            libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "InfestedTerranCampaign", 0, gv_pLAYER_04_INFESTEDREFUGEES, UnitGetPosition(lp_attackedStructure));
        }

        if ((gv_infestedBuildingsKilled >= 50) && (gv_infestedBuildingsKilled < 100)) {
            libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(2, 3, 4, 5), "InfestedTerranCampaign", 0, gv_pLAYER_04_INFESTEDREFUGEES, UnitGetPosition(lp_attackedStructure));
        }

        if ((gv_infestedBuildingsKilled >= 100)) {
            libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(3, 4, 2, 3), "InfestedTerranCampaign", 0, gv_pLAYER_04_INFESTEDREFUGEES, UnitGetPosition(lp_attackedStructure));
            AISetGroupScriptControlled(UnitLastCreatedGroup(), false);
            libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "InfestedAbomination", 0, gv_pLAYER_04_INFESTEDREFUGEES, UnitGetPosition(lp_attackedStructure));
        }

        AISetGroupScriptControlled(UnitLastCreatedGroup(), false);
    }

}

void gf_ResearchZergUpgrades (int lp_qty, string lp_upgrade) {
    // Automatic Variable Declarations
    playergroup autoB959900B_g;
    int autoB959900B_var;

    // Implementation
    if ((lp_qty > 0)) {
        autoB959900B_g = gv_zergPlayerGroup;
        autoB959900B_var = -1;
        while (true) {
            autoB959900B_var = PlayerGroupNextPlayer(autoB959900B_g, autoB959900B_var);
            if (autoB959900B_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(autoB959900B_var, lp_upgrade, lp_qty);
        }
    }

}

void gf_PrepareAttackDirection (int lp_direction) {
    // Automatic Variable Declarations
    int autoEA1974A1_val;

    // Implementation
    autoEA1974A1_val = lp_direction;
    if (autoEA1974A1_val == ge_AttackDirection_Left) {
        if ((gv_area01Cleared == true) && (gv_area02Cleared == true) && (gv_area03Cleared == true)) {
            AIAttackWaveSetGatherPoint(gv_pLAYER_03_INFESTED_REFUGEES, PointFromId(324));
            AIAttackWaveAddWaypoint(gv_pLAYER_03_INFESTED_REFUGEES, PointFromId(237), false);
            AIAttackWaveAddWaypoint(gv_pLAYER_03_INFESTED_REFUGEES, PointFromId(457), false);
        }
        else {
            AIAttackWaveSetGatherPoint(gv_pLAYER_03_INFESTED_REFUGEES, PointFromId(228));
        }
    }
    else if (autoEA1974A1_val == ge_AttackDirection_Right) {
        gf_AddWaypointToExpansion();
        if ((gv_area04Cleared == true) && (gv_area05Cleared == true) && (gv_area06Cleared == true)) {
            AIAttackWaveSetGatherPoint(gv_pLAYER_03_INFESTED_REFUGEES, PointFromId(458));
            AIAttackWaveAddWaypoint(gv_pLAYER_03_INFESTED_REFUGEES, PointFromId(1109), false);
        }
        else {
            AIAttackWaveSetGatherPoint(gv_pLAYER_03_INFESTED_REFUGEES, PointFromId(317));
        }
    }
    else if (autoEA1974A1_val == ge_AttackDirection_South) {
        AIAttackWaveSetGatherPoint(gv_pLAYER_03_INFESTED_REFUGEES, PointFromId(282));
    }
    else if (autoEA1974A1_val == ge_AttackDirection_SouthLeftfallback) {
        if ((UnitIsAlive(UnitFromId(17)) == false)) {
            gf_PrepareAttackDirection(ge_AttackDirection_South);
        }
        else {
            gf_PrepareAttackDirection(ge_AttackDirection_Left);
        }
    }
    else if (autoEA1974A1_val == ge_AttackDirection_SouthRightfallback) {
        if ((UnitIsAlive(UnitFromId(17)) == false)) {
            gf_PrepareAttackDirection(ge_AttackDirection_South);
        }
        else {
            gf_PrepareAttackDirection(ge_AttackDirection_Right);
        }
    }
    else {
    }
}

void gf_AttackWaveFromDirection (int lp_direction, int lp_delay, bool lp_waitOption, int lp_qty1, int lp_qty2, int lp_qty3) {
    // Automatic Variable Declarations
    // Implementation
    gf_PrepareAttackDirection(lp_direction);
    AIAttackWaveAddUnits4(lp_qty1, lp_qty1, lp_qty1, lp_qty1, "InfestedCivilian");
    AIAttackWaveAddUnits4(lp_qty2, lp_qty2, lp_qty2, lp_qty2, "InfestedTerranCampaign");
    AIAttackWaveAddUnits4(lp_qty3, lp_qty3, lp_qty3, lp_qty3, "InfestedAbomination");
    AIAttackWaveSend(gv_pLAYER_03_INFESTED_REFUGEES, lp_delay, lp_waitOption);
}

void gf_AddWaypointToExpansion () {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGroupCount(UnitGroup("CommandCenter", gv_pLAYER_01_USER, RegionFromId(49), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("CommandCenterFlying", gv_pLAYER_01_USER, RegionFromId(49), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("OrbitalCommand", gv_pLAYER_01_USER, RegionFromId(49), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("OrbitalCommandFlying", gv_pLAYER_01_USER, RegionFromId(49), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("PlanetaryFortress", gv_pLAYER_01_USER, RegionFromId(49), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("AutomatedRefinery", gv_pLAYER_01_USER, RegionFromId(49), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("Refinery", gv_pLAYER_01_USER, RegionFromId(49), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
        AIAttackWaveAddWaypoint(gv_pLAYER_03_INFESTED_REFUGEES, PointFromId(859), false);
    }

}

void gf_BriefingSpawnInfestedColonists (int lp_number, string lp_unitType, region lp_spawnRegion) {
    // Variable Declarations
    unitgroup lv_lastGroup;

    // Automatic Variable Declarations
    unitgroup auto1B9E687D_g;
    int auto1B9E687D_u;
    unit auto1B9E687D_var;

    // Variable Initialization
    lv_lastGroup = UnitGroupEmpty();

    // Implementation
    UnitCreate(lp_number, lp_unitType, 0, gv_pLAYER_04_INFESTEDREFUGEES, RegionRandomPoint(lp_spawnRegion), libNtve_gf_RandomAngle());
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_lastGroup);
    UnitGroupIssueOrder(lv_lastGroup, Order(AbilityCommand("BurrowInfestedTerranCampaignUp", 0)), c_orderQueueReplace);
    auto1B9E687D_g = UnitGroup("InfestedCivilian", gv_pLAYER_04_INFESTEDREFUGEES, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1B9E687D_u = UnitGroupCount(auto1B9E687D_g, c_unitCountAll);
    for (;; auto1B9E687D_u -= 1) {
        auto1B9E687D_var = UnitGroupUnitFromEnd(auto1B9E687D_g, auto1B9E687D_u);
        if (auto1B9E687D_var == null) { break; }
        UnitIssueOrder(auto1B9E687D_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(481)), c_orderQueueAddToEnd);
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_LoadCampaignData(libCamp_ge_MapID_MapTHanson02);
    TriggerExecute(gt_Init01Technology, true, false);
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04Music, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    libCamp_gf_RegisterFootageRecording(gt_BriefingQ);
    libCamp_gf_PurchaseStorymodeTech();
    UIAlertPoint("Trigger", 1, StringToText(""), null, PointFromId(453));
    TriggerExecute(gt_IntroSequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupxxxSensorTower, gv_pLAYER_01_USER);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_INFESTED_REFUGEES, "Burrow", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_INFESTEDREFUGEES, "Burrow", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_06_INFESTORS, "Burrow", 1);
    TechTreeAbilityAllow(gv_pLAYER_06_INFESTORS, AbilityCommand("NeuralParasite", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_REFUGEES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_03_INFESTED_REFUGEES, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_04_INFESTEDREFUGEES, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_05_REFUGEES, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_06_INFESTORS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_08_SWANN, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_02_REFUGEES, gv_pLAYER_05_REFUGEES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_REFUGEES, gv_pLAYER_06_INFESTORS, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_02_REFUGEES, gv_pLAYER_08_SWANN, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_03_INFESTED_REFUGEES, gv_pLAYER_02_REFUGEES, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_03_INFESTED_REFUGEES, gv_pLAYER_04_INFESTEDREFUGEES, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_03_INFESTED_REFUGEES, gv_pLAYER_06_INFESTORS, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_03_INFESTED_REFUGEES, gv_pLAYER_08_SWANN, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_04_INFESTEDREFUGEES, gv_pLAYER_02_REFUGEES, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_04_INFESTEDREFUGEES, gv_pLAYER_06_INFESTORS, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_04_INFESTEDREFUGEES, gv_pLAYER_08_SWANN, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_05_REFUGEES, gv_pLAYER_06_INFESTORS, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_05_REFUGEES, gv_pLAYER_08_SWANN, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_06_INFESTORS, gv_pLAYER_08_SWANN, libNtve_ge_AllianceSetting_Neutral);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 400);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 100);
    PlayerGroupAdd(gv_zergPlayerGroup, gv_pLAYER_02_REFUGEES);
    PlayerGroupAdd(gv_zergPlayerGroup, gv_pLAYER_03_INFESTED_REFUGEES);
    PlayerGroupAdd(gv_zergPlayerGroup, gv_pLAYER_04_INFESTEDREFUGEES);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto6A6C64E5_g;
    int auto6A6C64E5_u;
    unit auto6A6C64E5_var;
    unitgroup auto97A1CCEC_g;
    int auto97A1CCEC_u;
    unit auto97A1CCEC_var;
    unitgroup autoC2C40852_g;
    int autoC2C40852_u;
    unit autoC2C40852_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "Signal LightPowerDown");
    auto6A6C64E5_g = UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6A6C64E5_u = UnitGroupCount(auto6A6C64E5_g, c_unitCountAll);
    for (;; auto6A6C64E5_u -= 1) {
        auto6A6C64E5_var = UnitGroupUnitFromEnd(auto6A6C64E5_g, auto6A6C64E5_u);
        if (auto6A6C64E5_var == null) { break; }
        if ((UnitGetType(auto6A6C64E5_var) != "SporeCrawler") && (UnitGetType(auto6A6C64E5_var) != "SpineCrawler")) {
            lv_i += 1;
            gv_infestableStructure[lv_i] = auto6A6C64E5_var;
            gv_infestableStructureHealth[lv_i] = UnitGetPropertyFixed(auto6A6C64E5_var, c_unitPropLife, c_unitPropCurrent);
        }

    }
    gv_infestableStructureSize = lv_i;
    UnitGroupAdd(gv_firstSightInfestedGroup, UnitFromId(47));
    UnitGroupAdd(gv_firstSightInfestedGroup, UnitFromId(487));
    UnitGroupAdd(gv_firstSightInfestedGroup, UnitFromId(35));
    UnitGroupAdd(gv_firstSightInfestedGroup, UnitFromId(629));
    UnitGroupAdd(gv_firstSightInfestedGroup, UnitFromId(68));
    UnitGroupAdd(gv_firstSightInfestedGroup, UnitFromId(630));
    UnitGroupAdd(gv_firstSightInfestedGroup, UnitFromId(60));
    UnitGroupAdd(gv_firstSightInfestedGroup, UnitFromId(45));
    UnitGroupAdd(gv_firstSightInfestedGroup, UnitFromId(43));
    UnitGroupAdd(gv_firstSightInfestedGroup, UnitFromId(44));
    UnitGroupAdd(gv_firstSightInfestedGroup, UnitFromId(72));
    UnitSetPropertyFixed(UnitFromId(17), c_unitPropLife, 100.0);
    UnitSetPropertyFixed(UnitFromId(17), c_unitPropLifeMax, 100.0);
    UnitSetPropertyFixed(UnitFromId(20), c_unitPropLife, 100.0);
    UnitSetPropertyFixed(UnitFromId(20), c_unitPropLifeMax, 100.0);
    UnitSetPropertyFixed(UnitFromId(16), c_unitPropLife, 100.0);
    UnitSetPropertyFixed(UnitFromId(16), c_unitPropLifeMax, 100.0);
    UnitSetPropertyFixed(UnitFromId(18), c_unitPropLife, 100.0);
    UnitSetPropertyFixed(UnitFromId(18), c_unitPropLifeMax, 100.0);
    auto97A1CCEC_g = UnitGroup("InfestorBurrowed", gv_pLAYER_06_INFESTORS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto97A1CCEC_u = UnitGroupCount(auto97A1CCEC_g, c_unitCountAll);
    for (;; auto97A1CCEC_u -= 1) {
        auto97A1CCEC_var = UnitGroupUnitFromEnd(auto97A1CCEC_g, auto97A1CCEC_u);
        if (auto97A1CCEC_var == null) { break; }
        UnitGroupAdd(gv_infestorGroup, auto97A1CCEC_var);
        UnitSetPropertyFixed(auto97A1CCEC_var, c_unitPropEnergyPercent, 100.0);
        libNtve_gf_PauseUnit(auto97A1CCEC_var, true);
        AISetUnitScriptControlled(auto97A1CCEC_var, true);
    }
    autoC2C40852_g = UnitGroup("Medic", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC2C40852_u = UnitGroupCount(autoC2C40852_g, c_unitCountAll);
    for (;; autoC2C40852_u -= 1) {
        autoC2C40852_var = UnitGroupUnitFromEnd(autoC2C40852_g, autoC2C40852_u);
        if (autoC2C40852_var == null) { break; }
        UnitSetPropertyFixed(autoC2C40852_var, c_unitPropEnergyPercent, 100.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init04Music_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "THanson02MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Music_Init () {
    gt_Init04Music = TriggerCreate("gt_Init04Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetToDLighting("MeinhoffCampaignDay");
    GameTimeOfDaySet("12:00:00");
    GameTimeOfDayPause(true);
    GameTimeOfDaySetLength((gv_dAY_DURATION + gv_nIGHT_DURATION));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto688100D6_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto688100D6_val = PlayerDifficulty(gv_pLAYER_01_USER);
    if (auto688100D6_val == 1) {
        PlayerModifyPropertyInt(gv_pLAYER_02_REFUGEES, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_pLAYER_03_INFESTED_REFUGEES, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_pLAYER_04_INFESTEDREFUGEES, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_pLAYER_06_INFESTORS, c_playerPropHandicap, c_playerPropOperSetTo, 50);
    }
    else {
    }
    gv_dAY_DURATION = libNtve_gf_DifficultyValueFixed(480.0, 360.0, 240.0, 180.0);
    gv_nIGHT_DURATION = libNtve_gf_DifficultyValueFixed(300.0, 300.0, 270.0, 270.0);
    gv_nightDefenderCooldown = libNtve_gf_DifficultyValueFixed(16.0, 12.0, 8.0, 8.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_AddUnitTypeToUnitHelpPanel("InfestedTerranCampaign", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("InfestedCivilian", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("InfestedAbomination", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Infestor", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SpineCrawler", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SporeCrawler", false, gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Sequence
//--------------------------------------------------------------------------------------------------
bool gt_IntroSequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_MapInitialInfestation, true, false);
    Wait(0.2, c_timeReal);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(453), 1.5);
    CinematicFade(true, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_StartGame, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSequence_Init () {
    gt_IntroSequence = TriggerCreate("gt_IntroSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game
//--------------------------------------------------------------------------------------------------
bool gt_StartGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    VisExploreArea(gv_pLAYER_01_USER, RegionCircle(PointFromId(19), 16.0), true, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionCircle(PointFromId(73), 16.0), true, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionCircle(PointFromId(74), 16.0), true, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionCircle(PointFromId(669), 12.0), true, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionCircle(PointFromId(707), 12.0), true, false);
    gv_timeOfDay = ge_PRESET_TimeOfDay_Day;
    GameTimeOfDayPause(true);
    if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
        TimerStart(gv_transitionToNight, 80.0, false, c_timeGame);
        TimerStart(gv_mainTimer, 120.0, false, c_timeGame);
    }
    else {
        TimerStart(gv_transitionToNight, 50.0, false, c_timeGame);
        TimerStart(gv_mainTimer, 90.0, false, c_timeGame);
    }
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/1973AF56"), true, false);
    gv_mainTimerWindow = TimerWindowLastCreated();
    TimerWindowSetStyle(gv_mainTimerWindow, c_timerWindowStyleHorizontalTitleTime, false);
    TimerWindowSetFormat(gv_mainTimerWindow, StringToText("<mintotal/>:<sec2/>"));
    TimerWindowSetColor(gv_mainTimerWindow, c_timerWindowColorTitle, Color(100.00, 0.00, 0.00), 0.0);
    TimerWindowShow(gv_mainTimerWindow, PlayerGroupAll(), true);
    TriggerEnable(gt_VictoryInfestationPurged, true);
    TriggerEnable(gt_InfestedAreasClear, true);
    TriggerEnable(gt_InfestationFirstSight, true);
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_ObjectiveCleansetheInfestationCreateQ, true, true);
    Wait(5.0, c_timeGame);
    TriggerExecute(gt_SensorTowerTipQ, true, false);
    Wait(15.0, c_timeGame);
    TriggerExecute(gt_TransmissionBunkerUpQ, true, false);
    Wait(30.0, c_timeGame);
    TriggerExecute(gt_CampaigntipsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGame_Init () {
    gt_StartGame = TriggerCreate("gt_StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Night
//--------------------------------------------------------------------------------------------------
bool gt_FirstNight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_InitialAttack, true, false);
    TriggerExecute(gt_InfestationSpawning, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstNight_Init () {
    gt_FirstNight = TriggerCreate("gt_FirstNight_Func");
    TriggerAddEventTimer(gt_FirstNight, gv_mainTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initial Attack
//--------------------------------------------------------------------------------------------------
bool gt_InitialAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_attackersLeft;
    unitgroup lv_attackersRight;
    unit lv_tempUnit;

    // Automatic Variable Declarations
    const int auto31AF6971_ae = 7;
    const int auto31AF6971_ai = 1;

    // Variable Initialization
    lv_i = 1;
    lv_attackersLeft = UnitGroupEmpty();
    lv_attackersRight = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(14, "InfestedCivilian", 0, gv_pLAYER_03_INFESTED_REFUGEES, RegionGetCenter(RegionFromId(3)));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_attackersLeft);
    UnitGroupIssueOrder(lv_attackersLeft, Order(AbilityCommand("BurrowInfestedTerranCampaignUp", 0)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(14, "InfestedCivilian", 0, gv_pLAYER_03_INFESTED_REFUGEES, RegionGetCenter(RegionFromId(4)));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_attackersRight);
    UnitGroupIssueOrder(lv_attackersRight, Order(AbilityCommand("BurrowInfestedTerranCampaignUp", 0)), c_orderQueueReplace);
    Wait(3.0, c_timeGame);
    lv_i = 1;
    for ( ; ( (auto31AF6971_ai >= 0 && lv_i <= auto31AF6971_ae) || (auto31AF6971_ai < 0 && lv_i >= auto31AF6971_ae) ) ; lv_i += auto31AF6971_ai ) {
        UnitIssueOrder(UnitGroupUnit(lv_attackersLeft, lv_i), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(228)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupUnit(lv_attackersLeft, (lv_i + 7)), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(228)), c_orderQueueReplace);
        Wait(RandomFixed(0.5, 1.0), c_timeGame);
        UnitIssueOrder(UnitGroupUnit(lv_attackersRight, lv_i), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(317)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupUnit(lv_attackersRight, (lv_i + 7)), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(317)), c_orderQueueReplace);
        Wait(RandomFixed(0.5, 1.0), c_timeGame);
    }
    while (!((UnitGroupCount(lv_attackersLeft, c_unitCountAlive) == UnitGroupCount(UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, RegionCircle(PointFromId(228), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)) && (UnitGroupCount(lv_attackersRight, c_unitCountAlive) == UnitGroupCount(UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, RegionCircle(PointFromId(317), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)))) {
        Wait(0.1, c_timeGame);
    }
    while (true) {
        Wait(RandomFixed(0.5, 2.0), c_timeGame);
        if ((UnitGroupCount(lv_attackersLeft, c_unitCountAlive) == 0)) {
            break;
        }

        lv_tempUnit = UnitGroupRandomUnit(lv_attackersLeft, c_unitCountAlive);
        UnitIssueOrder(lv_tempUnit, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(230)), c_orderQueueReplace);
        UnitGroupRemove(lv_attackersLeft, lv_tempUnit);
    }
    while (true) {
        Wait(RandomFixed(0.5, 2.0), c_timeGame);
        if ((UnitGroupCount(lv_attackersRight, c_unitCountAlive) == 0)) {
            break;
        }

        lv_tempUnit = UnitGroupRandomUnit(lv_attackersRight, c_unitCountAlive);
        UnitIssueOrder(lv_tempUnit, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(230)), c_orderQueueReplace);
        UnitGroupRemove(lv_attackersRight, lv_tempUnit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitialAttack_Init () {
    gt_InitialAttack = TriggerCreate("gt_InitialAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Initial Infestation
//--------------------------------------------------------------------------------------------------
bool gt_MapInitialInfestation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2AA8063C_g;
    int auto2AA8063C_u;
    unit auto2AA8063C_var;
    unitgroup auto3A63F5D6_g;
    int auto3A63F5D6_u;
    unit auto3A63F5D6_var;
    unitgroup auto3F7ED517_g;
    int auto3F7ED517_u;
    unit auto3F7ED517_var;
    unitgroup autoA091F957_g;
    int autoA091F957_u;
    unit autoA091F957_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2AA8063C_g = UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2AA8063C_u = UnitGroupCount(auto2AA8063C_g, c_unitCountAll);
    for (;; auto2AA8063C_u -= 1) {
        auto2AA8063C_var = UnitGroupUnitFromEnd(auto2AA8063C_g, auto2AA8063C_u);
        if (auto2AA8063C_var == null) { break; }
        if ((UnitGetType(auto2AA8063C_var) != "CreepTumorBurrowed") && (UnitGetType(auto2AA8063C_var) != "SpineCrawler") && (UnitGetType(auto2AA8063C_var) != "SporeCrawler")) {
            UnitBehaviorAddPlayer(auto2AA8063C_var, "ColonyInfestation", gv_pLAYER_03_INFESTED_REFUGEES, 1);
        }

    }
    auto3A63F5D6_g = UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(5), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3A63F5D6_u = UnitGroupCount(auto3A63F5D6_g, c_unitCountAll);
    for (;; auto3A63F5D6_u -= 1) {
        auto3A63F5D6_var = UnitGroupUnitFromEnd(auto3A63F5D6_g, auto3A63F5D6_u);
        if (auto3A63F5D6_var == null) { break; }
        UnitGroupAdd(gv_infestedStructureGroup, auto3A63F5D6_var);
    }
    auto3F7ED517_g = UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(40), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3F7ED517_u = UnitGroupCount(auto3F7ED517_g, c_unitCountAll);
    for (;; auto3F7ED517_u -= 1) {
        auto3F7ED517_var = UnitGroupUnitFromEnd(auto3F7ED517_g, auto3F7ED517_u);
        if (auto3F7ED517_var == null) { break; }
        UnitGroupAdd(gv_infestedStructureGroup, auto3F7ED517_var);
    }
    autoA091F957_g = UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(42), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA091F957_u = UnitGroupCount(autoA091F957_g, c_unitCountAll);
    for (;; autoA091F957_u -= 1) {
        autoA091F957_var = UnitGroupUnitFromEnd(autoA091F957_g, autoA091F957_u);
        if (autoA091F957_var == null) { break; }
        UnitGroupAdd(gv_infestedStructureGroup, autoA091F957_var);
    }
    TriggerEnable(gt_ShowRemainingInfestedStructures, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MapInitialInfestation_Init () {
    gt_MapInitialInfestation = TriggerCreate("gt_MapInitialInfestation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer Cycling
//--------------------------------------------------------------------------------------------------
bool gt_TimerCycling_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto22DC2D8F_ae;
    const int auto22DC2D8F_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_timeOfDay == ge_PRESET_TimeOfDay_Night)) {
        gv_timeOfDay = ge_PRESET_TimeOfDay_Day;
        gv_day += 1;
        libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "Signal LightPowerDown");
        TriggerExecute(gt_InfestorCycling, true, false);
        TriggerExecute(gt_PlayDayMusic, true, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/B9F9F63E"));
        TriggerExecute(gt_TransmissionDaytimeQ, true, false);
        TimerStart(gv_transitionToNight, (gv_dAY_DURATION - 40.0), false, c_timeGame);
        TimerStart(gv_mainTimer, gv_dAY_DURATION, false, c_timeGame);
        TimerWindowSetTitle(gv_mainTimerWindow, TextReplaceWord(StringExternal("Param/Value/6B0A5E41"), StringExternal("Param/Value/C3A5EF7D"), IntToText(gv_day), c_stringReplaceAll, c_stringCase));
        TimerWindowSetStyle(gv_mainTimerWindow, c_timerWindowStyleHorizontalTitleTime, false);
        TimerWindowSetColor(gv_mainTimerWindow, c_timerWindowColorTitle, Color(0.00, 100.00, 0.00), 0.0);
        TimerWindowShow(gv_mainTimerWindow, PlayerGroupAll(), true);
        TriggerEnable(gt_SolarCombustionCheck, true);
        AIToggleBulliesInRegion(gv_pLAYER_03_INFESTED_REFUGEES, RegionEntireMap(), false);
        TriggerEnable(gt_NightDefenderReaction, false);
        libCamp_gf_CreateMissionAutosavePoint(TextReplaceWord(StringExternal("Param/Value/70B324C3"), StringExternal("Param/Value/7B02C8CB"), IntToText(gv_day), c_stringReplaceAll, c_stringCase));
    }
    else {
        gv_timeOfDay = ge_PRESET_TimeOfDay_Night;
        gv_night += 1;
        libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "Signal LightPowerUp");
        TriggerExecute(gt_InfestorCycling, true, false);
        TriggerExecute(gt_PlayNightMusic, true, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/103C91C4"));
        TriggerExecute(gt_TransmissionNightQ, true, false);
        TimerStart(gv_transitionToDay, (gv_nIGHT_DURATION - 40.0), false, c_timeGame);
        TimerStart(gv_mainTimer, gv_nIGHT_DURATION, false, c_timeGame);
        TimerWindowSetTitle(gv_mainTimerWindow, TextReplaceWord(StringExternal("Param/Value/749F57BE"), StringExternal("Param/Value/7E7BF9AB"), IntToText(gv_night), c_stringReplaceAll, c_stringCase));
        TimerWindowSetStyle(gv_mainTimerWindow, c_timerWindowStyleHorizontalTitleTime, false);
        TimerWindowSetColor(gv_mainTimerWindow, c_timerWindowColorTitle, Color(100.00, 0.00, 0.00), 0.0);
        TimerWindowShow(gv_mainTimerWindow, PlayerGroupAll(), true);
        if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
            TriggerExecute(gt_NightlyAttackWavesP03EN, true, false);
        }
        else {
            TriggerExecute(gt_NightlyAttackWavesP03HI, true, false);
        }
        TriggerEnable(gt_SolarCombustionCheck, false);
        TriggerExecute(gt_InfestedAreaBullies, true, false);
        TriggerEnable(gt_NightDefenderReaction, true);
        TriggerExecute(gt_IntroHellions, true, false);
        auto22DC2D8F_ae = gv_infestableStructureSize;
        lv_index = 1;
        for ( ; ( (auto22DC2D8F_ai >= 0 && lv_index <= auto22DC2D8F_ae) || (auto22DC2D8F_ai < 0 && lv_index >= auto22DC2D8F_ae) ) ; lv_index += auto22DC2D8F_ai ) {
            gv_infestableStructureHealth[lv_index] = UnitGetPropertyFixed(gv_infestableStructure[lv_index], c_unitPropLife, c_unitPropCurrent);
        }
        if ((gv_night == 1)) {
            TriggerExecute(gt_DayandNightTipQ, true, false);
        }

        if (((gv_night >= 3) || (gv_areasCleared >= 3))) {
            TriggerExecute(gt_DestroyBarricade, true, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimerCycling_Init () {
    gt_TimerCycling = TriggerCreate("gt_TimerCycling_Func");
    TriggerAddEventTimer(gt_TimerCycling, gv_mainTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infestor Cycling
//--------------------------------------------------------------------------------------------------
bool gt_InfestorCycling_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF9067DCD_g;
    int autoF9067DCD_u;
    unit autoF9067DCD_var;

    // Conditions
    if (testConds) {
        if (!((gv_night >= 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_night == 2) && (gv_timeOfDay == ge_PRESET_TimeOfDay_Night)) {
        Wait(15.0, c_timeGame);
        autoF9067DCD_g = gv_infestorGroup;
        autoF9067DCD_u = UnitGroupCount(autoF9067DCD_g, c_unitCountAll);
        for (;; autoF9067DCD_u -= 1) {
            autoF9067DCD_var = UnitGroupUnitFromEnd(autoF9067DCD_g, autoF9067DCD_u);
            if (autoF9067DCD_var == null) { break; }
            libNtve_gf_PauseUnit(autoF9067DCD_var, false);
        }
        TriggerExecute(gt_InfestorsBurrowUnburrow, true, false);
        TriggerExecute(gt_ResearchObjectiveKilltheInfestorsCreateQ, true, true);
        TriggerExecute(gt_TransmissionInfestorsAtNightQ, true, true);
    }
    else {
        Wait(10.0, c_timeGame);
        TriggerExecute(gt_InfestorsBurrowUnburrow, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestorCycling_Init () {
    gt_InfestorCycling = TriggerCreate("gt_InfestorCycling_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infestor North Found Early
//--------------------------------------------------------------------------------------------------
bool gt_InfestorNorthFoundEarly_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_night < 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_InfestorSouthFoundEarly, false);
    TriggerExecute(gt_ResearchObjectiveKilltheInfestorsCreateQ, true, true);
    TriggerExecute(gt_TransmissionInfestorsAtNightQ, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestorNorthFoundEarly_Init () {
    gt_InfestorNorthFoundEarly = TriggerCreate("gt_InfestorNorthFoundEarly_Func");
    TriggerAddEventUnitDamaged(gt_InfestorNorthFoundEarly, UnitRefFromUnit(UnitFromId(1110)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infestor South Found Early
//--------------------------------------------------------------------------------------------------
bool gt_InfestorSouthFoundEarly_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_night < 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_InfestorNorthFoundEarly, false);
    TriggerExecute(gt_ResearchObjectiveKilltheInfestorsCreateQ, true, true);
    TriggerExecute(gt_TransmissionInfestorsAtNightQ, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestorSouthFoundEarly_Init () {
    gt_InfestorSouthFoundEarly = TriggerCreate("gt_InfestorSouthFoundEarly_Func");
    TriggerAddEventUnitDamaged(gt_InfestorSouthFoundEarly, UnitRefFromUnit(UnitFromId(927)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infestors Burrow/Unburrow
//--------------------------------------------------------------------------------------------------
bool gt_InfestorsBurrowUnburrow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_timeOfDay == ge_PRESET_TimeOfDay_Night)) {
        UnitGroupIssueOrder(gv_infestorGroup, Order(AbilityCommand("BurrowInfestorUp", 0)), c_orderQueueReplace);
    }
    else {
        UnitGroupIssueOrder(gv_infestorGroup, Order(AbilityCommand("BurrowInfestorDown", 0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestorsBurrowUnburrow_Init () {
    gt_InfestorsBurrowUnburrow = TriggerCreate("gt_InfestorsBurrowUnburrow_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Pings When Infested Unburrows
//--------------------------------------------------------------------------------------------------
bool gt_CreatePingsWhenInfestedUnburrows_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "InfestorBurrowed"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnit() == gv_infestor1)) {
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_infestor1), 2.0), 5.0, false);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(gv_infestor1), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        gv_infestorPing01 = PingLastCreated();
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/726AC80F"));
        PingSetScale(PingLastCreated(), 0.85);
    }

    if ((EventUnit() == gv_infestor2)) {
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_infestor2), 2.0), 5.0, false);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(gv_infestor2), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        gv_infestorPing02 = PingLastCreated();
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/6BEE1EE2"));
        PingSetScale(PingLastCreated(), 0.85);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreatePingsWhenInfestedUnburrows_Init () {
    gt_CreatePingsWhenInfestedUnburrows = TriggerCreate("gt_CreatePingsWhenInfestedUnburrows_Func");
    TriggerAddEventUnitAbility(gt_CreatePingsWhenInfestedUnburrows, null, AbilityCommand("BurrowInfestorUp", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Pings When Infestor Burrows
//--------------------------------------------------------------------------------------------------
bool gt_RemovePingsWhenInfestorBurrows_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Infestor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnit() == gv_infestor1)) {
        PingDestroy(gv_infestorPing01);
    }

    if ((EventUnit() == gv_infestor2)) {
        PingDestroy(gv_infestorPing02);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemovePingsWhenInfestorBurrows_Init () {
    gt_RemovePingsWhenInfestorBurrows = TriggerCreate("gt_RemovePingsWhenInfestorBurrows_Func");
    TriggerAddEventUnitAbility(gt_RemovePingsWhenInfestorBurrows, null, AbilityCommand("BurrowInfestorDown", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroy Pings When Infestor Killed
//--------------------------------------------------------------------------------------------------
bool gt_DestroyPingsWhenInfestorKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "InfestorBurrowed") || (UnitGetType(EventUnit()) == "Infestor")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnit() == gv_infestor1)) {
        PingDestroy(gv_infestorPing01);
    }

    if ((EventUnit() == gv_infestor2)) {
        PingDestroy(gv_infestorPing02);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestroyPingsWhenInfestorKilled_Init () {
    gt_DestroyPingsWhenInfestorKilled = TriggerCreate("gt_DestroyPingsWhenInfestorKilled_Func");
    TriggerAddEventUnitDied(gt_DestroyPingsWhenInfestorKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infestor Behavior
//--------------------------------------------------------------------------------------------------
bool gt_InfestorBehavior_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    unitgroup auto7ECFBFDB_g;
    int auto7ECFBFDB_u;
    unit auto7ECFBFDB_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto7ECFBFDB_g = gv_infestorGroup;
    auto7ECFBFDB_u = UnitGroupCount(auto7ECFBFDB_g, c_unitCountAll);
    for (;; auto7ECFBFDB_u -= 1) {
        auto7ECFBFDB_var = UnitGroupUnitFromEnd(auto7ECFBFDB_g, auto7ECFBFDB_u);
        if (auto7ECFBFDB_var == null) { break; }
        if ((UnitGetType(auto7ECFBFDB_var) == "Infestor") && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(auto7ECFBFDB_var), 14.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            lv_point = UnitGetPosition(UnitGroupRandomUnit(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(auto7ECFBFDB_var), 14.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
            if ((UnitGetCustomValue(auto7ECFBFDB_var, 0) < libNtve_gf_DifficultyValueFixed(5.0, 5.0, 10.0, 1000.0))) {
                UnitIssueOrder(auto7ECFBFDB_var, OrderTargetingPoint(AbilityCommand("InfestedTerrans", 0), lv_point), c_orderQueueReplace);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestorBehavior_Init () {
    gt_InfestorBehavior = TriggerCreate("gt_InfestorBehavior_Func");
    TriggerAddEventTimePeriodic(gt_InfestorBehavior, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infestor Cooldown
//--------------------------------------------------------------------------------------------------
bool gt_InfestorCooldown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetCustomValue(EventUnit(), 0, (UnitGetCustomValue(EventUnit(), 0) + 1.0));
    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        if ((UnitGroupHasUnit(gv_infestorAggressionInhibitor, EventUnit()) == false)) {
            UnitGroupAdd(gv_infestorAggressionInhibitor, EventUnit());
            UnitAbilityReset(EventUnit(), AbilityCommand("InfestedTerrans", 0), c_spendLocationAll);
        }
        else {
            UnitGroupRemove(gv_infestorAggressionInhibitor, EventUnit());
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestorCooldown_Init () {
    gt_InfestorCooldown = TriggerCreate("gt_InfestorCooldown_Func");
    TriggerAddEventUnitAbility(gt_InfestorCooldown, null, AbilityCommand("InfestedTerrans", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Play Day Music
//--------------------------------------------------------------------------------------------------
bool gt_PlayDayMusic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THanson02MusicEventB", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait("THanson02MusicEventB");
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THanson01MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Meinhoff", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackSetContinuous(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayDayMusic_Init () {
    gt_PlayDayMusic = TriggerCreate("gt_PlayDayMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Play Night Music
//--------------------------------------------------------------------------------------------------
bool gt_PlayNightMusic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THanson02MusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait("THanson02MusicEventA");
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THanson02MusicAlt", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Hanson02Night", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackSetContinuous(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayNightMusic_Init () {
    gt_PlayNightMusic = TriggerCreate("gt_PlayNightMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transition To Day
//--------------------------------------------------------------------------------------------------
bool gt_TransitionToDay_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_timeOfDay == ge_PRESET_TimeOfDay_Night))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetLighting("MeinhoffCampaignDay", 40.0);
    Wait(10.0, c_timeGame);
    TriggerExecute(gt_TransmissionDayNightin30SecondsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransitionToDay_Init () {
    gt_TransitionToDay = TriggerCreate("gt_TransitionToDay_Func");
    TriggerAddEventTimer(gt_TransitionToDay, gv_transitionToDay);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transition To Night
//--------------------------------------------------------------------------------------------------
bool gt_TransitionToNight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_timeOfDay == ge_PRESET_TimeOfDay_Day))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetLighting("MeinhoffCampaignNight", 40.0);
    Wait(10.0, c_timeGame);
    TriggerExecute(gt_TransmissionDayNightin30SecondsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransitionToNight_Init () {
    gt_TransitionToNight = TriggerCreate("gt_TransitionToNight_Func");
    TriggerAddEventTimer(gt_TransitionToNight, gv_transitionToNight);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Solar Combustion Check
//--------------------------------------------------------------------------------------------------
bool gt_SolarCombustionCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_doomedUnits;
    unit lv_u;

    // Automatic Variable Declarations
    unitgroup auto87EA6112_g;
    int auto87EA6112_u;
    unit auto87EA6112_var;
    unitgroup auto17484C82_g;
    int auto17484C82_u;

    // Variable Initialization
    lv_doomedUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_timeOfDay == ge_PRESET_TimeOfDay_Day))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto87EA6112_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto87EA6112_u = UnitGroupCount(auto87EA6112_g, c_unitCountAll);
    for (;; auto87EA6112_u -= 1) {
        auto87EA6112_var = UnitGroupUnitFromEnd(auto87EA6112_g, auto87EA6112_u);
        if (auto87EA6112_var == null) { break; }
        if ((UnitHasBehavior(auto87EA6112_var, "SolarCombustion") == false) && ((UnitGetType(auto87EA6112_var) == "InfestedAbomination") || (UnitGetType(auto87EA6112_var) == "InfestedAbominationBurrowed") || (UnitGetType(auto87EA6112_var) == "InfestedTerranCampaign") || (UnitGetType(auto87EA6112_var) == "InfestedTerranCampaignBurrowed") || (UnitGetType(auto87EA6112_var) == "InfestedCivilian") || (UnitGetType(auto87EA6112_var) == "InfestedCivilianBurrowed"))) {
            UnitGroupAdd(lv_doomedUnits, auto87EA6112_var);
        }

    }
    while (true) {
        auto17484C82_g = UnitGroupFilter(null, c_playerAny, lv_doomedUnits, UnitFilter(0, 0, 0, 0), 10);
        auto17484C82_u = UnitGroupCount(auto17484C82_g, c_unitCountAll);
        for (;; auto17484C82_u -= 1) {
            lv_u = UnitGroupUnitFromEnd(auto17484C82_g, auto17484C82_u);
            if (lv_u == null) { break; }
            UnitBehaviorAdd(lv_u, "SolarCombustion", lv_u, 1);
            UnitGroupRemove(lv_doomedUnits, lv_u);
        }
        if ((libNtve_gf_UnitGroupIsDead(lv_doomedUnits) == true)) {
            return true;
        }

        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SolarCombustionCheck_Init () {
    gt_SolarCombustionCheck = TriggerCreate("gt_SolarCombustionCheck_Func");
    TriggerAddEventTimePeriodic(gt_SolarCombustionCheck, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Spawn Settings
//--------------------------------------------------------------------------------------------------
bool gt_UpdateSpawnSettings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_infestedBuildingsKilled <= 13) && (gv_areasCleared <= 0)) {
        gv_infestedMarineQty = libNtve_gf_DifficultyValueInt(0, 0, 0, 0);
        gv_infestedTerranQty = libNtve_gf_DifficultyValueInt(50, 50, 70, 90);
        gv_spawnCooldown = libNtve_gf_DifficultyValueInt(45, 45, 35, 30);
        return true;
    }

    if ((gv_infestedBuildingsKilled <= 30)) {
        gv_infestedMarineQty = libNtve_gf_DifficultyValueInt(4, 4, 5, 6);
        gv_infestedTerranQty = libNtve_gf_DifficultyValueInt(50, 50, 55, 70);
        gv_spawnCooldown = libNtve_gf_DifficultyValueInt(45, 45, 35, 30);
        return true;
    }

    if ((gv_infestedBuildingsKilled <= 50)) {
        gv_infestedMarineQty = libNtve_gf_DifficultyValueInt(4, 4, 5, 6);
        gv_infestedTerranQty = libNtve_gf_DifficultyValueInt(50, 50, 60, 80);
        gv_spawnCooldown = libNtve_gf_DifficultyValueInt(45, 45, 35, 30);
        return true;
    }

    if ((gv_infestedBuildingsKilled <= 70)) {
        gv_infestedMarineQty = libNtve_gf_DifficultyValueInt(6, 6, 8, 10);
        gv_infestedTerranQty = libNtve_gf_DifficultyValueInt(50, 50, 70, 90);
        gv_spawnCooldown = libNtve_gf_DifficultyValueInt(40, 40, 30, 25);
        return true;
    }

    if ((gv_infestedBuildingsKilled <= 90)) {
        gv_infestedMarineQty = libNtve_gf_DifficultyValueInt(8, 8, 10, 12);
        gv_infestedTerranQty = libNtve_gf_DifficultyValueInt(50, 50, 80, 100);
        gv_spawnCooldown = libNtve_gf_DifficultyValueInt(40, 40, 30, 25);
        return true;
    }

    if ((gv_infestedBuildingsKilled <= 110)) {
        gv_infestedMarineQty = libNtve_gf_DifficultyValueInt(10, 10, 12, 14);
        gv_infestedTerranQty = libNtve_gf_DifficultyValueInt(50, 50, 80, 100);
        gv_spawnCooldown = libNtve_gf_DifficultyValueInt(35, 35, 25, 20);
        return true;
    }

    gv_infestedMarineQty = libNtve_gf_DifficultyValueInt(12, 12, 14, 18);
    gv_infestedTerranQty = libNtve_gf_DifficultyValueInt(50, 50, 90, 125);
    gv_spawnCooldown = libNtve_gf_DifficultyValueInt(35, 35, 25, 20);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateSpawnSettings_Init () {
    gt_UpdateSpawnSettings = TriggerCreate("gt_UpdateSpawnSettings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infestation Spawning
//--------------------------------------------------------------------------------------------------
bool gt_InfestationSpawning_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_spawners;
    unit lv_pickedSpawner;

    // Automatic Variable Declarations
    int auto59089212_n;
    int auto59089212_i;
    unitgroup auto89A20EB8_g;
    int auto89A20EB8_u;

    // Variable Initialization
    lv_spawners = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        TriggerExecute(gt_UpdateSpawnSettings, true, false);
        Wait(IntToFixed(gv_spawnCooldown), c_timeGame);
        if ((UnitGroupCount(gv_infestedStructureGroup, c_unitCountAlive) == 0)) {
            return true;
        }

        while (!((gv_inCinematic == false))) {
            Wait(1.0, c_timeGame);
        }
        lv_spawners = UnitGroupFilterPlayer(gv_infestedStructureGroup, gv_pLAYER_03_INFESTED_REFUGEES, (gv_infestedTerranQty + gv_infestedMarineQty));
        auto59089212_n = gv_infestedMarineQty;
        for (auto59089212_i = 1; auto59089212_i <= auto59089212_n; auto59089212_i += 1) {
            if ((gv_timeOfDay == ge_PRESET_TimeOfDay_Night) && (UnitGroupCount(lv_spawners, c_unitCountAlive) > 0)) {
                lv_pickedSpawner = UnitGroupRandomUnit(lv_spawners, c_unitCountAlive);
                libNtve_gf_CreateUnitsAtPoint2(1, "InfestedTerranCampaign", 0, gv_pLAYER_04_INFESTEDREFUGEES, UnitGetPosition(lv_pickedSpawner));
                AISetUnitSuicide(UnitLastCreated(), true);
                UnitGroupRemove(lv_spawners, lv_pickedSpawner);
            }

            Wait(0.1, c_timeGame);
        }
        auto89A20EB8_g = lv_spawners;
        auto89A20EB8_u = UnitGroupCount(auto89A20EB8_g, c_unitCountAll);
        for (;; auto89A20EB8_u -= 1) {
            lv_pickedSpawner = UnitGroupUnitFromEnd(auto89A20EB8_g, auto89A20EB8_u);
            if (lv_pickedSpawner == null) { break; }
            if ((gv_timeOfDay == ge_PRESET_TimeOfDay_Night) && (UnitGroupCount(lv_spawners, c_unitCountAlive) > 0)) {
                libNtve_gf_CreateUnitsAtPoint2(1, "InfestedCivilian", 0, gv_pLAYER_04_INFESTEDREFUGEES, UnitGetPosition(lv_pickedSpawner));
                AISetUnitSuicide(UnitLastCreated(), true);
            }

            Wait(0.1, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestationSpawning_Init () {
    gt_InfestationSpawning = TriggerCreate("gt_InfestationSpawning_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Remaining Infested Structures
//--------------------------------------------------------------------------------------------------
bool gt_ShowRemainingInfestedStructures_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup autoE55A534E_g;
    int autoE55A534E_u;
    unit autoE55A534E_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 11))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_infestedStructureGroup = UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE55A534E_g = gv_infestedStructureGroup;
    autoE55A534E_u = UnitGroupCount(autoE55A534E_g, c_unitCountAll);
    for (;; autoE55A534E_u -= 1) {
        autoE55A534E_var = UnitGroupUnitFromEnd(autoE55A534E_g, autoE55A534E_u);
        if (autoE55A534E_var == null) { break; }
        UnitSetCustomValue(autoE55A534E_var, 2, IntToFixed(lv_i));
        libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(gv_pLAYER_01_USER), "PingWarning", UnitGetPosition(autoE55A534E_var), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
        PingSetScale(PingLastCreated(), 0.75);
        gv_infestableStructuresPings[lv_i] = PingLastCreated();
        lv_i += 1;
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/47574D9D"), "Assets\\Textures\\btn-unit-zerg-infestedmarine.dds", UnitGetPosition(autoE55A534E_var));
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(autoE55A534E_var), 3.0), 10.0, true);
    }
    TriggerEnable(gt_RemoveInfestedStructurePing, true);
    TriggerExecute(gt_TransmissionShowRemainingInfestedStructuresQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowRemainingInfestedStructures_Init () {
    gt_ShowRemainingInfestedStructures = TriggerCreate("gt_ShowRemainingInfestedStructures_Func");
    TriggerEnable(gt_ShowRemainingInfestedStructures, false);
    TriggerAddEventTimePeriodic(gt_ShowRemainingInfestedStructures, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Infested Structure Ping
//--------------------------------------------------------------------------------------------------
bool gt_RemoveInfestedStructurePing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_03_INFESTED_REFUGEES))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_infestedStructureGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(gv_infestableStructuresPings[FixedToInt(UnitGetCustomValue(EventUnit(), 2))]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveInfestedStructurePing_Init () {
    gt_RemoveInfestedStructurePing = TriggerCreate("gt_RemoveInfestedStructurePing_Func");
    TriggerEnable(gt_RemoveInfestedStructurePing, false);
    TriggerAddEventUnitDied(gt_RemoveInfestedStructurePing, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infestation First Sight
//--------------------------------------------------------------------------------------------------
bool gt_InfestationFirstSight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_runOnce;

    // Automatic Variable Declarations
    unitgroup autoF4C06915_g;
    int autoF4C06915_u;
    unit autoF4C06915_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF4C06915_g = gv_firstSightInfestedGroup;
    autoF4C06915_u = UnitGroupCount(autoF4C06915_g, c_unitCountAll);
    for (;; autoF4C06915_u -= 1) {
        autoF4C06915_var = UnitGroupUnitFromEnd(autoF4C06915_g, autoF4C06915_u);
        if (autoF4C06915_var == null) { break; }
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(autoF4C06915_var), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (lv_runOnce == false)) {
            TriggerEnable(TriggerGetCurrent(), false);
            lv_runOnce = true;
            gv_firstSightInfestedStructure = autoF4C06915_var;
            libNtve_gf_AttachModelToUnit(gv_firstSightInfestedStructure, "BriefingUnitSelectRed", "Ref_Origin");
            gv_structureSelectionActor = libNtve_gf_ActorLastCreated();
            TriggerEnable(gt_ClearActoronInfestedBuilding, true);
            TriggerExecute(gt_TransmissionInfestationFirstSightQ, true, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestationFirstSight_Init () {
    gt_InfestationFirstSight = TriggerCreate("gt_InfestationFirstSight_Func");
    TriggerEnable(gt_InfestationFirstSight, false);
    TriggerAddEventTimePeriodic(gt_InfestationFirstSight, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clear Actor on Infested Building
//--------------------------------------------------------------------------------------------------
bool gt_ClearActoronInfestedBuilding_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_structureSelectionActor);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClearActoronInfestedBuilding_Init () {
    gt_ClearActoronInfestedBuilding = TriggerCreate("gt_ClearActoronInfestedBuilding_Func");
    TriggerEnable(gt_ClearActoronInfestedBuilding, false);
    TriggerAddEventUnitDied(gt_ClearActoronInfestedBuilding, UnitRefFromVariable("gv_firstSightInfestedStructure"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Night Defender Reaction
//--------------------------------------------------------------------------------------------------
bool gt_NightDefenderReaction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto2338D377_ae;
    const int auto2338D377_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto2338D377_ae = gv_infestableStructureSize;
    lv_index = 1;
    for ( ; ( (auto2338D377_ai >= 0 && lv_index <= auto2338D377_ae) || (auto2338D377_ai < 0 && lv_index >= auto2338D377_ae) ) ; lv_index += auto2338D377_ai ) {
        if ((UnitGetCustomValue(gv_infestableStructure[lv_index], 0) != 0.0)) {
            UnitSetCustomValue(gv_infestableStructure[lv_index], 0, (UnitGetCustomValue(gv_infestableStructure[lv_index], 0) - 1.0));
        }
        else {
            if ((gv_timeOfDay == ge_PRESET_TimeOfDay_Night) && (UnitIsAlive(gv_infestableStructure[lv_index]) == true) && (UnitGetPropertyFixed(gv_infestableStructure[lv_index], c_unitPropLife, c_unitPropCurrent) < gv_infestableStructureHealth[lv_index])) {
                gf_NightDefenderSpawn(gv_infestableStructure[lv_index]);
                if ((gv_nightReactionThrottle == false)) {
                    TriggerExecute(gt_NightDefenderReactionQ, true, false);
                }

            }

        }
        gv_infestableStructureHealth[lv_index] = UnitGetPropertyFixed(gv_infestableStructure[lv_index], c_unitPropLife, c_unitPropCurrent);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NightDefenderReaction_Init () {
    gt_NightDefenderReaction = TriggerCreate("gt_NightDefenderReaction_Func");
    TriggerAddEventTimePeriodic(gt_NightDefenderReaction, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Night Defender Ping
//--------------------------------------------------------------------------------------------------
bool gt_NightDefenderPing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_nightDefenderPingUnit), 3.0, Color(100.00, 0.00, 0.00));
    Wait(6.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NightDefenderPing_Init () {
    gt_NightDefenderPing = TriggerCreate("gt_NightDefenderPing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Night Defender Reaction Q
//--------------------------------------------------------------------------------------------------
bool gt_NightDefenderReactionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_nightReactionThrottle == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_reactionCounter += 1;
    gv_nightReactionThrottle = true;
    if ((gv_reactionCounter == 1)) {
        TriggerQueueEnter();
        TriggerEnable(TriggerGetCurrent(), false);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson02Tychus00003", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Tychus00003", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
        Wait(30.0, c_timeGame);
        TriggerEnable(TriggerGetCurrent(), true);
        gv_nightReactionThrottle = false;
    }

    if ((gv_reactionCounter >= 2)) {
        TriggerQueueEnter();
        TriggerEnable(TriggerGetCurrent(), false);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson02Tychus00004", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Tychus00004", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NightDefenderReactionQ_Init () {
    gt_NightDefenderReactionQ = TriggerCreate("gt_NightDefenderReactionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infested Building Dies
//--------------------------------------------------------------------------------------------------
bool gt_InfestedBuildingDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2558A625_g;
    int auto2558A625_u;
    unit auto2558A625_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_03_INFESTED_REFUGEES))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_03_INFESTED_REFUGEES, UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, 0, 0)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_infestedBuildingsKilled = (gv_infestedBuildingsKilled + 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(2, 3, 4, 6), "Broodling", 0, gv_pLAYER_03_INFESTED_REFUGEES, UnitGetPosition(EventUnit()));
    auto2558A625_g = UnitLastCreatedGroup();
    auto2558A625_u = UnitGroupCount(auto2558A625_g, c_unitCountAll);
    for (;; auto2558A625_u -= 1) {
        auto2558A625_var = UnitGroupUnitFromEnd(auto2558A625_g, auto2558A625_u);
        if (auto2558A625_var == null) { break; }
        UnitBehaviorAdd(auto2558A625_var, "BroodlingFate", auto2558A625_var, 1);
        UnitSetPropertyFixed(auto2558A625_var, c_unitPropMovementSpeed, 2.5);
    }
    TriggerExecute(gt_ObjectiveCleansetheInfestationUpdate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestedBuildingDies_Init () {
    gt_InfestedBuildingDies = TriggerCreate("gt_InfestedBuildingDies_Func");
    TriggerAddEventUnitDied(gt_InfestedBuildingDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Area Revealers
//--------------------------------------------------------------------------------------------------
bool gt_AreaRevealers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA6EA8ACF_g;
    int autoA6EA8ACF_u;
    unit autoA6EA8ACF_var;
    unitgroup autoB8D9D4A8_g;
    int autoB8D9D4A8_u;
    unit autoB8D9D4A8_var;
    unitgroup auto9BE60079_g;
    int auto9BE60079_u;
    unit auto9BE60079_var;
    unitgroup autoFB06523C_g;
    int autoFB06523C_u;
    unit autoFB06523C_var;
    unitgroup autoEB251BDE_g;
    int autoEB251BDE_u;
    unit autoEB251BDE_var;
    unitgroup auto5B150902_g;
    int auto5B150902_u;
    unit auto5B150902_var;
    unitgroup autoABD149CF_g;
    int autoABD149CF_u;
    unit autoABD149CF_var;
    unitgroup auto5558968A_g;
    int auto5558968A_u;
    unit auto5558968A_var;
    unitgroup autoDF6A7862_g;
    int autoDF6A7862_u;
    unit autoDF6A7862_var;
    unitgroup autoC5D47FFA_g;
    int autoC5D47FFA_u;
    unit autoC5D47FFA_var;
    unitgroup auto5C07C6C4_g;
    int auto5C07C6C4_u;
    unit auto5C07C6C4_var;

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitRegion() == RegionFromId(9)) && (gv_area01Revealed == false)) {
        gv_area01Revealed = true;
        autoA6EA8ACF_g = UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(9), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoA6EA8ACF_u = UnitGroupCount(autoA6EA8ACF_g, c_unitCountAll);
        for (;; autoA6EA8ACF_u -= 1) {
            autoA6EA8ACF_var = UnitGroupUnitFromEnd(autoA6EA8ACF_g, autoA6EA8ACF_u);
            if (autoA6EA8ACF_var == null) { break; }
            VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(autoA6EA8ACF_var), 4.0), 5.0, false);
        }
    }

    if ((EventUnitRegion() == RegionFromId(10)) && (gv_area02Revealed == false)) {
        gv_area02Revealed = true;
        autoB8D9D4A8_g = UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(10), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoB8D9D4A8_u = UnitGroupCount(autoB8D9D4A8_g, c_unitCountAll);
        for (;; autoB8D9D4A8_u -= 1) {
            autoB8D9D4A8_var = UnitGroupUnitFromEnd(autoB8D9D4A8_g, autoB8D9D4A8_u);
            if (autoB8D9D4A8_var == null) { break; }
            VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(autoB8D9D4A8_var), 4.0), 5.0, false);
        }
    }

    if ((EventUnitRegion() == RegionFromId(28)) && (gv_area03Revealed == false)) {
        gv_area03Revealed = true;
        auto9BE60079_g = UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(28), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto9BE60079_u = UnitGroupCount(auto9BE60079_g, c_unitCountAll);
        for (;; auto9BE60079_u -= 1) {
            auto9BE60079_var = UnitGroupUnitFromEnd(auto9BE60079_g, auto9BE60079_u);
            if (auto9BE60079_var == null) { break; }
            VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(auto9BE60079_var), 4.0), 5.0, false);
        }
    }

    if ((EventUnitRegion() == RegionFromId(11)) && (gv_area04Revealed == false)) {
        gv_area04Revealed = true;
        autoFB06523C_g = UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(11), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoFB06523C_u = UnitGroupCount(autoFB06523C_g, c_unitCountAll);
        for (;; autoFB06523C_u -= 1) {
            autoFB06523C_var = UnitGroupUnitFromEnd(autoFB06523C_g, autoFB06523C_u);
            if (autoFB06523C_var == null) { break; }
            VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(autoFB06523C_var), 4.0), 5.0, false);
        }
    }

    if ((EventUnitRegion() == RegionFromId(12)) && (gv_area05Revealed == false)) {
        gv_area05Revealed = true;
        autoEB251BDE_g = UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(12), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoEB251BDE_u = UnitGroupCount(autoEB251BDE_g, c_unitCountAll);
        for (;; autoEB251BDE_u -= 1) {
            autoEB251BDE_var = UnitGroupUnitFromEnd(autoEB251BDE_g, autoEB251BDE_u);
            if (autoEB251BDE_var == null) { break; }
            VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(autoEB251BDE_var), 4.0), 5.0, false);
        }
    }

    if ((EventUnitRegion() == RegionFromId(39)) && (gv_area06Revealed == false)) {
        gv_area06Revealed = true;
        auto5B150902_g = UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(39), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto5B150902_u = UnitGroupCount(auto5B150902_g, c_unitCountAll);
        for (;; auto5B150902_u -= 1) {
            auto5B150902_var = UnitGroupUnitFromEnd(auto5B150902_g, auto5B150902_u);
            if (auto5B150902_var == null) { break; }
            VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(auto5B150902_var), 4.0), 5.0, false);
        }
    }

    if ((EventUnitRegion() == RegionFromId(1)) && (gv_area07Revealed == false)) {
        gv_area07Revealed = true;
        autoABD149CF_g = UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(1), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoABD149CF_u = UnitGroupCount(autoABD149CF_g, c_unitCountAll);
        for (;; autoABD149CF_u -= 1) {
            autoABD149CF_var = UnitGroupUnitFromEnd(autoABD149CF_g, autoABD149CF_u);
            if (autoABD149CF_var == null) { break; }
            VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(autoABD149CF_var), 4.0), 5.0, false);
        }
    }

    if ((EventUnitRegion() == RegionFromId(22)) && (gv_area08Revealed == false)) {
        gv_area08Revealed = true;
        auto5558968A_g = UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(22), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto5558968A_u = UnitGroupCount(auto5558968A_g, c_unitCountAll);
        for (;; auto5558968A_u -= 1) {
            auto5558968A_var = UnitGroupUnitFromEnd(auto5558968A_g, auto5558968A_u);
            if (auto5558968A_var == null) { break; }
            VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(auto5558968A_var), 4.0), 5.0, false);
        }
    }

    if ((EventUnitRegion() == RegionFromId(13)) && (gv_area09Revealed == false)) {
        gv_area09Revealed = true;
        autoDF6A7862_g = UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(13), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoDF6A7862_u = UnitGroupCount(autoDF6A7862_g, c_unitCountAll);
        for (;; autoDF6A7862_u -= 1) {
            autoDF6A7862_var = UnitGroupUnitFromEnd(autoDF6A7862_g, autoDF6A7862_u);
            if (autoDF6A7862_var == null) { break; }
            VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(autoDF6A7862_var), 4.0), 5.0, false);
        }
    }

    if ((EventUnitRegion() == RegionFromId(21)) && (gv_area10Revealed == false)) {
        gv_area10Revealed = true;
        autoC5D47FFA_g = UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(21), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoC5D47FFA_u = UnitGroupCount(autoC5D47FFA_g, c_unitCountAll);
        for (;; autoC5D47FFA_u -= 1) {
            autoC5D47FFA_var = UnitGroupUnitFromEnd(autoC5D47FFA_g, autoC5D47FFA_u);
            if (autoC5D47FFA_var == null) { break; }
            VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(autoC5D47FFA_var), 4.0), 5.0, false);
        }
    }

    if ((EventUnitRegion() == RegionFromId(43)) && (gv_area11Revealed == false)) {
        gv_area11Revealed = true;
        auto5C07C6C4_g = UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(43), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto5C07C6C4_u = UnitGroupCount(auto5C07C6C4_g, c_unitCountAll);
        for (;; auto5C07C6C4_u -= 1) {
            auto5C07C6C4_var = UnitGroupUnitFromEnd(auto5C07C6C4_g, auto5C07C6C4_u);
            if (auto5C07C6C4_var == null) { break; }
            VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(auto5C07C6C4_var), 4.0), 5.0, false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AreaRevealers_Init () {
    gt_AreaRevealers = TriggerCreate("gt_AreaRevealers_Func");
    TriggerAddEventUnitRegion(gt_AreaRevealers, null, RegionFromId(9), true);
    TriggerAddEventUnitRegion(gt_AreaRevealers, null, RegionFromId(10), true);
    TriggerAddEventUnitRegion(gt_AreaRevealers, null, RegionFromId(28), true);
    TriggerAddEventUnitRegion(gt_AreaRevealers, null, RegionFromId(11), true);
    TriggerAddEventUnitRegion(gt_AreaRevealers, null, RegionFromId(12), true);
    TriggerAddEventUnitRegion(gt_AreaRevealers, null, RegionFromId(39), true);
    TriggerAddEventUnitRegion(gt_AreaRevealers, null, RegionFromId(1), true);
    TriggerAddEventUnitRegion(gt_AreaRevealers, null, RegionFromId(22), true);
    TriggerAddEventUnitRegion(gt_AreaRevealers, null, RegionFromId(13), true);
    TriggerAddEventUnitRegion(gt_AreaRevealers, null, RegionFromId(21), true);
    TriggerAddEventUnitRegion(gt_AreaRevealers, null, RegionFromId(43), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infested Areas Clear
//--------------------------------------------------------------------------------------------------
bool gt_InfestedAreasClear_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_areasCleared <= 10))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_03_INFESTED_REFUGEES))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_03_INFESTED_REFUGEES, UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, 0, 0)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_area01Cleared == false) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(9), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        gv_area01Cleared = true;
        gv_areasCleared += 1;
        MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(9)), 5.0, Color(0.00, 100.00, 0.00));
        AIToggleBulliesInRegion(gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(9), false);
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(9), "FogGrey", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
        TriggerExecute(gt_TransmissionInfestationAreaClearQ, true, false);
    }

    if ((gv_area02Cleared == false) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(10), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        gv_area02Cleared = true;
        gv_areasCleared += 1;
        MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(10)), 5.0, Color(0.00, 100.00, 0.00));
        AIToggleBulliesInRegion(gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(10), false);
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(10), "FogGrey", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
        TriggerExecute(gt_TransmissionInfestationAreaClearQ, true, false);
    }

    if ((gv_area03Cleared == false) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(28), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        gv_area03Cleared = true;
        gv_areasCleared += 1;
        MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(28)), 5.0, Color(0.00, 100.00, 0.00));
        AIToggleBulliesInRegion(gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(28), false);
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(28), "FogGrey", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
        TriggerExecute(gt_TransmissionInfestationAreaClearQ, true, false);
    }

    if ((gv_area04Cleared == false) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(11), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        gv_area04Cleared = true;
        gv_areasCleared += 1;
        MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(11)), 5.0, Color(0.00, 100.00, 0.00));
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(11), "FogGrey", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
        AIToggleBulliesInRegion(gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(11), false);
        TriggerExecute(gt_TransmissionInfestationAreaClearQ, true, false);
    }

    if ((gv_area05Cleared == false) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(12), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        gv_area05Cleared = true;
        gv_areasCleared += 1;
        MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(12)), 5.0, Color(0.00, 100.00, 0.00));
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(12), "FogGrey", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
        AIToggleBulliesInRegion(gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(12), false);
        TriggerExecute(gt_TransmissionInfestationAreaClearQ, true, false);
    }

    if ((gv_area06Cleared == false) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(39), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        gv_area06Cleared = true;
        gv_areasCleared += 1;
        MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(39)), 5.0, Color(0.00, 100.00, 0.00));
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(39), "FogGrey", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
        AIToggleBulliesInRegion(gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(39), false);
        TriggerExecute(gt_TransmissionInfestationAreaClearQ, true, false);
    }

    if ((gv_area07Cleared == false) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(1), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        gv_area07Cleared = true;
        gv_areasCleared += 1;
        MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(1)), 5.0, Color(0.00, 100.00, 0.00));
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(1), "FogGrey", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
        AIToggleBulliesInRegion(gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(1), false);
        TriggerExecute(gt_TransmissionInfestationAreaClearQ, true, false);
    }

    if ((gv_area08Cleared == false) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(22), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        gv_area08Cleared = true;
        gv_areasCleared += 1;
        MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(22)), 5.0, Color(0.00, 100.00, 0.00));
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(22), "FogGrey", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
        AIToggleBulliesInRegion(gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(22), false);
        TriggerExecute(gt_TransmissionInfestationAreaClearQ, true, false);
    }

    if ((gv_area09Cleared == false) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(13), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        gv_area09Cleared = true;
        gv_areasCleared += 1;
        MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(13)), 5.0, Color(0.00, 100.00, 0.00));
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(13), "FogGrey", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
        AIToggleBulliesInRegion(gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(13), false);
        TriggerExecute(gt_TransmissionInfestationAreaClearQ, true, false);
    }

    if ((gv_area10Cleared == false) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(21), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        gv_area10Cleared = true;
        gv_areasCleared += 1;
        MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(21)), 5.0, Color(0.00, 100.00, 0.00));
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(21), "FogGrey", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
        AIToggleBulliesInRegion(gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(21), false);
        TriggerExecute(gt_TransmissionInfestationAreaClearQ, true, false);
    }

    if ((gv_area11Cleared == false) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(43), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        gv_area11Cleared = true;
        gv_areasCleared += 1;
        MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(43)), 5.0, Color(0.00, 100.00, 0.00));
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(43), "FogGrey", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
        AIToggleBulliesInRegion(gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(43), false);
        TriggerExecute(gt_TransmissionInfestationAreaClearQ, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestedAreasClear_Init () {
    gt_InfestedAreasClear = TriggerCreate("gt_InfestedAreasClear_Func");
    TriggerEnable(gt_InfestedAreasClear, false);
    TriggerAddEventUnitDied(gt_InfestedAreasClear, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infested Area Bullies
//--------------------------------------------------------------------------------------------------
bool gt_InfestedAreaBullies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_area01Cleared == false) && (gv_timeOfDay == ge_PRESET_TimeOfDay_Night)) {
        AIToggleBulliesInRegion(gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(9), true);
    }

    if ((gv_area02Cleared == false) && (gv_timeOfDay == ge_PRESET_TimeOfDay_Night)) {
        AIToggleBulliesInRegion(gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(10), true);
    }

    if ((gv_area03Cleared == false) && (gv_timeOfDay == ge_PRESET_TimeOfDay_Night)) {
        AIToggleBulliesInRegion(gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(28), true);
    }

    if ((gv_area04Cleared == false) && (gv_timeOfDay == ge_PRESET_TimeOfDay_Night)) {
        AIToggleBulliesInRegion(gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(11), true);
    }

    if ((gv_area05Cleared == false) && (gv_timeOfDay == ge_PRESET_TimeOfDay_Night)) {
        AIToggleBulliesInRegion(gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(12), true);
    }

    if ((gv_area06Cleared == false) && (gv_timeOfDay == ge_PRESET_TimeOfDay_Night)) {
        AIToggleBulliesInRegion(gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(39), true);
    }

    if ((gv_area07Cleared == false) && (gv_timeOfDay == ge_PRESET_TimeOfDay_Night)) {
        AIToggleBulliesInRegion(gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(1), true);
    }

    if ((gv_area08Cleared == false) && (gv_timeOfDay == ge_PRESET_TimeOfDay_Night)) {
        AIToggleBulliesInRegion(gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(22), true);
    }

    if ((gv_area09Cleared == false) && (gv_timeOfDay == ge_PRESET_TimeOfDay_Night)) {
        AIToggleBulliesInRegion(gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(13), true);
    }

    if ((gv_area10Cleared == false) && (gv_timeOfDay == ge_PRESET_TimeOfDay_Night)) {
        AIToggleBulliesInRegion(gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(21), true);
    }

    if ((gv_area11Cleared == false) && (gv_timeOfDay == ge_PRESET_TimeOfDay_Night)) {
        AIToggleBulliesInRegion(gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(43), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestedAreaBullies_Init () {
    gt_InfestedAreaBullies = TriggerCreate("gt_InfestedAreaBullies_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Hellions
//--------------------------------------------------------------------------------------------------
bool gt_IntroHellions_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_factory;
    region lv_pickedRegion;
    unitgroup lv_introHellionGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_introHellionGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_night == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((TimerGetRemaining(gv_mainTimer) <= 80.0))) {
        Wait(0.1, c_timeGame);
    }
    libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesHellion, gv_pLAYER_01_USER);
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(4, 4, 3, 3), "Hellion", 0, gv_pLAYER_08_SWANN, PointFromId(1385));
    UnitGroupAddUnitGroup(lv_introHellionGroup, UnitLastCreatedGroup());
    libCamp_gf_CreateDropPod(libCamp_ge_DropPodRace_Terran, PointFromId(930), UnitLastCreatedGroup(), true);
    libNtve_gf_RescueUnit2(lv_introHellionGroup, gv_pLAYER_01_USER, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THanson02MusicSwann", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    Wait(3.0, c_timeGame);
    if ((UnitGroupCount(UnitGroup(null, c_playerAny, RegionFromId(41), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        lv_pickedRegion = RegionFromId(41);

    }
    else if ((UnitGroupCount(UnitGroup(null, c_playerAny, RegionFromId(46), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        lv_pickedRegion = RegionFromId(46);

    }
    else if ((UnitGroupCount(UnitGroup(null, c_playerAny, RegionFromId(47), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        lv_pickedRegion = RegionFromId(47);

    }
    else if ((UnitGroupCount(UnitGroup(null, c_playerAny, RegionFromId(48), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        lv_pickedRegion = RegionFromId(48);

    }
    if ((lv_pickedRegion == null)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "FactoryFlying", 0, gv_pLAYER_08_SWANN, RegionGetCenter(RegionFromId(41)));
        lv_factory = UnitLastCreated();
        UnitSetPropertyFixed(lv_factory, c_unitPropHeight, 10.0);
        SoundPlay(SoundLink("Ghost_DropPodImpact", -1), PlayerGroupAll(), 100.0, 0.0);
        UnitSetHeight(lv_factory, 3.25, 2.0);
        Wait(2.0, c_timeGame);
    }
    else {
        libNtve_gf_CreateUnitsAtPoint2(1, "FactoryFlying", 0, gv_pLAYER_08_SWANN, RegionGetCenter(lv_pickedRegion));
        lv_factory = UnitLastCreated();
        UnitSetPropertyFixed(lv_factory, c_unitPropHeight, 10.0);
        SoundPlay(SoundLink("Ghost_DropPodImpact", -1), PlayerGroupAll(), 100.0, 0.0);
        UnitSetHeight(lv_factory, 3.25, 2.0);
        Wait(2.0, c_timeGame);
        UnitIssueOrder(lv_factory, OrderTargetingPoint(AbilityCommand("FactoryLand", 0), RegionGetCenter(lv_pickedRegion)), c_orderQueueReplace);
    }
    libCamp_gf_CreateNewStructureTips();
    libNtve_gf_MakeUnitInvulnerable(lv_factory, false);
    libNtve_gf_MakeUnitUncommandable(lv_factory, false);
    TriggerExecute(gt_TransmissionHellionIntroQ, true, true);
    TriggerExecute(gt_HellionTipQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroHellions_Init () {
    gt_IntroHellions = TriggerCreate("gt_IntroHellions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Change Owner of Factory
//--------------------------------------------------------------------------------------------------
bool gt_ChangeOwnerofFactory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_08_SWANN))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "FactoryFlying"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/3DE51668"), null, EventUnit());
    MinimapPing(PlayerGroupAll(), UnitGetPosition(EventUnit()), 2.0, Color(100.00, 100.00, 0.00));
    libNtve_gf_RescueUnit(EventUnit(), gv_pLAYER_01_USER, true);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("FactoryLand", 0), RegionGetCenter(EventUnitRegion())), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChangeOwnerofFactory_Init () {
    gt_ChangeOwnerofFactory = TriggerCreate("gt_ChangeOwnerofFactory_Func");
    TriggerAddEventUnitRegion(gt_ChangeOwnerofFactory, null, RegionFromId(41), true);
    TriggerAddEventUnitRegion(gt_ChangeOwnerofFactory, null, RegionFromId(46), true);
    TriggerAddEventUnitRegion(gt_ChangeOwnerofFactory, null, RegionFromId(47), true);
    TriggerAddEventUnitRegion(gt_ChangeOwnerofFactory, null, RegionFromId(48), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Refugee Behavior
//--------------------------------------------------------------------------------------------------
bool gt_RefugeeBehavior_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_random;

    // Automatic Variable Declarations
    unitgroup autoEF719771_g;
    int autoEF719771_u;
    unit autoEF719771_var;
    unitgroup auto25373960_g;
    int auto25373960_u;
    unit auto25373960_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_random = RandomInt(0, 3);
    autoEF719771_g = UnitGroup("ColonistFemale", gv_pLAYER_05_REFUGEES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEF719771_u = UnitGroupCount(autoEF719771_g, c_unitCountAll);
    for (;; autoEF719771_u -= 1) {
        autoEF719771_var = UnitGroupUnitFromEnd(autoEF719771_g, autoEF719771_u);
        if (autoEF719771_var == null) { break; }
        lv_random = RandomInt(0, 1);
        if ((lv_random == 1)) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(autoEF719771_var), c_animNameDefault, "Talk", c_animFlagNonLooping, c_animTimeDefault);
            Wait(1.0, c_timeGame);
        }
        else {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(autoEF719771_var), c_animNameDefault, "Talk 01", c_animFlagNonLooping, c_animTimeDefault);
            Wait(1.5, c_timeGame);
        }
    }
    auto25373960_g = UnitGroup("Colonist", gv_pLAYER_05_REFUGEES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto25373960_u = UnitGroupCount(auto25373960_g, c_unitCountAll);
    for (;; auto25373960_u -= 1) {
        auto25373960_var = UnitGroupUnitFromEnd(auto25373960_g, auto25373960_u);
        if (auto25373960_var == null) { break; }
        lv_random = RandomInt(0, 1);
        if ((lv_random == 1)) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(auto25373960_var), c_animNameDefault, "Talk", c_animFlagNonLooping, c_animTimeDefault);
            Wait(1.0, c_timeGame);
        }
        else {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(auto25373960_var), c_animNameDefault, "Talk 01", c_animFlagNonLooping, c_animTimeDefault);
            Wait(1.5, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RefugeeBehavior_Init () {
    gt_RefugeeBehavior = TriggerCreate("gt_RefugeeBehavior_Func");
    TriggerAddEventTimePeriodic(gt_RefugeeBehavior, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroy Barricade
//--------------------------------------------------------------------------------------------------
bool gt_DestroyBarricade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD4FFD9DC_g;
    int autoD4FFD9DC_u;
    unit autoD4FFD9DC_var;
    unitgroup autoCC0C2416_g;
    int autoCC0C2416_u;
    unit autoCC0C2416_var;
    unitgroup auto8CBE0A19_g;
    int auto8CBE0A19_u;
    unit auto8CBE0A19_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(UnitFromId(17)) == true)) {
        Wait((gv_nIGHT_DURATION - 60.0), c_timeGame);
        while (!((gv_inCinematic == false))) {
            Wait(1.0, c_timeGame);
        }
        TriggerEnable(gt_RocksDestroyed, true);
        libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(6, 8, 10, 12), "InfestedCivilianBurrowed", 0, gv_pLAYER_03_INFESTED_REFUGEES, RegionGetBoundsMax(RegionFromId(14)));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("BurrowInfestedTerranCampaignUp", 0)), c_orderQueueReplace);
        Wait(3.0, c_timeGame);
        autoD4FFD9DC_g = UnitLastCreatedGroup();
        autoD4FFD9DC_u = UnitGroupCount(autoD4FFD9DC_g, c_unitCountAll);
        for (;; autoD4FFD9DC_u -= 1) {
            autoD4FFD9DC_var = UnitGroupUnitFromEnd(autoD4FFD9DC_g, autoD4FFD9DC_u);
            if (autoD4FFD9DC_var == null) { break; }
            UnitGroupAdd(gv_rockDestroyers, autoD4FFD9DC_var);
            UnitIssueOrder(autoD4FFD9DC_var, OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(17)), c_orderQueueReplace);
        }
        libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(10, 12, 14, 16), "InfestedTerranCampaignBurrowed", 0, gv_pLAYER_03_INFESTED_REFUGEES, RegionGetBoundsMax(RegionFromId(14)));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("BurrowInfestedTerranCampaignUp", 0)), c_orderQueueReplace);
        Wait(3.0, c_timeGame);
        autoCC0C2416_g = UnitLastCreatedGroup();
        autoCC0C2416_u = UnitGroupCount(autoCC0C2416_g, c_unitCountAll);
        for (;; autoCC0C2416_u -= 1) {
            autoCC0C2416_var = UnitGroupUnitFromEnd(autoCC0C2416_g, autoCC0C2416_u);
            if (autoCC0C2416_var == null) { break; }
            UnitGroupAdd(gv_rockDestroyers, autoCC0C2416_var);
            UnitIssueOrder(autoCC0C2416_var, OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(17)), c_orderQueueReplace);
        }
        libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(0, 0, 1, 2), "InfestedAbominationBurrowed", 0, gv_pLAYER_03_INFESTED_REFUGEES, RegionGetBoundsMax(RegionFromId(14)));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("BurrowInfestedTerranCampaignUp", 0)), c_orderQueueReplace);
        Wait(3.0, c_timeGame);
        auto8CBE0A19_g = UnitLastCreatedGroup();
        auto8CBE0A19_u = UnitGroupCount(auto8CBE0A19_g, c_unitCountAll);
        for (;; auto8CBE0A19_u -= 1) {
            auto8CBE0A19_var = UnitGroupUnitFromEnd(auto8CBE0A19_g, auto8CBE0A19_u);
            if (auto8CBE0A19_var == null) { break; }
            UnitGroupAdd(gv_rockDestroyers, auto8CBE0A19_var);
            UnitIssueOrder(auto8CBE0A19_var, OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(17)), c_orderQueueReplace);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestroyBarricade_Init () {
    gt_DestroyBarricade = TriggerCreate("gt_DestroyBarricade_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rocks Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_RocksDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_TransmissionSouthBarricadeQ, true, false);
    while (true) {
        if ((UnitGroupCount(gv_rockDestroyers, c_unitCountAlive) == 0)) {
            return true;
        }

        UnitGroupIssueOrder(gv_rockDestroyers, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(UnitGroupUnit(gv_rockDestroyers, 1)), UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)))), c_orderQueueReplace);
        Wait(4.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RocksDestroyed_Init () {
    gt_RocksDestroyed = TriggerCreate("gt_RocksDestroyed_Func");
    TriggerEnable(gt_RocksDestroyed, false);
    TriggerAddEventUnitDied(gt_RocksDestroyed, UnitRefFromUnit(UnitFromId(17)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AICampaignStart(gv_pLAYER_03_INFESTED_REFUGEES);
    AICampaignStart(gv_pLAYER_04_INFESTEDREFUGEES);
    libNtve_gf_DeclareNextTown(gv_pLAYER_03_INFESTED_REFUGEES, UnitGetPosition(UnitFromId(118)));
    libNtve_gf_DeclareNextTown(gv_pLAYER_03_INFESTED_REFUGEES, UnitGetPosition(UnitFromId(31)));
    libNtve_gf_DeclareNextTown(gv_pLAYER_03_INFESTED_REFUGEES, UnitGetPosition(UnitFromId(38)));
    libNtve_gf_DeclareNextTown(gv_pLAYER_03_INFESTED_REFUGEES, UnitGetPosition(UnitFromId(29)));
    libNtve_gf_DeclareNextTown(gv_pLAYER_03_INFESTED_REFUGEES, UnitGetPosition(UnitFromId(35)));
    libNtve_gf_DeclareNextTown(gv_pLAYER_03_INFESTED_REFUGEES, UnitGetPosition(UnitFromId(30)));
    libNtve_gf_DeclareNextTown(gv_pLAYER_03_INFESTED_REFUGEES, UnitGetPosition(UnitFromId(36)));
    AINearestTownBullyRebuild(gv_pLAYER_03_INFESTED_REFUGEES, true);
    AISetDifficulty(gv_pLAYER_03_INFESTED_REFUGEES, c_diffPressForward, true);
    AISetDifficulty(gv_pLAYER_04_INFESTEDREFUGEES, c_diffPressForward, true);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_03_INFESTED_REFUGEES, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPlayer(gv_pLAYER_04_INFESTEDREFUGEES, PlayerGroupSingle(gv_pLAYER_01_USER));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nightly Attack Waves - P03 EN
//--------------------------------------------------------------------------------------------------
bool gt_NightlyAttackWavesP03EN_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_infestedBuildingsKilled <= 13) && (gv_areasCleared <= 0)) {
        TriggerExecute(gt_P03AttackWavesCleared0, true, false);
        return true;
    }

    if ((gv_infestedBuildingsKilled <= 30)) {
        TriggerExecute(gt_P03AttackWavesCleared12, true, false);
        return true;
    }

    if ((gv_infestedBuildingsKilled <= 50)) {
        TriggerExecute(gt_P03AttackWavesCleared34, true, false);
        return true;
    }

    if ((gv_infestedBuildingsKilled <= 70)) {
        TriggerExecute(gt_P03AttackWavesCleared56, true, false);
        return true;
    }

    if ((gv_infestedBuildingsKilled <= 90)) {
        TriggerExecute(gt_P03AttackWavesCleared78, true, false);
        return true;
    }

    if ((gv_infestedBuildingsKilled <= 110)) {
        TriggerExecute(gt_P03AttackWavesCleared910, true, false);
        return true;
    }

    TriggerExecute(gt_P03AttackWavesCleared11, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NightlyAttackWavesP03EN_Init () {
    gt_NightlyAttackWavesP03EN = TriggerCreate("gt_NightlyAttackWavesP03EN_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nightly Attack Waves - P03 HI
//--------------------------------------------------------------------------------------------------
bool gt_NightlyAttackWavesP03HI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_infestedBuildingsKilled <= 13) && (gv_areasCleared <= 0) && (gv_night <= 1)) {
        TriggerExecute(gt_P03AttackWavesCleared0, true, false);
        return true;
    }

    if (((gv_infestedBuildingsKilled <= 30) || (gv_night <= 2))) {
        gf_ResearchZergUpgrades(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergMeleeWeaponsLevel1");
        gf_ResearchZergUpgrades(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergMissileWeaponsLevel1");
        TriggerExecute(gt_P03AttackWavesCleared12, true, false);
        return true;
    }

    if (((gv_infestedBuildingsKilled <= 50) || (gv_night <= 3))) {
        gf_ResearchZergUpgrades(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergMeleeWeaponsLevel1");
        gf_ResearchZergUpgrades(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergMissileWeaponsLevel1");
        gf_ResearchZergUpgrades(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergGroundArmorsLevel1");
        TriggerExecute(gt_P03AttackWavesCleared34, true, false);
        return true;
    }

    if (((gv_infestedBuildingsKilled <= 70) || (gv_night <= 4))) {
        gf_ResearchZergUpgrades(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergMeleeWeaponsLevel1");
        gf_ResearchZergUpgrades(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergMeleeWeaponsLevel2");
        gf_ResearchZergUpgrades(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergMissileWeaponsLevel1");
        gf_ResearchZergUpgrades(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergGroundArmorsLevel1");
        TriggerExecute(gt_P03AttackWavesCleared56, true, false);
        return true;
    }

    if (((gv_infestedBuildingsKilled <= 90) || (gv_night <= 5))) {
        TriggerExecute(gt_P03AttackWavesCleared78, true, false);
        gf_ResearchZergUpgrades(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergMeleeWeaponsLevel1");
        gf_ResearchZergUpgrades(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergMeleeWeaponsLevel2");
        gf_ResearchZergUpgrades(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergMissileWeaponsLevel1");
        gf_ResearchZergUpgrades(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergMissileWeaponsLevel2");
        gf_ResearchZergUpgrades(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergGroundArmorsLevel1");
        return true;
    }

    if (((gv_infestedBuildingsKilled <= 110) || (gv_night <= 6))) {
        TriggerExecute(gt_P03AttackWavesCleared910, true, false);
        gf_ResearchZergUpgrades(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergMeleeWeaponsLevel1");
        gf_ResearchZergUpgrades(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergMeleeWeaponsLevel2");
        gf_ResearchZergUpgrades(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergMissileWeaponsLevel1");
        gf_ResearchZergUpgrades(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergMissileWeaponsLevel2");
        gf_ResearchZergUpgrades(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergGroundArmorsLevel1");
        gf_ResearchZergUpgrades(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ZergGroundArmorsLevel2");
        return true;
    }

    gf_ResearchZergUpgrades(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergMeleeWeaponsLevel1");
    gf_ResearchZergUpgrades(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergMeleeWeaponsLevel2");
    gf_ResearchZergUpgrades(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergMissileWeaponsLevel1");
    gf_ResearchZergUpgrades(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergMissileWeaponsLevel2");
    gf_ResearchZergUpgrades(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ZergGroundArmorsLevel1");
    gf_ResearchZergUpgrades(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ZergGroundArmorsLevel2");
    TriggerExecute(gt_P03AttackWavesCleared11, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NightlyAttackWavesP03HI_Init () {
    gt_NightlyAttackWavesP03HI = TriggerCreate("gt_NightlyAttackWavesP03HI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P03 Attack Waves - Cleared 0
//--------------------------------------------------------------------------------------------------
bool gt_P03AttackWavesCleared0_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(libNtve_gf_DifficultyValueFixed(80.0, 80.0, 50.0, 50.0), c_timeAI);
    gf_AttackWaveFromDirection(ge_AttackDirection_Left, 120, false, libNtve_gf_DifficultyValueInt(10, 10, 15, 25), 0, 0);
    Wait(10.0, c_timeAI);
    gf_AttackWaveFromDirection(ge_AttackDirection_Right, 120, false, libNtve_gf_DifficultyValueInt(10, 10, 25, 30), 0, 0);
    Wait(60.0, c_timeAI);
    gf_AttackWaveFromDirection(ge_AttackDirection_Left, 120, false, libNtve_gf_DifficultyValueInt(15, 15, 25, 40), 0, 0);
    Wait(10.0, c_timeAI);
    gf_AttackWaveFromDirection(ge_AttackDirection_Right, 120, false, libNtve_gf_DifficultyValueInt(15, 15, 25, 35), 0, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P03AttackWavesCleared0_Init () {
    gt_P03AttackWavesCleared0 = TriggerCreate("gt_P03AttackWavesCleared0_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P03 Attack Waves - Cleared 1-2
//--------------------------------------------------------------------------------------------------
bool gt_P03AttackWavesCleared12_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AttackWaveFromDirection(ge_AttackDirection_Left, 120, false, libNtve_gf_DifficultyValueInt(8, 8, 12, 16), libNtve_gf_DifficultyValueInt(4, 4, 6, 8), 0);
    Wait(60.0, c_timeAI);
    gf_AttackWaveFromDirection(ge_AttackDirection_Right, 120, false, libNtve_gf_DifficultyValueInt(8, 8, 12, 16), libNtve_gf_DifficultyValueInt(4, 4, 6, 8), 0);
    Wait(libNtve_gf_DifficultyValueFixed(100.0, 100.0, 70.0, 70.0), c_timeAI);
    gf_AttackWaveFromDirection(ge_AttackDirection_SouthLeftfallback, 120, false, libNtve_gf_DifficultyValueInt(15, 15, 30, 30), libNtve_gf_DifficultyValueInt(2, 2, 5, 8), 0);
    gf_AttackWaveFromDirection(ge_AttackDirection_SouthRightfallback, 120, false, libNtve_gf_DifficultyValueInt(0, 0, 0, 20), 0, 0);
    Wait(5.0, c_timeAI);
    gf_AttackWaveFromDirection(ge_AttackDirection_Right, 120, false, libNtve_gf_DifficultyValueInt(15, 15, 45, 70), libNtve_gf_DifficultyValueInt(2, 2, 5, 8), 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P03AttackWavesCleared12_Init () {
    gt_P03AttackWavesCleared12 = TriggerCreate("gt_P03AttackWavesCleared12_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P03 Attack Waves - Cleared 3-4
//--------------------------------------------------------------------------------------------------
bool gt_P03AttackWavesCleared34_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AttackWaveFromDirection(ge_AttackDirection_Right, 120, false, 0, libNtve_gf_DifficultyValueInt(8, 8, 10, 12), 0);
    Wait(30.0, c_timeAI);
    gf_AttackWaveFromDirection(ge_AttackDirection_Right, 120, false, 0, libNtve_gf_DifficultyValueInt(7, 7, 7, 7), 0);
    gf_AttackWaveFromDirection(ge_AttackDirection_Left, 120, false, 0, libNtve_gf_DifficultyValueInt(0, 0, 4, 7), 0);
    Wait(libNtve_gf_DifficultyValueFixed(60.0, 60.0, 30.0, 30.0), c_timeAI);
    gf_AttackWaveFromDirection(ge_AttackDirection_Right, 120, false, libNtve_gf_DifficultyValueInt(15, 15, 25, 0), libNtve_gf_DifficultyValueInt(2, 2, 4, 6), 0);
    gf_AttackWaveFromDirection(ge_AttackDirection_SouthLeftfallback, 120, false, libNtve_gf_DifficultyValueInt(0, 0, 0, 30), 0, 0);
    Wait(10.0, c_timeAI);
    gf_AttackWaveFromDirection(ge_AttackDirection_SouthLeftfallback, 120, false, libNtve_gf_DifficultyValueInt(10, 10, 15, 20), libNtve_gf_DifficultyValueInt(2, 2, 6, 8), libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
    Wait(60.0, c_timeAI);
    gf_AttackWaveFromDirection(ge_AttackDirection_Left, 120, false, libNtve_gf_DifficultyValueInt(10, 10, 20, 25), libNtve_gf_DifficultyValueInt(2, 2, 5, 8), libNtve_gf_DifficultyValueInt(1, 1, 1, 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P03AttackWavesCleared34_Init () {
    gt_P03AttackWavesCleared34 = TriggerCreate("gt_P03AttackWavesCleared34_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P03 Attack Waves - Cleared 5-6
//--------------------------------------------------------------------------------------------------
bool gt_P03AttackWavesCleared56_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AttackWaveFromDirection(ge_AttackDirection_Right, 120, false, 0, libNtve_gf_DifficultyValueInt(5, 5, 8, 10), libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
    Wait(30.0, c_timeAI);
    gf_AttackWaveFromDirection(ge_AttackDirection_Left, 120, false, libNtve_gf_DifficultyValueInt(20, 20, 25, 30), libNtve_gf_DifficultyValueInt(4, 4, 10, 8), libNtve_gf_DifficultyValueInt(1, 1, 1, 1));
    gf_AttackWaveFromDirection(ge_AttackDirection_SouthRightfallback, 120, false, 0, libNtve_gf_DifficultyValueInt(0, 0, 0, 7), libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
    Wait(libNtve_gf_DifficultyValueFixed(60.0, 60.0, 30.0, 30.0), c_timeAI);
    gf_AttackWaveFromDirection(ge_AttackDirection_SouthRightfallback, 120, false, libNtve_gf_DifficultyValueInt(8, 8, 12, 16), libNtve_gf_DifficultyValueInt(6, 6, 8, 10), 0);
    Wait(30.0, c_timeAI);
    gf_AttackWaveFromDirection(ge_AttackDirection_Left, 120, false, libNtve_gf_DifficultyValueInt(12, 12, 24, 18), 0, 0);
    gf_AttackWaveFromDirection(ge_AttackDirection_Right, 120, false, libNtve_gf_DifficultyValueInt(0, 0, 0, 18), 0, 0);
    Wait(15.0, c_timeAI);
    gf_AttackWaveFromDirection(ge_AttackDirection_Left, 120, false, 0, libNtve_gf_DifficultyValueInt(8, 8, 10, 12), libNtve_gf_DifficultyValueInt(0, 1, 1, 1));
    gf_AttackWaveFromDirection(ge_AttackDirection_SouthLeftfallback, 120, false, 0, 0, libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
    Wait(30.0, c_timeAI);
    gf_AttackWaveFromDirection(ge_AttackDirection_SouthLeftfallback, 120, false, 0, libNtve_gf_DifficultyValueInt(4, 4, 6, 8), libNtve_gf_DifficultyValueInt(0, 1, 1, 1));
    gf_AttackWaveFromDirection(ge_AttackDirection_SouthRightfallback, 120, false, libNtve_gf_DifficultyValueInt(0, 0, 15, 25), 0, libNtve_gf_DifficultyValueInt(1, 1, 1, 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P03AttackWavesCleared56_Init () {
    gt_P03AttackWavesCleared56 = TriggerCreate("gt_P03AttackWavesCleared56_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P03 Attack Waves - Cleared 7-8
//--------------------------------------------------------------------------------------------------
bool gt_P03AttackWavesCleared78_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AttackWaveFromDirection(ge_AttackDirection_SouthRightfallback, 120, false, libNtve_gf_DifficultyValueInt(4, 4, 6, 8), libNtve_gf_DifficultyValueInt(10, 10, 15, 10), 0);
    gf_AttackWaveFromDirection(ge_AttackDirection_Left, 120, false, 0, libNtve_gf_DifficultyValueInt(0, 0, 0, 5), libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
    Wait(10.0, c_timeAI);
    gf_AttackWaveFromDirection(ge_AttackDirection_Left, 120, false, 0, libNtve_gf_DifficultyValueInt(5, 5, 8, 10), libNtve_gf_DifficultyValueInt(0, 1, 1, 1));
    Wait(60.0, c_timeAI);
    gf_AttackWaveFromDirection(ge_AttackDirection_Right, 120, false, libNtve_gf_DifficultyValueInt(20, 20, 30, 45), libNtve_gf_DifficultyValueInt(6, 6, 0, 0), 0);
    gf_AttackWaveFromDirection(ge_AttackDirection_SouthLeftfallback, 120, false, 0, libNtve_gf_DifficultyValueInt(0, 0, 3, 5), libNtve_gf_DifficultyValueInt(1, 1, 1, 1));
    Wait(libNtve_gf_DifficultyValueFixed(60.0, 60.0, 30.0, 30.0), c_timeAI);
    gf_AttackWaveFromDirection(ge_AttackDirection_SouthLeftfallback, 120, false, 0, 0, libNtve_gf_DifficultyValueInt(0, 0, 1, 2));
    gf_AttackWaveFromDirection(ge_AttackDirection_Right, 120, false, libNtve_gf_DifficultyValueInt(0, 0, 15, 25), 0, libNtve_gf_DifficultyValueInt(0, 1, 1, 1));
    Wait(30.0, c_timeAI);
    gf_AttackWaveFromDirection(ge_AttackDirection_SouthLeftfallback, 120, false, 0, libNtve_gf_DifficultyValueInt(4, 4, 6, 8), libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
    gf_AttackWaveFromDirection(ge_AttackDirection_SouthRightfallback, 120, false, 0, libNtve_gf_DifficultyValueInt(8, 8, 12, 14), libNtve_gf_DifficultyValueInt(1, 1, 1, 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P03AttackWavesCleared78_Init () {
    gt_P03AttackWavesCleared78 = TriggerCreate("gt_P03AttackWavesCleared78_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P03 Attack Waves - Cleared 9-10
//--------------------------------------------------------------------------------------------------
bool gt_P03AttackWavesCleared910_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AttackWaveFromDirection(ge_AttackDirection_SouthLeftfallback, 120, false, 0, libNtve_gf_DifficultyValueInt(4, 4, 8, 10), libNtve_gf_DifficultyValueInt(0, 1, 1, 1));
    Wait(15.0, c_timeAI);
    gf_AttackWaveFromDirection(ge_AttackDirection_Right, 120, false, libNtve_gf_DifficultyValueInt(4, 4, 30, 40), libNtve_gf_DifficultyValueInt(5, 5, 2, 5), libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
    gf_AttackWaveFromDirection(ge_AttackDirection_Left, 120, false, 0, libNtve_gf_DifficultyValueInt(0, 0, 6, 6), libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
    Wait(45.0, c_timeAI);
    gf_AttackWaveFromDirection(ge_AttackDirection_Left, 120, false, libNtve_gf_DifficultyValueInt(12, 12, 40, 60), libNtve_gf_DifficultyValueInt(4, 4, 6, 8), 0);
    gf_AttackWaveFromDirection(ge_AttackDirection_SouthRightfallback, 120, false, libNtve_gf_DifficultyValueInt(0, 0, 20, 20), 0, 0);
    Wait(30.0, c_timeAI);
    gf_AttackWaveFromDirection(ge_AttackDirection_SouthRightfallback, 120, false, 0, libNtve_gf_DifficultyValueInt(2, 2, 3, 4), libNtve_gf_DifficultyValueInt(1, 1, 1, 2));
    gf_AttackWaveFromDirection(ge_AttackDirection_SouthLeftfallback, 120, false, 0, 0, libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
    Wait(30.0, c_timeAI);
    gf_AttackWaveFromDirection(ge_AttackDirection_SouthLeftfallback, 120, false, 0, libNtve_gf_DifficultyValueInt(8, 8, 10, 12), libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
    Wait(15.0, c_timeAI);
    gf_AttackWaveFromDirection(ge_AttackDirection_SouthRightfallback, 120, false, libNtve_gf_DifficultyValueInt(10, 10, 15, 20), 0, libNtve_gf_DifficultyValueInt(0, 1, 2, 2));
    Wait(libNtve_gf_DifficultyValueFixed(30.0, 30.0, 0.0, 0.0), c_timeAI);
    gf_AttackWaveFromDirection(ge_AttackDirection_SouthLeftfallback, 120, false, 0, libNtve_gf_DifficultyValueInt(8, 8, 10, 12), libNtve_gf_DifficultyValueInt(1, 1, 1, 2));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P03AttackWavesCleared910_Init () {
    gt_P03AttackWavesCleared910 = TriggerCreate("gt_P03AttackWavesCleared910_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P03 Attack Waves - Cleared 11+
//--------------------------------------------------------------------------------------------------
bool gt_P03AttackWavesCleared11_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AttackWaveFromDirection(ge_AttackDirection_SouthRightfallback, 120, false, 0, libNtve_gf_DifficultyValueInt(4, 4, 20, 10), libNtve_gf_DifficultyValueInt(0, 1, 1, 1));
    gf_AttackWaveFromDirection(ge_AttackDirection_SouthLeftfallback, 120, false, 0, libNtve_gf_DifficultyValueInt(0, 0, 0, 15), libNtve_gf_DifficultyValueInt(0, 0, 1, 2));
    Wait(30.0, c_timeAI);
    gf_AttackWaveFromDirection(ge_AttackDirection_SouthLeftfallback, 120, false, libNtve_gf_DifficultyValueInt(15, 15, 50, 60), libNtve_gf_DifficultyValueInt(4, 4, 0, 0), libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
    gf_AttackWaveFromDirection(ge_AttackDirection_SouthRightfallback, 120, false, libNtve_gf_DifficultyValueInt(0, 0, 20, 30), 0, libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
    Wait(libNtve_gf_DifficultyValueFixed(60.0, 60.0, 30.0, 30.0), c_timeAI);
    gf_AttackWaveFromDirection(ge_AttackDirection_SouthRightfallback, 120, false, 0, libNtve_gf_DifficultyValueInt(10, 10, 15, 20), 0);
    Wait(30.0, c_timeAI);
    gf_AttackWaveFromDirection(ge_AttackDirection_SouthRightfallback, 120, false, 0, libNtve_gf_DifficultyValueInt(4, 4, 8, 10), libNtve_gf_DifficultyValueInt(1, 1, 1, 2));
    Wait(30.0, c_timeAI);
    gf_AttackWaveFromDirection(ge_AttackDirection_SouthRightfallback, 120, false, libNtve_gf_DifficultyValueInt(15, 15, 35, 45), 0, libNtve_gf_DifficultyValueInt(0, 0, 2, 2));
    Wait(15.0, c_timeAI);
    gf_AttackWaveFromDirection(ge_AttackDirection_SouthLeftfallback, 120, false, 0, libNtve_gf_DifficultyValueInt(4, 4, 15, 20), libNtve_gf_DifficultyValueInt(1, 1, 1, 2));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P03AttackWavesCleared11_Init () {
    gt_P03AttackWavesCleared11 = TriggerCreate("gt_P03AttackWavesCleared11_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Bunker Up Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBunkerUpQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson02Raynor00010", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Raynor00010", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("THanson02Tychus00020", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Tychus00020", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBunkerUpQ_Init () {
    gt_TransmissionBunkerUpQ = TriggerCreate("gt_TransmissionBunkerUpQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - South Barricade Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSouthBarricadeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/8C423762"), null, RegionGetCenter(RegionFromId(7)));
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(7)), 2.0, Color(100.00, 0.00, 0.00));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson02Raynor00033", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Raynor00033", -1), c_transmissionDurationAdd, 1.0, true);
    // Transmission - SoundLink("THanson02Tychus00018", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Tychus00018", -1), c_transmissionDurationAdd, 1.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionSouthBarricadeQ_Init () {
    gt_TransmissionSouthBarricadeQ = TriggerCreate("gt_TransmissionSouthBarricadeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Show Remaining Infested Structures Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionShowRemainingInfestedStructuresQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_finalFive = true;
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson02Horner00035", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Horner00035", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionShowRemainingInfestedStructuresQ_Init () {
    gt_TransmissionShowRemainingInfestedStructuresQ = TriggerCreate("gt_TransmissionShowRemainingInfestedStructuresQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Hellion Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHellionIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson02Swann00001", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Swann00001", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionHellionIntroQ_Init () {
    gt_TransmissionHellionIntroQ = TriggerCreate("gt_TransmissionHellionIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Infestation First Sight Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionInfestationFirstSightQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson02Hanson00008", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Hanson00008", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionInfestationFirstSightQ_Init () {
    gt_TransmissionInfestationFirstSightQ = TriggerCreate("gt_TransmissionInfestationFirstSightQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Infested Refugee Sighted Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionInfestedRefugeeSightedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;
    unit lv_pickedInfestedCiv;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "InfestedCivilian"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pickedInfestedCiv = EventUnit();
    lv_point = UnitGetPosition(lv_pickedInfestedCiv);
    if ((RegionContainsPoint(RegionCircle(UnitGetPosition(lv_pickedInfestedCiv), 10.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringToText(""), null, lv_pickedInfestedCiv);
        UnitFlashSelection(lv_pickedInfestedCiv, 1.0);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson02InfestedRefugee00005", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02InfestedRefugee00005", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionInfestedRefugeeSightedQ_Init () {
    gt_TransmissionInfestedRefugeeSightedQ = TriggerCreate("gt_TransmissionInfestedRefugeeSightedQ_Func");
    TriggerAddEventUnitDamaged(gt_TransmissionInfestedRefugeeSightedQ, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Infested Marine Sighted Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionInfestedMarineSightedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;
    unit lv_pickedInfestedMarine;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "InfestedTerranCampaign"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pickedInfestedMarine = EventUnit();
    lv_point = UnitGetPosition(lv_pickedInfestedMarine);
    if ((RegionContainsPoint(RegionCircle(UnitGetPosition(lv_pickedInfestedMarine), 10.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringToText(""), null, lv_pickedInfestedMarine);
        UnitFlashSelection(lv_pickedInfestedMarine, 1.0);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson02Tychus00006", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Tychus00006", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionInfestedMarineSightedQ_Init () {
    gt_TransmissionInfestedMarineSightedQ = TriggerCreate("gt_TransmissionInfestedMarineSightedQ_Func");
    TriggerAddEventUnitDamaged(gt_TransmissionInfestedMarineSightedQ, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Aberration Sighted Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAberrationSightedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "InfestedAbomination"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_pickedInfestedUnit = EventUnit();
    lv_point = UnitGetPosition(gv_pickedInfestedUnit);
    if ((RegionContainsPoint(RegionCircle(UnitGetPosition(gv_pickedInfestedUnit), 12.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libNtve_gf_AttachModelToUnit(gv_pickedInfestedUnit, "BriefingUnitSelectRed", "Ref_Origin");
        gv_aberrationSelectionActor = libNtve_gf_ActorLastCreated();
        TriggerEnable(gt_ClearActoronAberration, true);
        TriggerQueueEnter();
        UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringToText(""), null, gv_pickedInfestedUnit);
        UnitFlashSelection(gv_pickedInfestedUnit, 1.0);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson02Hanson00034", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Hanson00034", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
        TriggerEnable(gt_ClearActoronAberration, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionAberrationSightedQ_Init () {
    gt_TransmissionAberrationSightedQ = TriggerCreate("gt_TransmissionAberrationSightedQ_Func");
    TriggerAddEventUnitDamaged(gt_TransmissionAberrationSightedQ, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Infestors At Night Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionInfestorsAtNightQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson02Adjutant00019", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Adjutant00019", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("THanson02Horner00007", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Horner00007", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionInfestorsAtNightQ_Init () {
    gt_TransmissionInfestorsAtNightQ = TriggerCreate("gt_TransmissionInfestorsAtNightQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Infestation Area Clear Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionInfestationAreaClearQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_random;

    // Automatic Variable Declarations
    int autoD9A2EFF3_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_finalFive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_random = RandomInt(1, 6);
    autoD9A2EFF3_val = lv_random;
    if (autoD9A2EFF3_val == 1) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson02Raynor00009", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Raynor00009", -1), c_transmissionDurationAdd, 1.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else if (autoD9A2EFF3_val == 2) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson02Hanson00012", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Hanson00012", -1), c_transmissionDurationAdd, 1.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else if (autoD9A2EFF3_val == 3) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson02Raynor00013", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Raynor00013", -1), c_transmissionDurationAdd, 1.0, false);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else if (autoD9A2EFF3_val == 4) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson02Raynor00016", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Raynor00016", -1), c_transmissionDurationAdd, 1.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else if (autoD9A2EFF3_val == 5) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson02Hanson00014", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Hanson00014", -1), c_transmissionDurationAdd, 1.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else if (autoD9A2EFF3_val == 6) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson02Hanson00041", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Hanson00041", -1), c_transmissionDurationAdd, 1.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionInfestationAreaClearQ_Init () {
    gt_TransmissionInfestationAreaClearQ = TriggerCreate("gt_TransmissionInfestationAreaClearQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Day/Night in 30 Seconds Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDayNightin30SecondsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_timeOfDay == ge_PRESET_TimeOfDay_Night)) {
        if ((gv_night == 1)) {
            TriggerQueueEnter();
            libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
            libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
            // Transmission - SoundLink("THanson02Raynor00011", 0)
            libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Raynor00011", -1), c_transmissionDurationAdd, 0.0, true);
            libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
            TriggerQueueExit();
        }
        else {
            TriggerQueueEnter();
            libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
            libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
            // Transmission - SoundLink("THanson02Adjutant00030", 0)
            libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Adjutant00030", -1), c_transmissionDurationAdd, 1.0, true);
            libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
            TriggerQueueExit();
        }
    }
    else {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson02Adjutant00031", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Adjutant00031", -1), c_transmissionDurationAdd, 1.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDayNightin30SecondsQ_Init () {
    gt_TransmissionDayNightin30SecondsQ = TriggerCreate("gt_TransmissionDayNightin30SecondsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Daytime Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDaytimeQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_random;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_random = RandomInt(1, 5);
    Wait(5.0, c_timeGame);
    if ((gv_day == 1)) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson02Raynor00022", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Raynor00022", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }

    if ((gv_day == 2)) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson02Hanson00038", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Hanson00038", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }

    if ((gv_day == 3)) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson02Tychus00036", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Tychus00036", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }

    if ((gv_day == 4)) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson02Raynor00037", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Raynor00037", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }

    if ((gv_day == 5)) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson02Tychus00039", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Tychus00039", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }

    if ((lv_random == 1) && (gv_day >= 6)) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson02Tychus00024", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Tychus00024", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }

    if ((lv_random == 2) && (gv_day >= 6)) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson02Raynor00028", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Raynor00028", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }

    if ((lv_random == 3) && (gv_day >= 6)) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson02Raynor00029", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Raynor00029", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }

    if ((lv_random == 4) && (gv_day >= 6)) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson02Tychus00032", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Tychus00032", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }

    if ((lv_random == 5) && (gv_day >= 6)) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson02Tychus00039", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Tychus00039", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDaytimeQ_Init () {
    gt_TransmissionDaytimeQ = TriggerCreate("gt_TransmissionDaytimeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Night Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionNightQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_random;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_random = RandomInt(1, 3);
    Wait(5.0, c_timeGame);
    if ((gv_night == 1)) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson02Raynor00026", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Raynor00026", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }

    if ((gv_night == 2)) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson02Hanson00025", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Hanson00025", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }

    if ((gv_night == 3)) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson02Raynor00021", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Raynor00021", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }

    if ((lv_random == 1) && (gv_night >= 4)) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson02Raynor00021", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Raynor00021", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }

    if ((lv_random == 2) && (gv_night >= 4)) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson02Tychus00023", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Tychus00023", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }

    if ((lv_random == 3) && (gv_night >= 4)) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson02Hanson00025", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Hanson00025", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }

    Wait(2.0, c_timeGame);
    SoundPlay(SoundLink("Event_Hanson02ZombieHowl", -1), PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionNightQ_Init () {
    gt_TransmissionNightQ = TriggerCreate("gt_TransmissionNightQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clear Actor on Aberration
//--------------------------------------------------------------------------------------------------
bool gt_ClearActoronAberration_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_aberrationSelectionActor);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClearActoronAberration_Init () {
    gt_ClearActoronAberration = TriggerCreate("gt_ClearActoronAberration_Func");
    TriggerEnable(gt_ClearActoronAberration, false);
    TriggerAddEventUnitDied(gt_ClearActoronAberration, UnitRefFromVariable("gv_pickedInfestedUnit"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Campaign tips Q
//--------------------------------------------------------------------------------------------------
bool gt_CampaigntipsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_CreateStorymodeTips();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CampaigntipsQ_Init () {
    gt_CampaigntipsQ = TriggerCreate("gt_CampaigntipsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sensor Tower Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_SensorTowerTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Hanson02_SensorTower", libNtve_ge_TipType_NewStructure, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SensorTowerTipQ_Init () {
    gt_SensorTowerTipQ = TriggerCreate("gt_SensorTowerTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hellion Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_HellionTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Hanson02_Hellion", libNtve_ge_TipType_NewUnit, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HellionTipQ_Init () {
    gt_HellionTipQ = TriggerCreate("gt_HellionTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Day and Night Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_DayandNightTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Hanson02_DayNight", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DayandNightTipQ_Init () {
    gt_DayandNightTipQ = TriggerCreate("gt_DayandNightTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - Structures Razed at Night
//--------------------------------------------------------------------------------------------------
bool gt_StatStructuresRazedatNight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_timeOfDay == ge_PRESET_TimeOfDay_Night))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_statStructuresRazedAtNight += 1;
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1) && (gv_statStructuresRazedAtNight == 15)) {
        AchievementAward(gv_pLAYER_01_USER, "THanson02_3");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatStructuresRazedatNight_Init () {
    gt_StatStructuresRazedatNight = TriggerCreate("gt_StatStructuresRazedatNight_Func");
    TriggerAddEventUnitDied(gt_StatStructuresRazedatNight, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory - Infestation Purged
//--------------------------------------------------------------------------------------------------
bool gt_VictoryInfestationPurged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, null, UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TimerWindowDestroy(gv_mainTimerWindow);
    TimerPause(gv_mainTimer, true);
    TimerPause(gv_transitionToDay, true);
    TimerPause(gv_transitionToNight, true);
    TriggerExecute(gt_ObjectiveCleansetheInfestationComplete, true, true);
    libCamp_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryInfestationPurged_Init () {
    gt_VictoryInfestationPurged = TriggerCreate("gt_VictoryInfestationPurged_Func");
    TriggerEnable(gt_VictoryInfestationPurged, false);
    TriggerAddEventTimePeriodic(gt_VictoryInfestationPurged, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((ObjectiveGetState(gv_objectiveCleanseInfestation) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_researchObjectiveKilltheInfestors) == c_objectiveStateCompleted)) {
        AchievementAward(gv_pLAYER_01_USER, "THanson02_1");
    }

    if ((gv_night < 5) && (libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1)) {
        AchievementAward(gv_pLAYER_01_USER, "THanson02_2");
    }

    if ((gv_night < 4) && (libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1)) {
        AchievementAward(gv_pLAYER_01_USER, "Anniversary_THanson02");
        TriggerDebugOutput(1, StringExternal("Param/Value/1A140166"), false);
    }

    VictoryPanelAddAchievement("THanson02_1");
    VictoryPanelAddAchievement("THanson02_2");
    VictoryPanelAddAchievement("THanson02_3");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddTrackedStatistic("StructuresKilledCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/F585A1A6"), IntToText(gv_statStructuresRazedAtNight));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/1512A504"), IntToText(gv_night));
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/B6804ED8"), (IntToText(gv_infestorsKilled) + StringExternal("Param/Value/BCE6AC3F") + StringExternal("Param/Value/3B792088")));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/9E1B78B5"), IntToText(gv_infestorsKilled));
    libCamp_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat - Base Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, 0), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/DB9293B2"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDestroyed_Init () {
    gt_DefeatBaseDestroyed = TriggerCreate("gt_DefeatBaseDestroyed_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDestroyed, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    libCamp_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Cleanse the Infestation - Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCleansetheInfestationCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate((StringExternal("Param/Value/A583A361") + TextReplaceWord(StringExternal("Param/Value/DDDA8C18"), StringExternal("Param/Value/F10F8990"), IntToText(UnitGroupCount(UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, null, UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, 0, 0), 0), c_unitCountAlive)), c_stringReplaceAll, c_stringCase) + StringExternal("Param/Value/4FE95072")), StringExternal("Param/Value/43FE14C8"), c_objectiveStateActive, true);
    gv_objectiveCleanseInfestation = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_THanson02Objective1, ObjectiveLastCreated(), StringExternal("Param/Value/35E5FAF4"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCleansetheInfestationCreateQ_Init () {
    gt_ObjectiveCleansetheInfestationCreateQ = TriggerCreate("gt_ObjectiveCleansetheInfestationCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Cleanse the Infestation - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCleansetheInfestationUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveCleansetheInfestationCreateQ, true, true);
    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, null, UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1)) {
        ObjectiveSetName(gv_objectiveCleanseInfestation, (StringExternal("Param/Value/BA6F0E37") + IntToText(UnitGroupCount(UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, null, UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, 0, 0), 0), c_unitCountAlive)) + StringExternal("Param/Value/1446FF91")));
    }
    else {
        ObjectiveSetName(gv_objectiveCleanseInfestation, (StringExternal("Param/Value/690CCCB9") + IntToText(UnitGroupCount(UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, null, UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, 0, 0), 0), c_unitCountAlive)) + StringExternal("Param/Value/DDD57FA0")));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCleansetheInfestationUpdate_Init () {
    gt_ObjectiveCleansetheInfestationUpdate = TriggerCreate("gt_ObjectiveCleansetheInfestationUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Cleanse the Infestation - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCleansetheInfestationComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveCleansetheInfestationCreateQ, true, false);
    ObjectiveSetState(gv_objectiveCleanseInfestation, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCleansetheInfestationComplete_Init () {
    gt_ObjectiveCleansetheInfestationComplete = TriggerCreate("gt_ObjectiveCleansetheInfestationComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Cleanse the Infestation - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCleansetheInfestationFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveCleansetheInfestationCreateQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCleansetheInfestationFailed_Init () {
    gt_ObjectiveCleansetheInfestationFailed = TriggerCreate("gt_ObjectiveCleansetheInfestationFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Research Objective Kill the Infestors Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ResearchObjectiveKilltheInfestorsCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate((StringExternal("Param/Value/DBD089CB") + IntToText(gv_infestorsKilled) + StringExternal("Param/Value/2148E280")), StringExternal("Param/Value/84F789E6"), c_objectiveStateActive, false);
    gv_researchObjectiveKilltheInfestors = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_THanson02Objective2, ObjectiveLastCreated(), StringExternal("Param/Value/AE390633"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResearchObjectiveKilltheInfestorsCreateQ_Init () {
    gt_ResearchObjectiveKilltheInfestorsCreateQ = TriggerCreate("gt_ResearchObjectiveKilltheInfestorsCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Research Objective Kill the Infestors Update
//--------------------------------------------------------------------------------------------------
bool gt_ResearchObjectiveKilltheInfestorsUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Infestor") || (UnitGetType(EventUnit()) == "InfestorBurrowed")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_DisplayResearchPointsGiventoPlayer(libCamp_ge_StoryResearchObject_ResearchObjectKilltheInfestors, EventUnit(), gv_pLAYER_01_USER);
    TriggerExecute(gt_ResearchObjectiveKilltheInfestorsCreateQ, true, false);
    gv_infestorsKilled += 1;
    ObjectiveSetName(gv_researchObjectiveKilltheInfestors, (StringExternal("Param/Value/27F95A51") + IntToText(gv_infestorsKilled) + StringExternal("Param/Value/8FD1A811")));
    if ((gv_infestorsKilled == 2)) {
        TriggerExecute(gt_ResearchObjectiveKilltheInfestorsComplete, true, false);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResearchObjectiveKilltheInfestorsUpdate_Init () {
    gt_ResearchObjectiveKilltheInfestorsUpdate = TriggerCreate("gt_ResearchObjectiveKilltheInfestorsUpdate_Func");
    TriggerAddEventUnitDied(gt_ResearchObjectiveKilltheInfestorsUpdate, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Research Objective Kill the Infestors Complete
//--------------------------------------------------------------------------------------------------
bool gt_ResearchObjectiveKilltheInfestorsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ResearchObjectiveKilltheInfestorsCreateQ, true, false);
    ObjectiveSetState(gv_researchObjectiveKilltheInfestors, c_objectiveStateCompleted);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResearchObjectiveKilltheInfestorsComplete_Init () {
    gt_ResearchObjectiveKilltheInfestorsComplete = TriggerCreate("gt_ResearchObjectiveKilltheInfestorsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1D795B71_g;
    int auto1D795B71_u;
    unit auto1D795B71_var;
    unitgroup auto256BA00D_g;
    int auto256BA00D_u;
    unit auto256BA00D_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_StartGame);
    TriggerStop(gt_MapInitialInfestation);
    TriggerStop(gt_InfestationSpawning);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    gv_inCinematic = true;
    gv_gameOver = true;
    GameSetToDLighting("MeinhoffCampaignDay");
    GameTimeOfDaySet("12:00:00");
    libNtve_gf_SetAlliance(gv_pLAYER_03_INFESTED_REFUGEES, gv_pLAYER_02_REFUGEES, libNtve_ge_AllianceSetting_Enemy);
    UnitRemove(UnitFromId(459));
    gv_briefingCinematicUnits = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1D795B71_g = gv_briefingCinematicUnits;
    auto1D795B71_u = UnitGroupCount(auto1D795B71_g, c_unitCountAll);
    for (;; auto1D795B71_u -= 1) {
        auto1D795B71_var = UnitGroupUnitFromEnd(auto1D795B71_g, auto1D795B71_u);
        if (auto1D795B71_var == null) { break; }
        UnitRemove(auto1D795B71_var);
    }
    auto256BA00D_g = UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, RegionFromId(5), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto256BA00D_u = UnitGroupCount(auto256BA00D_g, c_unitCountAll);
    for (;; auto256BA00D_u -= 1) {
        auto256BA00D_var = UnitGroupUnitFromEnd(auto256BA00D_g, auto256BA00D_u);
        if (auto256BA00D_var == null) { break; }
        UnitBehaviorRemove(auto256BA00D_var, "ColonyInfestation", 1);
    }
    UnitPauseAll(true);
    AITimePause(true);
    TimerPause(gv_mainTimer, true);
    TimerPause(gv_transitionToNight, true);
    GameTimeOfDayPause(true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_BriefingScene00, true, true);
    TriggerExecute(gt_BriefingScene01, true, true);
    TriggerExecute(gt_BriefingScene05, true, true);
    TriggerExecute(gt_BriefingScene02, true, true);
    TriggerExecute(gt_BriefingScene03, true, true);
    TriggerExecute(gt_BriefingScene04, true, true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UnitPauseAll(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(322), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(464), (SoundLengthSync(SoundLink("THanson02BriefingRaynor00002", 0)) + SoundLengthSync(SoundLink("THanson02BriefingHanson00010", -1))), -1, 10, true);
    MovieStartRecording("Briefing_Video_THanson02_00");
    TriggerExecute(gt_BriefingScene00Infestation, true, false);
    // Transmission - SoundLink("THanson02BriefingRaynor00002", -1)
    SoundPlay(SoundLink("THanson02BriefingRaynor00002", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THanson02BriefingRaynor00002", 0))), c_timeReal);
    // Transmission - SoundLink("THanson02BriefingHanson00010", -1)
    SoundPlay(SoundLink("THanson02BriefingHanson00010", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THanson02BriefingHanson00010", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson02BriefingRaynor00002", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson02BriefingHanson00010", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00_Init () {
    gt_BriefingScene00 = TriggerCreate("gt_BriefingScene00_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(10), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(56), (SoundLengthSync(SoundLink("THanson02BriefingRaynor00011", 0)) + SoundLengthSync(SoundLink("THanson02BriefingRaynor00006", -1))), -1, 10, true);
    MovieStartRecording("Briefing_Video_THanson02_01");
    TriggerExecute(gt_BriefingScene01Infestation2, true, false);
    // Transmission - SoundLink("THanson02BriefingRaynor00011", -1)
    SoundPlay(SoundLink("THanson02BriefingRaynor00011", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THanson02BriefingRaynor00011", 0))), c_timeReal);
    // Transmission - SoundLink("THanson02BriefingRaynor00006", -1)
    SoundPlay(SoundLink("THanson02BriefingRaynor00006", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THanson02BriefingRaynor00006", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson02BriefingRaynor00011", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson02BriefingRaynor00006", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01_Init () {
    gt_BriefingScene01 = TriggerCreate("gt_BriefingScene01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 05
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene05_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1831), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1832), (SoundLengthSync(SoundLink("THanson02BriefingRaynor00007", 0)) + 0.0), -1, 10, true);
    MovieStartRecording("Briefing_Video_THanson02_05");
    UnitBehaviorAdd(UnitFromId(14), "ColonyInfestation", gv_mainInfestor, 1);
    // Transmission - SoundLink("THanson02BriefingRaynor00007", -1)
    SoundPlay(SoundLink("THanson02BriefingRaynor00007", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((0.1 * SoundLengthSync(SoundLink("THanson02BriefingRaynor00007", 0))), c_timeReal);
    UnitBehaviorAdd(UnitFromId(57), "ColonyInfestation", gv_mainInfestor, 1);
    Wait((0.1 * SoundLengthSync(SoundLink("THanson02BriefingRaynor00007", 0))), c_timeReal);
    UnitBehaviorAdd(UnitFromId(78), "ColonyInfestation", gv_mainInfestor, 1);
    Wait((0.8 * SoundLengthSync(SoundLink("THanson02BriefingRaynor00007", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson02BriefingRaynor00007", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene05_Init () {
    gt_BriefingScene05 = TriggerCreate("gt_BriefingScene05_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 02
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetLighting("MeinhoffCampaignNight", 10.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(313), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    MovieStartRecording("Briefing_Video_THanson02_02");
    // Transmission - SoundLink("THanson02BriefingHanson00012", -1)
    SoundPlay(SoundLink("THanson02BriefingHanson00012", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THanson02BriefingHanson00012", 0))), c_timeReal);
    TriggerExecute(gt_BriefingScene02InfestedUnburrow, true, false);
    // Transmission - SoundLink("THanson02BriefingHanson00008", -1)
    SoundPlay(SoundLink("THanson02BriefingHanson00008", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THanson02BriefingHanson00008", 0))), c_timeReal);
    Wait(2.0, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(907), 3.0, -1, 10, true);
    // Transmission - SoundLink("THanson02BriefingHanson00001", -1)
    SoundPlay(SoundLink("THanson02BriefingHanson00001", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THanson02BriefingHanson00001", 0))), c_timeReal);
    // Transmission - SoundLink("THanson02BriefingRaynor00003", -1)
    SoundPlay(SoundLink("THanson02BriefingRaynor00003", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THanson02BriefingRaynor00003", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson02BriefingHanson00012", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson02BriefingHanson00008", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson02BriefingHanson00001", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson02BriefingRaynor00003", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene02_Init () {
    gt_BriefingScene02 = TriggerCreate("gt_BriefingScene02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 03
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_tempUnitGroup;
    unit lv_randomUnit;

    // Automatic Variable Declarations
    const int auto9980B5B2_ae = 10;
    const int auto9980B5B2_ai = 1;
    const int auto5F96F25C_ae = 12;
    const int auto5F96F25C_ai = 1;
    unitgroup autoC97EAC7D_g;
    int autoC97EAC7D_u;
    unit autoC97EAC7D_var;

    // Variable Initialization
    lv_tempUnitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetLighting("MeinhoffCampaignDay", 4.0);
    lv_i = 1;
    for ( ; ( (auto9980B5B2_ai >= 0 && lv_i <= auto9980B5B2_ae) || (auto9980B5B2_ai < 0 && lv_i >= auto9980B5B2_ae) ) ; lv_i += auto9980B5B2_ai ) {
        UnitCreate(1, "InfestedCivilian", 0, gv_pLAYER_04_INFESTEDREFUGEES, RegionRandomPoint(RegionFromId(44)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_tempUnitGroup, UnitLastCreated());
    }
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(61), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    MovieStartRecording("Briefing_Video_THanson02_03");
    // Transmission - SoundLink("THanson02BriefingHanson00005", -1)
    SoundPlay(SoundLink("THanson02BriefingHanson00005", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(0.75, c_timeReal);
    while ((UnitGroupCount(lv_tempUnitGroup, c_unitCountAlive) >= 1)) {
        lv_randomUnit = UnitGroupRandomUnit(lv_tempUnitGroup, c_unitCountAlive);
        UnitIssueOrder(lv_randomUnit, Order(AbilityCommand("BurrowInfestedTerranCampaignDown", 0)), c_orderQueueReplace);
        UnitGroupRemove(lv_tempUnitGroup, lv_randomUnit);
        Wait(0.1, c_timeReal);
    }
    Wait(2.25, c_timeReal);
    lv_i = 1;
    for ( ; ( (auto5F96F25C_ai >= 0 && lv_i <= auto5F96F25C_ae) || (auto5F96F25C_ai < 0 && lv_i >= auto5F96F25C_ae) ) ; lv_i += auto5F96F25C_ai ) {
        UnitCreate(1, "InfestedCivilian", 0, gv_pLAYER_04_INFESTEDREFUGEES, RegionRandomPoint(RegionFromId(45)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_tempUnitGroup, UnitLastCreated());
    }
    autoC97EAC7D_g = UnitGroup("InfestedCivilian", gv_pLAYER_04_INFESTEDREFUGEES, RegionCircle(RegionGetCenter(RegionFromId(45)), 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC97EAC7D_u = UnitGroupCount(autoC97EAC7D_g, c_unitCountAll);
    for (;; autoC97EAC7D_u -= 1) {
        autoC97EAC7D_var = UnitGroupUnitFromEnd(autoC97EAC7D_g, autoC97EAC7D_u);
        if (autoC97EAC7D_var == null) { break; }
        UnitIssueOrder(autoC97EAC7D_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(45))), c_orderQueueReplace);
    }
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(232), 0.0, -1, 10, true);
    Wait(1.0, c_timeReal);
    while ((UnitGroupCount(lv_tempUnitGroup, c_unitCountAlive) >= 1)) {
        lv_randomUnit = UnitGroupRandomUnit(lv_tempUnitGroup, c_unitCountAlive);
        UnitBehaviorAdd(lv_randomUnit, "SolarCombustion", lv_randomUnit, 1);
        UnitGroupRemove(lv_tempUnitGroup, lv_randomUnit);
        Wait(0.15, c_timeReal);
    }
    Wait((1.0 * SoundLengthSync(SoundLink("THanson02BriefingHanson00005", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson02BriefingHanson00005", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene03_Init () {
    gt_BriefingScene03 = TriggerCreate("gt_BriefingScene03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 04
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bunker1;
    unit lv_bunker2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetLighting("MeinhoffCampaignNight", 0.0);
    UnitSetOwner(UnitFromId(7), gv_pLAYER_02_REFUGEES, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER_02_REFUGEES, PointFromId(653));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER_02_REFUGEES, PointFromId(376));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER_02_REFUGEES, PointFromId(484));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER_02_REFUGEES, PointFromId(498));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    libNtve_gf_CreateUnitsAtPoint2(1, "Firebat", 0, gv_pLAYER_02_REFUGEES, PointFromId(863));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    libNtve_gf_CreateUnitsAtPoint2(1, "Firebat", 0, gv_pLAYER_02_REFUGEES, PointFromId(864));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    libNtve_gf_CreateUnitsAtPoint2(1, "Medic", 0, gv_pLAYER_02_REFUGEES, PointFromId(866));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    libNtve_gf_CreateUnitsAtPoint2(1, "Medic", 0, gv_pLAYER_02_REFUGEES, PointFromId(865));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    TriggerExecute(gt_BriefingScene03BaseDefense, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(471), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(477), SoundLengthSync(SoundLink("THanson02BriefingRaynor00004", 0)), -1, 10, true);
    MovieStartRecording("Briefing_Video_THanson02_04");
    // Transmission - SoundLink("THanson02BriefingRaynor00004", 0)
    SoundPlay(SoundLink("THanson02BriefingRaynor00004", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THanson02BriefingRaynor00004", 0))), c_timeReal);
    // Transmission - SoundLink("THanson02BriefingRaynor00009", 0)
    SoundPlay(SoundLink("THanson02BriefingRaynor00009", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THanson02BriefingRaynor00009", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson02BriefingRaynor00004", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson02BriefingRaynor00009", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene04_Init () {
    gt_BriefingScene04 = TriggerCreate("gt_BriefingScene04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00 Infestation
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00Infestation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(3.0, c_timeGame);
    UnitBehaviorAdd(UnitFromId(35), "ColonyInfestation", gv_mainInfestor, 1);
    Wait(0.75, c_timeGame);
    UnitBehaviorAdd(UnitFromId(488), "ColonyInfestation", gv_mainInfestor, 1);
    Wait(0.8, c_timeGame);
    UnitBehaviorAdd(UnitFromId(629), "ColonyInfestation", gv_mainInfestor, 1);
    Wait(1.25, c_timeGame);
    UnitBehaviorAdd(UnitFromId(489), "ColonyInfestation", gv_mainInfestor, 1);
    Wait(0.8, c_timeGame);
    UnitBehaviorAdd(UnitFromId(487), "ColonyInfestation", gv_mainInfestor, 1);
    Wait(1.0, c_timeGame);
    UnitBehaviorAdd(UnitFromId(486), "ColonyInfestation", gv_mainInfestor, 1);
    Wait(0.5, c_timeGame);
    UnitBehaviorAdd(UnitFromId(41), "ColonyInfestation", gv_mainInfestor, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00Infestation_Init () {
    gt_BriefingScene00Infestation = TriggerCreate("gt_BriefingScene00Infestation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01 Infestation 2
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01Infestation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    UnitBehaviorAdd(UnitFromId(36), "ColonyInfestation", gv_mainInfestor, 1);
    Wait(0.5, c_timeGame);
    UnitBehaviorAdd(UnitFromId(37), "ColonyInfestation", gv_mainInfestor, 1);
    Wait(1.5, c_timeGame);
    UnitBehaviorAdd(UnitFromId(496), "ColonyInfestation", gv_mainInfestor, 1);
    Wait(0.5, c_timeGame);
    UnitBehaviorAdd(UnitFromId(493), "ColonyInfestation", gv_mainInfestor, 1);
    Wait(1.0, c_timeGame);
    UnitBehaviorAdd(UnitFromId(494), "ColonyInfestation", gv_mainInfestor, 1);
    Wait(0.5, c_timeGame);
    UnitBehaviorAdd(UnitFromId(12), "ColonyInfestation", gv_mainInfestor, 1);
    Wait(0.75, c_timeGame);
    UnitBehaviorAdd(UnitFromId(846), "ColonyInfestation", gv_mainInfestor, 1);
    Wait(1.0, c_timeGame);
    UnitBehaviorAdd(UnitFromId(845), "ColonyInfestation", gv_mainInfestor, 1);
    Wait(0.5, c_timeGame);
    UnitBehaviorAdd(UnitFromId(518), "ColonyInfestation", gv_mainInfestor, 1);
    Wait(1.0, c_timeGame);
    UnitBehaviorAdd(UnitFromId(47), "ColonyInfestation", gv_mainInfestor, 1);
    Wait(0.5, c_timeGame);
    UnitBehaviorAdd(UnitFromId(58), "ColonyInfestation", gv_mainInfestor, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01Infestation2_Init () {
    gt_BriefingScene01Infestation2 = TriggerCreate("gt_BriefingScene01Infestation2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 02 Infested Unburrow
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene02InfestedUnburrow_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_infestedTerranGroup;

    // Automatic Variable Declarations
    unitgroup auto669B24B4_g;
    int auto669B24B4_u;
    unit auto669B24B4_var;
    unitgroup autoFD5ED9C1_g;
    int autoFD5ED9C1_u;
    unit autoFD5ED9C1_var;
    unitgroup auto02F40A8F_g;
    int auto02F40A8F_u;
    unit auto02F40A8F_var;
    unitgroup auto7E9BDCD5_g;
    int auto7E9BDCD5_u;
    unit auto7E9BDCD5_var;
    unitgroup autoCE485447_g;
    int autoCE485447_u;
    unit autoCE485447_var;
    unitgroup autoCAF87352_g;
    int autoCAF87352_u;
    unit autoCAF87352_var;
    unitgroup auto15FDB82C_g;
    int auto15FDB82C_u;
    unit auto15FDB82C_var;
    unitgroup auto4DD72F10_g;
    int auto4DD72F10_u;
    unit auto4DD72F10_var;

    // Variable Initialization
    lv_infestedTerranGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    Wait((0.5 * SoundLengthSync(SoundLink("THanson02BriefingHanson00008", 0))), c_timeReal);
    libNtve_gf_CreateUnitsAtPoint2(1, "InfestedCivilianBurrowed", 0, gv_pLAYER_04_INFESTEDREFUGEES, PointFromId(173));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("BurrowInfestedTerranCampaignUp", 0)), c_orderQueueReplace);
    auto669B24B4_g = UnitGroup("InfestedCivilian", gv_pLAYER_04_INFESTEDREFUGEES, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto669B24B4_u = UnitGroupCount(auto669B24B4_g, c_unitCountAll);
    for (;; auto669B24B4_u -= 1) {
        auto669B24B4_var = UnitGroupUnitFromEnd(auto669B24B4_g, auto669B24B4_u);
        if (auto669B24B4_var == null) { break; }
        UnitIssueOrder(auto669B24B4_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(481)), c_orderQueueAddToEnd);
    }
    Wait(0.75, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "InfestedCivilianBurrowed", 0, gv_pLAYER_04_INFESTEDREFUGEES, PointFromId(315));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("BurrowInfestedTerranCampaignUp", 0)), c_orderQueueReplace);
    autoFD5ED9C1_g = UnitGroup("InfestedCivilian", gv_pLAYER_04_INFESTEDREFUGEES, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFD5ED9C1_u = UnitGroupCount(autoFD5ED9C1_g, c_unitCountAll);
    for (;; autoFD5ED9C1_u -= 1) {
        autoFD5ED9C1_var = UnitGroupUnitFromEnd(autoFD5ED9C1_g, autoFD5ED9C1_u);
        if (autoFD5ED9C1_var == null) { break; }
        UnitIssueOrder(autoFD5ED9C1_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(481)), c_orderQueueAddToEnd);
    }
    Wait(0.75, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "InfestedCivilianBurrowed", 0, gv_pLAYER_04_INFESTEDREFUGEES, PointFromId(318));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("BurrowInfestedTerranCampaignUp", 0)), c_orderQueueReplace);
    auto02F40A8F_g = UnitGroup("InfestedCivilian", gv_pLAYER_04_INFESTEDREFUGEES, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto02F40A8F_u = UnitGroupCount(auto02F40A8F_g, c_unitCountAll);
    for (;; auto02F40A8F_u -= 1) {
        auto02F40A8F_var = UnitGroupUnitFromEnd(auto02F40A8F_g, auto02F40A8F_u);
        if (auto02F40A8F_var == null) { break; }
        UnitIssueOrder(auto02F40A8F_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(481)), c_orderQueueAddToEnd);
    }
    Wait(0.75, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "InfestedCivilianBurrowed", 0, gv_pLAYER_04_INFESTEDREFUGEES, PointFromId(319));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("BurrowInfestedTerranCampaignUp", 0)), c_orderQueueReplace);
    auto7E9BDCD5_g = UnitGroup("InfestedCivilian", gv_pLAYER_04_INFESTEDREFUGEES, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7E9BDCD5_u = UnitGroupCount(auto7E9BDCD5_g, c_unitCountAll);
    for (;; auto7E9BDCD5_u -= 1) {
        auto7E9BDCD5_var = UnitGroupUnitFromEnd(auto7E9BDCD5_g, auto7E9BDCD5_u);
        if (auto7E9BDCD5_var == null) { break; }
        UnitIssueOrder(auto7E9BDCD5_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(481)), c_orderQueueAddToEnd);
    }
    Wait(0.75, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "InfestedCivilianBurrowed", 0, gv_pLAYER_04_INFESTEDREFUGEES, PointFromId(321));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("BurrowInfestedTerranCampaignUp", 0)), c_orderQueueReplace);
    autoCE485447_g = UnitGroup("InfestedCivilian", gv_pLAYER_04_INFESTEDREFUGEES, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCE485447_u = UnitGroupCount(autoCE485447_g, c_unitCountAll);
    for (;; autoCE485447_u -= 1) {
        autoCE485447_var = UnitGroupUnitFromEnd(autoCE485447_g, autoCE485447_u);
        if (autoCE485447_var == null) { break; }
        UnitIssueOrder(autoCE485447_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(481)), c_orderQueueAddToEnd);
    }
    Wait(2.0, c_timeGame);
    gf_BriefingSpawnInfestedColonists(1, "InfestedCivilianBurrowed", RegionFromId(36));
    Wait(0.75, c_timeGame);
    gf_BriefingSpawnInfestedColonists(3, "InfestedCivilianBurrowed", RegionFromId(24));
    Wait(0.75, c_timeGame);
    gf_BriefingSpawnInfestedColonists(1, "InfestedCivilianBurrowed", RegionFromId(36));
    gf_BriefingSpawnInfestedColonists(1, "InfestedCivilianBurrowed", RegionFromId(15));
    Wait(0.75, c_timeGame);
    gf_BriefingSpawnInfestedColonists(2, "InfestedCivilianBurrowed", RegionFromId(15));
    Wait(0.75, c_timeGame);
    gf_BriefingSpawnInfestedColonists(2, "InfestedCivilianBurrowed", RegionFromId(23));
    Wait(0.75, c_timeGame);
    gf_BriefingSpawnInfestedColonists(4, "InfestedCivilianBurrowed", RegionFromId(24));
    Wait(0.75, c_timeGame);
    gf_BriefingSpawnInfestedColonists(3, "InfestedCivilianBurrowed", RegionFromId(25));
    Wait(0.75, c_timeGame);
    gf_BriefingSpawnInfestedColonists(5, "InfestedCivilianBurrowed", RegionFromId(26));
    Wait(0.75, c_timeGame);
    gf_BriefingSpawnInfestedColonists(3, "InfestedCivilianBurrowed", RegionFromId(27));
    Wait(2.0, c_timeGame);
    autoCAF87352_g = UnitGroup("InfestedCivilian", gv_pLAYER_04_INFESTEDREFUGEES, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCAF87352_u = UnitGroupCount(autoCAF87352_g, c_unitCountAll);
    for (;; autoCAF87352_u -= 1) {
        autoCAF87352_var = UnitGroupUnitFromEnd(autoCAF87352_g, autoCAF87352_u);
        if (autoCAF87352_var == null) { break; }
        UnitIssueOrder(autoCAF87352_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(481)), c_orderQueueAddToEnd);
    }
    Wait(0.75, c_timeGame);
    gf_BriefingSpawnInfestedColonists(3, "InfestedCivilianBurrowed", RegionFromId(25));
    Wait(0.75, c_timeGame);
    gf_BriefingSpawnInfestedColonists(5, "InfestedCivilianBurrowed", RegionFromId(26));
    Wait(0.75, c_timeGame);
    gf_BriefingSpawnInfestedColonists(3, "InfestedCivilianBurrowed", RegionFromId(27));
    Wait(2.0, c_timeGame);
    auto15FDB82C_g = UnitGroup("InfestedCivilian", gv_pLAYER_04_INFESTEDREFUGEES, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto15FDB82C_u = UnitGroupCount(auto15FDB82C_g, c_unitCountAll);
    for (;; auto15FDB82C_u -= 1) {
        auto15FDB82C_var = UnitGroupUnitFromEnd(auto15FDB82C_g, auto15FDB82C_u);
        if (auto15FDB82C_var == null) { break; }
        UnitIssueOrder(auto15FDB82C_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(481)), c_orderQueueAddToEnd);
    }
    Wait(2.0, c_timeGame);
    gf_BriefingSpawnInfestedColonists(3, "InfestedCivilianBurrowed", RegionFromId(25));
    Wait(0.75, c_timeGame);
    gf_BriefingSpawnInfestedColonists(5, "InfestedCivilianBurrowed", RegionFromId(26));
    Wait(0.75, c_timeGame);
    gf_BriefingSpawnInfestedColonists(3, "InfestedCivilianBurrowed", RegionFromId(27));
    Wait(2.0, c_timeGame);
    auto4DD72F10_g = UnitGroup("InfestedCivilian", gv_pLAYER_04_INFESTEDREFUGEES, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4DD72F10_u = UnitGroupCount(auto4DD72F10_g, c_unitCountAll);
    for (;; auto4DD72F10_u -= 1) {
        auto4DD72F10_var = UnitGroupUnitFromEnd(auto4DD72F10_g, auto4DD72F10_u);
        if (auto4DD72F10_var == null) { break; }
        UnitIssueOrder(auto4DD72F10_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(481)), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene02InfestedUnburrow_Init () {
    gt_BriefingScene02InfestedUnburrow = TriggerCreate("gt_BriefingScene02InfestedUnburrow_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 03 Base Defense
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene03BaseDefense_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(7, "InfestedCivilian", 0, gv_pLAYER_03_INFESTED_REFUGEES, RegionRandomPoint(RegionFromId(29)));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(230)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(6, "InfestedCivilian", 0, gv_pLAYER_03_INFESTED_REFUGEES, RegionRandomPoint(RegionFromId(30)));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(230)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(7, "InfestedCivilian", 0, gv_pLAYER_03_INFESTED_REFUGEES, RegionRandomPoint(RegionFromId(31)));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(230)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(6, "InfestedCivilian", 0, gv_pLAYER_03_INFESTED_REFUGEES, RegionRandomPoint(RegionFromId(32)));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(230)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(6, "InfestedCivilian", 0, gv_pLAYER_03_INFESTED_REFUGEES, RegionRandomPoint(RegionFromId(33)));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(230)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(6, "InfestedCivilian", 0, gv_pLAYER_03_INFESTED_REFUGEES, RegionRandomPoint(RegionFromId(35)));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(230)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(7, "InfestedCivilian", 0, gv_pLAYER_03_INFESTED_REFUGEES, RegionRandomPoint(RegionFromId(37)));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(230)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(5, "InfestedCivilian", 0, gv_pLAYER_03_INFESTED_REFUGEES, RegionRandomPoint(RegionFromId(38)));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(230)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(6, "InfestedCivilian", 0, gv_pLAYER_03_INFESTED_REFUGEES, RegionRandomPoint(RegionFromId(35)));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(230)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(6, "InfestedCivilian", 0, gv_pLAYER_03_INFESTED_REFUGEES, RegionRandomPoint(RegionFromId(37)));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(230)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(5, "InfestedCivilian", 0, gv_pLAYER_03_INFESTED_REFUGEES, RegionRandomPoint(RegionFromId(38)));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(230)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene03BaseDefense_Init () {
    gt_BriefingScene03BaseDefense = TriggerCreate("gt_BriefingScene03BaseDefense_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA3EA5808_g;
    int autoA3EA5808_u;
    unit autoA3EA5808_var;
    unitgroup auto8062DE98_g;
    int auto8062DE98_u;
    unit auto8062DE98_var;
    unitgroup autoC6A0BB64_g;
    int autoC6A0BB64_u;
    unit autoC6A0BB64_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameSetLighting("MeinhoffCampaignNight", 0.0);
    GameTimeOfDayPause(true);
    TimerPause(gv_mainTimer, true);
    TimerPause(gv_transitionToDay, true);
    TimerPause(gv_transitionToNight, true);
    UnitPauseAll(true);
    autoA3EA5808_g = UnitGroup("SCV", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA3EA5808_u = UnitGroupCount(autoA3EA5808_g, c_unitCountAll);
    for (;; autoA3EA5808_u -= 1) {
        autoA3EA5808_var = UnitGroupUnitFromEnd(autoA3EA5808_g, autoA3EA5808_u);
        if (autoA3EA5808_var == null) { break; }
        libNtve_gf_PauseUnit(autoA3EA5808_var, false);
    }
    auto8062DE98_g = UnitGroup(null, gv_pLAYER_03_INFESTED_REFUGEES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8062DE98_u = UnitGroupCount(auto8062DE98_g, c_unitCountAll);
    for (;; auto8062DE98_u -= 1) {
        auto8062DE98_var = UnitGroupUnitFromEnd(auto8062DE98_g, auto8062DE98_u);
        if (auto8062DE98_var == null) { break; }
        UnitRemove(auto8062DE98_var);
    }
    autoC6A0BB64_g = UnitGroup(null, gv_pLAYER_04_INFESTEDREFUGEES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC6A0BB64_u = UnitGroupCount(autoC6A0BB64_g, c_unitCountAll);
    for (;; autoC6A0BB64_u -= 1) {
        autoC6A0BB64_var = UnitGroupUnitFromEnd(autoC6A0BB64_g, autoC6A0BB64_u);
        if (autoC6A0BB64_var == null) { break; }
        UnitRemove(autoC6A0BB64_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8AF64AEF_g;
    int auto8AF64AEF_u;
    unit auto8AF64AEF_var;

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetBackground(c_backgroundFixed, "AiurSkybox", 100.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(720), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(719), SoundLengthSync(SoundLink("THanson02Hanson00067", -1)), -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_victoryCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THanson02MusicOutro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    // Transmission - SoundLink("THanson02Hanson00067", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Hanson00067", -1), c_transmissionDurationAdd, 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(721), (SoundLengthSync(SoundLink("THanson02Raynor00002", -1)) - 1.0), -1, 10, true);
    // Transmission - SoundLink("THanson02Raynor00002", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Raynor00002", -1), c_transmissionDurationAdd, 0.0, true);
    auto8AF64AEF_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8AF64AEF_u = UnitGroupCount(auto8AF64AEF_g, c_unitCountAll);
    for (;; auto8AF64AEF_u -= 1) {
        auto8AF64AEF_var = UnitGroupUnitFromEnd(auto8AF64AEF_g, auto8AF64AEF_u);
        if (auto8AF64AEF_var == null) { break; }
        UnitRemove(auto8AF64AEF_var);
    }
    TriggerExecute(gt_VictoryDropships, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(722), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(723), SoundLengthSync(SoundLink("THanson02Hanson00015", -1)), -1, 10, true);
    // Transmission - SoundLink("THanson02Hanson00015", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson02Hanson00015", -1), c_transmissionDurationAdd, 0.0, true);
    Wait(2.0, c_timeReal);
    CinematicFade(false, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_victoryCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victoryCinematicCompleted == true)) {
        lv_fadeDuration = 3.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(lv_fadeDuration, c_timeReal);
    UnitPauseAll(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Dropships
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDropships_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "ColonistShipFlying", 0, gv_pLAYER_01_USER, PointFromId(708));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, 4.0);
    UnitSetHeight(UnitLastCreated(), 6.0, 10.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(713)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "ColonistShipFlying", 0, gv_pLAYER_01_USER, PointFromId(709));
    UnitSetHeight(UnitLastCreated(), 5.0, 10.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(286)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDropships_Init () {
    gt_VictoryDropships = TriggerCreate("gt_VictoryDropships_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04Music_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_IntroSequence_Init();
    gt_StartGame_Init();
    gt_FirstNight_Init();
    gt_InitialAttack_Init();
    gt_MapInitialInfestation_Init();
    gt_TimerCycling_Init();
    gt_InfestorCycling_Init();
    gt_InfestorNorthFoundEarly_Init();
    gt_InfestorSouthFoundEarly_Init();
    gt_InfestorsBurrowUnburrow_Init();
    gt_CreatePingsWhenInfestedUnburrows_Init();
    gt_RemovePingsWhenInfestorBurrows_Init();
    gt_DestroyPingsWhenInfestorKilled_Init();
    gt_InfestorBehavior_Init();
    gt_InfestorCooldown_Init();
    gt_PlayDayMusic_Init();
    gt_PlayNightMusic_Init();
    gt_TransitionToDay_Init();
    gt_TransitionToNight_Init();
    gt_SolarCombustionCheck_Init();
    gt_UpdateSpawnSettings_Init();
    gt_InfestationSpawning_Init();
    gt_ShowRemainingInfestedStructures_Init();
    gt_RemoveInfestedStructurePing_Init();
    gt_InfestationFirstSight_Init();
    gt_ClearActoronInfestedBuilding_Init();
    gt_NightDefenderReaction_Init();
    gt_NightDefenderPing_Init();
    gt_NightDefenderReactionQ_Init();
    gt_InfestedBuildingDies_Init();
    gt_AreaRevealers_Init();
    gt_InfestedAreasClear_Init();
    gt_InfestedAreaBullies_Init();
    gt_IntroHellions_Init();
    gt_ChangeOwnerofFactory_Init();
    gt_RefugeeBehavior_Init();
    gt_DestroyBarricade_Init();
    gt_RocksDestroyed_Init();
    gt_StartAI_Init();
    gt_NightlyAttackWavesP03EN_Init();
    gt_NightlyAttackWavesP03HI_Init();
    gt_P03AttackWavesCleared0_Init();
    gt_P03AttackWavesCleared12_Init();
    gt_P03AttackWavesCleared34_Init();
    gt_P03AttackWavesCleared56_Init();
    gt_P03AttackWavesCleared78_Init();
    gt_P03AttackWavesCleared910_Init();
    gt_P03AttackWavesCleared11_Init();
    gt_TransmissionBunkerUpQ_Init();
    gt_TransmissionSouthBarricadeQ_Init();
    gt_TransmissionShowRemainingInfestedStructuresQ_Init();
    gt_TransmissionHellionIntroQ_Init();
    gt_TransmissionInfestationFirstSightQ_Init();
    gt_TransmissionInfestedRefugeeSightedQ_Init();
    gt_TransmissionInfestedMarineSightedQ_Init();
    gt_TransmissionAberrationSightedQ_Init();
    gt_TransmissionInfestorsAtNightQ_Init();
    gt_TransmissionInfestationAreaClearQ_Init();
    gt_TransmissionDayNightin30SecondsQ_Init();
    gt_TransmissionDaytimeQ_Init();
    gt_TransmissionNightQ_Init();
    gt_ClearActoronAberration_Init();
    gt_CampaigntipsQ_Init();
    gt_SensorTowerTipQ_Init();
    gt_HellionTipQ_Init();
    gt_DayandNightTipQ_Init();
    gt_StatStructuresRazedatNight_Init();
    gt_VictoryInfestationPurged_Init();
    gt_Victory_Init();
    gt_DefeatBaseDestroyed_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_ObjectiveCleansetheInfestationCreateQ_Init();
    gt_ObjectiveCleansetheInfestationUpdate_Init();
    gt_ObjectiveCleansetheInfestationComplete_Init();
    gt_ObjectiveCleansetheInfestationFailed_Init();
    gt_ResearchObjectiveKilltheInfestorsCreateQ_Init();
    gt_ResearchObjectiveKilltheInfestorsUpdate_Init();
    gt_ResearchObjectiveKilltheInfestorsComplete_Init();
    gt_BriefingQ_Init();
    gt_BriefingScene00_Init();
    gt_BriefingScene01_Init();
    gt_BriefingScene05_Init();
    gt_BriefingScene02_Init();
    gt_BriefingScene03_Init();
    gt_BriefingScene04_Init();
    gt_BriefingScene00Infestation_Init();
    gt_BriefingScene01Infestation2_Init();
    gt_BriefingScene02InfestedUnburrow_Init();
    gt_BriefingScene03BaseDefense_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryDropships_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
