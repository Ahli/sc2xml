//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Supernova
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/CampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libCamp_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER01_USER = 1;
const int gv_pLAYER02_PROTOSS = 2;
const int gv_pLAYER03_PROTOSS = 3;
const int gv_pLAYER04_PROTOSS = 4;
const int gv_pLAYER05_RELICS = 5;
const int gv_pLAYER06_RESOURCES = 6;
const int gv_pLAYER08_DEATHSUN = 8;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
playergroup gv_protossPlayers;
unitgroup gv_stage1Enemies;
bool gv_gameOver;
bool gv_inCinematic;
unit gv_artifactPiece;
unit gv_artifactVault;
int gv_artifactVault_Ping;
unit gv_superWarpGateP02;
unit gv_superWarpGateP03;
unit gv_superWarpGateP04;
unit gv_wALLOFFIRE;
timer gv_wall_of_Fire_Lighting;
int gv_clearLZ_Ping;
unitgroup gv_resourceGroup_P03Base;
unitgroup gv_resourcesGroup;
unitgroup gv_critterGroup;
unitgroup gv_playerP01Base;
unitgroup gv_protossP03Base;
unitgroup gv_protossP02WarpPrisms;
unitgroup gv_templarMergingGroup;
unitgroup gv_bansheeGroup;
unitgroup gv_relic01AreaGroup;
actor gv_pingActor1;
actor gv_pingActor2;
int gv_dEBUG_TIME;
timer gv_dEBUG_TIMER;
fixed gv_wall_of_Fire_Speed;
int[21] gv_wall_of_Fire_Ping;
int gv_ping_Increment;
fixed gv_ping_VertSpace_Increment;
revealer gv_wall_of_Fire_Revealer;
region gv_wall_of_Fire_DamageRegion;
region gv_wall_of_Fire_VisionRegion;
int gv_wall_of_Fire_Sound_Counter;
int gv_achievementBansheeCloakedKills;
bool gv_achievementBansheeKillsUnlocked;
bool gv_achievementBarracksOrFactoryUnitBuilt;
int gv_achievementPlayerUnitsKilledByFire;
int gv_statProtoss_Killed_By_Fire;
int gv_statProtoss_Structures_Remaining;
int gv_objectiveClearTheLZ;
int gv_objectiveDestroyTheArtifactVault;
int gv_researchObjectiveProtossRelics;
int gv_protossRelicsFound;
int gv_protossRelicsTotal;
unit gv_cinematic_WallOfFire;
bool gv_midCinematicCompleted;
unitgroup gv_midCineTempPlayerGroup;
unit gv_midCineDropship;
unit gv_geyser01;
unit gv_geyser02;
bool gv_victoryCinematicCompleted;
unitgroup gv_victoryHiddenUnitGroup;

void InitGlobals () {
    gv_protossPlayers = PlayerGroupEmpty();
    gv_stage1Enemies = UnitGroupEmpty();
    gv_wall_of_Fire_Lighting = TimerCreate();
    gv_resourceGroup_P03Base = UnitGroupEmpty();
    gv_resourcesGroup = UnitGroupEmpty();
    gv_critterGroup = UnitGroupEmpty();
    gv_playerP01Base = UnitGroupEmpty();
    gv_protossP03Base = UnitGroupEmpty();
    gv_protossP02WarpPrisms = UnitGroupEmpty();
    gv_templarMergingGroup = UnitGroupEmpty();
    gv_bansheeGroup = UnitGroupEmpty();
    gv_relic01AreaGroup = UnitGroupEmpty();
    gv_dEBUG_TIMER = TimerCreate();
    gv_objectiveClearTheLZ = c_invalidObjectiveId;
    gv_objectiveDestroyTheArtifactVault = c_invalidObjectiveId;
    gv_researchObjectiveProtossRelics = c_invalidObjectiveId;
    gv_midCineTempPlayerGroup = UnitGroupEmpty();
    gv_geyser01 = UnitFromId(15);
    gv_geyser02 = UnitFromId(5);
    gv_victoryHiddenUnitGroup = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_SetUnitMaxStats (unit lp_u, fixed lp_maxShields, fixed lp_maxLife);
void gf_WarpPrismDefendersWarpIn (unit lp_pickedSuperWarpGate, int lp_count, abilcmd lp_trainCmd, point lp_center, fixed lp_radius, fixed lp_angleOffset, fixed lp_intervalOffsets);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04Music;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_IntroSequence;
trigger gt_StartGameStage1;
trigger gt_StartGameStage2;
trigger gt_StartHarvesting;
trigger gt_Stage1Leashes;
trigger gt_AreaClearStage2;
trigger gt_ArtifactVaultPing;
trigger gt_PingDetectorCannon;
trigger gt_RemoveCannonPing;
trigger gt_CreateWallofFire;
trigger gt_WallofFirePing;
trigger gt_WallofFireDamage;
trigger gt_ShareWallofFireVision;
trigger gt_SetWallofFireLighting;
trigger gt_WallofFireAtP03ProtossBase;
trigger gt_ProtossP03FinalActions;
trigger gt_WallofFireFirstWarning;
trigger gt_WallofFireEmergencyWarning;
trigger gt_WallofFireSpeedUp;
trigger gt_WallofFireSlowDown;
trigger gt_RemoveResources;
trigger gt_WarpPrismSpawninBaseDefenders;
trigger gt_StartAI;
trigger gt_ProtossP02AttackWaves;
trigger gt_ProtossP03AttackWaves;
trigger gt_ProtossP04AttackWaves;
trigger gt_ProtossP04GivesUp;
trigger gt_AIGiveMinerals;
trigger gt_AIGiveGas;
trigger gt_TransmissionIntroBansheesQ;
trigger gt_TransmissionCloakDetectorsQ;
trigger gt_TransmissionTaldarimIntroAgainQ;
trigger gt_TransmissionTaldarimYouWinThisTimeQ;
trigger gt_TransmissionAdjutantFirearrivalQ;
trigger gt_TransmissionAdjutantFireFirstWarningQ;
trigger gt_TransmissionHornerEmergencyFireWarningQ;
trigger gt_TransmissionHornerP04ProtossBaseFoundQ;
trigger gt_TransmissionP04BaseDestroyedQ;
trigger gt_CampaignTipsQ;
trigger gt_NewUnitBansheeTipQ;
trigger gt_NewAbilityCloakTipQ;
trigger gt_WallofFireTipQ;
trigger gt_MigrationTip;
trigger gt_AchievementBanshee75CloakedKills;
trigger gt_AchievementBarracksOrFactoryUnitNotBuilt;
trigger gt_AchievementPlayerUnitsKilledbyFire;
trigger gt_ProtossKilledbyFireWave;
trigger gt_ProtossStructuresRemaining;
trigger gt_VictoryDestroytheArtifactVaultCompleted;
trigger gt_Victory;
trigger gt_DefeatBaseDead;
trigger gt_DefeatVaultDestroyed;
trigger gt_DefeatBansheeGroupDead;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_ObjectiveCleartheLZCreateQ;
trigger gt_ObjectiveCleartheLZComplete;
trigger gt_ObjectiveCleartheLZFailed;
trigger gt_ObjectiveDestroytheArtifactVaultCreateQ;
trigger gt_ObjectiveDestroytheArtifactVaultComplete;
trigger gt_ObjectiveDestroytheArtifactVaultFailed;
trigger gt_ResearchObjectiveProtossRelicsCreateQ;
trigger gt_ResearchObjectiveProtossRelicsUpdate;
trigger gt_ResearchObjectiveProtossRelicsComplete;
trigger gt_BriefingQ;
trigger gt_BriefingScene00;
trigger gt_BriefingScene01;
trigger gt_BriefingScene02;
trigger gt_BriefingScene03;
trigger gt_BriefingScene04;
trigger gt_BriefingBaseMove;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_SetUnitMaxStats (unit lp_u, fixed lp_maxShields, fixed lp_maxLife) {
    // Automatic Variable Declarations
    // Implementation
    UnitSetPropertyFixed(lp_u, c_unitPropLifeMax, lp_maxLife);
    UnitSetPropertyFixed(lp_u, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(lp_u, c_unitPropShieldsMax, lp_maxShields);
    UnitSetPropertyFixed(lp_u, c_unitPropShieldsPercent, 100.0);
}

void gf_WarpPrismDefendersWarpIn (unit lp_pickedSuperWarpGate, int lp_count, abilcmd lp_trainCmd, point lp_center, fixed lp_radius, fixed lp_angleOffset, fixed lp_intervalOffsets) {
    // Variable Declarations
    fixed lv_unitInterval;
    fixed lv_currentDegree;

    // Automatic Variable Declarations
    int auto89D056BF_n;
    int auto89D056BF_i;

    // Variable Initialization

    // Implementation
    lv_unitInterval = (360.0 / IntToFixed(lp_count));
    lv_currentDegree = (lp_angleOffset + (lp_intervalOffsets * lv_unitInterval));
    auto89D056BF_n = lp_count;
    for (auto89D056BF_i = 1; auto89D056BF_i <= auto89D056BF_n; auto89D056BF_i += 1) {
        UnitIssueOrder(lp_pickedSuperWarpGate, OrderTargetingPoint(lp_trainCmd, PointWithOffsetPolar(lp_center, lp_radius, lv_currentDegree)), c_orderQueueAddToEnd);
        lv_currentDegree = (lv_currentDegree + lv_unitInterval);
        Wait(libNtve_gf_DifficultyValueFixed(0.5, 0.5, 0.2, 0.1), c_timeGame);
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_LoadCampaignData(libCamp_ge_MapID_MapTTychus04);
    TriggerExecute(gt_Init01Technology, true, true);
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04Music, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    libCamp_gf_RegisterFootageRecording(gt_BriefingQ);
    libCamp_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_IntroSequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsBanshee, gv_pLAYER01_USER);
    TechTreeAbilityAllow(gv_pLAYER02_PROTOSS, AbilityCommand("Blink", 0), false);
    TechTreeAbilityAllow(gv_pLAYER03_PROTOSS, AbilityCommand("Blink", 0), false);
    TechTreeAbilityAllow(gv_pLAYER04_PROTOSS, AbilityCommand("Blink", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_protossPlayers, gv_pLAYER02_PROTOSS);
    PlayerGroupAdd(gv_protossPlayers, gv_pLAYER03_PROTOSS);
    PlayerGroupAdd(gv_protossPlayers, gv_pLAYER04_PROTOSS);
    libNtve_gf_SetAlliance(gv_pLAYER01_USER, gv_pLAYER02_PROTOSS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER01_USER, gv_pLAYER03_PROTOSS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER01_USER, gv_pLAYER04_PROTOSS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER01_USER, gv_pLAYER05_RELICS, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER01_USER, gv_pLAYER06_RESOURCES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER02_PROTOSS, gv_pLAYER03_PROTOSS, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER02_PROTOSS, gv_pLAYER04_PROTOSS, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER03_PROTOSS, gv_pLAYER04_PROTOSS, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER02_PROTOSS, gv_pLAYER06_RESOURCES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER03_PROTOSS, gv_pLAYER06_RESOURCES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER04_PROTOSS, gv_pLAYER06_RESOURCES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER05_RELICS, gv_pLAYER08_DEATHSUN, libNtve_ge_AllianceSetting_Neutral);
    PlayerModifyPropertyInt(gv_pLAYER01_USER, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 350);
    PlayerModifyPropertyInt(gv_pLAYER01_USER, c_playerPropVespene, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER02_PROTOSS, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER02_PROTOSS, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER03_PROTOSS, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER03_PROTOSS, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER04_PROTOSS, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER04_PROTOSS, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerSetColorIndex(gv_pLAYER02_PROTOSS, 3, true);
    PlayerSetColorIndex(gv_pLAYER03_PROTOSS, 3, true);
    PlayerSetColorIndex(gv_pLAYER04_PROTOSS, 3, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF7B43037_g;
    int autoF7B43037_u;
    unit autoF7B43037_var;
    unitgroup auto42415A1B_g;
    int auto42415A1B_u;
    unit auto42415A1B_var;
    unitgroup autoB2DC0B78_g;
    int autoB2DC0B78_u;
    unit autoB2DC0B78_var;
    unitgroup auto6F8A2CE3_g;
    int auto6F8A2CE3_u;
    unit auto6F8A2CE3_var;
    unitgroup autoC862ACAE_g;
    int autoC862ACAE_u;
    unit autoC862ACAE_var;
    unitgroup auto92E92A6A_g;
    int auto92E92A6A_u;
    unit auto92E92A6A_var;
    unitgroup auto12BF0F43_g;
    int auto12BF0F43_u;
    unit auto12BF0F43_var;
    unitgroup auto05F95C0A_g;
    int auto05F95C0A_u;
    unit auto05F95C0A_var;
    unitgroup autoA72E00D6_g;
    int autoA72E00D6_u;
    unit autoA72E00D6_var;
    unitgroup autoB5535D35_g;
    int autoB5535D35_u;
    unit autoB5535D35_var;
    unitgroup auto4F3CD872_g;
    int auto4F3CD872_u;
    unit auto4F3CD872_var;
    unitgroup auto97666A4C_g;
    int auto97666A4C_u;
    unit auto97666A4C_var;
    unitgroup auto4A517EAD_g;
    int auto4A517EAD_u;
    unit auto4A517EAD_var;
    unitgroup auto7E8454E8_g;
    int auto7E8454E8_u;
    unit auto7E8454E8_var;
    unitgroup auto09BD0BB1_g;
    int auto09BD0BB1_u;
    unit auto09BD0BB1_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_artifactVault = UnitFromId(28);
    gf_SetUnitMaxStats(gv_artifactVault, 2000.0, 2000.0);
    UnitSetInfoText(gv_artifactVault, StringToText(""), StringExternal("Param/Value/DAE423E4"), StringToText(""));
    gv_protossP02WarpPrisms = UnitGroup("WarpPrismPhasing", gv_pLAYER02_PROTOSS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    gv_superWarpGateP02 = UnitFromId(169);
    gv_superWarpGateP03 = UnitFromId(256);
    gv_superWarpGateP04 = UnitFromId(257);
    UnitMagazineArm(UnitFromId(539), AbilityCommand("CarrierHangar", 0), 4);
    libNtve_gf_PauseUnit(UnitFromId(24), true);
    autoF7B43037_g = UnitGroup("ProtossRelic", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF7B43037_u = UnitGroupCount(autoF7B43037_g, c_unitCountAll);
    for (;; autoF7B43037_u -= 1) {
        autoF7B43037_var = UnitGroupUnitFromEnd(autoF7B43037_g, autoF7B43037_u);
        if (autoF7B43037_var == null) { break; }
        UnitSetInfoText(autoF7B43037_var, StringExternal("Param/Value/8150C53B"), StringToText(""), StringToText(""));
        gv_protossRelicsTotal += 1;
    }
    auto42415A1B_g = UnitGroup(null, c_playerAny, RegionFromId(29), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto42415A1B_u = UnitGroupCount(auto42415A1B_g, c_unitCountAll);
    for (;; auto42415A1B_u -= 1) {
        auto42415A1B_var = UnitGroupUnitFromEnd(auto42415A1B_g, auto42415A1B_u);
        if (auto42415A1B_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto42415A1B_var, false);
    }
    autoB2DC0B78_g = UnitGroup("Scantipede", 0, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB2DC0B78_u = UnitGroupCount(autoB2DC0B78_g, c_unitCountAll);
    for (;; autoB2DC0B78_u -= 1) {
        autoB2DC0B78_var = UnitGroupUnitFromEnd(autoB2DC0B78_g, autoB2DC0B78_u);
        if (autoB2DC0B78_var == null) { break; }
        UnitGroupAdd(gv_critterGroup, autoB2DC0B78_var);
        libNtve_gf_ShowHideUnit(autoB2DC0B78_var, false);
    }
    auto6F8A2CE3_g = UnitGroup(null, c_playerAny, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6F8A2CE3_u = UnitGroupCount(auto6F8A2CE3_g, c_unitCountAll);
    for (;; auto6F8A2CE3_u -= 1) {
        auto6F8A2CE3_var = UnitGroupUnitFromEnd(auto6F8A2CE3_g, auto6F8A2CE3_u);
        if (auto6F8A2CE3_var == null) { break; }
        UnitGroupAdd(gv_relic01AreaGroup, auto6F8A2CE3_var);
        libNtve_gf_ShowHideUnit(auto6F8A2CE3_var, false);
    }
    autoC862ACAE_g = UnitGroup(null, gv_pLAYER01_USER, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC862ACAE_u = UnitGroupCount(autoC862ACAE_g, c_unitCountAll);
    for (;; autoC862ACAE_u -= 1) {
        autoC862ACAE_var = UnitGroupUnitFromEnd(autoC862ACAE_g, autoC862ACAE_u);
        if (autoC862ACAE_var == null) { break; }
        UnitGroupAdd(gv_playerP01Base, autoC862ACAE_var);
        libNtve_gf_PauseUnit(autoC862ACAE_var, true);
        libNtve_gf_ShowHideUnit(autoC862ACAE_var, false);
    }
    auto92E92A6A_g = UnitGroup(null, gv_pLAYER06_RESOURCES, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto92E92A6A_u = UnitGroupCount(auto92E92A6A_g, c_unitCountAll);
    for (;; auto92E92A6A_u -= 1) {
        auto92E92A6A_var = UnitGroupUnitFromEnd(auto92E92A6A_g, auto92E92A6A_u);
        if (auto92E92A6A_var == null) { break; }
        UnitGroupAdd(gv_resourceGroup_P03Base, auto92E92A6A_var);
        libNtve_gf_PauseUnit(auto92E92A6A_var, true);
        libNtve_gf_ShowHideUnit(auto92E92A6A_var, false);
    }
    auto12BF0F43_g = UnitGroup(null, gv_pLAYER03_PROTOSS, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto12BF0F43_u = UnitGroupCount(auto12BF0F43_g, c_unitCountAll);
    for (;; auto12BF0F43_u -= 1) {
        auto12BF0F43_var = UnitGroupUnitFromEnd(auto12BF0F43_g, auto12BF0F43_u);
        if (auto12BF0F43_var == null) { break; }
        UnitGroupAdd(gv_protossP03Base, auto12BF0F43_var);
        libNtve_gf_PauseUnit(auto12BF0F43_var, true);
        libNtve_gf_ShowHideUnit(auto12BF0F43_var, false);
    }
    auto05F95C0A_g = UnitGroup("Banshee", gv_pLAYER01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto05F95C0A_u = UnitGroupCount(auto05F95C0A_g, c_unitCountAll);
    for (;; auto05F95C0A_u -= 1) {
        auto05F95C0A_var = UnitGroupUnitFromEnd(auto05F95C0A_g, auto05F95C0A_u);
        if (auto05F95C0A_var == null) { break; }
        UnitGroupAdd(gv_bansheeGroup, auto05F95C0A_var);
        UnitSetPropertyFixed(auto05F95C0A_var, c_unitPropEnergyPercent, 100.0);
    }
    autoA72E00D6_g = UnitGroup("HighTemplar", gv_pLAYER02_PROTOSS, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA72E00D6_u = UnitGroupCount(autoA72E00D6_g, c_unitCountAll);
    for (;; autoA72E00D6_u -= 1) {
        autoA72E00D6_var = UnitGroupUnitFromEnd(autoA72E00D6_g, autoA72E00D6_u);
        if (autoA72E00D6_var == null) { break; }
        UnitSetPropertyFixed(autoA72E00D6_var, c_unitPropEnergyPercent, 100.0);
    }
    autoB5535D35_g = UnitGroup("Observer", gv_pLAYER02_PROTOSS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoB5535D35_u = UnitGroupCount(autoB5535D35_g, c_unitCountAll);
    for (;; autoB5535D35_u -= 1) {
        autoB5535D35_var = UnitGroupUnitFromEnd(autoB5535D35_g, autoB5535D35_u);
        if (autoB5535D35_var == null) { break; }
        AISetUnitScriptControlled(autoB5535D35_var, true);
        UnitIssueOrder(autoB5535D35_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    auto4F3CD872_g = UnitGroup("Probe", gv_pLAYER02_PROTOSS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto4F3CD872_u = UnitGroupCount(auto4F3CD872_g, c_unitCountAll);
    for (;; auto4F3CD872_u -= 1) {
        auto4F3CD872_var = UnitGroupUnitFromEnd(auto4F3CD872_g, auto4F3CD872_u);
        if (auto4F3CD872_var == null) { break; }
        UnitSetState(auto4F3CD872_var, c_unitStateUsingSupply, false);
        AISetUnitScriptControlled(auto4F3CD872_var, false);
    }
    auto97666A4C_g = UnitGroup("NaturalMinerals", gv_pLAYER06_RESOURCES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto97666A4C_u = UnitGroupCount(auto97666A4C_g, c_unitCountAll);
    for (;; auto97666A4C_u -= 1) {
        auto97666A4C_var = UnitGroupUnitFromEnd(auto97666A4C_g, auto97666A4C_u);
        if (auto97666A4C_var == null) { break; }
        UnitGroupAdd(gv_resourcesGroup, auto97666A4C_var);
    }
    auto4A517EAD_g = UnitGroup("NaturalGas", gv_pLAYER06_RESOURCES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto4A517EAD_u = UnitGroupCount(auto4A517EAD_g, c_unitCountAll);
    for (;; auto4A517EAD_u -= 1) {
        auto4A517EAD_var = UnitGroupUnitFromEnd(auto4A517EAD_g, auto4A517EAD_u);
        if (auto4A517EAD_var == null) { break; }
        UnitGroupAdd(gv_resourcesGroup, auto4A517EAD_var);
    }
    auto7E8454E8_g = UnitGroup("MineralField", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto7E8454E8_u = UnitGroupCount(auto7E8454E8_g, c_unitCountAll);
    for (;; auto7E8454E8_u -= 1) {
        auto7E8454E8_var = UnitGroupUnitFromEnd(auto7E8454E8_g, auto7E8454E8_u);
        if (auto7E8454E8_var == null) { break; }
        UnitGroupAdd(gv_resourcesGroup, auto7E8454E8_var);
    }
    auto09BD0BB1_g = UnitGroup("VespeneGeyser", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto09BD0BB1_u = UnitGroupCount(auto09BD0BB1_g, c_unitCountAll);
    for (;; auto09BD0BB1_u -= 1) {
        auto09BD0BB1_var = UnitGroupUnitFromEnd(auto09BD0BB1_g, auto09BD0BB1_u);
        if (auto09BD0BB1_var == null) { break; }
        UnitGroupAdd(gv_resourcesGroup, auto09BD0BB1_var);
    }
    gv_stage1Enemies = UnitGroup(null, gv_pLAYER03_PROTOSS, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    TriggerExecute(gt_Stage1Leashes, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init04Music_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus04MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Music_Init () {
    gt_Init04Music = TriggerCreate("gt_Init04Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    GameSetToDLighting("Typhon");
    RegionPlayableMapSet(RegionFromId(17));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoAEC2C665_g;
    int autoAEC2C665_var;
    playergroup auto4F7A8F76_g;
    int auto4F7A8F76_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerDifficulty(gv_pLAYER01_USER) == 1)) {
        autoAEC2C665_g = gv_protossPlayers;
        autoAEC2C665_var = -1;
        while (true) {
            autoAEC2C665_var = PlayerGroupNextPlayer(autoAEC2C665_g, autoAEC2C665_var);
            if (autoAEC2C665_var < 0) { break; }
            PlayerModifyPropertyInt(autoAEC2C665_var, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        }
    }

    gv_wall_of_Fire_Speed = libNtve_gf_DifficultyValueFixed(0.06, 0.075, 0.085, 0.105);
    auto4F7A8F76_g = gv_protossPlayers;
    auto4F7A8F76_var = -1;
    while (true) {
        auto4F7A8F76_var = PlayerGroupNextPlayer(auto4F7A8F76_g, auto4F7A8F76_var);
        if (auto4F7A8F76_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto4F7A8F76_var, "HighTemplarKhaydarinAmulet", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(auto4F7A8F76_var, "PsiStormTech", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(auto4F7A8F76_var, "haltech", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(auto4F7A8F76_var, "ProtossAirWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(auto4F7A8F76_var, "ProtossGroundWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(auto4F7A8F76_var, "ProtossShieldsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(auto4F7A8F76_var, "ProtossAirArmorsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        TechTreeUpgradeAddLevel(auto4F7A8F76_var, "ProtossGroundArmorsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_AddUnitTypeToUnitHelpPanel("Probe", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Stalker", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Sentry", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Immortal", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Colossus", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("HighTemplar", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Archon", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("WarpPrism", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Phoenix", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Scout", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("PhotonCannon", false, gv_pLAYER01_USER);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Carrier", false, gv_pLAYER01_USER);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Observer", false, gv_pLAYER01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Sequence
//--------------------------------------------------------------------------------------------------
bool gt_IntroSequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4F79FA65_g;
    int auto4F79FA65_u;
    unit auto4F79FA65_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    auto4F79FA65_g = gv_bansheeGroup;
    auto4F79FA65_u = UnitGroupCount(auto4F79FA65_g, c_unitCountAll);
    for (;; auto4F79FA65_u -= 1) {
        auto4F79FA65_var = UnitGroupUnitFromEnd(auto4F79FA65_g, auto4F79FA65_u);
        if (auto4F79FA65_var == null) { break; }
        UnitSelect(auto4F79FA65_var, gv_pLAYER01_USER, true);
    }
    UnitIssueOrder(UnitFromId(358), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(394)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(356), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(395)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(357), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(396)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(397), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(400)), c_orderQueueReplace);
    UIAlertPoint("Trigger", gv_pLAYER01_USER, StringToText(""), null, PointFromId(359));
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_pLAYER01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(359), 1.5);
    CinematicFade(true, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_StartGameStage1, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSequence_Init () {
    gt_IntroSequence = TriggerCreate("gt_IntroSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Stage 1
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus04MusicIntro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    PlayerPauseAllCooldowns(gv_pLAYER01_USER, true);
    PlayerPauseAllCharges(gv_pLAYER01_USER, true);
    AICampaignStart(gv_pLAYER03_PROTOSS);
    TriggerEnable(gt_PingDetectorCannon, true);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_ObjectiveCleartheLZCreateQ, true, false);
    Wait(2.0, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(13), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    gv_clearLZ_Ping = PingLastCreated();
    PingSetTooltip(gv_clearLZ_Ping, StringExternal("Param/Value/FA3342A5"));
    VisExploreArea(gv_pLAYER01_USER, RegionCircle(PointFromId(13), 6.0), true, false);
    TriggerExecute(gt_TransmissionIntroBansheesQ, true, false);
    Wait(5.0, c_timeGame);
    TriggerExecute(gt_NewUnitBansheeTipQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage1_Init () {
    gt_StartGameStage1 = TriggerCreate("gt_StartGameStage1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerPauseAllCooldowns(gv_pLAYER01_USER, false);
    PlayerPauseAllCharges(gv_pLAYER01_USER, false);
    UIAlertPoint("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/3A99EA37"), null, PointFromId(13));
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, true);
    TriggerEnable(gt_DefeatBaseDead, true);
    TriggerEnable(gt_RemoveResources, true);
    Wait(3.0, c_timeGame);
    TriggerExecute(gt_ObjectiveDestroytheArtifactVaultCreateQ, true, false);
    TriggerExecute(gt_ArtifactVaultPing, true, false);
    Wait(8.0, c_timeGame);
    TriggerExecute(gt_ResearchObjectiveProtossRelicsCreateQ, true, false);
    Wait(8.0, c_timeGame);
    TimerStart(gv_wall_of_Fire_Lighting, 300.0, false, c_timeGame);
    TriggerExecute(gt_CreateWallofFire, true, false);
    TriggerExecute(gt_WallofFireTipQ, true, false);
    TriggerExecute(gt_TransmissionAdjutantFirearrivalQ, true, false);
    Wait(15.0, c_timeGame);
    TriggerExecute(gt_TransmissionTaldarimIntroAgainQ, true, false);
    TriggerExecute(gt_CampaignTipsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage2_Init () {
    gt_StartGameStage2 = TriggerCreate("gt_StartGameStage2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Harvesting
//--------------------------------------------------------------------------------------------------
bool gt_StartHarvesting_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIInitCampaignHarvest(gv_pLAYER02_PROTOSS);
    AIInitCampaignHarvest(gv_pLAYER03_PROTOSS);
    AIInitCampaignHarvest(gv_pLAYER04_PROTOSS);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartHarvesting_Init () {
    gt_StartHarvesting = TriggerCreate("gt_StartHarvesting_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stage 1 Leashes
//--------------------------------------------------------------------------------------------------
bool gt_Stage1Leashes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_leashedUnits;
    unit lv_u;
    point lv_homeLoc;

    // Automatic Variable Declarations
    unitgroup auto728A7CC6_g;
    int auto728A7CC6_u;
    unitgroup auto705DA511_g;
    int auto705DA511_u;

    // Variable Initialization
    lv_leashedUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_leashedUnits = UnitGroup(null, gv_pLAYER03_PROTOSS, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto728A7CC6_g = lv_leashedUnits;
    auto728A7CC6_u = UnitGroupCount(auto728A7CC6_g, c_unitCountAll);
    for (;; auto728A7CC6_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto728A7CC6_g, auto728A7CC6_u);
        if (lv_u == null) { break; }
        UnitSetCustomValue(lv_u, 0, PointGetX(UnitGetPosition(lv_u)));
        UnitSetCustomValue(lv_u, 1, PointGetY(UnitGetPosition(lv_u)));
    }
    while (true) {
        if ((UnitGroupCount(lv_leashedUnits, c_unitCountAlive) == 0)) {
            return true;
        }

        auto705DA511_g = lv_leashedUnits;
        auto705DA511_u = UnitGroupCount(auto705DA511_g, c_unitCountAll);
        for (;; auto705DA511_u -= 1) {
            lv_u = UnitGroupUnitFromEnd(auto705DA511_g, auto705DA511_u);
            if (lv_u == null) { break; }
            lv_homeLoc = Point(UnitGetCustomValue(lv_u, 0), UnitGetCustomValue(lv_u, 1));
            if ((DistanceBetweenPoints(UnitGetPosition(lv_u), lv_homeLoc) > 10.0)) {
                UnitIssueOrder(lv_u, OrderTargetingPoint(AbilityCommand("attack", 0), lv_homeLoc), c_orderQueueReplace);
            }

        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Stage1Leashes_Init () {
    gt_Stage1Leashes = TriggerCreate("gt_Stage1Leashes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Area Clear -> Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_AreaClearStage2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_stage1Enemies, c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_DefeatBansheeGroupDead, false);
    PingDestroy(gv_clearLZ_Ping);
    TriggerExecute(gt_ObjectiveCleartheLZComplete, true, false);
    Wait(4.0, c_timeGame);
    TriggerExecute(gt_MidQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AreaClearStage2_Init () {
    gt_AreaClearStage2 = TriggerCreate("gt_AreaClearStage2_Func");
    TriggerAddEventTimePeriodic(gt_AreaClearStage2, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Artifact Vault Ping
//--------------------------------------------------------------------------------------------------
bool gt_ArtifactVaultPing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(gv_pLAYER01_USER), "PingObjective", UnitGetPosition(gv_artifactVault), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    gv_artifactVault_Ping = PingLastCreated();
    PingSetTooltip(gv_artifactVault_Ping, StringExternal("Param/Value/73AC37FE"));
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_artifactVault), 6.0, Color(0.00, 100.00, 0.00));
    VisRevealArea(gv_pLAYER01_USER, RegionCircle(UnitGetPosition(gv_artifactVault), 4.0), 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArtifactVaultPing_Init () {
    gt_ArtifactVaultPing = TriggerCreate("gt_ArtifactVaultPing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping Detector Cannon
//--------------------------------------------------------------------------------------------------
bool gt_PingDetectorCannon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Banshee"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(1)), 6.0, Color(100.00, 0.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/1457FD3A"), null, UnitFromId(1));
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectRed", UnitGetPosition(UnitFromId(420)));
    libNtve_gf_ShareVisionofUnit(UnitFromId(420), true, gv_pLAYER01_USER);
    gv_pingActor1 = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectRed", UnitGetPosition(UnitFromId(4)));
    libNtve_gf_ShareVisionofUnit(UnitFromId(4), true, gv_pLAYER01_USER);
    gv_pingActor2 = libNtve_gf_ActorLastCreated();
    TriggerExecute(gt_TransmissionCloakDetectorsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PingDetectorCannon_Init () {
    gt_PingDetectorCannon = TriggerCreate("gt_PingDetectorCannon_Func");
    TriggerEnable(gt_PingDetectorCannon, false);
    TriggerAddEventUnitRange(gt_PingDetectorCannon, null, UnitFromId(420), 10.0, true);
    TriggerAddEventUnitRange(gt_PingDetectorCannon, null, UnitFromId(4), 10.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Cannon Ping
//--------------------------------------------------------------------------------------------------
bool gt_RemoveCannonPing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER03_PROTOSS))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "PhotonCannon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_pingActor1);
    libNtve_gf_KillModel(gv_pingActor2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveCannonPing_Init () {
    gt_RemoveCannonPing = TriggerCreate("gt_RemoveCannonPing_Func");
    TriggerAddEventUnitDied(gt_RemoveCannonPing, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Wall of Fire
//--------------------------------------------------------------------------------------------------
bool gt_CreateWallofFire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto86F27ACD_n = 9;
    int auto86F27ACD_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "WallOfFire", 0, gv_pLAYER08_DEATHSUN, PointFromId(120));
    gv_wALLOFFIRE = UnitLastCreated();
    UnitIssueOrder(gv_wALLOFFIRE, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(121)), c_orderQueueReplace);
    libNtve_gf_ShareVisionofUnit(gv_wALLOFFIRE, true, gv_pLAYER01_USER);
    UnitSetPropertyFixed(gv_wALLOFFIRE, c_unitPropMovementSpeed, gv_wall_of_Fire_Speed);
    libNtve_gf_SendActorMessageToGameRegion(RegionFromId(18), "Signal DoodadDeath");
    libNtve_gf_SendActorMessageToGameRegion(RegionFromId(18), "Signal TreeFire");
    libNtve_gf_SendActorMessageToGameRegion(RegionFromId(18), "Signal DoodadDeathB");
    MinimapPing(PlayerGroupAll(), PointWithOffset(UnitGetPosition(gv_wALLOFFIRE), 0.0, -50.0), 6.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/4E777F09"), null, PointWithOffset(UnitGetPosition(gv_wALLOFFIRE), 0.0, -50.0));
    gv_ping_VertSpace_Increment = -10.0;
    gv_ping_Increment = 0;
    for (auto86F27ACD_i = 1; auto86F27ACD_i <= auto86F27ACD_n; auto86F27ACD_i += 1) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(gv_pLAYER01_USER), "PingArrow", PointWithOffset(UnitGetPosition(gv_wALLOFFIRE), 0.0, gv_ping_VertSpace_Increment), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 0.0);
        gv_wall_of_Fire_Ping[gv_ping_Increment] = PingLastCreated();
        gv_ping_VertSpace_Increment -= 10.0;
        gv_ping_Increment += 1;
    }
    TriggerEnable(gt_WallofFireDamage, true);
    TriggerEnable(gt_WallofFirePing, true);
    TriggerEnable(gt_ShareWallofFireVision, true);
    Wait(60.0, c_timeGame);
    TriggerEnable(gt_WallofFireSpeedUp, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateWallofFire_Init () {
    gt_CreateWallofFire = TriggerCreate("gt_CreateWallofFire_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wall of Fire Ping
//--------------------------------------------------------------------------------------------------
bool gt_WallofFirePing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto03EF7895_n = 9;
    int auto03EF7895_i;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_ping_VertSpace_Increment = -10.0;
    gv_ping_Increment = 0;
    for (auto03EF7895_i = 1; auto03EF7895_i <= auto03EF7895_n; auto03EF7895_i += 1) {
        PingSetPosition(gv_wall_of_Fire_Ping[gv_ping_Increment], PointWithOffset(UnitGetPosition(gv_wALLOFFIRE), 0.0, gv_ping_VertSpace_Increment));
        PingSetScale(gv_wall_of_Fire_Ping[gv_ping_Increment], 0.75);
        PingSetTooltip(gv_wall_of_Fire_Ping[gv_ping_Increment], StringExternal("Param/Value/B57101F3"));
        gv_ping_VertSpace_Increment -= 10.0;
        gv_ping_Increment += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WallofFirePing_Init () {
    gt_WallofFirePing = TriggerCreate("gt_WallofFirePing_Func");
    TriggerEnable(gt_WallofFirePing, false);
    TriggerAddEventTimePeriodic(gt_WallofFirePing, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wall of Fire Damage
//--------------------------------------------------------------------------------------------------
bool gt_WallofFireDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iterations;
    int lv_i;

    // Automatic Variable Declarations
    int auto4CA18CCC_ae;
    const int auto4CA18CCC_ai = 1;
    unitgroup auto0B8F5015_g;
    int auto0B8F5015_u;
    unit auto0B8F5015_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wall_of_Fire_DamageRegion = RegionRect(PointGetX(PointWithOffset(PointFromId(142), 0.0, 16.0)), PointGetY(PointFromId(122)), PointGetX(UnitGetPosition(gv_wALLOFFIRE)), PointGetY(PointWithOffset(PointFromId(142), 0.0, 16.0)));
    gv_wall_of_Fire_VisionRegion = RegionRect(PointGetX(PointWithOffset(UnitGetPosition(gv_wALLOFFIRE), -4.0, 16.0)), PointGetY(PointFromId(122)), PointGetX(PointWithOffset(UnitGetPosition(gv_wALLOFFIRE), 3.0, 0.0)), PointGetY(PointWithOffset(PointFromId(142), 0.0, 16.0)));
    if ((ModI(TriggerGetExecCount(TriggerGetCurrent()), 4) == 0)) {
        libNtve_gf_SendActorMessageToGameRegion(gv_wall_of_Fire_VisionRegion, "Signal DoodadDeath");
        libNtve_gf_SendActorMessageToGameRegion(gv_wall_of_Fire_VisionRegion, "Signal TreeFire");
        lv_iterations = FixedToInt((((PointGetY(PointFromId(142)) - PointGetY(PointFromId(122))) / 3.5) - ModF((PointGetY(PointFromId(142)) - PointGetY(PointFromId(122))), 3.5)));
        auto4CA18CCC_ae = lv_iterations;
        lv_i = 0;
        for ( ; ( (auto4CA18CCC_ai >= 0 && lv_i <= auto4CA18CCC_ae) || (auto4CA18CCC_ai < 0 && lv_i >= auto4CA18CCC_ae) ) ; lv_i += auto4CA18CCC_ai ) {
            PlayerCreateEffectPoint(1, "WallOfFireDummy", Point(PointGetX(UnitGetPosition(gv_wALLOFFIRE)), ((IntToFixed(lv_i) * 3.5) + PointGetY(PointFromId(122)))));
        }
    }

    auto0B8F5015_g = UnitGroup(null, c_playerAny, gv_wall_of_Fire_DamageRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto0B8F5015_u = UnitGroupCount(auto0B8F5015_g, c_unitCountAll);
    for (;; auto0B8F5015_u -= 1) {
        auto0B8F5015_var = UnitGroupUnitFromEnd(auto0B8F5015_g, auto0B8F5015_u);
        if (auto0B8F5015_var == null) { break; }
        UnitBehaviorAdd(auto0B8F5015_var, "WallOfFireBurn", gv_wALLOFFIRE, 1);
    }
    libNtve_gf_SendActorMessageToGameRegion(gv_wall_of_Fire_DamageRegion, "Signal DoodadDeathB");
    gv_wall_of_Fire_Sound_Counter += 1;
    if ((gv_wall_of_Fire_Sound_Counter > 10)) {
        ActorRegionCreate(null, "WallOfFireRegion", gv_wall_of_Fire_DamageRegion);
        gv_wall_of_Fire_Sound_Counter = 0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WallofFireDamage_Init () {
    gt_WallofFireDamage = TriggerCreate("gt_WallofFireDamage_Func");
    TriggerEnable(gt_WallofFireDamage, false);
    TriggerAddEventTimePeriodic(gt_WallofFireDamage, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Share Wall of Fire Vision
//--------------------------------------------------------------------------------------------------
bool gt_ShareWallofFireVision_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealArea(gv_pLAYER01_USER, gv_wall_of_Fire_VisionRegion, 2.0, false);
    VisExploreArea(gv_pLAYER01_USER, gv_wall_of_Fire_DamageRegion, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShareWallofFireVision_Init () {
    gt_ShareWallofFireVision = TriggerCreate("gt_ShareWallofFireVision_Func");
    TriggerEnable(gt_ShareWallofFireVision, false);
    TriggerAddEventTimePeriodic(gt_ShareWallofFireVision, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Wall of Fire Lighting
//--------------------------------------------------------------------------------------------------
bool gt_SetWallofFireLighting_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetLighting("TyphonFirewallLighting", 180.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetWallofFireLighting_Init () {
    gt_SetWallofFireLighting = TriggerCreate("gt_SetWallofFireLighting_Func");
    TriggerAddEventTimer(gt_SetWallofFireLighting, gv_wall_of_Fire_Lighting);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wall of Fire At P03 Protoss Base
//--------------------------------------------------------------------------------------------------
bool gt_WallofFireAtP03ProtossBase_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoDBE4EF12_g;
    int autoDBE4EF12_u;
    unit autoDBE4EF12_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoDBE4EF12_g = UnitGroup(null, gv_pLAYER03_PROTOSS, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDBE4EF12_u = UnitGroupCount(autoDBE4EF12_g, c_unitCountAll);
    for (;; autoDBE4EF12_u -= 1) {
        autoDBE4EF12_var = UnitGroupUnitFromEnd(autoDBE4EF12_g, autoDBE4EF12_u);
        if (autoDBE4EF12_var == null) { break; }
        if ((PointGetX(UnitGetPosition(autoDBE4EF12_var)) <= (PointGetX(UnitGetPosition(gv_wALLOFFIRE)) + 5.0))) {
            TriggerEnable(TriggerGetCurrent(), false);
            TechTreeAbilityAllow(gv_pLAYER02_PROTOSS, AbilityCommand("Blink", 0), true);
            TechTreeAbilityAllow(gv_pLAYER03_PROTOSS, AbilityCommand("Blink", 0), true);
            TechTreeAbilityAllow(gv_pLAYER04_PROTOSS, AbilityCommand("Blink", 0), true);
            TriggerExecute(gt_ProtossP03FinalActions, true, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WallofFireAtP03ProtossBase_Init () {
    gt_WallofFireAtP03ProtossBase = TriggerCreate("gt_WallofFireAtP03ProtossBase_Func");
    TriggerAddEventTimePeriodic(gt_WallofFireAtP03ProtossBase, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss P03 Final Actions
//--------------------------------------------------------------------------------------------------
bool gt_ProtossP03FinalActions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoAA1AFB9B_g;
    int autoAA1AFB9B_u;
    unit autoAA1AFB9B_var;
    unitgroup autoB98C19F2_g;
    int autoB98C19F2_u;
    unit autoB98C19F2_var;
    unitgroup auto0C23000F_g;
    int auto0C23000F_u;
    unit auto0C23000F_var;
    unitgroup auto518E9407_g;
    int auto518E9407_u;
    unit auto518E9407_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AISetUnitScriptControlled(UnitFromId(83), true);
    AIToggleBulliesInRegion(gv_pLAYER03_PROTOSS, RegionFromId(2), false);
    autoAA1AFB9B_g = gv_resourceGroup_P03Base;
    autoAA1AFB9B_u = UnitGroupCount(autoAA1AFB9B_g, c_unitCountAll);
    for (;; autoAA1AFB9B_u -= 1) {
        autoAA1AFB9B_var = UnitGroupUnitFromEnd(autoAA1AFB9B_g, autoAA1AFB9B_u);
        if (autoAA1AFB9B_var == null) { break; }
        libNtve_gf_PauseUnit(autoAA1AFB9B_var, false);
        libNtve_gf_ShowHideUnit(autoAA1AFB9B_var, true);
    }
    autoB98C19F2_g = UnitGroup(null, gv_pLAYER03_PROTOSS, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB98C19F2_u = UnitGroupCount(autoB98C19F2_g, c_unitCountAll);
    for (;; autoB98C19F2_u -= 1) {
        autoB98C19F2_var = UnitGroupUnitFromEnd(autoB98C19F2_g, autoB98C19F2_u);
        if (autoB98C19F2_var == null) { break; }
        AISetUnitSuicide(autoB98C19F2_var, true);
    }
    auto0C23000F_g = UnitGroup(null, gv_pLAYER03_PROTOSS, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0C23000F_u = UnitGroupCount(auto0C23000F_g, c_unitCountAll);
    for (;; auto0C23000F_u -= 1) {
        auto0C23000F_var = UnitGroupUnitFromEnd(auto0C23000F_g, auto0C23000F_u);
        if (auto0C23000F_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(auto0C23000F_var, true, gv_pLAYER01_USER);
    }
    auto518E9407_g = UnitGroup(null, gv_pLAYER03_PROTOSS, RegionFromId(2), UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto518E9407_u = UnitGroupCount(auto518E9407_g, c_unitCountAll);
    for (;; auto518E9407_u -= 1) {
        auto518E9407_var = UnitGroupUnitFromEnd(auto518E9407_g, auto518E9407_u);
        if (auto518E9407_var == null) { break; }
        Wait(0.5, c_timeGame);
        UnitIssueOrder(auto518E9407_var, OrderTargetingUnit(null, UnitFromId(83)), c_orderQueueReplace);
    }
    Wait(6.0, c_timeGame);
    UnitIssueOrder(UnitFromId(83), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(25))), c_orderQueueAddToEnd);
    while (!((libNtve_gf_UnitInRegion(UnitFromId(83), RegionFromId(25)) == true))) {
        Wait(1.0, c_timeGame);
    }
    UnitRemove(UnitFromId(83));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossP03FinalActions_Init () {
    gt_ProtossP03FinalActions = TriggerCreate("gt_ProtossP03FinalActions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wall of Fire First Warning
//--------------------------------------------------------------------------------------------------
bool gt_WallofFireFirstWarning_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto758F948D_g;
    int auto758F948D_u;
    unit auto758F948D_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto758F948D_g = UnitGroup(null, gv_pLAYER01_USER, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto758F948D_u = UnitGroupCount(auto758F948D_g, c_unitCountAll);
    for (;; auto758F948D_u -= 1) {
        auto758F948D_var = UnitGroupUnitFromEnd(auto758F948D_g, auto758F948D_u);
        if (auto758F948D_var == null) { break; }
        if ((PointGetX(UnitGetPosition(auto758F948D_var)) <= (PointGetX(UnitGetPosition(gv_wALLOFFIRE)) + 28.0))) {
            TriggerEnable(TriggerGetCurrent(), false);
            TriggerExecute(gt_TransmissionAdjutantFireFirstWarningQ, true, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WallofFireFirstWarning_Init () {
    gt_WallofFireFirstWarning = TriggerCreate("gt_WallofFireFirstWarning_Func");
    TriggerAddEventTimePeriodic(gt_WallofFireFirstWarning, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wall of Fire Emergency Warning
//--------------------------------------------------------------------------------------------------
bool gt_WallofFireEmergencyWarning_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto87DD0C3E_g;
    int auto87DD0C3E_u;
    unit auto87DD0C3E_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto87DD0C3E_g = UnitGroup(null, gv_pLAYER01_USER, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto87DD0C3E_u = UnitGroupCount(auto87DD0C3E_g, c_unitCountAll);
    for (;; auto87DD0C3E_u -= 1) {
        auto87DD0C3E_var = UnitGroupUnitFromEnd(auto87DD0C3E_g, auto87DD0C3E_u);
        if (auto87DD0C3E_var == null) { break; }
        if ((PointGetX(UnitGetPosition(auto87DD0C3E_var)) <= (PointGetX(UnitGetPosition(gv_wALLOFFIRE)) + 12.0))) {
            if (((UnitGetType(auto87DD0C3E_var) == "Bunker") || (UnitGetType(auto87DD0C3E_var) == "Barracks") || (UnitGetType(auto87DD0C3E_var) == "BarracksFlying") || (UnitGetType(auto87DD0C3E_var) == "CommandCenter") || (UnitGetType(auto87DD0C3E_var) == "CommandCenterFlying") || (UnitGetType(auto87DD0C3E_var) == "Factory") || (UnitGetType(auto87DD0C3E_var) == "FactoryFlying") || (UnitGetType(auto87DD0C3E_var) == "Starport") || (UnitGetType(auto87DD0C3E_var) == "StarportFlying"))) {
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_TransmissionHornerEmergencyFireWarningQ, true, false);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WallofFireEmergencyWarning_Init () {
    gt_WallofFireEmergencyWarning = TriggerCreate("gt_WallofFireEmergencyWarning_Func");
    TriggerAddEventTimePeriodic(gt_WallofFireEmergencyWarning, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wall of Fire Speed Up
//--------------------------------------------------------------------------------------------------
bool gt_WallofFireSpeedUp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto17587D29_g;
    int auto17587D29_u;
    unit auto17587D29_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto17587D29_g = UnitGroup(null, gv_pLAYER01_USER, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto17587D29_u = UnitGroupCount(auto17587D29_g, c_unitCountAll);
    for (;; auto17587D29_u -= 1) {
        auto17587D29_var = UnitGroupUnitFromEnd(auto17587D29_g, auto17587D29_u);
        if (auto17587D29_var == null) { break; }
        if ((PointGetX(UnitGetPosition(auto17587D29_var)) <= (PointGetX(UnitGetPosition(gv_wALLOFFIRE)) + 30.0))) {
            if (((UnitGetType(auto17587D29_var) != "SupplyDepot") || (UnitGetType(auto17587D29_var) != "SupplyDepotLowered") || (UnitGetType(auto17587D29_var) != "Refinery") || (UnitGetType(auto17587D29_var) != "MercCompound"))) {
                return true;
            }

        }

    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_WallofFireSlowDown, true);
    gv_wall_of_Fire_Speed = libNtve_gf_DifficultyValueFixed(0.06, 0.085, 0.095, 0.115);
    UnitSetPropertyFixed(gv_wALLOFFIRE, c_unitPropMovementSpeed, gv_wall_of_Fire_Speed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WallofFireSpeedUp_Init () {
    gt_WallofFireSpeedUp = TriggerCreate("gt_WallofFireSpeedUp_Func");
    TriggerEnable(gt_WallofFireSpeedUp, false);
    TriggerAddEventTimePeriodic(gt_WallofFireSpeedUp, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wall of Fire Slow Down
//--------------------------------------------------------------------------------------------------
bool gt_WallofFireSlowDown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE6F3A8F9_g;
    int autoE6F3A8F9_u;
    unit autoE6F3A8F9_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE6F3A8F9_g = UnitGroup(null, gv_pLAYER01_USER, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE6F3A8F9_u = UnitGroupCount(autoE6F3A8F9_g, c_unitCountAll);
    for (;; autoE6F3A8F9_u -= 1) {
        autoE6F3A8F9_var = UnitGroupUnitFromEnd(autoE6F3A8F9_g, autoE6F3A8F9_u);
        if (autoE6F3A8F9_var == null) { break; }
        if ((PointGetX(UnitGetPosition(autoE6F3A8F9_var)) <= (PointGetX(UnitGetPosition(gv_wALLOFFIRE)) + 23.0))) {
            if (((UnitGetType(autoE6F3A8F9_var) != "SupplyDepot") || (UnitGetType(autoE6F3A8F9_var) != "SupplyDepotLowered") || (UnitGetType(autoE6F3A8F9_var) != "Refinery") || (UnitGetType(autoE6F3A8F9_var) != "MercCompound"))) {
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerEnable(gt_WallofFireSpeedUp, true);
                gv_wall_of_Fire_Speed = libNtve_gf_DifficultyValueFixed(0.06, 0.075, 0.085, 0.105);
                UnitSetPropertyFixed(gv_wALLOFFIRE, c_unitPropMovementSpeed, gv_wall_of_Fire_Speed);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WallofFireSlowDown_Init () {
    gt_WallofFireSlowDown = TriggerCreate("gt_WallofFireSlowDown_Func");
    TriggerEnable(gt_WallofFireSlowDown, false);
    TriggerAddEventTimePeriodic(gt_WallofFireSlowDown, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Resources
//--------------------------------------------------------------------------------------------------
bool gt_RemoveResources_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto44D8C15B_g;
    int auto44D8C15B_u;
    unit auto44D8C15B_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto44D8C15B_g = gv_resourcesGroup;
    auto44D8C15B_u = UnitGroupCount(auto44D8C15B_g, c_unitCountAll);
    for (;; auto44D8C15B_u -= 1) {
        auto44D8C15B_var = UnitGroupUnitFromEnd(auto44D8C15B_g, auto44D8C15B_u);
        if (auto44D8C15B_var == null) { break; }
        if ((PointGetX(UnitGetPosition(auto44D8C15B_var)) <= (PointGetX(UnitGetPosition(gv_wALLOFFIRE)) - 5.0))) {
            UnitRemove(auto44D8C15B_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveResources_Init () {
    gt_RemoveResources = TriggerCreate("gt_RemoveResources_Func");
    TriggerEnable(gt_RemoveResources, false);
    TriggerAddEventTimePeriodic(gt_RemoveResources, 4.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp Prism Spawn in Base Defenders
//--------------------------------------------------------------------------------------------------
bool gt_WarpPrismSpawninBaseDefenders_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto3735C5A5_g;
    int auto3735C5A5_u;
    unit auto3735C5A5_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto3735C5A5_g = gv_protossP02WarpPrisms;
    auto3735C5A5_u = UnitGroupCount(auto3735C5A5_g, c_unitCountAll);
    for (;; auto3735C5A5_u -= 1) {
        auto3735C5A5_var = UnitGroupUnitFromEnd(auto3735C5A5_g, auto3735C5A5_u);
        if (auto3735C5A5_var == null) { break; }
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER01_USER, RegionCircle(UnitGetPosition(auto3735C5A5_var), 9.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 3)) {
            UnitGroupRemove(gv_protossP02WarpPrisms, auto3735C5A5_var);
            gf_WarpPrismDefendersWarpIn(gv_superWarpGateP02, libNtve_gf_DifficultyValueInt(2, 2, 2, 3), AbilityCommand("SuperWarpGateTrain", 1), UnitGetPosition(auto3735C5A5_var), 2.0, 45.0, 0.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpPrismSpawninBaseDefenders_Init () {
    gt_WarpPrismSpawninBaseDefenders = TriggerCreate("gt_WarpPrismSpawninBaseDefenders_Func");
    TriggerAddEventTimePeriodic(gt_WarpPrismSpawninBaseDefenders, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AICampaignStart(gv_pLAYER02_PROTOSS);
    AICampaignStart(gv_pLAYER03_PROTOSS);
    AICampaignStart(gv_pLAYER04_PROTOSS);
    libNtve_gf_DeclareNextTown(gv_pLAYER02_PROTOSS, PointFromId(354));
    AINearestTownBullyRebuild(gv_pLAYER02_PROTOSS, true);
    AINearestTownLimitWaveGather(gv_pLAYER02_PROTOSS, true);
    AIToggleBulliesInRegion(gv_pLAYER03_PROTOSS, RegionFromId(2), true);
    TriggerExecute(gt_ProtossP03AttackWaves, true, false);
    TriggerExecute(gt_ProtossP04AttackWaves, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss P02 Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_ProtossP02AttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPlayer(gv_pLAYER02_PROTOSS, PlayerGroupSingle(gv_pLAYER01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER02_PROTOSS, PointFromId(123));
    AIAttackWaveAddWaypoint(gv_pLAYER02_PROTOSS, PointFromId(433), false);
    AIAttackWaveAddUnits4(3, 3, 5, 5, "Zealot");
    AIAttackWaveAddUnits4(2, 2, 3, 4, "Stalker");
    AIAttackWaveSend(gv_pLAYER02_PROTOSS, 120, true);
    Wait(libNtve_gf_DifficultyValueFixed(90.0, 90.0, 55.0, 20.0), c_timeAI);
    AIAttackWaveAddWaypoint(gv_pLAYER02_PROTOSS, PointFromId(36), false);
    AIAttackWaveAddUnits4(2, 2, 4, 4, "Stalker");
    AIAttackWaveAddUnits4(1, 1, 2, 3, "Immortal");
    AIAttackWaveSend(gv_pLAYER02_PROTOSS, 120, true);
    Wait(libNtve_gf_DifficultyValueFixed(90.0, 90.0, 55.0, 20.0), c_timeAI);
    AIAttackWaveAddWaypoint(gv_pLAYER02_PROTOSS, PointFromId(433), false);
    AIAttackWaveAddUnits4(2, 2, 3, 3, "Immortal");
    AIAttackWaveAddUnits4(0, 0, 0, 1, "Scout");
    AIAttackWaveSend(gv_pLAYER02_PROTOSS, 120, true);
    Wait(libNtve_gf_DifficultyValueFixed(90.0, 90.0, 55.0, 20.0), c_timeAI);
    AIAttackWaveAddWaypoint(gv_pLAYER02_PROTOSS, PointFromId(36), false);
    AIAttackWaveAddUnits4(3, 3, 4, 6, "Zealot");
    AIAttackWaveAddUnits4(4, 4, 5, 6, "Sentry");
    AIAttackWaveAddUnits4(0, 0, 0, 1, "Observer");
    AIAttackWaveSend(gv_pLAYER02_PROTOSS, 120, true);
    Wait(libNtve_gf_DifficultyValueFixed(90.0, 90.0, 55.0, 20.0), c_timeAI);
    AIAttackWaveAddWaypoint(gv_pLAYER02_PROTOSS, PointFromId(36), false);
    AIAttackWaveAddUnits4(3, 3, 3, 3, "Immortal");
    AIAttackWaveAddUnits4(0, 0, 3, 2, "Stalker");
    AIAttackWaveAddUnits4(0, 0, 0, 2, "Phoenix");
    AIAttackWaveSend(gv_pLAYER02_PROTOSS, 120, true);
    Wait(libNtve_gf_DifficultyValueFixed(90.0, 90.0, 55.0, 20.0), c_timeAI);
    AIAttackWaveAddWaypoint(gv_pLAYER02_PROTOSS, PointFromId(36), false);
    AIAttackWaveAddUnits4(2, 2, 3, 0, "Zealot");
    AIAttackWaveAddUnits4(4, 4, 5, 4, "Stalker");
    AIAttackWaveAddUnits4(0, 0, 0, 1, "HighTemplar");
    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        UnitSetOwner(UnitFromId(539), gv_pLAYER02_PROTOSS, true);
        AISetUnitScriptControlled(UnitFromId(539), false);
        AIAttackWaveUseUnit(gv_pLAYER02_PROTOSS, UnitFromId(539));
    }

    AIAttackWaveAddUnits4(0, 0, 0, 1, "Scout");
    AIAttackWaveSend(gv_pLAYER02_PROTOSS, 120, true);
    while (true) {
        Wait(libNtve_gf_DifficultyValueFixed(60.0, 60.0, 30.0, 0.0), c_timeAI);
        AIAttackWaveAddWaypoint(gv_pLAYER02_PROTOSS, PointFromId(36), false);
        AIAttackWaveAddUnits4(2, 2, 3, 4, "Zealot");
        AIAttackWaveAddUnits4(2, 2, 3, 3, "Archon");
        AIAttackWaveAddUnits4(0, 0, 1, 1, "HighTemplar");
        if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 0) == 1)) {
            UnitSetOwner(UnitFromId(539), gv_pLAYER02_PROTOSS, true);
            AISetUnitScriptControlled(UnitFromId(539), false);
            AIAttackWaveUseUnit(gv_pLAYER02_PROTOSS, UnitFromId(539));
        }

        AIAttackWaveSend(gv_pLAYER02_PROTOSS, 120, true);
        Wait(libNtve_gf_DifficultyValueFixed(60.0, 60.0, 30.0, 0.0), c_timeAI);
        AIAttackWaveAddWaypoint(gv_pLAYER02_PROTOSS, PointFromId(36), false);
        AIAttackWaveAddUnits4(4, 4, 6, 8, "Zealot");
        AIAttackWaveAddUnits4(2, 2, 3, 4, "Stalker");
        AIAttackWaveAddUnits4(1, 1, 2, 2, "Archon");
        AIAttackWaveSend(gv_pLAYER02_PROTOSS, 120, true);
        Wait(libNtve_gf_DifficultyValueFixed(60.0, 60.0, 30.0, 0.0), c_timeAI);
        AIAttackWaveAddWaypoint(gv_pLAYER02_PROTOSS, PointFromId(36), false);
        AIAttackWaveAddUnits4(1, 1, 2, 2, "Immortal");
        AIAttackWaveAddUnits4(0, 0, 1, 3, "Sentry");
        AIAttackWaveAddUnits4(2, 2, 3, 4, "Archon");
        AIAttackWaveSend(gv_pLAYER02_PROTOSS, 120, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossP02AttackWaves_Init () {
    gt_ProtossP02AttackWaves = TriggerCreate("gt_ProtossP02AttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss P03 Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_ProtossP03AttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPlayer(gv_pLAYER03_PROTOSS, PlayerGroupSingle(gv_pLAYER01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER03_PROTOSS, PointFromId(322));
    Wait(libNtve_gf_DifficultyValueFixed(90.0, 90.0, 60.0, 30.0), c_timeAI);
    AIAttackWaveAddUnits4(3, 3, 5, 6, "Zealot");
    AIAttackWaveSend(gv_pLAYER03_PROTOSS, 120, true);
    Wait(libNtve_gf_DifficultyValueFixed(90.0, 90.0, 60.0, 30.0), c_timeAI);
    AIAttackWaveAddUnits4(3, 3, 4, 5, "Stalker");
    AIAttackWaveAddUnits4(0, 1, 2, 3, "Sentry");
    AIAttackWaveSend(gv_pLAYER03_PROTOSS, 120, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossP03AttackWaves_Init () {
    gt_ProtossP03AttackWaves = TriggerCreate("gt_ProtossP03AttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss P04 Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_ProtossP04AttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPlayer(gv_pLAYER04_PROTOSS, PlayerGroupSingle(gv_pLAYER01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER04_PROTOSS, PointFromId(262));
    Wait(libNtve_gf_DifficultyValueFixed(480.0, 480.0, 400.0, 320.0), c_timeAI);
    AIAttackWaveAddUnits4(2, 2, 5, 6, "Sentry");
    AIAttackWaveAddUnits4(1, 1, 2, 2, "Immortal");
    AIAttackWaveSend(gv_pLAYER04_PROTOSS, 120, true);
    Wait(libNtve_gf_DifficultyValueFixed(90.0, 90.0, 55.0, 20.0), c_timeAI);
    AIAttackWaveAddUnits4(2, 2, 2, 5, "Sentry");
    AIAttackWaveAddUnits4(1, 1, 2, 2, "Colossus");
    AIAttackWaveSend(gv_pLAYER04_PROTOSS, 120, true);
    while (true) {
        Wait(libNtve_gf_DifficultyValueFixed(90.0, 90.0, 55.0, 20.0), c_timeAI);
        AIAttackWaveAddUnits4(2, 2, 3, 4, "Stalker");
        AIAttackWaveAddUnits4(1, 1, 2, 3, "Immortal");
        AIAttackWaveSend(gv_pLAYER04_PROTOSS, 120, true);
        Wait(libNtve_gf_DifficultyValueFixed(90.0, 90.0, 55.0, 20.0), c_timeAI);
        AIAttackWaveAddUnits4(6, 6, 7, 6, "Sentry");
        AIAttackWaveAddUnits4(0, 0, 1, 2, "Immortal");
        AIAttackWaveSend(gv_pLAYER04_PROTOSS, 120, true);
        Wait(libNtve_gf_DifficultyValueFixed(90.0, 90.0, 55.0, 20.0), c_timeAI);
        AIAttackWaveAddUnits4(3, 3, 3, 6, "Sentry");
        AIAttackWaveAddUnits4(1, 1, 2, 2, "Colossus");
        AIAttackWaveSend(gv_pLAYER04_PROTOSS, 120, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossP04AttackWaves_Init () {
    gt_ProtossP04AttackWaves = TriggerCreate("gt_ProtossP04AttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss P04 Gives Up
//--------------------------------------------------------------------------------------------------
bool gt_ProtossP04GivesUp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((TechTreeUnitCount(gv_pLAYER04_PROTOSS, "Nexus", c_techCountQueuedOrBetter) == 0) || (TechTreeUnitCount(gv_pLAYER04_PROTOSS, "Gateway", c_techCountQueuedOrBetter) == 0) || (TechTreeUnitCount(gv_pLAYER04_PROTOSS, "Pylon", c_techCountQueuedOrBetter) == 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_pLAYER04_PROTOSS, RegionFromId(6), false);
    TriggerStop(gt_ProtossP04AttackWaves);
    TriggerExecute(gt_ProtossP02AttackWaves, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossP04GivesUp_Init () {
    gt_ProtossP04GivesUp = TriggerCreate("gt_ProtossP04GivesUp_Func");
    TriggerAddEventTimePeriodic(gt_ProtossP04GivesUp, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveMinerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 1685);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveMinerals_Init () {
    gt_AIGiveMinerals = TriggerCreate("gt_AIGiveMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER02_PROTOSS, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER03_PROTOSS, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER04_PROTOSS, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveGas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 1658);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveGas_Init () {
    gt_AIGiveGas = TriggerCreate("gt_AIGiveGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER02_PROTOSS, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER03_PROTOSS, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER04_PROTOSS, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Intro Banshees Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionIntroBansheesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus04Swann00017", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus04Swann00017", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTychus04Raynor00018", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus04Raynor00018", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTychus04Swann00019", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus04Swann00019", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionIntroBansheesQ_Init () {
    gt_TransmissionIntroBansheesQ = TriggerCreate("gt_TransmissionIntroBansheesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Cloak Detectors Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionCloakDetectorsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus04Swann00022", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus04Swann00022", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionCloakDetectorsQ_Init () {
    gt_TransmissionCloakDetectorsQ = TriggerCreate("gt_TransmissionCloakDetectorsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Tal'darim Intro... Again Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTaldarimIntroAgainQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    SoundPlay(SoundLink("IncomingTransmission", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("IncomingTransmission", -1)), c_timeReal);
    // Transmission - SoundLink("TTychus04TalDarimExecutor00009", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus04TalDarimExecutor00009", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTychus04Raynor00010", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus04Raynor00010", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTaldarimIntroAgainQ_Init () {
    gt_TransmissionTaldarimIntroAgainQ = TriggerCreate("gt_TransmissionTaldarimIntroAgainQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Tal'darim - You Win This Time Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTaldarimYouWinThisTimeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus02TalDarimExecutor00066", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus02TalDarimExecutor00066", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTaldarimYouWinThisTimeQ_Init () {
    gt_TransmissionTaldarimYouWinThisTimeQ = TriggerCreate("gt_TransmissionTaldarimYouWinThisTimeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Adjutant - Fire arrival Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAdjutantFirearrivalQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus04Adjutant00034", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus04Adjutant00034", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionAdjutantFirearrivalQ_Init () {
    gt_TransmissionAdjutantFirearrivalQ = TriggerCreate("gt_TransmissionAdjutantFirearrivalQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Adjutant - Fire First Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAdjutantFireFirstWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus04Adjutant00015", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus04Adjutant00015", -1), c_transmissionDurationAdd, 0.0, true);
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(6)), 3.0, Color(100.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/C7F61772"), null, RegionGetCenter(RegionFromId(6)));
    VisRevealArea(gv_pLAYER01_USER, RegionFromId(6), 6.0, true);
    // Transmission - SoundLink("TTychus04Horner00023", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus04Horner00023", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerExecute(gt_MigrationTip, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionAdjutantFireFirstWarningQ_Init () {
    gt_TransmissionAdjutantFireFirstWarningQ = TriggerCreate("gt_TransmissionAdjutantFireFirstWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Horner - Emergency Fire Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHornerEmergencyFireWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus04Horner00016", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus04Horner00016", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionHornerEmergencyFireWarningQ_Init () {
    gt_TransmissionHornerEmergencyFireWarningQ = TriggerCreate("gt_TransmissionHornerEmergencyFireWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Horner - P04 Protoss Base Found Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHornerP04ProtossBaseFoundQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(6)), 3.0, Color(100.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/26B5B50A"), null, RegionGetCenter(RegionFromId(6)));
    VisRevealArea(gv_pLAYER01_USER, RegionFromId(6), 6.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus04Horner00003", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus04Horner00003", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionHornerP04ProtossBaseFoundQ_Init () {
    gt_TransmissionHornerP04ProtossBaseFoundQ = TriggerCreate("gt_TransmissionHornerP04ProtossBaseFoundQ_Func");
    TriggerAddEventUnitRegion(gt_TransmissionHornerP04ProtossBaseFoundQ, null, RegionFromId(6), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P04 Base Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP04BaseDestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Nexus", gv_pLAYER04_PROTOSS, RegionFromId(6), UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, 0), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Pylon", gv_pLAYER04_PROTOSS, RegionFromId(6), UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, 0), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Gateway", gv_pLAYER04_PROTOSS, RegionFromId(6), UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, 0), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    MinimapPing(PlayerGroupAll(), PointFromId(218), 6.0, Color(100.00, 100.00, 0.00));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus04Raynor00006", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus04Raynor00006", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTychus04TalDarimExecutor00011", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus04TalDarimExecutor00011", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(1.0, c_timeGame);
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/58F3D3CD"));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP04BaseDestroyedQ_Init () {
    gt_TransmissionP04BaseDestroyedQ = TriggerCreate("gt_TransmissionP04BaseDestroyedQ_Func");
    TriggerAddEventTimePeriodic(gt_TransmissionP04BaseDestroyedQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Campaign Tips Q
//--------------------------------------------------------------------------------------------------
bool gt_CampaignTipsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateStorymodeTips();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CampaignTipsQ_Init () {
    gt_CampaignTipsQ = TriggerCreate("gt_CampaignTipsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Unit: Banshee Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_NewUnitBansheeTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Tychus04_Banshees", libNtve_ge_TipType_NewUnit, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerExecute(gt_NewAbilityCloakTipQ, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewUnitBansheeTipQ_Init () {
    gt_NewUnitBansheeTipQ = TriggerCreate("gt_NewUnitBansheeTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Ability: Cloak Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_NewAbilityCloakTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Tychus04_Cloak", libNtve_ge_TipType_NewAbility, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewAbilityCloakTipQ_Init () {
    gt_NewAbilityCloakTipQ = TriggerCreate("gt_NewAbilityCloakTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wall of Fire Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_WallofFireTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Tychus04_WalloFire", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WallofFireTipQ_Init () {
    gt_WallofFireTipQ = TriggerCreate("gt_WallofFireTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Migration Tip
//--------------------------------------------------------------------------------------------------
bool gt_MigrationTip_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF023E1E1_g;
    int autoF023E1E1_u;
    unit autoF023E1E1_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    autoF023E1E1_g = UnitGroup("MineralField", c_playerAny, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF023E1E1_u = UnitGroupCount(autoF023E1E1_g, c_unitCountAll);
    for (;; autoF023E1E1_u -= 1) {
        autoF023E1E1_var = UnitGroupUnitFromEnd(autoF023E1E1_g, autoF023E1E1_u);
        if (autoF023E1E1_var == null) { break; }
        VisRevealArea(gv_pLAYER01_USER, RegionCircle(UnitGetPosition(autoF023E1E1_var), 2.0), 0.1, false);
        VisExploreArea(gv_pLAYER01_USER, RegionCircle(UnitGetPosition(autoF023E1E1_var), 2.0), true, false);
    }
    libCamp_gf_CreateTipFromConversationState("StoryTips|Tychus04_BaseMigration", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MigrationTip_Init () {
    gt_MigrationTip = TriggerCreate("gt_MigrationTip_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Banshee - 75 Cloaked Kills
//--------------------------------------------------------------------------------------------------
bool gt_AchievementBanshee75CloakedKills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER01_USER))) {
            return false;
        }

        if (!((UnitGetType(libNtve_gf_KillingUnit()) == "Banshee"))) {
            return false;
        }

        if (!(((UnitHasBehavior(libNtve_gf_KillingUnit(), "BansheeCloak") == true) || (UnitHasBehavior(libNtve_gf_KillingUnit(), "BansheeCloakCrossSpectrumDampeners") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_achievementBansheeCloakedKills += 1;
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1) && (gv_achievementBansheeCloakedKills >= 75) && (gv_achievementBansheeKillsUnlocked == false)) {
        gv_achievementBansheeKillsUnlocked = true;
        AchievementAward(gv_pLAYER01_USER, "TTychus04_3");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementBanshee75CloakedKills_Init () {
    gt_AchievementBanshee75CloakedKills = TriggerCreate("gt_AchievementBanshee75CloakedKills_Func");
    TriggerAddEventUnitDied(gt_AchievementBanshee75CloakedKills, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Barracks Or Factory Unit Not Built
//--------------------------------------------------------------------------------------------------
bool gt_AchievementBarracksOrFactoryUnitNotBuilt_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_achievementBarracksOrFactoryUnitBuilt == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Barracks") || (UnitGetType(EventUnit()) == "Factory")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_achievementBarracksOrFactoryUnitBuilt = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementBarracksOrFactoryUnitNotBuilt_Init () {
    gt_AchievementBarracksOrFactoryUnitNotBuilt = TriggerCreate("gt_AchievementBarracksOrFactoryUnitNotBuilt_Func");
    TriggerAddEventUnitTrainProgress(gt_AchievementBarracksOrFactoryUnitNotBuilt, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Player Units Killed by Fire
//--------------------------------------------------------------------------------------------------
bool gt_AchievementPlayerUnitsKilledbyFire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libNtve_gf_KillingUnit() == gv_wALLOFFIRE))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER01_USER))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_achievementPlayerUnitsKilledByFire += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementPlayerUnitsKilledbyFire_Init () {
    gt_AchievementPlayerUnitsKilledbyFire = TriggerCreate("gt_AchievementPlayerUnitsKilledbyFire_Func");
    TriggerAddEventUnitDied(gt_AchievementPlayerUnitsKilledbyFire, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Killed by Fire Wave
//--------------------------------------------------------------------------------------------------
bool gt_ProtossKilledbyFireWave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libNtve_gf_KillingUnit() == gv_wALLOFFIRE))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER02_PROTOSS) || (UnitGetOwner(EventUnit()) == gv_pLAYER03_PROTOSS) || (UnitGetOwner(EventUnit()) == gv_pLAYER04_PROTOSS)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_statProtoss_Killed_By_Fire += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossKilledbyFireWave_Init () {
    gt_ProtossKilledbyFireWave = TriggerCreate("gt_ProtossKilledbyFireWave_Func");
    TriggerAddEventUnitDied(gt_ProtossKilledbyFireWave, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Structures Remaining
//--------------------------------------------------------------------------------------------------
bool gt_ProtossStructuresRemaining_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5A98916D_g;
    int auto5A98916D_u;
    unit auto5A98916D_var;
    unitgroup auto6EBA73A5_g;
    int auto6EBA73A5_u;
    unit auto6EBA73A5_var;
    unitgroup autoEA07FD37_g;
    int autoEA07FD37_u;
    unit autoEA07FD37_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto5A98916D_g = UnitGroup(null, gv_pLAYER02_PROTOSS, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5A98916D_u = UnitGroupCount(auto5A98916D_g, c_unitCountAll);
    for (;; auto5A98916D_u -= 1) {
        auto5A98916D_var = UnitGroupUnitFromEnd(auto5A98916D_g, auto5A98916D_u);
        if (auto5A98916D_var == null) { break; }
        gv_statProtoss_Structures_Remaining += 1;
    }
    auto6EBA73A5_g = UnitGroup(null, gv_pLAYER03_PROTOSS, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6EBA73A5_u = UnitGroupCount(auto6EBA73A5_g, c_unitCountAll);
    for (;; auto6EBA73A5_u -= 1) {
        auto6EBA73A5_var = UnitGroupUnitFromEnd(auto6EBA73A5_g, auto6EBA73A5_u);
        if (auto6EBA73A5_var == null) { break; }
        gv_statProtoss_Structures_Remaining += 1;
    }
    autoEA07FD37_g = UnitGroup(null, gv_pLAYER04_PROTOSS, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEA07FD37_u = UnitGroupCount(autoEA07FD37_g, c_unitCountAll);
    for (;; autoEA07FD37_u -= 1) {
        autoEA07FD37_var = UnitGroupUnitFromEnd(autoEA07FD37_g, autoEA07FD37_u);
        if (autoEA07FD37_var == null) { break; }
        gv_statProtoss_Structures_Remaining += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossStructuresRemaining_Init () {
    gt_ProtossStructuresRemaining = TriggerCreate("gt_ProtossStructuresRemaining_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Destroy the Artifact Vault Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDestroytheArtifactVaultCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != gv_pLAYER08_DEATHSUN))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "ArtifactPiece4", 0, 0, PointFromId(1422));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, 1.0);
    gv_gameOver = true;
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDestroytheArtifactVaultComplete, true, true);
    libCamp_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDestroytheArtifactVaultCompleted_Init () {
    gt_VictoryDestroytheArtifactVaultCompleted = TriggerCreate("gt_VictoryDestroytheArtifactVaultCompleted_Func");
    TriggerAddEventUnitDied(gt_VictoryDestroytheArtifactVaultCompleted, UnitRefFromUnit(UnitFromId(28)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ProtossStructuresRemaining, true, false);
    if ((ObjectiveGetState(gv_objectiveDestroyTheArtifactVault) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_researchObjectiveProtossRelics) == c_objectiveStateCompleted)) {
        AchievementAward(gv_pLAYER01_USER, "TTychus04_1");
    }

    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_achievementPlayerUnitsKilledByFire == 0)) {
        AchievementAward(gv_pLAYER01_USER, "TTychus04_2");
    }

    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_achievementBarracksOrFactoryUnitBuilt == false)) {
        AchievementAward(gv_pLAYER01_USER, "Anniversary_TTychus04");
        TriggerDebugOutput(1, StringExternal("Param/Value/FDAA6446"), false);
    }

    VictoryPanelAddAchievement("TTychus04_1");
    VictoryPanelAddAchievement("TTychus04_2");
    VictoryPanelAddAchievement("TTychus04_3");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/69494BB1"), IntToText(gv_achievementBansheeCloakedKills));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/6085AA76"), IntToText(gv_statProtoss_Killed_By_Fire));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/575AF204"), IntToText(gv_statProtoss_Structures_Remaining));
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/2C1A7CE5"), (IntToText(gv_protossRelicsFound) + StringExternal("Param/Value/16E95A49") + IntToText(gv_protossRelicsTotal)));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/3906FB2C"), IntToText(gv_protossRelicsFound));
    libCamp_gf_EndCampaignMission(gv_pLAYER01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, 0), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/7366E782"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerEnable(gt_DefeatBaseDead, false);
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Vault Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatVaultDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER08_DEATHSUN))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/4EFCD554"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatVaultDestroyed_Init () {
    gt_DefeatVaultDestroyed = TriggerCreate("gt_DefeatVaultDestroyed_Func");
    TriggerAddEventUnitDied(gt_DefeatVaultDestroyed, UnitRefFromUnit(UnitFromId(28)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Banshee Group Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBansheeGroupDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Banshee", gv_pLAYER01_USER, null, UnitFilter(0, 0, 0, 0), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/D84B2641"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    TriggerExecute(gt_ObjectiveCleartheLZFailed, true, false);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBansheeGroupDead_Init () {
    gt_DefeatBansheeGroupDead = TriggerCreate("gt_DefeatBansheeGroupDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBansheeGroupDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitPauseAll(true);
    libCamp_gf_EndCampaignMission(gv_pLAYER01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    libCamp_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Clear the LZ Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCleartheLZCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/D6E15F55"), StringExternal("Param/Value/B2B5C286"), c_objectiveStateActive, true);
    gv_objectiveClearTheLZ = ObjectiveLastCreated();
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCleartheLZCreateQ_Init () {
    gt_ObjectiveCleartheLZCreateQ = TriggerCreate("gt_ObjectiveCleartheLZCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Clear the LZ Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCleartheLZComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveCleartheLZCreateQ, true, false);
    ObjectiveSetState(gv_objectiveClearTheLZ, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCleartheLZComplete_Init () {
    gt_ObjectiveCleartheLZComplete = TriggerCreate("gt_ObjectiveCleartheLZComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Clear the LZ Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCleartheLZFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveCleartheLZCreateQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCleartheLZFailed_Init () {
    gt_ObjectiveCleartheLZFailed = TriggerCreate("gt_ObjectiveCleartheLZFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy the Artifact Vault Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroytheArtifactVaultCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/57F9FE34"), StringExternal("Param/Value/530572D0"), c_objectiveStateActive, true);
    gv_objectiveDestroyTheArtifactVault = ObjectiveLastCreated();
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroytheArtifactVaultCreateQ_Init () {
    gt_ObjectiveDestroytheArtifactVaultCreateQ = TriggerCreate("gt_ObjectiveDestroytheArtifactVaultCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy the Artifact Vault Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroytheArtifactVaultComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroytheArtifactVaultCreateQ, true, false);
    ObjectiveSetState(gv_objectiveDestroyTheArtifactVault, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroytheArtifactVaultComplete_Init () {
    gt_ObjectiveDestroytheArtifactVaultComplete = TriggerCreate("gt_ObjectiveDestroytheArtifactVaultComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy the Artifact Vault Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroytheArtifactVaultFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroytheArtifactVaultCreateQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroytheArtifactVaultFailed_Init () {
    gt_ObjectiveDestroytheArtifactVaultFailed = TriggerCreate("gt_ObjectiveDestroytheArtifactVaultFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Research Objective Protoss Relics Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ResearchObjectiveProtossRelicsCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate((StringExternal("Param/Value/FED6E490") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectFindProtossRelics, libCamp_ge_StoryResearchObjectiveTextStyle_Multipart, gv_protossRelicsTotal, 0)), StringExternal("Param/Value/B3C5C286"), c_objectiveStateActive, false);
    gv_researchObjectiveProtossRelics = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TTychus04Objective3, ObjectiveLastCreated(), StringExternal("Param/Value/089BF255"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResearchObjectiveProtossRelicsCreateQ_Init () {
    gt_ResearchObjectiveProtossRelicsCreateQ = TriggerCreate("gt_ResearchObjectiveProtossRelicsCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Research Objective Protoss Relics Update
//--------------------------------------------------------------------------------------------------
bool gt_ResearchObjectiveProtossRelicsUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "ProtossRelic"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ResearchObjectiveProtossRelicsCreateQ, true, false);
    libCamp_gf_DisplayResearchPointsGiventoPlayer(libCamp_ge_StoryResearchObject_ResearchObjectFindProtossRelics, EventUnit(), gv_pLAYER01_USER);
    UnitKill(EventUnit());
    gv_protossRelicsFound += 1;
    ObjectiveSetName(gv_researchObjectiveProtossRelics, (StringExternal("Param/Value/057DC625") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectFindProtossRelics, libCamp_ge_StoryResearchObjectiveTextStyle_Multipart, gv_protossRelicsTotal, gv_protossRelicsFound)));
    if ((gv_protossRelicsFound == gv_protossRelicsTotal)) {
        TriggerExecute(gt_ResearchObjectiveProtossRelicsComplete, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResearchObjectiveProtossRelicsUpdate_Init () {
    gt_ResearchObjectiveProtossRelicsUpdate = TriggerCreate("gt_ResearchObjectiveProtossRelicsUpdate_Func");
    TriggerAddEventUnitAbility(gt_ResearchObjectiveProtossRelicsUpdate, null, AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Research Objective Protoss Relics Complete
//--------------------------------------------------------------------------------------------------
bool gt_ResearchObjectiveProtossRelicsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ResearchObjectiveProtossRelicsCreateQ, true, false);
    ObjectiveSetName(gv_researchObjectiveProtossRelics, (StringExternal("Param/Value/3BD695A1") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectFindProtossRelics, libCamp_ge_StoryResearchObjectiveTextStyle_Multipart, gv_protossRelicsTotal, gv_protossRelicsFound)));
    ObjectiveSetState(gv_researchObjectiveProtossRelics, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResearchObjectiveProtossRelicsComplete_Init () {
    gt_ResearchObjectiveProtossRelicsComplete = TriggerCreate("gt_ResearchObjectiveProtossRelicsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto161216AC_g;
    int auto161216AC_u;
    unit auto161216AC_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_StartGameStage1);
    TriggerStop(gt_TransmissionIntroBansheesQ);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    gv_inCinematic = true;
    gv_gameOver = true;
    auto161216AC_g = UnitGroup(null, gv_pLAYER01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto161216AC_u = UnitGroupCount(auto161216AC_g, c_unitCountAll);
    for (;; auto161216AC_u -= 1) {
        auto161216AC_var = UnitGroupUnitFromEnd(auto161216AC_g, auto161216AC_u);
        if (auto161216AC_var == null) { break; }
        UnitRemove(auto161216AC_var);
    }
    AITimePause(true);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionEntireMap());
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_BriefingScene01, true, true);
    TriggerExecute(gt_BriefingScene03, true, true);
    TriggerExecute(gt_BriefingScene04, true, true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UnitPauseAll(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetToDLighting("MeinhoffCampaign");
    GameTimeOfDaySet("12:00:00");
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(1051), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(1052), SoundLengthSync(SoundLink("TTychus04Briefing2Tychus00001", -1)), -1, 10, true);
    MovieStartRecording("Briefing_Video_TTychus04_00");
    // Transmission - SoundLink("TTychus04Briefing2Tychus00001", -1)
    SoundPlay(SoundLink("TTychus04Briefing2Tychus00001", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTychus04Briefing2Tychus00001", -1))), c_timeReal);
    // Transmission - SoundLink("TTychus04Briefing2Horner00002", -1)
    SoundPlay(SoundLink("TTychus04Briefing2Horner00002", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTychus04Briefing2Horner00002", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus04Briefing2Tychus00001", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus04Briefing2Horner00002", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00_Init () {
    gt_BriefingScene00 = TriggerCreate("gt_BriefingScene00_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetToDLighting("MeinhoffCampaign");
    GameTimeOfDaySet("08:00:00");
    libNtve_gf_CreateUnitsAtPoint2(1, "WallOfFire", 0, gv_pLAYER08_DEATHSUN, PointFromId(419));
    gv_cinematic_WallOfFire = UnitLastCreated();
    UnitSetPropertyFixed(gv_cinematic_WallOfFire, c_unitPropMovementSpeed, gv_wall_of_Fire_Speed);
    UnitIssueOrder(gv_cinematic_WallOfFire, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(121)), c_orderQueueReplace);
    TriggerEnable(gt_WallofFireDamage, true);
    libNtve_gf_SendActorMessageToGameRegion(RegionFromId(23), "Signal DoodadDeath");
    libNtve_gf_SendActorMessageToGameRegion(RegionFromId(23), "Signal TreeFire");
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(1054), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    MovieStartRecording("Briefing_Video_TTychus04_01");
    // Transmission - SoundLink("TTychus04Briefing2Horner00005", -1)
    SoundPlay(SoundLink("TTychus04Briefing2Horner00005", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTychus04Briefing2Horner00005", -1))), c_timeReal);
    // Transmission - SoundLink("TTychus04Briefing2Raynor00011", -1)
    SoundPlay(SoundLink("TTychus04Briefing2Raynor00011", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTychus04Briefing2Raynor00011", -1))), c_timeReal);
    // Transmission - SoundLink("TTychus04Briefing2Horner00012", -1)
    SoundPlay(SoundLink("TTychus04Briefing2Horner00012", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTychus04Briefing2Horner00005", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus04Briefing2Horner00005", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus04Briefing2Raynor00011", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus04Briefing2Horner00005", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01_Init () {
    gt_BriefingScene01 = TriggerCreate("gt_BriefingScene01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 02
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(380), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(415), SoundLengthSync(SoundLink("TTychus04Briefing2Horner00007", -1)), -1, 10, true);
    MovieStartRecording("Briefing_Video_TTychus04_02");
    // Transmission - SoundLink("TTychus04Briefing2Horner00007", -1)
    SoundPlay(SoundLink("TTychus04Briefing2Horner00007", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTychus04Briefing2Horner00007", -1))), c_timeReal);
    // Transmission - SoundLink("TTychus04Briefing2Raynor00003", -1)
    SoundPlay(SoundLink("TTychus04Briefing2Raynor00003", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTychus04Briefing2Raynor00003", -1))), c_timeReal);
    // Transmission - SoundLink("TTychus04Briefing2Horner00009", -1)
    SoundPlay(SoundLink("TTychus04Briefing2Horner00009", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTychus04Briefing2Horner00009", -1))), c_timeReal);
    // Transmission - SoundLink("TTychus04Briefing2Horner00010", -1)
    SoundPlay(SoundLink("TTychus04Briefing2Raynor00010", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTychus04Briefing2Raynor00010", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus04Briefing2Horner00007", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus04Briefing2Raynor00003", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus04Briefing2Horner00009", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus04Briefing2Raynor00010", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene02_Init () {
    gt_BriefingScene02 = TriggerCreate("gt_BriefingScene02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 03
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("12:00:00");
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(1065), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(417), SoundLengthSync(SoundLink("TTychus04Briefing2Tychus00006", -1)), -1, 10, true);
    MovieStartRecording("Briefing_Video_TTychus04_03");
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectLargeRed", UnitGetPosition(UnitFromId(28)));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight 3.000000");
    // Transmission - SoundLink("TTychus04Briefing2Tychus00006", -1)
    SoundPlay(SoundLink("TTychus04Briefing2Tychus00006", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTychus04Briefing2Tychus00006", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus04Briefing2Tychus00006", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene03_Init () {
    gt_BriefingScene03 = TriggerCreate("gt_BriefingScene03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 04
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene04_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA50BA528_g;
    int autoA50BA528_u;
    unit autoA50BA528_var;
    unitgroup auto4106E490_g;
    int auto4106E490_u;
    unit auto4106E490_var;
    unitgroup autoEE745089_g;
    int autoEE745089_u;
    unit autoEE745089_var;
    unitgroup auto46E61F6E_g;
    int auto46E61F6E_u;
    unit auto46E61F6E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("09:00:00");
    autoA50BA528_g = UnitGroup(null, gv_pLAYER02_PROTOSS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA50BA528_u = UnitGroupCount(autoA50BA528_g, c_unitCountAll);
    for (;; autoA50BA528_u -= 1) {
        autoA50BA528_var = UnitGroupUnitFromEnd(autoA50BA528_g, autoA50BA528_u);
        if (autoA50BA528_var == null) { break; }
        UnitRemove(autoA50BA528_var);
    }
    auto4106E490_g = UnitGroup(null, gv_pLAYER03_PROTOSS, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4106E490_u = UnitGroupCount(auto4106E490_g, c_unitCountAll);
    for (;; auto4106E490_u -= 1) {
        auto4106E490_var = UnitGroupUnitFromEnd(auto4106E490_g, auto4106E490_u);
        if (auto4106E490_var == null) { break; }
        UnitRemove(auto4106E490_var);
    }
    autoEE745089_g = UnitGroup(null, gv_pLAYER02_PROTOSS, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEE745089_u = UnitGroupCount(autoEE745089_g, c_unitCountAll);
    for (;; autoEE745089_u -= 1) {
        autoEE745089_var = UnitGroupUnitFromEnd(autoEE745089_g, autoEE745089_u);
        if (autoEE745089_var == null) { break; }
        UnitRemove(autoEE745089_var);
    }
    auto46E61F6E_g = UnitGroup(null, gv_pLAYER01_USER, null, UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto46E61F6E_u = UnitGroupCount(auto46E61F6E_g, c_unitCountAll);
    for (;; auto46E61F6E_u -= 1) {
        auto46E61F6E_var = UnitGroupUnitFromEnd(auto46E61F6E_g, auto46E61F6E_u);
        if (auto46E61F6E_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto46E61F6E_var, true);
    }
    UnitRemove(UnitFromId(390));
    UnitPauseAll(false);
    UnitSetPosition(gv_cinematic_WallOfFire, PointFromId(1094), false);
    UnitSetPropertyFixed(gv_cinematic_WallOfFire, c_unitPropMovementSpeed, gv_wall_of_Fire_Speed);
    UnitIssueOrder(gv_cinematic_WallOfFire, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(121)), c_orderQueueReplace);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_pLAYER01_USER);
    libNtve_gf_SendActorMessageToGameRegion(RegionFromId(24), "Signal DoodadDeath");
    libNtve_gf_SendActorMessageToGameRegion(RegionFromId(24), "Signal TreeFire");
    Wait(2.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(418), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(1049), SoundLengthSync(SoundLink("TTychus04Briefing2Raynor00008", -1)), -1, 10, true);
    MovieStartRecording("Briefing_Video_TTychus04_04");
    TriggerExecute(gt_BriefingBaseMove, true, false);
    // Transmission - SoundLink("TTychus04Briefing2Raynor00008", -1)
    SoundPlay(SoundLink("TTychus04Briefing2Raynor00008", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTychus04Briefing2Raynor00008", -1))), c_timeReal);
    // Transmission - SoundLink("TTychus04Briefing2Tychus00013", -1)
    SoundPlay(SoundLink("TTychus04Briefing2Tychus00013", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTychus04Briefing2Tychus00013", -1))), c_timeReal);
    // Transmission - SoundLink("TTychus04Briefing2Raynor00014", -1)
    SoundPlay(SoundLink("TTychus04Briefing2Raynor00014", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTychus04Briefing2Raynor00014", -1))), c_timeReal);
    // Transmission - SoundLink("TTychus04Briefing2Tychus00004", -1)
    SoundPlay(SoundLink("TTychus04Briefing2Tychus00004", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTychus04Briefing2Tychus00004", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus04Briefing2Raynor00008", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus04Briefing2Tychus00013", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus04Briefing2Raynor00014", -1))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus04Briefing2Tychus00004", -1))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene04_Init () {
    gt_BriefingScene04 = TriggerCreate("gt_BriefingScene04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Base Move
//--------------------------------------------------------------------------------------------------
bool gt_BriefingBaseMove_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupIssueOrder(UnitGroup("Marine", gv_pLAYER01_USER, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1093)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup("Marauder", gv_pLAYER01_USER, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1093)), c_orderQueueReplace);
    UnitIssueOrder(UnitGroupUnit(UnitGroup("Barracks", gv_pLAYER01_USER, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), Order(AbilityCommand("BarracksLiftOff", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitGroupUnit(UnitGroup("Factory", gv_pLAYER01_USER, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), Order(AbilityCommand("FactoryLiftOff", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitGroupUnit(UnitGroup("Starport", gv_pLAYER01_USER, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), Order(AbilityCommand("StarportLiftOff", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitGroupUnit(UnitGroup("CommandCenter", gv_pLAYER01_USER, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), Order(AbilityCommand("CommandCenterTransport", 4)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(UnitGroupUnit(UnitGroup("BarracksFlying", gv_pLAYER01_USER, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1093)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitGroupUnit(UnitGroup("FactoryFlying", gv_pLAYER01_USER, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1093)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitGroupUnit(UnitGroup("StarportFlying", gv_pLAYER01_USER, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1093)), c_orderQueueAddToEnd);
    while (!((UnitGroupCount(UnitGroup("SCV", gv_pLAYER01_USER, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(0.1, c_timeGame);
    }
    UnitIssueOrder(UnitGroupUnit(UnitGroup("CommandCenter", gv_pLAYER01_USER, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), Order(AbilityCommand("CommandCenterLiftOff", 0)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(UnitGroupUnit(UnitGroup("CommandCenterFlying", gv_pLAYER01_USER, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1093)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingBaseMove_Init () {
    gt_BriefingBaseMove = TriggerCreate("gt_BriefingBaseMove_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoAC90BF29_g;
    int autoAC90BF29_u;
    unit autoAC90BF29_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    RegionPlayableMapSet(RegionFromId(7));
    CameraSave(gv_pLAYER01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_pLAYER01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitPauseAll(true);
    autoAC90BF29_g = UnitGroup(null, gv_pLAYER03_PROTOSS, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAC90BF29_u = UnitGroupCount(autoAC90BF29_g, c_unitCountAll);
    for (;; autoAC90BF29_u -= 1) {
        autoAC90BF29_var = UnitGroupUnitFromEnd(autoAC90BF29_g, autoAC90BF29_u);
        if (autoAC90BF29_var == null) { break; }
        UnitRemove(autoAC90BF29_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoFDF34E08_g;
    int autoFDF34E08_u;
    unit autoFDF34E08_var;

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetBackground(c_backgroundFixed, "AvernusSkybox", 100.0);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(8), 0.0, -1, 10, true);
    autoFDF34E08_g = gv_bansheeGroup;
    autoFDF34E08_u = UnitGroupCount(autoFDF34E08_g, c_unitCountAll);
    for (;; autoFDF34E08_u -= 1) {
        autoFDF34E08_var = UnitGroupUnitFromEnd(autoFDF34E08_g, autoFDF34E08_u);
        if (autoFDF34E08_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoFDF34E08_var, true);
        UnitSetPosition(autoFDF34E08_var, PointFromId(423), false);
        libNtve_gf_PauseUnit(autoFDF34E08_var, false);
        UnitIssueOrder(autoFDF34E08_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(423)), c_orderQueueReplace);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "CommandCenterFlying", 0, gv_pLAYER01_USER, PointFromId(20));
    UnitGroupAdd(gv_midCineTempPlayerGroup, UnitLastCreated());
    UnitCargoCreate(UnitLastCreated(), "SCV", 8);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitCargoLastCreatedGroup(), gv_midCineTempPlayerGroup);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("CommandCenterLand", 0), PointFromId(13)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("CommandCenterTransport", 1)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "BarracksFlying", 0, gv_pLAYER01_USER, PointFromId(22));
    UnitGroupAdd(gv_midCineTempPlayerGroup, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("BarracksLand", 0), RegionGetCenter(RegionFromId(26))), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "FactoryFlying", 0, gv_pLAYER01_USER, PointFromId(21));
    UnitGroupAdd(gv_midCineTempPlayerGroup, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("FactoryLand", 0), RegionGetCenter(RegionFromId(27))), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "StarportFlying", 0, gv_pLAYER01_USER, PointFromId(23));
    UnitGroupAdd(gv_midCineTempPlayerGroup, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("StarportLand", 0), RegionGetCenter(RegionFromId(28))), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("StarportTechLabMorph", 0)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "SpecialOpsDropship", 0, gv_pLAYER01_USER, PointFromId(35));
    gv_midCineDropship = UnitLastCreated();
    UnitCargoCreate(gv_midCineDropship, "Marine", 4);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitCargoLastCreatedGroup(), gv_midCineTempPlayerGroup);
    UnitCargoCreate(gv_midCineDropship, "Marauder", 2);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitCargoLastCreatedGroup(), gv_midCineTempPlayerGroup);
    UnitIssueOrder(gv_midCineDropship, OrderTargetingPoint(AbilityCommand("SpecOpsDropshipTransport", 2), PointFromId(29)), c_orderQueueReplace);
    UnitIssueOrder(gv_midCineDropship, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(5))), c_orderQueueAddToEnd);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_midCinematicCompleted = false;
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(9), 12.0, -1, 10, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus04MusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    // Transmission - SoundLink("TTychus04Raynor00021", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus04Raynor00021", 0), c_transmissionDurationAdd, 1.0, true);
    gv_midCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_midCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup autoE4241DE8_g;
    int autoE4241DE8_u;
    unit autoE4241DE8_var;
    unitgroup auto4473E405_g;
    int auto4473E405_u;
    unit auto4473E405_var;
    unitgroup auto4DD33441_g;
    int auto4DD33441_u;
    unit auto4DD33441_var;
    unitgroup auto6907CED5_g;
    int auto6907CED5_u;
    unit auto6907CED5_var;
    unitgroup auto11FE714E_g;
    int auto11FE714E_u;
    unit auto11FE714E_var;
    unitgroup auto16DBA4D3_g;
    int auto16DBA4D3_u;
    unit auto16DBA4D3_var;
    unitgroup auto18AD018A_g;
    int auto18AD018A_u;
    unit auto18AD018A_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroyAll();
    UnitRemove(gv_geyser01);
    UnitRemove(gv_geyser02);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Refinery", 0, gv_pLAYER01_USER, PointFromId(1379));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Refinery", 0, gv_pLAYER01_USER, PointFromId(1380));
    autoE4241DE8_g = gv_midCineTempPlayerGroup;
    autoE4241DE8_u = UnitGroupCount(autoE4241DE8_g, c_unitCountAll);
    for (;; autoE4241DE8_u -= 1) {
        autoE4241DE8_var = UnitGroupUnitFromEnd(autoE4241DE8_g, autoE4241DE8_u);
        if (autoE4241DE8_var == null) { break; }
        UnitRemove(autoE4241DE8_var);
    }
    auto4473E405_g = gv_playerP01Base;
    auto4473E405_u = UnitGroupCount(auto4473E405_g, c_unitCountAll);
    for (;; auto4473E405_u -= 1) {
        auto4473E405_var = UnitGroupUnitFromEnd(auto4473E405_g, auto4473E405_u);
        if (auto4473E405_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto4473E405_var, true);
    }
    auto4DD33441_g = gv_relic01AreaGroup;
    auto4DD33441_u = UnitGroupCount(auto4DD33441_g, c_unitCountAll);
    for (;; auto4DD33441_u -= 1) {
        auto4DD33441_var = UnitGroupUnitFromEnd(auto4DD33441_g, auto4DD33441_u);
        if (auto4DD33441_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto4DD33441_var, true);
    }
    auto6907CED5_g = gv_critterGroup;
    auto6907CED5_u = UnitGroupCount(auto6907CED5_g, c_unitCountAll);
    for (;; auto6907CED5_u -= 1) {
        auto6907CED5_var = UnitGroupUnitFromEnd(auto6907CED5_g, auto6907CED5_u);
        if (auto6907CED5_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto6907CED5_var, true);
    }
    auto11FE714E_g = UnitGroup(null, gv_pLAYER03_PROTOSS, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto11FE714E_u = UnitGroupCount(auto11FE714E_g, c_unitCountAll);
    for (;; auto11FE714E_u -= 1) {
        auto11FE714E_var = UnitGroupUnitFromEnd(auto11FE714E_g, auto11FE714E_u);
        if (auto11FE714E_var == null) { break; }
        UnitRemove(auto11FE714E_var);
    }
    auto16DBA4D3_g = gv_protossP03Base;
    auto16DBA4D3_u = UnitGroupCount(auto16DBA4D3_g, c_unitCountAll);
    for (;; auto16DBA4D3_u -= 1) {
        auto16DBA4D3_var = UnitGroupUnitFromEnd(auto16DBA4D3_g, auto16DBA4D3_u);
        if (auto16DBA4D3_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto16DBA4D3_var, true);
    }
    auto18AD018A_g = gv_bansheeGroup;
    auto18AD018A_u = UnitGroupCount(auto18AD018A_g, c_unitCountAll);
    for (;; auto18AD018A_u -= 1) {
        auto18AD018A_var = UnitGroupUnitFromEnd(auto18AD018A_g, auto18AD018A_u);
        if (auto18AD018A_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto18AD018A_var, true);
        UnitSetPosition(auto18AD018A_var, PointFromId(423), false);
        UnitSetPropertyFixed(auto18AD018A_var, c_unitPropEnergyPercent, 100.0);
    }
    UnitRemove(gv_midCineDropship);
    UnitPauseAll(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER01_USER, c_playerStateXPGain, true);
    libNtve_gf_RestoreUnitSelection(gv_pLAYER01_USER);
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.1, c_timeReal);
    TriggerExecute(gt_StartHarvesting, true, false);
    if ((gv_midCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoDefault(), 0.0, -1, 10, true);
    libNtve_gf_SwooshCamera(gv_pLAYER01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(13), 1.5);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    TriggerExecute(gt_StartGameStage2, true, false);
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/4255A42A"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto499393FD_g;
    int auto499393FD_u;
    unit auto499393FD_var;
    unitgroup auto935523A9_g;
    int auto935523A9_u;
    unit auto935523A9_var;
    unitgroup autoE36BF510_g;
    int autoE36BF510_u;
    unit autoE36BF510_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_pLAYER01_USER);
    PlayerSetState(gv_pLAYER01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    PlayerSetState(gv_pLAYER02_PROTOSS, c_playerStateFidgetingEnabled, false);
    PlayerSetState(gv_pLAYER03_PROTOSS, c_playerStateFidgetingEnabled, false);
    PlayerSetState(gv_pLAYER04_PROTOSS, c_playerStateFidgetingEnabled, false);
    UnitPauseAll(true);
    UnitRemove(gv_wALLOFFIRE);
    auto499393FD_g = UnitGroup(null, gv_pLAYER01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto499393FD_u = UnitGroupCount(auto499393FD_g, c_unitCountAll);
    for (;; auto499393FD_u -= 1) {
        auto499393FD_var = UnitGroupUnitFromEnd(auto499393FD_g, auto499393FD_u);
        if (auto499393FD_var == null) { break; }
        UnitRemove(auto499393FD_var);
    }
    auto935523A9_g = UnitGroup(null, gv_pLAYER02_PROTOSS, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto935523A9_u = UnitGroupCount(auto935523A9_g, c_unitCountAll);
    for (;; auto935523A9_u -= 1) {
        auto935523A9_var = UnitGroupUnitFromEnd(auto935523A9_g, auto935523A9_u);
        if (auto935523A9_var == null) { break; }
        UnitRemove(auto935523A9_var);
    }
    autoE36BF510_g = UnitGroup(null, gv_pLAYER04_PROTOSS, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE36BF510_u = UnitGroupCount(autoE36BF510_g, c_unitCountAll);
    for (;; autoE36BF510_u -= 1) {
        autoE36BF510_var = UnitGroupUnitFromEnd(autoE36BF510_g, autoE36BF510_u);
        if (autoE36BF510_var == null) { break; }
        UnitRemove(autoE36BF510_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dropship;
    unitgroup lv_terranAttackGroup;
    unitgroup lv_protossDefenseGroup;
    unitgroup lv_mineralGroup;
    unitgroup lv_mineralHarvesters;

    // Automatic Variable Declarations
    const int auto240520F1_n = 5;
    int auto240520F1_i;
    const int auto783CE086_n = 2;
    int auto783CE086_i;
    const int auto1DD5B1FE_n = 12;
    int auto1DD5B1FE_i;
    const int autoE673386F_n = 6;
    int autoE673386F_i;

    // Variable Initialization
    lv_terranAttackGroup = UnitGroupEmpty();
    lv_protossDefenseGroup = UnitGroupEmpty();
    lv_mineralGroup = UnitGroupEmpty();
    lv_mineralHarvesters = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(85), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(794), 12.0, -1, 10, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Banshee", 0, gv_pLAYER01_USER, PointFromId(949));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Banshee", 0, gv_pLAYER01_USER, PointFromId(952));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Banshee", 0, gv_pLAYER01_USER, PointFromId(950));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Banshee", 0, gv_pLAYER01_USER, PointFromId(951));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Gateway", 0, gv_pLAYER02_PROTOSS, PointFromId(953));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Gateway", 0, gv_pLAYER02_PROTOSS, PointFromId(954));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Gateway", 0, gv_pLAYER02_PROTOSS, PointFromId(1095));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Pylon", 0, gv_pLAYER02_PROTOSS, PointFromId(955));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Pylon", 0, gv_pLAYER02_PROTOSS, PointFromId(956));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Pylon", 0, gv_pLAYER02_PROTOSS, PointFromId(1088));
    for (auto240520F1_i = 1; auto240520F1_i <= auto240520F1_n; auto240520F1_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_pLAYER02_PROTOSS, RegionRandomPoint(RegionFromId(14)));
        UnitGroupAdd(lv_protossDefenseGroup, UnitLastCreated());
    }
    for (auto783CE086_i = 1; auto783CE086_i <= auto783CE086_n; auto783CE086_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Archon", 0, gv_pLAYER02_PROTOSS, RegionRandomPoint(RegionFromId(14)));
        UnitGroupAdd(lv_protossDefenseGroup, UnitLastCreated());
    }
    for (auto1DD5B1FE_i = 1; auto1DD5B1FE_i <= auto1DD5B1FE_n; auto1DD5B1FE_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, gv_pLAYER01_USER, RegionRandomPoint(RegionFromId(15)));
        UnitGroupAdd(lv_terranAttackGroup, UnitLastCreated());
    }
    for (autoE673386F_i = 1; autoE673386F_i <= autoE673386F_n; autoE673386F_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Banshee", 0, gv_pLAYER01_USER, RegionRandomPoint(RegionFromId(15)));
        UnitGroupAdd(lv_terranAttackGroup, UnitLastCreated());
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpecialOpsDropship", 0, gv_pLAYER01_USER, PointFromId(174));
    lv_dropship = UnitLastCreated();
    UnitCargoCreate(lv_dropship, "Marine", 8);
    UnitIssueOrder(lv_dropship, OrderTargetingPoint(AbilityCommand("SpecOpsDropshipTransport", 2), PointFromId(941)), c_orderQueueReplace);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus04MusicOutro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_victoryCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UnitGroupIssueOrder(lv_protossDefenseGroup, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(15))), c_orderQueueReplace);
    UnitGroupIssueOrder(lv_terranAttackGroup, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(14))), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    // Transmission - SoundLink("TTychus04Raynor00001", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus04Raynor00001", -1), c_transmissionDurationAdd, 1.0, true);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UnitPauseAll(true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WallOfFire", 0, gv_pLAYER08_DEATHSUN, PointFromId(1053));
    libNtve_gf_PauseUnit(gv_wALLOFFIRE, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "HighTemplar", 0, gv_pLAYER02_PROTOSS, PointFromId(942));
    AISetUnitScriptControlled(UnitLastCreated(), true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Archon", 0, gv_pLAYER02_PROTOSS, PointFromId(946));
    AISetUnitScriptControlled(UnitLastCreated(), true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Archon", 0, gv_pLAYER02_PROTOSS, PointFromId(1062));
    AISetUnitScriptControlled(UnitLastCreated(), true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrismPhasing", 0, gv_pLAYER02_PROTOSS, PointFromId(55));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrismPhasing", 0, gv_pLAYER02_PROTOSS, PointFromId(170));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrismPhasing", 0, gv_pLAYER02_PROTOSS, PointFromId(1050));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Gateway", 0, gv_pLAYER02_PROTOSS, PointFromId(944));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Stargate", 0, gv_pLAYER02_PROTOSS, PointFromId(945));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", 0, gv_pLAYER02_PROTOSS, PointFromId(943));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TemplarArchive", 0, gv_pLAYER02_PROTOSS, PointFromId(947));
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(948), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(1414), 15.0, -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(1.0, c_timeGame);
    // Transmission - SoundLink("TTychus04TalDarimExecutor00020", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus04TalDarimExecutor00020", -1), c_transmissionDurationAdd, 0.0, true);
    Wait(2.0, c_timeGame);
    gv_victoryCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuratioin;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victoryCinematicCompleted == true)) {
        lv_fadeDuratioin = 1.0;
    }
    else {
        lv_fadeDuratioin = 0.5;
    }
    CinematicFade(false, lv_fadeDuratioin, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(lv_fadeDuratioin, c_timeReal);
    UnitPauseAll(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04Music_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_IntroSequence_Init();
    gt_StartGameStage1_Init();
    gt_StartGameStage2_Init();
    gt_StartHarvesting_Init();
    gt_Stage1Leashes_Init();
    gt_AreaClearStage2_Init();
    gt_ArtifactVaultPing_Init();
    gt_PingDetectorCannon_Init();
    gt_RemoveCannonPing_Init();
    gt_CreateWallofFire_Init();
    gt_WallofFirePing_Init();
    gt_WallofFireDamage_Init();
    gt_ShareWallofFireVision_Init();
    gt_SetWallofFireLighting_Init();
    gt_WallofFireAtP03ProtossBase_Init();
    gt_ProtossP03FinalActions_Init();
    gt_WallofFireFirstWarning_Init();
    gt_WallofFireEmergencyWarning_Init();
    gt_WallofFireSpeedUp_Init();
    gt_WallofFireSlowDown_Init();
    gt_RemoveResources_Init();
    gt_WarpPrismSpawninBaseDefenders_Init();
    gt_StartAI_Init();
    gt_ProtossP02AttackWaves_Init();
    gt_ProtossP03AttackWaves_Init();
    gt_ProtossP04AttackWaves_Init();
    gt_ProtossP04GivesUp_Init();
    gt_AIGiveMinerals_Init();
    gt_AIGiveGas_Init();
    gt_TransmissionIntroBansheesQ_Init();
    gt_TransmissionCloakDetectorsQ_Init();
    gt_TransmissionTaldarimIntroAgainQ_Init();
    gt_TransmissionTaldarimYouWinThisTimeQ_Init();
    gt_TransmissionAdjutantFirearrivalQ_Init();
    gt_TransmissionAdjutantFireFirstWarningQ_Init();
    gt_TransmissionHornerEmergencyFireWarningQ_Init();
    gt_TransmissionHornerP04ProtossBaseFoundQ_Init();
    gt_TransmissionP04BaseDestroyedQ_Init();
    gt_CampaignTipsQ_Init();
    gt_NewUnitBansheeTipQ_Init();
    gt_NewAbilityCloakTipQ_Init();
    gt_WallofFireTipQ_Init();
    gt_MigrationTip_Init();
    gt_AchievementBanshee75CloakedKills_Init();
    gt_AchievementBarracksOrFactoryUnitNotBuilt_Init();
    gt_AchievementPlayerUnitsKilledbyFire_Init();
    gt_ProtossKilledbyFireWave_Init();
    gt_ProtossStructuresRemaining_Init();
    gt_VictoryDestroytheArtifactVaultCompleted_Init();
    gt_Victory_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatVaultDestroyed_Init();
    gt_DefeatBansheeGroupDead_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_ObjectiveCleartheLZCreateQ_Init();
    gt_ObjectiveCleartheLZComplete_Init();
    gt_ObjectiveCleartheLZFailed_Init();
    gt_ObjectiveDestroytheArtifactVaultCreateQ_Init();
    gt_ObjectiveDestroytheArtifactVaultComplete_Init();
    gt_ObjectiveDestroytheArtifactVaultFailed_Init();
    gt_ResearchObjectiveProtossRelicsCreateQ_Init();
    gt_ResearchObjectiveProtossRelicsUpdate_Init();
    gt_ResearchObjectiveProtossRelicsComplete_Init();
    gt_BriefingQ_Init();
    gt_BriefingScene00_Init();
    gt_BriefingScene01_Init();
    gt_BriefingScene02_Init();
    gt_BriefingScene03_Init();
    gt_BriefingScene04_Init();
    gt_BriefingBaseMove_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
