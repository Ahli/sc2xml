//==================================================================================================
// 
// Generated Map Script
// 
// Name:   A Sinister Turn
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/CampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libCamp_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_p1_USER = 1;
const int gv_p2_PROTOSS_STALKER = 2;
const int gv_p3_PROTOSS_ENEMY = 3;
const int gv_p4_PROTOSS_ENEMY = 4;
const int gv_p5_ABANDONED_STRUCTURES = 5;
const int gv_p6_PROTOSS_ENEMY = 6;
const int gv_p7_NEUTRAL = 7;
const int gv_p8_PRISON_STRUCTURE = 8;
const int gv_p10_HYBRID_MANIFESTATIONS = 10;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_inCinematic;
unit gv_superWarpGate_Neutral;
unit gv_preserverPrison01;
unit gv_preserverPrison02;
unit gv_preserverPrison03;
doodad gv_libraryHybrid;
unit gv_libraryAtBridge01;
unit gv_libraryAtBridge02;
unit gv_libraryAtBridge03;
unit gv_libraryAtBridge04;
unit gv_libraryAtBridge05;
unit gv_stalkerAtBridge;
unitgroup gv_prisonGroup;
int gv_startingMinerals;
int gv_startingGas;
unit gv_darkTemplar01;
unit gv_darkTemplar02;
unit gv_pylonPlayerCreatedDT;
unit gv_pylonPlayerCreatedRobotics;
unit gv_pylonPlayerCreatedHighTemplar;
unit gv_pylonInvisibleHighTemplar;
timer gv_achievementHardTimer;
timer gv_timerStalkerMoveOnHardBrutal;
int gv_inCombatIndicator;
int gv_energyBoard;
timer gv_attackTimer;
int gv_timerWindow;
fixed gv_hybridMaxLife;
fixed gv_hybridMaxShields;
fixed gv_hybridRespawnTime;
unit gv_hybridPhysical;
int gv_hybridWaves;
int gv_hybridDeathsForDialogue;
bool gv_hybridSoulAlive;
actor gv_actorHybridDeathEffect;
actor gv_actorHybridWarpBackEffect;
int gv_prisonsDead;
bool gv_hybridRecharging;
bool gv_hybridReturnsToPrisons;
bool gv_hybridPrisonsAllAlive;
fixed gv_hybridMovementSpeed;
bool gv_hybridBossPing;
int gv_pingHybridBoss;
bool gv_hybridBusy;
int gv_buildingsMainPowered;
int gv_pingTwilightCouncil;
int gv_pingTemplarArchives;
int gv_pingDarkShrine;
bool gv_prisonsObjStarted;
bool gv_secondaryObjStarted;
int gv_mineralsCollectedToActivateMidCin;
bool gv_stalkerWarningStarted;
int gv_mineralsCollectedToActivateStalker;
actor gv_actorPlace01;
actor gv_actorPlace02;
actor gv_actorPylon01;
actor gv_actorPylon02;
actor gv_actorGatewayPlace01;
timer gv_timerTip;
bool gv_pylon01Placed;
bool gv_pylon02Placed;
bool gv_gateway01Placed;
bool gv_gateway01Done;
bool gv_flashButtonPylon;
soundlink gv_soundLibrary;
bool gv_libraryDown01;
bool gv_libraryDown02;
bool gv_libraryDown03;
actor gv_actorAssimilator;
actor gv_actorGateway;
bool gv_stalkerDialogue;
actor gv_actorStalkerDialogue;
int gv_hybridKillsTracking;
int gv_hybridDeathsTracking;
int gv_hybridWavesTracking;
int gv_darkTemplarKills;
int gv_objectivePowerBase;
int gv_obejctivePowerBaseUpdate;
int gv_obejctivePowerBaseTotal;
int gv_objectiveDestroyPrisons;
int gv_objectivesAllPrisonsDestroyedUpdate;
int gv_obejctivePrisonsTotal;
int gv_pingPrison01;
int gv_pingPrison02;
int gv_pingPrison03;
int gv_objectivePowerSecondaryBase;
int gv_obejctivePowerSecondaryBaseUpdate;
int gv_obejctivePowerSecondaryBaseTotal;
bool gv_introCinematicCompleted;
unitgroup gv_introHiddenUnitGroup;
unit gv_introVoidSeeker;
unit gv_introNexus;
revealer gv_revealerDTArea;
revealer gv_revealerTwilightArea;
revealer gv_revealerTown;
unit gv_introProbe01;
bool gv_introShuttleProbes;
unit gv_archTemplar01;
unit gv_archTemplar02;
unit gv_archTemplar03;
unit gv_hybridNeutral;
actor gv_actorArchonEffect;
actor gv_actorHybridSpawn;
actor gv_actorVault01Spawn;
actor gv_actorVault02Spawn;
actor gv_actorVault03Spawn;
actor gv_actorVortexEffect;
timer gv_forceStartHybridCinTimer;
revealer gv_visbilityBridgeArea;
revealer gv_visbilityPrisonWholeArea;
soundlink gv_soundBridge;
soundlink gv_soundHybridWarpIn;
bool gv_midPrisonCinematicCompleted;
unitgroup gv_midPrisonInvisiblePylon;
bool gv_victoryCinematicCompleted;
bool gv_victoryCinematicShuttleUnload;
int gv_victoryCinematicPortrait;
unitgroup gv_victoryHiddenUnitGroup;
unit gv_zeratul;

void InitGlobals () {
    gv_libraryHybrid = DoodadFromId(83);
    gv_prisonGroup = UnitGroupEmpty();
    gv_achievementHardTimer = TimerCreate();
    gv_timerStalkerMoveOnHardBrutal = TimerCreate();
    gv_energyBoard = c_boardNone;
    gv_attackTimer = TimerCreate();
    gv_timerWindow = c_timerWindowNone;
    gv_hybridWaves = 1;
    gv_hybridDeathsForDialogue = 1;
    gv_hybridPrisonsAllAlive = true;
    gv_hybridBossPing = true;
    gv_pingHybridBoss = c_invalidPingId;
    gv_pingTwilightCouncil = c_invalidPingId;
    gv_pingTemplarArchives = c_invalidPingId;
    gv_pingDarkShrine = c_invalidPingId;
    gv_mineralsCollectedToActivateMidCin = 1000;
    gv_mineralsCollectedToActivateStalker = 500;
    gv_timerTip = TimerCreate();
    gv_soundLibrary = SoundLink("StoneZealot_Death", -1);
    gv_objectivePowerBase = c_invalidObjectiveId;
    gv_obejctivePowerBaseTotal = 6;
    gv_objectiveDestroyPrisons = c_invalidObjectiveId;
    gv_obejctivePrisonsTotal = 3;
    gv_pingPrison01 = c_invalidPingId;
    gv_pingPrison02 = c_invalidPingId;
    gv_pingPrison03 = c_invalidPingId;
    gv_objectivePowerSecondaryBase = c_invalidObjectiveId;
    gv_obejctivePowerSecondaryBaseTotal = 3;
    gv_introHiddenUnitGroup = UnitGroupEmpty();
    gv_introShuttleProbes = true;
    gv_forceStartHybridCinTimer = TimerCreate();
    gv_soundBridge = SoundLink("ImplosionSound", -1);
    gv_soundHybridWarpIn = SoundLink("HighTemplar_PsionicStormLaunch", -1);
    gv_midPrisonInvisiblePylon = UnitGroupEmpty();
    gv_victoryCinematicPortrait = c_invalidPortraitId;
    gv_victoryHiddenUnitGroup = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_SetMaxLife (unit lp_unit, fixed lp_maxLife);
void gf_SetMaxShields (unit lp_unit, fixed lp_maxShields);
void gf_AddUpgradeForEnemies (int lp_qty, string lp_upgrade);
bool gf_UnitHealthCheck (unit lp_unit, fixed lp_min, fixed lp_max);
bool gf_PlayerIsInCombat (int lp_player);
bool gf_StartingBaseIsEmpty ();
void gf_WaypointToEastRamp (int lp_player);
void gf_WaypointToSouthRamp (int lp_player);
unitgroup gf_EnemiesWithinRange (unit lp_unit, fixed lp_range, unitfilter lp_filter);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04Music;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_PlayerIsInCombat;
trigger gt_PlayerIsInCombatIndicatorDiminish;
trigger gt_EnergyLeaderboard;
trigger gt_EnergyTimer;
trigger gt_StartAI;
trigger gt_StartAttackWaves;
trigger gt_P6LeftBaseAttackWaves;
trigger gt_P4RightBaseAttackWaves;
trigger gt_SwitchtoP3AttackWaves;
trigger gt_P3MainBaseAttackWaves;
trigger gt_HIUpgrades;
trigger gt_AIGiveMinerals;
trigger gt_AIGiveGas;
trigger gt_HybridAttacks;
trigger gt_HybridAllWaves;
trigger gt_HybridPrepforWave;
trigger gt_HybridPingandSound;
trigger gt_HybridBossPing;
trigger gt_HybridDies;
trigger gt_PrisonDiesHybridReturn;
trigger gt_PrisonDies;
trigger gt_Checkifallthreeprisonsdestroyed;
trigger gt_GravitonPrism;
trigger gt_PlasmaBlastAttack;
trigger gt_PsionicShockwaveFirst;
trigger gt_PsionicShockwaveSecond;
trigger gt_PsionicShockwaveThirdInsane;
trigger gt_Manifestation01ResumeWave;
trigger gt_HybridLeaveshisarea;
trigger gt_HybridEntershisarea;
trigger gt_StartGame;
trigger gt_Gateway;
trigger gt_Forge;
trigger gt_CyberneticsCore;
trigger gt_TwilightCouncil;
trigger gt_PhotonCannon01Base;
trigger gt_PhotonCannon02Base;
trigger gt_Checkifallsixarepowered;
trigger gt_SecondaryObjectiveRun;
trigger gt_PlayerBuildingArmyActivatesMidCin;
trigger gt_PlayerBuildingPhotonCannonsActivatesMidCin;
trigger gt_PlayerGatheringCashActivatesMidCin;
trigger gt_PlayerBuildingUnitActivatesActivatesStalker;
trigger gt_PlayerBuildingPhotonCannonActivatesStalker;
trigger gt_PlayerGatheringCashActivatesStalker;
trigger gt_PlayerBuildingUnitActivatesActivatesStalkerHardBrutal;
trigger gt_GatewayPlace01;
trigger gt_PylonPlaceStartQ;
trigger gt_PylonPlace01;
trigger gt_PylonPlace02;
trigger gt_Playerselectspylonbutton;
trigger gt_Pylonplacementdone01;
trigger gt_Pylonplacementdone02;
trigger gt_Pylonplacementsafety;
trigger gt_FlashButtonPylonOn;
trigger gt_FlashButtonPylonOff;
trigger gt_TemplarArchivesPowered;
trigger gt_RoboticsFacilityPowered;
trigger gt_DarkShrinePowered;
trigger gt_Library01;
trigger gt_Library02;
trigger gt_Library03;
trigger gt_Library06;
trigger gt_Library07;
trigger gt_Library08;
trigger gt_Library09;
trigger gt_DarkTemplarAttackers;
trigger gt_NewUnitImmortalTipQ;
trigger gt_NewUnitDarkTemplarTipQ;
trigger gt_NewUnitHighTemplarTipQ;
trigger gt_PylonPlaceTipiftoomuchtimegoesbyQ;
trigger gt_TipGatewayQ;
trigger gt_StorymodeTipsQ;
trigger gt_DialogueSomethingAmissQ;
trigger gt_DialogueatArchivistQ;
trigger gt_DialogueSecondaryObjectiveQ;
trigger gt_DialogueatDarkShrineQ;
trigger gt_DialogueatRoboticsQ;
trigger gt_DialogueTemplarArchivesFoundQ;
trigger gt_DialoguePreserverBewareQ;
trigger gt_DialogueHaltatPlayerBase01Q;
trigger gt_DialogueHaltatPlayerBase02Q;
trigger gt_ProtossGetAttackedFirstSetAlliance;
trigger gt_StalkerBecomesEnemyNearBase;
trigger gt_DialogueDarkShrineQ;
trigger gt_DialogueRoboticsFacilityQ;
trigger gt_DialogueTemplarArchivesQ;
trigger gt_DialogueHybridReturnsLineQ;
trigger gt_DialogueHybridPissed01Q;
trigger gt_DialogueHybridPissed02Q;
trigger gt_DialogueHybridPissed03Q;
trigger gt_DialogueHybridPissed04Q;
trigger gt_DialogueHybridPissed05Q;
trigger gt_DialogueHybridPissed06Q;
trigger gt_DialogueHybridPissed07Q;
trigger gt_RunDialogueDeathLines;
trigger gt_DialogueHybridPissedManifestationDead01Q;
trigger gt_DialogueHybridPissedManifestationDead02Q;
trigger gt_DialogueHybridPissedManifestationDead03Q;
trigger gt_DialogueHybridPissedManifestationDead04Q;
trigger gt_DialogueHybridPissedManifestationDead05Q;
trigger gt_DialogueHybridPissedManifestationDead06Q;
trigger gt_AutoSave01MidCinQ;
trigger gt_AutoSave02HybridWarpinZoneQ;
trigger gt_HybridKillsofplayerunits;
trigger gt_DarkTemplarKillsofenemyunits;
trigger gt_HybridDiesfromplayer;
trigger gt_HybridWaves;
trigger gt_AchievementAllProtossDeadNormal;
trigger gt_DefeatBaseDead;
trigger gt_VictoryPrisonObjectiveComplete;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_ObjectivePowerBaseCreateQ;
trigger gt_ObjectivePowerBaseComplete;
trigger gt_ObjectivePowerupBaseUpdate;
trigger gt_ObjectiveDestroyPrisonsCreateQ;
trigger gt_ObjectiveDestroyPrisonsComplete;
trigger gt_ObjectivePrisonsDestroyedUpdate;
trigger gt_Prison01Destroyed;
trigger gt_Prison02Destroyed;
trigger gt_Prison03Destroyed;
trigger gt_ObjectivePowerSecondaryCreateQ;
trigger gt_ObjectivePowerSecondaryComplete;
trigger gt_ObjectivePings;
trigger gt_ObjectivePowerupSecondaryUpdate;
trigger gt_BriefingQ;
trigger gt_BriefingScene00;
trigger gt_BriefingAnimations;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroCinematicNexus;
trigger gt_Dropship01Purge;
trigger gt_Dropship01UnitPerimeter1;
trigger gt_Dropship01UnitPerimeter2;
trigger gt_Dropship01UnitPerimeter3;
trigger gt_Dropship01UnitPerimeter4;
trigger gt_Dropship01UnitPerimeter5;
trigger gt_Dropship01UnitPerimeter6;
trigger gt_MidPrisonQ;
trigger gt_MidPrisonSetup;
trigger gt_MidPrisonCinematic;
trigger gt_MidPrisonCinematicEnd;
trigger gt_MidPrisonCleanup;
trigger gt_VictoryQ;
trigger gt_VictoryCinematicSetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_SetMaxLife (unit lp_unit, fixed lp_maxLife) {
    // Automatic Variable Declarations
    // Implementation
    UnitSetPropertyFixed(lp_unit, c_unitPropLifeMax, lp_maxLife);
    UnitSetPropertyFixed(lp_unit, c_unitPropLifePercent, 100.0);
}

void gf_SetMaxShields (unit lp_unit, fixed lp_maxShields) {
    // Automatic Variable Declarations
    // Implementation
    UnitSetPropertyFixed(lp_unit, c_unitPropShieldsMax, lp_maxShields);
    UnitSetPropertyFixed(lp_unit, c_unitPropShieldsPercent, 100.0);
}

void gf_AddUpgradeForEnemies (int lp_qty, string lp_upgrade) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUpgradeAddLevel(gv_p3_PROTOSS_ENEMY, lp_upgrade, lp_qty);
    TechTreeUpgradeAddLevel(gv_p4_PROTOSS_ENEMY, lp_upgrade, lp_qty);
    TechTreeUpgradeAddLevel(gv_p6_PROTOSS_ENEMY, lp_upgrade, lp_qty);
    TechTreeUpgradeAddLevel(gv_p10_HYBRID_MANIFESTATIONS, lp_upgrade, lp_qty);
}

bool gf_UnitHealthCheck (unit lp_unit, fixed lp_min, fixed lp_max) {
    // Variable Declarations
    fixed lv_healthPercent;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_healthPercent = ((UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(lp_unit, c_unitPropShields, c_unitPropCurrent)) / (UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropNormal) + UnitGetPropertyFixed(lp_unit, c_unitPropShields, c_unitPropNormal)));
    lv_healthPercent = (lv_healthPercent * 100.0);
    if ((lv_healthPercent <= lp_max) && (lv_healthPercent >= lp_min)) {
        return true;
    }

    return false;
}

bool gf_PlayerIsInCombat (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_inCombatIndicator > 0)) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_StartingBaseIsEmpty () {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionFromId(34), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
        return false;
    }

    return true;
}

void gf_WaypointToEastRamp (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_StartingBaseIsEmpty() == true)) {
        return ;
    }

    AIAttackWaveAddWaypoint(lp_player, PointFromId(34), false);
    AIAttackWaveAddWaypoint(lp_player, PointFromId(39), false);
    AIAttackWaveAddWaypoint(lp_player, PointFromId(188), false);
}

void gf_WaypointToSouthRamp (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_StartingBaseIsEmpty() == true)) {
        return ;
    }

    AIAttackWaveAddWaypoint(lp_player, PointFromId(374), false);
    AIAttackWaveAddWaypoint(lp_player, PointFromId(585), false);
    AIAttackWaveAddWaypoint(lp_player, PointFromId(36), false);
}

unitgroup gf_EnemiesWithinRange (unit lp_unit, fixed lp_range, unitfilter lp_filter) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupAlliance(UnitGetOwner(lp_unit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_unit), lp_range), lp_filter, 0);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_LoadCampaignData(libCamp_ge_MapID_MapTZeratul02);
    TriggerExecute(gt_Init01Technology, true, true);
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04Music, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    libCamp_gf_RegisterFootageRecording(gt_BriefingQ);
    libCamp_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_IntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeUpgradeAddLevel(gv_p1_USER, "BlinkTech", 1);
    TechTreeUpgradeAddLevel(gv_p1_USER, "PsiStormTech", 1);
    TechTreeUpgradeAddLevel(gv_p1_USER, "Charge", 1);
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("CyberneticsCoreResearch", 6), false);
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("CyberneticsCoreResearch", 6), false);
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("UpgradeToWarpGate", 0), false);
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("CyberneticsCoreResearch", 3), false);
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("CyberneticsCoreResearch", 4), false);
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("CyberneticsCoreResearch", 5), false);
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("CyberneticsCoreResearch", 0), false);
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("CyberneticsCoreResearch", 1), false);
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("CyberneticsCoreResearch", 2), false);
    TechTreeUpgradeAddLevel(gv_p2_PROTOSS_STALKER, "DarkProtoss", 1);
    TechTreeUpgradeAddLevel(gv_p3_PROTOSS_ENEMY, "DarkProtoss", 1);
    TechTreeUpgradeAddLevel(gv_p4_PROTOSS_ENEMY, "DarkProtoss", 1);
    TechTreeUpgradeAddLevel(gv_p6_PROTOSS_ENEMY, "DarkProtoss", 1);
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("ProtossBuild", 13), false);
    TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("ProtossBuild", 12), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(gv_p1_USER, c_playerPropMinerals, c_playerPropOperAdd, UnitTypeGetCost("Nexus", c_unitCostMinerals));
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p5_ABANDONED_STRUCTURES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p7_NEUTRAL, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p2_PROTOSS_STALKER, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p8_PRISON_STRUCTURE, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p2_PROTOSS_STALKER, gv_p4_PROTOSS_ENEMY, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p2_PROTOSS_STALKER, gv_p6_PROTOSS_ENEMY, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p3_PROTOSS_ENEMY, gv_p4_PROTOSS_ENEMY, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p3_PROTOSS_ENEMY, gv_p6_PROTOSS_ENEMY, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p4_PROTOSS_ENEMY, gv_p6_PROTOSS_ENEMY, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p2_PROTOSS_STALKER, gv_p3_PROTOSS_ENEMY, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p3_PROTOSS_ENEMY, gv_p8_PRISON_STRUCTURE, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p4_PROTOSS_ENEMY, gv_p8_PRISON_STRUCTURE, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p6_PROTOSS_ENEMY, gv_p8_PRISON_STRUCTURE, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p2_PROTOSS_STALKER, gv_p5_ABANDONED_STRUCTURES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p3_PROTOSS_ENEMY, gv_p5_ABANDONED_STRUCTURES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p4_PROTOSS_ENEMY, gv_p5_ABANDONED_STRUCTURES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p6_PROTOSS_ENEMY, gv_p5_ABANDONED_STRUCTURES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p10_HYBRID_MANIFESTATIONS, gv_p1_USER, libNtve_ge_AllianceSetting_Enemy);
    PlayerSetAlliance(gv_p10_HYBRID_MANIFESTATIONS, c_allianceIdVision, gv_p1_USER, true);
    libNtve_gf_SetAlliance(gv_p10_HYBRID_MANIFESTATIONS, gv_p2_PROTOSS_STALKER, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p10_HYBRID_MANIFESTATIONS, gv_p3_PROTOSS_ENEMY, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p10_HYBRID_MANIFESTATIONS, gv_p4_PROTOSS_ENEMY, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p10_HYBRID_MANIFESTATIONS, gv_p6_PROTOSS_ENEMY, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p10_HYBRID_MANIFESTATIONS, gv_p8_PRISON_STRUCTURE, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p10_HYBRID_MANIFESTATIONS, gv_p5_ABANDONED_STRUCTURES, libNtve_ge_AllianceSetting_Neutral);
    PlayerSetAlliance(gv_p2_PROTOSS_STALKER, c_allianceIdPushable, gv_p10_HYBRID_MANIFESTATIONS, true);
    PlayerSetAlliance(gv_p3_PROTOSS_ENEMY, c_allianceIdPushable, gv_p10_HYBRID_MANIFESTATIONS, true);
    PlayerSetAlliance(gv_p4_PROTOSS_ENEMY, c_allianceIdPushable, gv_p10_HYBRID_MANIFESTATIONS, true);
    PlayerSetAlliance(gv_p6_PROTOSS_ENEMY, c_allianceIdPushable, gv_p10_HYBRID_MANIFESTATIONS, true);
    libNtve_gf_SetAlliance(gv_p5_ABANDONED_STRUCTURES, gv_p7_NEUTRAL, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    libNtve_gf_SetAlliance(gv_p5_ABANDONED_STRUCTURES, gv_p8_PRISON_STRUCTURE, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    libNtve_gf_SetAlliance(gv_p7_NEUTRAL, gv_p8_PRISON_STRUCTURE, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    PlayerModifyPropertyInt(gv_p3_PROTOSS_ENEMY, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p3_PROTOSS_ENEMY, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p4_PROTOSS_ENEMY, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p4_PROTOSS_ENEMY, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p6_PROTOSS_ENEMY, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p6_PROTOSS_ENEMY, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p7_NEUTRAL, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerSetState(gv_p5_ABANDONED_STRUCTURES, c_playerStateShowScore, false);
    PlayerSetState(gv_p7_NEUTRAL, c_playerStateShowScore, false);
    PlayerSetState(gv_p8_PRISON_STRUCTURE, c_playerStateShowScore, false);
    PlayerSetColorIndex(gv_p2_PROTOSS_STALKER, 7, true);
    PlayerSetColorIndex(gv_p3_PROTOSS_ENEMY, 7, true);
    PlayerSetColorIndex(gv_p4_PROTOSS_ENEMY, 7, true);
    PlayerSetColorIndex(gv_p6_PROTOSS_ENEMY, 7, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_preserverPrison01 = UnitFromId(8);
    gv_preserverPrison02 = UnitFromId(142);
    gv_preserverPrison03 = UnitFromId(119);
    gv_superWarpGate_Neutral = UnitFromId(896);
    UnitMagazineArm(UnitFromId(647), AbilityCommand("CarrierHangar", 0), 4);
    UnitGroupAdd(gv_prisonGroup, gv_preserverPrison01);
    UnitGroupAdd(gv_prisonGroup, gv_preserverPrison02);
    UnitGroupAdd(gv_prisonGroup, gv_preserverPrison03);
    ActorSend(ActorFromDoodad(gv_libraryHybrid), "AnimBracketStart Work Stand,Work,Start Stand,Work Stand,Work,End");
    gv_libraryAtBridge01 = UnitFromId(90);
    gv_libraryAtBridge02 = UnitFromId(94);
    gv_libraryAtBridge03 = UnitFromId(141);
    gv_libraryAtBridge04 = UnitFromId(192);
    gv_libraryAtBridge05 = UnitFromId(185);
    gv_stalkerAtBridge = UnitFromId(74);
    UnitIssueOrder(gv_libraryAtBridge04, Order(AbilityCommand("LibraryDown", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_libraryAtBridge05, Order(AbilityCommand("LibraryDown", 0)), c_orderQueueReplace);
    UnitSetState(UnitFromId(563), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(179), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(43), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(78), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(78), c_unitStateInvulnerable, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init04Music_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, false);
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TZeratul02MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Music_Init () {
    gt_Init04Music = TriggerCreate("gt_Init04Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libLbty_gf_AutoRevealRegion(RegionFromId(22), RegionFromId(62), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(50), RegionFromId(24), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(51), RegionFromId(53), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(54), RegionFromId(55), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(57), RegionFromId(56), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(58), RegionFromId(59), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(60), RegionFromId(52), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(63), RegionFromId(65), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(64), RegionFromId(66), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(68), RegionFromId(80), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(69), RegionFromId(81), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(70), RegionFromId(82), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(71), RegionFromId(83), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(72), RegionFromId(84), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(73), RegionFromId(88), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(74), RegionFromId(87), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(75), RegionFromId(89), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(47), RegionFromId(49), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(76), RegionFromId(90), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(78), RegionFromId(86), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(77), RegionFromId(85), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(67), RegionFromId(79), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(40), RegionFromId(41), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(42), RegionFromId(43), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(48), RegionFromId(46), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(44), RegionFromId(45), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(30), RegionFromId(91), gv_p1_USER);
    libNtve_gf_PreloadModelObject("VC_Zeratul2_Planet", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerDifficulty(gv_p1_USER) == 1)) {
        PlayerModifyPropertyInt(gv_p3_PROTOSS_ENEMY, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p4_PROTOSS_ENEMY, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p6_PROTOSS_ENEMY, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p10_HYBRID_MANIFESTATIONS, c_playerPropHandicap, c_playerPropOperSetTo, 50);
    }

    gf_SetMaxLife(UnitFromId(8), libNtve_gf_DifficultyValueFixed(500.0, 750.0, 1000.0, 1250.0));
    gf_SetMaxLife(UnitFromId(142), libNtve_gf_DifficultyValueFixed(500.0, 750.0, 1000.0, 1250.0));
    gf_SetMaxLife(UnitFromId(119), libNtve_gf_DifficultyValueFixed(500.0, 750.0, 1000.0, 1250.0));
    gv_hybridMaxLife = libNtve_gf_DifficultyValueFixed(400.0, 500.0, 700.0, 800.0);
    gv_hybridMaxShields = gv_hybridMaxLife;
    gv_hybridRespawnTime = 40.0;
    gv_hybridMovementSpeed = libNtve_gf_DifficultyValueFixed(1.5, 1.5, 2.2, 2.4);
    gv_startingMinerals = 500;
    gv_startingGas = 150;
    gf_AddUpgradeForEnemies(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "haltech");
    gf_AddUpgradeForEnemies(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "PsiStormTech");
    gf_AddUpgradeForEnemies(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ProtossAirArmorsLevel1");
    gf_AddUpgradeForEnemies(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ProtossAirWeaponsLevel1");
    gf_AddUpgradeForEnemies(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ProtossGroundArmorsLevel1");
    gf_AddUpgradeForEnemies(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "ProtossGroundWeaponsLevel1");
    gf_AddUpgradeForEnemies(libNtve_gf_DifficultyValueInt(0, 0, 1, 0), "HybridCPlasmaUpgradeHard");
    gf_AddUpgradeForEnemies(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "HybridCPlasmaUpgradeInsane");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_AddUnitTypeToUnitHelpPanel("Probe", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Stalker", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Archon", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("PhotonCannon", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("WarpPrism", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Immortal", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Sentry", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("HighTemplar", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("DarkTemplar", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("PreserverA", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Maar", false, gv_p1_USER);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("VoidRay", false, gv_p1_USER);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Carrier", false, gv_p1_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Is In Combat
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIsInCombat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == gv_p1_USER) || (UnitGetOwner(EventUnit()) == gv_p2_PROTOSS_STALKER) || (UnitGetOwner(EventUnit()) == gv_p3_PROTOSS_ENEMY) || (UnitGetOwner(EventUnit()) == gv_p4_PROTOSS_ENEMY) || (UnitGetOwner(EventUnit()) == gv_p6_PROTOSS_ENEMY) || (UnitGetOwner(EventUnit()) == gv_p10_HYBRID_MANIFESTATIONS)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCombatIndicator = 5;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIsInCombat_Init () {
    gt_PlayerIsInCombat = TriggerCreate("gt_PlayerIsInCombat_Func");
    TriggerAddEventUnitStartedAttack(gt_PlayerIsInCombat, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Is In Combat Indicator Diminish
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIsInCombatIndicatorDiminish_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_inCombatIndicator > 0)) {
        gv_inCombatIndicator = (gv_inCombatIndicator - 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIsInCombatIndicatorDiminish_Init () {
    gt_PlayerIsInCombatIndicatorDiminish = TriggerCreate("gt_PlayerIsInCombatIndicatorDiminish_Func");
    TriggerAddEventTimePeriodic(gt_PlayerIsInCombatIndicatorDiminish, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Energy Leaderboard
//--------------------------------------------------------------------------------------------------
bool gt_EnergyLeaderboard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_hybridRecharging = true;
    TimerStart(gv_attackTimer, gv_hybridRespawnTime, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnergyLeaderboard_Init () {
    gt_EnergyLeaderboard = TriggerCreate("gt_EnergyLeaderboard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Energy Timer
//--------------------------------------------------------------------------------------------------
bool gt_EnergyTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_hybridRecharging == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    BoardItemSetProgressValue(gv_energyBoard, 1, 1, (TimerGetElapsed(gv_attackTimer) / gv_hybridRespawnTime));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnergyTimer_Init () {
    gt_EnergyTimer = TriggerCreate("gt_EnergyTimer_Func");
    TriggerAddEventTimePeriodic(gt_EnergyTimer, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AICampaignStart(gv_p3_PROTOSS_ENEMY);
    AICampaignStart(gv_p4_PROTOSS_ENEMY);
    AICampaignStart(gv_p6_PROTOSS_ENEMY);
    AICampaignStart(gv_p10_HYBRID_MANIFESTATIONS);
    libNtve_gf_SetTacticalAIThink(gv_p10_HYBRID_MANIFESTATIONS, "Maar", "", true);
    AIAttackWaveSetTargetPlayer(gv_p10_HYBRID_MANIFESTATIONS, PlayerGroupSingle(gv_p1_USER));
    AIAttackWaveSetGatherPoint(gv_p10_HYBRID_MANIFESTATIONS, PointFromId(54));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_StartAttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_P4RightBaseAttackWaves, true, false);
    TriggerExecute(gt_P6LeftBaseAttackWaves, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAttackWaves_Init () {
    gt_StartAttackWaves = TriggerCreate("gt_StartAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P6 Left Base Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_P6LeftBaseAttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((TriggerIsEnabled(gt_SwitchtoP3AttackWaves) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPlayer(gv_p6_PROTOSS_ENEMY, PlayerGroupSingle(gv_p1_USER));
    AIAttackWaveSetGatherPoint(gv_p6_PROTOSS_ENEMY, PointFromId(321));
    Wait(120.0, c_timeAI);
    gf_WaypointToSouthRamp(gv_p6_PROTOSS_ENEMY);
    AIAttackWaveAddUnits4(1, 1, 2, 3, "Stalker");
    AIAttackWaveSend(gv_p6_PROTOSS_ENEMY, 120, true);
    Wait(220.0, c_timeAI);
    gf_WaypointToSouthRamp(gv_p6_PROTOSS_ENEMY);
    AIAttackWaveAddUnits4(1, 0, 0, 1, "Zealot");
    AIAttackWaveAddUnits4(0, 1, 4, 0, "Stalker");
    AIAttackWaveAddUnits4(0, 0, 0, 2, "Archon");
    AIAttackWaveSend(gv_p6_PROTOSS_ENEMY, 120, true);
    Wait(libNtve_gf_DifficultyValueFixed(190.0, 190.0, 130.0, 130.0), c_timeAI);
    gf_WaypointToSouthRamp(gv_p6_PROTOSS_ENEMY);
    AIAttackWaveAddUnits4(2, 2, 4, 4, "Stalker");
    AIAttackWaveAddUnits4(0, 0, 0, 2, "Sentry");
    AIAttackWaveSend(gv_p6_PROTOSS_ENEMY, 120, true);
    Wait(libNtve_gf_DifficultyValueFixed(160.0, 160.0, 100.0, 100.0), c_timeAI);
    gf_WaypointToSouthRamp(gv_p6_PROTOSS_ENEMY);
    AIAttackWaveAddUnits4(0, 0, 3, 0, "Stalker");
    AIAttackWaveAddUnits4(1, 1, 2, 2, "Archon");
    AIAttackWaveSend(gv_p6_PROTOSS_ENEMY, 120, true);
    while (true) {
        Wait(libNtve_gf_DifficultyValueFixed(190.0, 190.0, 130.0, 130.0), c_timeAI);
        gf_WaypointToSouthRamp(gv_p6_PROTOSS_ENEMY);
        AIAttackWaveAddUnits4(3, 5, 7, 8, "Stalker");
        AIAttackWaveAddUnits4(0, 0, 2, 3, "Sentry");
        AIAttackWaveSend(gv_p6_PROTOSS_ENEMY, 120, true);
        Wait(libNtve_gf_DifficultyValueFixed(280.0, 280.0, 220.0, 220.0), c_timeAI);
        gf_WaypointToSouthRamp(gv_p6_PROTOSS_ENEMY);
        AIAttackWaveAddUnits4(0, 0, 2, 0, "Stalker");
        AIAttackWaveAddUnits4(2, 2, 2, 3, "Archon");
        AIAttackWaveSend(gv_p6_PROTOSS_ENEMY, 120, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P6LeftBaseAttackWaves_Init () {
    gt_P6LeftBaseAttackWaves = TriggerCreate("gt_P6LeftBaseAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P4 Right Base Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_P4RightBaseAttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((TriggerIsEnabled(gt_SwitchtoP3AttackWaves) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPlayer(gv_p4_PROTOSS_ENEMY, PlayerGroupSingle(gv_p1_USER));
    AIAttackWaveSetGatherPoint(gv_p4_PROTOSS_ENEMY, PointFromId(469));
    Wait(40.0, c_timeAI);
    gf_WaypointToEastRamp(gv_p4_PROTOSS_ENEMY);
    AIAttackWaveAddUnits4(1, 1, 2, 2, "Zealot");
    AIAttackWaveAddUnits4(1, 1, 1, 2, "Stalker");
    AIAttackWaveSend(gv_p4_PROTOSS_ENEMY, 120, true);
    gf_WaypointToEastRamp(gv_p4_PROTOSS_ENEMY);
    AIAttackWaveAddUnits4(1, 1, 3, 4, "Stalker");
    AIAttackWaveSend(gv_p4_PROTOSS_ENEMY, libNtve_gf_DifficultyValueInt(120, 120, 90, 90), true);
    Wait(libNtve_gf_DifficultyValueFixed(190.0, 190.0, 130.0, 130.0), c_timeAI);
    gf_WaypointToEastRamp(gv_p4_PROTOSS_ENEMY);
    AIAttackWaveAddUnits4(2, 2, 5, 6, "Zealot");
    AIAttackWaveAddUnits4(1, 0, 2, 3, "Stalker");
    AIAttackWaveSend(gv_p4_PROTOSS_ENEMY, 120, true);
    Wait(libNtve_gf_DifficultyValueFixed(160.0, 160.0, 100.0, 100.0), c_timeAI);
    gf_WaypointToEastRamp(gv_p4_PROTOSS_ENEMY);
    AIAttackWaveAddUnits4(1, 1, 4, 5, "Zealot");
    AIAttackWaveAddUnits4(1, 1, 3, 4, "Stalker");
    AIAttackWaveAddUnits4(0, 0, 0, 2, "Sentry");
    AIAttackWaveSend(gv_p4_PROTOSS_ENEMY, 120, true);
    TriggerExecute(gt_HIUpgrades, true, false);
    Wait(libNtve_gf_DifficultyValueFixed(160.0, 160.0, 100.0, 100.0), c_timeAI);
    gf_WaypointToEastRamp(gv_p4_PROTOSS_ENEMY);
    AIAttackWaveAddUnits4(3, 3, 7, 10, "Zealot");
    AIAttackWaveSend(gv_p4_PROTOSS_ENEMY, 120, true);
    while (true) {
        Wait(libNtve_gf_DifficultyValueFixed(190.0, 190.0, 130.0, 130.0), c_timeAI);
        gf_WaypointToEastRamp(gv_p4_PROTOSS_ENEMY);
        AIAttackWaveAddUnits4(3, 3, 6, 7, "Zealot");
        AIAttackWaveAddUnits4(1, 1, 1, 2, "Stalker");
        AIAttackWaveAddUnits4(0, 0, 2, 3, "Sentry");
        AIAttackWaveSend(gv_p4_PROTOSS_ENEMY, 120, true);
        Wait(libNtve_gf_DifficultyValueFixed(280.0, 280.0, 220.0, 220.0), c_timeAI);
        gf_WaypointToEastRamp(gv_p4_PROTOSS_ENEMY);
        AIAttackWaveAddUnits4(2, 2, 3, 4, "Zealot");
        AIAttackWaveAddUnits4(2, 2, 5, 6, "Stalker");
        AIAttackWaveSend(gv_p4_PROTOSS_ENEMY, 120, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P4RightBaseAttackWaves_Init () {
    gt_P4RightBaseAttackWaves = TriggerCreate("gt_P4RightBaseAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Switch to P3 Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_SwitchtoP3AttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TechTreeUnitCount(gv_p4_PROTOSS_ENEMY, "Gateway", c_techCountQueuedOrBetter) == 0))) {
            return false;
        }

        if (!((TechTreeUnitCount(gv_p4_PROTOSS_ENEMY, "Stargate", c_techCountQueuedOrBetter) == 0))) {
            return false;
        }

        if (!((TechTreeUnitCount(gv_p6_PROTOSS_ENEMY, "Gateway", c_techCountQueuedOrBetter) == 0))) {
            return false;
        }

        if (!((TechTreeUnitCount(gv_p6_PROTOSS_ENEMY, "Stargate", c_techCountQueuedOrBetter) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_P4RightBaseAttackWaves);
    TriggerStop(gt_P6LeftBaseAttackWaves);
    TriggerExecute(gt_P3MainBaseAttackWaves, true, false);
    TriggerExecute(gt_HIUpgrades, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwitchtoP3AttackWaves_Init () {
    gt_SwitchtoP3AttackWaves = TriggerCreate("gt_SwitchtoP3AttackWaves_Func");
    TriggerAddEventUnitDied(gt_SwitchtoP3AttackWaves, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P3 Main Base Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_P3MainBaseAttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPlayer(gv_p3_PROTOSS_ENEMY, PlayerGroupSingle(gv_p1_USER));
    AIAttackWaveSetGatherPoint(gv_p3_PROTOSS_ENEMY, PointFromId(468));
    Wait(libNtve_gf_DifficultyValueFixed(80.0, 80.0, 50.0, 50.0), c_timeAI);
    gf_WaypointToEastRamp(gv_p3_PROTOSS_ENEMY);
    AIAttackWaveAddUnits4(3, 3, 5, 6, "Zealot");
    AIAttackWaveAddUnits4(2, 2, 3, 3, "Stalker");
    AIAttackWaveAddUnits4(1, 1, 1, 1, "Sentry");
    AIAttackWaveSend(gv_p3_PROTOSS_ENEMY, 180, true);
    Wait(libNtve_gf_DifficultyValueFixed(80.0, 80.0, 50.0, 50.0), c_timeAI);
    gf_WaypointToEastRamp(gv_p3_PROTOSS_ENEMY);
    AIAttackWaveAddUnits4(0, 0, 1, 2, "Archon");
    AIAttackWaveAddUnits4(0, 0, 1, 0, "Stalker");
    AIAttackWaveAddUnits4(0, 0, 0, 1, "Immortal");
    AIAttackWaveSend(gv_p3_PROTOSS_ENEMY, 180, false);
    gf_WaypointToSouthRamp(gv_p3_PROTOSS_ENEMY);
    AIAttackWaveAddUnits4(1, 1, 1, 2, "Stalker");
    AIAttackWaveAddUnits4(1, 1, 1, 1, "Archon");
    AIAttackWaveSend(gv_p3_PROTOSS_ENEMY, 180, true);
    Wait(libNtve_gf_DifficultyValueFixed(80.0, 80.0, 50.0, 50.0), c_timeAI);
    gf_WaypointToSouthRamp(gv_p3_PROTOSS_ENEMY);
    AIAttackWaveAddUnits4(0, 0, 1, 2, "VoidRay");
    AIAttackWaveAddUnits4(0, 0, 0, 1, "Immortal");
    AIAttackWaveSend(gv_p3_PROTOSS_ENEMY, 180, false);
    gf_WaypointToEastRamp(gv_p3_PROTOSS_ENEMY);
    AIAttackWaveAddUnits4(6, 6, 5, 2, "Zealot");
    AIAttackWaveAddUnits4(0, 0, 1, 2, "VoidRay");
    AIAttackWaveSend(gv_p3_PROTOSS_ENEMY, 180, true);
    while (true) {
        Wait(libNtve_gf_DifficultyValueFixed(80.0, 80.0, 50.0, 50.0), c_timeAI);
        gf_WaypointToEastRamp(gv_p3_PROTOSS_ENEMY);
        AIAttackWaveAddUnits4(1, 1, 2, 3, "Stalker");
        AIAttackWaveAddUnits4(0, 0, 1, 2, "Archon");
        AIAttackWaveAddUnits4(0, 0, 0, 1, "HighTemplar");
        AIAttackWaveSend(gv_p3_PROTOSS_ENEMY, 180, false);
        gf_WaypointToSouthRamp(gv_p3_PROTOSS_ENEMY);
        AIAttackWaveAddUnits4(0, 0, 2, 3, "Zealot");
        AIAttackWaveAddUnits4(2, 2, 1, 1, "Archon");
        AIAttackWaveSend(gv_p3_PROTOSS_ENEMY, 180, true);
        Wait(libNtve_gf_DifficultyValueFixed(80.0, 80.0, 50.0, 50.0), c_timeAI);
        gf_WaypointToEastRamp(gv_p3_PROTOSS_ENEMY);
        AIAttackWaveAddUnits4(4, 4, 6, 5, "Stalker");
        AIAttackWaveAddUnits4(0, 0, 1, 2, "VoidRay");
        AIAttackWaveAddUnits4(0, 0, 0, 1, "Immortal");
        AIAttackWaveAddUnits4(2, 2, 2, 2, "Sentry");
        AIAttackWaveSend(gv_p3_PROTOSS_ENEMY, 180, true);
        Wait(libNtve_gf_DifficultyValueFixed(80.0, 80.0, 50.0, 50.0), c_timeAI);
        gf_WaypointToEastRamp(gv_p3_PROTOSS_ENEMY);
        AIAttackWaveAddUnits4(5, 5, 8, 6, "Zealot");
        AIAttackWaveAddUnits4(1, 1, 2, 5, "Stalker");
        AIAttackWaveSend(gv_p3_PROTOSS_ENEMY, 180, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P3MainBaseAttackWaves_Init () {
    gt_P3MainBaseAttackWaves = TriggerCreate("gt_P3MainBaseAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HI Upgrades
//--------------------------------------------------------------------------------------------------
bool gt_HIUpgrades_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_AddUpgradeForEnemies(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "Charge");
    gf_AddUpgradeForEnemies(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ProtossShieldsLevel1");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HIUpgrades_Init () {
    gt_HIUpgrades = TriggerCreate("gt_HIUpgrades_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveMinerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveMinerals_Init () {
    gt_AIGiveMinerals = TriggerCreate("gt_AIGiveMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p3_PROTOSS_ENEMY, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p4_PROTOSS_ENEMY, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p6_PROTOSS_ENEMY, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveGas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveGas_Init () {
    gt_AIGiveGas = TriggerCreate("gt_AIGiveGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p3_PROTOSS_ENEMY, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p4_PROTOSS_ENEMY, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p6_PROTOSS_ENEMY, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Attacks
//--------------------------------------------------------------------------------------------------
bool gt_HybridAttacks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_HybridAllWaves, true, false);
    gv_hybridReturnsToPrisons = false;
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(584)), c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(gv_preserverPrison01, Order(AbilityCommand("SoulChannel", 1)), c_orderQueueReplace);
    UnitIssueOrder(gv_preserverPrison02, Order(AbilityCommand("SoulChannel", 1)), c_orderQueueReplace);
    UnitIssueOrder(gv_preserverPrison03, Order(AbilityCommand("SoulChannel", 1)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridAttacks_Init () {
    gt_HybridAttacks = TriggerCreate("gt_HybridAttacks_Func");
    TriggerAddEventTimer(gt_HybridAttacks, gv_attackTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid All Waves
//--------------------------------------------------------------------------------------------------
bool gt_HybridAllWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_hybridWaves == 1) && (gv_hybridPrisonsAllAlive == true)) {
        AIAttackWaveAddWaypoint(gv_p10_HYBRID_MANIFESTATIONS, PointFromId(36), false);
        TriggerExecute(gt_HybridPrepforWave, true, true);
        TriggerExecute(gt_DialogueHybridPissed01Q, true, false);
    }

    if ((gv_hybridWaves == 2) && (gv_hybridPrisonsAllAlive == true)) {
        AIAttackWaveAddWaypoint(gv_p10_HYBRID_MANIFESTATIONS, PointFromId(188), false);
        TriggerExecute(gt_HybridPrepforWave, true, true);
        TriggerExecute(gt_DialogueHybridPissed02Q, true, false);
    }

    if ((gv_hybridWaves == 3) && (gv_hybridPrisonsAllAlive == true)) {
        AIAttackWaveAddWaypoint(gv_p10_HYBRID_MANIFESTATIONS, PointFromId(36), false);
        TriggerExecute(gt_HybridPrepforWave, true, true);
        TriggerExecute(gt_DialogueHybridPissed03Q, true, false);
    }

    if ((gv_hybridWaves == 4) && (gv_hybridPrisonsAllAlive == true)) {
        gv_hybridMaxLife = libNtve_gf_DifficultyValueFixed(500.0, 600.0, 900.0, 1000.0);
        gv_hybridMaxShields = gv_hybridMaxLife;
        AIAttackWaveAddWaypoint(gv_p10_HYBRID_MANIFESTATIONS, PointFromId(36), false);
        TriggerExecute(gt_HybridPrepforWave, true, true);
        TriggerExecute(gt_DialogueHybridPissed04Q, true, false);
    }

    if ((gv_hybridWaves == 5) && (gv_hybridPrisonsAllAlive == true)) {
        AIAttackWaveAddWaypoint(gv_p10_HYBRID_MANIFESTATIONS, PointFromId(188), false);
        TriggerExecute(gt_HybridPrepforWave, true, true);
        TriggerExecute(gt_DialogueHybridPissed05Q, true, false);
    }

    if ((gv_hybridWaves == 6) && (gv_hybridPrisonsAllAlive == true)) {
        AIAttackWaveAddWaypoint(gv_p10_HYBRID_MANIFESTATIONS, PointFromId(188), false);
        TriggerExecute(gt_HybridPrepforWave, true, true);
        TriggerExecute(gt_DialogueHybridPissed06Q, true, false);
    }

    if ((gv_hybridWaves == 7) && (gv_hybridPrisonsAllAlive == true)) {
        gv_hybridMaxLife = libNtve_gf_DifficultyValueFixed(600.0, 800.0, 1200.0, 1400.0);
        gv_hybridMaxShields = gv_hybridMaxLife;
        AIAttackWaveAddWaypoint(gv_p10_HYBRID_MANIFESTATIONS, PointFromId(36), false);
        TriggerExecute(gt_HybridPrepforWave, true, true);
        TriggerExecute(gt_DialogueHybridPissed07Q, true, false);
    }

    if ((gv_hybridWaves == 8) && (gv_hybridPrisonsAllAlive == true)) {
        AIAttackWaveAddWaypoint(gv_p10_HYBRID_MANIFESTATIONS, PointFromId(188), false);
        TriggerExecute(gt_HybridPrepforWave, true, true);
        TriggerExecute(gt_DialogueHybridPissed03Q, true, false);
    }

    if ((gv_hybridWaves == 9) && (gv_hybridPrisonsAllAlive == true)) {
        AIAttackWaveAddWaypoint(gv_p10_HYBRID_MANIFESTATIONS, PointFromId(36), false);
        TriggerExecute(gt_HybridPrepforWave, true, true);
        TriggerExecute(gt_DialogueHybridPissed04Q, true, false);
    }

    if ((gv_hybridWaves >= 10) && (gv_hybridPrisonsAllAlive == true)) {
        AIAttackWaveAddWaypoint(gv_p10_HYBRID_MANIFESTATIONS, PointFromId(36), false);
        TriggerExecute(gt_HybridPrepforWave, true, true);
        TriggerExecute(gt_DialogueHybridPissed05Q, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridAllWaves_Init () {
    gt_HybridAllWaves = TriggerCreate("gt_HybridAllWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Prep for Wave
//--------------------------------------------------------------------------------------------------
bool gt_HybridPrepforWave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(gv_hybridNeutral);
    libNtve_gf_KillModel(gv_actorArchonEffect);
    Wait(0.2, c_timeGame);
    gv_hybridSoulAlive = true;
    gv_hybridRecharging = false;
    libNtve_gf_CreateUnitsAtPoint2(1, "Maar", 0, gv_p10_HYBRID_MANIFESTATIONS, PointFromId(181));
    gv_hybridPhysical = UnitLastCreated();
    gf_SetMaxLife(UnitLastCreated(), gv_hybridMaxLife);
    gf_SetMaxShields(UnitLastCreated(), gv_hybridMaxShields);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
    if ((gv_hybridWaves <= 3)) {
        UnitSetScale(UnitLastCreated(), 77.0, 77.0, 77.0);
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Signal Smaller");
    }

    if ((gv_hybridWaves >= 7)) {
        UnitSetScale(UnitLastCreated(), 133.0, 133.0, 133.0);
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Signal Bigger");
    }

    UnitSetPropertyFixed(gv_hybridPhysical, c_unitPropMovementSpeed, gv_hybridMovementSpeed);
    AIAttackWaveUseUnit(gv_p10_HYBRID_MANIFESTATIONS, gv_hybridPhysical);
    AIAttackWaveSend(gv_p10_HYBRID_MANIFESTATIONS, 0, false);
    BoardShowAll(false, PlayerGroupAll());
    TimerWindowShow(gv_timerWindow, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridPrepforWave_Init () {
    gt_HybridPrepforWave = TriggerCreate("gt_HybridPrepforWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Ping and Sound
//--------------------------------------------------------------------------------------------------
bool gt_HybridPingandSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_hybridSoulAlive == true))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("HybringMovePing", 0), PlayerGroupAll(), 40.0, 0.0);
    TriggerExecute(gt_HybridBossPing, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridPingandSound_Init () {
    gt_HybridPingandSound = TriggerCreate("gt_HybridPingandSound_Func");
    TriggerAddEventTimePeriodic(gt_HybridPingandSound, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Boss Ping
//--------------------------------------------------------------------------------------------------
bool gt_HybridBossPing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_hybridBossPing == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(gv_hybridPhysical), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_pingHybridBoss = PingLastCreated();
    PingSetScale(gv_pingHybridBoss, 0.75);
    PingSetUnit(gv_pingHybridBoss, gv_hybridPhysical);
    PingSetTooltip(gv_pingHybridBoss, StringExternal("Param/Value/FA59974F"));
    gv_hybridBossPing = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridBossPing_Init () {
    gt_HybridBossPing = TriggerCreate("gt_HybridBossPing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Dies
//--------------------------------------------------------------------------------------------------
bool gt_HybridDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7DBFA4FA_g;
    int auto7DBFA4FA_u;
    unit auto7DBFA4FA_var;

    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_hybridPhysical))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_prisonsDead <= 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hybridSoulAlive = false;
    gv_hybridBossPing = true;
    gv_hybridWaves = (gv_hybridWaves + 1);
    gv_hybridRecharging = true;
    PingDestroy(gv_pingHybridBoss);
    libNtve_gf_CreateModelAtPoint("HybridCDeath", UnitGetPosition(gv_hybridPhysical));
    gv_actorHybridDeathEffect = libNtve_gf_ActorLastCreated();
    Wait(3.0, c_timeGame);
    if ((gv_gameOver == false) && (gv_prisonsDead <= 2)) {
        libNtve_gf_KillModel(gv_actorHybridDeathEffect);
        TriggerExecute(gt_RunDialogueDeathLines, true, false);
        libNtve_gf_CreateModelAtPoint("HybridWarpIn", PointFromId(181));
        gv_actorArchonEffect = libNtve_gf_ActorLastCreated();
    }

    Wait(0.5, c_timeGame);
    if ((gv_gameOver == false) && (gv_prisonsDead <= 2)) {
        auto7DBFA4FA_g = UnitGroup(null, gv_p1_USER, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto7DBFA4FA_u = UnitGroupCount(auto7DBFA4FA_g, c_unitCountAll);
        for (;; auto7DBFA4FA_u -= 1) {
            auto7DBFA4FA_var = UnitGroupUnitFromEnd(auto7DBFA4FA_g, auto7DBFA4FA_u);
            if (auto7DBFA4FA_var == null) { break; }
            UnitKill(auto7DBFA4FA_var);
        }
    }

    Wait(0.2, c_timeGame);
    if ((gv_gameOver == false) && (gv_prisonsDead <= 2)) {
        SoundPlayAtPoint(gv_soundHybridWarpIn, PlayerGroupAll(), PointFromId(181), 0.0, 100.0, 0.0);
        libNtve_gf_CreateUnitsAtPoint2(1, "Maar", 0, gv_p8_PRISON_STRUCTURE, PointFromId(181));
        if ((gv_hybridWaves <= 3)) {
            UnitSetScale(UnitLastCreated(), 77.0, 77.0, 77.0);
        }

    }

    if ((gv_hybridWaves >= 7)) {
        UnitSetScale(UnitLastCreated(), 133.0, 133.0, 133.0);
    }

    gv_hybridNeutral = UnitLastCreated();
    UnitSetState(gv_hybridNeutral, c_unitStateInvulnerable, true);
    gf_SetMaxLife(UnitLastCreated(), gv_hybridMaxLife);
    gf_SetMaxShields(UnitLastCreated(), gv_hybridMaxShields);
    UnitSetState(gv_hybridNeutral, c_unitStateTargetable, false);
    UnitSetState(gv_hybridNeutral, c_unitStateSelectable, false);
    UnitIssueOrder(gv_hybridNeutral, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitBehaviorAdd(gv_hybridNeutral, "HybridDontDie", gv_hybridNeutral, 1);
    UnitIssueOrder(gv_preserverPrison01, Order(AbilityCommand("SoulChannel", 1)), c_orderQueueReplace);
    UnitIssueOrder(gv_preserverPrison02, Order(AbilityCommand("SoulChannel", 1)), c_orderQueueReplace);
    UnitIssueOrder(gv_preserverPrison03, Order(AbilityCommand("SoulChannel", 1)), c_orderQueueReplace);
    Wait(0.2, c_timeGame);
    if ((gv_gameOver == false) && (gv_prisonsDead <= 2)) {
        libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(584)), c_animNameDefault, "Birth", c_animFlagNonLooping, c_animTimeDefault);
    }

    Wait(2.0, c_timeReal);
    if ((gv_gameOver == false) && (gv_prisonsDead <= 2)) {
        libNtve_gf_PauseUnit(gv_hybridNeutral, true);
        libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(584)), c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    }

    Wait(1.0, c_timeGame);
    if ((gv_gameOver == false) && (gv_prisonsDead <= 2)) {
        UnitIssueOrder(gv_preserverPrison01, OrderTargetingUnit(AbilityCommand("SoulChannel", 0), gv_hybridNeutral), c_orderQueueReplace);
        UnitIssueOrder(gv_preserverPrison02, OrderTargetingUnit(AbilityCommand("SoulChannel", 0), gv_hybridNeutral), c_orderQueueReplace);
        UnitIssueOrder(gv_preserverPrison03, OrderTargetingUnit(AbilityCommand("SoulChannel", 0), gv_hybridNeutral), c_orderQueueReplace);
        TimerStart(gv_attackTimer, gv_hybridRespawnTime, false, c_timeAI);
        BoardItemSetProgressValue(gv_energyBoard, 1, 1, 0.0);
        BoardShowAll(true, PlayerGroupAll());
        TimerWindowShow(gv_timerWindow, PlayerGroupAll(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridDies_Init () {
    gt_HybridDies = TriggerCreate("gt_HybridDies_Func");
    TriggerAddEventUnitDied(gt_HybridDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prison Dies Hybrid Return
//--------------------------------------------------------------------------------------------------
bool gt_PrisonDiesHybridReturn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_hybridSoulAlive == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_prisonGroup, EventUnit()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_hybridPhysical, RegionFromId(17)) == false))) {
            return false;
        }

        if (!((gv_hybridReturnsToPrisons == false))) {
            return false;
        }

        if (!((gv_prisonsDead < 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hybridReturnsToPrisons = true;
    gv_hybridBossPing = true;
    PingDestroy(gv_pingHybridBoss);
    libNtve_gf_CreateModelAtPoint("HybridWarpIn", libNtve_gf_PointOffsetTowardsPoint(PointFromId(181), 0.0, PointFromId(345)));
    gv_actorHybridWarpBackEffect = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("HybridCDeath", UnitGetPosition(gv_hybridPhysical));
    gv_actorHybridDeathEffect = libNtve_gf_ActorLastCreated();
    UnitIssueOrder(gv_preserverPrison01, Order(AbilityCommand("SoulChannel", 1)), c_orderQueueReplace);
    UnitIssueOrder(gv_preserverPrison02, Order(AbilityCommand("SoulChannel", 1)), c_orderQueueReplace);
    UnitIssueOrder(gv_preserverPrison03, Order(AbilityCommand("SoulChannel", 1)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    UnitSetPosition(gv_hybridPhysical, PointFromId(181), false);
    TriggerExecute(gt_DialogueHybridReturnsLineQ, true, false);
    Wait(2.0, c_timeGame);
    libNtve_gf_KillModel(gv_actorHybridDeathEffect);
    libNtve_gf_KillModel(gv_actorHybridWarpBackEffect);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrisonDiesHybridReturn_Init () {
    gt_PrisonDiesHybridReturn = TriggerCreate("gt_PrisonDiesHybridReturn_Func");
    TriggerAddEventUnitDied(gt_PrisonDiesHybridReturn, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prison Dies
//--------------------------------------------------------------------------------------------------
bool gt_PrisonDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_prisonGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_prisonsDead += 1;
    TriggerExecute(gt_ObjectivePrisonsDestroyedUpdate, true, false);
    TriggerExecute(gt_Checkifallthreeprisonsdestroyed, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrisonDies_Init () {
    gt_PrisonDies = TriggerCreate("gt_PrisonDies_Func");
    TriggerAddEventUnitDied(gt_PrisonDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check if all three prisons destroyed
//--------------------------------------------------------------------------------------------------
bool gt_Checkifallthreeprisonsdestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_prisonsDead >= 3) && (UnitIsAlive(gv_hybridPhysical) == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_EnergyTimer, false);
        PingDestroy(gv_pingHybridBoss);
        BoardDestroy(gv_energyBoard);
        TimerWindowDestroy(gv_timerWindow);
        Wait(0.2, c_timeGame);
        TimerPause(gv_attackTimer, true);
        gf_SetMaxLife(UnitLastCreated(), gv_hybridMaxLife);
        gf_SetMaxShields(UnitLastCreated(), gv_hybridMaxShields);
        libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(584)), c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
        Wait(1.0, c_timeGame);
        UnitIssueOrder(gv_preserverPrison01, Order(AbilityCommand("SoulChannel", 1)), c_orderQueueReplace);
        UnitIssueOrder(gv_preserverPrison02, Order(AbilityCommand("SoulChannel", 1)), c_orderQueueReplace);
        UnitIssueOrder(gv_preserverPrison03, Order(AbilityCommand("SoulChannel", 1)), c_orderQueueReplace);
    }

    if ((gv_prisonsDead >= 3) && (UnitIsAlive(gv_hybridPhysical) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        PingDestroy(gv_pingHybridBoss);
        gv_hybridPrisonsAllAlive = false;
        TriggerEnable(gt_EnergyTimer, false);
        BoardDestroy(gv_energyBoard);
        TimerWindowDestroy(gv_timerWindow);
        UnitRemove(gv_hybridNeutral);
        Wait(0.2, c_timeGame);
        libNtve_gf_KillModel(gv_actorArchonEffect);
        TimerPause(gv_attackTimer, true);
        UnitBehaviorRemove(gv_hybridPhysical, "HybridDontDie", 1);
        gf_SetMaxLife(UnitLastCreated(), gv_hybridMaxLife);
        gf_SetMaxShields(UnitLastCreated(), gv_hybridMaxShields);
        Wait(1.0, c_timeGame);
        UnitIssueOrder(gv_preserverPrison01, Order(AbilityCommand("SoulChannel", 1)), c_orderQueueReplace);
        UnitIssueOrder(gv_preserverPrison02, Order(AbilityCommand("SoulChannel", 1)), c_orderQueueReplace);
        UnitIssueOrder(gv_preserverPrison03, Order(AbilityCommand("SoulChannel", 1)), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Checkifallthreeprisonsdestroyed_Init () {
    gt_Checkifallthreeprisonsdestroyed = TriggerCreate("gt_Checkifallthreeprisonsdestroyed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Graviton Prism
//--------------------------------------------------------------------------------------------------
bool gt_GravitonPrism_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_gravitonTargets;
    unit lv_target;
    int lv_targetCount;
    int lv_desiredCasts;

    // Automatic Variable Declarations
    int auto793B532F_n;
    int auto793B532F_i;

    // Variable Initialization
    lv_gravitonTargets = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_hybridBusy == false))) {
            return false;
        }

        if (!((gv_hybridPhysical != null))) {
            return false;
        }

        if (!((UnitIsAlive(gv_hybridPhysical) == true))) {
            return false;
        }

        if (!((UnitGroupCount(gf_EnemiesWithinRange(gv_hybridPhysical, 8.0, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)))), c_unitCountAlive) >= 4))) {
            return false;
        }

        if (!((gv_hybridWaves >= 4))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_hybridBusy = true;
    lv_targetCount = UnitGroupCount(gf_EnemiesWithinRange(gv_hybridPhysical, 8.0, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)))), c_unitCountAlive);
    lv_desiredCasts = FixedToInt((IntToFixed(lv_targetCount) * libNtve_gf_DifficultyValueFixed(0.5, 0.5, 0.6, 0.75)));
    lv_desiredCasts = MinI(lv_desiredCasts, libNtve_gf_DifficultyValueInt(5, 5, 8, 9));
    auto793B532F_n = lv_desiredCasts;
    for (auto793B532F_i = 1; auto793B532F_i <= auto793B532F_n; auto793B532F_i += 1) {
        lv_gravitonTargets = gf_EnemiesWithinRange(gv_hybridPhysical, 8.0, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
        lv_target = UnitGroupRandomUnit(lv_gravitonTargets, c_unitCountAlive);
        if ((lv_target != null)) {
            UnitGroupRemove(lv_gravitonTargets, lv_target);
            libNtve_gf_AICast(gv_hybridPhysical, OrderTargetingUnit(AbilityCommand("GravitonPrison", 0), lv_target));
            Wait(0.6, c_timeGame);
        }

    }
    gv_hybridBusy = false;
    Wait(25.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GravitonPrism_Init () {
    gt_GravitonPrism = TriggerCreate("gt_GravitonPrism_Func");
    TriggerAddEventTimePeriodic(gt_GravitonPrism, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Plasma Blast Attack
//--------------------------------------------------------------------------------------------------
bool gt_PlasmaBlastAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_plasmaTargets;
    unit lv_target;
    int lv_targetCount;
    int lv_desiredCasts;

    // Automatic Variable Declarations
    int auto8910C1F6_n;
    int auto8910C1F6_i;

    // Variable Initialization
    lv_plasmaTargets = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_hybridBusy == false))) {
            return false;
        }

        if (!((gv_hybridPhysical != null))) {
            return false;
        }

        if (!((UnitIsAlive(gv_hybridPhysical) == true))) {
            return false;
        }

        if (!((UnitGroupCount(gf_EnemiesWithinRange(gv_hybridPhysical, 8.0, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)))), c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((gv_hybridWaves >= 7))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_hybridBusy = true;
    lv_targetCount = UnitGroupCount(gf_EnemiesWithinRange(gv_hybridPhysical, 8.0, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)))), c_unitCountAlive);
    lv_desiredCasts = FixedToInt((IntToFixed(lv_targetCount) * 0.8));
    lv_desiredCasts = MinI(lv_desiredCasts, 4);
    auto8910C1F6_n = lv_desiredCasts;
    for (auto8910C1F6_i = 1; auto8910C1F6_i <= auto8910C1F6_n; auto8910C1F6_i += 1) {
        lv_plasmaTargets = gf_EnemiesWithinRange(gv_hybridPhysical, 8.0, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
        lv_target = UnitGroupRandomUnit(lv_plasmaTargets, c_unitCountAlive);
        if ((lv_target != null)) {
            UnitGroupRemove(lv_plasmaTargets, lv_target);
            libNtve_gf_AICast(gv_hybridPhysical, OrderTargetingUnit(AbilityCommand("HybridCPlasmaBlast", 0), lv_target));
            Wait(2.5, c_timeGame);
        }

    }
    gv_hybridBusy = false;
    Wait(25.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlasmaBlastAttack_Init () {
    gt_PlasmaBlastAttack = TriggerCreate("gt_PlasmaBlastAttack_Func");
    TriggerAddEventTimePeriodic(gt_PlasmaBlastAttack, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Psionic Shockwave - First
//--------------------------------------------------------------------------------------------------
bool gt_PsionicShockwaveFirst_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_hybridBusy == false))) {
            return false;
        }

        if (!((gv_hybridPhysical != null))) {
            return false;
        }

        if (!((UnitIsAlive(gv_hybridPhysical) == true))) {
            return false;
        }

        if (!((EventUnit() == gv_hybridPhysical))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(17)) == true))) {
            return false;
        }

        if (!((gf_UnitHealthCheck(gv_hybridPhysical, 40.0, 60.0) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_hybridBusy = true;
    AICast(EventUnit(), Order(AbilityCommand("PsionicShockwave", 0)), null, false);
    Wait(2.5, c_timeGame);
    gv_hybridBusy = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PsionicShockwaveFirst_Init () {
    gt_PsionicShockwaveFirst = TriggerCreate("gt_PsionicShockwaveFirst_Func");
    TriggerAddEventUnitDamaged(gt_PsionicShockwaveFirst, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Psionic Shockwave - Second
//--------------------------------------------------------------------------------------------------
bool gt_PsionicShockwaveSecond_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_hybridBusy == false))) {
            return false;
        }

        if (!((gv_hybridPhysical != null))) {
            return false;
        }

        if (!((UnitIsAlive(gv_hybridPhysical) == true))) {
            return false;
        }

        if (!((EventUnit() == gv_hybridPhysical))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(17)) == true))) {
            return false;
        }

        if (!((gf_UnitHealthCheck(gv_hybridPhysical, 0.0, 25.0) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_hybridBusy = true;
    AICast(EventUnit(), Order(AbilityCommand("PsionicShockwave", 0)), null, false);
    Wait(2.5, c_timeGame);
    gv_hybridBusy = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PsionicShockwaveSecond_Init () {
    gt_PsionicShockwaveSecond = TriggerCreate("gt_PsionicShockwaveSecond_Func");
    TriggerAddEventUnitDamaged(gt_PsionicShockwaveSecond, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Psionic Shockwave - Third (Insane)
//--------------------------------------------------------------------------------------------------
bool gt_PsionicShockwaveThirdInsane_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_hybridBusy == false))) {
            return false;
        }

        if (!((gv_hybridPhysical != null))) {
            return false;
        }

        if (!((UnitIsAlive(gv_hybridPhysical) == true))) {
            return false;
        }

        if (!((EventUnit() == gv_hybridPhysical))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(17)) == true))) {
            return false;
        }

        if (!((gf_UnitHealthCheck(gv_hybridPhysical, 75.0, 95.0) == true))) {
            return false;
        }

        if (!((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_hybridBusy = true;
    AICast(EventUnit(), Order(AbilityCommand("PsionicShockwave", 0)), null, false);
    Wait(2.5, c_timeGame);
    gv_hybridBusy = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PsionicShockwaveThirdInsane_Init () {
    gt_PsionicShockwaveThirdInsane = TriggerCreate("gt_PsionicShockwaveThirdInsane_Func");
    TriggerAddEventUnitDamaged(gt_PsionicShockwaveThirdInsane, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Manifestation01 Resume Wave
//--------------------------------------------------------------------------------------------------
bool gt_Manifestation01ResumeWave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_manifestation;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    AISetUnitScriptControlled(gv_hybridPhysical, false);
    lv_manifestation = UnitGroupUnit(UnitGroup("Maar", gv_p10_HYBRID_MANIFESTATIONS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
    AIAttackWaveSetTargetPlayer(gv_p10_HYBRID_MANIFESTATIONS, PlayerGroupSingle(gv_p1_USER));
    AIAttackWaveSetGatherPoint(gv_p10_HYBRID_MANIFESTATIONS, UnitGetPosition(lv_manifestation));
    AIAttackWaveAddWaypoint(gv_p10_HYBRID_MANIFESTATIONS, PointFromId(36), false);
    AIAttackWaveUseUnit(gv_p10_HYBRID_MANIFESTATIONS, gv_hybridPhysical);
    AIAttackWaveSend(gv_p10_HYBRID_MANIFESTATIONS, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Manifestation01ResumeWave_Init () {
    gt_Manifestation01ResumeWave = TriggerCreate("gt_Manifestation01ResumeWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Leaves his area
//--------------------------------------------------------------------------------------------------
bool gt_HybridLeaveshisarea_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_hybridPhysical))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hybridReturnsToPrisons = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridLeaveshisarea_Init () {
    gt_HybridLeaveshisarea = TriggerCreate("gt_HybridLeaveshisarea_Func");
    TriggerAddEventUnitRegion(gt_HybridLeaveshisarea, null, RegionFromId(17), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Enters his area
//--------------------------------------------------------------------------------------------------
bool gt_HybridEntershisarea_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_hybridPhysical))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hybridReturnsToPrisons = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridEntershisarea_Init () {
    gt_HybridEntershisarea = TriggerCreate("gt_HybridEntershisarea_Func");
    TriggerAddEventUnitRegion(gt_HybridEntershisarea, null, RegionFromId(17), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game
//--------------------------------------------------------------------------------------------------
bool gt_StartGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/5ADEAA3E"), null, PointFromId(2));
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        TimerStart(gv_achievementHardTimer, 1500.0, false, c_timeAI);
    }

    TriggerExecute(gt_StartAI, true, false);
    TriggerEnable(gt_PlayerGatheringCashActivatesStalker, true);
    TriggerEnable(gt_PlayerGatheringCashActivatesMidCin, true);
    Wait(4.0, c_timeGame);
    TriggerExecute(gt_ObjectivePowerBaseCreateQ, true, false);
    Wait(5.0, c_timeGame);
    TriggerExecute(gt_StorymodeTipsQ, true, false);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        TimerStart(gv_forceStartHybridCinTimer, 210.0, false, c_timeAI);
        TimerStart(gv_timerStalkerMoveOnHardBrutal, 150.0, false, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGame_Init () {
    gt_StartGame = TriggerCreate("gt_StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gateway
//--------------------------------------------------------------------------------------------------
bool gt_Gateway_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "Pylon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PowerLevel(gv_p1_USER, UnitGetPosition(UnitFromId(25)), "PowerSource") > 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_buildingsMainPowered += 1;
        libNtve_gf_RescueUnit(UnitFromId(25), gv_p1_USER, true);
        TriggerExecute(gt_ObjectivePowerupBaseUpdate, true, false);
        TriggerExecute(gt_Checkifallsixarepowered, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Gateway_Init () {
    gt_Gateway = TriggerCreate("gt_Gateway_Func");
    TriggerAddEventUnitConstructProgress(gt_Gateway, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Forge
//--------------------------------------------------------------------------------------------------
bool gt_Forge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "Pylon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PowerLevel(gv_p1_USER, UnitGetPosition(UnitFromId(17)), "PowerSource") > 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_buildingsMainPowered += 1;
        libNtve_gf_RescueUnit(UnitFromId(17), gv_p1_USER, true);
        TriggerExecute(gt_ObjectivePowerupBaseUpdate, true, false);
        TriggerExecute(gt_Checkifallsixarepowered, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Forge_Init () {
    gt_Forge = TriggerCreate("gt_Forge_Func");
    TriggerAddEventUnitConstructProgress(gt_Forge, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cybernetics Core
//--------------------------------------------------------------------------------------------------
bool gt_CyberneticsCore_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "Pylon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PowerLevel(gv_p1_USER, UnitGetPosition(UnitFromId(10)), "PowerSource") > 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_buildingsMainPowered += 1;
        libNtve_gf_RescueUnit(UnitFromId(10), gv_p1_USER, true);
        TriggerExecute(gt_ObjectivePowerupBaseUpdate, true, false);
        TriggerExecute(gt_Checkifallsixarepowered, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CyberneticsCore_Init () {
    gt_CyberneticsCore = TriggerCreate("gt_CyberneticsCore_Func");
    TriggerAddEventUnitConstructProgress(gt_CyberneticsCore, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Twilight Council
//--------------------------------------------------------------------------------------------------
bool gt_TwilightCouncil_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "Pylon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PowerLevel(gv_p1_USER, UnitGetPosition(UnitFromId(162)), "PowerSource") > 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_buildingsMainPowered += 1;
        libNtve_gf_RescueUnit(UnitFromId(162), gv_p1_USER, true);
        TriggerExecute(gt_ObjectivePowerupBaseUpdate, true, false);
        TriggerExecute(gt_Checkifallsixarepowered, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TwilightCouncil_Init () {
    gt_TwilightCouncil = TriggerCreate("gt_TwilightCouncil_Func");
    TriggerAddEventUnitConstructProgress(gt_TwilightCouncil, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Photon Cannon 01 Base
//--------------------------------------------------------------------------------------------------
bool gt_PhotonCannon01Base_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "Pylon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PowerLevel(gv_p1_USER, UnitGetPosition(UnitFromId(11)), "PowerSource") > 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_buildingsMainPowered += 1;
        libNtve_gf_RescueUnit(UnitFromId(11), gv_p1_USER, true);
        TriggerExecute(gt_ObjectivePowerupBaseUpdate, true, false);
        TriggerExecute(gt_Checkifallsixarepowered, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PhotonCannon01Base_Init () {
    gt_PhotonCannon01Base = TriggerCreate("gt_PhotonCannon01Base_Func");
    TriggerAddEventUnitConstructProgress(gt_PhotonCannon01Base, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Photon Cannon 02 Base
//--------------------------------------------------------------------------------------------------
bool gt_PhotonCannon02Base_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "Pylon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PowerLevel(gv_p1_USER, UnitGetPosition(UnitFromId(199)), "PowerSource") > 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_buildingsMainPowered += 1;
        libNtve_gf_RescueUnit(UnitFromId(199), gv_p1_USER, true);
        TriggerExecute(gt_ObjectivePowerupBaseUpdate, true, false);
        TriggerExecute(gt_Checkifallsixarepowered, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PhotonCannon02Base_Init () {
    gt_PhotonCannon02Base = TriggerCreate("gt_PhotonCannon02Base_Func");
    TriggerAddEventUnitConstructProgress(gt_PhotonCannon02Base, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check if all six are powered
//--------------------------------------------------------------------------------------------------
bool gt_Checkifallsixarepowered_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_prisonsObjStarted == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_buildingsMainPowered >= 6)) {
        gv_prisonsObjStarted = true;
        TriggerExecute(gt_Pylonplacementsafety, true, false);
        TriggerExecute(gt_DialogueSomethingAmissQ, true, false);
        TriggerExecute(gt_ObjectiveDestroyPrisonsCreateQ, true, false);
        Wait(35.0, c_timeGame);
        TriggerExecute(gt_SecondaryObjectiveRun, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Checkifallsixarepowered_Init () {
    gt_Checkifallsixarepowered = TriggerCreate("gt_Checkifallsixarepowered_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Secondary Objective Run
//--------------------------------------------------------------------------------------------------
bool gt_SecondaryObjectiveRun_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_secondaryObjStarted = true;
    TriggerExecute(gt_TipGatewayQ, true, false);
    Wait(20.0, c_timeGame);
    TriggerExecute(gt_DialogueSecondaryObjectiveQ, true, false);
    TriggerExecute(gt_ObjectivePowerSecondaryCreateQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SecondaryObjectiveRun_Init () {
    gt_SecondaryObjectiveRun = TriggerCreate("gt_SecondaryObjectiveRun_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Building Army Activates Mid Cin
//--------------------------------------------------------------------------------------------------
bool gt_PlayerBuildingArmyActivatesMidCin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnitProgressUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerGetExecCount(TriggerGetCurrent()) >= 4)) {
        TriggerEnable(TriggerGetCurrent(), false);
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_DialoguePreserverBewareQ, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerBuildingArmyActivatesMidCin_Init () {
    gt_PlayerBuildingArmyActivatesMidCin = TriggerCreate("gt_PlayerBuildingArmyActivatesMidCin_Func");
    TriggerAddEventUnitTrainProgress(gt_PlayerBuildingArmyActivatesMidCin, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Building Photon Cannons Activates Mid Cin
//--------------------------------------------------------------------------------------------------
bool gt_PlayerBuildingPhotonCannonsActivatesMidCin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "PhotonCannon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerGetExecCount(TriggerGetCurrent()) >= 4)) {
        TriggerEnable(TriggerGetCurrent(), false);
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_DialoguePreserverBewareQ, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerBuildingPhotonCannonsActivatesMidCin_Init () {
    gt_PlayerBuildingPhotonCannonsActivatesMidCin = TriggerCreate("gt_PlayerBuildingPhotonCannonsActivatesMidCin_Func");
    TriggerAddEventUnitConstructProgress(gt_PlayerBuildingPhotonCannonsActivatesMidCin, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Gathering Cash Activates Mid Cin
//--------------------------------------------------------------------------------------------------
bool gt_PlayerGatheringCashActivatesMidCin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(gv_p1_USER, c_playerPropMineralsCollected) >= gv_mineralsCollectedToActivateMidCin))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_DialoguePreserverBewareQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerGatheringCashActivatesMidCin_Init () {
    gt_PlayerGatheringCashActivatesMidCin = TriggerCreate("gt_PlayerGatheringCashActivatesMidCin_Func");
    TriggerEnable(gt_PlayerGatheringCashActivatesMidCin, false);
    TriggerAddEventPlayerPropChange(gt_PlayerGatheringCashActivatesMidCin, gv_p1_USER, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Building Unit Activates Activates Stalker
//--------------------------------------------------------------------------------------------------
bool gt_PlayerBuildingUnitActivatesActivatesStalker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnitProgressUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((gv_stalkerWarningStarted == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerGetExecCount(TriggerGetCurrent()) >= 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        UnitIssueOrder(UnitFromId(78), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1219)), c_orderQueueReplace);
        gv_stalkerWarningStarted = true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerBuildingUnitActivatesActivatesStalker_Init () {
    gt_PlayerBuildingUnitActivatesActivatesStalker = TriggerCreate("gt_PlayerBuildingUnitActivatesActivatesStalker_Func");
    TriggerAddEventUnitTrainProgress(gt_PlayerBuildingUnitActivatesActivatesStalker, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Building Photon Cannon Activates Stalker
//--------------------------------------------------------------------------------------------------
bool gt_PlayerBuildingPhotonCannonActivatesStalker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "PhotonCannon"))) {
            return false;
        }

        if (!((gv_stalkerWarningStarted == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerGetExecCount(TriggerGetCurrent()) >= 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        UnitIssueOrder(UnitFromId(78), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1219)), c_orderQueueReplace);
        gv_stalkerWarningStarted = true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerBuildingPhotonCannonActivatesStalker_Init () {
    gt_PlayerBuildingPhotonCannonActivatesStalker = TriggerCreate("gt_PlayerBuildingPhotonCannonActivatesStalker_Func");
    TriggerAddEventUnitConstructProgress(gt_PlayerBuildingPhotonCannonActivatesStalker, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Gathering Cash Activates Stalker
//--------------------------------------------------------------------------------------------------
bool gt_PlayerGatheringCashActivatesStalker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_stalkerWarningStarted == false))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(gv_p1_USER, c_playerPropMineralsCollected) >= gv_mineralsCollectedToActivateStalker))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerGetExecCount(TriggerGetCurrent()) >= 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        UnitIssueOrder(UnitFromId(78), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1219)), c_orderQueueReplace);
        gv_stalkerWarningStarted = true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerGatheringCashActivatesStalker_Init () {
    gt_PlayerGatheringCashActivatesStalker = TriggerCreate("gt_PlayerGatheringCashActivatesStalker_Func");
    TriggerEnable(gt_PlayerGatheringCashActivatesStalker, false);
    TriggerAddEventPlayerPropChange(gt_PlayerGatheringCashActivatesStalker, gv_p1_USER, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Building Unit Activates Activates Stalker Hard/Brutal
//--------------------------------------------------------------------------------------------------
bool gt_PlayerBuildingUnitActivatesActivatesStalkerHardBrutal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_stalkerWarningStarted == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerGetExecCount(TriggerGetCurrent()) >= 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        UnitIssueOrder(UnitFromId(78), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1219)), c_orderQueueReplace);
        gv_stalkerWarningStarted = true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerBuildingUnitActivatesActivatesStalkerHardBrutal_Init () {
    gt_PlayerBuildingUnitActivatesActivatesStalkerHardBrutal = TriggerCreate("gt_PlayerBuildingUnitActivatesActivatesStalkerHardBrutal_Func");
    TriggerAddEventTimer(gt_PlayerBuildingUnitActivatesActivatesStalkerHardBrutal, gv_timerStalkerMoveOnHardBrutal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gateway Place 01
//--------------------------------------------------------------------------------------------------
bool gt_GatewayPlace01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoFE0AC1B2_n = 4;
    int autoFE0AC1B2_i;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_gateway01Placed == false)) {
        for (autoFE0AC1B2_i = 1; autoFE0AC1B2_i <= autoFE0AC1B2_n; autoFE0AC1B2_i += 1) {
            if ((gv_gateway01Done == false)) {
                libNtve_gf_CreateModelAtPoint("GatewayPlacement", PointFromId(331));
                gv_actorGatewayPlace01 = libNtve_gf_ActorLastCreated();
            }

            Wait(2.0, c_timeGame);
            libNtve_gf_KillModel(gv_actorGatewayPlace01);
            Wait(1.0, c_timeGame);
        }
    }

    Wait(libCamp_gv_campaignHintDelay, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GatewayPlace01_Init () {
    gt_GatewayPlace01 = TriggerCreate("gt_GatewayPlace01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pylon Place Start Q
//--------------------------------------------------------------------------------------------------
bool gt_PylonPlaceStartQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    TriggerExecute(gt_FlashButtonPylonOn, true, false);
    CameraLockInput(gv_p1_USER, true);
    CameraPan(1, PointFromId(12), 1.0, -1, 10, false);
    Wait(1.0, c_timeReal);
    TriggerExecute(gt_PylonPlace01, true, false);
    TriggerExecute(gt_PylonPlace02, true, false);
    CameraLockInput(gv_p1_USER, false);
    Wait(2.0, c_timeReal);
    libCamp_gf_CreateTipFromConversationState("StoryTips|Zeratul02_Pylons", libNtve_ge_TipType_NewStructure, PlayerGroupAll());
    TimerStart(gv_timerTip, 120.0, false, c_timeAI);
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PylonPlaceStartQ_Init () {
    gt_PylonPlaceStartQ = TriggerCreate("gt_PylonPlaceStartQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pylon Place 01
//--------------------------------------------------------------------------------------------------
bool gt_PylonPlace01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_pylon01Placed == false)) {
        libNtve_gf_CreateModelAtPoint("BriefingUnitSelectProtoss", PointFromId(12));
        gv_actorPlace01 = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateModelAtPoint("PylonPlacementTZeratul02", PointFromId(12));
        ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 0.300000");
        gv_actorPylon01 = libNtve_gf_ActorLastCreated();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PylonPlace01_Init () {
    gt_PylonPlace01 = TriggerCreate("gt_PylonPlace01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pylon Place 02
//--------------------------------------------------------------------------------------------------
bool gt_PylonPlace02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_pylon02Placed == false)) {
        libNtve_gf_CreateModelAtPoint("BriefingUnitSelectProtoss", PointFromId(348));
        gv_actorPlace02 = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateModelAtPoint("PylonPlacementTZeratul02", PointFromId(348));
        ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 0.300000");
        gv_actorPylon02 = libNtve_gf_ActorLastCreated();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PylonPlace02_Init () {
    gt_PylonPlace02 = TriggerCreate("gt_PylonPlace02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player selects pylon button
//--------------------------------------------------------------------------------------------------
bool gt_Playerselectspylonbutton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(gv_actorPylon01);
    libNtve_gf_KillModel(gv_actorPylon02);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Playerselectspylonbutton_Init () {
    gt_Playerselectspylonbutton = TriggerCreate("gt_Playerselectspylonbutton_Func");
    TriggerAddEventButtonPressed(gt_Playerselectspylonbutton, gv_p1_USER, "Pylon");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pylon placement done 01
//--------------------------------------------------------------------------------------------------
bool gt_Pylonplacementdone01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "Pylon"))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(38)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_pylon01Placed = true;
    Wait(0.5, c_timeGame);
    libNtve_gf_KillModel(gv_actorPlace01);
    libNtve_gf_KillModel(gv_actorPylon01);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Pylonplacementdone01_Init () {
    gt_Pylonplacementdone01 = TriggerCreate("gt_Pylonplacementdone01_Func");
    TriggerAddEventUnitConstructProgress(gt_Pylonplacementdone01, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pylon placement done 02
//--------------------------------------------------------------------------------------------------
bool gt_Pylonplacementdone02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "Pylon"))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(39)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_pylon02Placed = true;
    Wait(0.5, c_timeGame);
    libNtve_gf_KillModel(gv_actorPlace02);
    libNtve_gf_KillModel(gv_actorPylon02);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Pylonplacementdone02_Init () {
    gt_Pylonplacementdone02 = TriggerCreate("gt_Pylonplacementdone02_Func");
    TriggerAddEventUnitConstructProgress(gt_Pylonplacementdone02, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pylon placement safety
//--------------------------------------------------------------------------------------------------
bool gt_Pylonplacementsafety_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.5, c_timeReal);
    libNtve_gf_KillModel(gv_actorPlace02);
    libNtve_gf_KillModel(gv_actorPylon02);
    libNtve_gf_KillModel(gv_actorPlace01);
    libNtve_gf_KillModel(gv_actorPylon01);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("ProtossBuild", 1), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Pylonplacementsafety_Init () {
    gt_Pylonplacementsafety = TriggerCreate("gt_Pylonplacementsafety_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flash Button Pylon On
//--------------------------------------------------------------------------------------------------
bool gt_FlashButtonPylonOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("ProtossBuild", 1), true);
    gv_flashButtonPylon = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlashButtonPylonOn_Init () {
    gt_FlashButtonPylonOn = TriggerCreate("gt_FlashButtonPylonOn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flash Button Pylon Off
//--------------------------------------------------------------------------------------------------
bool gt_FlashButtonPylonOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_flashButtonPylon == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("ProtossBuild", 1), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlashButtonPylonOff_Init () {
    gt_FlashButtonPylonOff = TriggerCreate("gt_FlashButtonPylonOff_Func");
    TriggerAddEventButtonPressed(gt_FlashButtonPylonOff, c_playerAny, "Pylon");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Templar Archives Powered
//--------------------------------------------------------------------------------------------------
bool gt_TemplarArchivesPowered_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "Pylon"))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(43)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PowerLevel(gv_p1_USER, UnitGetPosition(UnitFromId(43)), "PowerSource") > 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        UnitSetState(UnitFromId(43), c_unitStateTargetable, true);
        gv_pylonPlayerCreatedHighTemplar = EventUnitProgressUnit();
        libNtve_gf_RescueUnit(UnitFromId(43), gv_p1_USER, true);
        PingDestroy(gv_pingTemplarArchives);
        libCamp_gf_DisplayResearchPointsGiventoPlayer(libCamp_ge_StoryResearchObject_ResearchObjectPowertheAbandonedStructure, UnitFromId(43), gv_p1_USER);
        TriggerExecute(gt_ObjectivePowerupSecondaryUpdate, true, false);
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_DialogueTemplarArchivesQ, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TemplarArchivesPowered_Init () {
    gt_TemplarArchivesPowered = TriggerCreate("gt_TemplarArchivesPowered_Func");
    TriggerAddEventUnitConstructProgress(gt_TemplarArchivesPowered, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Robotics Facility Powered
//--------------------------------------------------------------------------------------------------
bool gt_RoboticsFacilityPowered_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "Pylon"))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(563)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PowerLevel(gv_p1_USER, UnitGetPosition(UnitFromId(563)), "PowerSource") > 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        UnitSetState(UnitFromId(563), c_unitStateTargetable, true);
        gv_pylonPlayerCreatedRobotics = EventUnitProgressUnit();
        TechTreeAbilityAllow(gv_p1_USER, AbilityCommand("ProtossBuild", 13), true);
        libNtve_gf_RescueUnit(UnitFromId(563), gv_p1_USER, true);
        TechTreeUnitAllow(gv_p1_USER, "Immortal", true);
        PingDestroy(gv_pingTwilightCouncil);
        libCamp_gf_DisplayResearchPointsGiventoPlayer(libCamp_ge_StoryResearchObject_ResearchObjectPowertheAbandonedStructure, UnitFromId(563), gv_p1_USER);
        TriggerExecute(gt_ObjectivePowerupSecondaryUpdate, true, false);
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_DialogueRoboticsFacilityQ, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoboticsFacilityPowered_Init () {
    gt_RoboticsFacilityPowered = TriggerCreate("gt_RoboticsFacilityPowered_Func");
    TriggerAddEventUnitConstructProgress(gt_RoboticsFacilityPowered, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dark Shrine Powered
//--------------------------------------------------------------------------------------------------
bool gt_DarkShrinePowered_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "Pylon"))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(179)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PowerLevel(gv_p1_USER, UnitGetPosition(UnitFromId(179)), "PowerSource") > 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        UnitSetState(UnitFromId(179), c_unitStateTargetable, true);
        gv_pylonPlayerCreatedDT = EventUnitProgressUnit();
        libNtve_gf_RescueUnit(UnitFromId(179), gv_p1_USER, true);
        PingDestroy(gv_pingDarkShrine);
        libCamp_gf_DisplayResearchPointsGiventoPlayer(libCamp_ge_StoryResearchObject_ResearchObjectPowertheAbandonedStructure, UnitFromId(179), gv_p1_USER);
        TriggerExecute(gt_ObjectivePowerupSecondaryUpdate, true, false);
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_DialogueDarkShrineQ, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DarkShrinePowered_Init () {
    gt_DarkShrinePowered = TriggerCreate("gt_DarkShrinePowered_Func");
    TriggerAddEventUnitConstructProgress(gt_DarkShrinePowered, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Library01
//--------------------------------------------------------------------------------------------------
bool gt_Library01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "DarkTemplar"))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_libraryDown01 = true;
    UnitIssueOrder(UnitFromId(90), Order(AbilityCommand("LibraryDown", 0)), c_orderQueueReplace);
    SoundPlayOnUnit(gv_soundLibrary, PlayerGroupAll(), UnitFromId(90), 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Library01_Init () {
    gt_Library01 = TriggerCreate("gt_Library01_Func");
    TriggerAddEventUnitRegion(gt_Library01, null, RegionFromId(13), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Library02
//--------------------------------------------------------------------------------------------------
bool gt_Library02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "DarkTemplar"))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_libraryDown02 = true;
    UnitIssueOrder(UnitFromId(94), Order(AbilityCommand("LibraryDown", 0)), c_orderQueueReplace);
    SoundPlayOnUnit(gv_soundLibrary, PlayerGroupAll(), UnitFromId(94), 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Library02_Init () {
    gt_Library02 = TriggerCreate("gt_Library02_Func");
    TriggerAddEventUnitRegion(gt_Library02, null, RegionFromId(15), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Library03
//--------------------------------------------------------------------------------------------------
bool gt_Library03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "DarkTemplar"))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_libraryDown03 = true;
    UnitIssueOrder(UnitFromId(141), Order(AbilityCommand("LibraryDown", 0)), c_orderQueueReplace);
    SoundPlayOnUnit(gv_soundLibrary, PlayerGroupAll(), UnitFromId(141), 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Library03_Init () {
    gt_Library03 = TriggerCreate("gt_Library03_Func");
    TriggerAddEventUnitRegion(gt_Library03, null, RegionFromId(23), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Library06
//--------------------------------------------------------------------------------------------------
bool gt_Library06_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "DarkTemplar"))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(300), Order(AbilityCommand("LibraryDown", 0)), c_orderQueueReplace);
    SoundPlayOnUnit(gv_soundLibrary, PlayerGroupAll(), UnitFromId(300), 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Library06_Init () {
    gt_Library06 = TriggerCreate("gt_Library06_Func");
    TriggerAddEventUnitRegion(gt_Library06, null, RegionFromId(28), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Library07
//--------------------------------------------------------------------------------------------------
bool gt_Library07_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "DarkTemplar"))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(7), Order(AbilityCommand("LibraryDown", 0)), c_orderQueueReplace);
    SoundPlayOnUnit(gv_soundLibrary, PlayerGroupAll(), UnitFromId(7), 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Library07_Init () {
    gt_Library07 = TriggerCreate("gt_Library07_Func");
    TriggerAddEventUnitRegion(gt_Library07, null, RegionFromId(29), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Library08
//--------------------------------------------------------------------------------------------------
bool gt_Library08_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "DarkTemplar"))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(576), Order(AbilityCommand("LibraryDown", 0)), c_orderQueueReplace);
    SoundPlayOnUnit(gv_soundLibrary, PlayerGroupAll(), UnitFromId(576), 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Library08_Init () {
    gt_Library08 = TriggerCreate("gt_Library08_Func");
    TriggerAddEventUnitRegion(gt_Library08, null, RegionFromId(16), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Library09
//--------------------------------------------------------------------------------------------------
bool gt_Library09_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "DarkTemplar"))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(575), Order(AbilityCommand("LibraryDown", 0)), c_orderQueueReplace);
    SoundPlayOnUnit(gv_soundLibrary, PlayerGroupAll(), UnitFromId(7), 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Library09_Init () {
    gt_Library09 = TriggerCreate("gt_Library09_Func");
    TriggerAddEventUnitRegion(gt_Library09, null, RegionFromId(27), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dark Templar Attackers
//--------------------------------------------------------------------------------------------------
bool gt_DarkTemplarAttackers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF76AD4A9_g;
    int autoF76AD4A9_u;
    unit autoF76AD4A9_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeAI);
    libNtve_gf_SetAlliance(gv_p7_NEUTRAL, gv_p1_USER, libNtve_ge_AllianceSetting_Neutral);
    Wait(5.0, c_timeAI);
    autoF76AD4A9_g = UnitGroup(null, gv_p3_PROTOSS_ENEMY, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF76AD4A9_u = UnitGroupCount(autoF76AD4A9_g, c_unitCountAll);
    for (;; autoF76AD4A9_u -= 1) {
        autoF76AD4A9_var = UnitGroupUnitFromEnd(autoF76AD4A9_g, autoF76AD4A9_u);
        if (autoF76AD4A9_var == null) { break; }
        UnitIssueOrder(autoF76AD4A9_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(163)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DarkTemplarAttackers_Init () {
    gt_DarkTemplarAttackers = TriggerCreate("gt_DarkTemplarAttackers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Unit: Immortal Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_NewUnitImmortalTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeReal);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_CreateTipFromConversationState("StoryTips|Zeratul02_Immortals", libNtve_ge_TipType_NewUnit, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewUnitImmortalTipQ_Init () {
    gt_NewUnitImmortalTipQ = TriggerCreate("gt_NewUnitImmortalTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Unit: Dark Templar Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_NewUnitDarkTemplarTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeReal);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_CreateTipFromConversationState("StoryTips|Zeratul02_DarkTemplar", libNtve_ge_TipType_NewUnit, PlayerGroupAll());
    TechTreeUnitAllow(gv_p1_USER, "DarkTemplar", true);
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewUnitDarkTemplarTipQ_Init () {
    gt_NewUnitDarkTemplarTipQ = TriggerCreate("gt_NewUnitDarkTemplarTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Unit: High Templar Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_NewUnitHighTemplarTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeReal);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_CreateTipFromConversationState("StoryTips|Zeratul02_HighTemplar", libNtve_ge_TipType_NewUnit, PlayerGroupAll());
    TechTreeUnitAllow(gv_p1_USER, "HighTemplar", true);
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewUnitHighTemplarTipQ_Init () {
    gt_NewUnitHighTemplarTipQ = TriggerCreate("gt_NewUnitHighTemplarTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pylon Place Tip if too much time goes by Q
//--------------------------------------------------------------------------------------------------
bool gt_PylonPlaceTipiftoomuchtimegoesbyQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_buildingsMainPowered <= 4))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_CreateTipFromConversationState("StoryTips|Zeratul02_WarpIn", libNtve_ge_TipType_NewAbility, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PylonPlaceTipiftoomuchtimegoesbyQ_Init () {
    gt_PylonPlaceTipiftoomuchtimegoesbyQ = TriggerCreate("gt_PylonPlaceTipiftoomuchtimegoesbyQ_Func");
    TriggerAddEventTimer(gt_PylonPlaceTipiftoomuchtimegoesbyQ, gv_timerTip);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Gateway Q
//--------------------------------------------------------------------------------------------------
bool gt_TipGatewayQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_CreateTipFromConversationState("StoryTips|Zeratul02_Gateway", libNtve_ge_TipType_NewStructure, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipGatewayQ_Init () {
    gt_TipGatewayQ = TriggerCreate("gt_TipGatewayQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Storymode Tips Q
//--------------------------------------------------------------------------------------------------
bool gt_StorymodeTipsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateStorymodeTips();
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StorymodeTipsQ_Init () {
    gt_StorymodeTipsQ = TriggerCreate("gt_StorymodeTipsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Something Amiss Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueSomethingAmissQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(2.0, c_timeReal);
    if ((gv_gameOver == true)) {
        return true;
    }

    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/0F7C25E0"), null, UnitGetPosition(UnitFromId(8)));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul02Zeratul00008", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul02Zeratul00008", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueSomethingAmissQ_Init () {
    gt_DialogueSomethingAmissQ = TriggerCreate("gt_DialogueSomethingAmissQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue at Archivist Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueatArchivistQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul02Zeratul00009", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul02Zeratul00009", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueatArchivistQ_Init () {
    gt_DialogueatArchivistQ = TriggerCreate("gt_DialogueatArchivistQ_Func");
    TriggerAddEventUnitRegion(gt_DialogueatArchivistQ, null, RegionFromId(6), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Secondary Objective Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueSecondaryObjectiveQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul02Zeratul00006", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul02Zeratul00006", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueSecondaryObjectiveQ_Init () {
    gt_DialogueSecondaryObjectiveQ = TriggerCreate("gt_DialogueSecondaryObjectiveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue at Dark Shrine Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueatDarkShrineQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    UnitFlashSelection(UnitFromId(179), 2.0);
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/DFFB989D"), null, UnitGetPosition(UnitFromId(179)));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul02Zeratul00027", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul02Zeratul00027", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueatDarkShrineQ_Init () {
    gt_DialogueatDarkShrineQ = TriggerCreate("gt_DialogueatDarkShrineQ_Func");
    TriggerAddEventUnitRegion(gt_DialogueatDarkShrineQ, null, RegionFromId(19), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue at Robotics Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueatRoboticsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    UnitFlashSelection(UnitFromId(563), 2.0);
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/3720851B"), null, UnitGetPosition(UnitFromId(563)));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul02Zeratul00029", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul02Zeratul00029", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueatRoboticsQ_Init () {
    gt_DialogueatRoboticsQ = TriggerCreate("gt_DialogueatRoboticsQ_Func");
    TriggerAddEventUnitRegion(gt_DialogueatRoboticsQ, null, RegionFromId(25), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Templar Archives Found Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueTemplarArchivesFoundQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    UnitFlashSelection(UnitFromId(43), 2.0);
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/53F6E010"), null, UnitGetPosition(UnitFromId(43)));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul02Zeratul00054", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul02Zeratul00054", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueTemplarArchivesFoundQ_Init () {
    gt_DialogueTemplarArchivesFoundQ = TriggerCreate("gt_DialogueTemplarArchivesFoundQ_Func");
    TriggerAddEventUnitRegion(gt_DialogueTemplarArchivesFoundQ, null, RegionFromId(8), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Preserver Beware
//--------------------------------------------------------------------------------------------------
bool gt_DialoguePreserverBewareQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_MidPrisonQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialoguePreserverBewareQ_Init () {
    gt_DialoguePreserverBewareQ = TriggerCreate("gt_DialoguePreserverBewareQ_Func");
    TriggerAddEventTimer(gt_DialoguePreserverBewareQ, gv_forceStartHybridCinTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Halt at Player Base 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueHaltatPlayerBase01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_stalkerDialogue == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Stalker"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p2_PROTOSS_STALKER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_stalkerDialogue = true;
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p2_PROTOSS_STALKER, libNtve_ge_AllianceSetting_Neutral);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    MinimapPing(PlayerGroupAll(), UnitGetPosition(EventUnit()), 2.0, Color(100.00, 100.00, 0.00));
    PlayerSetAlliance(gv_p2_PROTOSS_STALKER, c_allianceIdVision, gv_p1_USER, true);
    CameraPan(gv_p1_USER, UnitGetPosition(EventUnit()), 1.5, -1, 10, true);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    if ((UnitIsAlive(EventUnit()) == true)) {
        libNtve_gf_AttachModelToUnit(EventUnit(), "TalkIcon", "Ref_Overhead");
        gv_actorStalkerDialogue = libNtve_gf_ActorLastCreated();
        // Transmission - SoundLink("TZeratul02Stalker00004", 0)
        libCamp_gf_SendTransmissionCampaign(EventUnit(), SoundLink("TZeratul02Stalker00004", 0), c_transmissionDurationAdd, 0.0, true);
        libNtve_gf_KillModel(gv_actorStalkerDialogue);
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(93)), c_orderQueueReplace);
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    UnitSetState(EventUnit(), c_unitStateTargetable, true);
    UnitSetState(EventUnit(), c_unitStateInvulnerable, false);
    PlayerSetAlliance(gv_p2_PROTOSS_STALKER, c_allianceIdVision, gv_p1_USER, false);
    libNtve_gf_SetAllianceOneWay(gv_p2_PROTOSS_STALKER, gv_p1_USER, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAllianceOneWay(gv_p3_PROTOSS_ENEMY, gv_p1_USER, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAllianceOneWay(gv_p4_PROTOSS_ENEMY, gv_p1_USER, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAllianceOneWay(gv_p6_PROTOSS_ENEMY, gv_p1_USER, libNtve_ge_AllianceSetting_Enemy);
    Wait(1.0, c_timeGame);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p2_PROTOSS_STALKER, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p3_PROTOSS_ENEMY, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p4_PROTOSS_ENEMY, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p6_PROTOSS_ENEMY, libNtve_ge_AllianceSetting_Enemy);
    Wait(7.0, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul02Zeratul00007", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul02Zeratul00007", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueHaltatPlayerBase01Q_Init () {
    gt_DialogueHaltatPlayerBase01Q = TriggerCreate("gt_DialogueHaltatPlayerBase01Q_Func");
    TriggerAddEventUnitAcquiredTarget(gt_DialogueHaltatPlayerBase01Q, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Halt at Player Base 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueHaltatPlayerBase02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_stalkerDialogue == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Stalker"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p2_PROTOSS_STALKER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_stalkerDialogue = true;
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p2_PROTOSS_STALKER, libNtve_ge_AllianceSetting_Neutral);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    MinimapPing(PlayerGroupAll(), UnitGetPosition(EventUnit()), 2.0, Color(100.00, 100.00, 0.00));
    PlayerSetAlliance(gv_p2_PROTOSS_STALKER, c_allianceIdVision, gv_p1_USER, true);
    CameraPan(gv_p1_USER, UnitGetPosition(EventUnit()), 1.5, -1, 10, true);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    if ((UnitIsAlive(EventUnit()) == true)) {
        libNtve_gf_AttachModelToUnit(EventUnit(), "TalkIcon", "Ref_Overhead");
        gv_actorStalkerDialogue = libNtve_gf_ActorLastCreated();
        // Transmission - SoundLink("TZeratul02Stalker00004", 0)
        libCamp_gf_SendTransmissionCampaign(EventUnit(), SoundLink("TZeratul02Stalker00004", 0), c_transmissionDurationAdd, 0.0, true);
        libNtve_gf_KillModel(gv_actorStalkerDialogue);
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(93)), c_orderQueueReplace);
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    UnitSetState(EventUnit(), c_unitStateTargetable, true);
    UnitSetState(EventUnit(), c_unitStateInvulnerable, false);
    PlayerSetAlliance(gv_p2_PROTOSS_STALKER, c_allianceIdVision, gv_p1_USER, false);
    libNtve_gf_SetAllianceOneWay(gv_p2_PROTOSS_STALKER, gv_p1_USER, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAllianceOneWay(gv_p3_PROTOSS_ENEMY, gv_p1_USER, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAllianceOneWay(gv_p4_PROTOSS_ENEMY, gv_p1_USER, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAllianceOneWay(gv_p6_PROTOSS_ENEMY, gv_p1_USER, libNtve_ge_AllianceSetting_Enemy);
    Wait(1.0, c_timeGame);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p2_PROTOSS_STALKER, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p3_PROTOSS_ENEMY, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p4_PROTOSS_ENEMY, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p6_PROTOSS_ENEMY, libNtve_ge_AllianceSetting_Enemy);
    Wait(7.0, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul02Zeratul00007", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul02Zeratul00007", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueHaltatPlayerBase02Q_Init () {
    gt_DialogueHaltatPlayerBase02Q = TriggerCreate("gt_DialogueHaltatPlayerBase02Q_Func");
    TriggerAddEventUnitRegion(gt_DialogueHaltatPlayerBase02Q, null, RegionFromId(10), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Get Attacked First Set Alliance
//--------------------------------------------------------------------------------------------------
bool gt_ProtossGetAttackedFirstSetAlliance_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventPlayer() == gv_p3_PROTOSS_ENEMY) || (EventPlayer() == gv_p4_PROTOSS_ENEMY) || (EventPlayer() == gv_p6_PROTOSS_ENEMY)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeGame);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p3_PROTOSS_ENEMY, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p4_PROTOSS_ENEMY, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p6_PROTOSS_ENEMY, libNtve_ge_AllianceSetting_Enemy);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossGetAttackedFirstSetAlliance_Init () {
    gt_ProtossGetAttackedFirstSetAlliance = TriggerCreate("gt_ProtossGetAttackedFirstSetAlliance_Func");
    TriggerAddEventUnitAttacked(gt_ProtossGetAttackedFirstSetAlliance, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stalker Becomes Enemy Near Base
//--------------------------------------------------------------------------------------------------
bool gt_StalkerBecomesEnemyNearBase_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p2_PROTOSS_STALKER, libNtve_ge_AllianceSetting_Enemy);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StalkerBecomesEnemyNearBase_Init () {
    gt_StalkerBecomesEnemyNearBase = TriggerCreate("gt_StalkerBecomesEnemyNearBase_Func");
    TriggerAddEventUnitRegion(gt_StalkerBecomesEnemyNearBase, null, RegionFromId(37), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Dark Shrine Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueDarkShrineQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gf_PlayerIsInCombat(gv_p1_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_DarkTemplarAttackers, true, false);
    TriggerExecute(gt_NewUnitDarkTemplarTipQ, true, false);
    libNtve_gf_CreateUnitsAtPoint2(1, "DarkTemplar", 0, gv_p7_NEUTRAL, PointFromId(193));
    gv_darkTemplar01 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "DarkTemplar", 0, gv_p7_NEUTRAL, PointFromId(135));
    gv_darkTemplar02 = UnitLastCreated();
    UnitIssueOrder(gv_darkTemplar01, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(132)), c_orderQueueReplace);
    UnitIssueOrder(gv_darkTemplar02, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(163)), c_orderQueueReplace);
    Wait(3.0, c_timeAI);
    libNtve_gf_RescueUnit(gv_darkTemplar01, gv_p1_USER, true);
    libNtve_gf_RescueUnit(gv_darkTemplar02, gv_p1_USER, true);
    TriggerQueueEnter();
    if (((UnitIsAlive(gv_darkTemplar01) == false) || (gv_gameOver == true))) {
        return true;
    }

    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(19)), 6.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/B16AD9F3"), null, RegionGetCenter(RegionFromId(19)));
    Wait(1.0, c_timeReal);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul02DarkTemplar00045", 0)
    libCamp_gf_SendTransmissionCampaign(gv_darkTemplar01, SoundLink("TZeratul02DarkTemplar00045", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TZeratul02Zeratul00046", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul02Zeratul00046", 0), c_transmissionDurationAdd, 0.0, true);
    if ((UnitIsAlive(gv_darkTemplar01) == false)) {
        return true;
    }

    // Transmission - SoundLink("TZeratul02DarkTemplar00047", 0)
    libCamp_gf_SendTransmissionCampaign(gv_darkTemplar01, SoundLink("TZeratul02DarkTemplar00047", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueDarkShrineQ_Init () {
    gt_DialogueDarkShrineQ = TriggerCreate("gt_DialogueDarkShrineQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Robotics Facility Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueRoboticsFacilityQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto921B2536_g;
    int auto921B2536_u;
    unit auto921B2536_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gf_PlayerIsInCombat(gv_p1_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_NewUnitImmortalTipQ, true, false);
    VisRevealArea(gv_p7_NEUTRAL, RegionFromId(5), 10.0, false);
    Wait(0.2, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisiblePylon", 0, gv_p7_NEUTRAL, PointFromId(354));
    Wait(1.5, c_timeGame);
    UnitIssueOrder(gv_superWarpGate_Neutral, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), PointFromId(191)), c_orderQueueReplace);
    Wait(5.0, c_timeAI);
    auto921B2536_g = UnitGroup("Immortal", gv_p7_NEUTRAL, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto921B2536_u = UnitGroupCount(auto921B2536_g, c_unitCountAll);
    for (;; auto921B2536_u -= 1) {
        auto921B2536_var = UnitGroupUnitFromEnd(auto921B2536_g, auto921B2536_u);
        if (auto921B2536_var == null) { break; }
        libNtve_gf_RescueUnit(auto921B2536_var, gv_p1_USER, true);
    }
    TriggerQueueEnter();
    if (((UnitGroupCount(UnitGroup("Immortal", gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) || (gv_gameOver == true))) {
        return true;
    }

    MinimapPing(PlayerGroupAll(), PointFromId(190), 6.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/9860ACE5"), null, PointFromId(190));
    Wait(1.0, c_timeReal);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul02Immortal00070", 0)
    libCamp_gf_SendTransmissionCampaign(libNtve_gf_ClosestUnitToPoint(CameraGetTarget(gv_p1_USER), UnitGroup("Immortal", gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)), SoundLink("TZeratul02Immortal00070", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TZeratul02Zeratul00031", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul02Zeratul00031", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueRoboticsFacilityQ_Init () {
    gt_DialogueRoboticsFacilityQ = TriggerCreate("gt_DialogueRoboticsFacilityQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Templar Archives Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueTemplarArchivesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto3D5A3A34_g;
    int auto3D5A3A34_u;
    unit auto3D5A3A34_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gf_PlayerIsInCombat(gv_p1_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_NewUnitHighTemplarTipQ, true, false);
    VisRevealArea(gv_p7_NEUTRAL, RegionFromId(8), 10.0, false);
    Wait(0.2, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisiblePylon", 0, gv_p7_NEUTRAL, PointFromId(646));
    gv_pylonInvisibleHighTemplar = UnitLastCreated();
    Wait(0.8, c_timeGame);
    UnitIssueOrder(gv_superWarpGate_Neutral, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 3), PointFromId(627)), c_orderQueueReplace);
    Wait(5.0, c_timeAI);
    auto3D5A3A34_g = UnitGroup("HighTemplar", gv_p7_NEUTRAL, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3D5A3A34_u = UnitGroupCount(auto3D5A3A34_g, c_unitCountAll);
    for (;; auto3D5A3A34_u -= 1) {
        auto3D5A3A34_var = UnitGroupUnitFromEnd(auto3D5A3A34_g, auto3D5A3A34_u);
        if (auto3D5A3A34_var == null) { break; }
        libNtve_gf_RescueUnit(auto3D5A3A34_var, gv_p1_USER, true);
    }
    TriggerQueueEnter();
    if (((UnitGroupCount(UnitGroup("HighTemplar", gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) || (gv_gameOver == true))) {
        return true;
    }

    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(8)), 6.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/26FC9F8F"), null, RegionGetCenter(RegionFromId(8)));
    Wait(1.0, c_timeReal);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul02HighTemplar00061", 0)
    libCamp_gf_SendTransmissionCampaign(libNtve_gf_ClosestUnitToPoint(CameraGetTarget(gv_p1_USER), UnitGroup("HighTemplar", gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)), SoundLink("TZeratul02HighTemplar00061", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TZeratul02Zeratul00012", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul02Zeratul00012", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueTemplarArchivesQ_Init () {
    gt_DialogueTemplarArchivesQ = TriggerCreate("gt_DialogueTemplarArchivesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Hybrid Returns Line Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueHybridReturnsLineQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul02HybridProtoss00019", 0)
    libCamp_gf_SendTransmissionCampaign(gv_hybridPhysical, SoundLink("TZeratul02HybridProtoss00019", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueHybridReturnsLineQ_Init () {
    gt_DialogueHybridReturnsLineQ = TriggerCreate("gt_DialogueHybridReturnsLineQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Hybrid Pissed 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueHybridPissed01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul02HybridProtoss00016", 0)
    libCamp_gf_SendTransmissionCampaign(gv_hybridPhysical, SoundLink("TZeratul02HybridProtoss00016", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueHybridPissed01Q_Init () {
    gt_DialogueHybridPissed01Q = TriggerCreate("gt_DialogueHybridPissed01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Hybrid Pissed 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueHybridPissed02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul02HybridProtoss00015", 0)
    libCamp_gf_SendTransmissionCampaign(gv_hybridPhysical, SoundLink("TZeratul02HybridProtoss00015", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueHybridPissed02Q_Init () {
    gt_DialogueHybridPissed02Q = TriggerCreate("gt_DialogueHybridPissed02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Hybrid Pissed 03 Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueHybridPissed03Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul02HybridProtoss00032", 0)
    libCamp_gf_SendTransmissionCampaign(gv_hybridPhysical, SoundLink("TZeratul02HybridProtoss00032", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueHybridPissed03Q_Init () {
    gt_DialogueHybridPissed03Q = TriggerCreate("gt_DialogueHybridPissed03Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Hybrid Pissed 04 Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueHybridPissed04Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul02HybridProtoss00018", 0)
    libCamp_gf_SendTransmissionCampaign(gv_hybridPhysical, SoundLink("TZeratul02HybridProtoss00018", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueHybridPissed04Q_Init () {
    gt_DialogueHybridPissed04Q = TriggerCreate("gt_DialogueHybridPissed04Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Hybrid Pissed 05 Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueHybridPissed05Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul02HybridProtoss00019", 0)
    libCamp_gf_SendTransmissionCampaign(gv_hybridPhysical, SoundLink("TZeratul02HybridProtoss00019", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueHybridPissed05Q_Init () {
    gt_DialogueHybridPissed05Q = TriggerCreate("gt_DialogueHybridPissed05Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Hybrid Pissed 06 Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueHybridPissed06Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul02HybridProtoss00023", 0)
    libCamp_gf_SendTransmissionCampaign(gv_hybridPhysical, SoundLink("TZeratul02HybridProtoss00023", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueHybridPissed06Q_Init () {
    gt_DialogueHybridPissed06Q = TriggerCreate("gt_DialogueHybridPissed06Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Hybrid Pissed 07 Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueHybridPissed07Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul02HybridProtoss00018", 0)
    libCamp_gf_SendTransmissionCampaign(gv_hybridPhysical, SoundLink("TZeratul02HybridProtoss00018", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueHybridPissed07Q_Init () {
    gt_DialogueHybridPissed07Q = TriggerCreate("gt_DialogueHybridPissed07Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Run Dialogue Death Lines
//--------------------------------------------------------------------------------------------------
bool gt_RunDialogueDeathLines_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_DialogueHybridPissedManifestationDead01Q, true, false);
    TriggerExecute(gt_DialogueHybridPissedManifestationDead02Q, true, false);
    TriggerExecute(gt_DialogueHybridPissedManifestationDead03Q, true, false);
    TriggerExecute(gt_DialogueHybridPissedManifestationDead04Q, true, false);
    TriggerExecute(gt_DialogueHybridPissedManifestationDead05Q, true, false);
    TriggerExecute(gt_DialogueHybridPissedManifestationDead06Q, true, false);
    gv_hybridDeathsForDialogue = (gv_hybridDeathsForDialogue + 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunDialogueDeathLines_Init () {
    gt_RunDialogueDeathLines = TriggerCreate("gt_RunDialogueDeathLines_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Hybrid Pissed Manifestation Dead 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueHybridPissedManifestationDead01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_hybridDeathsForDialogue == 1))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_prisonsDead <= 2)) {
        if ((gv_gameOver == true)) {
            return true;
        }

        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TZeratul02HybridProtoss00021", 0)
        libCamp_gf_SendTransmissionCampaign(gv_hybridPhysical, SoundLink("TZeratul02HybridProtoss00021", 0), c_transmissionDurationAdd, 0.0, true);
        // Transmission - SoundLink("TZeratul02HybridProtoss00055", 0)
        libCamp_gf_SendTransmissionCampaign(gv_hybridPhysical, SoundLink("TZeratul02HybridProtoss00055", 0), c_transmissionDurationAdd, 0.0, true);
        // Transmission - SoundLink("TZeratul02Zeratul00034", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul02Zeratul00034", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TZeratul02MusicAlt", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueHybridPissedManifestationDead01Q_Init () {
    gt_DialogueHybridPissedManifestationDead01Q = TriggerCreate("gt_DialogueHybridPissedManifestationDead01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Hybrid Pissed Manifestation Dead 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueHybridPissedManifestationDead02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_hybridDeathsForDialogue == 2))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_prisonsDead <= 2)) {
        if ((gv_gameOver == true)) {
            return true;
        }

        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TZeratul02HybridProtoss00022", 0)
        libCamp_gf_SendTransmissionCampaign(gv_hybridPhysical, SoundLink("TZeratul02HybridProtoss00022", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueHybridPissedManifestationDead02Q_Init () {
    gt_DialogueHybridPissedManifestationDead02Q = TriggerCreate("gt_DialogueHybridPissedManifestationDead02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Hybrid Pissed Manifestation Dead 03 Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueHybridPissedManifestationDead03Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_hybridDeathsForDialogue == 3))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_prisonsDead <= 2)) {
        if ((gv_gameOver == true)) {
            return true;
        }

        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TZeratul02HybridProtoss00020", 0)
        libCamp_gf_SendTransmissionCampaign(gv_hybridPhysical, SoundLink("TZeratul02HybridProtoss00020", 0), c_transmissionDurationAdd, 0.0, true);
        // Transmission - SoundLink("TZeratul02HybridProtoss00055", 0)
        libCamp_gf_SendTransmissionCampaign(gv_hybridPhysical, SoundLink("TZeratul02HybridProtoss00055", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueHybridPissedManifestationDead03Q_Init () {
    gt_DialogueHybridPissedManifestationDead03Q = TriggerCreate("gt_DialogueHybridPissedManifestationDead03Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Hybrid Pissed Manifestation Dead 04 Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueHybridPissedManifestationDead04Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_hybridDeathsForDialogue == 4))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_prisonsDead <= 2)) {
        if ((gv_gameOver == true)) {
            return true;
        }

        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TZeratul02HybridProtoss00024", 0)
        libCamp_gf_SendTransmissionCampaign(gv_hybridPhysical, SoundLink("TZeratul02HybridProtoss00024", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueHybridPissedManifestationDead04Q_Init () {
    gt_DialogueHybridPissedManifestationDead04Q = TriggerCreate("gt_DialogueHybridPissedManifestationDead04Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Hybrid Pissed Manifestation Dead 05 Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueHybridPissedManifestationDead05Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_hybridDeathsForDialogue == 5))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_prisonsDead <= 2)) {
        if ((gv_gameOver == true)) {
            return true;
        }

        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TZeratul02HybridProtoss00025", 0)
        libCamp_gf_SendTransmissionCampaign(gv_hybridPhysical, SoundLink("TZeratul02HybridProtoss00025", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueHybridPissedManifestationDead05Q_Init () {
    gt_DialogueHybridPissedManifestationDead05Q = TriggerCreate("gt_DialogueHybridPissedManifestationDead05Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialogue Hybrid Pissed Manifestation Dead 06 Q
//--------------------------------------------------------------------------------------------------
bool gt_DialogueHybridPissedManifestationDead06Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_hybridDeathsForDialogue == 6))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_prisonsDead <= 2)) {
        if ((gv_gameOver == true)) {
            return true;
        }

        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TZeratul02HybridProtoss00026", 0)
        libCamp_gf_SendTransmissionCampaign(gv_hybridPhysical, SoundLink("TZeratul02HybridProtoss00026", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogueHybridPissedManifestationDead06Q_Init () {
    gt_DialogueHybridPissedManifestationDead06Q = TriggerCreate("gt_DialogueHybridPissedManifestationDead06Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AutoSave01 Mid Cin Q
//--------------------------------------------------------------------------------------------------
bool gt_AutoSave01MidCinQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/A425FBF3"));
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutoSave01MidCinQ_Init () {
    gt_AutoSave01MidCinQ = TriggerCreate("gt_AutoSave01MidCinQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AutoSave02 Hybrid Warp in Zone Q
//--------------------------------------------------------------------------------------------------
bool gt_AutoSave02HybridWarpinZoneQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/8368C234"));
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutoSave02HybridWarpinZoneQ_Init () {
    gt_AutoSave02HybridWarpinZoneQ = TriggerCreate("gt_AutoSave02HybridWarpinZoneQ_Func");
    TriggerAddEventUnitRegion(gt_AutoSave02HybridWarpinZoneQ, null, RegionFromId(17), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Kills of player units
//--------------------------------------------------------------------------------------------------
bool gt_HybridKillsofplayerunits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingUnit() == gv_hybridPhysical))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hybridKillsTracking = (gv_hybridKillsTracking + 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridKillsofplayerunits_Init () {
    gt_HybridKillsofplayerunits = TriggerCreate("gt_HybridKillsofplayerunits_Func");
    TriggerAddEventUnitDied(gt_HybridKillsofplayerunits, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dark Templar Kills of enemy units
//--------------------------------------------------------------------------------------------------
bool gt_DarkTemplarKillsofenemyunits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1))) {
            return false;
        }

        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), UnitGetOwner(libNtve_gf_KillingUnit()), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((UnitGetType(libNtve_gf_KillingUnit()) == "DarkTemplar"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_darkTemplarKills = (gv_darkTemplarKills + 1);
    AchievementTermQuantitySet(gv_p1_USER, "Anniversary_TZeratul02", gv_darkTemplarKills);
    TextExpressionSetToken("Param/Expression/634B8128", "A", IntToText(gv_darkTemplarKills));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/634B8128"), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DarkTemplarKillsofenemyunits_Init () {
    gt_DarkTemplarKillsofenemyunits = TriggerCreate("gt_DarkTemplarKillsofenemyunits_Func");
    TriggerAddEventUnitDied(gt_DarkTemplarKillsofenemyunits, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Dies from player
//--------------------------------------------------------------------------------------------------
bool gt_HybridDiesfromplayer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((EventUnit() == gv_hybridPhysical))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hybridDeathsTracking = (gv_hybridDeathsTracking + 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridDiesfromplayer_Init () {
    gt_HybridDiesfromplayer = TriggerCreate("gt_HybridDiesfromplayer_Func");
    TriggerAddEventUnitDied(gt_HybridDiesfromplayer, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Waves
//--------------------------------------------------------------------------------------------------
bool gt_HybridWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_hybridWavesTracking = (gv_hybridWavesTracking + 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridWaves_Init () {
    gt_HybridWaves = TriggerCreate("gt_HybridWaves_Func");
    TriggerAddEventTimer(gt_HybridWaves, gv_attackTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - All Protoss Dead (Normal)
//--------------------------------------------------------------------------------------------------
bool gt_AchievementAllProtossDeadNormal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p3_PROTOSS_ENEMY, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p4_PROTOSS_ENEMY, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p6_PROTOSS_ENEMY, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AchievementAward(gv_p1_USER, "TZeratul02_2");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementAllProtossDeadNormal_Init () {
    gt_AchievementAllProtossDeadNormal = TriggerCreate("gt_AchievementAllProtossDeadNormal_Func");
    TriggerAddEventTimePeriodic(gt_AchievementAllProtossDeadNormal, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p1_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, 0), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/34E4C5F5"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerEnable(gt_DefeatBaseDead, false);
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Prison Objective Complete
//--------------------------------------------------------------------------------------------------
bool gt_VictoryPrisonObjectiveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6BC92896_g;
    int auto6BC92896_u;
    unit auto6BC92896_var;
    unitgroup auto22EFCD9E_g;
    int auto22EFCD9E_u;
    unit auto22EFCD9E_var;
    unitgroup autoA843808E_g;
    int autoA843808E_u;
    unit autoA843808E_var;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerEnable(gt_HybridPingandSound, false);
    auto6BC92896_g = UnitGroup(null, gv_p3_PROTOSS_ENEMY, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6BC92896_u = UnitGroupCount(auto6BC92896_g, c_unitCountAll);
    for (;; auto6BC92896_u -= 1) {
        auto6BC92896_var = UnitGroupUnitFromEnd(auto6BC92896_g, auto6BC92896_u);
        if (auto6BC92896_var == null) { break; }
        UnitSetOwner(auto6BC92896_var, gv_p7_NEUTRAL, true);
        UnitFlashSelection(auto6BC92896_var, 1.0);
    }
    auto22EFCD9E_g = UnitGroup(null, gv_p4_PROTOSS_ENEMY, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto22EFCD9E_u = UnitGroupCount(auto22EFCD9E_g, c_unitCountAll);
    for (;; auto22EFCD9E_u -= 1) {
        auto22EFCD9E_var = UnitGroupUnitFromEnd(auto22EFCD9E_g, auto22EFCD9E_u);
        if (auto22EFCD9E_var == null) { break; }
        UnitSetOwner(auto22EFCD9E_var, gv_p7_NEUTRAL, true);
        UnitFlashSelection(auto22EFCD9E_var, 1.0);
    }
    autoA843808E_g = UnitGroup(null, gv_p6_PROTOSS_ENEMY, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA843808E_u = UnitGroupCount(autoA843808E_g, c_unitCountAll);
    for (;; autoA843808E_u -= 1) {
        autoA843808E_var = UnitGroupUnitFromEnd(autoA843808E_g, autoA843808E_u);
        if (autoA843808E_var == null) { break; }
        UnitSetOwner(autoA843808E_var, gv_p7_NEUTRAL, true);
        UnitFlashSelection(autoA843808E_var, 1.0);
    }
    TimerPause(gv_attackTimer, true);
    libNtve_gf_CreateModelAtPoint("HybridProtossFinalDeath", UnitGetPosition(gv_hybridPhysical));
    gv_actorHybridDeathEffect = libNtve_gf_ActorLastCreated();
    libNtve_gf_MakeModelFaceAngle(gv_actorHybridDeathEffect, UnitGetFacing(gv_hybridPhysical));
    UnitRemove(gv_hybridPhysical);
    libNtve_gf_KillModel(gv_actorHybridDeathEffect);
    TriggerStop(gt_P3MainBaseAttackWaves);
    TriggerStop(gt_P4RightBaseAttackWaves);
    TriggerStop(gt_P6LeftBaseAttackWaves);
    TriggerExecute(gt_ObjectiveDestroyPrisonsComplete, true, false);
    Wait(2.0, c_timeGame);
    libCamp_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryPrisonObjectiveComplete_Init () {
    gt_VictoryPrisonObjectiveComplete = TriggerCreate("gt_VictoryPrisonObjectiveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionClearAll();
    TriggerQueueClear(c_triggerQueueRemove);
    UnitPauseAll(true);
    if ((ObjectiveGetState(gv_objectiveDestroyPrisons) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectivePowerBase) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectivePowerSecondaryBase) == c_objectiveStateCompleted)) {
        AchievementAward(gv_p1_USER, "TZeratul02_1");
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1) && (TimerGetRemaining(gv_achievementHardTimer) != 0.0)) {
        AchievementAward(gv_p1_USER, "TZeratul02_3");
    }

    VictoryPanelAddAchievement("TZeratul02_1");
    VictoryPanelAddAchievement("TZeratul02_2");
    VictoryPanelAddAchievement("TZeratul02_3");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/2704744A"), IntToText(gv_hybridWavesTracking));
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/D46EC28D"), (IntToText(gv_obejctivePowerSecondaryBaseUpdate) + StringExternal("Param/Value/1BBFCC0E") + IntToText(gv_obejctivePowerSecondaryBaseTotal)));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/54855580"), IntToText(gv_obejctivePowerSecondaryBaseUpdate));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/82BCFB17"), StringExternal("Param/Value/F2B82ED1"));
    libCamp_gf_EndCampaignMission(gv_p1_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto74B2EFCB_g;
    int auto74B2EFCB_u;
    unit auto74B2EFCB_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionClearAll();
    TriggerQueueClear(c_triggerQueueRetain);
    auto74B2EFCB_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto74B2EFCB_u = UnitGroupCount(auto74B2EFCB_g, c_unitCountAll);
    for (;; auto74B2EFCB_u -= 1) {
        auto74B2EFCB_var = UnitGroupUnitFromEnd(auto74B2EFCB_g, auto74B2EFCB_u);
        if (auto74B2EFCB_var == null) { break; }
        libNtve_gf_PauseUnit(auto74B2EFCB_var, true);
    }
    libCamp_gf_EndCampaignMission(gv_p1_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    libCamp_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_p1_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_p1_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Power Base Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePowerBaseCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate((StringExternal("Param/Value/4D585342") + IntToText(gv_obejctivePowerBaseUpdate) + StringExternal("Param/Value/A3B269F3") + IntToText(gv_obejctivePowerBaseTotal) + StringExternal("Param/Value/65D0FFDA")), StringExternal("Param/Value/A20EA9E8"), c_objectiveStateActive, true);
    gv_objectivePowerBase = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TZeratul02Objective1, ObjectiveLastCreated(), StringExternal("Param/Value/F78FFBD4"));
    TriggerExecute(gt_PylonPlaceStartQ, true, false);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePowerBaseCreateQ_Init () {
    gt_ObjectivePowerBaseCreateQ = TriggerCreate("gt_ObjectivePowerBaseCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Power Base Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePowerBaseComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectivePowerBaseCreateQ, true, false);
    ObjectiveSetState(gv_objectivePowerBase, c_objectiveStateCompleted);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePowerBaseComplete_Init () {
    gt_ObjectivePowerBaseComplete = TriggerCreate("gt_ObjectivePowerBaseComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Power up Base Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePowerupBaseUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectivePowerBaseCreateQ, true, false);
    gv_obejctivePowerBaseUpdate += 1;
    ObjectiveSetName(gv_objectivePowerBase, (StringExternal("Param/Value/B6424D18") + IntToText(gv_obejctivePowerBaseUpdate) + StringExternal("Param/Value/4A781515") + (IntToText(gv_obejctivePowerBaseTotal)) + StringExternal("Param/Value/DE65E9D6")));
    if ((gv_obejctivePowerBaseUpdate == gv_obejctivePowerBaseTotal)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_ObjectivePowerBaseComplete, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePowerupBaseUpdate_Init () {
    gt_ObjectivePowerupBaseUpdate = TriggerCreate("gt_ObjectivePowerupBaseUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Prisons Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPrisonsCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    ObjectiveCreate((StringExternal("Param/Value/661F07D9") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectDestroythePreserverPrisons, libCamp_ge_StoryResearchObjectiveTextStyle_Multipart, 3, 0)), StringExternal("Param/Value/BF6654F6"), c_objectiveStateActive, true);
    gv_objectiveDestroyPrisons = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TZeratul02Objective2, ObjectiveLastCreated(), StringExternal("Param/Value/FC23C1AF"));
    TriggerExecute(gt_ObjectiveDestroyPrisonsCreateQ, true, false);
    Wait(3.0, c_timeReal);
    if ((UnitIsAlive(UnitFromId(8)) == true)) {
        PingCreate(PlayerGroupAll(), "PingObjective", PointFromId(651), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
        gv_pingPrison01 = PingLastCreated();
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/1B84388A"));
    }

    if ((UnitIsAlive(UnitFromId(142)) == true)) {
        PingCreate(PlayerGroupAll(), "PingObjective", PointFromId(656), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
        gv_pingPrison02 = PingLastCreated();
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/59DEBB2A"));
    }

    if ((UnitIsAlive(UnitFromId(119)) == true)) {
        PingCreate(PlayerGroupAll(), "PingObjective", PointFromId(659), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
        gv_pingPrison03 = PingLastCreated();
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/74D25806"));
    }

    VisRevealArea(gv_p1_USER, RegionCircle(PointWithOffset(PointFromId(651), 0.0, 0.0), 6.0), 1.0, false);
    VisRevealArea(gv_p1_USER, RegionCircle(PointWithOffset(PointFromId(656), 0.0, 0.0), 6.0), 1.0, false);
    VisRevealArea(gv_p1_USER, RegionCircle(PointWithOffset(PointFromId(659), 0.0, 0.0), 6.0), 1.0, false);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPrisonsCreateQ_Init () {
    gt_ObjectiveDestroyPrisonsCreateQ = TriggerCreate("gt_ObjectiveDestroyPrisonsCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Prisons Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPrisonsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyPrisonsCreateQ, true, false);
    ObjectiveSetState(gv_objectiveDestroyPrisons, c_objectiveStateCompleted);
    ObjectiveSetName(gv_objectiveDestroyPrisons, (StringExternal("Param/Value/86EE82A2") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectDestroythePreserverPrisons, libCamp_ge_StoryResearchObjectiveTextStyle_Multipart, 3, gv_objectivesAllPrisonsDestroyedUpdate)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPrisonsComplete_Init () {
    gt_ObjectiveDestroyPrisonsComplete = TriggerCreate("gt_ObjectiveDestroyPrisonsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Prisons Destroyed Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePrisonsDestroyedUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyPrisonsCreateQ, true, false);
    gv_objectivesAllPrisonsDestroyedUpdate += 1;
    ObjectiveSetName(gv_objectiveDestroyPrisons, (StringExternal("Param/Value/8DD3AF59") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectDestroythePreserverPrisons, libCamp_ge_StoryResearchObjectiveTextStyle_Multipart, 3, gv_objectivesAllPrisonsDestroyedUpdate) + StringExternal("Param/Value/1745A93B")));
    if ((gv_objectivesAllPrisonsDestroyedUpdate == gv_obejctivePrisonsTotal)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libNtve_gf_KillModel(gv_actorHybridDeathEffect);
        libNtve_gf_KillModel(gv_actorArchonEffect);
        UnitKill(gv_hybridNeutral);
        Wait(2.0, c_timeReal);
        TransmissionClearAll();
        TriggerExecute(gt_VictoryPrisonObjectiveComplete, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePrisonsDestroyedUpdate_Init () {
    gt_ObjectivePrisonsDestroyedUpdate = TriggerCreate("gt_ObjectivePrisonsDestroyedUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prison01 Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_Prison01Destroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_preserverPrison01))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.2, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "PreserverA", 0, gv_p7_NEUTRAL, PointFromId(171));
    gv_archTemplar01 = UnitLastCreated();
    UnitSetState(gv_archTemplar01, c_unitStateSelectable, false);
    UnitSetState(gv_archTemplar01, c_unitStateTargetable, false);
    libNtve_gf_MakeUnitInvulnerable(gv_archTemplar01, true);
    PingDestroy(gv_pingPrison01);
    UnitSetScale(gv_archTemplar01, 120.0, 120.0, 120.0);
    libCamp_gf_DisplayResearchPointsGiventoPlayer(libCamp_ge_StoryResearchObject_ResearchObjectDestroythePreserverPrisons, gv_archTemplar01, gv_p1_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Prison01Destroyed_Init () {
    gt_Prison01Destroyed = TriggerCreate("gt_Prison01Destroyed_Func");
    TriggerAddEventUnitDied(gt_Prison01Destroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prison02 Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_Prison02Destroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_preserverPrison02))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.2, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "PreserverB", 0, gv_p7_NEUTRAL, PointFromId(372));
    gv_archTemplar02 = UnitLastCreated();
    UnitSetState(gv_archTemplar02, c_unitStateSelectable, false);
    UnitSetState(gv_archTemplar02, c_unitStateTargetable, false);
    libNtve_gf_MakeUnitInvulnerable(gv_archTemplar02, true);
    PingDestroy(gv_pingPrison02);
    UnitSetScale(gv_archTemplar02, 120.0, 120.0, 120.0);
    libCamp_gf_DisplayResearchPointsGiventoPlayer(libCamp_ge_StoryResearchObject_ResearchObjectDestroythePreserverPrisons, gv_archTemplar02, gv_p1_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Prison02Destroyed_Init () {
    gt_Prison02Destroyed = TriggerCreate("gt_Prison02Destroyed_Func");
    TriggerAddEventUnitDied(gt_Prison02Destroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prison03 Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_Prison03Destroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_preserverPrison03))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.2, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "PreserverC", 0, gv_p7_NEUTRAL, PointFromId(373));
    gv_archTemplar03 = UnitLastCreated();
    UnitSetState(gv_archTemplar03, c_unitStateSelectable, false);
    UnitSetState(gv_archTemplar03, c_unitStateTargetable, false);
    libNtve_gf_MakeUnitInvulnerable(gv_archTemplar03, true);
    PingDestroy(gv_pingPrison03);
    UnitSetScale(gv_archTemplar03, 120.0, 120.0, 120.0);
    libCamp_gf_DisplayResearchPointsGiventoPlayer(libCamp_ge_StoryResearchObject_ResearchObjectDestroythePreserverPrisons, gv_archTemplar03, gv_p1_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Prison03Destroyed_Init () {
    gt_Prison03Destroyed = TriggerCreate("gt_Prison03Destroyed_Func");
    TriggerAddEventUnitDied(gt_Prison03Destroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Power Secondary Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePowerSecondaryCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate((StringExternal("Param/Value/44C85259") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectPowertheAbandonedStructure, libCamp_ge_StoryResearchObjectiveTextStyle_Multipart, 3, 0) + StringExternal("Param/Value/0E94037E")), StringExternal("Param/Value/F974BE83"), c_objectiveStateActive, false);
    gv_objectivePowerSecondaryBase = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TZeratul02Objective1, ObjectiveLastCreated(), StringExternal("Param/Value/79D9949C"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_ObjectivePings, true, false);
    ObjectiveSetName(gv_objectivePowerSecondaryBase, (StringExternal("Param/Value/E8580788") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectPowertheAbandonedStructure, libCamp_ge_StoryResearchObjectiveTextStyle_Multipart, 3, gv_obejctivePowerSecondaryBaseUpdate) + StringExternal("Param/Value/63A96D60")));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePowerSecondaryCreateQ_Init () {
    gt_ObjectivePowerSecondaryCreateQ = TriggerCreate("gt_ObjectivePowerSecondaryCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Power Secondary Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePowerSecondaryComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectivePowerSecondaryCreateQ, true, false);
    ObjectiveSetState(gv_objectivePowerSecondaryBase, c_objectiveStateCompleted);
    ObjectiveSetName(gv_objectivePowerSecondaryBase, (StringExternal("Param/Value/CB6A9AC1") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectPowertheAbandonedStructure, libCamp_ge_StoryResearchObjectiveTextStyle_Multipart, 3, gv_obejctivePowerSecondaryBaseUpdate)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePowerSecondaryComplete_Init () {
    gt_ObjectivePowerSecondaryComplete = TriggerCreate("gt_ObjectivePowerSecondaryComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Pings
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(UnitFromId(563)) == true) && (UnitGetOwner(UnitFromId(563)) == gv_p5_ABANDONED_STRUCTURES)) {
        PingCreate(PlayerGroupAll(), "PingObjective", PointFromId(603), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0);
        gv_pingTwilightCouncil = PingLastCreated();
        PingSetScale(gv_pingTwilightCouncil, 0.75);
        PingSetTooltip(gv_pingTwilightCouncil, StringExternal("Param/Value/5315B1A8"));
    }

    Wait(0.2, c_timeGame);
    if ((UnitIsAlive(UnitFromId(43)) == true) && (UnitGetOwner(UnitFromId(43)) == gv_p5_ABANDONED_STRUCTURES)) {
        PingCreate(PlayerGroupAll(), "PingObjective", PointFromId(549), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0);
        gv_pingTemplarArchives = PingLastCreated();
        PingSetScale(gv_pingTemplarArchives, 0.75);
        PingSetTooltip(gv_pingTemplarArchives, StringExternal("Param/Value/549B5C54"));
    }

    Wait(0.2, c_timeGame);
    if ((UnitIsAlive(UnitFromId(179)) == true) && (UnitGetOwner(UnitFromId(179)) == gv_p5_ABANDONED_STRUCTURES)) {
        PingCreate(PlayerGroupAll(), "PingObjective", PointFromId(355), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0);
        gv_pingDarkShrine = PingLastCreated();
        PingSetScale(gv_pingDarkShrine, 0.75);
        PingSetTooltip(gv_pingDarkShrine, StringExternal("Param/Value/908EFC43"));
    }

    VisRevealerCreate(gv_p1_USER, RegionFromId(5));
    gv_revealerTwilightArea = VisRevealerLastCreated();
    VisRevealerCreate(gv_p1_USER, RegionFromId(19));
    gv_revealerDTArea = VisRevealerLastCreated();
    VisRevealerCreate(gv_p1_USER, RegionFromId(8));
    gv_revealerTown = VisRevealerLastCreated();
    Wait(2.0, c_timeGame);
    VisRevealerDestroy(gv_revealerDTArea);
    VisRevealerDestroy(gv_revealerTwilightArea);
    VisRevealerDestroy(gv_revealerTown);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePings_Init () {
    gt_ObjectivePings = TriggerCreate("gt_ObjectivePings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Power up Secondary Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePowerupSecondaryUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectivePowerSecondaryCreateQ, true, false);
    gv_obejctivePowerSecondaryBaseUpdate += 1;
    ObjectiveSetName(gv_objectivePowerSecondaryBase, (StringExternal("Param/Value/2711B490") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectPowertheAbandonedStructure, libCamp_ge_StoryResearchObjectiveTextStyle_Multipart, 3, gv_obejctivePowerSecondaryBaseUpdate) + StringExternal("Param/Value/30616D3B")));
    if ((gv_obejctivePowerSecondaryBaseUpdate == gv_obejctivePowerSecondaryBaseTotal)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_ObjectivePowerSecondaryComplete, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePowerupSecondaryUpdate_Init () {
    gt_ObjectivePowerupSecondaryUpdate = TriggerCreate("gt_ObjectivePowerupSecondaryUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_StartGame);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    gv_inCinematic = true;
    gv_gameOver = true;
    UnitPauseAll(true);
    AITimePause(true);
    GameTimeOfDayPause(true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_BriefingScene00, true, true);
    UnitPauseAll(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShowHideUnit(gv_preserverPrison01, false);
    libNtve_gf_ShowHideUnit(gv_preserverPrison02, false);
    libNtve_gf_ShowHideUnit(gv_preserverPrison03, false);
    libNtve_gf_CreateUnitsAtPoint2(1, "PreserverA", 0, gv_p7_NEUTRAL, PointFromId(284));
    UnitSetScale(UnitLastCreated(), 150.0, 150.0, 150.0);
    gv_preserverPrison01 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "PreserverB", 0, gv_p7_NEUTRAL, PointFromId(297));
    UnitSetScale(UnitLastCreated(), 150.0, 150.0, 150.0);
    gv_preserverPrison02 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "PreserverC", 0, gv_p7_NEUTRAL, PointFromId(352));
    UnitSetScale(UnitLastCreated(), 150.0, 150.0, 150.0);
    gv_preserverPrison03 = UnitLastCreated();
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(546), 0.0, -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(547), (SoundLengthSync(SoundLink("TZeratul02BriefingZeratul00003", 0)) + SoundLengthSync(SoundLink("TZeratul02BriefingZeratul00003", 0))), -1, 10, true);
    MovieStartRecording("Briefing_Video_TZeratul02_00");
    TriggerExecute(gt_BriefingAnimations, true, false);
    // Transmission - SoundLink("TZeratul02BriefingZeratul00003", 0)
    SoundPlay(SoundLink("TZeratul02BriefingZeratul00003", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("TZeratul02BriefingZeratul00003", 0)), c_timeReal);
    // Transmission - SoundLink("TZeratul02BriefingZeratul00003", 0)
    SoundPlay(SoundLink("TZeratul02BriefingZeratul00003", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("TZeratul02BriefingZeratul00003", 0)), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TZeratul02BriefingZeratul00003", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TZeratul02BriefingZeratul00003", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00_Init () {
    gt_BriefingScene00 = TriggerCreate("gt_BriefingScene00_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Animations
//--------------------------------------------------------------------------------------------------
bool gt_BriefingAnimations_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_preserverPrison01), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_preserverPrison02), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_preserverPrison03), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.833, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_preserverPrison01), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_preserverPrison02), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_preserverPrison03), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingAnimations_Init () {
    gt_BriefingAnimations = TriggerCreate("gt_BriefingAnimations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pickedUnit;

    // Automatic Variable Declarations
    unitgroup autoE5833CDF_g;
    int autoE5833CDF_u;
    unit autoE5833CDF_var;
    unitgroup auto4DB05982_g;
    int auto4DB05982_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p3_PROTOSS_ENEMY, libNtve_ge_AllianceSetting_Neutral);
    UnitPauseAll(true);
    autoE5833CDF_g = UnitGroup(null, c_playerAny, RegionFromId(62), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE5833CDF_u = UnitGroupCount(autoE5833CDF_g, c_unitCountAll);
    for (;; autoE5833CDF_u -= 1) {
        autoE5833CDF_var = UnitGroupUnitFromEnd(autoE5833CDF_g, autoE5833CDF_u);
        if (autoE5833CDF_var == null) { break; }
        libNtve_gf_PauseUnit(autoE5833CDF_var, false);
    }
    gv_introHiddenUnitGroup = UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto4DB05982_g = gv_introHiddenUnitGroup;
    auto4DB05982_u = UnitGroupCount(auto4DB05982_g, c_unitCountAll);
    for (;; auto4DB05982_u -= 1) {
        lv_pickedUnit = UnitGroupUnitFromEnd(auto4DB05982_g, auto4DB05982_u);
        if (lv_pickedUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_pickedUnit, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(16), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(47), 10.0, -1, 10, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "VoidSeeker", 0, gv_p1_USER, PointFromId(1));
    gv_introVoidSeeker = UnitLastCreated();
    UnitCargoCreate(gv_introVoidSeeker, "Probe", 6);
    UnitIssueOrder(gv_introVoidSeeker, Order(AbilityCommand("PsytrousOxide", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_introVoidSeeker, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(175)), c_orderQueueReplace);
    UnitSetPropertyFixed(gv_introVoidSeeker, c_unitPropMovementSpeed, 14.0);
    Wait(2.0, c_timeReal);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TZeratul02MusicIntro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gv_introCinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    Wait(2.0, c_timeReal);
    UnitSetPropertyFixed(gv_introVoidSeeker, c_unitPropMovementSpeed, 2.0);
    UnitIssueOrder(gv_introVoidSeeker, Order(AbilityCommand("PsytrousOxide", 1)), c_orderQueueReplace);
    Wait(4.0, c_timeReal);
    // Transmission - SoundLink("TZeratul02Zeratul00001", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul02Zeratul00001", 0), c_transmissionDurationAdd, 0.0, false);
    UnitIssueOrder(gv_introVoidSeeker, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(82)), c_orderQueueReplace);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(80), 7.0, -1, 10, true);
    Wait(7.0, c_timeReal);
    UnitIssueOrder(gv_introVoidSeeker, OrderTargetingPoint(AbilityCommand("VoidSeekerTransport", 2), PointFromId(14)), c_orderQueueReplace);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(376), 5.0, -1, 10, true);
    Wait(16.0, c_timeReal);
    gv_introCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_introCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pickedUnit;
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup autoA4FBA74B_g;
    int autoA4FBA74B_u;
    unitgroup autoF63C3B8C_g;
    int autoF63C3B8C_u;
    unit autoF63C3B8C_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoA4FBA74B_g = gv_introHiddenUnitGroup;
    autoA4FBA74B_u = UnitGroupCount(autoA4FBA74B_g, c_unitCountAll);
    for (;; autoA4FBA74B_u -= 1) {
        lv_pickedUnit = UnitGroupUnitFromEnd(autoA4FBA74B_g, autoA4FBA74B_u);
        if (lv_pickedUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_pickedUnit, true);
    }
    UnitPauseAll(false);
    AITimePause(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, true);
    CameraPan(gv_p1_USER, PointFromId(2), 0.0, -1, 10, false);
    CameraApplyInfo(gv_p1_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_p1_USER, RegionEntireMap(), false, false);
    Wait(0.5, c_timeGame);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p3_PROTOSS_ENEMY, libNtve_ge_AllianceSetting_Enemy);
    UnitRemove(gv_introVoidSeeker);
    UnitRemove(gv_introNexus);
    autoF63C3B8C_g = UnitGroup(null, gv_p1_USER, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF63C3B8C_u = UnitGroupCount(autoF63C3B8C_g, c_unitCountAll);
    for (;; autoF63C3B8C_u -= 1) {
        autoF63C3B8C_var = UnitGroupUnitFromEnd(autoF63C3B8C_g, autoF63C3B8C_u);
        if (autoF63C3B8C_var == null) { break; }
        UnitRemove(autoF63C3B8C_var);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Nexus", 0, gv_p1_USER, PointFromId(2));
    libNtve_gf_CreateUnitsAtPoint2(1, "Probe", 0, gv_p1_USER, PointFromId(9));
    libNtve_gf_CreateUnitsAtPoint2(1, "Probe", 0, gv_p1_USER, PointFromId(38));
    libNtve_gf_CreateUnitsAtPoint2(1, "Probe", 0, gv_p1_USER, PointFromId(59));
    libNtve_gf_CreateUnitsAtPoint2(1, "Probe", 0, gv_p1_USER, PointFromId(60));
    libNtve_gf_CreateUnitsAtPoint2(1, "Probe", 0, gv_p1_USER, PointFromId(21));
    libNtve_gf_CreateUnitsAtPoint2(1, "Probe", 0, gv_p1_USER, PointFromId(359));
    TriggerEnable(gt_IntroCinematicNexus, false);
    PlayerModifyPropertyInt(gv_p1_USER, c_playerPropMinerals, c_playerPropOperSetTo, gv_startingMinerals);
    PlayerModifyPropertyInt(gv_p1_USER, c_playerPropVespene, c_playerPropOperSetTo, gv_startingGas);
    if ((gv_introCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_p1_USER, 42.0, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(2), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(lv_fadeDuration, c_timeReal);
    gv_inCinematic = false;
    gv_introCinematicCompleted = true;
    TriggerEnable(gt_DefeatBaseDead, true);
    TriggerExecute(gt_StartGame, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic Nexus
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicNexus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "Nexus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_introNexus = EventUnitProgressUnit();
    Wait(0.2, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicNexus_Init () {
    gt_IntroCinematicNexus = TriggerCreate("gt_IntroCinematicNexus_Func");
    TriggerAddEventUnitConstructProgress(gt_IntroCinematicNexus, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger:      Dropship01 Purge
//--------------------------------------------------------------------------------------------------
bool gt_Dropship01Purge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitCargoGroup(gv_introVoidSeeker), c_unitCountAlive) <= 0))) {
            return false;
        }

        if (!((gv_introShuttleProbes == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(gv_introVoidSeeker, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(35)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Dropship01Purge_Init () {
    gt_Dropship01Purge = TriggerCreate("gt_Dropship01Purge_Func");
    TriggerAddEventUnitCargo(gt_Dropship01Purge, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger:      Dropship01 Unit Perimeter 1
//--------------------------------------------------------------------------------------------------
bool gt_Dropship01UnitPerimeter1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_introShuttleProbes == true))) {
            return false;
        }

        if (!((gv_introCinematicCompleted == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitCargoGroup(gv_introVoidSeeker), c_unitCountAlive) == 5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("ProtossBuild", 0), PointFromId(2)), c_orderQueueReplace);
    gv_introProbe01 = EventUnitCargo();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Dropship01UnitPerimeter1_Init () {
    gt_Dropship01UnitPerimeter1 = TriggerCreate("gt_Dropship01UnitPerimeter1_Func");
    TriggerAddEventUnitCargo(gt_Dropship01UnitPerimeter1, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger:      Dropship01 Unit Perimeter 2
//--------------------------------------------------------------------------------------------------
bool gt_Dropship01UnitPerimeter2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_introShuttleProbes == true))) {
            return false;
        }

        if (!((gv_introCinematicCompleted == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitCargoGroup(gv_introVoidSeeker), c_unitCountAlive) == 4))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(38)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Dropship01UnitPerimeter2_Init () {
    gt_Dropship01UnitPerimeter2 = TriggerCreate("gt_Dropship01UnitPerimeter2_Func");
    TriggerAddEventUnitCargo(gt_Dropship01UnitPerimeter2, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger:      Dropship01 Unit Perimeter 3
//--------------------------------------------------------------------------------------------------
bool gt_Dropship01UnitPerimeter3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_introShuttleProbes == true))) {
            return false;
        }

        if (!((gv_introCinematicCompleted == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitCargoGroup(gv_introVoidSeeker), c_unitCountAlive) == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(59)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Dropship01UnitPerimeter3_Init () {
    gt_Dropship01UnitPerimeter3 = TriggerCreate("gt_Dropship01UnitPerimeter3_Func");
    TriggerAddEventUnitCargo(gt_Dropship01UnitPerimeter3, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger:      Dropship01 Unit Perimeter 4
//--------------------------------------------------------------------------------------------------
bool gt_Dropship01UnitPerimeter4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_introShuttleProbes == true))) {
            return false;
        }

        if (!((gv_introCinematicCompleted == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitCargoGroup(gv_introVoidSeeker), c_unitCountAlive) == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(60)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Dropship01UnitPerimeter4_Init () {
    gt_Dropship01UnitPerimeter4 = TriggerCreate("gt_Dropship01UnitPerimeter4_Func");
    TriggerAddEventUnitCargo(gt_Dropship01UnitPerimeter4, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger:      Dropship01 Unit Perimeter 5
//--------------------------------------------------------------------------------------------------
bool gt_Dropship01UnitPerimeter5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_introShuttleProbes == true))) {
            return false;
        }

        if (!((gv_introCinematicCompleted == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitCargoGroup(gv_introVoidSeeker), c_unitCountAlive) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(21)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Dropship01UnitPerimeter5_Init () {
    gt_Dropship01UnitPerimeter5 = TriggerCreate("gt_Dropship01UnitPerimeter5_Func");
    TriggerAddEventUnitCargo(gt_Dropship01UnitPerimeter5, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger:      Dropship01 Unit Perimeter 6
//--------------------------------------------------------------------------------------------------
bool gt_Dropship01UnitPerimeter6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_introShuttleProbes == true))) {
            return false;
        }

        if (!((gv_introCinematicCompleted == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitCargoGroup(gv_introVoidSeeker), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(359)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Dropship01UnitPerimeter6_Init () {
    gt_Dropship01UnitPerimeter6 = TriggerCreate("gt_Dropship01UnitPerimeter6_Func");
    TriggerAddEventUnitCargo(gt_Dropship01UnitPerimeter6, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Prison Q
//--------------------------------------------------------------------------------------------------
bool gt_MidPrisonQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gf_PlayerIsInCombat(gv_p1_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    TriggerExecute(gt_MidPrisonSetup, true, true);
    TriggerExecute(gt_MidPrisonCinematic, true, true);
    TriggerExecute(gt_MidPrisonCinematicEnd, true, true);
    TriggerExecute(gt_MidPrisonCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidPrisonQ_Init () {
    gt_MidPrisonQ = TriggerCreate("gt_MidPrisonQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Prison Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidPrisonSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_chosenUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(584)), c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    AITimePause(true);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_p1_USER);
    libNtve_gf_StoreUnitSelection(gv_p1_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitPauseAll(true);
    libNtve_gf_ShowHideUnit(gv_preserverPrison01, true);
    libNtve_gf_ShowHideUnit(gv_preserverPrison02, true);
    libNtve_gf_ShowHideUnit(gv_preserverPrison03, true);
    libNtve_gf_PauseUnit(gv_preserverPrison01, false);
    libNtve_gf_PauseUnit(gv_preserverPrison02, false);
    libNtve_gf_PauseUnit(gv_preserverPrison03, false);
    libNtve_gf_PauseUnit(gv_libraryAtBridge01, false);
    libNtve_gf_PauseUnit(gv_libraryAtBridge02, false);
    libNtve_gf_PauseUnit(gv_libraryAtBridge03, false);
    libNtve_gf_PauseUnit(gv_libraryAtBridge04, false);
    libNtve_gf_PauseUnit(gv_libraryAtBridge05, false);
    libNtve_gf_PauseUnit(gv_stalkerAtBridge, false);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p3_PROTOSS_ENEMY, libNtve_ge_AllianceSetting_Ally);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidPrisonSetup_Init () {
    gt_MidPrisonSetup = TriggerCreate("gt_MidPrisonSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Prison Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidPrisonCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto42457F91_g;
    int auto42457F91_u;
    unit auto42457F91_var;
    unitgroup autoB380563E_g;
    int autoB380563E_u;
    unit autoB380563E_var;
    unitgroup autoE26C4CB5_g;
    int autoE26C4CB5_u;
    unit autoE26C4CB5_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(72), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(105), 8.0, -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_midPrisonCinematicCompleted = false;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TZeratul02MusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    if ((gv_libraryDown02 == false)) {
        SoundPlay(gv_soundLibrary, PlayerGroupAll(), 100.0, 0.0);
        UnitIssueOrder(gv_libraryAtBridge02, Order(AbilityCommand("LibraryDown", 0)), c_orderQueueReplace);
    }

    Wait(0.2, c_timeReal);
    if ((gv_libraryDown01 == false)) {
        SoundPlay(gv_soundLibrary, PlayerGroupAll(), 100.0, 0.0);
        UnitIssueOrder(gv_libraryAtBridge01, Order(AbilityCommand("LibraryDown", 0)), c_orderQueueReplace);
    }

    Wait(0.4, c_timeReal);
    if ((gv_libraryDown03 == false)) {
        SoundPlay(gv_soundLibrary, PlayerGroupAll(), 100.0, 0.0);
        UnitIssueOrder(gv_libraryAtBridge03, Order(AbilityCommand("LibraryDown", 0)), c_orderQueueReplace);
    }

    Wait(1.0, c_timeReal);
    ActorSend(ActorFromDoodad(DoodadFromId(120)), "AnimBracketStart WorkOn Birth Stand,Work Death");
    SoundPlay(gv_soundBridge, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeReal);
    auto42457F91_g = UnitGroup("PathingBlocker2x2", c_playerAny, RegionFromId(18), UnitFilter(0, 0, 0, 0), 0);
    auto42457F91_u = UnitGroupCount(auto42457F91_g, c_unitCountAll);
    for (;; auto42457F91_u -= 1) {
        auto42457F91_var = UnitGroupUnitFromEnd(auto42457F91_g, auto42457F91_u);
        if (auto42457F91_var == null) { break; }
        UnitKill(auto42457F91_var);
    }
    autoB380563E_g = UnitGroup("PathingBlocker1x1", c_playerAny, RegionFromId(18), UnitFilter(0, 0, 0, 0), 0);
    autoB380563E_u = UnitGroupCount(autoB380563E_g, c_unitCountAll);
    for (;; autoB380563E_u -= 1) {
        autoB380563E_var = UnitGroupUnitFromEnd(autoB380563E_g, autoB380563E_u);
        if (autoB380563E_var == null) { break; }
        UnitKill(autoB380563E_var);
    }
    UnitIssueOrder(gv_stalkerAtBridge, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(106)), c_orderQueueReplace);
    Wait(4.0, c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(562), 3.0, -1, 10, true);
    Wait(4.0, c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(161), 0.0, -1, 10, true);
    SoundPlay(gv_soundHybridWarpIn, PlayerGroupAll(), 100.0, 0.0);
    autoE26C4CB5_g = UnitGroup(null, c_playerAny, RegionFromId(4), UnitFilter(0, 0, 0, 0), 0);
    autoE26C4CB5_u = UnitGroupCount(autoE26C4CB5_g, c_unitCountAll);
    for (;; autoE26C4CB5_u -= 1) {
        autoE26C4CB5_var = UnitGroupUnitFromEnd(autoE26C4CB5_g, autoE26C4CB5_u);
        if (autoE26C4CB5_var == null) { break; }
        UnitKill(autoE26C4CB5_var);
    }
    Wait(0.5, c_timeReal);
    libNtve_gf_CreateUnitsAtPoint2(1, "Maar", 0, gv_p8_PRISON_STRUCTURE, PointFromId(232));
    gv_hybridNeutral = UnitLastCreated();
    Wait(1.0, c_timeReal);
    // Transmission - SoundLink("TZeratul02HybridProtoss00014", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul02HybridProtoss00014", 0), c_transmissionDurationAdd, 0.0, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TZeratul02MusicEventB", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    // Transmission - SoundLink("TZeratul02Zeratul00037", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul02Zeratul00037", 0), c_transmissionDurationAdd, 0.0, false);
    Wait(2.0, c_timeReal);
    UnitSetPropertyFixed(gv_hybridNeutral, c_unitPropMovementSpeed, 1.0);
    UnitIssueOrder(gv_hybridNeutral, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(181)), c_orderQueueReplace);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(160), 4.0, -1, 10, true);
    Wait(9.0, c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(279), 10.0, -1, 10, true);
    // Transmission - SoundLink("TZeratul02HybridProtoss00055", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul02HybridProtoss00055", 0), c_transmissionDurationAdd, 0.0, false);
    Wait(2.0, c_timeReal);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(584)), c_animNameDefault, "Birth", c_animFlagPlayForever, c_animTimeDefault);
    Wait(2.0, c_timeReal);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(584)), c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    Wait(1.0, c_timeReal);
    UnitIssueOrder(gv_preserverPrison01, OrderTargetingUnit(AbilityCommand("SoulChannel", 0), gv_hybridNeutral), c_orderQueueReplace);
    Wait(0.5, c_timeReal);
    UnitIssueOrder(gv_preserverPrison02, OrderTargetingUnit(AbilityCommand("SoulChannel", 0), gv_hybridNeutral), c_orderQueueReplace);
    Wait(0.75, c_timeReal);
    UnitIssueOrder(gv_preserverPrison03, OrderTargetingUnit(AbilityCommand("SoulChannel", 0), gv_hybridNeutral), c_orderQueueReplace);
    Wait(0.5, c_timeReal);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_hybridNeutral), c_animNameDefault, "Stand Angry", c_animFlagPlayForever, c_animTimeDefault);
    Wait(2.5, c_timeReal);
    gv_midPrisonCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidPrisonCinematic_Init () {
    gt_MidPrisonCinematic = TriggerCreate("gt_MidPrisonCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Prison Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidPrisonCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_midPrisonCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidPrisonCinematicEnd_Init () {
    gt_MidPrisonCinematicEnd = TriggerCreate("gt_MidPrisonCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Prison Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidPrisonCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto41AE3A01_g;
    int auto41AE3A01_u;
    unit auto41AE3A01_var;
    unitgroup autoE5D58D00_g;
    int autoE5D58D00_u;
    unit autoE5D58D00_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitPauseAll(false);
    AITimePause(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, true);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p3_PROTOSS_ENEMY, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_RestoreUnitSelection(gv_p1_USER);
    CameraRestore(gv_p1_USER, 0.0, -1, 10);
    libNtve_gf_KillModel(gv_actorHybridSpawn);
    UnitRemove(gv_hybridNeutral);
    UnitIssueOrder(gv_preserverPrison01, Order(AbilityCommand("SoulChannel", 1)), c_orderQueueReplace);
    UnitIssueOrder(gv_preserverPrison02, Order(AbilityCommand("SoulChannel", 1)), c_orderQueueReplace);
    UnitIssueOrder(gv_preserverPrison03, Order(AbilityCommand("SoulChannel", 1)), c_orderQueueReplace);
    UnitIssueOrder(gv_libraryAtBridge02, Order(AbilityCommand("LibraryDown", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_libraryAtBridge01, Order(AbilityCommand("LibraryDown", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_libraryAtBridge03, Order(AbilityCommand("LibraryDown", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_libraryAtBridge04, Order(AbilityCommand("LibraryDown", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_libraryAtBridge05, Order(AbilityCommand("LibraryDown", 0)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Maar", 0, gv_p8_PRISON_STRUCTURE, PointFromId(181));
    gv_hybridNeutral = UnitLastCreated();
    UnitIssueOrder(gv_hybridNeutral, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitSetState(gv_hybridNeutral, c_unitStateInvulnerable, true);
    UnitSetState(gv_hybridNeutral, c_unitStateTargetable, false);
    UnitSetState(gv_hybridNeutral, c_unitStateSelectable, false);
    UnitBehaviorAdd(gv_hybridNeutral, "HybridDontDie", gv_hybridNeutral, 1);
    UnitGroupAdd(gv_prisonGroup, gv_preserverPrison01);
    UnitGroupAdd(gv_prisonGroup, gv_preserverPrison02);
    UnitGroupAdd(gv_prisonGroup, gv_preserverPrison03);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(120)), c_animNameDefault, "Birth", c_animFlagNonLooping, 0.0);
    auto41AE3A01_g = UnitGroup("PathingBlocker2x2", c_playerAny, RegionFromId(18), UnitFilter(0, 0, 0, 0), 0);
    auto41AE3A01_u = UnitGroupCount(auto41AE3A01_g, c_unitCountAll);
    for (;; auto41AE3A01_u -= 1) {
        auto41AE3A01_var = UnitGroupUnitFromEnd(auto41AE3A01_g, auto41AE3A01_u);
        if (auto41AE3A01_var == null) { break; }
        UnitKill(auto41AE3A01_var);
    }
    autoE5D58D00_g = UnitGroup("PathingBlocker1x1", c_playerAny, RegionFromId(18), UnitFilter(0, 0, 0, 0), 0);
    autoE5D58D00_u = UnitGroupCount(autoE5D58D00_g, c_unitCountAll);
    for (;; autoE5D58D00_u -= 1) {
        autoE5D58D00_var = UnitGroupUnitFromEnd(autoE5D58D00_g, autoE5D58D00_u);
        if (autoE5D58D00_var == null) { break; }
        UnitKill(autoE5D58D00_var);
    }
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(120)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, 0.0);
    UnitSetPosition(gv_stalkerAtBridge, PointFromId(106), true);
    if ((gv_midPrisonCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_MakeUnitFacePoint(gv_hybridNeutral, PointWithOffsetPolar(PointFromId(345), 0.0, 0.0), 0.0);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(584)), c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    UnitIssueOrder(gv_preserverPrison01, OrderTargetingUnit(AbilityCommand("SoulChannel", 0), gv_hybridNeutral), c_orderQueueReplace);
    UnitIssueOrder(gv_preserverPrison02, OrderTargetingUnit(AbilityCommand("SoulChannel", 0), gv_hybridNeutral), c_orderQueueReplace);
    UnitIssueOrder(gv_preserverPrison03, OrderTargetingUnit(AbilityCommand("SoulChannel", 0), gv_hybridNeutral), c_orderQueueReplace);
    if ((gv_prisonsObjStarted == false)) {
        TriggerExecute(gt_DialogueSomethingAmissQ, true, false);
        TriggerExecute(gt_ObjectiveDestroyPrisonsCreateQ, true, false);
    }

    if ((gv_secondaryObjStarted == false)) {
        TriggerExecute(gt_SecondaryObjectiveRun, true, false);
    }

    if ((gv_stalkerWarningStarted == false)) {
        UnitIssueOrder(UnitFromId(78), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(36)), c_orderQueueReplace);
    }

    Wait(0.2, c_timeGame);
    VisRevealerCreate(gv_p1_USER, RegionFromId(6));
    gv_visbilityPrisonWholeArea = VisRevealerLastCreated();
    VisRevealerCreate(gv_p1_USER, RegionFromId(18));
    gv_visbilityBridgeArea = VisRevealerLastCreated();
    Wait(0.2, c_timeGame);
    VisRevealerDestroy(gv_visbilityBridgeArea);
    libNtve_gf_PauseUnit(gv_hybridNeutral, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_hybridNeutral), c_animNameDefault, "Stand Angry", c_animFlagPlayForever, c_animTimeDefault);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Maar", false, gv_p1_USER);
    TriggerExecute(gt_EnergyLeaderboard, true, false);
    TriggerExecute(gt_AutoSave01MidCinQ, true, false);
    TriggerExecute(gt_StartAttackWaves, true, false);
    gv_inCinematic = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidPrisonCleanup_Init () {
    gt_MidPrisonCleanup = TriggerCreate("gt_MidPrisonCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerQueueEnter();
    TriggerExecute(gt_VictoryCinematicSetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pickedUnit;

    // Automatic Variable Declarations
    unitgroup autoE04B1ABE_g;
    int autoE04B1ABE_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_p1_USER);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    PlayerSetState(gv_p1_USER, c_playerStateFidgetingEnabled, false);
    PlayerSetState(gv_p7_NEUTRAL, c_playerStateFidgetingEnabled, false);
    UnitPauseAll(true);
    AITimePause(true);
    gv_victoryHiddenUnitGroup = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    autoE04B1ABE_g = gv_victoryHiddenUnitGroup;
    autoE04B1ABE_u = UnitGroupCount(autoE04B1ABE_g, c_unitCountAll);
    for (;; autoE04B1ABE_u -= 1) {
        lv_pickedUnit = UnitGroupUnitFromEnd(autoE04B1ABE_g, autoE04B1ABE_u);
        if (lv_pickedUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_pickedUnit, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicSetup_Init () {
    gt_VictoryCinematicSetup = TriggerCreate("gt_VictoryCinematicSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(177), 0.0, -1, 10, true);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(584)), c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    gv_victoryCinematicShuttleUnload = true;
    UnitRemove(gv_hybridPhysical);
    ActorSend(ActorFromDoodad(gv_libraryHybrid), "AnimBracketStop Work");
    UnitCreate(1, "Zeratul", 0, gv_p1_USER, PointFromId(557), 225.0);
    gv_zeratul = UnitLastCreated();
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(525)), c_orderQueueReplace);
    UnitBehaviorAdd(gv_zeratul, "SuppressCloak", gv_zeratul, 1);
    libNtve_gf_CreateUnitsAtPoint2(1, "PreserverA", 0, gv_p7_NEUTRAL, PointFromId(40));
    gv_preserverPrison01 = UnitLastCreated();
    UnitSetScale(gv_preserverPrison01, 150.0, 150.0, 150.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "PreserverB", 0, gv_p7_NEUTRAL, PointFromId(310));
    gv_preserverPrison02 = UnitLastCreated();
    UnitSetScale(gv_preserverPrison02, 120.0, 120.0, 120.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "PreserverC", 0, gv_p7_NEUTRAL, PointFromId(317));
    gv_preserverPrison03 = UnitLastCreated();
    UnitSetScale(gv_preserverPrison03, 120.0, 120.0, 120.0);
    libNtve_gf_SendActorMessageToUnit(gv_preserverPrison02, "AnimBaselineStop");
    libNtve_gf_SendActorMessageToUnit(gv_preserverPrison02, "AnimPlay Stand Stand,00 PlayForever");
    libNtve_gf_SendActorMessageToUnit(gv_preserverPrison01, "AnimBaselineStop");
    libNtve_gf_SendActorMessageToUnit(gv_preserverPrison01, "AnimPlay Stand Stand,00 PlayForever");
    libNtve_gf_SendActorMessageToUnit(gv_preserverPrison03, "AnimBaselineStop");
    libNtve_gf_SendActorMessageToUnit(gv_preserverPrison03, "AnimPlay Stand Stand,00 PlayForever");
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TZeratul02MusicOutro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_victoryCinematicCompleted = false;
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(178), SoundLengthSync(SoundLink("TZeratul02Preserver100039", 0)), -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    Wait(1.0, c_timeReal);
    // Transmission - SoundLink("TZeratul02Preserver100039", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul02Preserver100039", 0), c_transmissionDurationSub, 0.833, true);
    ActorSend(libNtve_gf_MainActorofUnit(gv_preserverPrison01), "AnimBracketStart Work Stand,Work,Start Stand,Work Stand,Work,End");
    Wait(0.2, c_timeGame);
    ActorSend(libNtve_gf_MainActorofUnit(gv_preserverPrison02), "AnimBracketStart Work Stand,Work,Start Stand,Work Stand,Work,End");
    Wait(0.1, c_timeGame);
    ActorSend(libNtve_gf_MainActorofUnit(gv_preserverPrison03), "AnimBracketStart Work Stand,Work,Start Stand,Work Stand,Work,End");
    Wait(0.533, c_timeGame);
    CinematicFade(false, 3.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    EnvironmentShow(c_environmentDoodads, false);
    EnvironmentShow(c_environmentWater, false);
    EnvironmentShow(c_environmentTerrain, false);
    GameSetLighting("VC_Zeratul2_Planet", 0.0);
    PortraitCreate(0, 0, c_anchorCenter, 237, 360, "VC_Zeratul2_Planet", "", "", false, false);
    gv_victoryCinematicPortrait = PortraitLastCreated();
    PortraitWaitForLoad(PortraitLastCreated());
    PortraitSetFullscreen(PortraitLastCreated(), true);
    PortraitSetLight(PortraitLastCreated(), "VC_Zeratul2_Planet");
    libNtve_gf_PortraitSetAnim(PortraitLastCreated(), "Stand A", "TriggerPortraitAnim", c_animFlagPlayForever, c_animTimeDefault);
    PortraitSetBorderVisible(PortraitLastCreated(), false);
    Wait(1.0, c_timeGame);
    PortraitSetVisible(PortraitLastCreated(), PlayerGroupAll(), true, false);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    // Transmission - SoundLink("TZeratul02Preserver200040", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul02Preserver200040", 0), c_transmissionDurationAdd, 0.0, true);
    libNtve_gf_PortraitSetAnim(PortraitLastCreated(), "Stand B", "TriggerPortraitAnim", c_animFlagPlayForever, c_animTimeDefault);
    // Transmission - SoundLink("TZeratul02Preserver300041", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul02Preserver300041", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TZeratul02Preserver100042", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul02Preserver100042", 0), c_transmissionDurationAdd, 0.0, true);
    libNtve_gf_PortraitSetAnim(PortraitLastCreated(), "Stand C", "TriggerPortraitAnim", c_animFlagPlayForever, c_animTimeDefault);
    // Transmission - SoundLink("TZeratul02Preserver200043", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul02Preserver200043", 0), c_transmissionDurationAdd, 0.0, true);
    libNtve_gf_PortraitSetAnim(PortraitLastCreated(), "Stand D", "TriggerPortraitAnim", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    // Transmission - SoundLink("TZeratul02Preserver300062", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul02Preserver300062", 0), c_transmissionDurationAdd, 0.0, true);
    CinematicFade(false, 3.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    EnvironmentShow(c_environmentDoodads, true);
    EnvironmentShow(c_environmentWater, true);
    EnvironmentShow(c_environmentTerrain, true);
    PortraitSetVisible(PortraitLastCreated(), PlayerGroupAll(), false, false);
    GameSetLighting("ZhakulDas", 0.0);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(307), 0.0, -1, 10, true);
    CinematicFade(true, 3.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(2.0, c_timeGame);
    ActorSend(libNtve_gf_MainActorofUnit(gv_preserverPrison01), "AnimBracketStop Work");
    Wait(0.1, c_timeGame);
    ActorSend(libNtve_gf_MainActorofUnit(gv_preserverPrison02), "AnimBracketStop Work");
    Wait(0.1, c_timeGame);
    ActorSend(libNtve_gf_MainActorofUnit(gv_preserverPrison03), "AnimBracketStop Work");
    Wait(0.8, c_timeGame);
    libNtve_gf_MakeUnitFacePoint(gv_preserverPrison01, UnitGetPosition(gv_zeratul), 0.3);
    libNtve_gf_MakeUnitFacePoint(gv_preserverPrison02, UnitGetPosition(gv_zeratul), 0.3);
    libNtve_gf_MakeUnitFacePoint(gv_preserverPrison03, UnitGetPosition(gv_zeratul), 0.3);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(308), (SoundLengthSync(SoundLink("TZeratul02Zeratul00044", 0)) + SoundLengthSync(SoundLink("TZeratul02Zeratul00063", 0))), -1, 10, true);
    // Transmission - SoundLink("TZeratul02Zeratul00044", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul02Zeratul00044", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TZeratul02Zeratul00063", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul02Zeratul00063", 0), c_transmissionDurationAdd, 0.0, true);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(305)), c_orderQueueReplace);
    gv_victoryCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victoryCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victoryCinematicPortrait != c_invalidPortraitId)) {
        PortraitDestroy(gv_victoryCinematicPortrait);
        gv_victoryCinematicPortrait = c_invalidPortraitId;
    }

    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04Music_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_PlayerIsInCombat_Init();
    gt_PlayerIsInCombatIndicatorDiminish_Init();
    gt_EnergyLeaderboard_Init();
    gt_EnergyTimer_Init();
    gt_StartAI_Init();
    gt_StartAttackWaves_Init();
    gt_P6LeftBaseAttackWaves_Init();
    gt_P4RightBaseAttackWaves_Init();
    gt_SwitchtoP3AttackWaves_Init();
    gt_P3MainBaseAttackWaves_Init();
    gt_HIUpgrades_Init();
    gt_AIGiveMinerals_Init();
    gt_AIGiveGas_Init();
    gt_HybridAttacks_Init();
    gt_HybridAllWaves_Init();
    gt_HybridPrepforWave_Init();
    gt_HybridPingandSound_Init();
    gt_HybridBossPing_Init();
    gt_HybridDies_Init();
    gt_PrisonDiesHybridReturn_Init();
    gt_PrisonDies_Init();
    gt_Checkifallthreeprisonsdestroyed_Init();
    gt_GravitonPrism_Init();
    gt_PlasmaBlastAttack_Init();
    gt_PsionicShockwaveFirst_Init();
    gt_PsionicShockwaveSecond_Init();
    gt_PsionicShockwaveThirdInsane_Init();
    gt_Manifestation01ResumeWave_Init();
    gt_HybridLeaveshisarea_Init();
    gt_HybridEntershisarea_Init();
    gt_StartGame_Init();
    gt_Gateway_Init();
    gt_Forge_Init();
    gt_CyberneticsCore_Init();
    gt_TwilightCouncil_Init();
    gt_PhotonCannon01Base_Init();
    gt_PhotonCannon02Base_Init();
    gt_Checkifallsixarepowered_Init();
    gt_SecondaryObjectiveRun_Init();
    gt_PlayerBuildingArmyActivatesMidCin_Init();
    gt_PlayerBuildingPhotonCannonsActivatesMidCin_Init();
    gt_PlayerGatheringCashActivatesMidCin_Init();
    gt_PlayerBuildingUnitActivatesActivatesStalker_Init();
    gt_PlayerBuildingPhotonCannonActivatesStalker_Init();
    gt_PlayerGatheringCashActivatesStalker_Init();
    gt_PlayerBuildingUnitActivatesActivatesStalkerHardBrutal_Init();
    gt_GatewayPlace01_Init();
    gt_PylonPlaceStartQ_Init();
    gt_PylonPlace01_Init();
    gt_PylonPlace02_Init();
    gt_Playerselectspylonbutton_Init();
    gt_Pylonplacementdone01_Init();
    gt_Pylonplacementdone02_Init();
    gt_Pylonplacementsafety_Init();
    gt_FlashButtonPylonOn_Init();
    gt_FlashButtonPylonOff_Init();
    gt_TemplarArchivesPowered_Init();
    gt_RoboticsFacilityPowered_Init();
    gt_DarkShrinePowered_Init();
    gt_Library01_Init();
    gt_Library02_Init();
    gt_Library03_Init();
    gt_Library06_Init();
    gt_Library07_Init();
    gt_Library08_Init();
    gt_Library09_Init();
    gt_DarkTemplarAttackers_Init();
    gt_NewUnitImmortalTipQ_Init();
    gt_NewUnitDarkTemplarTipQ_Init();
    gt_NewUnitHighTemplarTipQ_Init();
    gt_PylonPlaceTipiftoomuchtimegoesbyQ_Init();
    gt_TipGatewayQ_Init();
    gt_StorymodeTipsQ_Init();
    gt_DialogueSomethingAmissQ_Init();
    gt_DialogueatArchivistQ_Init();
    gt_DialogueSecondaryObjectiveQ_Init();
    gt_DialogueatDarkShrineQ_Init();
    gt_DialogueatRoboticsQ_Init();
    gt_DialogueTemplarArchivesFoundQ_Init();
    gt_DialoguePreserverBewareQ_Init();
    gt_DialogueHaltatPlayerBase01Q_Init();
    gt_DialogueHaltatPlayerBase02Q_Init();
    gt_ProtossGetAttackedFirstSetAlliance_Init();
    gt_StalkerBecomesEnemyNearBase_Init();
    gt_DialogueDarkShrineQ_Init();
    gt_DialogueRoboticsFacilityQ_Init();
    gt_DialogueTemplarArchivesQ_Init();
    gt_DialogueHybridReturnsLineQ_Init();
    gt_DialogueHybridPissed01Q_Init();
    gt_DialogueHybridPissed02Q_Init();
    gt_DialogueHybridPissed03Q_Init();
    gt_DialogueHybridPissed04Q_Init();
    gt_DialogueHybridPissed05Q_Init();
    gt_DialogueHybridPissed06Q_Init();
    gt_DialogueHybridPissed07Q_Init();
    gt_RunDialogueDeathLines_Init();
    gt_DialogueHybridPissedManifestationDead01Q_Init();
    gt_DialogueHybridPissedManifestationDead02Q_Init();
    gt_DialogueHybridPissedManifestationDead03Q_Init();
    gt_DialogueHybridPissedManifestationDead04Q_Init();
    gt_DialogueHybridPissedManifestationDead05Q_Init();
    gt_DialogueHybridPissedManifestationDead06Q_Init();
    gt_AutoSave01MidCinQ_Init();
    gt_AutoSave02HybridWarpinZoneQ_Init();
    gt_HybridKillsofplayerunits_Init();
    gt_DarkTemplarKillsofenemyunits_Init();
    gt_HybridDiesfromplayer_Init();
    gt_HybridWaves_Init();
    gt_AchievementAllProtossDeadNormal_Init();
    gt_DefeatBaseDead_Init();
    gt_VictoryPrisonObjectiveComplete_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_ObjectivePowerBaseCreateQ_Init();
    gt_ObjectivePowerBaseComplete_Init();
    gt_ObjectivePowerupBaseUpdate_Init();
    gt_ObjectiveDestroyPrisonsCreateQ_Init();
    gt_ObjectiveDestroyPrisonsComplete_Init();
    gt_ObjectivePrisonsDestroyedUpdate_Init();
    gt_Prison01Destroyed_Init();
    gt_Prison02Destroyed_Init();
    gt_Prison03Destroyed_Init();
    gt_ObjectivePowerSecondaryCreateQ_Init();
    gt_ObjectivePowerSecondaryComplete_Init();
    gt_ObjectivePings_Init();
    gt_ObjectivePowerupSecondaryUpdate_Init();
    gt_BriefingQ_Init();
    gt_BriefingScene00_Init();
    gt_BriefingAnimations_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroCinematicNexus_Init();
    gt_Dropship01Purge_Init();
    gt_Dropship01UnitPerimeter1_Init();
    gt_Dropship01UnitPerimeter2_Init();
    gt_Dropship01UnitPerimeter3_Init();
    gt_Dropship01UnitPerimeter4_Init();
    gt_Dropship01UnitPerimeter5_Init();
    gt_Dropship01UnitPerimeter6_Init();
    gt_MidPrisonQ_Init();
    gt_MidPrisonSetup_Init();
    gt_MidPrisonCinematic_Init();
    gt_MidPrisonCinematicEnd_Init();
    gt_MidPrisonCleanup_Init();
    gt_VictoryQ_Init();
    gt_VictoryCinematicSetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
