//==================================================================================================
// 
// Generated Map Script
// 
// Name:   In Utter Darkness
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/CampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libCamp_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_p01_PLAYER = 1;
const int gv_p02_ALLIED_PROTOSS = 2;
const int gv_p04_ZERG_NW = 4;
const int gv_p05_ZERG_NE = 5;
const int gv_p06_ZERG_SE = 6;
const int gv_p07_FRENZIED_ZERG = 7;
const int gv_p08_ARCHIVE = 8;
const int gv_p10_REINFORCEMENTPROTOSS = 10;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_sTAGE_01_KILL_QUOTA;
int gv_sTAGE_02_KILL_QUOTA;
playergroup gv_zergPlayers;
bool gv_gameOver;
bool gv_inCinematic;
unit gv_superWarpGate_P08;
unit gv_superWarpGate_P10;
unit gv_zeratul;
unit gv_heroPhoenix;
unit gv_heroVoidRay;
unit gv_heroCarrier;
unit gv_heroMothership;
bool gv_reinforcementAutoMove;
int gv_hybridSlain;
int gv_zeratulKills;
int gv_urunKills;
int gv_mohandarKills;
int gv_selendisKills;
int gv_artanisKills;
timer gv_protectArchiveTimer;
int[11] gv_mineralFieldAmounts;
int gv_leaderboard;
int gv_killCount;
unitgroup gv_gGWavesUnitGroup;
fixed gv_nydusSpawnDelay;
region gv_nydusSpawnRegion;
bool gv_stargateUnitBuilt;
int gv_statWavessent;
int gv_achievementTier1kills;
int gv_achievementTier2kills;
int gv_statAchievementTierLevel;
int gv_statHeroKills;
int gv_statArchiveResearchPoints;
int gv_statZergResearchPoints;
int gv_objectiveSurviveUntilYouDie;
int gv_objectiveKillPrimary;
int gv_objectiveProtectArchive;
bool gv_introCinematicCompleted;
unitgroup gv_introCinematicProtossUnits;
unit gv_introCinematicColossusWest;
unit gv_introCinematicColossusEast;
unit gv_colossus_West;
unit gv_colossus_East;
unitgroup gv_midHiddenUnitGroup;
bool gv_midCinematicCompleted;
unit gv_omegalisk1;
unit gv_omegalisk2;
unit gv_omegalisk3;
bool gv_victoryCinematicCompleted;
int gv_victoryPortrait;
unit gv_hybrid1;
unit gv_hybrid2;
unit gv_hybrid3;
unit gv_hybrid4;

void InitGlobals () {
    gv_zergPlayers = PlayerGroupEmpty();
    gv_superWarpGate_P08 = UnitFromId(843);
    gv_superWarpGate_P10 = UnitFromId(637);
    gv_zeratul = UnitFromId(34);
    gv_protectArchiveTimer = TimerCreate();
    gv_leaderboard = c_boardNone;
    gv_gGWavesUnitGroup = UnitGroupEmpty();
    gv_nydusSpawnDelay = 2.0;
    gv_statAchievementTierLevel = 1;
    gv_objectiveSurviveUntilYouDie = c_invalidObjectiveId;
    gv_objectiveKillPrimary = c_invalidObjectiveId;
    gv_objectiveProtectArchive = c_invalidObjectiveId;
    gv_introCinematicProtossUnits = UnitGroupEmpty();
    gv_midHiddenUnitGroup = UnitGroupEmpty();
    gv_victoryPortrait = c_invalidPortraitId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
fixed gf_WaitSpecial (fixed lp_a, fixed lp_b);
void gf_SpawnSuicidalAttackerGround (string lp_paraUnitType, int lp_paraPlayer);
void gf_SpawnSuicidalAttackerAir (string lp_paraUnitType, int lp_paraPlayer);
bool gf_AreaIsBeingHarvested (region lp_region);
void gf_SpawnNydusWormSwarmlings (region lp_region);
void gf_SpawnNydusWormZerglings (region lp_region);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04Music;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_IntroSequence;
trigger gt_StartGameStage1;
trigger gt_StartGameStage2;
trigger gt_CreateLeaderboard;
trigger gt_UpdateLeaderboardZergorHybridKilled;
trigger gt_PrimaryKillCountComplete;
trigger gt_ActivateHeroWayGate;
trigger gt_NewTech01PhoenixQ;
trigger gt_NewTech02VoidRayQ;
trigger gt_NewTech03CarriersQ;
trigger gt_NewTech04MothershipQ;
trigger gt_ReinforcementBehavior;
trigger gt_MothershipSpawn;
trigger gt_ZeratulDiesQ;
trigger gt_HeroPhoenixDiesQ;
trigger gt_HeroVoidRayDiesQ;
trigger gt_HeroCarrierDiesQ;
trigger gt_HeroMothershipDiesQ;
trigger gt_ArchivistWarpedin;
trigger gt_StartAI;
trigger gt_AIUpgradesEN;
trigger gt_AIUpgradesH;
trigger gt_AIUpgradesI;
trigger gt_MissionEventTiming;
trigger gt_AttackWavesStage1P04NW;
trigger gt_AttackWavesStage1P05NE;
trigger gt_AttackWavesStage1P06SE;
trigger gt_AttackWavesStage1RepeatingP04NW;
trigger gt_AttackWavesStage1RepeatingP05NE;
trigger gt_AttackWavesStage1RepeatingP06SE;
trigger gt_AttackWavesStage2P04NW;
trigger gt_AttackWavesStage2P05NE;
trigger gt_AttackWavesStage2P06SE;
trigger gt_PlayerHasNoStructures;
trigger gt_PlayerHasNoGroundUnitsAndStructures;
trigger gt_AttackWavesEndGameAirKillers;
trigger gt_EndGameCreepTumorCorruption;
trigger gt_SwarmWaveA1P04NW;
trigger gt_SwarmWaveA2P06SE;
trigger gt_SwarmWaveA3P05NE;
trigger gt_SwarmWaveB1P06SE;
trigger gt_SwarmWaveB2P04NW;
trigger gt_SwarmWaveB3P05NE;
trigger gt_SwarmWaveC1P05NE;
trigger gt_SwarmWaveC2P04NW;
trigger gt_SwarmWaveC3P06SE;
trigger gt_NydusWormAttack1;
trigger gt_NydusWormAttack2;
trigger gt_NydusSpawningTriggerSwarmlings;
trigger gt_NydusSpawningTriggerZerglings;
trigger gt_AIGiveResources;
trigger gt_ZergBuildingreplenish;
trigger gt_TransmissionTemplarsStoreKnowledgeQ;
trigger gt_TransmissionDarkVoicePronouncementQ;
trigger gt_TransmissionZergswarmingflanksQ;
trigger gt_TransmissionZerghordeincomingQ;
trigger gt_TransmissionDarkVoiceTauntsQ;
trigger gt_TransmissionArtanisFinalSpeechQ;
trigger gt_TransmissionHybridIncoming1Q;
trigger gt_TransmissionHybridIncoming2Q;
trigger gt_TransmissionWormsIncoming1Q;
trigger gt_TransmissionWormsIncoming2Q;
trigger gt_WarpedinTemplarBehavior;
trigger gt_StatStargateUnitBuilt;
trigger gt_VictoryDefeatforPlayer;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_ObjectiveSurviveCreateQ;
trigger gt_ObjectiveSurvivePrimaryComplete;
trigger gt_ObjectiveProtectArchiveCreateQ;
trigger gt_ObjectiveProtectArchiveUpdate;
trigger gt_ObjectiveProtectArchiveComplete;
trigger gt_ObjectiveProtectArchiveFailed;
trigger gt_BriefingQ;
trigger gt_BriefingScene00;
trigger gt_BriefingScene01;
trigger gt_BriefingZealotAnimations;
trigger gt_DebriefingScene00;
trigger gt_DebriefingScene01;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCleanup;
trigger gt_IntroHeroGate;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_MidOmegalisk1Unburrow;
trigger gt_MidOmegalisk2Unburrow;
trigger gt_MidOmegalisk3Unburrow;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryHybridExplosion;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
fixed gf_WaitSpecial (fixed lp_a, fixed lp_b) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_killCount < gv_achievementTier2kills)) {
        return lp_a;
    }
    else {
        return lp_b;
    }
}

void gf_SpawnSuicidalAttackerGround (string lp_paraUnitType, int lp_paraPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_paraPlayer == gv_p04_ZERG_NW)) {
        libNtve_gf_CreateUnitsAtPoint2(1, lp_paraUnitType, 0, gv_p07_FRENZIED_ZERG, RegionRandomPoint(RegionFromId(48)));
    }

    if ((lp_paraPlayer == gv_p05_ZERG_NE)) {
        libNtve_gf_CreateUnitsAtPoint2(1, lp_paraUnitType, 0, gv_p07_FRENZIED_ZERG, RegionRandomPoint(RegionFromId(49)));
    }

    if ((lp_paraPlayer == gv_p06_ZERG_SE)) {
        libNtve_gf_CreateUnitsAtPoint2(1, lp_paraUnitType, 0, gv_p07_FRENZIED_ZERG, RegionRandomPoint(RegionFromId(46)));
    }

    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
    AISetUnitSuicide(UnitLastCreated(), true);
}

void gf_SpawnSuicidalAttackerAir (string lp_paraUnitType, int lp_paraPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_paraPlayer == gv_p04_ZERG_NW)) {
        libNtve_gf_CreateUnitsAtPoint2(1, lp_paraUnitType, 0, gv_p07_FRENZIED_ZERG, RegionRandomPoint(RegionFromId(3)));
    }

    if ((lp_paraPlayer == gv_p05_ZERG_NE)) {
        libNtve_gf_CreateUnitsAtPoint2(1, lp_paraUnitType, 0, gv_p07_FRENZIED_ZERG, RegionRandomPoint(RegionFromId(2)));
    }

    if ((lp_paraPlayer == gv_p06_ZERG_SE)) {
        libNtve_gf_CreateUnitsAtPoint2(1, lp_paraUnitType, 0, gv_p07_FRENZIED_ZERG, RegionRandomPoint(RegionFromId(4)));
    }

    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
    AISetUnitSuicide(UnitLastCreated(), true);
}

bool gf_AreaIsBeingHarvested (region lp_region) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGroupCount(UnitGroup("RichMineralField", c_playerAny, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) || (UnitGroupCount(UnitGroup("NydusCanal", c_playerAny, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
        return false;
    }
    else {
        if ((UnitGroupCount(UnitGroup("Nexus", gv_p01_PLAYER, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
            return true;
        }
        else {
            return false;
        }
    }
    return false;
}

void gf_SpawnNydusWormSwarmlings (region lp_region) {
    // Automatic Variable Declarations
    // Implementation
    gv_nydusSpawnRegion = lp_region;
    TriggerExecute(gt_NydusSpawningTriggerSwarmlings, true, false);
}

void gf_SpawnNydusWormZerglings (region lp_region) {
    // Automatic Variable Declarations
    // Implementation
    gv_nydusSpawnRegion = lp_region;
    TriggerExecute(gt_NydusSpawningTriggerZerglings, true, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_LoadCampaignData(libCamp_ge_MapID_MapTZeratul04);
    TriggerExecute(gt_Init01Technology, true, true);
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04Music, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    libCamp_gf_RegisterFootageRecording(gt_BriefingQ);
    libCamp_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_IntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeUpgradeAddLevel(gv_p01_PLAYER, "Charge", 1);
    TechTreeUpgradeAddLevel(gv_p01_PLAYER, "BlinkTech", 1);
    TechTreeUpgradeAddLevel(gv_p01_PLAYER, "PsiStormTech", 1);
    TechTreeUpgradeAddLevel(gv_p01_PLAYER, "HighTemplarKhaydarinAmulet", 1);
    TechTreeUpgradeAddLevel(gv_p01_PLAYER, "ObserverGraviticBooster", 1);
    TechTreeUpgradeAddLevel(gv_p01_PLAYER, "ExtendedThermalLance", 1);
    TechTreeUpgradeAddLevel(gv_p01_PLAYER, "VoidRaySpeedUpgrade", 1);
    TechTreeUpgradeAddLevel(gv_p01_PLAYER, "CarrierLaunchSpeedUpgrade", 1);
    TechTreeUpgradeAddLevel(gv_p01_PLAYER, "WarpGateResearch", 1);
    TechTreeAbilityAllow(gv_p01_PLAYER, AbilityCommand("UpgradeToWarpGate", 0), true);
    TechTreeAbilityAllow(gv_p01_PLAYER, AbilityCommand("ForgeResearch", 0), true);
    TechTreeAbilityAllow(gv_p01_PLAYER, AbilityCommand("ForgeResearch", 1), true);
    TechTreeAbilityAllow(gv_p01_PLAYER, AbilityCommand("ForgeResearch", 2), true);
    TechTreeAbilityAllow(gv_p01_PLAYER, AbilityCommand("ForgeResearch", 3), true);
    TechTreeAbilityAllow(gv_p01_PLAYER, AbilityCommand("ForgeResearch", 4), true);
    TechTreeAbilityAllow(gv_p01_PLAYER, AbilityCommand("ForgeResearch", 5), true);
    TechTreeAbilityAllow(gv_p01_PLAYER, AbilityCommand("ForgeResearch", 6), true);
    TechTreeAbilityAllow(gv_p01_PLAYER, AbilityCommand("ForgeResearch", 7), true);
    TechTreeAbilityAllow(gv_p01_PLAYER, AbilityCommand("ForgeResearch", 8), true);
    TechTreeAbilityAllow(gv_p01_PLAYER, AbilityCommand("CyberneticsCoreResearch", 0), true);
    TechTreeAbilityAllow(gv_p01_PLAYER, AbilityCommand("CyberneticsCoreResearch", 1), true);
    TechTreeAbilityAllow(gv_p01_PLAYER, AbilityCommand("CyberneticsCoreResearch", 2), true);
    TechTreeAbilityAllow(gv_p01_PLAYER, AbilityCommand("CyberneticsCoreResearch", 3), true);
    TechTreeAbilityAllow(gv_p01_PLAYER, AbilityCommand("CyberneticsCoreResearch", 4), true);
    TechTreeAbilityAllow(gv_p01_PLAYER, AbilityCommand("CyberneticsCoreResearch", 5), true);
    TechTreeAbilityAllow(gv_p10_REINFORCEMENTPROTOSS, AbilityCommand("SuperWarpGateTrain", 0), true);
    TechTreeAbilityAllow(gv_p10_REINFORCEMENTPROTOSS, AbilityCommand("SuperWarpGateTrain", 1), true);
    TechTreeAbilityAllow(gv_p10_REINFORCEMENTPROTOSS, AbilityCommand("SuperWarpGateTrain", 2), true);
    TechTreeAbilityAllow(gv_p10_REINFORCEMENTPROTOSS, AbilityCommand("SuperWarpGateTrain", 7), true);
    TechTreeAbilityAllow(gv_p10_REINFORCEMENTPROTOSS, AbilityCommand("SuperWarpGateTrain", 8), true);
    TechTreeAbilityAllow(gv_p10_REINFORCEMENTPROTOSS, AbilityCommand("SuperWarpGateTrain", 6), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealArea(gv_p10_REINFORCEMENTPROTOSS, RegionFromId(7), 0.0, false);
    PlayerGroupAdd(gv_zergPlayers, gv_p04_ZERG_NW);
    PlayerGroupAdd(gv_zergPlayers, gv_p05_ZERG_NE);
    PlayerGroupAdd(gv_zergPlayers, gv_p06_ZERG_SE);
    PlayerGroupAdd(gv_zergPlayers, gv_p07_FRENZIED_ZERG);
    libNtve_gf_SetAlliance(gv_p01_PLAYER, gv_p02_ALLIED_PROTOSS, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
    libNtve_gf_SetAlliance(gv_p01_PLAYER, gv_p07_FRENZIED_ZERG, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p01_PLAYER, gv_p08_ARCHIVE, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_p01_PLAYER, gv_p10_REINFORCEMENTPROTOSS, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    libNtve_gf_SetAlliance(gv_p02_ALLIED_PROTOSS, gv_p08_ARCHIVE, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_p02_ALLIED_PROTOSS, gv_p10_REINFORCEMENTPROTOSS, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_p08_ARCHIVE, gv_p10_REINFORCEMENTPROTOSS, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_p04_ZERG_NW, gv_p02_ALLIED_PROTOSS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p04_ZERG_NW, gv_p05_ZERG_NE, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p04_ZERG_NW, gv_p06_ZERG_SE, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p04_ZERG_NW, gv_p07_FRENZIED_ZERG, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p04_ZERG_NW, gv_p08_ARCHIVE, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p04_ZERG_NW, gv_p10_REINFORCEMENTPROTOSS, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p05_ZERG_NE, gv_p02_ALLIED_PROTOSS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p05_ZERG_NE, gv_p06_ZERG_SE, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p05_ZERG_NE, gv_p07_FRENZIED_ZERG, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p05_ZERG_NE, gv_p08_ARCHIVE, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p05_ZERG_NE, gv_p10_REINFORCEMENTPROTOSS, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p06_ZERG_SE, gv_p02_ALLIED_PROTOSS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p06_ZERG_SE, gv_p07_FRENZIED_ZERG, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p06_ZERG_SE, gv_p08_ARCHIVE, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p06_ZERG_SE, gv_p10_REINFORCEMENTPROTOSS, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p07_FRENZIED_ZERG, gv_p02_ALLIED_PROTOSS, libNtve_ge_AllianceSetting_Enemy);
    PlayerModifyPropertyInt(gv_p01_PLAYER, c_playerPropMinerals, c_playerPropOperSetTo, 1500);
    PlayerModifyPropertyInt(gv_p01_PLAYER, c_playerPropVespene, c_playerPropOperSetTo, 1500);
    PlayerModifyPropertyInt(gv_p02_ALLIED_PROTOSS, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p02_ALLIED_PROTOSS, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p10_REINFORCEMENTPROTOSS, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_p10_REINFORCEMENTPROTOSS, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_p04_ZERG_NW, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p04_ZERG_NW, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p05_ZERG_NE, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p05_ZERG_NE, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p06_ZERG_SE, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p06_ZERG_SE, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p07_FRENZIED_ZERG, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p07_FRENZIED_ZERG, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerSetColorIndex(gv_p04_ZERG_NW, 4, true);
    PlayerSetColorIndex(gv_p05_ZERG_NE, 4, true);
    PlayerSetColorIndex(gv_p06_ZERG_SE, 4, true);
    PlayerSetColorIndex(gv_p07_FRENZIED_ZERG, 4, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoDDCF4B99_g;
    int autoDDCF4B99_u;
    unit autoDDCF4B99_var;
    unitgroup auto1409AA2F_g;
    int auto1409AA2F_u;
    unit auto1409AA2F_var;
    unitgroup auto9F375F4C_g;
    int auto9F375F4C_u;
    unit auto9F375F4C_var;
    unitgroup autoB773B14B_g;
    int autoB773B14B_u;
    unit autoB773B14B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PreloadUnit("Urun", false);
    libNtve_gf_PreloadUnit("Mohandar", false);
    libNtve_gf_PreloadUnit("Selendis", false);
    libNtve_gf_ShowHideUnit(UnitFromId(637), false);
    libNtve_gf_ShowHideUnit(UnitFromId(843), false);
    libNtve_gf_ShowHideUnit(UnitFromId(636), false);
    libNtve_gf_ShowHideUnit(UnitFromId(635), false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(716), false);
    UnitSetPropertyFixed(UnitFromId(716), c_unitPropLifeMax, 1500.0);
    UnitSetPropertyFixed(UnitFromId(716), c_unitPropLife, 1500.0);
    autoDDCF4B99_g = UnitGroup("HighTemplar", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDDCF4B99_u = UnitGroupCount(autoDDCF4B99_g, c_unitCountAll);
    for (;; autoDDCF4B99_u -= 1) {
        autoDDCF4B99_var = UnitGroupUnitFromEnd(autoDDCF4B99_g, autoDDCF4B99_u);
        if (autoDDCF4B99_var == null) { break; }
        UnitSetPropertyFixed(autoDDCF4B99_var, c_unitPropEnergyPercent, 100.0);
    }
    auto1409AA2F_g = UnitGroup("Phoenix", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1409AA2F_u = UnitGroupCount(auto1409AA2F_g, c_unitCountAll);
    for (;; auto1409AA2F_u -= 1) {
        auto1409AA2F_var = UnitGroupUnitFromEnd(auto1409AA2F_g, auto1409AA2F_u);
        if (auto1409AA2F_var == null) { break; }
        UnitSetPropertyFixed(auto1409AA2F_var, c_unitPropEnergyPercent, 100.0);
    }
    auto9F375F4C_g = UnitGroup("MineralField", c_playerAny, RegionFromId(34), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9F375F4C_u = UnitGroupCount(auto9F375F4C_g, c_unitCountAll);
    for (;; auto9F375F4C_u -= 1) {
        auto9F375F4C_var = UnitGroupUnitFromEnd(auto9F375F4C_g, auto9F375F4C_u);
        if (auto9F375F4C_var == null) { break; }
        UnitSetCustomValue(auto9F375F4C_var, 0, UnitGetPropertyFixed(auto9F375F4C_var, c_unitPropResources, c_unitPropCurrent));
    }
    autoB773B14B_g = UnitGroup("Assimilator", c_playerAny, RegionFromId(34), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB773B14B_u = UnitGroupCount(autoB773B14B_g, c_unitCountAll);
    for (;; autoB773B14B_u -= 1) {
        autoB773B14B_var = UnitGroupUnitFromEnd(autoB773B14B_g, autoB773B14B_u);
        if (autoB773B14B_var == null) { break; }
        UnitSetCustomValue(autoB773B14B_var, 0, UnitGetPropertyFixed(autoB773B14B_var, c_unitPropResources, c_unitPropCurrent));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init04Music_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TZeratul04MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TZeratul04MusicIntro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Music_Init () {
    gt_Init04Music = TriggerCreate("gt_Init04Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraSetBounds(PlayerGroupAll(), RegionFromId(19), true);
    GameSetToDLighting("Shakuras");
    GameTimeOfDaySet("08:00:00");
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "ProtossEnergyLine", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    CreepModify(PointFromId(5), 10.0, true, true);
    CreepModify(PointFromId(7), 10.0, true, true);
    CreepModify(PointFromId(94), 10.0, true, true);
    CreepModify(PointFromId(116), 10.0, true, true);
    CreepModify(PointFromId(133), 10.0, true, true);
    CreepModify(PointFromId(169), 10.0, true, true);
    CreepModify(PointFromId(176), 10.0, true, true);
    CreepModify(PointFromId(187), 10.0, true, true);
    CreepModify(PointFromId(188), 10.0, true, true);
    CreepModify(PointFromId(189), 10.0, true, true);
    CreepModify(PointFromId(191), 10.0, true, true);
    CreepModify(PointFromId(192), 21.0, true, true);
    CreepModify(PointFromId(10), 30.0, true, true);
    CreepModify(PointFromId(16), 11.0, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoFCE04A8E_g;
    int autoFCE04A8E_var;
    playergroup auto6A4AF53A_g;
    int auto6A4AF53A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerDifficulty(gv_p01_PLAYER) == 1)) {
        PlayerModifyPropertyInt(gv_p04_ZERG_NW, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p05_ZERG_NE, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p06_ZERG_SE, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p07_FRENZIED_ZERG, c_playerPropHandicap, c_playerPropOperSetTo, 50);
    }

    gv_sTAGE_01_KILL_QUOTA = libNtve_gf_DifficultyValueInt(1500, 1500, 2000, 2500);
    gv_achievementTier1kills = (gv_sTAGE_01_KILL_QUOTA + 250);
    gv_achievementTier2kills = (gv_achievementTier1kills + 500);
    gv_nydusSpawnDelay = libNtve_gf_DifficultyValueFixed(2.0, 2.0, 1.7, 1.5);
    autoFCE04A8E_g = gv_zergPlayers;
    autoFCE04A8E_var = -1;
    while (true) {
        autoFCE04A8E_var = PlayerGroupNextPlayer(autoFCE04A8E_g, autoFCE04A8E_var);
        if (autoFCE04A8E_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoFCE04A8E_var, "hydraliskspeed", 1);
    }
    auto6A4AF53A_g = gv_zergPlayers;
    auto6A4AF53A_var = -1;
    while (true) {
        auto6A4AF53A_var = PlayerGroupNextPlayer(auto6A4AF53A_g, auto6A4AF53A_var);
        if (auto6A4AF53A_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto6A4AF53A_var, "ZergMeleeWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(auto6A4AF53A_var, "ZergMissileWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(auto6A4AF53A_var, "ZergFlyerWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(auto6A4AF53A_var, "ZergGroundArmorsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        TechTreeUpgradeAddLevel(auto6A4AF53A_var, "ZergFlyerArmorsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        TechTreeUpgradeAddLevel(auto6A4AF53A_var, "ProtossShieldsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_AddUnitTypeToUnitHelpPanel("Zergling", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Roach", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Mutalisk", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Baneling", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Overlord", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Ultralisk", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Overseer", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Drone", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Corruptor", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Lurker", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("BroodLord", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("HybridDestroyer", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("HybridReaver", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Omegalisk", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SpineCrawler", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SporeCrawler", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Probe", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Stalker", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Immortal", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Colossus", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Observer", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("DarkTemplar", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("HighTemplar", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Archon", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("WarpPrismPhasing", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("WarpPrism", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Sentry", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("PhotonCannon", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Phoenix", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("VoidRay", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Carrier", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Mothership", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Zeratul", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Urun", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Mohandar", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Selendis", false, gv_p01_PLAYER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Artanis", false, gv_p01_PLAYER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Sequence
//--------------------------------------------------------------------------------------------------
bool gt_IntroSequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_StartAI, true, false);
    Wait(0.1, c_timeReal);
    UIAlertPoint("Trigger", gv_p01_PLAYER, StringToText(""), null, UnitGetPosition(gv_zeratul));
    TriggerEnable(gt_VictoryDefeatforPlayer, true);
    TriggerExecute(gt_StartGameStage1, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSequence_Init () {
    gt_IntroSequence = TriggerCreate("gt_IntroSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Stage 1
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitFlashSelection(gv_zeratul, 5.0);
    Wait(3.0, c_timeGame);
    TriggerExecute(gt_ObjectiveSurviveCreateQ, true, false);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_CreateLeaderboard, true, false);
    Wait(10.0, c_timeGame);
    libCamp_gf_CreateStorymodeTips();
    Wait(10.0, c_timeGame);
    TriggerExecute(gt_TransmissionTemplarsStoreKnowledgeQ, true, true);
    TriggerExecute(gt_ObjectiveProtectArchiveCreateQ, true, false);
    Wait(5.0, c_timeGame);
    TriggerExecute(gt_ActivateHeroWayGate, true, false);
    Wait(25.0, c_timeGame);
    TriggerEnable(gt_WarpedinTemplarBehavior, false);
    TriggerExecute(gt_NewTech01PhoenixQ, true, false);
    Wait(40.0, c_timeGame);
    TriggerExecute(gt_TransmissionDarkVoicePronouncementQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage1_Init () {
    gt_StartGameStage1 = TriggerCreate("gt_StartGameStage1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_AttackWavesStage2P04NW, true, false);
    TriggerExecute(gt_AttackWavesStage2P05NE, true, false);
    TriggerExecute(gt_AttackWavesStage2P06SE, true, false);
    Wait(300.0, c_timeGame);
    TriggerExecute(gt_AttackWavesEndGameAirKillers, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage2_Init () {
    gt_StartGameStage2 = TriggerCreate("gt_StartGameStage2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Leaderboard
//--------------------------------------------------------------------------------------------------
bool gt_CreateLeaderboard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    BoardCreate(1, 1, StringToText(""), Color(100.00, 100.00, 100.00));
    gv_leaderboard = BoardLastCreated();
    BoardSetState(gv_leaderboard, PlayerGroupAll(), c_boardStateShowHeader, true);
    BoardSetState(gv_leaderboard, PlayerGroupAll(), c_boardStateShowTitle, false);
    BoardItemSetText(gv_leaderboard, 1, c_boardRowHeader, StringExternal("Param/Value/48D05F48"));
    BoardItemSetText(gv_leaderboard, 1, 1, IntToText(gv_killCount));
    BoardMinimizeShow(gv_leaderboard, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateLeaderboard_Init () {
    gt_CreateLeaderboard = TriggerCreate("gt_CreateLeaderboard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Leaderboard - Zerg or Hybrid Killed
//--------------------------------------------------------------------------------------------------
bool gt_UpdateLeaderboardZergorHybridKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!(((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_p01_PLAYER) || (UnitGetOwner(libNtve_gf_KillingUnit()) == gv_p02_ALLIED_PROTOSS)))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_p04_ZERG_NW) || (UnitGetOwner(EventUnit()) == gv_p05_ZERG_NE) || (UnitGetOwner(EventUnit()) == gv_p06_ZERG_SE) || (UnitGetOwner(EventUnit()) == gv_p07_FRENZIED_ZERG)))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Broodling"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "InfestorTerran"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "InfestorTerransEgg"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Swarmling"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Drone"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Larva"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Egg"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "BanelingCocoon"))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) != true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_killCount += 1;
    if (((UnitGetType(libNtve_gf_KillingUnit()) == "Zeratul") || (UnitGetType(libNtve_gf_KillingUnit()) == "Mohandar") || (UnitGetType(libNtve_gf_KillingUnit()) == "Selendis") || (UnitGetType(libNtve_gf_KillingUnit()) == "Artanis") || (UnitGetType(libNtve_gf_KillingUnit()) == "Urun"))) {
        gv_statHeroKills += 1;
    }

    BoardItemSetText(gv_leaderboard, 1, 1, IntToText(gv_killCount));
    if (((UnitGetType(EventUnit()) == "HybridDestroyer") || (UnitGetType(EventUnit()) == "HybridReaver"))) {
        gv_hybridSlain += 1;
    }

    if ((gv_killCount >= gv_achievementTier1kills) && (libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1)) {
        AchievementAward(gv_p01_PLAYER, "TZeratul04_2");
        gv_statAchievementTierLevel = 2;
    }

    if ((gv_killCount >= gv_achievementTier2kills) && (libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1)) {
        AchievementAward(gv_p01_PLAYER, "TZeratul04_3");
        gv_statAchievementTierLevel = 0;
    }

    if ((gv_killCount >= gv_sTAGE_01_KILL_QUOTA)) {
        TriggerExecute(gt_PrimaryKillCountComplete, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateLeaderboardZergorHybridKilled_Init () {
    gt_UpdateLeaderboardZergorHybridKilled = TriggerCreate("gt_UpdateLeaderboardZergorHybridKilled_Func");
    TriggerAddEventUnitDied(gt_UpdateLeaderboardZergorHybridKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Primary Kill Count Complete
//--------------------------------------------------------------------------------------------------
bool gt_PrimaryKillCountComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_AttackWavesStage1P04NW);
    TriggerStop(gt_AttackWavesStage1P05NE);
    TriggerStop(gt_AttackWavesStage1P06SE);
    TriggerStop(gt_AttackWavesStage1RepeatingP04NW);
    TriggerStop(gt_AttackWavesStage1RepeatingP05NE);
    TriggerStop(gt_AttackWavesStage1RepeatingP06SE);
    TriggerStop(gt_SwarmWaveA1P04NW);
    TriggerStop(gt_SwarmWaveA3P05NE);
    TriggerStop(gt_SwarmWaveA2P06SE);
    TriggerStop(gt_SwarmWaveB1P06SE);
    TriggerStop(gt_SwarmWaveB2P04NW);
    TriggerStop(gt_SwarmWaveB3P05NE);
    TriggerStop(gt_SwarmWaveC1P05NE);
    TriggerStop(gt_SwarmWaveC2P04NW);
    TriggerStop(gt_SwarmWaveC3P06SE);
    gv_statZergResearchPoints = libCamp_gf_StoryResearchObjectReward(libCamp_ge_StoryResearchObject_ResearchObjectKill1500Zerg, libCamp_ge_StoryResearchCategory_ResearchCategoryZerg);
    libCamp_gf_AddProgressToStoryResearch(libCamp_ge_StoryResearchObject_ResearchObjectKill1500Zerg, 1);
    TriggerExecute(gt_ObjectiveSurvivePrimaryComplete, true, true);
    TriggerExecute(gt_MidQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrimaryKillCountComplete_Init () {
    gt_PrimaryKillCountComplete = TriggerCreate("gt_PrimaryKillCountComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Hero Way Gate
//--------------------------------------------------------------------------------------------------
bool gt_ActivateHeroWayGate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_p01_PLAYER, StringExternal("Param/Value/55205F23"), null, PointFromId(57));
    ActorSend(ActorFromDoodad(DoodadFromId(482)), "AnimGroupApply Work Work,Start Work,End");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateHeroWayGate_Init () {
    gt_ActivateHeroWayGate = TriggerCreate("gt_ActivateHeroWayGate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Tech 01 Phoenix Q
//--------------------------------------------------------------------------------------------------
bool gt_NewTech01PhoenixQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_reinforcementAutoMove = true;
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Zeratul04_Stargate", libNtve_ge_TipType_NewStructure, PlayerGroupAll());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Stargate", c_unitCreateConstruct, gv_p01_PLAYER, RegionGetCenter(RegionFromId(80)));
    UnitSetProgressComplete(UnitLastCreated(), 1, 95);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Stargate", c_unitCreateConstruct, gv_p01_PLAYER, RegionGetCenter(RegionFromId(81)));
    UnitSetProgressComplete(UnitLastCreated(), 1, 95);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 11), PointFromId(57)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 7), PointFromId(630)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 7), PointFromId(631)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 7), PointFromId(632)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 7), PointFromId(634)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 7), PointFromId(109)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 7), PointFromId(124)), c_orderQueueAddToEnd);
    TechTreeAbilityAllow(gv_p01_PLAYER, AbilityCommand("StargateTrain", 0), true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    UIAlertPoint("Trigger", gv_p01_PLAYER, StringExternal("Param/Value/8403F3B6"), null, UnitGetPosition(UnitFromId(639)));
    // Transmission - SoundLink("TZeratul04Urun00002", -1)
    libCamp_gf_SendTransmissionCampaign(gv_heroPhoenix, SoundLink("TZeratul04Urun00002", 0), c_transmissionDurationAdd, 1.0, true);
    if ((UnitIsAlive(gv_zeratul) == true)) {
        // Transmission - SoundLink("TZeratul04Zeratul00003", -1)
        libCamp_gf_SendTransmissionCampaign(gv_zeratul, SoundLink("TZeratul04Zeratul00003", 0), c_transmissionDurationAdd, 1.0, true);
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    ActorSend(ActorFromDoodad(DoodadFromId(482)), "AnimGroupRemove Work");
    Wait(1.0, c_timeGame);
    libCamp_gf_CreateTipFromConversationState("StoryTips|Zeratul04_Phoenix", libNtve_ge_TipType_NewUnit, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewTech01PhoenixQ_Init () {
    gt_NewTech01PhoenixQ = TriggerCreate("gt_NewTech01PhoenixQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Tech 02 Void Ray Q
//--------------------------------------------------------------------------------------------------
bool gt_NewTech02VoidRayQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 12), PointFromId(57)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 8), PointFromId(630)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 8), PointFromId(631)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 8), PointFromId(632)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 8), PointFromId(634)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(675)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(676)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(672)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(678)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(677)), c_orderQueueReplace);
    TechTreeAbilityAllow(gv_p01_PLAYER, AbilityCommand("StargateTrain", 4), true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    UIAlertPoint("Trigger", gv_p01_PLAYER, StringExternal("Param/Value/5DAFE246"), null, UnitGetPosition(UnitFromId(639)));
    // Transmission - SoundLink("TZeratul04Mohandar00004", -1)
    libCamp_gf_SendTransmissionCampaign(gv_heroVoidRay, SoundLink("TZeratul04Mohandar00004", 0), c_transmissionDurationAdd, 1.0, true);
    if ((UnitIsAlive(gv_zeratul) == true)) {
        // Transmission - SoundLink("TZeratul04Zeratul00005", -1)
        libCamp_gf_SendTransmissionCampaign(gv_zeratul, SoundLink("TZeratul04Zeratul00005", 0), c_transmissionDurationAdd, 1.0, true);
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    ActorSend(ActorFromDoodad(DoodadFromId(482)), "AnimGroupRemove Work");
    Wait(1.0, c_timeGame);
    libCamp_gf_CreateTipFromConversationState("StoryTips|Zeratul04_VoidRay", libNtve_ge_TipType_NewUnit, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewTech02VoidRayQ_Init () {
    gt_NewTech02VoidRayQ = TriggerCreate("gt_NewTech02VoidRayQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Tech 03 Carriers Q
//--------------------------------------------------------------------------------------------------
bool gt_NewTech03CarriersQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 13), PointFromId(57)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 6), PointFromId(630)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 6), PointFromId(631)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 6), PointFromId(109)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 6), PointFromId(124)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(675)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(676)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(672)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(678)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), PointFromId(681)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), PointFromId(682)), c_orderQueueReplace);
    TechTreeAbilityAllow(gv_p01_PLAYER, AbilityCommand("StargateTrain", 2), true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    UIAlertPoint("Trigger", gv_p01_PLAYER, StringExternal("Param/Value/7D557C0A"), null, UnitGetPosition(UnitFromId(639)));
    // Transmission - SoundLink("TZeratul04Selendis00006", -1)
    libCamp_gf_SendTransmissionCampaign(gv_heroCarrier, SoundLink("TZeratul04Selendis00006", 0), c_transmissionDurationAdd, 1.0, true);
    if ((UnitIsAlive(gv_zeratul) == true)) {
        // Transmission - SoundLink("TZeratul04Zeratul00007", -1)
        libCamp_gf_SendTransmissionCampaign(gv_zeratul, SoundLink("TZeratul04Zeratul00007", 0), c_transmissionDurationAdd, 1.0, true);
        // Transmission - SoundLink("TZeratul04Selendis00008", -1)
        libCamp_gf_SendTransmissionCampaign(gv_heroCarrier, SoundLink("TZeratul04Selendis00008", 0), c_transmissionDurationAdd, 1.0, true);
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    ActorSend(ActorFromDoodad(DoodadFromId(482)), "AnimGroupRemove Work");
    Wait(1.0, c_timeGame);
    libCamp_gf_CreateTipFromConversationState("StoryTips|Zeratul04_Carrier", libNtve_ge_TipType_NewUnit, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewTech03CarriersQ_Init () {
    gt_NewTech03CarriersQ = TriggerCreate("gt_NewTech03CarriersQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Tech 04 Mothership Q
//--------------------------------------------------------------------------------------------------
bool gt_NewTech04MothershipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MothershipSpawn, true, false);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 7), PointFromId(630)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 7), PointFromId(631)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 6), PointFromId(109)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 6), PointFromId(124)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 8), PointFromId(632)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 8), PointFromId(634)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(675)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(676)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(672)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(678)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromId(677)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(680)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(681)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(682)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P10, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(679)), c_orderQueueReplace);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    UIAlertPoint("Trigger", gv_p01_PLAYER, StringExternal("Param/Value/718CB62A"), null, UnitGetPosition(UnitFromId(639)));
    // Transmission - SoundLink("TZeratul04Artanis00009", -1)
    libCamp_gf_SendTransmissionCampaign(gv_heroMothership, SoundLink("TZeratul04Artanis00009", 0), c_transmissionDurationAdd, 1.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    ActorSend(ActorFromDoodad(DoodadFromId(482)), "AnimGroupRemove Work");
    Wait(1.0, c_timeGame);
    libCamp_gf_CreateTipFromConversationState("StoryTips|Zeratul04_Mothership", libNtve_ge_TipType_NewUnit, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewTech04MothershipQ_Init () {
    gt_NewTech04MothershipQ = TriggerCreate("gt_NewTech04MothershipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reinforcement Behavior
//--------------------------------------------------------------------------------------------------
bool gt_ReinforcementBehavior_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_p10_REINFORCEMENTPROTOSS))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnitProgressUnit()) == "Carrier")) {
        UnitMagazineArm(EventUnitProgressUnit(), AbilityCommand("CarrierHangar", 0), 4);
    }

    if ((UnitGetType(EventUnitProgressUnit()) == "Phoenix")) {
        UnitSetPropertyFixed(EventUnitProgressUnit(), c_unitPropEnergyPercent, 100.0);
    }

    if ((UnitGetType(EventUnitProgressUnit()) == "Urun")) {
        gv_heroPhoenix = EventUnitProgressUnit();
        UnitSetPropertyFixed(EventUnitProgressUnit(), c_unitPropEnergyPercent, 100.0);
        UnitFlashSelection(EventUnitProgressUnit(), 1.0);
        MinimapPing(PlayerGroupAll(), UnitGetPosition(EventUnitProgressUnit()), 6.0, Color(0.00, 100.00, 0.00));
        UnitSetOwner(EventUnitProgressUnit(), gv_p01_PLAYER, false);
        UnitSetTeamColorIndex(EventUnitProgressUnit(), 6);
    }

    if ((UnitGetType(EventUnitProgressUnit()) == "Mohandar")) {
        gv_heroVoidRay = EventUnitProgressUnit();
        UnitFlashSelection(EventUnitProgressUnit(), 1.0);
        MinimapPing(PlayerGroupAll(), UnitGetPosition(EventUnitProgressUnit()), 6.0, Color(0.00, 100.00, 0.00));
        UnitSetOwner(EventUnitProgressUnit(), gv_p01_PLAYER, false);
        UnitSetTeamColorIndex(EventUnitProgressUnit(), 6);
    }

    if ((UnitGetType(EventUnitProgressUnit()) == "Selendis")) {
        gv_heroCarrier = EventUnitProgressUnit();
        UnitFlashSelection(EventUnitProgressUnit(), 1.0);
        UnitMagazineArm(EventUnitProgressUnit(), AbilityCommand("SelendisHangar", 0), 4);
        MinimapPing(PlayerGroupAll(), UnitGetPosition(EventUnitProgressUnit()), 6.0, Color(0.00, 100.00, 0.00));
        UnitSetOwner(EventUnitProgressUnit(), gv_p01_PLAYER, false);
        UnitSetTeamColorIndex(EventUnitProgressUnit(), 6);
    }

    if (((UnitGetType(EventUnitProgressUnit()) == "Zealot") || (UnitGetType(EventUnitProgressUnit()) == "Stalker") || (UnitGetType(EventUnitProgressUnit()) == "Immortal") || (UnitGetType(EventUnitProgressUnit()) == "Phoenix") || (UnitGetType(EventUnitProgressUnit()) == "VoidRay") || (UnitGetType(EventUnitProgressUnit()) == "Carrier"))) {
        UnitSetOwner(EventUnitProgressUnit(), gv_p01_PLAYER, true);
        UnitSetTeamColorIndex(EventUnitProgressUnit(), 7);
        UnitSetState(EventUnitProgressUnit(), c_unitStateUsingSupply, false);
    }

    if ((gv_reinforcementAutoMove == true)) {
        UnitIssueOrder(EventUnitProgressUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(EventUnitProgressUnit()), 33.0, 45.0)), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(EventUnitProgressUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(EventUnitProgressUnit()), 22.0, 45.0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReinforcementBehavior_Init () {
    gt_ReinforcementBehavior = TriggerCreate("gt_ReinforcementBehavior_Func");
    TriggerAddEventUnitConstructProgress(gt_ReinforcementBehavior, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mothership Spawn
//--------------------------------------------------------------------------------------------------
bool gt_MothershipSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "Artanis", 0, gv_p02_ALLIED_PROTOSS, PointFromId(57));
    gv_heroMothership = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_heroMothership), c_animNameDefault, "Birth", 0, c_animTimeDefault);
    libNtve_gf_PauseUnit(gv_heroMothership, true);
    Wait(8.666, c_timeGame);
    libNtve_gf_PauseUnit(gv_heroMothership, false);
    UnitSetOwner(gv_heroMothership, gv_p01_PLAYER, false);
    UnitSetTeamColorIndex(gv_heroMothership, 6);
    UnitFlashSelection(gv_heroMothership, 1.0);
    TechTreeAbilityAllow(gv_p01_PLAYER, AbilityCommand("NexusTrainMothership", 0), true);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_heroMothership), 6.0, Color(0.00, 100.00, 0.00));
    UIAlertUnit("Trigger", gv_p01_PLAYER, StringExternal("Param/Value/507D82B7"), null, UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MothershipSpawn_Init () {
    gt_MothershipSpawn = TriggerCreate("gt_MothershipSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zeratul Dies Q
//--------------------------------------------------------------------------------------------------
bool gt_ZeratulDiesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventUnit() == gv_zeratul))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_zeratulKills = libNtve_gf_UnitGetPropertyKills(gv_zeratul, c_unitPropCurrent);
    TriggerQueueEnter();
    UIAlertUnit("Trigger", gv_p01_PLAYER, StringExternal("Param/Value/495144BF"), null, EventUnit());
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul04Zeratul00022", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul04Zeratul00022", 0), c_transmissionDurationAdd, 1.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    if ((gv_inCinematic == false)) {
        SoundPlay(SoundLink("UI_TerranMissionFailed", 0), PlayerGroupAll(), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/89D472D7"));
    }

    Wait(3.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZeratulDiesQ_Init () {
    gt_ZeratulDiesQ = TriggerCreate("gt_ZeratulDiesQ_Func");
    TriggerAddEventUnitDied(gt_ZeratulDiesQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Phoenix Dies Q
//--------------------------------------------------------------------------------------------------
bool gt_HeroPhoenixDiesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventUnit() == gv_heroPhoenix))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_urunKills = libNtve_gf_UnitGetPropertyKills(gv_heroPhoenix, c_unitPropCurrent);
    TriggerQueueEnter();
    UIAlertUnit("Trigger", gv_p01_PLAYER, StringExternal("Param/Value/FE2657F7"), null, EventUnit());
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul04Urun00023", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul04Urun00023", 0), c_transmissionDurationAdd, 1.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    if ((gv_inCinematic == false)) {
        SoundPlay(SoundLink("UI_TerranMissionFailed", 0), PlayerGroupAll(), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/7FB50F12"));
    }

    Wait(3.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroPhoenixDiesQ_Init () {
    gt_HeroPhoenixDiesQ = TriggerCreate("gt_HeroPhoenixDiesQ_Func");
    TriggerAddEventUnitDied(gt_HeroPhoenixDiesQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Void Ray Dies Q
//--------------------------------------------------------------------------------------------------
bool gt_HeroVoidRayDiesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventUnit() == gv_heroVoidRay))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_mohandarKills = libNtve_gf_UnitGetPropertyKills(gv_heroVoidRay, c_unitPropCurrent);
    TriggerQueueEnter();
    UIAlertUnit("Trigger", gv_p01_PLAYER, StringExternal("Param/Value/83699BF2"), null, EventUnit());
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul04Mohandar00024", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul04Mohandar00024", 0), c_transmissionDurationAdd, 1.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    if ((gv_inCinematic == false)) {
        SoundPlay(SoundLink("UI_TerranMissionFailed", 0), PlayerGroupAll(), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/91CDDDC1"));
    }

    Wait(3.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroVoidRayDiesQ_Init () {
    gt_HeroVoidRayDiesQ = TriggerCreate("gt_HeroVoidRayDiesQ_Func");
    TriggerAddEventUnitDied(gt_HeroVoidRayDiesQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Carrier Dies Q
//--------------------------------------------------------------------------------------------------
bool gt_HeroCarrierDiesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventUnit() == gv_heroCarrier))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_selendisKills = libNtve_gf_UnitGetPropertyKills(gv_heroCarrier, c_unitPropCurrent);
    TriggerQueueEnter();
    UIAlertUnit("Trigger", gv_p01_PLAYER, StringExternal("Param/Value/B292B72E"), null, EventUnit());
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul04Selendis00025", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul04Selendis00025", 0), c_transmissionDurationAdd, 1.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    if ((gv_inCinematic == false)) {
        SoundPlay(SoundLink("UI_TerranMissionFailed", 0), PlayerGroupAll(), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/3260EDA1"));
    }

    Wait(3.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroCarrierDiesQ_Init () {
    gt_HeroCarrierDiesQ = TriggerCreate("gt_HeroCarrierDiesQ_Func");
    TriggerAddEventUnitDied(gt_HeroCarrierDiesQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Mothership Dies Q
//--------------------------------------------------------------------------------------------------
bool gt_HeroMothershipDiesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventUnit() == gv_heroMothership))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_artanisKills = libNtve_gf_UnitGetPropertyKills(gv_heroMothership, c_unitPropCurrent);
    TriggerQueueEnter();
    UIAlertUnit("Trigger", gv_p01_PLAYER, StringExternal("Param/Value/C0AFC882"), null, EventUnit());
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul04Artanis00026", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul04Artanis00026", 0), c_transmissionDurationAdd, 1.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    if ((gv_inCinematic == false)) {
        SoundPlay(SoundLink("UI_TerranMissionFailed", 0), PlayerGroupAll(), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/EEA24799"));
    }

    Wait(3.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroMothershipDiesQ_Init () {
    gt_HeroMothershipDiesQ = TriggerCreate("gt_HeroMothershipDiesQ_Func");
    TriggerAddEventUnitDied(gt_HeroMothershipDiesQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archivist Warped in
//--------------------------------------------------------------------------------------------------
bool gt_ArchivistWarpedin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_p08_ARCHIVE))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "HighTemplar"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(EventUnitProgressUnit(), c_unitStateInvulnerable, true);
    UnitSetState(EventUnitProgressUnit(), c_unitStateSelectable, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArchivistWarpedin_Init () {
    gt_ArchivistWarpedin = TriggerCreate("gt_ArchivistWarpedin_Func");
    TriggerAddEventUnitConstructProgress(gt_ArchivistWarpedin, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_PlayerHasNoGroundUnitsAndStructures, true, false);
    TriggerExecute(gt_PlayerHasNoStructures, true, false);
    CampaignInitAI();
    AIAttackWaveSetTargetPlayer(gv_p04_ZERG_NW, PlayerGroupSingle(gv_p01_PLAYER));
    AIAttackWaveSetTargetPlayer(gv_p05_ZERG_NE, PlayerGroupSingle(gv_p01_PLAYER));
    AIAttackWaveSetTargetPlayer(gv_p06_ZERG_SE, PlayerGroupSingle(gv_p01_PLAYER));
    AIAttackWaveSetTargetPlayer(gv_p07_FRENZIED_ZERG, PlayerGroupSingle(gv_p01_PLAYER));
    TriggerExecute(gt_AIUpgradesEN, true, false);
    TriggerExecute(gt_AIUpgradesH, true, false);
    TriggerExecute(gt_AIUpgradesI, true, false);
    TriggerExecute(gt_MissionEventTiming, true, false);
    TriggerExecute(gt_AttackWavesStage1P04NW, true, false);
    TriggerExecute(gt_AttackWavesStage1P05NE, true, false);
    TriggerExecute(gt_AttackWavesStage1P06SE, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades EN
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesEN_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoE93B79B1_g;
    int autoE93B79B1_var;
    playergroup autoD39A0AB7_g;
    int autoD39A0AB7_var;
    playergroup auto3B12E1AE_g;
    int auto3B12E1AE_var;

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1560.0, c_timeAI);
    autoE93B79B1_g = gv_zergPlayers;
    autoE93B79B1_var = -1;
    while (true) {
        autoE93B79B1_var = PlayerGroupNextPlayer(autoE93B79B1_g, autoE93B79B1_var);
        if (autoE93B79B1_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoE93B79B1_var, "ZergFlyerArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(autoE93B79B1_var, "ZergFlyerWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(autoE93B79B1_var, "ZergGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(autoE93B79B1_var, "ZergMeleeWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(autoE93B79B1_var, "ZergMissileWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(autoE93B79B1_var, "ProtossShieldsLevel1", 1);
    }
    Wait(240.0, c_timeAI);
    autoD39A0AB7_g = gv_zergPlayers;
    autoD39A0AB7_var = -1;
    while (true) {
        autoD39A0AB7_var = PlayerGroupNextPlayer(autoD39A0AB7_g, autoD39A0AB7_var);
        if (autoD39A0AB7_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoD39A0AB7_var, "ZergFlyerArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(autoD39A0AB7_var, "ZergFlyerWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(autoD39A0AB7_var, "ZergGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(autoD39A0AB7_var, "ZergMeleeWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(autoD39A0AB7_var, "ZergMissileWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(autoD39A0AB7_var, "ProtossShieldsLevel2", 1);
    }
    Wait(240.0, c_timeAI);
    auto3B12E1AE_g = gv_zergPlayers;
    auto3B12E1AE_var = -1;
    while (true) {
        auto3B12E1AE_var = PlayerGroupNextPlayer(auto3B12E1AE_g, auto3B12E1AE_var);
        if (auto3B12E1AE_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto3B12E1AE_var, "ZergFlyerArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(auto3B12E1AE_var, "ZergFlyerWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(auto3B12E1AE_var, "ZergGroundArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(auto3B12E1AE_var, "ZergMeleeWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(auto3B12E1AE_var, "ZergMissileWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(auto3B12E1AE_var, "zerglingattackspeed", 1);
        TechTreeUpgradeAddLevel(auto3B12E1AE_var, "ProtossShieldsLevel3", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesEN_Init () {
    gt_AIUpgradesEN = TriggerCreate("gt_AIUpgradesEN_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades H
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoC18A7EBE_g;
    int autoC18A7EBE_var;
    playergroup auto42DF943C_g;
    int auto42DF943C_var;
    playergroup auto8391CA9F_g;
    int auto8391CA9F_var;
    playergroup auto22F712F9_g;
    int auto22F712F9_var;
    playergroup auto8C708B1A_g;
    int auto8C708B1A_var;
    playergroup auto7F6FC7EB_g;
    int auto7F6FC7EB_var;
    playergroup auto4A796962_g;
    int auto4A796962_var;

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 1, 0) == 1))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(420.0, c_timeAI);
    autoC18A7EBE_g = gv_zergPlayers;
    autoC18A7EBE_var = -1;
    while (true) {
        autoC18A7EBE_var = PlayerGroupNextPlayer(autoC18A7EBE_g, autoC18A7EBE_var);
        if (autoC18A7EBE_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoC18A7EBE_var, "ZergGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(autoC18A7EBE_var, "ZergFlyerArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(autoC18A7EBE_var, "ProtossShieldsLevel1", 1);
    }
    Wait(240.0, c_timeAI);
    auto42DF943C_g = gv_zergPlayers;
    auto42DF943C_var = -1;
    while (true) {
        auto42DF943C_var = PlayerGroupNextPlayer(auto42DF943C_g, auto42DF943C_var);
        if (auto42DF943C_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto42DF943C_var, "zerglingmovementspeed", 1);
        TechTreeUpgradeAddLevel(auto42DF943C_var, "ZergMeleeWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto42DF943C_var, "ZergMissileWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto42DF943C_var, "ZergFlyerWeaponsLevel2", 1);
    }
    Wait(300.0, c_timeAI);
    auto8391CA9F_g = gv_zergPlayers;
    auto8391CA9F_var = -1;
    while (true) {
        auto8391CA9F_var = PlayerGroupNextPlayer(auto8391CA9F_g, auto8391CA9F_var);
        if (auto8391CA9F_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto8391CA9F_var, "ZergFlyerArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(auto8391CA9F_var, "ZergGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(auto8391CA9F_var, "ProtossShieldsLevel2", 1);
    }
    Wait(240.0, c_timeAI);
    auto22F712F9_g = gv_zergPlayers;
    auto22F712F9_var = -1;
    while (true) {
        auto22F712F9_var = PlayerGroupNextPlayer(auto22F712F9_g, auto22F712F9_var);
        if (auto22F712F9_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto22F712F9_var, "ZergMeleeWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(auto22F712F9_var, "ZergMissileWeaponsLevel3", 1);
    }
    Wait(210.0, c_timeAI);
    auto8C708B1A_g = gv_zergPlayers;
    auto8C708B1A_var = -1;
    while (true) {
        auto8C708B1A_var = PlayerGroupNextPlayer(auto8C708B1A_g, auto8C708B1A_var);
        if (auto8C708B1A_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto8C708B1A_var, "CentrificalHooks", 1);
        TechTreeUpgradeAddLevel(auto8C708B1A_var, "ZergFlyerWeaponsLevel3", 1);
    }
    Wait(240.0, c_timeAI);
    auto7F6FC7EB_g = gv_zergPlayers;
    auto7F6FC7EB_var = -1;
    while (true) {
        auto7F6FC7EB_var = PlayerGroupNextPlayer(auto7F6FC7EB_g, auto7F6FC7EB_var);
        if (auto7F6FC7EB_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto7F6FC7EB_var, "GlialReconstitution", 1);
        TechTreeUpgradeAddLevel(auto7F6FC7EB_var, "OrganicCarapace", 1);
    }
    Wait(390.0, c_timeAI);
    auto4A796962_g = gv_zergPlayers;
    auto4A796962_var = -1;
    while (true) {
        auto4A796962_var = PlayerGroupNextPlayer(auto4A796962_g, auto4A796962_var);
        if (auto4A796962_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto4A796962_var, "ZergFlyerArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(auto4A796962_var, "ZergGroundArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(auto4A796962_var, "zerglingattackspeed", 1);
        TechTreeUpgradeAddLevel(auto4A796962_var, "ProtossShieldsLevel3", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesH_Init () {
    gt_AIUpgradesH = TriggerCreate("gt_AIUpgradesH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades I
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoF171C026_g;
    int autoF171C026_var;
    playergroup auto7E2B691A_g;
    int auto7E2B691A_var;
    playergroup auto6315810D_g;
    int auto6315810D_var;
    playergroup autoA5486E1C_g;
    int autoA5486E1C_var;
    playergroup auto3020B504_g;
    int auto3020B504_var;
    playergroup autoBD896412_g;
    int autoBD896412_var;

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(420.0, c_timeAI);
    autoF171C026_g = gv_zergPlayers;
    autoF171C026_var = -1;
    while (true) {
        autoF171C026_var = PlayerGroupNextPlayer(autoF171C026_g, autoF171C026_var);
        if (autoF171C026_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoF171C026_var, "zerglingmovementspeed", 1);
        TechTreeUpgradeAddLevel(autoF171C026_var, "ZergMeleeWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(autoF171C026_var, "ZergMissileWeaponsLevel2", 1);
    }
    Wait(240.0, c_timeAI);
    auto7E2B691A_g = gv_zergPlayers;
    auto7E2B691A_var = -1;
    while (true) {
        auto7E2B691A_var = PlayerGroupNextPlayer(auto7E2B691A_g, auto7E2B691A_var);
        if (auto7E2B691A_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto7E2B691A_var, "ZergFlyerWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto7E2B691A_var, "ZergFlyerArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(auto7E2B691A_var, "ZergGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(auto7E2B691A_var, "ProtossShieldsLevel2", 1);
    }
    Wait(300.0, c_timeAI);
    auto6315810D_g = gv_zergPlayers;
    auto6315810D_var = -1;
    while (true) {
        auto6315810D_var = PlayerGroupNextPlayer(auto6315810D_g, auto6315810D_var);
        if (auto6315810D_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto6315810D_var, "ZergMeleeWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(auto6315810D_var, "ZergMissileWeaponsLevel3", 1);
    }
    Wait(240.0, c_timeAI);
    autoA5486E1C_g = gv_zergPlayers;
    autoA5486E1C_var = -1;
    while (true) {
        autoA5486E1C_var = PlayerGroupNextPlayer(autoA5486E1C_g, autoA5486E1C_var);
        if (autoA5486E1C_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoA5486E1C_var, "ZergFlyerWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(autoA5486E1C_var, "CentrificalHooks", 1);
    }
    Wait(210.0, c_timeAI);
    auto3020B504_g = gv_zergPlayers;
    auto3020B504_var = -1;
    while (true) {
        auto3020B504_var = PlayerGroupNextPlayer(auto3020B504_g, auto3020B504_var);
        if (auto3020B504_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto3020B504_var, "ZergFlyerArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(auto3020B504_var, "ZergGroundArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(auto3020B504_var, "ProtossShieldsLevel3", 1);
    }
    Wait(210.0, c_timeAI);
    autoBD896412_g = gv_zergPlayers;
    autoBD896412_var = -1;
    while (true) {
        autoBD896412_var = PlayerGroupNextPlayer(autoBD896412_g, autoBD896412_var);
        if (autoBD896412_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoBD896412_var, "zerglingattackspeed", 1);
        TechTreeUpgradeAddLevel(autoBD896412_var, "GlialReconstitution", 1);
        TechTreeUpgradeAddLevel(autoBD896412_var, "OrganicCarapace", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesI_Init () {
    gt_AIUpgradesI = TriggerCreate("gt_AIUpgradesI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mission Event Timing
//--------------------------------------------------------------------------------------------------
bool gt_MissionEventTiming_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(200.0, c_timeAI);
    TriggerExecute(gt_TransmissionZergswarmingflanksQ, true, false);
    Wait(175.0, c_timeAI);
    TriggerExecute(gt_TransmissionHybridIncoming1Q, true, false);
    Wait(60.0, c_timeAI);
    TriggerExecute(gt_TransmissionZerghordeincomingQ, true, false);
    TriggerExecute(gt_SwarmWaveA1P04NW, true, false);
    Wait(45.0, c_timeAI);
    TriggerExecute(gt_SwarmWaveA2P06SE, true, false);
    Wait(45.0, c_timeAI);
    TriggerExecute(gt_SwarmWaveA3P05NE, true, false);
    Wait(libNtve_gf_DifficultyValueFixed(30.0, 30.0, 45.0, 60.0), c_timeAI);
    TriggerExecute(gt_ActivateHeroWayGate, true, false);
    Wait(25.0, c_timeAI);
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/4A82A34C"));
    TriggerExecute(gt_NewTech02VoidRayQ, true, false);
    Wait(libNtve_gf_DifficultyValueFixed(30.0, 30.0, 15.0, 0.0), c_timeAI);
    Wait(315.0, c_timeAI);
    TriggerExecute(gt_TransmissionWormsIncoming1Q, true, false);
    Wait(10.0, c_timeAI);
    TriggerExecute(gt_NydusWormAttack1, true, false);
    Wait(5.0, c_timeAI);
    Wait(5.0, c_timeAI);
    TriggerExecute(gt_ActivateHeroWayGate, true, false);
    Wait(25.0, c_timeAI);
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/DACBA3F9"));
    TriggerExecute(gt_NewTech03CarriersQ, true, false);
    Wait(285.0, c_timeAI);
    TriggerExecute(gt_TransmissionDarkVoiceTauntsQ, true, false);
    TriggerExecute(gt_SwarmWaveB1P06SE, true, false);
    Wait(35.0, c_timeAI);
    TriggerExecute(gt_SwarmWaveB2P04NW, true, false);
    Wait(35.0, c_timeAI);
    TriggerExecute(gt_SwarmWaveB3P05NE, true, false);
    Wait(205.0, c_timeAI);
    TriggerExecute(gt_TransmissionWormsIncoming2Q, true, false);
    Wait(10.0, c_timeAI);
    TriggerExecute(gt_NydusWormAttack2, true, false);
    Wait(185.0, c_timeAI);
    TriggerExecute(gt_SwarmWaveC1P05NE, true, false);
    Wait(25.0, c_timeAI);
    TriggerExecute(gt_SwarmWaveC2P04NW, true, false);
    Wait(25.0, c_timeAI);
    TriggerExecute(gt_SwarmWaveC3P06SE, true, false);
    Wait(10.0, c_timeAI);
    Wait(5.0, c_timeAI);
    TriggerExecute(gt_ActivateHeroWayGate, true, false);
    Wait(25.0, c_timeAI);
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/29753642"));
    TriggerExecute(gt_NewTech04MothershipQ, true, false);
    Wait(10.0, c_timeAI);
    TriggerExecute(gt_TransmissionArtanisFinalSpeechQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MissionEventTiming_Init () {
    gt_MissionEventTiming = TriggerCreate("gt_MissionEventTiming_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Waves - Stage 1 - P04 NW
//--------------------------------------------------------------------------------------------------
bool gt_AttackWavesStage1P04NW_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_thisAIPlayer;
    point lv_thisAISpawn;
    int lv_wAITTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_thisAIPlayer = gv_p04_ZERG_NW;
    lv_thisAISpawn = RegionGetCenter(RegionFromId(48));
    lv_wAITTime = 50;
    AIAttackWaveSetGatherPoint(gv_p04_ZERG_NW, PointFromId(131));
    Wait((255.0 - IntToFixed(lv_wAITTime)), c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(44, 44, 50, 60), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(4, 4, 5, 6), "Hydralisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(4, 4, 6, 7), "Mutalisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    AIAttackWaveSetGatherEarlyNoReplace(lv_thisAIPlayer);
    AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
    gv_statWavessent += 1;
    Wait((470.0 - IntToFixed(lv_wAITTime)), c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(25, 25, 30, 40), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(9, 9, 11, 14), "Roach", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(2, 2, 4, 5), "Mutalisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "HybridDestroyer", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    AIAttackWaveSetGatherEarlyNoReplace(lv_thisAIPlayer);
    AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
    gv_statWavessent += 1;
    Wait((340.0 - IntToFixed(lv_wAITTime)), c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(18, 18, 28, 40), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(2, 2, 4, 6), "Hydralisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "Infestor", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "Overseer", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "HybridReaver", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "HybridDestroyer", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    AIAttackWaveSetGatherEarlyNoReplace(lv_thisAIPlayer);
    AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
    gv_statWavessent += 1;
    Wait((350.0 - IntToFixed(lv_wAITTime)), c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(15, 15, 25, 45), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(2, 2, 3, 5), "Mutalisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(3, 3, 4, 5), "HybridReaver", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(0, 1, 1, 1), "Overseer", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    AIAttackWaveSetGatherEarlyNoReplace(lv_thisAIPlayer);
    AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
    gv_statWavessent += 1;
    Wait((240.0 - IntToFixed(lv_wAITTime)), c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(18, 18, 30, 46), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(3, 3, 5, 6), "Hydralisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(5, 5, 7, 8), "Roach", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(5, 5, 6, 7), "Mutalisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Infestor", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "HybridReaver", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Overseer", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    AIAttackWaveSetGatherEarlyNoReplace(lv_thisAIPlayer);
    AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
    gv_statWavessent += 1;
    Wait(140.0, c_timeAI);
    TriggerExecute(gt_AttackWavesStage1RepeatingP04NW, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWavesStage1P04NW_Init () {
    gt_AttackWavesStage1P04NW = TriggerCreate("gt_AttackWavesStage1P04NW_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Waves - Stage 1 - P05 NE
//--------------------------------------------------------------------------------------------------
bool gt_AttackWavesStage1P05NE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_thisAIPlayer;
    point lv_thisAISpawn;
    int lv_wAITTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_thisAIPlayer = gv_p05_ZERG_NE;
    lv_thisAISpawn = RegionGetCenter(RegionFromId(49));
    lv_wAITTime = 50;
    AIAttackWaveSetGatherPoint(gv_p05_ZERG_NE, PointFromId(154));
    Wait((180.0 - IntToFixed(lv_wAITTime)), c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(36, 36, 41, 50), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(5, 5, 7, 8), "Roach", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(8, 8, 9, 11), "Mutalisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    AIAttackWaveSetGatherEarlyNoReplace(lv_thisAIPlayer);
    AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
    gv_statWavessent += 1;
    Wait((225.0 - IntToFixed(lv_wAITTime)), c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(4, 4, 5, 3), "HybridReaver", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(3, 3, 4, 5), "HybridDestroyer", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    AIAttackWaveSetGatherEarlyNoReplace(lv_thisAIPlayer);
    AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
    gv_statWavessent += 1;
    Wait((390.0 - IntToFixed(lv_wAITTime)), c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(24, 24, 35, 52), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(5, 5, 7, 8), "Roach", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "HybridReaver", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), "HybridDestroyer", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "Overseer", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    AIAttackWaveSetGatherEarlyNoReplace(lv_thisAIPlayer);
    AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, false);
    gv_statWavessent += 1;
    Wait(30.0, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(4, 4, 7, 9), "Hydralisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(8, 8, 10, 12), "Mutalisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    AIAttackWaveSetGatherEarlyNoReplace(lv_thisAIPlayer);
    AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, false);
    gv_statWavessent += 1;
    Wait(20.0, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(21, 21, 31, 41), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(6, 6, 6, 7), "Roach", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "Infestor", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    AIAttackWaveSetGatherEarlyNoReplace(lv_thisAIPlayer);
    AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
    gv_statWavessent += 1;
    Wait((300.0 - IntToFixed(lv_wAITTime)), c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(3, 3, 4, 4), "BroodLord", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    AIAttackWaveSetGatherEarlyNoReplace(lv_thisAIPlayer);
    AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, false);
    gv_statWavessent += 1;
    Wait(10.0, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(6, 6, 7, 8), "Mutalisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Ultralisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "HybridDestroyer", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "Overseer", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    AIAttackWaveSetGatherEarlyNoReplace(lv_thisAIPlayer);
    AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, false);
    gv_statWavessent += 1;
    Wait((460.0 - IntToFixed(lv_wAITTime)), c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(21, 21, 37, 58), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(3, 3, 4, 5), "Hydralisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(4, 4, 5, 6), "HybridReaver", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "HybridDestroyer", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Infestor", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    AIAttackWaveSetGatherEarlyNoReplace(lv_thisAIPlayer);
    AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
    gv_statWavessent += 1;
    Wait(210.0, c_timeAI);
    TriggerExecute(gt_AttackWavesStage1RepeatingP05NE, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWavesStage1P05NE_Init () {
    gt_AttackWavesStage1P05NE = TriggerCreate("gt_AttackWavesStage1P05NE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Waves - Stage 1 - P06 SE
//--------------------------------------------------------------------------------------------------
bool gt_AttackWavesStage1P06SE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_thisAIPlayer;
    point lv_thisAISpawn;
    int lv_wAITTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_thisAIPlayer = gv_p06_ZERG_SE;
    lv_thisAISpawn = RegionGetCenter(RegionFromId(46));
    lv_wAITTime = 50;
    AIAttackWaveSetGatherPoint(gv_p06_ZERG_SE, PointFromId(293));
    Wait((315.0 - IntToFixed(lv_wAITTime)), c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(26, 26, 28, 41), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Ultralisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(4, 4, 5, 7), "Roach", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    AIAttackWaveSetGatherEarlyNoReplace(lv_thisAIPlayer);
    AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, false);
    gv_statWavessent += 1;
    Wait(10.0, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(3, 3, 4, 5), "Hydralisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "Infestor", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(6, 6, 9, 11), "Mutalisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    AIAttackWaveSetGatherEarlyNoReplace(lv_thisAIPlayer);
    AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, false);
    gv_statWavessent += 1;
    Wait((550.0 - IntToFixed(lv_wAITTime)), c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(29, 29, 36, 52), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(3, 3, 4, 6), "Roach", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "Infestor", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(4, 4, 6, 7), "Hydralisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "HybridReaver", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    AIAttackWaveSetGatherEarlyNoReplace(lv_thisAIPlayer);
    AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
    gv_statWavessent += 1;
    Wait((360.0 - IntToFixed(lv_wAITTime)), c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(18, 18, 29, 47), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(2, 2, 4, 5), "Hydralisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 2, 4), "HybridDestroyer", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(3, 3, 4, 5), "HybridReaver", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "Overseer", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    AIAttackWaveSetGatherEarlyNoReplace(lv_thisAIPlayer);
    AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
    gv_statWavessent += 1;
    Wait((265.0 - IntToFixed(lv_wAITTime)), c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(13, 13, 28, 48), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Ultralisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "HybridDestroyer", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(2, 2, 2, 2), "Infestor", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    AIAttackWaveSetGatherEarlyNoReplace(lv_thisAIPlayer);
    AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
    gv_statWavessent += 1;
    Wait((205.0 - IntToFixed(lv_wAITTime)), c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(15, 15, 20, 39), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(7, 7, 8, 9), "Roach", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(5, 5, 9, 11), "Mutalisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(2, 2, 3, 3), "BroodLord", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "HybridDestroyer", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "Overseer", 0, lv_thisAIPlayer, lv_thisAISpawn);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    AIAttackWaveSetGatherEarlyNoReplace(lv_thisAIPlayer);
    AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
    gv_statWavessent += 1;
    Wait(160.0, c_timeAI);
    TriggerExecute(gt_AttackWavesStage1RepeatingP06SE, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWavesStage1P06SE_Init () {
    gt_AttackWavesStage1P06SE = TriggerCreate("gt_AttackWavesStage1P06SE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Waves - Stage 1 Repeating - P04 NW
//--------------------------------------------------------------------------------------------------
bool gt_AttackWavesStage1RepeatingP04NW_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_thisAIPlayer;
    point lv_thisAISpawn;
    int lv_wAITTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_thisAIPlayer = gv_p04_ZERG_NW;
    lv_thisAISpawn = RegionGetCenter(RegionFromId(48));
    lv_wAITTime = 45;
    while (true) {
        Wait((90.0 - IntToFixed(lv_wAITTime)), c_timeAI);
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(25, 25, 32, 40), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(5, 5, 7, 8), "Hydralisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Overseer", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        AIAttackWaveSetGatherEarlyNoReplace(lv_thisAIPlayer);
        AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
        gv_statWavessent += 1;
        Wait((90.0 - IntToFixed(lv_wAITTime)), c_timeAI);
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(10, 10, 12, 14), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(6, 6, 8, 10), "Roach", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(3, 3, 5, 7), "Ultralisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Infestor", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Overseer", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        AIAttackWaveSetGatherEarlyNoReplace(lv_thisAIPlayer);
        AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
        gv_statWavessent += 1;
        Wait((90.0 - IntToFixed(lv_wAITTime)), c_timeAI);
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(32, 32, 39, 50), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(8, 8, 10, 10), "Hydralisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Overseer", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        AIAttackWaveSetGatherEarlyNoReplace(lv_thisAIPlayer);
        AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
        gv_statWavessent += 1;
        Wait((90.0 - IntToFixed(lv_wAITTime)), c_timeAI);
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(60, 60, 75, 88), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Ultralisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "HybridReaver", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Overseer", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        AIAttackWaveSetGatherEarlyNoReplace(lv_thisAIPlayer);
        AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
        gv_statWavessent += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWavesStage1RepeatingP04NW_Init () {
    gt_AttackWavesStage1RepeatingP04NW = TriggerCreate("gt_AttackWavesStage1RepeatingP04NW_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Waves - Stage 1 Repeating - P05 NE
//--------------------------------------------------------------------------------------------------
bool gt_AttackWavesStage1RepeatingP05NE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_thisAIPlayer;
    point lv_thisAISpawn;
    int lv_wAITTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_thisAIPlayer = gv_p05_ZERG_NE;
    lv_thisAISpawn = RegionGetCenter(RegionFromId(49));
    lv_wAITTime = 45;
    while (true) {
        Wait((90.0 - IntToFixed(lv_wAITTime)), c_timeAI);
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(3, 3, 4, 5), "BroodLord", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(3, 3, 4, 5), "HybridDestroyer", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        AIAttackWaveSetGatherEarlyNoReplace(lv_thisAIPlayer);
        AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
        gv_statWavessent += 1;
        Wait((90.0 - IntToFixed(lv_wAITTime)), c_timeAI);
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(10, 10, 13, 16), "Baneling", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(3, 3, 4, 5), "HybridDestroyer", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Overseer", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        AIAttackWaveSetGatherEarlyNoReplace(lv_thisAIPlayer);
        AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
        gv_statWavessent += 1;
        Wait((90.0 - IntToFixed(lv_wAITTime)), c_timeAI);
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "BroodLord", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(3, 3, 4, 5), "HybridDestroyer", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Overseer", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Infestor", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        AIAttackWaveSetGatherEarlyNoReplace(lv_thisAIPlayer);
        AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
        gv_statWavessent += 1;
        Wait((90.0 - IntToFixed(lv_wAITTime)), c_timeAI);
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(15, 15, 18, 22), "Baneling", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(3, 3, 4, 5), "HybridDestroyer", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Overseer", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Infestor", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        AIAttackWaveSetGatherEarlyNoReplace(lv_thisAIPlayer);
        AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
        gv_statWavessent += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWavesStage1RepeatingP05NE_Init () {
    gt_AttackWavesStage1RepeatingP05NE = TriggerCreate("gt_AttackWavesStage1RepeatingP05NE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Waves - Stage 1 Repeating - P06 SE
//--------------------------------------------------------------------------------------------------
bool gt_AttackWavesStage1RepeatingP06SE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_thisAIPlayer;
    point lv_thisAISpawn;
    int lv_wAITTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_thisAIPlayer = gv_p06_ZERG_SE;
    lv_thisAISpawn = RegionGetCenter(RegionFromId(46));
    lv_wAITTime = 45;
    while (true) {
        Wait((90.0 - IntToFixed(lv_wAITTime)), c_timeAI);
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(25, 25, 33, 40), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(5, 5, 6, 8), "Hydralisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Overseer", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        AIAttackWaveSetGatherEarlyNoReplace(lv_thisAIPlayer);
        AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
        gv_statWavessent += 1;
        Wait((90.0 - IntToFixed(lv_wAITTime)), c_timeAI);
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(10, 10, 12, 14), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(6, 6, 8, 10), "Roach", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(3, 3, 5, 7), "Ultralisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Overseer", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        AIAttackWaveSetGatherEarlyNoReplace(lv_thisAIPlayer);
        AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
        gv_statWavessent += 1;
        Wait((90.0 - IntToFixed(lv_wAITTime)), c_timeAI);
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(33, 33, 39, 50), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(7, 7, 10, 10), "Hydralisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Overseer", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        AIAttackWaveSetGatherEarlyNoReplace(lv_thisAIPlayer);
        AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
        gv_statWavessent += 1;
        Wait((90.0 - IntToFixed(lv_wAITTime)), c_timeAI);
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(60, 60, 75, 88), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Ultralisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "HybridReaver", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Overseer", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Infestor", 0, lv_thisAIPlayer, lv_thisAISpawn);
        AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
        AIAttackWaveSetGatherEarlyNoReplace(lv_thisAIPlayer);
        AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
        gv_statWavessent += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWavesStage1RepeatingP06SE_Init () {
    gt_AttackWavesStage1RepeatingP06SE = TriggerCreate("gt_AttackWavesStage1RepeatingP06SE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Waves - Stage 2 - P04 NW
//--------------------------------------------------------------------------------------------------
bool gt_AttackWavesStage2P04NW_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_thisAIPlayer;
    point lv_thisAISpawn;
    int lv_wAITTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_thisAIPlayer = gv_p04_ZERG_NW;
    lv_thisAISpawn = RegionGetCenter(RegionFromId(48));
    lv_wAITTime = 35;
    AIAttackWaveSetGatherPoint(gv_p04_ZERG_NW, PointFromId(131));
    Wait((120.0 - IntToFixed(lv_wAITTime)), c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(18, 18, 21, 29), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(5, 5, 6, 8), "Hydralisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(4, 4, 4, 3), "HybridReaver", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Overseer", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
    gv_statWavessent += 1;
    Wait((90.0 - IntToFixed(lv_wAITTime)), c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(9, 9, 11, 13), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(6, 6, 8, 10), "Roach", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(4, 4, 6, 8), "Ultralisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Infestor", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Overseer", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
    gv_statWavessent += 1;
    Wait((60.0 - IntToFixed(lv_wAITTime)), c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(34, 34, 50, 61), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(6, 6, 6, 6), "Hydralisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(3, 3, 4, 5), "Ultralisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Infestor", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Overseer", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(4, 4, 4, 5), "HybridReaver", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
    gv_statWavessent += 1;
    Wait(30.0, c_timeAI);
    while (true) {
        Wait((90.0 - IntToFixed(lv_wAITTime)), c_timeAI);
        if ((UnitGroupCount(gv_gGWavesUnitGroup, c_unitCountAlive) <= 350)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(7, 7, 9, 10), "Hydralisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(2, 2, 2, 2), "HybridDestroyer", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, false);
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Infestor", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(21, 21, 27, 35), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Overseer", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
            gv_statWavessent += 1;
        }

        Wait((90.0 - IntToFixed(lv_wAITTime)), c_timeAI);
        if ((UnitGroupCount(gv_gGWavesUnitGroup, c_unitCountAlive) <= 350)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(6, 6, 6, 6), "Mutalisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(3, 3, 3, 3), "HybridDestroyer", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, false);
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(8, 8, 10, 12), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Overseer", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(6, 6, 8, 10), "Roach", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(3, 3, 4, 6), "Ultralisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
            gv_statWavessent += 1;
        }

        Wait((90.0 - IntToFixed(lv_wAITTime)), c_timeAI);
        if ((UnitGroupCount(gv_gGWavesUnitGroup, c_unitCountAlive) <= 350)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(27, 27, 43, 54), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 2, 3, 4), "Ultralisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(3, 3, 3, 4), "HybridReaver", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Infestor", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(3, 3, 3, 4), "Overseer", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
            gv_statWavessent += 1;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWavesStage2P04NW_Init () {
    gt_AttackWavesStage2P04NW = TriggerCreate("gt_AttackWavesStage2P04NW_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Waves - Stage 2 - P05 NE
//--------------------------------------------------------------------------------------------------
bool gt_AttackWavesStage2P05NE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_thisAIPlayer;
    point lv_thisAISpawn;
    int lv_wAITTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_thisAIPlayer = gv_p05_ZERG_NE;
    lv_thisAISpawn = RegionGetCenter(RegionFromId(49));
    lv_wAITTime = 35;
    AIAttackWaveSetGatherPoint(gv_p05_ZERG_NE, PointFromId(154));
    Wait((60.0 - IntToFixed(lv_wAITTime)), c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(10, 10, 13, 14), "Hydralisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(5, 5, 6, 7), "HybridReaver", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(8, 8, 11, 16), "Baneling", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
    gv_statWavessent += 1;
    Wait((90.0 - IntToFixed(lv_wAITTime)), c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(21, 21, 24, 31), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(12, 12, 13, 15), "Baneling", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(3, 3, 4, 5), "HybridReaver", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Overseer", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
    gv_statWavessent += 1;
    Wait((120.0 - IntToFixed(lv_wAITTime)), c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(4, 4, 4, 5), "HybridReaver", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(2, 2, 2, 2), "HybridDestroyer", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Overseer", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
    gv_statWavessent += 1;
    while (true) {
        Wait((90.0 - IntToFixed(lv_wAITTime)), c_timeAI);
        if ((UnitGroupCount(gv_gGWavesUnitGroup, c_unitCountAlive) <= 350)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(15, 15, 18, 25), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(4, 5, 6, 7), "HybridDestroyer", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
            gv_statWavessent += 1;
        }

        Wait((90.0 - IntToFixed(lv_wAITTime)), c_timeAI);
        if ((UnitGroupCount(gv_gGWavesUnitGroup, c_unitCountAlive) <= 350)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(7, 7, 9, 11), "Hydralisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Overseer", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, false);
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(10, 10, 13, 15), "Baneling", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(3, 3, 4, 5), "HybridReaver", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
            gv_statWavessent += 1;
        }

        Wait((90.0 - IntToFixed(lv_wAITTime)), c_timeAI);
        if ((UnitGroupCount(gv_gGWavesUnitGroup, c_unitCountAlive) <= 350)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(4, 4, 4, 4), "Mutalisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(2, 2, 2, 2), "HybridDestroyer", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Overseer", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, false);
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(3, 3, 4, 5), "HybridReaver", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
            gv_statWavessent += 1;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWavesStage2P05NE_Init () {
    gt_AttackWavesStage2P05NE = TriggerCreate("gt_AttackWavesStage2P05NE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Waves - Stage 2 - P06 SE
//--------------------------------------------------------------------------------------------------
bool gt_AttackWavesStage2P06SE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_thisAIPlayer;
    point lv_thisAISpawn;
    int lv_wAITTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_thisAIPlayer = gv_p06_ZERG_SE;
    lv_thisAISpawn = RegionGetCenter(RegionFromId(46));
    lv_wAITTime = 35;
    AIAttackWaveSetGatherPoint(gv_p06_ZERG_SE, PointFromId(293));
    Wait((90.0 - IntToFixed(lv_wAITTime)), c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(18, 18, 21, 29), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(3, 3, 3, 3), "HybridDestroyer", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(3, 3, 4, 6), "Hydralisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Overseer", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
    gv_statWavessent += 1;
    Wait((90.0 - IntToFixed(lv_wAITTime)), c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(10, 10, 12, 14), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(6, 6, 6, 6), "Mutalisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(2, 2, 2, 3), "Ultralisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "HybridReaver", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(6, 6, 8, 10), "Roach", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Overseer", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
    gv_statWavessent += 1;
    Wait((150.0 - IntToFixed(lv_wAITTime)), c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(23, 23, 35, 68), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(4, 4, 5, 6), "Ultralisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(3, 3, 4, 5), "HybridReaver", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Overseer", 0, lv_thisAIPlayer, lv_thisAISpawn);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
    AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
    gv_statWavessent += 1;
    while (true) {
        Wait((90.0 - IntToFixed(lv_wAITTime)), c_timeAI);
        if ((UnitGroupCount(gv_gGWavesUnitGroup, c_unitCountAlive) <= 350)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(6, 6, 7, 8), "Hydralisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Overseer", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, false);
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(19, 19, 24, 32), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(3, 3, 3, 3), "HybridReaver", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
            gv_statWavessent += 1;
        }

        Wait((90.0 - IntToFixed(lv_wAITTime)), c_timeAI);
        if ((UnitGroupCount(gv_gGWavesUnitGroup, c_unitCountAlive) <= 350)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(6, 6, 8, 9), "Hydralisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(2, 2, 2, 2), "HybridDestroyer", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Overseer", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, false);
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(25, 25, 32, 42), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
            gv_statWavessent += 1;
        }

        Wait((90.0 - IntToFixed(lv_wAITTime)), c_timeAI);
        if ((UnitGroupCount(gv_gGWavesUnitGroup, c_unitCountAlive) <= 350)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(7, 7, 7, 7), "Mutalisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(5, 5, 5, 6), "HybridDestroyer", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Overseer", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, false);
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(20, 25, 35, 50), "Zergling", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Ultralisk", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsWithDefaultFacing(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Infestor", 0, lv_thisAIPlayer, lv_thisAISpawn);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(lv_thisAIPlayer, UnitLastCreatedGroup());
            AIAttackWaveSend(lv_thisAIPlayer, lv_wAITTime, true);
            gv_statWavessent += 1;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWavesStage2P06SE_Init () {
    gt_AttackWavesStage2P06SE = TriggerCreate("gt_AttackWavesStage2P06SE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Has No Structures
//--------------------------------------------------------------------------------------------------
bool gt_PlayerHasNoStructures_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((UnitGroupCount(UnitGroup(null, gv_p01_PLAYER, RegionEntireMap(), UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (gv_inCinematic == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_AttackWavesEndGameAirKillers, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerHasNoStructures_Init () {
    gt_PlayerHasNoStructures = TriggerCreate("gt_PlayerHasNoStructures_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Has No Ground Units And Structures
//--------------------------------------------------------------------------------------------------
bool gt_PlayerHasNoGroundUnitsAndStructures_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2349CB4A_g;
    int auto2349CB4A_u;
    unit auto2349CB4A_var;
    unitgroup autoD69B4807_g;
    int autoD69B4807_u;
    unit autoD69B4807_var;
    unitgroup auto1A6B2BE7_g;
    int auto1A6B2BE7_u;
    unit auto1A6B2BE7_var;
    unitgroup autoDE45E3C3_g;
    int autoDE45E3C3_u;
    unit autoDE45E3C3_var;
    unitgroup autoFCFC6CC1_g;
    int autoFCFC6CC1_u;
    unit autoFCFC6CC1_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((UnitGroupCount(UnitGroup(null, gv_p01_PLAYER, RegionEntireMap(), UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (gv_inCinematic == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerStop(gt_AttackWavesStage1P04NW);
    TriggerStop(gt_AttackWavesStage1P05NE);
    TriggerStop(gt_AttackWavesStage1P06SE);
    TriggerStop(gt_AttackWavesStage1RepeatingP04NW);
    TriggerStop(gt_AttackWavesStage1RepeatingP05NE);
    TriggerStop(gt_AttackWavesStage1RepeatingP06SE);
    TriggerEnable(gt_AttackWavesStage1RepeatingP04NW, false);
    TriggerEnable(gt_AttackWavesStage1RepeatingP05NE, false);
    TriggerEnable(gt_AttackWavesStage1RepeatingP06SE, false);
    TriggerStop(gt_AttackWavesStage2P04NW);
    TriggerStop(gt_AttackWavesStage2P05NE);
    TriggerStop(gt_AttackWavesStage2P06SE);
    TriggerEnable(gt_AttackWavesStage2P04NW, false);
    TriggerEnable(gt_AttackWavesStage2P05NE, false);
    TriggerEnable(gt_AttackWavesStage2P06SE, false);
    auto2349CB4A_g = UnitGroup("Zergling", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2349CB4A_u = UnitGroupCount(auto2349CB4A_g, c_unitCountAll);
    for (;; auto2349CB4A_u -= 1) {
        auto2349CB4A_var = UnitGroupUnitFromEnd(auto2349CB4A_g, auto2349CB4A_u);
        if (auto2349CB4A_var == null) { break; }
        AIRemoveUnitFromAnyWaves(auto2349CB4A_var);
        UnitGroupRemove(gv_gGWavesUnitGroup, auto2349CB4A_var);
    }
    autoD69B4807_g = UnitGroup("Ultralisk", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD69B4807_u = UnitGroupCount(autoD69B4807_g, c_unitCountAll);
    for (;; autoD69B4807_u -= 1) {
        autoD69B4807_var = UnitGroupUnitFromEnd(autoD69B4807_g, autoD69B4807_u);
        if (autoD69B4807_var == null) { break; }
        AIRemoveUnitFromAnyWaves(autoD69B4807_var);
        UnitGroupRemove(gv_gGWavesUnitGroup, autoD69B4807_var);
    }
    auto1A6B2BE7_g = UnitGroup("Roach", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1A6B2BE7_u = UnitGroupCount(auto1A6B2BE7_g, c_unitCountAll);
    for (;; auto1A6B2BE7_u -= 1) {
        auto1A6B2BE7_var = UnitGroupUnitFromEnd(auto1A6B2BE7_g, auto1A6B2BE7_u);
        if (auto1A6B2BE7_var == null) { break; }
        AIRemoveUnitFromAnyWaves(auto1A6B2BE7_var);
        UnitGroupRemove(gv_gGWavesUnitGroup, auto1A6B2BE7_var);
    }
    autoDE45E3C3_g = UnitGroup("HybridDestroyer", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDE45E3C3_u = UnitGroupCount(autoDE45E3C3_g, c_unitCountAll);
    for (;; autoDE45E3C3_u -= 1) {
        autoDE45E3C3_var = UnitGroupUnitFromEnd(autoDE45E3C3_g, autoDE45E3C3_u);
        if (autoDE45E3C3_var == null) { break; }
        AIRemoveUnitFromAnyWaves(autoDE45E3C3_var);
        UnitGroupRemove(gv_gGWavesUnitGroup, autoDE45E3C3_var);
    }
    autoFCFC6CC1_g = UnitGroup("Baneling", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFCFC6CC1_u = UnitGroupCount(autoFCFC6CC1_g, c_unitCountAll);
    for (;; autoFCFC6CC1_u -= 1) {
        autoFCFC6CC1_var = UnitGroupUnitFromEnd(autoFCFC6CC1_g, autoFCFC6CC1_u);
        if (autoFCFC6CC1_var == null) { break; }
        AIRemoveUnitFromAnyWaves(autoFCFC6CC1_var);
        UnitGroupRemove(gv_gGWavesUnitGroup, autoFCFC6CC1_var);
    }
    AIAttackWaveCancel(WaveLastCreated());
    TriggerExecute(gt_AttackWavesEndGameAirKillers, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerHasNoGroundUnitsAndStructures_Init () {
    gt_PlayerHasNoGroundUnitsAndStructures = TriggerCreate("gt_PlayerHasNoGroundUnitsAndStructures_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Waves - End Game - Air Killers
//--------------------------------------------------------------------------------------------------
bool gt_AttackWavesEndGameAirKillers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_EndGameCreepTumorCorruption, true, false);
    TriggerExecute(gt_TransmissionHybridIncoming2Q, true, false);
    if ((PlayerDifficulty(gv_p01_PLAYER) == 1)) {
        PlayerModifyPropertyInt(gv_p04_ZERG_NW, c_playerPropHandicap, c_playerPropOperSetTo, 75);
        PlayerModifyPropertyInt(gv_p05_ZERG_NE, c_playerPropHandicap, c_playerPropOperSetTo, 75);
        PlayerModifyPropertyInt(gv_p06_ZERG_SE, c_playerPropHandicap, c_playerPropOperSetTo, 75);
        PlayerModifyPropertyInt(gv_p07_FRENZIED_ZERG, c_playerPropHandicap, c_playerPropOperSetTo, 75);
    }

    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(7, 7, 8, 11), "Mutalisk", 0, gv_p05_ZERG_NE, RegionRandomPoint(RegionFromId(2)));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(gv_p05_ZERG_NE, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Overseer", 0, gv_p05_ZERG_NE, RegionRandomPoint(RegionFromId(2)));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(gv_p05_ZERG_NE, UnitLastCreatedGroup());
    AIAttackWaveSend(gv_p05_ZERG_NE, 0, false);
    gv_statWavessent += 1;
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(4, 4, 5, 6), "Hydralisk", 0, gv_p05_ZERG_NE, RegionRandomPoint(RegionFromId(2)));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(gv_p05_ZERG_NE, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(4, 4, 5, 6), "HybridDestroyer", 0, gv_p05_ZERG_NE, RegionRandomPoint(RegionFromId(2)));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(gv_p05_ZERG_NE, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Overseer", 0, gv_p05_ZERG_NE, RegionRandomPoint(RegionFromId(2)));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(gv_p05_ZERG_NE, UnitLastCreatedGroup());
    AIAttackWaveSend(gv_p05_ZERG_NE, 0, false);
    gv_statWavessent += 1;
    Wait(gf_WaitSpecial(60.0, 20.0), c_timeAI);
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(5, 5, 7, 9), "Mutalisk", 0, gv_p06_ZERG_SE, RegionRandomPoint(RegionFromId(4)));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(gv_p06_ZERG_SE, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(3, 3, 4, 6), "Corruptor", 0, gv_p06_ZERG_SE, RegionRandomPoint(RegionFromId(4)));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(gv_p06_ZERG_SE, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Overseer", 0, gv_p06_ZERG_SE, RegionRandomPoint(RegionFromId(2)));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(gv_p06_ZERG_SE, UnitLastCreatedGroup());
    AIAttackWaveSend(gv_p06_ZERG_SE, 0, false);
    gv_statWavessent += 1;
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(3, 3, 4, 5), "Hydralisk", 0, gv_p06_ZERG_SE, RegionRandomPoint(RegionFromId(4)));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(gv_p06_ZERG_SE, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(4, 4, 5, 6), "HybridDestroyer", 0, gv_p06_ZERG_SE, RegionRandomPoint(RegionFromId(4)));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(gv_p06_ZERG_SE, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Overseer", 0, gv_p06_ZERG_SE, RegionRandomPoint(RegionFromId(2)));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(gv_p06_ZERG_SE, UnitLastCreatedGroup());
    AIAttackWaveSend(gv_p06_ZERG_SE, 0, false);
    gv_statWavessent += 1;
    Wait(gf_WaitSpecial(50.0, 20.0), c_timeAI);
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(6, 6, 8, 10), "Mutalisk", 0, gv_p04_ZERG_NW, RegionRandomPoint(RegionFromId(3)));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(gv_p04_ZERG_NW, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(4, 4, 5, 6), "Corruptor", 0, gv_p04_ZERG_NW, RegionRandomPoint(RegionFromId(3)));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(gv_p04_ZERG_NW, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Overseer", 0, gv_p04_ZERG_NW, RegionRandomPoint(RegionFromId(2)));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(gv_p04_ZERG_NW, UnitLastCreatedGroup());
    AIAttackWaveSend(gv_p04_ZERG_NW, 0, false);
    gv_statWavessent += 1;
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(6, 6, 8, 9), "Hydralisk", 0, gv_p04_ZERG_NW, RegionRandomPoint(RegionFromId(3)));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(gv_p04_ZERG_NW, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(7, 7, 8, 9), "HybridDestroyer", 0, gv_p04_ZERG_NW, RegionRandomPoint(RegionFromId(3)));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(gv_p04_ZERG_NW, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Overseer", 0, gv_p04_ZERG_NW, RegionRandomPoint(RegionFromId(2)));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
    AIAttackWaveUseGroup(gv_p04_ZERG_NW, UnitLastCreatedGroup());
    AIAttackWaveSend(gv_p04_ZERG_NW, 0, false);
    gv_statWavessent += 1;
    Wait(gf_WaitSpecial(40.0, 20.0), c_timeAI);
    if ((PlayerDifficulty(gv_p01_PLAYER) == 1)) {
        PlayerModifyPropertyInt(gv_p04_ZERG_NW, c_playerPropHandicap, c_playerPropOperSetTo, 100);
        PlayerModifyPropertyInt(gv_p05_ZERG_NE, c_playerPropHandicap, c_playerPropOperSetTo, 100);
        PlayerModifyPropertyInt(gv_p06_ZERG_SE, c_playerPropHandicap, c_playerPropOperSetTo, 100);
        PlayerModifyPropertyInt(gv_p07_FRENZIED_ZERG, c_playerPropHandicap, c_playerPropOperSetTo, 100);
    }

    while (true) {
        if ((UnitGroupCount(gv_gGWavesUnitGroup, c_unitCountAlive) <= 350)) {
            libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(8, 8, 10, 12), "Mutalisk", 0, gv_p05_ZERG_NE, RegionRandomPoint(RegionFromId(2)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(gv_p05_ZERG_NE, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(5, 5, 7, 8), "Corruptor", 0, gv_p05_ZERG_NE, RegionRandomPoint(RegionFromId(2)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(gv_p05_ZERG_NE, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Overseer", 0, gv_p05_ZERG_NE, RegionRandomPoint(RegionFromId(2)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(gv_p05_ZERG_NE, UnitLastCreatedGroup());
            AIAttackWaveSend(gv_p05_ZERG_NE, 0, false);
            gv_statWavessent += 1;
            libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(6, 6, 9, 12), "Hydralisk", 0, gv_p05_ZERG_NE, RegionRandomPoint(RegionFromId(2)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(gv_p05_ZERG_NE, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(4, 4, 5, 6), "HybridDestroyer", 0, gv_p05_ZERG_NE, RegionRandomPoint(RegionFromId(2)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(gv_p05_ZERG_NE, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Overseer", 0, gv_p05_ZERG_NE, RegionRandomPoint(RegionFromId(2)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(gv_p05_ZERG_NE, UnitLastCreatedGroup());
            AIAttackWaveSend(gv_p05_ZERG_NE, 0, false);
            gv_statWavessent += 1;
        }

        Wait(gf_WaitSpecial(30.0, 15.0), c_timeAI);
        if ((UnitGroupCount(gv_gGWavesUnitGroup, c_unitCountAlive) <= 350)) {
            libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(10, 10, 12, 14), "Mutalisk", 0, gv_p06_ZERG_SE, RegionRandomPoint(RegionFromId(4)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(gv_p06_ZERG_SE, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(5, 5, 7, 8), "Corruptor", 0, gv_p06_ZERG_SE, RegionRandomPoint(RegionFromId(4)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(gv_p06_ZERG_SE, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Overseer", 0, gv_p06_ZERG_SE, RegionRandomPoint(RegionFromId(2)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(gv_p06_ZERG_SE, UnitLastCreatedGroup());
            AIAttackWaveSend(gv_p06_ZERG_SE, 0, false);
            gv_statWavessent += 1;
            libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(4, 4, 7, 8), "Hydralisk", 0, gv_p06_ZERG_SE, RegionRandomPoint(RegionFromId(4)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(gv_p06_ZERG_SE, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(5, 5, 7, 8), "HybridDestroyer", 0, gv_p06_ZERG_SE, RegionRandomPoint(RegionFromId(4)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(gv_p06_ZERG_SE, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Overseer", 0, gv_p06_ZERG_SE, RegionRandomPoint(RegionFromId(2)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(gv_p06_ZERG_SE, UnitLastCreatedGroup());
            AIAttackWaveSend(gv_p06_ZERG_SE, 0, false);
            gv_statWavessent += 1;
        }

        Wait(gf_WaitSpecial(30.0, 15.0), c_timeAI);
        if ((UnitGroupCount(gv_gGWavesUnitGroup, c_unitCountAlive) <= 350)) {
            libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(11, 11, 13, 15), "Mutalisk", 0, gv_p04_ZERG_NW, RegionRandomPoint(RegionFromId(3)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(gv_p04_ZERG_NW, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(5, 5, 7, 8), "Corruptor", 0, gv_p04_ZERG_NW, RegionRandomPoint(RegionFromId(3)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(gv_p04_ZERG_NW, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Overseer", 0, gv_p04_ZERG_NW, RegionRandomPoint(RegionFromId(2)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(gv_p04_ZERG_NW, UnitLastCreatedGroup());
            AIAttackWaveSend(gv_p04_ZERG_NW, 0, false);
            gv_statWavessent += 1;
            libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(11, 11, 15, 18), "Hydralisk", 0, gv_p04_ZERG_NW, RegionRandomPoint(RegionFromId(3)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(gv_p04_ZERG_NW, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "HybridDestroyer", 0, gv_p04_ZERG_NW, RegionRandomPoint(RegionFromId(3)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(gv_p04_ZERG_NW, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), "Overseer", 0, gv_p04_ZERG_NW, RegionRandomPoint(RegionFromId(2)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_gGWavesUnitGroup);
            AIAttackWaveUseGroup(gv_p04_ZERG_NW, UnitLastCreatedGroup());
            AIAttackWaveSend(gv_p04_ZERG_NW, 0, false);
            gv_statWavessent += 1;
        }

        Wait(gf_WaitSpecial(30.0, 15.0), c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWavesEndGameAirKillers_Init () {
    gt_AttackWavesEndGameAirKillers = TriggerCreate("gt_AttackWavesEndGameAirKillers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: End Game - Creep Tumor Corruption
//--------------------------------------------------------------------------------------------------
bool gt_EndGameCreepTumorCorruption_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_creepTumorPoint;

    // Automatic Variable Declarations
    const int auto5EE285B2_n = 10;
    int auto5EE285B2_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((UnitGroupCount(UnitGroup("CreepTumorBurrowed", gv_p07_FRENZIED_ZERG, RegionCircle(lv_creepTumorPoint, 9.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 12)) {
            lv_creepTumorPoint = null;
            for (auto5EE285B2_i = 1; auto5EE285B2_i <= auto5EE285B2_n; auto5EE285B2_i += 1) {
                lv_creepTumorPoint = RegionRandomPoint(RegionFromId(6));
                if (((UnitGroupCount(UnitGroup("CreepTumor", gv_p07_FRENZIED_ZERG, RegionCircle(lv_creepTumorPoint, 9.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("CreepTumorBurrowed", gv_p07_FRENZIED_ZERG, RegionCircle(lv_creepTumorPoint, 9.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("NydusCanal", gv_p07_FRENZIED_ZERG, RegionCircle(lv_creepTumorPoint, 9.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
                    Wait(0.1, c_timeGame);
                    lv_creepTumorPoint = RegionRandomPoint(RegionFromId(6));
                }
                else {
                    break;
                }
            }
            libCamp_gf_CreateDropPod(libCamp_ge_DropPodRace_Zerg, lv_creepTumorPoint, UnitGroupEmpty(), true);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumor", c_unitCreateConstruct, gv_p07_FRENZIED_ZERG, lv_creepTumorPoint);
            Wait(RandomFixed(5.0, 25.0), c_timeGame);
        }
        else {
            Wait(10.0, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndGameCreepTumorCorruption_Init () {
    gt_EndGameCreepTumorCorruption = TriggerCreate("gt_EndGameCreepTumorCorruption_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swarm Wave A1 P04 NW
//--------------------------------------------------------------------------------------------------
bool gt_SwarmWaveA1P04NW_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_thisAIPlayer;

    // Automatic Variable Declarations
    int autoFAE568AC_n;
    int autoFAE568AC_i;
    int auto27D1645F_n;
    int auto27D1645F_i;
    int autoC22C0CC1_n;
    int autoC22C0CC1_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_thisAIPlayer = gv_p04_ZERG_NW;
    autoFAE568AC_n = libNtve_gf_DifficultyValueInt(30, 30, 36, 42);
    for (autoFAE568AC_i = 1; autoFAE568AC_i <= autoFAE568AC_n; autoFAE568AC_i += 1) {
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    auto27D1645F_n = libNtve_gf_DifficultyValueInt(10, 10, 12, 16);
    for (auto27D1645F_i = 1; auto27D1645F_i <= auto27D1645F_n; auto27D1645F_i += 1) {
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    autoC22C0CC1_n = libNtve_gf_DifficultyValueInt(3, 3, 5, 5);
    for (autoC22C0CC1_i = 1; autoC22C0CC1_i <= autoC22C0CC1_n; autoC22C0CC1_i += 1) {
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        gf_SpawnSuicidalAttackerGround("HydraliskBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround(libNtve_gf_DifficultyValueUnitType("ZerglingBurrowed", "ZerglingBurrowed", "RoachBurrowed", "HydraliskBurrowed"), lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        gf_SpawnSuicidalAttackerAir("Mutalisk", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("RoachBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerAir("Mutalisk", lv_thisAIPlayer);
        gf_SpawnSuicidalAttackerGround("RoachBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    gv_statWavessent += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwarmWaveA1P04NW_Init () {
    gt_SwarmWaveA1P04NW = TriggerCreate("gt_SwarmWaveA1P04NW_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swarm Wave A2 P06 SE
//--------------------------------------------------------------------------------------------------
bool gt_SwarmWaveA2P06SE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_thisAIPlayer;

    // Automatic Variable Declarations
    int auto33EEC633_n;
    int auto33EEC633_i;
    int autoB843B211_n;
    int autoB843B211_i;
    int autoF3422D4F_n;
    int autoF3422D4F_i;
    int auto58064E32_n;
    int auto58064E32_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_thisAIPlayer = gv_p06_ZERG_SE;
    auto33EEC633_n = libNtve_gf_DifficultyValueInt(30, 30, 35, 40);
    for (auto33EEC633_i = 1; auto33EEC633_i <= auto33EEC633_n; auto33EEC633_i += 1) {
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    gv_statWavessent += 1;
    autoB843B211_n = libNtve_gf_DifficultyValueInt(10, 10, 12, 16);
    for (autoB843B211_i = 1; autoB843B211_i <= autoB843B211_n; autoB843B211_i += 1) {
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    gv_statWavessent += 1;
    autoF3422D4F_n = libNtve_gf_DifficultyValueInt(3, 3, 5, 5);
    for (autoF3422D4F_i = 1; autoF3422D4F_i <= autoF3422D4F_n; autoF3422D4F_i += 1) {
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        gf_SpawnSuicidalAttackerGround("HydraliskBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround(libNtve_gf_DifficultyValueUnitType("ZerglingBurrowed", "ZerglingBurrowed", "RoachBurrowed", "HydraliskBurrowed"), lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("RoachBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("RoachBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    gv_statWavessent += 1;
    auto58064E32_n = libNtve_gf_DifficultyValueInt(0, 0, 1, 2);
    for (auto58064E32_i = 1; auto58064E32_i <= auto58064E32_n; auto58064E32_i += 1) {
        gf_SpawnSuicidalAttackerAir("BroodLord", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwarmWaveA2P06SE_Init () {
    gt_SwarmWaveA2P06SE = TriggerCreate("gt_SwarmWaveA2P06SE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swarm Wave A3 P05 NE
//--------------------------------------------------------------------------------------------------
bool gt_SwarmWaveA3P05NE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_thisAIPlayer;

    // Automatic Variable Declarations
    int auto15B5B136_n;
    int auto15B5B136_i;
    int autoF1EBF04E_n;
    int autoF1EBF04E_i;
    int auto9E1420EA_n;
    int auto9E1420EA_i;
    int auto45D74F2A_n;
    int auto45D74F2A_i;
    int autoD8AE2D15_n;
    int autoD8AE2D15_i;
    int auto0D4ECED2_n;
    int auto0D4ECED2_i;
    int autoCAAC169E_n;
    int autoCAAC169E_i;
    int auto82F1AD18_n;
    int auto82F1AD18_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_thisAIPlayer = gv_p05_ZERG_NE;
    auto15B5B136_n = libNtve_gf_DifficultyValueInt(30, 30, 35, 40);
    for (auto15B5B136_i = 1; auto15B5B136_i <= auto15B5B136_n; auto15B5B136_i += 1) {
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    autoF1EBF04E_n = libNtve_gf_DifficultyValueInt(10, 10, 18, 35);
    for (autoF1EBF04E_i = 1; autoF1EBF04E_i <= autoF1EBF04E_n; autoF1EBF04E_i += 1) {
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    auto9E1420EA_n = libNtve_gf_DifficultyValueInt(3, 3, 3, 3);
    for (auto9E1420EA_i = 1; auto9E1420EA_i <= auto9E1420EA_n; auto9E1420EA_i += 1) {
        gf_SpawnSuicidalAttackerAir("Mutalisk", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerAir("Mutalisk", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("RoachBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("HydraliskBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("RoachBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerAir("Mutalisk", lv_thisAIPlayer);
    }
    Wait(10.0, c_timeAI);
    gf_SpawnSuicidalAttackerGround("HybridReaver", lv_thisAIPlayer);
    Wait(0.5, c_timeAI);
    gf_SpawnSuicidalAttackerGround("HybridDestroyer", lv_thisAIPlayer);
    Wait(0.5, c_timeAI);
    auto45D74F2A_n = libNtve_gf_DifficultyValueInt(0, 0, 1, 1);
    for (auto45D74F2A_i = 1; auto45D74F2A_i <= auto45D74F2A_n; auto45D74F2A_i += 1) {
        gf_SpawnSuicidalAttackerGround("HybridReaver", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    autoD8AE2D15_n = libNtve_gf_DifficultyValueInt(0, 0, 0, 2);
    for (autoD8AE2D15_i = 1; autoD8AE2D15_i <= autoD8AE2D15_n; autoD8AE2D15_i += 1) {
        gf_SpawnSuicidalAttackerGround("Infestor", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    auto0D4ECED2_n = libNtve_gf_DifficultyValueInt(6, 6, 8, 9);
    for (auto0D4ECED2_i = 1; auto0D4ECED2_i <= auto0D4ECED2_n; auto0D4ECED2_i += 1) {
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    gf_SpawnSuicidalAttackerGround("HybridDestroyer", lv_thisAIPlayer);
    Wait(0.5, c_timeAI);
    autoCAAC169E_n = libNtve_gf_DifficultyValueInt(4, 4, 5, 5);
    for (autoCAAC169E_i = 1; autoCAAC169E_i <= autoCAAC169E_n; autoCAAC169E_i += 1) {
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        gf_SpawnSuicidalAttackerGround("RoachBurrowed", lv_thisAIPlayer);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    auto82F1AD18_n = libNtve_gf_DifficultyValueInt(2, 2, 2, 2);
    for (auto82F1AD18_i = 1; auto82F1AD18_i <= auto82F1AD18_n; auto82F1AD18_i += 1) {
        gf_SpawnSuicidalAttackerGround("UltraliskBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    gv_statWavessent += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwarmWaveA3P05NE_Init () {
    gt_SwarmWaveA3P05NE = TriggerCreate("gt_SwarmWaveA3P05NE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swarm Wave B1 P06 SE
//--------------------------------------------------------------------------------------------------
bool gt_SwarmWaveB1P06SE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_thisAIPlayer;

    // Automatic Variable Declarations
    int auto3941E7B5_n;
    int auto3941E7B5_i;
    int autoA843F72E_n;
    int autoA843F72E_i;
    int autoCD31883B_n;
    int autoCD31883B_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_thisAIPlayer = gv_p06_ZERG_SE;
    auto3941E7B5_n = libNtve_gf_DifficultyValueInt(25, 25, 35, 45);
    for (auto3941E7B5_i = 1; auto3941E7B5_i <= auto3941E7B5_n; auto3941E7B5_i += 1) {
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    autoA843F72E_n = libNtve_gf_DifficultyValueInt(5, 5, 5, 5);
    for (autoA843F72E_i = 1; autoA843F72E_i <= autoA843F72E_n; autoA843F72E_i += 1) {
        gf_SpawnSuicidalAttackerGround(libNtve_gf_DifficultyValueUnitType("ZerglingBurrowed", "ZerglingBurrowed", "RoachBurrowed", "RoachBurrowed"), lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerAir("Mutalisk", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerAir("Mutalisk", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("HydraliskBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    autoCD31883B_n = libNtve_gf_DifficultyValueInt(10, 10, 15, 22);
    for (autoCD31883B_i = 1; autoCD31883B_i <= autoCD31883B_n; autoCD31883B_i += 1) {
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    gf_SpawnSuicidalAttackerGround("RoachBurrowed", lv_thisAIPlayer);
    Wait(0.5, c_timeAI);
    gf_SpawnSuicidalAttackerAir("Overseer", lv_thisAIPlayer);
    Wait(0.5, c_timeAI);
    gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
    Wait(0.5, c_timeAI);
    gf_SpawnSuicidalAttackerGround(libNtve_gf_DifficultyValueUnitType("RoachBurrowed", "RoachBurrowed", "UltraliskBurrowed", "UltraliskBurrowed"), lv_thisAIPlayer);
    Wait(0.5, c_timeAI);
    gf_SpawnSuicidalAttackerAir("Overseer", lv_thisAIPlayer);
    Wait(0.5, c_timeAI);
    gf_SpawnSuicidalAttackerGround(libNtve_gf_DifficultyValueUnitType("HybridReaver", "HybridReaver", "HybridDestroyer", "HybridDestroyer"), lv_thisAIPlayer);
    gv_statWavessent += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwarmWaveB1P06SE_Init () {
    gt_SwarmWaveB1P06SE = TriggerCreate("gt_SwarmWaveB1P06SE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swarm Wave B2 P04 NW
//--------------------------------------------------------------------------------------------------
bool gt_SwarmWaveB2P04NW_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_thisAIPlayer;

    // Automatic Variable Declarations
    int autoDA69AE73_n;
    int autoDA69AE73_i;
    int autoD19704F5_n;
    int autoD19704F5_i;
    int autoB02CA754_n;
    int autoB02CA754_i;
    int auto76DE3D68_n;
    int auto76DE3D68_i;
    int autoD863E98C_n;
    int autoD863E98C_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_thisAIPlayer = gv_p04_ZERG_NW;
    autoDA69AE73_n = libNtve_gf_DifficultyValueInt(25, 25, 40, 45);
    for (autoDA69AE73_i = 1; autoDA69AE73_i <= autoDA69AE73_n; autoDA69AE73_i += 1) {
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    autoD19704F5_n = libNtve_gf_DifficultyValueInt(5, 5, 5, 6);
    for (autoD19704F5_i = 1; autoD19704F5_i <= autoD19704F5_n; autoD19704F5_i += 1) {
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerAir("Mutalisk", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("HydraliskBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    autoB02CA754_n = libNtve_gf_DifficultyValueInt(0, 0, 1, 1);
    for (autoB02CA754_i = 1; autoB02CA754_i <= autoB02CA754_n; autoB02CA754_i += 1) {
        gf_SpawnSuicidalAttackerAir("BroodLord", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    auto76DE3D68_n = libNtve_gf_DifficultyValueInt(0, 0, 2, 2);
    for (auto76DE3D68_i = 1; auto76DE3D68_i <= auto76DE3D68_n; auto76DE3D68_i += 1) {
        gf_SpawnSuicidalAttackerGround("Infestor", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    autoD863E98C_n = libNtve_gf_DifficultyValueInt(10, 10, 11, 15);
    for (autoD863E98C_i = 1; autoD863E98C_i <= autoD863E98C_n; autoD863E98C_i += 1) {
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    gf_SpawnSuicidalAttackerAir("Overseer", lv_thisAIPlayer);
    Wait(0.5, c_timeAI);
    gf_SpawnSuicidalAttackerGround("RoachBurrowed", lv_thisAIPlayer);
    Wait(0.5, c_timeAI);
    gf_SpawnSuicidalAttackerGround("RoachBurrowed", lv_thisAIPlayer);
    Wait(0.5, c_timeAI);
    gf_SpawnSuicidalAttackerAir("Overseer", lv_thisAIPlayer);
    Wait(0.5, c_timeAI);
    gf_SpawnSuicidalAttackerGround("RoachBurrowed", lv_thisAIPlayer);
    Wait(0.5, c_timeAI);
    gf_SpawnSuicidalAttackerGround("HybridReaver", lv_thisAIPlayer);
    gv_statWavessent += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwarmWaveB2P04NW_Init () {
    gt_SwarmWaveB2P04NW = TriggerCreate("gt_SwarmWaveB2P04NW_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swarm Wave B3 P05 NE
//--------------------------------------------------------------------------------------------------
bool gt_SwarmWaveB3P05NE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_thisAIPlayer;

    // Automatic Variable Declarations
    int autoA03A7517_n;
    int autoA03A7517_i;
    int autoFC90870C_n;
    int autoFC90870C_i;
    int autoB941D985_n;
    int autoB941D985_i;
    int autoCCCBCC90_n;
    int autoCCCBCC90_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_thisAIPlayer = gv_p05_ZERG_NE;
    gf_SpawnSuicidalAttackerGround("Overseer", lv_thisAIPlayer);
    Wait(0.5, c_timeAI);
    autoA03A7517_n = libNtve_gf_DifficultyValueInt(25, 25, 35, 45);
    for (autoA03A7517_i = 1; autoA03A7517_i <= autoA03A7517_n; autoA03A7517_i += 1) {
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    autoFC90870C_n = libNtve_gf_DifficultyValueInt(5, 5, 5, 5);
    for (autoFC90870C_i = 1; autoFC90870C_i <= autoFC90870C_n; autoFC90870C_i += 1) {
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
            gf_SpawnSuicidalAttackerGround("RoachBurrowed", lv_thisAIPlayer);
        }
        else {
            gf_SpawnSuicidalAttackerAir("Mutalisk", lv_thisAIPlayer);
        }
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerAir("Mutalisk", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("Hydralisk", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    gf_SpawnSuicidalAttackerGround("HybridDestroyer", lv_thisAIPlayer);
    Wait(0.5, c_timeAI);
    autoB941D985_n = libNtve_gf_DifficultyValueInt(10, 10, 17, 22);
    for (autoB941D985_i = 1; autoB941D985_i <= autoB941D985_n; autoB941D985_i += 1) {
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    gf_SpawnSuicidalAttackerGround("Roach", lv_thisAIPlayer);
    Wait(0.5, c_timeAI);
    gf_SpawnSuicidalAttackerAir(libNtve_gf_DifficultyValueUnitType("Mutalisk", "Mutalisk", "BroodLord", "BroodLord"), lv_thisAIPlayer);
    Wait(0.5, c_timeAI);
    autoCCCBCC90_n = libNtve_gf_DifficultyValueInt(2, 2, 3, 3);
    for (autoCCCBCC90_i = 1; autoCCCBCC90_i <= autoCCCBCC90_n; autoCCCBCC90_i += 1) {
        gf_SpawnSuicidalAttackerGround("HybridReaver", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    gf_SpawnSuicidalAttackerGround("HybridDestroyer", lv_thisAIPlayer);
    gv_statWavessent += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwarmWaveB3P05NE_Init () {
    gt_SwarmWaveB3P05NE = TriggerCreate("gt_SwarmWaveB3P05NE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swarm Wave C1 P05 NE
//--------------------------------------------------------------------------------------------------
bool gt_SwarmWaveC1P05NE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_thisAIPlayer;

    // Automatic Variable Declarations
    int autoE8DB439F_n;
    int autoE8DB439F_i;
    int auto02B4FE61_n;
    int auto02B4FE61_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_thisAIPlayer = gv_p05_ZERG_NE;
    autoE8DB439F_n = libNtve_gf_DifficultyValueInt(3, 3, 2, 2);
    for (autoE8DB439F_i = 1; autoE8DB439F_i <= autoE8DB439F_n; autoE8DB439F_i += 1) {
        gf_SpawnSuicidalAttackerAir("Corruptor", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerAir("Mutalisk", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround(libNtve_gf_DifficultyValueUnitType("RoachBurrowed", "RoachBurrowed", "HybridReaver", "UltraliskBurrowed"), lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    gf_SpawnSuicidalAttackerGround("Overseer", lv_thisAIPlayer);
    Wait(0.5, c_timeAI);
    gf_SpawnSuicidalAttackerGround("Overseer", lv_thisAIPlayer);
    Wait(0.5, c_timeAI);
    auto02B4FE61_n = libNtve_gf_DifficultyValueInt(4, 4, 5, 6);
    for (auto02B4FE61_i = 1; auto02B4FE61_i <= auto02B4FE61_n; auto02B4FE61_i += 1) {
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerAir("Mutalisk", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerAir("BroodLord", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("HybridReaver", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    gf_SpawnSuicidalAttackerGround("HybridDestroyer", lv_thisAIPlayer);
    Wait(0.5, c_timeAI);
    gf_SpawnSuicidalAttackerAir("Overseer", lv_thisAIPlayer);
    Wait(0.5, c_timeAI);
    gv_statWavessent += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwarmWaveC1P05NE_Init () {
    gt_SwarmWaveC1P05NE = TriggerCreate("gt_SwarmWaveC1P05NE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swarm Wave C2 P04 NW
//--------------------------------------------------------------------------------------------------
bool gt_SwarmWaveC2P04NW_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_thisAIPlayer;

    // Automatic Variable Declarations
    int autoC1DF16B9_n;
    int autoC1DF16B9_i;
    int auto589F6176_n;
    int auto589F6176_i;
    int autoAB83A4DC_n;
    int autoAB83A4DC_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_thisAIPlayer = gv_p04_ZERG_NW;
    autoC1DF16B9_n = libNtve_gf_DifficultyValueInt(21, 21, 34, 45);
    for (autoC1DF16B9_i = 1; autoC1DF16B9_i <= autoC1DF16B9_n; autoC1DF16B9_i += 1) {
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    auto589F6176_n = libNtve_gf_DifficultyValueInt(6, 6, 7, 8);
    for (auto589F6176_i = 1; auto589F6176_i <= auto589F6176_n; auto589F6176_i += 1) {
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerAir("Mutalisk", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("RoachBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    gf_SpawnSuicidalAttackerAir("Overseer", lv_thisAIPlayer);
    Wait(0.5, c_timeAI);
    gf_SpawnSuicidalAttackerGround("HybridReaver", lv_thisAIPlayer);
    Wait(0.5, c_timeAI);
    autoAB83A4DC_n = libNtve_gf_DifficultyValueInt(10, 10, 15, 18);
    for (autoAB83A4DC_i = 1; autoAB83A4DC_i <= autoAB83A4DC_n; autoAB83A4DC_i += 1) {
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("RoachBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    gf_SpawnSuicidalAttackerAir("Overseer", lv_thisAIPlayer);
    Wait(0.5, c_timeAI);
    gv_statWavessent += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwarmWaveC2P04NW_Init () {
    gt_SwarmWaveC2P04NW = TriggerCreate("gt_SwarmWaveC2P04NW_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swarm Wave C3 P06 SE
//--------------------------------------------------------------------------------------------------
bool gt_SwarmWaveC3P06SE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_thisAIPlayer;

    // Automatic Variable Declarations
    int auto4EC2E816_n;
    int auto4EC2E816_i;
    int auto3A3048AC_n;
    int auto3A3048AC_i;
    int autoE0429BC9_n;
    int autoE0429BC9_i;
    int auto3849F721_n;
    int auto3849F721_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_thisAIPlayer = gv_p06_ZERG_SE;
    gf_SpawnSuicidalAttackerGround("Overseer", lv_thisAIPlayer);
    Wait(0.5, c_timeAI);
    auto4EC2E816_n = libNtve_gf_DifficultyValueInt(5, 5, 16, 18);
    for (auto4EC2E816_i = 1; auto4EC2E816_i <= auto4EC2E816_n; auto4EC2E816_i += 1) {
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("RoachBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    auto3A3048AC_n = libNtve_gf_DifficultyValueInt(4, 4, 5, 7);
    for (auto3A3048AC_i = 1; auto3A3048AC_i <= auto3A3048AC_n; auto3A3048AC_i += 1) {
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        gf_SpawnSuicidalAttackerGround("HydraliskBurrowed", lv_thisAIPlayer);
        gf_SpawnSuicidalAttackerAir("Mutalisk", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    autoE0429BC9_n = libNtve_gf_DifficultyValueInt(2, 2, 2, 2);
    for (autoE0429BC9_i = 1; autoE0429BC9_i <= autoE0429BC9_n; autoE0429BC9_i += 1) {
        gf_SpawnSuicidalAttackerGround("Infestor", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    gf_SpawnSuicidalAttackerAir("Overseer", lv_thisAIPlayer);
    Wait(0.5, c_timeAI);
    gf_SpawnSuicidalAttackerGround("HybridReaver", lv_thisAIPlayer);
    Wait(0.5, c_timeAI);
    auto3849F721_n = libNtve_gf_DifficultyValueInt(20, 20, 24, 26);
    for (auto3849F721_i = 1; auto3849F721_i <= auto3849F721_n; auto3849F721_i += 1) {
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
        gf_SpawnSuicidalAttackerGround("ZerglingBurrowed", lv_thisAIPlayer);
        Wait(0.5, c_timeAI);
    }
    gf_SpawnSuicidalAttackerAir("Overseer", lv_thisAIPlayer);
    Wait(0.5, c_timeAI);
    gv_statWavessent += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwarmWaveC3P06SE_Init () {
    gt_SwarmWaveC3P06SE = TriggerCreate("gt_SwarmWaveC3P06SE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Worm Attack 1
//--------------------------------------------------------------------------------------------------
bool gt_NydusWormAttack1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnNydusWormSwarmlings(RegionFromId(8));
    Wait(2.5, c_timeGame);
    gf_SpawnNydusWormSwarmlings(RegionFromId(10));
    Wait(2.5, c_timeGame);
    gf_SpawnNydusWormSwarmlings(RegionFromId(11));
    Wait(libNtve_gf_DifficultyValueFixed(20.0, 20.0, 12.0, 5.0), c_timeGame);
    if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
        gf_SpawnNydusWormSwarmlings(RegionFromId(13));
        Wait(2.5, c_timeGame);
        gf_SpawnNydusWormSwarmlings(RegionFromId(14));
        Wait(2.0, c_timeGame);
        gf_SpawnNydusWormSwarmlings(RegionFromId(15));
    }
    else {
        gf_SpawnNydusWormSwarmlings(RegionFromId(54));
        Wait(2.5, c_timeGame);
        gf_SpawnNydusWormSwarmlings(RegionFromId(56));
        Wait(2.0, c_timeGame);
        if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 0) == 1)) {
            gf_SpawnNydusWormSwarmlings(RegionFromId(57));
        }
        else {
            Wait(3.0, c_timeGame);
            gf_SpawnNydusWormSwarmlings(RegionFromId(72));
        }
    }
    Wait(1.0, c_timeGame);
    gf_SpawnNydusWormSwarmlings(RegionFromId(73));
    Wait(5.0, c_timeGame);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1) && (gf_AreaIsBeingHarvested(RegionFromId(66)) == true)) {
        if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 0) == 1)) {
            gf_SpawnNydusWormSwarmlings(RegionFromId(67));
        }
        else {
            gf_SpawnNydusWormZerglings(RegionFromId(67));
        }
    }

    gv_statWavessent += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusWormAttack1_Init () {
    gt_NydusWormAttack1 = TriggerCreate("gt_NydusWormAttack1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Worm Attack 2
//--------------------------------------------------------------------------------------------------
bool gt_NydusWormAttack2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnNydusWormSwarmlings(RegionFromId(22));
    Wait(2.5, c_timeGame);
    gf_SpawnNydusWormSwarmlings(RegionFromId(23));
    Wait(2.5, c_timeGame);
    gf_SpawnNydusWormSwarmlings(RegionFromId(24));
    Wait(libNtve_gf_DifficultyValueFixed(20.0, 20.0, 12.0, 5.0), c_timeGame);
    if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
        gf_SpawnNydusWormSwarmlings(RegionFromId(25));
        Wait(2.5, c_timeGame);
        gf_SpawnNydusWormSwarmlings(RegionFromId(26));
        Wait(2.0, c_timeGame);
        gf_SpawnNydusWormSwarmlings(RegionFromId(27));
    }
    else {
        gf_SpawnNydusWormSwarmlings(RegionFromId(58));
        Wait(2.5, c_timeGame);
        gf_SpawnNydusWormSwarmlings(RegionFromId(59));
        Wait(2.0, c_timeGame);
        gf_SpawnNydusWormSwarmlings(RegionFromId(60));
    }
    Wait(libNtve_gf_DifficultyValueFixed(20.0, 20.0, 14.0, 10.0), c_timeGame);
    if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
        gf_SpawnNydusWormSwarmlings(RegionFromId(30));
        Wait(2.0, c_timeGame);
        gf_SpawnNydusWormSwarmlings(RegionFromId(28));
    }
    else {
        gf_SpawnNydusWormSwarmlings(RegionFromId(63));
        Wait(2.0, c_timeGame);
        gf_SpawnNydusWormSwarmlings(RegionFromId(61));
    }
    Wait(5.0, c_timeGame);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1) && (gf_AreaIsBeingHarvested(RegionFromId(66)) == true)) {
        gf_SpawnNydusWormZerglings(RegionFromId(69));
    }

    gv_statWavessent += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusWormAttack2_Init () {
    gt_NydusWormAttack2 = TriggerCreate("gt_NydusWormAttack2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Spawning Trigger (Swarmlings)
//--------------------------------------------------------------------------------------------------
bool gt_NydusSpawningTriggerSwarmlings_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_region;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoDC125E1F_g;
    int autoDC125E1F_u;
    unit autoDC125E1F_var;
    unitgroup autoA731EB92_g;
    int autoA731EB92_u;
    unit autoA731EB92_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_region = gv_nydusSpawnRegion;
    Wait(3.0, c_timeGame);
    if ((RegionContainsPoint(RegionCircle(RegionGetCenter(lv_region), 10.0), CameraGetTarget(gv_p01_PLAYER)) == true) && (gv_gameOver == false)) {
        CameraShakeStart(gv_p01_PLAYER, c_cameraPositionTarget, c_cameraDirectionZ, 0.02, 2.0, 100.0, 3.0);
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "NydusCanal", 0, gv_p07_FRENZIED_ZERG, RegionGetCenter(lv_region));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, libNtve_gf_DifficultyValueFixed(200.0, 200.0, 400.0, 500.0));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
    lv_unit = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlayAtPoint(SoundLink("NydusWorm_Birth", 0), PlayerGroupAll(), UnitGetPosition(UnitLastCreated()), 0.0, 100.0, 0.0);
    VisRevealArea(gv_p01_PLAYER, RegionCircle(UnitGetPosition(UnitLastCreated()), 4.0), 4.0, false);
    Wait(3.7, c_timeGame);
    if ((UnitGroupCount(UnitGroup(null, gv_p01_PLAYER, RegionCircle(UnitGetPosition(lv_unit), 9.0), UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) >= 1) && (UnitIsAlive(lv_unit) == true) && (UnitHasBehavior(lv_unit, "ZeratulStun") == false)) {
        SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), UnitGetPosition(lv_unit), 1.0, 100.0, 0.0);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_unit), c_animNameDefault, "Spell", 0, c_animTimeDefault);
        libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(4, 4, 5, 6), "Swarmling", 0, gv_p07_FRENZIED_ZERG, PointWithOffsetPolar(UnitGetPosition(lv_unit), 0.5, 270.0));
        autoDC125E1F_g = UnitLastCreatedGroup();
        autoDC125E1F_u = UnitGroupCount(autoDC125E1F_g, c_unitCountAll);
        for (;; autoDC125E1F_u -= 1) {
            autoDC125E1F_var = UnitGroupUnitFromEnd(autoDC125E1F_g, autoDC125E1F_u);
            if (autoDC125E1F_var == null) { break; }
            UnitBehaviorAdd(autoDC125E1F_var, "BroodlingWander", autoDC125E1F_var, 1);
            UnitBehaviorAdd(autoDC125E1F_var, "BroodlingFate", autoDC125E1F_var, 1);
        }
    }

    Wait(gv_nydusSpawnDelay, c_timeGame);
    while (true) {
        if ((UnitIsAlive(lv_unit) == false)) {
            break;
        }

        if ((UnitGroupCount(UnitGroup(null, gv_p01_PLAYER, RegionCircle(UnitGetPosition(lv_unit), 9.0), UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) >= 1) && (UnitHasBehavior(lv_unit, "ZeratulStun") == false)) {
            SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), UnitGetPosition(lv_unit), 1.0, 100.0, 0.0);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_unit), c_animNameDefault, "Spell", 0, c_animTimeDefault);
            libNtve_gf_CreateUnitsAtPoint2(2, "Swarmling", 0, gv_p07_FRENZIED_ZERG, PointWithOffsetPolar(UnitGetPosition(lv_unit), 0.5, 270.0));
            autoA731EB92_g = UnitLastCreatedGroup();
            autoA731EB92_u = UnitGroupCount(autoA731EB92_g, c_unitCountAll);
            for (;; autoA731EB92_u -= 1) {
                autoA731EB92_var = UnitGroupUnitFromEnd(autoA731EB92_g, autoA731EB92_u);
                if (autoA731EB92_var == null) { break; }
                UnitBehaviorAdd(autoA731EB92_var, "BroodlingWander", autoA731EB92_var, 1);
                UnitBehaviorAdd(autoA731EB92_var, "BroodlingFate", autoA731EB92_var, 1);
            }
        }

        Wait(gv_nydusSpawnDelay, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusSpawningTriggerSwarmlings_Init () {
    gt_NydusSpawningTriggerSwarmlings = TriggerCreate("gt_NydusSpawningTriggerSwarmlings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Spawning Trigger (Zerglings)
//--------------------------------------------------------------------------------------------------
bool gt_NydusSpawningTriggerZerglings_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_region;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_region = gv_nydusSpawnRegion;
    Wait(3.0, c_timeGame);
    if ((RegionContainsPoint(RegionCircle(RegionGetCenter(lv_region), 10.0), CameraGetTarget(gv_p01_PLAYER)) == true) && (gv_gameOver == false)) {
        CameraShakeStart(gv_p01_PLAYER, c_cameraPositionTarget, c_cameraDirectionZ, 0.02, 2.0, 100.0, 3.0);
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "NydusCanal", 0, gv_p07_FRENZIED_ZERG, RegionGetCenter(lv_region));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, libNtve_gf_DifficultyValueFixed(200.0, 200.0, 400.0, 500.0));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
    lv_unit = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlayAtPoint(SoundLink("NydusWorm_Birth", 0), PlayerGroupAll(), UnitGetPosition(UnitLastCreated()), 0.0, 100.0, 0.0);
    VisRevealArea(gv_p01_PLAYER, RegionCircle(UnitGetPosition(UnitLastCreated()), 4.0), 4.0, false);
    Wait(3.7, c_timeGame);
    if ((UnitGroupCount(UnitGroup(null, gv_p01_PLAYER, RegionCircle(UnitGetPosition(lv_unit), 9.0), UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) >= 1) && (UnitIsAlive(lv_unit) == true) && (UnitHasBehavior(lv_unit, "ZeratulStun") == false)) {
        SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), UnitGetPosition(lv_unit), 1.0, 100.0, 0.0);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_unit), c_animNameDefault, "Spell", 0, c_animTimeDefault);
        libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Zergling", 0, gv_p07_FRENZIED_ZERG, PointWithOffsetPolar(UnitGetPosition(lv_unit), 0.5, 270.0));
    }

    Wait(gv_nydusSpawnDelay, c_timeGame);
    while (true) {
        if ((UnitIsAlive(lv_unit) == false)) {
            break;
        }

        if ((UnitGroupCount(UnitGroup(null, gv_p01_PLAYER, RegionCircle(UnitGetPosition(lv_unit), 9.0), UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) >= 1) && (UnitHasBehavior(lv_unit, "ZeratulStun") == false)) {
            SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), UnitGetPosition(lv_unit), 1.0, 100.0, 0.0);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_unit), c_animNameDefault, "Spell", 0, c_animTimeDefault);
            libNtve_gf_CreateUnitsAtPoint2(2, "Zergling", 0, gv_p07_FRENZIED_ZERG, PointWithOffsetPolar(UnitGetPosition(lv_unit), 0.5, 270.0));
        }

        Wait(gv_nydusSpawnDelay, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusSpawningTriggerZerglings_Init () {
    gt_NydusSpawningTriggerZerglings = TriggerCreate("gt_NydusSpawningTriggerZerglings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Resources
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveResources_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(gv_p04_ZERG_NW, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_p05_ZERG_NE, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_p06_ZERG_SE, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_p07_FRENZIED_ZERG, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_p04_ZERG_NW, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_p05_ZERG_NE, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_p06_ZERG_SE, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_p07_FRENZIED_ZERG, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveResources_Init () {
    gt_AIGiveResources = TriggerCreate("gt_AIGiveResources_Func");
    TriggerAddEventTimePeriodic(gt_AIGiveResources, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Building replenish
//--------------------------------------------------------------------------------------------------
bool gt_ZergBuildingreplenish_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_lOC;
    string lv_tYPE;
    region lv_sPAWN;
    int lv_pLAYER;

    // Automatic Variable Declarations
    int auto10BBAC66_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "SporeCrawler") || (UnitGetType(EventUnit()) == "SpineCrawler")))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_p04_ZERG_NW) || (UnitGetOwner(EventUnit()) == gv_p05_ZERG_NE) || (UnitGetOwner(EventUnit()) == gv_p06_ZERG_SE)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_lOC = UnitGetPosition(EventUnit());
    lv_tYPE = UnitGetType(EventUnit());
    auto10BBAC66_val = UnitGetOwner(EventUnit());
    if (auto10BBAC66_val == gv_p04_ZERG_NW) {
        lv_sPAWN = RegionFromId(48);
        lv_pLAYER = gv_p04_ZERG_NW;
    }
    else if (auto10BBAC66_val == gv_p05_ZERG_NE) {
        lv_sPAWN = RegionFromId(49);
        lv_pLAYER = gv_p05_ZERG_NE;
    }
    else if (auto10BBAC66_val == gv_p06_ZERG_SE) {
        lv_sPAWN = RegionFromId(46);
        lv_pLAYER = gv_p06_ZERG_SE;
    }
    else {
    }
    Wait(RandomFixed(1.0, 5.0), c_timeGame);
    if ((lv_tYPE == "SpineCrawler")) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpineCrawlerUprooted", 0, lv_pLAYER, RegionGetCenter(lv_sPAWN));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("SpineCrawlerRoot", 0), lv_lOC), c_orderQueueReplace);
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SporeCrawlerUprooted", 0, lv_pLAYER, RegionGetCenter(lv_sPAWN));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("SporeCrawlerRoot", 0), lv_lOC), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergBuildingreplenish_Init () {
    gt_ZergBuildingreplenish = TriggerCreate("gt_ZergBuildingreplenish_Func");
    TriggerAddEventUnitDied(gt_ZergBuildingreplenish, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Templars Store Knowledge Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTemplarsStoreKnowledgeQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pylon;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisiblePylon", 0, gv_p08_ARCHIVE, PointFromId(846));
    lv_pylon = UnitLastCreated();
    UnitIssueOrder(gv_superWarpGate_P08, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 3), PointFromId(846)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P08, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 3), PointFromId(845)), c_orderQueueReplace);
    UnitIssueOrder(gv_superWarpGate_P08, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 3), PointFromId(847)), c_orderQueueReplace);
    Wait(7.0, c_timeGame);
    CameraPan(gv_p01_PLAYER, UnitGetPosition(UnitFromId(716)), 2.0, -1, 10, false);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul04HighTemplar00034", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul04HighTemplar00034", 0), c_transmissionDurationAdd, 1.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TimerStart(gv_protectArchiveTimer, 1500.0, false, c_timeGame);
    UnitRemove(lv_pylon);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTemplarsStoreKnowledgeQ_Init () {
    gt_TransmissionTemplarsStoreKnowledgeQ = TriggerCreate("gt_TransmissionTemplarsStoreKnowledgeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Dark Voice Pronouncement Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDarkVoicePronouncementQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul04DarkVoice00014", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul04DarkVoice00014", 0), c_transmissionDurationAdd, 1.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDarkVoicePronouncementQ_Init () {
    gt_TransmissionDarkVoicePronouncementQ = TriggerCreate("gt_TransmissionDarkVoicePronouncementQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Zerg swarming flanks Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionZergswarmingflanksQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_heroPhoenix) == true)) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        UIAlertUnit("Trigger", gv_p01_PLAYER, StringToText(""), null, gv_heroPhoenix);
        // Transmission - SoundLink("TZeratul04Urun00010", -1)
        libCamp_gf_SendTransmissionCampaign(gv_heroPhoenix, SoundLink("TZeratul04Urun00010", 0), c_transmissionDurationAdd, 1.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionZergswarmingflanksQ_Init () {
    gt_TransmissionZergswarmingflanksQ = TriggerCreate("gt_TransmissionZergswarmingflanksQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Zerg horde incoming Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionZerghordeincomingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_heroPhoenix) == true)) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        UIAlertUnit("Trigger", gv_p01_PLAYER, StringToText(""), null, gv_heroPhoenix);
        // Transmission - SoundLink("TZeratul04Urun00011", -1)
        libCamp_gf_SendTransmissionCampaign(gv_heroPhoenix, SoundLink("TZeratul04Urun00011", 0), c_transmissionDurationAdd, 1.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionZerghordeincomingQ_Init () {
    gt_TransmissionZerghordeincomingQ = TriggerCreate("gt_TransmissionZerghordeincomingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Dark Voice Taunts Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDarkVoiceTauntsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul04DarkVoice00016", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul04DarkVoice00016", 0), c_transmissionDurationAdd, 1.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDarkVoiceTauntsQ_Init () {
    gt_TransmissionDarkVoiceTauntsQ = TriggerCreate("gt_TransmissionDarkVoiceTauntsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Artanis' Final Speech Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionArtanisFinalSpeechQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((UnitIsAlive(gv_heroMothership) == true)) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        UIAlertUnit("Trigger", gv_p01_PLAYER, StringToText(""), null, gv_heroMothership);
        // Transmission - SoundLink("TZeratul04Artanis00027", -1)
        libCamp_gf_SendTransmissionCampaign(gv_heroMothership, SoundLink("TZeratul04Artanis00027", 0), c_transmissionDurationAdd, 1.0, true);
        // Transmission - SoundLink("TZeratul04Artanis00035", -1)
        libCamp_gf_SendTransmissionCampaign(gv_heroMothership, SoundLink("TZeratul04Artanis00035", 0), c_transmissionDurationAdd, 1.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionArtanisFinalSpeechQ_Init () {
    gt_TransmissionArtanisFinalSpeechQ = TriggerCreate("gt_TransmissionArtanisFinalSpeechQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Hybrid Incoming 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHybridIncoming1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul04DarkVoice00029", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul04DarkVoice00029", 0), c_transmissionDurationAdd, 1.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionHybridIncoming1Q_Init () {
    gt_TransmissionHybridIncoming1Q = TriggerCreate("gt_TransmissionHybridIncoming1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Hybrid Incoming 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHybridIncoming2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul04DarkVoice00030", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul04DarkVoice00030", 0), c_transmissionDurationAdd, 1.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionHybridIncoming2Q_Init () {
    gt_TransmissionHybridIncoming2Q = TriggerCreate("gt_TransmissionHybridIncoming2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Worms Incoming 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionWormsIncoming1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul04DarkVoice00031", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul04DarkVoice00031", 0), c_transmissionDurationAdd, 1.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionWormsIncoming1Q_Init () {
    gt_TransmissionWormsIncoming1Q = TriggerCreate("gt_TransmissionWormsIncoming1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Worms Incoming 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionWormsIncoming2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TZeratul04DarkVoice00032", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul04DarkVoice00032", 0), c_transmissionDurationAdd, 1.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionWormsIncoming2Q_Init () {
    gt_TransmissionWormsIncoming2Q = TriggerCreate("gt_TransmissionWormsIncoming2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warped in Templar Behavior
//--------------------------------------------------------------------------------------------------
bool gt_WarpedinTemplarBehavior_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_p08_ARCHIVE))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitFlashSelection(EventUnitProgressUnit(), 1.0);
    Wait(9.0, c_timeGame);
    UnitIssueOrder(EventUnitProgressUnit(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(716))), c_orderQueueReplace);
    Wait(1.5, c_timeGame);
    UnitRemove(EventUnitProgressUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpedinTemplarBehavior_Init () {
    gt_WarpedinTemplarBehavior = TriggerCreate("gt_WarpedinTemplarBehavior_Func");
    TriggerAddEventUnitConstructProgress(gt_WarpedinTemplarBehavior, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat -Stargate Unit Built
//--------------------------------------------------------------------------------------------------
bool gt_StatStargateUnitBuilt_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Stargate"))) {
            return false;
        }

        if (!((gv_stargateUnitBuilt == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_stargateUnitBuilt = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatStargateUnitBuilt_Init () {
    gt_StatStargateUnitBuilt = TriggerCreate("gt_StatStargateUnitBuilt_Func");
    TriggerAddEventUnitTrainProgress(gt_StatStargateUnitBuilt, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory & Defeat for Player
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDefeatforPlayer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p01_PLAYER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    ObjectiveSetState(gv_objectiveSurviveUntilYouDie, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    if ((gv_killCount >= gv_sTAGE_01_KILL_QUOTA)) {
        libCamp_gf_RunMissionVictorySequence(gt_VictoryQ);
    }
    else {
        TriggerQueuePause(true);
        TriggerQueueClear(c_triggerQueueRemove);
        Wait(2.0, c_timeReal);
        libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/D472A25B"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
        Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
        TriggerExecute(gt_Defeat, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDefeatforPlayer_Init () {
    gt_VictoryDefeatforPlayer = TriggerCreate("gt_VictoryDefeatforPlayer_Func");
    TriggerAddEventTimePeriodic(gt_VictoryDefeatforPlayer, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_additionalKills;

    // Automatic Variable Declarations
    int autoE986B67F_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((ObjectiveGetState(gv_objectiveKillPrimary) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveProtectArchive) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveSurviveUntilYouDie) == c_objectiveStateCompleted)) {
        AchievementAward(gv_p01_PLAYER, "TZeratul04_1");
    }

    VictoryPanelAddAchievement("TZeratul04_1");
    VictoryPanelAddAchievement("TZeratul04_2");
    VictoryPanelAddAchievement("TZeratul04_3");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/D6D2FF4E"), IntToText(gv_killCount));
    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("MineralsCollected");
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/F2044A9B"), IntToText(gv_hybridSlain));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/2B398FDF"), IntToText(gv_statHeroKills));
    if ((gv_stargateUnitBuilt == false) && (libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1)) {
        AchievementAward(gv_p01_PLAYER, "Anniversary_TZeratul04");
        TriggerDebugOutput(1, StringExternal("Param/Value/1E4D88F9"), false);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1)) {
        autoE986B67F_val = gv_statAchievementTierLevel;
        if (autoE986B67F_val == 1) {
            lv_additionalKills = (gv_achievementTier1kills - gv_killCount);
            VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/D8F891F9"), (IntToText(lv_additionalKills)));
        }
        else if (autoE986B67F_val == 2) {
            lv_additionalKills = (gv_achievementTier2kills - gv_killCount);
            VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/2C66D267"), (IntToText(lv_additionalKills)));
        }
        else if (autoE986B67F_val == 0) {
            VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/A16962D2"), (IntToText(gv_statWavessent)));
        }
        else {
        }
    }

    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/5B12EC7A"), IntToText(gv_statArchiveResearchPoints));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/BD109A4D"), IntToText(gv_statZergResearchPoints));
    libCamp_gf_EndCampaignMission(gv_p01_PLAYER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_EndCampaignMission(gv_p01_PLAYER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    libCamp_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_p01_PLAYER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_p01_PLAYER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Survive Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurviveCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate((TextReplaceWord(StringExternal("Param/Value/F6F153EE"), StringExternal("Param/Value/E46C4938"), IntToText(gv_sTAGE_01_KILL_QUOTA), c_stringReplaceAll, c_stringCase) + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectKill1500Zerg, libCamp_ge_StoryResearchObjectiveTextStyle_Lumpsum, 1, 0)), StringExternal("Param/Value/1F2F72F6"), c_objectiveStateActive, true);
    gv_objectiveKillPrimary = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TZeratul04Objective1, ObjectiveLastCreated(), StringExternal("Param/Value/09C0A593"));
    ObjectiveCreate(StringExternal("Param/Value/D6B7F35F"), StringExternal("Param/Value/97923284"), c_objectiveStateActive, true);
    gv_objectiveSurviveUntilYouDie = ObjectiveLastCreated();
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurviveCreateQ_Init () {
    gt_ObjectiveSurviveCreateQ = TriggerCreate("gt_ObjectiveSurviveCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Survive Primary Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurvivePrimaryComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveSurviveCreateQ, true, false);
    ObjectiveSetState(gv_objectiveKillPrimary, c_objectiveStateCompleted);
    ObjectiveSetName(gv_objectiveKillPrimary, (TextReplaceWord(StringExternal("Param/Value/93FAEACE"), StringExternal("Param/Value/5FE97FBF"), IntToText(gv_sTAGE_01_KILL_QUOTA), c_stringReplaceAll, c_stringCase) + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectKill1500Zerg, libCamp_ge_StoryResearchObjectiveTextStyle_Lumpsum, 1, 1)));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurvivePrimaryComplete_Init () {
    gt_ObjectiveSurvivePrimaryComplete = TriggerCreate("gt_ObjectiveSurvivePrimaryComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Protect Archive Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProtectArchiveCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate((StringExternal("Param/Value/7BC07007") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectProtecttheArchive, libCamp_ge_StoryResearchObjectiveTextStyle_Lumpsum, 1, 0)), StringExternal("Param/Value/E45D7291"), c_objectiveStateActive, false);
    gv_objectiveProtectArchive = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TZeratul04Objective3, ObjectiveLastCreated(), StringExternal("Param/Value/691FF230"));
    Wait(4.0, c_timeReal);
    TriggerEnable(gt_ObjectiveProtectArchiveUpdate, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProtectArchiveCreateQ_Init () {
    gt_ObjectiveProtectArchiveCreateQ = TriggerCreate("gt_ObjectiveProtectArchiveCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Protect Archive Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProtectArchiveUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tIMER;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_tIMER = FixedToInt(TimerGetRemaining(gv_protectArchiveTimer));
    ObjectiveSetName(gv_objectiveProtectArchive, (StringExternal("Param/Value/0A3D9279") + libCamp_gf_FormatTimeCampaign(lv_tIMER) + StringExternal("Param/Value/3BC7D8C2") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectProtecttheArchive, libCamp_ge_StoryResearchObjectiveTextStyle_Lumpsum, 1, 0)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProtectArchiveUpdate_Init () {
    gt_ObjectiveProtectArchiveUpdate = TriggerCreate("gt_ObjectiveProtectArchiveUpdate_Func");
    TriggerEnable(gt_ObjectiveProtectArchiveUpdate, false);
    TriggerAddEventTimePeriodic(gt_ObjectiveProtectArchiveUpdate, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Protect Archive Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProtectArchiveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(UnitFromId(716)) == true)) {
        gv_statArchiveResearchPoints = libCamp_gf_StoryResearchObjectReward(libCamp_ge_StoryResearchObject_ResearchObjectProtecttheArchive, libCamp_ge_StoryResearchCategory_ResearchCategoryProtoss);
        libNtve_gf_MakeUnitInvulnerable(UnitFromId(716), true);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(716)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
        libCamp_gf_DisplayResearchPointsGiventoPlayer(libCamp_ge_StoryResearchObject_ResearchObjectProtecttheArchive, UnitFromId(716), gv_p01_PLAYER);
    }

    TriggerEnable(gt_ObjectiveProtectArchiveUpdate, false);
    TriggerEnable(gt_ObjectiveProtectArchiveFailed, false);
    TriggerExecute(gt_ObjectiveProtectArchiveCreateQ, true, false);
    ObjectiveSetName(gv_objectiveProtectArchive, (StringExternal("Param/Value/BE65AF3D") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectProtecttheArchive, libCamp_ge_StoryResearchObjectiveTextStyle_Lumpsum, 1, 1)));
    ObjectiveSetState(gv_objectiveProtectArchive, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProtectArchiveComplete_Init () {
    gt_ObjectiveProtectArchiveComplete = TriggerCreate("gt_ObjectiveProtectArchiveComplete_Func");
    TriggerAddEventTimer(gt_ObjectiveProtectArchiveComplete, gv_protectArchiveTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Protect Archive Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProtectArchiveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Archive"))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_reinforcementAutoMove = false;
    TimerPause(gv_protectArchiveTimer, true);
    TriggerEnable(gt_ObjectiveProtectArchiveUpdate, false);
    TriggerExecute(gt_ObjectiveProtectArchiveCreateQ, true, false);
    ObjectiveSetName(gv_objectiveProtectArchive, (StringExternal("Param/Value/00B96633") + StringExternal("Param/Value/6A188D0E") + StringExternal("Param/Value/D1FBA455") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectProtecttheArchive, libCamp_ge_StoryResearchObjectiveTextStyle_Lumpsum, 1, 0)));
    ObjectiveSetState(gv_objectiveProtectArchive, c_objectiveStateFailed);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProtectArchiveFailed_Init () {
    gt_ObjectiveProtectArchiveFailed = TriggerCreate("gt_ObjectiveProtectArchiveFailed_Func");
    TriggerAddEventUnitDied(gt_ObjectiveProtectArchiveFailed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto58461EEE_g;
    int auto58461EEE_u;
    unit auto58461EEE_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_StartGameStage1);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    gv_inCinematic = true;
    gv_gameOver = true;
    UnitPauseAll(true);
    AITimePause(true);
    auto58461EEE_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto58461EEE_u = UnitGroupCount(auto58461EEE_g, c_unitCountAll);
    for (;; auto58461EEE_u -= 1) {
        auto58461EEE_var = UnitGroupUnitFromEnd(auto58461EEE_g, auto58461EEE_u);
        if (auto58461EEE_var == null) { break; }
        UnitIssueOrder(auto58461EEE_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    AITimePause(true);
    TechTreeUpgradeAddLevel(gv_p06_ZERG_SE, "zerglingmovementspeed", 1);
    TechTreeUpgradeAddLevel(gv_p01_PLAYER, "Charge", 1);
    TechTreeUpgradeAddLevel(gv_p01_PLAYER, "BlinkTech", 1);
    TechTreeUpgradeAddLevel(gv_p01_PLAYER, "PsiStormTech", 1);
    TechTreeUpgradeAddLevel(gv_p01_PLAYER, "ExtendedThermalLance", 1);
    GameTimeOfDayPause(true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    TriggerExecute(gt_BriefingScene00, true, true);
    TriggerExecute(gt_BriefingScene01, true, true);
    TriggerExecute(gt_DebriefingScene00, true, true);
    TriggerExecute(gt_DebriefingScene01, true, true);
    UnitPauseAll(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoBB1C8C2F_ae = 9;
    const int autoBB1C8C2F_ai = 1;
    const int auto7ADDB744_ae = 9;
    const int auto7ADDB744_ai = 1;
    const int auto91B88097_ae = 9;
    const int auto91B88097_ai = 1;
    const int auto7D942836_ae = 9;
    const int auto7D942836_ai = 1;
    const int auto600C0ABB_ae = 9;
    const int auto600C0ABB_ai = 1;
    const int auto253E4128_ae = 9;
    const int auto253E4128_ai = 1;
    const int autoC57E9366_ae = 9;
    const int autoC57E9366_ai = 1;
    const int auto869B007E_ae = 5;
    const int auto869B007E_ai = 1;
    const int autoE33B3400_ae = 5;
    const int autoE33B3400_ai = 1;
    const int auto7961FB29_ae = 5;
    const int auto7961FB29_ai = 1;
    const int autoCE950DAC_ae = 5;
    const int autoCE950DAC_ai = 1;
    const int auto63EBA02A_ae = 5;
    const int auto63EBA02A_ai = 1;
    const int autoCAC63A47_ae = 5;
    const int autoCAC63A47_ai = 1;
    const int auto4BA3BC52_ae = 3;
    const int auto4BA3BC52_ai = 1;
    const int auto13A3CACE_ae = 3;
    const int auto13A3CACE_ai = 1;
    const int auto53AD8F9B_ae = 3;
    const int auto53AD8F9B_ai = 1;
    const int auto657BB555_ae = 3;
    const int auto657BB555_ai = 1;
    const int autoED8E5CF8_ae = 3;
    const int autoED8E5CF8_ai = 1;
    const int autoD34478E9_ae = 3;
    const int autoD34478E9_ai = 1;
    const int auto550C05B1_ae = 2;
    const int auto550C05B1_ai = 1;
    const int auto8C8D7E4C_ae = 2;
    const int auto8C8D7E4C_ai = 1;
    const int auto1D00FB1C_ae = 2;
    const int auto1D00FB1C_ai = 1;
    unitgroup auto1B425C86_g;
    int auto1B425C86_u;
    unit auto1B425C86_var;
    int auto1C7940D6_val;
    unitgroup auto90716FA6_g;
    int auto90716FA6_u;
    unit auto90716FA6_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_p01_PLAYER, gv_p05_ZERG_NE, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    lv_i = 1;
    for ( ; ( (autoBB1C8C2F_ai >= 0 && lv_i <= autoBB1C8C2F_ae) || (autoBB1C8C2F_ai < 0 && lv_i >= autoBB1C8C2F_ae) ) ; lv_i += autoBB1C8C2F_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "Zealot", 0, gv_p01_PLAYER, PointWithOffsetPolar(PointFromId(156), ((IntToFixed(lv_i) * 2.0) - 10.0), (PointGetFacing(PointFromId(156)) - 90.0)), PointFromId(370));
    }
    lv_i = 1;
    for ( ; ( (auto7ADDB744_ai >= 0 && lv_i <= auto7ADDB744_ae) || (auto7ADDB744_ai < 0 && lv_i >= auto7ADDB744_ae) ) ; lv_i += auto7ADDB744_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "Zealot", 0, gv_p01_PLAYER, PointWithOffsetPolar(PointWithOffsetPolar(PointFromId(156), 2.0, PointGetFacing(PointFromId(370))), ((IntToFixed(lv_i) * 2.0) - 10.0), (PointGetFacing(PointFromId(156)) - 90.0)), PointFromId(370));
    }
    lv_i = 1;
    for ( ; ( (auto91B88097_ai >= 0 && lv_i <= auto91B88097_ae) || (auto91B88097_ai < 0 && lv_i >= auto91B88097_ae) ) ; lv_i += auto91B88097_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "Zealot", 0, gv_p01_PLAYER, PointWithOffsetPolar(PointWithOffsetPolar(PointFromId(156), 4.0, PointGetFacing(PointFromId(370))), ((IntToFixed(lv_i) * 2.0) - 10.0), (PointGetFacing(PointFromId(156)) - 90.0)), PointFromId(370));
    }
    lv_i = 1;
    for ( ; ( (auto7D942836_ai >= 0 && lv_i <= auto7D942836_ae) || (auto7D942836_ai < 0 && lv_i >= auto7D942836_ae) ) ; lv_i += auto7D942836_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "Zealot", 0, gv_p01_PLAYER, PointWithOffsetPolar(PointWithOffsetPolar(PointFromId(156), 6.0, PointGetFacing(PointFromId(370))), ((IntToFixed(lv_i) * 2.0) - 10.0), (PointGetFacing(PointFromId(156)) - 90.0)), PointFromId(370));
    }
    lv_i = 1;
    for ( ; ( (auto600C0ABB_ai >= 0 && lv_i <= auto600C0ABB_ae) || (auto600C0ABB_ai < 0 && lv_i >= auto600C0ABB_ae) ) ; lv_i += auto600C0ABB_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "Zealot", 0, gv_p01_PLAYER, PointWithOffsetPolar(PointWithOffsetPolar(PointFromId(156), -2.0, PointGetFacing(PointFromId(370))), ((IntToFixed(lv_i) * 2.0) - 10.0), (PointGetFacing(PointFromId(156)) - 90.0)), PointFromId(370));
    }
    lv_i = 1;
    for ( ; ( (auto253E4128_ai >= 0 && lv_i <= auto253E4128_ae) || (auto253E4128_ai < 0 && lv_i >= auto253E4128_ae) ) ; lv_i += auto253E4128_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "Zealot", 0, gv_p01_PLAYER, PointWithOffsetPolar(PointWithOffsetPolar(PointFromId(156), -4.0, PointGetFacing(PointFromId(370))), ((IntToFixed(lv_i) * 2.0) - 10.0), (PointGetFacing(PointFromId(156)) - 90.0)), PointFromId(370));
    }
    lv_i = 1;
    for ( ; ( (autoC57E9366_ai >= 0 && lv_i <= autoC57E9366_ae) || (autoC57E9366_ai < 0 && lv_i >= autoC57E9366_ae) ) ; lv_i += autoC57E9366_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "Zealot", 0, gv_p01_PLAYER, PointWithOffsetPolar(PointWithOffsetPolar(PointFromId(156), -6.0, PointGetFacing(PointFromId(370))), ((IntToFixed(lv_i) * 2.0) - 10.0), (PointGetFacing(PointFromId(156)) - 90.0)), PointFromId(370));
    }
    lv_i = 1;
    for ( ; ( (auto869B007E_ai >= 0 && lv_i <= auto869B007E_ae) || (auto869B007E_ai < 0 && lv_i >= auto869B007E_ae) ) ; lv_i += auto869B007E_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "Zealot", 0, gv_p01_PLAYER, PointWithOffsetPolar(PointFromId(1470), ((IntToFixed(lv_i) * 2.0) - 6.0), (PointGetFacing(PointFromId(1470)) - 90.0)), PointFromId(370));
    }
    lv_i = 1;
    for ( ; ( (autoE33B3400_ai >= 0 && lv_i <= autoE33B3400_ae) || (autoE33B3400_ai < 0 && lv_i >= autoE33B3400_ae) ) ; lv_i += autoE33B3400_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "Zealot", 0, gv_p01_PLAYER, PointWithOffsetPolar(PointFromId(1495), ((IntToFixed(lv_i) * 2.0) - 6.0), (PointGetFacing(PointFromId(1495)) - 90.0)), PointFromId(370));
    }
    lv_i = 1;
    for ( ; ( (auto7961FB29_ai >= 0 && lv_i <= auto7961FB29_ae) || (auto7961FB29_ai < 0 && lv_i >= auto7961FB29_ae) ) ; lv_i += auto7961FB29_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "Zealot", 0, gv_p01_PLAYER, PointWithOffsetPolar(PointFromId(1496), ((IntToFixed(lv_i) * 2.0) - 6.0), (PointGetFacing(PointFromId(1496)) - 90.0)), PointFromId(370));
    }
    lv_i = 1;
    for ( ; ( (autoCE950DAC_ai >= 0 && lv_i <= autoCE950DAC_ae) || (autoCE950DAC_ai < 0 && lv_i >= autoCE950DAC_ae) ) ; lv_i += autoCE950DAC_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "Zealot", 0, gv_p01_PLAYER, PointWithOffsetPolar(PointFromId(1521), ((IntToFixed(lv_i) * 2.0) - 6.0), (PointGetFacing(PointFromId(1521)) - 90.0)), PointFromId(370));
    }
    TriggerExecute(gt_BriefingZealotAnimations, true, false);
    lv_i = 1;
    for ( ; ( (auto63EBA02A_ai >= 0 && lv_i <= auto63EBA02A_ae) || (auto63EBA02A_ai < 0 && lv_i >= auto63EBA02A_ae) ) ; lv_i += auto63EBA02A_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "Stalker", 0, gv_p01_PLAYER, PointWithOffsetPolar(PointFromId(229), ((IntToFixed(lv_i) * 2.5) - 7.5), (PointGetFacing(PointFromId(229)) - 0.0)), PointFromId(370));
    }
    lv_i = 1;
    for ( ; ( (autoCAC63A47_ai >= 0 && lv_i <= autoCAC63A47_ae) || (autoCAC63A47_ai < 0 && lv_i >= autoCAC63A47_ae) ) ; lv_i += autoCAC63A47_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "Stalker", 0, gv_p01_PLAYER, PointWithOffsetPolar(PointFromId(576), ((IntToFixed(lv_i) * 2.5) - 7.5), (PointGetFacing(PointFromId(576)) - 0.0)), PointFromId(370));
    }
    lv_i = 1;
    for ( ; ( (auto4BA3BC52_ai >= 0 && lv_i <= auto4BA3BC52_ae) || (auto4BA3BC52_ai < 0 && lv_i >= auto4BA3BC52_ae) ) ; lv_i += auto4BA3BC52_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "Stalker", 0, gv_p01_PLAYER, PointWithOffsetPolar(PointFromId(1522), ((IntToFixed(lv_i) * 2.5) - 5.0), (PointGetFacing(PointFromId(1522)) - 0.0)), PointFromId(370));
    }
    lv_i = 1;
    for ( ; ( (auto13A3CACE_ai >= 0 && lv_i <= auto13A3CACE_ae) || (auto13A3CACE_ai < 0 && lv_i >= auto13A3CACE_ae) ) ; lv_i += auto13A3CACE_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "Stalker", 0, gv_p01_PLAYER, PointWithOffsetPolar(PointFromId(1523), ((IntToFixed(lv_i) * 2.5) - 5.0), (PointGetFacing(PointFromId(1523)) - 0.0)), PointFromId(370));
    }
    lv_i = 1;
    for ( ; ( (auto53AD8F9B_ai >= 0 && lv_i <= auto53AD8F9B_ae) || (auto53AD8F9B_ai < 0 && lv_i >= auto53AD8F9B_ae) ) ; lv_i += auto53AD8F9B_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "Stalker", 0, gv_p01_PLAYER, PointWithOffsetPolar(PointFromId(1524), ((IntToFixed(lv_i) * 2.5) - 5.0), (PointGetFacing(PointFromId(1524)) - 0.0)), PointFromId(370));
    }
    lv_i = 1;
    for ( ; ( (auto657BB555_ai >= 0 && lv_i <= auto657BB555_ae) || (auto657BB555_ai < 0 && lv_i >= auto657BB555_ae) ) ; lv_i += auto657BB555_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "Stalker", 0, gv_p01_PLAYER, PointWithOffsetPolar(PointFromId(1525), ((IntToFixed(lv_i) * 2.5) - 5.0), (PointGetFacing(PointFromId(1525)) - 0.0)), PointFromId(370));
    }
    lv_i = 1;
    for ( ; ( (autoED8E5CF8_ai >= 0 && lv_i <= autoED8E5CF8_ae) || (autoED8E5CF8_ai < 0 && lv_i >= autoED8E5CF8_ae) ) ; lv_i += autoED8E5CF8_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "Immortal", 0, gv_p01_PLAYER, PointWithOffsetPolar(PointFromId(579), 2.5, ((IntToFixed(lv_i) * 120.0) - 75.0)), PointFromId(370));
    }
    lv_i = 1;
    for ( ; ( (autoD34478E9_ai >= 0 && lv_i <= autoD34478E9_ae) || (autoD34478E9_ai < 0 && lv_i >= autoD34478E9_ae) ) ; lv_i += autoD34478E9_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "Immortal", 0, gv_p01_PLAYER, PointWithOffsetPolar(PointFromId(582), 2.5, ((IntToFixed(lv_i) * 120.0) - 10.0)), PointFromId(370));
    }
    lv_i = 1;
    for ( ; ( (auto550C05B1_ai >= 0 && lv_i <= auto550C05B1_ae) || (auto550C05B1_ai < 0 && lv_i >= auto550C05B1_ae) ) ; lv_i += auto550C05B1_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "HighTemplar", 0, gv_p01_PLAYER, PointWithOffsetPolar(PointFromId(853), ((IntToFixed(lv_i) * 1.5) - 2.25), (PointGetFacing(PointFromId(853)) - 90.0)), PointFromId(370));
    }
    lv_i = 1;
    for ( ; ( (auto8C8D7E4C_ai >= 0 && lv_i <= auto8C8D7E4C_ae) || (auto8C8D7E4C_ai < 0 && lv_i >= auto8C8D7E4C_ae) ) ; lv_i += auto8C8D7E4C_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "HighTemplar", 0, gv_p01_PLAYER, PointWithOffsetPolar(PointFromId(1466), ((IntToFixed(lv_i) * 1.5) - 2.25), (PointGetFacing(PointFromId(1466)) - 90.0)), PointFromId(370));
    }
    lv_i = 1;
    for ( ; ( (auto1D00FB1C_ai >= 0 && lv_i <= auto1D00FB1C_ae) || (auto1D00FB1C_ai < 0 && lv_i >= auto1D00FB1C_ae) ) ; lv_i += auto1D00FB1C_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "HighTemplar", 0, gv_p01_PLAYER, PointWithOffsetPolar(PointFromId(1467), ((IntToFixed(lv_i) * 1.5) - 2.25), (PointGetFacing(PointFromId(1467)) - 90.0)), PointFromId(370));
    }
    libNtve_gf_UnitCreateFacingPoint(1, "Colossus", 0, gv_p01_PLAYER, PointFromId(580), PointFromId(370));
    libNtve_gf_UnitCreateFacingPoint(1, "Colossus", 0, gv_p01_PLAYER, PointFromId(1468), PointFromId(370));
    libNtve_gf_UnitCreateFacingPoint(1, "Colossus", 0, gv_p01_PLAYER, PointFromId(581), PointFromId(370));
    libNtve_gf_UnitCreateFacingPoint(1, "Colossus", 0, gv_p01_PLAYER, PointFromId(1526), PointFromId(370));
    libNtve_gf_UnitCreateFacingPoint(1, "Colossus", 0, gv_p01_PLAYER, PointFromId(832), PointFromId(370));
    Wait(2.0, c_timeGame);
    CameraApplyInfo(gv_p01_PLAYER, CameraInfoFromId(101), 0.0, -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_p01_PLAYER, CameraInfoFromId(117), SoundLengthSync(SoundLink("TZeratul04BriefingOvermind00009", 0)), -1, 10, true);
    MovieStartRecording("Briefing_Video_TZeratul04_00");
    SoundPlay(SoundLink("TZeratul04BriefingOvermind00009", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TZeratul04BriefingOvermind00009", 0))), c_timeReal);
    auto1B425C86_g = UnitGroup("Zealot", gv_p01_PLAYER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1B425C86_u = UnitGroupCount(auto1B425C86_g, c_unitCountAll);
    for (;; auto1B425C86_u -= 1) {
        auto1B425C86_var = UnitGroupUnitFromEnd(auto1B425C86_g, auto1B425C86_u);
        if (auto1B425C86_var == null) { break; }
        auto1C7940D6_val = RandomInt(1, 3);
        if (auto1C7940D6_val == 1) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(auto1B425C86_var), c_animNameDefault, "Stand Victory", c_animFlagPlayForever, c_animTimeDefault);
        }
        else if (auto1C7940D6_val == 2) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(auto1B425C86_var), c_animNameDefault, "Stand Victory 02", c_animFlagPlayForever, c_animTimeDefault);
        }
        else if (auto1C7940D6_val == 3) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(auto1B425C86_var), c_animNameDefault, "Stand Victory 03", c_animFlagPlayForever, c_animTimeDefault);
        }
        else {
        }
    }
    Wait((0.5 * SoundLengthSync(SoundLink("TZeratul04BriefingOvermind00009", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerStop(gt_BriefingZealotAnimations);
    auto90716FA6_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto90716FA6_u = UnitGroupCount(auto90716FA6_g, c_unitCountAll);
    for (;; auto90716FA6_u -= 1) {
        auto90716FA6_var = UnitGroupUnitFromEnd(auto90716FA6_g, auto90716FA6_u);
        if (auto90716FA6_var == null) { break; }
        UnitRemove(auto90716FA6_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00_Init () {
    gt_BriefingScene00 = TriggerCreate("gt_BriefingScene00_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2B746BF8_g;
    int auto2B746BF8_u;
    unit auto2B746BF8_var;
    unitgroup autoB2221A6F_g;
    int autoB2221A6F_u;
    unit autoB2221A6F_var;
    unitgroup auto52ECF1BA_g;
    int auto52ECF1BA_u;
    unit auto52ECF1BA_var;
    unitgroup autoF4C2E79C_g;
    int autoF4C2E79C_u;
    unit autoF4C2E79C_var;
    unitgroup auto2604AB55_g;
    int auto2604AB55_u;
    unit auto2604AB55_var;
    const int auto4DFD62F2_n = 250;
    int auto4DFD62F2_i;
    const int auto37EFEAE5_n = 75;
    int auto37EFEAE5_i;
    const int auto7CF04497_n = 25;
    int auto7CF04497_i;
    const int auto06EAE90A_n = 15;
    int auto06EAE90A_i;
    const int auto913C0977_n = 10;
    int auto913C0977_i;

    // Actions
    if (!runActions) {
        return true;
    }

    auto2B746BF8_g = UnitGroup("HybridDestroyer", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2B746BF8_u = UnitGroupCount(auto2B746BF8_g, c_unitCountAll);
    for (;; auto2B746BF8_u -= 1) {
        auto2B746BF8_var = UnitGroupUnitFromEnd(auto2B746BF8_g, auto2B746BF8_u);
        if (auto2B746BF8_var == null) { break; }
        UnitRemove(auto2B746BF8_var);
    }
    autoB2221A6F_g = UnitGroup("HybridReaver", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB2221A6F_u = UnitGroupCount(autoB2221A6F_g, c_unitCountAll);
    for (;; autoB2221A6F_u -= 1) {
        autoB2221A6F_var = UnitGroupUnitFromEnd(autoB2221A6F_g, autoB2221A6F_u);
        if (autoB2221A6F_var == null) { break; }
        UnitRemove(autoB2221A6F_var);
    }
    auto52ECF1BA_g = UnitGroup("Omegalisk", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto52ECF1BA_u = UnitGroupCount(auto52ECF1BA_g, c_unitCountAll);
    for (;; auto52ECF1BA_u -= 1) {
        auto52ECF1BA_var = UnitGroupUnitFromEnd(auto52ECF1BA_g, auto52ECF1BA_u);
        if (auto52ECF1BA_var == null) { break; }
        UnitRemove(auto52ECF1BA_var);
    }
    autoF4C2E79C_g = UnitGroup(null, gv_p05_ZERG_NE, RegionFromId(31), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF4C2E79C_u = UnitGroupCount(autoF4C2E79C_g, c_unitCountAll);
    for (;; autoF4C2E79C_u -= 1) {
        autoF4C2E79C_var = UnitGroupUnitFromEnd(autoF4C2E79C_g, autoF4C2E79C_u);
        if (autoF4C2E79C_var == null) { break; }
        UnitRemove(autoF4C2E79C_var);
    }
    auto2604AB55_g = UnitGroup(null, gv_p05_ZERG_NE, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2604AB55_u = UnitGroupCount(auto2604AB55_g, c_unitCountAll);
    for (;; auto2604AB55_u -= 1) {
        auto2604AB55_var = UnitGroupUnitFromEnd(auto2604AB55_g, auto2604AB55_u);
        if (auto2604AB55_var == null) { break; }
        libNtve_gf_MakeUnitFacePoint(auto2604AB55_var, PointFromId(370), 0.0);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    libNtve_gf_UnitCreateFacingPoint(1, "Ultralisk", 0, gv_p05_ZERG_NE, PointFromId(831), PointFromId(370));
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    for (auto4DFD62F2_i = 1; auto4DFD62F2_i <= auto4DFD62F2_n; auto4DFD62F2_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Zergling", 0, gv_p05_ZERG_NE, RegionRandomPoint(RegionFromId(83)), PointFromId(370));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    for (auto37EFEAE5_i = 1; auto37EFEAE5_i <= auto37EFEAE5_n; auto37EFEAE5_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Hydralisk", 0, gv_p05_ZERG_NE, RegionRandomPoint(RegionFromId(83)), PointFromId(370));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    for (auto7CF04497_i = 1; auto7CF04497_i <= auto7CF04497_n; auto7CF04497_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, gv_p05_ZERG_NE, RegionRandomPoint(RegionFromId(83)), PointFromId(370));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    for (auto06EAE90A_i = 1; auto06EAE90A_i <= auto06EAE90A_n; auto06EAE90A_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Overlord", 0, gv_p05_ZERG_NE, RegionRandomPoint(RegionFromId(83)), PointFromId(370));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    for (auto913C0977_i = 1; auto913C0977_i <= auto913C0977_n; auto913C0977_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Ultralisk", 0, gv_p05_ZERG_NE, RegionRandomPoint(RegionFromId(83)), PointFromId(370));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    libNtve_gf_UnitCreateFacingPoint(1, "HybridReaver", 0, gv_p05_ZERG_NE, PointFromId(371), PointFromId(370));
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_UnitCreateFacingPoint(1, "HybridReaver", 0, gv_p05_ZERG_NE, PointFromId(829), PointFromId(370));
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_UnitCreateFacingPoint(1, "Maar", 0, gv_p05_ZERG_NE, PointFromId(257), PointFromId(370));
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_p05_ZERG_NE);
    Wait(2.0, c_timeGame);
    CameraApplyInfo(gv_p01_PLAYER, CameraInfoFromId(122), 0.0, -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_p01_PLAYER, CameraInfoFromId(153), ((SoundLengthSync(SoundLink("TZeratul04BriefingOvermind00010", 0)) + 0.0) - 1.0), -1, 10, true);
    MovieStartRecording("Briefing_Video_TZeratul04_01");
    SoundPlay(SoundLink("TZeratul04BriefingOvermind00010", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TZeratul04BriefingOvermind00010", 0))), c_timeReal);
    CameraApplyInfo(gv_p01_PLAYER, CameraInfoFromId(830), SoundLengthSync(SoundLink("TZeratul04BriefingOvermind00008", 0)), -1, 10, true);
    SoundPlay(SoundLink("TZeratul04BriefingOvermind00008", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TZeratul04BriefingOvermind00008", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TZeratul04BriefingOvermind00010", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TZeratul04BriefingOvermind00008", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01_Init () {
    gt_BriefingScene01 = TriggerCreate("gt_BriefingScene01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Zealot Animations
//--------------------------------------------------------------------------------------------------
bool gt_BriefingZealotAnimations_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto795A85AC_g;
    int auto795A85AC_u;
    unit auto795A85AC_var;
    int auto0C0F4F99_val;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeGame);
        auto795A85AC_g = UnitGroup("Zealot", gv_p01_PLAYER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto795A85AC_u = UnitGroupCount(auto795A85AC_g, c_unitCountAll);
        for (;; auto795A85AC_u -= 1) {
            auto795A85AC_var = UnitGroupUnitFromEnd(auto795A85AC_g, auto795A85AC_u);
            if (auto795A85AC_var == null) { break; }
            if ((RandomInt(1, 10) == 1)) {
                auto0C0F4F99_val = RandomInt(1, 3);
                if (auto0C0F4F99_val == 1) {
                    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(auto795A85AC_var), c_animNameDefault, "Stand Victory", 0, c_animTimeDefault);
                }
                else if (auto0C0F4F99_val == 2) {
                    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(auto795A85AC_var), c_animNameDefault, "Stand Victory 02", 0, c_animTimeDefault);
                }
                else if (auto0C0F4F99_val == 3) {
                    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(auto795A85AC_var), c_animNameDefault, "Stand Victory 03", 0, c_animTimeDefault);
                }
                else {
                }
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingZealotAnimations_Init () {
    gt_BriefingZealotAnimations = TriggerCreate("gt_BriefingZealotAnimations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing Scene 00
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingScene00_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p01_PLAYER, CameraInfoFromId(1555), 0.0, -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_p01_PLAYER, CameraInfoFromId(1556), (SoundLengthSync(SoundLink("DebriefsZeratul00076", -1)) - 1.0), -1, 10, true);
    MovieStartRecording("Debriefing_Video_TZeratul04_00");
    SoundPlay(SoundLink("DebriefsZeratul00076", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("DebriefsZeratul00076", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("DebriefsZeratul00076", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingScene00_Init () {
    gt_DebriefingScene00 = TriggerCreate("gt_DebriefingScene00_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing Scene 01
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingScene01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto38B4DF0B_g;
    int auto38B4DF0B_u;
    unit auto38B4DF0B_var;
    const int auto34403C32_n = 75;
    int auto34403C32_i;
    const int auto95B953A8_n = 30;
    int auto95B953A8_i;
    const int auto8494DF75_n = 20;
    int auto8494DF75_i;

    // Actions
    if (!runActions) {
        return true;
    }

    auto38B4DF0B_g = UnitGroup(null, gv_p06_ZERG_SE, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto38B4DF0B_u = UnitGroupCount(auto38B4DF0B_g, c_unitCountAll);
    for (;; auto38B4DF0B_u -= 1) {
        auto38B4DF0B_var = UnitGroupUnitFromEnd(auto38B4DF0B_g, auto38B4DF0B_u);
        if (auto38B4DF0B_var == null) { break; }
        UnitRemove(auto38B4DF0B_var);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "KerriganChar", 0, gv_p06_ZERG_SE, PointFromId(1557));
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Stand Cover", c_animFlagPlayForever, c_animTimeDefault);
    for (auto34403C32_i = 1; auto34403C32_i <= auto34403C32_n; auto34403C32_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Zergling", 0, gv_p06_ZERG_SE, RegionRandomPoint(RegionFromId(32)), PointFromId(1557));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    for (auto95B953A8_i = 1; auto95B953A8_i <= auto95B953A8_n; auto95B953A8_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Hydralisk", 0, gv_p06_ZERG_SE, RegionRandomPoint(RegionFromId(32)), PointFromId(1557));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    for (auto8494DF75_i = 1; auto8494DF75_i <= auto8494DF75_n; auto8494DF75_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Roach", 0, gv_p06_ZERG_SE, RegionRandomPoint(RegionFromId(32)), PointFromId(1557));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    libNtve_gf_UnitCreateFacingPoint(1, "Overlord", 0, gv_p06_ZERG_SE, PointFromId(1558), PointFromId(1557));
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_UnitCreateFacingPoint(1, "Overlord", 0, gv_p06_ZERG_SE, PointFromId(1559), PointFromId(1557));
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_UnitCreateFacingPoint(1, "Overlord", 0, gv_p06_ZERG_SE, PointFromId(1560), PointFromId(1557));
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    CameraApplyInfo(gv_p01_PLAYER, CameraInfoFromId(1566), 0.0, -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_p01_PLAYER, CameraInfoFromId(1567), (SoundLengthSync(SoundLink("DebriefsZeratul00077", -1)) - 1.0), -1, 10, true);
    MovieStartRecording("Debriefing_Video_TZeratul04_01");
    SoundPlay(SoundLink("DebriefsZeratul00077", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("DebriefsZeratul00077", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("DebriefsZeratul00077", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingScene01_Init () {
    gt_DebriefingScene01 = TriggerCreate("gt_DebriefingScene01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto78F9B2D4_g;
    int auto78F9B2D4_u;
    unit auto78F9B2D4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    GameTimeOfDayPause(true);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(482)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    UnitPauseAll(true);
    libNtve_gf_ShowHideUnit(UnitFromId(686), false);
    libNtve_gf_ShowHideUnit(UnitFromId(717), false);
    auto78F9B2D4_g = UnitGroup("Probe", gv_p01_PLAYER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto78F9B2D4_u = UnitGroupCount(auto78F9B2D4_g, c_unitCountAll);
    for (;; auto78F9B2D4_u -= 1) {
        auto78F9B2D4_var = UnitGroupUnitFromEnd(auto78F9B2D4_g, auto78F9B2D4_u);
        if (auto78F9B2D4_var == null) { break; }
        libNtve_gf_PauseUnit(auto78F9B2D4_var, false);
    }
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_p01_PLAYER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6F0B679E_g;
    int auto6F0B679E_u;
    unit auto6F0B679E_var;
    int auto965FA731_val;

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetBackground(c_backgroundFixed, "ShakurasSkyBox", 100.0);
    CameraApplyInfo(gv_p01_PLAYER, CameraInfoFromId(850), 0.0, -1, 0, true);
    CameraApplyInfo(gv_p01_PLAYER, CameraInfoFromId(851), (SoundLengthSync(SoundLink("TZeratul04Zeratul00001", 0)) * 0.8), -1, 5, true);
    TriggerExecute(gt_IntroHeroGate, true, false);
    GameSetLighting("AiurFlashback", 0.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "Colossus", 0, gv_p01_PLAYER, PointFromId(1552));
    UnitGroupAdd(gv_introCinematicProtossUnits, UnitLastCreated());
    gv_introCinematicColossusWest = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "Colossus", 0, gv_p01_PLAYER, PointFromId(1551));
    UnitGroupAdd(gv_introCinematicProtossUnits, UnitLastCreated());
    gv_introCinematicColossusEast = UnitLastCreated();
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_introCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    GameSetLighting("Shakuras", 15.0);
    Wait(1.0, c_timeReal);
    // Transmission - SoundLink("TZeratul04Zeratul00001", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul04Zeratul00001", 0), c_transmissionDurationAdd, 0.0, false);
    Wait((SoundLengthSync(SoundLink("TZeratul04Zeratul00001", 0)) * 0.8), c_timeGame);
    CameraApplyInfo(gv_p01_PLAYER, CameraInfoFromId(252), (SoundLengthSync(SoundLink("TZeratul04Zeratul00001", 0)) * 0.2), -1, 10, true);
    TransmissionWait(TransmissionLastSent(), 5.0);
    auto6F0B679E_g = UnitGroup("Zealot", gv_p01_PLAYER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6F0B679E_u = UnitGroupCount(auto6F0B679E_g, c_unitCountAll);
    for (;; auto6F0B679E_u -= 1) {
        auto6F0B679E_var = UnitGroupUnitFromEnd(auto6F0B679E_g, auto6F0B679E_u);
        if (auto6F0B679E_var == null) { break; }
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(auto6F0B679E_var), c_animNameDefault);
        auto965FA731_val = RandomInt(1, 5);
        if (auto965FA731_val == 1) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(auto6F0B679E_var), c_animNameDefault, "Stand Victory", c_animFlagNonLooping, c_animTimeDefault);
        }
        else if (auto965FA731_val == 2) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(auto6F0B679E_var), c_animNameDefault, "Stand Victory 02", c_animFlagNonLooping, c_animTimeDefault);
        }
        else if (auto965FA731_val == 3) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(auto6F0B679E_var), c_animNameDefault, "Stand Victory 03", c_animFlagNonLooping, c_animTimeDefault);
        }
        else if (auto965FA731_val == 4) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(auto6F0B679E_var), c_animNameDefault, "Stand Victory", c_animFlagNonLooping, c_animTimeDefault);
        }
        else if (auto965FA731_val == 5) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(auto6F0B679E_var), c_animNameDefault, "Stand Victory 02", c_animFlagNonLooping, c_animTimeDefault);
        }
        else {
        }
    }
    TransmissionWait(TransmissionLastSent(), 0.0);
    gv_introCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup autoCF622460_g;
    int autoCF622460_u;
    unit autoCF622460_var;
    unitgroup autoDCDF987B_g;
    int autoDCDF987B_u;
    unit autoDCDF987B_var;
    unitgroup autoF3274202_g;
    int autoF3274202_u;
    unit autoF3274202_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_IntroHeroGate);
    autoCF622460_g = gv_introCinematicProtossUnits;
    autoCF622460_u = UnitGroupCount(autoCF622460_g, c_unitCountAll);
    for (;; autoCF622460_u -= 1) {
        autoCF622460_var = UnitGroupUnitFromEnd(autoCF622460_g, autoCF622460_u);
        if (autoCF622460_var == null) { break; }
        UnitRemove(autoCF622460_var);
    }
    UnitPauseAll(false);
    libNtve_gf_ShowHideUnit(UnitFromId(686), true);
    libNtve_gf_ShowHideUnit(UnitFromId(717), true);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(482)), c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    GameSetLighting("Shakuras", 0.0);
    GameTimeOfDayPause(true);
    PlayerSetState(gv_p01_PLAYER, c_playerStateXPGain, true);
    AITimePause(false);
    autoDCDF987B_g = UnitGroup("Assimilator", c_playerAny, RegionFromId(34), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDCDF987B_u = UnitGroupCount(autoDCDF987B_g, c_unitCountAll);
    for (;; autoDCDF987B_u -= 1) {
        autoDCDF987B_var = UnitGroupUnitFromEnd(autoDCDF987B_g, autoDCDF987B_u);
        if (autoDCDF987B_var == null) { break; }
        UnitSetPropertyFixed(autoDCDF987B_var, c_unitPropResources, UnitGetCustomValue(autoDCDF987B_var, 0));
    }
    autoF3274202_g = UnitGroup("MineralField", c_playerAny, RegionFromId(34), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF3274202_u = UnitGroupCount(autoF3274202_g, c_unitCountAll);
    for (;; autoF3274202_u -= 1) {
        autoF3274202_var = UnitGroupUnitFromEnd(autoF3274202_g, autoF3274202_u);
        if (autoF3274202_var == null) { break; }
        UnitSetPropertyFixed(autoF3274202_var, c_unitPropResources, UnitGetCustomValue(autoF3274202_var, 0));
    }
    PlayerModifyPropertyInt(gv_p01_PLAYER, c_playerPropMinerals, c_playerPropOperSetTo, 1500);
    PlayerModifyPropertyInt(gv_p01_PLAYER, c_playerPropVespene, c_playerPropOperSetTo, 1500);
    if ((gv_introCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        CameraApplyInfo(1, CameraInfoFromId(60), lv_fadeDuration, -1, 10, true);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    }
    else {
        lv_fadeDuration = 1.0;
        CameraApplyInfo(gv_p01_PLAYER, CameraInfoDefault(), 0.0, -1, 10, false);
        libNtve_gf_SwooshCamera(gv_p01_PLAYER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(60)), 1.0);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    }
    libNtve_gf_GlobalCinematicSetting(false);
    UnitSelect(gv_zeratul, gv_p01_PLAYER, true);
    gv_inCinematic = false;
    Wait(lv_fadeDuration, c_timeReal);
    TriggerExecute(gt_IntroSequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Hero Gate
//--------------------------------------------------------------------------------------------------
bool gt_IntroHeroGate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(6.0, c_timeGame);
    UnitIssueOrder(gv_introCinematicColossusEast, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1554)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(gv_introCinematicColossusWest, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1553)), c_orderQueueReplace);
    Wait(6.0, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(482)), c_animNameDefault, "Stand Work End", c_animFlagNonLooping, c_animTimeDefault);
    Wait(6.667, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(482)), c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroHeroGate_Init () {
    gt_IntroHeroGate = TriggerCreate("gt_IntroHeroGate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0DA95E20_g;
    int auto0DA95E20_u;
    unit auto0DA95E20_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_p01_PLAYER);
    libNtve_gf_StoreUnitSelection(gv_p01_PLAYER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_p01_PLAYER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    AITimePause(true);
    UnitPauseAll(true);
    gv_midHiddenUnitGroup = UnitGroup(null, gv_p05_ZERG_NE, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0DA95E20_g = gv_midHiddenUnitGroup;
    auto0DA95E20_u = UnitGroupCount(auto0DA95E20_g, c_unitCountAll);
    for (;; auto0DA95E20_u -= 1) {
        auto0DA95E20_var = UnitGroupUnitFromEnd(auto0DA95E20_g, auto0DA95E20_u);
        if (auto0DA95E20_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto0DA95E20_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoFC3FFB40_n = 23;
    int autoFC3FFB40_i;
    const int autoA0D5771D_n = 26;
    int autoA0D5771D_i;
    const int auto08CFB17A_n = 13;
    int auto08CFB17A_i;
    const int autoD0B3A3B3_n = 7;
    int autoD0B3A3B3_i;
    const int auto2142179A_n = 23;
    int auto2142179A_i;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p01_PLAYER, CameraInfoFromId(670), 0.0, -1, 10, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "OmegaliskBurrowed", 0, gv_p05_ZERG_NE, PointFromId(912));
    gv_omegalisk1 = UnitLastCreated();
    AISetUnitScriptControlled(gv_omegalisk1, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "OmegaliskBurrowed", 0, gv_p05_ZERG_NE, PointFromId(913));
    gv_omegalisk2 = UnitLastCreated();
    AISetUnitScriptControlled(gv_omegalisk2, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "OmegaliskBurrowed", 0, gv_p05_ZERG_NE, PointFromId(914));
    gv_omegalisk3 = UnitLastCreated();
    AISetUnitScriptControlled(gv_omegalisk3, true);
    for (autoFC3FFB40_i = 1; autoFC3FFB40_i <= autoFC3FFB40_n; autoFC3FFB40_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p05_ZERG_NE, RegionRandomPoint(RegionFromId(20)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(915)), c_orderQueueReplace);
    }
    for (autoA0D5771D_i = 1; autoA0D5771D_i <= autoA0D5771D_n; autoA0D5771D_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p05_ZERG_NE, RegionRandomPoint(RegionFromId(55)));
    }
    for (auto08CFB17A_i = 1; auto08CFB17A_i <= auto08CFB17A_n; auto08CFB17A_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Roach", 0, gv_p05_ZERG_NE, RegionRandomPoint(RegionFromId(55)));
    }
    for (autoD0B3A3B3_i = 1; autoD0B3A3B3_i <= autoD0B3A3B3_n; autoD0B3A3B3_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Overlord", 0, gv_p05_ZERG_NE, RegionRandomPoint(RegionFromId(55)));
    }
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_midCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_p01_PLAYER, CameraInfoFromId(671), 12.0, -1, 10, true);
    TriggerExecute(gt_MidOmegalisk1Unburrow, true, false);
    TriggerExecute(gt_MidOmegalisk2Unburrow, true, false);
    TriggerExecute(gt_MidOmegalisk3Unburrow, true, false);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    // Transmission - SoundLink("TZeratul04DarkVoice00012", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul04DarkVoice00012", 0), c_transmissionDurationAdd, 0.0, false);
    Wait(6.0, c_timeGame);
    for (auto2142179A_i = 1; auto2142179A_i <= auto2142179A_n; auto2142179A_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p05_ZERG_NE, RegionRandomPoint(RegionFromId(21)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(916)), c_orderQueueReplace);
    }
    TransmissionWait(TransmissionLastSent(), 0.0);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(0.5, c_timeReal);
    if ((UnitIsAlive(gv_zeratul) == true)) {
        CameraApplyInfo(gv_p01_PLAYER, CameraInfoDefault(), 0.0, -1, 10, true);
        libNtve_gf_SwooshCamera(gv_p01_PLAYER, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), 42.0, UnitGetPosition(gv_zeratul), 8.0);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        // Transmission - SoundLink("TZeratul04Zeratul00013", -1)
        libCamp_gf_SendTransmissionCampaign(gv_zeratul, SoundLink("TZeratul04Zeratul00013", 0), c_transmissionDurationAdd, 1.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    gv_midCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_midCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerStop(gt_MidOmegalisk1Unburrow);
    TriggerStop(gt_MidOmegalisk2Unburrow);
    TriggerStop(gt_MidOmegalisk3Unburrow);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto9618AE93_g;
    int auto9618AE93_u;
    unit auto9618AE93_var;
    unitgroup auto5BCAA25D_g;
    int auto5BCAA25D_u;
    unit auto5BCAA25D_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto9618AE93_g = UnitGroup(null, gv_p05_ZERG_NE, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9618AE93_u = UnitGroupCount(auto9618AE93_g, c_unitCountAll);
    for (;; auto9618AE93_u -= 1) {
        auto9618AE93_var = UnitGroupUnitFromEnd(auto9618AE93_g, auto9618AE93_u);
        if (auto9618AE93_var == null) { break; }
        UnitRemove(auto9618AE93_var);
    }
    auto5BCAA25D_g = gv_midHiddenUnitGroup;
    auto5BCAA25D_u = UnitGroupCount(auto5BCAA25D_g, c_unitCountAll);
    for (;; auto5BCAA25D_u -= 1) {
        auto5BCAA25D_var = UnitGroupUnitFromEnd(auto5BCAA25D_g, auto5BCAA25D_u);
        if (auto5BCAA25D_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto5BCAA25D_var, true);
    }
    UnitPauseAll(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_p01_PLAYER, c_playerStateXPGain, true);
    AITimePause(false);
    libNtve_gf_RestoreUnitSelection(gv_p01_PLAYER);
    CameraRestore(gv_p01_PLAYER, 0.0, -1, 10);
    if ((gv_midCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    gv_inCinematic = false;
    Wait(lv_fadeDuration, c_timeReal);
    TriggerExecute(gt_StartGameStage2, true, false);
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/6FCAF25C"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Omegalisk 1 Unburrow
//--------------------------------------------------------------------------------------------------
bool gt_MidOmegalisk1Unburrow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_omegalisk1) == true)) {
        Wait(1.0, c_timeGame);
        UnitIssueOrder(gv_omegalisk1, Order(AbilityCommand("BurrowOmegaliskUp", 0)), c_orderQueueReplace);
        Wait(2.0, c_timeGame);
        SoundPlayOnUnit(SoundLink("Ultralisk_Roar", -1), PlayerGroupAll(), gv_omegalisk1, 0.0, 100.0, 0.0);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_omegalisk1), c_animNameDefault, "Stand Victory", c_animFlagNonLooping, c_animTimeDefault);
        libNtve_gf_ShareVisionofUnit(gv_omegalisk1, true, gv_p01_PLAYER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidOmegalisk1Unburrow_Init () {
    gt_MidOmegalisk1Unburrow = TriggerCreate("gt_MidOmegalisk1Unburrow_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Omegalisk 2 Unburrow
//--------------------------------------------------------------------------------------------------
bool gt_MidOmegalisk2Unburrow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_omegalisk2) == true)) {
        Wait(4.0, c_timeGame);
        UnitIssueOrder(gv_omegalisk2, Order(AbilityCommand("BurrowOmegaliskUp", 0)), c_orderQueueReplace);
        Wait(2.0, c_timeGame);
        SoundPlayOnUnit(SoundLink("Ultralisk_Roar", -1), PlayerGroupAll(), gv_omegalisk2, 0.0, 100.0, 0.0);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_omegalisk2), c_animNameDefault, "Stand Victory", c_animFlagNonLooping, c_animTimeDefault);
        Wait(0.5, c_timeGame);
        libNtve_gf_ShareVisionofUnit(gv_omegalisk2, true, gv_p01_PLAYER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidOmegalisk2Unburrow_Init () {
    gt_MidOmegalisk2Unburrow = TriggerCreate("gt_MidOmegalisk2Unburrow_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Omegalisk 3 Unburrow
//--------------------------------------------------------------------------------------------------
bool gt_MidOmegalisk3Unburrow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_omegalisk3) == true)) {
        Wait(7.0, c_timeGame);
        UnitIssueOrder(gv_omegalisk3, Order(AbilityCommand("BurrowOmegaliskUp", 0)), c_orderQueueReplace);
        Wait(2.0, c_timeGame);
        SoundPlayOnUnit(SoundLink("Ultralisk_Roar", -1), PlayerGroupAll(), gv_omegalisk3, 0.0, 100.0, 0.0);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_omegalisk3), c_animNameDefault, "Stand Victory", c_animFlagNonLooping, c_animTimeDefault);
        libNtve_gf_ShareVisionofUnit(gv_omegalisk3, true, gv_p01_PLAYER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidOmegalisk3Unburrow_Init () {
    gt_MidOmegalisk3Unburrow = TriggerCreate("gt_MidOmegalisk3Unburrow_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto29778CC2_g;
    int auto29778CC2_u;
    unit auto29778CC2_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    libNtve_gf_PreloadModelObject("VC_Zeratul4_Fade", false);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_p01_PLAYER);
    PlayerSetState(gv_p01_PLAYER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    AITimePause(true);
    UnitPauseAll(true);
    auto29778CC2_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto29778CC2_u = UnitGroupCount(auto29778CC2_g, c_unitCountAll);
    for (;; auto29778CC2_u -= 1) {
        auto29778CC2_var = UnitGroupUnitFromEnd(auto29778CC2_g, auto29778CC2_u);
        if (auto29778CC2_var == null) { break; }
        UnitRemove(auto29778CC2_var);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hive", 0, gv_p04_ZERG_NW, PointFromId(1130));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hive", 0, gv_p04_ZERG_NW, PointFromId(1131));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hive", 0, gv_p04_ZERG_NW, PointFromId(1132));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hive", 0, gv_p04_ZERG_NW, PointFromId(1133));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hive", 0, gv_p04_ZERG_NW, PointFromId(1134));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "BanelingNest", 0, gv_p04_ZERG_NW, PointFromId(1140));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskDen", 0, gv_p04_ZERG_NW, PointFromId(1139));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestationPit", 0, gv_p04_ZERG_NW, PointFromId(1142));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "LurkerDen", 0, gv_p04_ZERG_NW, PointFromId(1137));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "GreaterSpire", 0, gv_p04_ZERG_NW, PointFromId(1143));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RoachWarren", 0, gv_p04_ZERG_NW, PointFromId(1144));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpawningPool", 0, gv_p04_ZERG_NW, PointFromId(1138));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "UltraliskCavern", 0, gv_p04_ZERG_NW, PointFromId(1141));
    libNtve_gf_CreateUnitsAtPoint2(1, "HybridDestroyer", 0, gv_p04_ZERG_NW, PointFromId(1148));
    gv_hybrid1 = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "HybridReaver", 0, gv_p04_ZERG_NW, PointFromId(1149));
    gv_hybrid2 = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "HybridDestroyer", 0, gv_p04_ZERG_NW, PointFromId(1150));
    gv_hybrid3 = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "HybridReaver", 0, gv_p04_ZERG_NW, PointFromId(1151));
    gv_hybrid4 = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoBD29EE66_n = 12;
    int autoBD29EE66_i;
    const int auto795402A3_n = 9;
    int auto795402A3_i;
    const int auto40A40649_n = 140;
    int auto40A40649_i;
    const int autoC270682F_n = 28;
    int autoC270682F_i;
    const int autoB642F2E4_n = 17;
    int autoB642F2E4_i;
    const int auto4367F587_n = 5;
    int auto4367F587_i;
    unitgroup auto70568BC4_g;
    int auto70568BC4_u;
    unit auto70568BC4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetBackground(c_backgroundFixed, "ShakurasSkyBox", 100.0);
    CameraApplyInfo(gv_p01_PLAYER, CameraInfoFromId(1145), 0.0, -1, 10, true);
    for (autoBD29EE66_i = 1; autoBD29EE66_i <= autoBD29EE66_n; autoBD29EE66_i += 1) {
        UnitCreate(1, "Overlord", 0, gv_p04_ZERG_NW, RegionRandomPoint(RegionFromId(93)), libNtve_gf_RandomAngle());
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    for (auto795402A3_i = 1; auto795402A3_i <= auto795402A3_n; auto795402A3_i += 1) {
        UnitCreate(1, "Drone", 0, gv_p04_ZERG_NW, RegionRandomPoint(RegionFromId(91)), libNtve_gf_RandomAngle());
    }
    for (auto40A40649_i = 1; auto40A40649_i <= auto40A40649_n; auto40A40649_i += 1) {
        UnitCreate(1, "Zergling", 0, gv_p04_ZERG_NW, RegionRandomPoint(RegionFromId(93)), libNtve_gf_RandomAngle());
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    for (autoC270682F_i = 1; autoC270682F_i <= autoC270682F_n; autoC270682F_i += 1) {
        UnitCreate(1, "Hydralisk", 0, gv_p04_ZERG_NW, RegionRandomPoint(RegionFromId(93)), libNtve_gf_RandomAngle());
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    for (autoB642F2E4_i = 1; autoB642F2E4_i <= autoB642F2E4_n; autoB642F2E4_i += 1) {
        UnitCreate(1, "Roach", 0, gv_p04_ZERG_NW, RegionRandomPoint(RegionFromId(93)), libNtve_gf_RandomAngle());
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    for (auto4367F587_i = 1; auto4367F587_i <= auto4367F587_n; auto4367F587_i += 1) {
        UnitCreate(1, "Ultralisk", 0, gv_p04_ZERG_NW, RegionRandomPoint(RegionFromId(93)), libNtve_gf_RandomAngle());
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TZeratul04MusicOutro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_victoryCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_p01_PLAYER, CameraInfoFromId(1146), 12.0, -1, 10, true);
    TriggerExecute(gt_VictoryHybridExplosion, true, false);
    Wait(10.0, c_timeGame);
    CameraApplyInfo(gv_p01_PLAYER, CameraInfoFromId(1147), 10.0, -1, 10, true);
    // Transmission - SoundLink("TZeratul04DarkVoice00016", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul04DarkVoice00016", 0), c_transmissionDurationAdd, 0.0, true);
    Wait(1.0, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    auto70568BC4_g = UnitGroup(null, gv_p04_ZERG_NW, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto70568BC4_u = UnitGroupCount(auto70568BC4_g, c_unitCountAll);
    for (;; auto70568BC4_u -= 1) {
        auto70568BC4_var = UnitGroupUnitFromEnd(auto70568BC4_g, auto70568BC4_u);
        if (auto70568BC4_var == null) { break; }
        UnitRemove(auto70568BC4_var);
    }
    EnvironmentShow(c_environmentAll, false);
    GameSetLighting("PlanetViewUlnar", 0.0);
    PortraitCreate(0, 0, c_anchorCenter, 237, 360, "VC_Zeratul4_Fade", "", "", false, true);
    gv_victoryPortrait = PortraitLastCreated();
    PortraitSetLight(gv_victoryPortrait, "PlanetViewUlnar");
    PortraitSetBorderVisible(gv_victoryPortrait, false);
    PortraitSetFullscreen(gv_victoryPortrait, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    CameraApplyInfo(gv_p01_PLAYER, CameraInfoFromId(1152), 0.0, -1, 10, true);
    Wait(1.0, c_timeGame);
    PortraitSetVisible(gv_victoryPortrait, PlayerGroupAll(), true, false);
    if ((gv_killCount >= 2500)) {
        // Transmission - SoundLink("TZeratul04DarkVoice00036", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul04DarkVoice00036", 0), c_transmissionDurationAdd, 0.0, true);
    }
    else {
        // Transmission - SoundLink("TZeratul04DarkVoice00028", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TZeratul04DarkVoice00028", 0), c_transmissionDurationAdd, 0.0, true);
    }
    CinematicFade(false, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(4.0, c_timeReal);
    gv_victoryCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victoryCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(lv_fadeDuration, c_timeReal);
    UnitPauseAll(true);
    PortraitDestroy(gv_victoryPortrait);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Hybrid Explosion
//--------------------------------------------------------------------------------------------------
bool gt_VictoryHybridExplosion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.5, c_timeGame);
    UnitBehaviorAdd(gv_hybrid1, "HybridSingularity", gv_hybrid1, 1);
    Wait(5.0, c_timeGame);
    UnitBehaviorAdd(gv_hybrid2, "HybridSingularity", gv_hybrid2, 1);
    Wait(5.0, c_timeGame);
    UnitBehaviorAdd(gv_hybrid3, "HybridSingularity", gv_hybrid3, 1);
    Wait(5.0, c_timeGame);
    UnitBehaviorAdd(gv_hybrid4, "HybridSingularity", gv_hybrid4, 1);
    Wait(1.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryHybridExplosion_Init () {
    gt_VictoryHybridExplosion = TriggerCreate("gt_VictoryHybridExplosion_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04Music_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_IntroSequence_Init();
    gt_StartGameStage1_Init();
    gt_StartGameStage2_Init();
    gt_CreateLeaderboard_Init();
    gt_UpdateLeaderboardZergorHybridKilled_Init();
    gt_PrimaryKillCountComplete_Init();
    gt_ActivateHeroWayGate_Init();
    gt_NewTech01PhoenixQ_Init();
    gt_NewTech02VoidRayQ_Init();
    gt_NewTech03CarriersQ_Init();
    gt_NewTech04MothershipQ_Init();
    gt_ReinforcementBehavior_Init();
    gt_MothershipSpawn_Init();
    gt_ZeratulDiesQ_Init();
    gt_HeroPhoenixDiesQ_Init();
    gt_HeroVoidRayDiesQ_Init();
    gt_HeroCarrierDiesQ_Init();
    gt_HeroMothershipDiesQ_Init();
    gt_ArchivistWarpedin_Init();
    gt_StartAI_Init();
    gt_AIUpgradesEN_Init();
    gt_AIUpgradesH_Init();
    gt_AIUpgradesI_Init();
    gt_MissionEventTiming_Init();
    gt_AttackWavesStage1P04NW_Init();
    gt_AttackWavesStage1P05NE_Init();
    gt_AttackWavesStage1P06SE_Init();
    gt_AttackWavesStage1RepeatingP04NW_Init();
    gt_AttackWavesStage1RepeatingP05NE_Init();
    gt_AttackWavesStage1RepeatingP06SE_Init();
    gt_AttackWavesStage2P04NW_Init();
    gt_AttackWavesStage2P05NE_Init();
    gt_AttackWavesStage2P06SE_Init();
    gt_PlayerHasNoStructures_Init();
    gt_PlayerHasNoGroundUnitsAndStructures_Init();
    gt_AttackWavesEndGameAirKillers_Init();
    gt_EndGameCreepTumorCorruption_Init();
    gt_SwarmWaveA1P04NW_Init();
    gt_SwarmWaveA2P06SE_Init();
    gt_SwarmWaveA3P05NE_Init();
    gt_SwarmWaveB1P06SE_Init();
    gt_SwarmWaveB2P04NW_Init();
    gt_SwarmWaveB3P05NE_Init();
    gt_SwarmWaveC1P05NE_Init();
    gt_SwarmWaveC2P04NW_Init();
    gt_SwarmWaveC3P06SE_Init();
    gt_NydusWormAttack1_Init();
    gt_NydusWormAttack2_Init();
    gt_NydusSpawningTriggerSwarmlings_Init();
    gt_NydusSpawningTriggerZerglings_Init();
    gt_AIGiveResources_Init();
    gt_ZergBuildingreplenish_Init();
    gt_TransmissionTemplarsStoreKnowledgeQ_Init();
    gt_TransmissionDarkVoicePronouncementQ_Init();
    gt_TransmissionZergswarmingflanksQ_Init();
    gt_TransmissionZerghordeincomingQ_Init();
    gt_TransmissionDarkVoiceTauntsQ_Init();
    gt_TransmissionArtanisFinalSpeechQ_Init();
    gt_TransmissionHybridIncoming1Q_Init();
    gt_TransmissionHybridIncoming2Q_Init();
    gt_TransmissionWormsIncoming1Q_Init();
    gt_TransmissionWormsIncoming2Q_Init();
    gt_WarpedinTemplarBehavior_Init();
    gt_StatStargateUnitBuilt_Init();
    gt_VictoryDefeatforPlayer_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_ObjectiveSurviveCreateQ_Init();
    gt_ObjectiveSurvivePrimaryComplete_Init();
    gt_ObjectiveProtectArchiveCreateQ_Init();
    gt_ObjectiveProtectArchiveUpdate_Init();
    gt_ObjectiveProtectArchiveComplete_Init();
    gt_ObjectiveProtectArchiveFailed_Init();
    gt_BriefingQ_Init();
    gt_BriefingScene00_Init();
    gt_BriefingScene01_Init();
    gt_BriefingZealotAnimations_Init();
    gt_DebriefingScene00_Init();
    gt_DebriefingScene01_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCleanup_Init();
    gt_IntroHeroGate_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_MidOmegalisk1Unburrow_Init();
    gt_MidOmegalisk2Unburrow_Init();
    gt_MidOmegalisk3Unburrow_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryHybridExplosion_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
