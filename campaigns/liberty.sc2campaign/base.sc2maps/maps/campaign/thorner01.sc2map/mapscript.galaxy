//==================================================================================================
// 
// Generated Map Script
// 
// Name:   The Great Train Robbery
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/CampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libCamp_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_DOMINION = 2;
const int gv_pLAYER_03_DOMINION = 3;
const int gv_pLAYER_04_DOMINION = 4;
const int gv_pLAYER_05_ABANDONEDVEHICLES = 5;
const int gv_pLAYER_06_TRAIN = 6;
const int gv_pLAYER_07_DEFILERBONESAMPLE = 7;
const fixed gv_tRAIN_CAR_SEPERATION = 0.1;
const fixed gv_tRAIN_RADIUS = 1.75;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_RECORD_TrainEscort {
    unit lv_escort;
    string lv_unitType;
    int lv_escortCar;
    fixed lv_polarRadius;
    fixed lv_polarAngle;
    point lv_waitPosition;
};

struct gs_RECORD_Train {
    unit[16] lv_trainCars;
    int lv_numberOfCars;
    int lv_lastCar;
    int lv_tunnel;
    int lv_spawnWave;
    fixed lv_maxLife;
    fixed lv_speedMultiplier;
    gs_RECORD_TrainEscort[32] lv_escorts;
    int lv_numberOfEscorts;
    wave lv_escortWave;
    bool lv_trainAlive;
};

struct gs_RECORD_TrainStation {
    point lv_position;
    int lv_state;
};

struct gs_RECORD_Charger {
    point lv_position;
    int lv_tunnel;
    int lv_numberOfCharges;
    int lv_state;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_PRESET_Tunnel_Top = 0;
const int ge_PRESET_Tunnel_Middle = 1;
const int ge_PRESET_Tunnel_Bottom = 2;
const int ge_PRESET_TrainStationState_Active = 0;
const int ge_PRESET_TrainStationState_Transitioning = 1;
const int ge_PRESET_TrainStationState_Inactive = 2;
const int ge_PRESET_ChargeState_Active = 0;
const int ge_PRESET_ChargeState_Inactive = 1;
const int ge_PRESET_ChargeState_Pulsing = 2;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_inCinematic;
playergroup gv_dominionPlayerGroup;
int gv_trainsNeeded;
gs_RECORD_Train[16] gv_trainList;
int gv_numberOfTrains;
point[256] gv_trainPath;
int[5][8] gv_trainMinerals;
int gv_trainGas;
int gv_currentWave;
int gv_trainsDestroyed;
timer gv_nextTrainTimer;
int gv_nextTrainWindow;
fixed gv_trainWaveWait;
int[10] gv_tunnelOrder;
int gv_currentTunnel;
int gv_alternateTrain;
unit gv_trainCarToAnimate;
fixed gv_trainCarToAnimateBreakPoint;
unit gv_trainCarToPing;
int gv_trainsSpawned;
int gv_midStart;
int gv_bottomStart;
int gv_numberOfTrainPathPoints;
bool gv_firstTrainSpawned;
int gv_trainToBeEscorted;
int gv_trainBossBarIndex;
gs_RECORD_TrainStation[16] gv_trainStations;
int gv_numberOfTrainStations;
int gv_currentTrainStationGlobal;
gs_RECORD_Charger[64] gv_chargers;
int gv_numberOfChargers;
bool gv_diamondbacksRevealed;
int gv_diamondbacksFound;
int gv_diamondbacksUsed;
int gv_totalDiamondbacks;
unitgroup gv_patrolTop;
unitgroup gv_patrolBottom;
unitgroup gv_patrolSingle;
int gv_stackKillerSize;
int gv_stackKillerNumRespawn;
bool gv_patrolWaveSpawnedTop;
bool gv_patrolWaveSpawnedBottom;
bool gv_patrolWaveSpawnedSingle;
int gv_achievementMaraudersKilled;
bool gv_sCVTrained;
int gv_objective_TheGreatTrainRobbery;
int gv_objective_DontMissTrains;
int gv_trainsMissed;
int gv_objective_Locate;
int gv_objective_DefilerSkeletons;
int gv_defilerSkeletonsFound;
int gv_defilerSkeletonsNeeded;
bool gv_victoryCinematicCompleted;
unitgroup gv_victoryHiddenUnitGroup;

void InitGlobals () {
    int init_i;
    int init_i1;

    gv_dominionPlayerGroup = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_trainList[init_i].lv_numberOfCars = 5;
        gv_trainList[init_i].lv_tunnel = ge_PRESET_Tunnel_Top;
        gv_trainList[init_i].lv_spawnWave = 1;
        gv_trainList[init_i].lv_maxLife = 25000.0;
        gv_trainList[init_i].lv_speedMultiplier = 1.0;
        for (init_i1 = 0; init_i1 <= 31; init_i1 += 1) {
            gv_trainList[init_i].lv_escorts[init_i1].lv_unitType = "Marine";
        }
    }
    for (init_i = 0; init_i <= 255; init_i += 1) {
        gv_trainPath[init_i] = PointFromId(239);
    }
    gv_currentWave = 1;
    gv_nextTrainTimer = TimerCreate();
    gv_nextTrainWindow = c_timerWindowNone;
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_tunnelOrder[init_i] = ge_PRESET_Tunnel_Top;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_trainStations[init_i].lv_state = ge_PRESET_TrainStationState_Inactive;
    }
    for (init_i = 0; init_i <= 63; init_i += 1) {
        gv_chargers[init_i].lv_tunnel = ge_PRESET_Tunnel_Top;
        gv_chargers[init_i].lv_state = ge_PRESET_ChargeState_Inactive;
    }
    gv_patrolTop = UnitGroupEmpty();
    gv_patrolBottom = UnitGroupEmpty();
    gv_patrolSingle = UnitGroupEmpty();
    gv_objective_TheGreatTrainRobbery = c_invalidObjectiveId;
    gv_objective_DontMissTrains = c_invalidObjectiveId;
    gv_objective_Locate = c_invalidObjectiveId;
    gv_objective_DefilerSkeletons = c_invalidObjectiveId;
    gv_victoryHiddenUnitGroup = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_CreateTrain (int lp_numberOfCars, fixed lp_maxLife, fixed lp_speedMultiplier, int lp_spawnWave);
void gf_AddEscorttoTrain (string lp_unitType, int lp_escortCar, fixed lp_polarRadius, fixed lp_polarAngle);
void gf_PlayDamagedAnimationsforTrainCar (unit lp_trainCar, fixed lp_breakPoint);
void gf_ActivatePingforTrainCar (unit lp_trainCar);
point gf_ExpectedPositionofTrainCar (int lp_trainCar, int lp_pathIndex);
void gf_InitializeCharger (point lp_position, int lp_tunnel, int lp_index);
void gf_RevealDiamondback (unit lp_diamondback);
void gf_RescueDiamondback (unit lp_diamondback);
void gf_SetStackKillerTargetTop ();
void gf_SetStackKillerTargetBottom ();
void gf_SetStackKillerTargetSingle ();
void gf_ResearchForAllDominion (int lp_qty, string lp_upgrade);
void gf_CreateCompleteTrain (int lp_pathIndex, int lp_numberOfCars);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04Music;
trigger gt_Init05Environment;
trigger gt_Init06Difficulty;
trigger gt_Init07Help;
trigger gt_IntroSequence;
trigger gt_StartGame;
trigger gt_TrainPathInitialization;
trigger gt_TrainInitialization;
trigger gt_TrainEscorts2veryweakescorts;
trigger gt_TrainEscorts3lightescorts;
trigger gt_TrainEscorts4mediumescortsbunkers;
trigger gt_TrainEscorts5strongerescorts;
trigger gt_TrainEscorts67superfastescortsInsaneOnly;
trigger gt_TrainEscorts8heavyescorts;
trigger gt_TrainWaveController;
trigger gt_SpawnTrains;
trigger gt_SpawnEscorts;
trigger gt_TrainMovement;
trigger gt_TrainTimerWindow;
trigger gt_TrainBossBar;
trigger gt_TrainDeathQ;
trigger gt_TrainDespawn;
trigger gt_EscortDespawn;
trigger gt_TrainCarDamageAnimationController;
trigger gt_TrainCarPingController;
trigger gt_InitializeTrainStations;
trigger gt_InitializeChargers;
trigger gt_TrainStationController;
trigger gt_ChargePulseController;
trigger gt_ActivateStation;
trigger gt_DeactivateStation;
trigger gt_TrainSpawnAnimations;
trigger gt_TrainDespawnAnimationsTop;
trigger gt_TrainDespawnAnimationsMid;
trigger gt_TrainDespawnAnimationsBottom;
trigger gt_ResourcePalletPickups;
trigger gt_DiamondbackRescue;
trigger gt_DiamondbackProduced;
trigger gt_RevealBottomLane;
trigger gt_RevealMiddleLane;
trigger gt_RevealTopLane;
trigger gt_TrainSpawnQ;
trigger gt_NewTrainMechanicTransmissions;
trigger gt_DominionAttackQ;
trigger gt_StackKillerQ;
trigger gt_LightEscortsQ;
trigger gt_TurbochargedQ;
trigger gt_HeavyEscortsQ;
trigger gt_DominionBunkerQ;
trigger gt_DiamondbacksQ;
trigger gt_KillFirstTrainQ;
trigger gt_Train1MissedQ;
trigger gt_Train2MissedQ;
trigger gt_DiamondbacksRescuedQ;
trigger gt_CampaignTipsQ;
trigger gt_DefilerSkeletonsTipQ;
trigger gt_FireontheMoveTipQ;
trigger gt_DiamondbackTipQ;
trigger gt_StartAI;
trigger gt_DominionAttackWaves;
trigger gt_DominionAttackWavesFromDom2;
trigger gt_DominionAttackWavesFromDom3;
trigger gt_PatrolWavesTop;
trigger gt_PatrolWavesBottom;
trigger gt_PatrolWavesSingle;
trigger gt_PatrolPings;
trigger gt_AIMinerals;
trigger gt_AIGas;
trigger gt_BunkerDeath;
trigger gt_AchievementSCVTrained;
trigger gt_VictoryAllTrainsDead;
trigger gt_Victory;
trigger gt_DefeatBaseDead;
trigger gt_DefeatTooManyTrainsMissed;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_ObjectiveTheGreatTrainRobberyCreateQ;
trigger gt_ObjectiveTheGreatTrainRobberyComplete;
trigger gt_ObjectiveDontMissTrainsCreate;
trigger gt_ObjectiveDontMissTrainsComplete;
trigger gt_ObjectiveDontMissTrainsFailed;
trigger gt_ObjectiveLocateCreateQ;
trigger gt_ObjectiveLocateDiscover;
trigger gt_ObjectiveLocateComplete;
trigger gt_ObjectiveDefilerSkeletonsCreate;
trigger gt_ObjectiveDefilerSkeletonsUpdate;
trigger gt_DefilerSkeletonFinding;
trigger gt_BriefingQ;
trigger gt_BriefingScene00;
trigger gt_BriefingScene00TrainSpawn;
trigger gt_BriefingScene01;
trigger gt_BriefingScene02;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCapsuleAnimation;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_CreateTrain (int lp_numberOfCars, fixed lp_maxLife, fixed lp_speedMultiplier, int lp_spawnWave) {
    // Automatic Variable Declarations
    // Implementation
    gv_numberOfTrains += 1;
    gv_trainList[gv_numberOfTrains].lv_numberOfCars = lp_numberOfCars;
    gv_trainList[gv_numberOfTrains].lv_spawnWave = lp_spawnWave;
    gv_trainList[gv_numberOfTrains].lv_maxLife = lp_maxLife;
    gv_trainList[gv_numberOfTrains].lv_speedMultiplier = lp_speedMultiplier;
    gv_trainList[gv_numberOfTrains].lv_numberOfEscorts = 0;
}

void gf_AddEscorttoTrain (string lp_unitType, int lp_escortCar, fixed lp_polarRadius, fixed lp_polarAngle) {
    // Automatic Variable Declarations
    // Implementation
    gv_trainList[gv_numberOfTrains].lv_numberOfEscorts += 1;
    gv_trainList[gv_numberOfTrains].lv_escorts[gv_trainList[gv_numberOfTrains].lv_numberOfEscorts].lv_unitType = lp_unitType;
    gv_trainList[gv_numberOfTrains].lv_escorts[gv_trainList[gv_numberOfTrains].lv_numberOfEscorts].lv_escortCar = lp_escortCar;
    gv_trainList[gv_numberOfTrains].lv_escorts[gv_trainList[gv_numberOfTrains].lv_numberOfEscorts].lv_polarRadius = lp_polarRadius;
    gv_trainList[gv_numberOfTrains].lv_escorts[gv_trainList[gv_numberOfTrains].lv_numberOfEscorts].lv_polarAngle = lp_polarAngle;
}

void gf_PlayDamagedAnimationsforTrainCar (unit lp_trainCar, fixed lp_breakPoint) {
    // Automatic Variable Declarations
    // Implementation
    gv_trainCarToAnimate = lp_trainCar;
    gv_trainCarToAnimateBreakPoint = lp_breakPoint;
    TriggerExecute(gt_TrainCarDamageAnimationController, true, false);
}

void gf_ActivatePingforTrainCar (unit lp_trainCar) {
    // Automatic Variable Declarations
    // Implementation
    gv_trainCarToPing = lp_trainCar;
    TriggerExecute(gt_TrainCarPingController, true, false);
}

point gf_ExpectedPositionofTrainCar (int lp_trainCar, int lp_pathIndex) {
    // Variable Declarations
    fixed lv_seperationDistance;
    int lv_i;
    point lv_currentPoint;
    int lv_currentTarget;
    fixed lv_distanceRemaining;

    // Automatic Variable Declarations
    int auto9E7AD11F_ae;
    const int auto9E7AD11F_ai = 1;

    // Variable Initialization

    // Implementation
    lv_seperationDistance = (gv_tRAIN_CAR_SEPERATION + (2.0 * gv_tRAIN_RADIUS));
    lv_currentPoint = gv_trainPath[lp_pathIndex];
    lv_currentTarget = (lp_pathIndex + 1);
    if ((lp_trainCar <= 1)) {
        return gv_trainPath[lp_pathIndex];
    }

    auto9E7AD11F_ae = lp_trainCar;
    lv_i = 2;
    for ( ; ( (auto9E7AD11F_ai >= 0 && lv_i <= auto9E7AD11F_ae) || (auto9E7AD11F_ai < 0 && lv_i >= auto9E7AD11F_ae) ) ; lv_i += auto9E7AD11F_ai ) {
        lv_distanceRemaining = lv_seperationDistance;
        if ((lv_seperationDistance <= DistanceBetweenPoints(lv_currentPoint, gv_trainPath[(lv_currentTarget - 1)]))) {
            lv_currentPoint = PointWithOffsetPolar(lv_currentPoint, lv_seperationDistance, AngleBetweenPoints(lv_currentPoint, gv_trainPath[(lv_currentTarget - 1)]));
        }
        else {
            while (true) {
                lv_distanceRemaining = (lv_distanceRemaining - DistanceBetweenPoints(lv_currentPoint, gv_trainPath[(lv_currentTarget - 1)]));
                lv_currentTarget -= 1;
                if ((lv_currentTarget < 1)) {
                    return gv_trainPath[lp_pathIndex];
                }

                if ((lv_distanceRemaining <= DistanceBetweenPoints(gv_trainPath[lv_currentTarget], gv_trainPath[(lv_currentTarget - 1)]))) {
                    lv_currentPoint = PointWithOffsetPolar(gv_trainPath[lv_currentTarget], lv_distanceRemaining, AngleBetweenPoints(gv_trainPath[lv_currentTarget], gv_trainPath[(lv_currentTarget - 1)]));
                    break;
                }

            }
        }
    }
    PointSetFacing(lv_currentPoint, AngleBetweenPoints(lv_currentPoint, gv_trainPath[lv_currentTarget]));
    return lv_currentPoint;
}

void gf_InitializeCharger (point lp_position, int lp_tunnel, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    gv_chargers[lp_index].lv_position = lp_position;
    gv_chargers[lp_index].lv_tunnel = lp_tunnel;
}

trigger auto_gf_RevealDiamondback_Trigger = null;
unit auto_gf_RevealDiamondback_lp_diamondback;

void gf_RevealDiamondback (unit lp_diamondback) {
    auto_gf_RevealDiamondback_lp_diamondback = lp_diamondback;

    if (auto_gf_RevealDiamondback_Trigger == null) {
        auto_gf_RevealDiamondback_Trigger = TriggerCreate("auto_gf_RevealDiamondback_TriggerFunc");
    }

    TriggerExecute(auto_gf_RevealDiamondback_Trigger, false, false);
}

bool auto_gf_RevealDiamondback_TriggerFunc (bool testConds, bool runActions) {
    unit lp_diamondback = auto_gf_RevealDiamondback_lp_diamondback;

    // Automatic Variable Declarations
    // Implementation
    if (((UnitIsAlive(lp_diamondback) == false) || (UnitGetOwner(lp_diamondback) != gv_pLAYER_05_ABANDONEDVEHICLES))) {
        return true;
    }

    gv_diamondbacksRevealed = true;
    VisRevealerCreate(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_diamondback), 4.5));
    VisRevealerEnable(VisRevealerLastCreated(), true);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(lp_diamondback), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetScale(PingLastCreated(), 0.75);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/EC45B863"));
    while (!(((UnitIsAlive(lp_diamondback) == false) || (UnitGetOwner(lp_diamondback) != gv_pLAYER_05_ABANDONEDVEHICLES)))) {
        Wait(1.0, c_timeGame);
    }
    VisRevealerDestroy(VisRevealerLastCreated());
    PingDestroy(PingLastCreated());
    return true;
}

trigger auto_gf_RescueDiamondback_Trigger = null;
unit auto_gf_RescueDiamondback_lp_diamondback;

void gf_RescueDiamondback (unit lp_diamondback) {
    auto_gf_RescueDiamondback_lp_diamondback = lp_diamondback;

    if (auto_gf_RescueDiamondback_Trigger == null) {
        auto_gf_RescueDiamondback_Trigger = TriggerCreate("auto_gf_RescueDiamondback_TriggerFunc");
    }

    TriggerExecute(auto_gf_RescueDiamondback_Trigger, false, false);
}

bool auto_gf_RescueDiamondback_TriggerFunc (bool testConds, bool runActions) {
    unit lp_diamondback = auto_gf_RescueDiamondback_lp_diamondback;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_TurnAllAnimationPropertiesOff(libNtve_gf_MainActorofUnit(lp_diamondback));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_diamondback), c_animNameDefault, "Stand Morph End", 0, c_animTimeDefault);
    Wait(1.5, c_timeGame);
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/8DAA5783"), null, lp_diamondback);
    libNtve_gf_RescueUnit(lp_diamondback, gv_pLAYER_01_USER, true);
    gv_diamondbacksFound += 1;
    gv_diamondbacksUsed += 1;
    TriggerExecute(gt_ObjectiveLocateDiscover, true, true);
    if ((gv_diamondbacksFound <= gv_totalDiamondbacks)) {
        ObjectiveSetName(gv_objective_Locate, (StringExternal("Param/Value/9669A7DF") + IntToText(gv_diamondbacksFound) + StringExternal("Param/Value/EE97202B") + IntToText(gv_totalDiamondbacks) + StringExternal("Param/Value/24F80960")));
    }

    if ((gv_diamondbacksFound == gv_totalDiamondbacks)) {
        TriggerExecute(gt_ObjectiveLocateComplete, true, false);
        Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
        TriggerExecute(gt_DiamondbacksRescuedQ, true, false);
    }

    return true;
}

void gf_SetStackKillerTargetTop () {
    // Automatic Variable Declarations
    // Implementation
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION, PointFromId(1788));
    AIAttackWaveSetTargetPatrol(gv_pLAYER_02_DOMINION, 0);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(1789), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(1790), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(1791), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(1792), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(1793), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(1794), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(1795), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(1796), false);
}

void gf_SetStackKillerTargetBottom () {
    // Automatic Variable Declarations
    // Implementation
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION, PointFromId(1778));
    AIAttackWaveSetTargetPatrol(gv_pLAYER_02_DOMINION, 0);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(1784), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(1785), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(1786), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(1787), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(1779), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(1780), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(1781), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(1782), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(1783), false);
}

void gf_SetStackKillerTargetSingle () {
    // Automatic Variable Declarations
    // Implementation
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION, PointFromId(1788));
    AIAttackWaveSetTargetPatrol(gv_pLAYER_02_DOMINION, 0);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(2520), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(2521), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(2522), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(2523), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(2524), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(2525), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(2526), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(2527), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(2528), false);
}

void gf_ResearchForAllDominion (int lp_qty, string lp_upgrade) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    playergroup autoCF713103_g;

    // Variable Initialization

    // Implementation
    if ((lp_qty == 1)) {
        autoCF713103_g = gv_dominionPlayerGroup;
        lv_p = -1;
        while (true) {
            lv_p = PlayerGroupNextPlayer(autoCF713103_g, lv_p);
            if (lv_p < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(lv_p, lp_upgrade, lp_qty);
        }
    }

}

void gf_CreateCompleteTrain (int lp_pathIndex, int lp_numberOfCars) {
    // Variable Declarations
    fixed lv_seperationDistance;
    int lv_i;
    point lv_currentPoint;
    int lv_currentTarget;
    fixed lv_distanceRemaining;

    // Automatic Variable Declarations
    int auto46B67D1A_ae;
    const int auto46B67D1A_ai = 1;

    // Variable Initialization

    // Implementation
    lv_seperationDistance = (gv_tRAIN_CAR_SEPERATION + (2.0 * gv_tRAIN_RADIUS));
    lv_currentPoint = gv_trainPath[lp_pathIndex];
    lv_currentTarget = (lp_pathIndex + 1);
    libNtve_gf_CreateUnitsAtPoint2(1, "TarsonisEngine", 0, gv_pLAYER_06_TRAIN, lv_currentPoint);
    UnitSetCustomValue(UnitLastCreated(), 0, IntToFixed(lv_currentTarget));
    auto46B67D1A_ae = lp_numberOfCars;
    lv_i = 2;
    for ( ; ( (auto46B67D1A_ai >= 0 && lv_i <= auto46B67D1A_ae) || (auto46B67D1A_ai < 0 && lv_i >= auto46B67D1A_ae) ) ; lv_i += auto46B67D1A_ai ) {
        lv_distanceRemaining = lv_seperationDistance;
        if ((lv_seperationDistance <= DistanceBetweenPoints(lv_currentPoint, gv_trainPath[(lv_currentTarget - 1)]))) {
            lv_currentPoint = PointWithOffsetPolar(lv_currentPoint, lv_seperationDistance, AngleBetweenPoints(lv_currentPoint, gv_trainPath[(lv_currentTarget - 1)]));
        }
        else {
            while (true) {
                lv_distanceRemaining = (lv_distanceRemaining - DistanceBetweenPoints(lv_currentPoint, gv_trainPath[(lv_currentTarget - 1)]));
                lv_currentTarget -= 1;
                if ((lv_currentTarget == 1)) {
                    return ;
                }

                if ((lv_distanceRemaining <= DistanceBetweenPoints(gv_trainPath[lv_currentTarget], gv_trainPath[(lv_currentTarget - 1)]))) {
                    lv_currentPoint = PointWithOffsetPolar(gv_trainPath[lv_currentTarget], lv_distanceRemaining, AngleBetweenPoints(gv_trainPath[lv_currentTarget], gv_trainPath[(lv_currentTarget - 1)]));
                    break;
                }

            }
        }
        if ((lv_i == lp_numberOfCars)) {
            libNtve_gf_CreateUnitsAtPoint2(1, "Caboose", 0, gv_pLAYER_06_TRAIN, lv_currentPoint);
        }
        else {
            libNtve_gf_CreateUnitsAtPoint2(1, "FreightCar", 0, gv_pLAYER_06_TRAIN, lv_currentPoint);
        }
        UnitSetCustomValue(UnitLastCreated(), 0, IntToFixed(lv_currentTarget));
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_LoadCampaignData(libCamp_ge_MapID_MapTHorner01);
    TriggerExecute(gt_Init01Technology, true, true);
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04Music, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulty, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    libCamp_gf_RegisterFootageRecording(gt_BriefingQ);
    libCamp_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_IntroSequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesDiamondback, gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_03_DOMINION, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_04_DOMINION, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_06_TRAIN, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_05_ABANDONEDVEHICLES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_07_DEFILERBONESAMPLE, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_03_DOMINION, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_04_DOMINION, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_06_TRAIN, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_05_ABANDONEDVEHICLES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_07_DEFILERBONESAMPLE, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_03_DOMINION, gv_pLAYER_04_DOMINION, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_03_DOMINION, gv_pLAYER_06_TRAIN, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_03_DOMINION, gv_pLAYER_05_ABANDONEDVEHICLES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_03_DOMINION, gv_pLAYER_07_DEFILERBONESAMPLE, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_04_DOMINION, gv_pLAYER_06_TRAIN, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_04_DOMINION, gv_pLAYER_05_ABANDONEDVEHICLES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_04_DOMINION, gv_pLAYER_07_DEFILERBONESAMPLE, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_06_TRAIN, gv_pLAYER_05_ABANDONEDVEHICLES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_06_TRAIN, gv_pLAYER_07_DEFILERBONESAMPLE, libNtve_ge_AllianceSetting_Neutral);
    PlayerGroupAdd(gv_dominionPlayerGroup, gv_pLAYER_02_DOMINION);
    PlayerGroupAdd(gv_dominionPlayerGroup, gv_pLAYER_03_DOMINION);
    PlayerGroupAdd(gv_dominionPlayerGroup, gv_pLAYER_04_DOMINION);
    PlayerSetColorIndex(gv_pLAYER_02_DOMINION, 1, true);
    PlayerSetColorIndex(gv_pLAYER_03_DOMINION, 1, true);
    PlayerSetColorIndex(gv_pLAYER_04_DOMINION, 1, true);
    PlayerSetColorIndex(gv_pLAYER_06_TRAIN, 1, true);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_03_DOMINION, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_03_DOMINION, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_04_DOMINION, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_04_DOMINION, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerSetState(gv_pLAYER_05_ABANDONEDVEHICLES, c_playerStateDisplayInLeaderPanel, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto582274C1_g;
    int auto582274C1_u;
    unit auto582274C1_var;
    unitgroup auto847F12A2_g;
    int auto847F12A2_u;
    unit auto847F12A2_var;
    unitgroup auto33545EAB_g;
    int auto33545EAB_u;
    unit auto33545EAB_var;
    unitgroup autoC99230F0_g;
    int autoC99230F0_u;
    unit autoC99230F0_var;
    unitgroup auto79C99746_g;
    int auto79C99746_u;
    unit auto79C99746_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PreloadUnit("TarsonisEngineFast", false);
    gv_defilerSkeletonsNeeded = UnitGroupCount(UnitGroup("DefilerBoneSample", gv_pLAYER_07_DEFILERBONESAMPLE, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    TriggerExecute(gt_TrainPathInitialization, true, false);
    TriggerExecute(gt_TrainInitialization, true, false);
    gv_tunnelOrder[1] = ge_PRESET_Tunnel_Top;
    gv_tunnelOrder[2] = ge_PRESET_Tunnel_Middle;
    gv_tunnelOrder[3] = ge_PRESET_Tunnel_Bottom;
    gv_tunnelOrder[4] = ge_PRESET_Tunnel_Middle;
    gv_tunnelOrder[5] = ge_PRESET_Tunnel_Top;
    gv_tunnelOrder[6] = ge_PRESET_Tunnel_Middle;
    gv_tunnelOrder[7] = ge_PRESET_Tunnel_Top;
    gv_tunnelOrder[8] = ge_PRESET_Tunnel_Middle;
    gv_tunnelOrder[9] = ge_PRESET_Tunnel_Bottom;
    auto582274C1_g = UnitGroup("Medic", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
    auto582274C1_u = UnitGroupCount(auto582274C1_g, c_unitCountAll);
    for (;; auto582274C1_u -= 1) {
        auto582274C1_var = UnitGroupUnitFromEnd(auto582274C1_g, auto582274C1_u);
        if (auto582274C1_var == null) { break; }
        UnitSetPropertyFixed(auto582274C1_var, c_unitPropEnergy, UnitGetPropertyFixed(auto582274C1_var, c_unitPropEnergyMax, c_unitPropNormal));
    }
    auto847F12A2_g = UnitGroup("Diamondback", gv_pLAYER_05_ABANDONEDVEHICLES, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto847F12A2_u = UnitGroupCount(auto847F12A2_g, c_unitCountAll);
    for (;; auto847F12A2_u -= 1) {
        auto847F12A2_var = UnitGroupUnitFromEnd(auto847F12A2_g, auto847F12A2_u);
        if (auto847F12A2_var == null) { break; }
        gv_totalDiamondbacks += 1;
    }
    auto33545EAB_g = UnitGroup("Diamondback", gv_pLAYER_05_ABANDONEDVEHICLES, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto33545EAB_u = UnitGroupCount(auto33545EAB_g, c_unitCountAll);
    for (;; auto33545EAB_u -= 1) {
        auto33545EAB_var = UnitGroupUnitFromEnd(auto33545EAB_g, auto33545EAB_u);
        if (auto33545EAB_var == null) { break; }
        libNtve_gf_TurnAnimationPropertiesOn(libNtve_gf_MainActorofUnit(auto33545EAB_var), "Morph");
    }
    autoC99230F0_g = UnitGroup("AutoTurret", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC99230F0_u = UnitGroupCount(autoC99230F0_g, c_unitCountAll);
    for (;; autoC99230F0_u -= 1) {
        autoC99230F0_var = UnitGroupUnitFromEnd(autoC99230F0_g, autoC99230F0_u);
        if (autoC99230F0_var == null) { break; }
        UnitBehaviorRemove(autoC99230F0_var, "AutoTurretTimedLife", 1);
    }
    auto79C99746_g = UnitGroup("DefilerBoneSample", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto79C99746_u = UnitGroupCount(auto79C99746_g, c_unitCountAll);
    for (;; auto79C99746_u -= 1) {
        auto79C99746_var = UnitGroupUnitFromEnd(auto79C99746_g, auto79C99746_u);
        if (auto79C99746_var == null) { break; }
        UnitSetInfoText(auto79C99746_var, StringExternal("Param/Value/7827FD7F"), StringExternal("Param/Value/C07F9ABA"), StringToText(""));
        UnitSetState(auto79C99746_var, c_unitStateTooltipable, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init04Music_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner01MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner01MusicIntro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Music_Init () {
    gt_Init04Music = TriggerCreate("gt_Init04Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_InitializeTrainStations, true, false);
    TriggerExecute(gt_InitializeChargers, true, false);
    GameTimeOfDaySet("08:00:00");
    GameSetBackground(c_backgroundFixed, null, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulty
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulty_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto41632373_ae = 7;
    int auto41632373_var;
    const int auto878A5EEC_ae = 4;
    int auto878A5EEC_var;
    playergroup autoAFFBB261_g;
    int autoAFFBB261_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerDifficulty(gv_pLAYER_01_USER) == 1)) {
        PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_pLAYER_03_DOMINION, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_pLAYER_04_DOMINION, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_pLAYER_06_TRAIN, c_playerPropHandicap, c_playerPropOperSetTo, 50);
    }

    auto41632373_var = 0;
    for ( ; auto41632373_var <= auto41632373_ae; auto41632373_var += 1 ) {
        gv_trainMinerals[1][auto41632373_var] = 3;
        gv_trainMinerals[2][auto41632373_var] = 3;
    }
    auto878A5EEC_var = 3;
    for ( ; auto878A5EEC_var <= auto878A5EEC_ae; auto878A5EEC_var += 1 ) {
        gv_trainMinerals[auto878A5EEC_var][0] = 3;
        gv_trainMinerals[auto878A5EEC_var][1] = 3;
        gv_trainMinerals[auto878A5EEC_var][2] = 4;
        gv_trainMinerals[auto878A5EEC_var][3] = 5;
        gv_trainMinerals[auto878A5EEC_var][4] = 5;
        gv_trainMinerals[auto878A5EEC_var][5] = 6;
        gv_trainMinerals[auto878A5EEC_var][6] = 7;
        gv_trainMinerals[auto878A5EEC_var][7] = 7;
    }
    gv_trainGas = 3;
    gv_trainsNeeded = libNtve_gf_DifficultyValueInt(8, 8, 8, 8);
    gv_trainWaveWait = libNtve_gf_DifficultyValueFixed(180.0, 180.0, 180.0, 150.0);
    gv_stackKillerNumRespawn = 1;
    gv_stackKillerSize = libNtve_gf_DifficultyValueInt(8, 12, 16, 14);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 250);
    autoAFFBB261_g = gv_dominionPlayerGroup;
    autoAFFBB261_var = -1;
    while (true) {
        autoAFFBB261_var = PlayerGroupNextPlayer(autoAFFBB261_g, autoAFFBB261_var);
        if (autoAFFBB261_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoAFFBB261_var, "TerranInfantryWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        TechTreeUpgradeAddLevel(autoAFFBB261_var, "TerranVehicleWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        TechTreeUpgradeAddLevel(autoAFFBB261_var, "TerranShipWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        TechTreeUpgradeAddLevel(autoAFFBB261_var, "TerranInfantryArmorsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(autoAFFBB261_var, "TerranVehicleArmorsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(autoAFFBB261_var, "TerranShipArmorsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(autoAFFBB261_var, "JackhammerConcussionGrenades", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(autoAFFBB261_var, "MarauderLifeBoost", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(autoAFFBB261_var, "FireSuppressionSystems", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        TechTreeUpgradeAddLevel(autoAFFBB261_var, "ShrikeTurret", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "HellionCampaignInfernalPreIgniter", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulty_Init () {
    gt_Init06Difficulty = TriggerCreate("gt_Init06Difficulty_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4E88CFC0_g;
    int auto4E88CFC0_u;
    unit auto4E88CFC0_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_AddUnitTypeToUnitHelpPanel("Marine", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SiegeTankSieged", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SCV", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("AutoTurret", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("MissileTurret", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Marauder", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("DominionKillTeam", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Medic", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Firebat", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Banshee", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Goliath", false, gv_pLAYER_01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Raven", false, gv_pLAYER_01_USER);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Medivac", false, gv_pLAYER_01_USER);
    }

    auto4E88CFC0_g = UnitGroup("DefilerBoneSample", gv_pLAYER_07_DEFILERBONESAMPLE, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4E88CFC0_u = UnitGroupCount(auto4E88CFC0_g, c_unitCountAll);
    for (;; auto4E88CFC0_u -= 1) {
        auto4E88CFC0_var = UnitGroupUnitFromEnd(auto4E88CFC0_g, auto4E88CFC0_u);
        if (auto4E88CFC0_var == null) { break; }
        UnitSetInfoText(auto4E88CFC0_var, StringExternal("Param/Value/68DBCADA"), StringExternal("Param/Value/B175DB47"), StringToText(""));
        UnitSetState(auto4E88CFC0_var, c_unitStateTooltipable, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Sequence
//--------------------------------------------------------------------------------------------------
bool gt_IntroSequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    TriggerExecute(gt_StartAI, true, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(78), 0.1, false);
    Wait(0.1, c_timeGame);
    UnitSelect(UnitFromId(311), gv_pLAYER_01_USER, true);
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/8B16EC05"), null, UnitFromId(311));
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PlayerStartLocation(gv_pLAYER_01_USER), 1.5);
    CinematicFade(true, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_StartGame, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSequence_Init () {
    gt_IntroSequence = TriggerCreate("gt_IntroSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game
//--------------------------------------------------------------------------------------------------
bool gt_StartGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_DiamondbackRescue, true, false);
    TriggerExecute(gt_DiamondbackTipQ, true, false);
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_ObjectiveTheGreatTrainRobberyCreateQ, true, true);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_TrainWaveController, true, false);
    TriggerExecute(gt_TrainTimerWindow, true, false);
    TriggerExecute(gt_TrainBossBar, true, false);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_CampaignTipsQ, true, false);
    Wait(6.0, c_timeReal);
    TriggerExecute(gt_ObjectiveLocateDiscover, true, true);
    TriggerExecute(gt_DiamondbacksQ, true, true);
    Wait(5.0, c_timeGame);
    TriggerExecute(gt_ObjectiveDefilerSkeletonsCreate, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGame_Init () {
    gt_StartGame = TriggerCreate("gt_StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Path Initialization
//--------------------------------------------------------------------------------------------------
bool gt_TrainPathInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_trainPath[0] = PointFromId(345);
    lv_i = 1;
    gv_trainPath[lv_i] = PointFromId(239);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(240);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(241);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(242);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(243);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(244);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2159);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(245);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2160);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(246);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2161);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(247);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2162);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(248);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(249);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2163);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(250);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2165);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(251);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2164);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(252);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2166);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(253);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2167);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(254);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2168);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(255);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(256);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2169);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(257);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2170);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(258);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2171);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(259);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(260);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(261);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2172);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(262);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2173);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(263);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(264);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2174);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(265);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2175);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(266);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2176);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(267);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(489);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(490);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(491);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(7);
    gv_midStart = lv_i;
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(424);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(442);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(443);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(444);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2177);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(445);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2178);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(446);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2179);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(447);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2180);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(448);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2181);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(449);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2182);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(450);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2183);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(451);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2184);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(456);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2185);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(457);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2186);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(458);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2187);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(459);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2188);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(460);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2189);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(461);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2190);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(484);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2191);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(485);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2192);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(492);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(1412);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(493);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2193);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(494);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2194);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(495);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2195);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(496);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(497);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2196);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(498);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2197);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(499);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(500);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(501);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(502);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(503);
    gv_bottomStart = lv_i;
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2198);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(504);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2199);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(268);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2200);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(269);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2201);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(270);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2202);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(271);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2203);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(272);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2204);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(273);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2205);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(274);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2206);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(275);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2207);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2208);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(276);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2209);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(277);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2210);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(278);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2211);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(279);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(280);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2212);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2213);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2214);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(281);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2215);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(282);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2216);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(283);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2217);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(284);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2218);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(285);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2219);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(286);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2220);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(287);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2221);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2222);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(288);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(289);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2223);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(290);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2224);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(291);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(2225);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(292);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(293);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(294);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(295);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(296);
    lv_i = (lv_i + 1);
    gv_trainPath[lv_i] = PointFromId(297);
    gv_numberOfTrainPathPoints = lv_i;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainPathInitialization_Init () {
    gt_TrainPathInitialization = TriggerCreate("gt_TrainPathInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Initialization
//--------------------------------------------------------------------------------------------------
bool gt_TrainInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    fixed lv_trainMaxLife;
    fixed lv_trainSpeed;
    fixed lv_trainSpeedBoosted;

    // Automatic Variable Declarations
    const int autoB45096C2_ae = 1;
    const int autoB45096C2_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_trainMaxLife = libNtve_gf_DifficultyValueFixed(2000.0, 2000.0, 3000.0, 3500.0);
    lv_trainSpeed = libNtve_gf_DifficultyValueFixed(0.85, 0.85, 0.85, 0.85);
    lv_trainSpeedBoosted = libNtve_gf_DifficultyValueFixed(1.35, 1.35, 1.4, 1.45);
    lv_i = 0;
    for ( ; ( (autoB45096C2_ai >= 0 && lv_i <= autoB45096C2_ae) || (autoB45096C2_ai < 0 && lv_i >= autoB45096C2_ae) ) ; lv_i += autoB45096C2_ai ) {
        gf_CreateTrain(5, lv_trainMaxLife, lv_trainSpeed, (1 + lv_i));
        gf_CreateTrain(5, lv_trainMaxLife, lv_trainSpeed, (3 + lv_i));
        TriggerExecute(gt_TrainEscorts2veryweakescorts, true, false);
        gf_CreateTrain(5, lv_trainMaxLife, lv_trainSpeed, (5 + lv_i));
        TriggerExecute(gt_TrainEscorts3lightescorts, true, false);
        gf_CreateTrain(5, lv_trainMaxLife, lv_trainSpeed, (7 + lv_i));
        TriggerExecute(gt_TrainEscorts4mediumescortsbunkers, true, false);
        gf_CreateTrain(5, lv_trainMaxLife, lv_trainSpeed, (9 + lv_i));
        TriggerExecute(gt_TrainEscorts5strongerescorts, true, false);
        gf_CreateTrain(5, lv_trainMaxLife, lv_trainSpeedBoosted, (11 + lv_i));
        TriggerExecute(gt_TrainEscorts67superfastescortsInsaneOnly, true, false);
        gf_CreateTrain(5, lv_trainMaxLife, lv_trainSpeed, (13 + lv_i));
        TriggerExecute(gt_TrainEscorts8heavyescorts, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainInitialization_Init () {
    gt_TrainInitialization = TriggerCreate("gt_TrainInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Escorts 2 - very weak escorts
//--------------------------------------------------------------------------------------------------
bool gt_TrainEscorts2veryweakescorts_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoF67AC985_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoF67AC985_val = libNtve_gf_DifficultyValueInt(1, 1, 2, 3);
    if (autoF67AC985_val == 1) {
        gf_AddEscorttoTrain("Marine", 1, 3.0, 90.0);
        gf_AddEscorttoTrain("Marine", 1, 3.0, 270.0);
        gf_AddEscorttoTrain("Marine", 3, 3.0, 90.0);
        gf_AddEscorttoTrain("Marine", 3, 3.0, 270.0);
        gf_AddEscorttoTrain("Marine", 5, 3.0, 90.0);
        gf_AddEscorttoTrain("Marine", 5, 3.0, 270.0);
    }
    else if (autoF67AC985_val == 2) {
        gf_AddEscorttoTrain("Hellion", 1, 3.0, 90.0);
        gf_AddEscorttoTrain("Hellion", 1, 3.0, 270.0);
        gf_AddEscorttoTrain("Marine", 2, 3.0, 90.0);
        gf_AddEscorttoTrain("Marine", 2, 3.0, 270.0);
        gf_AddEscorttoTrain("Marine", 3, 3.0, 90.0);
        gf_AddEscorttoTrain("Marine", 3, 3.0, 270.0);
        gf_AddEscorttoTrain("Marine", 4, 3.0, 90.0);
        gf_AddEscorttoTrain("Marine", 4, 3.0, 270.0);
        gf_AddEscorttoTrain("Marine", 5, 3.0, 90.0);
        gf_AddEscorttoTrain("Marine", 5, 3.0, 270.0);
    }
    else if (autoF67AC985_val == 3) {
        gf_AddEscorttoTrain("Firebat", 1, 5.0, 30.0);
        gf_AddEscorttoTrain("Firebat", 1, 5.0, 330.0);
        gf_AddEscorttoTrain("Marine", 1, 3.0, 90.0);
        gf_AddEscorttoTrain("Marine", 1, 3.0, 270.0);
        gf_AddEscorttoTrain("Marine", 2, 3.0, 90.0);
        gf_AddEscorttoTrain("Marine", 2, 3.0, 270.0);
        gf_AddEscorttoTrain("Marine", 3, 3.0, 90.0);
        gf_AddEscorttoTrain("Marine", 3, 3.0, 270.0);
        gf_AddEscorttoTrain("Marine", 4, 3.0, 90.0);
        gf_AddEscorttoTrain("Marine", 4, 3.0, 270.0);
        gf_AddEscorttoTrain("Marine", 5, 3.0, 90.0);
        gf_AddEscorttoTrain("Marine", 5, 3.0, 270.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainEscorts2veryweakescorts_Init () {
    gt_TrainEscorts2veryweakescorts = TriggerCreate("gt_TrainEscorts2veryweakescorts_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Escorts 3 - light escorts
//--------------------------------------------------------------------------------------------------
bool gt_TrainEscorts3lightescorts_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto8864C6BE_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto8864C6BE_val = libNtve_gf_DifficultyValueInt(1, 1, 2, 3);
    if (auto8864C6BE_val == 1) {
        gf_AddEscorttoTrain("Hellion", 1, 3.0, 90.0);
        gf_AddEscorttoTrain("Hellion", 1, 3.0, 270.0);
        gf_AddEscorttoTrain("Marine", 2, 3.0, 90.0);
        gf_AddEscorttoTrain("Marine", 2, 3.0, 270.0);
        gf_AddEscorttoTrain("Marine", 4, 3.0, 90.0);
        gf_AddEscorttoTrain("Marine", 4, 3.0, 270.0);
        gf_AddEscorttoTrain("Hellion", 5, 3.0, 90.0);
        gf_AddEscorttoTrain("Hellion", 5, 3.0, 270.0);
    }
    else if (auto8864C6BE_val == 2) {
        gf_AddEscorttoTrain("Marauder", 1, 3.0, 90.0);
        gf_AddEscorttoTrain("Marauder", 1, 3.0, 270.0);
        gf_AddEscorttoTrain("Firebat", 2, 3.0, 90.0);
        gf_AddEscorttoTrain("Firebat", 2, 3.0, 270.0);
        gf_AddEscorttoTrain("Marine", 3, 3.0, 90.0);
        gf_AddEscorttoTrain("Marine", 3, 3.0, 270.0);
        gf_AddEscorttoTrain("Marine", 4, 3.0, 90.0);
        gf_AddEscorttoTrain("Marine", 4, 3.0, 270.0);
        gf_AddEscorttoTrain("Marine", 5, 3.0, 90.0);
        gf_AddEscorttoTrain("Marine", 5, 3.0, 270.0);
    }
    else if (auto8864C6BE_val == 3) {
        gf_AddEscorttoTrain("Marauder", 1, 5.0, 30.0);
        gf_AddEscorttoTrain("Marauder", 1, 5.0, 330.0);
        gf_AddEscorttoTrain("Marauder", 1, 3.0, 90.0);
        gf_AddEscorttoTrain("Marauder", 1, 3.0, 270.0);
        gf_AddEscorttoTrain("Firebat", 2, 3.0, 90.0);
        gf_AddEscorttoTrain("Firebat", 2, 3.0, 270.0);
        gf_AddEscorttoTrain("Firebat", 3, 3.0, 90.0);
        gf_AddEscorttoTrain("Firebat", 3, 3.0, 270.0);
        gf_AddEscorttoTrain("Marine", 4, 3.0, 90.0);
        gf_AddEscorttoTrain("Marine", 4, 3.0, 270.0);
        gf_AddEscorttoTrain("Marine", 5, 3.0, 90.0);
        gf_AddEscorttoTrain("Marine", 5, 3.0, 270.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainEscorts3lightescorts_Init () {
    gt_TrainEscorts3lightescorts = TriggerCreate("gt_TrainEscorts3lightescorts_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Escorts 4 - medium escorts + bunkers
//--------------------------------------------------------------------------------------------------
bool gt_TrainEscorts4mediumescortsbunkers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoA84DA67D_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoA84DA67D_val = libNtve_gf_DifficultyValueInt(1, 1, 2, 3);
    if (autoA84DA67D_val == 1) {
        gf_AddEscorttoTrain("Firebat", 1, 3.0, 90.0);
        gf_AddEscorttoTrain("Firebat", 1, 3.0, 270.0);
        gf_AddEscorttoTrain("Marine", 2, 3.0, 90.0);
        gf_AddEscorttoTrain("Marine", 2, 3.0, 270.0);
        gf_AddEscorttoTrain("Marine", 3, 3.0, 90.0);
        gf_AddEscorttoTrain("Marine", 3, 3.0, 270.0);
        gf_AddEscorttoTrain("Marine", 4, 3.0, 90.0);
        gf_AddEscorttoTrain("Marine", 4, 3.0, 270.0);
        gf_AddEscorttoTrain("Firebat", 5, 3.0, 90.0);
        gf_AddEscorttoTrain("Firebat", 5, 3.0, 270.0);
    }
    else if (autoA84DA67D_val == 2) {
        gf_AddEscorttoTrain("Goliath", 1, 3.0, 90.0);
        gf_AddEscorttoTrain("Goliath", 1, 3.0, 270.0);
        gf_AddEscorttoTrain("Firebat", 2, 3.0, 90.0);
        gf_AddEscorttoTrain("Firebat", 2, 3.0, 270.0);
        gf_AddEscorttoTrain("Firebat", 3, 3.0, 90.0);
        gf_AddEscorttoTrain("Firebat", 3, 3.0, 270.0);
        gf_AddEscorttoTrain("Firebat", 4, 3.0, 90.0);
        gf_AddEscorttoTrain("Firebat", 4, 3.0, 270.0);
        gf_AddEscorttoTrain("Marine", 5, 3.0, 90.0);
        gf_AddEscorttoTrain("Marine", 5, 3.0, 270.0);
    }
    else if (autoA84DA67D_val == 3) {
        gf_AddEscorttoTrain("Raven", 1, 2.5, 0.0);
        gf_AddEscorttoTrain("Goliath", 1, 3.0, 30.0);
        gf_AddEscorttoTrain("Goliath", 1, 3.0, 330.0);
        gf_AddEscorttoTrain("Goliath", 1, 3.0, 90.0);
        gf_AddEscorttoTrain("Goliath", 1, 3.0, 270.0);
        gf_AddEscorttoTrain("Firebat", 2, 3.0, 90.0);
        gf_AddEscorttoTrain("Firebat", 2, 3.0, 270.0);
        gf_AddEscorttoTrain("Firebat", 3, 3.0, 90.0);
        gf_AddEscorttoTrain("Firebat", 3, 3.0, 270.0);
        gf_AddEscorttoTrain("Firebat", 4, 3.0, 90.0);
        gf_AddEscorttoTrain("Firebat", 4, 3.0, 270.0);
        gf_AddEscorttoTrain("Firebat", 5, 3.0, 90.0);
        gf_AddEscorttoTrain("Firebat", 5, 3.0, 270.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainEscorts4mediumescortsbunkers_Init () {
    gt_TrainEscorts4mediumescortsbunkers = TriggerCreate("gt_TrainEscorts4mediumescortsbunkers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Escorts 5 - stronger escorts
//--------------------------------------------------------------------------------------------------
bool gt_TrainEscorts5strongerescorts_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto5A424B4B_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto5A424B4B_val = libNtve_gf_DifficultyValueInt(1, 1, 2, 3);
    if (auto5A424B4B_val == 1) {
        gf_AddEscorttoTrain("Firebat", 1, 3.0, 90.0);
        gf_AddEscorttoTrain("Firebat", 1, 3.0, 270.0);
        gf_AddEscorttoTrain("Marine", 2, 3.0, 90.0);
        gf_AddEscorttoTrain("Marine", 2, 3.0, 270.0);
        gf_AddEscorttoTrain("Marauder", 3, 3.0, 90.0);
        gf_AddEscorttoTrain("Marauder", 3, 3.0, 270.0);
        gf_AddEscorttoTrain("Marine", 4, 3.0, 90.0);
        gf_AddEscorttoTrain("Marine", 4, 3.0, 270.0);
        gf_AddEscorttoTrain("Firebat", 5, 3.0, 90.0);
        gf_AddEscorttoTrain("Firebat", 5, 3.0, 270.0);
    }
    else if (auto5A424B4B_val == 2) {
        gf_AddEscorttoTrain("Raven", 1, 2.5, 0.0);
        gf_AddEscorttoTrain("SiegeTank", 1, 3.0, 90.0);
        gf_AddEscorttoTrain("SiegeTank", 1, 3.0, 270.0);
        gf_AddEscorttoTrain("Goliath", 2, 3.0, 90.0);
        gf_AddEscorttoTrain("Goliath", 2, 3.0, 270.0);
        gf_AddEscorttoTrain("Goliath", 3, 3.0, 90.0);
        gf_AddEscorttoTrain("Goliath", 3, 3.0, 270.0);
        gf_AddEscorttoTrain("Marauder", 4, 3.0, 90.0);
        gf_AddEscorttoTrain("Marauder", 4, 3.0, 270.0);
        gf_AddEscorttoTrain("Medic", 5, 3.0, 90.0);
        gf_AddEscorttoTrain("Medic", 5, 3.0, 270.0);
    }
    else if (auto5A424B4B_val == 3) {
        gf_AddEscorttoTrain("Raven", 1, 2.5, 0.0);
        gf_AddEscorttoTrain("SiegeBreaker", 1, 3.0, 90.0);
        gf_AddEscorttoTrain("SiegeBreaker", 1, 3.0, 270.0);
        gf_AddEscorttoTrain("Goliath", 2, 3.0, 90.0);
        gf_AddEscorttoTrain("Goliath", 2, 3.0, 270.0);
        gf_AddEscorttoTrain("Goliath", 3, 3.0, 90.0);
        gf_AddEscorttoTrain("Goliath", 3, 3.0, 270.0);
        gf_AddEscorttoTrain("Marauder", 4, 3.0, 90.0);
        gf_AddEscorttoTrain("Marauder", 4, 3.0, 270.0);
        gf_AddEscorttoTrain("Marauder", 5, 3.0, 90.0);
        gf_AddEscorttoTrain("Marauder", 5, 3.0, 270.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainEscorts5strongerescorts_Init () {
    gt_TrainEscorts5strongerescorts = TriggerCreate("gt_TrainEscorts5strongerescorts_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Escorts 6 & 7 - super fast escorts (Insane Only)
//--------------------------------------------------------------------------------------------------
bool gt_TrainEscorts67superfastescortsInsaneOnly_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoF6231044_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoF6231044_val = libNtve_gf_DifficultyValueInt(1, 1, 2, 3);
    if (autoF6231044_val == 1) {
    }
    else if (autoF6231044_val == 2) {
    }
    else if (autoF6231044_val == 3) {
        gf_AddEscorttoTrain("Hellion", 1, 3.0, 90.0);
        gf_AddEscorttoTrain("Hellion", 1, 3.0, 270.0);
        gf_AddEscorttoTrain("Hellion", 3, 3.0, 90.0);
        gf_AddEscorttoTrain("Hellion", 3, 3.0, 270.0);
        gf_AddEscorttoTrain("Hellion", 5, 3.0, 90.0);
        gf_AddEscorttoTrain("Hellion", 5, 3.0, 270.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainEscorts67superfastescortsInsaneOnly_Init () {
    gt_TrainEscorts67superfastescortsInsaneOnly = TriggerCreate("gt_TrainEscorts67superfastescortsInsaneOnly_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Escorts 8 - heavy escorts
//--------------------------------------------------------------------------------------------------
bool gt_TrainEscorts8heavyescorts_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoD83A4986_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoD83A4986_val = libNtve_gf_DifficultyValueInt(1, 1, 2, 3);
    if (autoD83A4986_val == 1) {
        gf_AddEscorttoTrain("Raven", 1, 2.5, 0.0);
        gf_AddEscorttoTrain("Marine", 1, 3.0, 90.0);
        gf_AddEscorttoTrain("Marine", 1, 3.0, 270.0);
        gf_AddEscorttoTrain("Goliath", 2, 3.0, 90.0);
        gf_AddEscorttoTrain("Goliath", 2, 3.0, 270.0);
        gf_AddEscorttoTrain("SiegeTank", 3, 3.0, 90.0);
        gf_AddEscorttoTrain("SiegeTank", 3, 3.0, 270.0);
        gf_AddEscorttoTrain("Goliath", 4, 3.0, 90.0);
        gf_AddEscorttoTrain("Goliath", 4, 3.0, 270.0);
        gf_AddEscorttoTrain("Marine", 5, 3.0, 90.0);
        gf_AddEscorttoTrain("Marine", 5, 3.0, 270.0);
    }
    else if (autoD83A4986_val == 2) {
        gf_AddEscorttoTrain("Raven", 1, 2.5, 0.0);
        gf_AddEscorttoTrain("Goliath", 1, 5.0, 30.0);
        gf_AddEscorttoTrain("Goliath", 1, 5.0, 330.0);
        gf_AddEscorttoTrain("SpartanCompany", 2, 3.0, 90.0);
        gf_AddEscorttoTrain("SpartanCompany", 2, 3.0, 270.0);
        gf_AddEscorttoTrain("SiegeTank", 3, 3.0, 90.0);
        gf_AddEscorttoTrain("SiegeTank", 3, 3.0, 270.0);
        gf_AddEscorttoTrain("SiegeTank", 4, 3.0, 90.0);
        gf_AddEscorttoTrain("SiegeTank", 4, 3.0, 270.0);
        gf_AddEscorttoTrain("SiegeTank", 5, 3.0, 90.0);
        gf_AddEscorttoTrain("SiegeTank", 5, 3.0, 270.0);
        gf_AddEscorttoTrain("Raven", 1, 2.5, 180.0);
    }
    else if (autoD83A4986_val == 3) {
        gf_AddEscorttoTrain("Raven", 1, 2.0, 90.0);
        gf_AddEscorttoTrain("Raven", 1, 2.0, 270.0);
        gf_AddEscorttoTrain("DuskWing", 1, 5.0, 30.0);
        gf_AddEscorttoTrain("DuskWing", 1, 5.0, 330.0);
        gf_AddEscorttoTrain("Goliath", 1, 3.0, 90.0);
        gf_AddEscorttoTrain("Goliath", 1, 3.0, 270.0);
        gf_AddEscorttoTrain("Goliath", 2, 3.0, 90.0);
        gf_AddEscorttoTrain("Goliath", 2, 3.0, 270.0);
        gf_AddEscorttoTrain("Goliath", 3, 3.0, 90.0);
        gf_AddEscorttoTrain("Goliath", 3, 3.0, 270.0);
        gf_AddEscorttoTrain("SiegeTank", 4, 3.0, 90.0);
        gf_AddEscorttoTrain("SiegeTank", 4, 3.0, 270.0);
        gf_AddEscorttoTrain("SiegeBreaker", 5, 3.0, 90.0);
        gf_AddEscorttoTrain("SiegeBreaker", 5, 3.0, 270.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainEscorts8heavyescorts_Init () {
    gt_TrainEscorts8heavyescorts = TriggerCreate("gt_TrainEscorts8heavyescorts_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Wave Controller
//--------------------------------------------------------------------------------------------------
bool gt_TrainWaveController_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoC22FF88D_val;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((gv_firstTrainSpawned == false)) {
            TimerStart(gv_nextTrainTimer, (gv_trainWaveWait - 30.0), false, c_timeAI);
            gv_firstTrainSpawned = true;
        }
        else {
            TimerWindowSetTitle(gv_nextTrainWindow, StringExternal("Param/Value/C34351EC"));
            TimerStart(gv_nextTrainTimer, gv_trainWaveWait, false, c_timeAI);
        }
        libNtve_gf_WaitForTimer(gv_nextTrainTimer, 0.0, false);
        if ((gv_alternateTrain == 1)) {
            gv_alternateTrain = 0;
        }
        else {
            gv_alternateTrain = 1;
        }
        autoC22FF88D_val = gv_trainsDestroyed;
        if (autoC22FF88D_val == 0) {
            gv_currentWave = (1 + gv_alternateTrain);
        }
        else if (autoC22FF88D_val == 1) {
            gv_currentWave = (3 + gv_alternateTrain);
        }
        else if (autoC22FF88D_val == 2) {
            gv_currentWave = (5 + gv_alternateTrain);
        }
        else if (autoC22FF88D_val == 3) {
            gv_currentWave = (7 + gv_alternateTrain);
        }
        else if (autoC22FF88D_val == 4) {
            gv_currentWave = (9 + gv_alternateTrain);
        }
        else if (autoC22FF88D_val == 5) {
            gv_currentWave = (11 + gv_alternateTrain);
        }
        else if (autoC22FF88D_val == 6) {
            gv_currentWave = (11 + gv_alternateTrain);
        }
        else {
            gv_currentWave = (13 + gv_alternateTrain);
        }
        TriggerExecute(gt_SpawnTrains, true, false);
        TriggerExecute(gt_TrainSpawnAnimations, true, false);
        TriggerExecute(gt_TrainSpawnQ, true, false);
        TriggerExecute(gt_NewTrainMechanicTransmissions, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainWaveController_Init () {
    gt_TrainWaveController = TriggerCreate("gt_TrainWaveController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Trains
//--------------------------------------------------------------------------------------------------
bool gt_SpawnTrains_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int[16] lv_trainsToSpawn;
    int lv_numberOfTrainsToSpawn;
    int lv_i;
    int lv_currentCar;
    bool lv_carsRemain;
    point lv_spawnLocation;
    string lv_trainCarType;
    int lv_initialCustomValue;

    // Automatic Variable Declarations
    int auto01C6FE6C_ae;
    const int auto01C6FE6C_ai = 1;
    int auto49FA79E9_ae;
    const int auto49FA79E9_ai = 1;
    int autoFCB05D1E_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_gameOver == true) && (gv_inCinematic == false)) {
        return true;
    }

    auto01C6FE6C_ae = gv_numberOfTrains;
    lv_i = 1;
    for ( ; ( (auto01C6FE6C_ai >= 0 && lv_i <= auto01C6FE6C_ae) || (auto01C6FE6C_ai < 0 && lv_i >= auto01C6FE6C_ae) ) ; lv_i += auto01C6FE6C_ai ) {
        if ((gv_trainList[lv_i].lv_spawnWave == gv_currentWave)) {
            lv_numberOfTrainsToSpawn += 1;
            lv_trainsToSpawn[lv_numberOfTrainsToSpawn] = lv_i;
            gv_currentTunnel += 1;
            if ((gv_currentTunnel > 9)) {
                gv_currentTunnel = 1;
            }

            gv_trainList[lv_i].lv_tunnel = gv_tunnelOrder[gv_currentTunnel];
            gv_trainList[lv_i].lv_trainAlive = true;
        }

    }
    Wait(3.0, c_timeGame);
    while (true) {
        lv_currentCar += 1;
        lv_carsRemain = false;
        auto49FA79E9_ae = lv_numberOfTrainsToSpawn;
        lv_i = 1;
        for ( ; ( (auto49FA79E9_ai >= 0 && lv_i <= auto49FA79E9_ae) || (auto49FA79E9_ai < 0 && lv_i >= auto49FA79E9_ae) ) ; lv_i += auto49FA79E9_ai ) {
            if ((gv_trainList[lv_trainsToSpawn[lv_i]].lv_numberOfCars >= lv_currentCar) && ((lv_currentCar == 1) || (UnitIsAlive(gv_trainList[lv_trainsToSpawn[lv_i]].lv_trainCars[1]) == true))) {
                lv_carsRemain = true;
                autoFCB05D1E_val = gv_trainList[lv_trainsToSpawn[lv_i]].lv_tunnel;
                if (autoFCB05D1E_val == ge_PRESET_Tunnel_Top) {
                    lv_spawnLocation = PointFromId(345);
                    lv_initialCustomValue = 1;
                }
                else if (autoFCB05D1E_val == ge_PRESET_Tunnel_Middle) {
                    lv_spawnLocation = PointFromId(486);
                    lv_initialCustomValue = gv_midStart;
                }
                else if (autoFCB05D1E_val == ge_PRESET_Tunnel_Bottom) {
                    lv_spawnLocation = PointFromId(487);
                    lv_initialCustomValue = gv_bottomStart;
                }
                else {
                }
                if ((lv_currentCar == 1)) {
                    if (((gv_currentWave == 11) || (gv_currentWave == 12))) {
                        lv_trainCarType = "TarsonisEngineFast";
                    }
                    else {
                        lv_trainCarType = "TarsonisEngine";
                    }
                    gv_trainsSpawned += 1;
                }
                else {
                    if ((gv_trainList[lv_trainsToSpawn[lv_i]].lv_numberOfCars == lv_currentCar)) {
                        lv_trainCarType = "Caboose";
                    }
                    else {
                        lv_trainCarType = "FreightCar";
                    }
                }
                libNtve_gf_CreateUnitsAtPoint2(1, lv_trainCarType, 0, gv_pLAYER_06_TRAIN, lv_spawnLocation);
                gv_trainList[lv_trainsToSpawn[lv_i]].lv_trainCars[lv_currentCar] = UnitLastCreated();
                UnitSetCustomValue(UnitLastCreated(), 0, IntToFixed(lv_initialCustomValue));
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (UnitTypeGetProperty("TarsonisEngine", c_unitPropMovementSpeed) * gv_trainList[lv_trainsToSpawn[lv_i]].lv_speedMultiplier));
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_trainList[lv_trainsToSpawn[lv_i]].lv_maxLife);
                if ((UnitGetType(gv_trainList[lv_trainsToSpawn[lv_i]].lv_trainCars[lv_currentCar]) != "TarsonisEngineFast") && (UnitGetType(gv_trainList[lv_trainsToSpawn[lv_i]].lv_trainCars[lv_currentCar]) != "TarsonisEngine")) {
                    ActorLookAtStart(libNtve_gf_MainActorofUnit(gv_trainList[lv_trainsToSpawn[lv_i]].lv_trainCars[lv_currentCar]), "Chest", 100, 0.0, libNtve_gf_MainActorofUnit(gv_trainList[lv_trainsToSpawn[lv_i]].lv_trainCars[(lv_currentCar - 1)]));
                }

                libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, gv_pLAYER_01_USER);
                UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/A0649087"), StringToText(""), StringToText(""));
                gf_PlayDamagedAnimationsforTrainCar(UnitLastCreated(), ((100.0 / (IntToFixed(gv_trainList[lv_trainsToSpawn[lv_i]].lv_numberOfCars) + 1.0)) * IntToFixed(lv_currentCar)));
                if (((lv_trainCarType == "TarsonisEngine") || (lv_trainCarType == "TarsonisEngineFast"))) {
                    gf_ActivatePingforTrainCar(UnitLastCreated());
                    gv_trainBossBarIndex = lv_trainsToSpawn[lv_i];
                    libNtve_gf_SetBossBarBoss(1, gv_trainList[gv_trainBossBarIndex].lv_trainCars[1], true);
                    gv_trainToBeEscorted = lv_trainsToSpawn[lv_i];
                    TriggerExecute(gt_SpawnEscorts, true, false);
                }

                if ((gv_trainList[lv_trainsToSpawn[lv_i]].lv_numberOfCars == lv_currentCar)) {
                    gv_trainList[lv_trainsToSpawn[lv_i]].lv_lastCar = lv_currentCar;
                }

            }

        }
        if ((lv_carsRemain == false)) {
            return true;
        }

        Wait(((gv_tRAIN_CAR_SEPERATION + (gv_tRAIN_RADIUS * 2.0)) / (UnitTypeGetProperty("TarsonisEngine", c_unitPropMovementSpeed) * gv_trainList[lv_trainsToSpawn[1]].lv_speedMultiplier)), c_timeGame);
        if ((lv_trainCarType == "TarsonisEngine")) {
            Wait(0.4, c_timeGame);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnTrains_Init () {
    gt_SpawnTrains = TriggerCreate("gt_SpawnTrains_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Escorts
//--------------------------------------------------------------------------------------------------
bool gt_SpawnEscorts_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_groundSpawnPoint1;
    point lv_groundSpawnPoint2;
    point lv_airSpawnPoint;
    int lv_trainIndex;
    int lv_i;
    point lv_escortSpawnPoint;
    int lv_escortPlayer;
    unitgroup lv_escortGroup;
    int lv_escortCount;

    // Automatic Variable Declarations
    int auto19BA8FCD_val;
    int autoB90DC3E4_ae;
    const int autoB90DC3E4_ai = 1;
    int autoB3C31EB2_val;
    const int auto38793687_ae = 1;
    const int auto38793687_ai = -1;
    int auto788B0C12_ae;
    const int auto788B0C12_ai = 1;
    int auto099CB889_ae;
    const int auto099CB889_ai = 1;
    int auto0F8EF654_ae;
    const int auto0F8EF654_ai = 1;

    // Variable Initialization
    lv_escortGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_trainIndex = gv_trainToBeEscorted;
    if ((lv_trainIndex == 0)) {
        return true;
    }

    auto19BA8FCD_val = gv_trainList[lv_trainIndex].lv_tunnel;
    if (auto19BA8FCD_val == ge_PRESET_Tunnel_Top) {
        lv_groundSpawnPoint1 = PointFromId(531);
        lv_groundSpawnPoint2 = PointFromId(532);
        lv_airSpawnPoint = PointFromId(530);
        lv_escortPlayer = gv_pLAYER_02_DOMINION;
    }
    else if (auto19BA8FCD_val == ge_PRESET_Tunnel_Middle) {
        lv_groundSpawnPoint1 = PointFromId(534);
        lv_groundSpawnPoint2 = PointFromId(535);
        lv_airSpawnPoint = PointFromId(533);
        lv_escortPlayer = gv_pLAYER_02_DOMINION;
    }
    else if (auto19BA8FCD_val == ge_PRESET_Tunnel_Bottom) {
        lv_groundSpawnPoint1 = PointFromId(537);
        lv_groundSpawnPoint2 = PointFromId(546);
        lv_airSpawnPoint = PointFromId(536);
        lv_escortPlayer = gv_pLAYER_02_DOMINION;
    }
    else {
    }
    autoB90DC3E4_ae = gv_trainList[lv_trainIndex].lv_numberOfEscorts;
    lv_i = 1;
    for ( ; ( (autoB90DC3E4_ai >= 0 && lv_i <= autoB90DC3E4_ae) || (autoB90DC3E4_ai < 0 && lv_i >= autoB90DC3E4_ae) ) ; lv_i += autoB90DC3E4_ai ) {
        autoB3C31EB2_val = gv_trainList[lv_trainIndex].lv_tunnel;
        if (autoB3C31EB2_val == ge_PRESET_Tunnel_Top) {
            gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_waitPosition = gf_ExpectedPositionofTrainCar(gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escortCar, 5);
        }
        else if (autoB3C31EB2_val == ge_PRESET_Tunnel_Middle) {
            gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_waitPosition = gf_ExpectedPositionofTrainCar(gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escortCar, (gv_midStart + 3));
        }
        else if (autoB3C31EB2_val == ge_PRESET_Tunnel_Bottom) {
            gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_waitPosition = gf_ExpectedPositionofTrainCar(gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escortCar, (gv_bottomStart + 8));
        }
        else {
        }
    }
    lv_i = gv_trainList[lv_trainIndex].lv_numberOfEscorts;
    for ( ; ( (auto38793687_ai >= 0 && lv_i <= auto38793687_ae) || (auto38793687_ai < 0 && lv_i >= auto38793687_ae) ) ; lv_i += auto38793687_ai ) {
        Wait(0.5, c_timeAI);
        if ((libNtve_gf_UnitMoverExists(gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_unitType, "Fly") == true)) {
            lv_escortSpawnPoint = lv_airSpawnPoint;
        }
        else {
            if ((ModI(lv_i, 2) == 0)) {
                lv_escortSpawnPoint = lv_groundSpawnPoint1;
            }
            else {
                lv_escortSpawnPoint = lv_groundSpawnPoint2;
            }
        }
        libNtve_gf_CreateUnitsAtPoint2(1, gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_unitType, 0, lv_escortPlayer, lv_escortSpawnPoint);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
        gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escort = UnitLastCreated();
        AISetUnitScriptControlled(UnitLastCreated(), true);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_waitPosition, gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_polarRadius, (PointGetFacing(gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_waitPosition) + gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_polarAngle))), c_orderQueueReplace);
    }
    while (true) {
        Wait(1.0, c_timeAI);
        auto788B0C12_ae = gv_trainList[lv_trainIndex].lv_numberOfEscorts;
        lv_i = 1;
        for ( ; ( (auto788B0C12_ai >= 0 && lv_i <= auto788B0C12_ae) || (auto788B0C12_ai < 0 && lv_i >= auto788B0C12_ae) ) ; lv_i += auto788B0C12_ai ) {
            UnitIssueOrder(gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escort, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_waitPosition, gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_polarRadius, (PointGetFacing(gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_waitPosition) + gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_polarAngle))), c_orderQueueReplace);
        }
        if ((UnitIsAlive(gv_trainList[lv_trainIndex].lv_trainCars[1]) == false)) {
            return true;
        }

        if ((RegionContainsPoint(RegionCircle(gv_trainList[lv_trainIndex].lv_escorts[1].lv_waitPosition, 2.0), UnitGetPosition(gv_trainList[lv_trainIndex].lv_trainCars[1])) == true)) {
            auto099CB889_ae = gv_trainList[lv_trainIndex].lv_numberOfCars;
            lv_i = 1;
            for ( ; ( (auto099CB889_ai >= 0 && lv_i <= auto099CB889_ae) || (auto099CB889_ai < 0 && lv_i >= auto099CB889_ae) ) ; lv_i += auto099CB889_ai ) {
                UnitGroupAdd(lv_escortGroup, gv_trainList[lv_trainIndex].lv_trainCars[lv_i]);
            }
            AIAttackWaveSetTargetEscort(lv_escortPlayer, lv_escortGroup, 0);
            auto0F8EF654_ae = gv_trainList[lv_trainIndex].lv_numberOfEscorts;
            lv_i = 1;
            for ( ; ( (auto0F8EF654_ai >= 0 && lv_i <= auto0F8EF654_ae) || (auto0F8EF654_ai < 0 && lv_i >= auto0F8EF654_ae) ) ; lv_i += auto0F8EF654_ai ) {
                if ((UnitIsAlive(gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escort) == true)) {
                    AISetUnitScriptControlled(gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escort, false);
                    AIAttackWaveAddEscortUnit(lv_escortPlayer, gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escort, gv_trainList[lv_trainIndex].lv_trainCars[gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escortCar], gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_polarRadius, gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_polarAngle);
                    lv_escortCount += 1;
                }

            }
            if ((lv_escortCount > 0)) {
                AIAttackWaveSend(lv_escortPlayer, 0, false);
                gv_trainList[lv_trainIndex].lv_escortWave = WaveLastCreated();
            }

            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnEscorts_Init () {
    gt_SpawnEscorts = TriggerCreate("gt_SpawnEscorts_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Movement
//--------------------------------------------------------------------------------------------------
bool gt_TrainMovement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tempUnit;
    unitgroup lv_trainCars;

    // Automatic Variable Declarations
    unitgroup auto005D2B42_g;
    int auto005D2B42_u;
    unit auto005D2B42_var;
    unitgroup auto499A4BF2_g;
    int auto499A4BF2_u;
    unit auto499A4BF2_var;

    // Variable Initialization
    lv_trainCars = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto005D2B42_g = UnitGroup(null, gv_pLAYER_06_TRAIN, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto005D2B42_u = UnitGroupCount(auto005D2B42_g, c_unitCountAll);
    for (;; auto005D2B42_u -= 1) {
        auto005D2B42_var = UnitGroupUnitFromEnd(auto005D2B42_g, auto005D2B42_u);
        if (auto005D2B42_var == null) { break; }
        if (((UnitGetType(auto005D2B42_var) == "Caboose") || (UnitGetType(auto005D2B42_var) == "FreightCar") || (UnitGetType(auto005D2B42_var) == "TarsonisEngine") || (UnitGetType(auto005D2B42_var) == "TarsonisEngineFast"))) {
            UnitGroupAdd(lv_trainCars, auto005D2B42_var);
        }

    }
    auto499A4BF2_g = lv_trainCars;
    auto499A4BF2_u = UnitGroupCount(auto499A4BF2_g, c_unitCountAll);
    for (;; auto499A4BF2_u -= 1) {
        auto499A4BF2_var = UnitGroupUnitFromEnd(auto499A4BF2_g, auto499A4BF2_u);
        if (auto499A4BF2_var == null) { break; }
        if ((RegionContainsPoint(RegionCircle(gv_trainPath[FixedToInt(UnitGetCustomValue(auto499A4BF2_var, 0))], 0.5), UnitGetPosition(auto499A4BF2_var)) == true)) {
            if ((FixedToInt(UnitGetCustomValue(auto499A4BF2_var, 0)) < 255)) {
                UnitSetCustomValue(auto499A4BF2_var, 0, (UnitGetCustomValue(auto499A4BF2_var, 0) + 1.0));
            }

        }

        UnitIssueOrder(auto499A4BF2_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(auto499A4BF2_var), 1.0, AngleBetweenPoints(UnitGetPosition(auto499A4BF2_var), gv_trainPath[FixedToInt(UnitGetCustomValue(auto499A4BF2_var, 0))]))), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainMovement_Init () {
    gt_TrainMovement = TriggerCreate("gt_TrainMovement_Func");
    TriggerAddEventTimePeriodic(gt_TrainMovement, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Timer Window
//--------------------------------------------------------------------------------------------------
bool gt_TrainTimerWindow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerWindowCreate(gv_nextTrainTimer, StringExternal("Param/Value/BC9464C5"), true, false);
    TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<mintotal/>:<sec2/>"));
    TimerWindowSetColor(TimerWindowLastCreated(), c_timerWindowColorTime, Color(0.00, 100.00, 0.00), 0.0);
    gv_nextTrainWindow = TimerWindowLastCreated();
    while (true) {
        Wait(1.0, c_timeGame);
        if ((gv_gameOver == true)) {
            TimerWindowDestroy(TimerWindowLastCreated());
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainTimerWindow_Init () {
    gt_TrainTimerWindow = TriggerCreate("gt_TrainTimerWindow_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Boss Bar
//--------------------------------------------------------------------------------------------------
bool gt_TrainBossBar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_DisplayBossBar(1, "Assets\\Textures\\btn-unit-terran-dominiontrain.dds", StringExternal("Param/Value/4BBDDE07"), 100, PlayerGroupAll());
    libNtve_gf_SetBossBarRace(1, libNtve_ge_BossBarRace_Terran, true);
    libNtve_gf_ShowHideBossBar(false, 1);
    while (true) {
        Wait(1.0, c_timeGame);
        if ((gv_gameOver == true)) {
            libNtve_gf_ShowHideBossBar(false, 1);
            return true;
        }

        if ((UnitIsAlive(gv_trainList[gv_trainBossBarIndex].lv_trainCars[1]) == true) && (gv_inCinematic == false)) {
            libNtve_gf_ShowHideBossBar(true, 1);
        }
        else {
            libNtve_gf_ShowHideBossBar(false, 1);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainBossBar_Init () {
    gt_TrainBossBar = TriggerCreate("gt_TrainBossBar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Death Q
//--------------------------------------------------------------------------------------------------
bool gt_TrainDeathQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_trainIndex;
    int lv_a;
    int lv_b;
    point lv_textPoint;
    bool lv_trainIndexFound;
    int lv_trainMidPoint;

    // Automatic Variable Declarations
    int autoA3F2F476_ae;
    const int autoA3F2F476_ai = 1;
    int auto23F56A8E_ae;
    const int auto23F56A8E_ai = 1;
    int auto9BF3A280_n;
    int auto9BF3A280_i;
    int auto475F7BBB_n;
    int auto475F7BBB_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Caboose") || (UnitGetType(EventUnit()) == "FreightCar") || (UnitGetType(EventUnit()) == "TarsonisEngine") || (UnitGetType(EventUnit()) == "TarsonisEngineFast")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA3F2F476_ae = gv_numberOfTrains;
    lv_a = 1;
    for ( ; ( (autoA3F2F476_ai >= 0 && lv_a <= autoA3F2F476_ae) || (autoA3F2F476_ai < 0 && lv_a >= autoA3F2F476_ae) ) ; lv_a += autoA3F2F476_ai ) {
        auto23F56A8E_ae = gv_trainList[lv_a].lv_numberOfCars;
        lv_b = 1;
        for ( ; ( (auto23F56A8E_ai >= 0 && lv_b <= auto23F56A8E_ae) || (auto23F56A8E_ai < 0 && lv_b >= auto23F56A8E_ae) ) ; lv_b += auto23F56A8E_ai ) {
            if ((gv_trainList[lv_a].lv_trainCars[lv_b] == EventUnit())) {
                lv_trainIndex = lv_a;
                lv_trainIndexFound = true;
                break;
            }

        }
        if ((lv_trainIndexFound == true)) {
            break;
        }

    }
    if ((lv_trainIndexFound == false)) {
        return true;
    }

    if ((gv_trainList[lv_trainIndex].lv_trainAlive == false)) {
        return true;
    }

    if ((gv_trainsDestroyed < (gv_trainsNeeded - 1))) {
        auto9BF3A280_n = gv_trainMinerals[libNtve_gf_DifficultyValueInt(1, 2, 3, 4)][MinI(gv_trainsDestroyed, 7)];
        for (auto9BF3A280_i = 1; auto9BF3A280_i <= auto9BF3A280_n; auto9BF3A280_i += 1) {
            UnitCreate(1, "PalletMinerals", 0, 0, RegionRandomPoint(RegionCircle(UnitGetPosition(gv_trainList[lv_trainIndex].lv_trainCars[RandomInt(1, gv_trainList[lv_trainIndex].lv_lastCar)]), 2.0)), RandomFixed(0.0, 360.0));
            libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, gv_pLAYER_01_USER);
        }
        auto475F7BBB_n = gv_trainGas;
        for (auto475F7BBB_i = 1; auto475F7BBB_i <= auto475F7BBB_n; auto475F7BBB_i += 1) {
            UnitCreate(1, "PalletGas", 0, 0, RegionRandomPoint(RegionCircle(UnitGetPosition(gv_trainList[lv_trainIndex].lv_trainCars[RandomInt(1, gv_trainList[lv_trainIndex].lv_lastCar)]), 2.0)), RandomFixed(0.0, 360.0));
            libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, gv_pLAYER_01_USER);
        }
    }
    else {
        lv_trainMidPoint = (gv_trainList[lv_trainIndex].lv_lastCar / 2);
        lv_trainMidPoint += 1;
        UnitCreate(1, "AdjutantCapsule", 0, 0, RegionRandomPoint(RegionCircle(UnitGetPosition(gv_trainList[lv_trainIndex].lv_trainCars[lv_trainMidPoint]), 2.0)), (UnitGetFacing(gv_trainList[lv_trainIndex].lv_trainCars[lv_trainMidPoint]) - 90.0));
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "AnimClear Birth");
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "AnimClear Morph");
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    }
    gv_trainList[lv_trainIndex].lv_trainAlive = false;
    gv_trainsDestroyed += 1;
    ObjectiveSetName(gv_objective_TheGreatTrainRobbery, (StringExternal("Param/Value/C68C5019") + IntToText(gv_trainsDestroyed) + StringExternal("Param/Value/C9C430E9") + IntToText(gv_trainsNeeded) + StringExternal("Param/Value/B2141726")));
    TriggerExecute(gt_KillFirstTrainQ, true, false);
    if ((gv_trainsDestroyed == gv_trainsNeeded)) {
        TriggerExecute(gt_VictoryAllTrainsDead, true, false);
    }

    TriggerQueueEnter();
    Wait(5.0, c_timeReal);
    if ((gv_gameOver == true)) {
        return true;
    }

    if ((gv_trainsDestroyed == 3)) {
        libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/7563D51B"));
    }

    if ((gv_trainsDestroyed == 5)) {
        libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/63173386"));
    }

    if ((gv_trainsDestroyed == 7)) {
        libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/332B1CAB"));
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainDeathQ_Init () {
    gt_TrainDeathQ = TriggerCreate("gt_TrainDeathQ_Func");
    TriggerAddEventUnitDied(gt_TrainDeathQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Despawn
//--------------------------------------------------------------------------------------------------
bool gt_TrainDespawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_trainIndex;
    int lv_i;

    // Automatic Variable Declarations
    int auto7BE31D20_ae;
    const int auto7BE31D20_ai = 1;
    int auto49BE1DDE_ae;
    const int auto49BE1DDE_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_06_TRAIN))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Caboose") || (UnitGetType(EventUnit()) == "FreightCar") || (UnitGetType(EventUnit()) == "TarsonisEngine") || (UnitGetType(EventUnit()) == "TarsonisEngineFast")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto7BE31D20_ae = gv_numberOfTrains;
    lv_i = 1;
    for ( ; ( (auto7BE31D20_ai >= 0 && lv_i <= auto7BE31D20_ae) || (auto7BE31D20_ai < 0 && lv_i >= auto7BE31D20_ae) ) ; lv_i += auto7BE31D20_ai ) {
        if ((gv_trainList[lv_i].lv_trainCars[1] == EventUnit())) {
            lv_trainIndex = lv_i;
            break;
        }

    }
    if ((UnitGetType(EventUnit()) == "Caboose") && (gv_inCinematic == false) && (libNtve_gf_DifficultyValueInt(1, 1, 1, 0) == 1)) {
        gv_trainsMissed += 1;
        ObjectiveSetName(gv_objective_DontMissTrains, (StringExternal("Param/Value/A499F4E7") + IntToText(gv_trainsMissed) + StringExternal("Param/Value/AE512F3B")));
        if ((gv_trainsMissed == 1)) {
            TriggerExecute(gt_Train1MissedQ, true, false);
        }

        if ((gv_trainsMissed == 2)) {
            TriggerExecute(gt_Train2MissedQ, true, false);
        }

        if ((gv_trainsMissed == 3)) {
            TriggerExecute(gt_DefeatTooManyTrainsMissed, true, false);
        }

    }

    if ((UnitGetType(EventUnit()) == "Caboose") && (gv_inCinematic == false) && (libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        gv_trainsMissed += 1;
        ObjectiveSetName(gv_objective_DontMissTrains, (StringExternal("Param/Value/896026F8") + IntToText(gv_trainsMissed) + StringExternal("Param/Value/0A165E94")));
        if ((gv_trainsMissed == 1)) {
            TriggerExecute(gt_Train1MissedQ, true, false);
        }

        if ((gv_trainsMissed == 2)) {
            TriggerExecute(gt_DefeatTooManyTrainsMissed, true, false);
        }

    }

    UnitBehaviorRemove(EventUnit(), "ConjoinedTrainCar", 1);
    UnitRemove(EventUnit());
    if ((lv_trainIndex > 0)) {
        auto49BE1DDE_ae = gv_trainList[lv_trainIndex].lv_lastCar;
        lv_i = 2;
        for ( ; ( (auto49BE1DDE_ai >= 0 && lv_i <= auto49BE1DDE_ae) || (auto49BE1DDE_ai < 0 && lv_i >= auto49BE1DDE_ae) ) ; lv_i += auto49BE1DDE_ai ) {
            gv_trainList[lv_trainIndex].lv_trainCars[(lv_i - 1)] = gv_trainList[lv_trainIndex].lv_trainCars[lv_i];
        }
        gv_trainList[lv_trainIndex].lv_lastCar -= 1;
        if ((UnitIsAlive(gv_trainList[gv_trainBossBarIndex].lv_trainCars[1]) == false)) {
            gv_trainList[lv_trainIndex].lv_trainAlive = false;
        }

        if ((lv_trainIndex == gv_trainBossBarIndex)) {
            if ((UnitIsAlive(gv_trainList[gv_trainBossBarIndex].lv_trainCars[1]) == true)) {
                libNtve_gf_SetBossBarBoss(1, gv_trainList[gv_trainBossBarIndex].lv_trainCars[1], true);
            }
            else {
                libNtve_gf_ShowHideBossBar(false, 1);
            }
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainDespawn_Init () {
    gt_TrainDespawn = TriggerCreate("gt_TrainDespawn_Func");
    TriggerAddEventUnitRegion(gt_TrainDespawn, null, RegionCircle(PointFromId(491), 1.0), true);
    TriggerAddEventUnitRegion(gt_TrainDespawn, null, RegionCircle(PointFromId(502), 1.0), true);
    TriggerAddEventUnitRegion(gt_TrainDespawn, null, RegionCircle(PointFromId(297), 1.0), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Despawn
//--------------------------------------------------------------------------------------------------
bool gt_EscortDespawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_trainIndex;
    unitgroup lv_escortGroup;
    int lv_i;
    fixed lv_waitAngle;
    unitgroup lv_tempTrainGroup;
    point lv_exitPoint;

    // Automatic Variable Declarations
    int autoAB191ABE_ae;
    const int autoAB191ABE_ai = 1;
    int auto806C41E4_ae;
    const int auto806C41E4_ai = 1;
    int auto6F335F7E_val;
    int auto52611589_ae;
    const int auto52611589_ai = 1;
    int autoDBBC6A4F_ae;
    const int autoDBBC6A4F_ai = 1;

    // Variable Initialization
    lv_escortGroup = UnitGroupEmpty();
    lv_tempTrainGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_06_TRAIN))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "TarsonisEngine") || (UnitGetType(EventUnit()) == "TarsonisEngineFast")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoAB191ABE_ae = gv_numberOfTrains;
    lv_i = 1;
    for ( ; ( (autoAB191ABE_ai >= 0 && lv_i <= autoAB191ABE_ae) || (autoAB191ABE_ai < 0 && lv_i >= autoAB191ABE_ae) ) ; lv_i += autoAB191ABE_ai ) {
        if ((gv_trainList[lv_i].lv_trainCars[1] == EventUnit())) {
            lv_trainIndex = lv_i;
            break;
        }

    }
    AIWaveDelete(gv_trainList[lv_trainIndex].lv_escortWave);
    auto806C41E4_ae = gv_trainList[lv_trainIndex].lv_numberOfEscorts;
    lv_i = 1;
    for ( ; ( (auto806C41E4_ai >= 0 && lv_i <= auto806C41E4_ae) || (auto806C41E4_ai < 0 && lv_i >= auto806C41E4_ae) ) ; lv_i += auto806C41E4_ai ) {
        if ((UnitIsAlive(gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escort) == true)) {
            UnitGroupAdd(lv_escortGroup, gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escort);
            if ((ModF(gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_polarAngle, 360.0) >= 20.0) && (ModF(gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_polarAngle, 360.0) <= 160.0)) {
                UnitIssueOrder(gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escort, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(gv_trainList[lv_trainIndex].lv_trainCars[gv_trainList[lv_trainIndex].lv_lastCar]), 4.0, (UnitGetFacing(gv_trainList[lv_trainIndex].lv_trainCars[gv_trainList[lv_trainIndex].lv_lastCar]) + 90.0))), c_orderQueueReplace);
            }
            else {
                if ((ModF(gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_polarAngle, 360.0) >= 200.0) && (ModF(gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_polarAngle, 360.0) <= 340.0)) {
                    UnitIssueOrder(gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escort, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(gv_trainList[lv_trainIndex].lv_trainCars[gv_trainList[lv_trainIndex].lv_lastCar]), 4.0, (UnitGetFacing(gv_trainList[lv_trainIndex].lv_trainCars[gv_trainList[lv_trainIndex].lv_lastCar]) + 270.0))), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escort, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(gv_trainList[lv_trainIndex].lv_trainCars[gv_trainList[lv_trainIndex].lv_lastCar]), 4.0, (UnitGetFacing(gv_trainList[lv_trainIndex].lv_trainCars[gv_trainList[lv_trainIndex].lv_lastCar]) + 180.0))), c_orderQueueReplace);
                }
            }
        }

    }
    while (!((UnitIsAlive(gv_trainList[lv_trainIndex].lv_trainCars[1]) == false))) {
        Wait(1.0, c_timeAI);
    }
    auto6F335F7E_val = gv_trainList[lv_trainIndex].lv_tunnel;
    if (auto6F335F7E_val == ge_PRESET_Tunnel_Top) {
        lv_exitPoint = PointFromId(1225);
    }
    else if (auto6F335F7E_val == ge_PRESET_Tunnel_Middle) {
        lv_exitPoint = PointFromId(1224);
    }
    else if (auto6F335F7E_val == ge_PRESET_Tunnel_Bottom) {
        lv_exitPoint = PointFromId(1223);
    }
    else {
    }
    while (true) {
        Wait(1.0, c_timeAI);
        auto52611589_ae = gv_trainList[lv_trainIndex].lv_numberOfEscorts;
        lv_i = 1;
        for ( ; ( (auto52611589_ai >= 0 && lv_i <= auto52611589_ae) || (auto52611589_ai < 0 && lv_i >= auto52611589_ae) ) ; lv_i += auto52611589_ai ) {
            if ((UnitIsAlive(gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escort) == true)) {
                lv_i = 0;
                break;
            }

        }
        if ((lv_i != 0)) {
            return true;
        }

        autoDBBC6A4F_ae = gv_trainList[lv_trainIndex].lv_numberOfEscorts;
        lv_i = 1;
        for ( ; ( (autoDBBC6A4F_ai >= 0 && lv_i <= autoDBBC6A4F_ae) || (autoDBBC6A4F_ai < 0 && lv_i >= autoDBBC6A4F_ae) ) ; lv_i += autoDBBC6A4F_ai ) {
            if ((UnitIsAlive(gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escort) == true)) {
                if ((libNtve_gf_UnitInRegion(gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escort, RegionCircle(lv_exitPoint, 1.0)) == true)) {
                    UnitRemove(gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escort);
                }
                else {
                    UnitIssueOrder(gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escort, OrderTargetingPoint(AbilityCommand("attack", 0), lv_exitPoint), c_orderQueueReplace);
                }
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortDespawn_Init () {
    gt_EscortDespawn = TriggerCreate("gt_EscortDespawn_Func");
    TriggerAddEventUnitRegion(gt_EscortDespawn, null, RegionFromId(2), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Car Damage Animation Controller
//--------------------------------------------------------------------------------------------------
bool gt_TrainCarDamageAnimationController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_trainCarToAnimate_LOCAL;
    fixed lv_trainCarToAnimateBreakPoint_LOCAL;

    // Automatic Variable Declarations
    int auto29FF27A9_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_trainCarToAnimate_LOCAL = gv_trainCarToAnimate;
    lv_trainCarToAnimateBreakPoint_LOCAL = gv_trainCarToAnimateBreakPoint;
    while (true) {
        Wait(1.0, c_timeGame);
        if ((UnitIsAlive(lv_trainCarToAnimate_LOCAL) == false)) {
            return true;
        }

        if ((UnitGetPropertyFixed(lv_trainCarToAnimate_LOCAL, c_unitPropLifePercent, c_unitPropCurrent) <= lv_trainCarToAnimateBreakPoint_LOCAL)) {
            break;
        }

    }
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_trainCarToAnimate_LOCAL), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("SiegeTank_Explode", -1), PlayerGroupAll(), lv_trainCarToAnimate_LOCAL, 0.0, 100.0, 0.0);
    Wait(1.0, c_timeGame);
    while (true) {
        if ((UnitIsAlive(lv_trainCarToAnimate_LOCAL) == false)) {
            return true;
        }

        auto29FF27A9_val = RandomInt(1, 4);
        if (auto29FF27A9_val == 1) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_trainCarToAnimate_LOCAL), c_animNameDefault, "Stand Work", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
            Wait(1.167, c_timeGame);
        }
        else if (auto29FF27A9_val == 2) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_trainCarToAnimate_LOCAL), c_animNameDefault, "Stand Work 01", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
            Wait(1.333, c_timeGame);
        }
        else if (auto29FF27A9_val == 3) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_trainCarToAnimate_LOCAL), c_animNameDefault, "Stand Work 02", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
            Wait(2.0, c_timeGame);
        }
        else if (auto29FF27A9_val == 4) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_trainCarToAnimate_LOCAL), c_animNameDefault, "Stand Work 03", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
            Wait(1.5, c_timeGame);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainCarDamageAnimationController_Init () {
    gt_TrainCarDamageAnimationController = TriggerCreate("gt_TrainCarDamageAnimationController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Car Ping Controller
//--------------------------------------------------------------------------------------------------
bool gt_TrainCarPingController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_trainCarToPing_LOCAL;
    int lv_trainPing;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_trainPing = c_invalidPingId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_trainCarToPing_LOCAL = gv_trainCarToPing;
    libNtve_gf_CreatePingFacingAngle(PlayerGroupActive(), "PingSimple", UnitGetPosition(lv_trainCarToPing_LOCAL), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    lv_trainPing = PingLastCreated();
    PingSetUnit(lv_trainPing, gv_trainCarToPing);
    PingSetScale(lv_trainPing, 0.7);
    PingSetTooltip(lv_trainPing, StringExternal("Param/Value/0F6A9D3E"));
    while (!((UnitIsAlive(lv_trainCarToPing_LOCAL) == false))) {
        Wait(1.0, c_timeGame);
    }
    PingDestroy(lv_trainPing);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainCarPingController_Init () {
    gt_TrainCarPingController = TriggerCreate("gt_TrainCarPingController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Train Stations
//--------------------------------------------------------------------------------------------------
bool gt_InitializeTrainStations_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i += 1;
    gv_trainStations[lv_i].lv_position = PointFromId(1325);
    lv_i += 1;
    gv_trainStations[lv_i].lv_position = PointFromId(1413);
    lv_i += 1;
    gv_trainStations[lv_i].lv_position = PointFromId(1486);
    gv_numberOfTrainStations = lv_i;
    TriggerExecute(gt_TrainStationController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeTrainStations_Init () {
    gt_InitializeTrainStations = TriggerCreate("gt_InitializeTrainStations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Chargers
//--------------------------------------------------------------------------------------------------
bool gt_InitializeChargers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i += 1;
    gf_InitializeCharger(PointFromId(1542), ge_PRESET_Tunnel_Top, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1546), ge_PRESET_Tunnel_Top, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1547), ge_PRESET_Tunnel_Top, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1548), ge_PRESET_Tunnel_Top, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1549), ge_PRESET_Tunnel_Top, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1550), ge_PRESET_Tunnel_Top, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1551), ge_PRESET_Tunnel_Top, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1552), ge_PRESET_Tunnel_Top, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1553), ge_PRESET_Tunnel_Top, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1624), ge_PRESET_Tunnel_Top, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1625), ge_PRESET_Tunnel_Top, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1630), ge_PRESET_Tunnel_Top, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1631), ge_PRESET_Tunnel_Top, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1636), ge_PRESET_Tunnel_Top, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1637), ge_PRESET_Tunnel_Middle, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1915), ge_PRESET_Tunnel_Middle, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1943), ge_PRESET_Tunnel_Middle, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1944), ge_PRESET_Tunnel_Middle, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1945), ge_PRESET_Tunnel_Middle, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1946), ge_PRESET_Tunnel_Middle, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1947), ge_PRESET_Tunnel_Middle, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1948), ge_PRESET_Tunnel_Middle, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1949), ge_PRESET_Tunnel_Middle, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1950), ge_PRESET_Tunnel_Middle, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1951), ge_PRESET_Tunnel_Middle, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1952), ge_PRESET_Tunnel_Middle, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1953), ge_PRESET_Tunnel_Middle, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1954), ge_PRESET_Tunnel_Bottom, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1955), ge_PRESET_Tunnel_Bottom, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1956), ge_PRESET_Tunnel_Bottom, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1957), ge_PRESET_Tunnel_Bottom, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1958), ge_PRESET_Tunnel_Bottom, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1959), ge_PRESET_Tunnel_Bottom, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1960), ge_PRESET_Tunnel_Bottom, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1961), ge_PRESET_Tunnel_Bottom, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1962), ge_PRESET_Tunnel_Bottom, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1963), ge_PRESET_Tunnel_Bottom, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1964), ge_PRESET_Tunnel_Bottom, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1965), ge_PRESET_Tunnel_Bottom, lv_i);
    gv_numberOfChargers = lv_i;
    TriggerExecute(gt_ChargePulseController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeChargers_Init () {
    gt_InitializeChargers = TriggerCreate("gt_InitializeChargers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Station Controller
//--------------------------------------------------------------------------------------------------
bool gt_TrainStationController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoA10C9F58_ae;
    const int autoA10C9F58_ai = 1;
    int autoF18F5B4B_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeGame);
        autoA10C9F58_ae = gv_numberOfTrainStations;
        lv_i = 1;
        for ( ; ( (autoA10C9F58_ai >= 0 && lv_i <= autoA10C9F58_ae) || (autoA10C9F58_ai < 0 && lv_i >= autoA10C9F58_ae) ) ; lv_i += autoA10C9F58_ai ) {
            autoF18F5B4B_val = gv_trainStations[lv_i].lv_state;
            if (autoF18F5B4B_val == ge_PRESET_TrainStationState_Inactive) {
                if (((UnitGroupCount(UnitGroup("TarsonisEngine", gv_pLAYER_06_TRAIN, RegionCircle(gv_trainStations[lv_i].lv_position, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("TarsonisEngineFast", gv_pLAYER_06_TRAIN, RegionCircle(gv_trainStations[lv_i].lv_position, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("FreightCar", gv_pLAYER_06_TRAIN, RegionCircle(gv_trainStations[lv_i].lv_position, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Caboose", gv_pLAYER_06_TRAIN, RegionCircle(gv_trainStations[lv_i].lv_position, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
                    gv_currentTrainStationGlobal = lv_i;
                    TriggerExecute(gt_ActivateStation, true, false);
                }

            }
            else if (autoF18F5B4B_val == ge_PRESET_TrainStationState_Active) {
                if ((UnitGroupCount(UnitGroup("TarsonisEngine", gv_pLAYER_06_TRAIN, RegionCircle(gv_trainStations[lv_i].lv_position, 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("TarsonisEngineFast", gv_pLAYER_06_TRAIN, RegionCircle(gv_trainStations[lv_i].lv_position, 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("FreightCar", gv_pLAYER_06_TRAIN, RegionCircle(gv_trainStations[lv_i].lv_position, 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Caboose", gv_pLAYER_06_TRAIN, RegionCircle(gv_trainStations[lv_i].lv_position, 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    gv_currentTrainStationGlobal = lv_i;
                    TriggerExecute(gt_DeactivateStation, true, false);
                }

            }
            else {
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainStationController_Init () {
    gt_TrainStationController = TriggerCreate("gt_TrainStationController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Charge Pulse Controller
//--------------------------------------------------------------------------------------------------
bool gt_ChargePulseController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto2ED92885_ae;
    const int auto2ED92885_ai = 1;
    int auto39736B00_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeGame);
        auto2ED92885_ae = gv_numberOfChargers;
        lv_i = 1;
        for ( ; ( (auto2ED92885_ai >= 0 && lv_i <= auto2ED92885_ae) || (auto2ED92885_ai < 0 && lv_i >= auto2ED92885_ae) ) ; lv_i += auto2ED92885_ai ) {
            auto39736B00_val = gv_chargers[lv_i].lv_state;
            if (auto39736B00_val == ge_PRESET_ChargeState_Active) {
                if (((UnitGroupCount(UnitGroup("TarsonisEngine", gv_pLAYER_06_TRAIN, RegionCircle(gv_chargers[lv_i].lv_position, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("TarsonisEngineFast", gv_pLAYER_06_TRAIN, RegionCircle(gv_chargers[lv_i].lv_position, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("FreightCar", gv_pLAYER_06_TRAIN, RegionCircle(gv_chargers[lv_i].lv_position, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Caboose", gv_pLAYER_06_TRAIN, RegionCircle(gv_chargers[lv_i].lv_position, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
                    gv_chargers[lv_i].lv_state = ge_PRESET_ChargeState_Pulsing;
                    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_chargers[lv_i].lv_position, 1.0), "TarsonisCharger", c_animNameDefault, "Spell", c_animFlagPlayForever, c_animTimeDefault);
                }

            }
            else if (auto39736B00_val == ge_PRESET_ChargeState_Pulsing) {
                if ((UnitGroupCount(UnitGroup("TarsonisEngine", gv_pLAYER_06_TRAIN, RegionCircle(gv_chargers[lv_i].lv_position, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("TarsonisEngineFast", gv_pLAYER_06_TRAIN, RegionCircle(gv_chargers[lv_i].lv_position, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("FreightCar", gv_pLAYER_06_TRAIN, RegionCircle(gv_chargers[lv_i].lv_position, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Caboose", gv_pLAYER_06_TRAIN, RegionCircle(gv_chargers[lv_i].lv_position, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    gv_chargers[lv_i].lv_state = ge_PRESET_ChargeState_Active;
                    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_chargers[lv_i].lv_position, 1.0), "TarsonisCharger", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
                }

            }
            else {
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChargePulseController_Init () {
    gt_ChargePulseController = TriggerCreate("gt_ChargePulseController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Station
//--------------------------------------------------------------------------------------------------
bool gt_ActivateStation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentTrainStationLocal;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentTrainStationLocal = gv_currentTrainStationGlobal;
    gv_trainStations[lv_currentTrainStationLocal].lv_state = ge_PRESET_TrainStationState_Transitioning;
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_trainStations[lv_currentTrainStationLocal].lv_position, 2.0), "TarsonisStation", c_animNameDefault, "Stand Work Start", 0, c_animTimeDefault);
    Wait(1.0, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_trainStations[lv_currentTrainStationLocal].lv_position, 2.0), "TarsonisStation", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    gv_trainStations[lv_currentTrainStationLocal].lv_state = ge_PRESET_TrainStationState_Active;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateStation_Init () {
    gt_ActivateStation = TriggerCreate("gt_ActivateStation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deactivate Station
//--------------------------------------------------------------------------------------------------
bool gt_DeactivateStation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentTrainStationLocal;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentTrainStationLocal = gv_currentTrainStationGlobal;
    gv_trainStations[lv_currentTrainStationLocal].lv_state = ge_PRESET_TrainStationState_Transitioning;
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_trainStations[lv_currentTrainStationLocal].lv_position, 2.0), "TarsonisStation", c_animNameDefault, "Stand Work End", 0, c_animTimeDefault);
    Wait(1.0, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_trainStations[lv_currentTrainStationLocal].lv_position, 2.0), "TarsonisStation", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    gv_trainStations[lv_currentTrainStationLocal].lv_state = ge_PRESET_TrainStationState_Inactive;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeactivateStation_Init () {
    gt_DeactivateStation = TriggerCreate("gt_DeactivateStation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Spawn Animations
//--------------------------------------------------------------------------------------------------
bool gt_TrainSpawnAnimations_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int[16] lv_trainsThatAreSpawning;
    int lv_numberOfTrainsThatAreSpawning;
    bool lv_top;
    bool lv_middle;
    bool lv_bottom;

    // Automatic Variable Declarations
    int auto6BAA92F4_ae;
    const int auto6BAA92F4_ai = 1;
    int auto7AB7BE83_ae;
    const int auto7AB7BE83_ai = 1;
    int auto9D83BBF1_val;
    int autoD645FD05_ae;
    const int autoD645FD05_ai = 1;
    int auto023C3302_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6BAA92F4_ae = gv_numberOfTrains;
    lv_i = 1;
    for ( ; ( (auto6BAA92F4_ai >= 0 && lv_i <= auto6BAA92F4_ae) || (auto6BAA92F4_ai < 0 && lv_i >= auto6BAA92F4_ae) ) ; lv_i += auto6BAA92F4_ai ) {
        if ((gv_trainList[lv_i].lv_spawnWave == gv_currentWave)) {
            lv_numberOfTrainsThatAreSpawning += 1;
            lv_trainsThatAreSpawning[lv_numberOfTrainsThatAreSpawning] = lv_i;
        }

    }
    auto7AB7BE83_ae = lv_numberOfTrainsThatAreSpawning;
    lv_i = 1;
    for ( ; ( (auto7AB7BE83_ai >= 0 && lv_i <= auto7AB7BE83_ae) || (auto7AB7BE83_ai < 0 && lv_i >= auto7AB7BE83_ae) ) ; lv_i += auto7AB7BE83_ai ) {
        auto9D83BBF1_val = gv_trainList[lv_trainsThatAreSpawning[lv_i]].lv_tunnel;
        if (auto9D83BBF1_val == ge_PRESET_Tunnel_Top) {
            lv_top = true;
        }
        else if (auto9D83BBF1_val == ge_PRESET_Tunnel_Middle) {
            lv_middle = true;
        }
        else if (auto9D83BBF1_val == ge_PRESET_Tunnel_Bottom) {
            lv_bottom = true;
        }
        else {
        }
    }
    autoD645FD05_ae = gv_numberOfChargers;
    lv_i = 1;
    for ( ; ( (autoD645FD05_ai >= 0 && lv_i <= autoD645FD05_ae) || (autoD645FD05_ai < 0 && lv_i >= autoD645FD05_ae) ) ; lv_i += autoD645FD05_ai ) {
        auto023C3302_val = gv_chargers[lv_i].lv_tunnel;
        if (auto023C3302_val == ge_PRESET_Tunnel_Top) {
            if ((lv_top == true)) {
                libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_chargers[lv_i].lv_position, 1.0), "TarsonisCharger", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
                gv_chargers[lv_i].lv_state = ge_PRESET_ChargeState_Active;
            }
            else {
                libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_chargers[lv_i].lv_position, 1.0), "TarsonisCharger", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
                gv_chargers[lv_i].lv_state = ge_PRESET_ChargeState_Inactive;
            }
        }
        else if (auto023C3302_val == ge_PRESET_Tunnel_Middle) {
            if ((lv_middle == true)) {
                libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_chargers[lv_i].lv_position, 1.0), "TarsonisCharger", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
                gv_chargers[lv_i].lv_state = ge_PRESET_ChargeState_Active;
            }
            else {
                libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_chargers[lv_i].lv_position, 1.0), "TarsonisCharger", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
                gv_chargers[lv_i].lv_state = ge_PRESET_ChargeState_Inactive;
            }
        }
        else if (auto023C3302_val == ge_PRESET_Tunnel_Bottom) {
            if ((lv_bottom == true)) {
                libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_chargers[lv_i].lv_position, 1.0), "TarsonisCharger", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
                gv_chargers[lv_i].lv_state = ge_PRESET_ChargeState_Active;
            }
            else {
                libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_chargers[lv_i].lv_position, 1.0), "TarsonisCharger", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
                gv_chargers[lv_i].lv_state = ge_PRESET_ChargeState_Inactive;
            }
        }
        else {
        }
    }
    if ((lv_top == true)) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(345), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    }

    if ((lv_middle == true)) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(486), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    }

    if ((lv_bottom == true)) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(487), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    }

    Wait(3.333, c_timeGame);
    if ((lv_top == true)) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(345), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Unpowered", c_animFlagPlayForever, c_animTimeDefault);
    }

    if ((lv_middle == true)) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(486), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Unpowered", c_animFlagPlayForever, c_animTimeDefault);
    }

    if ((lv_bottom == true)) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(487), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Unpowered", c_animFlagPlayForever, c_animTimeDefault);
    }

    Wait(20.0, c_timeGame);
    if ((lv_top == true)) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(345), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Work End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    }

    if ((lv_middle == true)) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(486), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Work End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    }

    if ((lv_bottom == true)) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(487), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand End Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    }

    Wait(3.333, c_timeGame);
    if ((lv_top == true)) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(345), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    }

    if ((lv_middle == true)) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(486), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    }

    if ((lv_bottom == true)) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(487), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainSpawnAnimations_Init () {
    gt_TrainSpawnAnimations = TriggerCreate("gt_TrainSpawnAnimations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Despawn Animations Top
//--------------------------------------------------------------------------------------------------
bool gt_TrainDespawnAnimationsTop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "TarsonisEngine") || (UnitGetType(EventUnit()) == "TarsonisEngineFast")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(491), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.333, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(491), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Unpowered", c_animFlagPlayForever, c_animTimeDefault);
    Wait(20.0, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(491), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Work End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.333, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(491), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainDespawnAnimationsTop_Init () {
    gt_TrainDespawnAnimationsTop = TriggerCreate("gt_TrainDespawnAnimationsTop_Func");
    TriggerAddEventUnitRegion(gt_TrainDespawnAnimationsTop, null, RegionCircle(PointFromId(491), 16.0), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Despawn Animations Mid
//--------------------------------------------------------------------------------------------------
bool gt_TrainDespawnAnimationsMid_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "TarsonisEngine") || (UnitGetType(EventUnit()) == "TarsonisEngineFast")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(502), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.333, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(502), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Unpowered", c_animFlagPlayForever, c_animTimeDefault);
    Wait(20.0, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(502), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Work End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.333, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(502), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainDespawnAnimationsMid_Init () {
    gt_TrainDespawnAnimationsMid = TriggerCreate("gt_TrainDespawnAnimationsMid_Func");
    TriggerAddEventUnitRegion(gt_TrainDespawnAnimationsMid, null, RegionCircle(PointFromId(502), 16.0), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Despawn Animations Bottom
//--------------------------------------------------------------------------------------------------
bool gt_TrainDespawnAnimationsBottom_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "TarsonisEngine") || (UnitGetType(EventUnit()) == "TarsonisEngineFast")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(297), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.333, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(297), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Unpowered", c_animFlagPlayForever, c_animTimeDefault);
    Wait(20.0, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(297), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Work End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.333, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(297), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainDespawnAnimationsBottom_Init () {
    gt_TrainDespawnAnimationsBottom = TriggerCreate("gt_TrainDespawnAnimationsBottom_Func");
    TriggerAddEventUnitRegion(gt_TrainDespawnAnimationsBottom, null, RegionCircle(PointFromId(297), 16.0), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Pallet Pickups
//--------------------------------------------------------------------------------------------------
bool gt_ResourcePalletPickups_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitTargetUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "PalletMinerals")) {
        libCamp_gf_DestroyCacheAndGivePlayerResources(EventUnit(), c_playerPropMinerals, 100, gv_pLAYER_01_USER);
    }

    if ((UnitGetType(EventUnit()) == "PalletGas")) {
        libCamp_gf_DestroyCacheAndGivePlayerResources(EventUnit(), c_playerPropVespene, 100, gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourcePalletPickups_Init () {
    gt_ResourcePalletPickups = TriggerCreate("gt_ResourcePalletPickups_Func");
    TriggerAddEventUnitAbility(gt_ResourcePalletPickups, null, AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Diamondback Rescue
//--------------------------------------------------------------------------------------------------
bool gt_DiamondbackRescue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5F63F107_g;
    int auto5F63F107_u;
    unit auto5F63F107_var;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(0.5, c_timeAI);
        if ((UnitGroupCount(UnitGroup("Diamondback", gv_pLAYER_05_ABANDONEDVEHICLES, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            return true;
        }

        auto5F63F107_g = UnitGroup("Diamondback", gv_pLAYER_05_ABANDONEDVEHICLES, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto5F63F107_u = UnitGroupCount(auto5F63F107_g, c_unitCountAll);
        for (;; auto5F63F107_u -= 1) {
            auto5F63F107_var = UnitGroupUnitFromEnd(auto5F63F107_g, auto5F63F107_u);
            if (auto5F63F107_var == null) { break; }
            if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(auto5F63F107_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                if ((UnitGetCustomValue(auto5F63F107_var, 0) < 1.0)) {
                    UnitSetCustomValue(auto5F63F107_var, 0, 2.0);
                    gf_RescueDiamondback(auto5F63F107_var);
                }

            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DiamondbackRescue_Init () {
    gt_DiamondbackRescue = TriggerCreate("gt_DiamondbackRescue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Diamondback Produced
//--------------------------------------------------------------------------------------------------
bool gt_DiamondbackProduced_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "Diamondback"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_diamondbacksUsed += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DiamondbackProduced_Init () {
    gt_DiamondbackProduced = TriggerCreate("gt_DiamondbackProduced_Func");
    TriggerAddEventUnitTrainProgress(gt_DiamondbackProduced, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Bottom Lane
//--------------------------------------------------------------------------------------------------
bool gt_RevealBottomLane_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_currentPingPoint;

    // Automatic Variable Declarations
    int auto65AE96E0_ae;
    const int auto65AE96E0_ai = 1;
    int autoF8BC703D_ae;
    const int autoF8BC703D_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentPingPoint = 0;
    auto65AE96E0_ae = gv_numberOfTrainPathPoints;
    lv_i = gv_bottomStart;
    for ( ; ( (auto65AE96E0_ai >= 0 && lv_i <= auto65AE96E0_ae) || (auto65AE96E0_ai < 0 && lv_i >= auto65AE96E0_ae) ) ; lv_i += auto65AE96E0_ai ) {
        if ((DistanceBetweenPoints(gv_trainPath[lv_currentPingPoint], gv_trainPath[lv_i]) > 4.0)) {
            lv_currentPingPoint = lv_i;
            VisExploreArea(gv_pLAYER_01_USER, RegionCircle(gv_trainPath[lv_currentPingPoint], 12.0), true, false);
            PingCreate(PlayerGroupAll(), "PingArrow", gv_trainPath[lv_currentPingPoint], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0);
            PingSetScale(PingLastCreated(), 0.65);
            Wait(0.1, c_timeReal);
        }

    }
    Wait(5.0, c_timeReal);
    lv_currentPingPoint = 0;
    autoF8BC703D_ae = gv_numberOfTrainPathPoints;
    lv_i = gv_bottomStart;
    for ( ; ( (autoF8BC703D_ai >= 0 && lv_i <= autoF8BC703D_ae) || (autoF8BC703D_ai < 0 && lv_i >= autoF8BC703D_ae) ) ; lv_i += autoF8BC703D_ai ) {
        if ((DistanceBetweenPoints(gv_trainPath[lv_currentPingPoint], gv_trainPath[lv_i]) > 4.0)) {
            lv_currentPingPoint = lv_i;
            VisExploreArea(gv_pLAYER_01_USER, RegionCircle(gv_trainPath[lv_currentPingPoint], 12.0), true, false);
            PingCreate(PlayerGroupAll(), "PingArrow", gv_trainPath[lv_currentPingPoint], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0);
            PingSetScale(PingLastCreated(), 0.65);
            Wait(0.1, c_timeReal);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealBottomLane_Init () {
    gt_RevealBottomLane = TriggerCreate("gt_RevealBottomLane_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Middle Lane
//--------------------------------------------------------------------------------------------------
bool gt_RevealMiddleLane_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_currentPingPoint;

    // Automatic Variable Declarations
    int auto76C315BA_ae;
    const int auto76C315BA_ai = 1;
    int auto550579DF_ae;
    const int auto550579DF_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentPingPoint = 0;
    auto76C315BA_ae = (gv_bottomStart - 1);
    lv_i = gv_midStart;
    for ( ; ( (auto76C315BA_ai >= 0 && lv_i <= auto76C315BA_ae) || (auto76C315BA_ai < 0 && lv_i >= auto76C315BA_ae) ) ; lv_i += auto76C315BA_ai ) {
        if ((DistanceBetweenPoints(gv_trainPath[lv_currentPingPoint], gv_trainPath[lv_i]) > 4.0)) {
            lv_currentPingPoint = lv_i;
            VisExploreArea(gv_pLAYER_01_USER, RegionCircle(gv_trainPath[lv_currentPingPoint], 12.0), true, false);
            PingCreate(PlayerGroupAll(), "PingArrow", gv_trainPath[lv_currentPingPoint], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0);
            PingSetScale(PingLastCreated(), 0.65);
            Wait(0.1, c_timeReal);
        }

    }
    Wait(5.0, c_timeReal);
    lv_currentPingPoint = 0;
    auto550579DF_ae = (gv_bottomStart - 1);
    lv_i = gv_midStart;
    for ( ; ( (auto550579DF_ai >= 0 && lv_i <= auto550579DF_ae) || (auto550579DF_ai < 0 && lv_i >= auto550579DF_ae) ) ; lv_i += auto550579DF_ai ) {
        if ((DistanceBetweenPoints(gv_trainPath[lv_currentPingPoint], gv_trainPath[lv_i]) > 4.0)) {
            lv_currentPingPoint = lv_i;
            PingCreate(PlayerGroupAll(), "PingArrow", gv_trainPath[lv_currentPingPoint], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0);
            PingSetScale(PingLastCreated(), 0.65);
            Wait(0.1, c_timeReal);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealMiddleLane_Init () {
    gt_RevealMiddleLane = TriggerCreate("gt_RevealMiddleLane_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Top Lane
//--------------------------------------------------------------------------------------------------
bool gt_RevealTopLane_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_currentPingPoint;

    // Automatic Variable Declarations
    int auto05D816F8_ae;
    const int auto05D816F8_ai = 1;
    int auto22A423B1_ae;
    const int auto22A423B1_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentPingPoint = 0;
    auto05D816F8_ae = (gv_midStart - 1);
    lv_i = 1;
    for ( ; ( (auto05D816F8_ai >= 0 && lv_i <= auto05D816F8_ae) || (auto05D816F8_ai < 0 && lv_i >= auto05D816F8_ae) ) ; lv_i += auto05D816F8_ai ) {
        if ((DistanceBetweenPoints(gv_trainPath[lv_currentPingPoint], gv_trainPath[lv_i]) > 4.0)) {
            lv_currentPingPoint = lv_i;
            VisExploreArea(gv_pLAYER_01_USER, RegionCircle(gv_trainPath[lv_currentPingPoint], 12.0), true, false);
            PingCreate(PlayerGroupAll(), "PingArrow", gv_trainPath[lv_currentPingPoint], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0);
            PingSetScale(PingLastCreated(), 0.65);
            Wait(0.1, c_timeReal);
        }

    }
    Wait(5.0, c_timeReal);
    lv_currentPingPoint = 0;
    auto22A423B1_ae = (gv_midStart - 1);
    lv_i = 1;
    for ( ; ( (auto22A423B1_ai >= 0 && lv_i <= auto22A423B1_ae) || (auto22A423B1_ai < 0 && lv_i >= auto22A423B1_ae) ) ; lv_i += auto22A423B1_ai ) {
        if ((DistanceBetweenPoints(gv_trainPath[lv_currentPingPoint], gv_trainPath[lv_i]) > 4.0)) {
            lv_currentPingPoint = lv_i;
            PingCreate(PlayerGroupAll(), "PingArrow", gv_trainPath[lv_currentPingPoint], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0);
            PingSetScale(PingLastCreated(), 0.65);
            Wait(0.1, c_timeReal);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealTopLane_Init () {
    gt_RevealTopLane = TriggerCreate("gt_RevealTopLane_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Spawn Q
//--------------------------------------------------------------------------------------------------
bool gt_TrainSpawnQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int[16] lv_trainsThatAreSpawning;
    int lv_numberOfTrainsThatAreSpawning;
    bool lv_top;
    bool lv_middle;
    bool lv_bottom;

    // Automatic Variable Declarations
    int autoB0156E47_ae;
    const int autoB0156E47_ai = 1;
    int auto919CD06B_ae;
    const int auto919CD06B_ai = 1;
    int autoE590AC04_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    SoundPlay(SoundLink("UI_TerranPing", 0), PlayerGroupAll(), 100.0, 0.0);
    autoB0156E47_ae = gv_numberOfTrains;
    lv_i = 1;
    for ( ; ( (autoB0156E47_ai >= 0 && lv_i <= autoB0156E47_ae) || (autoB0156E47_ai < 0 && lv_i >= autoB0156E47_ae) ) ; lv_i += autoB0156E47_ai ) {
        if ((gv_trainList[lv_i].lv_spawnWave == gv_currentWave)) {
            lv_numberOfTrainsThatAreSpawning += 1;
            lv_trainsThatAreSpawning[lv_numberOfTrainsThatAreSpawning] = lv_i;
        }

    }
    auto919CD06B_ae = lv_numberOfTrainsThatAreSpawning;
    lv_i = 1;
    for ( ; ( (auto919CD06B_ai >= 0 && lv_i <= auto919CD06B_ae) || (auto919CD06B_ai < 0 && lv_i >= auto919CD06B_ae) ) ; lv_i += auto919CD06B_ai ) {
        autoE590AC04_val = gv_trainList[lv_trainsThatAreSpawning[lv_i]].lv_tunnel;
        if (autoE590AC04_val == ge_PRESET_Tunnel_Top) {
            lv_top = true;
            MinimapPing(PlayerGroupAll(), PointFromId(345), 5.0, Color(100.00, 0.00, 0.00));
            UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringToText(""), null, PointFromId(345));
            TriggerExecute(gt_RevealTopLane, true, false);
        }
        else if (autoE590AC04_val == ge_PRESET_Tunnel_Middle) {
            lv_middle = true;
            MinimapPing(PlayerGroupAll(), PointFromId(486), 5.0, Color(100.00, 0.00, 0.00));
            UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringToText(""), null, PointFromId(486));
            TriggerExecute(gt_RevealMiddleLane, true, false);
        }
        else if (autoE590AC04_val == ge_PRESET_Tunnel_Bottom) {
            lv_bottom = true;
            MinimapPing(PlayerGroupAll(), PointFromId(487), 5.0, Color(100.00, 0.00, 0.00));
            UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringToText(""), null, PointFromId(487));
            TriggerExecute(gt_RevealBottomLane, true, false);
        }
        else {
        }
    }
    Wait(1.0, c_timeReal);
    if ((lv_top == true) && (lv_middle == true) && (lv_bottom == true)) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner01MusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        // Transmission - SoundLink("THorner01Adjutant00041", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner01Adjutant00041", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        return true;
    }

    if ((lv_top == true) && (lv_middle == true)) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner01MusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        // Transmission - SoundLink("THorner01Adjutant00038", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner01Adjutant00038", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        return true;
    }

    if ((lv_middle == true) && (lv_bottom == true)) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner01MusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        // Transmission - SoundLink("THorner01Adjutant00039", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner01Adjutant00039", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        return true;
    }

    if ((lv_top == true) && (lv_bottom == true)) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner01MusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        // Transmission - SoundLink("THorner01Adjutant00040", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner01Adjutant00040", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        return true;
    }

    if ((lv_top == true)) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner01MusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        // Transmission - SoundLink("THorner01Adjutant00017", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner01Adjutant00017", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        TriggerExecute(gt_FireontheMoveTipQ, true, false);
        return true;
    }

    if ((lv_middle == true)) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner01MusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        // Transmission - SoundLink("THorner01Adjutant00009", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner01Adjutant00009", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        return true;
    }

    if ((lv_bottom == true)) {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner01MusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        // Transmission - SoundLink("THorner01Adjutant00018", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner01Adjutant00018", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        return true;
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainSpawnQ_Init () {
    gt_TrainSpawnQ = TriggerCreate("gt_TrainSpawnQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Train Mechanic Transmissions
//--------------------------------------------------------------------------------------------------
bool gt_NewTrainMechanicTransmissions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_trainsDestroyed == 1)) {
        TriggerExecute(gt_LightEscortsQ, true, false);
    }

    if ((gv_trainsDestroyed == 5)) {
        TriggerExecute(gt_TurbochargedQ, true, false);
    }

    if ((gv_trainsDestroyed == 7)) {
        TriggerExecute(gt_HeavyEscortsQ, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewTrainMechanicTransmissions_Init () {
    gt_NewTrainMechanicTransmissions = TriggerCreate("gt_NewTrainMechanicTransmissions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_DominionAttackQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(gv_trainWaveWait, c_timeGame);
    Wait((gv_trainWaveWait - 30.0), c_timeAI);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner01Horner00011", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner01Horner00011", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionAttackQ_Init () {
    gt_DominionAttackQ = TriggerCreate("gt_DominionAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stack Killer Q
//--------------------------------------------------------------------------------------------------
bool gt_StackKillerQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!(((UnitGroupCount(gv_patrolTop, c_unitCountAlive) >= 1) || (UnitGroupCount(gv_patrolBottom, c_unitCountAlive) >= 1) || (UnitGroupCount(gv_patrolSingle, c_unitCountAlive) >= 1)))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner01Horner00019", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner01Horner00019", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerExecute(gt_PatrolPings, true, false);
    SoundPlay(SoundLink("UI_TerranReminderPing", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeReal);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner01Horner00020", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner01Horner00020", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StackKillerQ_Init () {
    gt_StackKillerQ = TriggerCreate("gt_StackKillerQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Light Escorts Q
//--------------------------------------------------------------------------------------------------
bool gt_LightEscortsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner01Tychus00006", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner01Tychus00006", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LightEscortsQ_Init () {
    gt_LightEscortsQ = TriggerCreate("gt_LightEscortsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turbocharged Q
//--------------------------------------------------------------------------------------------------
bool gt_TurbochargedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner01Swann00007", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner01Swann00007", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurbochargedQ_Init () {
    gt_TurbochargedQ = TriggerCreate("gt_TurbochargedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Heavy Escorts Q
//--------------------------------------------------------------------------------------------------
bool gt_HeavyEscortsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner01Tychus00013", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner01Tychus00013", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeavyEscortsQ_Init () {
    gt_HeavyEscortsQ = TriggerCreate("gt_HeavyEscortsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Bunker Q
//--------------------------------------------------------------------------------------------------
bool gt_DominionBunkerQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!(((UnitGroupCount(UnitGroup("Bunker", gv_pLAYER_02_DOMINION, RegionFromId(6), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("Bunker", gv_pLAYER_03_DOMINION, RegionFromId(1), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("Bunker", gv_pLAYER_04_DOMINION, RegionFromId(1), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner01Horner00022", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner01Horner00022", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionBunkerQ_Init () {
    gt_DominionBunkerQ = TriggerCreate("gt_DominionBunkerQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Diamondbacks Q
//--------------------------------------------------------------------------------------------------
bool gt_DiamondbacksQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    gf_RevealDiamondback(UnitFromId(668));
    gf_RevealDiamondback(UnitFromId(667));
    gf_RevealDiamondback(UnitFromId(332));
    if ((gv_diamondbacksRevealed == false)) {
        return true;
    }

    SoundPlay(SoundLink("UI_TerranPing", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeReal);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner01Horner00001", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner01Horner00001", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("THorner01Swann00002", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner01Swann00002", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("THorner01Swann00005", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner01Swann00005", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("THorner01Horner00003", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner01Horner00003", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DiamondbacksQ_Init () {
    gt_DiamondbacksQ = TriggerCreate("gt_DiamondbacksQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill First Train Q
//--------------------------------------------------------------------------------------------------
bool gt_KillFirstTrainQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(6.0, c_timeReal);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner01Horner00008", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner01Horner00008", -1), c_transmissionDurationAdd, 0.0, true);
    if (((PlayerDifficulty(gv_pLAYER_01_USER) == 3) || (PlayerDifficulty(gv_pLAYER_01_USER) == 4))) {
        // Transmission - SoundLink("THorner01Horner00021", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner01Horner00021", 0), c_transmissionDurationAdd, 0.0, true);
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillFirstTrainQ_Init () {
    gt_KillFirstTrainQ = TriggerCreate("gt_KillFirstTrainQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train 1 Missed Q
//--------------------------------------------------------------------------------------------------
bool gt_Train1MissedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner01Horner00023", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner01Horner00023", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Train1MissedQ_Init () {
    gt_Train1MissedQ = TriggerCreate("gt_Train1MissedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train 2 Missed Q
//--------------------------------------------------------------------------------------------------
bool gt_Train2MissedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner01Horner00024", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner01Horner00024", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Train2MissedQ_Init () {
    gt_Train2MissedQ = TriggerCreate("gt_Train2MissedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Diamondbacks Rescued Q
//--------------------------------------------------------------------------------------------------
bool gt_DiamondbacksRescuedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner01Horner00025", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner01Horner00025", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DiamondbacksRescuedQ_Init () {
    gt_DiamondbacksRescuedQ = TriggerCreate("gt_DiamondbacksRescuedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Campaign Tips Q
//--------------------------------------------------------------------------------------------------
bool gt_CampaignTipsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateStorymodeTips();
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CampaignTipsQ_Init () {
    gt_CampaignTipsQ = TriggerCreate("gt_CampaignTipsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defiler Skeletons Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_DefilerSkeletonsTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_CreateTipFromConversationState("StoryTips|Horner01_DefilerBones", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefilerSkeletonsTipQ_Init () {
    gt_DefilerSkeletonsTipQ = TriggerCreate("gt_DefilerSkeletonsTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fire on the Move Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_FireontheMoveTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_CreateTipFromConversationState("StoryTips|Horner01_FireOnMove", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FireontheMoveTipQ_Init () {
    gt_FireontheMoveTipQ = TriggerCreate("gt_FireontheMoveTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Diamondback Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_DiamondbackTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeGame);
        if ((UnitGroupCount(UnitGroup("Diamondback", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            Wait(2.0, c_timeReal);
            TriggerQueueEnter();
            if ((gv_gameOver == true)) {
                return true;
            }

            libCamp_gf_CreateTipFromConversationState("StoryTips|Horner01_Diamonback", libNtve_ge_TipType_NewUnit, PlayerGroupAll());
            Wait(libCamp_gv_campaignHintDelay, c_timeReal);
            return true;
            TriggerQueueExit();
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DiamondbackTipQ_Init () {
    gt_DiamondbackTipQ = TriggerCreate("gt_DiamondbackTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AICampaignStart(gv_pLAYER_02_DOMINION);
    AICampaignStart(gv_pLAYER_03_DOMINION);
    AICampaignStart(gv_pLAYER_04_DOMINION);
    AINearestTownBullyRebuild(gv_pLAYER_03_DOMINION, true);
    TriggerExecute(gt_DominionAttackWaves, true, false);
    TriggerExecute(gt_DominionAttackWavesFromDom2, true, false);
    TriggerExecute(gt_DominionAttackWavesFromDom3, true, false);
    while (!((gv_trainsDestroyed >= 3))) {
        Wait(1.0, c_timeAI);
    }
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION, RegionFromId(6), true);
    AIToggleBulliesInRegion(gv_pLAYER_03_DOMINION, RegionFromId(1), true);
    AIToggleBulliesInRegion(gv_pLAYER_04_DOMINION, RegionFromId(1), true);
    TriggerExecute(gt_DominionBunkerQ, true, false);
    while (!((gv_trainsDestroyed >= 5))) {
        Wait(1.0, c_timeAI);
    }
    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        TriggerExecute(gt_PatrolWavesTop, true, false);
        TriggerExecute(gt_PatrolWavesBottom, true, false);
    }
    else {
        TriggerExecute(gt_PatrolWavesSingle, true, false);
    }
    Wait(20.0, c_timeAI);
    TriggerExecute(gt_StackKillerQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_DominionAttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait((gv_trainWaveWait - libNtve_gf_DifficultyValueFixed(40.0, 40.0, 40.0, 40.0)), c_timeAI);
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION, PlayerStartLocation(gv_pLAYER_02_DOMINION));
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(1463), false);
    AIAttackWaveAddUnits4(3, 3, 0, 0, "Marine");
    AIAttackWaveAddUnits4(2, 2, 3, 3, "Firebat");
    AIAttackWaveAddUnits4(0, 0, 1, 2, "Medivac");
    AIAttackWaveAddUnits4(0, 0, 1, 2, "Goliath");
    AIAttackWaveSend(gv_pLAYER_02_DOMINION, (FixedToInt(gv_trainWaveWait) * 2), false);
    TriggerExecute(gt_DominionAttackQ, true, false);
    gf_ResearchForAllDominion(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "TerranInfantryWeaponsLevel2");
    Wait(gv_trainWaveWait, c_timeAI);
    gf_ResearchForAllDominion(libNtve_gf_DifficultyValueInt(0, 0, 1, 0), "TerranInfantryWeaponsLevel1");
    gf_ResearchForAllDominion(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "TerranVehicleWeaponsLevel2");
    Wait(gv_trainWaveWait, c_timeAI);
    gf_ResearchForAllDominion(libNtve_gf_DifficultyValueInt(0, 0, 1, 0), "TerranVehicleWeaponsLevel1");
    gf_ResearchForAllDominion(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "TerranShipWeaponsLevel2");
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION, PlayerStartLocation(gv_pLAYER_02_DOMINION));
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(1451), false);
    AIAttackWaveAddUnits4(2, 3, 3, 4, "Firebat");
    AIAttackWaveAddUnits4(2, 2, 1, 2, "Goliath");
    AIAttackWaveAddUnits4(0, 0, 1, 1, "SiegeTank");
    AIAttackWaveAddUnits4(0, 0, 1, 1, "Raven");
    AIAttackWaveSend(gv_pLAYER_02_DOMINION, (FixedToInt(gv_trainWaveWait) * 2), false);
    Wait(gv_trainWaveWait, c_timeAI);
    gf_ResearchForAllDominion(libNtve_gf_DifficultyValueInt(0, 0, 1, 0), "TerranShipWeaponsLevel1");
    gf_ResearchForAllDominion(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "TerranInfantryArmorsLevel2");
    Wait(gv_trainWaveWait, c_timeAI);
    gf_ResearchForAllDominion(libNtve_gf_DifficultyValueInt(0, 0, 1, 0), "TerranInfantryArmorsLevel2");
    gf_ResearchForAllDominion(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "TerranVehicleArmorsLevel2");
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION, PlayerStartLocation(gv_pLAYER_02_DOMINION));
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(1463), false);
    AIAttackWaveAddUnits4(2, 2, 3, 3, "Goliath");
    AIAttackWaveAddUnits4(1, 1, 1, 2, "SiegeTank");
    AIAttackWaveAddUnits4(0, 0, 1, 1, "Banshee");
    AIAttackWaveSend(gv_pLAYER_02_DOMINION, (FixedToInt(gv_trainWaveWait) * 2), false);
    Wait(gv_trainWaveWait, c_timeAI);
    gf_ResearchForAllDominion(libNtve_gf_DifficultyValueInt(0, 0, 1, 0), "TerranVehicleArmorsLevel2");
    gf_ResearchForAllDominion(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "TerranShipArmorsLevel2");
    Wait(gv_trainWaveWait, c_timeAI);
    gf_ResearchForAllDominion(libNtve_gf_DifficultyValueInt(0, 0, 1, 0), "TerranShipArmorsLevel2");
    gf_ResearchForAllDominion(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "TerranInfantryWeaponsLevel3");
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION, PlayerStartLocation(gv_pLAYER_02_DOMINION));
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(1463), false);
    AIAttackWaveAddUnits4(4, 4, 0, 0, "Marine");
    AIAttackWaveAddUnits4(2, 2, 3, 4, "Firebat");
    AIAttackWaveAddUnits4(1, 1, 1, 2, "Banshee");
    AIAttackWaveAddUnits4(0, 0, 2, 2, "Goliath");
    AIAttackWaveSend(gv_pLAYER_02_DOMINION, (FixedToInt(gv_trainWaveWait) * 2), false);
    Wait(gv_trainWaveWait, c_timeAI);
    gf_ResearchForAllDominion(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "TerranVehicleWeaponsLevel3");
    Wait(gv_trainWaveWait, c_timeAI);
    gf_ResearchForAllDominion(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "TerranShipWeaponsLevel3");
    while (true) {
        AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION, PlayerStartLocation(gv_pLAYER_02_DOMINION));
        AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION, PlayerGroupSingle(gv_pLAYER_01_USER));
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(1451), false);
        AIAttackWaveAddUnits4(2, 2, 2, 3, "Goliath");
        AIAttackWaveAddUnits4(2, 2, 2, 2, "SiegeTank");
        AIAttackWaveAddUnits4(0, 0, 1, 1, "Raven");
        AIAttackWaveSend(gv_pLAYER_02_DOMINION, (FixedToInt(gv_trainWaveWait) * 2), true);
        AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION, PlayerStartLocation(gv_pLAYER_02_DOMINION));
        AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION, PlayerGroupSingle(gv_pLAYER_01_USER));
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(1463), false);
        AIAttackWaveAddUnits4(3, 3, 3, 4, "Firebat");
        AIAttackWaveAddUnits4(2, 2, 2, 3, "Banshee");
        AIAttackWaveAddUnits4(0, 0, 0, 1, "SiegeTank");
        AIAttackWaveSend(gv_pLAYER_02_DOMINION, (FixedToInt(gv_trainWaveWait) * 2), true);
        AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION, PlayerStartLocation(gv_pLAYER_02_DOMINION));
        AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION, PlayerGroupSingle(gv_pLAYER_01_USER));
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(1463), false);
        AIAttackWaveAddUnits4(2, 2, 3, 4, "Firebat");
        AIAttackWaveAddUnits4(2, 2, 0, 0, "Marauder");
        AIAttackWaveAddUnits4(1, 1, 2, 2, "SiegeTank");
        AIAttackWaveAddUnits4(0, 0, 2, 3, "Goliath");
        AIAttackWaveSend(gv_pLAYER_02_DOMINION, (FixedToInt(gv_trainWaveWait) * 2), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionAttackWaves_Init () {
    gt_DominionAttackWaves = TriggerCreate("gt_DominionAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Attack Waves From Dom 2
//--------------------------------------------------------------------------------------------------
bool gt_DominionAttackWavesFromDom2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_wavePeriod;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait((gv_trainWaveWait - 40.0), c_timeAI);
    lv_wavePeriod = (gv_trainWaveWait * 2.0);
    Wait(MaxF((lv_wavePeriod - 150.0), 0.0), c_timeAI);
    while (true) {
        if ((gv_trainsDestroyed >= 6) && (gv_trainsDestroyed < 7)) {
            AIAttackWaveSetTargetPlayer(gv_pLAYER_03_DOMINION, PlayerGroupSingle(gv_pLAYER_01_USER));
            AIAttackWaveSetGatherPoint(gv_pLAYER_03_DOMINION, PlayerStartLocation(gv_pLAYER_03_DOMINION));
            AIAttackWaveAddWaypoint(gv_pLAYER_03_DOMINION, PointFromId(1459), false);
            AIAttackWaveAddUnits4(0, 0, 6, 8, "Marine");
            AIAttackWaveAddUnits4(0, 0, 1, 2, "Marauder");
            AIAttackWaveAddUnits4(0, 0, 1, 2, "Medic");
            AIAttackWaveSend(gv_pLAYER_03_DOMINION, 150, false);
        }

        if ((gv_trainsDestroyed >= 7)) {
            AIAttackWaveSetTargetPlayer(gv_pLAYER_03_DOMINION, PlayerGroupSingle(gv_pLAYER_01_USER));
            AIAttackWaveSetGatherPoint(gv_pLAYER_03_DOMINION, PlayerStartLocation(gv_pLAYER_03_DOMINION));
            AIAttackWaveAddWaypoint(gv_pLAYER_03_DOMINION, PointFromId(1459), false);
            AIAttackWaveAddUnits4(0, 0, 8, 8, "Marine");
            AIAttackWaveAddUnits4(0, 0, 2, 3, "Marauder");
            AIAttackWaveAddUnits4(0, 0, 1, 3, "Medic");
            AIAttackWaveSend(gv_pLAYER_03_DOMINION, 150, false);
        }

        Wait(lv_wavePeriod, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionAttackWavesFromDom2_Init () {
    gt_DominionAttackWavesFromDom2 = TriggerCreate("gt_DominionAttackWavesFromDom2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Attack Waves From Dom 3
//--------------------------------------------------------------------------------------------------
bool gt_DominionAttackWavesFromDom3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_wavePeriod;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait((gv_trainWaveWait - 20.0), c_timeAI);
    lv_wavePeriod = (gv_trainWaveWait * 2.0);
    Wait(MaxF((lv_wavePeriod - 150.0), 0.0), c_timeAI);
    while (true) {
        if ((gv_trainsDestroyed >= 6) && (gv_trainsDestroyed < 7)) {
            AIAttackWaveSetTargetPlayer(gv_pLAYER_04_DOMINION, PlayerGroupSingle(gv_pLAYER_01_USER));
            AIAttackWaveSetGatherPoint(gv_pLAYER_04_DOMINION, PlayerStartLocation(gv_pLAYER_04_DOMINION));
            AIAttackWaveAddWaypoint(gv_pLAYER_04_DOMINION, PointFromId(1456), false);
            AIAttackWaveAddUnits4(0, 0, 6, 8, "Marine");
            AIAttackWaveAddUnits4(0, 0, 1, 2, "Marauder");
            AIAttackWaveAddUnits4(0, 0, 1, 2, "Medic");
            AIAttackWaveSend(gv_pLAYER_04_DOMINION, 150, false);
        }

        if ((gv_trainsDestroyed >= 7)) {
            AIAttackWaveSetTargetPlayer(gv_pLAYER_04_DOMINION, PlayerGroupSingle(gv_pLAYER_01_USER));
            AIAttackWaveSetGatherPoint(gv_pLAYER_04_DOMINION, PlayerStartLocation(gv_pLAYER_04_DOMINION));
            AIAttackWaveAddWaypoint(gv_pLAYER_04_DOMINION, PointFromId(1459), false);
            AIAttackWaveAddUnits4(0, 0, 8, 8, "Marine");
            AIAttackWaveAddUnits4(0, 0, 2, 3, "Marauder");
            AIAttackWaveAddUnits4(0, 0, 1, 3, "Medic");
            AIAttackWaveSend(gv_pLAYER_04_DOMINION, 150, false);
        }

        Wait(lv_wavePeriod, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionAttackWavesFromDom3_Init () {
    gt_DominionAttackWavesFromDom3 = TriggerCreate("gt_DominionAttackWavesFromDom3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Patrol Waves Top
//--------------------------------------------------------------------------------------------------
bool gt_PatrolWavesTop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoAC273607_n;
    int autoAC273607_i;
    int auto5C830FBA_n;
    int auto5C830FBA_i;
    const int auto5356019F_n = 3;
    int auto5356019F_i;
    unitgroup autoAB0F86D0_g;
    int autoAB0F86D0_u;
    unit autoAB0F86D0_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoAC273607_n = gv_stackKillerNumRespawn;
    for (autoAC273607_i = 1; autoAC273607_i <= autoAC273607_n; autoAC273607_i += 1) {
        Wait(30.0, c_timeAI);
        while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(PointFromId(532), 12.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            Wait(1.0, c_timeAI);
        }
        auto5C830FBA_n = gv_stackKillerSize;
        for (auto5C830FBA_i = 1; auto5C830FBA_i <= auto5C830FBA_n; auto5C830FBA_i += 1) {
            if ((gv_gameOver == true)) {
                return true;
            }

            UnitCreate(1, "DominionKillTeam", 0, gv_pLAYER_02_DOMINION, PointFromId(532), 90.0);
            UnitGroupAdd(gv_patrolTop, UnitLastCreated());
            AISetUnitScriptControlled(UnitLastCreated(), true);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1788)), c_orderQueueReplace);
            Wait(1.0, c_timeAI);
        }
        for (auto5356019F_i = 1; auto5356019F_i <= auto5356019F_n; auto5356019F_i += 1) {
            if ((gv_gameOver == true)) {
                return true;
            }

            UnitCreate(1, "Medic", 0, gv_pLAYER_02_DOMINION, PointFromId(532), 90.0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
            UnitBehaviorAdd(UnitLastCreated(), "KillSquad", UnitLastCreated(), 1);
            UnitGroupAdd(gv_patrolTop, UnitLastCreated());
            AISetUnitScriptControlled(UnitLastCreated(), true);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1788)), c_orderQueueReplace);
            Wait(1.0, c_timeAI);
        }
        if ((UnitGroupCount(gv_patrolTop, c_unitCountAlive) > 0)) {
            gf_SetStackKillerTargetTop();
            autoAB0F86D0_g = gv_patrolTop;
            autoAB0F86D0_u = UnitGroupCount(autoAB0F86D0_g, c_unitCountAll);
            for (;; autoAB0F86D0_u -= 1) {
                autoAB0F86D0_var = UnitGroupUnitFromEnd(autoAB0F86D0_g, autoAB0F86D0_u);
                if (autoAB0F86D0_var == null) { break; }
                AISetUnitScriptControlled(autoAB0F86D0_var, false);
                AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION, autoAB0F86D0_var);
            }
            AIAttackWaveSend(gv_pLAYER_02_DOMINION, 0, false);
        }

        Wait(2.0, c_timeGame);
        UISetRestartLoadingScreen(ConversationDataStateText("Maps|THorner01", "Loading Screen Restart 2"));
        gv_patrolWaveSpawnedTop = true;
        while (!((libNtve_gf_UnitGroupIsDead(gv_patrolTop) == true))) {
            Wait(1.0, c_timeAI);
        }
        if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_achievementMaraudersKilled == 0)) {
            gv_achievementMaraudersKilled = 1;
            AchievementAward(gv_pLAYER_01_USER, "THorner01_2");
        }

        gv_patrolWaveSpawnedTop = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PatrolWavesTop_Init () {
    gt_PatrolWavesTop = TriggerCreate("gt_PatrolWavesTop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Patrol Waves Bottom
//--------------------------------------------------------------------------------------------------
bool gt_PatrolWavesBottom_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto809F9059_n;
    int auto809F9059_i;
    int auto7C6B58CE_n;
    int auto7C6B58CE_i;
    const int auto28E52C25_n = 3;
    int auto28E52C25_i;
    unitgroup auto4C79756C_g;
    int auto4C79756C_u;
    unit auto4C79756C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto809F9059_n = gv_stackKillerNumRespawn;
    for (auto809F9059_i = 1; auto809F9059_i <= auto809F9059_n; auto809F9059_i += 1) {
        Wait(30.0, c_timeAI);
        while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(PointFromId(1797), 12.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            Wait(1.0, c_timeAI);
        }
        auto7C6B58CE_n = gv_stackKillerSize;
        for (auto7C6B58CE_i = 1; auto7C6B58CE_i <= auto7C6B58CE_n; auto7C6B58CE_i += 1) {
            if ((gv_gameOver == true)) {
                return true;
            }

            UnitCreate(1, "DominionKillTeam", 0, gv_pLAYER_02_DOMINION, PointFromId(1797), 45.0);
            UnitGroupAdd(gv_patrolBottom, UnitLastCreated());
            AISetUnitScriptControlled(UnitLastCreated(), true);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1778)), c_orderQueueReplace);
            Wait(1.0, c_timeAI);
        }
        for (auto28E52C25_i = 1; auto28E52C25_i <= auto28E52C25_n; auto28E52C25_i += 1) {
            if ((gv_gameOver == true)) {
                return true;
            }

            UnitCreate(1, "Medic", 0, gv_pLAYER_02_DOMINION, PointFromId(1797), 45.0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
            UnitBehaviorAdd(UnitLastCreated(), "KillSquad", UnitLastCreated(), 1);
            UnitGroupAdd(gv_patrolBottom, UnitLastCreated());
            AISetUnitScriptControlled(UnitLastCreated(), true);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1778)), c_orderQueueReplace);
            Wait(1.0, c_timeAI);
        }
        if ((UnitGroupCount(gv_patrolBottom, c_unitCountAlive) > 0)) {
            gf_SetStackKillerTargetBottom();
            auto4C79756C_g = gv_patrolBottom;
            auto4C79756C_u = UnitGroupCount(auto4C79756C_g, c_unitCountAll);
            for (;; auto4C79756C_u -= 1) {
                auto4C79756C_var = UnitGroupUnitFromEnd(auto4C79756C_g, auto4C79756C_u);
                if (auto4C79756C_var == null) { break; }
                AISetUnitScriptControlled(auto4C79756C_var, false);
                AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION, auto4C79756C_var);
            }
            AIAttackWaveSend(gv_pLAYER_02_DOMINION, 0, false);
        }

        Wait(2.0, c_timeGame);
        UISetRestartLoadingScreen(ConversationDataStateText("Maps|THorner01", "Loading Screen Restart 2"));
        gv_patrolWaveSpawnedBottom = true;
        while (!((libNtve_gf_UnitGroupIsDead(gv_patrolBottom) == true))) {
            Wait(1.0, c_timeAI);
        }
        if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_achievementMaraudersKilled == 0)) {
            gv_achievementMaraudersKilled = 1;
            AchievementAward(gv_pLAYER_01_USER, "THorner01_2");
        }

        gv_patrolWaveSpawnedBottom = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PatrolWavesBottom_Init () {
    gt_PatrolWavesBottom = TriggerCreate("gt_PatrolWavesBottom_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Patrol Waves Single
//--------------------------------------------------------------------------------------------------
bool gt_PatrolWavesSingle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto77D804F0_n;
    int auto77D804F0_i;
    int auto77F5190A_n;
    int auto77F5190A_i;
    unitgroup auto823F4E57_g;
    int auto823F4E57_u;
    unit auto823F4E57_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto77D804F0_n = gv_stackKillerNumRespawn;
    for (auto77D804F0_i = 1; auto77D804F0_i <= auto77D804F0_n; auto77D804F0_i += 1) {
        Wait(30.0, c_timeAI);
        while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(PointFromId(532), 12.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            Wait(1.0, c_timeAI);
        }
        auto77F5190A_n = gv_stackKillerSize;
        for (auto77F5190A_i = 1; auto77F5190A_i <= auto77F5190A_n; auto77F5190A_i += 1) {
            if ((gv_gameOver == true)) {
                return true;
            }

            UnitCreate(1, "DominionKillTeam", 0, gv_pLAYER_02_DOMINION, PointFromId(532), 45.0);
            UnitGroupAdd(gv_patrolSingle, UnitLastCreated());
            AISetUnitScriptControlled(UnitLastCreated(), true);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1788)), c_orderQueueReplace);
            Wait(1.0, c_timeAI);
        }
        if ((UnitGroupCount(gv_patrolSingle, c_unitCountAlive) > 0)) {
            gf_SetStackKillerTargetSingle();
            auto823F4E57_g = gv_patrolSingle;
            auto823F4E57_u = UnitGroupCount(auto823F4E57_g, c_unitCountAll);
            for (;; auto823F4E57_u -= 1) {
                auto823F4E57_var = UnitGroupUnitFromEnd(auto823F4E57_g, auto823F4E57_u);
                if (auto823F4E57_var == null) { break; }
                AISetUnitScriptControlled(auto823F4E57_var, false);
                AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION, auto823F4E57_var);
            }
            AIAttackWaveSend(gv_pLAYER_02_DOMINION, 0, false);
        }

        Wait(2.0, c_timeGame);
        UISetRestartLoadingScreen(ConversationDataStateText("Maps|THorner01", "Loading Screen Restart 2"));
        gv_patrolWaveSpawnedSingle = true;
        while (!((libNtve_gf_UnitGroupIsDead(gv_patrolSingle) == true))) {
            Wait(1.0, c_timeAI);
        }
        if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_achievementMaraudersKilled == 0)) {
            gv_achievementMaraudersKilled = 1;
            AchievementAward(gv_pLAYER_01_USER, "THorner01_2");
        }

        gv_patrolWaveSpawnedSingle = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PatrolWavesSingle_Init () {
    gt_PatrolWavesSingle = TriggerCreate("gt_PatrolWavesSingle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Patrol Pings
//--------------------------------------------------------------------------------------------------
bool gt_PatrolPings_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_topPing;
    int lv_bottomPing;
    int lv_singlePing;

    // Automatic Variable Declarations
    unitgroup auto306085B8_g;
    int auto306085B8_u;
    unit auto306085B8_var;
    unitgroup auto896DDD79_g;
    int auto896DDD79_u;
    unit auto896DDD79_var;
    unitgroup auto1E33317D_g;
    int auto1E33317D_u;
    unit auto1E33317D_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        PingCreate(PlayerGroupSingle(gv_pLAYER_01_USER), "PingBoss", PointFromId(1788), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
        lv_topPing = PingLastCreated();
        PingCreate(PlayerGroupSingle(gv_pLAYER_01_USER), "PingBoss", PointFromId(1778), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
        lv_bottomPing = PingLastCreated();
        PingSetVisible(lv_topPing, false);
        PingSetVisible(lv_bottomPing, false);
        PingSetScale(lv_topPing, 0.6);
        PingSetScale(lv_bottomPing, 0.6);
        PingSetTooltip(lv_topPing, StringExternal("Param/Value/D4DD9067"));
        PingSetTooltip(lv_bottomPing, StringExternal("Param/Value/F054627D"));
        while (true) {
            if ((gv_gameOver == true)) {
                return true;
            }

            if ((libNtve_gf_UnitGroupIsDead(gv_patrolTop) == true)) {
                PingSetVisible(lv_topPing, false);
            }
            else {
                PingSetPosition(lv_topPing, libNtve_gf_CenterOfUnitGroup(gv_patrolTop));
                PingSetVisible(lv_topPing, true);
                if ((gv_patrolWaveSpawnedTop == true)) {
                    gv_patrolWaveSpawnedTop = false;
                    auto896DDD79_g = gv_patrolTop;
                    auto896DDD79_u = UnitGroupCount(auto896DDD79_g, c_unitCountAll);
                    for (;; auto896DDD79_u -= 1) {
                        auto896DDD79_var = UnitGroupUnitFromEnd(auto896DDD79_g, auto896DDD79_u);
                        if (auto896DDD79_var == null) { break; }
                        libNtve_gf_ShareVisionofUnit(auto896DDD79_var, true, gv_pLAYER_01_USER);
                    }
                }

            }
            if ((libNtve_gf_UnitGroupIsDead(gv_patrolBottom) == true)) {
                PingSetVisible(lv_bottomPing, false);
            }
            else {
                PingSetPosition(lv_bottomPing, libNtve_gf_CenterOfUnitGroup(gv_patrolBottom));
                PingSetVisible(lv_bottomPing, true);
                if ((gv_patrolWaveSpawnedBottom == true)) {
                    gv_patrolWaveSpawnedBottom = false;
                    auto1E33317D_g = gv_patrolBottom;
                    auto1E33317D_u = UnitGroupCount(auto1E33317D_g, c_unitCountAll);
                    for (;; auto1E33317D_u -= 1) {
                        auto1E33317D_var = UnitGroupUnitFromEnd(auto1E33317D_g, auto1E33317D_u);
                        if (auto1E33317D_var == null) { break; }
                        libNtve_gf_ShareVisionofUnit(auto1E33317D_var, true, gv_pLAYER_01_USER);
                    }
                }

            }
            Wait(0.1, c_timeReal);
        }
    }
    else {
        PingCreate(PlayerGroupSingle(gv_pLAYER_01_USER), "PingBoss", PointFromId(1788), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
        lv_singlePing = PingLastCreated();
        PingSetVisible(lv_singlePing, false);
        PingSetScale(lv_singlePing, 0.6);
        PingSetTooltip(lv_singlePing, StringExternal("Param/Value/237010E8"));
        while (true) {
            if ((gv_gameOver == true)) {
                return true;
            }

            if ((libNtve_gf_UnitGroupIsDead(gv_patrolSingle) == true)) {
                PingSetVisible(lv_singlePing, false);
            }
            else {
                PingSetPosition(lv_singlePing, libNtve_gf_CenterOfUnitGroup(gv_patrolSingle));
                PingSetVisible(lv_singlePing, true);
                if ((gv_patrolWaveSpawnedSingle == true)) {
                    gv_patrolWaveSpawnedSingle = false;
                    auto306085B8_g = gv_patrolSingle;
                    auto306085B8_u = UnitGroupCount(auto306085B8_g, c_unitCountAll);
                    for (;; auto306085B8_u -= 1) {
                        auto306085B8_var = UnitGroupUnitFromEnd(auto306085B8_g, auto306085B8_u);
                        if (auto306085B8_var == null) { break; }
                        libNtve_gf_ShareVisionofUnit(auto306085B8_var, true, gv_pLAYER_01_USER);
                    }
                }

            }
            Wait(0.1, c_timeReal);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PatrolPings_Init () {
    gt_PatrolPings = TriggerCreate("gt_PatrolPings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIMinerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIMinerals_Init () {
    gt_AIMinerals = TriggerCreate("gt_AIMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIMinerals, gv_pLAYER_02_DOMINION, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIMinerals, gv_pLAYER_03_DOMINION, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIMinerals, gv_pLAYER_04_DOMINION, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIGas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGas_Init () {
    gt_AIGas = TriggerCreate("gt_AIGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIGas, gv_pLAYER_02_DOMINION, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGas, gv_pLAYER_03_DOMINION, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGas, gv_pLAYER_04_DOMINION, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bunker Death
//--------------------------------------------------------------------------------------------------
bool gt_BunkerDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Bunker"))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION) || (UnitGetOwner(EventUnit()) == gv_pLAYER_03_DOMINION) || (UnitGetOwner(EventUnit()) == gv_pLAYER_04_DOMINION)))) {
            return false;
        }

        if (!(((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(1)) == true) || (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(6)) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AIToggleBulliesInRegion(UnitGetOwner(EventUnit()), RegionCircle(UnitGetPosition(EventUnit()), 8.0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BunkerDeath_Init () {
    gt_BunkerDeath = TriggerCreate("gt_BunkerDeath_Func");
    TriggerAddEventUnitDied(gt_BunkerDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - SCV Trained
//--------------------------------------------------------------------------------------------------
bool gt_AchievementSCVTrained_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_sCVTrained == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "SCV"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_sCVTrained = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementSCVTrained_Init () {
    gt_AchievementSCVTrained = TriggerCreate("gt_AchievementSCVTrained_Func");
    TriggerAddEventUnitTrainProgress(gt_AchievementSCVTrained, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory - All Trains Dead
//--------------------------------------------------------------------------------------------------
bool gt_VictoryAllTrainsDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    Wait(2.0, c_timeReal);
    TriggerQueueClear(c_triggerQueueRetain);
    TriggerExecute(gt_ObjectiveTheGreatTrainRobberyComplete, true, true);
    libCamp_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryAllTrainsDead_Init () {
    gt_VictoryAllTrainsDead = TriggerCreate("gt_VictoryAllTrainsDead_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((ObjectiveGetState(gv_objective_TheGreatTrainRobbery) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objective_Locate) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objective_DefilerSkeletons) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objective_DontMissTrains) == c_objectiveStateCompleted)) {
        AchievementAward(gv_pLAYER_01_USER, "THorner01_1");
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1) && (gv_trainsMissed == 0)) {
        AchievementAward(gv_pLAYER_01_USER, "THorner01_3");
    }

    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_sCVTrained == false)) {
        AchievementAward(gv_pLAYER_01_USER, "Anniversary_THorner01");
        TriggerDebugOutput(1, StringExternal("Param/Value/5EC8C131"), false);
    }

    VictoryPanelAddAchievement("THorner01_1");
    VictoryPanelAddAchievement("THorner01_2");
    VictoryPanelAddAchievement("THorner01_3");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/1D9AC130"), IntToText(gv_trainsMissed));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/749C150F"), (IntToText(gv_diamondbacksFound) + StringExternal("Param/Value/DFF54E59") + IntToText(gv_totalDiamondbacks)));
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/54B8AE56"), (IntToText(gv_defilerSkeletonsFound) + StringExternal("Param/Value/6B17C547") + IntToText(gv_defilerSkeletonsNeeded)));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/D38D6E18"), IntToText(gv_defilerSkeletonsFound));
    libCamp_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat - Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, 0), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/478ADE12"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat - Too Many Trains Missed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatTooManyTrainsMissed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDontMissTrainsFailed, true, false);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/91D58B95"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatTooManyTrainsMissed_Init () {
    gt_DefeatTooManyTrainsMissed = TriggerCreate("gt_DefeatTooManyTrainsMissed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    libCamp_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - The Great Train Robbery - Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveTheGreatTrainRobberyCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate((StringExternal("Param/Value/64161632") + IntToText(gv_trainsDestroyed) + StringExternal("Param/Value/34DAEE79") + IntToText(gv_trainsNeeded) + StringExternal("Param/Value/C646D92B")), StringExternal("Param/Value/119F32A8"), c_objectiveStateActive, true);
    gv_objective_TheGreatTrainRobbery = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_THorner01Objective1, ObjectiveLastCreated(), StringExternal("Param/Value/0FADFAEB"));
    TriggerExecute(gt_ObjectiveDontMissTrainsCreate, true, false);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveTheGreatTrainRobberyCreateQ_Init () {
    gt_ObjectiveTheGreatTrainRobberyCreateQ = TriggerCreate("gt_ObjectiveTheGreatTrainRobberyCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - The Great Train Robbery - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveTheGreatTrainRobberyComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveTheGreatTrainRobberyCreateQ, true, false);
    ObjectiveSetState(gv_objective_TheGreatTrainRobbery, c_objectiveStateCompleted);
    TriggerExecute(gt_ObjectiveDontMissTrainsComplete, true, false);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    BoardShowAll(false, PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveTheGreatTrainRobberyComplete_Init () {
    gt_ObjectiveTheGreatTrainRobberyComplete = TriggerCreate("gt_ObjectiveTheGreatTrainRobberyComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Don't Miss Trains - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDontMissTrainsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((libNtve_gf_DifficultyValueInt(1, 1, 1, 0) == 1)) {
        ObjectiveCreate((StringExternal("Param/Value/3E57C24F") + IntToText(gv_trainsMissed) + StringExternal("Param/Value/BA2A32B4")), StringExternal("Param/Value/E0AD56FA"), c_objectiveStateActive, true);
        libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_THorner01Objective3, ObjectiveLastCreated(), StringExternal("Param/Value/256CC246"));
    }
    else {
        ObjectiveCreate((StringExternal("Param/Value/63DC7731") + IntToText(gv_trainsMissed) + StringExternal("Param/Value/A3B95560")), StringExternal("Param/Value/1061A0FF"), c_objectiveStateActive, true);
        libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_THorner01Objective3, ObjectiveLastCreated(), StringExternal("Param/Value/7A1A9FCF"));
    }
    gv_objective_DontMissTrains = ObjectiveLastCreated();
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDontMissTrainsCreate_Init () {
    gt_ObjectiveDontMissTrainsCreate = TriggerCreate("gt_ObjectiveDontMissTrainsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Don't Miss Trains - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDontMissTrainsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDontMissTrainsCreate, true, false);
    ObjectiveSetState(gv_objective_DontMissTrains, c_objectiveStateCompleted);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDontMissTrainsComplete_Init () {
    gt_ObjectiveDontMissTrainsComplete = TriggerCreate("gt_ObjectiveDontMissTrainsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Don't Miss Trains - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDontMissTrainsFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDontMissTrainsCreate, true, false);
    ObjectiveSetState(gv_objective_DontMissTrains, c_objectiveStateFailed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDontMissTrainsFailed_Init () {
    gt_ObjectiveDontMissTrainsFailed = TriggerCreate("gt_ObjectiveDontMissTrainsFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Locate - Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveLocateCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate((StringExternal("Param/Value/3A5F61B2") + IntToText(gv_diamondbacksFound) + StringExternal("Param/Value/7B6819D5") + IntToText(gv_totalDiamondbacks) + StringExternal("Param/Value/FA2AF1A7")), StringExternal("Param/Value/EF484F1C"), c_objectiveStateActive, false);
    gv_objective_Locate = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_THorner01Objective2, ObjectiveLastCreated(), StringExternal("Param/Value/217E769A"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveLocateCreateQ_Init () {
    gt_ObjectiveLocateCreateQ = TriggerCreate("gt_ObjectiveLocateCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Locate - Discover
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveLocateDiscover_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveLocateCreateQ, true, false);
    ObjectiveSetState(gv_objective_Locate, c_objectiveStateActive);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveLocateDiscover_Init () {
    gt_ObjectiveLocateDiscover = TriggerCreate("gt_ObjectiveLocateDiscover_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Locate - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveLocateComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveLocateCreateQ, true, false);
    ObjectiveSetState(gv_objective_Locate, c_objectiveStateCompleted);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveLocateComplete_Init () {
    gt_ObjectiveLocateComplete = TriggerCreate("gt_ObjectiveLocateComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Defiler Skeletons - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDefilerSkeletonsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate((StringExternal("Param/Value/3CEE170B") + IntToText(gv_defilerSkeletonsFound) + StringExternal("Param/Value/D3D4BBC6") + IntToText(gv_defilerSkeletonsNeeded) + StringExternal("Param/Value/39CA4198")), StringExternal("Param/Value/C2BBE6CB"), c_objectiveStateActive, false);
    gv_objective_DefilerSkeletons = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_THorner01Objective32, ObjectiveLastCreated(), StringExternal("Param/Value/B9692C6A"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDefilerSkeletonsCreate_Init () {
    gt_ObjectiveDefilerSkeletonsCreate = TriggerCreate("gt_ObjectiveDefilerSkeletonsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Defiler Skeletons - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDefilerSkeletonsUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDefilerSkeletonsCreate, true, false);
    gv_defilerSkeletonsFound += 1;
    ObjectiveSetName(gv_objective_DefilerSkeletons, (StringExternal("Param/Value/8FF82C14") + IntToText(gv_defilerSkeletonsFound) + StringExternal("Param/Value/0B14E42D") + IntToText(gv_defilerSkeletonsNeeded) + StringExternal("Param/Value/54370C34")));
    if ((gv_defilerSkeletonsFound == gv_defilerSkeletonsNeeded)) {
        TriggerEnable(TriggerGetCurrent(), false);
        ObjectiveSetState(gv_objective_DefilerSkeletons, c_objectiveStateCompleted);
    }

    TriggerExecute(gt_DefilerSkeletonsTipQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDefilerSkeletonsUpdate_Init () {
    gt_ObjectiveDefilerSkeletonsUpdate = TriggerCreate("gt_ObjectiveDefilerSkeletonsUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defiler Skeleton Finding
//--------------------------------------------------------------------------------------------------
bool gt_DefilerSkeletonFinding_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "DefilerBoneSample"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTargetUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDefilerSkeletonsUpdate, true, false);
    libCamp_gf_DisplayResearchPointsGiventoPlayer(libCamp_ge_StoryResearchObject_ResearchObjectFindDefilerBoneSamples, EventUnit(), gv_pLAYER_01_USER);
    UnitKill(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefilerSkeletonFinding_Init () {
    gt_DefilerSkeletonFinding = TriggerCreate("gt_DefilerSkeletonFinding_Func");
    TriggerAddEventUnitAbility(gt_DefilerSkeletonFinding, null, AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_StartGame);
    TriggerStop(gt_TrainWaveController);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    gv_inCinematic = true;
    gv_gameOver = true;
    UnitPauseAll(true);
    AITimePause(true);
    GameTimeOfDayPause(true);
    GameSetBackground(c_backgroundFixed, "BelShirSkyBox", 100.0);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_BriefingScene00, true, true);
    TriggerExecute(gt_BriefingScene01, true, true);
    TriggerExecute(gt_BriefingScene02, true, true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UnitPauseAll(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6A2B4375_g;
    int auto6A2B4375_u;
    unit auto6A2B4375_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingScene00TrainSpawn, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1770), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1771), (SoundLengthSync(SoundLink("THorner01BriefingRaynor00018", -1)) + 3.0), -1, 10, true);
    MovieStartRecording("Briefing_Video_THorner01_00");
    SoundPlay(SoundLink("THorner01BriefingRaynor00018", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner01BriefingRaynor00018", -1))), c_timeReal);
    SoundPlay(SoundLink("THorner01BriefingHorner00002", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("THorner01BriefingHorner00002", -1)), c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1772), 8.0, -1, 10, true);
    SoundPlay(SoundLink("THorner01BriefingHorner00004", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("THorner01BriefingHorner00004", -1)), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner01BriefingRaynor00018", -1))), c_timeReal);
    Wait((0.5 * (SoundLengthSync(SoundLink("THorner01BriefingHorner00002", -1)) + SoundLengthSync(SoundLink("THorner01BriefingHorner00004", -1)))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    auto6A2B4375_g = UnitGroup(null, gv_pLAYER_06_TRAIN, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6A2B4375_u = UnitGroupCount(auto6A2B4375_g, c_unitCountAll);
    for (;; auto6A2B4375_u -= 1) {
        auto6A2B4375_var = UnitGroupUnitFromEnd(auto6A2B4375_g, auto6A2B4375_u);
        if (auto6A2B4375_var == null) { break; }
        UnitRemove(auto6A2B4375_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00_Init () {
    gt_BriefingScene00 = TriggerCreate("gt_BriefingScene00_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00 Train Spawn
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00TrainSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoC8BCF9C8_ae;
    const int autoC8BCF9C8_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_currentWave = 1;
    Wait(3.0, c_timeGame);
    TriggerExecute(gt_SpawnTrains, true, false);
    autoC8BCF9C8_ae = gv_numberOfChargers;
    lv_i = 1;
    for ( ; ( (autoC8BCF9C8_ai >= 0 && lv_i <= autoC8BCF9C8_ae) || (autoC8BCF9C8_ai < 0 && lv_i >= autoC8BCF9C8_ae) ) ; lv_i += autoC8BCF9C8_ai ) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_chargers[lv_i].lv_position, 1.0), "TarsonisCharger", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
        gv_chargers[lv_i].lv_state = ge_PRESET_ChargeState_Active;
    }
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(345), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.333, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(345), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Unpowered", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00TrainSpawn_Init () {
    gt_BriefingScene00TrainSpawn = TriggerCreate("gt_BriefingScene00TrainSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto04DC8B4A_g;
    int auto04DC8B4A_u;
    unit auto04DC8B4A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateCompleteTrain(48, 5);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1774), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1775), (SoundLengthSync(SoundLink("THorner01BriefingHorner00006", -1)) + 0.0), -1, 10, true);
    MovieStartRecording("Briefing_Video_THorner01_01");
    SoundPlay(SoundLink("THorner01BriefingHorner00006", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("THorner01BriefingHorner00006", -1)), c_timeReal);
    SoundPlay(SoundLink("THorner01BriefingRaynor00007", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("THorner01BriefingRaynor00007", -1)), c_timeReal);
    Wait((0.5 * (SoundLengthSync(SoundLink("THorner01BriefingHorner00006", -1)) + SoundLengthSync(SoundLink("THorner01BriefingRaynor00007", -1)))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    auto04DC8B4A_g = UnitGroup(null, gv_pLAYER_06_TRAIN, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto04DC8B4A_u = UnitGroupCount(auto04DC8B4A_g, c_unitCountAll);
    for (;; auto04DC8B4A_u -= 1) {
        auto04DC8B4A_var = UnitGroupUnitFromEnd(auto04DC8B4A_g, auto04DC8B4A_u);
        if (auto04DC8B4A_var == null) { break; }
        UnitRemove(auto04DC8B4A_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01_Init () {
    gt_BriefingScene01 = TriggerCreate("gt_BriefingScene01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 02
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateCompleteTrain((gv_midStart + 2), 5);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1776), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1777), 8.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_THorner01_02");
    SoundPlay(SoundLink("THorner01BriefingHorner00008", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("THorner01BriefingHorner00008", -1)), c_timeReal);
    SoundPlay(SoundLink("THorner01BriefingRaynor00009", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("THorner01BriefingRaynor00009", -1)), c_timeReal);
    Wait((0.5 * (SoundLengthSync(SoundLink("THorner01BriefingHorner00006", -1)) + SoundLengthSync(SoundLink("THorner01BriefingRaynor00007", -1)))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene02_Init () {
    gt_BriefingScene02 = TriggerCreate("gt_BriefingScene02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoAC1D20D3_g;
    int autoAC1D20D3_u;
    unit autoAC1D20D3_var;
    unitgroup auto7CF4C2ED_g;
    int auto7CF4C2ED_u;
    unit auto7CF4C2ED_var;
    unitgroup auto78EAE4ED_g;
    int auto78EAE4ED_u;
    unit auto78EAE4ED_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDaySetLength(0.0);
    GameSetBackground(c_backgroundFixed, "BelShirSkyBox", 100.0);
    AITimePause(true);
    autoAC1D20D3_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAC1D20D3_u = UnitGroupCount(autoAC1D20D3_g, c_unitCountAll);
    for (;; autoAC1D20D3_u -= 1) {
        autoAC1D20D3_var = UnitGroupUnitFromEnd(autoAC1D20D3_g, autoAC1D20D3_u);
        if (autoAC1D20D3_var == null) { break; }
        libNtve_gf_PauseUnit(autoAC1D20D3_var, true);
    }
    auto7CF4C2ED_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7CF4C2ED_u = UnitGroupCount(auto7CF4C2ED_g, c_unitCountAll);
    for (;; auto7CF4C2ED_u -= 1) {
        auto7CF4C2ED_var = UnitGroupUnitFromEnd(auto7CF4C2ED_g, auto7CF4C2ED_u);
        if (auto7CF4C2ED_var == null) { break; }
        UnitIssueOrder(auto7CF4C2ED_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    auto78EAE4ED_g = UnitGroupAlliance(gv_pLAYER_02_DOMINION, c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto78EAE4ED_u = UnitGroupCount(auto78EAE4ED_g, c_unitCountAll);
    for (;; auto78EAE4ED_u -= 1) {
        auto78EAE4ED_var = UnitGroupUnitFromEnd(auto78EAE4ED_g, auto78EAE4ED_u);
        if (auto78EAE4ED_var == null) { break; }
        UnitRemove(auto78EAE4ED_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_crate;
    int lv_i;
    unitgroup lv_crateUnits;

    // Automatic Variable Declarations
    unitgroup auto657FAB03_g;
    int auto657FAB03_u;
    unit auto657FAB03_var;
    unitgroup auto9586D451_g;
    int auto9586D451_u;
    unit auto9586D451_var;
    const int auto92BAF6BC_ae = 4;
    const int auto92BAF6BC_ai = 1;
    unitgroup auto9C174672_g;
    int auto9C174672_u;
    unit auto9C174672_var;

    // Variable Initialization
    lv_crateUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "TarsonisCharger", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    if ((UnitGroupCount(UnitGroup("AdjutantCapsule", c_playerAny, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        auto657FAB03_g = UnitGroup("AdjutantCapsule", c_playerAny, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto657FAB03_u = UnitGroupCount(auto657FAB03_g, c_unitCountAll);
        for (;; auto657FAB03_u -= 1) {
            auto657FAB03_var = UnitGroupUnitFromEnd(auto657FAB03_g, auto657FAB03_u);
            if (auto657FAB03_var == null) { break; }
            UnitRemove(auto657FAB03_var);
        }
    }

    if ((UnitGroupCount(UnitGroup("AdjutantCapsule", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "AdjutantCapsule", 0, 0, PointFromId(2001));
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "AnimClear Birth");
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "AnimClear Morph");
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    }

    lv_crate = UnitGroupUnit(UnitGroup("AdjutantCapsule", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    auto9586D451_g = UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lv_crate), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9586D451_u = UnitGroupCount(auto9586D451_g, c_unitCountAll);
    for (;; auto9586D451_u -= 1) {
        auto9586D451_var = UnitGroupUnitFromEnd(auto9586D451_g, auto9586D451_u);
        if (auto9586D451_var == null) { break; }
        UnitSetPosition(auto9586D451_var, PointWithOffsetPolar(UnitGetPosition(auto9586D451_var), -3.0, AngleBetweenPoints(UnitGetPosition(auto9586D451_var), UnitGetPosition(lv_crate))), true);
    }
    lv_i = 1;
    for ( ; ( (auto92BAF6BC_ai >= 0 && lv_i <= auto92BAF6BC_ae) || (auto92BAF6BC_ai < 0 && lv_i >= auto92BAF6BC_ae) ) ; lv_i += auto92BAF6BC_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "Marine", 0, gv_pLAYER_01_USER, PointWithOffsetPolar(UnitGetPosition(lv_crate), RandomFixed(2.0, 4.0), ((90.0 * IntToFixed(lv_i)) + 45.0)), UnitGetPosition(lv_crate));
        UnitGroupAdd(lv_crateUnits, UnitLastCreated());
    }
    libNtve_gf_UnitCreateFacingPoint(1, "Diamondback", 0, gv_pLAYER_01_USER, PointWithOffsetPolar(UnitGetPosition(lv_crate), RandomFixed(5.0, 6.0), (UnitGetFacing(lv_crate) + 90.0)), UnitGetPosition(lv_crate));
    libNtve_gf_UnitCreateFacingPoint(1, "Diamondback", 0, gv_pLAYER_01_USER, PointWithOffsetPolar(UnitGetPosition(lv_crate), RandomFixed(5.0, 6.0), (UnitGetFacing(lv_crate) - 90.0)), UnitGetPosition(lv_crate));
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(59), 0.0, -1, 10, true);
    CameraPan(1, UnitGetPosition(lv_crate), 0.0, -1, 10, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(1.0, c_timeReal);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_victoryCinematicCompleted = false;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner01MusicOutro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CameraSetValue(gv_pLAYER_01_USER, c_cameraValueDistance, 24.0, SoundLengthSync(SoundLink("THorner01Horner00012", -1)), -1, 10);
    // Transmission - SoundLink("THorner01Horner00012", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner01Horner00012", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("THorner01Raynor00010", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner01Raynor00010", -1), c_transmissionDurationAdd, 0.0, true);
    CameraSetValue(gv_pLAYER_01_USER, c_cameraValueYaw, 150.0, (SoundLengthSync(SoundLink("THorner01ConfederateAdjutant00004", -1)) + SoundLengthSync(SoundLink("THorner01Raynor00016", -1))), -1, 10);
    CameraSetValue(gv_pLAYER_01_USER, c_cameraValueDistance, 28.0, (SoundLengthSync(SoundLink("THorner01ConfederateAdjutant00004", -1)) + SoundLengthSync(SoundLink("THorner01Raynor00016", -1))), -1, 10);
    auto9C174672_g = lv_crateUnits;
    auto9C174672_u = UnitGroupCount(auto9C174672_g, c_unitCountAll);
    for (;; auto9C174672_u -= 1) {
        auto9C174672_var = UnitGroupUnitFromEnd(auto9C174672_g, auto9C174672_u);
        if (auto9C174672_var == null) { break; }
        UnitIssueOrder(auto9C174672_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(auto9C174672_var), (DistanceBetweenPoints(UnitGetPosition(auto9C174672_var), UnitGetPosition(lv_crate)) - 1.5), AngleBetweenPoints(UnitGetPosition(auto9C174672_var), UnitGetPosition(lv_crate)))), c_orderQueueReplace);
    }
    TriggerExecute(gt_VictoryCapsuleAnimation, true, false);
    // Transmission - SoundLink("THorner01ConfederateAdjutant00004", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner01ConfederateAdjutant00004", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("THorner01Raynor00016", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner01Raynor00016", -1), c_transmissionDurationAdd, 0.0, true);
    gv_victoryCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Capsule Animation
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCapsuleAnimation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitGroupUnit(UnitGroup("AdjutantCapsule", c_playerAny, RegionCircle(CameraGetTarget(gv_pLAYER_01_USER), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1)), c_animNameDefault, "Morph", 0, c_animTimeDefault);
    SoundPlay(SoundLink("Bunker_What", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.767, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitGroupUnit(UnitGroup("AdjutantCapsule", c_playerAny, RegionCircle(CameraGetTarget(gv_pLAYER_01_USER), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1)), c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCapsuleAnimation_Init () {
    gt_VictoryCapsuleAnimation = TriggerCreate("gt_VictoryCapsuleAnimation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victoryCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Victory, true, false);
    UnitPauseAll(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04Music_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulty_Init();
    gt_Init07Help_Init();
    gt_IntroSequence_Init();
    gt_StartGame_Init();
    gt_TrainPathInitialization_Init();
    gt_TrainInitialization_Init();
    gt_TrainEscorts2veryweakescorts_Init();
    gt_TrainEscorts3lightescorts_Init();
    gt_TrainEscorts4mediumescortsbunkers_Init();
    gt_TrainEscorts5strongerescorts_Init();
    gt_TrainEscorts67superfastescortsInsaneOnly_Init();
    gt_TrainEscorts8heavyescorts_Init();
    gt_TrainWaveController_Init();
    gt_SpawnTrains_Init();
    gt_SpawnEscorts_Init();
    gt_TrainMovement_Init();
    gt_TrainTimerWindow_Init();
    gt_TrainBossBar_Init();
    gt_TrainDeathQ_Init();
    gt_TrainDespawn_Init();
    gt_EscortDespawn_Init();
    gt_TrainCarDamageAnimationController_Init();
    gt_TrainCarPingController_Init();
    gt_InitializeTrainStations_Init();
    gt_InitializeChargers_Init();
    gt_TrainStationController_Init();
    gt_ChargePulseController_Init();
    gt_ActivateStation_Init();
    gt_DeactivateStation_Init();
    gt_TrainSpawnAnimations_Init();
    gt_TrainDespawnAnimationsTop_Init();
    gt_TrainDespawnAnimationsMid_Init();
    gt_TrainDespawnAnimationsBottom_Init();
    gt_ResourcePalletPickups_Init();
    gt_DiamondbackRescue_Init();
    gt_DiamondbackProduced_Init();
    gt_RevealBottomLane_Init();
    gt_RevealMiddleLane_Init();
    gt_RevealTopLane_Init();
    gt_TrainSpawnQ_Init();
    gt_NewTrainMechanicTransmissions_Init();
    gt_DominionAttackQ_Init();
    gt_StackKillerQ_Init();
    gt_LightEscortsQ_Init();
    gt_TurbochargedQ_Init();
    gt_HeavyEscortsQ_Init();
    gt_DominionBunkerQ_Init();
    gt_DiamondbacksQ_Init();
    gt_KillFirstTrainQ_Init();
    gt_Train1MissedQ_Init();
    gt_Train2MissedQ_Init();
    gt_DiamondbacksRescuedQ_Init();
    gt_CampaignTipsQ_Init();
    gt_DefilerSkeletonsTipQ_Init();
    gt_FireontheMoveTipQ_Init();
    gt_DiamondbackTipQ_Init();
    gt_StartAI_Init();
    gt_DominionAttackWaves_Init();
    gt_DominionAttackWavesFromDom2_Init();
    gt_DominionAttackWavesFromDom3_Init();
    gt_PatrolWavesTop_Init();
    gt_PatrolWavesBottom_Init();
    gt_PatrolWavesSingle_Init();
    gt_PatrolPings_Init();
    gt_AIMinerals_Init();
    gt_AIGas_Init();
    gt_BunkerDeath_Init();
    gt_AchievementSCVTrained_Init();
    gt_VictoryAllTrainsDead_Init();
    gt_Victory_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatTooManyTrainsMissed_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_ObjectiveTheGreatTrainRobberyCreateQ_Init();
    gt_ObjectiveTheGreatTrainRobberyComplete_Init();
    gt_ObjectiveDontMissTrainsCreate_Init();
    gt_ObjectiveDontMissTrainsComplete_Init();
    gt_ObjectiveDontMissTrainsFailed_Init();
    gt_ObjectiveLocateCreateQ_Init();
    gt_ObjectiveLocateDiscover_Init();
    gt_ObjectiveLocateComplete_Init();
    gt_ObjectiveDefilerSkeletonsCreate_Init();
    gt_ObjectiveDefilerSkeletonsUpdate_Init();
    gt_DefilerSkeletonFinding_Init();
    gt_BriefingQ_Init();
    gt_BriefingScene00_Init();
    gt_BriefingScene00TrainSpawn_Init();
    gt_BriefingScene01_Init();
    gt_BriefingScene02_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCapsuleAnimation_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
