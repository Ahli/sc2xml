//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Safe Haven
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/CampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libCamp_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER01_USER = 1;
const int gv_pLAYER02_PROTOSS = 2;
const int gv_pLAYER03_COLONIST = 3;
const int gv_pLAYER04_PURIFIER = 4;
const int gv_pLAYER05_COLONISTSTRUCTURES = 5;
const int gv_pLAYER06_TERRORFLEET = 6;
const int gv_pLAYER07_RESOURCES = 7;

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_AttackWavePath_Any = 0;
const int ge_AttackWavePath_EastBasetoEastChoke = 1;
const int ge_AttackWavePath_SouthBasetoEastChoke = 2;
const int ge_AttackWavePath_SouthBasetoWestChoke = 3;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_gameOn;
bool gv_inCinematic;
unit gv_purifier;
unitgroup gv_purifierGroup;
unit gv_superWarpGateP02;
unit gv_superWarpGateP04;
int gv_purifierStatusBoard;
unitgroup gv_purifierEscortGroup;
unitgroup gv_prismGroupNorth;
unitgroup gv_prismGroupEast;
unitgroup gv_prismGroupSouth;
revealer gv_colonist_Outpost_Alpha;
revealer gv_colonist_Outpost_Beta;
revealer gv_colonist_Outpost_Gamma;
revealer gv_colonist_Outpost_Omega;
unitgroup gv_resourceGroupBeta;
unitgroup gv_resourceGroupGamma;
unitgroup gv_resourceGroupOmega;
actor gv_planetCrackerHoleAlpha;
actor gv_planetCrackerHoleBeta;
actor gv_planetCrackerHoleGamma;
actor gv_planetCrackerHoleOmega;
actor gv_planetCrackerHolePlayerBase;
int gv_nexusPing1;
int gv_nexusPing2;
int gv_nexusPing3;
timer gv_poweringUpTime;
fixed gv_pOWER_UP_TIME;
fixed gv_pURIFIER_MAX_LIFE;
fixed gv_cOLONIST_SHIP_MAX_LIFE;
int gv_colonyOutpostsSaved;
int gv_nexusDestroyed;
bool gv_nexusBeingDestroyed;
int gv_purifierPing;
fixed gv_powerUpTimeProgress;
int gv_purifierProgressCounter;
int gv_purifierBossBar;
point gv_purifierMainTarget;
unitgroup gv_terrorFleetGroup;
int gv_terrorFleetPing;
int gv_terrorFleetsDestroyedCounter;
bool gv_firstFleetObjectiveFailed;
bool gv_secondFleetObjectiveFailed;
bool gv_thirdFleetObjectiveFailed;
point[7] gv_pathtoAlpha;
point[14] gv_pathtoBeta;
point[13] gv_pathtoGamma;
point[15] gv_pathtoOmega;
int gv_pathtoAlphaLength;
int gv_pathtoBetaLength;
int gv_pathtoGammaLength;
int gv_pathtoOmegaLength;
int gv_currentWavePath;
int gv_currentWaveAttacker;
unitgroup gv_currentWaveUnits;
unitgroup gv_currentWaveSources;
int gv_vikingKills;
int gv_purifierKills;
int gv_gaspickedup;
int gv_mineralsPickedUp;
int gv_primaryObjectiveDestroyProtossNexus;
int gv_primaryObjectiveDestroyPurifier;
int gv_bonusObjectiveDestroyFirstTerrorFleet;
int gv_bonusObjectiveDestroySecondTerrorFleet;
int gv_bonusObjectiveDestroyThirdTerrorFleet;
actor gv_briefingNexusPingActor;
actor gv_briefingVikingPingActor1;
actor gv_briefingVikingPingActor2;
actor gv_briefingVikingPingActor3;
unit gv_briefingViking1;
unit gv_briefingViking2;
unit gv_briefingViking3;
unit gv_briefingBiodome;
bool gv_victoryCinematicCompleted;
unitgroup gv_victoryHiddenUnitGroup;

void InitGlobals () {
    gv_purifier = UnitFromId(765);
    gv_purifierGroup = UnitGroupEmpty();
    gv_purifierStatusBoard = c_timerWindowNone;
    gv_purifierEscortGroup = UnitGroupEmpty();
    gv_prismGroupNorth = UnitGroupEmpty();
    gv_prismGroupEast = UnitGroupEmpty();
    gv_prismGroupSouth = UnitGroupEmpty();
    gv_resourceGroupBeta = UnitGroupEmpty();
    gv_resourceGroupGamma = UnitGroupEmpty();
    gv_resourceGroupOmega = UnitGroupEmpty();
    gv_poweringUpTime = TimerCreate();
    gv_pOWER_UP_TIME = 60.0;
    gv_pURIFIER_MAX_LIFE = 6000.0;
    gv_cOLONIST_SHIP_MAX_LIFE = 4000.0;
    gv_colonyOutpostsSaved = 5;
    gv_terrorFleetGroup = UnitGroupEmpty();
    gv_currentWavePath = ge_AttackWavePath_Any;
    gv_currentWaveUnits = UnitGroupEmpty();
    gv_currentWaveSources = UnitGroupEmpty();
    gv_primaryObjectiveDestroyProtossNexus = c_invalidObjectiveId;
    gv_primaryObjectiveDestroyPurifier = c_invalidObjectiveId;
    gv_bonusObjectiveDestroyFirstTerrorFleet = c_invalidObjectiveId;
    gv_bonusObjectiveDestroySecondTerrorFleet = c_invalidObjectiveId;
    gv_bonusObjectiveDestroyThirdTerrorFleet = c_invalidObjectiveId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_TerrorFleetrepeatingmove (unitgroup lp_fLEET, region lp_tARGET);
void gf_TerrorFleetWarpIn (int lp_count, abilcmd lp_trainCmd, fixed lp_radius, fixed lp_angleOffset, fixed lp_intervalOffsets);
void gf_PrepareAIWave (int lp_player, int lp_path);
void gf_TryToPrepWaveFromSource (unitgroup lp_powerSource, point lp_gatherPoint);
void gf_AIP02WaveWarpIn (int lp_count, abilcmd lp_trainCmd);
void gf_SendAIWaveUsingPath (int lp_duration);
void gf_UpgradeAllProtoss (int lp_qty, string lp_upgrade);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04Music;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_IntroSequence;
trigger gt_StartGame;
trigger gt_CreateNexusPings;
trigger gt_DestroyNexusPings;
trigger gt_NexusDestroyed;
trigger gt_PURIFIERIntro;
trigger gt_CreatePurifierBossBar;
trigger gt_UpdatePurifierBossBar;
trigger gt_EradicationPointAlpha;
trigger gt_EradicationPointBeta;
trigger gt_EradicationPointGamma;
trigger gt_EradicationPointOmega;
trigger gt_EradicatePlayersBase;
trigger gt_PurifierUsesVortex;
trigger gt_PurifierAfterAlpha;
trigger gt_PurifierAfterBeta;
trigger gt_PurifierAfterGamma;
trigger gt_PurifierAfterOmega;
trigger gt_SendBetaBaseTerrorFleet;
trigger gt_SendGammaBaseTerrorFleet;
trigger gt_SendOmegaBaseTerrorFleet;
trigger gt_TerrorFleetBetaBaseBehavior;
trigger gt_TerrorFleetGammaBaseBehavior;
trigger gt_TerrorFleetOmegaBaseBehavior;
trigger gt_TerrorFleetBetaDestroyed;
trigger gt_TerrorFleetGammaDestroyed;
trigger gt_TerrorFleetOmegaDestroyed;
trigger gt_RemoveTerrorFleets;
trigger gt_TerrorFleetPing;
trigger gt_WarpInBetaTerrorFleet;
trigger gt_WarpInGammaTerrorFleet;
trigger gt_WarpInOmegaTerrorFleet;
trigger gt_WarpInUnitsStarted;
trigger gt_WarpInUnitsBehavior;
trigger gt_ColonistsWander;
trigger gt_ColonistBehavioratBaseBeta;
trigger gt_ColonistBehavioratBaseGamma;
trigger gt_ColonistBehavioratBaseOmega;
trigger gt_ColonistsEvacuateBaseBeta;
trigger gt_ColonistsEvacuateBaseGamma;
trigger gt_ColonistsEvacuateBaseOmega;
trigger gt_ColonistsGarrisonPlayerBase;
trigger gt_RemoveLoadingColonist;
trigger gt_ResourcePickups;
trigger gt_InitializePaths;
trigger gt_ShowPathtoAlphaBase;
trigger gt_ShowPathtoBetaBase;
trigger gt_ShowPathtoGammaBase;
trigger gt_ShowPathtoOmegaBase;
trigger gt_ProtossP02WarpInUnitsBehavior;
trigger gt_StartAI;
trigger gt_ProtossP02AttackWaves;
trigger gt_AIGiveMinerals;
trigger gt_AIGiveGas;
trigger gt_TransmissionProtossNexusQ;
trigger gt_TransmissionHelpColonistsQ;
trigger gt_TransmissionPurifierArrivedQ;
trigger gt_TransmissionPurifierUsesVortexQ;
trigger gt_TransmissionBetaShipUnderAttackQ;
trigger gt_TransmissionGammaShipUnderAttackQ;
trigger gt_TransmissionOmegaShipUnderAttackQ;
trigger gt_TransmissionNexusDestroyedQ;
trigger gt_TransmissionFirstTerrorFleetWarningQ;
trigger gt_TransmissionSecondTerrorFleetWarningQ;
trigger gt_TransmissionThirdTerrorFleetWarningQ;
trigger gt_TransmissionColonistsEvacuateBetaOutpostQ;
trigger gt_TransmissionColonistsEvacuateGammaOutpostQ;
trigger gt_TransmissionColonistsEvacuateOmegaOutpostQ;
trigger gt_TransmissionPurifierEntersColonistBaseAlphaQ;
trigger gt_TransmissionPurifierEntersColonistBaseBetaQ;
trigger gt_TransmissionPurifierEntersColonistBaseGammaQ;
trigger gt_TransmissionPurifierEntersColonistBaseOmegaQ;
trigger gt_TransmissionPurifierEntersPlayerBaseQ;
trigger gt_TransmissionPurifierAboutToFire;
trigger gt_CampaignTipsQ;
trigger gt_NewUnitVikingTipQ;
trigger gt_NewEnemyPurifierTipQ;
trigger gt_VikingKillsofEnemyUnits;
trigger gt_StatsPurifierKills;
trigger gt_VictoryPurifierDestroyed;
trigger gt_Victory;
trigger gt_DefeatBaseDead;
trigger gt_DefeatColoniesDestroyed;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_ObjectiveDestroyNexusCreateQ;
trigger gt_ObjectiveDestroyNexusComplete;
trigger gt_ObjectiveDestroyNexusFailed;
trigger gt_ObjectiveDestroyPurifierCreateQ;
trigger gt_ObjectiveDestroyPurifierComplete;
trigger gt_ObjectiveDestroyFirstFleetCreateHidden;
trigger gt_ObjectiveDestroyFirstFleetComplete;
trigger gt_ObjectiveDestroyFirstFleetFailed;
trigger gt_ObjectiveDestroySecondFleetCreateHidden;
trigger gt_ObjectiveDestroySecondFleetComplete;
trigger gt_ObjectiveDestroySecondFleetFailed;
trigger gt_ObjectiveDestroyThirdFleetCreateHidden;
trigger gt_ObjectiveDestroyThirdFleetComplete;
trigger gt_ObjectiveDestroyThirdFleetFailed;
trigger gt_BriefingQ;
trigger gt_BriefingScene00;
trigger gt_Briefing00Civvies;
trigger gt_Brieifng00Air;
trigger gt_BriefingScene01;
trigger gt_BriefingScene02;
trigger gt_Briefing02VikingIndicators;
trigger gt_BriefingScene03;
trigger gt_BriefingScene04;
trigger gt_Briefing04Nexus;
trigger gt_BriefingScene05;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryScene;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_TerrorFleetrepeatingmove (unitgroup lp_fLEET, region lp_tARGET) {
    // Variable Declarations
    int lv_fleetSize;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while (true) {
        lv_fleetSize = UnitGroupCount(lp_fLEET, c_unitCountAlive);
        if ((UnitGroupCount(lp_fLEET, c_unitCountAlive) > 0) && (UnitGroupCount(UnitGroupFilterRegion(lp_fLEET, lp_tARGET, 0), c_unitCountAlive) != lv_fleetSize)) {
            UnitGroupIssueOrder(lp_fLEET, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(lp_tARGET)), c_orderQueueAddToEnd);
            Wait(30.0, c_timeGame);
        }
        else {
            break;
        }
    }
}

void gf_TerrorFleetWarpIn (int lp_count, abilcmd lp_trainCmd, fixed lp_radius, fixed lp_angleOffset, fixed lp_intervalOffsets) {
    // Variable Declarations
    fixed lv_unitInterval;
    fixed lv_currentDegree;

    // Automatic Variable Declarations
    int auto107C7AF6_n;
    int auto107C7AF6_i;

    // Variable Initialization

    // Implementation
    if ((lp_count >= 1)) {
        lv_unitInterval = (360.0 / IntToFixed(lp_count));
        lv_currentDegree = (lp_angleOffset + (lp_intervalOffsets * lv_unitInterval));
        auto107C7AF6_n = lp_count;
        for (auto107C7AF6_i = 1; auto107C7AF6_i <= auto107C7AF6_n; auto107C7AF6_i += 1) {
            UnitIssueOrder(gv_superWarpGateP04, OrderTargetingPoint(lp_trainCmd, PointWithOffsetPolar(UnitGetPosition(gv_purifier), lp_radius, lv_currentDegree)), c_orderQueueAddToEnd);
            lv_currentDegree = (lv_currentDegree + lv_unitInterval);
            Wait(0.5, c_timeGame);
        }
    }

}

void gf_PrepareAIWave (int lp_player, int lp_path) {
    // Automatic Variable Declarations
    int autoC4A72F13_val;

    // Implementation
    gv_currentWaveAttacker = lp_player;
    gv_currentWavePath = lp_path;
    gv_currentWaveSources = null;
    autoC4A72F13_val = lp_path;
    if (autoC4A72F13_val == ge_AttackWavePath_EastBasetoEastChoke) {
        gf_TryToPrepWaveFromSource(gv_prismGroupEast, PointFromId(364));
        gf_TryToPrepWaveFromSource(gv_prismGroupSouth, PointFromId(172));
        gf_TryToPrepWaveFromSource(gv_prismGroupNorth, PointFromId(365));
    }
    else if (autoC4A72F13_val == ge_AttackWavePath_SouthBasetoEastChoke) {
        gf_TryToPrepWaveFromSource(gv_prismGroupSouth, PointFromId(172));
        gf_TryToPrepWaveFromSource(gv_prismGroupEast, PointFromId(364));
        gf_TryToPrepWaveFromSource(gv_prismGroupNorth, PointFromId(365));
    }
    else if (autoC4A72F13_val == ge_AttackWavePath_SouthBasetoWestChoke) {
        gf_TryToPrepWaveFromSource(gv_prismGroupSouth, PointFromId(172));
        gf_TryToPrepWaveFromSource(gv_prismGroupEast, PointFromId(321));
        gf_TryToPrepWaveFromSource(gv_prismGroupNorth, PointFromId(365));
    }
    else {
        gf_TryToPrepWaveFromSource(gv_prismGroupSouth, PointFromId(172));
        gf_TryToPrepWaveFromSource(gv_prismGroupEast, PointFromId(364));
        gf_TryToPrepWaveFromSource(gv_prismGroupNorth, PointFromId(365));
    }
}

void gf_TryToPrepWaveFromSource (unitgroup lp_powerSource, point lp_gatherPoint) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_currentWaveSources == null) && (libNtve_gf_UnitGroupIsDead(lp_powerSource) == false)) {
        gv_currentWaveSources = lp_powerSource;
        AIAttackWaveSetGatherPoint(gv_currentWaveAttacker, lp_gatherPoint);
    }

}

void gf_AIP02WaveWarpIn (int lp_count, abilcmd lp_trainCmd) {
    // Automatic Variable Declarations
    int auto6E2B3EC3_n;
    int auto6E2B3EC3_i;

    // Implementation
    auto6E2B3EC3_n = lp_count;
    for (auto6E2B3EC3_i = 1; auto6E2B3EC3_i <= auto6E2B3EC3_n; auto6E2B3EC3_i += 1) {
        if ((gv_currentWaveSources != null) && (UnitGroupCount(gv_currentWaveSources, c_unitCountAlive) > 0)) {
            UnitIssueOrder(gv_superWarpGateP02, OrderTargetingPoint(lp_trainCmd, UnitGetPosition(UnitGroupRandomUnit(gv_currentWaveSources, c_unitCountAlive))), c_orderQueueReplace);
        }

        Wait(0.5, c_timeAI);
    }
}

void gf_SendAIWaveUsingPath (int lp_duration) {
    // Automatic Variable Declarations
    int auto43D42EF4_val;

    // Implementation
    if ((UnitGroupCount(gv_currentWaveUnits, c_unitCountAlive) <= 0)) {
        return ;
    }

    AIAttackWaveUseGroup(gv_currentWaveAttacker, gv_currentWaveUnits);
    auto43D42EF4_val = gv_currentWavePath;
    if (auto43D42EF4_val == ge_AttackWavePath_SouthBasetoWestChoke) {
        if ((gv_currentWaveSources != gv_prismGroupNorth)) {
            AIAttackWaveAddWaypoint(gv_currentWaveAttacker, PointFromId(1966), false);
            AIAttackWaveAddWaypoint(gv_currentWaveAttacker, PointFromId(356), false);
        }

    }
    else if (auto43D42EF4_val == ge_AttackWavePath_EastBasetoEastChoke) {
        AIAttackWaveAddWaypoint(gv_currentWaveAttacker, PointFromId(1967), false);
    }
    else if (auto43D42EF4_val == ge_AttackWavePath_SouthBasetoEastChoke) {
        if ((gv_currentWaveSources != gv_prismGroupNorth)) {
            AIAttackWaveAddWaypoint(gv_currentWaveAttacker, PointFromId(24), false);
            AIAttackWaveAddWaypoint(gv_currentWaveAttacker, PointFromId(1967), false);
        }

    }
    else {
    }
    AIAttackWaveSend(gv_currentWaveAttacker, lp_duration, false);
    UnitGroupClear(gv_currentWaveUnits);
}

void gf_UpgradeAllProtoss (int lp_qty, string lp_upgrade) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUpgradeAddLevel(gv_pLAYER02_PROTOSS, lp_upgrade, lp_qty);
    TechTreeUpgradeAddLevel(gv_pLAYER04_PURIFIER, lp_upgrade, lp_qty);
    TechTreeUpgradeAddLevel(gv_pLAYER06_TERRORFLEET, lp_upgrade, lp_qty);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_LoadCampaignData(libCamp_ge_MapID_MapTHanson03A);
    TriggerExecute(gt_InitializePaths, true, true);
    TriggerExecute(gt_Init01Technology, true, true);
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04Music, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    libCamp_gf_RegisterFootageRecording(gt_BriefingQ);
    libCamp_gf_PurchaseStorymodeTech();
    UIAlertPoint("Trigger", gv_pLAYER01_USER, StringToText(""), null, PointFromId(15));
    TriggerExecute(gt_IntroSequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsViking, gv_pLAYER01_USER);
    TechTreeAbilityAllow(gv_pLAYER06_TERRORFLEET, AbilityCommand("GravitonBeam", 0), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER01_USER, gv_pLAYER02_PROTOSS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER01_USER, gv_pLAYER03_COLONIST, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER01_USER, gv_pLAYER04_PURIFIER, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER01_USER, gv_pLAYER05_COLONISTSTRUCTURES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER01_USER, gv_pLAYER06_TERRORFLEET, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER01_USER, gv_pLAYER07_RESOURCES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER02_PROTOSS, gv_pLAYER04_PURIFIER, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER02_PROTOSS, gv_pLAYER03_COLONIST, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER02_PROTOSS, gv_pLAYER05_COLONISTSTRUCTURES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER02_PROTOSS, gv_pLAYER06_TERRORFLEET, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER02_PROTOSS, gv_pLAYER07_RESOURCES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER03_COLONIST, gv_pLAYER05_COLONISTSTRUCTURES, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER03_COLONIST, gv_pLAYER07_RESOURCES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER04_PURIFIER, gv_pLAYER03_COLONIST, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER04_PURIFIER, gv_pLAYER05_COLONISTSTRUCTURES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER04_PURIFIER, gv_pLAYER06_TERRORFLEET, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER04_PURIFIER, gv_pLAYER07_RESOURCES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER06_TERRORFLEET, gv_pLAYER03_COLONIST, libNtve_ge_AllianceSetting_EnemyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER06_TERRORFLEET, gv_pLAYER05_COLONISTSTRUCTURES, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER06_TERRORFLEET, gv_pLAYER07_RESOURCES, libNtve_ge_AllianceSetting_Neutral);
    PlayerModifyPropertyInt(gv_pLAYER01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 400);
    PlayerModifyPropertyInt(gv_pLAYER01_USER, c_playerPropVespene, c_playerPropOperSetTo, 350);
    PlayerModifyPropertyInt(gv_pLAYER02_PROTOSS, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER02_PROTOSS, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER04_PURIFIER, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER04_PURIFIER, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER06_TERRORFLEET, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER06_TERRORFLEET, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerSetState(gv_pLAYER03_COLONIST, c_playerStateDisplayInLeaderPanel, false);
    PlayerSetState(gv_pLAYER05_COLONISTSTRUCTURES, c_playerStateDisplayInLeaderPanel, false);
    PlayerSetState(gv_pLAYER06_TERRORFLEET, c_playerStateDisplayInLeaderPanel, false);
    PlayerSetState(gv_pLAYER07_RESOURCES, c_playerStateDisplayInLeaderPanel, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto81633956_g;
    int auto81633956_u;
    unit auto81633956_var;
    unitgroup auto542B3ECA_g;
    int auto542B3ECA_u;
    unit auto542B3ECA_var;
    unitgroup auto28CECA96_g;
    int auto28CECA96_u;
    unit auto28CECA96_var;
    unitgroup autoD79C4196_g;
    int autoD79C4196_u;
    unit autoD79C4196_var;
    unitgroup autoC2C6AB81_g;
    int autoC2C6AB81_u;
    unit autoC2C6AB81_var;
    unitgroup auto1BA5B4A7_g;
    int auto1BA5B4A7_u;
    unit auto1BA5B4A7_var;
    unitgroup auto9A549C26_g;
    int auto9A549C26_u;
    unit auto9A549C26_var;
    unitgroup autoBB0D8226_g;
    int autoBB0D8226_u;
    unit autoBB0D8226_var;
    unitgroup autoDFBE53DC_g;
    int autoDFBE53DC_u;
    unit autoDFBE53DC_var;
    unitgroup autoBE4C0187_g;
    int autoBE4C0187_u;
    unit autoBE4C0187_var;
    unitgroup autoB0A0C5EC_g;
    int autoB0A0C5EC_u;
    unit autoB0A0C5EC_var;
    unitgroup autoAE197383_g;
    int autoAE197383_u;
    unit autoAE197383_var;
    unitgroup autoEA7B3CB7_g;
    int autoEA7B3CB7_u;
    unit autoEA7B3CB7_var;
    unitgroup auto7397EB36_g;
    int auto7397EB36_u;
    unit auto7397EB36_var;
    unitgroup auto86107EC6_g;
    int auto86107EC6_u;
    unit auto86107EC6_var;
    unitgroup autoEA733FF9_g;
    int autoEA733FF9_u;
    unit autoEA733FF9_var;
    unitgroup auto4FD076B0_g;
    int auto4FD076B0_u;
    unit auto4FD076B0_var;
    unitgroup auto67C133A2_g;
    int auto67C133A2_u;
    unit auto67C133A2_var;
    unitgroup auto58D5A404_g;
    int auto58D5A404_u;
    unit auto58D5A404_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_superWarpGateP02 = UnitFromId(170);
    gv_superWarpGateP04 = UnitFromId(1077);
    gv_purifier = UnitFromId(765);
    UnitGroupAdd(gv_purifierGroup, UnitFromId(765));
    UnitSetInfoText(gv_purifier, StringToText(""), StringExternal("Param/Value/708C93EB"), StringToText(""));
    libNtve_gf_MakeUnitInvulnerable(gv_purifier, true);
    UnitSetPropertyFixed(gv_purifier, c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(gv_purifier, c_unitPropMovementSpeed, 0.35);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        UnitBehaviorAdd(gv_purifier, "Detector12", gv_purifier, 1);
    }

    UnitBehaviorRemove(gv_purifier, "InvulnerabilityShield", 1);
    libNtve_gf_ShowHideUnit(gv_purifier, false);
    libNtve_gf_PauseUnit(UnitFromId(765), true);
    libNtve_gf_ShareVisionofUnit(UnitFromId(318), true, gv_pLAYER01_USER);
    libNtve_gf_ShareVisionofUnit(UnitFromId(3292), true, gv_pLAYER01_USER);
    libNtve_gf_ShareVisionofUnit(UnitFromId(2973), true, gv_pLAYER01_USER);
    libNtve_gf_ShareVisionofUnit(UnitFromId(2629), true, gv_pLAYER01_USER);
    libNtve_gf_ShareVisionofUnit(UnitFromId(2632), true, gv_pLAYER01_USER);
    auto81633956_g = UnitGroup("InfestedCivilian", gv_pLAYER03_COLONIST, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto81633956_u = UnitGroupCount(auto81633956_g, c_unitCountAll);
    for (;; auto81633956_u -= 1) {
        auto81633956_var = UnitGroupUnitFromEnd(auto81633956_g, auto81633956_u);
        if (auto81633956_var == null) { break; }
        UnitSetInfoText(auto81633956_var, StringToText(""), StringExternal("Param/Value/12815583"), StringToText(""));
    }
    auto542B3ECA_g = UnitGroup("ColonistShip", gv_pLAYER03_COLONIST, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto542B3ECA_u = UnitGroupCount(auto542B3ECA_g, c_unitCountAll);
    for (;; auto542B3ECA_u -= 1) {
        auto542B3ECA_var = UnitGroupUnitFromEnd(auto542B3ECA_g, auto542B3ECA_u);
        if (auto542B3ECA_var == null) { break; }
        UnitSetState(auto542B3ECA_var, c_unitStateTargetable, false);
    }
    auto28CECA96_g = UnitGroup("Biodome", gv_pLAYER05_COLONISTSTRUCTURES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto28CECA96_u = UnitGroupCount(auto28CECA96_g, c_unitCountAll);
    for (;; auto28CECA96_u -= 1) {
        auto28CECA96_var = UnitGroupUnitFromEnd(auto28CECA96_g, auto28CECA96_u);
        if (auto28CECA96_var == null) { break; }
        UnitSetState(auto28CECA96_var, c_unitStateTargetable, false);
    }
    autoD79C4196_g = UnitGroup("BiodomeHalfBuilt", gv_pLAYER05_COLONISTSTRUCTURES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD79C4196_u = UnitGroupCount(autoD79C4196_g, c_unitCountAll);
    for (;; autoD79C4196_u -= 1) {
        autoD79C4196_var = UnitGroupUnitFromEnd(autoD79C4196_g, autoD79C4196_u);
        if (autoD79C4196_var == null) { break; }
        UnitSetState(autoD79C4196_var, c_unitStateTargetable, false);
    }
    autoC2C6AB81_g = UnitGroup("Hut", gv_pLAYER05_COLONISTSTRUCTURES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC2C6AB81_u = UnitGroupCount(autoC2C6AB81_g, c_unitCountAll);
    for (;; autoC2C6AB81_u -= 1) {
        autoC2C6AB81_var = UnitGroupUnitFromEnd(autoC2C6AB81_g, autoC2C6AB81_u);
        if (autoC2C6AB81_var == null) { break; }
        UnitSetState(autoC2C6AB81_var, c_unitStateTargetable, false);
    }
    auto1BA5B4A7_g = UnitGroup("InfestedMercHaven", gv_pLAYER05_COLONISTSTRUCTURES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1BA5B4A7_u = UnitGroupCount(auto1BA5B4A7_g, c_unitCountAll);
    for (;; auto1BA5B4A7_u -= 1) {
        auto1BA5B4A7_var = UnitGroupUnitFromEnd(auto1BA5B4A7_g, auto1BA5B4A7_u);
        if (auto1BA5B4A7_var == null) { break; }
        UnitSetState(auto1BA5B4A7_var, c_unitStateTargetable, false);
    }
    auto9A549C26_g = UnitGroup("DumpTruck", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9A549C26_u = UnitGroupCount(auto9A549C26_g, c_unitCountAll);
    for (;; auto9A549C26_u -= 1) {
        auto9A549C26_var = UnitGroupUnitFromEnd(auto9A549C26_g, auto9A549C26_u);
        if (auto9A549C26_var == null) { break; }
        UnitSetPropertyFixed(auto9A549C26_var, c_unitPropMovementSpeed, 0.0);
    }
    autoBB0D8226_g = UnitGroup("TankerTruck", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBB0D8226_u = UnitGroupCount(autoBB0D8226_g, c_unitCountAll);
    for (;; autoBB0D8226_u -= 1) {
        autoBB0D8226_var = UnitGroupUnitFromEnd(autoBB0D8226_g, autoBB0D8226_u);
        if (autoBB0D8226_var == null) { break; }
        UnitSetPropertyFixed(autoBB0D8226_var, c_unitPropMovementSpeed, 0.0);
    }
    autoDFBE53DC_g = UnitGroup("FlatbedTruck", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDFBE53DC_u = UnitGroupCount(autoDFBE53DC_g, c_unitCountAll);
    for (;; autoDFBE53DC_u -= 1) {
        autoDFBE53DC_var = UnitGroupUnitFromEnd(autoDFBE53DC_g, autoDFBE53DC_u);
        if (autoDFBE53DC_var == null) { break; }
        UnitSetPropertyFixed(autoDFBE53DC_var, c_unitPropMovementSpeed, 0.0);
    }
    autoBE4C0187_g = UnitGroup("WarpPrismPhasing", gv_pLAYER02_PROTOSS, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBE4C0187_u = UnitGroupCount(autoBE4C0187_g, c_unitCountAll);
    for (;; autoBE4C0187_u -= 1) {
        autoBE4C0187_var = UnitGroupUnitFromEnd(autoBE4C0187_g, autoBE4C0187_u);
        if (autoBE4C0187_var == null) { break; }
        UnitGroupAdd(gv_prismGroupEast, autoBE4C0187_var);
    }
    autoB0A0C5EC_g = UnitGroup("WarpPrismPhasing", gv_pLAYER02_PROTOSS, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB0A0C5EC_u = UnitGroupCount(autoB0A0C5EC_g, c_unitCountAll);
    for (;; autoB0A0C5EC_u -= 1) {
        autoB0A0C5EC_var = UnitGroupUnitFromEnd(autoB0A0C5EC_g, autoB0A0C5EC_u);
        if (autoB0A0C5EC_var == null) { break; }
        UnitGroupAdd(gv_prismGroupNorth, autoB0A0C5EC_var);
    }
    autoAE197383_g = UnitGroup("WarpPrismPhasing", gv_pLAYER02_PROTOSS, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAE197383_u = UnitGroupCount(autoAE197383_g, c_unitCountAll);
    for (;; autoAE197383_u -= 1) {
        autoAE197383_var = UnitGroupUnitFromEnd(autoAE197383_g, autoAE197383_u);
        if (autoAE197383_var == null) { break; }
        UnitGroupAdd(gv_prismGroupSouth, autoAE197383_var);
    }
    autoEA7B3CB7_g = UnitGroup("ColonistShip", gv_pLAYER03_COLONIST, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEA7B3CB7_u = UnitGroupCount(autoEA7B3CB7_g, c_unitCountAll);
    for (;; autoEA7B3CB7_u -= 1) {
        autoEA7B3CB7_var = UnitGroupUnitFromEnd(autoEA7B3CB7_g, autoEA7B3CB7_u);
        if (autoEA7B3CB7_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(autoEA7B3CB7_var, true, gv_pLAYER01_USER);
    }
    auto7397EB36_g = UnitGroup(null, gv_pLAYER07_RESOURCES, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto7397EB36_u = UnitGroupCount(auto7397EB36_g, c_unitCountAll);
    for (;; auto7397EB36_u -= 1) {
        auto7397EB36_var = UnitGroupUnitFromEnd(auto7397EB36_g, auto7397EB36_u);
        if (auto7397EB36_var == null) { break; }
        UnitGroupAdd(gv_resourceGroupBeta, auto7397EB36_var);
        libNtve_gf_ShowHideUnit(auto7397EB36_var, false);
    }
    auto86107EC6_g = UnitGroup(null, gv_pLAYER07_RESOURCES, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto86107EC6_u = UnitGroupCount(auto86107EC6_g, c_unitCountAll);
    for (;; auto86107EC6_u -= 1) {
        auto86107EC6_var = UnitGroupUnitFromEnd(auto86107EC6_g, auto86107EC6_u);
        if (auto86107EC6_var == null) { break; }
        UnitGroupAdd(gv_resourceGroupGamma, auto86107EC6_var);
        libNtve_gf_ShowHideUnit(auto86107EC6_var, false);
    }
    autoEA733FF9_g = UnitGroup(null, gv_pLAYER07_RESOURCES, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoEA733FF9_u = UnitGroupCount(autoEA733FF9_g, c_unitCountAll);
    for (;; autoEA733FF9_u -= 1) {
        autoEA733FF9_var = UnitGroupUnitFromEnd(autoEA733FF9_g, autoEA733FF9_u);
        if (autoEA733FF9_var == null) { break; }
        UnitGroupAdd(gv_resourceGroupOmega, autoEA733FF9_var);
        libNtve_gf_ShowHideUnit(autoEA733FF9_var, false);
    }
    auto4FD076B0_g = UnitGroup(null, gv_pLAYER02_PROTOSS, RegionFromId(14), UnitFilter(0, 0, 0, 0), 0);
    auto4FD076B0_u = UnitGroupCount(auto4FD076B0_g, c_unitCountAll);
    for (;; auto4FD076B0_u -= 1) {
        auto4FD076B0_var = UnitGroupUnitFromEnd(auto4FD076B0_g, auto4FD076B0_u);
        if (auto4FD076B0_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto4FD076B0_var, false);
    }
    auto67C133A2_g = UnitGroup(null, gv_pLAYER04_PURIFIER, RegionFromId(18), UnitFilter(0, 0, 0, 0), 0);
    auto67C133A2_u = UnitGroupCount(auto67C133A2_g, c_unitCountAll);
    for (;; auto67C133A2_u -= 1) {
        auto67C133A2_var = UnitGroupUnitFromEnd(auto67C133A2_g, auto67C133A2_u);
        if (auto67C133A2_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto67C133A2_var, false);
    }
    auto58D5A404_g = UnitGroup("Nexus", gv_pLAYER02_PROTOSS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto58D5A404_u = UnitGroupCount(auto58D5A404_g, c_unitCountAll);
    for (;; auto58D5A404_u -= 1) {
        auto58D5A404_var = UnitGroupUnitFromEnd(auto58D5A404_g, auto58D5A404_u);
        if (auto58D5A404_var == null) { break; }
        UnitSetInfoText(auto58D5A404_var, StringExternal("Param/Value/5B1ECD09"), StringToText(""), StringToText(""));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init04Music_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Mission_MusicTHanson03AMain", c_soundtrackCueAny, c_soundtrackIndexAny);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Music_Init () {
    gt_Init04Music = TriggerCreate("gt_Init04Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetToDLighting("Haven");
    GameTimeOfDayPause(true);
    VisRevealerCreate(gv_pLAYER01_USER, RegionCircle(RegionGetCenter(RegionFromId(9)), 10.0));
    gv_colonist_Outpost_Alpha = VisRevealerLastCreated();
    VisRevealerCreate(gv_pLAYER01_USER, RegionCircle(RegionGetCenter(RegionFromId(11)), 10.0));
    gv_colonist_Outpost_Beta = VisRevealerLastCreated();
    VisRevealerCreate(gv_pLAYER01_USER, RegionCircle(RegionGetCenter(RegionFromId(12)), 10.0));
    gv_colonist_Outpost_Gamma = VisRevealerLastCreated();
    VisRevealerCreate(gv_pLAYER01_USER, RegionCircle(RegionGetCenter(RegionFromId(8)), 10.0));
    gv_colonist_Outpost_Omega = VisRevealerLastCreated();
    gv_planetCrackerHoleAlpha = ActorFromDoodad(DoodadFromId(199));
    gv_planetCrackerHoleBeta = ActorFromDoodad(DoodadFromId(95));
    gv_planetCrackerHoleGamma = ActorFromDoodad(DoodadFromId(108));
    gv_planetCrackerHoleOmega = ActorFromDoodad(DoodadFromId(174));
    gv_planetCrackerHolePlayerBase = ActorFromDoodad(DoodadFromId(198));
    ActorSend(gv_planetCrackerHoleAlpha, "SetVisibility");
    ActorSend(gv_planetCrackerHoleBeta, "SetVisibility");
    ActorSend(gv_planetCrackerHoleGamma, "SetVisibility");
    ActorSend(gv_planetCrackerHoleOmega, "SetVisibility");
    ActorSend(gv_planetCrackerHolePlayerBase, "SetVisibility");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8AE73090_g;
    int auto8AE73090_u;
    unit auto8AE73090_var;
    unitgroup autoE1EF7D94_g;
    int autoE1EF7D94_u;
    unit autoE1EF7D94_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerDifficulty(gv_pLAYER01_USER) == 1)) {
        PlayerModifyPropertyInt(gv_pLAYER02_PROTOSS, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_pLAYER04_PURIFIER, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_pLAYER06_TERRORFLEET, c_playerPropHandicap, c_playerPropOperSetTo, 50);
    }

    gv_pOWER_UP_TIME = libNtve_gf_DifficultyValueFixed(90.0, 90.0, 60.0, 45.0);
    gv_pURIFIER_MAX_LIFE = libNtve_gf_DifficultyValueFixed(4000.0, 6000.0, 7000.0, 8000.0);
    UnitSetPropertyFixed(gv_purifier, c_unitPropLifeMax, gv_pURIFIER_MAX_LIFE);
    UnitSetPropertyFixed(gv_purifier, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_purifier, c_unitPropShieldsMax, 0.0);
    gv_cOLONIST_SHIP_MAX_LIFE = libNtve_gf_DifficultyValueFixed(3000.0, 3000.0, 5000.0, 6000.0);
    auto8AE73090_g = UnitGroup("ColonistShip", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8AE73090_u = UnitGroupCount(auto8AE73090_g, c_unitCountAll);
    for (;; auto8AE73090_u -= 1) {
        auto8AE73090_var = UnitGroupUnitFromEnd(auto8AE73090_g, auto8AE73090_u);
        if (auto8AE73090_var == null) { break; }
        UnitSetPropertyFixed(auto8AE73090_var, c_unitPropLifeMax, gv_cOLONIST_SHIP_MAX_LIFE);
        UnitSetPropertyFixed(auto8AE73090_var, c_unitPropLifePercent, 100.0);
    }
    autoE1EF7D94_g = UnitGroup("Carrier", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE1EF7D94_u = UnitGroupCount(autoE1EF7D94_g, c_unitCountAll);
    for (;; autoE1EF7D94_u -= 1) {
        autoE1EF7D94_var = UnitGroupUnitFromEnd(autoE1EF7D94_g, autoE1EF7D94_u);
        if (autoE1EF7D94_var == null) { break; }
        UnitMagazineArm(autoE1EF7D94_var, AbilityCommand("CarrierHangar", 0), libNtve_gf_DifficultyValueInt(0, 0, 2, 4));
    }
    gf_UpgradeAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "Charge");
    gf_UpgradeAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 1, 0), "ProtossAirWeaponsLevel1");
    gf_UpgradeAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 1, 0), "ProtossGroundWeaponsLevel1");
    gf_UpgradeAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ProtossAirWeaponsLevel1");
    gf_UpgradeAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ProtossAirArmorsLevel1");
    gf_UpgradeAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ProtossGroundArmorsLevel1");
    gf_UpgradeAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ProtossGroundWeaponsLevel1");
    gf_UpgradeAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ExtendedThermalLance");
    gf_UpgradeAllProtoss(1, "PsiStormTech");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Stalker", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Immortal", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Sentry", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Colossus", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Phoenix", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Scout", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Carrier", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("VoidRay", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Archon", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Probe", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("PhotonCannon", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("WarpPrism", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Purifier", false, gv_pLAYER01_USER);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("HighTemplar", false, gv_pLAYER01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Sequence
//--------------------------------------------------------------------------------------------------
bool gt_IntroSequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.1, c_timeReal);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_pLAYER01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PlayerStartLocation(gv_pLAYER01_USER), 1.5);
    CinematicFade(true, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_StartGame, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSequence_Init () {
    gt_IntroSequence = TriggerCreate("gt_IntroSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game
//--------------------------------------------------------------------------------------------------
bool gt_StartGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOn = true;
    TriggerExecute(gt_ColonistsWander, true, false);
    Wait(4.0, c_timeGame);
    TriggerExecute(gt_ObjectiveDestroyNexusCreateQ, true, true);
    TriggerExecute(gt_TransmissionProtossNexusQ, true, false);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_CreateNexusPings, true, false);
    TriggerExecute(gt_ObjectiveDestroyFirstFleetCreateHidden, true, false);
    TriggerExecute(gt_ObjectiveDestroySecondFleetCreateHidden, true, false);
    TriggerExecute(gt_ObjectiveDestroyThirdFleetCreateHidden, true, false);
    Wait(10.0, c_timeGame);
    TriggerExecute(gt_NewUnitVikingTipQ, true, false);
    Wait(10.0, c_timeGame);
    TriggerExecute(gt_TransmissionHelpColonistsQ, true, false);
    Wait(10.0, c_timeGame);
    TriggerExecute(gt_CampaignTipsQ, true, false);
    Wait(60.0, c_timeGame);
    TriggerExecute(gt_PURIFIERIntro, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGame_Init () {
    gt_StartGame = TriggerCreate("gt_StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Nexus Pings
//--------------------------------------------------------------------------------------------------
bool gt_CreateNexusPings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealArea(gv_pLAYER01_USER, RegionCircle(UnitGetPosition(UnitFromId(2466)), 5.0), 6.0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(gv_pLAYER01_USER), "PingObjective", UnitGetPosition(UnitFromId(2466)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    gv_nexusPing1 = PingLastCreated();
    PingSetScale(gv_nexusPing1, 0.8);
    PingSetTooltip(gv_nexusPing1, StringExternal("Param/Value/B69D5FED"));
    Wait(0.5, c_timeGame);
    VisRevealArea(gv_pLAYER01_USER, RegionCircle(UnitGetPosition(UnitFromId(2915)), 5.0), 6.0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(gv_pLAYER01_USER), "PingObjective", UnitGetPosition(UnitFromId(2915)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    gv_nexusPing2 = PingLastCreated();
    PingSetScale(gv_nexusPing2, 0.8);
    PingSetTooltip(gv_nexusPing2, StringExternal("Param/Value/C8230280"));
    Wait(0.5, c_timeGame);
    VisRevealArea(gv_pLAYER01_USER, RegionCircle(UnitGetPosition(UnitFromId(2819)), 5.0), 6.0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(gv_pLAYER01_USER), "PingObjective", UnitGetPosition(UnitFromId(2819)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    gv_nexusPing3 = PingLastCreated();
    PingSetScale(gv_nexusPing3, 0.8);
    PingSetTooltip(gv_nexusPing3, StringExternal("Param/Value/07526857"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateNexusPings_Init () {
    gt_CreateNexusPings = TriggerCreate("gt_CreateNexusPings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroy Nexus Pings
//--------------------------------------------------------------------------------------------------
bool gt_DestroyNexusPings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Nexus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnit() == UnitFromId(2466))) {
        PingDestroy(gv_nexusPing1);
        UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/12560FC5"), null, EventUnit());
        AIToggleBulliesInRegion(gv_pLAYER02_PROTOSS, RegionFromId(20), false);
    }

    if ((EventUnit() == UnitFromId(2915))) {
        PingDestroy(gv_nexusPing2);
        UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/861B84EA"), null, EventUnit());
        AIToggleBulliesInRegion(gv_pLAYER02_PROTOSS, RegionFromId(19), false);
    }

    if ((EventUnit() == UnitFromId(2819))) {
        PingDestroy(gv_nexusPing3);
        UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/B08E2B6C"), null, EventUnit());
        AIToggleBulliesInRegion(gv_pLAYER02_PROTOSS, RegionFromId(7), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestroyNexusPings_Init () {
    gt_DestroyNexusPings = TriggerCreate("gt_DestroyNexusPings_Func");
    TriggerAddEventUnitDied(gt_DestroyNexusPings, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nexus Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_NexusDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Nexus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (gv_nexusBeingDestroyed) {
        Wait(1.0, c_timeGame);
    }
    gv_nexusBeingDestroyed = true;
    gv_nexusDestroyed += 1;
    TriggerExecute(gt_ObjectiveDestroyNexusCreateQ, true, false);
    ObjectiveSetName(gv_primaryObjectiveDestroyProtossNexus, (StringExternal("Param/Value/7CA551C6") + IntToText(gv_nexusDestroyed) + StringExternal("Param/Value/079AD687")));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THanson03AMusicEventB", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    if ((gv_nexusDestroyed == 3)) {
        TriggerExecute(gt_ObjectiveDestroyNexusComplete, true, false);
        Wait(libCamp_gv_campaignObjectiveDelay, c_timeGame);
        TriggerExecute(gt_ObjectiveDestroyPurifierCreateQ, true, false);
        libNtve_gf_ShowHideBossBar(true, gv_purifierBossBar);
        UnitBehaviorRemove(gv_purifier, "InvulnerabilityShield", 1);
        libNtve_gf_MakeUnitInvulnerable(gv_purifier, false);
        UnitSetPropertyFixed(gv_purifier, c_unitPropShields, 1000.0);
        UnitSetPropertyFixed(gv_purifier, c_unitPropShieldsPercent, 0.0);
        UnitSetPropertyFixed(gv_purifier, c_unitPropShieldsRegen, -30.0);
        TriggerEnable(gt_PurifierUsesVortex, true);
    }

    gv_nexusBeingDestroyed = false;
    TriggerExecute(gt_TransmissionNexusDestroyedQ, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NexusDestroyed_Init () {
    gt_NexusDestroyed = TriggerCreate("gt_NexusDestroyed_Func");
    TriggerAddEventUnitDied(gt_NexusDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PURIFIER Intro
//--------------------------------------------------------------------------------------------------
bool gt_PURIFIERIntro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THanson03AMusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerExecute(gt_TransmissionPurifierArrivedQ, true, false);
    TriggerExecute(gt_NewEnemyPurifierTipQ, true, false);
    UnitIssueOrder(gv_purifier, Order(AbilityCommand("PurifierTogglePower", 1)), c_orderQueueReplace);
    libNtve_gf_ShareVisionofUnit(gv_purifier, true, gv_pLAYER01_USER);
    VisRevealArea(gv_pLAYER01_USER, RegionCircle(UnitGetPosition(gv_purifier), 6.0), 10.0, false);
    libNtve_gf_AttachModelToUnit(gv_purifier, "MothershipTeleportIn", "Ref_Center");
    SoundPlayAtPoint(SoundLink("Mothership_Birth", -1), PlayerGroupAll(), UnitGetPosition(gv_purifier), 0.0, 100.0, 0.0);
    Wait(1.5, c_timeGame);
    libNtve_gf_ShowHideUnit(gv_purifier, true);
    libNtve_gf_PauseUnit(gv_purifier, false);
    UnitBehaviorAdd(gv_purifier, "InvulnerabilityShield", gv_purifier, 1);
    libNtve_gf_AttachModelToUnit(gv_purifier, "MothershipTeleportOut", "Ref_Center");
    Wait(2.666, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(gv_pLAYER01_USER), "PingBoss", UnitGetPosition(gv_purifier), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetUnit(PingLastCreated(), gv_purifier);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/337BB934"));
    PingSetScale(PingLastCreated(), 0.85);
    gv_purifierPing = PingLastCreated();
    TriggerExecute(gt_CreatePurifierBossBar, true, false);
    Wait(4.0, c_timeGame);
    TriggerExecute(gt_ShowPathtoAlphaBase, true, false);
    UnitIssueOrder(gv_purifier, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1065)), c_orderQueueReplace);
    UnitIssueOrder(gv_purifier, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(13))), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PURIFIERIntro_Init () {
    gt_PURIFIERIntro = TriggerCreate("gt_PURIFIERIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Purifier Boss Bar
//--------------------------------------------------------------------------------------------------
bool gt_CreatePurifierBossBar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_DisplayBossBar(1, "Assets\\Textures\\btn-unit-protoss-mothership.dds", StringExternal("Param/Value/8B755AF6"), FixedToInt(UnitGetPropertyFixed(gv_purifier, c_unitPropLifeMax, c_unitPropCurrent)), PlayerGroupAll());
    gv_purifierBossBar = 1;
    libNtve_gf_SetBossBarRace(gv_purifierBossBar, libNtve_ge_BossBarRace_Protoss, true);
    libNtve_gf_SetBossBarMaximumValue(gv_purifierBossBar, FixedToInt(UnitGetPropertyFixed(gv_purifier, c_unitPropLifeMax, c_unitPropCurrent)), true);
    libNtve_gf_SetBossBarCurrentValue(gv_purifierBossBar, FixedToInt(UnitGetPropertyFixed(gv_purifier, c_unitPropLife, c_unitPropCurrent)), true);
    libNtve_gf_MoveBossBar(gv_purifierBossBar, c_anchorTop, 0, 50);
    libNtve_gf_ShowHideBossBar(false, gv_purifierBossBar);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreatePurifierBossBar_Init () {
    gt_CreatePurifierBossBar = TriggerCreate("gt_CreatePurifierBossBar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Purifier Boss Bar
//--------------------------------------------------------------------------------------------------
bool gt_UpdatePurifierBossBar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_purifier))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetBossBarCurrentValue(gv_purifierBossBar, FixedToInt(UnitGetPropertyFixed(gv_purifier, c_unitPropLife, c_unitPropCurrent)), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdatePurifierBossBar_Init () {
    gt_UpdatePurifierBossBar = TriggerCreate("gt_UpdatePurifierBossBar_Func");
    TriggerAddEventUnitProperty(gt_UpdatePurifierBossBar, null, c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Eradication Point Alpha
//--------------------------------------------------------------------------------------------------
bool gt_EradicationPointAlpha_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_aLERT_WAIT_TIME;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Purifier"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER04_PURIFIER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_purifierProgressCounter = 1;
    Wait(3.0, c_timeGame);
    if ((UnitIsAlive(gv_purifier) == false)) {
        return true;
    }

    UnitIssueOrder(gv_purifier, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(13))), c_orderQueueReplace);
    UnitIssueOrder(gv_purifier, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_purifier, Order(AbilityCommand("PurifierTogglePower", 0)), c_orderQueueAddToEnd);
    Wait(5.0, c_timeGame);
    if ((UnitIsAlive(gv_purifier) == false)) {
        return true;
    }

    TimerStart(gv_poweringUpTime, gv_pOWER_UP_TIME, false, c_timeGame);
    gv_powerUpTimeProgress = 0.0;
    UnitBehaviorAdd(gv_purifier, "ProgressBar", gv_purifier, 1);
    UnitBehaviorSetDuration(gv_purifier, "ProgressBar", FixedToInt(TimerGetRemaining(gv_poweringUpTime)));
    UnitForceStatusBar(gv_purifier, true);
    UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/BFCA447F"), null, gv_purifier);
    lv_aLERT_WAIT_TIME = (SoundLengthSync(SoundLink("THanson03AHorner00003", -1)) + SoundLengthSync(SoundLink("UI_TerranKlaxonAlert", -1)));
    Wait((gv_pOWER_UP_TIME - lv_aLERT_WAIT_TIME), c_timeGame);
    if ((UnitIsAlive(gv_purifier) == false)) {
        return true;
    }

    TriggerExecute(gt_TransmissionPurifierAboutToFire, true, false);
    Wait(lv_aLERT_WAIT_TIME, c_timeGame);
    if ((UnitIsAlive(gv_purifier) == false)) {
        return true;
    }

    UnitIssueOrder(gv_purifier, Order(AbilityCommand("PurifierPlanetCracker", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_purifier, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    libNtve_gf_SendActorMessageToGameRegion(RegionFromId(29), "Signal TreeFire");
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_purifier), 5.0, Color(100.00, 0.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/7DF9501A"), null, gv_purifier);
    VisRevealerEnable(gv_colonist_Outpost_Alpha, false);
    Wait(10.0, c_timeGame);
    if ((UnitIsAlive(gv_purifier) == false)) {
        return true;
    }

    ActorSend(gv_planetCrackerHoleAlpha, "SetVisibility 1");
    ActorSend(gv_planetCrackerHoleAlpha, "Signal Purified");
    TerrainShowRegion(RegionFromId(38), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Blocker6x6", c_unitCreateIgnorePlacement, 0, PointFromId(877));
    Wait(10.0, c_timeGame);
    if ((UnitIsAlive(gv_purifier) == false)) {
        return true;
    }

    TriggerExecute(gt_PurifierAfterAlpha, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EradicationPointAlpha_Init () {
    gt_EradicationPointAlpha = TriggerCreate("gt_EradicationPointAlpha_Func");
    TriggerAddEventUnitRegion(gt_EradicationPointAlpha, null, RegionFromId(13), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Eradication Point Beta
//--------------------------------------------------------------------------------------------------
bool gt_EradicationPointBeta_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_aLERT_WAIT_TIME;

    // Automatic Variable Declarations
    unitgroup auto2B8B6529_g;
    int auto2B8B6529_u;
    unit auto2B8B6529_var;
    unitgroup auto7342DFD2_g;
    int auto7342DFD2_u;
    unit auto7342DFD2_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER04_PURIFIER))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Purifier"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_purifierProgressCounter = 2;
    Wait(3.0, c_timeGame);
    if ((UnitIsAlive(gv_purifier) == false)) {
        return true;
    }

    UnitIssueOrder(gv_purifier, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(15))), c_orderQueueReplace);
    UnitIssueOrder(gv_purifier, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_purifier, Order(AbilityCommand("PurifierTogglePower", 0)), c_orderQueueAddToEnd);
    Wait(5.0, c_timeGame);
    if ((UnitIsAlive(gv_purifier) == false)) {
        return true;
    }

    TimerStart(gv_poweringUpTime, gv_pOWER_UP_TIME, false, c_timeGame);
    gv_powerUpTimeProgress = 0.0;
    UnitBehaviorAdd(gv_purifier, "ProgressBar", gv_purifier, 1);
    UnitBehaviorSetDuration(gv_purifier, "ProgressBar", FixedToInt(TimerGetRemaining(gv_poweringUpTime)));
    UnitForceStatusBar(gv_purifier, true);
    UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/BF5546F5"), null, gv_purifier);
    lv_aLERT_WAIT_TIME = (SoundLengthSync(SoundLink("THanson03AHanson00009", -1)) + SoundLengthSync(SoundLink("UI_TerranKlaxonAlert", -1)));
    Wait((gv_pOWER_UP_TIME - lv_aLERT_WAIT_TIME), c_timeGame);
    if ((UnitIsAlive(gv_purifier) == false)) {
        return true;
    }

    TriggerExecute(gt_TransmissionPurifierAboutToFire, true, false);
    Wait(lv_aLERT_WAIT_TIME, c_timeGame);
    UnitIssueOrder(gv_purifier, Order(AbilityCommand("PurifierPlanetCracker", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_purifier, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    libNtve_gf_SendActorMessageToGameRegion(RegionFromId(37), "Signal TreeFire");
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_purifier), 5.0, Color(100.00, 0.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/566CCFAE"), null, gv_purifier);
    VisRevealerEnable(gv_colonist_Outpost_Beta, false);
    auto2B8B6529_g = UnitGroup("PalletMinerals", c_playerAny, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2B8B6529_u = UnitGroupCount(auto2B8B6529_g, c_unitCountAll);
    for (;; auto2B8B6529_u -= 1) {
        auto2B8B6529_var = UnitGroupUnitFromEnd(auto2B8B6529_g, auto2B8B6529_u);
        if (auto2B8B6529_var == null) { break; }
        UnitKill(auto2B8B6529_var);
    }
    auto7342DFD2_g = UnitGroup("PalletGas", c_playerAny, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7342DFD2_u = UnitGroupCount(auto7342DFD2_g, c_unitCountAll);
    for (;; auto7342DFD2_u -= 1) {
        auto7342DFD2_var = UnitGroupUnitFromEnd(auto7342DFD2_g, auto7342DFD2_u);
        if (auto7342DFD2_var == null) { break; }
        UnitKill(auto7342DFD2_var);
    }
    Wait(10.0, c_timeGame);
    if ((UnitIsAlive(gv_purifier) == false)) {
        return true;
    }

    ActorSend(gv_planetCrackerHoleBeta, "SetVisibility 1");
    ActorSend(gv_planetCrackerHoleBeta, "Signal Purified");
    TerrainShowRegion(RegionFromId(39), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Blocker6x6", c_unitCreateIgnorePlacement, 0, PointFromId(613));
    Wait(10.0, c_timeGame);
    if ((UnitIsAlive(gv_purifier) == false)) {
        return true;
    }

    TriggerExecute(gt_PurifierAfterBeta, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EradicationPointBeta_Init () {
    gt_EradicationPointBeta = TriggerCreate("gt_EradicationPointBeta_Func");
    TriggerAddEventUnitRegion(gt_EradicationPointBeta, null, RegionFromId(15), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Eradication Point Gamma
//--------------------------------------------------------------------------------------------------
bool gt_EradicationPointGamma_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_aLERT_WAIT_TIME;

    // Automatic Variable Declarations
    unitgroup auto3342A984_g;
    int auto3342A984_u;
    unit auto3342A984_var;
    unitgroup auto310B3AEC_g;
    int auto310B3AEC_u;
    unit auto310B3AEC_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER04_PURIFIER))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Purifier"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_purifierProgressCounter = 3;
    Wait(3.0, c_timeGame);
    if ((UnitIsAlive(gv_purifier) == false)) {
        return true;
    }

    UnitIssueOrder(gv_purifier, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(16))), c_orderQueueReplace);
    UnitIssueOrder(gv_purifier, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_purifier, Order(AbilityCommand("PurifierTogglePower", 0)), c_orderQueueAddToEnd);
    Wait(5.0, c_timeGame);
    if ((UnitIsAlive(gv_purifier) == false)) {
        return true;
    }

    TimerStart(gv_poweringUpTime, gv_pOWER_UP_TIME, false, c_timeGame);
    gv_powerUpTimeProgress = 0.0;
    UnitBehaviorAdd(gv_purifier, "ProgressBar", gv_purifier, 1);
    UnitBehaviorSetDuration(gv_purifier, "ProgressBar", FixedToInt(TimerGetRemaining(gv_poweringUpTime)));
    UnitForceStatusBar(gv_purifier, true);
    UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/D1A1218F"), null, gv_purifier);
    lv_aLERT_WAIT_TIME = (SoundLengthSync(SoundLink("THanson03AHorner00008", -1)) + SoundLengthSync(SoundLink("UI_TerranKlaxonAlert", -1)));
    Wait((gv_pOWER_UP_TIME - lv_aLERT_WAIT_TIME), c_timeGame);
    if ((UnitIsAlive(gv_purifier) == false)) {
        return true;
    }

    TriggerExecute(gt_TransmissionPurifierAboutToFire, true, false);
    Wait(lv_aLERT_WAIT_TIME, c_timeGame);
    if ((UnitIsAlive(gv_purifier) == false)) {
        return true;
    }

    UnitIssueOrder(gv_purifier, Order(AbilityCommand("PurifierPlanetCracker", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_purifier, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    libNtve_gf_SendActorMessageToGameRegion(RegionFromId(35), "Signal TreeFire");
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_purifier), 5.0, Color(100.00, 0.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/29BEE0AA"), null, gv_purifier);
    VisRevealerEnable(gv_colonist_Outpost_Gamma, false);
    auto3342A984_g = UnitGroup("PalletMinerals", c_playerAny, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3342A984_u = UnitGroupCount(auto3342A984_g, c_unitCountAll);
    for (;; auto3342A984_u -= 1) {
        auto3342A984_var = UnitGroupUnitFromEnd(auto3342A984_g, auto3342A984_u);
        if (auto3342A984_var == null) { break; }
        UnitKill(auto3342A984_var);
    }
    auto310B3AEC_g = UnitGroup("PalletGas", c_playerAny, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto310B3AEC_u = UnitGroupCount(auto310B3AEC_g, c_unitCountAll);
    for (;; auto310B3AEC_u -= 1) {
        auto310B3AEC_var = UnitGroupUnitFromEnd(auto310B3AEC_g, auto310B3AEC_u);
        if (auto310B3AEC_var == null) { break; }
        UnitKill(auto310B3AEC_var);
    }
    Wait(10.0, c_timeGame);
    if ((UnitIsAlive(gv_purifier) == false)) {
        return true;
    }

    ActorSend(gv_planetCrackerHoleGamma, "SetVisibility 1");
    ActorSend(gv_planetCrackerHoleGamma, "Signal Purified");
    TerrainShowRegion(RegionFromId(40), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Blocker6x6", 0, 0, PointFromId(1713));
    Wait(10.0, c_timeGame);
    if ((UnitIsAlive(gv_purifier) == false)) {
        return true;
    }

    TriggerExecute(gt_PurifierAfterGamma, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EradicationPointGamma_Init () {
    gt_EradicationPointGamma = TriggerCreate("gt_EradicationPointGamma_Func");
    TriggerAddEventUnitRegion(gt_EradicationPointGamma, null, RegionFromId(16), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Eradication Point Omega
//--------------------------------------------------------------------------------------------------
bool gt_EradicationPointOmega_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_aLERT_WAIT_TIME;

    // Automatic Variable Declarations
    unitgroup auto679CDD5D_g;
    int auto679CDD5D_u;
    unit auto679CDD5D_var;
    unitgroup auto61876AB1_g;
    int auto61876AB1_u;
    unit auto61876AB1_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER04_PURIFIER))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Purifier"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_purifierProgressCounter = 4;
    Wait(3.0, c_timeGame);
    if ((UnitIsAlive(gv_purifier) == false)) {
        return true;
    }

    UnitIssueOrder(gv_purifier, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(17))), c_orderQueueReplace);
    UnitIssueOrder(gv_purifier, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_purifier, Order(AbilityCommand("PurifierTogglePower", 0)), c_orderQueueAddToEnd);
    Wait(5.0, c_timeGame);
    if ((UnitIsAlive(gv_purifier) == false)) {
        return true;
    }

    TimerStart(gv_poweringUpTime, gv_pOWER_UP_TIME, false, c_timeGame);
    gv_powerUpTimeProgress = 0.0;
    UnitBehaviorAdd(gv_purifier, "ProgressBar", gv_purifier, 1);
    UnitBehaviorSetDuration(gv_purifier, "ProgressBar", FixedToInt(TimerGetRemaining(gv_poweringUpTime)));
    UnitForceStatusBar(gv_purifier, true);
    UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/F6DE8350"), null, gv_purifier);
    lv_aLERT_WAIT_TIME = (SoundLengthSync(SoundLink("THanson03ARaynor00005", -1)) + SoundLengthSync(SoundLink("UI_TerranKlaxonAlert", -1)));
    Wait((gv_pOWER_UP_TIME - lv_aLERT_WAIT_TIME), c_timeGame);
    if ((UnitIsAlive(gv_purifier) == false)) {
        return true;
    }

    TriggerExecute(gt_TransmissionPurifierAboutToFire, true, false);
    Wait(lv_aLERT_WAIT_TIME, c_timeGame);
    if ((UnitIsAlive(gv_purifier) == false)) {
        return true;
    }

    UnitIssueOrder(gv_purifier, Order(AbilityCommand("PurifierPlanetCracker", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_purifier, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    libNtve_gf_SendActorMessageToGameRegion(RegionFromId(36), "Signal TreeFire");
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_purifier), 5.0, Color(100.00, 0.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/631AAC7F"), null, gv_purifier);
    VisRevealerEnable(gv_colonist_Outpost_Omega, false);
    auto679CDD5D_g = UnitGroup("PalletMinerals", c_playerAny, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto679CDD5D_u = UnitGroupCount(auto679CDD5D_g, c_unitCountAll);
    for (;; auto679CDD5D_u -= 1) {
        auto679CDD5D_var = UnitGroupUnitFromEnd(auto679CDD5D_g, auto679CDD5D_u);
        if (auto679CDD5D_var == null) { break; }
        UnitKill(auto679CDD5D_var);
    }
    auto61876AB1_g = UnitGroup("PalletGas", c_playerAny, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto61876AB1_u = UnitGroupCount(auto61876AB1_g, c_unitCountAll);
    for (;; auto61876AB1_u -= 1) {
        auto61876AB1_var = UnitGroupUnitFromEnd(auto61876AB1_g, auto61876AB1_u);
        if (auto61876AB1_var == null) { break; }
        UnitKill(auto61876AB1_var);
    }
    Wait(10.0, c_timeGame);
    if ((UnitIsAlive(gv_purifier) == false)) {
        return true;
    }

    ActorSend(gv_planetCrackerHoleOmega, "SetVisibility 1");
    ActorSend(gv_planetCrackerHoleOmega, "Signal Purified");
    TerrainShowRegion(RegionFromId(41), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Blocker6x6", 0, 0, PointFromId(1258));
    Wait(10.0, c_timeGame);
    if ((UnitIsAlive(gv_purifier) == false)) {
        return true;
    }

    TriggerExecute(gt_PurifierAfterOmega, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EradicationPointOmega_Init () {
    gt_EradicationPointOmega = TriggerCreate("gt_EradicationPointOmega_Func");
    TriggerAddEventUnitRegion(gt_EradicationPointOmega, null, RegionFromId(17), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Eradicate Players Base
//--------------------------------------------------------------------------------------------------
bool gt_EradicatePlayersBase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_aLERT_WAIT_TIME;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER04_PURIFIER))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Purifier"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_purifierProgressCounter = 5;
    Wait(3.0, c_timeGame);
    if ((UnitIsAlive(gv_purifier) == false)) {
        return true;
    }

    UnitIssueOrder(gv_purifier, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(22))), c_orderQueueReplace);
    UnitIssueOrder(gv_purifier, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_purifier, Order(AbilityCommand("PurifierTogglePower", 0)), c_orderQueueAddToEnd);
    Wait(5.0, c_timeGame);
    if ((UnitIsAlive(gv_purifier) == false)) {
        return true;
    }

    TimerStart(gv_poweringUpTime, gv_pOWER_UP_TIME, false, c_timeGame);
    gv_powerUpTimeProgress = 0.0;
    UnitBehaviorAdd(gv_purifier, "ProgressBar", gv_purifier, 1);
    UnitBehaviorSetDuration(gv_purifier, "ProgressBar", FixedToInt(TimerGetRemaining(gv_poweringUpTime)));
    UnitForceStatusBar(gv_purifier, true);
    UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/CCF54A48"), null, gv_purifier);
    lv_aLERT_WAIT_TIME = (SoundLengthSync(SoundLink("THanson03ARaynor00006", -1)) + SoundLengthSync(SoundLink("UI_TerranKlaxonAlert", -1)));
    Wait((gv_pOWER_UP_TIME - lv_aLERT_WAIT_TIME), c_timeGame);
    if ((UnitIsAlive(gv_purifier) == false)) {
        return true;
    }

    TriggerExecute(gt_TransmissionPurifierAboutToFire, true, false);
    Wait(lv_aLERT_WAIT_TIME, c_timeGame);
    if ((UnitIsAlive(gv_purifier) == false)) {
        return true;
    }

    UnitIssueOrder(gv_purifier, Order(AbilityCommand("PurifierPlanetCracker", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_purifier, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_purifier), 5.0, Color(100.00, 0.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/959C4F19"), null, gv_purifier);
    Wait(10.0, c_timeGame);
    if ((UnitIsAlive(gv_purifier) == false)) {
        return true;
    }

    ActorSend(gv_planetCrackerHolePlayerBase, "SetVisibility 1");
    ActorSend(gv_planetCrackerHolePlayerBase, "Signal Purified");
    TerrainShowRegion(RegionFromId(42), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Blocker6x6", 0, 0, PointFromId(1992));
    Wait(10.0, c_timeGame);
    if ((UnitIsAlive(gv_purifier) == false)) {
        return true;
    }

    TriggerExecute(gt_DefeatColoniesDestroyed, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EradicatePlayersBase_Init () {
    gt_EradicatePlayersBase = TriggerCreate("gt_EradicatePlayersBase_Func");
    TriggerAddEventUnitRegion(gt_EradicatePlayersBase, null, RegionFromId(22), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier Uses Vortex
//--------------------------------------------------------------------------------------------------
bool gt_PurifierUsesVortex_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_target_Group;

    // Automatic Variable Declarations
    unitgroup auto7D21AEAB_g;
    int auto7D21AEAB_u;
    unit auto7D21AEAB_var;

    // Variable Initialization
    lv_target_Group = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER01_USER, RegionCircle(UnitGetPosition(UnitFromId(765)), 12.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 6))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_target_Group = UnitGroup(null, gv_pLAYER01_USER, RegionCircle(UnitGetPosition(UnitFromId(765)), 12.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitIssueOrder(gv_purifier, OrderTargetingPoint(AbilityCommand("VortexPurifier", 0), UnitGetPosition(UnitGroupRandomUnit(lv_target_Group, c_unitCountAlive))), c_orderQueueAddToFront);
    Wait(4.0, c_timeGame);
    gf_TerrorFleetWarpIn(libNtve_gf_DifficultyValueInt(4, 5, 6, 8), AbilityCommand("SuperWarpGateTrain", 1), 4.0, 45.0, 0.0);
    gf_TerrorFleetWarpIn(libNtve_gf_DifficultyValueInt(0, 2, 0, 0), AbilityCommand("SuperWarpGateTrain", 7), 4.0, 33.0, 0.0);
    gf_TerrorFleetWarpIn(libNtve_gf_DifficultyValueInt(0, 0, 2, 4), AbilityCommand("SuperWarpGateTrain", 6), 4.0, 33.0, 0.0);
    Wait(8.0, c_timeGame);
    UnitIssueOrder(gv_purifier, OrderTargetingPoint(AbilityCommand("move", 0), gv_purifierMainTarget), c_orderQueueAddToEnd);
    auto7D21AEAB_g = UnitGroup(null, gv_pLAYER06_TERRORFLEET, RegionCircle(UnitGetPosition(gv_purifier), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7D21AEAB_u = UnitGroupCount(auto7D21AEAB_g, c_unitCountAll);
    for (;; auto7D21AEAB_u -= 1) {
        auto7D21AEAB_var = UnitGroupUnitFromEnd(auto7D21AEAB_g, auto7D21AEAB_u);
        if (auto7D21AEAB_var == null) { break; }
        UnitGroupRemove(gv_terrorFleetGroup, auto7D21AEAB_var);
        AISetUnitSuicide(auto7D21AEAB_var, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifierUsesVortex_Init () {
    gt_PurifierUsesVortex = TriggerCreate("gt_PurifierUsesVortex_Func");
    TriggerEnable(gt_PurifierUsesVortex, false);
    TriggerAddEventTimePeriodic(gt_PurifierUsesVortex, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier After Alpha
//--------------------------------------------------------------------------------------------------
bool gt_PurifierAfterAlpha_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_colonyOutpostsSaved = 4;
    TriggerExecute(gt_WarpInBetaTerrorFleet, true, false);
    TriggerEnable(gt_TerrorFleetBetaDestroyed, true);
    TriggerEnable(gt_ColonistBehavioratBaseBeta, false);
    Wait(20.0, c_timeGame);
    TriggerExecute(gt_SendBetaBaseTerrorFleet, true, false);
    Wait(40.0, c_timeGame);
    TriggerExecute(gt_ShowPathtoBetaBase, true, false);
    UnitIssueOrder(gv_purifier, Order(AbilityCommand("PurifierTogglePower", 1)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_purifier, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1061)), c_orderQueueReplace);
    UnitIssueOrder(gv_purifier, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1592)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_purifier, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(15))), c_orderQueueAddToEnd);
    gv_purifierMainTarget = RegionGetCenter(RegionFromId(15));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifierAfterAlpha_Init () {
    gt_PurifierAfterAlpha = TriggerCreate("gt_PurifierAfterAlpha_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier After Beta
//--------------------------------------------------------------------------------------------------
bool gt_PurifierAfterBeta_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_colonyOutpostsSaved = 3;
    TriggerExecute(gt_WarpInGammaTerrorFleet, true, false);
    TriggerEnable(gt_TerrorFleetGammaDestroyed, true);
    TriggerEnable(gt_ColonistBehavioratBaseGamma, false);
    Wait(20.0, c_timeGame);
    TriggerEnable(gt_SendGammaBaseTerrorFleet, true);
    TriggerExecute(gt_SendGammaBaseTerrorFleet, true, false);
    Wait(40.0, c_timeGame);
    TriggerExecute(gt_ShowPathtoGammaBase, true, false);
    UnitIssueOrder(gv_purifier, Order(AbilityCommand("PurifierTogglePower", 1)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_purifier, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(796)), c_orderQueueReplace);
    UnitIssueOrder(gv_purifier, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(797)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_purifier, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(16))), c_orderQueueAddToEnd);
    gv_purifierMainTarget = RegionGetCenter(RegionFromId(16));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifierAfterBeta_Init () {
    gt_PurifierAfterBeta = TriggerCreate("gt_PurifierAfterBeta_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier After Gamma
//--------------------------------------------------------------------------------------------------
bool gt_PurifierAfterGamma_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_colonyOutpostsSaved = 2;
    TriggerExecute(gt_WarpInOmegaTerrorFleet, true, false);
    TriggerEnable(gt_TerrorFleetOmegaDestroyed, true);
    TriggerEnable(gt_ColonistBehavioratBaseOmega, false);
    Wait(20.0, c_timeGame);
    TriggerEnable(gt_SendOmegaBaseTerrorFleet, true);
    TriggerExecute(gt_SendOmegaBaseTerrorFleet, true, false);
    Wait(40.0, c_timeGame);
    TriggerExecute(gt_ShowPathtoOmegaBase, true, false);
    UnitIssueOrder(gv_purifier, Order(AbilityCommand("PurifierTogglePower", 1)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_purifier, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1083)), c_orderQueueReplace);
    UnitIssueOrder(gv_purifier, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(17))), c_orderQueueAddToEnd);
    gv_purifierMainTarget = RegionGetCenter(RegionFromId(17));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifierAfterGamma_Init () {
    gt_PurifierAfterGamma = TriggerCreate("gt_PurifierAfterGamma_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier After Omega
//--------------------------------------------------------------------------------------------------
bool gt_PurifierAfterOmega_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_colonyOutpostsSaved = 1;
    Wait(20.0, c_timeGame);
    UnitIssueOrder(gv_purifier, Order(AbilityCommand("PurifierTogglePower", 1)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_purifier, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(22))), c_orderQueueReplace);
    gv_purifierMainTarget = RegionGetCenter(RegionFromId(22));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifierAfterOmega_Init () {
    gt_PurifierAfterOmega = TriggerCreate("gt_PurifierAfterOmega_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Beta Base Terror Fleet
//--------------------------------------------------------------------------------------------------
bool gt_SendBetaBaseTerrorFleet_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto567D6800_g;
    int auto567D6800_u;
    unit auto567D6800_var;
    unitgroup autoFAAF9A4E_g;
    int autoFAAF9A4E_u;
    unit autoFAAF9A4E_var;
    unitgroup autoFE858403_g;
    int autoFE858403_u;
    unit autoFE858403_var;
    unitgroup autoAA05245A_g;
    int autoAA05245A_u;
    unit autoAA05245A_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_terrorFleetGroup, c_unitCountAlive) != 0)) {
        ObjectiveShow(gv_bonusObjectiveDestroyFirstTerrorFleet, PlayerGroupAll(), true);
        TriggerEnable(gt_TerrorFleetBetaBaseBehavior, true);
        TriggerExecute(gt_TransmissionFirstTerrorFleetWarningQ, true, false);
        PingCreate(PlayerGroupSingle(gv_pLAYER01_USER), "PingWarning", libNtve_gf_CenterOfUnitGroup(gv_terrorFleetGroup), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
        auto567D6800_g = gv_terrorFleetGroup;
        auto567D6800_u = UnitGroupCount(auto567D6800_g, c_unitCountAll);
        for (;; auto567D6800_u -= 1) {
            auto567D6800_var = UnitGroupUnitFromEnd(auto567D6800_g, auto567D6800_u);
            if (auto567D6800_var == null) { break; }
            libNtve_gf_ShareVisionofUnit(auto567D6800_var, true, gv_pLAYER01_USER);
        }
        gv_terrorFleetPing = PingLastCreated();
        TriggerEnable(gt_TerrorFleetPing, true);
        UnitGroupIssueOrder(gv_terrorFleetGroup, OrderSetAutoCast(AbilityCommand("CarrierHangar", 0), true), c_orderQueueReplace);
        UnitGroupIssueOrder(gv_terrorFleetGroup, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1061)), c_orderQueueReplace);
        UnitGroupIssueOrder(gv_terrorFleetGroup, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1592)), c_orderQueueAddToEnd);
        gf_TerrorFleetrepeatingmove(gv_terrorFleetGroup, RegionFromId(11));
        while (!((UnitGroupCount(UnitGroup("ColonistShip", gv_pLAYER03_COLONIST, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            Wait(0.5, c_timeGame);
        }
        if ((gv_firstFleetObjectiveFailed == false)) {
            gv_firstFleetObjectiveFailed = true;
            TriggerExecute(gt_ObjectiveDestroyFirstFleetFailed, true, false);
        }

        autoFAAF9A4E_g = gv_terrorFleetGroup;
        autoFAAF9A4E_u = UnitGroupCount(autoFAAF9A4E_g, c_unitCountAll);
        for (;; autoFAAF9A4E_u -= 1) {
            autoFAAF9A4E_var = UnitGroupUnitFromEnd(autoFAAF9A4E_g, autoFAAF9A4E_u);
            if (autoFAAF9A4E_var == null) { break; }
            libNtve_gf_ShareVisionofUnit(autoFAAF9A4E_var, false, gv_pLAYER01_USER);
            UnitIssueOrder(autoFAAF9A4E_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(31))), c_orderQueueReplace);
        }
        autoFE858403_g = UnitGroup("PathingBlocker1x1", 0, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoFE858403_u = UnitGroupCount(autoFE858403_g, c_unitCountAll);
        for (;; autoFE858403_u -= 1) {
            autoFE858403_var = UnitGroupUnitFromEnd(autoFE858403_g, autoFE858403_u);
            if (autoFE858403_var == null) { break; }
            UnitRemove(autoFE858403_var);
        }
        autoAA05245A_g = UnitGroup("PathingBlocker2x2", 0, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoAA05245A_u = UnitGroupCount(autoAA05245A_g, c_unitCountAll);
        for (;; autoAA05245A_u -= 1) {
            autoAA05245A_var = UnitGroupUnitFromEnd(autoAA05245A_g, autoAA05245A_u);
            if (autoAA05245A_var == null) { break; }
            UnitRemove(autoAA05245A_var);
        }
        TriggerEnable(gt_TerrorFleetBetaDestroyed, false);
        TriggerEnable(gt_ColonistsEvacuateBaseBeta, false);
        TriggerEnable(gt_TerrorFleetPing, false);
        TriggerStop(gt_TerrorFleetPing);
        PingDestroy(gv_terrorFleetPing);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendBetaBaseTerrorFleet_Init () {
    gt_SendBetaBaseTerrorFleet = TriggerCreate("gt_SendBetaBaseTerrorFleet_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Gamma Base Terror Fleet
//--------------------------------------------------------------------------------------------------
bool gt_SendGammaBaseTerrorFleet_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoDB0C784B_g;
    int autoDB0C784B_u;
    unit autoDB0C784B_var;
    unitgroup auto57D658B2_g;
    int auto57D658B2_u;
    unit auto57D658B2_var;
    unitgroup auto61748A2E_g;
    int auto61748A2E_u;
    unit auto61748A2E_var;
    unitgroup auto751EF2C3_g;
    int auto751EF2C3_u;
    unit auto751EF2C3_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_terrorFleetGroup, c_unitCountAlive) != 0)) {
        ObjectiveShow(gv_bonusObjectiveDestroySecondTerrorFleet, PlayerGroupAll(), true);
        TriggerEnable(gt_TerrorFleetGammaBaseBehavior, true);
        TriggerExecute(gt_TransmissionSecondTerrorFleetWarningQ, true, false);
        PingCreate(PlayerGroupSingle(gv_pLAYER01_USER), "PingWarning", libNtve_gf_CenterOfUnitGroup(gv_terrorFleetGroup), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
        autoDB0C784B_g = gv_terrorFleetGroup;
        autoDB0C784B_u = UnitGroupCount(autoDB0C784B_g, c_unitCountAll);
        for (;; autoDB0C784B_u -= 1) {
            autoDB0C784B_var = UnitGroupUnitFromEnd(autoDB0C784B_g, autoDB0C784B_u);
            if (autoDB0C784B_var == null) { break; }
            libNtve_gf_ShareVisionofUnit(autoDB0C784B_var, true, gv_pLAYER01_USER);
        }
        gv_terrorFleetPing = PingLastCreated();
        TriggerEnable(gt_TerrorFleetPing, true);
        gf_TerrorFleetrepeatingmove(gv_terrorFleetGroup, RegionFromId(12));
        while (!((UnitGroupCount(UnitGroup("ColonistShip", gv_pLAYER03_COLONIST, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            Wait(0.5, c_timeGame);
        }
        if ((gv_secondFleetObjectiveFailed == false)) {
            gv_secondFleetObjectiveFailed = true;
            TriggerExecute(gt_ObjectiveDestroySecondFleetFailed, true, false);
        }

        auto57D658B2_g = gv_terrorFleetGroup;
        auto57D658B2_u = UnitGroupCount(auto57D658B2_g, c_unitCountAll);
        for (;; auto57D658B2_u -= 1) {
            auto57D658B2_var = UnitGroupUnitFromEnd(auto57D658B2_g, auto57D658B2_u);
            if (auto57D658B2_var == null) { break; }
            libNtve_gf_ShareVisionofUnit(auto57D658B2_var, false, gv_pLAYER01_USER);
            UnitIssueOrder(auto57D658B2_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(32))), c_orderQueueReplace);
        }
        auto61748A2E_g = UnitGroup("PathingBlocker1x1", 0, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto61748A2E_u = UnitGroupCount(auto61748A2E_g, c_unitCountAll);
        for (;; auto61748A2E_u -= 1) {
            auto61748A2E_var = UnitGroupUnitFromEnd(auto61748A2E_g, auto61748A2E_u);
            if (auto61748A2E_var == null) { break; }
            UnitRemove(auto61748A2E_var);
        }
        auto751EF2C3_g = UnitGroup("PathingBlocker2x2", 0, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto751EF2C3_u = UnitGroupCount(auto751EF2C3_g, c_unitCountAll);
        for (;; auto751EF2C3_u -= 1) {
            auto751EF2C3_var = UnitGroupUnitFromEnd(auto751EF2C3_g, auto751EF2C3_u);
            if (auto751EF2C3_var == null) { break; }
            UnitRemove(auto751EF2C3_var);
        }
        TriggerEnable(gt_TerrorFleetGammaDestroyed, false);
        TriggerEnable(gt_ColonistsEvacuateBaseGamma, false);
        TriggerEnable(gt_TerrorFleetPing, false);
        TriggerStop(gt_TerrorFleetPing);
        PingDestroy(gv_terrorFleetPing);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendGammaBaseTerrorFleet_Init () {
    gt_SendGammaBaseTerrorFleet = TriggerCreate("gt_SendGammaBaseTerrorFleet_Func");
    TriggerEnable(gt_SendGammaBaseTerrorFleet, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Omega Base Terror Fleet
//--------------------------------------------------------------------------------------------------
bool gt_SendOmegaBaseTerrorFleet_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2B21D5ED_g;
    int auto2B21D5ED_u;
    unit auto2B21D5ED_var;
    unitgroup auto896DDA8A_g;
    int auto896DDA8A_u;
    unit auto896DDA8A_var;
    unitgroup auto6FA0985D_g;
    int auto6FA0985D_u;
    unit auto6FA0985D_var;
    unitgroup auto2EF830BF_g;
    int auto2EF830BF_u;
    unit auto2EF830BF_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_terrorFleetGroup, c_unitCountAlive) != 0)) {
        ObjectiveShow(gv_bonusObjectiveDestroyThirdTerrorFleet, PlayerGroupAll(), true);
        TriggerEnable(gt_TerrorFleetOmegaBaseBehavior, true);
        TriggerExecute(gt_TransmissionThirdTerrorFleetWarningQ, true, false);
        PingCreate(PlayerGroupSingle(gv_pLAYER01_USER), "PingWarning", libNtve_gf_CenterOfUnitGroup(gv_terrorFleetGroup), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
        auto2B21D5ED_g = gv_terrorFleetGroup;
        auto2B21D5ED_u = UnitGroupCount(auto2B21D5ED_g, c_unitCountAll);
        for (;; auto2B21D5ED_u -= 1) {
            auto2B21D5ED_var = UnitGroupUnitFromEnd(auto2B21D5ED_g, auto2B21D5ED_u);
            if (auto2B21D5ED_var == null) { break; }
            libNtve_gf_ShareVisionofUnit(auto2B21D5ED_var, true, gv_pLAYER01_USER);
        }
        gv_terrorFleetPing = PingLastCreated();
        TriggerEnable(gt_TerrorFleetPing, true);
        gf_TerrorFleetrepeatingmove(gv_terrorFleetGroup, RegionFromId(8));
        while (!((UnitGroupCount(UnitGroup("ColonistShip", gv_pLAYER03_COLONIST, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            Wait(0.5, c_timeGame);
        }
        if ((gv_thirdFleetObjectiveFailed == false)) {
            gv_thirdFleetObjectiveFailed = true;
            TriggerExecute(gt_ObjectiveDestroyThirdFleetFailed, true, false);
        }

        auto896DDA8A_g = gv_terrorFleetGroup;
        auto896DDA8A_u = UnitGroupCount(auto896DDA8A_g, c_unitCountAll);
        for (;; auto896DDA8A_u -= 1) {
            auto896DDA8A_var = UnitGroupUnitFromEnd(auto896DDA8A_g, auto896DDA8A_u);
            if (auto896DDA8A_var == null) { break; }
            libNtve_gf_ShareVisionofUnit(auto896DDA8A_var, false, gv_pLAYER01_USER);
            UnitIssueOrder(auto896DDA8A_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(33))), c_orderQueueReplace);
        }
        auto6FA0985D_g = UnitGroup("PathingBlocker1x1", 0, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto6FA0985D_u = UnitGroupCount(auto6FA0985D_g, c_unitCountAll);
        for (;; auto6FA0985D_u -= 1) {
            auto6FA0985D_var = UnitGroupUnitFromEnd(auto6FA0985D_g, auto6FA0985D_u);
            if (auto6FA0985D_var == null) { break; }
            UnitRemove(auto6FA0985D_var);
        }
        auto2EF830BF_g = UnitGroup("PathingBlocker2x2", 0, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto2EF830BF_u = UnitGroupCount(auto2EF830BF_g, c_unitCountAll);
        for (;; auto2EF830BF_u -= 1) {
            auto2EF830BF_var = UnitGroupUnitFromEnd(auto2EF830BF_g, auto2EF830BF_u);
            if (auto2EF830BF_var == null) { break; }
            UnitRemove(auto2EF830BF_var);
        }
        TriggerEnable(gt_TerrorFleetOmegaDestroyed, false);
        TriggerEnable(gt_ColonistsEvacuateBaseOmega, false);
        TriggerEnable(gt_TerrorFleetPing, false);
        TriggerStop(gt_TerrorFleetPing);
        PingDestroy(gv_terrorFleetPing);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendOmegaBaseTerrorFleet_Init () {
    gt_SendOmegaBaseTerrorFleet = TriggerCreate("gt_SendOmegaBaseTerrorFleet_Func");
    TriggerEnable(gt_SendOmegaBaseTerrorFleet, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terror Fleet Beta Base Behavior
//--------------------------------------------------------------------------------------------------
bool gt_TerrorFleetBetaBaseBehavior_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0F58FAC6_g;
    int auto0F58FAC6_u;
    unit auto0F58FAC6_var;
    unitgroup autoA95CD8DF_g;
    int autoA95CD8DF_u;
    unit autoA95CD8DF_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER06_TERRORFLEET))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER06_TERRORFLEET, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto0F58FAC6_g = UnitGroup("Colonist", gv_pLAYER03_COLONIST, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0F58FAC6_u = UnitGroupCount(auto0F58FAC6_g, c_unitCountAll);
    for (;; auto0F58FAC6_u -= 1) {
        auto0F58FAC6_var = UnitGroupUnitFromEnd(auto0F58FAC6_g, auto0F58FAC6_u);
        if (auto0F58FAC6_var == null) { break; }
        UnitBehaviorAdd(auto0F58FAC6_var, "Run", auto0F58FAC6_var, 1);
        UnitIssueOrder(auto0F58FAC6_var, OrderTargetingUnit(null, UnitFromId(1678)), c_orderQueueReplace);
    }
    autoA95CD8DF_g = UnitGroup("ColonistFemale", gv_pLAYER03_COLONIST, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA95CD8DF_u = UnitGroupCount(autoA95CD8DF_g, c_unitCountAll);
    for (;; autoA95CD8DF_u -= 1) {
        autoA95CD8DF_var = UnitGroupUnitFromEnd(autoA95CD8DF_g, autoA95CD8DF_u);
        if (autoA95CD8DF_var == null) { break; }
        UnitBehaviorAdd(autoA95CD8DF_var, "Run", autoA95CD8DF_var, 1);
        UnitIssueOrder(autoA95CD8DF_var, OrderTargetingUnit(null, UnitFromId(1678)), c_orderQueueReplace);
    }
    UnitGroupIssueOrder(gv_terrorFleetGroup, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitFromId(1678))), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerrorFleetBetaBaseBehavior_Init () {
    gt_TerrorFleetBetaBaseBehavior = TriggerCreate("gt_TerrorFleetBetaBaseBehavior_Func");
    TriggerEnable(gt_TerrorFleetBetaBaseBehavior, false);
    TriggerAddEventUnitRegion(gt_TerrorFleetBetaBaseBehavior, null, RegionFromId(11), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terror Fleet Gamma Base Behavior
//--------------------------------------------------------------------------------------------------
bool gt_TerrorFleetGammaBaseBehavior_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9AC6CBE1_g;
    int auto9AC6CBE1_u;
    unit auto9AC6CBE1_var;
    unitgroup auto90582647_g;
    int auto90582647_u;
    unit auto90582647_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER06_TERRORFLEET))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER06_TERRORFLEET, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto9AC6CBE1_g = UnitGroup("Colonist", gv_pLAYER03_COLONIST, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9AC6CBE1_u = UnitGroupCount(auto9AC6CBE1_g, c_unitCountAll);
    for (;; auto9AC6CBE1_u -= 1) {
        auto9AC6CBE1_var = UnitGroupUnitFromEnd(auto9AC6CBE1_g, auto9AC6CBE1_u);
        if (auto9AC6CBE1_var == null) { break; }
        UnitBehaviorAdd(auto9AC6CBE1_var, "Run", auto9AC6CBE1_var, 1);
        UnitIssueOrder(auto9AC6CBE1_var, OrderTargetingUnit(null, UnitFromId(2722)), c_orderQueueReplace);
    }
    auto90582647_g = UnitGroup("ColonistFemale", gv_pLAYER03_COLONIST, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto90582647_u = UnitGroupCount(auto90582647_g, c_unitCountAll);
    for (;; auto90582647_u -= 1) {
        auto90582647_var = UnitGroupUnitFromEnd(auto90582647_g, auto90582647_u);
        if (auto90582647_var == null) { break; }
        UnitBehaviorAdd(auto90582647_var, "Run", auto90582647_var, 1);
        UnitIssueOrder(auto90582647_var, OrderTargetingUnit(null, UnitFromId(2722)), c_orderQueueReplace);
    }
    UnitGroupIssueOrder(gv_terrorFleetGroup, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitFromId(2722))), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerrorFleetGammaBaseBehavior_Init () {
    gt_TerrorFleetGammaBaseBehavior = TriggerCreate("gt_TerrorFleetGammaBaseBehavior_Func");
    TriggerEnable(gt_TerrorFleetGammaBaseBehavior, false);
    TriggerAddEventUnitRegion(gt_TerrorFleetGammaBaseBehavior, null, RegionFromId(12), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terror Fleet Omega Base Behavior
//--------------------------------------------------------------------------------------------------
bool gt_TerrorFleetOmegaBaseBehavior_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoBD48A512_g;
    int autoBD48A512_u;
    unit autoBD48A512_var;
    unitgroup autoDFD7DC8B_g;
    int autoDFD7DC8B_u;
    unit autoDFD7DC8B_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER06_TERRORFLEET))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER06_TERRORFLEET, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoBD48A512_g = UnitGroup("Colonist", gv_pLAYER03_COLONIST, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBD48A512_u = UnitGroupCount(autoBD48A512_g, c_unitCountAll);
    for (;; autoBD48A512_u -= 1) {
        autoBD48A512_var = UnitGroupUnitFromEnd(autoBD48A512_g, autoBD48A512_u);
        if (autoBD48A512_var == null) { break; }
        UnitBehaviorAdd(autoBD48A512_var, "Run", autoBD48A512_var, 1);
        UnitIssueOrder(autoBD48A512_var, OrderTargetingUnit(null, UnitFromId(1594)), c_orderQueueReplace);
    }
    autoDFD7DC8B_g = UnitGroup("ColonistFemale", gv_pLAYER03_COLONIST, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDFD7DC8B_u = UnitGroupCount(autoDFD7DC8B_g, c_unitCountAll);
    for (;; autoDFD7DC8B_u -= 1) {
        autoDFD7DC8B_var = UnitGroupUnitFromEnd(autoDFD7DC8B_g, autoDFD7DC8B_u);
        if (autoDFD7DC8B_var == null) { break; }
        UnitBehaviorAdd(autoDFD7DC8B_var, "Run", autoDFD7DC8B_var, 1);
        UnitIssueOrder(autoDFD7DC8B_var, OrderTargetingUnit(null, UnitFromId(1594)), c_orderQueueReplace);
    }
    UnitGroupIssueOrder(gv_terrorFleetGroup, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitFromId(1594))), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerrorFleetOmegaBaseBehavior_Init () {
    gt_TerrorFleetOmegaBaseBehavior = TriggerCreate("gt_TerrorFleetOmegaBaseBehavior_Func");
    TriggerEnable(gt_TerrorFleetOmegaBaseBehavior, false);
    TriggerAddEventUnitRegion(gt_TerrorFleetOmegaBaseBehavior, null, RegionFromId(8), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terror Fleet Beta Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_TerrorFleetBetaDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_terrorFleetGroup, c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER06_TERRORFLEET))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_TerrorFleetBetaBaseBehavior, false);
    TriggerExecute(gt_ColonistsEvacuateBaseBeta, true, false);
    TriggerEnable(gt_TerrorFleetPing, false);
    TriggerStop(gt_TerrorFleetPing);
    TriggerStop(gt_SendBetaBaseTerrorFleet);
    PingDestroy(gv_terrorFleetPing);
    if ((gv_firstFleetObjectiveFailed == false)) {
        TriggerExecute(gt_ObjectiveDestroyFirstFleetComplete, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerrorFleetBetaDestroyed_Init () {
    gt_TerrorFleetBetaDestroyed = TriggerCreate("gt_TerrorFleetBetaDestroyed_Func");
    TriggerEnable(gt_TerrorFleetBetaDestroyed, false);
    TriggerAddEventUnitDied(gt_TerrorFleetBetaDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terror Fleet Gamma Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_TerrorFleetGammaDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_terrorFleetGroup, c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER06_TERRORFLEET))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_TerrorFleetGammaBaseBehavior, false);
    TriggerExecute(gt_ColonistsEvacuateBaseGamma, true, false);
    TriggerEnable(gt_TerrorFleetPing, false);
    TriggerStop(gt_TerrorFleetPing);
    TriggerStop(gt_SendGammaBaseTerrorFleet);
    PingDestroy(gv_terrorFleetPing);
    if ((gv_secondFleetObjectiveFailed == false)) {
        TriggerExecute(gt_ObjectiveDestroySecondFleetComplete, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerrorFleetGammaDestroyed_Init () {
    gt_TerrorFleetGammaDestroyed = TriggerCreate("gt_TerrorFleetGammaDestroyed_Func");
    TriggerEnable(gt_TerrorFleetGammaDestroyed, false);
    TriggerAddEventUnitDied(gt_TerrorFleetGammaDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terror Fleet Omega Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_TerrorFleetOmegaDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_terrorFleetGroup, c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER06_TERRORFLEET))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_TerrorFleetOmegaBaseBehavior, false);
    TriggerExecute(gt_ColonistsEvacuateBaseOmega, true, false);
    TriggerEnable(gt_TerrorFleetPing, false);
    TriggerStop(gt_TerrorFleetPing);
    TriggerStop(gt_SendOmegaBaseTerrorFleet);
    PingDestroy(gv_terrorFleetPing);
    if ((gv_thirdFleetObjectiveFailed == false)) {
        TriggerExecute(gt_ObjectiveDestroyThirdFleetComplete, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerrorFleetOmegaDestroyed_Init () {
    gt_TerrorFleetOmegaDestroyed = TriggerCreate("gt_TerrorFleetOmegaDestroyed_Func");
    TriggerEnable(gt_TerrorFleetOmegaDestroyed, false);
    TriggerAddEventUnitDied(gt_TerrorFleetOmegaDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Terror Fleets
//--------------------------------------------------------------------------------------------------
bool gt_RemoveTerrorFleets_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER06_TERRORFLEET))) {
            return false;
        }

        if (!((UnitGetCustomValue(EventUnit(), 1) == 1.0))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_terrorFleetGroup, EventUnit()) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER07_RESOURCES, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveTerrorFleets_Init () {
    gt_RemoveTerrorFleets = TriggerCreate("gt_RemoveTerrorFleets_Func");
    TriggerAddEventUnitRegion(gt_RemoveTerrorFleets, null, RegionFromId(31), true);
    TriggerAddEventUnitRegion(gt_RemoveTerrorFleets, null, RegionFromId(32), true);
    TriggerAddEventUnitRegion(gt_RemoveTerrorFleets, null, RegionFromId(33), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terror Fleet Ping
//--------------------------------------------------------------------------------------------------
bool gt_TerrorFleetPing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_terrorFleetGroup, c_unitCountAlive) > 0)) {
        PingSetPosition(gv_terrorFleetPing, libNtve_gf_CenterOfUnitGroup(gv_terrorFleetGroup));
        PingSetScale(gv_terrorFleetPing, 0.75);
        PingSetTooltip(gv_terrorFleetPing, StringExternal("Param/Value/67A6F3CE"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerrorFleetPing_Init () {
    gt_TerrorFleetPing = TriggerCreate("gt_TerrorFleetPing_Func");
    TriggerEnable(gt_TerrorFleetPing, false);
    TriggerAddEventTimePeriodic(gt_TerrorFleetPing, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp-In Beta Terror Fleet
//--------------------------------------------------------------------------------------------------
bool gt_WarpInBetaTerrorFleet_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOn == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_purifier) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_TerrorFleetWarpIn(libNtve_gf_DifficultyValueInt(2, 2, 2, 2), AbilityCommand("SuperWarpGateTrain", 6), 4.0, 45.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpInBetaTerrorFleet_Init () {
    gt_WarpInBetaTerrorFleet = TriggerCreate("gt_WarpInBetaTerrorFleet_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp-In Gamma Terror Fleet
//--------------------------------------------------------------------------------------------------
bool gt_WarpInGammaTerrorFleet_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOn == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_purifier) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_TerrorFleetWarpIn(libNtve_gf_DifficultyValueInt(2, 2, 2, 1), AbilityCommand("SuperWarpGateTrain", 6), 4.0, 45.0, 0.0);
    gf_TerrorFleetWarpIn(libNtve_gf_DifficultyValueInt(0, 1, 0, 1), AbilityCommand("SuperWarpGateTrain", 14), 4.0, 0.0, 0.0);
    gf_TerrorFleetWarpIn(libNtve_gf_DifficultyValueInt(0, 0, 1, 2), AbilityCommand("SuperWarpGateTrain", 8), 4.0, 0.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpInGammaTerrorFleet_Init () {
    gt_WarpInGammaTerrorFleet = TriggerCreate("gt_WarpInGammaTerrorFleet_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp-In Omega Terror Fleet
//--------------------------------------------------------------------------------------------------
bool gt_WarpInOmegaTerrorFleet_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOn == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_purifier) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_TerrorFleetWarpIn(libNtve_gf_DifficultyValueInt(2, 3, 2, 0), AbilityCommand("SuperWarpGateTrain", 6), 4.0, 45.0, 0.0);
    gf_TerrorFleetWarpIn(libNtve_gf_DifficultyValueInt(1, 1, 0, 2), AbilityCommand("SuperWarpGateTrain", 14), 4.0, 0.0, 0.0);
    gf_TerrorFleetWarpIn(libNtve_gf_DifficultyValueInt(0, 0, 2, 3), AbilityCommand("SuperWarpGateTrain", 8), 4.0, 0.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpInOmegaTerrorFleet_Init () {
    gt_WarpInOmegaTerrorFleet = TriggerCreate("gt_WarpInOmegaTerrorFleet_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp-In Units Started
//--------------------------------------------------------------------------------------------------
bool gt_WarpInUnitsStarted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER04_PURIFIER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(EventUnitProgressUnit()) == "Zealot") || (UnitGetType(EventUnitProgressUnit()) == "Stalker") || (UnitGetType(EventUnitProgressUnit()) == "Sentry") || (UnitGetType(EventUnitProgressUnit()) == "Immortal") || (UnitGetType(EventUnitProgressUnit()) == "HighTemplar") || (UnitGetType(EventUnitProgressUnit()) == "Archon") || (UnitGetType(EventUnitProgressUnit()) == "Scout") || (UnitGetType(EventUnitProgressUnit()) == "Phoenix") || (UnitGetType(EventUnitProgressUnit()) == "VoidRay") || (UnitGetType(EventUnitProgressUnit()) == "Carrier"))) {
        UnitGroupAdd(gv_terrorFleetGroup, EventUnitProgressUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpInUnitsStarted_Init () {
    gt_WarpInUnitsStarted = TriggerCreate("gt_WarpInUnitsStarted_Func");
    TriggerAddEventUnitConstructProgress(gt_WarpInUnitsStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp-In Units Behavior
//--------------------------------------------------------------------------------------------------
bool gt_WarpInUnitsBehavior_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER04_PURIFIER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(EventUnitProgressUnit()) == "Zealot") || (UnitGetType(EventUnitProgressUnit()) == "Stalker") || (UnitGetType(EventUnitProgressUnit()) == "Sentry") || (UnitGetType(EventUnitProgressUnit()) == "Immortal") || (UnitGetType(EventUnitProgressUnit()) == "HighTemplar") || (UnitGetType(EventUnitProgressUnit()) == "Archon") || (UnitGetType(EventUnitProgressUnit()) == "Scout") || (UnitGetType(EventUnitProgressUnit()) == "Phoenix") || (UnitGetType(EventUnitProgressUnit()) == "VoidRay"))) {
        AISetUnitScriptControlled(EventUnitProgressUnit(), true);
        UnitSetOwner(EventUnitProgressUnit(), gv_pLAYER06_TERRORFLEET, true);
        UnitSetCustomValue(EventUnitProgressUnit(), 1, 1.0);
    }
    else {
        if ((UnitGetType(EventUnitProgressUnit()) == "Carrier")) {
            AISetUnitScriptControlled(EventUnitProgressUnit(), true);
            UnitSetOwner(EventUnitProgressUnit(), gv_pLAYER06_TERRORFLEET, true);
            UnitMagazineArm(EventUnitProgressUnit(), AbilityCommand("CarrierHangar", 0), libNtve_gf_DifficultyValueInt(0, 0, 2, 4));
            UnitIssueOrder(EventUnitProgressUnit(), OrderSetAutoCast(AbilityCommand("CarrierHangar", 0), true), c_orderQueueReplace);
            UnitSetCustomValue(EventUnitProgressUnit(), 1, 1.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpInUnitsBehavior_Init () {
    gt_WarpInUnitsBehavior = TriggerCreate("gt_WarpInUnitsBehavior_Func");
    TriggerAddEventUnitConstructProgress(gt_WarpInUnitsBehavior, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colonists Wander
//--------------------------------------------------------------------------------------------------
bool gt_ColonistsWander_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2D089EE8_g;
    int auto2D089EE8_u;
    unit auto2D089EE8_var;
    unitgroup auto1918CEC7_g;
    int auto1918CEC7_u;
    unit auto1918CEC7_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto2D089EE8_g = UnitGroup("Colonist", gv_pLAYER03_COLONIST, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2D089EE8_u = UnitGroupCount(auto2D089EE8_g, c_unitCountAll);
    for (;; auto2D089EE8_u -= 1) {
        auto2D089EE8_var = UnitGroupUnitFromEnd(auto2D089EE8_g, auto2D089EE8_u);
        if (auto2D089EE8_var == null) { break; }
        UnitBehaviorAdd(auto2D089EE8_var, "ColonistWander", auto2D089EE8_var, 1);
        Wait(RandomFixed(0.5, 1.0), c_timeGame);
    }
    auto1918CEC7_g = UnitGroup("ColonistFemale", gv_pLAYER03_COLONIST, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1918CEC7_u = UnitGroupCount(auto1918CEC7_g, c_unitCountAll);
    for (;; auto1918CEC7_u -= 1) {
        auto1918CEC7_var = UnitGroupUnitFromEnd(auto1918CEC7_g, auto1918CEC7_u);
        if (auto1918CEC7_var == null) { break; }
        UnitBehaviorAdd(auto1918CEC7_var, "ColonistWander", auto1918CEC7_var, 1);
        Wait(RandomFixed(0.5, 1.0), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColonistsWander_Init () {
    gt_ColonistsWander = TriggerCreate("gt_ColonistsWander_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colonist Behavior at Base Beta
//--------------------------------------------------------------------------------------------------
bool gt_ColonistBehavioratBaseBeta_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_pickedPoint;
    unit lv_colonistShip;

    // Automatic Variable Declarations
    int auto8DA947A7_val;
    int autoE0C65E9D_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_colonistShip = UnitFromId(1678);
    auto8DA947A7_val = RandomInt(1, 6);
    if (auto8DA947A7_val == 1) {
        lv_pickedPoint = PointFromId(65);
    }
    else if (auto8DA947A7_val == 2) {
        lv_pickedPoint = PointFromId(148);
    }
    else if (auto8DA947A7_val == 3) {
        lv_pickedPoint = PointFromId(370);
    }
    else if (auto8DA947A7_val == 4) {
        lv_pickedPoint = PointFromId(1387);
    }
    else if (auto8DA947A7_val == 5) {
        lv_pickedPoint = PointFromId(1389);
    }
    else if (auto8DA947A7_val == 6) {
        lv_pickedPoint = PointFromId(1388);
    }
    else {
    }
    autoE0C65E9D_val = RandomInt(1, 2);
    if (autoE0C65E9D_val == 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Colonist", 0, gv_pLAYER03_COLONIST, lv_pickedPoint);
        UnitBehaviorAdd(UnitLastCreated(), "ColonistCarry", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1991)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(null, lv_colonistShip), c_orderQueueAddToEnd);
    }
    else if (autoE0C65E9D_val == 2) {
        libNtve_gf_CreateUnitsAtPoint2(1, "ColonistFemale", 0, gv_pLAYER03_COLONIST, lv_pickedPoint);
        UnitBehaviorAdd(UnitLastCreated(), "ColonistCarry", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1991)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(null, lv_colonistShip), c_orderQueueAddToEnd);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColonistBehavioratBaseBeta_Init () {
    gt_ColonistBehavioratBaseBeta = TriggerCreate("gt_ColonistBehavioratBaseBeta_Func");
    TriggerAddEventTimePeriodic(gt_ColonistBehavioratBaseBeta, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colonist Behavior at Base Gamma
//--------------------------------------------------------------------------------------------------
bool gt_ColonistBehavioratBaseGamma_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_pickedPoint;
    unit lv_colonistShip;

    // Automatic Variable Declarations
    int autoEC18A36F_val;
    int auto811AB252_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_colonistShip = UnitFromId(2722);
    autoEC18A36F_val = RandomInt(1, 7);
    if (autoEC18A36F_val == 1) {
        lv_pickedPoint = PointFromId(1390);
    }
    else if (autoEC18A36F_val == 2) {
        lv_pickedPoint = PointFromId(1391);
    }
    else if (autoEC18A36F_val == 3) {
        lv_pickedPoint = PointFromId(6);
    }
    else if (autoEC18A36F_val == 4) {
        lv_pickedPoint = PointFromId(7);
    }
    else if (autoEC18A36F_val == 5) {
        lv_pickedPoint = PointFromId(8);
    }
    else if (autoEC18A36F_val == 6) {
        lv_pickedPoint = PointFromId(139);
    }
    else if (autoEC18A36F_val == 7) {
        lv_pickedPoint = PointFromId(158);
    }
    else {
    }
    auto811AB252_val = RandomInt(1, 2);
    if (auto811AB252_val == 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Colonist", 0, gv_pLAYER03_COLONIST, lv_pickedPoint);
        UnitBehaviorAdd(UnitLastCreated(), "ColonistCarry", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1990)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(null, lv_colonistShip), c_orderQueueAddToEnd);
    }
    else if (auto811AB252_val == 2) {
        libNtve_gf_CreateUnitsAtPoint2(1, "ColonistFemale", 0, gv_pLAYER03_COLONIST, lv_pickedPoint);
        UnitBehaviorAdd(UnitLastCreated(), "ColonistCarry", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1990)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(null, lv_colonistShip), c_orderQueueReplace);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColonistBehavioratBaseGamma_Init () {
    gt_ColonistBehavioratBaseGamma = TriggerCreate("gt_ColonistBehavioratBaseGamma_Func");
    TriggerAddEventTimePeriodic(gt_ColonistBehavioratBaseGamma, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colonist Behavior at Base Omega
//--------------------------------------------------------------------------------------------------
bool gt_ColonistBehavioratBaseOmega_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_pickedPoint;
    unit lv_colonistShip;

    // Automatic Variable Declarations
    int auto69B4F450_val;
    int autoCD6601C2_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_colonistShip = UnitFromId(1594);
    auto69B4F450_val = RandomInt(1, 6);
    if (auto69B4F450_val == 1) {
        lv_pickedPoint = PointFromId(190);
    }
    else if (auto69B4F450_val == 2) {
        lv_pickedPoint = PointFromId(226);
    }
    else if (auto69B4F450_val == 3) {
        lv_pickedPoint = PointFromId(227);
    }
    else if (auto69B4F450_val == 4) {
        lv_pickedPoint = PointFromId(298);
    }
    else if (auto69B4F450_val == 5) {
        lv_pickedPoint = PointFromId(359);
    }
    else if (auto69B4F450_val == 6) {
        lv_pickedPoint = PointFromId(367);
    }
    else {
    }
    autoCD6601C2_val = RandomInt(1, 2);
    if (autoCD6601C2_val == 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Colonist", 0, gv_pLAYER03_COLONIST, lv_pickedPoint);
        UnitBehaviorAdd(UnitLastCreated(), "ColonistCarry", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1993)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(null, lv_colonistShip), c_orderQueueAddToEnd);
    }
    else if (autoCD6601C2_val == 2) {
        libNtve_gf_CreateUnitsAtPoint2(1, "ColonistFemale", 0, gv_pLAYER03_COLONIST, lv_pickedPoint);
        UnitBehaviorAdd(UnitLastCreated(), "ColonistCarry", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1993)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(null, lv_colonistShip), c_orderQueueAddToEnd);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColonistBehavioratBaseOmega_Init () {
    gt_ColonistBehavioratBaseOmega = TriggerCreate("gt_ColonistBehavioratBaseOmega_Func");
    TriggerAddEventTimePeriodic(gt_ColonistBehavioratBaseOmega, 2.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colonists Evacuate Base Beta
//--------------------------------------------------------------------------------------------------
bool gt_ColonistsEvacuateBaseBeta_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_colonistShip;

    // Automatic Variable Declarations
    unitgroup auto64289BB3_g;
    int auto64289BB3_u;
    unit auto64289BB3_var;
    unitgroup autoBB4126D6_g;
    int autoBB4126D6_u;
    unit autoBB4126D6_var;
    unitgroup auto8F01F1A3_g;
    int auto8F01F1A3_u;
    unit auto8F01F1A3_var;
    unitgroup auto359EB1D6_g;
    int auto359EB1D6_u;
    unit auto359EB1D6_var;
    unitgroup autoBF5B2BB3_g;
    int autoBF5B2BB3_u;
    unit autoBF5B2BB3_var;
    unitgroup auto72377C84_g;
    int auto72377C84_u;
    unit auto72377C84_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionColonistsEvacuateBetaOutpostQ, true, false);
    lv_colonistShip = UnitFromId(1678);
    auto64289BB3_g = UnitGroup("PathingBlocker1x1", 0, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto64289BB3_u = UnitGroupCount(auto64289BB3_g, c_unitCountAll);
    for (;; auto64289BB3_u -= 1) {
        auto64289BB3_var = UnitGroupUnitFromEnd(auto64289BB3_g, auto64289BB3_u);
        if (auto64289BB3_var == null) { break; }
        UnitRemove(auto64289BB3_var);
    }
    autoBB4126D6_g = UnitGroup("PathingBlocker2x2", 0, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBB4126D6_u = UnitGroupCount(autoBB4126D6_g, c_unitCountAll);
    for (;; autoBB4126D6_u -= 1) {
        autoBB4126D6_var = UnitGroupUnitFromEnd(autoBB4126D6_g, autoBB4126D6_u);
        if (autoBB4126D6_var == null) { break; }
        UnitRemove(autoBB4126D6_var);
    }
    UnitSelect(lv_colonistShip, gv_pLAYER01_USER, false);
    libNtve_gf_MakeUnitInvulnerable(lv_colonistShip, true);
    UnitSetState(lv_colonistShip, c_unitStateCursorable, false);
    UnitSetState(lv_colonistShip, c_unitStateHighlightable, false);
    UnitSetState(lv_colonistShip, c_unitStateHighlighted, false);
    UnitSetState(lv_colonistShip, c_unitStateSelectable, false);
    UnitSetState(lv_colonistShip, c_unitStateTargetable, false);
    UnitSetState(lv_colonistShip, c_unitStateTooltipable, false);
    auto8F01F1A3_g = UnitGroup("Colonist", gv_pLAYER03_COLONIST, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8F01F1A3_u = UnitGroupCount(auto8F01F1A3_g, c_unitCountAll);
    for (;; auto8F01F1A3_u -= 1) {
        auto8F01F1A3_var = UnitGroupUnitFromEnd(auto8F01F1A3_g, auto8F01F1A3_u);
        if (auto8F01F1A3_var == null) { break; }
        UnitBehaviorAdd(auto8F01F1A3_var, "Run", auto8F01F1A3_var, 1);
        UnitIssueOrder(auto8F01F1A3_var, OrderTargetingUnit(null, lv_colonistShip), c_orderQueueReplace);
    }
    auto359EB1D6_g = UnitGroup("ColonistFemale", gv_pLAYER03_COLONIST, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto359EB1D6_u = UnitGroupCount(auto359EB1D6_g, c_unitCountAll);
    for (;; auto359EB1D6_u -= 1) {
        auto359EB1D6_var = UnitGroupUnitFromEnd(auto359EB1D6_g, auto359EB1D6_u);
        if (auto359EB1D6_var == null) { break; }
        UnitBehaviorAdd(auto359EB1D6_var, "Run", auto359EB1D6_var, 1);
        UnitIssueOrder(auto359EB1D6_var, OrderTargetingUnit(null, lv_colonistShip), c_orderQueueReplace);
    }
    autoBF5B2BB3_g = UnitGroup("Marine", gv_pLAYER03_COLONIST, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBF5B2BB3_u = UnitGroupCount(autoBF5B2BB3_g, c_unitCountAll);
    for (;; autoBF5B2BB3_u -= 1) {
        autoBF5B2BB3_var = UnitGroupUnitFromEnd(autoBF5B2BB3_g, autoBF5B2BB3_u);
        if (autoBF5B2BB3_var == null) { break; }
        UnitIssueOrder(autoBF5B2BB3_var, OrderTargetingUnit(null, lv_colonistShip), c_orderQueueReplace);
    }
    Wait(3.0, c_timeGame);
    UnitIssueOrder(lv_colonistShip, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    Wait(1.5, c_timeGame);
    auto72377C84_g = gv_resourceGroupBeta;
    auto72377C84_u = UnitGroupCount(auto72377C84_g, c_unitCountAll);
    for (;; auto72377C84_u -= 1) {
        auto72377C84_var = UnitGroupUnitFromEnd(auto72377C84_g, auto72377C84_u);
        if (auto72377C84_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto72377C84_var, true);
    }
    Wait(3.0, c_timeGame);
    UnitIssueOrder(lv_colonistShip, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_colonistShip), 5.0, RandomFixed(60.0, 70.0))), c_orderQueueAddToEnd);
    Wait(3.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_colonistShip), c_animNameDefault, "Land Forward", c_animFlagNonLooping, c_animTimeDefault);
    Wait(7.0, c_timeGame);
    UnitRemove(lv_colonistShip);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColonistsEvacuateBaseBeta_Init () {
    gt_ColonistsEvacuateBaseBeta = TriggerCreate("gt_ColonistsEvacuateBaseBeta_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colonists Evacuate Base Gamma
//--------------------------------------------------------------------------------------------------
bool gt_ColonistsEvacuateBaseGamma_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_colonistShip;

    // Automatic Variable Declarations
    unitgroup auto740A7784_g;
    int auto740A7784_u;
    unit auto740A7784_var;
    unitgroup auto82916044_g;
    int auto82916044_u;
    unit auto82916044_var;
    unitgroup auto4667164D_g;
    int auto4667164D_u;
    unit auto4667164D_var;
    unitgroup auto80AA7465_g;
    int auto80AA7465_u;
    unit auto80AA7465_var;
    unitgroup auto4A66AE77_g;
    int auto4A66AE77_u;
    unit auto4A66AE77_var;
    unitgroup auto8686A3D5_g;
    int auto8686A3D5_u;
    unit auto8686A3D5_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionColonistsEvacuateGammaOutpostQ, true, false);
    lv_colonistShip = UnitFromId(2722);
    auto740A7784_g = UnitGroup("PathingBlocker1x1", 0, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto740A7784_u = UnitGroupCount(auto740A7784_g, c_unitCountAll);
    for (;; auto740A7784_u -= 1) {
        auto740A7784_var = UnitGroupUnitFromEnd(auto740A7784_g, auto740A7784_u);
        if (auto740A7784_var == null) { break; }
        UnitRemove(auto740A7784_var);
    }
    auto82916044_g = UnitGroup("PathingBlocker2x2", 0, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto82916044_u = UnitGroupCount(auto82916044_g, c_unitCountAll);
    for (;; auto82916044_u -= 1) {
        auto82916044_var = UnitGroupUnitFromEnd(auto82916044_g, auto82916044_u);
        if (auto82916044_var == null) { break; }
        UnitRemove(auto82916044_var);
    }
    UnitSelect(lv_colonistShip, gv_pLAYER01_USER, false);
    libNtve_gf_MakeUnitInvulnerable(lv_colonistShip, true);
    UnitSetState(lv_colonistShip, c_unitStateCursorable, false);
    UnitSetState(lv_colonistShip, c_unitStateHighlightable, false);
    UnitSetState(lv_colonistShip, c_unitStateHighlighted, false);
    UnitSetState(lv_colonistShip, c_unitStateSelectable, false);
    UnitSetState(lv_colonistShip, c_unitStateTargetable, false);
    UnitSetState(lv_colonistShip, c_unitStateTooltipable, false);
    auto4667164D_g = UnitGroup("Colonist", gv_pLAYER03_COLONIST, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4667164D_u = UnitGroupCount(auto4667164D_g, c_unitCountAll);
    for (;; auto4667164D_u -= 1) {
        auto4667164D_var = UnitGroupUnitFromEnd(auto4667164D_g, auto4667164D_u);
        if (auto4667164D_var == null) { break; }
        UnitBehaviorAdd(auto4667164D_var, "Run", auto4667164D_var, 1);
        UnitIssueOrder(auto4667164D_var, OrderTargetingUnit(null, UnitFromId(2722)), c_orderQueueReplace);
    }
    auto80AA7465_g = UnitGroup("ColonistFemale", gv_pLAYER03_COLONIST, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto80AA7465_u = UnitGroupCount(auto80AA7465_g, c_unitCountAll);
    for (;; auto80AA7465_u -= 1) {
        auto80AA7465_var = UnitGroupUnitFromEnd(auto80AA7465_g, auto80AA7465_u);
        if (auto80AA7465_var == null) { break; }
        UnitBehaviorAdd(auto80AA7465_var, "Run", auto80AA7465_var, 1);
        UnitIssueOrder(auto80AA7465_var, OrderTargetingUnit(null, UnitFromId(2722)), c_orderQueueReplace);
    }
    auto4A66AE77_g = UnitGroup("Marine", gv_pLAYER03_COLONIST, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4A66AE77_u = UnitGroupCount(auto4A66AE77_g, c_unitCountAll);
    for (;; auto4A66AE77_u -= 1) {
        auto4A66AE77_var = UnitGroupUnitFromEnd(auto4A66AE77_g, auto4A66AE77_u);
        if (auto4A66AE77_var == null) { break; }
        UnitIssueOrder(auto4A66AE77_var, OrderTargetingUnit(null, lv_colonistShip), c_orderQueueReplace);
    }
    Wait(3.0, c_timeGame);
    UnitIssueOrder(lv_colonistShip, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    Wait(1.5, c_timeGame);
    auto8686A3D5_g = gv_resourceGroupGamma;
    auto8686A3D5_u = UnitGroupCount(auto8686A3D5_g, c_unitCountAll);
    for (;; auto8686A3D5_u -= 1) {
        auto8686A3D5_var = UnitGroupUnitFromEnd(auto8686A3D5_g, auto8686A3D5_u);
        if (auto8686A3D5_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto8686A3D5_var, true);
    }
    Wait(3.0, c_timeGame);
    UnitIssueOrder(lv_colonistShip, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_colonistShip), 5.0, RandomFixed(95.0, 105.0))), c_orderQueueAddToEnd);
    Wait(3.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_colonistShip), c_animNameDefault, "Land Forward", c_animFlagNonLooping, c_animTimeDefault);
    Wait(7.0, c_timeGame);
    UnitRemove(lv_colonistShip);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColonistsEvacuateBaseGamma_Init () {
    gt_ColonistsEvacuateBaseGamma = TriggerCreate("gt_ColonistsEvacuateBaseGamma_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colonists Evacuate Base Omega
//--------------------------------------------------------------------------------------------------
bool gt_ColonistsEvacuateBaseOmega_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_colonistShip;

    // Automatic Variable Declarations
    unitgroup autoEFC68878_g;
    int autoEFC68878_u;
    unit autoEFC68878_var;
    unitgroup autoB17FCCAA_g;
    int autoB17FCCAA_u;
    unit autoB17FCCAA_var;
    unitgroup auto040C0DE4_g;
    int auto040C0DE4_u;
    unit auto040C0DE4_var;
    unitgroup auto9CD9F30B_g;
    int auto9CD9F30B_u;
    unit auto9CD9F30B_var;
    unitgroup auto76FDB683_g;
    int auto76FDB683_u;
    unit auto76FDB683_var;
    unitgroup auto498D7A39_g;
    int auto498D7A39_u;
    unit auto498D7A39_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionColonistsEvacuateOmegaOutpostQ, true, false);
    lv_colonistShip = UnitFromId(1594);
    autoEFC68878_g = UnitGroup("PathingBlocker1x1", 0, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEFC68878_u = UnitGroupCount(autoEFC68878_g, c_unitCountAll);
    for (;; autoEFC68878_u -= 1) {
        autoEFC68878_var = UnitGroupUnitFromEnd(autoEFC68878_g, autoEFC68878_u);
        if (autoEFC68878_var == null) { break; }
        UnitRemove(autoEFC68878_var);
    }
    autoB17FCCAA_g = UnitGroup("PathingBlocker2x2", 0, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB17FCCAA_u = UnitGroupCount(autoB17FCCAA_g, c_unitCountAll);
    for (;; autoB17FCCAA_u -= 1) {
        autoB17FCCAA_var = UnitGroupUnitFromEnd(autoB17FCCAA_g, autoB17FCCAA_u);
        if (autoB17FCCAA_var == null) { break; }
        UnitRemove(autoB17FCCAA_var);
    }
    UnitSelect(lv_colonistShip, gv_pLAYER01_USER, false);
    libNtve_gf_MakeUnitInvulnerable(lv_colonistShip, true);
    UnitSetState(lv_colonistShip, c_unitStateCursorable, false);
    UnitSetState(lv_colonistShip, c_unitStateHighlightable, false);
    UnitSetState(lv_colonistShip, c_unitStateHighlighted, false);
    UnitSetState(lv_colonistShip, c_unitStateSelectable, false);
    UnitSetState(lv_colonistShip, c_unitStateTargetable, false);
    UnitSetState(lv_colonistShip, c_unitStateTooltipable, false);
    auto040C0DE4_g = UnitGroup("Colonist", gv_pLAYER03_COLONIST, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto040C0DE4_u = UnitGroupCount(auto040C0DE4_g, c_unitCountAll);
    for (;; auto040C0DE4_u -= 1) {
        auto040C0DE4_var = UnitGroupUnitFromEnd(auto040C0DE4_g, auto040C0DE4_u);
        if (auto040C0DE4_var == null) { break; }
        UnitBehaviorAdd(auto040C0DE4_var, "Run", auto040C0DE4_var, 1);
        UnitIssueOrder(auto040C0DE4_var, OrderTargetingUnit(null, UnitFromId(1594)), c_orderQueueReplace);
    }
    auto9CD9F30B_g = UnitGroup("ColonistFemale", gv_pLAYER03_COLONIST, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9CD9F30B_u = UnitGroupCount(auto9CD9F30B_g, c_unitCountAll);
    for (;; auto9CD9F30B_u -= 1) {
        auto9CD9F30B_var = UnitGroupUnitFromEnd(auto9CD9F30B_g, auto9CD9F30B_u);
        if (auto9CD9F30B_var == null) { break; }
        UnitBehaviorAdd(auto9CD9F30B_var, "Run", auto9CD9F30B_var, 1);
        UnitIssueOrder(auto9CD9F30B_var, OrderTargetingUnit(null, UnitFromId(1594)), c_orderQueueReplace);
    }
    auto76FDB683_g = UnitGroup("Marine", gv_pLAYER03_COLONIST, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto76FDB683_u = UnitGroupCount(auto76FDB683_g, c_unitCountAll);
    for (;; auto76FDB683_u -= 1) {
        auto76FDB683_var = UnitGroupUnitFromEnd(auto76FDB683_g, auto76FDB683_u);
        if (auto76FDB683_var == null) { break; }
        UnitIssueOrder(auto76FDB683_var, OrderTargetingUnit(null, lv_colonistShip), c_orderQueueReplace);
    }
    Wait(3.0, c_timeGame);
    UnitIssueOrder(lv_colonistShip, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    Wait(1.5, c_timeGame);
    auto498D7A39_g = gv_resourceGroupOmega;
    auto498D7A39_u = UnitGroupCount(auto498D7A39_g, c_unitCountAll);
    for (;; auto498D7A39_u -= 1) {
        auto498D7A39_var = UnitGroupUnitFromEnd(auto498D7A39_g, auto498D7A39_u);
        if (auto498D7A39_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto498D7A39_var, true);
    }
    Wait(3.0, c_timeGame);
    UnitIssueOrder(lv_colonistShip, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_colonistShip), 5.0, RandomFixed(35.0, 45.0))), c_orderQueueAddToEnd);
    Wait(3.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_colonistShip), c_animNameDefault, "Land Forward", c_animFlagNonLooping, c_animTimeDefault);
    Wait(7.0, c_timeGame);
    UnitRemove(lv_colonistShip);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColonistsEvacuateBaseOmega_Init () {
    gt_ColonistsEvacuateBaseOmega = TriggerCreate("gt_ColonistsEvacuateBaseOmega_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colonists Garrison Player Base
//--------------------------------------------------------------------------------------------------
bool gt_ColonistsGarrisonPlayerBase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_random;

    // Automatic Variable Declarations
    unitgroup autoE3E72505_g;
    int autoE3E72505_u;
    unit autoE3E72505_var;
    unitgroup auto3A20565F_g;
    int auto3A20565F_u;
    unit auto3A20565F_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoE3E72505_g = UnitGroup("Colonist", gv_pLAYER03_COLONIST, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE3E72505_u = UnitGroupCount(autoE3E72505_g, c_unitCountAll);
    for (;; autoE3E72505_u -= 1) {
        autoE3E72505_var = UnitGroupUnitFromEnd(autoE3E72505_g, autoE3E72505_u);
        if (autoE3E72505_var == null) { break; }
        UnitBehaviorRemove(autoE3E72505_var, "ColonistWander", 1);
        UnitBehaviorAdd(autoE3E72505_var, "Run", autoE3E72505_var, 1);
        UnitIssueOrder(autoE3E72505_var, OrderTargetingUnit(null, UnitGroupRandomUnit(UnitGroup("ColonistShip", gv_pLAYER03_COLONIST, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueReplace);
    }
    auto3A20565F_g = UnitGroup("ColonistFemale", gv_pLAYER03_COLONIST, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3A20565F_u = UnitGroupCount(auto3A20565F_g, c_unitCountAll);
    for (;; auto3A20565F_u -= 1) {
        auto3A20565F_var = UnitGroupUnitFromEnd(auto3A20565F_g, auto3A20565F_u);
        if (auto3A20565F_var == null) { break; }
        UnitBehaviorRemove(auto3A20565F_var, "ColonistWander", 1);
        UnitBehaviorAdd(auto3A20565F_var, "Run", auto3A20565F_var, 1);
        UnitIssueOrder(auto3A20565F_var, OrderTargetingUnit(null, UnitGroupRandomUnit(UnitGroup("ColonistShip", gv_pLAYER03_COLONIST, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColonistsGarrisonPlayerBase_Init () {
    gt_ColonistsGarrisonPlayerBase = TriggerCreate("gt_ColonistsGarrisonPlayerBase_Func");
    TriggerAddEventUnitRegion(gt_ColonistsGarrisonPlayerBase, UnitRefFromVariable("gv_purifier"), RegionFromId(10), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Loading Colonist
//--------------------------------------------------------------------------------------------------
bool gt_RemoveLoadingColonist_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER03_COLONIST))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "ColonistShip"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnitCargo());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveLoadingColonist_Init () {
    gt_RemoveLoadingColonist = TriggerCreate("gt_RemoveLoadingColonist_Func");
    TriggerAddEventUnitCargo(gt_RemoveLoadingColonist, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Pickups
//--------------------------------------------------------------------------------------------------
bool gt_ResourcePickups_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "PalletMinerals")) {
        libCamp_gf_DestroyCacheAndGivePlayerResources(EventUnit(), c_playerPropMinerals, 100, UnitGetOwner(EventUnitTargetUnit()));
    }

    if ((UnitGetType(EventUnit()) == "PalletGas")) {
        libCamp_gf_DestroyCacheAndGivePlayerResources(EventUnit(), c_playerPropVespene, 100, UnitGetOwner(EventUnitTargetUnit()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourcePickups_Init () {
    gt_ResourcePickups = TriggerCreate("gt_ResourcePickups_Func");
    TriggerAddEventUnitAbility(gt_ResourcePickups, null, AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Paths
//--------------------------------------------------------------------------------------------------
bool gt_InitializePaths_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pathIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pathIndex = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_pathtoAlpha[lv_pathIndex] = PointFromId(385);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoAlpha[lv_pathIndex] = PointFromId(386);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoAlpha[lv_pathIndex] = PointFromId(1392);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoAlpha[lv_pathIndex] = PointFromId(1529);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoAlpha[lv_pathIndex] = PointFromId(1723);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoAlpha[lv_pathIndex] = PointFromId(1725);
    gv_pathtoAlphaLength = lv_pathIndex;
    lv_pathIndex = 1;
    gv_pathtoBeta[lv_pathIndex] = PointFromId(1727);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoBeta[lv_pathIndex] = PointFromId(1731);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoBeta[lv_pathIndex] = PointFromId(1737);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoBeta[lv_pathIndex] = PointFromId(1739);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoBeta[lv_pathIndex] = PointFromId(1969);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoBeta[lv_pathIndex] = PointFromId(2738);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoBeta[lv_pathIndex] = PointFromId(2739);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoBeta[lv_pathIndex] = PointFromId(2740);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoBeta[lv_pathIndex] = PointFromId(2741);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoBeta[lv_pathIndex] = PointFromId(2742);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoBeta[lv_pathIndex] = PointFromId(2743);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoBeta[lv_pathIndex] = PointFromId(2744);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoBeta[lv_pathIndex] = PointFromId(2745);
    gv_pathtoBetaLength = lv_pathIndex;
    lv_pathIndex = 1;
    gv_pathtoGamma[lv_pathIndex] = PointFromId(2746);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoGamma[lv_pathIndex] = PointFromId(2747);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoGamma[lv_pathIndex] = PointFromId(2748);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoGamma[lv_pathIndex] = PointFromId(2749);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoGamma[lv_pathIndex] = PointFromId(2750);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoGamma[lv_pathIndex] = PointFromId(2751);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoGamma[lv_pathIndex] = PointFromId(3389);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoGamma[lv_pathIndex] = PointFromId(3390);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoGamma[lv_pathIndex] = PointFromId(3391);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoGamma[lv_pathIndex] = PointFromId(3392);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoGamma[lv_pathIndex] = PointFromId(3393);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoGamma[lv_pathIndex] = PointFromId(3394);
    gv_pathtoGammaLength = lv_pathIndex;
    lv_pathIndex = 1;
    gv_pathtoOmega[lv_pathIndex] = PointFromId(3395);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoOmega[lv_pathIndex] = PointFromId(3396);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoOmega[lv_pathIndex] = PointFromId(3397);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoOmega[lv_pathIndex] = PointFromId(3398);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoOmega[lv_pathIndex] = PointFromId(3399);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoOmega[lv_pathIndex] = PointFromId(3400);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoOmega[lv_pathIndex] = PointFromId(3401);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoOmega[lv_pathIndex] = PointFromId(3402);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoOmega[lv_pathIndex] = PointFromId(3403);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoOmega[lv_pathIndex] = PointFromId(3404);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoOmega[lv_pathIndex] = PointFromId(3405);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoOmega[lv_pathIndex] = PointFromId(3406);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoOmega[lv_pathIndex] = PointFromId(3407);
    lv_pathIndex = (lv_pathIndex + 1);
    gv_pathtoOmega[lv_pathIndex] = PointFromId(3408);
    gv_pathtoOmegaLength = lv_pathIndex;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializePaths_Init () {
    gt_InitializePaths = TriggerCreate("gt_InitializePaths_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Path to Alpha Base
//--------------------------------------------------------------------------------------------------
bool gt_ShowPathtoAlphaBase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pathIndex;

    // Automatic Variable Declarations
    int autoC8626E03_ae;
    const int autoC8626E03_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC8626E03_ae = gv_pathtoAlphaLength;
    lv_pathIndex = 1;
    for ( ; ( (autoC8626E03_ai >= 0 && lv_pathIndex <= autoC8626E03_ae) || (autoC8626E03_ai < 0 && lv_pathIndex >= autoC8626E03_ae) ) ; lv_pathIndex += autoC8626E03_ai ) {
        PingCreate(PlayerGroupAll(), "PingArrow", gv_pathtoAlpha[lv_pathIndex], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0);
        PingSetScale(PingLastCreated(), 0.75);
        VisRevealArea(1, RegionCircle(gv_pathtoAlpha[lv_pathIndex], 5.0), 5.0, false);
        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowPathtoAlphaBase_Init () {
    gt_ShowPathtoAlphaBase = TriggerCreate("gt_ShowPathtoAlphaBase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Path to Beta Base
//--------------------------------------------------------------------------------------------------
bool gt_ShowPathtoBetaBase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pathIndex;

    // Automatic Variable Declarations
    int auto5B2550AE_ae;
    const int auto5B2550AE_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto5B2550AE_ae = gv_pathtoBetaLength;
    lv_pathIndex = 1;
    for ( ; ( (auto5B2550AE_ai >= 0 && lv_pathIndex <= auto5B2550AE_ae) || (auto5B2550AE_ai < 0 && lv_pathIndex >= auto5B2550AE_ae) ) ; lv_pathIndex += auto5B2550AE_ai ) {
        PingCreate(PlayerGroupAll(), "PingArrow", gv_pathtoBeta[lv_pathIndex], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0);
        PingSetScale(PingLastCreated(), 0.75);
        VisRevealArea(1, RegionCircle(gv_pathtoBeta[lv_pathIndex], 5.0), 5.0, false);
        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowPathtoBetaBase_Init () {
    gt_ShowPathtoBetaBase = TriggerCreate("gt_ShowPathtoBetaBase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Path to Gamma Base
//--------------------------------------------------------------------------------------------------
bool gt_ShowPathtoGammaBase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pathIndex;

    // Automatic Variable Declarations
    int auto4CC6DC33_ae;
    const int auto4CC6DC33_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto4CC6DC33_ae = gv_pathtoGammaLength;
    lv_pathIndex = 1;
    for ( ; ( (auto4CC6DC33_ai >= 0 && lv_pathIndex <= auto4CC6DC33_ae) || (auto4CC6DC33_ai < 0 && lv_pathIndex >= auto4CC6DC33_ae) ) ; lv_pathIndex += auto4CC6DC33_ai ) {
        PingCreate(PlayerGroupAll(), "PingArrow", gv_pathtoGamma[lv_pathIndex], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0);
        PingSetScale(PingLastCreated(), 0.75);
        VisRevealArea(1, RegionCircle(gv_pathtoGamma[lv_pathIndex], 5.0), 5.0, false);
        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowPathtoGammaBase_Init () {
    gt_ShowPathtoGammaBase = TriggerCreate("gt_ShowPathtoGammaBase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Path to Omega Base
//--------------------------------------------------------------------------------------------------
bool gt_ShowPathtoOmegaBase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pathIndex;

    // Automatic Variable Declarations
    int autoE1A77B09_ae;
    const int autoE1A77B09_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE1A77B09_ae = gv_pathtoOmegaLength;
    lv_pathIndex = 1;
    for ( ; ( (autoE1A77B09_ai >= 0 && lv_pathIndex <= autoE1A77B09_ae) || (autoE1A77B09_ai < 0 && lv_pathIndex >= autoE1A77B09_ae) ) ; lv_pathIndex += autoE1A77B09_ai ) {
        PingCreate(PlayerGroupAll(), "PingArrow", gv_pathtoOmega[lv_pathIndex], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0);
        PingSetScale(PingLastCreated(), 0.75);
        VisRevealArea(1, RegionCircle(gv_pathtoOmega[lv_pathIndex], 5.0), 5.0, false);
        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowPathtoOmegaBase_Init () {
    gt_ShowPathtoOmegaBase = TriggerCreate("gt_ShowPathtoOmegaBase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss P02 Warp-In Units Behavior
//--------------------------------------------------------------------------------------------------
bool gt_ProtossP02WarpInUnitsBehavior_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER02_PROTOSS))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(EventUnitProgressUnit()) == "Zealot") || (UnitGetType(EventUnitProgressUnit()) == "Stalker") || (UnitGetType(EventUnitProgressUnit()) == "Sentry") || (UnitGetType(EventUnitProgressUnit()) == "Immortal") || (UnitGetType(EventUnitProgressUnit()) == "DarkTemplar") || (UnitGetType(EventUnitProgressUnit()) == "HighTemplar") || (UnitGetType(EventUnitProgressUnit()) == "Archon") || (UnitGetType(EventUnitProgressUnit()) == "Phoenix") || (UnitGetType(EventUnitProgressUnit()) == "Scout") || (UnitGetType(EventUnitProgressUnit()) == "VoidRay") || (UnitGetType(EventUnitProgressUnit()) == "Carrier") || (UnitGetType(EventUnitProgressUnit()) == "Colossus"))) {
        UnitGroupAdd(gv_currentWaveUnits, EventUnitProgressUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossP02WarpInUnitsBehavior_Init () {
    gt_ProtossP02WarpInUnitsBehavior = TriggerCreate("gt_ProtossP02WarpInUnitsBehavior_Func");
    TriggerEnable(gt_ProtossP02WarpInUnitsBehavior, false);
    TriggerAddEventUnitConstructProgress(gt_ProtossP02WarpInUnitsBehavior, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AICampaignStart(gv_pLAYER02_PROTOSS);
    AICampaignStart(gv_pLAYER04_PURIFIER);
    AICampaignStart(gv_pLAYER06_TERRORFLEET);
    AIAttackWaveSetTargetPlayer(gv_pLAYER02_PROTOSS, PlayerGroupSingle(gv_pLAYER01_USER));
    AIAttackWaveSetTargetPlayer(gv_pLAYER06_TERRORFLEET, PlayerGroupSingle(gv_pLAYER01_USER));
    TriggerExecute(gt_ProtossP02AttackWaves, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss P02 Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_ProtossP02AttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ProtossP02WarpInUnitsBehavior, true);
    Wait(120.0, c_timeAI);
    gf_PrepareAIWave(gv_pLAYER02_PROTOSS, ge_AttackWavePath_SouthBasetoWestChoke);
    gf_AIP02WaveWarpIn(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), AbilityCommand("SuperWarpGateTrain", 0));
    gf_AIP02WaveWarpIn(libNtve_gf_DifficultyValueInt(1, 1, 1, 0), AbilityCommand("SuperWarpGateTrain", 5));
    Wait(10.0, c_timeAI);
    gf_SendAIWaveUsingPath(45);
    Wait(10.0, c_timeAI);
    gf_PrepareAIWave(gv_pLAYER02_PROTOSS, ge_AttackWavePath_SouthBasetoWestChoke);
    gf_AIP02WaveWarpIn(libNtve_gf_DifficultyValueInt(0, 0, 1, 2), AbilityCommand("SuperWarpGateTrain", 1));
    Wait(10.0, c_timeAI);
    gf_SendAIWaveUsingPath(libNtve_gf_DifficultyValueInt(45, 45, 45, 55));
    while (!((TriggerGetExecCount(gt_PurifierAfterAlpha) == 1))) {
        Wait(0.1, c_timeGame);
    }
    Wait(libNtve_gf_DifficultyValueFixed(30.0, 30.0, 30.0, 40.0), c_timeAI);
    gf_UpgradeAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 1, 0), "ProtossGroundArmorsLevel1");
    gf_UpgradeAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ProtossShieldsLevel1");
    gf_PrepareAIWave(gv_pLAYER02_PROTOSS, ge_AttackWavePath_EastBasetoEastChoke);
    gf_AIP02WaveWarpIn(libNtve_gf_DifficultyValueInt(2, 2, 2, 2), AbilityCommand("SuperWarpGateTrain", 1));
    gf_AIP02WaveWarpIn(libNtve_gf_DifficultyValueInt(0, 0, 1, 0), AbilityCommand("SuperWarpGateTrain", 8));
    gf_AIP02WaveWarpIn(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), AbilityCommand("SuperWarpGateTrain", 15));
    Wait(10.0, c_timeAI);
    gf_SendAIWaveUsingPath(60);
    Wait(10.0, c_timeAI);
    gf_PrepareAIWave(gv_pLAYER02_PROTOSS, ge_AttackWavePath_SouthBasetoEastChoke);
    gf_AIP02WaveWarpIn(libNtve_gf_DifficultyValueInt(1, 1, 1, 0), AbilityCommand("SuperWarpGateTrain", 1));
    gf_AIP02WaveWarpIn(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), AbilityCommand("SuperWarpGateTrain", 8));
    Wait(10.0, c_timeAI);
    gf_SendAIWaveUsingPath(60);
    while (!((TriggerGetExecCount(gt_PurifierAfterBeta) == 1))) {
        Wait(0.1, c_timeGame);
    }
    Wait(libNtve_gf_DifficultyValueFixed(15.0, 15.0, 20.0, 30.0), c_timeAI);
    gf_UpgradeAllProtoss(libNtve_gf_DifficultyValueInt(1, 1, 1, 0), "Charge");
    gf_UpgradeAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 1, 0), "ProtossAirArmorsLevel1");
    gf_UpgradeAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ProtossAirArmorsLevel2");
    gf_UpgradeAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ProtossGroundArmorsLevel2");
    gf_PrepareAIWave(gv_pLAYER02_PROTOSS, ge_AttackWavePath_EastBasetoEastChoke);
    gf_AIP02WaveWarpIn(libNtve_gf_DifficultyValueInt(2, 2, 3, 2), AbilityCommand("SuperWarpGateTrain", 0));
    gf_AIP02WaveWarpIn(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), AbilityCommand("SuperWarpGateTrain", 15));
    Wait(10.0, c_timeAI);
    gf_SendAIWaveUsingPath(60);
    Wait(10.0, c_timeAI);
    gf_PrepareAIWave(gv_pLAYER02_PROTOSS, ge_AttackWavePath_SouthBasetoWestChoke);
    gf_AIP02WaveWarpIn(libNtve_gf_DifficultyValueInt(0, 0, 1, 0), AbilityCommand("SuperWarpGateTrain", 14));
    gf_AIP02WaveWarpIn(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), AbilityCommand("SuperWarpGateTrain", 15));
    gf_AIP02WaveWarpIn(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), AbilityCommand("SuperWarpGateTrain", 6));
    Wait(10.0, c_timeAI);
    gf_SendAIWaveUsingPath(60);
    while (!((TriggerGetExecCount(gt_PurifierAfterGamma) == 1))) {
        Wait(0.1, c_timeGame);
    }
    Wait(libNtve_gf_DifficultyValueFixed(25.0, 25.0, 35.0, 45.0), c_timeAI);
    gf_UpgradeAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 1, 0), "ProtossShieldsLevel1");
    gf_UpgradeAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ProtossShieldsLevel2");
    gf_PrepareAIWave(gv_pLAYER02_PROTOSS, ge_AttackWavePath_SouthBasetoWestChoke);
    gf_AIP02WaveWarpIn(libNtve_gf_DifficultyValueInt(1, 1, 0, 0), AbilityCommand("SuperWarpGateTrain", 2));
    gf_AIP02WaveWarpIn(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), AbilityCommand("SuperWarpGateTrain", 5));
    gf_AIP02WaveWarpIn(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), AbilityCommand("SuperWarpGateTrain", 6));
    Wait(10.0, c_timeAI);
    gf_SendAIWaveUsingPath(50);
    Wait(10.0, c_timeAI);
    gf_PrepareAIWave(gv_pLAYER02_PROTOSS, ge_AttackWavePath_SouthBasetoEastChoke);
    gf_AIP02WaveWarpIn(libNtve_gf_DifficultyValueInt(0, 0, 1, 2), AbilityCommand("SuperWarpGateTrain", 2));
    gf_AIP02WaveWarpIn(libNtve_gf_DifficultyValueInt(0, 0, 1, 2), AbilityCommand("SuperWarpGateTrain", 0));
    Wait(10.0, c_timeAI);
    gf_SendAIWaveUsingPath(60);
    while (!((TriggerGetExecCount(gt_PurifierAfterOmega) == 1))) {
        Wait(0.1, c_timeGame);
    }
    Wait(libNtve_gf_DifficultyValueFixed(60.0, 60.0, 70.0, 80.0), c_timeAI);
    gf_UpgradeAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 1, 0), "ProtossAirWeaponsLevel2");
    gf_UpgradeAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 1, 0), "ProtossGroundWeaponsLevel2");
    gf_UpgradeAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ProtossShieldsLevel3");
    gf_UpgradeAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ProtossAirWeaponsLevel2");
    gf_UpgradeAllProtoss(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "ProtossGroundWeaponsLevel2");
    gf_PrepareAIWave(gv_pLAYER02_PROTOSS, ge_AttackWavePath_EastBasetoEastChoke);
    gf_AIP02WaveWarpIn(libNtve_gf_DifficultyValueInt(2, 2, 3, 2), AbilityCommand("SuperWarpGateTrain", 1));
    gf_AIP02WaveWarpIn(libNtve_gf_DifficultyValueInt(2, 2, 3, 0), AbilityCommand("SuperWarpGateTrain", 5));
    gf_AIP02WaveWarpIn(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), AbilityCommand("SuperWarpGateTrain", 9));
    gf_AIP02WaveWarpIn(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), AbilityCommand("SuperWarpGateTrain", 3));
    Wait(10.0, c_timeAI);
    gf_SendAIWaveUsingPath(60);
    Wait(35.0, c_timeAI);
    gf_PrepareAIWave(gv_pLAYER02_PROTOSS, ge_AttackWavePath_SouthBasetoEastChoke);
    gf_AIP02WaveWarpIn(libNtve_gf_DifficultyValueInt(1, 1, 2, 1), AbilityCommand("SuperWarpGateTrain", 8));
    gf_AIP02WaveWarpIn(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), AbilityCommand("SuperWarpGateTrain", 15));
    Wait(10.0, c_timeAI);
    gf_SendAIWaveUsingPath(60);
    gf_PrepareAIWave(gv_pLAYER02_PROTOSS, ge_AttackWavePath_SouthBasetoWestChoke);
    gf_AIP02WaveWarpIn(libNtve_gf_DifficultyValueInt(0, 0, 1, 2), AbilityCommand("SuperWarpGateTrain", 6));
    Wait(10.0, c_timeAI);
    gf_SendAIWaveUsingPath(60);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossP02AttackWaves_Init () {
    gt_ProtossP02AttackWaves = TriggerCreate("gt_ProtossP02AttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveMinerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveMinerals_Init () {
    gt_AIGiveMinerals = TriggerCreate("gt_AIGiveMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER02_PROTOSS, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER04_PURIFIER, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveGas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveGas_Init () {
    gt_AIGiveGas = TriggerCreate("gt_AIGiveGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER02_PROTOSS, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER04_PURIFIER, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Protoss Nexus Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionProtossNexusQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOn == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson03AHorner00032", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03AHorner00032", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionProtossNexusQ_Init () {
    gt_TransmissionProtossNexusQ = TriggerCreate("gt_TransmissionProtossNexusQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Help Colonists Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHelpColonistsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOn == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson03AHorner00017", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03AHorner00017", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionHelpColonistsQ_Init () {
    gt_TransmissionHelpColonistsQ = TriggerCreate("gt_TransmissionHelpColonistsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Purifier Arrived Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPurifierArrivedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOn == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/691701B9"), null, gv_purifier);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_purifier), 5.0, Color(100.00, 0.00, 0.00));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson03AHorner00016", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03AHorner00016", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPurifierArrivedQ_Init () {
    gt_TransmissionPurifierArrivedQ = TriggerCreate("gt_TransmissionPurifierArrivedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Purifier Uses Vortex Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPurifierUsesVortexQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOn == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER04_PURIFIER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/3E042673"), null, gv_purifier);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_purifier), 5.0, Color(100.00, 0.00, 0.00));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson03AHorner00020", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03AHorner00020", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPurifierUsesVortexQ_Init () {
    gt_TransmissionPurifierUsesVortexQ = TriggerCreate("gt_TransmissionPurifierUsesVortexQ_Func");
    TriggerAddEventUnitAbility(gt_TransmissionPurifierUsesVortexQ, null, AbilityCommand("VortexPurifier", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Beta Ship Under Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBetaShipUnderAttackQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ship;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((EventUnit() == UnitFromId(1678)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_ship = UnitFromId(1678);
    TriggerQueueEnter();
    UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/C6475E29"), null, lv_ship);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(lv_ship), 5.0, Color(100.00, 0.00, 0.00));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson03ACivilian6WhiteBald00028", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03ACivilian6WhiteBald00028", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBetaShipUnderAttackQ_Init () {
    gt_TransmissionBetaShipUnderAttackQ = TriggerCreate("gt_TransmissionBetaShipUnderAttackQ_Func");
    TriggerAddEventUnitDamaged(gt_TransmissionBetaShipUnderAttackQ, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Gamma Ship Under Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionGammaShipUnderAttackQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ship;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((EventUnit() == UnitFromId(2722)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_ship = UnitFromId(2722);
    TriggerQueueEnter();
    UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/1AC63578"), null, lv_ship);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(lv_ship), 5.0, Color(100.00, 0.00, 0.00));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson03ACivilian2WhitewMohawk00029", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03ACivilian2WhitewMohawk00029", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionGammaShipUnderAttackQ_Init () {
    gt_TransmissionGammaShipUnderAttackQ = TriggerCreate("gt_TransmissionGammaShipUnderAttackQ_Func");
    TriggerAddEventUnitDamaged(gt_TransmissionGammaShipUnderAttackQ, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Omega Ship Under Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionOmegaShipUnderAttackQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ship;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((EventUnit() == UnitFromId(1594)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_ship = UnitFromId(1594);
    TriggerQueueEnter();
    UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/79E103C0"), null, lv_ship);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(lv_ship), 5.0, Color(100.00, 0.00, 0.00));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson03ACivilian10Asian00022", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03ACivilian10Asian00022", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionOmegaShipUnderAttackQ_Init () {
    gt_TransmissionOmegaShipUnderAttackQ = TriggerCreate("gt_TransmissionOmegaShipUnderAttackQ_Func");
    TriggerAddEventUnitDamaged(gt_TransmissionOmegaShipUnderAttackQ, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Nexus Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionNexusDestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) < 4))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_nexusDestroyed == 1)) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson03ARaynor00013", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03ARaynor00013", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/953E20DC"));
        return true;
        TriggerQueueExit();
    }

    if ((gv_nexusDestroyed == 2)) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson03ARaynor00014", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03ARaynor00014", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/B1E08F77"));
        return true;
        TriggerQueueExit();
    }

    if ((gv_nexusDestroyed == 3)) {
        TriggerQueueEnter();
        TriggerEnable(TriggerGetCurrent(), false);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson03AHorner00015", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03AHorner00015", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/42018857"));
        return true;
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionNexusDestroyedQ_Init () {
    gt_TransmissionNexusDestroyedQ = TriggerCreate("gt_TransmissionNexusDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - First Terror Fleet Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFirstTerrorFleetWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOn == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson03AHorner00007", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03AHorner00007", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(1678)), 6.0, Color(100.00, 0.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/E7D73B75"), null, UnitFromId(1678));
    return true;
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFirstTerrorFleetWarningQ_Init () {
    gt_TransmissionFirstTerrorFleetWarningQ = TriggerCreate("gt_TransmissionFirstTerrorFleetWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Second Terror Fleet Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSecondTerrorFleetWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOn == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson03AAdjutant00033", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03AAdjutant00033", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(2722)), 6.0, Color(100.00, 0.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/623D590A"), null, UnitFromId(2722));
    return true;
    TriggerQueueExit();
    if ((gv_purifierProgressCounter == 3)) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson03AAdjutant00034", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03AAdjutant00034", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(1594)), 6.0, Color(100.00, 0.00, 0.00));
        UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/6152D1E8"), null, UnitFromId(1594));
        return true;
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionSecondTerrorFleetWarningQ_Init () {
    gt_TransmissionSecondTerrorFleetWarningQ = TriggerCreate("gt_TransmissionSecondTerrorFleetWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Third Terror Fleet Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionThirdTerrorFleetWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOn == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson03AAdjutant00034", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03AAdjutant00034", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitFromId(1594)), 6.0, Color(100.00, 0.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/E2825EBA"), null, UnitFromId(1594));
    return true;
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionThirdTerrorFleetWarningQ_Init () {
    gt_TransmissionThirdTerrorFleetWarningQ = TriggerCreate("gt_TransmissionThirdTerrorFleetWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Colonists Evacuate Beta Outpost Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionColonistsEvacuateBetaOutpostQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOn == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UIAlertUnit("Trigger", gv_pLAYER01_USER, StringToText(""), null, UnitFromId(1678));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson03ACivilianFemale400031", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03ACivilianFemale400031", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(3.0, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson03AHorner00019", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03AHorner00019", -1), c_transmissionDurationAdd, 1.0, true);
    // Transmission - SoundLink("THanson03AHorner00018", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03AHorner00018", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionColonistsEvacuateBetaOutpostQ_Init () {
    gt_TransmissionColonistsEvacuateBetaOutpostQ = TriggerCreate("gt_TransmissionColonistsEvacuateBetaOutpostQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Colonists Evacuate Gamma Outpost Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionColonistsEvacuateGammaOutpostQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOn == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UIAlertUnit("Trigger", gv_pLAYER01_USER, StringToText(""), null, UnitFromId(2722));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson03ACivilianFemale1Brunette00035", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03ACivilianFemale1Brunette00035", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("THanson03AHorner00025", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03AHorner00025", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionColonistsEvacuateGammaOutpostQ_Init () {
    gt_TransmissionColonistsEvacuateGammaOutpostQ = TriggerCreate("gt_TransmissionColonistsEvacuateGammaOutpostQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Colonists Evacuate Omega Outpost Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionColonistsEvacuateOmegaOutpostQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOn == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UIAlertUnit("Trigger", gv_pLAYER01_USER, StringToText(""), null, UnitFromId(1594));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson03ACivilian9Black00030", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03ACivilian9Black00030", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("THanson03AHorner00026", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03AHorner00026", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionColonistsEvacuateOmegaOutpostQ_Init () {
    gt_TransmissionColonistsEvacuateOmegaOutpostQ = TriggerCreate("gt_TransmissionColonistsEvacuateOmegaOutpostQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Purifier Enters Colonist Base Alpha Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPurifierEntersColonistBaseAlphaQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOn == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER01_USER, StringToText(""), null, RegionGetCenter(RegionFromId(13)));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson03AHanson00011", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03AHanson00011", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPurifierEntersColonistBaseAlphaQ_Init () {
    gt_TransmissionPurifierEntersColonistBaseAlphaQ = TriggerCreate("gt_TransmissionPurifierEntersColonistBaseAlphaQ_Func");
    TriggerAddEventUnitRegion(gt_TransmissionPurifierEntersColonistBaseAlphaQ, UnitRefFromVariable("gv_purifier"), RegionFromId(9), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Purifier Enters Colonist Base Beta Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPurifierEntersColonistBaseBetaQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOn == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER01_USER, StringToText(""), null, RegionGetCenter(RegionFromId(15)));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson03AHorner00010", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03AHorner00010", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPurifierEntersColonistBaseBetaQ_Init () {
    gt_TransmissionPurifierEntersColonistBaseBetaQ = TriggerCreate("gt_TransmissionPurifierEntersColonistBaseBetaQ_Func");
    TriggerAddEventUnitRegion(gt_TransmissionPurifierEntersColonistBaseBetaQ, UnitRefFromVariable("gv_purifier"), RegionFromId(11), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Purifier Enters Colonist Base Gamma Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPurifierEntersColonistBaseGammaQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOn == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER01_USER, StringToText(""), null, RegionGetCenter(RegionFromId(16)));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson03AHanson00023", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03AHanson00023", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPurifierEntersColonistBaseGammaQ_Init () {
    gt_TransmissionPurifierEntersColonistBaseGammaQ = TriggerCreate("gt_TransmissionPurifierEntersColonistBaseGammaQ_Func");
    TriggerAddEventUnitRegion(gt_TransmissionPurifierEntersColonistBaseGammaQ, UnitRefFromVariable("gv_purifier"), RegionFromId(12), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Purifier Enters Colonist Base Omega Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPurifierEntersColonistBaseOmegaQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOn == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER01_USER, StringToText(""), null, RegionGetCenter(RegionFromId(17)));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson03AHorner00024", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03AHorner00024", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPurifierEntersColonistBaseOmegaQ_Init () {
    gt_TransmissionPurifierEntersColonistBaseOmegaQ = TriggerCreate("gt_TransmissionPurifierEntersColonistBaseOmegaQ_Func");
    TriggerAddEventUnitRegion(gt_TransmissionPurifierEntersColonistBaseOmegaQ, UnitRefFromVariable("gv_purifier"), RegionFromId(8), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Purifier Enters Player Base Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPurifierEntersPlayerBaseQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOn == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER01_USER, StringToText(""), null, RegionGetCenter(RegionFromId(22)));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THanson03ARaynor00012", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03ARaynor00012", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPurifierEntersPlayerBaseQ_Init () {
    gt_TransmissionPurifierEntersPlayerBaseQ = TriggerCreate("gt_TransmissionPurifierEntersPlayerBaseQ_Func");
    TriggerAddEventUnitRegion(gt_TransmissionPurifierEntersPlayerBaseQ, UnitRefFromVariable("gv_purifier"), RegionFromId(10), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Purifier About To Fire
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPurifierAboutToFire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOn == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_purifierProgressCounter == 1)) {
        UIAlertUnit("Trigger", gv_pLAYER01_USER, StringToText(""), null, gv_purifier);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THanson03AMusicEventC", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        // Transmission - SoundLink("THanson03AHorner00003", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03AHorner00003", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
        return true;
    }

    if ((gv_purifierProgressCounter == 2)) {
        UIAlertUnit("Trigger", gv_pLAYER01_USER, StringToText(""), null, gv_purifier);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson03AHorner00008", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03AHorner00008", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
        return true;
    }

    if ((gv_purifierProgressCounter == 3)) {
        UIAlertUnit("Trigger", gv_pLAYER01_USER, StringToText(""), null, gv_purifier);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson03AHanson00009", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03AHanson00009", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
        return true;
    }

    if ((gv_purifierProgressCounter == 4)) {
        UIAlertUnit("Trigger", gv_pLAYER01_USER, StringToText(""), null, gv_purifier);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson03ARaynor00005", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03ARaynor00005", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
    }

    if ((gv_purifierProgressCounter == 5)) {
        UIAlertUnit("Trigger", gv_pLAYER01_USER, StringToText(""), null, gv_purifier);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("THanson03ARaynor00006", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03ARaynor00006", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPurifierAboutToFire_Init () {
    gt_TransmissionPurifierAboutToFire = TriggerCreate("gt_TransmissionPurifierAboutToFire_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Campaign Tips Q
//--------------------------------------------------------------------------------------------------
bool gt_CampaignTipsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateStorymodeTips();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CampaignTipsQ_Init () {
    gt_CampaignTipsQ = TriggerCreate("gt_CampaignTipsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Unit: Viking Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_NewUnitVikingTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Hanson03_Viking", libNtve_ge_TipType_NewUnit, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewUnitVikingTipQ_Init () {
    gt_NewUnitVikingTipQ = TriggerCreate("gt_NewUnitVikingTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Enemy: Purifier Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_NewEnemyPurifierTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Hanson03a_Purifier", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewEnemyPurifierTipQ_Init () {
    gt_NewEnemyPurifierTipQ = TriggerCreate("gt_NewEnemyPurifierTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Viking Kills of Enemy Units
//--------------------------------------------------------------------------------------------------
bool gt_VikingKillsofEnemyUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER01_USER))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), UnitGetOwner(libNtve_gf_KillingUnit()), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!(((UnitGetType(libNtve_gf_KillingUnit()) == "VikingAssault") || (UnitGetType(libNtve_gf_KillingUnit()) == "VikingFighter")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_vikingKills += 1;
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1)) {
        AchievementTermQuantitySet(gv_pLAYER01_USER, "Anniversary_THanson03A", gv_vikingKills);
        TextExpressionSetToken("Param/Expression/90D448AA", "A", IntToText(gv_vikingKills));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/90D448AA"), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VikingKillsofEnemyUnits_Init () {
    gt_VikingKillsofEnemyUnits = TriggerCreate("gt_VikingKillsofEnemyUnits_Func");
    TriggerAddEventUnitDied(gt_VikingKillsofEnemyUnits, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stats - Purifier Kills
//--------------------------------------------------------------------------------------------------
bool gt_StatsPurifierKills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER04_PURIFIER))) {
            return false;
        }

        if (!((UnitGetType(libNtve_gf_KillingUnit()) == "Purifier"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_purifierKills += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatsPurifierKills_Init () {
    gt_StatsPurifierKills = TriggerCreate("gt_StatsPurifierKills_Func");
    TriggerAddEventUnitDied(gt_StatsPurifierKills, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Purifier Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryPurifierDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_purifier) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    libNtve_gf_ShowHideBossBar(false, gv_purifierBossBar);
    libNtve_gf_ChangeUnitDamage(UnitFromId(2722), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(UnitFromId(1678), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(UnitFromId(1594), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    TriggerExecute(gt_ObjectiveDestroyPurifierComplete, true, true);
    libCamp_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryPurifierDestroyed_Init () {
    gt_VictoryPurifierDestroyed = TriggerCreate("gt_VictoryPurifierDestroyed_Func");
    TriggerAddEventUnitDied(gt_VictoryPurifierDestroyed, UnitRefFromUnit(UnitFromId(765)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((ObjectiveGetState(gv_primaryObjectiveDestroyProtossNexus) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_primaryObjectiveDestroyPurifier) == c_objectiveStateCompleted) && ((ObjectiveGetState(gv_bonusObjectiveDestroyFirstTerrorFleet) == c_objectiveStateHidden) || (ObjectiveGetState(gv_bonusObjectiveDestroyFirstTerrorFleet) == c_objectiveStateCompleted)) && ((ObjectiveGetState(gv_bonusObjectiveDestroySecondTerrorFleet) == c_objectiveStateHidden) || (ObjectiveGetState(gv_bonusObjectiveDestroySecondTerrorFleet) == c_objectiveStateCompleted)) && ((ObjectiveGetState(gv_bonusObjectiveDestroyThirdTerrorFleet) == c_objectiveStateHidden) || (ObjectiveGetState(gv_bonusObjectiveDestroyThirdTerrorFleet) == c_objectiveStateCompleted))) {
        AchievementAward(gv_pLAYER01_USER, "THanson03A_1");
    }

    if ((gv_colonyOutpostsSaved >= 3) && (libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1)) {
        AchievementAward(gv_pLAYER01_USER, "THanson03A_2");
    }

    if ((gv_colonyOutpostsSaved >= 2) && (libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        AchievementAward(gv_pLAYER01_USER, "THanson03A_3");
    }

    VictoryPanelAddAchievement("THanson03A_1");
    VictoryPanelAddAchievement("THanson03A_2");
    VictoryPanelAddAchievement("THanson03A_3");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/0DCEB36D"), IntToText(gv_colonyOutpostsSaved));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/E7158F77"), IntToText(gv_purifierKills));
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/6504EE32"), StringExternal("Param/Value/9C48DABD"));
    libCamp_gf_EndCampaignMission(gv_pLAYER01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, 0), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/BDE64F5B"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Colonies Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatColoniesDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/4C1A0ABA"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatColoniesDestroyed_Init () {
    gt_DefeatColoniesDestroyed = TriggerCreate("gt_DefeatColoniesDestroyed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_EndCampaignMission(gv_pLAYER01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    libCamp_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Nexus Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyNexusCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/AD2F9FE8"), StringExternal("Param/Value/A1645D39"), c_objectiveStateActive, true);
    gv_primaryObjectiveDestroyProtossNexus = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_THanson03AObjective1, ObjectiveLastCreated(), StringExternal("Param/Value/E20ACD09"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyNexusCreateQ_Init () {
    gt_ObjectiveDestroyNexusCreateQ = TriggerCreate("gt_ObjectiveDestroyNexusCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Nexus Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyNexusComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyNexusCreateQ, true, false);
    ObjectiveSetState(gv_primaryObjectiveDestroyProtossNexus, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyNexusComplete_Init () {
    gt_ObjectiveDestroyNexusComplete = TriggerCreate("gt_ObjectiveDestroyNexusComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Nexus Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyNexusFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyNexusCreateQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyNexusFailed_Init () {
    gt_ObjectiveDestroyNexusFailed = TriggerCreate("gt_ObjectiveDestroyNexusFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Purifier Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPurifierCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/D5ED231C"), StringExternal("Param/Value/3BF6C822"), c_objectiveStateActive, true);
    gv_primaryObjectiveDestroyPurifier = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_THanson03AObjective2, ObjectiveLastCreated(), StringExternal("Param/Value/F92933A7"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPurifierCreateQ_Init () {
    gt_ObjectiveDestroyPurifierCreateQ = TriggerCreate("gt_ObjectiveDestroyPurifierCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Purifier Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPurifierComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_purifierPing);
    TriggerExecute(gt_ObjectiveDestroyPurifierCreateQ, true, false);
    ObjectiveSetState(gv_primaryObjectiveDestroyPurifier, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPurifierComplete_Init () {
    gt_ObjectiveDestroyPurifierComplete = TriggerCreate("gt_ObjectiveDestroyPurifierComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy First Fleet Create Hidden
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyFirstFleetCreateHidden_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveCreate(StringExternal("Param/Value/523C2823"), StringExternal("Param/Value/35629878"), c_objectiveStateHidden, false);
    gv_bonusObjectiveDestroyFirstTerrorFleet = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_THanson03AObjective3, ObjectiveLastCreated(), StringExternal("Param/Value/501EA7FB"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyFirstFleetCreateHidden_Init () {
    gt_ObjectiveDestroyFirstFleetCreateHidden = TriggerCreate("gt_ObjectiveDestroyFirstFleetCreateHidden_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy First Fleet Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyFirstFleetComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveShow(gv_bonusObjectiveDestroyFirstTerrorFleet, PlayerGroupAll(), true);
    ObjectiveSetState(gv_bonusObjectiveDestroyFirstTerrorFleet, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyFirstFleetComplete_Init () {
    gt_ObjectiveDestroyFirstFleetComplete = TriggerCreate("gt_ObjectiveDestroyFirstFleetComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy First Fleet Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyFirstFleetFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveShow(gv_bonusObjectiveDestroyFirstTerrorFleet, PlayerGroupAll(), true);
    ObjectiveSetState(gv_bonusObjectiveDestroyFirstTerrorFleet, c_objectiveStateFailed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyFirstFleetFailed_Init () {
    gt_ObjectiveDestroyFirstFleetFailed = TriggerCreate("gt_ObjectiveDestroyFirstFleetFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Second Fleet Create Hidden
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroySecondFleetCreateHidden_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveCreate(StringExternal("Param/Value/8BE98668"), StringExternal("Param/Value/27A32384"), c_objectiveStateHidden, false);
    gv_bonusObjectiveDestroySecondTerrorFleet = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_THanson03AObjective4, ObjectiveLastCreated(), StringExternal("Param/Value/FDF11DB0"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroySecondFleetCreateHidden_Init () {
    gt_ObjectiveDestroySecondFleetCreateHidden = TriggerCreate("gt_ObjectiveDestroySecondFleetCreateHidden_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Second Fleet Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroySecondFleetComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveShow(gv_bonusObjectiveDestroySecondTerrorFleet, PlayerGroupAll(), true);
    ObjectiveSetState(gv_bonusObjectiveDestroySecondTerrorFleet, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroySecondFleetComplete_Init () {
    gt_ObjectiveDestroySecondFleetComplete = TriggerCreate("gt_ObjectiveDestroySecondFleetComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Second Fleet Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroySecondFleetFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveShow(gv_bonusObjectiveDestroySecondTerrorFleet, PlayerGroupAll(), true);
    ObjectiveSetState(gv_bonusObjectiveDestroySecondTerrorFleet, c_objectiveStateFailed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroySecondFleetFailed_Init () {
    gt_ObjectiveDestroySecondFleetFailed = TriggerCreate("gt_ObjectiveDestroySecondFleetFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Third Fleet Create Hidden
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyThirdFleetCreateHidden_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveCreate(StringExternal("Param/Value/E5B125BB"), StringExternal("Param/Value/3794325E"), c_objectiveStateHidden, false);
    gv_bonusObjectiveDestroyThirdTerrorFleet = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_THanson03AObjective5, ObjectiveLastCreated(), StringExternal("Param/Value/DC5A680F"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyThirdFleetCreateHidden_Init () {
    gt_ObjectiveDestroyThirdFleetCreateHidden = TriggerCreate("gt_ObjectiveDestroyThirdFleetCreateHidden_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Third Fleet Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyThirdFleetComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveShow(gv_bonusObjectiveDestroyThirdTerrorFleet, PlayerGroupAll(), true);
    ObjectiveSetState(gv_bonusObjectiveDestroyThirdTerrorFleet, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyThirdFleetComplete_Init () {
    gt_ObjectiveDestroyThirdFleetComplete = TriggerCreate("gt_ObjectiveDestroyThirdFleetComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Third Fleet Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyThirdFleetFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveShow(gv_bonusObjectiveDestroyThirdTerrorFleet, PlayerGroupAll(), true);
    ObjectiveSetState(gv_bonusObjectiveDestroyThirdTerrorFleet, c_objectiveStateFailed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyThirdFleetFailed_Init () {
    gt_ObjectiveDestroyThirdFleetFailed = TriggerCreate("gt_ObjectiveDestroyThirdFleetFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoCB8C76E4_g;
    int autoCB8C76E4_u;
    unit autoCB8C76E4_var;
    unitgroup autoC7ACFABD_g;
    int autoC7ACFABD_u;
    unit autoC7ACFABD_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_StartGame);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    gv_inCinematic = true;
    gv_gameOver = true;
    UnitRemove(gv_purifier);
    UnitRemove(UnitFromId(482));
    UnitRemove(UnitFromId(2352));
    UnitRemove(UnitFromId(2351));
    UnitRemove(UnitFromId(3312));
    autoCB8C76E4_g = UnitGroup(null, c_playerAny, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCB8C76E4_u = UnitGroupCount(autoCB8C76E4_g, c_unitCountAll);
    for (;; autoCB8C76E4_u -= 1) {
        autoCB8C76E4_var = UnitGroupUnitFromEnd(autoCB8C76E4_g, autoCB8C76E4_u);
        if (autoCB8C76E4_var == null) { break; }
        UnitRemove(autoCB8C76E4_var);
    }
    UnitPauseAll(true);
    autoC7ACFABD_g = UnitGroup("SCV", gv_pLAYER01_USER, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC7ACFABD_u = UnitGroupCount(autoC7ACFABD_g, c_unitCountAll);
    for (;; autoC7ACFABD_u -= 1) {
        autoC7ACFABD_var = UnitGroupUnitFromEnd(autoC7ACFABD_g, autoC7ACFABD_u);
        if (autoC7ACFABD_var == null) { break; }
        libNtve_gf_PauseUnit(autoC7ACFABD_var, false);
    }
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_pLAYER01_USER);
    AITimePause(true);
    GameTimeOfDayPause(true);
    libNtve_gf_SetAlliance(gv_pLAYER04_PURIFIER, gv_pLAYER03_COLONIST, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER04_PURIFIER, gv_pLAYER05_COLONISTSTRUCTURES, libNtve_ge_AllianceSetting_Enemy);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    TriggerExecute(gt_BriefingScene00, true, true);
    TriggerExecute(gt_BriefingScene01, true, true);
    TriggerExecute(gt_BriefingScene02, true, true);
    TriggerExecute(gt_BriefingScene03, true, true);
    TriggerExecute(gt_BriefingScene04, true, true);
    TriggerExecute(gt_BriefingScene05, true, true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UnitPauseAll(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Brieifng00Air, true, false);
    Wait(2.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Purifier", 0, gv_pLAYER04_PURIFIER, PointFromId(2363));
    gv_purifier = UnitLastCreated();
    UnitSetPropertyFixed(gv_purifier, c_unitPropMovementSpeed, 1.0);
    libNtve_gf_MakeUnitInvulnerable(gv_purifier, false);
    UnitIssueOrder(gv_purifier, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(194)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Biodome", 0, gv_pLAYER03_COLONIST, PointFromId(2367));
    libNtve_gf_UnitSetVariation(UnitLastCreated(), "Biodome", 3, "");
    gv_briefingBiodome = UnitLastCreated();
    UnitSetPropertyFixed(gv_briefingBiodome, c_unitPropLifePercent, 10.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "Hut", 0, gv_pLAYER05_COLONISTSTRUCTURES, PointFromId(2368));
    libNtve_gf_UnitSetVariation(UnitLastCreated(), "Hut", 5, "");
    libNtve_gf_CreateUnitsAtPoint2(1, "Hut", 0, gv_pLAYER05_COLONISTSTRUCTURES, PointFromId(2369));
    libNtve_gf_UnitSetVariation(UnitLastCreated(), "Hut", 7, "");
    libNtve_gf_CreateUnitsAtPoint2(1, "Hut", 0, gv_pLAYER05_COLONISTSTRUCTURES, PointFromId(2370));
    libNtve_gf_UnitSetVariation(UnitLastCreated(), "Hut", 4, "");
    libNtve_gf_CreateUnitsAtPoint2(1, "Hut", 0, gv_pLAYER05_COLONISTSTRUCTURES, PointFromId(2371));
    libNtve_gf_UnitSetVariation(UnitLastCreated(), "Hut", 3, "");
    libNtve_gf_CreateUnitsAtPoint2(1, "Hut", 0, gv_pLAYER05_COLONISTSTRUCTURES, PointFromId(3534));
    libNtve_gf_UnitSetVariation(UnitLastCreated(), "Hut", 5, "");
    libNtve_gf_CreateUnitsAtPoint2(1, "Hut", 0, gv_pLAYER05_COLONISTSTRUCTURES, PointFromId(3535));
    libNtve_gf_UnitSetVariation(UnitLastCreated(), "Hut", 3, "");
    libNtve_gf_CreateUnitsAtPoint2(1, "Hut", 0, gv_pLAYER05_COLONISTSTRUCTURES, PointFromId(3536));
    libNtve_gf_UnitSetVariation(UnitLastCreated(), "Hut", 1, "");
    libNtve_gf_CreateUnitsAtPoint2(1, "Hut", 0, gv_pLAYER05_COLONISTSTRUCTURES, PointFromId(3537));
    libNtve_gf_UnitSetVariation(UnitLastCreated(), "Hut", 2, "");
    UnitCreate(2, "Colonist", 0, gv_pLAYER03_COLONIST, RegionRandomPoint(RegionFromId(4)), libNtve_gf_RandomAngle());
    UnitCreate(2, "Colonist", 0, gv_pLAYER03_COLONIST, RegionRandomPoint(RegionFromId(4)), libNtve_gf_RandomAngle());
    UnitCreate(1, "ColonistFemale", 0, gv_pLAYER03_COLONIST, RegionRandomPoint(RegionFromId(4)), libNtve_gf_RandomAngle());
    UnitCreate(2, "Colonist", 0, gv_pLAYER03_COLONIST, RegionRandomPoint(RegionFromId(5)), libNtve_gf_RandomAngle());
    UnitCreate(1, "ColonistFemale", 0, gv_pLAYER03_COLONIST, RegionRandomPoint(RegionFromId(5)), libNtve_gf_RandomAngle());
    UnitCreate(2, "Colonist", 0, gv_pLAYER03_COLONIST, RegionRandomPoint(RegionFromId(6)), libNtve_gf_RandomAngle());
    UnitCreate(1, "ColonistFemale", 0, gv_pLAYER03_COLONIST, RegionRandomPoint(RegionFromId(6)), libNtve_gf_RandomAngle());
    UnitCreate(3, "Colonist", 0, gv_pLAYER03_COLONIST, RegionRandomPoint(RegionFromId(26)), libNtve_gf_RandomAngle());
    UnitCreate(1, "ColonistFemale", 0, gv_pLAYER03_COLONIST, RegionRandomPoint(RegionFromId(26)), libNtve_gf_RandomAngle());
    UnitCreate(2, "Colonist", 0, gv_pLAYER03_COLONIST, RegionRandomPoint(RegionFromId(27)), libNtve_gf_RandomAngle());
    UnitCreate(2, "ColonistFemale", 0, gv_pLAYER03_COLONIST, RegionRandomPoint(RegionFromId(27)), libNtve_gf_RandomAngle());
    libNtve_gf_CreateUnitsAtPoint2(2, "Marine", 0, gv_pLAYER05_COLONISTSTRUCTURES, PointFromId(2364));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_purifier), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(2, "Marine", 0, gv_pLAYER05_COLONISTSTRUCTURES, PointFromId(2365));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_purifier), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(2, "Marine", 0, gv_pLAYER05_COLONISTSTRUCTURES, PointFromId(2366));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_purifier), c_orderQueueReplace);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(192), 0.0, -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(193), 14.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_THanson03A_00");
    TriggerExecute(gt_Briefing00Civvies, true, false);
    // Transmission - SoundLink("THanson03ABriefingHanson00001", -1)
    SoundPlay(SoundLink("THanson03ABriefingHanson00001", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THanson03ABriefingHanson00001", -1))), c_timeGame);
    // Transmission - SoundLink("THanson03ABriefingRaynor00002", -1)
    SoundPlay(SoundLink("THanson03ABriefingRaynor00002", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THanson03ABriefingRaynor00002", -1))), c_timeGame);
    TriggerStop(gt_Brieifng00Air);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson03ABriefingHanson00001", -1))), c_timeGame);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson03ABriefingRaynor00002", -1))), c_timeGame);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00_Init () {
    gt_BriefingScene00 = TriggerCreate("gt_BriefingScene00_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing 00 Civvies
//--------------------------------------------------------------------------------------------------
bool gt_Briefing00Civvies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_random;
    unitgroup lv_civvieGroup;

    // Automatic Variable Declarations
    unitgroup auto6D075084_g;
    int auto6D075084_u;
    unit auto6D075084_var;
    int autoF2EED703_val;
    unitgroup auto17F1269E_g;
    int auto17F1269E_u;
    unit auto17F1269E_var;
    int autoBBF23CA4_val;
    unitgroup autoF4D87674_g;
    int autoF4D87674_u;
    unit autoF4D87674_var;

    // Variable Initialization
    lv_civvieGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    auto6D075084_g = UnitGroup("Colonist", gv_pLAYER03_COLONIST, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6D075084_u = UnitGroupCount(auto6D075084_g, c_unitCountAll);
    for (;; auto6D075084_u -= 1) {
        auto6D075084_var = UnitGroupUnitFromEnd(auto6D075084_g, auto6D075084_u);
        if (auto6D075084_var == null) { break; }
        lv_random = RandomInt(1, 2);
        autoF2EED703_val = lv_random;
        if (autoF2EED703_val == 1) {
            UnitBehaviorAdd(auto6D075084_var, "Run", auto6D075084_var, 1);
            UnitGroupAdd(lv_civvieGroup, auto6D075084_var);
            UnitIssueOrder(auto6D075084_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2358)), c_orderQueueReplace);
        }
        else if (autoF2EED703_val == 2) {
            UnitBehaviorAdd(auto6D075084_var, "Run", auto6D075084_var, 1);
            UnitGroupAdd(lv_civvieGroup, auto6D075084_var);
            UnitIssueOrder(auto6D075084_var, OrderTargetingUnit(null, gv_briefingBiodome), c_orderQueueReplace);
        }
        else {
        }
    }
    auto17F1269E_g = UnitGroup("ColonistFemale", gv_pLAYER03_COLONIST, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto17F1269E_u = UnitGroupCount(auto17F1269E_g, c_unitCountAll);
    for (;; auto17F1269E_u -= 1) {
        auto17F1269E_var = UnitGroupUnitFromEnd(auto17F1269E_g, auto17F1269E_u);
        if (auto17F1269E_var == null) { break; }
        lv_random = RandomInt(1, 2);
        autoBBF23CA4_val = lv_random;
        if (autoBBF23CA4_val == 1) {
            UnitBehaviorAdd(auto17F1269E_var, "Run", auto17F1269E_var, 1);
            UnitGroupAdd(lv_civvieGroup, auto17F1269E_var);
            UnitIssueOrder(auto17F1269E_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2358)), c_orderQueueReplace);
        }
        else if (autoBBF23CA4_val == 2) {
            UnitBehaviorAdd(auto17F1269E_var, "Run", auto17F1269E_var, 1);
            UnitGroupAdd(lv_civvieGroup, auto17F1269E_var);
            UnitIssueOrder(auto17F1269E_var, OrderTargetingUnit(null, gv_briefingBiodome), c_orderQueueReplace);
        }
        else {
        }
    }
    Wait(20.0, c_timeGame);
    autoF4D87674_g = lv_civvieGroup;
    autoF4D87674_u = UnitGroupCount(autoF4D87674_g, c_unitCountAll);
    for (;; autoF4D87674_u -= 1) {
        autoF4D87674_var = UnitGroupUnitFromEnd(autoF4D87674_g, autoF4D87674_u);
        if (autoF4D87674_var == null) { break; }
        UnitRemove(autoF4D87674_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Briefing00Civvies_Init () {
    gt_Briefing00Civvies = TriggerCreate("gt_Briefing00Civvies_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brieifng 00 Air
//--------------------------------------------------------------------------------------------------
bool gt_Brieifng00Air_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(RandomFixed(0.0, 1.5), c_timeGame);
        if ((RandomInt(1, 4) == 1)) {
            libNtve_gf_CreateUnitsAtPoint2(1, "VoidRay", 0, gv_pLAYER02_PROTOSS, RegionRandomPoint(RegionFromId(43)));
        }
        else {
            if ((RandomInt(1, 2) == 1)) {
                libNtve_gf_CreateUnitsAtPoint2(1, "Phoenix", 0, gv_pLAYER02_PROTOSS, RegionRandomPoint(RegionFromId(43)));
            }
            else {
                libNtve_gf_CreateUnitsAtPoint2(1, "Scout", 0, gv_pLAYER02_PROTOSS, RegionRandomPoint(RegionFromId(43)));
            }
        }
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(44))), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Brieifng00Air_Init () {
    gt_Brieifng00Air = TriggerCreate("gt_Brieifng00Air_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(gv_purifier, c_unitPropMovementSpeed, 0.35);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(213), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(3538), 20.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_THanson03A_01");
    // Transmission - SoundLink("THanson03ABriefingRaynor00004", -1)
    SoundPlay(SoundLink("THanson03ABriefingRaynor00004", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson03ABriefingRaynor00004", -1))), c_timeGame);
    UnitIssueOrder(gv_purifier, Order(AbilityCommand("PurifierPlanetCracker", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_purifier, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(194)), c_orderQueueAddToEnd);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson03ABriefingRaynor00004", -1))), c_timeGame);
    // Transmission - SoundLink("THanson03ABriefingSwann00007", -1)
    SoundPlay(SoundLink("THanson03ABriefingSwann00007", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THanson03ABriefingSwann00007", -1))), c_timeGame);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson03ABriefingRaynor00004", -1))), c_timeGame);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson03ABriefingSwann00007", -1))), c_timeGame);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01_Init () {
    gt_BriefingScene01 = TriggerCreate("gt_BriefingScene01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 02
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Briefing02VikingIndicators, true, false);
    libNtve_gf_CreateUnitsAtPoint2(1, "StarportFlying", 0, gv_pLAYER01_USER, PointFromId(3258));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("StarportLand", 0), PointFromId(3259)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "VikingFighter", 0, gv_pLAYER01_USER, PointFromId(3260));
    gv_briefingViking1 = UnitLastCreated();
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3262)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("AssaultMode", 0)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "VikingFighter", 0, gv_pLAYER01_USER, PointFromId(3261));
    gv_briefingViking2 = UnitLastCreated();
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3263)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("AssaultMode", 0)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "VikingFighter", 0, gv_pLAYER01_USER, PointFromId(3313));
    gv_briefingViking3 = UnitLastCreated();
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3314)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("AssaultMode", 0)), c_orderQueueAddToEnd);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(3264), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(3265), 6.5, -1, 10, true);
    MovieStartRecording("Briefing_Video_THanson03A_02");
    // Transmission - SoundLink("THanson03ABriefingSwann00003", -1)
    SoundPlay(SoundLink("THanson03ABriefingSwann00003", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THanson03ABriefingSwann00003", -1))), c_timeGame);
    // Transmission - SoundLink("THanson03ABriefingSwann00008", -1)
    SoundPlay(SoundLink("THanson03ABriefingSwann00008", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THanson03ABriefingSwann00008", -1))), c_timeGame);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson03ABriefingSwann00003", -1))), c_timeGame);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson03ABriefingSwann00008", -1))), c_timeGame);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene02_Init () {
    gt_BriefingScene02 = TriggerCreate("gt_BriefingScene02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing 02 Viking Indicators
//--------------------------------------------------------------------------------------------------
bool gt_Briefing02VikingIndicators_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(6.5, c_timeGame);
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", UnitGetPosition(gv_briefingViking1));
    gv_briefingVikingPingActor1 = libNtve_gf_ActorLastCreated();
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", UnitGetPosition(gv_briefingViking2));
    gv_briefingVikingPingActor2 = libNtve_gf_ActorLastCreated();
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", UnitGetPosition(gv_briefingViking3));
    gv_briefingVikingPingActor3 = libNtve_gf_ActorLastCreated();
    Wait(6.0, c_timeGame);
    libNtve_gf_KillModel(gv_briefingVikingPingActor1);
    libNtve_gf_KillModel(gv_briefingVikingPingActor2);
    libNtve_gf_KillModel(gv_briefingVikingPingActor3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Briefing02VikingIndicators_Init () {
    gt_Briefing02VikingIndicators = TriggerCreate("gt_Briefing02VikingIndicators_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 03
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto43C9BB49_n = 5;
    int auto43C9BB49_i;
    const int autoBF2225DD_n = 2;
    int autoBF2225DD_i;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_purifier, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(34))), c_orderQueueAddToEnd);
    for (auto43C9BB49_i = 1; auto43C9BB49_i <= auto43C9BB49_n; auto43C9BB49_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER05_COLONISTSTRUCTURES, RegionRandomPoint(RegionFromId(34)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_purifier), c_orderQueueReplace);
    }
    for (autoBF2225DD_i = 1; autoBF2225DD_i <= autoBF2225DD_n; autoBF2225DD_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Goliath", 0, gv_pLAYER05_COLONISTSTRUCTURES, RegionRandomPoint(RegionFromId(34)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_purifier), c_orderQueueReplace);
    }
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(3540), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(3539), 18.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_THanson03A_03");
    // Transmission - SoundLink("THanson03ABriefingHanson00005", -1)
    SoundPlay(SoundLink("THanson03ABriefingHanson00005", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THanson03ABriefingHanson00005", -1))), c_timeGame);
    // Transmission - SoundLink("THanson03ABriefingHanson00010", -1)
    SoundPlay(SoundLink("THanson03ABriefingHanson00010", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THanson03ABriefingHanson00010", -1))), c_timeGame);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson03ABriefingHanson00005", -1))), c_timeGame);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson03ABriefingHanson00010", -1))), c_timeGame);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene03_Init () {
    gt_BriefingScene03 = TriggerCreate("gt_BriefingScene03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 04
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene04_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC5620DE9_g;
    int autoC5620DE9_u;
    unit autoC5620DE9_var;
    unitgroup auto58DBEDD1_g;
    int auto58DBEDD1_u;
    unit auto58DBEDD1_var;
    unitgroup auto588BDE91_g;
    int auto588BDE91_u;
    unit auto588BDE91_var;
    unitgroup auto82A4CD1E_g;
    int auto82A4CD1E_u;
    unit auto82A4CD1E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Briefing04Nexus, true, false);
    autoC5620DE9_g = UnitGroup("Stalker", gv_pLAYER02_PROTOSS, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC5620DE9_u = UnitGroupCount(autoC5620DE9_g, c_unitCountAll);
    for (;; autoC5620DE9_u -= 1) {
        autoC5620DE9_var = UnitGroupUnitFromEnd(autoC5620DE9_g, autoC5620DE9_u);
        if (autoC5620DE9_var == null) { break; }
        UnitRemove(autoC5620DE9_var);
    }
    auto58DBEDD1_g = UnitGroup("Immortal", gv_pLAYER02_PROTOSS, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto58DBEDD1_u = UnitGroupCount(auto58DBEDD1_g, c_unitCountAll);
    for (;; auto58DBEDD1_u -= 1) {
        auto58DBEDD1_var = UnitGroupUnitFromEnd(auto58DBEDD1_g, auto58DBEDD1_u);
        if (auto58DBEDD1_var == null) { break; }
        UnitRemove(auto58DBEDD1_var);
    }
    auto588BDE91_g = UnitGroup("VoidRay", gv_pLAYER02_PROTOSS, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto588BDE91_u = UnitGroupCount(auto588BDE91_g, c_unitCountAll);
    for (;; auto588BDE91_u -= 1) {
        auto588BDE91_var = UnitGroupUnitFromEnd(auto588BDE91_g, auto588BDE91_u);
        if (auto588BDE91_var == null) { break; }
        UnitRemove(auto588BDE91_var);
    }
    auto82A4CD1E_g = UnitGroup(null, gv_pLAYER02_PROTOSS, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto82A4CD1E_u = UnitGroupCount(auto82A4CD1E_g, c_unitCountAll);
    for (;; auto82A4CD1E_u -= 1) {
        auto82A4CD1E_var = UnitGroupUnitFromEnd(auto82A4CD1E_g, auto82A4CD1E_u);
        if (auto82A4CD1E_var == null) { break; }
        libNtve_gf_PauseUnit(auto82A4CD1E_var, false);
    }
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_pLAYER02_PROTOSS);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Gateway", c_unitCreateConstruct, gv_pLAYER02_PROTOSS, PointFromId(2359));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Gateway", c_unitCreateConstruct, gv_pLAYER02_PROTOSS, PointFromId(1927));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateConstruct, gv_pLAYER02_PROTOSS, PointFromId(1930));
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(175), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(176), 18.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_THanson03A_04");
    // Transmission - SoundLink("THanson03ABriefingRaynor00006", -1)
    SoundPlay(SoundLink("THanson03ABriefingRaynor00006", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THanson03ABriefingRaynor00006", -1))), c_timeGame);
    // Transmission - SoundLink("THanson03ABriefingRaynor00011", -1)
    SoundPlay(SoundLink("THanson03ABriefingRaynor00011", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THanson03ABriefingRaynor00011", -1))), c_timeGame);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson03ABriefingRaynor00006", -1))), c_timeGame);
    Wait((0.5 * SoundLengthSync(SoundLink("THanson03ABriefingRaynor00011", -1))), c_timeGame);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene04_Init () {
    gt_BriefingScene04 = TriggerCreate("gt_BriefingScene04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing 04 Nexus
//--------------------------------------------------------------------------------------------------
bool gt_Briefing04Nexus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.5, c_timeGame);
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectLargeRed", UnitGetPosition(UnitFromId(2915)));
    gv_briefingNexusPingActor = libNtve_gf_ActorLastCreated();
    Wait(0.5, c_timeGame);
    UnitIssueOrder(gv_superWarpGateP02, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), PointFromId(1928)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(gv_superWarpGateP02, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(1932)), c_orderQueueAddToEnd);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(gv_superWarpGateP02, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), PointFromId(1931)), c_orderQueueAddToEnd);
    Wait(4.5, c_timeGame);
    UnitIssueOrder(gv_superWarpGateP02, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(2360)), c_orderQueueAddToEnd);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(gv_superWarpGateP02, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), PointFromId(1929)), c_orderQueueAddToEnd);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(gv_superWarpGateP02, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(2361)), c_orderQueueAddToEnd);
    Wait(8.0, c_timeGame);
    libNtve_gf_KillModel(gv_briefingNexusPingActor);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Briefing04Nexus_Init () {
    gt_Briefing04Nexus = TriggerCreate("gt_Briefing04Nexus_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 05
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene05_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(gv_purifier, PointFromId(1062), false);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(1884), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(1895), 4.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_THanson03A_05");
    UnitIssueOrder(gv_purifier, Order(AbilityCommand("PurifierPlanetCracker", 0)), c_orderQueueReplace);
    Wait(4.0, c_timeReal);
    CinematicFade(false, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene05_Init () {
    gt_BriefingScene05 = TriggerCreate("gt_BriefingScene05_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto021E1FC0_g;
    int auto021E1FC0_u;
    unit auto021E1FC0_var;
    unitgroup auto908E8A1C_g;
    int auto908E8A1C_u;
    unit auto908E8A1C_var;
    unitgroup auto7F966522_g;
    int auto7F966522_u;
    unit auto7F966522_var;
    unitgroup autoB54A3019_g;
    int autoB54A3019_u;
    unit autoB54A3019_var;
    unitgroup auto6A112BCA_g;
    int auto6A112BCA_u;
    unit auto6A112BCA_var;
    unitgroup auto04DE9BA3_g;
    int auto04DE9BA3_u;
    unit auto04DE9BA3_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_pLAYER01_USER);
    PlayerSetState(gv_pLAYER01_USER, c_playerStateXPGain, false);
    GameSetToDLighting("Haven");
    GameTimeOfDaySet("12:00:00");
    UnitPauseAll(true);
    libNtve_gf_ShowHideUnit(gv_purifier, false);
    gv_victoryHiddenUnitGroup = UnitGroup(null, gv_pLAYER01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(10), "TerrainObjectPurifierBlastMarkDoodad", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    TerrainShowRegion(RegionFromId(42), true);
    auto021E1FC0_g = gv_victoryHiddenUnitGroup;
    auto021E1FC0_u = UnitGroupCount(auto021E1FC0_g, c_unitCountAll);
    for (;; auto021E1FC0_u -= 1) {
        auto021E1FC0_var = UnitGroupUnitFromEnd(auto021E1FC0_g, auto021E1FC0_u);
        if (auto021E1FC0_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto021E1FC0_var, false);
    }
    auto908E8A1C_g = UnitGroup(null, gv_pLAYER02_PROTOSS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto908E8A1C_u = UnitGroupCount(auto908E8A1C_g, c_unitCountAll);
    for (;; auto908E8A1C_u -= 1) {
        auto908E8A1C_var = UnitGroupUnitFromEnd(auto908E8A1C_g, auto908E8A1C_u);
        if (auto908E8A1C_var == null) { break; }
        UnitRemove(auto908E8A1C_var);
    }
    auto7F966522_g = UnitGroup(null, gv_pLAYER02_PROTOSS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7F966522_u = UnitGroupCount(auto7F966522_g, c_unitCountAll);
    for (;; auto7F966522_u -= 1) {
        auto7F966522_var = UnitGroupUnitFromEnd(auto7F966522_g, auto7F966522_u);
        if (auto7F966522_var == null) { break; }
        UnitRemove(auto7F966522_var);
    }
    autoB54A3019_g = UnitGroup(null, gv_pLAYER03_COLONIST, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB54A3019_u = UnitGroupCount(autoB54A3019_g, c_unitCountAll);
    for (;; autoB54A3019_u -= 1) {
        autoB54A3019_var = UnitGroupUnitFromEnd(autoB54A3019_g, autoB54A3019_u);
        if (autoB54A3019_var == null) { break; }
        UnitRemove(autoB54A3019_var);
    }
    auto6A112BCA_g = UnitGroup(null, gv_pLAYER05_COLONISTSTRUCTURES, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6A112BCA_u = UnitGroupCount(auto6A112BCA_g, c_unitCountAll);
    for (;; auto6A112BCA_u -= 1) {
        auto6A112BCA_var = UnitGroupUnitFromEnd(auto6A112BCA_g, auto6A112BCA_u);
        if (auto6A112BCA_var == null) { break; }
        UnitRemove(auto6A112BCA_var);
    }
    auto04DE9BA3_g = UnitGroup("PathingBlocker1x1", c_playerAny, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto04DE9BA3_u = UnitGroupCount(auto04DE9BA3_g, c_unitCountAll);
    for (;; auto04DE9BA3_u -= 1) {
        auto04DE9BA3_var = UnitGroupUnitFromEnd(auto04DE9BA3_g, auto04DE9BA3_u);
        if (auto04DE9BA3_var == null) { break; }
        UnitRemove(auto04DE9BA3_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_victoryTerranGroup;

    // Automatic Variable Declarations
    const int autoF9A675C5_n = 7;
    int autoF9A675C5_i;
    const int auto6B4450BE_n = 5;
    int auto6B4450BE_i;
    const int auto4035A175_n = 5;
    int auto4035A175_i;
    const int auto727CC98D_n = 9;
    int auto727CC98D_i;
    const int auto8BD4B378_n = 6;
    int auto8BD4B378_i;
    const int auto64D21303_n = 7;
    int auto64D21303_i;
    unitgroup autoEC3BD24D_g;
    int autoEC3BD24D_u;
    unit autoEC3BD24D_var;

    // Variable Initialization
    lv_victoryTerranGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetBackground(c_backgroundFixed, "BelShirSkyBox", 100.0);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(112), 0.0, -1, 10, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "ColonistShip", 0, gv_pLAYER03_COLONIST, PointFromId(1820));
    libNtve_gf_CreateUnitsAtPoint2(1, "BioDomeCommand", 0, gv_pLAYER03_COLONIST, PointFromId(1815));
    libNtve_gf_CreateUnitsAtPoint2(1, "Hut", 0, gv_pLAYER03_COLONIST, PointFromId(1816));
    libNtve_gf_UnitSetVariation(UnitLastCreated(), "Hut", 4, "");
    libNtve_gf_CreateUnitsAtPoint2(1, "Hut", 0, gv_pLAYER03_COLONIST, PointFromId(1817));
    libNtve_gf_UnitSetVariation(UnitLastCreated(), "Hut", 8, "");
    libNtve_gf_CreateUnitsAtPoint2(1, "Hut", 0, gv_pLAYER03_COLONIST, PointFromId(1818));
    libNtve_gf_UnitSetVariation(UnitLastCreated(), "Hut", 5, "");
    libNtve_gf_CreateUnitsAtPoint2(1, "Hut", 0, gv_pLAYER03_COLONIST, PointFromId(1819));
    libNtve_gf_UnitSetVariation(UnitLastCreated(), "Hut", 1, "");
    libNtve_gf_CreateUnitsAtPoint2(1, "Goliath", 0, gv_pLAYER03_COLONIST, PointFromId(1821));
    libNtve_gf_CreateUnitsAtPoint2(1, "Goliath", 0, gv_pLAYER03_COLONIST, PointFromId(1822));
    libNtve_gf_CreateUnitsAtPoint2(1, "Goliath", 0, gv_pLAYER03_COLONIST, PointFromId(1823));
    for (autoF9A675C5_i = 1; autoF9A675C5_i <= autoF9A675C5_n; autoF9A675C5_i += 1) {
        UnitCreate(1, "Colonist", 0, gv_pLAYER03_COLONIST, RegionRandomPoint(RegionFromId(21)), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "VictoryAnimation", UnitLastCreated(), 1);
    }
    for (auto6B4450BE_i = 1; auto6B4450BE_i <= auto6B4450BE_n; auto6B4450BE_i += 1) {
        UnitCreate(1, "ColonistFemale", 0, gv_pLAYER03_COLONIST, RegionRandomPoint(RegionFromId(21)), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "VictoryAnimation", UnitLastCreated(), 1);
    }
    for (auto4035A175_i = 1; auto4035A175_i <= auto4035A175_n; auto4035A175_i += 1) {
        UnitCreate(1, "Marine", 0, gv_pLAYER03_COLONIST, RegionRandomPoint(RegionFromId(24)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_victoryTerranGroup, UnitLastCreated());
    }
    for (auto727CC98D_i = 1; auto727CC98D_i <= auto727CC98D_n; auto727CC98D_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "VikingFighter", 0, gv_pLAYER01_USER, RegionRandomPoint(RegionFromId(30)), RegionGetCenter(RegionFromId(23)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(853)), c_orderQueueReplace);
    }
    for (auto8BD4B378_i = 1; auto8BD4B378_i <= auto8BD4B378_n; auto8BD4B378_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "VikingFighter", 0, gv_pLAYER01_USER, RegionRandomPoint(RegionFromId(25)), RegionGetCenter(RegionFromId(23)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(853)), c_orderQueueReplace);
    }
    for (auto64D21303_i = 1; auto64D21303_i <= auto64D21303_n; auto64D21303_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "VikingFighter", 0, gv_pLAYER01_USER, RegionRandomPoint(RegionFromId(28)), RegionGetCenter(RegionFromId(23)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(853)), c_orderQueueReplace);
    }
    TriggerExecute(gt_VictoryScene, true, false);
    SoundPlayAtPoint(SoundLink("Emitter_CrowdSmallCheeringHanson3a", -1), PlayerGroupAll(), RegionGetCenter(RegionFromId(21)), 0.5, 100.0, 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THanson03AMusicOutro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_victoryCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(143), 13.0, -1, 10, true);
    Wait(1.5, c_timeGame);
    // Transmission - SoundLink("THanson03AHanson00002", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03AHanson00002", -1), c_transmissionDurationAdd, 1.0, true);
    Wait(0.5, c_timeGame);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(1824), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(1825), 20.0, -1, 10, true);
    autoEC3BD24D_g = lv_victoryTerranGroup;
    autoEC3BD24D_u = UnitGroupCount(autoEC3BD24D_g, c_unitCountAll);
    for (;; autoEC3BD24D_u -= 1) {
        autoEC3BD24D_var = UnitGroupUnitFromEnd(autoEC3BD24D_g, autoEC3BD24D_u);
        if (autoEC3BD24D_var == null) { break; }
        UnitBehaviorAdd(autoEC3BD24D_var, "VictoryAnimation", autoEC3BD24D_var, 1);
    }
    // Transmission - SoundLink("THanson03ASelendis00067", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THanson03ASelendis00067", -1), c_transmissionDurationAdd, 1.0, true);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    gv_victoryCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victoryCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(lv_fadeDuration, c_timeReal);
    UnitPauseAll(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Scene
//--------------------------------------------------------------------------------------------------
bool gt_VictoryScene_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_victoryPrism1;
    unit lv_victoryPrism2;
    unit lv_victoryPrism3;
    unit lv_selendis;
    unitgroup lv_victoryCineProtoss;

    // Automatic Variable Declarations
    const int auto7FB06276_n = 4;
    int auto7FB06276_i;
    const int auto0968682C_n = 2;
    int auto0968682C_i;
    unitgroup auto5DC60380_g;
    int auto5DC60380_u;
    unit auto5DC60380_var;

    // Variable Initialization
    lv_victoryCineProtoss = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto7FB06276_i = 1; auto7FB06276_i <= auto7FB06276_n; auto7FB06276_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Phoenix", 0, gv_pLAYER02_PROTOSS, RegionRandomPoint(RegionFromId(23)), RegionGetCenter(RegionFromId(30)));
        UnitGroupAdd(lv_victoryCineProtoss, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(30))), c_orderQueueReplace);
    }
    for (auto0968682C_i = 1; auto0968682C_i <= auto0968682C_n; auto0968682C_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "VoidRay", 0, gv_pLAYER02_PROTOSS, RegionRandomPoint(RegionFromId(23)), RegionGetCenter(RegionFromId(30)));
        UnitGroupAdd(lv_victoryCineProtoss, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(30))), c_orderQueueReplace);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "Selendis", 0, gv_pLAYER02_PROTOSS, PointFromId(853));
    lv_selendis = UnitLastCreated();
    UnitMagazineArm(lv_selendis, AbilityCommand("SelendisHangar", 0), 8);
    UnitSetTeamColorIndex(lv_selendis, 6);
    UnitSetPropertyFixed(lv_selendis, c_unitPropLifeMax, 8000.0);
    UnitSetPropertyFixed(lv_selendis, c_unitPropLifePercent, 100.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "Phoenix", 0, gv_pLAYER02_PROTOSS, PointFromId(893));
    UnitGroupAdd(lv_victoryCineProtoss, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(25))), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Phoenix", 0, gv_pLAYER02_PROTOSS, PointFromId(897));
    UnitGroupAdd(lv_victoryCineProtoss, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(28))), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "VoidRay", 0, gv_pLAYER02_PROTOSS, PointFromId(903));
    UnitGroupAdd(lv_victoryCineProtoss, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(25))), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "VoidRay", 0, gv_pLAYER02_PROTOSS, PointFromId(922));
    UnitGroupAdd(lv_victoryCineProtoss, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(28))), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "WarpPrismPhasing", 0, gv_pLAYER02_PROTOSS, PointFromId(954));
    lv_victoryPrism1 = UnitLastCreated();
    AISetUnitScriptControlled(UnitLastCreated(), true);
    libNtve_gf_CreateUnitsAtPoint2(1, "WarpPrismPhasing", 0, gv_pLAYER02_PROTOSS, PointFromId(997));
    lv_victoryPrism2 = UnitLastCreated();
    AISetUnitScriptControlled(UnitLastCreated(), true);
    libNtve_gf_CreateUnitsAtPoint2(1, "WarpPrismPhasing", 0, gv_pLAYER02_PROTOSS, PointFromId(998));
    lv_victoryPrism3 = UnitLastCreated();
    AISetUnitScriptControlled(UnitLastCreated(), true);
    UnitIssueOrder(lv_victoryPrism1, Order(AbilityCommand("TransportMode", 0)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(lv_victoryPrism2, Order(AbilityCommand("TransportMode", 0)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(lv_victoryPrism3, Order(AbilityCommand("TransportMode", 0)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(lv_selendis, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1001)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(lv_victoryPrism1, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1001)), c_orderQueueAddToEnd);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(lv_victoryPrism2, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1001)), c_orderQueueAddToEnd);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(lv_victoryPrism3, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1001)), c_orderQueueAddToEnd);
    auto5DC60380_g = lv_victoryCineProtoss;
    auto5DC60380_u = UnitGroupCount(auto5DC60380_g, c_unitCountAll);
    for (;; auto5DC60380_u -= 1) {
        auto5DC60380_var = UnitGroupUnitFromEnd(auto5DC60380_g, auto5DC60380_u);
        if (auto5DC60380_var == null) { break; }
        UnitIssueOrder(auto5DC60380_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1001)), c_orderQueueReplace);
        Wait(0.25, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryScene_Init () {
    gt_VictoryScene = TriggerCreate("gt_VictoryScene_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04Music_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_IntroSequence_Init();
    gt_StartGame_Init();
    gt_CreateNexusPings_Init();
    gt_DestroyNexusPings_Init();
    gt_NexusDestroyed_Init();
    gt_PURIFIERIntro_Init();
    gt_CreatePurifierBossBar_Init();
    gt_UpdatePurifierBossBar_Init();
    gt_EradicationPointAlpha_Init();
    gt_EradicationPointBeta_Init();
    gt_EradicationPointGamma_Init();
    gt_EradicationPointOmega_Init();
    gt_EradicatePlayersBase_Init();
    gt_PurifierUsesVortex_Init();
    gt_PurifierAfterAlpha_Init();
    gt_PurifierAfterBeta_Init();
    gt_PurifierAfterGamma_Init();
    gt_PurifierAfterOmega_Init();
    gt_SendBetaBaseTerrorFleet_Init();
    gt_SendGammaBaseTerrorFleet_Init();
    gt_SendOmegaBaseTerrorFleet_Init();
    gt_TerrorFleetBetaBaseBehavior_Init();
    gt_TerrorFleetGammaBaseBehavior_Init();
    gt_TerrorFleetOmegaBaseBehavior_Init();
    gt_TerrorFleetBetaDestroyed_Init();
    gt_TerrorFleetGammaDestroyed_Init();
    gt_TerrorFleetOmegaDestroyed_Init();
    gt_RemoveTerrorFleets_Init();
    gt_TerrorFleetPing_Init();
    gt_WarpInBetaTerrorFleet_Init();
    gt_WarpInGammaTerrorFleet_Init();
    gt_WarpInOmegaTerrorFleet_Init();
    gt_WarpInUnitsStarted_Init();
    gt_WarpInUnitsBehavior_Init();
    gt_ColonistsWander_Init();
    gt_ColonistBehavioratBaseBeta_Init();
    gt_ColonistBehavioratBaseGamma_Init();
    gt_ColonistBehavioratBaseOmega_Init();
    gt_ColonistsEvacuateBaseBeta_Init();
    gt_ColonistsEvacuateBaseGamma_Init();
    gt_ColonistsEvacuateBaseOmega_Init();
    gt_ColonistsGarrisonPlayerBase_Init();
    gt_RemoveLoadingColonist_Init();
    gt_ResourcePickups_Init();
    gt_InitializePaths_Init();
    gt_ShowPathtoAlphaBase_Init();
    gt_ShowPathtoBetaBase_Init();
    gt_ShowPathtoGammaBase_Init();
    gt_ShowPathtoOmegaBase_Init();
    gt_ProtossP02WarpInUnitsBehavior_Init();
    gt_StartAI_Init();
    gt_ProtossP02AttackWaves_Init();
    gt_AIGiveMinerals_Init();
    gt_AIGiveGas_Init();
    gt_TransmissionProtossNexusQ_Init();
    gt_TransmissionHelpColonistsQ_Init();
    gt_TransmissionPurifierArrivedQ_Init();
    gt_TransmissionPurifierUsesVortexQ_Init();
    gt_TransmissionBetaShipUnderAttackQ_Init();
    gt_TransmissionGammaShipUnderAttackQ_Init();
    gt_TransmissionOmegaShipUnderAttackQ_Init();
    gt_TransmissionNexusDestroyedQ_Init();
    gt_TransmissionFirstTerrorFleetWarningQ_Init();
    gt_TransmissionSecondTerrorFleetWarningQ_Init();
    gt_TransmissionThirdTerrorFleetWarningQ_Init();
    gt_TransmissionColonistsEvacuateBetaOutpostQ_Init();
    gt_TransmissionColonistsEvacuateGammaOutpostQ_Init();
    gt_TransmissionColonistsEvacuateOmegaOutpostQ_Init();
    gt_TransmissionPurifierEntersColonistBaseAlphaQ_Init();
    gt_TransmissionPurifierEntersColonistBaseBetaQ_Init();
    gt_TransmissionPurifierEntersColonistBaseGammaQ_Init();
    gt_TransmissionPurifierEntersColonistBaseOmegaQ_Init();
    gt_TransmissionPurifierEntersPlayerBaseQ_Init();
    gt_TransmissionPurifierAboutToFire_Init();
    gt_CampaignTipsQ_Init();
    gt_NewUnitVikingTipQ_Init();
    gt_NewEnemyPurifierTipQ_Init();
    gt_VikingKillsofEnemyUnits_Init();
    gt_StatsPurifierKills_Init();
    gt_VictoryPurifierDestroyed_Init();
    gt_Victory_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatColoniesDestroyed_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_ObjectiveDestroyNexusCreateQ_Init();
    gt_ObjectiveDestroyNexusComplete_Init();
    gt_ObjectiveDestroyNexusFailed_Init();
    gt_ObjectiveDestroyPurifierCreateQ_Init();
    gt_ObjectiveDestroyPurifierComplete_Init();
    gt_ObjectiveDestroyFirstFleetCreateHidden_Init();
    gt_ObjectiveDestroyFirstFleetComplete_Init();
    gt_ObjectiveDestroyFirstFleetFailed_Init();
    gt_ObjectiveDestroySecondFleetCreateHidden_Init();
    gt_ObjectiveDestroySecondFleetComplete_Init();
    gt_ObjectiveDestroySecondFleetFailed_Init();
    gt_ObjectiveDestroyThirdFleetCreateHidden_Init();
    gt_ObjectiveDestroyThirdFleetComplete_Init();
    gt_ObjectiveDestroyThirdFleetFailed_Init();
    gt_BriefingQ_Init();
    gt_BriefingScene00_Init();
    gt_Briefing00Civvies_Init();
    gt_Brieifng00Air_Init();
    gt_BriefingScene01_Init();
    gt_BriefingScene02_Init();
    gt_Briefing02VikingIndicators_Init();
    gt_BriefingScene03_Init();
    gt_BriefingScene04_Init();
    gt_Briefing04Nexus_Init();
    gt_BriefingScene05_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryScene_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
