//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Ghost of a Chance
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/CampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libCamp_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER01_USER = 1;
const int gv_pLAYER02_TOSH = 2;
const int gv_pLAYER03_DROPSHIPS = 3;
const int gv_pLAYER04_NOVA = 4;
const int gv_pLAYER05_ULTRA = 5;
const int gv_pLAYER06_THOR = 6;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_inCinematic;
int gv_platform;
unit gv_nova;
unitgroup gv_novaGroup;
unitgroup gv_spectres;
actor gv_outhouse;
int gv_novaNukeCount;
int gv_platformSpectresBOARD;
int gv_platform1Spectres;
int gv_platform2Spectres;
int gv_platform3Spectres;
unit[11] gv_spectreUnitArray;
int[11] gv_spectrePingArray;
unitgroup gv_p1StartingTroopsA;
unitgroup gv_p1StartingTroopsB;
unit gv_p1DropshipA;
unit gv_p1DropshipB;
unit gv_p1SnipeTarget;
unitgroup gv_p1MiTuGuards;
revealer gv_p1MiTuRevealer;
bool gv_p1MiTuGuardsEngaged;
int gv_p1MiTuNovaHitCount;
unit gv_p1Nighthawk;
timer gv_p1NighthawkTimer;
unit gv_p1Tank;
revealer gv_p1TankRevealer;
unit gv_p1Spectre;
unit gv_p1Spectre2;
revealer gv_p1Spec2Revealer;
unit gv_p1MineralDepot;
int gv_p1SnipeTransmissionSafety;
actor gv_p1GateDesignator;
actor gv_p1ObjectiveDesignator;
unit gv_p1Gate;
unit gv_p1GateControl;
unitgroup gv_p1Units;
unit gv_dominatedUnit;
unitgroup gv_p2SearchCrew;
int gv_p2SearchCrewLine;
bool gv_p2SearchCrewSilenced;
unit gv_p2Raven;
unit gv_p2Nuker;
unit gv_p2NukerSilo;
bool gv_p2NukeDone;
unitgroup gv_p2LZGuards;
unit gv_p2DropPodder;
unit gv_p2TerrazineDepot;
unit gv_p2WestSpectre;
actor gv_p2GateDesignator;
actor gv_p2ObjectiveDesignator;
unit gv_p2Gate;
unit gv_p2GateControl;
unit gv_p2Silo;
unitgroup gv_p2Units;
bool gv_p2DropDone;
bool gv_p2NighthawkReplaced;
bool gv_p2ReapersReplaced;
revealer gv_p2EndRevealer;
unit gv_p3Raven;
unit gv_p3BCruiser;
unit gv_p3NukerA;
unit gv_p3NukerASilo;
unit gv_p3NukerB;
unit gv_p3NukerBSilo;
unit gv_p3SouthViking;
unit gv_p3NorthViking;
unitgroup gv_p3SouthGuards;
unitgroup gv_p3NorthGuards;
unit gv_p3BridgeSpectre;
unit gv_p3PsiIndoctrinator;
unit gv_p3SouthThor;
unit gv_p3SouthMarauder1;
unit gv_p3SouthMarauder2;
unitgroup gv_p3SouthPatrolGroup;
unitgroup gv_p3ObjectiveGuards;
int gv_p3ObjectiveGuardCount;
actor gv_p3ObjectiveDesignator;
unit gv_p3Silo;
unitgroup gv_p3Units;
revealer gv_p3EndRevealer;
int gv_spectreKillsByReapers;
int gv_bonusCreditsEarned;
int gv_nukeLaunchCount;
int gv_dominationCastCount;
int gv_dominationKills;
int gv_snipeKills;
int gv_objectiveDestroyMineralDepot;
int gv_objectiveDestroyTerrazineRefinery;
int gv_objectiveDestroyPsiIndoctrinator;
int gv_objectiveNovaMustSurvive;
int gv_objectiveKillSpectres;
int gv_objectiveKillSpectresKilled;
int gv_objectiveKillSpectresMax;
bool gv_p1DoneCompleted;
unitgroup gv_p1DoneOldUnits;
bool gv_p2DoneCompleted;
unitgroup gv_p2DoneOldUnits;

void InitGlobals () {
    int init_i;

    gv_platform = 1;
    gv_novaGroup = UnitGroupEmpty();
    gv_spectres = UnitGroupEmpty();
    gv_platformSpectresBOARD = c_boardNone;
    gv_platform1Spectres = 2;
    gv_platform2Spectres = 3;
    gv_platform3Spectres = 5;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_spectrePingArray[init_i] = c_invalidPingId;
    }
    gv_p1StartingTroopsA = UnitGroupEmpty();
    gv_p1StartingTroopsB = UnitGroupEmpty();
    gv_p1MiTuGuards = UnitGroupEmpty();
    gv_p1NighthawkTimer = TimerCreate();
    gv_p1SnipeTransmissionSafety = c_invalidTransmissionId;
    gv_p1Units = UnitGroupEmpty();
    gv_p2SearchCrew = UnitGroupEmpty();
    gv_p2SearchCrewLine = c_invalidTransmissionId;
    gv_p2LZGuards = UnitGroupEmpty();
    gv_p2Units = UnitGroupEmpty();
    gv_p3SouthGuards = UnitGroupEmpty();
    gv_p3NorthGuards = UnitGroupEmpty();
    gv_p3SouthPatrolGroup = UnitGroupEmpty();
    gv_p3ObjectiveGuards = UnitGroupEmpty();
    gv_p3Units = UnitGroupEmpty();
    gv_objectiveDestroyMineralDepot = c_invalidObjectiveId;
    gv_objectiveDestroyTerrazineRefinery = c_invalidObjectiveId;
    gv_objectiveDestroyPsiIndoctrinator = c_invalidObjectiveId;
    gv_objectiveNovaMustSurvive = c_invalidObjectiveId;
    gv_objectiveKillSpectres = c_invalidObjectiveId;
    gv_p1DoneOldUnits = UnitGroupEmpty();
    gv_p2DoneOldUnits = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_HideUnitGroup (bool lp_showHide, unitgroup lp_units);
void gf_IssueRelativeOrders (unitgroup lp_units, abilcmd lp_abilCmd, point lp_source, point lp_target);
void gf_ArmSilo (unit lp_silo);
void gf_CheckUnitLeash (unit lp_unit, point lp_home, fixed lp_distance);
void gf_P2NukeEm (unit lp_nuker, point lp_nukeTarget, point lp_retreatTo);
void gf_SpawnMove (string lp_unitType, int lp_player, point lp_spawnLoc, point lp_moveTarget);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04Music;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Objectives;
trigger gt_Init08Help;
trigger gt_ResetNova;
trigger gt_IntroSequence;
trigger gt_StartGameQ;
trigger gt_TipStoryModeQ;
trigger gt_NukeCameraShakeCount;
trigger gt_PlatformSpectresBoardCreate;
trigger gt_SpectreBoardUpdater;
trigger gt_SpectreKilled;
trigger gt_AddSpectreping;
trigger gt_DominationEndSafety;
trigger gt_P1Activate;
trigger gt_P1DropshipExit;
trigger gt_P1SnipeTripwire;
trigger gt_P1SnipeCommentQ;
trigger gt_P1SnipeTipQ;
trigger gt_P1SnipeFlashKiller;
trigger gt_P1GateCommentQ;
trigger gt_P1GateOpenQ;
trigger gt_P1GateReticleKiller;
trigger gt_P1MiTuReveal;
trigger gt_P1MiTuGuardsEngaged;
trigger gt_P1MiTuHelpMeQ;
trigger gt_P1TankReveal;
trigger gt_P1TankWarningQ;
trigger gt_P1DominationTipQ;
trigger gt_P1DominationFlashInitiate;
trigger gt_P1DominationFlashKiller;
trigger gt_P1NighthawkSpot;
trigger gt_P1NighthawkReturnQuiet;
trigger gt_P1NighthawkFlee;
trigger gt_P1SpectreWarningQ;
trigger gt_P1Spec2Reveal;
trigger gt_P1Spec2powers;
trigger gt_P1ObjectiveDesignator;
trigger gt_P1Designatorremover;
trigger gt_P1MineralDepotDestroyed;
trigger gt_P2SearchCrewQ;
trigger gt_P2DelayedRavenMovementBrutal;
trigger gt_P2SearchCrewCombat;
trigger gt_P2RavenAttacked;
trigger gt_P2RavenSkipped;
trigger gt_P2RavenFlee;
trigger gt_P2LZGuardDominated;
trigger gt_P2LZGuardReleased;
trigger gt_P2LZVikingsLand;
trigger gt_P2LZGuardsReturn;
trigger gt_P2LZGuardsDead;
trigger gt_P2LZOwnerChange;
trigger gt_P2LZSecureLinesQ;
trigger gt_P2LZDropshipsArrive;
trigger gt_P2LZDropshipExit;
trigger gt_P2BackupNighthawkQ;
trigger gt_P2BackupNightawkEntrance;
trigger gt_P2BackupReapersQ;
trigger gt_P2BackupReapersEntrance;
trigger gt_P2GateControlDesignator;
trigger gt_P2GateReticleKiller;
trigger gt_P2GateOpenQ;
trigger gt_P2BansheeCloak;
trigger gt_P2SiloTipQ;
trigger gt_P2SiloHackedQ;
trigger gt_P2NukeA;
trigger gt_P2NukeB;
trigger gt_P2NukeC;
trigger gt_P2NukeTauntQ;
trigger gt_P2WestSpectrepowers;
trigger gt_P2EndReveal;
trigger gt_P2ObjectiveDesignator;
trigger gt_P2Designatorremover;
trigger gt_P2TerrazineRefineryDestroyed;
trigger gt_P3Activate;
trigger gt_P3SpawnPlayerUnitsQ;
trigger gt_P3Leashes;
trigger gt_P3SouthViking;
trigger gt_P3NorthViking;
trigger gt_P3SouthRavenDrone;
trigger gt_P3SouthRavenTurrets;
trigger gt_P3RavenPatroller;
trigger gt_P3CentralSpectrepowers;
trigger gt_P3UltraRawr;
trigger gt_P3BrittleUltraliskBarriers;
trigger gt_P3ThorDominated;
trigger gt_P3ThorReleased;
trigger gt_P3ThorKilled;
trigger gt_P3SiloAHackedQ;
trigger gt_P3NukeA;
trigger gt_P3NukeB;
trigger gt_P3PostNukerApowers;
trigger gt_P3PostNukerBpowers;
trigger gt_P3NukeTauntQ;
trigger gt_P3ObjectiveDesignator;
trigger gt_P3Designatorremover;
trigger gt_P3EndReveal;
trigger gt_P3EndNukeCommentQ;
trigger gt_NukeLaunched;
trigger gt_NovaSnipeKills;
trigger gt_DominationCast;
trigger gt_DominatedKills;
trigger gt_SpectreKillsByReapers;
trigger gt_VictoryPsiIndoctrinatorDestroyed;
trigger gt_Victory;
trigger gt_DefeatNovaDead;
trigger gt_DefeatNovaStrandedonP2;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_ObjectiveDestroyCreate;
trigger gt_ObjectiveDestroyDiscoverQ;
trigger gt_ObjectiveDestroyUpdateMineralDepotQ;
trigger gt_ObjectiveDestroyUpdateTerrazineRefineryQ;
trigger gt_ObjectiveDestroyComplete;
trigger gt_ObjectiveSurviveCreate;
trigger gt_ObjectiveSurviveDiscoverQ;
trigger gt_ObjectiveSurviveComplete;
trigger gt_ObjectiveKillSpectresCreate;
trigger gt_ObjectiveKillSpectresUpdate;
trigger gt_ObjectiveKillSpectresDiscoverQ;
trigger gt_ObjectiveKillSpectresCompleteQ;
trigger gt_BriefingQ;
trigger gt_BriefingScene00AvernusStation;
trigger gt_BriefingScene01JoriumStockpile;
trigger gt_BriefingScene02TerrazineTanks;
trigger gt_BriefingScene03PsiIndoctrinator;
trigger gt_BriefingScene04Defenses;
trigger gt_BriefingScene05NukePrep;
trigger gt_BriefingScene06NukeLaunch;
trigger gt_BriefingNukeActivity1;
trigger gt_BriefingNukeActivity2;
trigger gt_P1DoneQ;
trigger gt_P1DoneSetup;
trigger gt_P1DoneCinematic;
trigger gt_P1DoneCinematicEnd;
trigger gt_P1DoneCleanup;
trigger gt_P1DoneSwitchtoPlatform2;
trigger gt_P1DoneDropPodExit;
trigger gt_P2DoneQ;
trigger gt_P2DoneSetup;
trigger gt_P2DoneCinematic;
trigger gt_P2DoneCinematicEnd;
trigger gt_P2DoneCleanup;
trigger gt_P2DoneSwitchtoPlatform3;
trigger gt_P2DoneDropPodExit;
trigger gt_VictoryQ;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_HideUnitGroup (bool lp_showHide, unitgroup lp_units) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto83688F79_g;
    int auto83688F79_u;

    // Variable Initialization

    // Implementation
    auto83688F79_g = lp_units;
    auto83688F79_u = UnitGroupCount(auto83688F79_g, c_unitCountAll);
    for (;; auto83688F79_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto83688F79_g, auto83688F79_u);
        if (lv_indexUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_indexUnit, lp_showHide);
    }
}

void gf_IssueRelativeOrders (unitgroup lp_units, abilcmd lp_abilCmd, point lp_source, point lp_target) {
    // Variable Declarations
    unit lv_indexUnit;
    fixed lv_xDelta;
    fixed lv_yDelta;

    // Automatic Variable Declarations
    unitgroup auto9CED6B2F_g;
    int auto9CED6B2F_u;

    // Variable Initialization

    // Implementation
    lv_xDelta = (PointGetX(lp_target) - PointGetX(lp_source));
    lv_yDelta = (PointGetY(lp_target) - PointGetY(lp_source));
    auto9CED6B2F_g = lp_units;
    auto9CED6B2F_u = UnitGroupCount(auto9CED6B2F_g, c_unitCountAll);
    for (;; auto9CED6B2F_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto9CED6B2F_g, auto9CED6B2F_u);
        if (lv_indexUnit == null) { break; }
        UnitIssueOrder(lv_indexUnit, OrderTargetingPoint(lp_abilCmd, PointWithOffset(UnitGetPosition(lv_indexUnit), lv_xDelta, lv_yDelta)), c_orderQueueReplace);
    }
}

void gf_ArmSilo (unit lp_silo) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_PauseUnit(lp_silo, false);
    if ((UnitGetType(lp_silo) == "NukeSiloNova")) {
        UnitMagazineArm(lp_silo, AbilityCommand("HeroArmNuke", 0), 1);
    }
    else {
        UnitMagazineArm(lp_silo, AbilityCommand("SpectreNukeSiloArmMagazine", 1), 1);
    }
}

void gf_CheckUnitLeash (unit lp_unit, point lp_home, fixed lp_distance) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetOwner(lp_unit) != gv_pLAYER01_USER) && (DistanceBetweenPoints(UnitGetPosition(lp_unit), lp_home) > lp_distance)) {
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lp_home), c_orderQueueReplace);
    }

}

void gf_P2NukeEm (unit lp_nuker, point lp_nukeTarget, point lp_retreatTo) {
    // Automatic Variable Declarations
    // Implementation
    gf_ArmSilo(gv_p2NukerSilo);
    VisRevealArea(gv_pLAYER02_TOSH, RegionCircle(lp_nukeTarget, 1.0), 20.0, false);
    Wait(0.1, c_timeGame);
    UnitIssueOrder(lp_nuker, Order(AbilityCommand("RogueGhostCloak", 0)), c_orderQueueReplace);
    UnitIssueOrder(lp_nuker, OrderTargetingPoint(AbilityCommand("SpectreNuke", 0), lp_nukeTarget), c_orderQueueAddToEnd);
    UnitIssueOrder(lp_nuker, OrderTargetingPoint(AbilityCommand("move", 0), lp_retreatTo), c_orderQueueAddToEnd);
    UnitIssueOrder(lp_nuker, Order(AbilityCommand("RogueGhostCloak", 1)), c_orderQueueAddToEnd);
    VisRevealArea(gv_pLAYER01_USER, RegionCircle(lp_nukeTarget, 8.0), 25.0, false);
}

void gf_SpawnMove (string lp_unitType, int lp_player, point lp_spawnLoc, point lp_moveTarget) {
    // Variable Declarations
    point lv_pointBeyond;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pointBeyond = PointWithOffsetPolar(lp_moveTarget, 10.0, PointGetFacing(lp_moveTarget));

    // Implementation
    libNtve_gf_UnitCreateFacingPoint(1, lp_unitType, 0, lp_player, lp_spawnLoc, lp_moveTarget);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lp_moveTarget), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), lv_pointBeyond), c_orderQueueAddToEnd);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_LoadCampaignData(libCamp_ge_MapID_MapTTosh03B);
    TriggerExecute(gt_Init01Technology, true, true);
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04Music, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Objectives, true, true);
    TriggerExecute(gt_Init08Help, true, true);
    libCamp_gf_RegisterFootageRecording(gt_BriefingQ);
    libCamp_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_IntroSequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeAbilityAllow(gv_pLAYER01_USER, AbilityCommand("NovaSnipe", 0), false);
    TechTreeAbilityAllow(gv_pLAYER01_USER, AbilityCommand("Domination", 0), false);
    TechTreeUpgradeAddLevel(gv_pLAYER01_USER, "Burrow", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER01_USER, "ZergMeleeWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER01_USER, "ZergMeleeWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER01_USER, "ZergMeleeWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER01_USER, "ZergGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER01_USER, "ZergGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER01_USER, "ZergGroundArmorsLevel3", 1);
    TechTreeBehaviorAllow(gv_pLAYER01_USER, "Cleave", true);
    TechTreeAbilityAllow(gv_pLAYER01_USER, AbilityCommand("BurrowUltraliskDown", 0), true);
    TechTreeAbilityAllow(gv_pLAYER01_USER, AbilityCommand("BurrowUltraliskUp", 0), true);
    TechTreeAbilityAllow(gv_pLAYER01_USER, AbilityCommand("Yamato", 0), true);
    TechTreeUpgradeAddLevel(gv_pLAYER02_TOSH, "SiegeTech", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER02_TOSH, "BansheeCloak", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER02_TOSH, "YamatoCannon", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER02_TOSH, "JackhammerConcussionGrenades", 1);
    TechTreeAbilityAllow(gv_pLAYER02_TOSH, AbilityCommand("Obliterate", 0), true);
    TechTreeAbilityAllow(gv_pLAYER02_TOSH, AbilityCommand("UltrasonicPulse", 0), true);
    TechTreeUpgradeAddLevel(gv_pLAYER05_ULTRA, "ZergMeleeWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER05_ULTRA, "ZergMeleeWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER05_ULTRA, "ZergMeleeWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER05_ULTRA, "ZergGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER05_ULTRA, "ZergGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER05_ULTRA, "ZergGroundArmorsLevel3", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER01_USER, gv_pLAYER02_TOSH, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER01_USER, gv_pLAYER03_DROPSHIPS, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER01_USER, gv_pLAYER04_NOVA, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER02_TOSH, gv_pLAYER03_DROPSHIPS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER02_TOSH, gv_pLAYER04_NOVA, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER02_TOSH, gv_pLAYER06_THOR, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER03_DROPSHIPS, gv_pLAYER04_NOVA, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER06_THOR, gv_pLAYER01_USER, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER06_THOR, gv_pLAYER02_TOSH, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER06_THOR, gv_pLAYER04_NOVA, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER06_THOR, gv_pLAYER05_ULTRA, libNtve_ge_AllianceSetting_Neutral);
    PlayerModifyPropertyInt(gv_pLAYER01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(gv_pLAYER01_USER, c_playerPropVespene, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(gv_pLAYER02_TOSH, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER02_TOSH, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER04_NOVA, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER04_NOVA, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerSetState(gv_pLAYER03_DROPSHIPS, c_playerStateShowScore, false);
    PlayerSetState(gv_pLAYER04_NOVA, c_playerStateShowScore, false);
    PlayerModifyPropertyInt(gv_pLAYER02_TOSH, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 600);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iNT;

    // Automatic Variable Declarations
    unitgroup auto0F19746C_g;
    int auto0F19746C_u;
    unit auto0F19746C_var;
    unitgroup autoD5F7C140_g;
    int autoD5F7C140_u;
    unit autoD5F7C140_var;
    unitgroup auto67AE35A3_g;
    int auto67AE35A3_u;
    unit auto67AE35A3_var;
    unitgroup auto7E124DC2_g;
    int auto7E124DC2_u;
    unit auto7E124DC2_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_outhouse = ActorFromDoodad(DoodadFromId(787));
    if ((libCamp_gf_StoryState(libCamp_ge_StoryStateID_StoryStateTaurenOutHouseActivated) == 0)) {
        ActorSend(gv_outhouse, "Destroy");
    }

    gv_nova = UnitFromId(402);
    UnitGroupAdd(gv_novaGroup, UnitFromId(402));
    UnitSetPropertyFixed(gv_nova, c_unitPropEnergyPercent, 100.0);
    gv_spectres = UnitGroup("Spectre", gv_pLAYER02_TOSH, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto0F19746C_g = gv_spectres;
    auto0F19746C_u = UnitGroupCount(auto0F19746C_g, c_unitCountAll);
    for (;; auto0F19746C_u -= 1) {
        auto0F19746C_var = UnitGroupUnitFromEnd(auto0F19746C_g, auto0F19746C_u);
        if (auto0F19746C_var == null) { break; }
        lv_iNT += 1;
        gv_spectreUnitArray[lv_iNT] = auto0F19746C_var;
    }
    autoD5F7C140_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    autoD5F7C140_u = UnitGroupCount(autoD5F7C140_g, c_unitCountAll);
    for (;; autoD5F7C140_u -= 1) {
        autoD5F7C140_var = UnitGroupUnitFromEnd(autoD5F7C140_g, autoD5F7C140_u);
        if (autoD5F7C140_var == null) { break; }
        UnitSetPropertyFixed(autoD5F7C140_var, c_unitPropEnergyPercent, 100.0);
    }
    auto67AE35A3_g = UnitGroup(null, c_playerAny, RegionFromId(5), UnitFilter(0, 0, 0, 0), 0);
    auto67AE35A3_u = UnitGroupCount(auto67AE35A3_g, c_unitCountAll);
    for (;; auto67AE35A3_u -= 1) {
        auto67AE35A3_var = UnitGroupUnitFromEnd(auto67AE35A3_g, auto67AE35A3_u);
        if (auto67AE35A3_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto67AE35A3_var, false);
    }
    auto7E124DC2_g = UnitGroup("AutoTurret", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto7E124DC2_u = UnitGroupCount(auto7E124DC2_g, c_unitCountAll);
    for (;; auto7E124DC2_u -= 1) {
        auto7E124DC2_var = UnitGroupUnitFromEnd(auto7E124DC2_g, auto7E124DC2_u);
        if (auto7E124DC2_var == null) { break; }
        UnitBehaviorRemove(auto7E124DC2_var, "AutoTurretTimedLife", 1);
    }
    UnitSetInfoText(UnitFromId(17), StringExternal("Param/Value/4279DD74"), StringToText(""), StringToText(""));
    UnitSetInfoText(UnitFromId(63), StringExternal("Param/Value/CC3E9175"), StringToText(""), StringToText(""));
    UnitSetInfoText(UnitFromId(455), StringExternal("Param/Value/91388E48"), StringToText(""), StringToText(""));
    UnitSetInfoText(UnitFromId(456), StringExternal("Param/Value/5BB42AC2"), StringToText(""), StringToText(""));
    UnitSetInfoText(UnitFromId(269), StringToText(""), StringExternal("Param/Value/FB1B8DF8"), StringToText(""));
    UnitSetInfoText(UnitFromId(96), StringToText(""), StringExternal("Param/Value/FB69C60D"), StringToText(""));
    UnitSetInfoText(UnitFromId(235), StringToText(""), StringExternal("Param/Value/BB0CC3D8"), StringToText(""));
    gv_p1StartingTroopsA = UnitGroup(null, gv_pLAYER01_USER, RegionFromId(44), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_p1StartingTroopsB = UnitGroup(null, gv_pLAYER01_USER, RegionFromId(61), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_p1DropshipA = UnitFromId(76);
    gv_p1DropshipB = UnitFromId(404);
    libNtve_gf_MakeUnitUncommandable(gv_p1DropshipA, true);
    libNtve_gf_MakeUnitUncommandable(gv_p1DropshipB, true);
    libNtve_gf_MakeUnitInvulnerable(gv_p1DropshipA, true);
    libNtve_gf_MakeUnitInvulnerable(gv_p1DropshipB, true);
    gv_p1MineralDepot = UnitFromId(235);
    gv_p1SnipeTarget = UnitFromId(46);
    gv_p1GateControl = UnitFromId(456);
    gv_p1Gate = UnitFromId(343);
    libNtve_gf_MakeUnitInvulnerable(gv_p1Gate, true);
    gv_p1Nighthawk = UnitFromId(61);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        UnitSetPosition(UnitFromId(61), PointFromId(668), false);
    }

    UnitCargoCreate(UnitFromId(141), "Marine", 4);
    gv_p1MiTuGuards = UnitGroup(null, gv_pLAYER02_TOSH, RegionFromId(46), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    gv_p1Tank = UnitFromId(31);
    gv_p1Spectre = UnitFromId(180);
    gv_p1Spectre2 = UnitFromId(181);
    UnitIssueOrder(gv_p1Spectre, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitIssueOrder(gv_p1Spectre2, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    gv_p1Units = UnitGroup(null, c_playerAny, RegionFromId(30), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupRemove(gv_p1Units, gv_nova);
    gv_p2TerrazineDepot = UnitFromId(96);
    gv_p2Raven = UnitFromId(432);
    gv_p2SearchCrew = UnitGroup(null, gv_pLAYER02_TOSH, RegionFromId(48), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    UnitGroupAdd(gv_p2SearchCrew, UnitFromId(1044));
    gv_p2LZGuards = UnitGroup(null, gv_pLAYER02_TOSH, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_p2GateControl = UnitFromId(455);
    gv_p2Gate = UnitFromId(448);
    libNtve_gf_MakeUnitInvulnerable(gv_p2Gate, true);
    gv_p2Silo = UnitFromId(239);
    UnitSetState(gv_p2Silo, c_unitStateTargetable, false);
    gv_p2Nuker = UnitFromId(556);
    gv_p2NukerSilo = UnitFromId(596);
    gv_p2DropPodder = UnitFromId(405);
    gv_p2WestSpectre = UnitFromId(425);
    UnitIssueOrder(UnitFromId(149), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitCargoCreate(UnitFromId(575), "Marine", libNtve_gf_DifficultyValueInt(3, 3, 4, 2));
    UnitCargoCreate(UnitFromId(575), "Marauder", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
    UnitCargoCreate(UnitFromId(82), "Marine", libNtve_gf_DifficultyValueInt(2, 2, 4, 2));
    UnitCargoCreate(UnitFromId(82), "Marauder", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
    gv_p2Units = UnitGroup(null, c_playerAny, RegionFromId(31), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gf_HideUnitGroup(false, gv_p2Units);
    gv_p3PsiIndoctrinator = UnitFromId(269);
    gv_p3Silo = UnitFromId(14);
    UnitSetState(gv_p3Silo, c_unitStateTargetable, false);
    gv_p3Raven = UnitFromId(209);
    gv_p3SouthViking = UnitFromId(261);
    if ((libNtve_gf_DifficultyValueInt(1, 1, 1, 0) == 1)) {
        gv_p3NorthViking = UnitFromId(18);
    }
    else {
        gv_p3NorthViking = UnitFromId(1152);
    }
    gv_p3SouthGuards = UnitGroup(null, gv_pLAYER02_TOSH, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_p3NorthGuards = UnitGroup(null, gv_pLAYER02_TOSH, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitCargoCreate(UnitFromId(212), "Marine", 4);
    gv_p3BridgeSpectre = UnitFromId(306);
    gv_p3NukerA = UnitFromId(242);
    gv_p3NukerB = UnitFromId(246);
    gv_p3NukerASilo = UnitFromId(262);
    gv_p3NukerBSilo = UnitFromId(270);
    gv_p3SouthThor = UnitFromId(1059);
    UnitSetPropertyFixed(UnitFromId(1059), c_unitPropEnergyPercent, 100.0);
    gv_p3SouthMarauder1 = UnitFromId(238);
    gv_p3SouthMarauder2 = UnitFromId(222);
    UnitIssueOrder(UnitFromId(291), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(796), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(216), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    gv_p3ObjectiveGuards = UnitGroup(null, gv_pLAYER02_TOSH, RegionFromId(25), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_p3ObjectiveGuardCount = UnitGroupCount(gv_p3ObjectiveGuards, c_unitCountAlive);
    gv_p3Units = UnitGroup(null, c_playerAny, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitSetPropertyFixed(UnitFromId(1147), c_unitPropLife, 60.0);
    UnitSetPropertyFixed(UnitFromId(1063), c_unitPropLife, 60.0);
    UnitSetPropertyFixed(UnitFromId(1065), c_unitPropLife, 60.0);
    UnitBehaviorAdd(UnitFromId(1070), "Cleave", UnitFromId(1070), 1);
    gf_HideUnitGroup(false, gv_p3Units);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init04Music_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTosh03BMusicMain", c_soundtrackCueAny, c_soundtrackIndexAny);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Music_Init () {
    gt_Init04Music = TriggerCreate("gt_Init04Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    RegionPlayableMapSet(RegionFromId(30));
    VisRevealerCreate(gv_pLAYER01_USER, RegionFromId(21));
    VisRevealerEnable(VisRevealerLastCreated(), false);
    gv_p1MiTuRevealer = VisRevealerLastCreated();
    VisRevealerCreate(gv_pLAYER01_USER, RegionFromId(7));
    VisRevealerEnable(VisRevealerLastCreated(), false);
    gv_p1TankRevealer = VisRevealerLastCreated();
    VisRevealerCreate(gv_pLAYER01_USER, RegionFromId(29));
    VisRevealerEnable(VisRevealerLastCreated(), false);
    gv_p1Spec2Revealer = VisRevealerLastCreated();
    VisRevealerCreate(gv_pLAYER01_USER, RegionFromId(68));
    VisRevealerEnable(VisRevealerLastCreated(), false);
    gv_p2EndRevealer = VisRevealerLastCreated();
    VisRevealerCreate(gv_pLAYER01_USER, RegionFromId(34));
    VisRevealerEnable(VisRevealerLastCreated(), false);
    gv_p3EndRevealer = VisRevealerLastCreated();
    libLbty_gf_AutoRevealRegion(RegionFromId(71), RegionFromId(3), gv_pLAYER01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(79), RegionFromId(78), gv_pLAYER01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(92), RegionFromId(91), gv_pLAYER01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(94), RegionFromId(91), gv_pLAYER01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(74), RegionFromId(73), gv_pLAYER01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(76), RegionFromId(75), gv_pLAYER01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(80), RegionFromId(77), gv_pLAYER01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(84), RegionFromId(81), gv_pLAYER01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(85), RegionFromId(83), gv_pLAYER01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(87), RegionFromId(86), gv_pLAYER01_USER);
    VisExploreArea(gv_pLAYER01_USER, RegionFromId(18), true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerDifficulty(gv_pLAYER01_USER) == 1)) {
        PlayerModifyPropertyInt(gv_pLAYER02_TOSH, c_playerPropHandicap, c_playerPropOperSetTo, 50);
    }

    TechTreeUpgradeAddLevel(gv_pLAYER02_TOSH, "TerranVehicleWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
    TechTreeUpgradeAddLevel(gv_pLAYER02_TOSH, "TerranShipWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
    TechTreeUpgradeAddLevel(gv_pLAYER02_TOSH, "TerranInfantryArmorsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
    TechTreeUpgradeAddLevel(gv_pLAYER02_TOSH, "TerranVehicleArmorsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
    TechTreeUpgradeAddLevel(gv_pLAYER02_TOSH, "TerranShipArmorsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
    TechTreeUpgradeAddLevel(gv_pLAYER02_TOSH, "UltrasonicPulse", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Objectives
//--------------------------------------------------------------------------------------------------
bool gt_Init07Objectives_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_objectiveKillSpectresKilled = 0;
    gv_objectiveKillSpectresMax = UnitGroupCount(gv_spectres, c_unitCountAlive);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Objectives_Init () {
    gt_Init07Objectives = TriggerCreate("gt_Init07Objectives_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 08 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init08Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_AddUnitTypeToUnitHelpPanel("Nova", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Spectre", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Marauder", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Firebat", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Hellion", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Goliath", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SiegeTank", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Thor", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Battlecruiser", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Banshee", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("VikingFighter", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Raven", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("WarPig", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SpartanCompany", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("HammerSecurity", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("AutoTurret", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("MissileTurret", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Bunker", false, gv_pLAYER01_USER);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Diamondback", false, gv_pLAYER01_USER);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("HelsAngelAssault", false, gv_pLAYER01_USER);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("SiegeBreakerSieged", false, gv_pLAYER01_USER);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("DukesRevenge", false, gv_pLAYER01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init08Help_Init () {
    gt_Init08Help = TriggerCreate("gt_Init08Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reset Nova
//--------------------------------------------------------------------------------------------------
bool gt_ResetNova_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(gv_nova, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_nova, c_unitPropEnergyPercent, 100.0);
    libNtve_gf_ShowHideUnit(gv_nova, true);
    libNtve_gf_MakeUnitInvulnerable(gv_nova, false);
    UnitAbilityReset(gv_nova, AbilityCommand("NovaSnipe", 0), c_spendLocationAll);
    UnitIssueOrder(gv_nova, Order(AbilityCommand("ReleaseMinion", 0)), c_orderQueueAddToEnd);
    UnitAbilityReset(gv_nova, AbilityCommand("Domination", 0), c_spendLocationAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResetNova_Init () {
    gt_ResetNova = TriggerCreate("gt_ResetNova_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Sequence
//--------------------------------------------------------------------------------------------------
bool gt_IntroSequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    TriggerExecute(gt_P1Activate, true, false);
    Wait(0.1, c_timeReal);
    UIAlertPoint("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/0F00DF3E"), null, UnitGetPosition(UnitFromId(402)));
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_pLAYER01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(74)), 1.5);
    CinematicFade(true, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSequence_Init () {
    gt_IntroSequence = TriggerCreate("gt_IntroSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(3.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDestroyDiscoverQ, true, true);
    Wait(4.0, c_timeReal);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh03BRaynor00016", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh03BRaynor00016", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerExecute(gt_ObjectiveSurviveDiscoverQ, true, false);
    TriggerExecute(gt_TipStoryModeQ, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Story Mode Q
//--------------------------------------------------------------------------------------------------
bool gt_TipStoryModeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateStorymodeTips();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipStoryModeQ_Init () {
    gt_TipStoryModeQ = TriggerCreate("gt_TipStoryModeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nuke Camera Shake/Count
//--------------------------------------------------------------------------------------------------
bool gt_NukeCameraShakeCount_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_novaNukeCount -= 1;
    if ((DistanceBetweenPoints(CameraGetTarget(gv_pLAYER01_USER), EventUnitTargetPoint()) <= 4.0)) {
        Wait(1.5, c_timeGame);
        CameraShakeStart(gv_pLAYER01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.2, 2.0, 100.0, 2.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NukeCameraShakeCount_Init () {
    gt_NukeCameraShakeCount = TriggerCreate("gt_NukeCameraShakeCount_Func");
    TriggerAddEventUnitAbility(gt_NukeCameraShakeCount, null, AbilityCommand("HeroNuclearStrike", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Platform Spectres Board Create
//--------------------------------------------------------------------------------------------------
bool gt_PlatformSpectresBoardCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    BoardCreate(1, 1, StringToText(""), Color(100.00, 100.00, 100.00));
    gv_platformSpectresBOARD = BoardLastCreated();
    BoardSetState(gv_platformSpectresBOARD, PlayerGroupAll(), c_boardStateShowTitle, false);
    BoardSetState(gv_platformSpectresBOARD, PlayerGroupAll(), c_boardStateShowHeader, false);
    BoardItemSetText(gv_platformSpectresBOARD, 1, 1, StringExternal("Param/Value/6C46AD80"));
    BoardMinimizeShow(gv_platformSpectresBOARD, PlayerGroupAll(), false);
    TriggerExecute(gt_SpectreBoardUpdater, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlatformSpectresBoardCreate_Init () {
    gt_PlatformSpectresBoardCreate = TriggerCreate("gt_PlatformSpectresBoardCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spectre Board Updater
//--------------------------------------------------------------------------------------------------
bool gt_SpectreBoardUpdater_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoC54E8D3D_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoC54E8D3D_val = gv_platform;
    if (autoC54E8D3D_val == 1) {
        BoardItemSetText(gv_platformSpectresBOARD, 1, 1, (StringExternal("Param/Value/FB096F2C") + IntToText(gv_platform1Spectres) + StringExternal("Param/Value/E908D262")));
    }
    else if (autoC54E8D3D_val == 2) {
        BoardItemSetText(gv_platformSpectresBOARD, 1, 1, (StringExternal("Param/Value/279447FD") + IntToText(gv_platform2Spectres) + StringExternal("Param/Value/282E6995")));
    }
    else if (autoC54E8D3D_val == 3) {
        BoardItemSetText(gv_platformSpectresBOARD, 1, 1, (StringExternal("Param/Value/C6DC3959") + IntToText(gv_platform3Spectres) + StringExternal("Param/Value/D190E0C0")));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpectreBoardUpdater_Init () {
    gt_SpectreBoardUpdater = TriggerCreate("gt_SpectreBoardUpdater_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spectre Killed
//--------------------------------------------------------------------------------------------------
bool gt_SpectreKilled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iNT;

    // Automatic Variable Declarations
    int auto87F6B0B7_val;
    const int auto84861E77_ae = 10;
    const int auto84861E77_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Spectre"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_objectiveKillSpectresKilled = (gv_objectiveKillSpectresKilled + 1);
    gv_bonusCreditsEarned += 5000;
    libCamp_gf_AddProgressToStoryObjective(1, libCamp_ge_MissionObjective_TTosh03BObjective4);
    auto87F6B0B7_val = gv_platform;
    if (auto87F6B0B7_val == 1) {
        gv_platform1Spectres -= 1;
    }
    else if (auto87F6B0B7_val == 2) {
        gv_platform2Spectres -= 1;
    }
    else if (auto87F6B0B7_val == 3) {
        gv_platform3Spectres -= 1;
    }
    else {
    }
    lv_iNT = 1;
    for ( ; ( (auto84861E77_ai >= 0 && lv_iNT <= auto84861E77_ae) || (auto84861E77_ai < 0 && lv_iNT >= auto84861E77_ae) ) ; lv_iNT += auto84861E77_ai ) {
        if ((EventUnit() == gv_spectreUnitArray[lv_iNT]) && (gv_spectrePingArray[lv_iNT] != c_invalidPingId)) {
            PingDestroy(gv_spectrePingArray[lv_iNT]);
        }

    }
    TriggerExecute(gt_ObjectiveKillSpectresUpdate, true, false);
    TriggerExecute(gt_SpectreBoardUpdater, true, false);
    if ((gv_objectiveKillSpectresKilled >= gv_objectiveKillSpectresMax)) {
        TriggerExecute(gt_ObjectiveKillSpectresCompleteQ, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpectreKilled_Init () {
    gt_SpectreKilled = TriggerCreate("gt_SpectreKilled_Func");
    TriggerAddEventUnitDied(gt_SpectreKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add  Spectre ping
//--------------------------------------------------------------------------------------------------
bool gt_AddSpectreping_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iNT;

    // Automatic Variable Declarations
    const int auto00FDADA2_ae = 10;
    const int auto00FDADA2_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_objectiveKillSpectresKilled <= gv_objectiveKillSpectresMax))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_iNT = 1;
    for ( ; ( (auto00FDADA2_ai >= 0 && lv_iNT <= auto00FDADA2_ae) || (auto00FDADA2_ai < 0 && lv_iNT >= auto00FDADA2_ae) ) ; lv_iNT += auto00FDADA2_ai ) {
        if ((UnitIsAlive(gv_spectreUnitArray[lv_iNT]) == true) && (gv_spectrePingArray[lv_iNT] == c_invalidPingId) && (libNtve_gf_UnitIsVisibleToPlayer(gv_spectreUnitArray[lv_iNT], gv_pLAYER01_USER) == true)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(gv_spectreUnitArray[lv_iNT]), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
            PingSetUnit(PingLastCreated(), gv_spectreUnitArray[lv_iNT]);
            PingSetScale(PingLastCreated(), 0.75);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/0E2B9DF4"));
            gv_spectrePingArray[lv_iNT] = PingLastCreated();
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddSpectreping_Init () {
    gt_AddSpectreping = TriggerCreate("gt_AddSpectreping_Func");
    TriggerAddEventTimePeriodic(gt_AddSpectreping, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Domination End Safety
//--------------------------------------------------------------------------------------------------
bool gt_DominationEndSafety_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_nova))) {
            return false;
        }

        if (!((UnitGetType(EventUnitTargetUnit()) != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.5, c_timeGame);
    if ((UnitGetOwner(EventUnitTargetUnit()) == gv_pLAYER01_USER)) {
        return true;
    }

    if ((UnitGetOwner(EventUnitTargetUnit()) != gv_pLAYER01_USER) && (UnitHasBehavior(EventUnitTargetUnit(), "SpectreCloaking") == true)) {
        UnitIssueOrder(EventUnitTargetUnit(), Order(AbilityCommand("RogueGhostCloak", 1)), c_orderQueueReplace);
    }

    Wait(0.5, c_timeGame);
    if ((UnitGetOwner(EventUnitTargetUnit()) != gv_pLAYER01_USER) && (UnitHasBehavior(EventUnitTargetUnit(), "SpectreCloaking") == true)) {
        UnitIssueOrder(EventUnitTargetUnit(), Order(AbilityCommand("RogueGhostCloak", 1)), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominationEndSafety_Init () {
    gt_DominationEndSafety = TriggerCreate("gt_DominationEndSafety_Func");
    TriggerAddEventUnitAbility(gt_DominationEndSafety, null, AbilityCommand("Domination", 0), c_abilEffectStageFinish, false);
    TriggerAddEventUnitAbility(gt_DominationEndSafety, null, AbilityCommand("Domination", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P1 Activate
//--------------------------------------------------------------------------------------------------
bool gt_P1Activate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_p1DropshipA, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(403)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_p1DropshipB, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(403)), c_orderQueueAddToEnd);
    UnitSelect(gv_nova, gv_pLAYER01_USER, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P1Activate_Init () {
    gt_P1Activate = TriggerCreate("gt_P1Activate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P1 Dropship Exit
//--------------------------------------------------------------------------------------------------
bool gt_P1DropshipExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SpecialOpsDropship"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P1DropshipExit_Init () {
    gt_P1DropshipExit = TriggerCreate("gt_P1DropshipExit_Func");
    TriggerAddEventUnitRegion(gt_P1DropshipExit, null, RegionFromId(60), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P1 Snipe Tripwire
//--------------------------------------------------------------------------------------------------
bool gt_P1SnipeTripwire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER01_USER))) {
            return false;
        }

        if (!((EventUnit() == gv_nova))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TechTreeAbilityAllow(gv_pLAYER01_USER, AbilityCommand("NovaSnipe", 0), true);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("NovaSnipe", 0), true);
    TriggerExecute(gt_P1SnipeCommentQ, true, false);
    TriggerExecute(gt_P1SnipeTipQ, true, false);
    Wait(10.0, c_timeGame);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("NovaSnipe", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P1SnipeTripwire_Init () {
    gt_P1SnipeTripwire = TriggerCreate("gt_P1SnipeTripwire_Func");
    TriggerAddEventUnitRegion(gt_P1SnipeTripwire, null, RegionFromId(42), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P1 Snipe Comment Q
//--------------------------------------------------------------------------------------------------
bool gt_P1SnipeCommentQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_p1SnipeTarget) == true))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((UnitIsAlive(gv_p1SnipeTarget) == true)) {
        UIAlertPoint("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/D769B9FD"), null, CameraInfoGetTarget(CameraInfoFromId(66)));
        CameraPan(gv_pLAYER01_USER, CameraInfoGetTarget(CameraInfoFromId(66)), 1.0, -1, 10, true);
        VisRevealArea(gv_pLAYER01_USER, RegionFromId(20), 5.0, false);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TTosh03BNova00017", 0)
        libCamp_gf_SendTransmissionCampaign(gv_nova, SoundLink("TTosh03BNova00017", 0), c_transmissionDurationAdd, 0.0, false);
        gv_p1SnipeTransmissionSafety = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P1SnipeCommentQ_Init () {
    gt_P1SnipeCommentQ = TriggerCreate("gt_P1SnipeCommentQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P1 Snipe Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_P1SnipeTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Tosh03b_Snipe", libNtve_ge_TipType_NewAbility, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P1SnipeTipQ_Init () {
    gt_P1SnipeTipQ = TriggerCreate("gt_P1SnipeTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P1 Snipe Flash Killer
//--------------------------------------------------------------------------------------------------
bool gt_P1SnipeFlashKiller_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("NovaSnipe", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P1SnipeFlashKiller_Init () {
    gt_P1SnipeFlashKiller = TriggerCreate("gt_P1SnipeFlashKiller_Func");
    TriggerAddEventUnitAbility(gt_P1SnipeFlashKiller, null, AbilityCommand("NovaSnipe", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P1 Gate Comment Q
//--------------------------------------------------------------------------------------------------
bool gt_P1GateCommentQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/DCD77D62"), null, gv_p1Gate);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh03BRaynor00015", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh03BRaynor00015", 0), c_transmissionDurationAdd, 0.0, true);
    if ((UnitIsAlive(gv_p1GateControl) == true)) {
        // Transmission - SoundLink("TTosh03BNova00005", 0)
        libCamp_gf_SendTransmissionCampaign(gv_nova, SoundLink("TTosh03BNova00005", 0), c_transmissionDurationAdd, 0.0, true);
        Wait(2.0, c_timeReal);
        if ((UnitIsAlive(gv_p1GateControl) == true)) {
            libNtve_gf_AttachModelToUnit(gv_p1GateControl, "BriefingUnitSelectLargeRed", "Ref_Origin");
            gv_p1GateDesignator = libNtve_gf_ActorLastCreated();
            VisRevealArea(gv_pLAYER01_USER, RegionFromId(23), 5.0, false);
            TriggerEnable(gt_P1GateReticleKiller, true);
            MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_p1GateControl), 2.0, Color(100.00, 0.00, 0.00));
            UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/983BA953"), null, gv_p1GateControl);
        }

        TransmissionWait(TransmissionLastSent(), 0.0);
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P1GateCommentQ_Init () {
    gt_P1GateCommentQ = TriggerCreate("gt_P1GateCommentQ_Func");
    TriggerAddEventUnitRegion(gt_P1GateCommentQ, null, RegionFromId(16), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P1 Gate Open Q
//--------------------------------------------------------------------------------------------------
bool gt_P1GateOpenQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((EventUnit() == gv_p1GateControl))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_P1GateCommentQ, false);
    UnitIssueOrder(gv_p1Gate, Order(AbilityCommand("DestructibleGateStraightVerticalLFLowered", 0)), c_orderQueueReplace);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_p1Gate), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/3753E9AA"), null, gv_p1Gate);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh03BNova00006", 0)
    libCamp_gf_SendTransmissionCampaign(gv_nova, SoundLink("TTosh03BNova00006", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P1GateOpenQ_Init () {
    gt_P1GateOpenQ = TriggerCreate("gt_P1GateOpenQ_Func");
    TriggerAddEventUnitDied(gt_P1GateOpenQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P1 Gate Reticle Killer
//--------------------------------------------------------------------------------------------------
bool gt_P1GateReticleKiller_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitTarget()) == gv_pLAYER01_USER))) {
            return false;
        }

        if (!((gv_p1GateDesignator != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_p1GateDesignator);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P1GateReticleKiller_Init () {
    gt_P1GateReticleKiller = TriggerCreate("gt_P1GateReticleKiller_Func");
    TriggerEnable(gt_P1GateReticleKiller, false);
    TriggerAddEventUnitAttacked(gt_P1GateReticleKiller, UnitRefFromUnit(UnitFromId(456)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: P1 MiTu Reveal
//--------------------------------------------------------------------------------------------------
bool gt_P1MiTuReveal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_platform == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RegionContainsPoint(RegionFromId(22), UnitGetPosition(gv_nova)) == true)) {
        VisRevealerEnable(gv_p1MiTuRevealer, true);
    }
    else {
        VisRevealerEnable(gv_p1MiTuRevealer, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P1MiTuReveal_Init () {
    gt_P1MiTuReveal = TriggerCreate("gt_P1MiTuReveal_Func");
    TriggerAddEventTimePeriodic(gt_P1MiTuReveal, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P1 MiTu Guards Engaged
//--------------------------------------------------------------------------------------------------
bool gt_P1MiTuGuardsEngaged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_p1MiTuGuards, EventUnit()) == true))) {
            return false;
        }

        if (!((EventUnitDamageSourceUnit() != gv_nova))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_P1MiTuHelpMeQ, false);
    gv_p1MiTuGuardsEngaged = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P1MiTuGuardsEngaged_Init () {
    gt_P1MiTuGuardsEngaged = TriggerCreate("gt_P1MiTuGuardsEngaged_Func");
    TriggerAddEventUnitDamaged(gt_P1MiTuGuardsEngaged, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P1 MiTu Help Me Q
//--------------------------------------------------------------------------------------------------
bool gt_P1MiTuHelpMeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((EventUnit() == gv_nova))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_p1MiTuGuards, EventUnitDamageSourceUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_p1MiTuNovaHitCount = (gv_p1MiTuNovaHitCount + 1);
    if ((gv_p1MiTuNovaHitCount >= 6)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        if ((gv_p1MiTuGuardsEngaged == false)) {
            MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(46)), 2.0, Color(100.00, 0.00, 0.00));
            UIAlertPoint("Trigger", gv_pLAYER01_USER, StringToText(""), null, RegionGetCenter(RegionFromId(46)));
            libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
            libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
            // Transmission - SoundLink("TTosh03BNova00007", 0)
            libCamp_gf_SendTransmissionCampaign(gv_nova, SoundLink("TTosh03BNova00007", 0), c_transmissionDurationAdd, 0.0, true);
            libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        }

        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P1MiTuHelpMeQ_Init () {
    gt_P1MiTuHelpMeQ = TriggerCreate("gt_P1MiTuHelpMeQ_Func");
    TriggerAddEventUnitDamaged(gt_P1MiTuHelpMeQ, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P1 Tank Reveal
//--------------------------------------------------------------------------------------------------
bool gt_P1TankReveal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_platform == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER01_USER, RegionFromId(45), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        VisRevealerEnable(gv_p1TankRevealer, true);
        TriggerExecute(gt_P1TankWarningQ, true, false);
        TriggerExecute(gt_P1DominationTipQ, true, false);
    }
    else {
        VisRevealerEnable(gv_p1TankRevealer, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P1TankReveal_Init () {
    gt_P1TankReveal = TriggerCreate("gt_P1TankReveal_Func");
    TriggerAddEventTimePeriodic(gt_P1TankReveal, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P1 Tank Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_P1TankWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_p1Tank), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/F04078C9"), null, gv_p1Tank);
    UnitFlashSelection(gv_p1Tank, 1.0);
    CameraPan(gv_pLAYER01_USER, CameraInfoGetTarget(CameraInfoFromId(92)), 1.0, -1, 10, true);
    TechTreeAbilityAllow(gv_pLAYER01_USER, AbilityCommand("Domination", 0), true);
    TriggerExecute(gt_P1DominationFlashInitiate, true, false);
    // Transmission - SoundLink("TTosh03BNova00008", 0)
    libCamp_gf_SendTransmissionCampaign(gv_nova, SoundLink("TTosh03BNova00008", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P1TankWarningQ_Init () {
    gt_P1TankWarningQ = TriggerCreate("gt_P1TankWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P1 Domination Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_P1DominationTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Tosh03b_Domination", libNtve_ge_TipType_NewAbility, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P1DominationTipQ_Init () {
    gt_P1DominationTipQ = TriggerCreate("gt_P1DominationTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P1 Domination Flash Initiate
//--------------------------------------------------------------------------------------------------
bool gt_P1DominationFlashInitiate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("Domination", 0), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P1DominationFlashInitiate_Init () {
    gt_P1DominationFlashInitiate = TriggerCreate("gt_P1DominationFlashInitiate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P1 Domination Flash Killer
//--------------------------------------------------------------------------------------------------
bool gt_P1DominationFlashKiller_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("Domination", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P1DominationFlashKiller_Init () {
    gt_P1DominationFlashKiller = TriggerCreate("gt_P1DominationFlashKiller_Func");
    TriggerAddEventUnitAbility(gt_P1DominationFlashKiller, null, AbilityCommand("Domination", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P1 Nighthawk Spot
//--------------------------------------------------------------------------------------------------
bool gt_P1NighthawkSpot_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_p1Tank))) {
            return false;
        }

        if (!((UnitTestState(EventUnitDamageSourceUnit(), c_unitStateCloaked) == true))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(gv_p1Nighthawk) == gv_pLAYER02_TOSH))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_p1Nighthawk, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(110)), c_orderQueueReplace);
    UnitIssueOrder(gv_p1Nighthawk, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    TimerStart(gv_p1NighthawkTimer, 6.5, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P1NighthawkSpot_Init () {
    gt_P1NighthawkSpot = TriggerCreate("gt_P1NighthawkSpot_Func");
    TriggerAddEventUnitDamaged(gt_P1NighthawkSpot, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P1 Nighthawk Return Quiet
//--------------------------------------------------------------------------------------------------
bool gt_P1NighthawkReturnQuiet_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_p1Nighthawk) == true))) {
            return false;
        }

        if (!((UnitGetOwner(gv_p1Nighthawk) == gv_pLAYER02_TOSH))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_p1Nighthawk, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(111)), c_orderQueueReplace);
    UnitIssueOrder(gv_p1Nighthawk, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P1NighthawkReturnQuiet_Init () {
    gt_P1NighthawkReturnQuiet = TriggerCreate("gt_P1NighthawkReturnQuiet_Func");
    TriggerAddEventTimer(gt_P1NighthawkReturnQuiet, gv_p1NighthawkTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P1 Nighthawk Flee
//--------------------------------------------------------------------------------------------------
bool gt_P1NighthawkFlee_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_p1Tank))) {
            return false;
        }

        if (!((UnitIsAlive(gv_p1Nighthawk) == true))) {
            return false;
        }

        if (!((UnitGetOwner(gv_p1Nighthawk) == gv_pLAYER02_TOSH))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerPause(gv_p1NighthawkTimer, true);
    UnitIssueOrder(gv_p1Nighthawk, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(176)), c_orderQueueReplace);
    UnitIssueOrder(gv_p1Nighthawk, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P1NighthawkFlee_Init () {
    gt_P1NighthawkFlee = TriggerCreate("gt_P1NighthawkFlee_Func");
    TriggerAddEventUnitDied(gt_P1NighthawkFlee, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P1 Spectre Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_P1SpectreWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER01_USER))) {
            return false;
        }

        if (!((UnitIsAlive(gv_p1Spectre) == true))) {
            return false;
        }

        if (!((UnitGetOwner(gv_p1Spectre) == gv_pLAYER02_TOSH))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        UnitIssueOrder(gv_p1Spectre, OrderTargetingUnit(AbilityCommand("Obliterate", 0), EventUnit()), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(gv_p1Spectre, OrderTargetingPoint(AbilityCommand("UltrasonicPulse", 0), UnitGetPosition(EventUnit())), c_orderQueueReplace);
    }
    UnitIssueOrder(gv_p1Spectre, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    TriggerExecute(gt_ObjectiveKillSpectresDiscoverQ, true, true);
    TriggerQueueEnter();
    if ((UnitIsAlive(gv_p1Spectre) == true)) {
        UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/315B7214"), null, gv_p1Spectre);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TTosh03BNova00011", 0)
        libCamp_gf_SendTransmissionCampaign(gv_nova, SoundLink("TTosh03BNova00011", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P1SpectreWarningQ_Init () {
    gt_P1SpectreWarningQ = TriggerCreate("gt_P1SpectreWarningQ_Func");
    TriggerAddEventUnitRegion(gt_P1SpectreWarningQ, null, RegionFromId(24), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P1 Spec2 Reveal
//--------------------------------------------------------------------------------------------------
bool gt_P1Spec2Reveal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_platform == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER01_USER, RegionFromId(62), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        VisRevealerEnable(gv_p1Spec2Revealer, true);
    }
    else {
        VisRevealerEnable(gv_p1Spec2Revealer, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P1Spec2Reveal_Init () {
    gt_P1Spec2Reveal = TriggerCreate("gt_P1Spec2Reveal_Func");
    TriggerAddEventTimePeriodic(gt_P1Spec2Reveal, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P1 Spec2 powers
//--------------------------------------------------------------------------------------------------
bool gt_P1Spec2powers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_potentialvictims;
    unit lv_target;

    // Automatic Variable Declarations
    int auto7D1E9C97_val;
    unitgroup auto18934A38_g;
    int auto18934A38_u;
    unit auto18934A38_var;

    // Variable Initialization
    lv_potentialvictims = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER02_TOSH, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((UnitGetOwner(UnitFromId(181)) == gv_pLAYER02_TOSH)) {
            lv_potentialvictims = UnitGroup(null, gv_pLAYER01_USER, RegionCircle(UnitGetPosition(UnitFromId(181)), 9.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto7D1E9C97_val = libNtve_gf_DifficultyValueInt(1, 1, 2, 2);
            if (auto7D1E9C97_val == 1) {
                UnitGroupRemove(lv_potentialvictims, gv_nova);
            }
            else if (auto7D1E9C97_val == 2) {
                if ((UnitGetPropertyFixed(gv_nova, c_unitPropLife, c_unitPropCurrent) < 250.0)) {
                    UnitGroupRemove(lv_potentialvictims, gv_nova);
                }

                auto18934A38_g = lv_potentialvictims;
                auto18934A38_u = UnitGroupCount(auto18934A38_g, c_unitCountAll);
                for (;; auto18934A38_u -= 1) {
                    auto18934A38_var = UnitGroupUnitFromEnd(auto18934A38_g, auto18934A38_u);
                    if (auto18934A38_var == null) { break; }
                    if ((auto18934A38_var != gv_nova) && (UnitGetPropertyFixed(auto18934A38_var, c_unitPropLifePercent, c_unitPropCurrent) <= 25.0)) {
                        UnitGroupRemove(lv_potentialvictims, auto18934A38_var);
                    }

                }
            }
            else {
            }
            lv_target = libNtve_gf_ClosestUnitToPoint(UnitGetPosition(UnitFromId(181)), lv_potentialvictims);
            UnitIssueOrder(UnitFromId(181), OrderTargetingUnit(AbilityCommand("Obliterate", 0), lv_target), c_orderQueueReplace);
        }

        Wait(1.0, c_timeGame);
        if ((UnitIsAlive(UnitFromId(181)) == false)) {
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P1Spec2powers_Init () {
    gt_P1Spec2powers = TriggerCreate("gt_P1Spec2powers_Func");
    TriggerAddEventUnitRange(gt_P1Spec2powers, null, UnitFromId(181), 9.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P1 Objective Designator
//--------------------------------------------------------------------------------------------------
bool gt_P1ObjectiveDesignator_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libLbty_gf_AutoRevealRegion(RegionFromId(69), RegionFromId(69), gv_pLAYER01_USER);
    libNtve_gf_AttachModelToUnit(gv_p1MineralDepot, "BriefingUnitSelectLargeRed", "Ref_Center");
    gv_p1ObjectiveDesignator = libNtve_gf_ActorLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P1ObjectiveDesignator_Init () {
    gt_P1ObjectiveDesignator = TriggerCreate("gt_P1ObjectiveDesignator_Func");
    TriggerAddEventUnitRegion(gt_P1ObjectiveDesignator, null, RegionFromId(69), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P1 Designator remover
//--------------------------------------------------------------------------------------------------
bool gt_P1Designatorremover_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_p1MineralDepot))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTarget()) == gv_pLAYER01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_P1Designatorremover, true);
    libNtve_gf_KillModel(gv_p1ObjectiveDesignator);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P1Designatorremover_Init () {
    gt_P1Designatorremover = TriggerCreate("gt_P1Designatorremover_Func");
    TriggerEnable(gt_P1Designatorremover, false);
    TriggerAddEventUnitAttacked(gt_P1Designatorremover, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P1 Mineral Depot Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_P1MineralDepotDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_p1MineralDepot))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(ActorFromDoodad(DoodadFromId(584)), "Signal DoodadDeath");
    libNtve_gf_MakeUnitInvulnerable(gv_nova, true);
    Wait(2.0, c_timeGame);
    libNtve_gf_SendActorMessageToGameRegion(RegionCircle(Point(38.0, 86.0), 10.0), "Signal Nuked");
    TriggerExecute(gt_ObjectiveDestroyUpdateMineralDepotQ, true, false);
    TriggerExecute(gt_P1DoneQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P1MineralDepotDestroyed_Init () {
    gt_P1MineralDepotDestroyed = TriggerCreate("gt_P1MineralDepotDestroyed_Func");
    TriggerAddEventUnitDied(gt_P1MineralDepotDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 Search Crew Q
//--------------------------------------------------------------------------------------------------
bool gt_P2SearchCrewQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_crewSpeaker;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_nova))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_IssueRelativeOrders(gv_p2SearchCrew, AbilityCommand("attack", 0), PointFromId(454), PointFromId(462));
    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        UnitIssueOrder(gv_p2Raven, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(705)), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(gv_p2Raven, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(464)), c_orderQueueReplace);
    }
    TriggerExecute(gt_P2DelayedRavenMovementBrutal, true, false);
    CameraPan(gv_pLAYER01_USER, CameraInfoGetTarget(CameraInfoFromId(466)), 1.0, -1, 10, true);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    lv_crewSpeaker = UnitFromId(437);
    TriggerEnable(gt_P2SearchCrewCombat, true);
    UIAlertUnit("Trigger", gv_platform, StringToText(""), null, lv_crewSpeaker);
    if ((UnitIsAlive(lv_crewSpeaker) == true) && (gv_p2SearchCrewSilenced == false)) {
        // Transmission - SoundLink("TTosh03BMarine500012", 0)
        libCamp_gf_SendTransmissionCampaign(lv_crewSpeaker, SoundLink("TTosh03BMarine500012", 0), c_transmissionDurationAdd, 0.0, false);
        gv_p2SearchCrewLine = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }

    if ((UnitIsAlive(lv_crewSpeaker) == true) && (gv_p2SearchCrewSilenced == false)) {
        // Transmission - SoundLink("TTosh03BMarine500013", 0)
        libCamp_gf_SendTransmissionCampaign(lv_crewSpeaker, SoundLink("TTosh03BMarine500013", 0), c_transmissionDurationAdd, 0.0, false);
        gv_p2SearchCrewLine = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }

    gv_p2SearchCrewLine = c_invalidTransmissionId;
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2SearchCrewQ_Init () {
    gt_P2SearchCrewQ = TriggerCreate("gt_P2SearchCrewQ_Func");
    TriggerAddEventUnitRegion(gt_P2SearchCrewQ, null, RegionFromId(49), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 Delayed Raven Movement (Brutal)
//--------------------------------------------------------------------------------------------------
bool gt_P2DelayedRavenMovementBrutal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(20.0, c_timeGame);
    if ((UnitGetOwner(gv_p2Raven) == gv_pLAYER02_TOSH)) {
        UnitIssueOrder(gv_p2Raven, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(705)), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2DelayedRavenMovementBrutal_Init () {
    gt_P2DelayedRavenMovementBrutal = TriggerCreate("gt_P2DelayedRavenMovementBrutal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 Search Crew Combat
//--------------------------------------------------------------------------------------------------
bool gt_P2SearchCrewCombat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_platform == 2))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_p2SearchCrew, EventUnit()) == true))) {
            return false;
        }

        if (!((gv_p2SearchCrewLine != c_invalidTransmissionId))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClear(gv_p2SearchCrewLine);
    gv_p2SearchCrewSilenced = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2SearchCrewCombat_Init () {
    gt_P2SearchCrewCombat = TriggerCreate("gt_P2SearchCrewCombat_Func");
    TriggerEnable(gt_P2SearchCrewCombat, false);
    TriggerAddEventUnitDied(gt_P2SearchCrewCombat, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 Raven Attacked
//--------------------------------------------------------------------------------------------------
bool gt_P2RavenAttacked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_p2Raven))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_P2RavenFlee, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2RavenAttacked_Init () {
    gt_P2RavenAttacked = TriggerCreate("gt_P2RavenAttacked_Func");
    TriggerAddEventUnitDamaged(gt_P2RavenAttacked, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 Raven Skipped
//--------------------------------------------------------------------------------------------------
bool gt_P2RavenSkipped_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_nova))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_P2RavenFlee, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2RavenSkipped_Init () {
    gt_P2RavenSkipped = TriggerCreate("gt_P2RavenSkipped_Func");
    TriggerAddEventUnitRegion(gt_P2RavenSkipped, null, RegionFromId(28), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 Raven Flee
//--------------------------------------------------------------------------------------------------
bool gt_P2RavenFlee_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitInRegion(gv_p2Raven, RegionFromId(50)) != true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(gv_p2Raven) == gv_pLAYER02_TOSH)) {
        UnitIssueOrder(gv_p2Raven, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(281)), c_orderQueueReplace);
        UnitIssueOrder(gv_p2Raven, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
        UnitGroupAdd(gv_p2LZGuards, gv_p2Raven);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2RavenFlee_Init () {
    gt_P2RavenFlee = TriggerCreate("gt_P2RavenFlee_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 LZ Guard Dominated
//--------------------------------------------------------------------------------------------------
bool gt_P2LZGuardDominated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto729F00AE_g;
    int auto729F00AE_u;
    unit auto729F00AE_var;

    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_nova))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_dominatedUnit = EventUnitTargetUnit();
    auto729F00AE_g = gv_p2LZGuards;
    auto729F00AE_u = UnitGroupCount(auto729F00AE_g, c_unitCountAll);
    for (;; auto729F00AE_u -= 1) {
        auto729F00AE_var = UnitGroupUnitFromEnd(auto729F00AE_g, auto729F00AE_u);
        if (auto729F00AE_var == null) { break; }
        if ((EventUnitTargetUnit() == auto729F00AE_var)) {
            UnitGroupRemove(gv_p2LZGuards, auto729F00AE_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2LZGuardDominated_Init () {
    gt_P2LZGuardDominated = TriggerCreate("gt_P2LZGuardDominated_Func");
    TriggerEnable(gt_P2LZGuardDominated, false);
    TriggerAddEventUnitAbility(gt_P2LZGuardDominated, null, AbilityCommand("Domination", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 LZ Guard Released
//--------------------------------------------------------------------------------------------------
bool gt_P2LZGuardReleased_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_nova))) {
            return false;
        }

        if (!((gv_dominatedUnit != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(gv_dominatedUnit) == "Raven")) {
        TriggerExecute(gt_P2RavenFlee, true, false);
        UnitGroupAdd(gv_p2LZGuards, gv_dominatedUnit);
    }

    gv_dominatedUnit = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2LZGuardReleased_Init () {
    gt_P2LZGuardReleased = TriggerCreate("gt_P2LZGuardReleased_Func");
    TriggerEnable(gt_P2LZGuardReleased, false);
    TriggerAddEventUnitAbility(gt_P2LZGuardReleased, null, AbilityCommand("ReleaseMinion", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 LZ Vikings Land
//--------------------------------------------------------------------------------------------------
bool gt_P2LZVikingsLand_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vikings;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vikings = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_platform == 2))) {
            return false;
        }

        if (!((UnitTestPlane(EventUnitDamageSourceUnit(), c_planeGround) == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_p2LZGuards, EventUnit()) == true))) {
            return false;
        }

        if (!((RegionContainsPoint(RegionFromId(50), UnitGetPosition(EventUnit())) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER02_TOSH))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_vikings = UnitGroupFilter("VikingFighter", gv_pLAYER02_TOSH, gv_p2LZGuards, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupIssueOrder(lv_vikings, Order(AbilityCommand("AssaultMode", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2LZVikingsLand_Init () {
    gt_P2LZVikingsLand = TriggerCreate("gt_P2LZVikingsLand_Func");
    TriggerAddEventUnitDamaged(gt_P2LZVikingsLand, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 LZ Guards Return
//--------------------------------------------------------------------------------------------------
bool gt_P2LZGuardsReturn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_guard;
    point lv_guardHome;

    // Automatic Variable Declarations
    unitgroup autoDFF859F0_g;
    int autoDFF859F0_u;
    string autoA7FE5D13_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_platform == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitGroupIsDead(gv_p2LZGuards) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    autoDFF859F0_g = gv_p2LZGuards;
    autoDFF859F0_u = UnitGroupCount(autoDFF859F0_g, c_unitCountAll);
    for (;; autoDFF859F0_u -= 1) {
        lv_guard = UnitGroupUnitFromEnd(autoDFF859F0_g, autoDFF859F0_u);
        if (lv_guard == null) { break; }
        if ((UnitGetOwner(lv_guard) == gv_pLAYER02_TOSH) && (RegionContainsPoint(RegionFromId(50), UnitGetPosition(lv_guard)) == false)) {
            lv_guardHome = libNtve_gf_PointOffsetTowardsPoint(RegionGetCenter(RegionFromId(50)), 2.0, UnitGetPosition(lv_guard));
            autoA7FE5D13_val = UnitGetType(lv_guard);
            if (autoA7FE5D13_val == "Raven") {
                UnitIssueOrder(lv_guard, OrderTargetingPoint(AbilityCommand("move", 0), lv_guardHome), c_orderQueueReplace);
                UnitIssueOrder(lv_guard, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
            }
            else if (autoA7FE5D13_val == "VikingFighter") {
                UnitIssueOrder(lv_guard, OrderTargetingPoint(AbilityCommand("move", 0), lv_guardHome), c_orderQueueReplace);
                UnitIssueOrder(lv_guard, Order(AbilityCommand("AssaultMode", 0)), c_orderQueueAddToEnd);
            }
            else if (autoA7FE5D13_val == "VikingAssault") {
                if ((RegionContainsPoint(RegionFromId(14), UnitGetPosition(lv_guard)) == true)) {
                    UnitIssueOrder(lv_guard, OrderTargetingPoint(AbilityCommand("attack", 0), lv_guardHome), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(lv_guard, Order(AbilityCommand("FighterMode", 0)), c_orderQueueReplace);
                    UnitIssueOrder(lv_guard, OrderTargetingPoint(AbilityCommand("move", 0), lv_guardHome), c_orderQueueAddToEnd);
                    UnitIssueOrder(lv_guard, Order(AbilityCommand("AssaultMode", 0)), c_orderQueueAddToEnd);
                }
            }
            else {
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2LZGuardsReturn_Init () {
    gt_P2LZGuardsReturn = TriggerCreate("gt_P2LZGuardsReturn_Func");
    TriggerAddEventTimePeriodic(gt_P2LZGuardsReturn, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 LZ Guards Dead
//--------------------------------------------------------------------------------------------------
bool gt_P2LZGuardsDead_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dropshipA;
    unit lv_dropshipB;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_platform == 2))) {
            return false;
        }

        if (!((UnitGroupCount(gv_p2LZGuards, c_unitCountAlive) <= 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_P2LZGuardDominated, false);
    TriggerEnable(gt_P2LZGuardReleased, false);
    Wait(1.0, c_timeReal);
    TriggerExecute(gt_P2LZSecureLinesQ, true, false);
    MinimapPing(PlayerGroupAll(), PointFromId(397), 3.0, Color(0.00, 100.00, 25.10));
    UIAlertPoint("Trigger", 1, StringExternal("Param/Value/4E24BC8A"), null, PointFromId(397));
    CameraPan(gv_pLAYER01_USER, CameraInfoGetTarget(CameraInfoFromId(430)), 1.0, -1, 10, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTosh03BMusicEventB", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libNtve_gf_UnitCreateFacingPoint(1, "SpecialOpsDropship", 0, gv_pLAYER03_DROPSHIPS, PointFromId(398), PointFromId(397));
    lv_dropshipA = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    UnitCargoCreate(UnitLastCreated(), "Reaper", 4);
    UnitCargoCreate(UnitLastCreated(), "SiegeTank", 1);
    UnitIssueOrder(lv_dropshipA, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(397)), c_orderQueueReplace);
    UnitIssueOrder(lv_dropshipA, OrderTargetingPoint(AbilityCommand("SpecOpsDropshipTransport", 2), PointFromId(397)), c_orderQueueAddToEnd);
    UnitIssueOrder(lv_dropshipA, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(51))), c_orderQueueAddToEnd);
    libNtve_gf_UnitCreateFacingPoint(1, "SpecialOpsDropship", 0, gv_pLAYER03_DROPSHIPS, PointFromId(400), PointFromId(395));
    lv_dropshipB = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    UnitCargoCreate(UnitLastCreated(), "Reaper", 4);
    UnitCargoCreate(UnitLastCreated(), "SiegeTank", 1);
    UnitIssueOrder(lv_dropshipB, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(395)), c_orderQueueReplace);
    UnitIssueOrder(lv_dropshipB, OrderTargetingPoint(AbilityCommand("SpecOpsDropshipTransport", 2), PointFromId(395)), c_orderQueueAddToEnd);
    UnitIssueOrder(lv_dropshipB, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(51))), c_orderQueueAddToEnd);
    libNtve_gf_UnitCreateFacingPoint(1, "Raven", 0, gv_pLAYER01_USER, PointFromId(151), PointFromId(150));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(150)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2LZGuardsDead_Init () {
    gt_P2LZGuardsDead = TriggerCreate("gt_P2LZGuardsDead_Func");
    TriggerAddEventTimePeriodic(gt_P2LZGuardsDead, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 LZ Owner Change
//--------------------------------------------------------------------------------------------------
bool gt_P2LZOwnerChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER03_DROPSHIPS))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SpecialOpsDropship"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(EventUnit(), gv_pLAYER01_USER, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2LZOwnerChange_Init () {
    gt_P2LZOwnerChange = TriggerCreate("gt_P2LZOwnerChange_Func");
    TriggerAddEventUnitRegion(gt_P2LZOwnerChange, null, RegionFromId(50), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 LZ Secure Lines Q
//--------------------------------------------------------------------------------------------------
bool gt_P2LZSecureLinesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh03BNova00021", 0)
    libCamp_gf_SendTransmissionCampaign(gv_nova, SoundLink("TTosh03BNova00021", 0), c_transmissionDurationAdd, 0.0, true);
    if ((UnitIsAlive(gv_p2GateControl) == true)) {
        UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/BD1E8CB5"), null, gv_p2Gate);
        // Transmission - SoundLink("TTosh03BNova00014", 0)
        libCamp_gf_SendTransmissionCampaign(gv_nova, SoundLink("TTosh03BNova00014", 0), c_transmissionDurationAdd, 0.0, true);
        VisRevealArea(gv_pLAYER01_USER, RegionFromId(63), 5.0, false);
        TriggerExecute(gt_P2GateControlDesignator, true, false);
        MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_p2GateControl), 2.0, Color(100.00, 0.00, 0.00));
        UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/92F7D5F1"), null, gv_p2Gate);
        UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/481FB2C7"), null, gv_p2GateControl);
        UnitFlashSelection(gv_p1GateControl, 1.0);
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2LZSecureLinesQ_Init () {
    gt_P2LZSecureLinesQ = TriggerCreate("gt_P2LZSecureLinesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 LZ Dropships Arrive
//--------------------------------------------------------------------------------------------------
bool gt_P2LZDropshipsArrive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER03_DROPSHIPS))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SpecialOpsDropship"))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((UnitGroupCount(UnitGroup("SpecialOpsDropship", gv_pLAYER03_DROPSHIPS, RegionFromId(50), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    gv_p2DropDone = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2LZDropshipsArrive_Init () {
    gt_P2LZDropshipsArrive = TriggerCreate("gt_P2LZDropshipsArrive_Func");
    TriggerAddEventUnitRegion(gt_P2LZDropshipsArrive, null, RegionFromId(50), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 LZ Dropship Exit
//--------------------------------------------------------------------------------------------------
bool gt_P2LZDropshipExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER03_DROPSHIPS))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2LZDropshipExit_Init () {
    gt_P2LZDropshipExit = TriggerCreate("gt_P2LZDropshipExit_Func");
    TriggerAddEventUnitRegion(gt_P2LZDropshipExit, null, RegionFromId(51), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 Backup Nighthawk Q
//--------------------------------------------------------------------------------------------------
bool gt_P2BackupNighthawkQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_platform == 2))) {
            return false;
        }

        if (!((gv_p2DropDone == true))) {
            return false;
        }

        if (!((TechTreeUnitCount(gv_pLAYER01_USER, "Raven", c_techCountCompleteOnly) == 0))) {
            return false;
        }

        if (!(((PlayerDifficulty(gv_pLAYER01_USER) == 1) || (PlayerDifficulty(gv_pLAYER01_USER) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_P2BackupNightawkEntrance, true, false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh03BRaynor00027", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh03BRaynor00027", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2BackupNighthawkQ_Init () {
    gt_P2BackupNighthawkQ = TriggerCreate("gt_P2BackupNighthawkQ_Func");
    TriggerAddEventTimePeriodic(gt_P2BackupNighthawkQ, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 Backup Nightawk Entrance
//--------------------------------------------------------------------------------------------------
bool gt_P2BackupNightawkEntrance_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(1, "Raven", 0, gv_pLAYER01_USER, PointFromId(151), PointFromId(150));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(150)), c_orderQueueReplace);
    MinimapPing(PlayerGroupAll(), PointFromId(397), 3.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", 1, StringExternal("Param/Value/9A821EA1"), null, PointFromId(397));
    Wait(4.0, c_timeGame);
    gv_p2NighthawkReplaced = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2BackupNightawkEntrance_Init () {
    gt_P2BackupNightawkEntrance = TriggerCreate("gt_P2BackupNightawkEntrance_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 Backup Reapers Q
//--------------------------------------------------------------------------------------------------
bool gt_P2BackupReapersQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_platform == 2))) {
            return false;
        }

        if (!((gv_p2DropDone == true))) {
            return false;
        }

        if (!((TechTreeUnitCount(gv_pLAYER01_USER, "Reaper", c_techCountCompleteOnly) == 0))) {
            return false;
        }

        if (!(((PlayerDifficulty(gv_pLAYER01_USER) == 1) || (PlayerDifficulty(gv_pLAYER01_USER) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_P2BackupReapersEntrance, true, false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh03BRaynor00032", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh03BRaynor00032", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2BackupReapersQ_Init () {
    gt_P2BackupReapersQ = TriggerCreate("gt_P2BackupReapersQ_Func");
    TriggerAddEventTimePeriodic(gt_P2BackupReapersQ, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 Backup Reapers Entrance
//--------------------------------------------------------------------------------------------------
bool gt_P2BackupReapersEntrance_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dropship;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(1, "SpecialOpsDropship", 0, gv_pLAYER03_DROPSHIPS, PointFromId(398), PointFromId(397));
    lv_dropship = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    UnitCargoCreate(UnitLastCreated(), "Reaper", 6);
    UnitIssueOrder(lv_dropship, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(397)), c_orderQueueReplace);
    UnitIssueOrder(lv_dropship, OrderTargetingPoint(AbilityCommand("SpecOpsDropshipTransport", 2), PointFromId(397)), c_orderQueueAddToEnd);
    UnitIssueOrder(lv_dropship, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(51))), c_orderQueueAddToEnd);
    MinimapPing(PlayerGroupAll(), PointFromId(397), 3.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", 1, StringExternal("Param/Value/E8D7DA1F"), null, PointFromId(397));
    while (!((UnitCargoValue(lv_dropship, c_unitCargoUnitCount) == 0))) {
        Wait(0.5, c_timeGame);
    }
    gv_p2ReapersReplaced = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2BackupReapersEntrance_Init () {
    gt_P2BackupReapersEntrance = TriggerCreate("gt_P2BackupReapersEntrance_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 Gate Control Designator
//--------------------------------------------------------------------------------------------------
bool gt_P2GateControlDesignator_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_p2GateControl) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_AttachModelToUnit(UnitFromId(455), "BriefingUnitSelectRed", "Ref_Origin");
    gv_p2GateDesignator = libNtve_gf_ActorLastCreated();
    TriggerEnable(gt_P2GateReticleKiller, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2GateControlDesignator_Init () {
    gt_P2GateControlDesignator = TriggerCreate("gt_P2GateControlDesignator_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 Gate Reticle Killer
//--------------------------------------------------------------------------------------------------
bool gt_P2GateReticleKiller_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitTarget()) == gv_pLAYER01_USER))) {
            return false;
        }

        if (!((gv_p2GateDesignator != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_p2GateDesignator);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2GateReticleKiller_Init () {
    gt_P2GateReticleKiller = TriggerCreate("gt_P2GateReticleKiller_Func");
    TriggerEnable(gt_P2GateReticleKiller, false);
    TriggerAddEventUnitAttacked(gt_P2GateReticleKiller, UnitRefFromUnit(UnitFromId(455)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 Gate Open Q
//--------------------------------------------------------------------------------------------------
bool gt_P2GateOpenQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((EventUnit() == gv_p2GateControl))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(gv_p2Gate, Order(AbilityCommand("DestructibleGateStraightVerticalLFLowered", 0)), c_orderQueueReplace);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_p2Gate), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/12740C4C"), null, gv_p2Gate);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh03BNova00033", 0)
    libCamp_gf_SendTransmissionCampaign(gv_nova, SoundLink("TTosh03BNova00033", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2GateOpenQ_Init () {
    gt_P2GateOpenQ = TriggerCreate("gt_P2GateOpenQ_Func");
    TriggerAddEventUnitDied(gt_P2GateOpenQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 Banshee Cloak
//--------------------------------------------------------------------------------------------------
bool gt_P2BansheeCloak_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(684)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(UnitFromId(684)) == gv_pLAYER02_TOSH) && (UnitGetPropertyFixed(UnitFromId(684), c_unitPropEnergy, c_unitPropCurrent) >= 25.0) && (UnitHasBehavior(UnitFromId(684), "BansheeCloak") != true)) {
        UnitIssueOrder(UnitFromId(684), Order(AbilityCommand("BansheeCloak", 0)), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2BansheeCloak_Init () {
    gt_P2BansheeCloak = TriggerCreate("gt_P2BansheeCloak_Func");
    TriggerAddEventUnitDamaged(gt_P2BansheeCloak, UnitRefFromUnit(UnitFromId(684)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 Silo Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_P2SiloTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((EventUnit() == gv_nova))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_p2Silo), 2.0, Color(0.00, 100.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/0659DA1F"), null, gv_p2Silo);
    libCamp_gf_CreateTipFromConversationState("StoryTips|Tosh03b_Hacking", libNtve_ge_TipType_NewAbility, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2SiloTipQ_Init () {
    gt_P2SiloTipQ = TriggerCreate("gt_P2SiloTipQ_Func");
    TriggerAddEventUnitRegion(gt_P2SiloTipQ, null, RegionFromId(15), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 Silo Hacked Q
//--------------------------------------------------------------------------------------------------
bool gt_P2SiloHackedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_silo;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((EventUnit() == gv_nova))) {
            return false;
        }

        if (!((UnitIsAlive(gv_p2Silo) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitKill(UnitFromId(63));
    lv_silo = gv_p2Silo;
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh03BNova00019", 0)
    libCamp_gf_SendTransmissionCampaign(gv_nova, SoundLink("TTosh03BNova00019", 0), c_transmissionDurationAdd, 0.0, false);
    UnitIssueOrder(gv_nova, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_PauseUnit(gv_nova, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    // Transmission - SoundLink("TTosh03BNova00041", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh03BNova00041", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    libNtve_gf_PauseUnit(gv_nova, false);
    Wait(0.5, c_timeGame);
    UnitSetOwner(lv_silo, gv_pLAYER01_USER, true);
    gf_ArmSilo(lv_silo);
    gv_novaNukeCount += 1;
    UnitGroupRemove(gv_p2Units, gv_p2Silo);
    SoundPlay(SoundLink("Alert_TerranNukeReady", 0), PlayerGroupAll(), 100.0, 0.0);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(lv_silo), 3.0, Color(100.00, 100.00, 0.00));
    UIAlertUnit("Trigger", 1, StringExternal("Param/Value/A4539295"), null, gv_p2Silo);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2SiloHackedQ_Init () {
    gt_P2SiloHackedQ = TriggerCreate("gt_P2SiloHackedQ_Func");
    TriggerAddEventUnitRegion(gt_P2SiloHackedQ, null, RegionFromId(6), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 Nuke A
//--------------------------------------------------------------------------------------------------
bool gt_P2NukeA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_p2NukeDone == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_p2Nuker) == true))) {
            return false;
        }

        if (!((UnitGetOwner(gv_p2Nuker) == gv_pLAYER02_TOSH))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER01_USER, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER02_TOSH, RegionFromId(65), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_p2NukeDone = true;
    gf_P2NukeEm(gv_p2Nuker, RegionGetCenter(RegionFromId(65)), PointFromId(728));
    Wait(4.0, c_timeReal);
    TriggerExecute(gt_P2NukeTauntQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2NukeA_Init () {
    gt_P2NukeA = TriggerCreate("gt_P2NukeA_Func");
    TriggerAddEventTimePeriodic(gt_P2NukeA, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 Nuke B
//--------------------------------------------------------------------------------------------------
bool gt_P2NukeB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_p2NukeDone == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_p2Nuker) == true))) {
            return false;
        }

        if (!((UnitGetOwner(gv_p2Nuker) == gv_pLAYER02_TOSH))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER01_USER, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER02_TOSH, RegionFromId(66), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_p2NukeDone = true;
    gf_P2NukeEm(gv_p2Nuker, RegionGetCenter(RegionFromId(66)), PointFromId(728));
    Wait(4.0, c_timeReal);
    TriggerExecute(gt_P2NukeTauntQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2NukeB_Init () {
    gt_P2NukeB = TriggerCreate("gt_P2NukeB_Func");
    TriggerAddEventTimePeriodic(gt_P2NukeB, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 Nuke C
//--------------------------------------------------------------------------------------------------
bool gt_P2NukeC_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_p2NukeDone == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_p2Nuker) == true))) {
            return false;
        }

        if (!((UnitGetOwner(gv_p2Nuker) == gv_pLAYER02_TOSH))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER01_USER, RegionFromId(33), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER02_TOSH, RegionFromId(67), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_p2NukeDone = true;
    gf_P2NukeEm(gv_p2Nuker, RegionGetCenter(RegionFromId(67)), PointFromId(728));
    Wait(4.0, c_timeReal);
    TriggerExecute(gt_P2NukeTauntQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2NukeC_Init () {
    gt_P2NukeC = TriggerCreate("gt_P2NukeC_Func");
    TriggerAddEventTimePeriodic(gt_P2NukeC, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 Nuke Taunt Q
//--------------------------------------------------------------------------------------------------
bool gt_P2NukeTauntQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerQueueIsEmpty() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh03BTosh00034", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh03BTosh00034", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2NukeTauntQ_Init () {
    gt_P2NukeTauntQ = TriggerCreate("gt_P2NukeTauntQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 West Spectre powers
//--------------------------------------------------------------------------------------------------
bool gt_P2WestSpectrepowers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_potentialvictims;
    unit lv_target;

    // Automatic Variable Declarations
    int auto85F7F106_val;
    unitgroup autoB164A4B2_g;
    int autoB164A4B2_u;
    unit autoB164A4B2_var;

    // Variable Initialization
    lv_potentialvictims = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER02_TOSH, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(425), OrderTargetingPoint(AbilityCommand("UltrasonicPulse", 0), UnitGetPosition(EventUnit())), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    while (true) {
        if ((UnitGetOwner(UnitFromId(425)) == gv_pLAYER02_TOSH)) {
            lv_potentialvictims = UnitGroup(null, gv_pLAYER01_USER, RegionCircle(UnitGetPosition(UnitFromId(425)), 9.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto85F7F106_val = libNtve_gf_DifficultyValueInt(1, 1, 2, 2);
            if (auto85F7F106_val == 1) {
                UnitGroupRemove(lv_potentialvictims, gv_nova);
            }
            else if (auto85F7F106_val == 2) {
                if ((UnitGetPropertyFixed(gv_nova, c_unitPropLife, c_unitPropCurrent) < 250.0)) {
                    UnitGroupRemove(lv_potentialvictims, gv_nova);
                }

                autoB164A4B2_g = lv_potentialvictims;
                autoB164A4B2_u = UnitGroupCount(autoB164A4B2_g, c_unitCountAll);
                for (;; autoB164A4B2_u -= 1) {
                    autoB164A4B2_var = UnitGroupUnitFromEnd(autoB164A4B2_g, autoB164A4B2_u);
                    if (autoB164A4B2_var == null) { break; }
                    if ((autoB164A4B2_var != gv_nova) && (UnitGetPropertyFixed(autoB164A4B2_var, c_unitPropLifePercent, c_unitPropCurrent) <= 25.0)) {
                        UnitGroupRemove(lv_potentialvictims, autoB164A4B2_var);
                    }

                }
            }
            else {
            }
            lv_target = libNtve_gf_ClosestUnitToPoint(UnitGetPosition(UnitFromId(425)), lv_potentialvictims);
            UnitIssueOrder(UnitFromId(425), OrderTargetingUnit(AbilityCommand("Obliterate", 0), lv_target), c_orderQueueReplace);
        }

        Wait(1.0, c_timeGame);
        if ((UnitIsAlive(UnitFromId(425)) == false)) {
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2WestSpectrepowers_Init () {
    gt_P2WestSpectrepowers = TriggerCreate("gt_P2WestSpectrepowers_Func");
    TriggerAddEventUnitRange(gt_P2WestSpectrepowers, null, UnitFromId(425), 8.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 End Reveal
//--------------------------------------------------------------------------------------------------
bool gt_P2EndReveal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_platform == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER01_USER, RegionFromId(70), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        VisRevealerEnable(gv_p2EndRevealer, true);
    }
    else {
        VisRevealerEnable(gv_p2EndRevealer, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2EndReveal_Init () {
    gt_P2EndReveal = TriggerCreate("gt_P2EndReveal_Func");
    TriggerAddEventTimePeriodic(gt_P2EndReveal, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 Objective Designator
//--------------------------------------------------------------------------------------------------
bool gt_P2ObjectiveDesignator_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_AttachModelToUnit(gv_p2TerrazineDepot, "BriefingUnitSelectLargeRed", "Ref_Center");
    gv_p2ObjectiveDesignator = libNtve_gf_ActorLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2ObjectiveDesignator_Init () {
    gt_P2ObjectiveDesignator = TriggerCreate("gt_P2ObjectiveDesignator_Func");
    TriggerAddEventUnitRegion(gt_P2ObjectiveDesignator, null, RegionFromId(68), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 Designator remover
//--------------------------------------------------------------------------------------------------
bool gt_P2Designatorremover_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_p2TerrazineDepot))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTarget()) == gv_pLAYER01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(gv_p2ObjectiveDesignator);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2Designatorremover_Init () {
    gt_P2Designatorremover = TriggerCreate("gt_P2Designatorremover_Func");
    TriggerAddEventUnitAttacked(gt_P2Designatorremover, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2 Terrazine Refinery Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_P2TerrazineRefineryDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_p2TerrazineDepot))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(ActorFromDoodad(DoodadFromId(415)), "Signal DoodadDeath");
    libNtve_gf_MakeUnitInvulnerable(gv_nova, true);
    TriggerEnable(gt_P2BackupNighthawkQ, false);
    TriggerEnable(gt_P2BackupReapersQ, false);
    Wait(0.3, c_timeGame);
    libNtve_gf_SendActorMessageToGameRegion(RegionCircle(Point(157.0, 109.0), 2.0), "Signal Nuked");
    Wait(0.3, c_timeGame);
    libNtve_gf_SendActorMessageToGameRegion(RegionCircle(Point(163.0, 103.0), 2.0), "Signal Nuked");
    Wait(0.3, c_timeGame);
    libNtve_gf_SendActorMessageToGameRegion(RegionCircle(Point(148.0, 106.0), 2.0), "Signal Nuked");
    Wait(0.3, c_timeGame);
    libNtve_gf_SendActorMessageToGameRegion(RegionCircle(Point(160.0, 96.0), 2.0), "Signal Nuked");
    Wait(0.3, c_timeGame);
    libNtve_gf_SendActorMessageToGameRegion(RegionCircle(Point(142.0, 101.0), 2.0), "Signal Nuked");
    Wait(0.3, c_timeGame);
    libNtve_gf_SendActorMessageToGameRegion(RegionCircle(Point(154.0, 89.0), 2.0), "Signal Nuked");
    TriggerExecute(gt_ObjectiveDestroyUpdateTerrazineRefineryQ, true, false);
    TriggerExecute(gt_P2DoneQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2TerrazineRefineryDestroyed_Init () {
    gt_P2TerrazineRefineryDestroyed = TriggerCreate("gt_P2TerrazineRefineryDestroyed_Func");
    TriggerAddEventUnitDied(gt_P2TerrazineRefineryDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P3 Activate
//--------------------------------------------------------------------------------------------------
bool gt_P3Activate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_novaNukeCount == 1)) {
        libNtve_gf_ShowHideUnit(gv_p2Silo, true);
        gf_ArmSilo(gv_p2Silo);
    }

    TriggerExecute(gt_P3Leashes, true, false);
    TriggerExecute(gt_P3SpawnPlayerUnitsQ, true, false);
    TriggerEnable(gt_P3ThorDominated, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P3Activate_Init () {
    gt_P3Activate = TriggerCreate("gt_P3Activate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P3 Spawn Player Units Q
//--------------------------------------------------------------------------------------------------
bool gt_P3SpawnPlayerUnitsQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bansheeSpeaker;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnMove("VikingFighter", gv_pLAYER01_USER, PointFromId(654), PointFromId(69));
    gf_SpawnMove("VikingFighter", gv_pLAYER01_USER, PointFromId(653), PointFromId(587));
    gf_SpawnMove("VikingFighter", gv_pLAYER01_USER, PointFromId(652), PointFromId(599));
    gf_SpawnMove("VikingFighter", gv_pLAYER01_USER, PointFromId(410), PointFromId(635));
    gf_SpawnMove("Banshee", gv_pLAYER01_USER, PointFromId(656), PointFromId(650));
    gf_SpawnMove("Banshee", gv_pLAYER01_USER, PointFromId(409), PointFromId(647));
    gf_SpawnMove("Banshee", gv_pLAYER01_USER, PointFromId(655), PointFromId(79));
    gf_SpawnMove("Banshee", gv_pLAYER01_USER, PointFromId(657), PointFromId(651));
    lv_bansheeSpeaker = UnitGroupUnit(UnitLastCreatedGroup(), 1);
    Wait(3.0, c_timeGame);
    TriggerQueueEnter();
    if ((UnitIsAlive(lv_bansheeSpeaker) == true)) {
        UIAlertUnit("Trigger", gv_pLAYER01_USER, StringToText(""), null, lv_bansheeSpeaker);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TTosh03BBanshee00036", 0)
        libCamp_gf_SendTransmissionCampaign(lv_bansheeSpeaker, SoundLink("TTosh03BBanshee00036", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P3SpawnPlayerUnitsQ_Init () {
    gt_P3SpawnPlayerUnitsQ = TriggerCreate("gt_P3SpawnPlayerUnitsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P3 Leashes
//--------------------------------------------------------------------------------------------------
bool gt_P3Leashes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p3SouthThorHome;
    point lv_p3SouthMaraduer1Home;
    point lv_p3SouthMaraduer2Home;
    point lv_p3EndSpectreHome;
    point lv_p3BridgeSpectreHome;
    point lv_p3SouthRavenHome;
    point[20] lv_p3ObjectiveGuardsHome;
    unit[20] lv_p3ObjectiveGuardArray;
    int lv_iNT;

    // Automatic Variable Declarations
    unitgroup autoEDCB3F64_g;
    int autoEDCB3F64_u;
    unit autoEDCB3F64_var;
    int auto2BA10460_ae;
    const int auto2BA10460_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_p3BridgeSpectreHome = UnitGetPosition(gv_p3BridgeSpectre);
    lv_p3SouthMaraduer1Home = UnitGetPosition(gv_p3SouthMarauder1);
    lv_p3SouthMaraduer2Home = UnitGetPosition(gv_p3SouthMarauder2);
    lv_p3SouthThorHome = UnitGetPosition(gv_p3SouthThor);
    autoEDCB3F64_g = gv_p3ObjectiveGuards;
    autoEDCB3F64_u = UnitGroupCount(autoEDCB3F64_g, c_unitCountAll);
    for (;; autoEDCB3F64_u -= 1) {
        autoEDCB3F64_var = UnitGroupUnitFromEnd(autoEDCB3F64_g, autoEDCB3F64_u);
        if (autoEDCB3F64_var == null) { break; }
        lv_iNT += 1;
        lv_p3ObjectiveGuardArray[lv_iNT] = autoEDCB3F64_var;
        lv_p3ObjectiveGuardsHome[lv_iNT] = UnitGetPosition(autoEDCB3F64_var);
    }
    lv_iNT = 0;
    while (true) {
        gf_CheckUnitLeash(gv_p3BridgeSpectre, lv_p3BridgeSpectreHome, 10.0);
        auto2BA10460_ae = gv_p3ObjectiveGuardCount;
        lv_iNT = 1;
        for ( ; ( (auto2BA10460_ai >= 0 && lv_iNT <= auto2BA10460_ae) || (auto2BA10460_ai < 0 && lv_iNT >= auto2BA10460_ae) ) ; lv_iNT += auto2BA10460_ai ) {
            gf_CheckUnitLeash(lv_p3ObjectiveGuardArray[lv_iNT], lv_p3ObjectiveGuardsHome[lv_iNT], 10.0);
        }
        gf_CheckUnitLeash(gv_p3SouthThor, lv_p3SouthThorHome, 3.0);
        gf_CheckUnitLeash(gv_p3SouthMarauder1, lv_p3SouthMaraduer1Home, 4.0);
        gf_CheckUnitLeash(gv_p3SouthMarauder2, lv_p3SouthMaraduer2Home, 4.0);
        Wait(0.2, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P3Leashes_Init () {
    gt_P3Leashes = TriggerCreate("gt_P3Leashes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P3 South Viking
//--------------------------------------------------------------------------------------------------
bool gt_P3SouthViking_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_p3SouthGuards, EventUnit()) == true))) {
            return false;
        }

        if (!((UnitTestPlane(EventUnitDamageSourceUnit(), c_planeAir) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(EventUnitDamageSourceUnit(), gv_pLAYER02_TOSH) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_p3SouthViking) == true))) {
            return false;
        }

        if (!((UnitGetOwner(gv_p3SouthViking) == gv_pLAYER02_TOSH))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(gv_p3SouthViking, Order(AbilityCommand("FighterMode", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P3SouthViking_Init () {
    gt_P3SouthViking = TriggerCreate("gt_P3SouthViking_Func");
    TriggerAddEventUnitDamaged(gt_P3SouthViking, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P3 North Viking
//--------------------------------------------------------------------------------------------------
bool gt_P3NorthViking_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_p3NorthGuards, EventUnit()) == true))) {
            return false;
        }

        if (!((UnitTestPlane(EventUnitDamageSourceUnit(), c_planeAir) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(EventUnitDamageSourceUnit(), gv_pLAYER02_TOSH) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_p3NorthViking) == true))) {
            return false;
        }

        if (!((UnitGetOwner(gv_p3NorthViking) == gv_pLAYER02_TOSH))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(gv_p3NorthViking, Order(AbilityCommand("FighterMode", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P3NorthViking_Init () {
    gt_P3NorthViking = TriggerCreate("gt_P3NorthViking_Func");
    TriggerAddEventUnitDamaged(gt_P3NorthViking, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P3 South Raven Drone
//--------------------------------------------------------------------------------------------------
bool gt_P3SouthRavenDrone_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "Banshee"))) {
            return false;
        }

        if (!(((EventUnit() == gv_p3SouthMarauder1) || (EventUnit() == gv_p3SouthMarauder2)))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(216)) == true))) {
            return false;
        }

        if (!((UnitGetOwner(UnitFromId(216)) == gv_pLAYER02_TOSH))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(216), OrderTargetingPoint(AbilityCommand("PlacePointDefenseDrone", 0), UnitGetPosition(gv_p3SouthMarauder1)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(216), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P3SouthRavenDrone_Init () {
    gt_P3SouthRavenDrone = TriggerCreate("gt_P3SouthRavenDrone_Func");
    TriggerAddEventUnitDamaged(gt_P3SouthRavenDrone, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P3 South Raven Turrets
//--------------------------------------------------------------------------------------------------
bool gt_P3SouthRavenTurrets_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "VikingFighter"))) {
            return false;
        }

        if (!((UnitGroupHasUnit(UnitGroup(null, gv_pLAYER02_TOSH, RegionFromId(88), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), EventUnit()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(UnitFromId(216)) == gv_pLAYER02_TOSH))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(216), OrderTargetingPoint(AbilityCommand("BuildAutoTurret", 0), PointFromId(1156)), c_orderQueueReplace);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        UnitIssueOrder(UnitFromId(216), OrderTargetingPoint(AbilityCommand("BuildAutoTurret", 0), PointFromId(1157)), c_orderQueueReplace);
    }

    UnitIssueOrder(UnitFromId(216), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P3SouthRavenTurrets_Init () {
    gt_P3SouthRavenTurrets = TriggerCreate("gt_P3SouthRavenTurrets_Func");
    TriggerAddEventUnitDamaged(gt_P3SouthRavenTurrets, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P3 Raven Patroller
//--------------------------------------------------------------------------------------------------
bool gt_P3RavenPatroller_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_platform == 3))) {
            return false;
        }

        if (!((UnitTestState(gv_p3Raven, c_unitStateIdle) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_p3Raven) == true))) {
            return false;
        }

        if (!((UnitGetOwner(gv_p3Raven) == gv_pLAYER02_TOSH))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        UnitIssueOrder(gv_p3Raven, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(721)), c_orderQueueReplace);
        UnitIssueOrder(gv_p3Raven, OrderTargetingPoint(AbilityCommand("move", 1), PointFromId(722)), c_orderQueueAddToEnd);
    }
    else {
        UnitIssueOrder(gv_p3Raven, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(274)), c_orderQueueReplace);
        UnitIssueOrder(gv_p3Raven, OrderTargetingPoint(AbilityCommand("move", 1), PointFromId(275)), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P3RavenPatroller_Init () {
    gt_P3RavenPatroller = TriggerCreate("gt_P3RavenPatroller_Func");
    TriggerAddEventTimePeriodic(gt_P3RavenPatroller, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P3 Central Spectre powers
//--------------------------------------------------------------------------------------------------
bool gt_P3CentralSpectrepowers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_potentialvictims;
    unit lv_target;

    // Automatic Variable Declarations
    int autoBE858D0C_val;
    unitgroup autoC46A0E1C_g;
    int autoC46A0E1C_u;
    unit autoC46A0E1C_var;

    // Variable Initialization
    lv_potentialvictims = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER02_TOSH, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(gv_p3BridgeSpectre, OrderTargetingPoint(AbilityCommand("UltrasonicPulse", 0), UnitGetPosition(EventUnit())), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    while (true) {
        if ((UnitGetOwner(UnitFromId(306)) == gv_pLAYER02_TOSH)) {
            lv_potentialvictims = UnitGroup(null, gv_pLAYER01_USER, RegionCircle(UnitGetPosition(UnitFromId(306)), 9.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoBE858D0C_val = libNtve_gf_DifficultyValueInt(1, 1, 2, 2);
            if (autoBE858D0C_val == 1) {
                UnitGroupRemove(lv_potentialvictims, gv_nova);
            }
            else if (autoBE858D0C_val == 2) {
                if ((UnitGetPropertyFixed(gv_nova, c_unitPropLife, c_unitPropCurrent) < 250.0)) {
                    UnitGroupRemove(lv_potentialvictims, gv_nova);
                }

                autoC46A0E1C_g = lv_potentialvictims;
                autoC46A0E1C_u = UnitGroupCount(autoC46A0E1C_g, c_unitCountAll);
                for (;; autoC46A0E1C_u -= 1) {
                    autoC46A0E1C_var = UnitGroupUnitFromEnd(autoC46A0E1C_g, autoC46A0E1C_u);
                    if (autoC46A0E1C_var == null) { break; }
                    if ((autoC46A0E1C_var != gv_nova) && (UnitGetPropertyFixed(autoC46A0E1C_var, c_unitPropLifePercent, c_unitPropCurrent) <= 25.0)) {
                        UnitGroupRemove(lv_potentialvictims, autoC46A0E1C_var);
                    }

                }
            }
            else {
            }
            lv_target = libNtve_gf_ClosestUnitToPoint(UnitGetPosition(UnitFromId(306)), lv_potentialvictims);
            UnitIssueOrder(UnitFromId(306), OrderTargetingUnit(AbilityCommand("Obliterate", 0), lv_target), c_orderQueueReplace);
        }

        Wait(1.0, c_timeGame);
        if ((UnitIsAlive(UnitFromId(306)) == false)) {
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P3CentralSpectrepowers_Init () {
    gt_P3CentralSpectrepowers = TriggerCreate("gt_P3CentralSpectrepowers_Func");
    TriggerAddEventUnitRange(gt_P3CentralSpectrepowers, null, UnitFromId(306), 8.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P3 Ultra Rawr!
//--------------------------------------------------------------------------------------------------
bool gt_P3UltraRawr_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_nova))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(1070)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER01_USER, RegionFromId(90), 30.0, false);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(1070)), c_animNameDefault, "Stand Victory", c_animFlagNonLooping, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("Ultralisk_Roar", 0), PlayerGroupAll(), UnitFromId(1070), 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P3UltraRawr_Init () {
    gt_P3UltraRawr = TriggerCreate("gt_P3UltraRawr_Func");
    TriggerAddEventUnitRegion(gt_P3UltraRawr, null, RegionFromId(89), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P3 Brittle Ultralisk Barriers
//--------------------------------------------------------------------------------------------------
bool gt_P3BrittleUltraliskBarriers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(UnitFromId(1063));
    UnitKill(UnitFromId(1065));
    UnitKill(UnitFromId(1147));
    if ((UnitIsAlive(UnitFromId(1070)) == true)) {
        libNtve_gf_ShareVisionofUnit(UnitFromId(1070), true, gv_pLAYER01_USER);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(1070)), c_animNameDefault, "Stand Victory", c_animFlagNonLooping, c_animTimeDefault);
        SoundPlayOnUnit(SoundLink("Ultralisk_Roar", 0), PlayerGroupAll(), UnitFromId(1070), 0.0, 100.0, 0.0);
        Wait(4.6, c_timeReal);
        if ((UnitGetOwner(UnitFromId(1070)) == gv_pLAYER05_ULTRA)) {
            UnitIssueOrder(UnitFromId(1070), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1119)), c_orderQueueAddToEnd);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P3BrittleUltraliskBarriers_Init () {
    gt_P3BrittleUltraliskBarriers = TriggerCreate("gt_P3BrittleUltraliskBarriers_Func");
    TriggerAddEventUnitDied(gt_P3BrittleUltraliskBarriers, UnitRefFromUnit(UnitFromId(1063)));
    TriggerAddEventUnitDied(gt_P3BrittleUltraliskBarriers, UnitRefFromUnit(UnitFromId(1065)));
    TriggerAddEventUnitDied(gt_P3BrittleUltraliskBarriers, UnitRefFromUnit(UnitFromId(1147)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: P3 Thor Dominated
//--------------------------------------------------------------------------------------------------
bool gt_P3ThorDominated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_nova))) {
            return false;
        }

        if (!((EventUnitTargetUnit() == UnitFromId(1059)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER01_USER, "TerranVehicleArmorsVanadiumPlatingLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER01_USER, "TerranVehicleArmorsVanadiumPlatingLevel2", 1);
    TriggerEnable(gt_P3ThorReleased, true);
    TriggerEnable(gt_P3ThorKilled, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P3ThorDominated_Init () {
    gt_P3ThorDominated = TriggerCreate("gt_P3ThorDominated_Func");
    TriggerEnable(gt_P3ThorDominated, false);
    TriggerAddEventUnitAbility(gt_P3ThorDominated, null, AbilityCommand("Domination", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P3 Thor Released
//--------------------------------------------------------------------------------------------------
bool gt_P3ThorReleased_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER01_USER, "TerranVehicleArmorsVanadiumPlatingLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER01_USER, "TerranVehicleArmorsVanadiumPlatingLevel2", 0);
    TriggerEnable(gt_P3ThorReleased, false);
    TriggerEnable(gt_P3ThorKilled, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P3ThorReleased_Init () {
    gt_P3ThorReleased = TriggerCreate("gt_P3ThorReleased_Func");
    TriggerEnable(gt_P3ThorReleased, false);
    TriggerAddEventUnitAbility(gt_P3ThorReleased, null, AbilityCommand("ReleaseMinion", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P3 Thor Killed
//--------------------------------------------------------------------------------------------------
bool gt_P3ThorKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER01_USER, "TerranVehicleArmorsVanadiumPlatingLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER01_USER, "TerranVehicleArmorsVanadiumPlatingLevel2", 0);
    TriggerEnable(gt_P3ThorReleased, false);
    TriggerEnable(gt_P3ThorKilled, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P3ThorKilled_Init () {
    gt_P3ThorKilled = TriggerCreate("gt_P3ThorKilled_Func");
    TriggerEnable(gt_P3ThorKilled, false);
    TriggerAddEventUnitDied(gt_P3ThorKilled, UnitRefFromUnit(UnitFromId(1059)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: P3 SiloA Hacked Q
//--------------------------------------------------------------------------------------------------
bool gt_P3SiloAHackedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_silo;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((EventUnit() == gv_nova))) {
            return false;
        }

        if (!((UnitIsAlive(gv_p3Silo) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitKill(UnitFromId(17));
    lv_silo = gv_p3Silo;
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh03BNova00019", 0)
    libCamp_gf_SendTransmissionCampaign(gv_nova, SoundLink("TTosh03BNova00019", 0), c_transmissionDurationAdd, 0.0, false);
    UnitIssueOrder(gv_nova, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_PauseUnit(gv_nova, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    // Transmission - SoundLink("TTosh03BNova00041", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh03BNova00041", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    libNtve_gf_PauseUnit(gv_nova, false);
    Wait(0.5, c_timeGame);
    UnitSetOwner(lv_silo, gv_pLAYER01_USER, true);
    gf_ArmSilo(lv_silo);
    gv_novaNukeCount += 1;
    SoundPlay(SoundLink("Alert_TerranNukeReady", 0), PlayerGroupAll(), 100.0, 0.0);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(lv_silo), 3.0, Color(100.00, 100.00, 0.00));
    UIAlertUnit("Trigger", 1, StringExternal("Param/Value/C7BFA08A"), null, gv_p3Silo);
    UnitKill(UnitFromId(802));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P3SiloAHackedQ_Init () {
    gt_P3SiloAHackedQ = TriggerCreate("gt_P3SiloAHackedQ_Func");
    TriggerAddEventUnitRegion(gt_P3SiloAHackedQ, null, RegionFromId(8), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P3 Nuke A
//--------------------------------------------------------------------------------------------------
bool gt_P3NukeA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_platform == 3))) {
            return false;
        }

        if (!((UnitIsAlive(gv_p3NukerA) == true))) {
            return false;
        }

        if (!((UnitGetOwner(gv_p3NukerA) == gv_pLAYER02_TOSH))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER01_USER, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER02_TOSH, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_ArmSilo(gv_p3NukerASilo);
    UnitIssueOrder(gv_p3NukerA, OrderTargetingPoint(AbilityCommand("SpectreNuke", 0), PointFromId(272)), c_orderQueueAddToEnd);
    VisRevealArea(gv_pLAYER01_USER, RegionCircle(PointFromId(272), 8.0), 25.0, false);
    Wait(4.0, c_timeReal);
    TriggerExecute(gt_P3NukeTauntQ, true, false);
    TriggerEnable(gt_P3PostNukerApowers, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P3NukeA_Init () {
    gt_P3NukeA = TriggerCreate("gt_P3NukeA_Func");
    TriggerAddEventTimePeriodic(gt_P3NukeA, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P3 Nuke B
//--------------------------------------------------------------------------------------------------
bool gt_P3NukeB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_platform == 3))) {
            return false;
        }

        if (!((UnitIsAlive(gv_p3NukerB) == true))) {
            return false;
        }

        if (!((UnitGetOwner(gv_p3NukerB) == gv_pLAYER02_TOSH))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER01_USER, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER02_TOSH, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_ArmSilo(gv_p3NukerBSilo);
    UnitIssueOrder(gv_p3NukerB, OrderTargetingPoint(AbilityCommand("SpectreNuke", 0), PointFromId(273)), c_orderQueueAddToEnd);
    VisRevealArea(gv_pLAYER01_USER, RegionCircle(PointFromId(273), 8.0), 25.0, false);
    Wait(4.0, c_timeReal);
    TriggerExecute(gt_P3NukeTauntQ, true, false);
    TriggerEnable(gt_P3PostNukerBpowers, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P3NukeB_Init () {
    gt_P3NukeB = TriggerCreate("gt_P3NukeB_Func");
    TriggerAddEventTimePeriodic(gt_P3NukeB, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P3 Post Nuker A powers
//--------------------------------------------------------------------------------------------------
bool gt_P3PostNukerApowers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(gv_p3NukerA) == gv_pLAYER02_TOSH))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(gv_p3NukerB, OrderTargetingPoint(AbilityCommand("UltrasonicPulse", 0), UnitGetPosition(EventUnit())), c_orderQueueAddToEnd);
    Wait(libNtve_gf_DifficultyValueFixed(10.0, 8.0, 5.0, 3.5), c_timeGame);
    if ((UnitIsAlive(UnitFromId(242)) == true)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P3PostNukerApowers_Init () {
    gt_P3PostNukerApowers = TriggerCreate("gt_P3PostNukerApowers_Func");
    TriggerEnable(gt_P3PostNukerApowers, false);
    TriggerAddEventUnitRange(gt_P3PostNukerApowers, null, UnitFromId(242), 8.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P3 Post Nuker B powers
//--------------------------------------------------------------------------------------------------
bool gt_P3PostNukerBpowers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(gv_p3NukerB) == gv_pLAYER02_TOSH))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(gv_p3NukerB, OrderTargetingPoint(AbilityCommand("UltrasonicPulse", 0), UnitGetPosition(EventUnit())), c_orderQueueAddToEnd);
    Wait(libNtve_gf_DifficultyValueFixed(10.0, 8.0, 5.0, 3.5), c_timeGame);
    if ((UnitIsAlive(UnitFromId(246)) == true)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P3PostNukerBpowers_Init () {
    gt_P3PostNukerBpowers = TriggerCreate("gt_P3PostNukerBpowers_Func");
    TriggerEnable(gt_P3PostNukerBpowers, false);
    TriggerAddEventUnitRange(gt_P3PostNukerBpowers, null, UnitFromId(246), 8.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P3 Nuke Taunt Q
//--------------------------------------------------------------------------------------------------
bool gt_P3NukeTauntQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh03BTosh00037", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh03BTosh00037", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P3NukeTauntQ_Init () {
    gt_P3NukeTauntQ = TriggerCreate("gt_P3NukeTauntQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P3 Objective Designator
//--------------------------------------------------------------------------------------------------
bool gt_P3ObjectiveDesignator_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER01_USER))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_P3Designatorremover, true);
    libNtve_gf_AttachModelToUnit(gv_p3PsiIndoctrinator, "BriefingUnitSelectLargeRed", "Ref_Center");
    gv_p3ObjectiveDesignator = libNtve_gf_ActorLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P3ObjectiveDesignator_Init () {
    gt_P3ObjectiveDesignator = TriggerCreate("gt_P3ObjectiveDesignator_Func");
    TriggerAddEventUnitRegion(gt_P3ObjectiveDesignator, null, RegionFromId(34), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P3 Designator remover
//--------------------------------------------------------------------------------------------------
bool gt_P3Designatorremover_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_p3PsiIndoctrinator))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTarget()) == gv_pLAYER01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_p3ObjectiveDesignator);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P3Designatorremover_Init () {
    gt_P3Designatorremover = TriggerCreate("gt_P3Designatorremover_Func");
    TriggerEnable(gt_P3Designatorremover, false);
    TriggerAddEventUnitAttacked(gt_P3Designatorremover, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P3 End Reveal
//--------------------------------------------------------------------------------------------------
bool gt_P3EndReveal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_platform == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGroupCount(UnitGroup(null, gv_pLAYER01_USER, RegionFromId(35), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER01_USER, RegionFromId(36), UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
        VisRevealerEnable(gv_p3EndRevealer, true);
        TriggerExecute(gt_P3EndNukeCommentQ, true, false);
    }
    else {
        VisRevealerEnable(gv_p3EndRevealer, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P3EndReveal_Init () {
    gt_P3EndReveal = TriggerCreate("gt_P3EndReveal_Func");
    TriggerAddEventTimePeriodic(gt_P3EndReveal, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P3 End Nuke Comment Q
//--------------------------------------------------------------------------------------------------
bool gt_P3EndNukeCommentQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_novaNukeCount > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    CameraPan(gv_pLAYER01_USER, CameraInfoGetTarget(CameraInfoFromId(399)), 1.0, -1, 10, true);
    VisRevealArea(gv_pLAYER01_USER, RegionFromId(34), 5.0, false);
    UIAlertPoint("Trigger", gv_pLAYER01_USER, StringToText(""), null, PointFromId(658));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh03BNova00038", 0)
    libCamp_gf_SendTransmissionCampaign(gv_nova, SoundLink("TTosh03BNova00038", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P3EndNukeCommentQ_Init () {
    gt_P3EndNukeCommentQ = TriggerCreate("gt_P3EndNukeCommentQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nuke Launched
//--------------------------------------------------------------------------------------------------
bool gt_NukeLaunched_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_nukeLaunchCount += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NukeLaunched_Init () {
    gt_NukeLaunched = TriggerCreate("gt_NukeLaunched_Func");
    TriggerAddEventUnitAbility(gt_NukeLaunched, null, AbilityCommand("HeroNuclearStrike", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Snipe Kills
//--------------------------------------------------------------------------------------------------
bool gt_NovaSnipeKills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER01_USER))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != gv_pLAYER01_USER))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "Domination") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_snipeKills += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NovaSnipeKills_Init () {
    gt_NovaSnipeKills = TriggerCreate("gt_NovaSnipeKills_Func");
    TriggerAddEventUnitDamaged(gt_NovaSnipeKills, null, c_unitDamageTypeAny, c_unitDamageFatal, "NovaSnipe");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Domination Cast
//--------------------------------------------------------------------------------------------------
bool gt_DominationCast_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_nova))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_dominationCastCount += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominationCast_Init () {
    gt_DominationCast = TriggerCreate("gt_DominationCast_Func");
    TriggerAddEventUnitAbility(gt_DominationCast, null, AbilityCommand("Domination", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominated Kills
//--------------------------------------------------------------------------------------------------
bool gt_DominatedKills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER01_USER))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != gv_pLAYER01_USER))) {
            return false;
        }

        if (!((UnitHasBehavior(libNtve_gf_KillingUnit(), "Domination") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_dominationKills += 1;
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_dominationKills >= 15)) {
        AchievementAward(gv_pLAYER01_USER, "TTosh03B_2");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominatedKills_Init () {
    gt_DominatedKills = TriggerCreate("gt_DominatedKills_Func");
    TriggerAddEventUnitDied(gt_DominatedKills, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SpectreKillsByReapers
//--------------------------------------------------------------------------------------------------
bool gt_SpectreKillsByReapers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER01_USER))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER02_TOSH))) {
            return false;
        }

        if (!((UnitGetType(libNtve_gf_KillingUnit()) == "Reaper"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Spectre"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_spectreKillsByReapers += 1;
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1)) {
        AchievementTermQuantitySet(gv_pLAYER01_USER, "Anniversary_TTosh03B", gv_spectreKillsByReapers);
        TextExpressionSetToken("Param/Expression/C6908CC9", "A", IntToText(gv_spectreKillsByReapers));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/C6908CC9"), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpectreKillsByReapers_Init () {
    gt_SpectreKillsByReapers = TriggerCreate("gt_SpectreKillsByReapers_Func");
    TriggerAddEventUnitDied(gt_SpectreKillsByReapers, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Psi-Indoctrinator Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryPsiIndoctrinatorDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((EventUnit() == gv_p3PsiIndoctrinator))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    ActorSend(ActorFromDoodad(DoodadFromId(256)), "Signal DoodadDeath");
    libNtve_gf_SendActorMessageToGameRegion(RegionCircle(UnitGetPosition(gv_p3PsiIndoctrinator), 10.0), "Signal Nuked");
    libNtve_gf_MakeUnitInvulnerable(gv_nova, true);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDestroyComplete, true, false);
    TriggerExecute(gt_ObjectiveSurviveComplete, true, false);
    libCamp_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryPsiIndoctrinatorDestroyed_Init () {
    gt_VictoryPsiIndoctrinatorDestroyed = TriggerCreate("gt_VictoryPsiIndoctrinatorDestroyed_Func");
    TriggerAddEventUnitDied(gt_VictoryPsiIndoctrinatorDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((ObjectiveGetState(gv_objectiveDestroyMineralDepot) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveDestroyPsiIndoctrinator) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveDestroyTerrazineRefinery) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveKillSpectres) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveNovaMustSurvive) == c_objectiveStateCompleted)) {
        AchievementAward(gv_pLAYER01_USER, "TTosh03B_1");
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1) && (UnitGroupCount(UnitGroup(null, gv_pLAYER02_TOSH, RegionFromId(30), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER02_TOSH, RegionFromId(31), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER02_TOSH, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        AchievementAward(gv_pLAYER01_USER, "TTosh03B_3");
    }

    VictoryPanelAddAchievement("TTosh03B_1");
    VictoryPanelAddAchievement("TTosh03B_2");
    VictoryPanelAddAchievement("TTosh03B_3");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/A1283E14"), IntToText(libNtve_gf_UnitGetPropertyKills(gv_nova, c_unitPropCurrent)));
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/FC30DF85"), IntToText(gv_dominationKills));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/39E7F78C"), IntToText(gv_snipeKills));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/38D02A8B"), (IntToText(gv_nukeLaunchCount) + StringExternal("Param/Value/7A4EDD0F") + StringExternal("Param/Value/DD7F0816")));
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/3875E800"), (IntToText(gv_objectiveKillSpectresKilled) + StringExternal("Param/Value/04556A22") + IntToText(gv_objectiveKillSpectresMax)));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/2A65CCB7"), libCamp_gf_FormatCredits(gv_bonusCreditsEarned, true));
    libCamp_gf_EndCampaignMission(gv_pLAYER01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Nova Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatNovaDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((EventUnit() == gv_nova))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/73F8163F"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatNovaDead_Init () {
    gt_DefeatNovaDead = TriggerCreate("gt_DefeatNovaDead_Func");
    TriggerAddEventUnitDied(gt_DefeatNovaDead, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Nova Stranded on P2
//--------------------------------------------------------------------------------------------------
bool gt_DefeatNovaStrandedonP2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_platform == 2))) {
            return false;
        }

        if (!((TechTreeUnitCount(gv_pLAYER01_USER, "Raven", c_techCountCompleteOnly) == 0))) {
            return false;
        }

        if (!((TechTreeUnitCount(gv_pLAYER01_USER, "Reaper", c_techCountCompleteOnly) == 0))) {
            return false;
        }

        if (!((gv_p2NighthawkReplaced == true))) {
            return false;
        }

        if (!((gv_p2ReapersReplaced == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_nova) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_p2GateControl) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/6FD1B348"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatNovaStrandedonP2_Init () {
    gt_DefeatNovaStrandedonP2 = TriggerCreate("gt_DefeatNovaStrandedonP2_Func");
    TriggerAddEventTimePeriodic(gt_DefeatNovaStrandedonP2, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_EndCampaignMission(gv_pLAYER01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    libCamp_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveCreate(StringExternal("Param/Value/820914DC"), StringExternal("Param/Value/7F9AF8BD"), c_objectiveStateActive, true);
    gv_objectiveDestroyMineralDepot = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TTosh03BObjective1, ObjectiveLastCreated(), StringExternal("Param/Value/B38A5274"));
    Wait(1.0, c_timeReal);
    ObjectiveCreate(StringExternal("Param/Value/16D72A28"), StringExternal("Param/Value/BCE76B36"), c_objectiveStateActive, true);
    gv_objectiveDestroyTerrazineRefinery = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TTosh03BObjective2, ObjectiveLastCreated(), StringExternal("Param/Value/98A370E5"));
    Wait(1.0, c_timeReal);
    ObjectiveCreate(StringExternal("Param/Value/7ED3A1C9"), StringExternal("Param/Value/526417E1"), c_objectiveStateActive, true);
    gv_objectiveDestroyPsiIndoctrinator = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TTosh03BObjective3, ObjectiveLastCreated(), StringExternal("Param/Value/E1C42939"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyCreate_Init () {
    gt_ObjectiveDestroyCreate = TriggerCreate("gt_ObjectiveDestroyCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Discover Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyDiscoverQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroyCreate, true, true);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyDiscoverQ_Init () {
    gt_ObjectiveDestroyDiscoverQ = TriggerCreate("gt_ObjectiveDestroyDiscoverQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Update Mineral Depot Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyUpdateMineralDepotQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroyCreate, true, true);
    ObjectiveSetState(gv_objectiveDestroyMineralDepot, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyUpdateMineralDepotQ_Init () {
    gt_ObjectiveDestroyUpdateMineralDepotQ = TriggerCreate("gt_ObjectiveDestroyUpdateMineralDepotQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Update Terrazine Refinery Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyUpdateTerrazineRefineryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroyCreate, true, true);
    ObjectiveSetState(gv_objectiveDestroyMineralDepot, c_objectiveStateCompleted);
    ObjectiveSetState(gv_objectiveDestroyTerrazineRefinery, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyUpdateTerrazineRefineryQ_Init () {
    gt_ObjectiveDestroyUpdateTerrazineRefineryQ = TriggerCreate("gt_ObjectiveDestroyUpdateTerrazineRefineryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyCreate, true, true);
    ObjectiveSetState(gv_objectiveDestroyMineralDepot, c_objectiveStateCompleted);
    ObjectiveSetState(gv_objectiveDestroyTerrazineRefinery, c_objectiveStateCompleted);
    ObjectiveSetState(gv_objectiveDestroyPsiIndoctrinator, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyComplete_Init () {
    gt_ObjectiveDestroyComplete = TriggerCreate("gt_ObjectiveDestroyComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Survive Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurviveCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveCreate(StringExternal("Param/Value/6689C8DD"), StringExternal("Param/Value/EFF9976E"), c_objectiveStateActive, true);
    gv_objectiveNovaMustSurvive = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TTosh03BObjective5, ObjectiveLastCreated(), StringExternal("Param/Value/81AEF810"));
    Wait(1.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurviveCreate_Init () {
    gt_ObjectiveSurviveCreate = TriggerCreate("gt_ObjectiveSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Survive Discover Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurviveDiscoverQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveSurviveCreate, true, true);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurviveDiscoverQ_Init () {
    gt_ObjectiveSurviveDiscoverQ = TriggerCreate("gt_ObjectiveSurviveDiscoverQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Survive Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurviveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveSurviveCreate, true, true);
    ObjectiveSetState(gv_objectiveNovaMustSurvive, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurviveComplete_Init () {
    gt_ObjectiveSurviveComplete = TriggerCreate("gt_ObjectiveSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Spectres Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillSpectresCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveCreate(StringToText(""), StringExternal("Param/Value/7518EA21"), c_objectiveStateActive, false);
    gv_objectiveKillSpectres = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TTosh03BObjective4, ObjectiveLastCreated(), StringExternal("Param/Value/59F4E201"));
    TriggerExecute(gt_ObjectiveKillSpectresUpdate, true, false);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_PlatformSpectresBoardCreate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillSpectresCreate_Init () {
    gt_ObjectiveKillSpectresCreate = TriggerCreate("gt_ObjectiveKillSpectresCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Spectres Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillSpectresUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveSetName(gv_objectiveKillSpectres, (StringExternal("Param/Value/37E0F123") + IntToText(gv_objectiveKillSpectresKilled) + StringExternal("Param/Value/3FB85465") + IntToText(gv_objectiveKillSpectresMax) + StringExternal("Param/Value/D942C757") + StringExternal("Param/Value/C2F32F2D")));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillSpectresUpdate_Init () {
    gt_ObjectiveKillSpectresUpdate = TriggerCreate("gt_ObjectiveKillSpectresUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Spectres Discover Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillSpectresDiscoverQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveKillSpectresCreate, true, false);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillSpectresDiscoverQ_Init () {
    gt_ObjectiveKillSpectresDiscoverQ = TriggerCreate("gt_ObjectiveKillSpectresDiscoverQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Spectres Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillSpectresCompleteQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveKillSpectresCreate, true, false);
    BoardDestroy(gv_platformSpectresBOARD);
    ObjectiveSetState(gv_objectiveKillSpectres, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillSpectresCompleteQ_Init () {
    gt_ObjectiveKillSpectresCompleteQ = TriggerCreate("gt_ObjectiveKillSpectresCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_StartGameQ);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    gv_inCinematic = true;
    gv_gameOver = true;
    UnitPauseAll(true);
    AITimePause(true);
    GameTimeOfDayPause(true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_ResetNova, true, false);
    RegionPlayableMapSet(RegionEntireMap());
    UnitClearSelection(gv_pLAYER01_USER);
    gf_HideUnitGroup(true, gv_p1Units);
    gf_HideUnitGroup(true, gv_p2Units);
    gf_HideUnitGroup(true, gv_p3Units);
    libNtve_gf_CreateUnitsAtPoint2(1, "Bunker", c_unitCreateIgnorePlacement, gv_pLAYER02_TOSH, RegionGetCenter(RegionFromId(54)));
    UnitCargoCreate(UnitLastCreated(), "Marine", 3);
    libNtve_gf_CreateUnitsAtPoint2(1, "Bunker", c_unitCreateIgnorePlacement, gv_pLAYER02_TOSH, RegionGetCenter(RegionFromId(58)));
    UnitCargoCreate(UnitLastCreated(), "Marine", 3);
    libNtve_gf_CreateUnitsAtPoint2(1, "Bunker", c_unitCreateIgnorePlacement, gv_pLAYER02_TOSH, RegionGetCenter(RegionFromId(59)));
    UnitCargoCreate(UnitLastCreated(), "Marine", 3);
    libNtve_gf_CreateUnitsAtPoint2(1, "Hellion", 0, gv_pLAYER02_TOSH, PointFromId(406));
    libNtve_gf_CreateUnitsAtPoint2(1, "Hellion", 0, gv_pLAYER02_TOSH, PointFromId(407));
    gf_HideUnitGroup(false, gv_p1StartingTroopsA);
    gf_HideUnitGroup(false, gv_p1StartingTroopsB);
    TriggerExecute(gt_BriefingScene00AvernusStation, true, true);
    TriggerExecute(gt_BriefingScene01JoriumStockpile, true, true);
    TriggerExecute(gt_BriefingScene02TerrazineTanks, true, true);
    TriggerExecute(gt_BriefingScene03PsiIndoctrinator, true, true);
    TriggerExecute(gt_BriefingScene04Defenses, true, true);
    TriggerExecute(gt_BriefingScene05NukePrep, true, true);
    TriggerExecute(gt_BriefingScene06NukeLaunch, true, true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UnitPauseAll(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00 - Avernus Station
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00AvernusStation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(136), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(112), 10.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_TTosh03B_00");
    // Transmission - SoundLink("TTosh03BBriefingRaynor00001", -1)
    SoundPlay(SoundLink("TTosh03BBriefingRaynor00001", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTosh03BBriefingRaynor00001", 0))), c_timeReal);
    // Transmission - SoundLink("TTosh03BBriefingNova00002", -1)
    SoundPlay(SoundLink("TTosh03BBriefingNova00002", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTosh03BBriefingNova00002", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh03BBriefingRaynor00001", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh03BBriefingNova00002", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00AvernusStation_Init () {
    gt_BriefingScene00AvernusStation = TriggerCreate("gt_BriefingScene00AvernusStation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01 - Jorium Stockpile
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01JoriumStockpile_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(348), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(347), 5.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_TTosh03B_01");
    libNtve_gf_AttachModelToUnit(UnitFromId(235), "BriefingUnitSelectLargeRed", "Ref_Center");
    libNtve_gf_PauseUnit(gv_p1Spectre2, false);
    UnitSetPosition(gv_p1Spectre2, PointFromId(372), false);
    UnitIssueOrder(gv_p1Spectre2, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(290)), c_orderQueueReplace);
    // Transmission - SoundLink("TTosh03BBriefingNova00003", -1)
    SoundPlay(SoundLink("TTosh03BBriefingNova00003", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTosh03BBriefingNova00003", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh03BBriefingNova00003", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01JoriumStockpile_Init () {
    gt_BriefingScene01JoriumStockpile = TriggerCreate("gt_BriefingScene01JoriumStockpile_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 02 - Terrazine Tanks
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene02TerrazineTanks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(60), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(101), 5.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_TTosh03B_02");
    libNtve_gf_AttachModelToUnit(UnitFromId(96), "BriefingUnitSelectLargeRed", "Ref_Target");
    SoundPlay(SoundLink("TTosh03BBriefingNova00004", 0), PlayerGroupAll(), 100.0, 0.0);
    // Transmission - SoundLink("TTosh03BBriefingNova00004", -1)
    Wait((1.0 * SoundLengthSync(SoundLink("TTosh03BBriefingNova00004", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh03BBriefingNova00004", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene02TerrazineTanks_Init () {
    gt_BriefingScene02TerrazineTanks = TriggerCreate("gt_BriefingScene02TerrazineTanks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 03 - Psi Indoctrinator
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene03PsiIndoctrinator_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(109), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(108), 10.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_TTosh03B_03");
    libNtve_gf_AttachModelToUnit(UnitFromId(269), "BriefingUnitSelectLargeRed", "Ref_Center");
    // Transmission - SoundLink("TTosh03BBriefingNova00005", -1)
    SoundPlay(SoundLink("TTosh03BBriefingNova00005", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTosh03BBriefingNova00005", 0))), c_timeReal);
    // Transmission - SoundLink("TTosh03BBriefingRaynor00006", -1)
    SoundPlay(SoundLink("TTosh03BBriefingRaynor00006", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTosh03BBriefingRaynor00006", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh03BBriefingNova00005", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh03BBriefingRaynor00006", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene03PsiIndoctrinator_Init () {
    gt_BriefingScene03PsiIndoctrinator = TriggerCreate("gt_BriefingScene03PsiIndoctrinator_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 04 - Defenses
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene04Defenses_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(137), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(234), 18.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_TTosh03B_04");
    // Transmission - SoundLink("TTosh03BBriefingNova00007", -1)
    SoundPlay(SoundLink("TTosh03BBriefingNova00007", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTosh03BBriefingNova00007", 0))), c_timeReal);
    // Transmission - SoundLink("TTosh03BBriefingRaynor00008", -1)
    SoundPlay(SoundLink("TTosh03BBriefingRaynor00008", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTosh03BBriefingRaynor00008", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh03BBriefingNova00007", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh03BBriefingRaynor00008", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene04Defenses_Init () {
    gt_BriefingScene04Defenses = TriggerCreate("gt_BriefingScene04Defenses_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 05 - Nuke Prep
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene05NukePrep_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingNukeActivity1, true, false);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(1178), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(1179), 7.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_TTosh03B_05");
    // Transmission - SoundLink("TTosh03BBriefingNova00009", -1)
    SoundPlay(SoundLink("TTosh03BBriefingNova00009", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTosh03BBriefingNova00009", 0))), c_timeReal);
    Wait(3.0, c_timeGame);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh03BBriefingNova00009", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene05NukePrep_Init () {
    gt_BriefingScene05NukePrep = TriggerCreate("gt_BriefingScene05NukePrep_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 06 - Nuke Launch
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene06NukeLaunch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingNukeActivity2, true, false);
    Wait(7.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(361), 0.0, -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(362), 10.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_TTosh03B_06");
    Wait(3.0, c_timeGame);
    // Transmission - SoundLink("TTosh03BBriefingNova00012", -1)
    SoundPlay(SoundLink("TTosh03BBriefingNova00012", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("TTosh03BBriefingNova00012", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTosh03BBriefingNova00012", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene06NukeLaunch_Init () {
    gt_BriefingScene06NukeLaunch = TriggerCreate("gt_BriefingScene06NukeLaunch_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Nuke Activity 1
//--------------------------------------------------------------------------------------------------
bool gt_BriefingNukeActivity1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_snipeTarget;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeAbilityAllow(gv_pLAYER01_USER, AbilityCommand("NovaSnipe", 0), true);
    gf_ArmSilo(UnitFromId(188));
    UnitSetPosition(gv_nova, PointFromId(285), false);
    UnitSetFacing(gv_nova, PointGetFacing(PointFromId(285)), 0.0);
    libNtve_gf_PauseUnit(gv_nova, false);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER02_TOSH, PointFromId(236));
    lv_snipeTarget = UnitLastCreated();
    UnitIssueOrder(gv_nova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(4)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(gv_nova, OrderTargetingUnit(AbilityCommand("NovaSnipe", 0), lv_snipeTarget), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(gv_nova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(4)), c_orderQueueReplace);
    UnitIssueOrder(gv_nova, OrderTargetingPoint(AbilityCommand("HeroNuclearStrike", 0), PointFromId(53)), c_orderQueueAddToEnd);
    Wait(8.0, c_timeGame);
    UnitIssueOrder(gv_nova, Order(AbilityCommand("HeroNuclearStrike", 1)), c_orderQueueReplace);
    libNtve_gf_PauseUnit(gv_nova, true);
    Wait(1.0, c_timeGame);
    libNtve_gf_PauseUnit(gv_nova, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingNukeActivity1_Init () {
    gt_BriefingNukeActivity1 = TriggerCreate("gt_BriefingNukeActivity1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Nuke Activity 2
//--------------------------------------------------------------------------------------------------
bool gt_BriefingNukeActivity2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0BB40C82_g;
    int auto0BB40C82_u;
    unit auto0BB40C82_var;
    unitgroup auto51D699B1_g;
    int auto51D699B1_u;
    unit auto51D699B1_var;
    unitgroup autoA9EA32F7_g;
    int autoA9EA32F7_u;
    unit autoA9EA32F7_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PauseUnit(gv_nova, false);
    UnitIssueOrder(gv_nova, Order(AbilityCommand("HeroNuclearStrike", 1)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    TriggerStop(gt_BriefingNukeActivity1);
    gf_ArmSilo(UnitFromId(188));
    Wait(1.0, c_timeGame);
    UnitSetPosition(gv_nova, PointFromId(4), false);
    UnitSetFacing(gv_nova, PointGetFacing(PointFromId(285)), 0.0);
    libNtve_gf_PauseUnit(gv_nova, false);
    UnitIssueOrder(gv_nova, OrderTargetingPoint(AbilityCommand("HeroNuclearStrike", 0), PointFromId(53)), c_orderQueueAddToEnd);
    Wait(8.3, c_timeGame);
    auto0BB40C82_g = UnitGroup("Bunker", c_playerAny, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0BB40C82_u = UnitGroupCount(auto0BB40C82_g, c_unitCountAll);
    for (;; auto0BB40C82_u -= 1) {
        auto0BB40C82_var = UnitGroupUnitFromEnd(auto0BB40C82_g, auto0BB40C82_u);
        if (auto0BB40C82_var == null) { break; }
        UnitIssueOrder(auto0BB40C82_var, Order(AbilityCommand("BunkerTransport", 1)), c_orderQueueReplace);
        Wait(0.2, c_timeGame);
    }
    Wait(0.5, c_timeGame);
    auto51D699B1_g = UnitGroup("Marine", c_playerAny, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto51D699B1_u = UnitGroupCount(auto51D699B1_g, c_unitCountAll);
    for (;; auto51D699B1_u -= 1) {
        auto51D699B1_var = UnitGroupUnitFromEnd(auto51D699B1_g, auto51D699B1_u);
        if (auto51D699B1_var == null) { break; }
        UnitIssueOrder(auto51D699B1_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(289)), c_orderQueueReplace);
    }
    autoA9EA32F7_g = UnitGroup("Hellion", c_playerAny, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA9EA32F7_u = UnitGroupCount(autoA9EA32F7_g, c_unitCountAll);
    for (;; autoA9EA32F7_u -= 1) {
        autoA9EA32F7_var = UnitGroupUnitFromEnd(autoA9EA32F7_g, autoA9EA32F7_u);
        if (autoA9EA32F7_var == null) { break; }
        UnitIssueOrder(autoA9EA32F7_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(289)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingNukeActivity2_Init () {
    gt_BriefingNukeActivity2 = TriggerCreate("gt_BriefingNukeActivity2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P1Done Q
//--------------------------------------------------------------------------------------------------
bool gt_P1DoneQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_P1DoneSetup, true, true);
    TriggerExecute(gt_P1DoneCinematic, true, true);
    TriggerExecute(gt_P1DoneCinematicEnd, true, true);
    TriggerExecute(gt_P1DoneCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P1DoneQ_Init () {
    gt_P1DoneQ = TriggerCreate("gt_P1DoneQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P1Done Setup
//--------------------------------------------------------------------------------------------------
bool gt_P1DoneSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto3878D2A0_g;
    int auto3878D2A0_u;
    unit auto3878D2A0_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_pLAYER01_USER);
    PlayerSetState(gv_pLAYER01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    auto3878D2A0_g = UnitGroup(null, c_playerAny, RegionFromId(69), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3878D2A0_u = UnitGroupCount(auto3878D2A0_g, c_unitCountAll);
    for (;; auto3878D2A0_u -= 1) {
        auto3878D2A0_var = UnitGroupUnitFromEnd(auto3878D2A0_g, auto3878D2A0_u);
        if (auto3878D2A0_var == null) { break; }
        if ((UnitHasBehavior(auto3878D2A0_var, "Domination") == true)) {
            libNtve_gf_ShowHideUnit(auto3878D2A0_var, false);
        }

    }
    UnitIssueOrder(gv_nova, Order(AbilityCommand("ReleaseMinion", 0)), c_orderQueueReplace);
    UnitPauseAll(true);
    gv_p1DoneOldUnits = UnitGroup(null, gv_pLAYER01_USER, RegionFromId(30), UnitFilter(0, 0, 0, 0), 0);
    UnitGroupRemove(gv_p1DoneOldUnits, gv_nova);
    gf_HideUnitGroup(false, gv_p1DoneOldUnits);
    libNtve_gf_MakeUnitInvulnerable(gv_nova, true);
    UnitBehaviorAdd(gv_nova, "SuppressCloak", gv_nova, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P1DoneSetup_Init () {
    gt_P1DoneSetup = TriggerCreate("gt_P1DoneSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P1Done Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_P1DoneCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(588), 0.0, -1, 10, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTosh03BMusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_p1DoneCompleted = false;
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh03BTosh00022", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh03BTosh00022", 0), c_transmissionDurationAdd, 0.0, true);
    TriggerExecute(gt_P1DoneSwitchtoPlatform2, true, false);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(349), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(350), 9.0, -1, 10, true);
    // Transmission - SoundLink("TTosh03BNova00001", 0)
    libCamp_gf_SendTransmissionCampaign(gv_nova, SoundLink("TTosh03BNova00001", 0), c_transmissionDurationAdd, 0.0, true);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(470), 0.0, -1, 10, true);
    // Transmission - SoundLink("TTosh03BNova00002", 0)
    libCamp_gf_SendTransmissionCampaign(gv_nova, SoundLink("TTosh03BNova00002", 0), c_transmissionDurationAdd, 0.0, false);
    libNtve_gf_PauseUnit(gv_nova, false);
    UnitSetFacing(gv_nova, 0.0, 0.0);
    libCamp_gf_CreateDropPod(libCamp_ge_DropPodRace_Terran, PointFromId(373), gv_novaGroup, true);
    Wait(3.0, c_timeReal);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gv_p1DoneCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P1DoneCinematic_Init () {
    gt_P1DoneCinematic = TriggerCreate("gt_P1DoneCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P1Done Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_P1DoneCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    if ((gv_p1DoneCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P1DoneCinematicEnd_Init () {
    gt_P1DoneCinematicEnd = TriggerCreate("gt_P1DoneCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P1Done Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_P1DoneCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto01DBE38B_g;
    int auto01DBE38B_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_P1DoneSwitchtoPlatform2, true, false);
    auto01DBE38B_g = gv_p1DoneOldUnits;
    auto01DBE38B_u = UnitGroupCount(auto01DBE38B_g, c_unitCountAll);
    for (;; auto01DBE38B_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto01DBE38B_g, auto01DBE38B_u);
        if (lv_indexUnit == null) { break; }
        UnitRemove(lv_indexUnit);
    }
    UnitPauseAll(false);
    TriggerEnable(gt_P1DoneDropPodExit, false);
    TriggerExecute(gt_ResetNova, true, false);
    UnitIssueOrder(gv_nova, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetPosition(gv_nova, PointFromId(750), false);
    UnitSetFacing(gv_nova, 0.0, 0.0);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER01_USER, c_playerStateXPGain, true);
    UnitSelect(gv_nova, gv_pLAYER01_USER, true);
    UIAlertPoint("Trigger", gv_pLAYER01_USER, StringToText(""), null, CameraInfoGetTarget(CameraInfoFromId(470)));
    CameraPan(gv_pLAYER01_USER, CameraInfoGetTarget(CameraInfoFromId(470)), 0.0, -1, 10, false);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_pLAYER01_USER, RegionEntireMap(), false, false);
    UnitBehaviorRemove(gv_nova, "SuppressCloak", 1);
    if ((gv_p1DoneCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/3B61038C"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P1DoneCleanup_Init () {
    gt_P1DoneCleanup = TriggerCreate("gt_P1DoneCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P1Done Switch to Platform 2
//--------------------------------------------------------------------------------------------------
bool gt_P1DoneSwitchtoPlatform2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9B7D66E9_g;
    int auto9B7D66E9_u;
    unit auto9B7D66E9_var;
    unitgroup auto04CE996C_g;
    int auto04CE996C_u;
    unit auto04CE996C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    RegionPlayableMapSet(RegionFromId(31));
    UIAlertClear(gv_pLAYER01_USER);
    gf_HideUnitGroup(false, gv_p1Units);
    gf_HideUnitGroup(true, gv_p2Units);
    auto9B7D66E9_g = UnitGroup(null, gv_pLAYER01_USER, RegionFromId(30), UnitFilter(0, 0, 0, 0), 0);
    auto9B7D66E9_u = UnitGroupCount(auto9B7D66E9_g, c_unitCountAll);
    for (;; auto9B7D66E9_u -= 1) {
        auto9B7D66E9_var = UnitGroupUnitFromEnd(auto9B7D66E9_g, auto9B7D66E9_u);
        if (auto9B7D66E9_var == null) { break; }
        if ((auto9B7D66E9_var != gv_nova)) {
            UnitRemove(auto9B7D66E9_var);
        }

    }
    auto04CE996C_g = UnitGroup(null, c_playerAny, RegionFromId(30), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto04CE996C_u = UnitGroupCount(auto04CE996C_g, c_unitCountAll);
    for (;; auto04CE996C_u -= 1) {
        auto04CE996C_var = UnitGroupUnitFromEnd(auto04CE996C_g, auto04CE996C_u);
        if (auto04CE996C_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto04CE996C_var, false);
    }
    gv_platform = 2;
    TriggerEnable(gt_P2LZGuardDominated, true);
    TriggerEnable(gt_P2LZGuardReleased, true);
    TriggerExecute(gt_SpectreBoardUpdater, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P1DoneSwitchtoPlatform2_Init () {
    gt_P1DoneSwitchtoPlatform2 = TriggerCreate("gt_P1DoneSwitchtoPlatform2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P1Done DropPod Exit
//--------------------------------------------------------------------------------------------------
bool gt_P1DoneDropPodExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_nova))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(gv_nova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(750)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P1DoneDropPodExit_Init () {
    gt_P1DoneDropPodExit = TriggerCreate("gt_P1DoneDropPodExit_Func");
    TriggerAddEventUnitRegion(gt_P1DoneDropPodExit, null, RegionFromId(40), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2Done Q
//--------------------------------------------------------------------------------------------------
bool gt_P2DoneQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_P2DoneSetup, true, true);
    TriggerExecute(gt_P2DoneCinematic, true, true);
    TriggerExecute(gt_P2DoneCinematicEnd, true, true);
    TriggerExecute(gt_P2DoneCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2DoneQ_Init () {
    gt_P2DoneQ = TriggerCreate("gt_P2DoneQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2Done Setup
//--------------------------------------------------------------------------------------------------
bool gt_P2DoneSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9FB3EEE1_g;
    int auto9FB3EEE1_u;
    unit auto9FB3EEE1_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_pLAYER01_USER);
    PlayerSetState(gv_pLAYER01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    auto9FB3EEE1_g = UnitGroup(null, c_playerAny, RegionFromId(69), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9FB3EEE1_u = UnitGroupCount(auto9FB3EEE1_g, c_unitCountAll);
    for (;; auto9FB3EEE1_u -= 1) {
        auto9FB3EEE1_var = UnitGroupUnitFromEnd(auto9FB3EEE1_g, auto9FB3EEE1_u);
        if (auto9FB3EEE1_var == null) { break; }
        if ((UnitHasBehavior(auto9FB3EEE1_var, "Domination") == true)) {
            libNtve_gf_ShowHideUnit(auto9FB3EEE1_var, false);
        }

    }
    UnitIssueOrder(gv_nova, Order(AbilityCommand("ReleaseMinion", 0)), c_orderQueueReplace);
    UnitPauseAll(true);
    gv_p2DoneOldUnits = UnitGroup(null, gv_pLAYER01_USER, RegionFromId(31), UnitFilter(0, 0, 0, 0), 0);
    UnitGroupRemove(gv_p2DoneOldUnits, gv_nova);
    UnitGroupRemove(gv_p2DoneOldUnits, gv_p2Silo);
    gf_HideUnitGroup(false, gv_p2DoneOldUnits);
    libNtve_gf_MakeUnitInvulnerable(gv_nova, true);
    UnitBehaviorAdd(gv_nova, "SuppressCloak", gv_nova, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2DoneSetup_Init () {
    gt_P2DoneSetup = TriggerCreate("gt_P2DoneSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2Done Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_P2DoneCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(751), 0.0, -1, 10, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTosh03BMusicEventC", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_p2DoneCompleted = false;
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh03BTosh00018", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh03BTosh00018", 0), c_transmissionDurationAdd, 0.0, true);
    TriggerExecute(gt_P2DoneSwitchtoPlatform3, true, false);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(351), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(352), 8.0, -1, 10, true);
    // Transmission - SoundLink("TTosh03BNova00003", 0)
    libCamp_gf_SendTransmissionCampaign(gv_nova, SoundLink("TTosh03BNova00003", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTosh03BRaynor00004", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh03BRaynor00004", 0), c_transmissionDurationAdd, 0.0, true);
    CameraPan(gv_pLAYER01_USER, PointFromId(753), 0.0, -1, 10, false);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    libNtve_gf_PauseUnit(gv_nova, false);
    UnitSetFacing(gv_nova, 315.0, 0.0);
    libCamp_gf_CreateDropPod(libCamp_ge_DropPodRace_Terran, PointFromId(394), gv_novaGroup, true);
    Wait(2.0, c_timeReal);
    gv_p2DoneCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2DoneCinematic_Init () {
    gt_P2DoneCinematic = TriggerCreate("gt_P2DoneCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2Done Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_P2DoneCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuratioin;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    if ((gv_p2DoneCompleted == true)) {
        lv_fadeDuratioin = 2.0;
    }
    else {
        lv_fadeDuratioin = 0.5;
    }
    CinematicFade(false, lv_fadeDuratioin, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2DoneCinematicEnd_Init () {
    gt_P2DoneCinematicEnd = TriggerCreate("gt_P2DoneCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2Done Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_P2DoneCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto7E91B2F4_g;
    int auto7E91B2F4_u;
    unit auto7E91B2F4_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_P2DoneSwitchtoPlatform3, true, false);
    auto7E91B2F4_g = gv_p2DoneOldUnits;
    auto7E91B2F4_u = UnitGroupCount(auto7E91B2F4_g, c_unitCountAll);
    for (;; auto7E91B2F4_u -= 1) {
        auto7E91B2F4_var = UnitGroupUnitFromEnd(auto7E91B2F4_g, auto7E91B2F4_u);
        if (auto7E91B2F4_var == null) { break; }
        if ((UnitGetType(auto7E91B2F4_var) != "NukeSiloNova")) {
            UnitRemove(auto7E91B2F4_var);
        }

    }
    UnitPauseAll(false);
    TriggerEnable(gt_P2DoneDropPodExit, false);
    TriggerExecute(gt_ResetNova, true, false);
    UnitIssueOrder(gv_nova, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetPosition(gv_nova, PointFromId(752), false);
    UnitSetFacing(gv_nova, 315.0, 0.0);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER01_USER, c_playerStateXPGain, true);
    UnitSelect(gv_nova, gv_pLAYER01_USER, true);
    UIAlertPoint("Trigger", gv_pLAYER01_USER, StringToText(""), null, PointFromId(753));
    CameraPan(gv_pLAYER01_USER, PointFromId(753), 0.0, -1, 10, false);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    TriggerExecute(gt_P3Activate, true, false);
    UnitBehaviorRemove(gv_nova, "SuppressCloak", 1);
    if ((gv_p2DoneCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_inCinematic = false;
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/D32C7444"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2DoneCleanup_Init () {
    gt_P2DoneCleanup = TriggerCreate("gt_P2DoneCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2Done Switch to Platform 3
//--------------------------------------------------------------------------------------------------
bool gt_P2DoneSwitchtoPlatform3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_lingerers;

    // Automatic Variable Declarations
    unitgroup auto03E9F47A_g;
    int auto03E9F47A_u;
    unit auto03E9F47A_var;
    unitgroup auto33479991_g;
    int auto33479991_u;
    unit auto33479991_var;

    // Variable Initialization
    lv_lingerers = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    VisExploreArea(gv_pLAYER01_USER, RegionFromId(31), false, false);
    RegionPlayableMapSet(RegionFromId(32));
    UIAlertClear(gv_pLAYER01_USER);
    gf_HideUnitGroup(false, gv_p2Units);
    gf_HideUnitGroup(true, gv_p3Units);
    lv_lingerers = UnitGroup(null, gv_pLAYER01_USER, RegionFromId(31), UnitFilter(0, 0, 0, 0), 0);
    UnitGroupRemove(lv_lingerers, gv_nova);
    auto03E9F47A_g = lv_lingerers;
    auto03E9F47A_u = UnitGroupCount(auto03E9F47A_g, c_unitCountAll);
    for (;; auto03E9F47A_u -= 1) {
        auto03E9F47A_var = UnitGroupUnitFromEnd(auto03E9F47A_g, auto03E9F47A_u);
        if (auto03E9F47A_var == null) { break; }
        if ((UnitGetType(auto03E9F47A_var) != "NukeSiloNova")) {
            UnitRemove(auto03E9F47A_var);
        }

    }
    auto33479991_g = UnitGroup(null, c_playerAny, RegionFromId(31), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto33479991_u = UnitGroupCount(auto33479991_g, c_unitCountAll);
    for (;; auto33479991_u -= 1) {
        auto33479991_var = UnitGroupUnitFromEnd(auto33479991_g, auto33479991_u);
        if (auto33479991_var == null) { break; }
        if ((UnitGetType(auto33479991_var) != "NukeSiloNova")) {
            libNtve_gf_ShowHideUnit(auto33479991_var, false);
        }

    }
    gv_platform = 3;
    TriggerExecute(gt_SpectreBoardUpdater, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2DoneSwitchtoPlatform3_Init () {
    gt_P2DoneSwitchtoPlatform3 = TriggerCreate("gt_P2DoneSwitchtoPlatform3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P2Done DropPod Exit
//--------------------------------------------------------------------------------------------------
bool gt_P2DoneDropPodExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_nova))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(gv_nova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(752)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P2DoneDropPodExit_Init () {
    gt_P2DoneDropPodExit = TriggerCreate("gt_P2DoneDropPodExit_Func");
    TriggerAddEventUnitRegion(gt_P2DoneDropPodExit, null, RegionFromId(41), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTosh03BMusicOutro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTosh03BTosh00026", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTosh03BTosh00026", 0), c_transmissionDurationAdd, 0.0, true);
    CinematicFade(false, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 2.0);
    Wait(2.0, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerExecute(gt_Victory, true, false);
    UnitPauseAll(true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04Music_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Objectives_Init();
    gt_Init08Help_Init();
    gt_ResetNova_Init();
    gt_IntroSequence_Init();
    gt_StartGameQ_Init();
    gt_TipStoryModeQ_Init();
    gt_NukeCameraShakeCount_Init();
    gt_PlatformSpectresBoardCreate_Init();
    gt_SpectreBoardUpdater_Init();
    gt_SpectreKilled_Init();
    gt_AddSpectreping_Init();
    gt_DominationEndSafety_Init();
    gt_P1Activate_Init();
    gt_P1DropshipExit_Init();
    gt_P1SnipeTripwire_Init();
    gt_P1SnipeCommentQ_Init();
    gt_P1SnipeTipQ_Init();
    gt_P1SnipeFlashKiller_Init();
    gt_P1GateCommentQ_Init();
    gt_P1GateOpenQ_Init();
    gt_P1GateReticleKiller_Init();
    gt_P1MiTuReveal_Init();
    gt_P1MiTuGuardsEngaged_Init();
    gt_P1MiTuHelpMeQ_Init();
    gt_P1TankReveal_Init();
    gt_P1TankWarningQ_Init();
    gt_P1DominationTipQ_Init();
    gt_P1DominationFlashInitiate_Init();
    gt_P1DominationFlashKiller_Init();
    gt_P1NighthawkSpot_Init();
    gt_P1NighthawkReturnQuiet_Init();
    gt_P1NighthawkFlee_Init();
    gt_P1SpectreWarningQ_Init();
    gt_P1Spec2Reveal_Init();
    gt_P1Spec2powers_Init();
    gt_P1ObjectiveDesignator_Init();
    gt_P1Designatorremover_Init();
    gt_P1MineralDepotDestroyed_Init();
    gt_P2SearchCrewQ_Init();
    gt_P2DelayedRavenMovementBrutal_Init();
    gt_P2SearchCrewCombat_Init();
    gt_P2RavenAttacked_Init();
    gt_P2RavenSkipped_Init();
    gt_P2RavenFlee_Init();
    gt_P2LZGuardDominated_Init();
    gt_P2LZGuardReleased_Init();
    gt_P2LZVikingsLand_Init();
    gt_P2LZGuardsReturn_Init();
    gt_P2LZGuardsDead_Init();
    gt_P2LZOwnerChange_Init();
    gt_P2LZSecureLinesQ_Init();
    gt_P2LZDropshipsArrive_Init();
    gt_P2LZDropshipExit_Init();
    gt_P2BackupNighthawkQ_Init();
    gt_P2BackupNightawkEntrance_Init();
    gt_P2BackupReapersQ_Init();
    gt_P2BackupReapersEntrance_Init();
    gt_P2GateControlDesignator_Init();
    gt_P2GateReticleKiller_Init();
    gt_P2GateOpenQ_Init();
    gt_P2BansheeCloak_Init();
    gt_P2SiloTipQ_Init();
    gt_P2SiloHackedQ_Init();
    gt_P2NukeA_Init();
    gt_P2NukeB_Init();
    gt_P2NukeC_Init();
    gt_P2NukeTauntQ_Init();
    gt_P2WestSpectrepowers_Init();
    gt_P2EndReveal_Init();
    gt_P2ObjectiveDesignator_Init();
    gt_P2Designatorremover_Init();
    gt_P2TerrazineRefineryDestroyed_Init();
    gt_P3Activate_Init();
    gt_P3SpawnPlayerUnitsQ_Init();
    gt_P3Leashes_Init();
    gt_P3SouthViking_Init();
    gt_P3NorthViking_Init();
    gt_P3SouthRavenDrone_Init();
    gt_P3SouthRavenTurrets_Init();
    gt_P3RavenPatroller_Init();
    gt_P3CentralSpectrepowers_Init();
    gt_P3UltraRawr_Init();
    gt_P3BrittleUltraliskBarriers_Init();
    gt_P3ThorDominated_Init();
    gt_P3ThorReleased_Init();
    gt_P3ThorKilled_Init();
    gt_P3SiloAHackedQ_Init();
    gt_P3NukeA_Init();
    gt_P3NukeB_Init();
    gt_P3PostNukerApowers_Init();
    gt_P3PostNukerBpowers_Init();
    gt_P3NukeTauntQ_Init();
    gt_P3ObjectiveDesignator_Init();
    gt_P3Designatorremover_Init();
    gt_P3EndReveal_Init();
    gt_P3EndNukeCommentQ_Init();
    gt_NukeLaunched_Init();
    gt_NovaSnipeKills_Init();
    gt_DominationCast_Init();
    gt_DominatedKills_Init();
    gt_SpectreKillsByReapers_Init();
    gt_VictoryPsiIndoctrinatorDestroyed_Init();
    gt_Victory_Init();
    gt_DefeatNovaDead_Init();
    gt_DefeatNovaStrandedonP2_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_ObjectiveDestroyCreate_Init();
    gt_ObjectiveDestroyDiscoverQ_Init();
    gt_ObjectiveDestroyUpdateMineralDepotQ_Init();
    gt_ObjectiveDestroyUpdateTerrazineRefineryQ_Init();
    gt_ObjectiveDestroyComplete_Init();
    gt_ObjectiveSurviveCreate_Init();
    gt_ObjectiveSurviveDiscoverQ_Init();
    gt_ObjectiveSurviveComplete_Init();
    gt_ObjectiveKillSpectresCreate_Init();
    gt_ObjectiveKillSpectresUpdate_Init();
    gt_ObjectiveKillSpectresDiscoverQ_Init();
    gt_ObjectiveKillSpectresCompleteQ_Init();
    gt_BriefingQ_Init();
    gt_BriefingScene00AvernusStation_Init();
    gt_BriefingScene01JoriumStockpile_Init();
    gt_BriefingScene02TerrazineTanks_Init();
    gt_BriefingScene03PsiIndoctrinator_Init();
    gt_BriefingScene04Defenses_Init();
    gt_BriefingScene05NukePrep_Init();
    gt_BriefingScene06NukeLaunch_Init();
    gt_BriefingNukeActivity1_Init();
    gt_BriefingNukeActivity2_Init();
    gt_P1DoneQ_Init();
    gt_P1DoneSetup_Init();
    gt_P1DoneCinematic_Init();
    gt_P1DoneCinematicEnd_Init();
    gt_P1DoneCleanup_Init();
    gt_P1DoneSwitchtoPlatform2_Init();
    gt_P1DoneDropPodExit_Init();
    gt_P2DoneQ_Init();
    gt_P2DoneSetup_Init();
    gt_P2DoneCinematic_Init();
    gt_P2DoneCinematicEnd_Init();
    gt_P2DoneCleanup_Init();
    gt_P2DoneSwitchtoPlatform3_Init();
    gt_P2DoneDropPodExit_Init();
    gt_VictoryQ_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
