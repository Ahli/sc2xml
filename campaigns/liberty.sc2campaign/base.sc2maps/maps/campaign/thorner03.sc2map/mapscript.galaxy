//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Engine of Destruction
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/CampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libCamp_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_p01_USER = 1;
const int gv_p02_TYCHUS = 2;
const int gv_p03_DOMINION_WAREHOUSE = 3;
const int gv_p04_DOMINION_INFANTRY_A = 4;
const int gv_p05_DOMINION_FACTORY = 5;
const int gv_p06_DOMINION_STARPORT_A = 6;
const int gv_p07_DOMINION_STARPORT_B = 7;
const int gv_p08_DOMINION_INFANTRY_B = 8;
const int gv_p10_DOMINION_LOKI = 10;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_inCinematic;
unitgroup gv_raynorsRaidingForce;
playergroup gv_dominionEnemyGroup;
unit gv_odin;
unitgroup gv_warehouse1Bullies;
bool gv_initialOrderGiven;
unitgroup gv_warehouseDominion;
int gv_odinPing;
int gv_odinBossBar;
int gv_odinAIPlayerTarget;
bool gv_odinRepairedOnAdvanced;
fixed gv_odinCurrentHealth;
actor gv_tippedDetectorPing;
unit gv_tippedDetectorUnit;
unit gv_battlecruiser1;
unit gv_battlecruiser2;
int gv_battlecruiserPing1;
int gv_battlecruiserPing2;
bool gv_baseDestroyedP04;
bool gv_odinDoneWithP04;
bool gv_baseDestroyedP08;
bool gv_odinDoneWithP08;
bool gv_baseDestroyedP05;
bool gv_odinDoneWithP05;
bool gv_baseDestroyedP06;
int gv_barrageIncrement;
int gv_yamatoTransmission;
bool gv_achievementOdinHealthBelow30Percent;
fixed gv_odinLowestHealth;
fixed gv_sCVHealingPerformedOnOdin;
int gv_objectiveStealTheOdin;
int gv_objectiveTychusMustSurvive;
int gv_objectiveDestroyDominionBases;
int gv_objectiveOdinMustSurvive;
int gv_objectiveDestroyDominionBasesQuota;
int gv_objectiveDestroyDominionBasesCurrent;
int gv_objectiveDestroytheLoki;
int gv_objectiveDevourerSamples;
int gv_devourerSamplesFound;
int gv_devourerSamplesTotal;
unit gv_briefingTychus;
bool gv_midCinematicCompleted;
unitgroup gv_midGameActors;
bool gv_victoryCinematicCompleted;
unitgroup gv_victoryHiddenUnitGroup;

void InitGlobals () {
    gv_raynorsRaidingForce = UnitGroup(null, gv_p01_USER, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_dominionEnemyGroup = PlayerGroupEmpty();
    gv_warehouse1Bullies = UnitGroup(null, gv_p03_DOMINION_WAREHOUSE, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_warehouseDominion = UnitGroup(null, gv_p03_DOMINION_WAREHOUSE, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_barrageIncrement = 1;
    gv_yamatoTransmission = c_invalidTransmissionId;
    gv_odinLowestHealth = UnitGetPropertyFixed(UnitFromId(2), c_unitPropLifeMax, c_unitPropNormal);
    gv_objectiveStealTheOdin = c_invalidObjectiveId;
    gv_objectiveTychusMustSurvive = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBases = c_invalidObjectiveId;
    gv_objectiveOdinMustSurvive = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBasesQuota = 5;
    gv_objectiveDestroytheLoki = c_invalidObjectiveId;
    gv_objectiveDevourerSamples = c_invalidObjectiveId;
    gv_midGameActors = UnitGroupEmpty();
    gv_victoryHiddenUnitGroup = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_ResearchForAllDominion (int lp_qty, string lp_upgrade);
void gf_AddWaypointToExpansion (int lp_p);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04Music;
trigger gt_Init05Environment;
trigger gt_Init06Difficulty;
trigger gt_Init07Help;
trigger gt_IntroSequence;
trigger gt_StartGameWarehouse;
trigger gt_WarehouseBullies1;
trigger gt_WarehouseBullies2;
trigger gt_WarehouseBullies3;
trigger gt_TychusMove1Q;
trigger gt_TychusMove2;
trigger gt_TychusMove3;
trigger gt_DefeatTychusDead;
trigger gt_DefeatEscortingUnitsDead;
trigger gt_VictoryWarehouseDudesKilled;
trigger gt_StartGameEscort;
trigger gt_CreateOdinBossBar;
trigger gt_OdinLowHealthWarning;
trigger gt_OdinHealthLowWarnPlayer;
trigger gt_OdinHealthLowSoundFX;
trigger gt_OdinGoGoGo;
trigger gt_BattlecruiserSpawnAttackOdin;
trigger gt_RemoveBattlecruiser1Ping;
trigger gt_RemoveBattlecruiser2Ping;
trigger gt_WraithIntro;
trigger gt_AfterWraithIntroQ;
trigger gt_OdinRampageBegins;
trigger gt_WraithGetsClosetoDetectorQ;
trigger gt_KillDetectorSpottedPing;
trigger gt_LokiActivates;
trigger gt_LokiDestroyed;
trigger gt_StartAI;
trigger gt_StartAIOverTime;
trigger gt_AIGiveMinerals;
trigger gt_AIGiveGas;
trigger gt_OdinApproachesP04Base;
trigger gt_P04AttackWaves;
trigger gt_P04BaseisDying;
trigger gt_P04BaseDestroyed;
trigger gt_OdinDonewithP04Base;
trigger gt_TychusBreakAfterP04Base;
trigger gt_OdinApproachesP08Base;
trigger gt_P08AttackWaves;
trigger gt_P08Baseisdying;
trigger gt_P08BaseDestroyed;
trigger gt_OdinDonewithP08Base;
trigger gt_SaveGameAfterP08Base;
trigger gt_OdinApproachesP05Base;
trigger gt_P05AttackWaves;
trigger gt_P05BaseisDying;
trigger gt_P05BaseDestroyed;
trigger gt_OdinDonewithP05Base;
trigger gt_OdinApproachesP06Base;
trigger gt_P06AttackWaves;
trigger gt_P06BaseisDying;
trigger gt_P06BaseDestroyed;
trigger gt_OdinDonewithP06Base;
trigger gt_SaveGameAfterP06Base;
trigger gt_OdinApproachesP07Base;
trigger gt_P07AttackWaves;
trigger gt_BattlecruisersYamatoOdin;
trigger gt_BattlecruiserKilledWhileTalking;
trigger gt_OdinNukesP07Q;
trigger gt_NukePan;
trigger gt_P07BaseDestroyed;
trigger gt_TransmissionWarehouseAutoTurretsQ;
trigger gt_TransmissionWarehouseBullies1AllDeadQ;
trigger gt_TransmissionFindCerebrateSamplesQ;
trigger gt_TransmissionBattlecruiserSpawnAttackOdinQ;
trigger gt_TransmissionFirstBarrageQ;
trigger gt_TransmissionFirstBarrageCompleteQ;
trigger gt_TransmissionBarrageQ;
trigger gt_TransmissionTychusNoticesRaynorsUnitsQ;
trigger gt_TransmissionTychusTakesBreakAfterP04BaseQ;
trigger gt_TransmissionTychusTakesBreakAfterP08BaseQ;
trigger gt_TransmissionTychusTakesBreakAfterP05BaseQ;
trigger gt_TransmissionTychusTakesBreakAfterP06BaseQ;
trigger gt_TransmissionOdinApproachesP04BaseQ;
trigger gt_TransmissionOdinChargesP08BaseQ;
trigger gt_TransmissionOdinChargesP05BaseQ;
trigger gt_TransmissionOdinChargesP06BaseQ;
trigger gt_TransmissionOdinChargesP07BaseQ;
trigger gt_TransmissionP04BaseDestroyedQ;
trigger gt_TransmissionP05BaseDestroyedQ;
trigger gt_TransmissionP06BaseDestroyedQ;
trigger gt_TransmissionYamatoTheOdinQQ;
trigger gt_CampaignTipsQ;
trigger gt_RepairOdinTipQ;
trigger gt_NewUnitWraithTipQ;
trigger gt_NewAbilityCloakTipQ;
trigger gt_AchievementOdinHealthBelow30Hard;
trigger gt_OdinHealthRepaired;
trigger gt_VictoryDestroyAllBasesComplete;
trigger gt_Victory;
trigger gt_DefeatBaseDead;
trigger gt_DefeatOdinDead;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_ObjectiveStealtheOdinCreateQ;
trigger gt_ObjectiveStealtheOdinComplete;
trigger gt_ObjectiveStealtheOdinFailedTychus;
trigger gt_ObjectiveDestroyDominionBasesCreateQ;
trigger gt_ObjectiveDestroyDominionBasesComplete;
trigger gt_ObjectiveDestroyDominionBasesUpdate;
trigger gt_ObjectiveDestroytheLokiCreateHidden;
trigger gt_ObjectiveDestroytheLokiComplete;
trigger gt_ObjectiveDestroytheLokiFailed;
trigger gt_ObjectiveDevourerSamplesCreateQ;
trigger gt_ObjectiveDevourerSampleUpdate;
trigger gt_ObjectiveCerebrateSamplesComplete;
trigger gt_RemoveDevourerTissueSample;
trigger gt_BriefingQ;
trigger gt_BriefingScene00;
trigger gt_BriefingScene00Tychus;
trigger gt_BriefingScene01;
trigger gt_BriefingScene01Base;
trigger gt_BriefingScene02;
trigger gt_BriefingScene03;
trigger gt_BriefingScene03OdinBuild;
trigger gt_BriefingScene04;
trigger gt_BriefingScene04Entry;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_MidValhallaDoorDamage;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_ResearchForAllDominion (int lp_qty, string lp_upgrade) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    playergroup auto8FDB1822_g;

    // Variable Initialization

    // Implementation
    auto8FDB1822_g = gv_dominionEnemyGroup;
    lv_p = -1;
    while (true) {
        lv_p = PlayerGroupNextPlayer(auto8FDB1822_g, lv_p);
        if (lv_p < 0) { break; }
        libCamp_gf_ResearchAIUpgrade(lp_qty, lp_upgrade, lv_p);
    }
}

void gf_AddWaypointToExpansion (int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGroupCount(UnitGroup("CommandCenter", gv_p01_USER, RegionFromId(31), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("CommandCenterFlying", gv_p01_USER, RegionFromId(31), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("OrbitalCommand", gv_p01_USER, RegionFromId(31), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("OrbitalCommandFlying", gv_p01_USER, RegionFromId(31), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("PlanetaryFortress", gv_p01_USER, RegionFromId(31), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
        if ((lp_p == gv_p05_DOMINION_FACTORY)) {
            AIAttackWaveAddWaypoint(lp_p, PointFromId(211), false);
        }

        AIAttackWaveAddWaypoint(lp_p, PointFromId(206), false);
    }

}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_LoadCampaignData(libCamp_ge_MapID_MapTHorner03);
    TriggerExecute(gt_Init01Technology, true, true);
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04Music, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulty, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    libCamp_gf_RegisterFootageRecording(gt_BriefingQ);
    libCamp_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_IntroSequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    UnitAbilityEnable(UnitFromId(2), "OdinBarrage", false);
    TechTreeUpgradeAddLevel(gv_p01_USER, "WraithCloak", 1);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("WraithCloak", 0), true);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("WraithCloak", 1), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto317FADF5_ae = 8;
    int auto317FADF5_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_p01_USER, gv_p02_TYCHUS, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p10_DOMINION_LOKI, libNtve_ge_AllianceSetting_Enemy);
    PlayerSetAlliance(gv_p01_USER, c_allianceIdPushable, gv_p02_TYCHUS, true);
    PlayerGroupAdd(gv_dominionEnemyGroup, gv_p03_DOMINION_WAREHOUSE);
    PlayerGroupAdd(gv_dominionEnemyGroup, gv_p04_DOMINION_INFANTRY_A);
    PlayerGroupAdd(gv_dominionEnemyGroup, gv_p05_DOMINION_FACTORY);
    PlayerGroupAdd(gv_dominionEnemyGroup, gv_p06_DOMINION_STARPORT_A);
    PlayerGroupAdd(gv_dominionEnemyGroup, gv_p07_DOMINION_STARPORT_B);
    PlayerGroupAdd(gv_dominionEnemyGroup, gv_p08_DOMINION_INFANTRY_B);
    PlayerGroupAdd(gv_dominionEnemyGroup, gv_p10_DOMINION_LOKI);
    libNtve_gf_SetAlliance(gv_p02_TYCHUS, gv_p03_DOMINION_WAREHOUSE, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p02_TYCHUS, gv_p04_DOMINION_INFANTRY_A, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p02_TYCHUS, gv_p05_DOMINION_FACTORY, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p02_TYCHUS, gv_p06_DOMINION_STARPORT_A, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p02_TYCHUS, gv_p07_DOMINION_STARPORT_B, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p02_TYCHUS, gv_p08_DOMINION_INFANTRY_B, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p02_TYCHUS, gv_p10_DOMINION_LOKI, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p03_DOMINION_WAREHOUSE, gv_p04_DOMINION_INFANTRY_A, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p03_DOMINION_WAREHOUSE, gv_p05_DOMINION_FACTORY, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p03_DOMINION_WAREHOUSE, gv_p06_DOMINION_STARPORT_A, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p03_DOMINION_WAREHOUSE, gv_p07_DOMINION_STARPORT_B, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p03_DOMINION_WAREHOUSE, gv_p08_DOMINION_INFANTRY_B, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p03_DOMINION_WAREHOUSE, gv_p10_DOMINION_LOKI, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p04_DOMINION_INFANTRY_A, gv_p05_DOMINION_FACTORY, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p04_DOMINION_INFANTRY_A, gv_p06_DOMINION_STARPORT_A, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p04_DOMINION_INFANTRY_A, gv_p07_DOMINION_STARPORT_B, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p04_DOMINION_INFANTRY_A, gv_p08_DOMINION_INFANTRY_B, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p04_DOMINION_INFANTRY_A, gv_p10_DOMINION_LOKI, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p05_DOMINION_FACTORY, gv_p06_DOMINION_STARPORT_A, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p05_DOMINION_FACTORY, gv_p07_DOMINION_STARPORT_B, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p05_DOMINION_FACTORY, gv_p08_DOMINION_INFANTRY_B, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p05_DOMINION_FACTORY, gv_p10_DOMINION_LOKI, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p06_DOMINION_STARPORT_A, gv_p07_DOMINION_STARPORT_B, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p06_DOMINION_STARPORT_A, gv_p08_DOMINION_INFANTRY_B, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p06_DOMINION_STARPORT_A, gv_p10_DOMINION_LOKI, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p07_DOMINION_STARPORT_B, gv_p08_DOMINION_INFANTRY_B, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p07_DOMINION_STARPORT_B, gv_p10_DOMINION_LOKI, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p08_DOMINION_INFANTRY_B, gv_p10_DOMINION_LOKI, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 300);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropVespene, c_playerPropOperSetTo, 400);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    auto317FADF5_var = 3;
    for ( ; auto317FADF5_var <= auto317FADF5_ae; auto317FADF5_var += 1 ) {
        PlayerSetColorIndex(auto317FADF5_var, 1, true);
        PlayerModifyPropertyInt(auto317FADF5_var, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
        PlayerModifyPropertyInt(auto317FADF5_var, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD9E2A2C7_g;
    int autoD9E2A2C7_u;
    unit autoD9E2A2C7_var;
    unitgroup autoA9B56296_g;
    int autoA9B56296_u;
    unit autoA9B56296_var;
    unitgroup autoA69D9812_g;
    int autoA69D9812_u;
    unit autoA69D9812_var;
    unitgroup auto089A9E6A_g;
    int auto089A9E6A_u;
    unit auto089A9E6A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoD9E2A2C7_g = UnitGroup("DevourerTissueSampleTube", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD9E2A2C7_u = UnitGroupCount(autoD9E2A2C7_g, c_unitCountAll);
    for (;; autoD9E2A2C7_u -= 1) {
        autoD9E2A2C7_var = UnitGroupUnitFromEnd(autoD9E2A2C7_g, autoD9E2A2C7_u);
        if (autoD9E2A2C7_var == null) { break; }
        UnitSetInfoText(autoD9E2A2C7_var, StringExternal("Param/Value/61DADD36"), StringToText(""), StringToText(""));
        gv_devourerSamplesTotal += 1;
        libNtve_gf_MakeUnitInvulnerable(autoD9E2A2C7_var, true);
    }
    UnitRemove(UnitFromId(1034));
    UnitRemove(UnitFromId(1035));
    UnitSetScale(UnitFromId(4), 115.0, 115.0, 115.0);
    gv_odin = UnitFromId(2);
    UnitIssueOrder(gv_odin, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_MakeUnitInvulnerable(gv_odin, true);
    libNtve_gf_PauseUnit(gv_odin, true);
    libNtve_gf_ShowHideUnit(gv_odin, false);
    UnitSetTeamColorIndex(gv_odin, 1);
    libNtve_gf_ShowHideUnit(UnitFromId(935), false);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(109)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(109), true);
    libNtve_gf_MakeUnitUncommandable(UnitFromId(109), true);
    UnitSetState(UnitFromId(109), c_unitStateCursorable, false);
    UnitSetState(UnitFromId(109), c_unitStateHighlightable, false);
    UnitSetState(UnitFromId(109), c_unitStateHighlighted, false);
    UnitSetState(UnitFromId(109), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(109), c_unitStateStatusBar, false);
    UnitSetState(UnitFromId(109), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(109), c_unitStateTooltipable, false);
    UnitCargoCreate(UnitFromId(80), "Marine", libNtve_gf_DifficultyValueInt(2, 3, 4, 4));
    UnitCargoCreate(UnitFromId(175), "Marine", libNtve_gf_DifficultyValueInt(2, 3, 4, 4));
    UnitCargoCreate(UnitFromId(7), "Marine", libNtve_gf_DifficultyValueInt(2, 3, 4, 4));
    UnitCargoCreate(UnitFromId(433), "Marine", libNtve_gf_DifficultyValueInt(2, 1, 2, 0));
    UnitCargoCreate(UnitFromId(433), "Marauder", libNtve_gf_DifficultyValueInt(0, 1, 1, 2));
    UnitCargoCreate(UnitFromId(218), "Marauder", libNtve_gf_DifficultyValueInt(1, 1, 2, 2));
    UnitCargoCreate(UnitFromId(694), "Marine", 4);
    UnitCargoCreate(UnitFromId(1007), "Marine", libNtve_gf_DifficultyValueInt(2, 3, 4, 4));
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(341), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(935), true);
    autoA9B56296_g = UnitGroup("Medic", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA9B56296_u = UnitGroupCount(autoA9B56296_g, c_unitCountAll);
    for (;; autoA9B56296_u -= 1) {
        autoA9B56296_var = UnitGroupUnitFromEnd(autoA9B56296_g, autoA9B56296_u);
        if (autoA9B56296_var == null) { break; }
        UnitSetPropertyFixed(autoA9B56296_var, c_unitPropEnergyPercent, 100.0);
    }
    autoA69D9812_g = UnitGroup(null, gv_p03_DOMINION_WAREHOUSE, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA69D9812_u = UnitGroupCount(autoA69D9812_g, c_unitCountAll);
    for (;; autoA69D9812_u -= 1) {
        autoA69D9812_var = UnitGroupUnitFromEnd(autoA69D9812_g, autoA69D9812_u);
        if (autoA69D9812_var == null) { break; }
        UnitIssueOrder(autoA69D9812_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    UnitIssueOrder(UnitFromId(713), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitSetPropertyFixed(UnitFromId(2218), c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(UnitFromId(2219), c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(UnitFromId(835), c_unitPropEnergyPercent, 100.0);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(835), true);
    UnitSetPropertyFixed(UnitFromId(739), c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(UnitFromId(8), c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(UnitFromId(738), c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(UnitFromId(292), c_unitPropEnergyPercent, 100.0);
    libNtve_gf_ShowHideUnit(UnitFromId(292), false);
    libNtve_gf_ShowHideUnit(UnitFromId(739), false);
    libNtve_gf_ShowHideUnit(UnitFromId(8), false);
    libNtve_gf_ShowHideUnit(UnitFromId(738), false);
    libNtve_gf_PauseUnit(UnitFromId(292), true);
    libNtve_gf_PauseUnit(UnitFromId(8), true);
    libNtve_gf_PauseUnit(UnitFromId(738), true);
    libNtve_gf_PauseUnit(UnitFromId(739), true);
    UnitIssueOrder(UnitFromId(2242), OrderSetAutoCast(AbilityCommand("Repair", 0), true), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(2243), OrderSetAutoCast(AbilityCommand("Repair", 0), true), c_orderQueueReplace);
    AISetUnitScriptControlled(UnitFromId(2243), false);
    AISetUnitScriptControlled(UnitFromId(2242), false);
    auto089A9E6A_g = UnitGroup(null, gv_p01_USER, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto089A9E6A_u = UnitGroupCount(auto089A9E6A_g, c_unitCountAll);
    for (;; auto089A9E6A_u -= 1) {
        auto089A9E6A_var = UnitGroupUnitFromEnd(auto089A9E6A_g, auto089A9E6A_u);
        if (auto089A9E6A_var == null) { break; }
        libNtve_gf_PauseUnit(auto089A9E6A_var, true);
        libNtve_gf_ShowHideUnit(auto089A9E6A_var, false);
    }
    UnitSetPropertyFixed(UnitFromId(503), c_unitPropLife, 800.0);
    UnitSetPropertyFixed(UnitFromId(503), c_unitPropLifeMax, 800.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init04Music_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner03MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner03MusicIntro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Music_Init () {
    gt_Init04Music = TriggerCreate("gt_Init04Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    GameSetLighting("Valhalla", 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulty
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulty_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoA1DF5919_val;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
        UnitSetPropertyFixed(UnitFromId(1014), c_unitPropLifeMax, 200.0);
        UnitSetPropertyFixed(UnitFromId(1006), c_unitPropLifeMax, 200.0);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 0) == 1)) {
        UnitSetPropertyFixed(UnitFromId(1014), c_unitPropLifeMax, 250.0);
        UnitSetPropertyFixed(UnitFromId(1006), c_unitPropLifeMax, 250.0);
    }

    UnitSetPropertyFixed(UnitFromId(1014), c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(UnitFromId(1006), c_unitPropLifePercent, 100.0);
    if ((libNtve_gf_DifficultyValueInt(1, 0, 0, 0) == 1)) {
        PlayerModifyPropertyInt(gv_p03_DOMINION_WAREHOUSE, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p04_DOMINION_INFANTRY_A, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p05_DOMINION_FACTORY, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p06_DOMINION_STARPORT_A, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p07_DOMINION_STARPORT_B, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p08_DOMINION_INFANTRY_B, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p10_DOMINION_LOKI, c_playerPropHandicap, c_playerPropOperSetTo, 50);
    }

    autoA1DF5919_val = PlayerDifficulty(gv_p01_USER);
    if (autoA1DF5919_val == 1) {
        UnitSetPropertyFixed(UnitFromId(835), c_unitPropLifeMax, 1000.0);
        UnitSetPropertyFixed(UnitFromId(835), c_unitPropLifePercent, 100.0);
    }
    else if (autoA1DF5919_val == 3) {
        TechTreeUpgradeAddLevel(gv_p04_DOMINION_INFANTRY_A, "TerranInfantryWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p08_DOMINION_INFANTRY_B, "TerranInfantryWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p08_DOMINION_INFANTRY_B, "TerranInfantryArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p05_DOMINION_FACTORY, "TerranInfantryWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p05_DOMINION_FACTORY, "TerranInfantryArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p05_DOMINION_FACTORY, "TerranVehicleWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p05_DOMINION_FACTORY, "TerranVehicleArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p06_DOMINION_STARPORT_A, "TerranInfantryWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p06_DOMINION_STARPORT_A, "TerranInfantryWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(gv_p06_DOMINION_STARPORT_A, "TerranInfantryArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p06_DOMINION_STARPORT_A, "TerranVehicleWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p06_DOMINION_STARPORT_A, "TerranVehicleWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(gv_p06_DOMINION_STARPORT_A, "TerranVehicleArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p06_DOMINION_STARPORT_A, "TerranShipWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p06_DOMINION_STARPORT_A, "TerranShipWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(gv_p06_DOMINION_STARPORT_A, "TerranShipArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p07_DOMINION_STARPORT_B, "YamatoCannon", 1);
        TechTreeUpgradeAddLevel(gv_p07_DOMINION_STARPORT_B, "TerranInfantryWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p07_DOMINION_STARPORT_B, "TerranInfantryWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(gv_p07_DOMINION_STARPORT_B, "TerranInfantryArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p07_DOMINION_STARPORT_B, "TerranVehicleWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p07_DOMINION_STARPORT_B, "TerranVehicleWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(gv_p07_DOMINION_STARPORT_B, "TerranVehicleArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p07_DOMINION_STARPORT_B, "TerranShipWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p07_DOMINION_STARPORT_B, "TerranShipWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(gv_p07_DOMINION_STARPORT_B, "TerranShipArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p03_DOMINION_WAREHOUSE, "TerranInfantryArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p03_DOMINION_WAREHOUSE, "TerranInfantryArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(gv_p03_DOMINION_WAREHOUSE, "TerranInfantryWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p03_DOMINION_WAREHOUSE, "TerranInfantryWeaponsLevel2", 1);
        UnitSetPropertyFixed(UnitFromId(835), c_unitPropLifeMax, 2000.0);
        UnitSetPropertyFixed(UnitFromId(835), c_unitPropLifePercent, 100.0);
    }
    else if (autoA1DF5919_val == 4) {
        TechTreeUpgradeAddLevel(gv_p04_DOMINION_INFANTRY_A, "TerranInfantryWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p04_DOMINION_INFANTRY_A, "TerranInfantryArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p08_DOMINION_INFANTRY_B, "TerranInfantryWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p08_DOMINION_INFANTRY_B, "TerranInfantryArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p05_DOMINION_FACTORY, "TerranInfantryWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p05_DOMINION_FACTORY, "TerranInfantryWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(gv_p05_DOMINION_FACTORY, "TerranInfantryArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p05_DOMINION_FACTORY, "TerranInfantryArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(gv_p05_DOMINION_FACTORY, "TerranVehicleWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p05_DOMINION_FACTORY, "TerranVehicleArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p06_DOMINION_STARPORT_A, "TerranInfantryWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p06_DOMINION_STARPORT_A, "TerranInfantryWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(gv_p06_DOMINION_STARPORT_A, "TerranInfantryArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p06_DOMINION_STARPORT_A, "TerranInfantryArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(gv_p06_DOMINION_STARPORT_A, "TerranVehicleWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p06_DOMINION_STARPORT_A, "TerranVehicleWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(gv_p06_DOMINION_STARPORT_A, "TerranVehicleArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p06_DOMINION_STARPORT_A, "TerranVehicleArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(gv_p06_DOMINION_STARPORT_A, "TerranShipWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p06_DOMINION_STARPORT_A, "TerranShipArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p07_DOMINION_STARPORT_B, "TerranInfantryWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p07_DOMINION_STARPORT_B, "TerranInfantryWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(gv_p07_DOMINION_STARPORT_B, "TerranInfantryWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(gv_p07_DOMINION_STARPORT_B, "TerranInfantryArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p07_DOMINION_STARPORT_B, "TerranInfantryArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(gv_p07_DOMINION_STARPORT_B, "TerranVehicleWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p07_DOMINION_STARPORT_B, "TerranVehicleWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(gv_p07_DOMINION_STARPORT_B, "TerranVehicleWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(gv_p07_DOMINION_STARPORT_B, "TerranVehicleArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p07_DOMINION_STARPORT_B, "TerranVehicleArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(gv_p07_DOMINION_STARPORT_B, "TerranShipWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p07_DOMINION_STARPORT_B, "TerranShipWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(gv_p07_DOMINION_STARPORT_B, "TerranShipWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(gv_p07_DOMINION_STARPORT_B, "TerranShipArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p07_DOMINION_STARPORT_B, "TerranShipArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(gv_p03_DOMINION_WAREHOUSE, "TerranInfantryArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p03_DOMINION_WAREHOUSE, "TerranInfantryArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(gv_p03_DOMINION_WAREHOUSE, "TerranInfantryArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(gv_p03_DOMINION_WAREHOUSE, "TerranInfantryWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_p03_DOMINION_WAREHOUSE, "TerranInfantryWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(gv_p03_DOMINION_WAREHOUSE, "TerranInfantryWeaponsLevel3", 1);
        UnitSetPropertyFixed(UnitFromId(835), c_unitPropLifeMax, 2500.0);
        UnitSetPropertyFixed(UnitFromId(835), c_unitPropLifePercent, 100.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulty_Init () {
    gt_Init06Difficulty = TriggerCreate("gt_Init06Difficulty_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_AddUnitTypeToUnitHelpPanel("SCV", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Marine", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Firebat", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Marauder", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Ghost", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Reaper", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("MissileTurret", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("PerditionTurret", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Diamondback", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Goliath", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SiegeTank", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Vulture", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Raven", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Medivac", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Banshee", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("VikingAssault", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Battlecruiser", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Loki", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("WarPig", false, gv_p01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("HelsAngelFighter", false, gv_p01_USER);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("SpartanCompany", false, gv_p01_USER);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("SiegeBreakerSieged", false, gv_p01_USER);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("DuskWing", false, gv_p01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Sequence
//--------------------------------------------------------------------------------------------------
bool gt_IntroSequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoBA160EAB_g;
    int autoBA160EAB_u;
    unit autoBA160EAB_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    autoBA160EAB_g = UnitGroup(null, gv_p03_DOMINION_WAREHOUSE, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBA160EAB_u = UnitGroupCount(autoBA160EAB_g, c_unitCountAll);
    for (;; autoBA160EAB_u -= 1) {
        autoBA160EAB_var = UnitGroupUnitFromEnd(autoBA160EAB_g, autoBA160EAB_u);
        if (autoBA160EAB_var == null) { break; }
        UnitBehaviorAdd(autoBA160EAB_var, "ScanRangeBonus", autoBA160EAB_var, 1);
    }
    UnitGroupSelect(UnitGroup(null, gv_p01_USER, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_p01_USER, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_p01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(966), 1.5);
    CinematicFade(true, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    PlayerPauseAllCooldowns(gv_p01_USER, true);
    PlayerPauseAllCharges(gv_p01_USER, true);
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/9E4D978B"), null, PointFromId(966));
    TriggerExecute(gt_StartGameWarehouse, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSequence_Init () {
    gt_IntroSequence = TriggerCreate("gt_IntroSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Warehouse
//--------------------------------------------------------------------------------------------------
bool gt_StartGameWarehouse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveStealtheOdinCreateQ, true, true);
    Wait(1.0, c_timeGame);
    if ((gv_initialOrderGiven == false)) {
        UnitIssueOrder(UnitFromId(4), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(155)), c_orderQueueReplace);
        SoundPlayOnUnit(SoundLink("THorner03BriefingTychus00019", -1), PlayerGroupAll(), UnitFromId(4), 0.0, 100.0, 0.0);
    }

    Wait(1.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDestroytheLokiCreateHidden, true, false);
    Wait(1.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDevourerSamplesCreateQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameWarehouse_Init () {
    gt_StartGameWarehouse = TriggerCreate("gt_StartGameWarehouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warehouse Bullies 1
//--------------------------------------------------------------------------------------------------
bool gt_WarehouseBullies1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1FE7BFD6_g;
    int auto1FE7BFD6_u;
    unit auto1FE7BFD6_var;
    unitgroup auto550403AC_g;
    int auto550403AC_u;
    unit auto550403AC_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTarget()) == gv_p03_DOMINION_WAREHOUSE))) {
            return false;
        }

        if (!((RegionContainsPoint(RegionFromId(7), UnitGetPosition(EventUnitTarget())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto1FE7BFD6_g = UnitGroup("Scientist", c_playerAny, RegionCircle(UnitGetPosition(EventUnitTarget()), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1FE7BFD6_u = UnitGroupCount(auto1FE7BFD6_g, c_unitCountAll);
    for (;; auto1FE7BFD6_u -= 1) {
        auto1FE7BFD6_var = UnitGroupUnitFromEnd(auto1FE7BFD6_g, auto1FE7BFD6_u);
        if (auto1FE7BFD6_var == null) { break; }
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(auto1FE7BFD6_var), c_animNameDefault, "Fidget Inferior", c_animFlagPlayForever, c_animTimeDefault);
    }
    auto550403AC_g = UnitGroup(null, gv_p03_DOMINION_WAREHOUSE, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto550403AC_u = UnitGroupCount(auto550403AC_g, c_unitCountAll);
    for (;; auto550403AC_u -= 1) {
        auto550403AC_var = UnitGroupUnitFromEnd(auto550403AC_g, auto550403AC_u);
        if (auto550403AC_var == null) { break; }
        UnitIssueOrder(auto550403AC_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(294)), c_orderQueueReplace);
    }
    Wait(2.0, c_timeGame);
    UnitIssueOrder(UnitFromId(138), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(294)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(5), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(294)), c_orderQueueReplace);
    Wait(3.0, c_timeGame);
    UnitIssueOrder(UnitFromId(291), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(294)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(674), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(294)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarehouseBullies1_Init () {
    gt_WarehouseBullies1 = TriggerCreate("gt_WarehouseBullies1_Func");
    TriggerAddEventUnitStartedAttack(gt_WarehouseBullies1, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warehouse Bullies 2
//--------------------------------------------------------------------------------------------------
bool gt_WarehouseBullies2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto32B93861_g;
    int auto32B93861_u;
    unit auto32B93861_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_p01_USER) || (UnitGetOwner(EventUnit()) == gv_p02_TYCHUS)))) {
            return false;
        }

        if (!(((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) || (UnitFilterMatch(EventUnit(), gv_p02_TYCHUS, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto32B93861_g = UnitGroup("Scientist", c_playerAny, RegionCircle(UnitGetPosition(EventUnitTarget()), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto32B93861_u = UnitGroupCount(auto32B93861_g, c_unitCountAll);
    for (;; auto32B93861_u -= 1) {
        auto32B93861_var = UnitGroupUnitFromEnd(auto32B93861_g, auto32B93861_u);
        if (auto32B93861_var == null) { break; }
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(auto32B93861_var), c_animNameDefault, "Fidget Inferior", c_animFlagPlayForever, c_animTimeDefault);
    }
    UnitSetOwner(UnitFromId(1006), gv_p03_DOMINION_WAREHOUSE, true);
    UnitSetOwner(UnitFromId(1014), gv_p03_DOMINION_WAREHOUSE, true);
    TriggerExecute(gt_TransmissionWarehouseAutoTurretsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarehouseBullies2_Init () {
    gt_WarehouseBullies2 = TriggerCreate("gt_WarehouseBullies2_Func");
    TriggerAddEventUnitRegion(gt_WarehouseBullies2, null, RegionFromId(17), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warehouse Bullies 3
//--------------------------------------------------------------------------------------------------
bool gt_WarehouseBullies3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9297DEB2_g;
    int auto9297DEB2_u;
    unit auto9297DEB2_var;
    unitgroup auto22DD70B6_g;
    int auto22DD70B6_u;
    unit auto22DD70B6_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTarget()) == gv_p03_DOMINION_WAREHOUSE))) {
            return false;
        }

        if (!((RegionContainsPoint(RegionFromId(9), UnitGetPosition(EventUnitTarget())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto9297DEB2_g = UnitGroup("Scientist", c_playerAny, RegionCircle(UnitGetPosition(EventUnitTarget()), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9297DEB2_u = UnitGroupCount(auto9297DEB2_g, c_unitCountAll);
    for (;; auto9297DEB2_u -= 1) {
        auto9297DEB2_var = UnitGroupUnitFromEnd(auto9297DEB2_g, auto9297DEB2_u);
        if (auto9297DEB2_var == null) { break; }
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(auto9297DEB2_var), c_animNameDefault, "Fidget Inferior", c_animFlagPlayForever, c_animTimeDefault);
    }
    auto22DD70B6_g = UnitGroup(null, gv_p03_DOMINION_WAREHOUSE, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto22DD70B6_u = UnitGroupCount(auto22DD70B6_g, c_unitCountAll);
    for (;; auto22DD70B6_u -= 1) {
        auto22DD70B6_var = UnitGroupUnitFromEnd(auto22DD70B6_g, auto22DD70B6_u);
        if (auto22DD70B6_var == null) { break; }
        UnitIssueOrder(auto22DD70B6_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(111)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarehouseBullies3_Init () {
    gt_WarehouseBullies3 = TriggerCreate("gt_WarehouseBullies3_Func");
    TriggerAddEventUnitStartedAttack(gt_WarehouseBullies3, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tychus Move 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_TychusMove1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_initialOrderGiven = true;
    UnitIssueOrder(UnitFromId(4), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(369)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(4), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(727)), c_orderQueueAddToEnd);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner03Tychus00030", -1)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(4), SoundLink("THorner03Tychus00030", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TychusMove1Q_Init () {
    gt_TychusMove1Q = TriggerCreate("gt_TychusMove1Q_Func");
    TriggerAddEventTimePeriodic(gt_TychusMove1Q, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tychus Move 2
//--------------------------------------------------------------------------------------------------
bool gt_TychusMove2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(4), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2240)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(4), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(734)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TychusMove2_Init () {
    gt_TychusMove2 = TriggerCreate("gt_TychusMove2_Func");
    TriggerAddEventTimePeriodic(gt_TychusMove2, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tychus Move 3
//--------------------------------------------------------------------------------------------------
bool gt_TychusMove3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(4), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(735)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TychusMove3_Init () {
    gt_TychusMove3 = TriggerCreate("gt_TychusMove3_Func");
    TriggerAddEventTimePeriodic(gt_TychusMove3, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Tychus Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatTychusDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((EventUnit() == UnitFromId(4)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/22D9DD50"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatTychusDead_Init () {
    gt_DefeatTychusDead = TriggerCreate("gt_DefeatTychusDead_Func");
    TriggerAddEventUnitDied(gt_DefeatTychusDead, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Escorting Units Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatEscortingUnitsDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_raynorsRaidingForce, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/A96CEBFB"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatEscortingUnitsDead_Init () {
    gt_DefeatEscortingUnitsDead = TriggerCreate("gt_DefeatEscortingUnitsDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatEscortingUnitsDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Warehouse Dudes Killed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryWarehouseDudesKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "TychusChaingun"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_DefeatEscortingUnitsDead, false);
    UnitKill(UnitFromId(1132));
    UnitSetPropertyFixed(UnitFromId(4), c_unitPropLifePercent, 100.0);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(4), true);
    TriggerExecute(gt_ObjectiveStealtheOdinComplete, true, true);
    TriggerExecute(gt_MidQ, true, false);
    TriggerStop(gt_WarehouseBullies3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryWarehouseDudesKilled_Init () {
    gt_VictoryWarehouseDudesKilled = TriggerCreate("gt_VictoryWarehouseDudesKilled_Func");
    TriggerAddEventUnitRegion(gt_VictoryWarehouseDudesKilled, null, RegionFromId(24), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Escort
//--------------------------------------------------------------------------------------------------
bool gt_StartGameEscort_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner03MusicAlt", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        TriggerEnable(gt_AchievementOdinHealthBelow30Hard, true);
    }

    UnitSetCustomValue(UnitFromId(2), 1, UnitGetPropertyFixed(UnitFromId(2), c_unitPropLifeMax, c_unitPropNormal));
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, true);
    PlayerPauseAllCooldowns(gv_p01_USER, false);
    PlayerPauseAllCharges(gv_p01_USER, false);
    gv_odinAIPlayerTarget = gv_p04_DOMINION_INFANTRY_A;
    TriggerExecute(gt_CreateOdinBossBar, true, false);
    PingCreate(PlayerGroupSingle(gv_p01_USER), "PingSimple", UnitGetPosition(UnitFromId(2)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/95837E29"));
    PingSetUnit(PingLastCreated(), UnitFromId(2));
    gv_odinPing = PingLastCreated();
    Wait(3.0, c_timeReal);
    AISetUnitForceMover(gv_odin, true);
    ObjectiveSetState(gv_objectiveStealTheOdin, c_objectiveStateHidden);
    ObjectiveSetState(gv_objectiveTychusMustSurvive, c_objectiveStateHidden);
    Wait(0.25, c_timeReal);
    TriggerExecute(gt_ObjectiveDestroyDominionBasesCreateQ, true, true);
    Wait(1.0, c_timeGame);
    ObjectiveShow(gv_objectiveDestroytheLoki, PlayerGroupAll(), true);
    Wait(29.0, c_timeGame);
    TriggerExecute(gt_BattlecruiserSpawnAttackOdin, true, false);
    Wait(30.0, c_timeGame);
    TriggerExecute(gt_CampaignTipsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameEscort_Init () {
    gt_StartGameEscort = TriggerCreate("gt_StartGameEscort_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Odin Boss Bar
//--------------------------------------------------------------------------------------------------
bool gt_CreateOdinBossBar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_DisplayBossBar(1, "Assets\\Textures\\btn-unit-terran-thor.dds", StringExternal("Param/Value/F6112D1D"), 100, PlayerGroupAll());
    gv_odinBossBar = 1;
    libNtve_gf_SetBossBarRace(gv_odinBossBar, libNtve_ge_BossBarRace_Terran, true);
    libNtve_gf_SetBossBarMaximumValue(gv_odinBossBar, FixedToInt(gv_odinCurrentHealth), true);
    libNtve_gf_SetBossBarCurrentValue(gv_odinBossBar, FixedToInt(UnitGetPropertyFixed(gv_odin, c_unitPropLife, c_unitPropCurrent)), true);
    libNtve_gf_SetBossBarBoss(gv_odinBossBar, UnitFromId(2), true);
    libNtve_gf_MoveBossBar(gv_odinBossBar, c_anchorTop, 0, 50);
    libNtve_gf_ShowHideBossBar(true, gv_odinBossBar);
    TriggerEnable(gt_OdinLowHealthWarning, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateOdinBossBar_Init () {
    gt_CreateOdinBossBar = TriggerCreate("gt_CreateOdinBossBar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Odin Low Health Warning
//--------------------------------------------------------------------------------------------------
bool gt_OdinLowHealthWarning_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_odin) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(gv_odin, c_unitPropLifePercent, c_unitPropCurrent) <= 30.0)) {
        PingSetColor(gv_odinPing, Color(100.00, 0.00, 0.00));
        TriggerExecute(gt_OdinHealthLowSoundFX, true, false);
        TriggerEnable(gt_OdinHealthLowWarnPlayer, true);
    }
    else {
        PingSetColor(gv_odinPing, Color(0.00, 100.00, 0.00));
        TriggerEnable(gt_OdinHealthLowWarnPlayer, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OdinLowHealthWarning_Init () {
    gt_OdinLowHealthWarning = TriggerCreate("gt_OdinLowHealthWarning_Func");
    TriggerEnable(gt_OdinLowHealthWarning, false);
    TriggerAddEventTimePeriodic(gt_OdinLowHealthWarning, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Odin Health Low - Warn Player
//--------------------------------------------------------------------------------------------------
bool gt_OdinHealthLowWarnPlayer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/00C70090"));
    Wait(0.75, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OdinHealthLowWarnPlayer_Init () {
    gt_OdinHealthLowWarnPlayer = TriggerCreate("gt_OdinHealthLowWarnPlayer_Func");
    TriggerEnable(gt_OdinHealthLowWarnPlayer, false);
    TriggerAddEventTimePeriodic(gt_OdinHealthLowWarnPlayer, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Odin Health Low Sound FX
//--------------------------------------------------------------------------------------------------
bool gt_OdinHealthLowSoundFX_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("TUIWarningPing", 0), PlayerGroupAll(), 100.0, 0.0);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    Wait(6.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OdinHealthLowSoundFX_Init () {
    gt_OdinHealthLowSoundFX = TriggerCreate("gt_OdinHealthLowSoundFX_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Odin GoGoGo
//--------------------------------------------------------------------------------------------------
bool gt_OdinGoGoGo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIRemoveUnitFromAnyWaves(UnitFromId(2));
    AISetUnitScriptControlled(UnitFromId(2), false);
    AIAttackWaveSetGatherPoint(gv_p02_TYCHUS, UnitGetPosition(UnitFromId(2)));
    AIAttackWaveSetTargetPlayer(gv_p02_TYCHUS, PlayerGroupSingle(gv_odinAIPlayerTarget));
    AIAttackWaveUseUnit(gv_p02_TYCHUS, UnitFromId(2));
    AIAttackWaveSend(gv_p02_TYCHUS, 1, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OdinGoGoGo_Init () {
    gt_OdinGoGoGo = TriggerCreate("gt_OdinGoGoGo_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battlecruiser Spawn / Attack Odin
//--------------------------------------------------------------------------------------------------
bool gt_BattlecruiserSpawnAttackOdin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShareVisionofUnit(UnitFromId(2), true, gv_p07_DOMINION_STARPORT_B);
    libNtve_gf_CreateUnitsAtPoint2(1, "Battlecruiser", 0, gv_p07_DOMINION_STARPORT_B, PointFromId(712));
    gv_battlecruiser1 = UnitLastCreated();
    UnitIssueOrder(gv_battlecruiser1, OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(2)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Battlecruiser", 0, gv_p07_DOMINION_STARPORT_B, PointFromId(302));
    gv_battlecruiser2 = UnitLastCreated();
    UnitIssueOrder(gv_battlecruiser2, OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(2)), c_orderQueueReplace);
    Wait(0.1, c_timeGame);
    TriggerExecute(gt_WraithIntro, true, false);
    TriggerExecute(gt_TransmissionBattlecruiserSpawnAttackOdinQ, true, false);
    PingCreate(PlayerGroupSingle(gv_p01_USER), "PingWarning", UnitGetPosition(gv_battlecruiser1), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    gv_battlecruiserPing1 = PingLastCreated();
    PingSetTooltip(gv_battlecruiserPing1, StringExternal("Param/Value/4CC8F111"));
    PingSetScale(gv_battlecruiserPing1, 0.75);
    PingSetUnit(gv_battlecruiserPing1, gv_battlecruiser1);
    PingCreate(PlayerGroupSingle(gv_p01_USER), "PingWarning", UnitGetPosition(gv_battlecruiser2), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    gv_battlecruiserPing2 = PingLastCreated();
    PingSetTooltip(gv_battlecruiserPing2, StringExternal("Param/Value/80DE907E"));
    PingSetScale(gv_battlecruiserPing2, 0.75);
    PingSetUnit(gv_battlecruiserPing2, gv_battlecruiser2);
    TriggerEnable(gt_RemoveBattlecruiser1Ping, true);
    TriggerEnable(gt_RemoveBattlecruiser2Ping, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BattlecruiserSpawnAttackOdin_Init () {
    gt_BattlecruiserSpawnAttackOdin = TriggerCreate("gt_BattlecruiserSpawnAttackOdin_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Battlecruiser 1 Ping
//--------------------------------------------------------------------------------------------------
bool gt_RemoveBattlecruiser1Ping_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_battlecruiser1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_battlecruiserPing1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveBattlecruiser1Ping_Init () {
    gt_RemoveBattlecruiser1Ping = TriggerCreate("gt_RemoveBattlecruiser1Ping_Func");
    TriggerEnable(gt_RemoveBattlecruiser1Ping, false);
    TriggerAddEventUnitDied(gt_RemoveBattlecruiser1Ping, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Battlecruiser 2 Ping
//--------------------------------------------------------------------------------------------------
bool gt_RemoveBattlecruiser2Ping_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_battlecruiser2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_battlecruiserPing2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveBattlecruiser2Ping_Init () {
    gt_RemoveBattlecruiser2Ping = TriggerCreate("gt_RemoveBattlecruiser2Ping_Func");
    TriggerEnable(gt_RemoveBattlecruiser2Ping, false);
    TriggerAddEventUnitDied(gt_RemoveBattlecruiser2Ping, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wraith Intro
//--------------------------------------------------------------------------------------------------
bool gt_WraithIntro_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_starport;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(15.0, c_timeGame);
    libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsWrath, gv_p01_USER);
    libCamp_gf_CreateNewStructureTips();
    libNtve_gf_PauseUnit(UnitFromId(292), false);
    libNtve_gf_PauseUnit(UnitFromId(8), false);
    libNtve_gf_PauseUnit(UnitFromId(738), false);
    libNtve_gf_PauseUnit(UnitFromId(739), false);
    libNtve_gf_ShowHideUnit(UnitFromId(292), true);
    libNtve_gf_ShowHideUnit(UnitFromId(739), true);
    libNtve_gf_ShowHideUnit(UnitFromId(8), true);
    libNtve_gf_ShowHideUnit(UnitFromId(738), true);
    UnitSetOwner(UnitFromId(739), gv_p01_USER, true);
    UnitSetOwner(UnitFromId(738), gv_p01_USER, true);
    UnitSetOwner(UnitFromId(8), gv_p01_USER, true);
    UnitSetOwner(UnitFromId(292), gv_p01_USER, true);
    UnitIssueOrder(UnitFromId(739), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(739)), 30.0, 45.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(292), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(292)), 30.0, 45.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(738), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(738)), 30.0, 45.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(8), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(8)), 30.0, 45.0)), c_orderQueueReplace);
    TriggerEnable(gt_AfterWraithIntroQ, true);
    Wait(4.0, c_timeGame);
    CameraLockInput(gv_p01_USER, true);
    CameraPan(gv_p01_USER, PointFromId(52), 1.0, -1, 10, false);
    Wait(1.0, c_timeGame);
    CameraLockInput(gv_p01_USER, false);
    UnitCreate(1, "StarportFlying", 0, gv_p01_USER, PointFromId(75), 315.0);
    lv_starport = UnitLastCreated();
    UnitSetPropertyFixed(lv_starport, c_unitPropHeight, 10.0);
    SoundPlay(SoundLink("Ghost_DropPodImpact", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitSetHeight(lv_starport, 3.25, 2.0);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(lv_starport, OrderTargetingPoint(AbilityCommand("StarportLand", 0), PointFromId(75)), c_orderQueueReplace);
    libNtve_gf_MakeUnitInvulnerable(lv_starport, false);
    libNtve_gf_MakeUnitUncommandable(lv_starport, false);
    Wait(65.0, c_timeGame);
    TriggerExecute(gt_OdinRampageBegins, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WraithIntro_Init () {
    gt_WraithIntro = TriggerCreate("gt_WraithIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: After Wraith Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_AfterWraithIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto93C7E59F_g;
    int auto93C7E59F_u;
    unit auto93C7E59F_var;

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_battlecruiser1) == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_battlecruiser2) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ShareVisionofUnit(UnitFromId(2), false, gv_p07_DOMINION_STARPORT_B);
    TriggerQueueEnter();
    auto93C7E59F_g = UnitGroup("Wraith", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto93C7E59F_u = UnitGroupCount(auto93C7E59F_g, c_unitCountAll);
    for (;; auto93C7E59F_u -= 1) {
        auto93C7E59F_var = UnitGroupUnitFromEnd(auto93C7E59F_g, auto93C7E59F_u);
        if (auto93C7E59F_var == null) { break; }
        UnitFlashSelection(auto93C7E59F_var, 1.0);
    }
    Wait(5.0, c_timeGame);
    TriggerExecute(gt_NewUnitWraithTipQ, true, false);
    TriggerQueueExit();
    Wait(15.0, c_timeGame);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Horner03_EscortingOdin", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner03Tychus00037", 0)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(2), SoundLink("THorner03Tychus00037", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(2.0, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner03Tychus00009", 0)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(2), SoundLink("THorner03Tychus00009", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_P04AttackWaves, true, false);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner03Tychus00010", 0)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(2), SoundLink("THorner03Tychus00010", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AfterWraithIntroQ_Init () {
    gt_AfterWraithIntroQ = TriggerCreate("gt_AfterWraithIntroQ_Func");
    TriggerEnable(gt_AfterWraithIntroQ, false);
    TriggerAddEventTimePeriodic(gt_AfterWraithIntroQ, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Odin Rampage Begins
//--------------------------------------------------------------------------------------------------
bool gt_OdinRampageBegins_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_P04AttackWaves, true, false);
    Wait(10.0, c_timeGame);
    AIRemoveUnitFromAnyWaves(UnitFromId(2));
    AISetUnitScriptControlled(UnitFromId(2), false);
    AIAttackWaveSetGatherPoint(gv_p02_TYCHUS, UnitGetPosition(UnitFromId(2)));
    AIAttackWaveSetTargetPlayer(gv_p02_TYCHUS, PlayerGroupSingle(gv_odinAIPlayerTarget));
    AIAttackWaveUseUnit(gv_p02_TYCHUS, UnitFromId(2));
    AIAttackWaveAddWaypoint(gv_p02_TYCHUS, PointFromId(651), false);
    AIAttackWaveSend(gv_p02_TYCHUS, 1, false);
    Wait(60.0, c_timeGame);
    TriggerEnable(gt_TransmissionTychusNoticesRaynorsUnitsQ, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OdinRampageBegins_Init () {
    gt_OdinRampageBegins = TriggerCreate("gt_OdinRampageBegins_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wraith Gets Close to Detector Q
//--------------------------------------------------------------------------------------------------
bool gt_WraithGetsClosetoDetectorQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_chosenUnit;
    bool lv_detectorSpotted;
    unit lv_nearbyDetector;

    // Automatic Variable Declarations
    unitgroup auto6ADED6AB_g;
    int auto6ADED6AB_u;
    unit auto6ADED6AB_var;
    unitgroup autoDCA2395B_g;
    int autoDCA2395B_u;
    unit autoDCA2395B_var;
    unitgroup auto1309F81D_g;
    int auto1309F81D_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto6ADED6AB_g = UnitGroup(null, 0, RegionCircle(UnitGetPosition(gv_odin), 2.75), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6ADED6AB_u = UnitGroupCount(auto6ADED6AB_g, c_unitCountAll);
    for (;; auto6ADED6AB_u -= 1) {
        auto6ADED6AB_var = UnitGroupUnitFromEnd(auto6ADED6AB_g, auto6ADED6AB_u);
        if (auto6ADED6AB_var == null) { break; }
        if ((UnitGetCustomValue(auto6ADED6AB_var, 1) == 99.0)) {
            UnitKill(auto6ADED6AB_var);
        }

    }
    autoDCA2395B_g = UnitGroup("Wraith", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDCA2395B_u = UnitGroupCount(autoDCA2395B_g, c_unitCountAll);
    for (;; autoDCA2395B_u -= 1) {
        autoDCA2395B_var = UnitGroupUnitFromEnd(autoDCA2395B_g, autoDCA2395B_u);
        if (autoDCA2395B_var == null) { break; }
        auto1309F81D_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(autoDCA2395B_var), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto1309F81D_u = UnitGroupCount(auto1309F81D_g, c_unitCountAll);
        for (;; auto1309F81D_u -= 1) {
            lv_chosenUnit = UnitGroupUnitFromEnd(auto1309F81D_g, auto1309F81D_u);
            if (lv_chosenUnit == null) { break; }
            if ((UnitGetOwner(lv_chosenUnit) != gv_p01_USER) && ((UnitGetType(lv_chosenUnit) == "Raven") || (UnitGetType(lv_chosenUnit) == "MissileTurret"))) {
                lv_detectorSpotted = true;
                lv_nearbyDetector = lv_chosenUnit;
            }

        }
    }
    if ((lv_detectorSpotted == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        VisRevealArea(gv_p01_USER, RegionCircle(UnitGetPosition(lv_nearbyDetector), 4.0), 5.0, false);
        libNtve_gf_AttachModelToUnit(lv_nearbyDetector, "BriefingUnitSelectRed", "Ref_Center");
        gv_tippedDetectorPing = libNtve_gf_ActorLastCreated();
        gv_tippedDetectorUnit = lv_nearbyDetector;
        TriggerExecute(gt_KillDetectorSpottedPing, true, false);
        TriggerQueueEnter();
        libCamp_gf_CreateTipFromConversationState("StoryTips|Horner03_Detection", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
        Wait(libCamp_gv_campaignHintDelay, c_timeGame);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WraithGetsClosetoDetectorQ_Init () {
    gt_WraithGetsClosetoDetectorQ = TriggerCreate("gt_WraithGetsClosetoDetectorQ_Func");
    TriggerAddEventTimePeriodic(gt_WraithGetsClosetoDetectorQ, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Detector Spotted Ping
//--------------------------------------------------------------------------------------------------
bool gt_KillDetectorSpottedPing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_timeout;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timeout = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_timeout, 6.0, false, c_timeGame);
    while (!(((TimerGetRemaining(lv_timeout) <= 0.0) || (UnitIsAlive(gv_tippedDetectorUnit) == false)))) {
        Wait(0.25, c_timeGame);
    }
    libNtve_gf_KillModel(gv_tippedDetectorPing);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillDetectorSpottedPing_Init () {
    gt_KillDetectorSpottedPing = TriggerCreate("gt_KillDetectorSpottedPing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Loki Activates
//--------------------------------------------------------------------------------------------------
bool gt_LokiActivates_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShareVisionofUnit(UnitFromId(2), true, gv_p10_DOMINION_LOKI);
    libNtve_gf_ShareVisionofUnit(UnitFromId(835), true, gv_p01_USER);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(18), "BattlecruiserLokiDock", c_animNameDefault, "Stand Work End", c_animFlagNonLooping, c_animTimeDefault);
    UnitIssueOrder(UnitFromId(835), Order(AbilityCommand("LokiUndock", 0)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(835), false);
    AISetUnitScriptControlled(UnitFromId(835), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LokiActivates_Init () {
    gt_LokiActivates = TriggerCreate("gt_LokiActivates_Func");
    TriggerAddEventUnitRegion(gt_LokiActivates, null, RegionFromId(23), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Loki Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_LokiDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroytheLokiComplete, true, false);
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1)) {
        AchievementAward(gv_p01_USER, "THorner03_2");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LokiDestroyed_Init () {
    gt_LokiDestroyed = TriggerCreate("gt_LokiDestroyed_Func");
    TriggerAddEventUnitDied(gt_LokiDestroyed, UnitRefFromUnit(UnitFromId(835)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CampaignInitAI();
    AIAttackWaveSetTargetPlayer(gv_p04_DOMINION_INFANTRY_A, PlayerGroupSingle(gv_p02_TYCHUS));
    AIAttackWaveSetTargetPlayer(gv_p08_DOMINION_INFANTRY_B, PlayerGroupSingle(gv_p02_TYCHUS));
    AIAttackWaveSetTargetPlayer(gv_p05_DOMINION_FACTORY, PlayerGroupSingle(gv_p02_TYCHUS));
    AIAttackWaveSetTargetPlayer(gv_p06_DOMINION_STARPORT_A, PlayerGroupSingle(gv_p02_TYCHUS));
    AIAttackWaveSetTargetPlayer(gv_p07_DOMINION_STARPORT_B, PlayerGroupSingle(gv_p02_TYCHUS));
    AIAttackWaveSetGatherPoint(gv_p04_DOMINION_INFANTRY_A, PointFromId(134));
    AIAttackWaveSetGatherPoint(gv_p08_DOMINION_INFANTRY_B, PointFromId(135));
    AIAttackWaveSetGatherPoint(gv_p05_DOMINION_FACTORY, PointFromId(124));
    AIAttackWaveSetGatherPoint(gv_p06_DOMINION_STARPORT_A, PointFromId(131));
    AIAttackWaveSetGatherPoint(gv_p07_DOMINION_STARPORT_B, PointFromId(132));
    TriggerExecute(gt_StartAIOverTime, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI Over Time
//--------------------------------------------------------------------------------------------------
bool gt_StartAIOverTime_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(240.0, c_timeGame);
    TriggerExecute(gt_P04AttackWaves, true, false);
    Wait(420.0, c_timeGame);
    TriggerExecute(gt_P08AttackWaves, true, false);
    Wait(420.0, c_timeGame);
    TriggerExecute(gt_P05AttackWaves, true, false);
    Wait(420.0, c_timeGame);
    TriggerExecute(gt_P06AttackWaves, true, false);
    Wait(420.0, c_timeGame);
    TriggerExecute(gt_P07AttackWaves, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAIOverTime_Init () {
    gt_StartAIOverTime = TriggerCreate("gt_StartAIOverTime_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveMinerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveMinerals_Init () {
    gt_AIGiveMinerals = TriggerCreate("gt_AIGiveMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p03_DOMINION_WAREHOUSE, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p04_DOMINION_INFANTRY_A, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p05_DOMINION_FACTORY, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p06_DOMINION_STARPORT_A, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p07_DOMINION_STARPORT_B, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p08_DOMINION_INFANTRY_B, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveGas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveGas_Init () {
    gt_AIGiveGas = TriggerCreate("gt_AIGiveGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p03_DOMINION_WAREHOUSE, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p04_DOMINION_INFANTRY_A, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p05_DOMINION_FACTORY, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p06_DOMINION_STARPORT_A, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p07_DOMINION_STARPORT_B, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p08_DOMINION_INFANTRY_B, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Odin Approaches P04 Base
//--------------------------------------------------------------------------------------------------
bool gt_OdinApproachesP04Base_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoDB1C39FB_g;
    int autoDB1C39FB_u;
    unit autoDB1C39FB_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupIssueOrder(UnitGroup(null, gv_p04_DOMINION_INFANTRY_A, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitFromId(2))), c_orderQueueReplace);
    SoundPlay(SoundLink("UI_TerranKlaxonAlert", 0), PlayerGroupAll(), 100.0, 0.0);
    autoDB1C39FB_g = UnitGroup("DestructibleBullhornLights", c_playerAny, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDB1C39FB_u = UnitGroupCount(autoDB1C39FB_g, c_unitCountAll);
    for (;; autoDB1C39FB_u -= 1) {
        autoDB1C39FB_var = UnitGroupUnitFromEnd(autoDB1C39FB_g, autoDB1C39FB_u);
        if (autoDB1C39FB_var == null) { break; }
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(autoDB1C39FB_var), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OdinApproachesP04Base_Init () {
    gt_OdinApproachesP04Base = TriggerCreate("gt_OdinApproachesP04Base_Func");
    TriggerAddEventUnitRegion(gt_OdinApproachesP04Base, UnitRefFromUnit(UnitFromId(2)), RegionFromId(21), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P04 Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_P04AttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPlayer(gv_p04_DOMINION_INFANTRY_A, PlayerGroupSingle(gv_p02_TYCHUS));
    AIAttackWaveAddUnits4(10, 10, 15, 20, "Marine");
    AIAttackWaveSend(gv_p04_DOMINION_INFANTRY_A, 70, true);
    while (true) {
        AIAttackWaveSetTargetPlayer(gv_p04_DOMINION_INFANTRY_A, PlayerGroupSingle(gv_p02_TYCHUS));
        AIAttackWaveAddUnits4(6, 6, 9, 12, "Marine");
        AIAttackWaveSend(gv_p04_DOMINION_INFANTRY_A, 30, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P04AttackWaves_Init () {
    gt_P04AttackWaves = TriggerCreate("gt_P04AttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P04 Base is Dying
//--------------------------------------------------------------------------------------------------
bool gt_P04BaseisDying_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p04_DOMINION_INFANTRY_A))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup(null, gv_p04_DOMINION_INFANTRY_A, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 8)) {
        TriggerEnable(TriggerGetCurrent(), false);
        AIAttackWaveSetTargetUnit(gv_p08_DOMINION_INFANTRY_B, UnitFromId(2));
        AIAttackWaveAddUnits4(2, 2, 4, 8, "Marine");
        AIAttackWaveAddUnits4(1, 1, 3, 5, "Marauder");
        AIAttackWaveSend(gv_p08_DOMINION_INFANTRY_B, 0, false);
        AIAttackWaveSetTargetUnit(gv_p08_DOMINION_INFANTRY_B, UnitFromId(2));
        AIAttackWaveAddUnits4(3, 3, 5, 10, "Marine");
        AIAttackWaveAddUnits4(1, 1, 2, 3, "Marauder");
        AIAttackWaveSend(gv_p08_DOMINION_INFANTRY_B, 55, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P04BaseisDying_Init () {
    gt_P04BaseisDying = TriggerCreate("gt_P04BaseisDying_Func");
    TriggerAddEventUnitDied(gt_P04BaseisDying, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P04 Base Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_P04BaseDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup(null, gv_p04_DOMINION_INFANTRY_A, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_baseDestroyedP04 = true;
        TriggerExecute(gt_ObjectiveDestroyDominionBasesUpdate, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P04BaseDestroyed_Init () {
    gt_P04BaseDestroyed = TriggerCreate("gt_P04BaseDestroyed_Func");
    TriggerAddEventTimePeriodic(gt_P04BaseDestroyed, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Odin Done with P04 Base
//--------------------------------------------------------------------------------------------------
bool gt_OdinDonewithP04Base_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_baseDestroyedP04 == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionP04BaseDestroyedQ, true, false);
    UnitIssueOrder(UnitFromId(2), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(632)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(2), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    Wait(12.0, c_timeGame);
    TriggerExecute(gt_RepairOdinTipQ, true, false);
    Wait(10.0, c_timeGame);
    AIAttackWaveSetTargetPlayer(gv_p08_DOMINION_INFANTRY_B, PlayerGroupSingle(gv_p01_USER));
    AIAttackWaveAddWaypoint(gv_p08_DOMINION_INFANTRY_B, PointFromId(68), false);
    AIAttackWaveAddUnits4(2, 2, 4, 3, "Marine");
    AIAttackWaveAddUnits4(1, 1, 2, 4, "Marauder");
    AIAttackWaveSend(gv_p08_DOMINION_INFANTRY_B, 40, false);
    Wait(libNtve_gf_DifficultyValueFixed(90.0, 90.0, 75.0, 75.0), c_timeGame);
    TriggerExecute(gt_TransmissionOdinChargesP08BaseQ, true, false);
    Wait(10.0, c_timeGame);
    gv_odinDoneWithP04 = true;
    gv_odinAIPlayerTarget = gv_p08_DOMINION_INFANTRY_B;
    TriggerExecute(gt_OdinGoGoGo, true, false);
    TriggerExecute(gt_P08AttackWaves, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OdinDonewithP04Base_Init () {
    gt_OdinDonewithP04Base = TriggerCreate("gt_OdinDonewithP04Base_Func");
    TriggerAddEventTimePeriodic(gt_OdinDonewithP04Base, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tychus Break After P04 Base
//--------------------------------------------------------------------------------------------------
bool gt_TychusBreakAfterP04Base_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p02_TYCHUS))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionTychusTakesBreakAfterP04BaseQ, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TychusBreakAfterP04Base_Init () {
    gt_TychusBreakAfterP04Base = TriggerCreate("gt_TychusBreakAfterP04Base_Func");
    TriggerAddEventUnitRangePoint(gt_TychusBreakAfterP04Base, UnitRefFromVariable("gv_odin"), PointFromId(632), 4.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Odin Approaches P08 Base
//--------------------------------------------------------------------------------------------------
bool gt_OdinApproachesP08Base_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto846B43D4_g;
    int auto846B43D4_u;
    unit auto846B43D4_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p08_DOMINION_INFANTRY_B, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("UI_TerranKlaxonAlert", 0), PlayerGroupAll(), 100.0, 0.0);
    auto846B43D4_g = UnitGroup("DestructibleBullhornLights", c_playerAny, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto846B43D4_u = UnitGroupCount(auto846B43D4_g, c_unitCountAll);
    for (;; auto846B43D4_u -= 1) {
        auto846B43D4_var = UnitGroupUnitFromEnd(auto846B43D4_g, auto846B43D4_u);
        if (auto846B43D4_var == null) { break; }
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(auto846B43D4_var), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OdinApproachesP08Base_Init () {
    gt_OdinApproachesP08Base = TriggerCreate("gt_OdinApproachesP08Base_Func");
    TriggerAddEventUnitRegion(gt_OdinApproachesP08Base, UnitRefFromUnit(UnitFromId(2)), RegionFromId(28), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P08 Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_P08AttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        AIAttackWaveSetTargetPlayer(gv_p08_DOMINION_INFANTRY_B, PlayerGroupSingle(gv_p02_TYCHUS));
        AIAttackWaveAddUnits4(2, 2, 3, 5, "Firebat");
        AIAttackWaveAddUnits4(1, 1, 2, 2, "Marauder");
        AIAttackWaveAddUnits4(3, 3, 5, 6, "Marine");
        AIAttackWaveSend(gv_p08_DOMINION_INFANTRY_B, 30, true);
        AIAttackWaveSetTargetPlayer(gv_p08_DOMINION_INFANTRY_B, PlayerGroupSingle(gv_p02_TYCHUS));
        AIAttackWaveAddUnits4(2, 2, 3, 4, "Firebat");
        AIAttackWaveAddUnits4(1, 1, 2, 2, "Marauder");
        AIAttackWaveAddUnits4(5, 5, 7, 9, "Marine");
        AIAttackWaveSend(gv_p08_DOMINION_INFANTRY_B, 30, true);
        AIAttackWaveSetTargetPlayer(gv_p08_DOMINION_INFANTRY_B, PlayerGroupSingle(gv_p02_TYCHUS));
        AIAttackWaveAddUnits4(3, 3, 5, 6, "Firebat");
        AIAttackWaveAddUnits4(3, 3, 5, 6, "Marine");
        AIAttackWaveAddUnits4(2, 2, 3, 4, "Marauder");
        AIAttackWaveSend(gv_p08_DOMINION_INFANTRY_B, 30, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P08AttackWaves_Init () {
    gt_P08AttackWaves = TriggerCreate("gt_P08AttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P08 Base is dying
//--------------------------------------------------------------------------------------------------
bool gt_P08Baseisdying_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p08_DOMINION_INFANTRY_B))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup(null, gv_p08_DOMINION_INFANTRY_B, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 11)) {
        TriggerEnable(TriggerGetCurrent(), false);
        AIAttackWaveSetTargetUnit(gv_p05_DOMINION_FACTORY, UnitFromId(2));
        AIAttackWaveAddUnits4(5, 5, 6, 8, "Vulture");
        AIAttackWaveSend(gv_p05_DOMINION_FACTORY, 0, false);
        AIAttackWaveSetTargetUnit(gv_p05_DOMINION_FACTORY, UnitFromId(2));
        AIAttackWaveAddUnits4(6, 6, 9, 15, "Vulture");
        AIAttackWaveAddUnits4(1, 1, 2, 2, "Diamondback");
        AIAttackWaveSend(gv_p05_DOMINION_FACTORY, 65, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P08Baseisdying_Init () {
    gt_P08Baseisdying = TriggerCreate("gt_P08Baseisdying_Func");
    TriggerAddEventUnitDied(gt_P08Baseisdying, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P08 Base Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_P08BaseDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup(null, gv_p08_DOMINION_INFANTRY_B, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_baseDestroyedP08 = true;
        TriggerExecute(gt_ObjectiveDestroyDominionBasesUpdate, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P08BaseDestroyed_Init () {
    gt_P08BaseDestroyed = TriggerCreate("gt_P08BaseDestroyed_Func");
    TriggerAddEventTimePeriodic(gt_P08BaseDestroyed, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Odin Done with P08 Base
//--------------------------------------------------------------------------------------------------
bool gt_OdinDonewithP08Base_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_baseDestroyedP08 == true))) {
            return false;
        }

        if (!((gv_odinDoneWithP04 == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(2), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(638)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(2), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    Wait(12.0, c_timeGame);
    AIAttackWaveSetTargetPlayer(gv_p05_DOMINION_FACTORY, PlayerGroupSingle(gv_p01_USER));
    AIAttackWaveAddUnits4(3, 3, 5, 6, "Reaper");
    gf_AddWaypointToExpansion(gv_p05_DOMINION_FACTORY);
    AIAttackWaveSend(gv_p05_DOMINION_FACTORY, 30, false);
    AIAttackWaveSetTargetPlayer(gv_p05_DOMINION_FACTORY, PlayerGroupSingle(gv_p01_USER));
    AIAttackWaveAddUnits4(3, 3, 4, 4, "Reaper");
    AIAttackWaveAddUnits4(2, 3, 3, 4, "Vulture");
    AIAttackWaveAddUnits4(0, 0, 1, 2, "Diamondback");
    AIAttackWaveAddWaypoint(gv_p05_DOMINION_FACTORY, PointFromId(562), false);
    AIAttackWaveSend(gv_p05_DOMINION_FACTORY, 50, false);
    AIAttackWaveSetTargetPlayer(gv_p05_DOMINION_FACTORY, PlayerGroupSingle(gv_p01_USER));
    AIAttackWaveAddUnits4(1, 1, 5, 2, "Vulture");
    AIAttackWaveAddUnits4(1, 1, 1, 2, "Diamondback");
    AIAttackWaveSend(gv_p05_DOMINION_FACTORY, 70, false);
    Wait(libNtve_gf_DifficultyValueFixed(120.0, 120.0, 105.0, 105.0), c_timeGame);
    TriggerExecute(gt_TransmissionOdinChargesP05BaseQ, true, false);
    Wait(10.0, c_timeGame);
    gv_odinDoneWithP08 = true;
    gv_odinAIPlayerTarget = gv_p05_DOMINION_FACTORY;
    TriggerExecute(gt_OdinGoGoGo, true, false);
    TriggerExecute(gt_P05AttackWaves, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OdinDonewithP08Base_Init () {
    gt_OdinDonewithP08Base = TriggerCreate("gt_OdinDonewithP08Base_Func");
    TriggerAddEventTimePeriodic(gt_OdinDonewithP08Base, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Save Game After P08 Base
//--------------------------------------------------------------------------------------------------
bool gt_SaveGameAfterP08Base_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p02_TYCHUS))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionTychusTakesBreakAfterP08BaseQ, true, true);
    Wait(1.0, c_timeGame);
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/9D26DCEB"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SaveGameAfterP08Base_Init () {
    gt_SaveGameAfterP08Base = TriggerCreate("gt_SaveGameAfterP08Base_Func");
    TriggerAddEventUnitRangePoint(gt_SaveGameAfterP08Base, UnitRefFromVariable("gv_odin"), PointFromId(638), 4.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Odin Approaches P05 Base
//--------------------------------------------------------------------------------------------------
bool gt_OdinApproachesP05Base_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE78DF35B_g;
    int autoE78DF35B_u;
    unit autoE78DF35B_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p05_DOMINION_FACTORY, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitAbilityEnable(UnitFromId(2), "OdinBarrage", true);
    SoundPlay(SoundLink("UI_TerranKlaxonAlert", 0), PlayerGroupAll(), 100.0, 0.0);
    autoE78DF35B_g = UnitGroup("DestructibleBullhornLights", c_playerAny, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE78DF35B_u = UnitGroupCount(autoE78DF35B_g, c_unitCountAll);
    for (;; autoE78DF35B_u -= 1) {
        autoE78DF35B_var = UnitGroupUnitFromEnd(autoE78DF35B_g, autoE78DF35B_u);
        if (autoE78DF35B_var == null) { break; }
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(autoE78DF35B_var), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OdinApproachesP05Base_Init () {
    gt_OdinApproachesP05Base = TriggerCreate("gt_OdinApproachesP05Base_Func");
    TriggerAddEventUnitRegion(gt_OdinApproachesP05Base, UnitRefFromUnit(UnitFromId(2)), RegionFromId(6), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P05 Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_P05AttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        AIAttackWaveSetTargetPlayer(gv_p05_DOMINION_FACTORY, PlayerGroupSingle(gv_p02_TYCHUS));
        AIAttackWaveAddUnits4(2, 2, 3, 4, "Reaper");
        AIAttackWaveAddUnits4(1, 1, 2, 4, "Marine");
        AIAttackWaveAddUnits4(2, 2, 3, 5, "Vulture");
        AIAttackWaveSend(gv_p05_DOMINION_FACTORY, 30, true);
        AIAttackWaveSetTargetPlayer(gv_p05_DOMINION_FACTORY, PlayerGroupSingle(gv_p02_TYCHUS));
        AIAttackWaveAddUnits4(4, 4, 6, 8, "Marine");
        AIAttackWaveAddUnits4(3, 3, 2, 4, "Vulture");
        AIAttackWaveAddUnits4(0, 0, 1, 2, "Diamondback");
        AIAttackWaveSend(gv_p05_DOMINION_FACTORY, 30, true);
        AIAttackWaveSetTargetPlayer(gv_p05_DOMINION_FACTORY, PlayerGroupSingle(gv_p02_TYCHUS));
        AIAttackWaveAddUnits4(2, 2, 4, 4, "Reaper");
        AIAttackWaveAddUnits4(1, 1, 2, 2, "Marauder");
        AIAttackWaveAddUnits4(1, 1, 1, 2, "Diamondback");
        AIAttackWaveSend(gv_p05_DOMINION_FACTORY, 30, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P05AttackWaves_Init () {
    gt_P05AttackWaves = TriggerCreate("gt_P05AttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P05 Base is Dying
//--------------------------------------------------------------------------------------------------
bool gt_P05BaseisDying_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p05_DOMINION_FACTORY))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup(null, gv_p05_DOMINION_FACTORY, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 13)) {
        TriggerEnable(TriggerGetCurrent(), false);
        AIAttackWaveSetTargetUnit(gv_p06_DOMINION_STARPORT_A, UnitFromId(2));
        AIAttackWaveAddWaypoint(gv_p06_DOMINION_STARPORT_A, PointFromId(2200), false);
        AIAttackWaveAddUnits4(1, 1, 1, 2, "Banshee");
        AIAttackWaveAddUnits4(4, 4, 5, 5, "Marine");
        AIAttackWaveAddUnits4(0, 0, 0, 2, "Marauder");
        AIAttackWaveSend(gv_p06_DOMINION_STARPORT_A, 0, false);
        AIAttackWaveSetTargetUnit(gv_p06_DOMINION_STARPORT_A, UnitFromId(2));
        AIAttackWaveAddWaypoint(gv_p06_DOMINION_STARPORT_A, PointFromId(2200), false);
        AIAttackWaveAddUnits4(1, 1, 2, 2, "Marauder");
        AIAttackWaveAddUnits4(2, 2, 3, 5, "Marine");
        AIAttackWaveAddUnits4(2, 2, 2, 3, "Banshee");
        AIAttackWaveSend(gv_p06_DOMINION_STARPORT_A, 65, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P05BaseisDying_Init () {
    gt_P05BaseisDying = TriggerCreate("gt_P05BaseisDying_Func");
    TriggerAddEventUnitDied(gt_P05BaseisDying, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P05 Base Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_P05BaseDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup(null, gv_p05_DOMINION_FACTORY, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_baseDestroyedP05 = true;
        TriggerExecute(gt_ObjectiveDestroyDominionBasesUpdate, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P05BaseDestroyed_Init () {
    gt_P05BaseDestroyed = TriggerCreate("gt_P05BaseDestroyed_Func");
    TriggerAddEventTimePeriodic(gt_P05BaseDestroyed, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Odin Done with P05 Base
//--------------------------------------------------------------------------------------------------
bool gt_OdinDonewithP05Base_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_baseDestroyedP05 == true))) {
            return false;
        }

        if (!((gv_odinDoneWithP08 == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionP05BaseDestroyedQ, true, false);
    UnitIssueOrder(UnitFromId(2), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(833)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(2), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    Wait(12.0, c_timeGame);
    TriggerExecute(gt_TransmissionTychusTakesBreakAfterP05BaseQ, true, false);
    libNtve_gf_ShareVisionofUnit(UnitFromId(503), true, gv_p06_DOMINION_STARPORT_A);
    if ((UnitIsAlive(UnitFromId(503)) == true)) {
        AIAttackWaveSetTargetUnit(gv_p06_DOMINION_STARPORT_A, UnitFromId(503));
    }
    else {
        AIAttackWaveSetTargetPlayer(gv_p06_DOMINION_STARPORT_A, PlayerGroupSingle(gv_p01_USER));
    }
    AIAttackWaveAddUnits4(4, 4, 6, 8, "Marine");
    AIAttackWaveAddUnits4(3, 3, 3, 3, "Marauder");
    if ((UnitIsAlive(UnitFromId(503)) == true)) {
        AIAttackWaveSend(gv_p06_DOMINION_STARPORT_A, 10, false);
    }
    else {
        AIAttackWaveSend(gv_p06_DOMINION_STARPORT_A, 30, false);
    }
    Wait(30.0, c_timeGame);
    AIAttackWaveSetTargetPlayer(gv_p06_DOMINION_STARPORT_A, PlayerGroupSingle(gv_p01_USER));
    AIAttackWaveAddUnits4(0, 1, 2, 2, "Banshee");
    AIAttackWaveAddUnits4(1, 1, 1, 1, "VikingFighter");
    AIAttackWaveAddUnits4(1, 1, 1, 2, "Firebat");
    gf_AddWaypointToExpansion(gv_p06_DOMINION_STARPORT_A);
    AIAttackWaveSend(gv_p06_DOMINION_STARPORT_A, 40, false);
    Wait(libNtve_gf_DifficultyValueFixed(90.0, 90.0, 75.0, 75.0), c_timeGame);
    TriggerExecute(gt_TransmissionOdinChargesP06BaseQ, true, false);
    Wait(10.0, c_timeGame);
    gv_odinDoneWithP05 = true;
    gv_odinAIPlayerTarget = gv_p06_DOMINION_STARPORT_A;
    TriggerExecute(gt_OdinGoGoGo, true, false);
    TriggerExecute(gt_P06AttackWaves, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OdinDonewithP05Base_Init () {
    gt_OdinDonewithP05Base = TriggerCreate("gt_OdinDonewithP05Base_Func");
    TriggerAddEventTimePeriodic(gt_OdinDonewithP05Base, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Odin Approaches P06 Base
//--------------------------------------------------------------------------------------------------
bool gt_OdinApproachesP06Base_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5513543B_g;
    int auto5513543B_u;
    unit auto5513543B_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p06_DOMINION_STARPORT_A, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitAbilityEnable(UnitFromId(2), "OdinBarrage", true);
    SoundPlay(SoundLink("UI_TerranKlaxonAlert", 0), PlayerGroupAll(), 100.0, 0.0);
    auto5513543B_g = UnitGroup("DestructibleBullhornLights", c_playerAny, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5513543B_u = UnitGroupCount(auto5513543B_g, c_unitCountAll);
    for (;; auto5513543B_u -= 1) {
        auto5513543B_var = UnitGroupUnitFromEnd(auto5513543B_g, auto5513543B_u);
        if (auto5513543B_var == null) { break; }
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(auto5513543B_var), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OdinApproachesP06Base_Init () {
    gt_OdinApproachesP06Base = TriggerCreate("gt_OdinApproachesP06Base_Func");
    TriggerAddEventUnitRegion(gt_OdinApproachesP06Base, UnitRefFromUnit(UnitFromId(2)), RegionFromId(11), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P06 Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_P06AttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        AIAttackWaveSetTargetPlayer(gv_p06_DOMINION_STARPORT_A, PlayerGroupSingle(gv_p02_TYCHUS));
        AIAttackWaveAddUnits4(1, 1, 2, 4, "Marine");
        AIAttackWaveAddUnits4(2, 2, 3, 3, "Firebat");
        AIAttackWaveAddUnits4(1, 1, 2, 3, "Marauder");
        AIAttackWaveAddUnits4(1, 1, 3, 3, "VikingFighter");
        AIAttackWaveSend(gv_p06_DOMINION_STARPORT_A, 30, true);
        AIAttackWaveSetTargetPlayer(gv_p06_DOMINION_STARPORT_A, PlayerGroupSingle(gv_p02_TYCHUS));
        AIAttackWaveAddUnits4(3, 3, 4, 6, "Marine");
        AIAttackWaveAddUnits4(1, 1, 2, 3, "Firebat");
        AIAttackWaveAddUnits4(0, 0, 2, 3, "Medic");
        AIAttackWaveAddUnits4(1, 1, 1, 2, "Banshee");
        AIAttackWaveAddUnits4(1, 1, 2, 2, "VikingFighter");
        AIAttackWaveSend(gv_p06_DOMINION_STARPORT_A, 30, true);
        AIAttackWaveSetTargetPlayer(gv_p06_DOMINION_STARPORT_A, PlayerGroupSingle(gv_p02_TYCHUS));
        AIAttackWaveAddUnits4(2, 2, 3, 5, "Marine");
        AIAttackWaveAddUnits4(1, 1, 2, 3, "Marauder");
        AIAttackWaveAddUnits4(0, 0, 2, 3, "Medic");
        AIAttackWaveAddUnits4(1, 1, 2, 2, "Banshee");
        AIAttackWaveAddUnits4(1, 1, 2, 2, "VikingFighter");
        AIAttackWaveSend(gv_p06_DOMINION_STARPORT_A, 30, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P06AttackWaves_Init () {
    gt_P06AttackWaves = TriggerCreate("gt_P06AttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P06 Base is Dying
//--------------------------------------------------------------------------------------------------
bool gt_P06BaseisDying_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p06_DOMINION_STARPORT_A))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup(null, gv_p06_DOMINION_STARPORT_A, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 13)) {
        TriggerEnable(TriggerGetCurrent(), false);
        AIAttackWaveSetTargetUnit(gv_p07_DOMINION_STARPORT_B, UnitFromId(2));
        AIAttackWaveAddUnits4(1, 1, 2, 3, "Marauder");
        AIAttackWaveAddUnits4(3, 3, 4, 7, "Marine");
        AIAttackWaveAddUnits4(2, 2, 3, 3, "VikingFighter");
        AIAttackWaveSend(gv_p07_DOMINION_STARPORT_B, 0, false);
        AIAttackWaveSetTargetUnit(gv_p07_DOMINION_STARPORT_B, UnitFromId(2));
        AIAttackWaveAddUnits4(3, 3, 4, 6, "Marauder");
        AIAttackWaveAddUnits4(1, 1, 2, 3, "Banshee");
        AIAttackWaveAddUnits4(1, 1, 2, 2, "VikingFighter");
        AIAttackWaveSend(gv_p07_DOMINION_STARPORT_B, 65, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P06BaseisDying_Init () {
    gt_P06BaseisDying = TriggerCreate("gt_P06BaseisDying_Func");
    TriggerAddEventUnitDied(gt_P06BaseisDying, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P06 Base Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_P06BaseDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup(null, gv_p06_DOMINION_STARPORT_A, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_baseDestroyedP06 = true;
        TriggerExecute(gt_ObjectiveDestroyDominionBasesUpdate, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P06BaseDestroyed_Init () {
    gt_P06BaseDestroyed = TriggerCreate("gt_P06BaseDestroyed_Func");
    TriggerAddEventTimePeriodic(gt_P06BaseDestroyed, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Odin Done with P06 Base
//--------------------------------------------------------------------------------------------------
bool gt_OdinDonewithP06Base_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_baseDestroyedP06 == true))) {
            return false;
        }

        if (!((gv_odinDoneWithP05 == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionP06BaseDestroyedQ, true, false);
    UnitIssueOrder(UnitFromId(2), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(865)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(2), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    Wait(12.0, c_timeGame);
    TriggerExecute(gt_TransmissionTychusTakesBreakAfterP06BaseQ, true, false);
    AIAttackWaveSetTargetPlayer(gv_p07_DOMINION_STARPORT_B, PlayerGroupSingle(gv_p01_USER));
    AIAttackWaveAddWaypoint(gv_p07_DOMINION_STARPORT_B, PointFromId(572), false);
    AIAttackWaveAddUnits4(2, 2, 3, 4, "VikingFighter");
    AIAttackWaveAddUnits4(0, 0, 0, 1, "Raven");
    AIAttackWaveSend(gv_p07_DOMINION_STARPORT_B, 30, false);
    AIAttackWaveSetTargetPlayer(gv_p07_DOMINION_STARPORT_B, PlayerGroupSingle(gv_p01_USER));
    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        AIAttackWaveAddWaypoint(gv_p07_DOMINION_STARPORT_B, PointFromId(667), false);
    }
    else {
        AIAttackWaveAddWaypoint(gv_p07_DOMINION_STARPORT_B, PointFromId(572), false);
        gf_AddWaypointToExpansion(gv_p07_DOMINION_STARPORT_B);
    }
    AIAttackWaveAddUnits4(1, 1, 2, 4, "Banshee");
    AIAttackWaveAddUnits4(3, 3, 4, 3, "VikingFighter");
    AIAttackWaveAddUnits4(0, 0, 1, 1, "Raven");
    AIAttackWaveSend(gv_p07_DOMINION_STARPORT_B, 50, false);
    AIAttackWaveSetTargetPlayer(gv_p07_DOMINION_STARPORT_B, PlayerGroupSingle(gv_p01_USER));
    AIAttackWaveAddUnits4(8, 8, 6, 6, "Marine");
    AIAttackWaveAddUnits4(2, 2, 3, 4, "Banshee");
    AIAttackWaveAddUnits4(0, 0, 0, 1, "Raven");
    gf_AddWaypointToExpansion(gv_p07_DOMINION_STARPORT_B);
    AIAttackWaveSend(gv_p07_DOMINION_STARPORT_B, 70, false);
    Wait(libNtve_gf_DifficultyValueFixed(120.0, 120.0, 105.0, 105.0), c_timeGame);
    TriggerExecute(gt_TransmissionOdinChargesP07BaseQ, true, false);
    Wait(10.0, c_timeGame);
    gv_odinAIPlayerTarget = gv_p07_DOMINION_STARPORT_B;
    TriggerExecute(gt_P07AttackWaves, true, false);
    TriggerExecute(gt_OdinGoGoGo, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OdinDonewithP06Base_Init () {
    gt_OdinDonewithP06Base = TriggerCreate("gt_OdinDonewithP06Base_Func");
    TriggerAddEventTimePeriodic(gt_OdinDonewithP06Base, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Save Game After P06 Base
//--------------------------------------------------------------------------------------------------
bool gt_SaveGameAfterP06Base_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p02_TYCHUS))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/364B1809"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SaveGameAfterP06Base_Init () {
    gt_SaveGameAfterP06Base = TriggerCreate("gt_SaveGameAfterP06Base_Func");
    TriggerAddEventUnitRangePoint(gt_SaveGameAfterP06Base, UnitRefFromVariable("gv_odin"), PointFromId(865), 4.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Odin Approaches P07 Base
//--------------------------------------------------------------------------------------------------
bool gt_OdinApproachesP07Base_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoAD30467A_g;
    int autoAD30467A_u;
    unit autoAD30467A_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p07_DOMINION_STARPORT_B, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitAbilityEnable(UnitFromId(2), "OdinBarrage", true);
    SoundPlay(SoundLink("UI_TerranKlaxonAlert", 0), PlayerGroupAll(), 100.0, 0.0);
    autoAD30467A_g = UnitGroup("DestructibleBullhornLights", c_playerAny, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAD30467A_u = UnitGroupCount(autoAD30467A_g, c_unitCountAll);
    for (;; autoAD30467A_u -= 1) {
        autoAD30467A_var = UnitGroupUnitFromEnd(autoAD30467A_g, autoAD30467A_u);
        if (autoAD30467A_var == null) { break; }
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(autoAD30467A_var), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OdinApproachesP07Base_Init () {
    gt_OdinApproachesP07Base = TriggerCreate("gt_OdinApproachesP07Base_Func");
    TriggerAddEventUnitRegion(gt_OdinApproachesP07Base, UnitRefFromUnit(UnitFromId(2)), RegionFromId(12), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P07 Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_P07AttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        AIAttackWaveSetTargetPlayer(gv_p07_DOMINION_STARPORT_B, PlayerGroupSingle(gv_p02_TYCHUS));
        AIAttackWaveAddUnits4(1, 1, 2, 3, "Marine");
        AIAttackWaveAddUnits4(1, 1, 2, 3, "Firebat");
        AIAttackWaveAddUnits4(0, 0, 2, 3, "Medic");
        AIAttackWaveAddUnits4(1, 1, 1, 2, "Banshee");
        AIAttackWaveSend(gv_p07_DOMINION_STARPORT_B, 30, true);
        AIAttackWaveSetTargetPlayer(gv_p07_DOMINION_STARPORT_B, PlayerGroupSingle(gv_p02_TYCHUS));
        AIAttackWaveAddUnits4(2, 2, 3, 4, "Marine");
        AIAttackWaveAddUnits4(1, 1, 3, 4, "Marauder");
        AIAttackWaveAddUnits4(0, 0, 2, 3, "Medic");
        AIAttackWaveAddUnits4(1, 1, 2, 2, "Banshee");
        AIAttackWaveSend(gv_p07_DOMINION_STARPORT_B, 30, true);
        AIAttackWaveSetTargetPlayer(gv_p07_DOMINION_STARPORT_B, PlayerGroupSingle(gv_p02_TYCHUS));
        AIAttackWaveAddUnits4(3, 3, 5, 7, "Marine");
        AIAttackWaveAddUnits4(0, 0, 2, 3, "Medic");
        AIAttackWaveAddUnits4(1, 1, 2, 0, "Banshee");
        AIAttackWaveAddUnits4(1, 1, 1, 1, "Raven");
        AIAttackWaveAddUnits4(0, 0, 0, 1, "Battlecruiser");
        AIAttackWaveSend(gv_p07_DOMINION_STARPORT_B, 30, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P07AttackWaves_Init () {
    gt_P07AttackWaves = TriggerCreate("gt_P07AttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battlecruisers Yamato Odin
//--------------------------------------------------------------------------------------------------
bool gt_BattlecruisersYamatoOdin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        TechTreeUpgradeAddLevel(gv_p07_DOMINION_STARPORT_B, "YamatoCannon", 1);
        libNtve_gf_ShareVisionofUnit(UnitFromId(2), true, gv_p07_DOMINION_STARPORT_B);
        UnitIssueOrder(UnitFromId(2218), OrderTargetingUnit(AbilityCommand("Yamato", 0), UnitFromId(2)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(2218), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(2)), c_orderQueueAddToEnd);
        if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 0) == 1)) {
            UnitIssueOrder(UnitFromId(2219), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(2)), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(UnitFromId(2219), OrderTargetingUnit(AbilityCommand("Yamato", 0), UnitFromId(2)), c_orderQueueReplace);
            UnitIssueOrder(UnitFromId(2219), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(2)), c_orderQueueAddToEnd);
        }
        if ((UnitIsAlive(UnitFromId(2219)) == true)) {
            TriggerExecute(gt_TransmissionYamatoTheOdinQQ, true, false);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BattlecruisersYamatoOdin_Init () {
    gt_BattlecruisersYamatoOdin = TriggerCreate("gt_BattlecruisersYamatoOdin_Func");
    TriggerAddEventUnitRegion(gt_BattlecruisersYamatoOdin, UnitRefFromUnit(UnitFromId(2)), RegionFromId(10), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battlecruiser Killed While Talking
//--------------------------------------------------------------------------------------------------
bool gt_BattlecruiserKilledWhileTalking_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClear(gv_yamatoTransmission);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BattlecruiserKilledWhileTalking_Init () {
    gt_BattlecruiserKilledWhileTalking = TriggerCreate("gt_BattlecruiserKilledWhileTalking_Func");
    TriggerAddEventUnitDied(gt_BattlecruiserKilledWhileTalking, UnitRefFromUnit(UnitFromId(2219)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Odin Nukes P07 Q
//--------------------------------------------------------------------------------------------------
bool gt_OdinNukesP07Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p07_DOMINION_STARPORT_B, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_TransmissionTychusNoticesRaynorsUnitsQ, false);
    libNtve_gf_ChangeUnitDamage(UnitFromId(2), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    VisRevealArea(gv_p01_USER, RegionFromId(20), 0.0, false);
    VisRevealArea(gv_p02_TYCHUS, RegionFromId(20), 0.0, false);
    Wait(0.1, c_timeAI);
    AISetUnitScriptControlled(UnitFromId(2), true);
    UnitIssueOrder(UnitFromId(2), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(715)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(2), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    Wait(1.0, c_timeAI);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner03Tychus00052", -1)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(2), SoundLink("THorner03Tychus00052", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(UnitFromId(2), OrderTargetingPoint(AbilityCommand("OdinNuclearStrike", 0), RegionGetCenter(RegionFromId(20))), c_orderQueueReplace);
    SoundPlay(SoundLink("Alert_TerranCalldownLaunch", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    Wait(1.0, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    // Transmission - SoundLink("THorner03Tychus00054", -1)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(2), SoundLink("THorner03Tychus00054", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    while (true) {
        UnitIssueOrder(UnitFromId(2), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(715)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(2), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
        Wait(1.0, c_timeAI);
        if ((gv_gameOver == false) && (UnitIsAlive(gv_odin) == false)) {
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OdinNukesP07Q_Init () {
    gt_OdinNukesP07Q = TriggerCreate("gt_OdinNukesP07Q_Func");
    TriggerAddEventUnitRangePoint(gt_OdinNukesP07Q, UnitRefFromUnit(UnitFromId(2)), RegionGetCenter(RegionFromId(20)), 16.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nuke Pan
//--------------------------------------------------------------------------------------------------
bool gt_NukePan_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(14.5, c_timeGame);
    CameraLockInput(gv_p01_USER, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoDefault(), 1.0, -1, 10, true);
    CameraPan(gv_p01_USER, RegionGetCenter(RegionFromId(20)), 2.0, -1, 10, false);
    Wait(2.0, c_timeGame);
    CameraLockInput(gv_p01_USER, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NukePan_Init () {
    gt_NukePan = TriggerCreate("gt_NukePan_Func");
    TriggerAddEventUnitAbility(gt_NukePan, UnitRefFromUnit(UnitFromId(2)), AbilityCommand("OdinNuclearStrike", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P07 Base Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_P07BaseDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup(null, gv_p07_DOMINION_STARPORT_B, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_ObjectiveDestroyDominionBasesUpdate, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P07BaseDestroyed_Init () {
    gt_P07BaseDestroyed = TriggerCreate("gt_P07BaseDestroyed_Func");
    TriggerAddEventTimePeriodic(gt_P07BaseDestroyed, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Warehouse Auto-Turrets Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionWarehouseAutoTurretsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/8B3AA905"), null, PointFromId(734));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner03DominionMarine100029", -1)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(22), SoundLink("THorner03DominionMarine100029", 0), c_transmissionDurationAdd, 0.0, true);
    UnitIssueOrder(UnitFromId(22), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnit())), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(661), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnit())), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(660), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnit())), c_orderQueueReplace);
    // Transmission - SoundLink("THorner03Tychus00031", -1)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(4), SoundLink("THorner03Tychus00031", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionWarehouseAutoTurretsQ_Init () {
    gt_TransmissionWarehouseAutoTurretsQ = TriggerCreate("gt_TransmissionWarehouseAutoTurretsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Warehouse Bullies 1 All Dead Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionWarehouseBullies1AllDeadQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner03Tychus00032", -1)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(4), SoundLink("THorner03Tychus00032", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionWarehouseBullies1AllDeadQ_Init () {
    gt_TransmissionWarehouseBullies1AllDeadQ = TriggerCreate("gt_TransmissionWarehouseBullies1AllDeadQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Find Cerebrate Samples Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFindCerebrateSamplesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_devourerSamplesFound == 1)) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("ScienceObjectiveCalloutsStetmann00001", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("ScienceObjectiveCalloutsStetmann00001", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        return true;
        TriggerQueueExit();
    }

    if ((gv_devourerSamplesFound == 2)) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("ScienceObjectiveCalloutsStetmann00005", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("ScienceObjectiveCalloutsStetmann00005", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        return true;
        TriggerQueueExit();
    }

    if ((gv_devourerSamplesFound == 3)) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("ScienceObjectiveCalloutsStetmann00007", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("ScienceObjectiveCalloutsStetmann00007", 0), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
        return true;
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFindCerebrateSamplesQ_Init () {
    gt_TransmissionFindCerebrateSamplesQ = TriggerCreate("gt_TransmissionFindCerebrateSamplesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Battlecruiser Spawn / Attack Odin Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBattlecruiserSpawnAttackOdinQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    SoundPlay(SoundLink("TUIWarningPing", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("TUIWarningPing", 0)), c_timeReal);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner03Horner00036", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner03Horner00036", 0), c_transmissionDurationAdd, 0.0, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner03MusicSwann", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    // Transmission - SoundLink("THorner03Swann00055", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner03Swann00055", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBattlecruiserSpawnAttackOdinQ_Init () {
    gt_TransmissionBattlecruiserSpawnAttackOdinQ = TriggerCreate("gt_TransmissionBattlecruiserSpawnAttackOdinQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - First Barrage Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFirstBarrageQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner03Tychus00045", -1)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(2), SoundLink("THorner03Tychus00045", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    UnitAbilityEnable(UnitFromId(2), "OdinBarrage", true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFirstBarrageQ_Init () {
    gt_TransmissionFirstBarrageQ = TriggerCreate("gt_TransmissionFirstBarrageQ_Func");
    TriggerAddEventUnitRange(gt_TransmissionFirstBarrageQ, UnitRefFromUnit(UnitFromId(2)), UnitFromId(119), 12.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - First Barrage Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFirstBarrageCompleteQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner03Tychus00046", -1)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(2), SoundLink("THorner03Tychus00046", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFirstBarrageCompleteQ_Init () {
    gt_TransmissionFirstBarrageCompleteQ = TriggerCreate("gt_TransmissionFirstBarrageCompleteQ_Func");
    TriggerAddEventUnitAbility(gt_TransmissionFirstBarrageCompleteQ, UnitRefFromUnit(UnitFromId(2)), AbilityCommand("OdinBarrage", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Barrage Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBarrageQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoF6B5ED00_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(gt_TransmissionFirstBarrageQ) == true)) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    autoF6B5ED00_val = gv_barrageIncrement;
    if (autoF6B5ED00_val == 1) {
        // Transmission - SoundLink("THorner03Tychus00022", -1)
        libCamp_gf_SendTransmissionCampaign(UnitFromId(2), SoundLink("THorner03Tychus00022", 0), c_transmissionDurationAdd, 0.0, true);
        gv_barrageIncrement = 2;
    }
    else if (autoF6B5ED00_val == 2) {
        // Transmission - SoundLink("THorner03Tychus00023", -1)
        libCamp_gf_SendTransmissionCampaign(UnitFromId(2), SoundLink("THorner03Tychus00023", 0), c_transmissionDurationAdd, 0.0, true);
        gv_barrageIncrement = 3;
    }
    else if (autoF6B5ED00_val == 3) {
        // Transmission - SoundLink("THorner03Tychus00024", -1)
        libCamp_gf_SendTransmissionCampaign(UnitFromId(2), SoundLink("THorner03Tychus00024", 0), c_transmissionDurationAdd, 0.0, true);
        gv_barrageIncrement = 4;
    }
    else if (autoF6B5ED00_val == 4) {
        // Transmission - SoundLink("THorner03Tychus00025", -1)
        libCamp_gf_SendTransmissionCampaign(UnitFromId(2), SoundLink("THorner03Tychus00025", 0), c_transmissionDurationAdd, 0.0, true);
        gv_barrageIncrement = 1;
    }
    else {
    }
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBarrageQ_Init () {
    gt_TransmissionBarrageQ = TriggerCreate("gt_TransmissionBarrageQ_Func");
    TriggerAddEventUnitAbility(gt_TransmissionBarrageQ, UnitRefFromUnit(UnitFromId(2)), AbilityCommand("OdinBarrage", 0), c_abilEffectStageApproach, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Tychus Notices Raynors Units Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTychusNoticesRaynorsUnitsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionCircle(UnitGetPosition(gv_odin), 6.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 12))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner03Tychus00033", -1)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(2), SoundLink("THorner03Tychus00033", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTychusNoticesRaynorsUnitsQ_Init () {
    gt_TransmissionTychusNoticesRaynorsUnitsQ = TriggerCreate("gt_TransmissionTychusNoticesRaynorsUnitsQ_Func");
    TriggerEnable(gt_TransmissionTychusNoticesRaynorsUnitsQ, false);
    TriggerAddEventTimePeriodic(gt_TransmissionTychusNoticesRaynorsUnitsQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Tychus Takes Break After P04 Base Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTychusTakesBreakAfterP04BaseQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner03Tychus00002", -1)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(2), SoundLink("THorner03Tychus00002", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("THorner03Tychus00003", -1)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(2), SoundLink("THorner03Tychus00003", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(libNtve_gf_DifficultyValueFixed(50.0, 50.0, 25.0, 25.0), c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner03Tychus00041", -1)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(2), SoundLink("THorner03Tychus00041", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTychusTakesBreakAfterP04BaseQ_Init () {
    gt_TransmissionTychusTakesBreakAfterP04BaseQ = TriggerCreate("gt_TransmissionTychusTakesBreakAfterP04BaseQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Tychus Takes Break After P08 Base Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTychusTakesBreakAfterP08BaseQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner03Tychus00005", -1)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(2), SoundLink("THorner03Tychus00005", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("THorner03Tychus00034", -1)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(2), SoundLink("THorner03Tychus00034", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(2.0, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    // Transmission - SoundLink("THorner03Tychus00035", -1)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(2), SoundLink("THorner03Tychus00035", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTychusTakesBreakAfterP08BaseQ_Init () {
    gt_TransmissionTychusTakesBreakAfterP08BaseQ = TriggerCreate("gt_TransmissionTychusTakesBreakAfterP08BaseQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Tychus Takes Break After P05 Base Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTychusTakesBreakAfterP05BaseQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner03Tychus00044", -1)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(2), SoundLink("THorner03Tychus00044", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(libNtve_gf_DifficultyValueFixed(50.0, 50.0, 25.0, 25.0), c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner03Tychus00049", -1)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(2), SoundLink("THorner03Tychus00049", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTychusTakesBreakAfterP05BaseQ_Init () {
    gt_TransmissionTychusTakesBreakAfterP05BaseQ = TriggerCreate("gt_TransmissionTychusTakesBreakAfterP05BaseQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Tychus Takes Break After P06 Base Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTychusTakesBreakAfterP06BaseQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner03Tychus00047", -1)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(2), SoundLink("THorner03Tychus00047", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("THorner03Tychus00056", -1)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(2), SoundLink("THorner03Tychus00056", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(libNtve_gf_DifficultyValueFixed(50.0, 50.0, 25.0, 25.0), c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner03Tychus00057", -1)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(2), SoundLink("THorner03Tychus00057", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTychusTakesBreakAfterP06BaseQ_Init () {
    gt_TransmissionTychusTakesBreakAfterP06BaseQ = TriggerCreate("gt_TransmissionTychusTakesBreakAfterP06BaseQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Odin Approaches P04 Base Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionOdinApproachesP04BaseQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(libNtve_gf_AcquiredTarget()) == "Odin"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner03Tychus00038", -1)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(2), SoundLink("THorner03Tychus00038", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionOdinApproachesP04BaseQ_Init () {
    gt_TransmissionOdinApproachesP04BaseQ = TriggerCreate("gt_TransmissionOdinApproachesP04BaseQ_Func");
    TriggerAddEventUnitAcquiredTarget(gt_TransmissionOdinApproachesP04BaseQ, UnitRefFromUnit(UnitFromId(28)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Odin Charges P08 Base Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionOdinChargesP08BaseQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    SoundPlay(SoundLink("Thor_Movement", 0), PlayerGroupAll(), 100.0, 0.0);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner03Tychus00008", -1)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(2), SoundLink("THorner03Tychus00008", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionOdinChargesP08BaseQ_Init () {
    gt_TransmissionOdinChargesP08BaseQ = TriggerCreate("gt_TransmissionOdinChargesP08BaseQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Odin Charges P05 Base Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionOdinChargesP05BaseQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    SoundPlay(SoundLink("Thor_Movement", 0), PlayerGroupAll(), 100.0, 0.0);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner03Tychus00019", -1)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(2), SoundLink("THorner03Tychus00019", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionOdinChargesP05BaseQ_Init () {
    gt_TransmissionOdinChargesP05BaseQ = TriggerCreate("gt_TransmissionOdinChargesP05BaseQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Odin Charges P06 Base Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionOdinChargesP06BaseQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    SoundPlay(SoundLink("Thor_Movement", 0), PlayerGroupAll(), 100.0, 0.0);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner03Tychus00020", -1)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(2), SoundLink("THorner03Tychus00020", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionOdinChargesP06BaseQ_Init () {
    gt_TransmissionOdinChargesP06BaseQ = TriggerCreate("gt_TransmissionOdinChargesP06BaseQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Odin Charges P07 Base Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionOdinChargesP07BaseQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    SoundPlay(SoundLink("Thor_Movement", 0), PlayerGroupAll(), 100.0, 0.0);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner03Tychus00001", -1)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(2), SoundLink("THorner03Tychus00001", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionOdinChargesP07BaseQ_Init () {
    gt_TransmissionOdinChargesP07BaseQ = TriggerCreate("gt_TransmissionOdinChargesP07BaseQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P04 Base Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP04BaseDestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    if ((UnitGetPropertyFixed(UnitFromId(2), c_unitPropLifePercent, c_unitPropCurrent) == 100.0)) {
        // Transmission - SoundLink("THorner03Tychus00006", -1)
        libCamp_gf_SendTransmissionCampaign(UnitFromId(2), SoundLink("THorner03Tychus00006", 0), c_transmissionDurationAdd, 0.0, true);
    }
    else {
        // Transmission - SoundLink("THorner03Tychus00007", -1)
        libCamp_gf_SendTransmissionCampaign(UnitFromId(2), SoundLink("THorner03Tychus00007", 0), c_transmissionDurationAdd, 0.0, true);
    }
    // Transmission - SoundLink("THorner03Horner00013", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner03Horner00013", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("THorner03Raynor00014", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner03Raynor00014", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP04BaseDestroyedQ_Init () {
    gt_TransmissionP04BaseDestroyedQ = TriggerCreate("gt_TransmissionP04BaseDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P05 Base Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP05BaseDestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_objectiveDestroyDominionBasesCurrent >= 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner03Horner00048", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner03Horner00048", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP05BaseDestroyedQ_Init () {
    gt_TransmissionP05BaseDestroyedQ = TriggerCreate("gt_TransmissionP05BaseDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - P06 Base Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionP06BaseDestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner03Horner00021", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner03Horner00021", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    if ((UnitGroupCount(UnitGroup("Wraith", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 8)) {
        // Transmission - SoundLink("THorner03Raynor00015", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner03Raynor00015", 0), c_transmissionDurationAdd, 0.0, true);
    }
    else {
        // Transmission - SoundLink("THorner03Raynor00039", -1)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner03Raynor00039", 0), c_transmissionDurationAdd, 0.0, true);
    }
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionP06BaseDestroyedQ_Init () {
    gt_TransmissionP06BaseDestroyedQ = TriggerCreate("gt_TransmissionP06BaseDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Yamato The Odin QQ
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionYamatoTheOdinQQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("THorner03Battlecruiser00051", -1)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(2219), SoundLink("THorner03Battlecruiser00051", 0), c_transmissionDurationAdd, 0.0, false);
    gv_yamatoTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    // Transmission - SoundLink("THorner03Tychus00050", -1)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(2), SoundLink("THorner03Tychus00050", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionYamatoTheOdinQQ_Init () {
    gt_TransmissionYamatoTheOdinQQ = TriggerCreate("gt_TransmissionYamatoTheOdinQQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Campaign Tips Q
//--------------------------------------------------------------------------------------------------
bool gt_CampaignTipsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateStorymodeTips();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CampaignTipsQ_Init () {
    gt_CampaignTipsQ = TriggerCreate("gt_CampaignTipsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Repair Odin Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_RepairOdinTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Horner03_OdinRepair", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RepairOdinTipQ_Init () {
    gt_RepairOdinTipQ = TriggerCreate("gt_RepairOdinTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Unit: Wraith Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_NewUnitWraithTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Horner03_Wraith", libNtve_ge_TipType_NewUnit, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerExecute(gt_NewAbilityCloakTipQ, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewUnitWraithTipQ_Init () {
    gt_NewUnitWraithTipQ = TriggerCreate("gt_NewUnitWraithTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Ability: Cloak Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_NewAbilityCloakTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Horner03_Cloak", libNtve_ge_TipType_NewAbility, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewAbilityCloakTipQ_Init () {
    gt_NewAbilityCloakTipQ = TriggerCreate("gt_NewAbilityCloakTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Odin Health Below 30% (Hard)
//--------------------------------------------------------------------------------------------------
bool gt_AchievementOdinHealthBelow30Hard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Odin"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) <= 30.0)) {
        gv_achievementOdinHealthBelow30Percent = true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementOdinHealthBelow30Hard_Init () {
    gt_AchievementOdinHealthBelow30Hard = TriggerCreate("gt_AchievementOdinHealthBelow30Hard_Func");
    TriggerEnable(gt_AchievementOdinHealthBelow30Hard, false);
    TriggerAddEventUnitDamaged(gt_AchievementOdinHealthBelow30Hard, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Odin Health Repaired
//--------------------------------------------------------------------------------------------------
bool gt_OdinHealthRepaired_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p02_TYCHUS))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Odin"))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) > UnitGetCustomValue(EventUnit(), 1))) {
        gv_sCVHealingPerformedOnOdin += (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) - UnitGetCustomValue(EventUnit(), 1));
    }

    UnitSetCustomValue(EventUnit(), 1, UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OdinHealthRepaired_Init () {
    gt_OdinHealthRepaired = TriggerCreate("gt_OdinHealthRepaired_Func");
    TriggerAddEventUnitProperty(gt_OdinHealthRepaired, null, c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Destroy All Bases Complete
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDestroyAllBasesComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(2), true);
    Wait(5.0, c_timeGame);
    libNtve_gf_ShowHideBossBar(false, gv_odinBossBar);
    TriggerExecute(gt_ObjectiveDestroyDominionBasesComplete, true, true);
    libCamp_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDestroyAllBasesComplete_Init () {
    gt_VictoryDestroyAllBasesComplete = TriggerCreate("gt_VictoryDestroyAllBasesComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((ObjectiveGetState(gv_objectiveDestroyDominionBases) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveDestroytheLoki) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveDevourerSamples) == c_objectiveStateCompleted)) {
        AchievementAward(gv_p01_USER, "THorner03_1");
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1) && (gv_achievementOdinHealthBelow30Percent == false)) {
        AchievementAward(gv_p01_USER, "THorner03_3");
    }

    TextExpressionSetToken("Param/Expression/D027731D", "A", FixedToText(gv_sCVHealingPerformedOnOdin, c_fixedPrecisionAny));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/D027731D"), false);
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_sCVHealingPerformedOnOdin < 5001.0)) {
        AchievementAward(gv_p01_USER, "Anniversary_THorner03");
        TriggerDebugOutput(1, StringExternal("Param/Value/9C67BB40"), false);
    }

    VictoryPanelAddAchievement("THorner03_1");
    VictoryPanelAddAchievement("THorner03_2");
    VictoryPanelAddAchievement("THorner03_3");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/6247E812"), IntToText(libNtve_gf_UnitGetPropertyKills(gv_odin, c_unitPropCurrent)));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/4001BD40"), FixedToText(gv_sCVHealingPerformedOnOdin, 0));
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/9B53DC56"), (IntToText(gv_devourerSamplesFound) + StringExternal("Param/Value/07A3982F") + StringExternal("Param/Value/3B4E4D40")));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/EB0F053F"), IntToText(gv_devourerSamplesFound));
    libCamp_gf_EndCampaignMission(gv_p01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, 0), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    libNtve_gf_ShowHideBossBar(false, gv_odinBossBar);
    TriggerEnable(gt_OdinLowHealthWarning, false);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/4B6C8309"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Odin Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatOdinDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((EventUnit() == UnitFromId(2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    libNtve_gf_ShowHideBossBar(false, gv_odinBossBar);
    TriggerEnable(gt_OdinLowHealthWarning, false);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/8D543226"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatOdinDead_Init () {
    gt_DefeatOdinDead = TriggerCreate("gt_DefeatOdinDead_Func");
    TriggerAddEventUnitAbility(gt_DefeatOdinDead, null, AbilityCommand("OdinWreckage", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_EndCampaignMission(gv_p01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    libCamp_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_p01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_p01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Steal the Odin Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveStealtheOdinCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/85BC6DAF"), StringExternal("Param/Value/4DF1D7BC"), c_objectiveStateActive, true);
    gv_objectiveStealTheOdin = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_THorner03Objective1, ObjectiveLastCreated(), StringExternal("Param/Value/67435239"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/83B223A5"), StringExternal("Param/Value/11837275"), c_objectiveStateActive, true);
    gv_objectiveTychusMustSurvive = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_THorner03Objective2, ObjectiveLastCreated(), StringExternal("Param/Value/A2EBB206"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveStealtheOdinCreateQ_Init () {
    gt_ObjectiveStealtheOdinCreateQ = TriggerCreate("gt_ObjectiveStealtheOdinCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Steal the Odin Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveStealtheOdinComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveStealtheOdinCreateQ, true, false);
    ObjectiveSetState(gv_objectiveStealTheOdin, c_objectiveStateCompleted);
    ObjectiveSetState(gv_objectiveTychusMustSurvive, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveStealtheOdinComplete_Init () {
    gt_ObjectiveStealtheOdinComplete = TriggerCreate("gt_ObjectiveStealtheOdinComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Steal the Odin Failed - Tychus
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveStealtheOdinFailedTychus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveStealtheOdinCreateQ, true, false);
    ObjectiveSetState(gv_objectiveTychusMustSurvive, c_objectiveStateFailed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveStealtheOdinFailedTychus_Init () {
    gt_ObjectiveStealtheOdinFailedTychus = TriggerCreate("gt_ObjectiveStealtheOdinFailedTychus_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Dominion Bases Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyDominionBasesCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/B6A1D7EC"), StringExternal("Param/Value/35A07756"), c_objectiveStateActive, true);
    gv_objectiveDestroyDominionBases = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_THorner03Objective3, ObjectiveLastCreated(), StringExternal("Param/Value/1AAF573D"));
    ObjectiveCreate(StringExternal("Param/Value/9A3A5393"), StringExternal("Param/Value/4F1324DA"), c_objectiveStateActive, true);
    gv_objectiveOdinMustSurvive = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_THorner03Objective4, ObjectiveLastCreated(), StringExternal("Param/Value/FD0C270E"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyDominionBasesCreateQ_Init () {
    gt_ObjectiveDestroyDominionBasesCreateQ = TriggerCreate("gt_ObjectiveDestroyDominionBasesCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Dominion Bases Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyDominionBasesComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyDominionBasesCreateQ, true, false);
    ObjectiveSetState(gv_objectiveDestroyDominionBases, c_objectiveStateCompleted);
    ObjectiveSetState(gv_objectiveOdinMustSurvive, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyDominionBasesComplete_Init () {
    gt_ObjectiveDestroyDominionBasesComplete = TriggerCreate("gt_ObjectiveDestroyDominionBasesComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Dominion Bases Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyDominionBasesUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyDominionBasesCreateQ, true, false);
    gv_objectiveDestroyDominionBasesCurrent = (gv_objectiveDestroyDominionBasesCurrent + 1);
    ObjectiveSetName(gv_objectiveDestroyDominionBases, (StringExternal("Param/Value/EA3B8510") + IntToText(gv_objectiveDestroyDominionBasesCurrent) + StringExternal("Param/Value/189A67E4") + IntToText(gv_objectiveDestroyDominionBasesQuota) + StringExternal("Param/Value/46DDFDA9")));
    if ((gv_objectiveDestroyDominionBasesCurrent == gv_objectiveDestroyDominionBasesQuota)) {
        TriggerExecute(gt_VictoryDestroyAllBasesComplete, true, false);
    }
    else {
        Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyDominionBasesUpdate_Init () {
    gt_ObjectiveDestroyDominionBasesUpdate = TriggerCreate("gt_ObjectiveDestroyDominionBasesUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy the Loki Create Hidden
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroytheLokiCreateHidden_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveCreate(StringExternal("Param/Value/932ED8C2"), StringExternal("Param/Value/16ADA481"), c_objectiveStateHidden, false);
    gv_objectiveDestroytheLoki = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_THorner03Objective5, ObjectiveLastCreated(), StringExternal("Param/Value/94E1BA17"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroytheLokiCreateHidden_Init () {
    gt_ObjectiveDestroytheLokiCreateHidden = TriggerCreate("gt_ObjectiveDestroytheLokiCreateHidden_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy the Loki Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroytheLokiComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroytheLokiCreateHidden, true, false);
    ObjectiveSetState(gv_objectiveDestroytheLoki, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroytheLokiComplete_Init () {
    gt_ObjectiveDestroytheLokiComplete = TriggerCreate("gt_ObjectiveDestroytheLokiComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy the Loki Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroytheLokiFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroytheLokiCreateHidden, true, false);
    ObjectiveSetState(gv_objectiveDestroytheLoki, c_objectiveStateFailed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroytheLokiFailed_Init () {
    gt_ObjectiveDestroytheLokiFailed = TriggerCreate("gt_ObjectiveDestroytheLokiFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Devourer Samples Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDevourerSamplesCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate((StringExternal("Param/Value/15C1693C") + IntToText(gv_devourerSamplesFound) + StringExternal("Param/Value/FAD28B57") + IntToText(gv_devourerSamplesTotal) + StringExternal("Param/Value/9AE22435")), StringExternal("Param/Value/9337876A"), c_objectiveStateActive, false);
    gv_objectiveDevourerSamples = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_THorner03Objective6, ObjectiveLastCreated(), StringExternal("Param/Value/2504059C"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDevourerSamplesCreateQ_Init () {
    gt_ObjectiveDevourerSamplesCreateQ = TriggerCreate("gt_ObjectiveDevourerSamplesCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Devourer Sample Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDevourerSampleUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "DevourerTissueSampleTube"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_devourerSamplesFound += 1;
    TriggerExecute(gt_ObjectiveDevourerSamplesCreateQ, true, false);
    UIAlertPoint("Trigger", gv_p01_USER, StringExternal("Param/Value/FAEB47D8"), null, UnitGetPosition(EventUnit()));
    libCamp_gf_DisplayResearchPointsGiventoPlayer(libCamp_ge_StoryResearchObject_ResearchObjectFindDevourerTissueSamples, EventUnit(), gv_p01_USER);
    UnitKill(EventUnit());
    ObjectiveSetName(gv_objectiveDevourerSamples, (StringExternal("Param/Value/D44C9615") + IntToText(gv_devourerSamplesFound) + StringExternal("Param/Value/16047064") + IntToText(gv_devourerSamplesTotal) + StringExternal("Param/Value/3CBF51DD")));
    if ((gv_devourerSamplesFound == gv_devourerSamplesTotal)) {
        TriggerExecute(gt_ObjectiveCerebrateSamplesComplete, true, true);
    }

    TriggerExecute(gt_TransmissionFindCerebrateSamplesQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDevourerSampleUpdate_Init () {
    gt_ObjectiveDevourerSampleUpdate = TriggerCreate("gt_ObjectiveDevourerSampleUpdate_Func");
    TriggerAddEventUnitAbility(gt_ObjectiveDevourerSampleUpdate, null, AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Devourer Samples Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCerebrateSamplesComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDevourerSamplesCreateQ, true, false);
    ObjectiveSetState(gv_objectiveDevourerSamples, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCerebrateSamplesComplete_Init () {
    gt_ObjectiveCerebrateSamplesComplete = TriggerCreate("gt_ObjectiveCerebrateSamplesComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Devourer Tissue Sample
//--------------------------------------------------------------------------------------------------
bool gt_RemoveDevourerTissueSample_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "DevourerTissueDoodad"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveDevourerTissueSample_Init () {
    gt_RemoveDevourerTissueSample = TriggerCreate("gt_RemoveDevourerTissueSample_Func");
    TriggerAddEventUnitAbility(gt_RemoveDevourerTissueSample, null, AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA1F48B39_g;
    int autoA1F48B39_u;
    unit autoA1F48B39_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_StartGameWarehouse);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    gv_inCinematic = true;
    gv_gameOver = true;
    UnitPauseAll(true);
    AITimePause(true);
    GameTimeOfDayPause(true);
    libNtve_gf_ShowHideUnit(UnitFromId(2), false);
    autoA1F48B39_g = UnitGroup("AutoTurret", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA1F48B39_u = UnitGroupCount(autoA1F48B39_g, c_unitCountAll);
    for (;; autoA1F48B39_u -= 1) {
        autoA1F48B39_var = UnitGroupUnitFromEnd(autoA1F48B39_g, autoA1F48B39_u);
        if (autoA1F48B39_var == null) { break; }
        libNtve_gf_PauseUnit(autoA1F48B39_var, false);
    }
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_BriefingScene00, true, true);
    TriggerExecute(gt_BriefingScene01, true, true);
    TriggerExecute(gt_BriefingScene02, true, true);
    TriggerExecute(gt_BriefingScene03, true, true);
    TriggerExecute(gt_BriefingScene04, true, true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UnitPauseAll(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "BreachingCharge", 0, gv_p01_USER, PointFromId(923));
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "BreachingCharge", 0, gv_p01_USER, PointFromId(926));
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "BreachingCharge", 0, gv_p01_USER, PointFromId(927));
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    libNtve_gf_CreateUnitsAtPoint2(1, "TychusChaingun", 0, gv_p01_USER, PointFromId(967));
    gv_briefingTychus = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p01_USER, PointFromId(1348));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p01_USER, PointFromId(1353));
    TriggerExecute(gt_BriefingScene00Tychus, true, false);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(764), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(922), 15.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_THorner03_00");
    SoundPlay(SoundLink("THorner03BriefingHorner00001", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner03BriefingHorner00001", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner03BriefingHorner00001", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00_Init () {
    gt_BriefingScene00 = TriggerCreate("gt_BriefingScene00_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00 - Tychus
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00Tychus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6FF7B51E_g;
    int auto6FF7B51E_u;
    unit auto6FF7B51E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(3.5, c_timeReal);
    UnitIssueOrder(gv_briefingTychus, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(974)), c_orderQueueReplace);
    auto6FF7B51E_g = UnitGroup("Marine", gv_p01_USER, RegionCircle(UnitGetPosition(gv_briefingTychus), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6FF7B51E_u = UnitGroupCount(auto6FF7B51E_g, c_unitCountAll);
    for (;; auto6FF7B51E_u -= 1) {
        auto6FF7B51E_var = UnitGroupUnitFromEnd(auto6FF7B51E_g, auto6FF7B51E_u);
        if (auto6FF7B51E_var == null) { break; }
        UnitIssueOrder(auto6FF7B51E_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(974)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00Tychus_Init () {
    gt_BriefingScene00Tychus = TriggerCreate("gt_BriefingScene00Tychus_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingScene01Base, true, false);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(958), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(963), 14.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_THorner03_01");
    SoundPlay(SoundLink("THorner03BriefingHorner00012", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner03BriefingHorner00012", 0))), c_timeReal);
    SoundPlay(SoundLink("THorner03BriefingRaynor00013", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner03BriefingRaynor00013", 0))), c_timeReal);
    SoundPlay(SoundLink("THorner03BriefingRaynor00005", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner03BriefingRaynor00005", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner03BriefingHorner00012", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner03BriefingRaynor00013", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner03BriefingRaynor00005", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01_Init () {
    gt_BriefingScene01 = TriggerCreate("gt_BriefingScene01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01 - Base
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01Base_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(5, "Marine", 0, gv_p04_DOMINION_INFANTRY_A, PointFromId(983));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1824)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2100)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2101)), c_orderQueueAddToEnd);
    Wait(2.0, c_timeReal);
    libNtve_gf_CreateUnitsAtPoint2(5, "Marine", 0, gv_p04_DOMINION_INFANTRY_A, PointFromId(983));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1824)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2100)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2101)), c_orderQueueAddToEnd);
    Wait(2.0, c_timeReal);
    libNtve_gf_CreateUnitsAtPoint2(5, "Marine", 0, gv_p04_DOMINION_INFANTRY_A, PointFromId(983));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1824)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2100)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2101)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01Base_Init () {
    gt_BriefingScene01Base = TriggerCreate("gt_BriefingScene01Base_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 02
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(828), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(965), 14.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_THorner03_02");
    SoundPlay(SoundLink("THorner03BriefingHorner00014", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner03BriefingHorner00014", 0))), c_timeReal);
    SoundPlay(SoundLink("THorner03BriefingHorner00004", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner03BriefingHorner00004", 0))), c_timeReal);
    SoundPlay(SoundLink("THorner03BriefingHorner00002", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner03BriefingHorner00002", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner03BriefingHorner00014", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner03BriefingHorner00004", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner03BriefingHorner00002", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene02_Init () {
    gt_BriefingScene02 = TriggerCreate("gt_BriefingScene02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 03
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(UnitFromId(1132));
    UnitSetOwner(gv_odin, gv_p03_DOMINION_WAREHOUSE, true);
    TriggerExecute(gt_BriefingScene03OdinBuild, true, false);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(659), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(646), 20.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_THorner03_03");
    SoundPlay(SoundLink("THorner03BriefingRaynor00015", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner03BriefingRaynor00015", 0))), c_timeReal);
    SoundPlay(SoundLink("THorner03BriefingHorner00016", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner03BriefingHorner00016", 0))), c_timeReal);
    SoundPlay(SoundLink("THorner03BriefingRaynor00017", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner03BriefingRaynor00017", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner03BriefingRaynor00015", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner03BriefingHorner00016", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner03BriefingRaynor00017", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene03_Init () {
    gt_BriefingScene03 = TriggerCreate("gt_BriefingScene03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 03 - Odin Build
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene03OdinBuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(109)), c_animNameDefault, "Stand Work End", c_animFlagNonLooping, c_animTimeDefault);
    Wait(12.832, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(109)), c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_ShowHideUnit(gv_odin, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene03OdinBuild_Init () {
    gt_BriefingScene03OdinBuild = TriggerCreate("gt_BriefingScene03OdinBuild_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 04
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene04_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingScene04Entry, true, false);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(26), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(874), 15.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_THorner03_04");
    SoundPlay(SoundLink("THorner03BriefingHorner00018", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner03BriefingHorner00018", 0))), c_timeReal);
    SoundPlay(SoundLink("THorner03BriefingTychus00003", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner03BriefingTychus00003", 0))), c_timeReal);
    SoundPlay(SoundLink("THorner03BriefingTychus00019", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.0 * SoundLengthSync(SoundLink("THorner03BriefingTychus00019", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner03BriefingHorner00018", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner03BriefingTychus00003", 0))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("THorner03BriefingTychus00019", 0))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene04_Init () {
    gt_BriefingScene04 = TriggerCreate("gt_BriefingScene04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 04 - Entry
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene04Entry_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC18E1960_g;
    int autoC18E1960_u;
    unit autoC18E1960_var;
    unitgroup autoDA726F61_g;
    int autoDA726F61_u;
    unit autoDA726F61_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(UnitFromId(1035));
    UnitKill(UnitFromId(1034));
    CameraShakeStart(gv_p01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 2.0, 100.0, 1.0);
    SoundPlay(SoundLink("Barracks_Explode", 1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "ExplodingBarrelLarge", 0, 0, PointFromId(74));
    UnitKill(UnitLastCreated());
    Wait(0.15, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "ExplodingBarrelLarge", 0, 0, PointFromId(968));
    UnitKill(UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "ExplodingBarrelLarge", 0, 0, PointFromId(975));
    UnitKill(UnitLastCreated());
    Wait(0.15, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "ExplodingBarrelLarge", 0, 0, PointFromId(976));
    UnitKill(UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "ExplodingBarrelLarge", 0, 0, PointFromId(2102));
    UnitKill(UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "ExplodingBarrelLarge", 0, 0, PointFromId(2103));
    Wait(0.25, c_timeGame);
    UnitKill(UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "ExplodingBarrelLarge", 0, 0, PointFromId(2104));
    UnitKill(UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "ExplodingBarrelLarge", 0, 0, PointFromId(2106));
    UnitKill(UnitLastCreated());
    Wait(0.15, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "ExplodingBarrelLarge", 0, 0, PointFromId(2105));
    UnitKill(UnitLastCreated());
    Wait(1.0, c_timeGame);
    autoC18E1960_g = UnitGroup(null, c_playerAny, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC18E1960_u = UnitGroupCount(autoC18E1960_g, c_unitCountAll);
    for (;; autoC18E1960_u -= 1) {
        autoC18E1960_var = UnitGroupUnitFromEnd(autoC18E1960_g, autoC18E1960_u);
        if (autoC18E1960_var == null) { break; }
        libNtve_gf_PauseUnit(autoC18E1960_var, false);
    }
    Wait(1.0, c_timeGame);
    libNtve_gf_PauseUnit(UnitFromId(4), false);
    UnitIssueOrder(UnitFromId(4), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(569)), c_orderQueueReplace);
    Wait(0.75, c_timeGame);
    autoDA726F61_g = UnitGroup(null, gv_p01_USER, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDA726F61_u = UnitGroupCount(autoDA726F61_g, c_unitCountAll);
    for (;; autoDA726F61_u -= 1) {
        autoDA726F61_var = UnitGroupUnitFromEnd(autoDA726F61_g, autoDA726F61_u);
        if (autoDA726F61_var == null) { break; }
        libNtve_gf_PauseUnit(autoDA726F61_var, false);
    }
    UnitGroupIssueOrder(UnitGroup(null, gv_p01_USER, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingRelativePoint(AbilityCommand("attack", 0), PointFromId(569)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene04Entry_Init () {
    gt_BriefingScene04Entry = TriggerCreate("gt_BriefingScene04Entry_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto56DDDBC2_g;
    int auto56DDDBC2_u;
    unit auto56DDDBC2_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    libNtve_gf_StoreUnitSelection(gv_p01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitPauseAll(true);
    auto56DDDBC2_g = gv_raynorsRaidingForce;
    auto56DDDBC2_u = UnitGroupCount(auto56DDDBC2_g, c_unitCountAll);
    for (;; auto56DDDBC2_u -= 1) {
        auto56DDDBC2_var = UnitGroupUnitFromEnd(auto56DDDBC2_g, auto56DDDBC2_u);
        if (auto56DDDBC2_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto56DDDBC2_var, false);
    }
    libNtve_gf_ShowHideUnit(UnitFromId(4), true);
    UnitIssueOrder(UnitFromId(4), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetPosition(UnitFromId(4), PointFromId(174), false);
    UnitSetFacing(UnitFromId(4), PointGetFacing(PointFromId(174)), 0.0);
    libNtve_gf_PauseUnit(UnitFromId(4), false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(341), false);
    libNtve_gf_ChangeUnitDamage(UnitFromId(341), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(39), 0.0, -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_midCinematicCompleted = false;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner03MusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1029), 12.0, -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(109)), c_animNameDefault, "Stand Work End", c_animFlagNonLooping, c_animTimeDefault);
    Wait(12.45, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(109)), c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_odin), c_animNameDefault);
    libNtve_gf_ShowHideUnit(gv_odin, true);
    UnitFlashSelection(UnitFromId(4), 8.0);
    // Transmission - SoundLink("THorner03Tychus00011", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner03Tychus00011", 0), c_transmissionDurationAdd, 0.0, false);
    Wait(3.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(2)), c_animNameDefault, "Pickup", c_animFlagNonLooping, c_animTimeDefault);
    UnitIssueOrder(UnitFromId(4), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(2))), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    SoundPlay(SoundLink("Medivac_Load", 0), PlayerGroupAll(), 100.0, 0.0);
    UnitRemove(UnitFromId(4));
    UnitSetOwner(gv_odin, gv_p02_TYCHUS, true);
    Wait(2.0, c_timeGame);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(21), 0.0, -1, 10, true);
    libNtve_gf_PauseUnit(gv_odin, false);
    UnitIssueOrder(gv_odin, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(633)), c_orderQueueReplace);
    UnitIssueOrder(gv_odin, OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(341)), c_orderQueueAddToEnd);
    TransmissionWait(TransmissionLastSent(), 0.0);
    // Transmission - SoundLink("THorner03Raynor00017", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner03Raynor00017", 0), c_transmissionDurationAdd, 0.0, false);
    Wait(9.0, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(30), 0.0, -1, 10, true);
    Wait(5.0, c_timeGame);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Cinematic);
    // Transmission - SoundLink("THorner03Tychus00018", -1)
    libCamp_gf_SendTransmissionCampaign(UnitFromId(2), SoundLink("THorner03Tychus00018", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("THorner03Raynor00040", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner03Raynor00040", 0), c_transmissionDurationAdd, 0.0, true);
    UnitIssueOrder(gv_odin, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(355)), c_orderQueueReplace);
    UnitIssueOrder(gv_odin, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(650)), c_orderQueueAddToEnd);
    // Transmission - SoundLink("THorner03Horner00042", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner03Horner00042", 0), c_transmissionDurationAdd, 0.0, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "CommandCenterFlying", 0, gv_p01_USER, PointFromId(961));
    UnitGroupAdd(gv_midGameActors, UnitLastCreated());
    UnitCargoCreate(UnitLastCreated(), "SCV", 5);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitCargoLastCreatedGroup(), gv_midGameActors);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("CommandCenterLand", 0), UnitGetPosition(UnitFromId(73))), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("CommandCenterTransport", 1)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "BarracksFlying", 0, gv_p01_USER, PointFromId(990));
    UnitGroupAdd(gv_midGameActors, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("BarracksLand", 0), UnitGetPosition(UnitFromId(3))), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "FactoryFlying", 0, gv_p01_USER, PointFromId(989));
    UnitGroupAdd(gv_midGameActors, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("FactoryLand", 0), UnitGetPosition(UnitFromId(148))), c_orderQueueReplace);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(959), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(960), 15.0, -1, 10, true);
    // Transmission - SoundLink("THorner03Raynor00043", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner03Raynor00043", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    Wait(3.0, c_timeGame);
    gv_midCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_midCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(lv_fadeDuration, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup autoBE805516_g;
    int autoBE805516_u;
    unit autoBE805516_var;
    unitgroup autoD3CF4B0C_g;
    int autoD3CF4B0C_u;
    unit autoD3CF4B0C_var;
    unitgroup auto307109CE_g;
    int auto307109CE_u;
    unit auto307109CE_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_p02_TYCHUS, gv_p04_DOMINION_INFANTRY_A, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(109)), c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    autoBE805516_g = gv_midGameActors;
    autoBE805516_u = UnitGroupCount(autoBE805516_g, c_unitCountAll);
    for (;; autoBE805516_u -= 1) {
        autoBE805516_var = UnitGroupUnitFromEnd(autoBE805516_g, autoBE805516_u);
        if (autoBE805516_var == null) { break; }
        UnitRemove(autoBE805516_var);
    }
    UnitRemove(UnitFromId(4));
    libNtve_gf_MakeUnitInvulnerable(gv_odin, false);
    libNtve_gf_ShowHideUnit(gv_odin, true);
    libNtve_gf_RescueUnit(UnitFromId(2), gv_p02_TYCHUS, true);
    UnitSetPosition(gv_odin, PointFromId(650), true);
    UnitIssueOrder(UnitFromId(2), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(650)), c_orderQueueReplace);
    UnitSetFacing(gv_odin, PointGetFacing(PointFromId(650)), 0.0);
    UnitIssueOrder(UnitFromId(2), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    UnitRemove(UnitFromId(430));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Refinery", 0, gv_p01_USER, PointFromId(2249));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropResources, 2400.0);
    UnitRemove(UnitFromId(341));
    libNtve_gf_ShowHideUnit(UnitFromId(935), true);
    autoD3CF4B0C_g = UnitGroup(null, gv_p01_USER, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoD3CF4B0C_u = UnitGroupCount(autoD3CF4B0C_g, c_unitCountAll);
    for (;; autoD3CF4B0C_u -= 1) {
        autoD3CF4B0C_var = UnitGroupUnitFromEnd(autoD3CF4B0C_g, autoD3CF4B0C_u);
        if (autoD3CF4B0C_var == null) { break; }
        libNtve_gf_PauseUnit(autoD3CF4B0C_var, false);
        libNtve_gf_ShowHideUnit(autoD3CF4B0C_var, true);
    }
    auto307109CE_g = gv_raynorsRaidingForce;
    auto307109CE_u = UnitGroupCount(auto307109CE_g, c_unitCountAll);
    for (;; auto307109CE_u -= 1) {
        auto307109CE_var = UnitGroupUnitFromEnd(auto307109CE_g, auto307109CE_u);
        if (auto307109CE_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto307109CE_var, true);
        UnitSetPosition(auto307109CE_var, PointFromId(1221), true);
        UnitIssueOrder(auto307109CE_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(37)), c_orderQueueReplace);
    }
    UnitPauseAll(false);
    libNtve_gf_ShowHideUnit(UnitFromId(292), false);
    libNtve_gf_ShowHideUnit(UnitFromId(739), false);
    libNtve_gf_ShowHideUnit(UnitFromId(8), false);
    libNtve_gf_ShowHideUnit(UnitFromId(738), false);
    libNtve_gf_PauseUnit(UnitFromId(292), true);
    libNtve_gf_PauseUnit(UnitFromId(8), true);
    libNtve_gf_PauseUnit(UnitFromId(738), true);
    libNtve_gf_PauseUnit(UnitFromId(739), true);
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.5, c_timeReal);
    CameraApplyInfo(gv_p01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, true);
    VisRevealArea(gv_p01_USER, RegionFromId(4), 0.1, false);
    if ((gv_midCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_p01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(873), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(lv_fadeDuration, c_timeReal);
    gv_inCinematic = false;
    TriggerExecute(gt_StartGameEscort, true, false);
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/837C87D2"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Valhalla Door Damage
//--------------------------------------------------------------------------------------------------
bool gt_MidValhallaDoorDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_door;

    // Automatic Variable Declarations
    fixed auto92EDC9A6_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_door = UnitFromId(341);
    UnitSetCustomValue(lv_door, 0, (UnitGetCustomValue(lv_door, 0) + 1.0));
    auto92EDC9A6_val = UnitGetCustomValue(lv_door, 0);
    if (auto92EDC9A6_val == 2.0) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_door), c_animNameDefault, "Stand A Start", c_animFlagNonLooping, c_animTimeDefault);
    }
    else if (auto92EDC9A6_val == 4.0) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_door), c_animNameDefault, "Stand B Start", c_animFlagNonLooping, c_animTimeDefault);
    }
    else if (auto92EDC9A6_val == 6.0) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_door), c_animNameDefault, "Stand C Start", c_animFlagNonLooping, c_animTimeDefault);
    }
    else if (auto92EDC9A6_val == 8.0) {
        TriggerEnable(TriggerGetCurrent(), false);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_door), c_animNameDefault, "Stand D Start", c_animFlagNonLooping, c_animTimeDefault);
        Wait(0.6, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_door), c_animNameDefault, "Dead", c_animFlagPlayForever, c_animTimeDefault);
        UnitIssueOrder(gv_odin, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        Wait(3.0, c_timeGame);
        UnitRemove(UnitFromId(341));
        libNtve_gf_ShowHideUnit(UnitFromId(935), true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidValhallaDoorDamage_Init () {
    gt_MidValhallaDoorDamage = TriggerCreate("gt_MidValhallaDoorDamage_Func");
    TriggerAddEventUnitDamaged(gt_MidValhallaDoorDamage, UnitRefFromUnit(UnitFromId(341)), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto406000C3_g;
    int auto406000C3_u;
    unit auto406000C3_var;
    unitgroup autoF263842C_g;
    int autoF263842C_u;
    unit autoF263842C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_p01_USER);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitPauseAll(true);
    gv_victoryHiddenUnitGroup = UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto406000C3_g = gv_victoryHiddenUnitGroup;
    auto406000C3_u = UnitGroupCount(auto406000C3_g, c_unitCountAll);
    for (;; auto406000C3_u -= 1) {
        auto406000C3_var = UnitGroupUnitFromEnd(auto406000C3_g, auto406000C3_u);
        if (auto406000C3_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto406000C3_var, false);
    }
    autoF263842C_g = UnitGroup(null, gv_p07_DOMINION_STARPORT_B, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF263842C_u = UnitGroupCount(autoF263842C_g, c_unitCountAll);
    for (;; autoF263842C_u -= 1) {
        autoF263842C_var = UnitGroupUnitFromEnd(autoF263842C_g, autoF263842C_u);
        if (autoF263842C_var == null) { break; }
        UnitRemove(autoF263842C_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1030), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(1031), 15.0, -1, 10, true);
    GameSetBackground(c_backgroundFixed, "BraxisAlphaSkyBox", 100.0);
    libNtve_gf_PauseUnit(gv_odin, false);
    libNtve_gf_MakeUnitInvulnerable(gv_odin, true);
    UnitSetPosition(gv_odin, PointFromId(2250), false);
    UnitSetFacing(gv_odin, PointGetFacing(PointFromId(160)), 0.0);
    UnitIssueOrder(gv_odin, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(160)), c_orderQueueReplace);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner03MusicOutro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gv_victoryCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(1.0, c_timeReal);
    // Transmission - SoundLink("THorner03Horner00012", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner03Horner00012", 0), c_transmissionDurationAdd, 0.0, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(2)), c_animNameDefault, "Stand Victory", c_animFlagNonLooping, c_animTimeDefault);
    // Transmission - SoundLink("THorner03Tychus00016", -1)
    libCamp_gf_SendTransmissionCampaign(gv_odin, SoundLink("THorner03Tychus00016", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("THorner03Raynor00004", -1)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("THorner03Raynor00004", 0), c_transmissionDurationAdd, 0.0, true);
    gv_victoryCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victoryCinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(lv_fadeDuration, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04Music_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulty_Init();
    gt_Init07Help_Init();
    gt_IntroSequence_Init();
    gt_StartGameWarehouse_Init();
    gt_WarehouseBullies1_Init();
    gt_WarehouseBullies2_Init();
    gt_WarehouseBullies3_Init();
    gt_TychusMove1Q_Init();
    gt_TychusMove2_Init();
    gt_TychusMove3_Init();
    gt_DefeatTychusDead_Init();
    gt_DefeatEscortingUnitsDead_Init();
    gt_VictoryWarehouseDudesKilled_Init();
    gt_StartGameEscort_Init();
    gt_CreateOdinBossBar_Init();
    gt_OdinLowHealthWarning_Init();
    gt_OdinHealthLowWarnPlayer_Init();
    gt_OdinHealthLowSoundFX_Init();
    gt_OdinGoGoGo_Init();
    gt_BattlecruiserSpawnAttackOdin_Init();
    gt_RemoveBattlecruiser1Ping_Init();
    gt_RemoveBattlecruiser2Ping_Init();
    gt_WraithIntro_Init();
    gt_AfterWraithIntroQ_Init();
    gt_OdinRampageBegins_Init();
    gt_WraithGetsClosetoDetectorQ_Init();
    gt_KillDetectorSpottedPing_Init();
    gt_LokiActivates_Init();
    gt_LokiDestroyed_Init();
    gt_StartAI_Init();
    gt_StartAIOverTime_Init();
    gt_AIGiveMinerals_Init();
    gt_AIGiveGas_Init();
    gt_OdinApproachesP04Base_Init();
    gt_P04AttackWaves_Init();
    gt_P04BaseisDying_Init();
    gt_P04BaseDestroyed_Init();
    gt_OdinDonewithP04Base_Init();
    gt_TychusBreakAfterP04Base_Init();
    gt_OdinApproachesP08Base_Init();
    gt_P08AttackWaves_Init();
    gt_P08Baseisdying_Init();
    gt_P08BaseDestroyed_Init();
    gt_OdinDonewithP08Base_Init();
    gt_SaveGameAfterP08Base_Init();
    gt_OdinApproachesP05Base_Init();
    gt_P05AttackWaves_Init();
    gt_P05BaseisDying_Init();
    gt_P05BaseDestroyed_Init();
    gt_OdinDonewithP05Base_Init();
    gt_OdinApproachesP06Base_Init();
    gt_P06AttackWaves_Init();
    gt_P06BaseisDying_Init();
    gt_P06BaseDestroyed_Init();
    gt_OdinDonewithP06Base_Init();
    gt_SaveGameAfterP06Base_Init();
    gt_OdinApproachesP07Base_Init();
    gt_P07AttackWaves_Init();
    gt_BattlecruisersYamatoOdin_Init();
    gt_BattlecruiserKilledWhileTalking_Init();
    gt_OdinNukesP07Q_Init();
    gt_NukePan_Init();
    gt_P07BaseDestroyed_Init();
    gt_TransmissionWarehouseAutoTurretsQ_Init();
    gt_TransmissionWarehouseBullies1AllDeadQ_Init();
    gt_TransmissionFindCerebrateSamplesQ_Init();
    gt_TransmissionBattlecruiserSpawnAttackOdinQ_Init();
    gt_TransmissionFirstBarrageQ_Init();
    gt_TransmissionFirstBarrageCompleteQ_Init();
    gt_TransmissionBarrageQ_Init();
    gt_TransmissionTychusNoticesRaynorsUnitsQ_Init();
    gt_TransmissionTychusTakesBreakAfterP04BaseQ_Init();
    gt_TransmissionTychusTakesBreakAfterP08BaseQ_Init();
    gt_TransmissionTychusTakesBreakAfterP05BaseQ_Init();
    gt_TransmissionTychusTakesBreakAfterP06BaseQ_Init();
    gt_TransmissionOdinApproachesP04BaseQ_Init();
    gt_TransmissionOdinChargesP08BaseQ_Init();
    gt_TransmissionOdinChargesP05BaseQ_Init();
    gt_TransmissionOdinChargesP06BaseQ_Init();
    gt_TransmissionOdinChargesP07BaseQ_Init();
    gt_TransmissionP04BaseDestroyedQ_Init();
    gt_TransmissionP05BaseDestroyedQ_Init();
    gt_TransmissionP06BaseDestroyedQ_Init();
    gt_TransmissionYamatoTheOdinQQ_Init();
    gt_CampaignTipsQ_Init();
    gt_RepairOdinTipQ_Init();
    gt_NewUnitWraithTipQ_Init();
    gt_NewAbilityCloakTipQ_Init();
    gt_AchievementOdinHealthBelow30Hard_Init();
    gt_OdinHealthRepaired_Init();
    gt_VictoryDestroyAllBasesComplete_Init();
    gt_Victory_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatOdinDead_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_ObjectiveStealtheOdinCreateQ_Init();
    gt_ObjectiveStealtheOdinComplete_Init();
    gt_ObjectiveStealtheOdinFailedTychus_Init();
    gt_ObjectiveDestroyDominionBasesCreateQ_Init();
    gt_ObjectiveDestroyDominionBasesComplete_Init();
    gt_ObjectiveDestroyDominionBasesUpdate_Init();
    gt_ObjectiveDestroytheLokiCreateHidden_Init();
    gt_ObjectiveDestroytheLokiComplete_Init();
    gt_ObjectiveDestroytheLokiFailed_Init();
    gt_ObjectiveDevourerSamplesCreateQ_Init();
    gt_ObjectiveDevourerSampleUpdate_Init();
    gt_ObjectiveCerebrateSamplesComplete_Init();
    gt_RemoveDevourerTissueSample_Init();
    gt_BriefingQ_Init();
    gt_BriefingScene00_Init();
    gt_BriefingScene00Tychus_Init();
    gt_BriefingScene01_Init();
    gt_BriefingScene01Base_Init();
    gt_BriefingScene02_Init();
    gt_BriefingScene03_Init();
    gt_BriefingScene03OdinBuild_Init();
    gt_BriefingScene04_Init();
    gt_BriefingScene04Entry_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_MidValhallaDoorDamage_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
