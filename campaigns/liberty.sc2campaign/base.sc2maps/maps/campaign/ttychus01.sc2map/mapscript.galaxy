//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Smash and Grab
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/CampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libCamp_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_p1_USER = 1;
const int gv_p2_ZERG = 2;
const int gv_p3_TEMPLE = 3;
const int gv_p4_LOWER_CAUSEWAY = 4;
const int gv_p5_UPPER_CAUSEWAY = 5;
const int gv_p6_FIRST_PROTOSS = 6;
const int gv_p7_PROTOSS_RELIC = 7;
const fixed gv_vIDEO_PADDING = 5.0;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameOver;
bool gv_inCinematic;
playergroup gv_protossPlayers;
unitgroup gv_savePoint1UnitGroup;
unitgroup gv_savePoint2UnitGroup;
unitgroup gv_outsideProtossBaseDefenders;
unitgroup gv_initialStalkers;
unit gv_artifact;
unitgroup gv_artifactGuardiansNorth;
unitgroup gv_artifactGuardiansSouth;
int gv_statuesKilled;
revealer gv_artifactRevealer;
unitgroup gv_zergArtifactAttackers;
bool gv_victoryPending;
timer gv_guardianTimer;
int gv_statuesDestoyed;
fixed gv_statueHealth;
int gv_spineCrawlerSize;
unit[51] gv_spineCrawlers;
point[51] gv_spineCrawlerPoints;
int gv_creepRegionsSize;
region[8] gv_creepRegions;
timer gv_zergSpeedBumpTimer;
timer gv_zergSpeedBumpTimerShorter;
unitgroup gv_zergSpeedBumpUnits;
timer gv_achievementHardTimer;
int gv_statZergKilledByPlayer;
int gv_statProtossKilledByPlayer;
int gv_statStoneGuardianKillCount;
bool gv_zergStructuresKilled;
int gv_objective_GetToTheArtifact;
int gv_artifactObjectivePing;
int gv_objective_DestroytheStatues;
actor gv_relicPingActor;
int gv_objective_Relics;
int gv_relicsFound;
int gv_relicsNeeded;
bool gv_victoryCinematicCompleted;
unitgroup gv_zerglingGroupNorth;
unitgroup gv_zerglingGroupSouth;

void InitGlobals () {
    gv_protossPlayers = PlayerGroupEmpty();
    gv_outsideProtossBaseDefenders = UnitGroupEmpty();
    gv_initialStalkers = UnitGroupEmpty();
    gv_artifact = UnitFromId(6);
    gv_artifactGuardiansNorth = UnitGroupEmpty();
    gv_artifactGuardiansSouth = UnitGroupEmpty();
    gv_zergArtifactAttackers = UnitGroupEmpty();
    gv_guardianTimer = TimerCreate();
    gv_zergSpeedBumpTimer = TimerCreate();
    gv_zergSpeedBumpTimerShorter = TimerCreate();
    gv_zergSpeedBumpUnits = UnitGroupEmpty();
    gv_achievementHardTimer = TimerCreate();
    gv_objective_GetToTheArtifact = c_invalidObjectiveId;
    gv_objective_DestroytheStatues = c_invalidObjectiveId;
    gv_objective_Relics = c_invalidObjectiveId;
    gv_zerglingGroupNorth = UnitGroupEmpty();
    gv_zerglingGroupSouth = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
bool gf_CreepExistsAroundPoint (point lp_point);
void gf_ZergAttackProtossPrep ();
void gf_ZergAttackProtossLateDelay ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04Music;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_IntroSequence;
trigger gt_StartGame;
trigger gt_ArtifactRaceQ;
trigger gt_ZergCreepTipQ;
trigger gt_CampaignTipsQ;
trigger gt_SavePoint1Q;
trigger gt_SavePoint2Q;
trigger gt_FirstGuard;
trigger gt_OuterForcefieldArea;
trigger gt_OutsideProtossBaseWarpIn;
trigger gt_LowerForcefieldArea;
trigger gt_UpperHighTemplars;
trigger gt_PylonTipQ;
trigger gt_PylonTipProximityActivation;
trigger gt_PylonTipDeathActivation;
trigger gt_DefenseQ;
trigger gt_StalkerGather;
trigger gt_MarauderQ;
trigger gt_MarauderQ2;
trigger gt_StatueInitialization;
trigger gt_ArtifactVisibility;
trigger gt_ArtifactGuardianActivationNorth;
trigger gt_ArtifactGuardianActivationSouth;
trigger gt_ArtifactShieldActivation;
trigger gt_ArtifactGuardiansNorthAttacks;
trigger gt_ArtifactGuardiansSouthAttacks;
trigger gt_ArtifactGuardianDestroyed;
trigger gt_ZergArtifactAttacking;
trigger gt_ZergAttackInitiation;
trigger gt_ZergArtifactQ;
trigger gt_ShieldQ;
trigger gt_CreepExpansion;
trigger gt_SpineCrawlerSpawning;
trigger gt_SpineCrawlerMovement;
trigger gt_CrazyQ;
trigger gt_FirstAttackQ;
trigger gt_ZergCloseRevealQ;
trigger gt_AddZergSpeedBumpUnit;
trigger gt_ZergSpeedBumpController;
trigger gt_ZergSpeedBumpTimerExpires;
trigger gt_ZergSpeedBumpTimerNearsExpiration;
trigger gt_NexusDroppod;
trigger gt_PylonDroppod1;
trigger gt_PylonDroppod2;
trigger gt_PylonDroppod3;
trigger gt_GatewayDroppod;
trigger gt_ProtossWarpDefense;
trigger gt_StartAI;
trigger gt_ZergAttackWavesProtoss;
trigger gt_ZergAttackWavesPlayer;
trigger gt_AIUpgradesH;
trigger gt_AIUpgradesI;
trigger gt_UpperProtossAttackWaves;
trigger gt_AIGiveMinerals;
trigger gt_AIGiveGas;
trigger gt_ProtossMana;
trigger gt_OverseerBullies;
trigger gt_UpperLaneReveal;
trigger gt_UpperStatueReveal;
trigger gt_ProtossKilledbyPlayer;
trigger gt_ZergKilledbyPlayer;
trigger gt_ZergStructureKilledbyPlayer;
trigger gt_StoneGuardianKills;
trigger gt_VictoryArtifactGained;
trigger gt_Victory;
trigger gt_DefeatBaseDead;
trigger gt_DefeatArtifactLost;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_ObjectiveGettotheArtifactCreate;
trigger gt_ObjectiveGettotheArtifactDiscoverQ;
trigger gt_ObjectiveGettotheArtifactComplete;
trigger gt_ObjectiveDestroytheStatuesCreate;
trigger gt_ObjectiveDestroytheStatuesDiscover;
trigger gt_ObjectiveDestroytheStatuesComplete;
trigger gt_ObjectiveRelicsCreateQ;
trigger gt_ObjectiveRelicsDiscover;
trigger gt_ObjectiveRelicsUpdate;
trigger gt_ObjectiveRelicsComplete;
trigger gt_RelicTipQ;
trigger gt_IntroBriefingQ;
trigger gt_IntroBriefingCinematic;
trigger gt_BriefingZergAttacks;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
bool gf_CreepExistsAroundPoint (point lp_point) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoF012CF68_ae = 4;
    const int autoF012CF68_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CreepIsPresent(lp_point) == false)) {
        return false;
    }

    lv_i = 1;
    for ( ; ( (autoF012CF68_ai >= 0 && lv_i <= autoF012CF68_ae) || (autoF012CF68_ai < 0 && lv_i >= autoF012CF68_ae) ) ; lv_i += autoF012CF68_ai ) {
        if ((CreepIsPresent(PointWithOffsetPolar(lp_point, 1.0, (IntToFixed(lv_i) * 90.0))) == false)) {
            return false;
        }

    }
    return true;
}

void gf_ZergAttackProtossPrep () {
    // Automatic Variable Declarations
    // Implementation
    AIAttackWaveSetGatherPoint(gv_p2_ZERG, PointFromId(5));
    AIAttackWaveSetTargetPoint(gv_p2_ZERG, PointFromId(724));
    AIAttackWaveAddWaypoint(gv_p2_ZERG, PointFromId(230), false);
    AIAttackWaveAddWaypoint(gv_p2_ZERG, PointFromId(246), false);
    AIAttackWaveAddWaypoint(gv_p2_ZERG, PointFromId(248), false);
    AIAttackWaveAddWaypoint(gv_p2_ZERG, PointFromId(250), false);
}

void gf_ZergAttackProtossLateDelay () {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitIsAlive(UnitFromId(211)) == false)) {
        Wait(libNtve_gf_DifficultyValueFixed(30.0, 0.0, 0.0, 0.0), c_timeAI);
    }

    if ((UnitIsAlive(UnitFromId(124)) == false)) {
        Wait(libNtve_gf_DifficultyValueFixed(90.0, 60.0, 30.0, 15.0), c_timeAI);
    }

    while (!((UnitGroupCount(UnitGroup(null, gv_p2_ZERG, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 250))) {
        Wait(1.0, c_timeAI);
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_LoadCampaignData(libCamp_ge_MapID_MapTTychus01);
    TriggerExecute(gt_Init01Technology, true, true);
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04Music, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    libCamp_gf_RegisterFootageRecording(gt_IntroBriefingQ);
    libCamp_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_IntroSequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeUpgradeAddLevel(gv_p3_TEMPLE, "PsiStormTech", 1);
    TechTreeUpgradeAddLevel(gv_p3_TEMPLE, "HighTemplarKhaydarinAmulet", 1);
    TechTreeUpgradeAddLevel(gv_p4_LOWER_CAUSEWAY, "PsiStormTech", 1);
    TechTreeUpgradeAddLevel(gv_p4_LOWER_CAUSEWAY, "HighTemplarKhaydarinAmulet", 1);
    TechTreeUpgradeAddLevel(gv_p5_UPPER_CAUSEWAY, "PsiStormTech", 1);
    TechTreeUpgradeAddLevel(gv_p5_UPPER_CAUSEWAY, "HighTemplarKhaydarinAmulet", 1);
    TechTreeUpgradeAddLevel(gv_p3_TEMPLE, "ExtendedThermalLance", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_p1_USER, gv_p2_ZERG, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p3_TEMPLE, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p4_LOWER_CAUSEWAY, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p5_UPPER_CAUSEWAY, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p6_FIRST_PROTOSS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p1_USER, gv_p7_PROTOSS_RELIC, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_p2_ZERG, gv_p3_TEMPLE, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p2_ZERG, gv_p4_LOWER_CAUSEWAY, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p2_ZERG, gv_p5_UPPER_CAUSEWAY, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p2_ZERG, gv_p6_FIRST_PROTOSS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_p6_FIRST_PROTOSS, gv_p3_TEMPLE, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p6_FIRST_PROTOSS, gv_p5_UPPER_CAUSEWAY, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p6_FIRST_PROTOSS, gv_p4_LOWER_CAUSEWAY, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p4_LOWER_CAUSEWAY, gv_p5_UPPER_CAUSEWAY, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p4_LOWER_CAUSEWAY, gv_p3_TEMPLE, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_p5_UPPER_CAUSEWAY, gv_p3_TEMPLE, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    PlayerGroupAdd(gv_protossPlayers, gv_p3_TEMPLE);
    PlayerGroupAdd(gv_protossPlayers, gv_p4_LOWER_CAUSEWAY);
    PlayerGroupAdd(gv_protossPlayers, gv_p5_UPPER_CAUSEWAY);
    PlayerGroupAdd(gv_protossPlayers, gv_p6_FIRST_PROTOSS);
    PlayerModifyPropertyInt(gv_p1_USER, c_playerPropMinerals, c_playerPropOperSetTo, 150);
    PlayerModifyPropertyInt(gv_p1_USER, c_playerPropVespene, c_playerPropOperSetTo, 50);
    PlayerModifyPropertyInt(gv_p2_ZERG, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p2_ZERG, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p6_FIRST_PROTOSS, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p6_FIRST_PROTOSS, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p4_LOWER_CAUSEWAY, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p4_LOWER_CAUSEWAY, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p5_UPPER_CAUSEWAY, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p5_UPPER_CAUSEWAY, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p3_TEMPLE, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_p3_TEMPLE, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerSetState(gv_p3_TEMPLE, c_playerStateShowScore, false);
    PlayerSetState(gv_p6_FIRST_PROTOSS, c_playerStateShowScore, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    bool lv_playerHasMercTech;
    int lv_merc;

    // Automatic Variable Declarations
    int auto65CDADE4_i;
    unitgroup autoB4BEC9FD_g;
    int autoB4BEC9FD_u;
    unit autoB4BEC9FD_var;
    unitgroup autoB5398E34_g;
    int autoB5398E34_u;
    unit autoB5398E34_var;
    unitgroup auto3DC7C8BE_g;
    int auto3DC7C8BE_u;
    unit auto3DC7C8BE_var;

    // Variable Initialization
    lv_merc = libCamp_ge_StoryMercID_MercNone;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerHasMercTech = false;
    auto65CDADE4_i = libCamp_gv_TSC_MERC_FIRST;
    while (auto65CDADE4_i <= libCamp_gv_TSC_MERC_LAST) {
        lv_merc = libCamp_gv_tS_MercID[auto65CDADE4_i];
        if ((libCamp_gf_MercStatusCheck(lv_merc, libCamp_ge_StoryMercStatus_Purchased) == true)) {
            lv_playerHasMercTech = true;
            break;
        }

        auto65CDADE4_i = auto65CDADE4_i + 1;
    }
    if ((lv_playerHasMercTech == true)) {
        libNtve_gf_PauseUnit(UnitFromId(1975), true);
    }
    else {
        UnitRemove(UnitFromId(1975));
    }
    TriggerExecute(gt_FirstGuard, true, false);
    TriggerExecute(gt_OuterForcefieldArea, true, false);
    TriggerExecute(gt_LowerForcefieldArea, true, false);
    TriggerExecute(gt_UpperHighTemplars, true, false);
    autoB4BEC9FD_g = UnitGroup("ProtossRelic", gv_p7_PROTOSS_RELIC, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB4BEC9FD_u = UnitGroupCount(autoB4BEC9FD_g, c_unitCountAll);
    for (;; autoB4BEC9FD_u -= 1) {
        autoB4BEC9FD_var = UnitGroupUnitFromEnd(autoB4BEC9FD_g, autoB4BEC9FD_u);
        if (autoB4BEC9FD_var == null) { break; }
        UnitSetInfoText(autoB4BEC9FD_var, StringExternal("Param/Value/A8C79452"), StringExternal("Param/Value/561D257D"), StringToText(""));
        UnitSetState(autoB4BEC9FD_var, c_unitStateTooltipable, true);
        gv_relicsNeeded += 1;
    }
    UnitGroupAdd(gv_initialStalkers, UnitFromId(431));
    UnitGroupAdd(gv_initialStalkers, UnitFromId(427));
    UnitGroupAdd(gv_initialStalkers, UnitFromId(424));
    TriggerExecute(gt_MarauderQ, true, false);
    autoB5398E34_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterCanHaveEnergy), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB5398E34_u = UnitGroupCount(autoB5398E34_g, c_unitCountAll);
    for (;; autoB5398E34_u -= 1) {
        autoB5398E34_var = UnitGroupUnitFromEnd(autoB5398E34_g, autoB5398E34_u);
        if (autoB5398E34_var == null) { break; }
        UnitSetPropertyFixed(autoB5398E34_var, c_unitPropEnergyPercent, 100.0);
    }
    UnitSetPropertyFixed(UnitFromId(27), c_unitPropEnergy, 50.0);
    libNtve_gf_MakeUnitInvulnerable(gv_artifact, true);
    VisRevealerCreate(gv_p1_USER, RegionCircle(UnitGetPosition(gv_artifact), 24.0));
    gv_artifactRevealer = VisRevealerLastCreated();
    VisRevealerEnable(VisRevealerLastCreated(), false);
    TriggerExecute(gt_ZergArtifactAttacking, true, false);
    TriggerExecute(gt_ZergArtifactQ, true, false);
    TriggerExecute(gt_StatueInitialization, true, false);
    lv_i += 1;
    gv_spineCrawlerPoints[lv_i] = PointFromId(469);
    lv_i += 1;
    gv_spineCrawlerPoints[lv_i] = PointFromId(474);
    lv_i += 1;
    gv_spineCrawlerPoints[lv_i] = PointFromId(475);
    lv_i += 1;
    gv_spineCrawlerPoints[lv_i] = PointFromId(478);
    lv_i += 1;
    gv_spineCrawlerPoints[lv_i] = PointFromId(477);
    lv_i += 1;
    gv_spineCrawlerPoints[lv_i] = PointFromId(479);
    lv_i += 1;
    gv_spineCrawlerPoints[lv_i] = PointFromId(480);
    lv_i += 1;
    gv_spineCrawlerPoints[lv_i] = PointFromId(481);
    lv_i += 1;
    gv_spineCrawlerPoints[lv_i] = PointFromId(482);
    lv_i += 1;
    gv_spineCrawlerPoints[lv_i] = PointFromId(483);
    lv_i += 1;
    gv_spineCrawlerPoints[lv_i] = PointFromId(484);
    lv_i += 1;
    gv_spineCrawlerPoints[lv_i] = PointFromId(485);
    lv_i += 1;
    gv_spineCrawlerPoints[lv_i] = PointFromId(486);
    lv_i += 1;
    gv_spineCrawlerPoints[lv_i] = PointFromId(487);
    lv_i += 1;
    gv_spineCrawlerPoints[lv_i] = PointFromId(488);
    lv_i += 1;
    gv_spineCrawlerPoints[lv_i] = PointFromId(489);
    lv_i += 1;
    gv_spineCrawlerPoints[lv_i] = PointFromId(395);
    lv_i += 1;
    gv_spineCrawlerPoints[lv_i] = PointFromId(416);
    lv_i += 1;
    gv_spineCrawlerPoints[lv_i] = PointFromId(1917);
    lv_i += 1;
    gv_spineCrawlerPoints[lv_i] = PointFromId(1920);
    gv_spineCrawlerSize = lv_i;
    TriggerExecute(gt_SpineCrawlerSpawning, true, false);
    TriggerExecute(gt_SpineCrawlerMovement, true, false);
    gv_creepRegions[1] = RegionFromId(8);
    gv_creepRegions[2] = RegionFromId(9);
    gv_creepRegions[3] = RegionFromId(10);
    gv_creepRegions[4] = RegionFromId(11);
    gv_creepRegions[5] = RegionFromId(12);
    gv_creepRegions[6] = RegionFromId(13);
    gv_creepRegionsSize = 6;
    TriggerExecute(gt_CreepExpansion, true, false);
    TriggerExecute(gt_SavePoint1Q, true, false);
    TriggerExecute(gt_SavePoint2Q, true, false);
    auto3DC7C8BE_g = UnitGroup(null, gv_p4_LOWER_CAUSEWAY, RegionFromId(60), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3DC7C8BE_u = UnitGroupCount(auto3DC7C8BE_g, c_unitCountAll);
    for (;; auto3DC7C8BE_u -= 1) {
        auto3DC7C8BE_var = UnitGroupUnitFromEnd(auto3DC7C8BE_g, auto3DC7C8BE_u);
        if (auto3DC7C8BE_var == null) { break; }
        UnitGroupAdd(gv_outsideProtossBaseDefenders, auto3DC7C8BE_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init04Music_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus01MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Music_Init () {
    gt_Init04Music = TriggerCreate("gt_Init04Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetBackground(c_backgroundFixed, "ShakurasSkyBox", 100.0);
    GameTimeOfDaySet("08:00:00");
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "MonlythLightBridge", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    VisRevealerCreate(gv_p3_TEMPLE, RegionCircle(UnitGetPosition(gv_artifact), 24.0));
    VisRevealerEnable(VisRevealerLastCreated(), true);
    libLbty_gf_AutoRevealRegion(RegionFromId(52), RegionFromId(52), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(53), RegionFromId(53), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(54), RegionFromId(54), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(55), RegionFromId(55), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(43), RegionFromId(43), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(44), RegionFromId(44), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(56), RegionFromId(56), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(57), RegionFromId(57), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(58), RegionFromId(58), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(45), RegionFromId(45), gv_p1_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(46), RegionFromId(46), gv_p1_USER);
    VisRevealerCreate(gv_p3_TEMPLE, RegionCircle(UnitGetPosition(gv_artifact), 12.0));
    VisRevealerEnable(VisRevealerLastCreated(), true);
    TriggerExecute(gt_ArtifactVisibility, true, false);
    GameSetBackground(c_backgroundFixed, null, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0411363C_g;
    int auto0411363C_u;
    unit auto0411363C_var;
    playergroup auto42E01964_g;
    int auto42E01964_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_statueHealth = libNtve_gf_DifficultyValueFixed(300.0, 500.0, 750.0, 1000.0);
    auto0411363C_g = UnitGroup("StoneZealot", 0, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0411363C_u = UnitGroupCount(auto0411363C_g, c_unitCountAll);
    for (;; auto0411363C_u -= 1) {
        auto0411363C_var = UnitGroupUnitFromEnd(auto0411363C_g, auto0411363C_u);
        if (auto0411363C_var == null) { break; }
        UnitSetPropertyFixed(auto0411363C_var, c_unitPropLifeMax, gv_statueHealth);
        UnitSetPropertyFixed(auto0411363C_var, c_unitPropLifePercent, 100.0);
    }
    if ((libNtve_gf_DifficultyValueInt(1, 0, 0, 0) == 1)) {
        PlayerModifyPropertyInt(gv_p2_ZERG, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p3_TEMPLE, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p4_LOWER_CAUSEWAY, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p5_UPPER_CAUSEWAY, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_p6_FIRST_PROTOSS, c_playerPropHandicap, c_playerPropOperSetTo, 50);
    }

    auto42E01964_g = gv_protossPlayers;
    auto42E01964_var = -1;
    while (true) {
        auto42E01964_var = PlayerGroupNextPlayer(auto42E01964_g, auto42E01964_var);
        if (auto42E01964_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto42E01964_var, "ProtossGroundWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        TechTreeUpgradeAddLevel(auto42E01964_var, "ProtossAirWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        TechTreeUpgradeAddLevel(auto42E01964_var, "ProtossGroundArmorsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(auto42E01964_var, "ProtossShieldsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
    }
    TechTreeUpgradeAddLevel(gv_p2_ZERG, "ZergMeleeWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
    TechTreeUpgradeAddLevel(gv_p2_ZERG, "ZergGroundArmorsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
    TechTreeUpgradeAddLevel(gv_p2_ZERG, "ZergMissileWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
    TechTreeUpgradeAddLevel(gv_p2_ZERG, "ZergFlyerWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
    TechTreeUpgradeAddLevel(gv_p2_ZERG, "ZergFlyerArmorsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
    TechTreeUpgradeAddLevel(gv_p2_ZERG, "zerglingmovementspeed", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
    TechTreeUpgradeAddLevel(gv_p2_ZERG, "hydraliskspeed", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Stalker", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Sentry", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("HighTemplar", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("StoneZealot", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("PhotonCannon", false, gv_p1_USER);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Probe", false, gv_p1_USER);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("VoidRay", false, gv_p1_USER);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Archon", false, gv_p1_USER);
    }

    libCamp_gf_AddUnitTypeToUnitHelpPanel("Drone", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Zergling", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Mutalisk", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Overlord", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Overseer", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SporeCrawler", false, gv_p1_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SpineCrawler", false, gv_p1_USER);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Roach", false, gv_p1_USER);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Baneling", false, gv_p1_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Sequence
//--------------------------------------------------------------------------------------------------
bool gt_IntroSequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB5D7B041_g;
    int autoB5D7B041_u;
    unit autoB5D7B041_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    autoB5D7B041_g = UnitGroup("StoneZealot", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB5D7B041_u = UnitGroupCount(autoB5D7B041_g, c_unitCountAll);
    for (;; autoB5D7B041_u -= 1) {
        autoB5D7B041_var = UnitGroupUnitFromEnd(autoB5D7B041_g, autoB5D7B041_u);
        if (autoB5D7B041_var == null) { break; }
        UnitSetState(autoB5D7B041_var, c_unitStateHidden, true);
    }
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.1, c_timeReal);
    VisRevealArea(gv_p1_USER, RegionFromId(19), 0.1, false);
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/40B74FD7"), null, UnitGetPosition(UnitFromId(27)));
    UnitSelect(UnitGroupUnit(UnitGroup("CommandCenter", gv_p1_USER, RegionCircle(PointFromId(1), 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), gv_p1_USER, true);
    CinematicFade(true, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_p1_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(26)), 1.5);
    TriggerExecute(gt_StartGame, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSequence_Init () {
    gt_IntroSequence = TriggerCreate("gt_IntroSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game
//--------------------------------------------------------------------------------------------------
bool gt_StartGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        TimerStart(gv_achievementHardTimer, 900.0, false, c_timeAI);
    }

    libNtve_gf_PauseUnit(UnitFromId(1975), false);
    TriggerExecute(gt_StalkerGather, true, false);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveGettotheArtifactDiscoverQ, true, true);
    Wait(8.0, c_timeReal);
    TriggerExecute(gt_CampaignTipsQ, true, false);
    Wait(8.0, c_timeReal);
    TriggerExecute(gt_ArtifactRaceQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGame_Init () {
    gt_StartGame = TriggerCreate("gt_StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Artifact Race Q
//--------------------------------------------------------------------------------------------------
bool gt_ArtifactRaceQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    MinimapPing(PlayerGroupAll(), PointFromId(476), 5.0, Color(100.00, 0.00, 0.00));
    SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupAll(), 100.0, 0.0);
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/0539F94F"), null, PointFromId(476));
    TriggerExecute(gt_UpperLaneReveal, true, false);
    TriggerExecute(gt_UpperStatueReveal, true, false);
    Wait(1.0, c_timeReal);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus01Adjutant00045", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus01Adjutant00045", -1), c_transmissionDurationAdd, 1.0, true);
    // Transmission - SoundLink("TTychus01Raynor00046", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus01Raynor00046", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArtifactRaceQ_Init () {
    gt_ArtifactRaceQ = TriggerCreate("gt_ArtifactRaceQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Creep Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergCreepTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCamp_gf_StoryState(libCamp_ge_StoryStateID_StoryStateTipZergCreepPlayed) == 0))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_CreateTipFromConversationState("StoryTips|Campaign_Creep", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    libCamp_gf_SetStoryState(libCamp_ge_StoryStateID_StoryStateTipZergCreepPlayed, 1);
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergCreepTipQ_Init () {
    gt_ZergCreepTipQ = TriggerCreate("gt_ZergCreepTipQ_Func");
    TriggerAddEventUnitRegion(gt_ZergCreepTipQ, null, RegionFromId(69), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Campaign Tips Q
//--------------------------------------------------------------------------------------------------
bool gt_CampaignTipsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateStorymodeTips();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CampaignTipsQ_Init () {
    gt_CampaignTipsQ = TriggerCreate("gt_CampaignTipsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Save Point 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_SavePoint1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_savePoint1UnitGroup = UnitGroupAlliance(gv_p3_TEMPLE, c_unitAllianceAlly, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    while (true) {
        Wait(1.0, c_timeGame);
        if ((UnitGroupCount(gv_savePoint1UnitGroup, c_unitCountAlive) == 0)) {
            Wait(2.0, c_timeReal);
            while (!((gv_inCinematic == false))) {
                Wait(1.0, c_timeGame);
            }
            if ((gv_gameOver == true)) {
                return true;
            }

            TriggerQueueEnter();
            libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/1091C250"));
            TriggerQueueExit();
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SavePoint1Q_Init () {
    gt_SavePoint1Q = TriggerCreate("gt_SavePoint1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Save Point 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_SavePoint2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_savePoint2UnitGroup = UnitGroupAlliance(gv_p3_TEMPLE, c_unitAllianceAlly, RegionFromId(50), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    while (true) {
        Wait(1.0, c_timeGame);
        if ((UnitGroupCount(gv_savePoint2UnitGroup, c_unitCountAlive) == 0)) {
            Wait(2.0, c_timeReal);
            while (!((gv_inCinematic == false))) {
                Wait(1.0, c_timeGame);
            }
            if ((gv_gameOver == true)) {
                return true;
            }

            TriggerQueueEnter();
            libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/E262AB53"));
            TriggerQueueExit();
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SavePoint2Q_Init () {
    gt_SavePoint2Q = TriggerCreate("gt_SavePoint2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Guard
//--------------------------------------------------------------------------------------------------
bool gt_FirstGuard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeGame);
        if (((gv_gameOver == true) || (UnitIsAlive(UnitFromId(109)) == false))) {
            return true;
        }

        if (((UnitGetPropertyFixed(UnitFromId(96), c_unitPropShieldsPercent, c_unitPropCurrent) < 100.0) || (UnitGetPropertyFixed(UnitFromId(109), c_unitPropShieldsPercent, c_unitPropCurrent) < 100.0) || (UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            UnitSetOwner(UnitFromId(109), gv_p6_FIRST_PROTOSS, true);
            AISetUnitScriptControlled(UnitFromId(109), false);
            AIAttackWaveSetTargetPlayer(gv_p6_FIRST_PROTOSS, PlayerGroupSingle(gv_p1_USER));
            AIAttackWaveUseUnit(gv_p6_FIRST_PROTOSS, UnitFromId(109));
            AIAttackWaveSend(gv_p6_FIRST_PROTOSS, 0, false);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstGuard_Init () {
    gt_FirstGuard = TriggerCreate("gt_FirstGuard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Outer Forcefield Area
//--------------------------------------------------------------------------------------------------
bool gt_OuterForcefieldArea_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_nullifierTop;
    unit lv_nullifierBottom;
    unit lv_highTemplar;
    point lv_nullifierTopPosition;
    point lv_nullifierBottomPosition;
    point lv_highTemplarPosition;
    bool lv_broken;
    int lv_psiCooldown;

    // Automatic Variable Declarations
    unitgroup autoED2F391A_g;
    int autoED2F391A_u;
    unit autoED2F391A_var;

    // Variable Initialization
    lv_nullifierTop = UnitFromId(112);
    lv_nullifierBottom = UnitFromId(113);
    lv_highTemplar = UnitFromId(120);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_nullifierTopPosition = UnitGetPosition(lv_nullifierTop);
    lv_nullifierBottomPosition = UnitGetPosition(lv_nullifierBottom);
    lv_highTemplarPosition = UnitGetPosition(lv_highTemplar);
    UnitIssueOrder(lv_highTemplar, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    while (true) {
        Wait(1.0, c_timeGame);
        if ((UnitIsAlive(lv_nullifierTop) == false) && (UnitIsAlive(lv_nullifierBottom) == false) && (UnitIsAlive(lv_highTemplar) == false)) {
            return true;
        }

        if ((lv_psiCooldown > 0)) {
            lv_psiCooldown -= 1;
        }

        if ((UnitIsAlive(lv_nullifierTop) == true) && (UnitGetPropertyFixed(lv_nullifierTop, c_unitPropEnergy, c_unitPropCurrent) >= 30.0) && (UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionFromId(5), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (UnitGroupCount(UnitGroup("ForceField", c_playerAny, RegionCircle(PointFromId(121), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            UnitIssueOrder(lv_nullifierTop, OrderTargetingPoint(AbilityCommand("ForceField", 0), PointFromId(121)), c_orderQueueReplace);
        }
        else {
            if ((RegionContainsPoint(RegionCircle(lv_nullifierTopPosition, 1.0), UnitGetPosition(lv_nullifierTop)) == false)) {
                UnitIssueOrder(lv_nullifierTop, OrderTargetingPoint(AbilityCommand("move", 0), lv_nullifierTopPosition), c_orderQueueReplace);
            }

        }
        if ((UnitIsAlive(lv_nullifierBottom) == true) && (UnitGetPropertyFixed(lv_nullifierBottom, c_unitPropEnergy, c_unitPropCurrent) >= 30.0) && (UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionFromId(5), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (UnitGroupCount(UnitGroup("ForceField", c_playerAny, RegionCircle(PointFromId(122), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            UnitIssueOrder(lv_nullifierBottom, OrderTargetingPoint(AbilityCommand("ForceField", 0), PointFromId(122)), c_orderQueueReplace);
        }
        else {
            if ((RegionContainsPoint(RegionCircle(lv_nullifierBottomPosition, 1.0), UnitGetPosition(lv_nullifierBottom)) == false)) {
                UnitIssueOrder(lv_nullifierBottom, OrderTargetingPoint(AbilityCommand("move", 0), lv_nullifierBottomPosition), c_orderQueueReplace);
            }

        }
        if ((UnitIsAlive(lv_highTemplar) == true) && (UnitGetPropertyFixed(lv_highTemplar, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (lv_psiCooldown == 0) && (UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionCircle(UnitGetPosition(lv_highTemplar), 7.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            lv_broken = false;
            autoED2F391A_g = UnitGroup(null, gv_p1_USER, RegionCircle(UnitGetPosition(lv_highTemplar), 7.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoED2F391A_u = UnitGroupCount(autoED2F391A_g, c_unitCountAll);
            for (;; autoED2F391A_u -= 1) {
                autoED2F391A_var = UnitGroupUnitFromEnd(autoED2F391A_g, autoED2F391A_u);
                if (autoED2F391A_var == null) { break; }
                if ((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionCircle(UnitGetPosition(autoED2F391A_var), 1.5), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 2)) {
                    UnitIssueOrder(lv_highTemplar, OrderTargetingPoint(AbilityCommand("PsiStorm", 0), UnitGetPosition(autoED2F391A_var)), c_orderQueueReplace);
                    UnitIssueOrder(lv_highTemplar, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                    lv_psiCooldown = 10;
                    lv_broken = true;
                    break;
                }

            }
            if ((lv_broken == false) && (RegionContainsPoint(RegionCircle(lv_highTemplarPosition, 1.0), UnitGetPosition(lv_highTemplar)) == false)) {
                UnitIssueOrder(lv_highTemplar, OrderTargetingPoint(AbilityCommand("move", 0), lv_highTemplarPosition), c_orderQueueReplace);
            }

        }
        else {
            if ((RegionContainsPoint(RegionCircle(lv_highTemplarPosition, 1.0), UnitGetPosition(lv_highTemplar)) == false)) {
                UnitIssueOrder(lv_highTemplar, OrderTargetingPoint(AbilityCommand("move", 0), lv_highTemplarPosition), c_orderQueueReplace);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OuterForcefieldArea_Init () {
    gt_OuterForcefieldArea = TriggerCreate("gt_OuterForcefieldArea_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Outside Protoss Base Warp In
//--------------------------------------------------------------------------------------------------
bool gt_OutsideProtossBaseWarpIn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerDifficulty(1) == 4) == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_outsideProtossBaseDefenders, EventUnit()) == true))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(UnitFromId(583), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(578)), c_orderQueueReplace);
    Wait(0.25, c_timeGame);
    UnitIssueOrder(UnitFromId(583), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(581)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OutsideProtossBaseWarpIn_Init () {
    gt_OutsideProtossBaseWarpIn = TriggerCreate("gt_OutsideProtossBaseWarpIn_Func");
    TriggerAddEventUnitDamaged(gt_OutsideProtossBaseWarpIn, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lower Forcefield Area
//--------------------------------------------------------------------------------------------------
bool gt_LowerForcefieldArea_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_nullifier1;
    point lv_nullifier1Position;
    unit lv_nullifier2;
    point lv_nullifier2Position;
    unit lv_stalker1;
    point lv_stalker1Position;
    unit lv_stalker2;
    point lv_stalker2Position;
    point lv_stalkerTarget;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_nullifier1 = UnitFromId(716);
    lv_nullifier2 = UnitFromId(717);
    lv_stalker1 = UnitFromId(90);
    lv_stalker2 = UnitFromId(619);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_nullifier1Position = UnitGetPosition(lv_nullifier1);
    lv_nullifier2Position = UnitGetPosition(lv_nullifier2);
    lv_stalker1Position = UnitGetPosition(lv_stalker1);
    lv_stalker2Position = UnitGetPosition(lv_stalker2);
    while (true) {
        if ((UnitIsAlive(lv_nullifier1) == false) && (UnitIsAlive(lv_nullifier2) == false) && (UnitIsAlive(lv_stalker1) == false) && (UnitIsAlive(lv_stalker2) == false)) {
            return true;
        }

        Wait(1.0, c_timeGame);
        if ((UnitIsAlive(lv_nullifier1) == true) && (UnitGetPropertyFixed(lv_nullifier1, c_unitPropEnergy, c_unitPropCurrent) >= 30.0) && (UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionFromId(39), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (UnitGroupCount(UnitGroup("ForceField", c_playerAny, RegionCircle(PointFromId(718), 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            UnitIssueOrder(lv_nullifier1, OrderTargetingPoint(AbilityCommand("ForceField", 0), PointFromId(718)), c_orderQueueReplace);
        }
        else {
            if ((RegionContainsPoint(RegionCircle(lv_nullifier1Position, 1.0), UnitGetPosition(lv_nullifier1)) == false)) {
                UnitIssueOrder(lv_nullifier1, OrderTargetingPoint(AbilityCommand("move", 0), lv_nullifier1Position), c_orderQueueReplace);
            }

        }
        if ((UnitIsAlive(lv_nullifier2) == true) && (UnitGetPropertyFixed(lv_nullifier2, c_unitPropEnergy, c_unitPropCurrent) >= 30.0) && (UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionFromId(39), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (UnitGroupCount(UnitGroup("ForceField", c_playerAny, RegionCircle(PointFromId(719), 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            UnitIssueOrder(lv_nullifier2, OrderTargetingPoint(AbilityCommand("ForceField", 0), PointFromId(719)), c_orderQueueReplace);
        }
        else {
            if ((RegionContainsPoint(RegionCircle(lv_nullifier2Position, 1.0), UnitGetPosition(lv_nullifier2)) == false)) {
                UnitIssueOrder(lv_nullifier2, OrderTargetingPoint(AbilityCommand("move", 0), lv_nullifier2Position), c_orderQueueReplace);
            }

        }
        if ((UnitGroupCount(UnitGroupAlliance(gv_p3_TEMPLE, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_artifact), 13.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
            lv_stalkerTarget = UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(gv_artifact), UnitGroupAlliance(gv_p3_TEMPLE, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_artifact), 14.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)));
            UnitIssueOrder(lv_stalker1, OrderTargetingPoint(AbilityCommand("attack", 0), lv_stalkerTarget), c_orderQueueReplace);
            UnitIssueOrder(lv_stalker2, OrderTargetingPoint(AbilityCommand("attack", 0), lv_stalkerTarget), c_orderQueueReplace);
            UnitIssueOrder(lv_stalker1, OrderTargetingPoint(AbilityCommand("attack", 0), lv_stalker1Position), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_stalker2, OrderTargetingPoint(AbilityCommand("attack", 0), lv_stalker2Position), c_orderQueueAddToEnd);
        }
        else {
            UnitIssueOrder(lv_stalker1, OrderTargetingPoint(AbilityCommand("attack", 0), lv_stalker1Position), c_orderQueueReplace);
            UnitIssueOrder(lv_stalker2, OrderTargetingPoint(AbilityCommand("attack", 0), lv_stalker2Position), c_orderQueueReplace);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LowerForcefieldArea_Init () {
    gt_LowerForcefieldArea = TriggerCreate("gt_LowerForcefieldArea_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upper High Templars
//--------------------------------------------------------------------------------------------------
bool gt_UpperHighTemplars_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_highTemplarsSize;
    unit[21] lv_highTemplars;
    point[21] lv_highTemplarPoints;
    int[21] lv_psiCooldowns;

    // Automatic Variable Declarations
    unitgroup autoF078C0E9_g;
    int autoF078C0E9_u;
    unit autoF078C0E9_var;
    int auto49C26819_ae;
    const int auto49C26819_ai = 1;
    int auto2BB45B45_ae;
    const int auto2BB45B45_ai = 1;
    unitgroup auto0770ACE4_g;
    int auto0770ACE4_u;
    unit auto0770ACE4_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoF078C0E9_g = UnitGroup("HighTemplar", gv_p3_TEMPLE, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF078C0E9_u = UnitGroupCount(autoF078C0E9_g, c_unitCountAll);
    for (;; autoF078C0E9_u -= 1) {
        autoF078C0E9_var = UnitGroupUnitFromEnd(autoF078C0E9_g, autoF078C0E9_u);
        if (autoF078C0E9_var == null) { break; }
        if ((autoF078C0E9_var != UnitFromId(120))) {
            lv_highTemplarsSize += 1;
            lv_highTemplars[lv_highTemplarsSize] = autoF078C0E9_var;
            lv_highTemplarPoints[lv_highTemplarsSize] = UnitGetPosition(autoF078C0E9_var);
            lv_psiCooldowns[lv_highTemplarsSize] = 0;
        }

    }
    while (true) {
        Wait(0.5, c_timeGame);
        auto49C26819_ae = lv_highTemplarsSize;
        lv_i = 1;
        for ( ; ( (auto49C26819_ai >= 0 && lv_i <= auto49C26819_ae) || (auto49C26819_ai < 0 && lv_i >= auto49C26819_ae) ) ; lv_i += auto49C26819_ai ) {
            if ((UnitIsAlive(lv_highTemplars[lv_i]) == true)) {
                break;
            }

            if ((lv_i == lv_highTemplarsSize)) {
                return true;
            }

        }
        auto2BB45B45_ae = lv_highTemplarsSize;
        lv_i = 1;
        for ( ; ( (auto2BB45B45_ai >= 0 && lv_i <= auto2BB45B45_ae) || (auto2BB45B45_ai < 0 && lv_i >= auto2BB45B45_ae) ) ; lv_i += auto2BB45B45_ai ) {
            if ((lv_psiCooldowns[lv_i] > 0)) {
                lv_psiCooldowns[lv_i] -= 1;
            }

            if ((UnitIsAlive(lv_highTemplars[lv_i]) == true) && (UnitGetPropertyFixed(lv_highTemplars[lv_i], c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (lv_psiCooldowns[lv_i] == 0) && (UnitGroupCount(UnitGroup(null, gv_p2_ZERG, RegionCircle(UnitGetPosition(lv_highTemplars[lv_i]), 7.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                auto0770ACE4_g = UnitGroup(null, gv_p2_ZERG, RegionCircle(UnitGetPosition(lv_highTemplars[lv_i]), 7.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto0770ACE4_u = UnitGroupCount(auto0770ACE4_g, c_unitCountAll);
                for (;; auto0770ACE4_u -= 1) {
                    auto0770ACE4_var = UnitGroupUnitFromEnd(auto0770ACE4_g, auto0770ACE4_u);
                    if (auto0770ACE4_var == null) { break; }
                    if ((UnitGroupCount(UnitGroup(null, gv_p2_ZERG, RegionCircle(UnitGetPosition(auto0770ACE4_var), 1.5), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 4) && (UnitGroupCount(UnitGroup(null, gv_p5_UPPER_CAUSEWAY, RegionCircle(UnitGetPosition(auto0770ACE4_var), 1.5), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                        UnitIssueOrder(lv_highTemplars[lv_i], OrderTargetingPoint(AbilityCommand("PsiStorm", 0), UnitGetPosition(auto0770ACE4_var)), c_orderQueueReplace);
                        lv_psiCooldowns[lv_i] = 8;
                        break;
                    }

                }
            }
            else {
                if ((RegionContainsPoint(RegionCircle(lv_highTemplarPoints[lv_i], 0.5), UnitGetPosition(lv_highTemplars[lv_i])) == false)) {
                    UnitIssueOrder(lv_highTemplars[lv_i], OrderTargetingPoint(AbilityCommand("move", 0), lv_highTemplarPoints[lv_i]), c_orderQueueReplace);
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpperHighTemplars_Init () {
    gt_UpperHighTemplars = TriggerCreate("gt_UpperHighTemplars_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pylon Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_PylonTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_CreateTipFromConversationState("StoryTips|Tychus01_Pylons", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PylonTipQ_Init () {
    gt_PylonTipQ = TriggerCreate("gt_PylonTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pylon Tip - Proximity Activation
//--------------------------------------------------------------------------------------------------
bool gt_PylonTipProximityActivation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!((UnitTestPlane(EventUnit(), c_planeAir) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_PylonTipQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PylonTipProximityActivation_Init () {
    gt_PylonTipProximityActivation = TriggerCreate("gt_PylonTipProximityActivation_Func");
    TriggerAddEventUnitRegion(gt_PylonTipProximityActivation, null, RegionFromId(7), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pylon Tip - Death Activation
//--------------------------------------------------------------------------------------------------
bool gt_PylonTipDeathActivation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_p1_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeReal);
    TriggerExecute(gt_PylonTipQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PylonTipDeathActivation_Init () {
    gt_PylonTipDeathActivation = TriggerCreate("gt_PylonTipDeathActivation_Func");
    TriggerAddEventUnitDied(gt_PylonTipDeathActivation, UnitRefFromUnit(UnitFromId(96)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defense Q
//--------------------------------------------------------------------------------------------------
bool gt_DefenseQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!((UnitTestPlane(EventUnit(), c_planeAir) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    if (((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionFromId(36), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Bunker", gv_p1_USER, RegionFromId(36), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
    }
    else {
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TTychus01Tychus00009", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus01Tychus00009", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefenseQ_Init () {
    gt_DefenseQ = TriggerCreate("gt_DefenseQ_Func");
    TriggerAddEventUnitRegion(gt_DefenseQ, null, RegionFromId(37), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stalker Gather
//--------------------------------------------------------------------------------------------------
bool gt_StalkerGather_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(45.0, c_timeAI);
    UnitIssueOrder(UnitFromId(431), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(105)), c_orderQueueReplace);
    Wait(3.0, c_timeAI);
    UnitIssueOrder(UnitFromId(427), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(411)), c_orderQueueReplace);
    Wait(3.0, c_timeAI);
    UnitIssueOrder(UnitFromId(424), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(325)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StalkerGather_Init () {
    gt_StalkerGather = TriggerCreate("gt_StalkerGather_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Marauder Q
//--------------------------------------------------------------------------------------------------
bool gt_MarauderQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_swannDropship;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!(((UnitGroupCount(UnitGroup("Stalker", gv_p6_FIRST_PROTOSS, RegionCircle(PointFromId(433), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(gv_initialStalkers, c_unitCountAlive) == 0)))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    TriggerExecute(gt_MarauderQ2, true, false);
    if ((UnitGroupCount(gv_initialStalkers, c_unitCountAlive) > 0)) {
        MinimapPing(PlayerGroupAll(), PointFromId(433), 5.0, Color(100.00, 0.00, 0.00));
        VisRevealArea(gv_p1_USER, RegionCircle(PointFromId(433), 8.0), 40.0, false);
        SoundPlay(SoundLink("TUIWarningPing", 0), PlayerGroupAll(), 100.0, 0.0);
        Wait(1.0, c_timeReal);
        UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/9AC9EB9B"), null, PointFromId(433));
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TTychus01Adjutant00016", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus01Adjutant00016", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    }

    TriggerQueueExit();
    libNtve_gf_CreateUnitsAtPoint2(1, "SpecialOpsDropship", 0, gv_p1_USER, PointFromId(166));
    UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
    libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
    lv_swannDropship = UnitLastCreated();
    UnitCargoCreate(lv_swannDropship, "Marauder", libNtve_gf_DifficultyValueInt(4, 4, 4, 3));
    UnitIssueOrder(lv_swannDropship, OrderTargetingPoint(AbilityCommand("SpecOpsDropshipTransport", 2), PointFromId(439)), c_orderQueueReplace);
    while (true) {
        Wait(1.0, c_timeGame);
        if ((UnitCargoValue(lv_swannDropship, c_unitCargoUnitCount) == 0)) {
            libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupInfantryMarauder, gv_p1_USER);
            UnitIssueOrder(lv_swannDropship, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(166)), c_orderQueueReplace);
            break;
        }
        else {
            UnitIssueOrder(lv_swannDropship, OrderTargetingPoint(AbilityCommand("SpecOpsDropshipTransport", 2), PointFromId(439)), c_orderQueueReplace);
        }
    }
    while (true) {
        Wait(1.0, c_timeGame);
        if ((UnitIsAlive(lv_swannDropship) == true)) {
            if ((RegionContainsPoint(RegionCircle(PointFromId(166), 1.0), UnitGetPosition(lv_swannDropship)) == true)) {
                UnitRemove(lv_swannDropship);
                break;
            }
            else {
                UnitIssueOrder(lv_swannDropship, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(166)), c_orderQueueReplace);
            }
        }
        else {
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarauderQ_Init () {
    gt_MarauderQ = TriggerCreate("gt_MarauderQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Marauder Q 2
//--------------------------------------------------------------------------------------------------
bool gt_MarauderQ2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(2.0, c_timeReal);
    if ((gv_gameOver == true)) {
        return true;
    }

    SoundPlay(SoundLink("IncomingTransmission", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("IncomingTransmission", -1)), c_timeReal);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus01MusicSwann", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    // Transmission - SoundLink("TTychus01Swann00003", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus01Swann00003", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTychus01Raynor00005", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus01Raynor00005", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTychus01Swann00006", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus01Swann00006", -1), c_transmissionDurationAdd, 0.0, true);
    UIAlertUnit("Trigger", gv_p1_USER, StringToText(""), null, UnitGroupRandomUnit(UnitGroup("Marauder", gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    if ((UnitGroupCount(gv_initialStalkers, c_unitCountAlive) > 0) && (gv_gameOver == false)) {
        AIAttackWaveSetTargetPlayer(gv_p6_FIRST_PROTOSS, PlayerGroupSingle(gv_p1_USER));
        AISetGroupScriptControlled(gv_initialStalkers, false);
        AIAttackWaveUseGroup(gv_p6_FIRST_PROTOSS, gv_initialStalkers);
        AIAttackWaveSend(gv_p6_FIRST_PROTOSS, 0, false);
    }

    while (true) {
        Wait(1.0, c_timeGame);
        if ((UnitGroupCount(gv_initialStalkers, c_unitCountAlive) == 0)) {
            TriggerQueueEnter();
            libCamp_gf_CreateTipFromConversationState("StoryTips|Tychus01_Marauder", libNtve_ge_TipType_NewUnit, PlayerGroupAll());
            Wait(libCamp_gv_campaignHintDelay, c_timeReal);
            TriggerQueueExit();
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarauderQ2_Init () {
    gt_MarauderQ2 = TriggerCreate("gt_MarauderQ2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Statue Initialization
//--------------------------------------------------------------------------------------------------
bool gt_StatueInitialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto65D6E378_g;
    int auto65D6E378_u;
    unit auto65D6E378_var;
    unitgroup auto0347DB94_g;
    int auto0347DB94_u;
    unit auto0347DB94_var;
    unitgroup auto06E5CB5F_g;
    int auto06E5CB5F_u;
    unit auto06E5CB5F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto65D6E378_g = UnitGroup("StoneZealot", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto65D6E378_u = UnitGroupCount(auto65D6E378_g, c_unitCountAll);
    for (;; auto65D6E378_u -= 1) {
        auto65D6E378_var = UnitGroupUnitFromEnd(auto65D6E378_g, auto65D6E378_u);
        if (auto65D6E378_var == null) { break; }
        libNtve_gf_PauseUnit(auto65D6E378_var, true);
        UnitSetState(auto65D6E378_var, c_unitStateTargetable, false);
        UnitSetState(auto65D6E378_var, c_unitStateSelectable, false);
        UnitSetState(auto65D6E378_var, c_unitStateInvulnerable, true);
        UnitSetState(auto65D6E378_var, c_unitStateStatusBar, false);
        UnitSetState(auto65D6E378_var, c_unitStateFidget, false);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(auto65D6E378_var), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    }
    auto0347DB94_g = UnitGroup("StoneZealot", 0, RegionFromId(63), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0347DB94_u = UnitGroupCount(auto0347DB94_g, c_unitCountAll);
    for (;; auto0347DB94_u -= 1) {
        auto0347DB94_var = UnitGroupUnitFromEnd(auto0347DB94_g, auto0347DB94_u);
        if (auto0347DB94_var == null) { break; }
        UnitGroupAdd(gv_artifactGuardiansNorth, auto0347DB94_var);
    }
    auto06E5CB5F_g = UnitGroup("StoneZealot", 0, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto06E5CB5F_u = UnitGroupCount(auto06E5CB5F_g, c_unitCountAll);
    for (;; auto06E5CB5F_u -= 1) {
        auto06E5CB5F_var = UnitGroupUnitFromEnd(auto06E5CB5F_g, auto06E5CB5F_u);
        if (auto06E5CB5F_var == null) { break; }
        UnitGroupAdd(gv_artifactGuardiansSouth, auto06E5CB5F_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatueInitialization_Init () {
    gt_StatueInitialization = TriggerCreate("gt_StatueInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Artifact Visibility
//--------------------------------------------------------------------------------------------------
bool gt_ArtifactVisibility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeGame);
        if ((gv_gameOver == true)) {
            return true;
        }

        if (((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionCircle(UnitGetPosition(gv_artifact), 14.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_p2_ZERG, RegionCircle(UnitGetPosition(gv_artifact), 14.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            VisRevealerEnable(gv_artifactRevealer, true);
        }
        else {
            if ((UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionCircle(UnitGetPosition(gv_artifact), 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup(null, gv_p2_ZERG, RegionCircle(UnitGetPosition(gv_artifact), 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                VisRevealerEnable(gv_artifactRevealer, false);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArtifactVisibility_Init () {
    gt_ArtifactVisibility = TriggerCreate("gt_ArtifactVisibility_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Artifact Guardian Activation North
//--------------------------------------------------------------------------------------------------
bool gt_ArtifactGuardianActivationNorth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6C9C88B3_g;
    int auto6C9C88B3_u;
    unit auto6C9C88B3_var;
    unitgroup auto00B238A4_g;
    int auto00B238A4_u;
    unit auto00B238A4_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p2_ZERG))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p2_ZERG, UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ArtifactShieldActivation, true, true);
    SoundPlay(SoundLink("StoneZealot_Birth", -1), PlayerGroupAll(), 100.0, 0.0);
    auto6C9C88B3_g = UnitGroup("StoneZealot", c_playerAny, RegionFromId(63), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6C9C88B3_u = UnitGroupCount(auto6C9C88B3_g, c_unitCountAll);
    for (;; auto6C9C88B3_u -= 1) {
        auto6C9C88B3_var = UnitGroupUnitFromEnd(auto6C9C88B3_g, auto6C9C88B3_u);
        if (auto6C9C88B3_var == null) { break; }
        UnitSetTeamColorIndex(auto6C9C88B3_var, 11);
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(auto6C9C88B3_var), c_animNameDefault);
        libNtve_gf_TurnAllAnimationPropertiesOff(libNtve_gf_MainActorofUnit(auto6C9C88B3_var));
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(auto6C9C88B3_var), c_animNameDefault, "Stand Work End", c_animFlagNonLooping, c_animTimeDefault);
        SoundPlayAtPoint(SoundLink("Thor_Movement", -1), PlayerGroupAll(), UnitGetPosition(auto6C9C88B3_var), 0.0, 100.0, 0.0);
    }
    CameraShakeStart(gv_p1_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.2, 2.0, 100.0, 3.534);
    Wait(3.534, c_timeGame);
    auto00B238A4_g = UnitGroup("StoneZealot", c_playerAny, RegionFromId(63), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto00B238A4_u = UnitGroupCount(auto00B238A4_g, c_unitCountAll);
    for (;; auto00B238A4_u -= 1) {
        auto00B238A4_var = UnitGroupUnitFromEnd(auto00B238A4_g, auto00B238A4_u);
        if (auto00B238A4_var == null) { break; }
        libNtve_gf_PauseUnit(auto00B238A4_var, false);
        UnitSetState(auto00B238A4_var, c_unitStateInvulnerable, false);
        UnitSetState(auto00B238A4_var, c_unitStateTargetable, true);
        UnitSetState(auto00B238A4_var, c_unitStateSelectable, true);
        UnitSetState(auto00B238A4_var, c_unitStateStatusBar, true);
        UnitSetOwner(auto00B238A4_var, gv_p3_TEMPLE, true);
        UnitGroupAdd(gv_artifactGuardiansNorth, auto00B238A4_var);
        UnitSetPropertyFixed(auto00B238A4_var, c_unitPropLifeMax, gv_statueHealth);
        UnitSetPropertyFixed(auto00B238A4_var, c_unitPropLifePercent, 100.0);
    }
    TriggerEnable(gt_ArtifactGuardiansNorthAttacks, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArtifactGuardianActivationNorth_Init () {
    gt_ArtifactGuardianActivationNorth = TriggerCreate("gt_ArtifactGuardianActivationNorth_Func");
    TriggerAddEventUnitRegion(gt_ArtifactGuardianActivationNorth, null, RegionFromId(3), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Artifact Guardian Activation South
//--------------------------------------------------------------------------------------------------
bool gt_ArtifactGuardianActivationSouth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoDC337D76_g;
    int autoDC337D76_u;
    unit autoDC337D76_var;
    unitgroup autoBCAA4503_g;
    int autoBCAA4503_u;
    unit autoBCAA4503_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitKill(UnitFromId(572));
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus01MusicAlt", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    UISetRestartLoadingScreen(ConversationDataStateText("Maps|TTychus01", "Loading Screen Restart 2"));
    TriggerExecute(gt_ObjectiveGettotheArtifactComplete, true, false);
    TriggerExecute(gt_ArtifactShieldActivation, true, true);
    SoundPlay(SoundLink("StoneZealot_Birth", -1), PlayerGroupAll(), 100.0, 0.0);
    TimerStart(gv_guardianTimer, c_timerDurationInfinite, false, c_timeGame);
    autoDC337D76_g = UnitGroup("StoneZealot", c_playerAny, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDC337D76_u = UnitGroupCount(autoDC337D76_g, c_unitCountAll);
    for (;; autoDC337D76_u -= 1) {
        autoDC337D76_var = UnitGroupUnitFromEnd(autoDC337D76_g, autoDC337D76_u);
        if (autoDC337D76_var == null) { break; }
        UnitSetTeamColorIndex(autoDC337D76_var, 11);
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(autoDC337D76_var), c_animNameDefault);
        libNtve_gf_TurnAllAnimationPropertiesOff(libNtve_gf_MainActorofUnit(autoDC337D76_var));
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(autoDC337D76_var), c_animNameDefault, "Stand Work End", c_animFlagNonLooping, c_animTimeDefault);
        SoundPlayAtPoint(SoundLink("Thor_Movement", -1), PlayerGroupAll(), UnitGetPosition(autoDC337D76_var), 0.0, 100.0, 0.0);
        libNtve_gf_ShareVisionofUnit(autoDC337D76_var, true, gv_p1_USER);
    }
    CameraShakeStart(gv_p1_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.2, 2.0, 100.0, 3.534);
    Wait(3.534, c_timeGame);
    TriggerExecute(gt_ObjectiveDestroytheStatuesDiscover, true, false);
    autoBCAA4503_g = UnitGroup("StoneZealot", c_playerAny, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBCAA4503_u = UnitGroupCount(autoBCAA4503_g, c_unitCountAll);
    for (;; autoBCAA4503_u -= 1) {
        autoBCAA4503_var = UnitGroupUnitFromEnd(autoBCAA4503_g, autoBCAA4503_u);
        if (autoBCAA4503_var == null) { break; }
        libNtve_gf_PauseUnit(autoBCAA4503_var, false);
        UnitSetState(autoBCAA4503_var, c_unitStateInvulnerable, false);
        UnitSetState(autoBCAA4503_var, c_unitStateTargetable, true);
        UnitSetState(autoBCAA4503_var, c_unitStateSelectable, true);
        UnitSetState(autoBCAA4503_var, c_unitStateStatusBar, true);
        UnitSetOwner(autoBCAA4503_var, gv_p3_TEMPLE, true);
        UnitGroupAdd(gv_artifactGuardiansSouth, autoBCAA4503_var);
        UnitSetPropertyFixed(autoBCAA4503_var, c_unitPropLifeMax, gv_statueHealth);
        UnitSetPropertyFixed(autoBCAA4503_var, c_unitPropLifePercent, 100.0);
    }
    TriggerEnable(gt_ArtifactGuardiansSouthAttacks, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArtifactGuardianActivationSouth_Init () {
    gt_ArtifactGuardianActivationSouth = TriggerCreate("gt_ArtifactGuardianActivationSouth_Func");
    TriggerAddEventUnitRegion(gt_ArtifactGuardianActivationSouth, null, RegionFromId(65), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Artifact Shield Activation
//--------------------------------------------------------------------------------------------------
bool gt_ArtifactShieldActivation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayAtPoint(SoundLink("Doodad_ArtifactShrine_Activate", -1), PlayerGroupAll(), UnitGetPosition(gv_artifact), 0.0, 100.0, 0.0);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(66), "ArtifactShrine", c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(2.0, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(66), "ArtifactShrine", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    TriggerExecute(gt_ShieldQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArtifactShieldActivation_Init () {
    gt_ArtifactShieldActivation = TriggerCreate("gt_ArtifactShieldActivation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Artifact Guardians North Attacks
//--------------------------------------------------------------------------------------------------
bool gt_ArtifactGuardiansNorthAttacks_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup autoB75B9F15_g;
    int autoB75B9F15_u;
    unit autoB75B9F15_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_artifactGuardiansNorth, c_unitCountAlive) > 0)) {
        lv_enemyGroup = UnitGroupAlliance(gv_p3_TEMPLE, c_unitAllianceEnemy, RegionFromId(63), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) > 0)) {
            autoB75B9F15_g = gv_artifactGuardiansNorth;
            autoB75B9F15_u = UnitGroupCount(autoB75B9F15_g, c_unitCountAll);
            for (;; autoB75B9F15_u -= 1) {
                autoB75B9F15_var = UnitGroupUnitFromEnd(autoB75B9F15_g, autoB75B9F15_u);
                if (autoB75B9F15_var == null) { break; }
                UnitIssueOrder(autoB75B9F15_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(gv_artifact), lv_enemyGroup))), c_orderQueueReplace);
            }
        }
        else {
            UnitIssueOrder(UnitFromId(2021), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1008)), c_orderQueueReplace);
            UnitIssueOrder(UnitFromId(972), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1888)), c_orderQueueReplace);
            UnitIssueOrder(UnitFromId(2022), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2048)), c_orderQueueReplace);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArtifactGuardiansNorthAttacks_Init () {
    gt_ArtifactGuardiansNorthAttacks = TriggerCreate("gt_ArtifactGuardiansNorthAttacks_Func");
    TriggerEnable(gt_ArtifactGuardiansNorthAttacks, false);
    TriggerAddEventTimePeriodic(gt_ArtifactGuardiansNorthAttacks, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Artifact Guardians South Attacks
//--------------------------------------------------------------------------------------------------
bool gt_ArtifactGuardiansSouthAttacks_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup autoC8A4FE47_g;
    int autoC8A4FE47_u;
    unit autoC8A4FE47_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_artifactGuardiansSouth, c_unitCountAlive) > 0)) {
        lv_enemyGroup = UnitGroupAlliance(gv_p3_TEMPLE, c_unitAllianceEnemy, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) > 0)) {
            autoC8A4FE47_g = gv_artifactGuardiansSouth;
            autoC8A4FE47_u = UnitGroupCount(autoC8A4FE47_g, c_unitCountAll);
            for (;; autoC8A4FE47_u -= 1) {
                autoC8A4FE47_var = UnitGroupUnitFromEnd(autoC8A4FE47_g, autoC8A4FE47_u);
                if (autoC8A4FE47_var == null) { break; }
                UnitIssueOrder(autoC8A4FE47_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(gv_artifact), lv_enemyGroup))), c_orderQueueReplace);
            }
        }
        else {
            UnitIssueOrder(UnitFromId(150), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1007)), c_orderQueueReplace);
            UnitIssueOrder(UnitFromId(149), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1889)), c_orderQueueReplace);
            UnitIssueOrder(UnitFromId(151), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2023)), c_orderQueueReplace);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArtifactGuardiansSouthAttacks_Init () {
    gt_ArtifactGuardiansSouthAttacks = TriggerCreate("gt_ArtifactGuardiansSouthAttacks_Func");
    TriggerEnable(gt_ArtifactGuardiansSouthAttacks, false);
    TriggerAddEventTimePeriodic(gt_ArtifactGuardiansSouthAttacks, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Artifact Guardian Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_ArtifactGuardianDestroyed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_victoryUnit;

    // Automatic Variable Declarations
    unitgroup auto2ABD4060_g;
    int auto2ABD4060_u;
    unit auto2ABD4060_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "StoneZealot"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayAtPoint(SoundLink("Thor_Movement", -1), PlayerGroupAll(), UnitGetPosition(EventUnit()), 0.0, 100.0, 0.0);
    if ((UnitGroupHasUnit(gv_artifactGuardiansSouth, EventUnit()) == true)) {
        gv_statuesDestoyed += 1;
        ObjectiveSetName(gv_objective_DestroytheStatues, (StringExternal("Param/Value/98F1F2DC") + IntToText(gv_statuesDestoyed) + StringExternal("Param/Value/4BD9CBE6")));
    }

    if (((UnitGroupCount(gv_artifactGuardiansSouth, c_unitCountAlive) == 0) || ((UnitGroupCount(gv_artifactGuardiansNorth, c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup(null, gv_p1_USER, RegionFromId(63), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > UnitGroupCount(UnitGroup(null, gv_p2_ZERG, RegionFromId(63), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))))) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_gameOver = true;
        TimerPause(gv_guardianTimer, true);
        SoundPlayAtPoint(SoundLink("Doodad_ArtifactShrine_Deactivate", -1), PlayerGroupAll(), UnitGetPosition(gv_artifact), 0.0, 100.0, 0.0);
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(66), "ArtifactShrine", c_animNameDefault, "Stand Work End A", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
        Wait(2.0, c_timeGame);
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(66), "ArtifactShrine", c_animNameDefault, "Stand A", c_animFlagPlayForever, c_animTimeDefault);
        TriggerExecute(gt_ObjectiveGettotheArtifactComplete, true, false);
        TriggerExecute(gt_ObjectiveDestroytheStatuesComplete, true, false);
        Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
        TriggerExecute(gt_VictoryArtifactGained, true, false);
        return true;
    }

    if ((UnitGroupCount(gv_artifactGuardiansNorth, c_unitCountAlive) == 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_gameOver = true;
        TriggerEnable(gt_ArtifactGuardianActivationSouth, false);
        TriggerEnable(gt_ObjectiveDestroytheStatuesDiscover, false);
        UnitKill(UnitFromId(572));
        TechTreeUpgradeAddLevel(gv_p2_ZERG, "overlordtransport", 1);
        TechTreeUpgradeAddLevel(gv_p2_ZERG, "overlordspeed", 1);
        libNtve_gf_CreateUnitsAtPoint2(1, "Overlord", 0, gv_p2_ZERG, PointFromId(741));
        UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
        UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
        UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
        lv_victoryUnit = UnitLastCreated();
        UnitIssueOrder(lv_victoryUnit, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_artifact)), c_orderQueueReplace);
        auto2ABD4060_g = gv_artifactGuardiansSouth;
        auto2ABD4060_u = UnitGroupCount(auto2ABD4060_g, c_unitCountAll);
        for (;; auto2ABD4060_u -= 1) {
            auto2ABD4060_var = UnitGroupUnitFromEnd(auto2ABD4060_g, auto2ABD4060_u);
            if (auto2ABD4060_var == null) { break; }
            libNtve_gf_ChangeUnitDamage(auto2ABD4060_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
        }
        SoundPlayAtPoint(SoundLink("Doodad_ArtifactShrine_Deactivate", -1), PlayerGroupAll(), UnitGetPosition(gv_artifact), 0.0, 100.0, 0.0);
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(66), "ArtifactShrine", c_animNameDefault, "Stand Work End B", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
        Wait(2.0, c_timeGame);
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(66), "ArtifactShrine", c_animNameDefault, "Stand B", c_animFlagPlayForever, c_animTimeDefault);
        while (!((libNtve_gf_UnitInRegion(lv_victoryUnit, RegionCircle(UnitGetPosition(gv_artifact), 2.0)) == true))) {
            Wait(1.0, c_timeGame);
        }
        UnitRemove(gv_artifact);
        SoundPlayAtPoint(SoundLink("Overlord_Load", -1), PlayerGroupAll(), UnitGetPosition(gv_artifact), 0.0, 100.0, 0.0);
        TriggerExecute(gt_DefeatArtifactLost, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArtifactGuardianDestroyed_Init () {
    gt_ArtifactGuardianDestroyed = TriggerCreate("gt_ArtifactGuardianDestroyed_Func");
    TriggerAddEventUnitDied(gt_ArtifactGuardianDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Artifact Attacking
//--------------------------------------------------------------------------------------------------
bool gt_ZergArtifactAttacking_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_enemies;
    point lv_target;

    // Automatic Variable Declarations
    unitgroup autoCF80BE99_g;
    int autoCF80BE99_u;
    unit autoCF80BE99_var;
    unitgroup auto0C896B25_g;
    int auto0C896B25_u;
    unit auto0C896B25_var;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(2.0, c_timeGame);
        if ((gv_gameOver == true)) {
            return true;
        }

        lv_enemies = UnitGroupAlliance(gv_p2_ZERG, c_unitAllianceEnemy, RegionFromId(63), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter((1 << c_targetFilterGround), 0, 0, 0), 0), c_unitCountAlive) > 1)) {
            lv_target = UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(gv_artifact), UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter((1 << c_targetFilterGround), 0, 0, 0), 0)));
        }
        else {
            lv_target = PointFromId(724);
        }
        autoCF80BE99_g = gv_zergArtifactAttackers;
        autoCF80BE99_u = UnitGroupCount(autoCF80BE99_g, c_unitCountAll);
        for (;; autoCF80BE99_u -= 1) {
            autoCF80BE99_var = UnitGroupUnitFromEnd(autoCF80BE99_g, autoCF80BE99_u);
            if (autoCF80BE99_var == null) { break; }
            if (((UnitGetType(autoCF80BE99_var) == "Zergling") || (UnitGetType(autoCF80BE99_var) == "Roach") || (UnitGetType(autoCF80BE99_var) == "Baneling"))) {
                UnitIssueOrder(autoCF80BE99_var, OrderTargetingPoint(AbilityCommand("attack", 0), lv_target), c_orderQueueReplace);
            }

        }
        if ((UnitGroupCount(lv_enemies, c_unitCountAlive) > 1)) {
            lv_target = UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(gv_artifact), lv_enemies));
        }
        else {
            lv_target = PointFromId(724);
        }
        auto0C896B25_g = gv_zergArtifactAttackers;
        auto0C896B25_u = UnitGroupCount(auto0C896B25_g, c_unitCountAll);
        for (;; auto0C896B25_u -= 1) {
            auto0C896B25_var = UnitGroupUnitFromEnd(auto0C896B25_g, auto0C896B25_u);
            if (auto0C896B25_var == null) { break; }
            if (((UnitGetType(auto0C896B25_var) == "Hydralisk") || (UnitGetType(auto0C896B25_var) == "Mutalisk"))) {
                UnitIssueOrder(auto0C896B25_var, OrderTargetingPoint(AbilityCommand("attack", 0), lv_target), c_orderQueueReplace);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergArtifactAttacking_Init () {
    gt_ZergArtifactAttacking = TriggerCreate("gt_ZergArtifactAttacking_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack Initiation
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackInitiation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p2_ZERG))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_zergArtifactAttackers, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackInitiation_Init () {
    gt_ZergAttackInitiation = TriggerCreate("gt_ZergAttackInitiation_Func");
    TriggerAddEventUnitRegion(gt_ZergAttackInitiation, null, RegionFromId(6), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Artifact Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergArtifactQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((UnitGroupCount(UnitGroup(null, gv_p2_ZERG, RegionCircle(UnitGetPosition(gv_artifact), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(61)), 5.0, Color(100.00, 0.00, 0.00));
    SoundPlay(SoundLink("TUIWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeReal);
    UIAlertUnit("Trigger", gv_p1_USER, StringExternal("Param/Value/DD59E033"), null, gv_artifact);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus01Adjutant00052", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus01Adjutant00052", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergArtifactQ_Init () {
    gt_ZergArtifactQ = TriggerCreate("gt_ZergArtifactQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shield Q
//--------------------------------------------------------------------------------------------------
bool gt_ShieldQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_expirationTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_expirationTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_expirationTimer, 10.0, false, c_timeGame);
    TriggerQueueEnter();
    if (((gv_gameOver == true) || (TimerGetRemaining(lv_expirationTimer) == 0.0))) {
        return true;
    }

    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_artifact), 5.0, Color(100.00, 0.00, 0.00));
    UIAlertUnit("Trigger", gv_p1_USER, StringExternal("Param/Value/47F15BDD"), null, gv_artifact);
    Wait(1.0, c_timeReal);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus01Raynor00012", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus01Raynor00012", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShieldQ_Init () {
    gt_ShieldQ = TriggerCreate("gt_ShieldQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creep Expansion
//--------------------------------------------------------------------------------------------------
bool gt_CreepExpansion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_dropPodGroup;
    point lv_dropSpot;

    // Automatic Variable Declarations
    int auto51A18BA0_ae;
    const int auto51A18BA0_ai = 1;

    // Variable Initialization
    lv_dropPodGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        auto51A18BA0_ae = gv_creepRegionsSize;
        lv_i = 1;
        for ( ; ( (auto51A18BA0_ai >= 0 && lv_i <= auto51A18BA0_ae) || (auto51A18BA0_ai < 0 && lv_i >= auto51A18BA0_ae) ) ; lv_i += auto51A18BA0_ai ) {
            Wait(9.0, c_timeGame);
            while (!((gv_inCinematic == false))) {
                Wait(1.0, c_timeGame);
            }
            if ((gv_gameOver == true)) {
                return true;
            }

            if ((UnitGroupCount(UnitGroup(null, gv_p5_UPPER_CAUSEWAY, gv_creepRegions[lv_i], UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                if ((UnitGroupCount(UnitGroup("CreepTumorBurrowed", gv_p2_ZERG, RegionCircle(RegionGetCenter(gv_creepRegions[lv_i]), 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    libCamp_gf_CreateDropPod(libCamp_ge_DropPodRace_Zerg, RegionGetCenter(gv_creepRegions[lv_i]), UnitGroupEmpty(), true);
                    libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumorBurrowed", 0, gv_p2_ZERG, RegionGetCenter(gv_creepRegions[lv_i]));
                }
                else {
                    if ((UnitGroupCount(UnitGroup(null, gv_p2_ZERG, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 250)) {
                        libNtve_gf_CreateUnitsAtPoint2(4, "Zergling", 0, gv_p2_ZERG, RegionGetCenter(RegionFromId(15)));
                        lv_dropPodGroup = UnitLastCreatedGroup();
                        libNtve_gf_CreateUnitsAtPoint2(1, "Hydralisk", 0, gv_p2_ZERG, RegionGetCenter(RegionFromId(15)));
                        UnitGroupAdd(lv_dropPodGroup, UnitLastCreated());
                        AISetGroupScriptControlled(lv_dropPodGroup, true);
                        lv_dropSpot = RegionRandomPoint(RegionCircle(RegionGetCenter(gv_creepRegions[lv_i]), 2.0));
                        libCamp_gf_CreateDropPod(libCamp_ge_DropPodRace_Zerg, lv_dropSpot, lv_dropPodGroup, true);
                        AISetGroupScriptControlled(lv_dropPodGroup, false);
                        AIAttackWaveSetTargetPoint(gv_p2_ZERG, PointFromId(724));
                        AIAttackWaveSetGatherPoint(gv_p2_ZERG, lv_dropSpot);
                        if ((PointGetX(lv_dropSpot) < PointGetX(PointFromId(246)))) {
                            AIAttackWaveAddWaypoint(gv_p2_ZERG, PointFromId(246), false);
                        }

                        if ((PointGetX(lv_dropSpot) < PointGetX(PointFromId(248)))) {
                            AIAttackWaveAddWaypoint(gv_p2_ZERG, PointFromId(248), false);
                        }

                        AIAttackWaveAddWaypoint(gv_p2_ZERG, PointFromId(250), false);
                        AIAttackWaveUseGroup(gv_p2_ZERG, lv_dropPodGroup);
                        AIAttackWaveSend(gv_p2_ZERG, 0, false);
                    }

                }
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreepExpansion_Init () {
    gt_CreepExpansion = TriggerCreate("gt_CreepExpansion_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spine Crawler Spawning
//--------------------------------------------------------------------------------------------------
bool gt_SpineCrawlerSpawning_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_drone1;
    unit lv_drone2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if (((gv_gameOver == true) || (UnitIsAlive(UnitFromId(44)) == false))) {
            return true;
        }

        if ((UnitGroupCount(UnitGroup("SpineCrawler", c_playerAny, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("SpineCrawlerUprooted", c_playerAny, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && ((UnitIsAlive(lv_drone1) == false) || (UnitGetType(lv_drone1) == "SpineCrawler") || (UnitGetType(lv_drone1) == "SpineCrawlerUprooted"))) {
            libNtve_gf_CreateUnitsAtPoint2(1, "DroneBurrowed", 0, gv_p2_ZERG, RegionGetCenter(RegionFromId(14)));
            lv_drone1 = UnitLastCreated();
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowDroneUp", 0)), c_orderQueueReplace);
        }

        if ((UnitGroupCount(UnitGroup("SpineCrawler", c_playerAny, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("SpineCrawlerUprooted", c_playerAny, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && ((UnitIsAlive(lv_drone2) == false) || (UnitGetType(lv_drone2) == "SpineCrawler") || (UnitGetType(lv_drone2) == "SpineCrawlerUprooted"))) {
            libNtve_gf_CreateUnitsAtPoint2(1, "DroneBurrowed", 0, gv_p2_ZERG, RegionGetCenter(RegionFromId(16)));
            lv_drone2 = UnitLastCreated();
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowDroneUp", 0)), c_orderQueueReplace);
        }

        Wait(3.0, c_timeAI);
        if ((UnitIsAlive(lv_drone1) == true) && (UnitGetType(lv_drone1) == "Drone")) {
            UnitIssueOrder(lv_drone1, OrderTargetingPoint(AbilityCommand("ZergBuild", 14), RegionGetCenter(RegionFromId(14))), c_orderQueueReplace);
        }

        if ((UnitIsAlive(lv_drone2) == true) && (UnitGetType(lv_drone2) == "Drone")) {
            UnitIssueOrder(lv_drone2, OrderTargetingPoint(AbilityCommand("ZergBuild", 14), RegionGetCenter(RegionFromId(16))), c_orderQueueReplace);
        }

        Wait(5.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpineCrawlerSpawning_Init () {
    gt_SpineCrawlerSpawning = TriggerCreate("gt_SpineCrawlerSpawning_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spine Crawler Movement
//--------------------------------------------------------------------------------------------------
bool gt_SpineCrawlerMovement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unit lv_tempSpineCrawler;

    // Automatic Variable Declarations
    int auto937B89B4_ae;
    const int auto937B89B4_ai = 1;
    int autoBD68DE70_ae;
    const int autoBD68DE70_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeGame);
        while (!((gv_inCinematic == false))) {
            Wait(1.0, c_timeGame);
        }
        lv_tempSpineCrawler = null;
        if ((UnitGroupCount(UnitGroup("SpineCrawler", gv_p2_ZERG, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1)) {
            lv_tempSpineCrawler = UnitGroupUnit(UnitGroup("SpineCrawler", gv_p2_ZERG, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
            if ((UnitGetCustomValue(lv_tempSpineCrawler, 0) < 1.0)) {
            }
            else {
                lv_tempSpineCrawler = null;
            }
        }

        if ((lv_tempSpineCrawler == null)) {
            if ((UnitGroupCount(UnitGroup("SpineCrawler", gv_p2_ZERG, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1)) {
                lv_tempSpineCrawler = UnitGroupUnit(UnitGroup("SpineCrawler", gv_p2_ZERG, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
                if ((UnitGetCustomValue(lv_tempSpineCrawler, 0) < 1.0)) {
                }
                else {
                    lv_tempSpineCrawler = null;
                }
            }

        }

        if ((lv_tempSpineCrawler != null)) {
            auto937B89B4_ae = gv_spineCrawlerSize;
            lv_i = 1;
            for ( ; ( (auto937B89B4_ai >= 0 && lv_i <= auto937B89B4_ae) || (auto937B89B4_ai < 0 && lv_i >= auto937B89B4_ae) ) ; lv_i += auto937B89B4_ai ) {
                if ((gf_CreepExistsAroundPoint(gv_spineCrawlerPoints[lv_i]) == true) && ((gv_spineCrawlers[lv_i] == null) || (UnitIsAlive(gv_spineCrawlers[lv_i]) == false))) {
                    UnitSetCustomValue(lv_tempSpineCrawler, 0, 2.0);
                    gv_spineCrawlers[lv_i] = lv_tempSpineCrawler;
                    UnitIssueOrder(gv_spineCrawlers[lv_i], Order(AbilityCommand("SpineCrawlerUproot", 0)), c_orderQueueReplace);
                    break;
                }

            }
        }

        autoBD68DE70_ae = gv_spineCrawlerSize;
        lv_i = 1;
        for ( ; ( (autoBD68DE70_ai >= 0 && lv_i <= autoBD68DE70_ae) || (autoBD68DE70_ai < 0 && lv_i >= autoBD68DE70_ae) ) ; lv_i += autoBD68DE70_ai ) {
            if ((gv_spineCrawlers[lv_i] != null) && (UnitIsAlive(gv_spineCrawlers[lv_i]) == true)) {
                if ((UnitGetType(gv_spineCrawlers[lv_i]) == "SpineCrawlerUprooted")) {
                    UnitIssueOrder(gv_spineCrawlers[lv_i], OrderTargetingPoint(AbilityCommand("SpineCrawlerRoot", 0), gv_spineCrawlerPoints[lv_i]), c_orderQueueReplace);
                }

            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpineCrawlerMovement_Init () {
    gt_SpineCrawlerMovement = TriggerCreate("gt_SpineCrawlerMovement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Crazy Q
//--------------------------------------------------------------------------------------------------
bool gt_CrazyQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus01Tychus00040", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus01Tychus00040", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTychus01Raynor00041", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus01Raynor00041", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CrazyQ_Init () {
    gt_CrazyQ = TriggerCreate("gt_CrazyQ_Func");
    TriggerAddEventUnitRegion(gt_CrazyQ, null, RegionFromId(40), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_FirstAttackQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    SoundPlay(SoundLink("TUIWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeReal);
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/9957AA74"), null, PointFromId(1930));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus01Adjutant00010", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus01Adjutant00010", 0), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstAttackQ_Init () {
    gt_FirstAttackQ = TriggerCreate("gt_FirstAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Close Reveal Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergCloseRevealQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_extraUnits;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_extraUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p2_ZERG))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealerCreate(gv_p1_USER, RegionFromId(21));
    VisRevealerEnable(VisRevealerLastCreated(), true);
    if ((TimerGetRemaining(gv_zergSpeedBumpTimer) < 180.0)) {
        libNtve_gf_CreateUnitsAtPoint2(36, "Zergling", 0, gv_p2_ZERG, RegionGetCenter(RegionFromId(15)));
        lv_extraUnits = UnitLastCreatedGroup();
        AISetGroupScriptControlled(lv_extraUnits, true);
        libCamp_gf_CreateDropPod(libCamp_ge_DropPodRace_Zerg, PointFromId(1923), lv_extraUnits, true);
        libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumorBurrowed", 0, gv_p2_ZERG, PointFromId(1923));
        AISetGroupScriptControlled(lv_extraUnits, false);
        AIAttackWaveSetTargetPoint(gv_p2_ZERG, PointFromId(724));
        AIAttackWaveSetGatherPoint(gv_p2_ZERG, PointFromId(1923));
        AIAttackWaveUseGroup(gv_p2_ZERG, lv_extraUnits);
        AIAttackWaveSend(gv_p2_ZERG, 0, false);
    }

    if ((TimerGetRemaining(gv_zergSpeedBumpTimer) < 120.0)) {
        libNtve_gf_CreateUnitsAtPoint2(8, "Hydralisk", 0, gv_p2_ZERG, RegionGetCenter(RegionFromId(15)));
        lv_extraUnits = UnitLastCreatedGroup();
        AISetGroupScriptControlled(lv_extraUnits, true);
        libCamp_gf_CreateDropPod(libCamp_ge_DropPodRace_Zerg, PointFromId(1924), lv_extraUnits, true);
        libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumorBurrowed", 0, gv_p2_ZERG, PointFromId(1924));
        AISetGroupScriptControlled(lv_extraUnits, false);
        AIAttackWaveSetTargetPoint(gv_p2_ZERG, PointFromId(724));
        AIAttackWaveSetGatherPoint(gv_p2_ZERG, PointFromId(1924));
        AIAttackWaveUseGroup(gv_p2_ZERG, lv_extraUnits);
        AIAttackWaveSend(gv_p2_ZERG, 0, false);
    }

    if ((TimerGetRemaining(gv_zergSpeedBumpTimer) < 60.0)) {
        libNtve_gf_CreateUnitsAtPoint2(8, "Hydralisk", 0, gv_p2_ZERG, RegionGetCenter(RegionFromId(15)));
        lv_extraUnits = UnitLastCreatedGroup();
        AISetGroupScriptControlled(lv_extraUnits, true);
        libCamp_gf_CreateDropPod(libCamp_ge_DropPodRace_Zerg, PointFromId(1925), lv_extraUnits, true);
        libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumorBurrowed", 0, gv_p2_ZERG, PointFromId(1925));
        AISetGroupScriptControlled(lv_extraUnits, false);
        AIAttackWaveSetTargetPoint(gv_p2_ZERG, PointFromId(724));
        AIAttackWaveSetGatherPoint(gv_p2_ZERG, PointFromId(1925));
        AIAttackWaveUseGroup(gv_p2_ZERG, lv_extraUnits);
        AIAttackWaveSend(gv_p2_ZERG, 0, false);
    }

    while (!((TimerGetRemaining(gv_zergSpeedBumpTimer) < 180.0))) {
        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(59)), 5.0, Color(100.00, 0.00, 0.00));
    SoundPlay(SoundLink("TUIWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeReal);
    UIAlertPoint("Trigger", gv_p1_USER, StringExternal("Param/Value/9B7E042C"), null, RegionGetCenter(RegionFromId(59)));
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Speech);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TTychus01Adjutant00050", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus01Adjutant00050", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergCloseRevealQ_Init () {
    gt_ZergCloseRevealQ = TriggerCreate("gt_ZergCloseRevealQ_Func");
    TriggerAddEventUnitRegion(gt_ZergCloseRevealQ, null, RegionFromId(59), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add Zerg Speed Bump Unit
//--------------------------------------------------------------------------------------------------
bool gt_AddZergSpeedBumpUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_randomPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p2_ZERG))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_zergSpeedBumpTimer) > 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AISetUnitScriptControlled(EventUnit(), true);
    UnitGroupAdd(gv_zergSpeedBumpUnits, EventUnit());
    lv_randomPoint = RegionRandomPoint(RegionFromId(62));
    UnitSetCustomValue(EventUnit(), 0, PointGetX(lv_randomPoint));
    UnitSetCustomValue(EventUnit(), 1, PointGetY(lv_randomPoint));
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), Point(UnitGetCustomValue(EventUnit(), 0), UnitGetCustomValue(EventUnit(), 1))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddZergSpeedBumpUnit_Init () {
    gt_AddZergSpeedBumpUnit = TriggerCreate("gt_AddZergSpeedBumpUnit_Func");
    TriggerAddEventUnitRegion(gt_AddZergSpeedBumpUnit, null, RegionFromId(61), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Speed Bump Controller
//--------------------------------------------------------------------------------------------------
bool gt_ZergSpeedBumpController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_randomPoint;

    // Automatic Variable Declarations
    unitgroup autoB111683E_g;
    int autoB111683E_u;
    unit autoB111683E_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(2.0, c_timeReal);
        autoB111683E_g = gv_zergSpeedBumpUnits;
        autoB111683E_u = UnitGroupCount(autoB111683E_g, c_unitCountAll);
        for (;; autoB111683E_u -= 1) {
            autoB111683E_var = UnitGroupUnitFromEnd(autoB111683E_g, autoB111683E_u);
            if (autoB111683E_var == null) { break; }
            if ((RegionContainsPoint(RegionCircle(Point(UnitGetCustomValue(autoB111683E_var, 0), UnitGetCustomValue(autoB111683E_var, 1)), 2.0), UnitGetPosition(autoB111683E_var)) == true)) {
                lv_randomPoint = RegionRandomPoint(RegionFromId(62));
                UnitSetCustomValue(autoB111683E_var, 0, PointGetX(lv_randomPoint));
                UnitSetCustomValue(autoB111683E_var, 1, PointGetY(lv_randomPoint));
            }
            else {
                if ((RandomInt(1, 3) == 1)) {
                    UnitIssueOrder(autoB111683E_var, OrderTargetingPoint(AbilityCommand("attack", 0), Point(UnitGetCustomValue(autoB111683E_var, 0), UnitGetCustomValue(autoB111683E_var, 1))), c_orderQueueReplace);
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergSpeedBumpController_Init () {
    gt_ZergSpeedBumpController = TriggerCreate("gt_ZergSpeedBumpController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Speed Bump Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt_ZergSpeedBumpTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_ZergSpeedBumpController);
    TriggerEnable(gt_AddZergSpeedBumpUnit, false);
    if ((UnitGroupCount(gv_zergSpeedBumpUnits, c_unitCountAlive) > 0)) {
        AISetGroupScriptControlled(gv_zergSpeedBumpUnits, false);
        AIAttackWaveSetTargetPoint(gv_p2_ZERG, PointFromId(724));
        AIAttackWaveSetGatherPoint(gv_p2_ZERG, PointFromId(1922));
        AIAttackWaveUseGroup(gv_p2_ZERG, gv_zergSpeedBumpUnits);
        AIAttackWaveSend(gv_p2_ZERG, 0, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergSpeedBumpTimerExpires_Init () {
    gt_ZergSpeedBumpTimerExpires = TriggerCreate("gt_ZergSpeedBumpTimerExpires_Func");
    TriggerAddEventTimer(gt_ZergSpeedBumpTimerExpires, gv_zergSpeedBumpTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Speed Bump Timer Nears Expiration
//--------------------------------------------------------------------------------------------------
bool gt_ZergSpeedBumpTimerNearsExpiration_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_extraUnits;

    // Automatic Variable Declarations
    unitgroup auto4953A7BC_g;
    int auto4953A7BC_u;
    unit auto4953A7BC_var;

    // Variable Initialization
    lv_extraUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(UnitFromId(44)) == true)) {
        PlayerModifyPropertyInt(gv_p5_UPPER_CAUSEWAY, c_playerPropMinerals, c_playerPropOperSetTo, 0);
        PlayerModifyPropertyInt(gv_p5_UPPER_CAUSEWAY, c_playerPropVespene, c_playerPropOperSetTo, 0);
        auto4953A7BC_g = UnitGroup("Gateway", gv_p5_UPPER_CAUSEWAY, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto4953A7BC_u = UnitGroupCount(auto4953A7BC_g, c_unitCountAll);
        for (;; auto4953A7BC_u -= 1) {
            auto4953A7BC_var = UnitGroupUnitFromEnd(auto4953A7BC_g, auto4953A7BC_u);
            if (auto4953A7BC_var == null) { break; }
            UnitIssueOrder(auto4953A7BC_var, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
            UnitIssueOrder(auto4953A7BC_var, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
            UnitIssueOrder(auto4953A7BC_var, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
        }
    }

    if ((UnitIsAlive(UnitFromId(124)) == true)) {
        libNtve_gf_CreateUnitsAtPoint2(36, "Zergling", 0, gv_p2_ZERG, RegionGetCenter(RegionFromId(15)));
        lv_extraUnits = UnitLastCreatedGroup();
        AISetGroupScriptControlled(lv_extraUnits, true);
        libCamp_gf_CreateDropPod(libCamp_ge_DropPodRace_Zerg, PointFromId(1923), lv_extraUnits, true);
        libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumorBurrowed", 0, gv_p2_ZERG, PointFromId(995));
        AISetGroupScriptControlled(lv_extraUnits, false);
        AIAttackWaveSetTargetPoint(gv_p2_ZERG, PointFromId(724));
        AIAttackWaveSetGatherPoint(gv_p2_ZERG, PointFromId(995));
        AIAttackWaveUseGroup(gv_p2_ZERG, lv_extraUnits);
        AIAttackWaveSend(gv_p2_ZERG, 0, false);
    }

    if (((UnitIsAlive(UnitFromId(124)) == true) || (UnitGroupCount(UnitGroupAlliance(gv_p5_UPPER_CAUSEWAY, c_unitAllianceAlly, RegionFromId(61), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
        libNtve_gf_CreateUnitsAtPoint2(36, "Zergling", 0, gv_p2_ZERG, RegionGetCenter(RegionFromId(15)));
        lv_extraUnits = UnitLastCreatedGroup();
        AISetGroupScriptControlled(lv_extraUnits, true);
        libCamp_gf_CreateDropPod(libCamp_ge_DropPodRace_Zerg, PointFromId(1922), lv_extraUnits, true);
        libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumorBurrowed", 0, gv_p2_ZERG, PointFromId(1922));
        AISetGroupScriptControlled(lv_extraUnits, false);
        AIAttackWaveSetTargetPoint(gv_p2_ZERG, PointFromId(724));
        AIAttackWaveSetGatherPoint(gv_p2_ZERG, PointFromId(1922));
        AIAttackWaveUseGroup(gv_p2_ZERG, lv_extraUnits);
        AIAttackWaveSend(gv_p2_ZERG, 0, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergSpeedBumpTimerNearsExpiration_Init () {
    gt_ZergSpeedBumpTimerNearsExpiration = TriggerCreate("gt_ZergSpeedBumpTimerNearsExpiration_Func");
    TriggerAddEventTimer(gt_ZergSpeedBumpTimerNearsExpiration, gv_zergSpeedBumpTimerShorter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nexus Droppod
//--------------------------------------------------------------------------------------------------
bool gt_NexusDroppod_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_dropPoint;

    // Automatic Variable Declarations
    const int auto847A9D30_n = 12;
    int auto847A9D30_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_dropPoint = UnitGetPosition(EventUnit());
    if ((TimerGetRemaining(gv_zergSpeedBumpTimer) > 60.0)) {
        Wait(2.0, c_timeAI);
        for (auto847A9D30_i = 1; auto847A9D30_i <= auto847A9D30_n; auto847A9D30_i += 1) {
            UnitIssueOrder(UnitFromId(1921), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionCircle(lv_dropPoint, 3.0))), c_orderQueueReplace);
            Wait(1.0, c_timeAI);
        }
    }

    while (!((UnitGroupCount(UnitGroup("PhotonCannon", gv_p5_UPPER_CAUSEWAY, RegionCircle(lv_dropPoint, 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup(null, gv_p2_ZERG, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 10))) {
        Wait(1.0, c_timeAI);
    }
    Wait(8.0, c_timeAI);
    libCamp_gf_CreateDropPod(libCamp_ge_DropPodRace_Zerg, lv_dropPoint, UnitGroupEmpty(), true);
    libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumorBurrowed", 0, gv_p2_ZERG, lv_dropPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NexusDroppod_Init () {
    gt_NexusDroppod = TriggerCreate("gt_NexusDroppod_Func");
    TriggerAddEventUnitDied(gt_NexusDroppod, UnitRefFromUnit(UnitFromId(124)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pylon Droppod 1
//--------------------------------------------------------------------------------------------------
bool gt_PylonDroppod1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_dropPoint;

    // Automatic Variable Declarations
    const int auto86AC6593_n = 8;
    int auto86AC6593_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_dropPoint = UnitGetPosition(EventUnit());
    if ((TimerGetRemaining(gv_zergSpeedBumpTimer) > 45.0)) {
        Wait(2.0, c_timeAI);
        for (auto86AC6593_i = 1; auto86AC6593_i <= auto86AC6593_n; auto86AC6593_i += 1) {
            UnitIssueOrder(UnitFromId(1921), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionCircle(lv_dropPoint, 2.0))), c_orderQueueReplace);
            Wait(1.0, c_timeAI);
        }
    }

    while (!((UnitGroupCount(UnitGroup("PhotonCannon", gv_p5_UPPER_CAUSEWAY, RegionCircle(lv_dropPoint, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup(null, gv_p2_ZERG, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 10))) {
        Wait(1.0, c_timeAI);
    }
    Wait(8.0, c_timeAI);
    libCamp_gf_CreateDropPod(libCamp_ge_DropPodRace_Zerg, lv_dropPoint, UnitGroupEmpty(), true);
    libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumorBurrowed", 0, gv_p2_ZERG, lv_dropPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PylonDroppod1_Init () {
    gt_PylonDroppod1 = TriggerCreate("gt_PylonDroppod1_Func");
    TriggerAddEventUnitDied(gt_PylonDroppod1, UnitRefFromUnit(UnitFromId(313)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pylon Droppod 2
//--------------------------------------------------------------------------------------------------
bool gt_PylonDroppod2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_dropPoint;

    // Automatic Variable Declarations
    const int auto01D7D1C9_n = 8;
    int auto01D7D1C9_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_dropPoint = UnitGetPosition(EventUnit());
    if ((TimerGetRemaining(gv_zergSpeedBumpTimer) > 45.0)) {
        Wait(2.0, c_timeAI);
        for (auto01D7D1C9_i = 1; auto01D7D1C9_i <= auto01D7D1C9_n; auto01D7D1C9_i += 1) {
            UnitIssueOrder(UnitFromId(1921), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionCircle(lv_dropPoint, 2.0))), c_orderQueueReplace);
            Wait(0.5, c_timeAI);
        }
    }

    while (!((UnitGroupCount(UnitGroup("PhotonCannon", gv_p5_UPPER_CAUSEWAY, RegionCircle(lv_dropPoint, 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup(null, gv_p2_ZERG, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 10))) {
        Wait(1.0, c_timeAI);
    }
    Wait(8.0, c_timeAI);
    libCamp_gf_CreateDropPod(libCamp_ge_DropPodRace_Zerg, lv_dropPoint, UnitGroupEmpty(), true);
    libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumorBurrowed", 0, gv_p2_ZERG, lv_dropPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PylonDroppod2_Init () {
    gt_PylonDroppod2 = TriggerCreate("gt_PylonDroppod2_Func");
    TriggerAddEventUnitDied(gt_PylonDroppod2, UnitRefFromUnit(UnitFromId(314)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pylon Droppod 3
//--------------------------------------------------------------------------------------------------
bool gt_PylonDroppod3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_dropPoint;

    // Automatic Variable Declarations
    const int autoBAB15F7B_n = 12;
    int autoBAB15F7B_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_dropPoint = UnitGetPosition(EventUnit());
    if ((TimerGetRemaining(gv_zergSpeedBumpTimer) > 30.0)) {
        Wait(2.0, c_timeAI);
        for (autoBAB15F7B_i = 1; autoBAB15F7B_i <= autoBAB15F7B_n; autoBAB15F7B_i += 1) {
            UnitIssueOrder(UnitFromId(1921), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionCircle(lv_dropPoint, 2.0))), c_orderQueueReplace);
            Wait(1.0, c_timeAI);
        }
    }

    while (!((UnitGroupCount(UnitGroup("PhotonCannon", gv_p5_UPPER_CAUSEWAY, RegionCircle(lv_dropPoint, 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup(null, gv_p2_ZERG, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 10))) {
        Wait(1.0, c_timeAI);
    }
    Wait(8.0, c_timeAI);
    libCamp_gf_CreateDropPod(libCamp_ge_DropPodRace_Zerg, lv_dropPoint, UnitGroupEmpty(), true);
    libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumorBurrowed", 0, gv_p2_ZERG, lv_dropPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PylonDroppod3_Init () {
    gt_PylonDroppod3 = TriggerCreate("gt_PylonDroppod3_Func");
    TriggerAddEventUnitDied(gt_PylonDroppod3, UnitRefFromUnit(UnitFromId(332)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gateway Droppod
//--------------------------------------------------------------------------------------------------
bool gt_GatewayDroppod_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_dropPoint;

    // Automatic Variable Declarations
    const int auto17CBCC28_n = 12;
    int auto17CBCC28_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_dropPoint = UnitGetPosition(EventUnit());
    if ((TimerGetRemaining(gv_zergSpeedBumpTimer) > 45.0)) {
        Wait(2.0, c_timeAI);
        for (auto17CBCC28_i = 1; auto17CBCC28_i <= auto17CBCC28_n; auto17CBCC28_i += 1) {
            UnitIssueOrder(UnitFromId(1921), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionCircle(lv_dropPoint, 2.0))), c_orderQueueReplace);
            Wait(0.5, c_timeAI);
        }
    }

    while (!((UnitGroupCount(UnitGroup("PhotonCannon", gv_p5_UPPER_CAUSEWAY, RegionCircle(lv_dropPoint, 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup(null, gv_p2_ZERG, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 10))) {
        Wait(1.0, c_timeAI);
    }
    Wait(8.0, c_timeAI);
    libCamp_gf_CreateDropPod(libCamp_ge_DropPodRace_Zerg, lv_dropPoint, UnitGroupEmpty(), true);
    libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumorBurrowed", 0, gv_p2_ZERG, lv_dropPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GatewayDroppod_Init () {
    gt_GatewayDroppod = TriggerCreate("gt_GatewayDroppod_Func");
    TriggerAddEventUnitDied(gt_GatewayDroppod, UnitRefFromUnit(UnitFromId(326)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Warp Defense
//--------------------------------------------------------------------------------------------------
bool gt_ProtossWarpDefense_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p2_ZERG, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TimerGetRemaining(gv_zergSpeedBumpTimer) <= 240.0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }

    UnitIssueOrder(UnitFromId(1921), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), RegionRandomPoint(RegionFromId(38))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossWarpDefense_Init () {
    gt_ProtossWarpDefense = TriggerCreate("gt_ProtossWarpDefense_Func");
    TriggerAddEventTimePeriodic(gt_ProtossWarpDefense, 4.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_OverseerBullies, true, false);
    AICampaignStart(gv_p2_ZERG);
    AICampaignStart(gv_p4_LOWER_CAUSEWAY);
    AICampaignStart(gv_p5_UPPER_CAUSEWAY);
    AICampaignStart(gv_p6_FIRST_PROTOSS);
    TriggerExecute(gt_ZergAttackWavesProtoss, true, false);
    TriggerExecute(gt_ZergAttackWavesPlayer, true, false);
    TriggerExecute(gt_UpperProtossAttackWaves, true, false);
    TriggerExecute(gt_AIUpgradesH, true, false);
    TriggerExecute(gt_AIUpgradesI, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack Waves - Protoss
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackWavesProtoss_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_zergSpeedBumpTimer, libNtve_gf_DifficultyValueFixed(2700.0, 1800.0, 1440.0, 1260.0), false, c_timeAI);
    TimerStart(gv_zergSpeedBumpTimerShorter, (TimerGetRemaining(gv_zergSpeedBumpTimer) - 60.0), false, c_timeAI);
    TriggerExecute(gt_ZergSpeedBumpController, true, false);
    gf_ZergAttackProtossPrep();
    AIAttackWaveAddUnits4(12, 12, 12, 12, "Zergling");
    AIAttackWaveSend(gv_p2_ZERG, 30, true);
    AIAttackWaveAddUnits4(32, 32, 32, 32, "Zergling");
    AIAttackWaveAddUnits4(5, 5, 5, 5, "Hydralisk");
    AIAttackWaveSend(gv_p2_ZERG, 30, true);
    while (true) {
        gf_ZergAttackProtossLateDelay();
        gf_ZergAttackProtossPrep();
        AIAttackWaveAddUnits4(3, 4, 5, 4, "Hydralisk");
        AIAttackWaveAddUnits4(1, 1, 1, 2, "Mutalisk");
        AIAttackWaveAddUnits4(1, 1, 1, 1, "Overseer");
        AIAttackWaveSend(gv_p2_ZERG, 30, true);
        gf_ZergAttackProtossLateDelay();
        gf_ZergAttackProtossPrep();
        AIAttackWaveAddUnits4(20, 24, 28, 32, "Zergling");
        AIAttackWaveAddUnits4(1, 1, 1, 1, "Overseer");
        AIAttackWaveSend(gv_p2_ZERG, 30, true);
        gf_ZergAttackProtossLateDelay();
        gf_ZergAttackProtossPrep();
        AIAttackWaveAddUnits4(4, 8, 12, 8, "Zergling");
        AIAttackWaveAddUnits4(2, 2, 2, 3, "Mutalisk");
        AIAttackWaveAddUnits4(1, 1, 1, 1, "Overseer");
        AIAttackWaveSend(gv_p2_ZERG, 30, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackWavesProtoss_Init () {
    gt_ZergAttackWavesProtoss = TriggerCreate("gt_ZergAttackWavesProtoss_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack Waves - Player
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackWavesPlayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_unitgroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitgroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(libNtve_gf_DifficultyValueFixed(240.0, 240.0, 210.0, 180.0), c_timeAI);
    TriggerExecute(gt_FirstAttackQ, true, false);
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(3, 4, 5, 7), "ZerglingBurrowed", 0, gv_p2_ZERG, RegionGetCenter(RegionFromId(22)));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_unitgroup);
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "HydraliskBurrowed", 0, gv_p2_ZERG, RegionGetCenter(RegionFromId(22)));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_unitgroup);
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "RoachBurrowed", 0, gv_p2_ZERG, RegionGetCenter(RegionFromId(22)));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), lv_unitgroup);
    UnitGroupIssueOrder(lv_unitgroup, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
    Wait(2.0, c_timeAI);
    AISetGroupScriptControlled(lv_unitgroup, false);
    AIAttackWaveSetTargetPlayer(gv_p2_ZERG, PlayerGroupSingle(gv_p1_USER));
    AIAttackWaveSetGatherPoint(gv_p2_ZERG, RegionGetCenter(RegionFromId(22)));
    AIAttackWaveAddWaypoint(gv_p2_ZERG, PointFromId(1840), false);
    AIAttackWaveUseGroup(gv_p2_ZERG, lv_unitgroup);
    AIAttackWaveSend(gv_p2_ZERG, 0, false);
    AIAttackWaveSetTargetPlayer(gv_p2_ZERG, PlayerGroupSingle(gv_p1_USER));
    AIAttackWaveSetGatherPoint(gv_p2_ZERG, PointFromId(5));
    AIAttackWaveAddUnits4(4, 4, 9, 13, "Zergling");
    AIAttackWaveAddUnits4(0, 0, 1, 1, "Hydralisk");
    AIAttackWaveSend(gv_p2_ZERG, libNtve_gf_DifficultyValueInt(240, 210, 160, 160), true);
    AIAttackWaveSetTargetPlayer(gv_p2_ZERG, PlayerGroupSingle(gv_p1_USER));
    AIAttackWaveSetGatherPoint(gv_p2_ZERG, PointFromId(5));
    AIAttackWaveAddUnits4(3, 3, 8, 6, "Zergling");
    AIAttackWaveAddUnits4(0, 0, 2, 2, "Baneling");
    AIAttackWaveAddUnits4(1, 1, 0, 1, "Hydralisk");
    AIAttackWaveAddUnits4(0, 0, 2, 3, "Mutalisk");
    AIAttackWaveSend(gv_p2_ZERG, libNtve_gf_DifficultyValueInt(300, 270, 200, 200), true);
    AIAttackWaveSetTargetPlayer(gv_p2_ZERG, PlayerGroupSingle(gv_p1_USER));
    AIAttackWaveSetGatherPoint(gv_p2_ZERG, PointFromId(5));
    AIAttackWaveAddUnits4(8, 3, 9, 0, "Zergling");
    AIAttackWaveAddUnits4(0, 1, 0, 2, "Hydralisk");
    AIAttackWaveAddUnits4(0, 0, 4, 3, "Roach");
    AIAttackWaveAddUnits4(1, 1, 2, 1, "Mutalisk");
    AIAttackWaveSend(gv_p2_ZERG, libNtve_gf_DifficultyValueInt(300, 240, 180, 180), false);
    Wait(libNtve_gf_DifficultyValueFixed(300.0, 240.0, 180.0, 180.0), c_timeAI);
    AIAttackWaveSetTargetPlayer(gv_p2_ZERG, PlayerGroupSingle(gv_p1_USER));
    AIAttackWaveSetGatherPoint(gv_p2_ZERG, PointFromId(5));
    AIAttackWaveAddUnits4(1, 1, 1, 2, "Hydralisk");
    AIAttackWaveAddUnits4(0, 0, 2, 3, "Roach");
    AIAttackWaveAddUnits4(1, 1, 0, 0, "Mutalisk");
    AIAttackWaveSend(gv_p2_ZERG, libNtve_gf_DifficultyValueInt(240, 180, 160, 160), false);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        AIAttackWaveSetTargetPlayer(gv_p2_ZERG, PlayerGroupSingle(gv_p1_USER));
        AIAttackWaveSetGatherPoint(gv_p2_ZERG, PointFromId(5));
        AIAttackWaveAddWaypoint(gv_p2_ZERG, PointFromId(2106), false);
        AIAttackWaveAddUnits4(0, 0, 4, 5, "Mutalisk");
        AIAttackWaveSend(gv_p2_ZERG, libNtve_gf_DifficultyValueInt(240, 180, 160, 160), false);
    }

    Wait(libNtve_gf_DifficultyValueFixed(240.0, 180.0, 160.0, 160.0), c_timeAI);
    AIAttackWaveSetTargetPlayer(gv_p2_ZERG, PlayerGroupSingle(gv_p1_USER));
    AIAttackWaveSetGatherPoint(gv_p2_ZERG, PointFromId(5));
    AIAttackWaveAddUnits4(11, 5, 8, 5, "Zergling");
    AIAttackWaveAddUnits4(0, 1, 1, 2, "Hydralisk");
    AIAttackWaveAddUnits4(2, 2, 0, 0, "Mutalisk");
    AIAttackWaveSend(gv_p2_ZERG, libNtve_gf_DifficultyValueInt(300, 270, 200, 200), false);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        AIAttackWaveSetTargetPlayer(gv_p2_ZERG, PlayerGroupSingle(gv_p1_USER));
        AIAttackWaveSetGatherPoint(gv_p2_ZERG, PointFromId(5));
        AIAttackWaveAddWaypoint(gv_p2_ZERG, PointFromId(2106), false);
        AIAttackWaveAddUnits4(0, 0, 3, 4, "Mutalisk");
        AIAttackWaveSend(gv_p2_ZERG, libNtve_gf_DifficultyValueInt(300, 270, 200, 200), false);
    }

    Wait(libNtve_gf_DifficultyValueFixed(300.0, 270.0, 200.0, 200.0), c_timeAI);
    while (true) {
        AIAttackWaveSetTargetPlayer(gv_p2_ZERG, PlayerGroupSingle(gv_p1_USER));
        AIAttackWaveSetGatherPoint(gv_p2_ZERG, PointFromId(5));
        AIAttackWaveAddUnits4(4, 4, 17, 20, "Zergling");
        AIAttackWaveAddUnits4(1, 1, 1, 2, "Hydralisk");
        AIAttackWaveAddUnits4(0, 0, 2, 4, "Roach");
        AIAttackWaveAddUnits4(0, 0, 3, 4, "Mutalisk");
        AIAttackWaveSend(gv_p2_ZERG, libNtve_gf_DifficultyValueInt(300, 240, 180, 180), true);
        AIAttackWaveSetTargetPlayer(gv_p2_ZERG, PlayerGroupSingle(gv_p1_USER));
        AIAttackWaveSetGatherPoint(gv_p2_ZERG, PointFromId(5));
        AIAttackWaveAddUnits4(11, 5, 8, 15, "Zergling");
        AIAttackWaveAddUnits4(0, 1, 2, 3, "Hydralisk");
        AIAttackWaveAddUnits4(1, 1, 3, 5, "Mutalisk");
        AIAttackWaveSend(gv_p2_ZERG, libNtve_gf_DifficultyValueInt(300, 270, 200, 200), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackWavesPlayer_Init () {
    gt_ZergAttackWavesPlayer = TriggerCreate("gt_ZergAttackWavesPlayer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades H
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 1, 0) == 1))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(300.0, c_timeAI);
    TechTreeUpgradeAddLevel(gv_p2_ZERG, "ZergMeleeWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_p2_ZERG, "ZergGroundArmorsLevel1", 1);
    Wait(240.0, c_timeAI);
    TechTreeUpgradeAddLevel(gv_p2_ZERG, "ZergMissileWeaponsLevel1", 1);
    Wait(180.0, c_timeAI);
    TechTreeUpgradeAddLevel(gv_p2_ZERG, "ZergFlyerWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_p2_ZERG, "ZergFlyerArmorsLevel1", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesH_Init () {
    gt_AIUpgradesH = TriggerCreate("gt_AIUpgradesH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades I
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(300.0, c_timeAI);
    TechTreeUpgradeAddLevel(gv_p2_ZERG, "ZergMeleeWeaponsLevel2", 1);
    Wait(240.0, c_timeAI);
    TechTreeUpgradeAddLevel(gv_p2_ZERG, "ZergMissileWeaponsLevel2", 1);
    Wait(300.0, c_timeAI);
    TechTreeUpgradeAddLevel(gv_p2_ZERG, "ZergGroundArmorsLevel2", 1);
    Wait(180.0, c_timeAI);
    TechTreeUpgradeAddLevel(gv_p2_ZERG, "ZergFlyerWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_p2_ZERG, "ZergFlyerArmorsLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesI_Init () {
    gt_AIUpgradesI = TriggerCreate("gt_AIUpgradesI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upper Protoss Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_UpperProtossAttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetGatherPoint(gv_p5_UPPER_CAUSEWAY, PointFromId(4));
    AIAttackWaveSetTargetPlayer(gv_p5_UPPER_CAUSEWAY, PlayerGroupSingle(gv_p2_ZERG));
    while (true) {
        AIAttackWaveAddWaypoint(gv_p5_UPPER_CAUSEWAY, PointFromId(248), false);
        AIAttackWaveAddWaypoint(gv_p5_UPPER_CAUSEWAY, PointFromId(246), false);
        AIAttackWaveAddWaypoint(gv_p5_UPPER_CAUSEWAY, PointFromId(230), false);
        AIAttackWaveAddWaypoint(gv_p5_UPPER_CAUSEWAY, PointFromId(1907), false);
        AIAttackWaveAddUnits4(4, 4, 4, 4, "Zealot");
        AIAttackWaveSend(gv_p5_UPPER_CAUSEWAY, 45, true);
        if ((UnitGroupCount(UnitGroup(null, gv_p2_ZERG, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (gv_inCinematic == false)) {
            break;
        }

        AIAttackWaveAddWaypoint(gv_p5_UPPER_CAUSEWAY, PointFromId(248), false);
        AIAttackWaveAddWaypoint(gv_p5_UPPER_CAUSEWAY, PointFromId(246), false);
        AIAttackWaveAddWaypoint(gv_p5_UPPER_CAUSEWAY, PointFromId(230), false);
        AIAttackWaveAddWaypoint(gv_p5_UPPER_CAUSEWAY, PointFromId(1907), false);
        AIAttackWaveAddUnits4(4, 4, 4, 4, "Stalker");
        AIAttackWaveSend(gv_p5_UPPER_CAUSEWAY, 45, true);
        if ((UnitGroupCount(UnitGroup(null, gv_p2_ZERG, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (gv_inCinematic == false)) {
            break;
        }

    }
    AIAttackWaveSetTargetPlayer(gv_p5_UPPER_CAUSEWAY, PlayerGroupSingle(gv_p1_USER));
    while (true) {
        AIAttackWaveAddWaypoint(gv_p5_UPPER_CAUSEWAY, PointFromId(248), false);
        AIAttackWaveAddWaypoint(gv_p5_UPPER_CAUSEWAY, PointFromId(246), false);
        AIAttackWaveAddWaypoint(gv_p5_UPPER_CAUSEWAY, PointFromId(230), false);
        AIAttackWaveAddUnits4(3, 3, 3, 3, "Zealot");
        AIAttackWaveAddUnits4(2, 2, 2, 2, "Stalker");
        AIAttackWaveSend(gv_p5_UPPER_CAUSEWAY, 120, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpperProtossAttackWaves_Init () {
    gt_UpperProtossAttackWaves = TriggerCreate("gt_UpperProtossAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveMinerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayer() == gv_p5_UPPER_CAUSEWAY) && (TimerGetRemaining(gv_zergSpeedBumpTimer) < 60.0)) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveMinerals_Init () {
    gt_AIGiveMinerals = TriggerCreate("gt_AIGiveMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p2_ZERG, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p6_FIRST_PROTOSS, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p4_LOWER_CAUSEWAY, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p5_UPPER_CAUSEWAY, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_p3_TEMPLE, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveGas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayer() == gv_p5_UPPER_CAUSEWAY) && (TimerGetRemaining(gv_zergSpeedBumpTimer) < 60.0)) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveGas_Init () {
    gt_AIGiveGas = TriggerCreate("gt_AIGiveGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p2_ZERG, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p6_FIRST_PROTOSS, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p4_LOWER_CAUSEWAY, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p5_UPPER_CAUSEWAY, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_p3_TEMPLE, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Mana
//--------------------------------------------------------------------------------------------------
bool gt_ProtossMana_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Sentry") || (UnitGetType(EventUnit()) == "HighTemplar")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossMana_Init () {
    gt_ProtossMana = TriggerCreate("gt_ProtossMana_Func");
    TriggerAddEventUnitRegion(gt_ProtossMana, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overseer Bullies
//--------------------------------------------------------------------------------------------------
bool gt_OverseerBullies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIToggleBulliesInRegion(gv_p2_ZERG, RegionCircle(UnitGetPosition(gv_artifact), 16.0), false);
    while (!((UnitGroupCount(gv_zergArtifactAttackers, c_unitCountAlive) > 0))) {
        Wait(1.0, c_timeAI);
    }
    AIToggleBulliesInRegion(gv_p2_ZERG, RegionCircle(UnitGetPosition(gv_artifact), 16.0), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverseerBullies_Init () {
    gt_OverseerBullies = TriggerCreate("gt_OverseerBullies_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upper Lane Reveal
//--------------------------------------------------------------------------------------------------
bool gt_UpperLaneReveal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoDD4E2A31_ae;
    const int autoDD4E2A31_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealerCreate(gv_p1_USER, RegionFromId(18));
    VisRevealerEnable(VisRevealerLastCreated(), true);
    autoDD4E2A31_ae = (gv_creepRegionsSize - 1);
    lv_i = 1;
    for ( ; ( (autoDD4E2A31_ai >= 0 && lv_i <= autoDD4E2A31_ae) || (autoDD4E2A31_ai < 0 && lv_i >= autoDD4E2A31_ae) ) ; lv_i += autoDD4E2A31_ai ) {
        VisRevealerCreate(gv_p1_USER, gv_creepRegions[lv_i]);
        VisRevealerEnable(VisRevealerLastCreated(), true);
        Wait(0.4, c_timeReal);
        if ((lv_i == 5)) {
            VisRevealerCreate(gv_p1_USER, RegionFromId(23));
            VisRevealerEnable(VisRevealerLastCreated(), true);
            Wait(0.4, c_timeReal);
        }

    }
    VisRevealerCreate(gv_p1_USER, RegionFromId(17));
    VisRevealerEnable(VisRevealerLastCreated(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpperLaneReveal_Init () {
    gt_UpperLaneReveal = TriggerCreate("gt_UpperLaneReveal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upper Statue Reveal
//--------------------------------------------------------------------------------------------------
bool gt_UpperStatueReveal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.4, c_timeReal);
    VisRevealerCreate(gv_p1_USER, RegionFromId(24));
    VisRevealerEnable(VisRevealerLastCreated(), true);
    Wait(0.4, c_timeReal);
    VisRevealerCreate(gv_p1_USER, RegionFromId(25));
    VisRevealerEnable(VisRevealerLastCreated(), true);
    Wait(0.4, c_timeReal);
    VisRevealerCreate(gv_p1_USER, RegionFromId(42));
    VisRevealerEnable(VisRevealerLastCreated(), true);
    Wait(0.4, c_timeReal);
    VisRevealerCreate(gv_p1_USER, RegionFromId(26));
    VisRevealerEnable(VisRevealerLastCreated(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpperStatueReveal_Init () {
    gt_UpperStatueReveal = TriggerCreate("gt_UpperStatueReveal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Killed by Player
//--------------------------------------------------------------------------------------------------
bool gt_ProtossKilledbyPlayer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_p3_TEMPLE) || (UnitGetOwner(EventUnit()) == gv_p4_LOWER_CAUSEWAY) || (UnitGetOwner(EventUnit()) == gv_p5_UPPER_CAUSEWAY) || (UnitGetOwner(EventUnit()) == gv_p6_FIRST_PROTOSS)))) {
            return false;
        }

        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_p1_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_statProtossKilledByPlayer += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossKilledbyPlayer_Init () {
    gt_ProtossKilledbyPlayer = TriggerCreate("gt_ProtossKilledbyPlayer_Func");
    TriggerAddEventUnitDied(gt_ProtossKilledbyPlayer, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Killed by Player
//--------------------------------------------------------------------------------------------------
bool gt_ZergKilledbyPlayer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p2_ZERG))) {
            return false;
        }

        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_p1_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_statZergKilledByPlayer += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergKilledbyPlayer_Init () {
    gt_ZergKilledbyPlayer = TriggerCreate("gt_ZergKilledbyPlayer_Func");
    TriggerAddEventUnitDied(gt_ZergKilledbyPlayer, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Structure Killed by Player
//--------------------------------------------------------------------------------------------------
bool gt_ZergStructureKilledbyPlayer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zergStructuresKilled == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p2_ZERG, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p2_ZERG))) {
            return false;
        }

        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_p1_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_zergStructuresKilled = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergStructureKilledbyPlayer_Init () {
    gt_ZergStructureKilledbyPlayer = TriggerCreate("gt_ZergStructureKilledbyPlayer_Func");
    TriggerAddEventUnitDied(gt_ZergStructureKilledbyPlayer, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stone Guardian Kills
//--------------------------------------------------------------------------------------------------
bool gt_StoneGuardianKills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(libNtve_gf_KillingUnit()) == "StoneZealot"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_statStoneGuardianKillCount += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StoneGuardianKills_Init () {
    gt_StoneGuardianKills = TriggerCreate("gt_StoneGuardianKills_Func");
    TriggerAddEventUnitDied(gt_StoneGuardianKills, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory - Artifact Gained
//--------------------------------------------------------------------------------------------------
bool gt_VictoryArtifactGained_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryArtifactGained_Init () {
    gt_VictoryArtifactGained = TriggerCreate("gt_VictoryArtifactGained_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((ObjectiveGetState(gv_objective_DestroytheStatues) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objective_Relics) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objective_GetToTheArtifact) == c_objectiveStateCompleted)) {
        AchievementAward(gv_p1_USER, "TTychus01_1");
    }

    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_statStoneGuardianKillCount == 0)) {
        AchievementAward(gv_p1_USER, "TTychus01_2");
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1) && (TimerGetRemaining(gv_achievementHardTimer) != 0.0)) {
        AchievementAward(gv_p1_USER, "TTychus01_3");
    }

    VictoryPanelAddAchievement("TTychus01_1");
    VictoryPanelAddAchievement("TTychus01_2");
    VictoryPanelAddAchievement("TTychus01_3");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/045BAF2C"), IntToText(gv_statProtossKilledByPlayer));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/8ED4D537"), IntToText(gv_statZergKilledByPlayer));
    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/E7611FA8"), IntToText(gv_statStoneGuardianKillCount));
    VictoryPanelAddCustomStatisticLine(StringToText(""), StringToText(""));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/3F94A9B8"), (IntToText(gv_relicsFound) + StringExternal("Param/Value/1BB42988") + IntToText(gv_relicsNeeded)));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/9F2E56B5"), IntToText(gv_relicsFound));
    libCamp_gf_EndCampaignMission(gv_p1_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat - Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p1_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, 0), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    AITimePause(true);
    TriggerStop(gt_CreepExpansion);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/E1487EC9"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat - Artifact Lost
//--------------------------------------------------------------------------------------------------
bool gt_DefeatArtifactLost_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AITimePause(true);
    TriggerStop(gt_CreepExpansion);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), libCamp_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/43235472"), libCamp_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatArtifactLost_Init () {
    gt_DefeatArtifactLost = TriggerCreate("gt_DefeatArtifactLost_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_EndCampaignMission(gv_p1_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    libCamp_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_p1_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_p1_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Get to the Artifact - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGettotheArtifactCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveCreate(StringExternal("Param/Value/9E172D60"), StringExternal("Param/Value/7B506F18"), c_objectiveStateActive, true);
    gv_objective_GetToTheArtifact = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TTychus01Objective1, ObjectiveLastCreated(), StringExternal("Param/Value/CDC448F8"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGettotheArtifactCreate_Init () {
    gt_ObjectiveGettotheArtifactCreate = TriggerCreate("gt_ObjectiveGettotheArtifactCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Get to the Artifact - Discover Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGettotheArtifactDiscoverQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6F37DB70_g;
    int auto6F37DB70_u;
    unit auto6F37DB70_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveGettotheArtifactCreate, true, false);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    auto6F37DB70_g = UnitGroup("StoneZealot", 0, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto6F37DB70_u = UnitGroupCount(auto6F37DB70_g, c_unitCountAll);
    for (;; auto6F37DB70_u -= 1) {
        auto6F37DB70_var = UnitGroupUnitFromEnd(auto6F37DB70_g, auto6F37DB70_u);
        if (auto6F37DB70_var == null) { break; }
        UnitSetState(auto6F37DB70_var, c_unitStateHidden, false);
    }
    VisRevealArea(gv_p1_USER, RegionCircle(UnitGetPosition(gv_artifact), 16.0), 10.0, false);
    VisRevealerCreate(gv_p1_USER, RegionCircle(UnitGetPosition(gv_artifact), 8.0));
    ObjectiveSetState(gv_objective_GetToTheArtifact, c_objectiveStateActive);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(gv_p1_USER), "PingObjective", UnitGetPosition(gv_artifact), Color(0.00, 100.00, 0.00), 0.0, 270.0);
    gv_artifactObjectivePing = PingLastCreated();
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/51B6CAEE"));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGettotheArtifactDiscoverQ_Init () {
    gt_ObjectiveGettotheArtifactDiscoverQ = TriggerCreate("gt_ObjectiveGettotheArtifactDiscoverQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Get to the Artifact - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGettotheArtifactComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveGettotheArtifactCreate, true, false);
    ObjectiveSetState(gv_objective_GetToTheArtifact, c_objectiveStateCompleted);
    PingDestroy(gv_artifactObjectivePing);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGettotheArtifactComplete_Init () {
    gt_ObjectiveGettotheArtifactComplete = TriggerCreate("gt_ObjectiveGettotheArtifactComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy the Statues - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroytheStatuesCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveCreate(StringExternal("Param/Value/88629B8D"), StringExternal("Param/Value/35A1F683"), c_objectiveStateActive, true);
    gv_objective_DestroytheStatues = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TTychus01Objective3, ObjectiveLastCreated(), StringExternal("Param/Value/92024AE5"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroytheStatuesCreate_Init () {
    gt_ObjectiveDestroytheStatuesCreate = TriggerCreate("gt_ObjectiveDestroytheStatuesCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy the Statues - Discover
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroytheStatuesDiscover_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroytheStatuesCreate, true, false);
    ObjectiveSetState(gv_objective_DestroytheStatues, c_objectiveStateActive);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroytheStatuesDiscover_Init () {
    gt_ObjectiveDestroytheStatuesDiscover = TriggerCreate("gt_ObjectiveDestroytheStatuesDiscover_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy the Statues - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroytheStatuesComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_objective_DestroytheStatues != c_invalidObjectiveId))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveSetName(gv_objective_DestroytheStatues, StringExternal("Param/Value/8A9312C3"));
    ObjectiveSetState(gv_objective_DestroytheStatues, c_objectiveStateCompleted);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroytheStatuesComplete_Init () {
    gt_ObjectiveDestroytheStatuesComplete = TriggerCreate("gt_ObjectiveDestroytheStatuesComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Relics - Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRelicsCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate((StringExternal("Param/Value/D3C88D88") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectFindProtossRelics, libCamp_ge_StoryResearchObjectiveTextStyle_Multipart, gv_relicsNeeded, gv_relicsFound) + StringExternal("Param/Value/E005FE1E")), StringExternal("Param/Value/3A5CA4C7"), c_objectiveStateActive, false);
    gv_objective_Relics = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(libCamp_ge_MissionObjective_TTychus01Objective2, ObjectiveLastCreated(), StringExternal("Param/Value/7ED37176"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRelicsCreateQ_Init () {
    gt_ObjectiveRelicsCreateQ = TriggerCreate("gt_ObjectiveRelicsCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Relics - Discover
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRelicsDiscover_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p1_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_p1_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_RelicTipQ, true, false);
    UnitFlashSelection(UnitFromId(430), 1.0);
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", libNtve_gf_PointWithZOffset(UnitGetPosition(UnitFromId(430)), 0.7));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.800000");
    gv_relicPingActor = libNtve_gf_ActorLastCreated();
    Wait(0.5, c_timeReal);
    TriggerExecute(gt_ObjectiveRelicsCreateQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRelicsDiscover_Init () {
    gt_ObjectiveRelicsDiscover = TriggerCreate("gt_ObjectiveRelicsDiscover_Func");
    TriggerAddEventUnitRegion(gt_ObjectiveRelicsDiscover, null, RegionFromId(70), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Relics - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRelicsUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "ProtossRelic"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(gv_relicPingActor);
    libCamp_gf_DisplayResearchPointsGiventoPlayer(libCamp_ge_StoryResearchObject_ResearchObjectFindProtossRelics, EventUnit(), gv_p1_USER);
    TriggerExecute(gt_ObjectiveRelicsCreateQ, true, false);
    UnitKill(EventUnit());
    gv_relicsFound += 1;
    ObjectiveSetName(gv_objective_Relics, (StringExternal("Param/Value/1647A2D5") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectFindProtossRelics, libCamp_ge_StoryResearchObjectiveTextStyle_Multipart, gv_relicsNeeded, gv_relicsFound) + StringExternal("Param/Value/88438701")));
    if ((gv_relicsFound == gv_relicsNeeded)) {
        TriggerExecute(gt_ObjectiveRelicsComplete, true, false);
    }

    if ((gv_relicsFound == gv_relicsNeeded) && (libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_zergStructuresKilled == false)) {
        AchievementAward(gv_p1_USER, "Anniversary_TTychus01");
        TriggerDebugOutput(1, StringExternal("Param/Value/CE2CE6AB"), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRelicsUpdate_Init () {
    gt_ObjectiveRelicsUpdate = TriggerCreate("gt_ObjectiveRelicsUpdate_Func");
    TriggerAddEventUnitAbility(gt_ObjectiveRelicsUpdate, null, AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Relics - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRelicsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveRelicsCreateQ, true, false);
    ObjectiveSetName(gv_objective_Relics, (StringExternal("Param/Value/38722FC6") + libCamp_gf_StoryResearchSupplementTextForObjective(libCamp_ge_StoryResearchObject_ResearchObjectFindProtossRelics, libCamp_ge_StoryResearchObjectiveTextStyle_Multipart, gv_relicsNeeded, gv_relicsFound)));
    ObjectiveSetState(gv_objective_Relics, c_objectiveStateCompleted);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRelicsComplete_Init () {
    gt_ObjectiveRelicsComplete = TriggerCreate("gt_ObjectiveRelicsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Relic Tip Q
//--------------------------------------------------------------------------------------------------
bool gt_RelicTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_gameOver == true)) {
        return true;
    }

    libCamp_gf_CreateTipFromConversationState("StoryTips|Tychus01_ProtossRelic", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RelicTipQ_Init () {
    gt_RelicTipQ = TriggerCreate("gt_RelicTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroBriefingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_StartGame);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    gv_inCinematic = true;
    gv_gameOver = true;
    UnitPauseAll(true);
    AITimePause(true);
    GameTimeOfDayPause(true);
    GameSetBackground(c_backgroundFixed, "ShakurasSkyBox", 100.0);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    TriggerExecute(gt_IntroBriefingCinematic, true, true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UnitPauseAll(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroBriefingQ_Init () {
    gt_IntroBriefingQ = TriggerCreate("gt_IntroBriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Briefing Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroBriefingCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto55623458_g;
    int auto55623458_u;
    unit auto55623458_var;
    unitgroup auto897026DC_g;
    int auto897026DC_u;
    unit auto897026DC_var;
    unitgroup auto9B263E01_g;
    int auto9B263E01_u;
    unit auto9B263E01_var;
    unitgroup auto671819AE_g;
    int auto671819AE_u;
    unit auto671819AE_var;
    unitgroup auto294BA0EC_g;
    int auto294BA0EC_u;
    unit auto294BA0EC_var;
    unitgroup autoA4E0B684_g;
    int autoA4E0B684_u;
    unit autoA4E0B684_var;
    unitgroup auto6CA80D60_g;
    int auto6CA80D60_u;
    unit auto6CA80D60_var;
    unitgroup auto2B205541_g;
    int auto2B205541_u;
    unit auto2B205541_var;
    unitgroup autoBB2C820B_g;
    int autoBB2C820B_u;
    unit autoBB2C820B_var;
    unitgroup autoE7B37B68_g;
    int autoE7B37B68_u;
    unit autoE7B37B68_var;
    unitgroup autoD29F7B68_g;
    int autoD29F7B68_u;
    unit autoD29F7B68_var;
    unitgroup autoA55270C4_g;
    int autoA55270C4_u;
    unit autoA55270C4_var;
    unitgroup autoD08D7D1A_g;
    int autoD08D7D1A_u;
    unit autoD08D7D1A_var;
    const int auto4FBF48F4_ae = 12;
    const int auto4FBF48F4_ai = 2;
    const int auto16C482D4_n = 16;
    int auto16C482D4_i;
    const int auto73133B8E_n = 16;
    int auto73133B8E_i;
    const int auto1F91C49A_n = 16;
    int auto1F91C49A_i;
    unitgroup autoDC87DE75_g;
    int autoDC87DE75_u;
    unit autoDC87DE75_var;
    unitgroup auto8C1A47DB_g;
    int auto8C1A47DB_u;
    unit auto8C1A47DB_var;
    unitgroup auto0878C596_g;
    int auto0878C596_u;
    unit auto0878C596_var;
    unitgroup autoC8366A44_g;
    int autoC8366A44_u;
    unit autoC8366A44_var;
    unitgroup autoBB118565_g;
    int autoBB118565_u;
    unit autoBB118565_var;
    const int auto269CE419_n = 64;
    int auto269CE419_i;
    const int auto01D28267_n = 6;
    int auto01D28267_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(UnitFromId(572));
    auto55623458_g = UnitGroup("StoneZealot", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto55623458_u = UnitGroupCount(auto55623458_g, c_unitCountAll);
    for (;; auto55623458_u -= 1) {
        auto55623458_var = UnitGroupUnitFromEnd(auto55623458_g, auto55623458_u);
        if (auto55623458_var == null) { break; }
        UnitSetState(auto55623458_var, c_unitStateHidden, false);
    }
    auto897026DC_g = UnitGroup("PhotonCannon", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto897026DC_u = UnitGroupCount(auto897026DC_g, c_unitCountAll);
    for (;; auto897026DC_u -= 1) {
        auto897026DC_var = UnitGroupUnitFromEnd(auto897026DC_g, auto897026DC_u);
        if (auto897026DC_var == null) { break; }
        libNtve_gf_PauseUnit(auto897026DC_var, false);
    }
    auto9B263E01_g = UnitGroup("Mutalisk", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9B263E01_u = UnitGroupCount(auto9B263E01_g, c_unitCountAll);
    for (;; auto9B263E01_u -= 1) {
        auto9B263E01_var = UnitGroupUnitFromEnd(auto9B263E01_g, auto9B263E01_u);
        if (auto9B263E01_var == null) { break; }
        libNtve_gf_PauseUnit(auto9B263E01_var, false);
    }
    auto671819AE_g = UnitGroup("Zealot", c_playerAny, RegionCircle(PointFromId(75), 24.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto671819AE_u = UnitGroupCount(auto671819AE_g, c_unitCountAll);
    for (;; auto671819AE_u -= 1) {
        auto671819AE_var = UnitGroupUnitFromEnd(auto671819AE_g, auto671819AE_u);
        if (auto671819AE_var == null) { break; }
        UnitRemove(auto671819AE_var);
    }
    auto294BA0EC_g = UnitGroup("Zergling", gv_p2_ZERG, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto294BA0EC_u = UnitGroupCount(auto294BA0EC_g, c_unitCountAll);
    for (;; auto294BA0EC_u -= 1) {
        auto294BA0EC_var = UnitGroupUnitFromEnd(auto294BA0EC_g, auto294BA0EC_u);
        if (auto294BA0EC_var == null) { break; }
        UnitRemove(auto294BA0EC_var);
    }
    autoA4E0B684_g = UnitGroup("Hydralisk", gv_p2_ZERG, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA4E0B684_u = UnitGroupCount(autoA4E0B684_g, c_unitCountAll);
    for (;; autoA4E0B684_u -= 1) {
        autoA4E0B684_var = UnitGroupUnitFromEnd(autoA4E0B684_g, autoA4E0B684_u);
        if (autoA4E0B684_var == null) { break; }
        UnitRemove(autoA4E0B684_var);
    }
    auto6CA80D60_g = UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6CA80D60_u = UnitGroupCount(auto6CA80D60_g, c_unitCountAll);
    for (;; auto6CA80D60_u -= 1) {
        auto6CA80D60_var = UnitGroupUnitFromEnd(auto6CA80D60_g, auto6CA80D60_u);
        if (auto6CA80D60_var == null) { break; }
        UnitRemove(auto6CA80D60_var);
    }
    auto2B205541_g = UnitGroup("Larva", gv_p2_ZERG, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2B205541_u = UnitGroupCount(auto2B205541_g, c_unitCountAll);
    for (;; auto2B205541_u -= 1) {
        auto2B205541_var = UnitGroupUnitFromEnd(auto2B205541_g, auto2B205541_u);
        if (auto2B205541_var == null) { break; }
        UnitRemove(auto2B205541_var);
    }
    autoBB2C820B_g = UnitGroup("Egg", gv_p2_ZERG, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBB2C820B_u = UnitGroupCount(autoBB2C820B_g, c_unitCountAll);
    for (;; autoBB2C820B_u -= 1) {
        autoBB2C820B_var = UnitGroupUnitFromEnd(autoBB2C820B_g, autoBB2C820B_u);
        if (autoBB2C820B_var == null) { break; }
        UnitRemove(autoBB2C820B_var);
    }
    autoE7B37B68_g = UnitGroup(null, gv_p2_ZERG, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE7B37B68_u = UnitGroupCount(autoE7B37B68_g, c_unitCountAll);
    for (;; autoE7B37B68_u -= 1) {
        autoE7B37B68_var = UnitGroupUnitFromEnd(autoE7B37B68_g, autoE7B37B68_u);
        if (autoE7B37B68_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoE7B37B68_var, false);
    }
    autoD29F7B68_g = UnitGroup("Overlord", gv_p2_ZERG, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD29F7B68_u = UnitGroupCount(autoD29F7B68_g, c_unitCountAll);
    for (;; autoD29F7B68_u -= 1) {
        autoD29F7B68_var = UnitGroupUnitFromEnd(autoD29F7B68_g, autoD29F7B68_u);
        if (autoD29F7B68_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoD29F7B68_var, false);
    }
    autoA55270C4_g = UnitGroup("Overseer", gv_p2_ZERG, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA55270C4_u = UnitGroupCount(autoA55270C4_g, c_unitCountAll);
    for (;; autoA55270C4_u -= 1) {
        autoA55270C4_var = UnitGroupUnitFromEnd(autoA55270C4_g, autoA55270C4_u);
        if (autoA55270C4_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoA55270C4_var, false);
    }
    autoD08D7D1A_g = UnitGroup("Drone", gv_p2_ZERG, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD08D7D1A_u = UnitGroupCount(autoD08D7D1A_g, c_unitCountAll);
    for (;; autoD08D7D1A_u -= 1) {
        autoD08D7D1A_var = UnitGroupUnitFromEnd(autoD08D7D1A_g, autoD08D7D1A_u);
        if (autoD08D7D1A_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoD08D7D1A_var, false);
    }
    CreepModify(PointFromId(1907), 32.0, false, false);
    CreepModify(PointFromId(1907), 32.0, false, true);
    Wait(3.0, c_timeGame);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(847), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(579), SoundLengthSync(SoundLink("TTychus01BriefingTychus00011", 0)), -1, 10, true);
    MovieStartRecording("Briefing_Video_TTychus01_00");
    SoundPlay(SoundLink("TTychus01BriefingTychus00011", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("TTychus01BriefingTychus00011", -1)), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus01BriefingTychus00011", -1))), c_timeReal);
    Wait(gv_vIDEO_PADDING, c_timeReal);
    MovieStopRecording();
    lv_i = 0;
    for ( ; ( (auto4FBF48F4_ai >= 0 && lv_i <= auto4FBF48F4_ae) || (auto4FBF48F4_ai < 0 && lv_i >= auto4FBF48F4_ae) ) ; lv_i += auto4FBF48F4_ai ) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", 0, gv_p3_TEMPLE, PointWithOffset(PointFromId(75), IntToFixed(lv_i), 1.0));
        UnitSetFacing(UnitLastCreated(), 180.0, 0.0);
        AISetUnitScriptControlled(UnitLastCreated(), true);
        libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", 0, gv_p3_TEMPLE, PointWithOffset(PointFromId(75), IntToFixed(lv_i), -1.0));
        UnitSetFacing(UnitLastCreated(), 180.0, 0.0);
        AISetUnitScriptControlled(UnitLastCreated(), true);
    }
    UnitCreate(1, "CreepTumorBurrowed", 0, gv_p2_ZERG, PointFromId(355), 270.0);
    UnitCreate(1, "CreepTumorBurrowed", 0, gv_p2_ZERG, PointFromId(412), 270.0);
    UnitCreate(1, "CreepTumorBurrowed", 0, gv_p2_ZERG, PointFromId(1918), 270.0);
    UnitCreate(1, "CreepTumorBurrowed", 0, gv_p2_ZERG, PointFromId(1919), 270.0);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(1989), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    TriggerExecute(gt_BriefingZergAttacks, true, false);
    TriggerExecute(gt_StartAI, true, false);
    MovieStartRecording("Briefing_Video_TTychus01_01");
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(1047), SoundLengthSync(SoundLink("TTychus01BriefingRaynor00012", 0)), -1, 10, true);
    SoundPlay(SoundLink("TTychus01BriefingRaynor00012", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((SoundLengthSync(SoundLink("TTychus01BriefingRaynor00012", 0)) + 0.0), c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(72), 0.0, -1, 10, true);
    SoundPlay(SoundLink("TTychus01BriefingAdjutant00014", 0), PlayerGroupAll(), 100.0, 0.0);
    for (auto16C482D4_i = 1; auto16C482D4_i <= auto16C482D4_n; auto16C482D4_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "ZerglingBurrowed", 0, gv_p2_ZERG, RegionRandomPoint(RegionFromId(47)), UnitGetPosition(gv_artifact));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
    }
    Wait(1.0, c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(73), 0.0, -1, 10, true);
    for (auto73133B8E_i = 1; auto73133B8E_i <= auto73133B8E_n; auto73133B8E_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "ZerglingBurrowed", 0, gv_p2_ZERG, RegionRandomPoint(RegionFromId(48)), UnitGetPosition(gv_artifact));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
    }
    Wait(1.0, c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(74), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(984), 4.0, -1, 10, true);
    for (auto1F91C49A_i = 1; auto1F91C49A_i <= auto1F91C49A_n; auto1F91C49A_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "ZerglingBurrowed", 0, gv_p2_ZERG, RegionRandomPoint(RegionFromId(49)), UnitGetPosition(gv_artifact));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
    }
    UnitIssueOrder(UnitFromId(1916), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(230)), c_orderQueueReplace);
    Wait((SoundLengthSync(SoundLink("TTychus01BriefingAdjutant00014", -1)) - 2.0), c_timeReal);
    SoundPlay(SoundLink("TTychus01BriefingRaynor00001", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("TTychus01BriefingRaynor00001", 0)), c_timeReal);
    SoundPlay(SoundLink("TTychus01BriefingTychus00002", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("TTychus01BriefingTychus00002", 0)), c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(986), SoundLengthSync(SoundLink("TTychus01BriefingRaynor00003", 0)), -1, 10, true);
    SoundPlay(SoundLink("TTychus01BriefingRaynor00003", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("TTychus01BriefingRaynor00003", -1)), c_timeReal);
    SoundPlay(SoundLink("TTychus01BriefingTychus00006", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("TTychus01BriefingTychus00006", 0)), c_timeReal);
    SoundPlay(SoundLink("TTychus01BriefingRaynor00007", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("TTychus01BriefingRaynor00007", 0)), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus01BriefingRaynor00012", -1))), c_timeReal);
    Wait((0.5 * (((SoundLengthSync(SoundLink("TTychus01BriefingAdjutant00014", -1)) + SoundLengthSync(SoundLink("TTychus01BriefingRaynor00001", -1))) + SoundLengthSync(SoundLink("TTychus01BriefingTychus00002", -1))) + ((SoundLengthSync(SoundLink("TTychus01BriefingRaynor00003", -1)) + SoundLengthSync(SoundLink("TTychus01BriefingTychus00006", -1))) + SoundLengthSync(SoundLink("TTychus01BriefingRaynor00007", -1))))), c_timeReal);
    Wait(gv_vIDEO_PADDING, c_timeReal);
    TriggerStop(gt_BriefingZergAttacks);
    MovieStopRecording();
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(604), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(603), (SoundLengthSync(SoundLink("TTychus01BriefingRaynor00008", 0)) - 1.0), -1, 10, true);
    MovieStartRecording("Briefing_Video_TTychus01_02");
    SoundPlay(SoundLink("TTychus01BriefingRaynor00008", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.5 * SoundLengthSync(SoundLink("TTychus01BriefingRaynor00008", -1))), c_timeReal);
    Wait(gv_vIDEO_PADDING, c_timeReal);
    MovieStopRecording();
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(605), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    MovieStartRecording("Briefing_Video_TTychus01_03");
    SoundPlay(SoundLink("TTychus01BriefingRaynor00010", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(606), (SoundLengthSync(SoundLink("TTychus01BriefingRaynor00010", -1)) - 1.5), -1, 10, true);
    Wait((SoundLengthSync(SoundLink("TTychus01BriefingRaynor00010", -1)) - 1.0), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink("TTychus01BriefingRaynor00010", -1))), c_timeReal);
    Wait(gv_vIDEO_PADDING, c_timeReal);
    MovieStopRecording();
    UnitRemove(UnitFromId(352));
    autoDC87DE75_g = UnitGroup("Zealot", c_playerAny, RegionFromId(71), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDC87DE75_u = UnitGroupCount(autoDC87DE75_g, c_unitCountAll);
    for (;; autoDC87DE75_u -= 1) {
        autoDC87DE75_var = UnitGroupUnitFromEnd(autoDC87DE75_g, autoDC87DE75_u);
        if (autoDC87DE75_var == null) { break; }
        UnitRemove(autoDC87DE75_var);
    }
    auto8C1A47DB_g = UnitGroup("Pylon", c_playerAny, RegionFromId(71), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8C1A47DB_u = UnitGroupCount(auto8C1A47DB_g, c_unitCountAll);
    for (;; auto8C1A47DB_u -= 1) {
        auto8C1A47DB_var = UnitGroupUnitFromEnd(auto8C1A47DB_g, auto8C1A47DB_u);
        if (auto8C1A47DB_var == null) { break; }
        UnitRemove(auto8C1A47DB_var);
    }
    auto0878C596_g = UnitGroup("PhotonCannon", c_playerAny, RegionFromId(71), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0878C596_u = UnitGroupCount(auto0878C596_g, c_unitCountAll);
    for (;; auto0878C596_u -= 1) {
        auto0878C596_var = UnitGroupUnitFromEnd(auto0878C596_g, auto0878C596_u);
        if (auto0878C596_var == null) { break; }
        UnitRemove(auto0878C596_var);
    }
    autoC8366A44_g = UnitGroup("Stalker", gv_p5_UPPER_CAUSEWAY, RegionCircle(PointFromId(246), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC8366A44_u = UnitGroupCount(autoC8366A44_g, c_unitCountAll);
    for (;; autoC8366A44_u -= 1) {
        autoC8366A44_var = UnitGroupUnitFromEnd(autoC8366A44_g, autoC8366A44_u);
        if (autoC8366A44_var == null) { break; }
        UnitRemove(autoC8366A44_var);
    }
    autoBB118565_g = UnitGroup(null, gv_p5_UPPER_CAUSEWAY, RegionCircle(PointFromId(246), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBB118565_u = UnitGroupCount(autoBB118565_g, c_unitCountAll);
    for (;; autoBB118565_u -= 1) {
        autoBB118565_var = UnitGroupUnitFromEnd(autoBB118565_g, autoBB118565_u);
        if (autoBB118565_var == null) { break; }
        libNtve_gf_PauseUnit(autoBB118565_var, false);
    }
    for (auto269CE419_i = 1; auto269CE419_i <= auto269CE419_n; auto269CE419_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p2_ZERG, RegionRandomPoint(RegionCircle(PointFromId(770), 3.0)));
    }
    for (auto01D28267_i = 1; auto01D28267_i <= auto01D28267_n; auto01D28267_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Hydralisk", 0, gv_p2_ZERG, RegionRandomPoint(RegionCircle(PointFromId(774), 3.0)));
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "Stalker", 0, gv_p5_UPPER_CAUSEWAY, PointFromId(775));
    libNtve_gf_CreateUnitsAtPoint2(1, "Stalker", 0, gv_p5_UPPER_CAUSEWAY, PointFromId(776));
    UnitGroupIssueOrder(UnitGroup("Zergling", gv_p2_ZERG, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(250)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup("Hydralisk", gv_p2_ZERG, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(250)), c_orderQueueReplace);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(607), 0.0, -1, 10, true);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(785), (SoundLengthSync(SoundLink("TTychus01BriefingRaynor00009", 0)) - 0.0), -1, 10, true);
    MovieStartRecording("Briefing_Video_TTychus01_04");
    SoundPlay(SoundLink("TTychus01BriefingRaynor00009", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait((1.5 * SoundLengthSync(SoundLink("TTychus01BriefingRaynor00009", -1))), c_timeReal);
    Wait(gv_vIDEO_PADDING, c_timeReal);
    MovieStopRecording();
    TriggerStop(gt_BriefingZergAttacks);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroBriefingCinematic_Init () {
    gt_IntroBriefingCinematic = TriggerCreate("gt_IntroBriefingCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Zerg Attacks
//--------------------------------------------------------------------------------------------------
bool gt_BriefingZergAttacks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto17019353_g;
    int auto17019353_u;
    unit auto17019353_var;
    unitgroup auto445F6A5C_g;
    int auto445F6A5C_u;
    unit auto445F6A5C_var;
    unitgroup autoABC6E1CB_g;
    int autoABC6E1CB_u;
    unit autoABC6E1CB_var;
    unitgroup auto0E3E46AE_g;
    int auto0E3E46AE_u;
    unit auto0E3E46AE_var;
    unitgroup auto6B8EA501_g;
    int auto6B8EA501_u;
    unit auto6B8EA501_var;
    unitgroup auto9C9AB61D_g;
    int auto9C9AB61D_u;
    unit auto9C9AB61D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(3.0, c_timeReal);
    UnitCreate(12, "Zergling", 0, gv_p2_ZERG, RegionGetCenter(RegionFromId(49)), 270.0);
    auto17019353_g = UnitGroup("Zergling", gv_p2_ZERG, RegionFromId(49), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto17019353_u = UnitGroupCount(auto17019353_g, c_unitCountAll);
    for (;; auto17019353_u -= 1) {
        auto17019353_var = UnitGroupUnitFromEnd(auto17019353_g, auto17019353_u);
        if (auto17019353_var == null) { break; }
        UnitIssueOrder(auto17019353_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(230)), c_orderQueueReplace);
    }
    Wait(1.0, c_timeReal);
    auto445F6A5C_g = UnitGroup("Zealot", gv_p3_TEMPLE, RegionCircle(PointFromId(75), 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto445F6A5C_u = UnitGroupCount(auto445F6A5C_g, c_unitCountAll);
    for (;; auto445F6A5C_u -= 1) {
        auto445F6A5C_var = UnitGroupUnitFromEnd(auto445F6A5C_g, auto445F6A5C_u);
        if (auto445F6A5C_var == null) { break; }
        UnitIssueOrder(auto445F6A5C_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1035)), c_orderQueueReplace);
    }
    libNtve_gf_UnitCreateFacingPoint(1, "HydraliskBurrowed", 0, gv_p2_ZERG, PointFromId(1040), PointFromId(75));
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
    Wait(0.1, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "HydraliskBurrowed", 0, gv_p2_ZERG, PointFromId(1042), PointFromId(75));
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
    Wait(0.1, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "HydraliskBurrowed", 0, gv_p2_ZERG, PointFromId(1044), PointFromId(75));
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
    while (true) {
        Wait(0.1, c_timeGame);
        autoABC6E1CB_g = UnitGroup("Zergling", gv_p2_ZERG, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoABC6E1CB_u = UnitGroupCount(autoABC6E1CB_g, c_unitCountAll);
        for (;; autoABC6E1CB_u -= 1) {
            autoABC6E1CB_var = UnitGroupUnitFromEnd(autoABC6E1CB_g, autoABC6E1CB_u);
            if (autoABC6E1CB_var == null) { break; }
            UnitIssueOrder(autoABC6E1CB_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(246)), c_orderQueueReplace);
        }
        auto0E3E46AE_g = UnitGroup("Zergling", gv_p2_ZERG, RegionFromId(48), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto0E3E46AE_u = UnitGroupCount(auto0E3E46AE_g, c_unitCountAll);
        for (;; auto0E3E46AE_u -= 1) {
            auto0E3E46AE_var = UnitGroupUnitFromEnd(auto0E3E46AE_g, auto0E3E46AE_u);
            if (auto0E3E46AE_var == null) { break; }
            UnitIssueOrder(auto0E3E46AE_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(246)), c_orderQueueReplace);
        }
        auto6B8EA501_g = UnitGroup("Zergling", gv_p2_ZERG, RegionFromId(49), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto6B8EA501_u = UnitGroupCount(auto6B8EA501_g, c_unitCountAll);
        for (;; auto6B8EA501_u -= 1) {
            auto6B8EA501_var = UnitGroupUnitFromEnd(auto6B8EA501_g, auto6B8EA501_u);
            if (auto6B8EA501_var == null) { break; }
            UnitIssueOrder(auto6B8EA501_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(246)), c_orderQueueReplace);
        }
        auto9C9AB61D_g = UnitGroup("Hydralisk", gv_p2_ZERG, RegionCircle(PointFromId(1040), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto9C9AB61D_u = UnitGroupCount(auto9C9AB61D_g, c_unitCountAll);
        for (;; auto9C9AB61D_u -= 1) {
            auto9C9AB61D_var = UnitGroupUnitFromEnd(auto9C9AB61D_g, auto9C9AB61D_u);
            if (auto9C9AB61D_var == null) { break; }
            UnitIssueOrder(auto9C9AB61D_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(246)), c_orderQueueReplace);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingZergAttacks_Init () {
    gt_BriefingZergAttacks = TriggerCreate("gt_BriefingZergAttacks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerStop(gt_CreepExpansion);
    TriggerStop(gt_ZergAttackWavesPlayer);
    TriggerStop(gt_ZergAttackWavesProtoss);
    TriggerStop(gt_UpperProtossAttackWaves);
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD57B306E_g;
    int autoD57B306E_u;
    unit autoD57B306E_var;
    unitgroup auto2FCF5C13_g;
    int auto2FCF5C13_u;
    unit auto2FCF5C13_var;
    unitgroup auto339B7F07_g;
    int auto339B7F07_u;
    unit auto339B7F07_var;
    unitgroup auto2DB2C6EF_g;
    int auto2DB2C6EF_u;
    unit auto2DB2C6EF_var;
    unitgroup auto8BB86449_g;
    int auto8BB86449_u;
    unit auto8BB86449_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_p1_USER);
    PlayerSetState(gv_p1_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    autoD57B306E_g = UnitGroup(null, gv_p3_TEMPLE, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD57B306E_u = UnitGroupCount(autoD57B306E_g, c_unitCountAll);
    for (;; autoD57B306E_u -= 1) {
        autoD57B306E_var = UnitGroupUnitFromEnd(autoD57B306E_g, autoD57B306E_u);
        if (autoD57B306E_var == null) { break; }
        UnitRemove(autoD57B306E_var);
    }
    auto2FCF5C13_g = UnitGroup(null, gv_p4_LOWER_CAUSEWAY, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2FCF5C13_u = UnitGroupCount(auto2FCF5C13_g, c_unitCountAll);
    for (;; auto2FCF5C13_u -= 1) {
        auto2FCF5C13_var = UnitGroupUnitFromEnd(auto2FCF5C13_g, auto2FCF5C13_u);
        if (auto2FCF5C13_var == null) { break; }
        UnitRemove(auto2FCF5C13_var);
    }
    auto339B7F07_g = UnitGroup(null, gv_p5_UPPER_CAUSEWAY, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto339B7F07_u = UnitGroupCount(auto339B7F07_g, c_unitCountAll);
    for (;; auto339B7F07_u -= 1) {
        auto339B7F07_var = UnitGroupUnitFromEnd(auto339B7F07_g, auto339B7F07_u);
        if (auto339B7F07_var == null) { break; }
        UnitRemove(auto339B7F07_var);
    }
    auto2DB2C6EF_g = UnitGroup(null, gv_p6_FIRST_PROTOSS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2DB2C6EF_u = UnitGroupCount(auto2DB2C6EF_g, c_unitCountAll);
    for (;; auto2DB2C6EF_u -= 1) {
        auto2DB2C6EF_var = UnitGroupUnitFromEnd(auto2DB2C6EF_g, auto2DB2C6EF_u);
        if (auto2DB2C6EF_var == null) { break; }
        UnitRemove(auto2DB2C6EF_var);
    }
    auto8BB86449_g = UnitGroup("ForceField", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8BB86449_u = UnitGroupCount(auto8BB86449_g, c_unitCountAll);
    for (;; auto8BB86449_u -= 1) {
        auto8BB86449_var = UnitGroupUnitFromEnd(auto8BB86449_g, auto8BB86449_u);
        if (auto8BB86449_var == null) { break; }
        UnitRemove(auto8BB86449_var);
    }
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(66), "ArtifactShrine", c_animNameDefault, "Stand A", c_animFlagPlayForever, c_animTimeDefault);
    UnitPauseAll(true);
    AITimePause(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_playerUnits;
    unit lv_victoryDropship;

    // Automatic Variable Declarations
    unitgroup auto2E203C1F_g;
    int auto2E203C1F_u;
    unit auto2E203C1F_var;
    unitgroup autoB22D4D3C_g;
    int autoB22D4D3C_u;
    unit autoB22D4D3C_var;

    // Variable Initialization
    lv_playerUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(188), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(189), 12.0, -1, 10, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "SpecialOpsDropship", 0, gv_p1_USER, PointFromId(741));
    UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
    lv_victoryDropship = UnitLastCreated();
    UnitSetPropertyFixed(lv_victoryDropship, c_unitPropHeight, 5.0);
    UnitIssueOrder(lv_victoryDropship, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_artifact)), c_orderQueueReplace);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus01MusicOutro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_victoryCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    // Transmission - SoundLink("TTychus01Swann00011", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus01Swann00011", -1), c_transmissionDurationAdd, 0.0, true);
    while (!((libNtve_gf_UnitInRegion(lv_victoryDropship, RegionCircle(UnitGetPosition(gv_artifact), 2.0)) == true))) {
        Wait(1.0, c_timeGame);
    }
    UnitRemove(gv_artifact);
    SoundPlayAtPoint(SoundLink("Medivac_Load", -1), PlayerGroupAll(), UnitGetPosition(gv_artifact), 16.0, 100.0, 0.0);
    Wait(1.0, c_timeReal);
    // Transmission - SoundLink("TTychus01Raynor00067", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus01Raynor00067", 0), c_transmissionDurationAdd, 0.0, false);
    TransmissionWait(TransmissionLastSent(), 1.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "SpecialOpsDropship", 0, gv_p1_USER, PointFromId(612));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(615)), c_orderQueueReplace);
    Wait(1.0, c_timeReal);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(417), 0.0, -1, 10, true);
    CameraApplyInfo(gv_p1_USER, CameraInfoFromId(608), (SoundLengthSync(SoundLink("TTychus01Kerrigan00002", 0)) + SoundLengthSync(SoundLink("TTychus01Raynor00001", 0))), -1, 10, true);
    lv_playerUnits = UnitGroup(null, gv_p1_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2E203C1F_g = lv_playerUnits;
    auto2E203C1F_u = UnitGroupCount(auto2E203C1F_g, c_unitCountAll);
    for (;; auto2E203C1F_u -= 1) {
        auto2E203C1F_var = UnitGroupUnitFromEnd(auto2E203C1F_g, auto2E203C1F_u);
        if (auto2E203C1F_var == null) { break; }
        if ((UnitGetType(auto2E203C1F_var) != "SpecialOpsDropship")) {
            UnitRemove(auto2E203C1F_var);
        }

    }
    autoB22D4D3C_g = UnitGroup(null, gv_p2_ZERG, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB22D4D3C_u = UnitGroupCount(autoB22D4D3C_g, c_unitCountAll);
    for (;; autoB22D4D3C_u -= 1) {
        autoB22D4D3C_var = UnitGroupUnitFromEnd(autoB22D4D3C_g, autoB22D4D3C_u);
        if (autoB22D4D3C_var == null) { break; }
        UnitRemove(autoB22D4D3C_var);
    }
    // Transmission - SoundLink("TTychus01Kerrigan00002", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus01Kerrigan00002", 0), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TTychus01Raynor00001", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TTychus01Raynor00001", 0), c_transmissionDurationAdd, 0.0, true);
    gv_victoryCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victoryCinematicCompleted == true)) {
        lv_fadeDuration = 3.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(lv_fadeDuration, c_timeReal);
    UnitPauseAll(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04Music_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_IntroSequence_Init();
    gt_StartGame_Init();
    gt_ArtifactRaceQ_Init();
    gt_ZergCreepTipQ_Init();
    gt_CampaignTipsQ_Init();
    gt_SavePoint1Q_Init();
    gt_SavePoint2Q_Init();
    gt_FirstGuard_Init();
    gt_OuterForcefieldArea_Init();
    gt_OutsideProtossBaseWarpIn_Init();
    gt_LowerForcefieldArea_Init();
    gt_UpperHighTemplars_Init();
    gt_PylonTipQ_Init();
    gt_PylonTipProximityActivation_Init();
    gt_PylonTipDeathActivation_Init();
    gt_DefenseQ_Init();
    gt_StalkerGather_Init();
    gt_MarauderQ_Init();
    gt_MarauderQ2_Init();
    gt_StatueInitialization_Init();
    gt_ArtifactVisibility_Init();
    gt_ArtifactGuardianActivationNorth_Init();
    gt_ArtifactGuardianActivationSouth_Init();
    gt_ArtifactShieldActivation_Init();
    gt_ArtifactGuardiansNorthAttacks_Init();
    gt_ArtifactGuardiansSouthAttacks_Init();
    gt_ArtifactGuardianDestroyed_Init();
    gt_ZergArtifactAttacking_Init();
    gt_ZergAttackInitiation_Init();
    gt_ZergArtifactQ_Init();
    gt_ShieldQ_Init();
    gt_CreepExpansion_Init();
    gt_SpineCrawlerSpawning_Init();
    gt_SpineCrawlerMovement_Init();
    gt_CrazyQ_Init();
    gt_FirstAttackQ_Init();
    gt_ZergCloseRevealQ_Init();
    gt_AddZergSpeedBumpUnit_Init();
    gt_ZergSpeedBumpController_Init();
    gt_ZergSpeedBumpTimerExpires_Init();
    gt_ZergSpeedBumpTimerNearsExpiration_Init();
    gt_NexusDroppod_Init();
    gt_PylonDroppod1_Init();
    gt_PylonDroppod2_Init();
    gt_PylonDroppod3_Init();
    gt_GatewayDroppod_Init();
    gt_ProtossWarpDefense_Init();
    gt_StartAI_Init();
    gt_ZergAttackWavesProtoss_Init();
    gt_ZergAttackWavesPlayer_Init();
    gt_AIUpgradesH_Init();
    gt_AIUpgradesI_Init();
    gt_UpperProtossAttackWaves_Init();
    gt_AIGiveMinerals_Init();
    gt_AIGiveGas_Init();
    gt_ProtossMana_Init();
    gt_OverseerBullies_Init();
    gt_UpperLaneReveal_Init();
    gt_UpperStatueReveal_Init();
    gt_ProtossKilledbyPlayer_Init();
    gt_ZergKilledbyPlayer_Init();
    gt_ZergStructureKilledbyPlayer_Init();
    gt_StoneGuardianKills_Init();
    gt_VictoryArtifactGained_Init();
    gt_Victory_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatArtifactLost_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_ObjectiveGettotheArtifactCreate_Init();
    gt_ObjectiveGettotheArtifactDiscoverQ_Init();
    gt_ObjectiveGettotheArtifactComplete_Init();
    gt_ObjectiveDestroytheStatuesCreate_Init();
    gt_ObjectiveDestroytheStatuesDiscover_Init();
    gt_ObjectiveDestroytheStatuesComplete_Init();
    gt_ObjectiveRelicsCreateQ_Init();
    gt_ObjectiveRelicsDiscover_Init();
    gt_ObjectiveRelicsUpdate_Init();
    gt_ObjectiveRelicsComplete_Init();
    gt_RelicTipQ_Init();
    gt_IntroBriefingQ_Init();
    gt_IntroBriefingCinematic_Init();
    gt_BriefingZergAttacks_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
