//==================================================================================================
// 
// Generated Map Script
// 
// Name:   For the Swarm
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "LibChal"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libChal_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_USER = 1;
const int gv_pLAYER_COMPUTER1 = 2;
const int gv_pLAYER_BOARD = 6;
const int gv_readyButton = 1;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
region gv_playableArea;
unitgroup gv_playerUnits;
unitgroup gv_playerUnitsRound1;
unitgroup gv_playerUnitsRound2;
unitgroup gv_playerUnitsRound3;
unitgroup gv_playerUnitsArea1;
unitgroup gv_playerUnitsArea2;
unitgroup gv_playerUnitsArea3;
unitgroup gv_repulserFields;
unitgroup gv_attackers;
unit gv_spire01;
unit gv_spire02;
unit gv_spire03;
bool gv_round2Played;
bool gv_round3Played;
bool gv_ready;
int gv_roundCount;
text gv_ratingText;
bool gv_allRoundsCompleted;
int gv_winningScoreSilver;
int gv_winningScoreGold;
revealer gv_revealer;
int gv_lostUnitsRound1;
int gv_lostUnitsRound2;
int gv_lostUnitsRound3;
int gv_lostUnitsTotalPrevious;
int gv_lostUnitsRound1Best;
int gv_lostUnitsRound2Best;
int gv_lostUnitsRound3Best;
unit gv_shield01;
unit gv_shield02;
unit gv_shield03;
bool gv_spireDead;
unitgroup gv_enemyAttackersA;
unitgroup gv_enemyAttackersB;
unitgroup gv_enemyAttackersC;
int gv_retryCountRound01;
int gv_retryCountRound02;
int gv_retryCountRound03;
text gv_ratingTextBronze;
text gv_ratingTextSilver;
text gv_ratingTextGold;
int gv_buildingPing01;
int gv_buildingPing02;
int gv_buildingPing03;
int gv_enemyPing01;
int gv_enemyPing02;
int gv_enemyPing03;
int gv_board;
timer gv_textTimer;
bool gv_cheatUsed;
int gv_objectiveSurvive01;
int gv_objectiveSurvive02;
int gv_objectiveSurvive03;
bool gv_introCinematicCompleted;
bool gv_introPlayerUnitsSpawned;

void InitGlobals () {
    gv_playerUnits = UnitGroupEmpty();
    gv_playerUnitsRound1 = UnitGroupEmpty();
    gv_playerUnitsRound2 = UnitGroupEmpty();
    gv_playerUnitsRound3 = UnitGroupEmpty();
    gv_playerUnitsArea1 = UnitGroupEmpty();
    gv_playerUnitsArea2 = UnitGroupEmpty();
    gv_playerUnitsArea3 = UnitGroupEmpty();
    gv_repulserFields = UnitGroupEmpty();
    gv_attackers = UnitGroupEmpty();
    gv_winningScoreSilver = 20;
    gv_winningScoreGold = 10;
    gv_enemyAttackersA = UnitGroupEmpty();
    gv_enemyAttackersB = UnitGroupEmpty();
    gv_enemyAttackersC = UnitGroupEmpty();
    gv_ratingTextBronze = StringExternal("Param/Value/F5D67A32");
    gv_ratingTextSilver = StringExternal("Param/Value/802AA6B9");
    gv_ratingTextGold = StringExternal("Param/Value/A4468CE5");
    gv_buildingPing01 = c_invalidPingId;
    gv_buildingPing02 = c_invalidPingId;
    gv_buildingPing03 = c_invalidPingId;
    gv_enemyPing01 = c_invalidPingId;
    gv_enemyPing02 = c_invalidPingId;
    gv_enemyPing03 = c_invalidPingId;
    gv_board = c_boardNone;
    gv_textTimer = TimerCreate();
    gv_objectiveSurvive01 = c_invalidObjectiveId;
    gv_objectiveSurvive02 = c_invalidObjectiveId;
    gv_objectiveSurvive03 = c_invalidObjectiveId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_ClearAlertsFunction ();
void gf_UnpauseShowEnemies (unitgroup lp_showGroup, unitgroup lp_hideGroup1, unitgroup lp_hideGroup2);
void gf_SpawnEnemyUnitsForArea1 (int lp_qty, string lp_type, region lp_location);
void gf_SpawnEnemyUnitsForArea2 (int lp_qty, string lp_type, region lp_location);
void gf_SpawnEnemyUnitsForArea3 (int lp_qty, string lp_type, region lp_location);
void gf_HidePauseGetReadyPlayer (region lp_whichArea, unitgroup lp_showGroup);
void gf_SpawnPlayerUnitsForRound1 (int lp_qty, string lp_type, region lp_location);
void gf_SpawnPlayerUnitsForRound2 (int lp_qty, string lp_type, region lp_location);
void gf_SpawnPlayerUnitsForRound3 (int lp_qty, string lp_type, region lp_location);
bool gf_ContinueAIAttack (unitgroup lp_unitGroup);
void gf_TextTag (text lp_roundText);
void gf_Achievements ();
int gf_TotalScore ();
void gf_SaveScores ();
void gf_UpdateScoreUI (int lp_score);
void gf_UNUSEDTEXTSTRINGS ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Players;
trigger gt_Init01aTechnology;
trigger gt_Init02Units;
trigger gt_Init03Music;
trigger gt_Init04Environment;
trigger gt_Init05Hints;
trigger gt_Init06MapSettings;
trigger gt_ButtonChosenLeaveGame;
trigger gt_ButtonChosenRetryRound1;
trigger gt_ButtonChosenRetryRound2;
trigger gt_ButtonChosenRetryRound3;
trigger gt_DialogScoreShow;
trigger gt_ResetPlayField;
trigger gt_SpawnRound1;
trigger gt_SpawnRound2;
trigger gt_SpawnRound3;
trigger gt_PlayerUnitsRound1;
trigger gt_PlayerUnitsRound2;
trigger gt_PlayerUnitsRound3;
trigger gt_StartAI;
trigger gt_WarnPlayerAttack;
trigger gt_SpawnedPlayerUnits;
trigger gt_SpiresInvulnerable;
trigger gt_SpiresVulnerable;
trigger gt_UnitDies;
trigger gt_MakeRound1ScoreDialog;
trigger gt_WaittoStartRound2;
trigger gt_MakeRound2ScoreDialog;
trigger gt_WaittoStartRound3;
trigger gt_MakeRound3ScoreDialog;
trigger gt_WaittogotoVictory;
trigger gt_WaitthengobackVictoryScreen;
trigger gt_CheckforCheating;
trigger gt_AddReadyButtonQ;
trigger gt_ReadyPressed;
trigger gt_RemoveText;
trigger gt_ObjectiveSurviveCreate;
trigger gt_ObjectiveSurviveUpdate;
trigger gt_ObjectiveSurviveProtect;
trigger gt_ObjectiveSurviveDiscoverQ;
trigger gt_ObjectiveSurviveComplete;
trigger gt_ObjectiveSurviveFailed;
trigger gt_FinalRound1;
trigger gt_FinalRound2;
trigger gt_FinalRound3;
trigger gt_FinishVictory;
trigger gt_FinishDefeatSpireBeforeVictory;
trigger gt_FinishDefeatSpireAfterVictory;
trigger gt_FinishDefeatUnitsDead;
trigger gt_TipCountersQ;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroSpireCameras;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_ClearAlertsFunction () {
    // Implementation
    Wait(3.0, c_timeGame);
    UIAlertClear(gv_pLAYER_USER);
}

void gf_UnpauseShowEnemies (unitgroup lp_showGroup, unitgroup lp_hideGroup1, unitgroup lp_hideGroup2) {
    // Implementation
    UnitGroupLoopBegin(lp_showGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(lp_hideGroup1);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(lp_hideGroup2);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
}

void gf_SpawnEnemyUnitsForArea1 (int lp_qty, string lp_type, region lp_location) {
    int autoCF174FF7_n;
    int autoCF174FF7_i;

    // Implementation
    autoCF174FF7_n = lp_qty;
    for (autoCF174FF7_i = 1; autoCF174FF7_i <= autoCF174FF7_n; autoCF174FF7_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, lp_type, 0, gv_pLAYER_COMPUTER1, RegionGetCenter(lp_location));
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        UnitGroupAdd(gv_attackers, UnitLastCreated());
        UnitGroupAdd(gv_enemyAttackersA, UnitLastCreated());
        UnitBehaviorAddPlayer(UnitLastCreated(), "Untargetable", gv_pLAYER_COMPUTER1, 1);
        UnitBehaviorAddPlayer(UnitLastCreated(), "DamageTakenNone", gv_pLAYER_COMPUTER1, 1);
    }
}

void gf_SpawnEnemyUnitsForArea2 (int lp_qty, string lp_type, region lp_location) {
    int autoB9A84526_n;
    int autoB9A84526_i;

    // Implementation
    autoB9A84526_n = lp_qty;
    for (autoB9A84526_i = 1; autoB9A84526_i <= autoB9A84526_n; autoB9A84526_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, lp_type, 0, gv_pLAYER_COMPUTER1, RegionGetCenter(lp_location));
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        UnitGroupAdd(gv_attackers, UnitLastCreated());
        UnitGroupAdd(gv_enemyAttackersB, UnitLastCreated());
        UnitBehaviorAddPlayer(UnitLastCreated(), "Untargetable", gv_pLAYER_COMPUTER1, 1);
        UnitBehaviorAddPlayer(UnitLastCreated(), "DamageTakenNone", gv_pLAYER_COMPUTER1, 1);
    }
}

void gf_SpawnEnemyUnitsForArea3 (int lp_qty, string lp_type, region lp_location) {
    int auto6838C615_n;
    int auto6838C615_i;

    // Implementation
    auto6838C615_n = lp_qty;
    for (auto6838C615_i = 1; auto6838C615_i <= auto6838C615_n; auto6838C615_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, lp_type, 0, gv_pLAYER_COMPUTER1, RegionGetCenter(lp_location));
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        UnitGroupAdd(gv_attackers, UnitLastCreated());
        UnitGroupAdd(gv_enemyAttackersC, UnitLastCreated());
        UnitBehaviorAddPlayer(UnitLastCreated(), "Untargetable", gv_pLAYER_COMPUTER1, 1);
        UnitBehaviorAddPlayer(UnitLastCreated(), "DamageTakenNone", gv_pLAYER_COMPUTER1, 1);
        if ((UnitGetType(UnitLastCreated()) == "Carrier")) {
            UnitMagazineArm(UnitLastCreated(), AbilityCommand("CarrierHangar", 0), 4);
        }
        else {
        }
    }
}

void gf_HidePauseGetReadyPlayer (region lp_whichArea, unitgroup lp_showGroup) {
    // Implementation
    UnitClearSelection(gv_pLAYER_USER);
    UnitGroupLoopBegin(UnitGroupFilterRegion(gv_playerUnits, RegionEntireMap(), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(lp_showGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSelect(UnitGroupLoopCurrent(), gv_pLAYER_USER, true);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "Untargetable", 1);
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "DamageTakenNone", 1);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("InfestedTerran", gv_pLAYER_USER, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Interceptor", gv_pLAYER_COMPUTER1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Broodling", gv_pLAYER_USER, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFilterRegion(gv_repulserFields, RegionEntireMap(), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFilterRegion(gv_attackers, RegionEntireMap(), 0));
    while (!UnitGroupLoopDone()) {
        UnitBehaviorRemovePlayer(UnitGroupLoopCurrent(), "Untargetable", gv_pLAYER_COMPUTER1, 1);
        UnitBehaviorRemovePlayer(UnitGroupLoopCurrent(), "DamageTakenNone", gv_pLAYER_COMPUTER1, 1);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
}

void gf_SpawnPlayerUnitsForRound1 (int lp_qty, string lp_type, region lp_location) {
    int auto7A832299_n;
    int auto7A832299_i;

    // Implementation
    auto7A832299_n = lp_qty;
    for (auto7A832299_i = 1; auto7A832299_i <= auto7A832299_n; auto7A832299_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, lp_type, 0, gv_pLAYER_USER, RegionGetCenter(lp_location));
        UnitGroupAdd(gv_playerUnits, UnitLastCreated());
        UnitGroupAdd(gv_playerUnitsRound1, UnitLastCreated());
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
        UnitBehaviorAddPlayer(UnitLastCreated(), "Untargetable", gv_pLAYER_USER, 1);
        UnitBehaviorAddPlayer(UnitLastCreated(), "DamageTakenNone", gv_pLAYER_USER, 1);
    }
}

void gf_SpawnPlayerUnitsForRound2 (int lp_qty, string lp_type, region lp_location) {
    int autoBB7E15F9_n;
    int autoBB7E15F9_i;

    // Implementation
    autoBB7E15F9_n = lp_qty;
    for (autoBB7E15F9_i = 1; autoBB7E15F9_i <= autoBB7E15F9_n; autoBB7E15F9_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, lp_type, 0, gv_pLAYER_USER, RegionGetCenter(lp_location));
        UnitGroupAdd(gv_playerUnits, UnitLastCreated());
        UnitGroupAdd(gv_playerUnitsRound2, UnitLastCreated());
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
        UnitBehaviorAddPlayer(UnitLastCreated(), "Untargetable", gv_pLAYER_USER, 1);
        UnitBehaviorAddPlayer(UnitLastCreated(), "DamageTakenNone", gv_pLAYER_USER, 1);
    }
}

void gf_SpawnPlayerUnitsForRound3 (int lp_qty, string lp_type, region lp_location) {
    int autoF1DD01A9_n;
    int autoF1DD01A9_i;

    // Implementation
    autoF1DD01A9_n = lp_qty;
    for (autoF1DD01A9_i = 1; autoF1DD01A9_i <= autoF1DD01A9_n; autoF1DD01A9_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, lp_type, 0, gv_pLAYER_USER, RegionGetCenter(lp_location));
        UnitGroupAdd(gv_playerUnits, UnitLastCreated());
        UnitGroupAdd(gv_playerUnitsRound3, UnitLastCreated());
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
        UnitBehaviorAddPlayer(UnitLastCreated(), "Untargetable", gv_pLAYER_USER, 1);
        UnitBehaviorAddPlayer(UnitLastCreated(), "DamageTakenNone", gv_pLAYER_USER, 1);
    }
}

bool gf_ContinueAIAttack (unitgroup lp_unitGroup) {
    // Implementation
    UnitGroupLoopBegin(lp_unitGroup);
    while (!UnitGroupLoopDone()) {
        if (((AIUnitGetWave(UnitGroupLoopCurrent()) == c_nullWave) && (UnitGetOwner(UnitGroupLoopCurrent()) == gv_pLAYER_COMPUTER1))) {
            AIAttackWaveUseUnit(gv_pLAYER_COMPUTER1, UnitGroupLoopCurrent());
            AIAttackWaveSend(gv_pLAYER_COMPUTER1, 0, false);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return (UnitGroupCount(lp_unitGroup, c_unitCountAlive) == 0);
}

void gf_TextTag (text lp_roundText) {
    // Implementation
    PingSetVisible(gv_buildingPing01, true);
    PingSetVisible(gv_buildingPing02, true);
    PingSetVisible(gv_buildingPing03, true);
    PingSetVisible(gv_enemyPing01, true);
    PingSetVisible(gv_enemyPing02, true);
    PingSetVisible(gv_enemyPing03, true);
    TextTagCreate(lp_roundText, 60, CameraGetTarget(gv_pLAYER_USER), 2.0, true, false, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 94.90, 94.90));
    TextTagSetBackgroundBorderSize(TextTagLastCreated(), 2.0, 2.0);
    Wait(3.0, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
}

void gf_Achievements () {
    // Implementation
    gv_ratingText = (StringExternal("Param/Value/3CDCA27D") + gv_ratingTextBronze);
    AchievementAward(gv_pLAYER_USER, "Challenge_ZergCombat_Basic");
    if ((gf_TotalScore() <= gv_winningScoreSilver)) {
        gv_ratingText = (StringExternal("Param/Value/EC24816F") + gv_ratingTextSilver);
        AchievementAward(gv_pLAYER_USER, "Challenge_ZergCombat_Mastery");
    }
    else {
    }
    if ((gf_TotalScore() <= gv_winningScoreGold)) {
        gv_ratingText = (StringExternal("Param/Value/0CB84623") + gv_ratingTextGold);
        AchievementAward(gv_pLAYER_USER, "Challenge_ZergCombat_Dominance");
    }
    else {
    }
}

int gf_TotalScore () {
    // Implementation
    return (gv_lostUnitsRound1 + gv_lostUnitsRound2 + gv_lostUnitsRound3);
}

void gf_SaveScores () {
    // Implementation
    if ((gv_cheatUsed == false)) {
        if ((libChal_gf_ChallengeScoreFromBank(libChal_gf_CurrentChallengeType()) <= -1)) {
            gf_UpdateScoreUI(gf_TotalScore());
            libChal_gf_SaveChallengeScoreToBank(libChal_gf_CurrentChallengeType(), gf_TotalScore());
        }
        else {
            if ((libChal_gf_ChallengeScoreFromBank(libChal_gf_CurrentChallengeType()) >= gf_TotalScore())) {
                gf_UpdateScoreUI(gf_TotalScore());
                libChal_gf_SaveChallengeScoreToBank(libChal_gf_CurrentChallengeType(), gf_TotalScore());
            }
            else {
                gf_UpdateScoreUI(libChal_gf_ChallengeScoreFromBank(libChal_gf_CurrentChallengeType()));
            }
        }
    }
    else {
    }
}

void gf_UpdateScoreUI (int lp_score) {
    // Implementation
    UISetChallengeScoreText(PlayerGroupAll(), "ZergCombat", (StringExternal("Param/Value/79B25360") + StringExternal("Param/Value/E2C03C33") + IntToText(lp_score) + StringExternal("Param/Value/D32E29B0")));
}

void gf_UNUSEDTEXTSTRINGS () {
    // Implementation
    UISetChallengeScoreText(PlayerGroupAll(), "ZergCombat", (StringExternal("Param/Value/AEA1DF2B") + StringExternal("Param/Value/DF366449") + IntToText(0) + StringExternal("Param/Value/CEA2F3D2")));
    UISetChallengeScoreText(PlayerGroupAll(), "ZergCombat", (StringExternal("Param/Value/3991444F") + StringExternal("Param/Value/6A8D0E09") + IntToText(0) + StringExternal("Param/Value/48CB2045")));
    UISetChallengeScoreText(PlayerGroupAll(), "ZergCombat", (StringExternal("Param/Value/89859C9B") + StringExternal("Param/Value/3D05D783") + IntToText(0) + StringExternal("Param/Value/166D8C10")));
    UISetChallengeScoreText(PlayerGroupAll(), "ZergCombat", (StringExternal("Param/Value/9B231198") + StringExternal("Param/Value/E4FB1DF0") + IntToText(0) + StringExternal("Param/Value/57A8AB80")));
    UISetChallengeScoreText(PlayerGroupAll(), "ZergCombat", (StringExternal("Param/Value/3FD8C308") + StringExternal("Param/Value/A28A32F3") + IntToText(0) + StringExternal("Param/Value/7A68772B")));
    UISetChallengeScoreText(PlayerGroupAll(), "ZergCombat", (StringExternal("Param/Value/2ABF749A") + StringExternal("Param/Value/40438250") + IntToText(0) + StringExternal("Param/Value/F92CD3E7")));
    UISetChallengeScoreText(PlayerGroupAll(), "ZergCombat", (StringExternal("Param/Value/333E9138") + StringExternal("Param/Value/0624E743") + IntToText(0) + StringExternal("Param/Value/AB94BCC5")));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UISetChallengeMode(PlayerGroupAll(), true);
    libChal_gf_LoadChallengeData(9);
    GameCheatAllow(c_gameCheatVictory, false);
    TriggerExecute(gt_Init01Players, true, false);
    TriggerExecute(gt_Init02Units, true, false);
    TriggerExecute(gt_Init03Music, true, false);
    TriggerExecute(gt_Init04Environment, true, false);
    TriggerExecute(gt_Init05Hints, true, false);
    TriggerExecute(gt_Init06MapSettings, true, false);
    TriggerExecute(gt_IntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init01Players_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Init01aTechnology, true, true);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_BOARD, 6);
    libNtve_gf_SetAlliance(gv_pLAYER_COMPUTER1, gv_pLAYER_BOARD, 0);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UIUnitColorStyleOverride(PlayerGroupAll(), c_unitColorStyleNormal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Players_Init () {
    gt_Init01Players = TriggerCreate("gt_Init01Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01a Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01aTechnology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeRestrictionsEnable(gv_pLAYER_USER, true);
    TechTreeAbilityAllow(gv_pLAYER_COMPUTER1, AbilityCommand("TemporalRift", 0), false);
    TechTreeBehaviorAllow(gv_pLAYER_USER, "ZergBuildingDies6", false);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("BurrowUltraliskDown", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("BurrowZerglingDown", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("BurrowRoachDown", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("BurrowInfestorDown", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("BurrowHydraliskDown", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("BurrowBanelingDown", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("NeuralParasite", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("UpgradeToGreaterSpire", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("MorphToBroodLord", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("Corruption", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("CreepTumorBuild", 0), false);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "Burrow", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "OrganicCarapace", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "TunnelingClaws", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "GlialReconstitution", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "NeuralParasite", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "zerglingattackspeed", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "zerglingmovementspeed", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "AnabolicSynthesis", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "ChitinousPlating", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "hydraliskspeed", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01aTechnology_Init () {
    gt_Init01aTechnology = TriggerCreate("gt_Init01aTechnology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init02Units_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Units_Init () {
    gt_Init02Units = TriggerCreate("gt_Init02Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init03Music_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Music_Init () {
    gt_Init03Music = TriggerCreate("gt_Init03Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init04Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_playableArea = RegionPlayableMap();
    PingCreate(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(13)), ColorWithAlpha(0.78, 26.27, 4.31, 0.00), 0.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/EAD00750"));
    gv_buildingPing01 = PingLastCreated();
    PingCreate(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(14)), ColorWithAlpha(0.78, 26.27, 4.31, 0.00), 0.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/DD18F42F"));
    gv_buildingPing02 = PingLastCreated();
    PingCreate(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(15)), ColorWithAlpha(0.78, 26.27, 4.31, 0.00), 0.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/413D8DF8"));
    gv_buildingPing03 = PingLastCreated();
    PingCreate(PlayerGroupAll(), "PingWarning", RegionGetCenter(RegionFromId(2)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/DCDBC2F1"));
    gv_enemyPing01 = PingLastCreated();
    PingCreate(PlayerGroupAll(), "PingWarning", RegionGetCenter(RegionFromId(4)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/1F48214C"));
    gv_enemyPing02 = PingLastCreated();
    PingCreate(PlayerGroupAll(), "PingWarning", RegionGetCenter(RegionFromId(5)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/8378C3A6"));
    gv_enemyPing03 = PingLastCreated();
    PingSetVisible(gv_buildingPing01, false);
    PingSetVisible(gv_buildingPing02, false);
    PingSetVisible(gv_buildingPing03, false);
    PingSetVisible(gv_enemyPing01, false);
    PingSetVisible(gv_enemyPing02, false);
    PingSetVisible(gv_enemyPing03, false);
    CreepModify(RegionGetCenter(RegionFromId(18)), 15.0, true, true);
    CreepModify(RegionGetCenter(RegionFromId(19)), 15.0, true, true);
    CreepModify(RegionGetCenter(RegionFromId(25)), 15.0, true, true);
    CreepModify(RegionGetCenter(RegionFromId(13)), 6.0, true, true);
    CreepModify(RegionGetCenter(RegionFromId(14)), 6.0, true, true);
    CreepModify(RegionGetCenter(RegionFromId(15)), 6.0, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Environment_Init () {
    gt_Init04Environment = TriggerCreate("gt_Init04Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Hints
//--------------------------------------------------------------------------------------------------
bool gt_Init05Hints_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    HelpPanelAddHint(PlayerGroupAll(), StringExternal("Param/Value/36C423AD"), StringExternal("Param/Value/BBAABE0E"), "Assets\\Textures\\btn-unit-protoss-carrier.dds");
    HelpPanelAddHint(PlayerGroupAll(), StringExternal("Param/Value/AAE7DE06"), StringExternal("Param/Value/3E525064"), "Assets\\Textures\\btn-unit-protoss-zealot.dds");
    HelpPanelAddHint(PlayerGroupAll(), StringExternal("Param/Value/A4CA9AAA"), StringExternal("Param/Value/104E5AF9"), "Assets\\Textures\\btn-unit-protoss-colossus.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Hints_Init () {
    gt_Init05Hints = TriggerCreate("gt_Init05Hints_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Map Settings
//--------------------------------------------------------------------------------------------------
bool gt_Init06MapSettings_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUnitHelpDefault(gv_pLAYER_USER, false);
    TechTreeUnitHelp(gv_pLAYER_USER, "Zealot", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Stalker", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Immortal", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Colossus", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Archon", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Carrier", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "VoidRay", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Zergling", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Hydralisk", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Roach", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Ultralisk", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "BroodLord", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Mutalisk", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Corruptor", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Infestor", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Broodling", true);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Prot", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Zerg", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Terr", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06MapSettings_Init () {
    gt_Init06MapSettings = TriggerCreate("gt_Init06MapSettings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Chosen Leave Game
//--------------------------------------------------------------------------------------------------
bool gt_ButtonChosenLeaveGame_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameOver(gv_pLAYER_USER, c_gameOverDefeat, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonChosenLeaveGame_Init () {
    gt_ButtonChosenLeaveGame = TriggerCreate("gt_ButtonChosenLeaveGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Chosen Retry Round 1
//--------------------------------------------------------------------------------------------------
bool gt_ButtonChosenRetryRound1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_SpawnRound1, true, false);
    ObjectiveShow(gv_objectiveSurvive01, PlayerGroupAll(), true);
    ObjectiveShow(gv_objectiveSurvive02, PlayerGroupAll(), true);
    ObjectiveShow(gv_objectiveSurvive03, PlayerGroupAll(), true);
    ObjectiveSetState(gv_objectiveSurvive01, c_objectiveStateActive);
    if ((gf_TotalScore() > gv_winningScoreSilver)) {
        ObjectiveSetState(gv_objectiveSurvive02, c_objectiveStateFailed);
    }
    else {
    }
    if ((gf_TotalScore() > gv_winningScoreGold)) {
        ObjectiveSetState(gv_objectiveSurvive03, c_objectiveStateFailed);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonChosenRetryRound1_Init () {
    gt_ButtonChosenRetryRound1 = TriggerCreate("gt_ButtonChosenRetryRound1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Chosen Retry Round 2
//--------------------------------------------------------------------------------------------------
bool gt_ButtonChosenRetryRound2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_SpawnRound2, true, false);
    ObjectiveShow(gv_objectiveSurvive01, PlayerGroupAll(), true);
    ObjectiveShow(gv_objectiveSurvive02, PlayerGroupAll(), true);
    ObjectiveShow(gv_objectiveSurvive03, PlayerGroupAll(), true);
    ObjectiveSetState(gv_objectiveSurvive01, c_objectiveStateActive);
    if ((gf_TotalScore() > gv_winningScoreSilver)) {
        ObjectiveSetState(gv_objectiveSurvive02, c_objectiveStateFailed);
    }
    else {
    }
    if ((gf_TotalScore() > gv_winningScoreGold)) {
        ObjectiveSetState(gv_objectiveSurvive03, c_objectiveStateFailed);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonChosenRetryRound2_Init () {
    gt_ButtonChosenRetryRound2 = TriggerCreate("gt_ButtonChosenRetryRound2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Chosen Retry Round 3
//--------------------------------------------------------------------------------------------------
bool gt_ButtonChosenRetryRound3_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_SpawnRound3, true, false);
    ObjectiveShow(gv_objectiveSurvive01, PlayerGroupAll(), true);
    ObjectiveShow(gv_objectiveSurvive02, PlayerGroupAll(), true);
    ObjectiveShow(gv_objectiveSurvive03, PlayerGroupAll(), true);
    ObjectiveSetState(gv_objectiveSurvive01, c_objectiveStateActive);
    if ((gf_TotalScore() > gv_winningScoreSilver)) {
        ObjectiveSetState(gv_objectiveSurvive02, c_objectiveStateFailed);
    }
    else {
    }
    if ((gf_TotalScore() > gv_winningScoreGold)) {
        ObjectiveSetState(gv_objectiveSurvive03, c_objectiveStateFailed);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonChosenRetryRound3_Init () {
    gt_ButtonChosenRetryRound3 = TriggerCreate("gt_ButtonChosenRetryRound3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialog Score Show
//--------------------------------------------------------------------------------------------------
bool gt_DialogScoreShow_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, c_transitionDurationImmediate);
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    TriggerQueueClear(c_triggerQueueKill);
    TriggerQueuePause(false);
    ObjectiveShow(gv_objectiveSurvive01, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveSurvive02, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveSurvive03, PlayerGroupAll(), false);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    VisExploreArea(gv_pLAYER_USER, RegionEntireMap(), false, false);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_USER, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupRemove(gv_playerUnits, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_COMPUTER1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupRemove(gv_attackers, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    if ((gv_allRoundsCompleted == true)) {
        libChal_gf_CreateChallengeVictoryPanel(StringExternal("Param/Value/7138F467"), gv_ratingText, StringExternal("Param/Value/CA4CC753"), (StringExternal("Param/Value/BFA5259A") + IntToText(gf_TotalScore())), gt_ButtonChosenLeaveGame, null);
        libChal_gf_AddWaveToChallengeVictoryPanel((StringExternal("Param/Value/DDBAF6F5") + IntToText(gv_lostUnitsRound1Best)), gt_SpawnRound1);
        libChal_gf_AddWaveToChallengeVictoryPanel((StringExternal("Param/Value/3B3B960D") + IntToText(gv_lostUnitsRound2Best)), gt_SpawnRound2);
        libChal_gf_AddWaveToChallengeVictoryPanel((StringExternal("Param/Value/D016027E") + IntToText(gv_lostUnitsRound3Best)), gt_SpawnRound3);
        libChal_gf_AddAchievementToChallengeVictoryPanel("Challenge_ZergCombat_Basic");
        libChal_gf_AddAchievementToChallengeVictoryPanel("Challenge_ZergCombat_Mastery");
        libChal_gf_AddAchievementToChallengeVictoryPanel("Challenge_ZergCombat_Dominance");
        libChal_gf_ShowHideChallengeVictoryPanel(true);
    }
    else {
        libChal_gf_CreateChallengeDefeatPanel(StringExternal("Param/Value/80E7102D"), StringExternal("Param/Value/4C3F3930"), gt_ButtonChosenLeaveGame, null);
        if ((gv_lostUnitsRound1 >= 0) && (gv_roundCount >= 1)) {
            libChal_gf_AddWaveToChallengeDefeatPanel((StringExternal("Param/Value/6406B92D") + IntToText(gv_lostUnitsRound1)), 2, gt_ButtonChosenRetryRound1);
        }
        else {
            if ((gv_roundCount == 0) && (gv_spireDead == true)) {
                libChal_gf_AddWaveToChallengeDefeatPanel((StringExternal("Param/Value/FB4636A7")), 1, gt_ButtonChosenRetryRound1);
            }
            else {
                libChal_gf_AddWaveToChallengeDefeatPanel((StringExternal("Param/Value/DDE4CEAA")), 1, gt_ButtonChosenRetryRound1);
            }
        }
        if ((gv_lostUnitsRound2 >= 0) && (gv_roundCount >= 2)) {
            libChal_gf_AddWaveToChallengeDefeatPanel((StringExternal("Param/Value/3382B207") + IntToText(gv_lostUnitsRound2)), 2, gt_ButtonChosenRetryRound2);
        }
        else {
            if ((gv_roundCount == 1) && (gv_spireDead == true)) {
                libChal_gf_AddWaveToChallengeDefeatPanel((StringExternal("Param/Value/CA2C2541")), 1, gt_ButtonChosenRetryRound2);
            }
            else {
                libChal_gf_AddWaveToChallengeDefeatPanel((StringExternal("Param/Value/03595E94")), 0, gt_ButtonChosenRetryRound2);
            }
        }
        if ((gv_lostUnitsRound3 >= 0) && (gv_roundCount >= 3)) {
            libChal_gf_AddWaveToChallengeDefeatPanel((StringExternal("Param/Value/4A525251") + IntToText(gv_lostUnitsRound3)), 2, gt_ButtonChosenRetryRound3);
        }
        else {
            if ((gv_roundCount == 2) && (gv_spireDead == true)) {
                libChal_gf_AddWaveToChallengeDefeatPanel((StringExternal("Param/Value/2AA1E8CB")), 1, gt_ButtonChosenRetryRound3);
            }
            else {
                libChal_gf_AddWaveToChallengeDefeatPanel((StringExternal("Param/Value/B70EB821")), 0, gt_ButtonChosenRetryRound3);
            }
        }
        libChal_gf_ShowHideChallengeDefeatPanel(true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogScoreShow_Init () {
    gt_DialogScoreShow = TriggerCreate("gt_DialogScoreShow_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reset Play Field
//--------------------------------------------------------------------------------------------------
bool gt_ResetPlayField_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    RegionPlayableMapSet(gv_playableArea);
    UnitRemove(gv_shield01);
    UnitRemove(gv_shield02);
    UnitRemove(gv_shield03);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(49), 0.0, -1, 10, true);
    VisExploreArea(gv_pLAYER_USER, RegionEntireMap(), false, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RepulserField12", 0, gv_pLAYER_BOARD, RegionGetCenter(RegionFromId(20)));
    gv_shield01 = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RepulserField12", 0, gv_pLAYER_BOARD, RegionGetCenter(RegionFromId(29)));
    gv_shield02 = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RepulserField12", 0, gv_pLAYER_BOARD, RegionGetCenter(RegionFromId(37)));
    gv_shield03 = UnitLastCreated();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_BOARD, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_repulserFields, UnitGroupLoopCurrent());
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Spire", 0, gv_pLAYER_USER, RegionGetCenter(RegionFromId(13)));
    gv_spire01 = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Spire", 0, gv_pLAYER_USER, RegionGetCenter(RegionFromId(14)));
    gv_spire02 = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Spire", 0, gv_pLAYER_USER, RegionGetCenter(RegionFromId(15)));
    gv_spire03 = UnitLastCreated();
    gv_spireDead = false;
    if ((gv_allRoundsCompleted == false)) {
        ObjectiveSetState(gv_objectiveSurvive01, c_objectiveStateActive);
    }
    else {
        TriggerEnable(gt_FinishDefeatSpireAfterVictory, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResetPlayField_Init () {
    gt_ResetPlayField = TriggerCreate("gt_ResetPlayField_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Round 1
//--------------------------------------------------------------------------------------------------
bool gt_SpawnRound1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libChal_gf_ShowHideChallengeVictoryPanel(false);
    libChal_gf_ShowHideChallengeDefeatPanel(false);
    gv_roundCount = 0;
    if ((gv_introPlayerUnitsSpawned == false)) {
        TriggerExecute(gt_ResetPlayField, true, false);
    }
    else {
    }
    if ((gv_allRoundsCompleted == true)) {
        gv_lostUnitsRound1Best = gv_lostUnitsRound1;
        gv_lostUnitsTotalPrevious = gf_TotalScore();
        gv_lostUnitsRound1 = 0;
        ObjectiveShow(gv_objectiveSurvive01, PlayerGroupAll(), true);
        ObjectiveShow(gv_objectiveSurvive02, PlayerGroupAll(), true);
        ObjectiveShow(gv_objectiveSurvive03, PlayerGroupAll(), true);
        ObjectiveSetState(gv_objectiveSurvive01, c_objectiveStateActive);
        UnitPauseAll(false);
        ObjectiveSetName(gv_objectiveSurvive01, (StringExternal("Param/Value/FCFDA59D") + IntToText(gv_roundCount) + StringExternal("Param/Value/32157971")));
        if ((gf_TotalScore() > gv_winningScoreSilver)) {
            ObjectiveSetState(gv_objectiveSurvive02, c_objectiveStateFailed);
        }
        else {
        }
        if ((gf_TotalScore() > gv_winningScoreGold)) {
            ObjectiveSetState(gv_objectiveSurvive03, c_objectiveStateFailed);
        }
        else {
        }
        BoardItemSetText(gv_board, 1, 1, (StringExternal("Param/Value/5791DDA9") + StringExternal("Param/Value/2025044D") + IntToText(gv_lostUnitsRound1) + StringExternal("Param/Value/963C4221")));
        BoardItemSetText(gv_board, 1, 2, (StringExternal("Param/Value/744E7EC6") + StringExternal("Param/Value/D01B8061") + IntToText(gv_lostUnitsRound2) + StringExternal("Param/Value/55F06245")));
        BoardItemSetText(gv_board, 1, 3, (StringExternal("Param/Value/AE2F0FA6") + StringExternal("Param/Value/0D651FA9") + IntToText(gv_lostUnitsRound3) + StringExternal("Param/Value/FF52E48B")));
        BoardItemSetText(gv_board, 1, 4, (StringExternal("Param/Value/9DD0648D") + StringExternal("Param/Value/1C5B1550") + IntToText(gf_TotalScore()) + StringExternal("Param/Value/5011C26D")));
    }
    else {
    }
    gv_lostUnitsRound1 = 0;
    RegionPlayableMapSet(gv_playableArea);
    TriggerStop(gt_SpawnRound2);
    TriggerStop(gt_SpawnRound3);
    TriggerExecute(gt_ObjectiveSurviveDiscoverQ, true, false);
    TriggerExecute(gt_TipCountersQ, true, false);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, 1);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(49), 0.0, -1, 10, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationDefault);
    libNtve_gf_GlobalCinematicSetting(false);
    UISetMode(PlayerGroupAll(), c_uiModeConsole, c_transitionDurationDefault);
    UnitGroupLoopBegin(gv_attackers);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_repulserFields);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    if ((gv_introPlayerUnitsSpawned == false)) {
        TriggerExecute(gt_PlayerUnitsRound1, true, false);
    }
    else {
        gv_introPlayerUnitsSpawned = false;
    }
    gf_SpawnEnemyUnitsForArea1(5, "Colossus", RegionFromId(2));
    gf_SpawnEnemyUnitsForArea2(1, "Immortal", RegionFromId(4));
    gf_SpawnEnemyUnitsForArea3(8, "VoidRay", RegionFromId(5));
    TriggerExecute(gt_SpiresInvulnerable, true, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gf_TextTag(StringExternal("Param/Value/644C2B43"));
    if ((gv_retryCountRound01 == 2)) {
        gv_retryCountRound01 = (gv_retryCountRound01 + 1);
        HelpPanelDisplayPage(PlayerGroupAll(), c_helpPanelPageTips);
    }
    else {
    }
    TriggerEnable(gt_FinishDefeatUnitsDead, true);
    if ((gv_allRoundsCompleted == false)) {
        TriggerEnable(gt_FinishDefeatSpireBeforeVictory, true);
    }
    else {
        TriggerEnable(gt_FinishDefeatSpireAfterVictory, true);
    }
    TriggerExecute(gt_AddReadyButtonQ, true, false);
    while (!((gv_ready == true))) {
        Wait(0.5, c_timeGame);
    }
    gv_ready = false;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    PingSetVisible(gv_buildingPing01, false);
    PingSetVisible(gv_buildingPing02, false);
    PingSetVisible(gv_buildingPing03, false);
    PingSetVisible(gv_enemyPing01, false);
    PingSetVisible(gv_enemyPing02, false);
    PingSetVisible(gv_enemyPing03, false);
    RegionPlayableMapSet(RegionFromId(21));
    CameraPan(gv_pLAYER_USER, PointFromId(116), 0.0, -1, 10, false);
    gf_HidePauseGetReadyPlayer(RegionFromId(50), gv_playerUnitsArea1);
    TriggerExecute(gt_SpiresVulnerable, true, false);
    gf_UnpauseShowEnemies(gv_enemyAttackersA, gv_enemyAttackersB, gv_enemyAttackersC);
    Wait(1.0, c_timeGame);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_WarnPlayerAttack, true, true);
    libNtve_gf_ShowHideUnit(gv_shield01, false);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, 5);
    MinimapPing(PlayerGroupAll(), PointFromId(39), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringExternal("Param/Value/B2FE915C"), null, PointFromId(39));
    gf_ClearAlertsFunction();
    AIAttackWaveUseGroup(gv_pLAYER_COMPUTER1, gv_enemyAttackersA);
    AIAttackWaveSend(gv_pLAYER_COMPUTER1, 3, true);
    while (!((gf_ContinueAIAttack(gv_enemyAttackersA) == true))) {
        Wait(0.5, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, 1);
    RegionPlayableMapSet(RegionFromId(22));
    CameraPan(gv_pLAYER_USER, PointFromId(115), 0.0, -1, 10, false);
    gf_HidePauseGetReadyPlayer(RegionFromId(51), gv_playerUnitsArea2);
    gf_UnpauseShowEnemies(gv_enemyAttackersB, gv_enemyAttackersA, gv_enemyAttackersC);
    Wait(1.0, c_timeGame);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_WarnPlayerAttack, true, true);
    libNtve_gf_ShowHideUnit(gv_shield02, false);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, 5);
    MinimapPing(PlayerGroupAll(), PointFromId(4), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringExternal("Param/Value/5C69D3C8"), null, PointFromId(4));
    gf_ClearAlertsFunction();
    AIAttackWaveUseGroup(gv_pLAYER_COMPUTER1, gv_enemyAttackersB);
    AIAttackWaveSend(gv_pLAYER_COMPUTER1, 3, true);
    while (!((gf_ContinueAIAttack(gv_enemyAttackersB) == true))) {
        Wait(0.5, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, 1);
    RegionPlayableMapSet(RegionFromId(23));
    CameraPan(gv_pLAYER_USER, PointFromId(117), 0.0, -1, 10, false);
    gf_HidePauseGetReadyPlayer(RegionFromId(49), gv_playerUnitsArea3);
    gf_UnpauseShowEnemies(gv_enemyAttackersC, gv_enemyAttackersA, gv_enemyAttackersB);
    Wait(1.0, c_timeGame);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_WarnPlayerAttack, true, true);
    libNtve_gf_ShowHideUnit(gv_shield03, false);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, 5);
    MinimapPing(PlayerGroupAll(), PointFromId(25), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringExternal("Param/Value/5D638B92"), null, PointFromId(25));
    gf_ClearAlertsFunction();
    AIAttackWaveUseGroup(gv_pLAYER_COMPUTER1, gv_enemyAttackersC);
    AIAttackWaveSend(gv_pLAYER_COMPUTER1, 3, false);
    TriggerEnable(gt_FinalRound1, true);
    while (!((gf_ContinueAIAttack(gv_attackers) == true))) {
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnRound1_Init () {
    gt_SpawnRound1 = TriggerCreate("gt_SpawnRound1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Round 2
//--------------------------------------------------------------------------------------------------
bool gt_SpawnRound2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libChal_gf_ShowHideChallengeVictoryPanel(false);
    libChal_gf_ShowHideChallengeDefeatPanel(false);
    gv_round2Played = true;
    gv_roundCount = 1;
    TriggerExecute(gt_ResetPlayField, true, false);
    if ((gv_allRoundsCompleted == true)) {
        gv_lostUnitsRound2Best = gv_lostUnitsRound2;
        gv_lostUnitsTotalPrevious = gf_TotalScore();
        gv_lostUnitsRound2 = 0;
        ObjectiveShow(gv_objectiveSurvive01, PlayerGroupAll(), true);
        ObjectiveShow(gv_objectiveSurvive02, PlayerGroupAll(), true);
        ObjectiveShow(gv_objectiveSurvive03, PlayerGroupAll(), true);
        ObjectiveSetState(gv_objectiveSurvive01, c_objectiveStateActive);
        UnitPauseAll(false);
        ObjectiveSetName(gv_objectiveSurvive01, (StringExternal("Param/Value/C3DFA01A") + IntToText(gv_roundCount) + StringExternal("Param/Value/DD52ED31")));
        if ((gf_TotalScore() > gv_winningScoreSilver)) {
            ObjectiveSetState(gv_objectiveSurvive02, c_objectiveStateFailed);
        }
        else {
        }
        if ((gf_TotalScore() > gv_winningScoreGold)) {
            ObjectiveSetState(gv_objectiveSurvive03, c_objectiveStateFailed);
        }
        else {
        }
        BoardItemSetText(gv_board, 1, 1, (StringExternal("Param/Value/4FB740AD") + StringExternal("Param/Value/67296021") + IntToText(gv_lostUnitsRound1) + StringExternal("Param/Value/84231775")));
        BoardItemSetText(gv_board, 1, 2, (StringExternal("Param/Value/13F21641") + StringExternal("Param/Value/B5F94917") + IntToText(gv_lostUnitsRound2) + StringExternal("Param/Value/30DCED3D")));
        BoardItemSetText(gv_board, 1, 3, (StringExternal("Param/Value/DC44C7A6") + StringExternal("Param/Value/ABB241FC") + IntToText(gv_lostUnitsRound3) + StringExternal("Param/Value/C18BD0AB")));
        BoardItemSetText(gv_board, 1, 4, (StringExternal("Param/Value/11BE181E") + StringExternal("Param/Value/034AA689") + IntToText(gf_TotalScore()) + StringExternal("Param/Value/2DFBB445")));
    }
    else {
    }
    gv_lostUnitsRound2 = 0;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    RegionPlayableMapSet(gv_playableArea);
    TriggerStop(gt_SpawnRound1);
    TriggerStop(gt_SpawnRound3);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, 1);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(49), 0.0, -1, 10, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationDefault);
    libNtve_gf_GlobalCinematicSetting(false);
    UISetMode(PlayerGroupAll(), c_uiModeConsole, c_transitionDurationDefault);
    UnitGroupLoopBegin(gv_playerUnitsRound1);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_attackers);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_repulserFields);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_PlayerUnitsRound2, true, false);
    gf_SpawnEnemyUnitsForArea1(19, "Zealot", RegionFromId(2));
    gf_SpawnEnemyUnitsForArea2(5, "VoidRay", RegionFromId(4));
    gf_SpawnEnemyUnitsForArea3(9, "Stalker", RegionFromId(5));
    TriggerExecute(gt_SpiresInvulnerable, true, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    if ((gv_retryCountRound02 == 2)) {
        gv_retryCountRound02 = (gv_retryCountRound02 + 1);
        HelpPanelDisplayPage(PlayerGroupAll(), c_helpPanelPageTips);
    }
    else {
    }
    TriggerEnable(gt_FinishDefeatUnitsDead, true);
    if ((gv_allRoundsCompleted == false)) {
        TriggerEnable(gt_FinishDefeatSpireBeforeVictory, true);
    }
    else {
        TriggerEnable(gt_FinishDefeatSpireAfterVictory, true);
    }
    gf_TextTag(StringExternal("Param/Value/0A0D83A4"));
    TriggerExecute(gt_AddReadyButtonQ, true, false);
    while (!((gv_ready == true))) {
        Wait(0.5, c_timeGame);
    }
    gv_ready = false;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    PingSetVisible(gv_buildingPing01, false);
    PingSetVisible(gv_buildingPing02, false);
    PingSetVisible(gv_buildingPing03, false);
    PingSetVisible(gv_enemyPing01, false);
    PingSetVisible(gv_enemyPing02, false);
    PingSetVisible(gv_enemyPing03, false);
    RegionPlayableMapSet(RegionFromId(21));
    CameraPan(gv_pLAYER_USER, PointFromId(116), 0.0, -1, 10, false);
    gf_HidePauseGetReadyPlayer(RegionFromId(50), gv_playerUnitsArea1);
    TriggerExecute(gt_SpiresVulnerable, true, false);
    gf_UnpauseShowEnemies(gv_enemyAttackersA, gv_enemyAttackersB, gv_enemyAttackersC);
    Wait(1.0, c_timeGame);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_WarnPlayerAttack, true, true);
    libNtve_gf_ShowHideUnit(gv_shield01, false);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, 5);
    MinimapPing(PlayerGroupAll(), PointFromId(39), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringExternal("Param/Value/4F31FD38"), null, PointFromId(39));
    gf_ClearAlertsFunction();
    AIAttackWaveUseGroup(gv_pLAYER_COMPUTER1, gv_enemyAttackersA);
    AIAttackWaveSend(gv_pLAYER_COMPUTER1, 3, true);
    while (!((gf_ContinueAIAttack(gv_enemyAttackersA) == true))) {
        Wait(0.5, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, 1);
    RegionPlayableMapSet(RegionFromId(22));
    CameraPan(gv_pLAYER_USER, PointFromId(115), 0.0, -1, 10, false);
    gf_HidePauseGetReadyPlayer(RegionFromId(51), gv_playerUnitsArea2);
    gf_UnpauseShowEnemies(gv_enemyAttackersB, gv_enemyAttackersA, gv_enemyAttackersC);
    Wait(1.0, c_timeGame);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_WarnPlayerAttack, true, true);
    libNtve_gf_ShowHideUnit(gv_shield02, false);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, 5);
    MinimapPing(PlayerGroupAll(), PointFromId(4), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringExternal("Param/Value/0C5A1A78"), null, PointFromId(4));
    gf_ClearAlertsFunction();
    AIAttackWaveUseGroup(gv_pLAYER_COMPUTER1, gv_enemyAttackersB);
    AIAttackWaveSend(gv_pLAYER_COMPUTER1, 3, true);
    while (!((gf_ContinueAIAttack(gv_enemyAttackersB) == true))) {
        Wait(0.5, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, 1);
    RegionPlayableMapSet(RegionFromId(23));
    CameraPan(gv_pLAYER_USER, PointFromId(117), 0.0, -1, 10, false);
    gf_HidePauseGetReadyPlayer(RegionFromId(49), gv_playerUnitsArea3);
    gf_UnpauseShowEnemies(gv_enemyAttackersC, gv_enemyAttackersA, gv_enemyAttackersB);
    Wait(1.0, c_timeGame);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_WarnPlayerAttack, true, true);
    libNtve_gf_ShowHideUnit(gv_shield03, false);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, 5);
    MinimapPing(PlayerGroupAll(), PointFromId(25), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringExternal("Param/Value/EFF9C977"), null, PointFromId(25));
    gf_ClearAlertsFunction();
    AIAttackWaveUseGroup(gv_pLAYER_COMPUTER1, gv_enemyAttackersC);
    AIAttackWaveSend(gv_pLAYER_COMPUTER1, 3, false);
    TriggerEnable(gt_FinalRound2, true);
    while (!((gf_ContinueAIAttack(gv_attackers) == true))) {
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnRound2_Init () {
    gt_SpawnRound2 = TriggerCreate("gt_SpawnRound2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Round 3
//--------------------------------------------------------------------------------------------------
bool gt_SpawnRound3_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libChal_gf_ShowHideChallengeVictoryPanel(false);
    libChal_gf_ShowHideChallengeDefeatPanel(false);
    gv_round3Played = true;
    gv_roundCount = 2;
    TriggerExecute(gt_ResetPlayField, true, false);
    if ((gv_allRoundsCompleted == true)) {
        gv_lostUnitsRound3Best = gv_lostUnitsRound3;
        gv_lostUnitsTotalPrevious = gf_TotalScore();
        gv_lostUnitsRound3 = 0;
        ObjectiveShow(gv_objectiveSurvive01, PlayerGroupAll(), true);
        ObjectiveShow(gv_objectiveSurvive02, PlayerGroupAll(), true);
        ObjectiveShow(gv_objectiveSurvive03, PlayerGroupAll(), true);
        ObjectiveSetState(gv_objectiveSurvive01, c_objectiveStateActive);
        UnitPauseAll(false);
        ObjectiveSetName(gv_objectiveSurvive01, (StringExternal("Param/Value/3BEA528F") + IntToText(gv_roundCount) + StringExternal("Param/Value/346D9701")));
        if ((gf_TotalScore() > gv_winningScoreSilver)) {
            ObjectiveSetState(gv_objectiveSurvive02, c_objectiveStateFailed);
        }
        else {
        }
        if ((gf_TotalScore() > gv_winningScoreGold)) {
            ObjectiveSetState(gv_objectiveSurvive03, c_objectiveStateFailed);
        }
        else {
        }
        BoardItemSetText(gv_board, 1, 1, (StringExternal("Param/Value/139BF97C") + StringExternal("Param/Value/2006508B") + IntToText(gv_lostUnitsRound1) + StringExternal("Param/Value/F1A78017")));
        BoardItemSetText(gv_board, 1, 2, (StringExternal("Param/Value/6BE8407A") + StringExternal("Param/Value/97610913") + IntToText(gv_lostUnitsRound2) + StringExternal("Param/Value/9048E5E4")));
        BoardItemSetText(gv_board, 1, 3, (StringExternal("Param/Value/F81C97E3") + StringExternal("Param/Value/0292B8B1") + IntToText(gv_lostUnitsRound3) + StringExternal("Param/Value/6D6E0B69")));
        BoardItemSetText(gv_board, 1, 4, (StringExternal("Param/Value/02AFBF7A") + StringExternal("Param/Value/2DE085D9") + IntToText(gf_TotalScore()) + StringExternal("Param/Value/E9F3A6DD")));
    }
    else {
    }
    gv_lostUnitsRound3 = 0;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    RegionPlayableMapSet(gv_playableArea);
    TriggerStop(gt_SpawnRound1);
    TriggerStop(gt_SpawnRound2);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, 1);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(49), 0.0, -1, 10, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationDefault);
    libNtve_gf_GlobalCinematicSetting(false);
    UISetMode(PlayerGroupAll(), c_uiModeConsole, c_transitionDurationDefault);
    UnitGroupLoopBegin(gv_playerUnitsRound2);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_attackers);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_repulserFields);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_SpiresInvulnerable, true, false);
    TriggerExecute(gt_PlayerUnitsRound3, true, false);
    gf_SpawnEnemyUnitsForArea1(2, "Immortal", RegionFromId(6));
    gf_SpawnEnemyUnitsForArea1(11, "Stalker", RegionFromId(9));
    gf_SpawnEnemyUnitsForArea2(4, "Archon", RegionFromId(7));
    gf_SpawnEnemyUnitsForArea2(10, "Zealot", RegionFromId(8));
    gf_SpawnEnemyUnitsForArea3(4, "Carrier", RegionFromId(11));
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    if ((gv_retryCountRound03 == 2)) {
        gv_retryCountRound03 = (gv_retryCountRound03 + 1);
        HelpPanelDisplayPage(PlayerGroupAll(), c_helpPanelPageTips);
    }
    else {
    }
    TriggerEnable(gt_FinishDefeatUnitsDead, true);
    if ((gv_allRoundsCompleted == false)) {
        TriggerEnable(gt_FinishDefeatSpireBeforeVictory, true);
    }
    else {
        TriggerEnable(gt_FinishDefeatSpireAfterVictory, true);
    }
    gf_TextTag(StringExternal("Param/Value/D8256EB3"));
    TriggerExecute(gt_AddReadyButtonQ, true, false);
    while (!((gv_ready == true))) {
        Wait(0.5, c_timeGame);
    }
    gv_ready = false;
    TriggerEnable(gt_ObjectiveSurviveProtect, true);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    PingSetVisible(gv_buildingPing01, false);
    PingSetVisible(gv_buildingPing02, false);
    PingSetVisible(gv_buildingPing03, false);
    PingSetVisible(gv_enemyPing01, false);
    PingSetVisible(gv_enemyPing02, false);
    PingSetVisible(gv_enemyPing03, false);
    RegionPlayableMapSet(RegionFromId(21));
    CameraPan(gv_pLAYER_USER, PointFromId(116), 0.0, -1, 10, false);
    gf_HidePauseGetReadyPlayer(RegionFromId(50), gv_playerUnitsArea1);
    TriggerExecute(gt_SpiresVulnerable, true, false);
    gf_UnpauseShowEnemies(gv_enemyAttackersA, gv_enemyAttackersB, gv_enemyAttackersC);
    Wait(1.0, c_timeGame);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_WarnPlayerAttack, true, true);
    libNtve_gf_ShowHideUnit(gv_shield01, false);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, 5);
    MinimapPing(PlayerGroupAll(), PointFromId(39), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringExternal("Param/Value/20A9CC39"), null, PointFromId(39));
    gf_ClearAlertsFunction();
    AIAttackWaveUseGroup(gv_pLAYER_COMPUTER1, gv_enemyAttackersA);
    AIAttackWaveSend(gv_pLAYER_COMPUTER1, 3, true);
    while (!((gf_ContinueAIAttack(gv_enemyAttackersA) == true))) {
        Wait(0.5, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    RegionPlayableMapSet(RegionFromId(22));
    CameraPan(gv_pLAYER_USER, PointFromId(115), 0.0, -1, 10, false);
    gf_HidePauseGetReadyPlayer(RegionFromId(51), gv_playerUnitsArea2);
    gf_UnpauseShowEnemies(gv_enemyAttackersB, gv_enemyAttackersA, gv_enemyAttackersC);
    Wait(1.0, c_timeGame);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_WarnPlayerAttack, true, true);
    libNtve_gf_ShowHideUnit(gv_shield02, false);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, 5);
    MinimapPing(PlayerGroupAll(), PointFromId(4), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringExternal("Param/Value/32A8F9A9"), null, PointFromId(4));
    gf_ClearAlertsFunction();
    AIAttackWaveUseGroup(gv_pLAYER_COMPUTER1, gv_enemyAttackersB);
    AIAttackWaveSend(gv_pLAYER_COMPUTER1, 3, true);
    while (!((gf_ContinueAIAttack(gv_enemyAttackersB) == true))) {
        Wait(0.5, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    RegionPlayableMapSet(RegionFromId(23));
    CameraPan(gv_pLAYER_USER, PointFromId(117), 0.0, -1, 10, false);
    gf_HidePauseGetReadyPlayer(RegionFromId(49), gv_playerUnitsArea3);
    gf_UnpauseShowEnemies(gv_enemyAttackersC, gv_enemyAttackersA, gv_enemyAttackersB);
    Wait(1.0, c_timeGame);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_WarnPlayerAttack, true, true);
    libNtve_gf_ShowHideUnit(gv_shield03, false);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, 5);
    MinimapPing(PlayerGroupAll(), PointFromId(25), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringExternal("Param/Value/EDCAAD5A"), null, PointFromId(25));
    gf_ClearAlertsFunction();
    AIAttackWaveUseGroup(gv_pLAYER_COMPUTER1, gv_enemyAttackersC);
    AIAttackWaveSend(gv_pLAYER_COMPUTER1, 3, false);
    TriggerEnable(gt_FinalRound3, true);
    while (!((gf_ContinueAIAttack(gv_attackers) == true))) {
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnRound3_Init () {
    gt_SpawnRound3 = TriggerCreate("gt_SpawnRound3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Units Round 1
//--------------------------------------------------------------------------------------------------
bool gt_PlayerUnitsRound1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnPlayerUnitsForRound1(10, "Zergling", RegionFromId(28));
    gf_SpawnPlayerUnitsForRound1(21, "Hydralisk", RegionFromId(33));
    gf_SpawnPlayerUnitsForRound1(4, "Ultralisk", RegionFromId(41));
    gf_SpawnPlayerUnitsForRound1(1, "Infestor", RegionFromId(43));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerUnitsRound1_Init () {
    gt_PlayerUnitsRound1 = TriggerCreate("gt_PlayerUnitsRound1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Units Round 2
//--------------------------------------------------------------------------------------------------
bool gt_PlayerUnitsRound2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnPlayerUnitsForRound2(11, "Mutalisk", RegionFromId(28));
    gf_SpawnPlayerUnitsForRound2(20, "Roach", RegionFromId(33));
    gf_SpawnPlayerUnitsForRound2(2, "Ultralisk", RegionFromId(41));
    gf_SpawnPlayerUnitsForRound2(1, "Infestor", RegionFromId(43));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerUnitsRound2_Init () {
    gt_PlayerUnitsRound2 = TriggerCreate("gt_PlayerUnitsRound2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Units Round 3
//--------------------------------------------------------------------------------------------------
bool gt_PlayerUnitsRound3_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnPlayerUnitsForRound3(12, "Roach", RegionFromId(28));
    gf_SpawnPlayerUnitsForRound3(14, "Corruptor", RegionFromId(33));
    gf_SpawnPlayerUnitsForRound3(4, "Ultralisk", RegionFromId(42));
    gf_SpawnPlayerUnitsForRound3(5, "BroodLord", RegionFromId(44));
    gf_SpawnPlayerUnitsForRound3(1, "Infestor", RegionFromId(43));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerUnitsRound3_Init () {
    gt_PlayerUnitsRound3 = TriggerCreate("gt_PlayerUnitsRound3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    AICampaignStart(gv_pLAYER_COMPUTER1);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_COMPUTER1, PlayerGroupSingle(gv_pLAYER_USER));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warn Player - Attack
//--------------------------------------------------------------------------------------------------
bool gt_WarnPlayerAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_racingStartDIALOG;
    int lv_racingStartTEXT;

    // Variable Initialization
    lv_racingStartDIALOG = c_invalidDialogId;
    lv_racingStartTEXT = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, false);
    lv_racingStartDIALOG = DialogLastCreated();
    DialogSetImageVisible(lv_racingStartDIALOG, false);
    DialogControlCreate(lv_racingStartDIALOG, c_triggerControlTypeLabel);
    lv_racingStartTEXT = DialogControlLastCreated();
    DialogControlSetFullDialog(lv_racingStartTEXT, PlayerGroupAll(), true);
    DialogSetVisible(lv_racingStartDIALOG, PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemStyle(lv_racingStartTEXT, "ChallengeReady", PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lv_racingStartTEXT, StringExternal("Param/Value/E8E6A3F1"), PlayerGroupAll());
    SoundPlay(SoundLink("TUIWarningPing", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(3.0, c_timeGame);
    DialogSetVisible(lv_racingStartDIALOG, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarnPlayerAttack_Init () {
    gt_WarnPlayerAttack = TriggerCreate("gt_WarnPlayerAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawned Player Units
//--------------------------------------------------------------------------------------------------
bool gt_SpawnedPlayerUnits_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "InfestorTerran") || (UnitGetType(EventUnit()) == "InfestorTerranBurrowed") || (UnitGetType(EventUnit()) == "Broodling")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_playerUnits, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnedPlayerUnits_Init () {
    gt_SpawnedPlayerUnits = TriggerCreate("gt_SpawnedPlayerUnits_Func");
    TriggerAddEventUnitRegion(gt_SpawnedPlayerUnits, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spires Invulnerable
//--------------------------------------------------------------------------------------------------
bool gt_SpiresInvulnerable_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(gv_spire01, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_spire02, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_spire03, c_unitPropLifePercent, 100.0);
    UnitBehaviorAddPlayer(gv_spire01, "DamageTakenNone", gv_pLAYER_USER, 1);
    UnitBehaviorAddPlayer(gv_spire02, "DamageTakenNone", gv_pLAYER_USER, 1);
    UnitBehaviorAddPlayer(gv_spire03, "DamageTakenNone", gv_pLAYER_USER, 1);
    UnitBehaviorAddPlayer(gv_spire01, "Untargetable", gv_pLAYER_USER, 1);
    UnitBehaviorAddPlayer(gv_spire02, "Untargetable", gv_pLAYER_USER, 1);
    UnitBehaviorAddPlayer(gv_spire03, "Untargetable", gv_pLAYER_USER, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpiresInvulnerable_Init () {
    gt_SpiresInvulnerable = TriggerCreate("gt_SpiresInvulnerable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spires Vulnerable
//--------------------------------------------------------------------------------------------------
bool gt_SpiresVulnerable_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemovePlayer(gv_spire01, "DamageTakenNone", gv_pLAYER_USER, 1);
    UnitBehaviorRemovePlayer(gv_spire02, "DamageTakenNone", gv_pLAYER_USER, 1);
    UnitBehaviorRemovePlayer(gv_spire03, "DamageTakenNone", gv_pLAYER_USER, 1);
    UnitBehaviorRemovePlayer(gv_spire01, "Untargetable", gv_pLAYER_USER, 1);
    UnitBehaviorRemovePlayer(gv_spire02, "Untargetable", gv_pLAYER_USER, 1);
    UnitBehaviorRemovePlayer(gv_spire03, "Untargetable", gv_pLAYER_USER, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpiresVulnerable_Init () {
    gt_SpiresVulnerable = TriggerCreate("gt_SpiresVulnerable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Dies
//--------------------------------------------------------------------------------------------------
bool gt_UnitDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_USER, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(gv_playerUnitsRound1, EventUnit()) == true)) {
        gv_lostUnitsRound1 += 1;
        BoardItemSetText(gv_board, 1, 1, (StringExternal("Param/Value/443501B7") + StringExternal("Param/Value/B3BE23B3") + IntToText(gv_lostUnitsRound1) + StringExternal("Param/Value/E411807C")));
    }
    else {
    }
    if ((UnitGroupHasUnit(gv_playerUnitsRound2, EventUnit()) == true)) {
        gv_lostUnitsRound2 += 1;
        BoardItemSetText(gv_board, 1, 2, (StringExternal("Param/Value/72C1B32D") + StringExternal("Param/Value/55D7AD45") + IntToText(gv_lostUnitsRound2) + StringExternal("Param/Value/98E13513")));
    }
    else {
    }
    if ((UnitGroupHasUnit(gv_playerUnitsRound3, EventUnit()) == true)) {
        gv_lostUnitsRound3 += 1;
        BoardItemSetText(gv_board, 1, 3, (StringExternal("Param/Value/FBD886C5") + StringExternal("Param/Value/BA08D3D3") + IntToText(gv_lostUnitsRound3) + StringExternal("Param/Value/552C8C13")));
    }
    else {
    }
    if ((gf_TotalScore() > gv_winningScoreSilver)) {
        ObjectiveSetState(gv_objectiveSurvive02, c_objectiveStateFailed);
    }
    else {
    }
    if ((gf_TotalScore() > gv_winningScoreGold)) {
        ObjectiveSetState(gv_objectiveSurvive03, c_objectiveStateFailed);
    }
    else {
    }
    BoardItemSetText(gv_board, 1, 4, (StringExternal("Param/Value/6BEBBFBB") + StringExternal("Param/Value/EA679C36") + IntToText(gf_TotalScore()) + StringExternal("Param/Value/2BB1C406")));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitDies_Init () {
    gt_UnitDies = TriggerCreate("gt_UnitDies_Func");
    TriggerAddEventUnitDied(gt_UnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make Round 1 Score Dialog
//--------------------------------------------------------------------------------------------------
bool gt_MakeRound1ScoreDialog_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_allRoundsCompleted == true)) {
        if ((gv_lostUnitsRound1 < gv_lostUnitsRound1Best)) {
            gf_SaveScores();
            if ((gv_lostUnitsRound1 == 0)) {
                libChal_gf_CreateChallengeWaveSuccessPanel(0, StringExternal("Param/Value/A017AAED"), StringExternal("Param/Value/E143FE5F"), (StringExternal("Param/Value/418492EF") + IntToText(gv_lostUnitsRound1)), StringExternal("Param/Value/03676791"), gt_WaitthengobackVictoryScreen);
                libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
            }
            else {
                libChal_gf_CreateChallengeWaveSuccessPanel(0, StringExternal("Param/Value/3D818329"), StringExternal("Param/Value/EEEF5E84"), (StringExternal("Param/Value/4EFADD75") + IntToText(gv_lostUnitsRound1)), StringExternal("Param/Value/87B12C01"), gt_WaitthengobackVictoryScreen);
                libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
            }
        }
        else {
            libChal_gf_CreateChallengeWaveSuccessPanel(0, StringExternal("Param/Value/58C45A4E"), StringExternal("Param/Value/A6B17B44"), (StringExternal("Param/Value/6FF27A28") + IntToText(gv_lostUnitsRound1)), StringExternal("Param/Value/9A4FD320"), gt_WaitthengobackVictoryScreen);
            libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        }
        gf_Achievements();
    }
    else {
        if ((gv_lostUnitsRound1 == 0)) {
            libChal_gf_CreateChallengeWaveSuccessPanel(0, StringExternal("Param/Value/1075D8E6"), StringExternal("Param/Value/5F38CA0C"), (StringExternal("Param/Value/2EF65769") + IntToText(gv_lostUnitsRound1)), null, gt_WaittoStartRound2);
            libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        }
        else {
            libChal_gf_CreateChallengeWaveSuccessPanel(0, StringExternal("Param/Value/9692995A"), StringExternal("Param/Value/97C2E064"), (StringExternal("Param/Value/EA9B1B98") + IntToText(gv_lostUnitsRound1)), null, gt_WaittoStartRound2);
            libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakeRound1ScoreDialog_Init () {
    gt_MakeRound1ScoreDialog = TriggerCreate("gt_MakeRound1ScoreDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wait to Start Round 2
//--------------------------------------------------------------------------------------------------
bool gt_WaittoStartRound2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libChal_gf_ShowHideChallengeWaveSuccessPanel(false);
    TriggerExecute(gt_ObjectiveSurviveUpdate, true, false);
    TriggerExecute(gt_SpawnRound2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WaittoStartRound2_Init () {
    gt_WaittoStartRound2 = TriggerCreate("gt_WaittoStartRound2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make Round 2 Score Dialog
//--------------------------------------------------------------------------------------------------
bool gt_MakeRound2ScoreDialog_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_allRoundsCompleted == true)) {
        if ((gv_lostUnitsRound2 < gv_lostUnitsRound2Best)) {
            gf_SaveScores();
            if ((gv_lostUnitsRound2 == 0)) {
                libChal_gf_CreateChallengeWaveSuccessPanel(0, StringExternal("Param/Value/5C5B7F1A"), StringExternal("Param/Value/9B772D2B"), (StringExternal("Param/Value/7F6EBF58") + IntToText(gv_lostUnitsRound2)), StringExternal("Param/Value/56AB9E88"), gt_WaitthengobackVictoryScreen);
                libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
            }
            else {
                libChal_gf_CreateChallengeWaveSuccessPanel(0, StringExternal("Param/Value/A87F15EA"), StringExternal("Param/Value/368D532E"), (StringExternal("Param/Value/F399D343") + IntToText(gv_lostUnitsRound2)), StringExternal("Param/Value/82EEFF9E"), gt_WaitthengobackVictoryScreen);
                libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
            }
        }
        else {
            libChal_gf_CreateChallengeWaveSuccessPanel(0, StringExternal("Param/Value/FDD7A3B1"), StringExternal("Param/Value/A543F10E"), (StringExternal("Param/Value/4926D07F") + IntToText(gv_lostUnitsRound2)), StringExternal("Param/Value/9B3EE8E5"), gt_WaitthengobackVictoryScreen);
            libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        }
        gf_Achievements();
    }
    else {
        if ((gv_lostUnitsRound2 == 0)) {
            libChal_gf_CreateChallengeWaveSuccessPanel(0, StringExternal("Param/Value/9CEF11E9"), StringExternal("Param/Value/CD0F6F47"), (StringExternal("Param/Value/1F85ACDA") + IntToText(gv_lostUnitsRound2)), null, gt_WaittoStartRound3);
            libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        }
        else {
            libChal_gf_CreateChallengeWaveSuccessPanel(0, StringExternal("Param/Value/AB097904"), StringExternal("Param/Value/90939EA4"), (StringExternal("Param/Value/C3B24CD3") + IntToText(gv_lostUnitsRound2)), null, gt_WaittoStartRound3);
            libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakeRound2ScoreDialog_Init () {
    gt_MakeRound2ScoreDialog = TriggerCreate("gt_MakeRound2ScoreDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wait to Start Round 3
//--------------------------------------------------------------------------------------------------
bool gt_WaittoStartRound3_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libChal_gf_ShowHideChallengeWaveSuccessPanel(false);
    TriggerExecute(gt_ObjectiveSurviveUpdate, true, false);
    TriggerExecute(gt_SpawnRound3, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WaittoStartRound3_Init () {
    gt_WaittoStartRound3 = TriggerCreate("gt_WaittoStartRound3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make Round 3 Score Dialog
//--------------------------------------------------------------------------------------------------
bool gt_MakeRound3ScoreDialog_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_allRoundsCompleted == true)) {
        if ((gv_lostUnitsRound3 < gv_lostUnitsRound3Best)) {
            gf_SaveScores();
            if ((gv_lostUnitsRound3 == 0)) {
                libChal_gf_CreateChallengeWaveSuccessPanel(0, StringExternal("Param/Value/C5B4B27D"), StringExternal("Param/Value/FC1C0E28"), (StringExternal("Param/Value/827AB46C") + IntToText(gv_lostUnitsRound3)), StringExternal("Param/Value/BBEBC708"), gt_WaitthengobackVictoryScreen);
                libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
            }
            else {
                libChal_gf_CreateChallengeWaveSuccessPanel(0, StringExternal("Param/Value/C8F97B53"), StringExternal("Param/Value/29503275"), (StringExternal("Param/Value/815AFC9A") + IntToText(gv_lostUnitsRound3)), StringExternal("Param/Value/21691E0A"), gt_WaitthengobackVictoryScreen);
                libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
            }
        }
        else {
            libChal_gf_CreateChallengeWaveSuccessPanel(0, StringExternal("Param/Value/F0BDAC55"), StringExternal("Param/Value/D9E4409A"), (StringExternal("Param/Value/EED8CCD2") + IntToText(gv_lostUnitsRound3)), StringExternal("Param/Value/6CED62D0"), gt_WaitthengobackVictoryScreen);
            libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        }
    }
    else {
        if ((gv_lostUnitsRound3 == 0)) {
            libChal_gf_CreateChallengeWaveSuccessPanel(0, StringExternal("Param/Value/DD8A20B2"), StringExternal("Param/Value/C2BFB487"), (StringExternal("Param/Value/A111C874") + IntToText(gv_lostUnitsRound3)), null, gt_WaittogotoVictory);
            libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        }
        else {
            libChal_gf_CreateChallengeWaveSuccessPanel(0, StringExternal("Param/Value/FF8F5A3C"), StringExternal("Param/Value/14F4E1E6"), (StringExternal("Param/Value/D0A3BA1B") + IntToText(gv_lostUnitsRound3)), null, gt_WaittogotoVictory);
            libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        }
    }
    gf_Achievements();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakeRound3ScoreDialog_Init () {
    gt_MakeRound3ScoreDialog = TriggerCreate("gt_MakeRound3ScoreDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wait to go to Victory
//--------------------------------------------------------------------------------------------------
bool gt_WaittogotoVictory_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_lostUnitsRound1Best = gv_lostUnitsRound1;
    gv_lostUnitsRound2Best = gv_lostUnitsRound2;
    gv_lostUnitsRound3Best = gv_lostUnitsRound3;
    libChal_gf_ShowHideChallengeWaveSuccessPanel(false);
    TriggerExecute(gt_ObjectiveSurviveUpdate, true, false);
    TriggerExecute(gt_FinishVictory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WaittogotoVictory_Init () {
    gt_WaittogotoVictory = TriggerCreate("gt_WaittogotoVictory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wait then go back Victory Screen
//--------------------------------------------------------------------------------------------------
bool gt_WaitthengobackVictoryScreen_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_spireDead == false)) {
        if ((gv_lostUnitsRound1 <= gv_lostUnitsRound1Best)) {
            gv_lostUnitsRound1Best = gv_lostUnitsRound1;
        }
        else {
            if ((gv_allRoundsCompleted == true) && (gv_roundCount == 1)) {
                gv_lostUnitsRound1 = gv_lostUnitsRound1Best;
            }
            else {
            }
        }
        if ((gv_lostUnitsRound2 <= gv_lostUnitsRound2Best)) {
            gv_lostUnitsRound2Best = gv_lostUnitsRound2;
        }
        else {
            if ((gv_allRoundsCompleted == true) && (gv_roundCount == 2)) {
                gv_lostUnitsRound2 = gv_lostUnitsRound2Best;
            }
            else {
            }
        }
        if ((gv_lostUnitsRound3 <= gv_lostUnitsRound3Best)) {
            gv_lostUnitsRound3Best = gv_lostUnitsRound3;
        }
        else {
            if ((gv_allRoundsCompleted == true) && (gv_roundCount == 3)) {
                gv_lostUnitsRound3 = gv_lostUnitsRound3Best;
            }
            else {
            }
        }
    }
    else {
    }
    libChal_gf_ShowHideChallengeWaveSuccessPanel(false);
    TriggerExecute(gt_ObjectiveSurviveUpdate, true, false);
    TriggerExecute(gt_DialogScoreShow, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WaitthengobackVictoryScreen_Init () {
    gt_WaitthengobackVictoryScreen = TriggerCreate("gt_WaitthengobackVictoryScreen_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check for Cheating
//--------------------------------------------------------------------------------------------------
bool gt_CheckforCheating_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_cheatUsed = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheckforCheating_Init () {
    gt_CheckforCheating = TriggerCreate("gt_CheckforCheating_Func");
    TriggerAddEventCheatUsed(gt_CheckforCheating, c_playerAny, c_gameCheatAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add Ready Button Q
//--------------------------------------------------------------------------------------------------
bool gt_AddReadyButtonQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealerCreate(gv_pLAYER_USER, RegionPlayableMap());
    gv_revealer = VisRevealerLastCreated();
    TriggerQueueEnter();
    if ((gv_board == c_boardNone)) {
        BoardDestroy(gv_board);
        libChal_gf_ChallengeScoreWindowwithRounds(StringExternal("Param/Value/3E57CB9D"), StringExternal("Param/Value/16ED74D7"), StringExternal("Param/Value/67896A65"), StringExternal("Param/Value/F4EF1FEC"), gv_lostUnitsRound1, gv_lostUnitsRound2, gv_lostUnitsRound3, gf_TotalScore());
        gv_board = BoardLastCreated();
        BoardItemSetText(gv_board, 1, 1, (StringExternal("Param/Value/1C2D0214") + StringExternal("Param/Value/B3C7F772") + IntToText(gv_lostUnitsRound1) + StringExternal("Param/Value/36625A2B")));
        BoardItemSetText(gv_board, 1, 2, (StringExternal("Param/Value/692A8EA6") + StringExternal("Param/Value/6F2D770B") + IntToText(gv_lostUnitsRound2) + StringExternal("Param/Value/B50DA325")));
        BoardItemSetText(gv_board, 1, 3, (StringExternal("Param/Value/695B5B3E") + StringExternal("Param/Value/93E2AC9F") + IntToText(gv_lostUnitsRound3) + StringExternal("Param/Value/2A7EB4AB")));
        BoardItemSetText(gv_board, 1, 4, (StringExternal("Param/Value/6B1F8FDC") + StringExternal("Param/Value/5394AC59") + IntToText(gf_TotalScore()) + StringExternal("Param/Value/CFB3DD00")));
    }
    else {
    }
    if ((gv_roundCount == 0)) {
        BoardItemSetText(gv_board, 1, 1, (StringExternal("Param/Value/307CFEE3") + StringExternal("Param/Value/6774D866") + IntToText(gv_lostUnitsRound1) + StringExternal("Param/Value/9EEEB1D4")));
        BoardItemSetText(gv_board, 1, 2, (StringExternal("Param/Value/38C90BB0") + StringExternal("Param/Value/9B82DCF8") + IntToText(gv_lostUnitsRound2) + StringExternal("Param/Value/5C3D0C39")));
        BoardItemSetText(gv_board, 1, 3, (StringExternal("Param/Value/05FB3844") + StringExternal("Param/Value/E93D1E46") + IntToText(gv_lostUnitsRound3) + StringExternal("Param/Value/46DCEEC1")));
    }
    else {
    }
    if ((gv_roundCount == 1)) {
        BoardItemSetText(gv_board, 1, 1, (StringExternal("Param/Value/D96EDDF0") + StringExternal("Param/Value/FEBBD147") + IntToText(gv_lostUnitsRound1) + StringExternal("Param/Value/A2468953")));
        BoardItemSetText(gv_board, 1, 2, (StringExternal("Param/Value/D775DCBA") + StringExternal("Param/Value/949F8949") + IntToText(gv_lostUnitsRound2) + StringExternal("Param/Value/362B2730")));
        BoardItemSetText(gv_board, 1, 3, (StringExternal("Param/Value/2E6A571C") + StringExternal("Param/Value/69206F96") + IntToText(gv_lostUnitsRound3) + StringExternal("Param/Value/0044DD19")));
    }
    else {
    }
    if ((gv_roundCount == 2)) {
        BoardItemSetText(gv_board, 1, 1, (StringExternal("Param/Value/2C1D8B6E") + StringExternal("Param/Value/1D6F5613") + IntToText(gv_lostUnitsRound1) + StringExternal("Param/Value/196DF9FF")));
        BoardItemSetText(gv_board, 1, 2, (StringExternal("Param/Value/F3DAAF62") + StringExternal("Param/Value/EA54C463") + IntToText(gv_lostUnitsRound2) + StringExternal("Param/Value/34B7D928")));
        BoardItemSetText(gv_board, 1, 3, (StringExternal("Param/Value/42C97571") + StringExternal("Param/Value/A85206E8") + IntToText(gv_lostUnitsRound3) + StringExternal("Param/Value/061C520E")));
    }
    else {
    }
    BoardItemSetText(gv_board, 1, 4, (StringExternal("Param/Value/76F200AB") + StringExternal("Param/Value/6FD073D9") + IntToText(gf_TotalScore()) + StringExternal("Param/Value/F887F37C")));
    libChal_gf_ChallengeReadyButton(gv_readyButton, gv_pLAYER_USER, gt_ReadyPressed);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddReadyButtonQ_Init () {
    gt_AddReadyButtonQ = TriggerCreate("gt_AddReadyButtonQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ready Pressed
//--------------------------------------------------------------------------------------------------
bool gt_ReadyPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_unusedUnits;
    unitgroup lv_unitsBySpire1;
    unitgroup lv_unitsBySpire2;
    unitgroup lv_unitsBySpire3;

    // Variable Initialization
    lv_unusedUnits = UnitGroupEmpty();
    lv_unitsBySpire1 = UnitGroupEmpty();
    lv_unitsBySpire2 = UnitGroupEmpty();
    lv_unitsBySpire3 = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_USER, null, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((RegionContainsPoint(RegionFromId(21), UnitGetPosition(UnitGroupLoopCurrent())) == false) && (RegionContainsPoint(RegionFromId(22), UnitGetPosition(UnitGroupLoopCurrent())) == false) && (RegionContainsPoint(RegionFromId(23), UnitGetPosition(UnitGroupLoopCurrent())) == false) && (UnitGetType(UnitGroupLoopCurrent()) != "BroodlingEscort") && (UnitGetType(UnitGroupLoopCurrent()) != "InfestorTerran") && (UnitGetType(UnitGroupLoopCurrent()) != "InfestorTerranBurrowed")) {
            UnitGroupAdd(lv_unusedUnits, UnitGroupLoopCurrent());
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_USER, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(lv_unitsBySpire1, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_USER, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(lv_unitsBySpire2, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_USER, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(lv_unitsBySpire3, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    if ((UnitGroupCount(lv_unusedUnits, c_unitCountAlive) >= 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (StringExternal("Param/Value/EF0263F8") + StringExternal("Param/Value/F28FEA2B") + IntToText(UnitGroupCount(lv_unusedUnits, c_unitCountAlive)) + StringExternal("Param/Value/E554E1A0") + StringExternal("Param/Value/A8392189") + StringExternal("Param/Value/3086EEEE")));
        TimerStart(gv_textTimer, 8.0, false, c_timeReal);
        return true;
    }
    else {
    }
    if (((UnitGroupCount(lv_unitsBySpire1, c_unitCountAlive) == 0) || (UnitGroupCount(lv_unitsBySpire2, c_unitCountAlive) == 0) || (UnitGroupCount(lv_unitsBySpire3, c_unitCountAlive) == 0))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (StringExternal("Param/Value/7F119C7A") + StringExternal("Param/Value/AE8ADBCF") + StringExternal("Param/Value/AEE6450C") + StringExternal("Param/Value/EBFCE646")));
        TimerStart(gv_textTimer, 8.0, false, c_timeReal);
        return true;
    }
    else {
    }
    libNtve_gf_HideScreenButton(false, gv_readyButton);
    UnitGroupLoopBegin(UnitGroupFilterRegion(gv_playerUnits, RegionFromId(50), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_playerUnitsArea1, UnitGroupLoopCurrent());
        while (!((UnitOrder(UnitGroupLoopCurrent(), 0) != Order(AbilityCommand("BurrowUltraliskDown", 0))))) {
            Wait(0.1, c_timeGame);
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFilterRegion(gv_playerUnits, RegionFromId(51), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_playerUnitsArea2, UnitGroupLoopCurrent());
        while (!((UnitOrder(UnitGroupLoopCurrent(), 0) != Order(AbilityCommand("BurrowUltraliskDown", 0))))) {
            Wait(0.1, c_timeGame);
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFilterRegion(gv_playerUnits, RegionFromId(49), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_playerUnitsArea3, UnitGroupLoopCurrent());
        while (!((UnitOrder(UnitGroupLoopCurrent(), 0) != Order(AbilityCommand("BurrowUltraliskDown", 0))))) {
            Wait(0.1, c_timeGame);
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    VisRevealerDestroy(gv_revealer);
    gv_ready = true;
    TimerStart(gv_textTimer, 0.0, false, c_timeReal);
    UnitGroupLoopBegin(UnitGroupFilterRegion(gv_playerUnits, RegionFromId(50), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_playerUnitsArea1, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFilterRegion(gv_playerUnits, RegionFromId(51), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_playerUnitsArea2, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFilterRegion(gv_playerUnits, RegionFromId(49), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_playerUnitsArea3, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReadyPressed_Init () {
    gt_ReadyPressed = TriggerCreate("gt_ReadyPressed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Text
//--------------------------------------------------------------------------------------------------
bool gt_RemoveText_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveText_Init () {
    gt_RemoveText = TriggerCreate("gt_RemoveText_Func");
    TriggerAddEventTimer(gt_RemoveText, gv_textTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObjectiveSurvive Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurviveCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveCreate(TextReplaceWord(StringExternal("Param/Value/849B54A1"), StringExternal("Param/Value/8BFF5549"), IntToText(gv_roundCount), c_stringReplaceAll, c_stringCase), StringExternal("Param/Value/2C1E1D77"), c_objectiveStateActive, true);
    gv_objectiveSurvive01 = ObjectiveLastCreated();
    PingSetVisible(gv_buildingPing01, true);
    PingSetVisible(gv_buildingPing02, true);
    PingSetVisible(gv_buildingPing03, true);
    PingSetVisible(gv_enemyPing01, true);
    PingSetVisible(gv_enemyPing02, true);
    PingSetVisible(gv_enemyPing03, true);
    Wait(2.0, c_timeGame);
    ObjectiveCreate(TextReplaceWord((StringExternal("Param/Value/C68EE48D") + gv_ratingTextSilver + StringExternal("Param/Value/6501C3BD")), StringExternal("Param/Value/D8461B70"), IntToText(gv_winningScoreSilver), c_stringReplaceAll, c_stringCase), TextReplaceWord(StringExternal("Param/Value/F50A1C45"), StringExternal("Param/Value/012557E7"), IntToText(gv_winningScoreSilver), c_stringReplaceAll, c_stringCase), c_objectiveStateActive, false);
    gv_objectiveSurvive02 = ObjectiveLastCreated();
    Wait(2.0, c_timeGame);
    ObjectiveCreate(TextReplaceWord((StringExternal("Param/Value/96804F89") + gv_ratingTextGold + StringExternal("Param/Value/5B8E052D")), StringExternal("Param/Value/F5702168"), IntToText(gv_winningScoreGold), c_stringReplaceAll, c_stringCase), TextReplaceWord(StringExternal("Param/Value/89E785A7"), StringExternal("Param/Value/6BCFF374"), IntToText(gv_winningScoreGold), c_stringReplaceAll, c_stringCase), c_objectiveStateActive, false);
    gv_objectiveSurvive03 = ObjectiveLastCreated();
    Wait(2.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurviveCreate_Init () {
    gt_ObjectiveSurviveCreate = TriggerCreate("gt_ObjectiveSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObjectiveSurvive Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurviveUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveSetName(gv_objectiveSurvive01, TextReplaceWord(StringExternal("Param/Value/02B1F8A4"), StringExternal("Param/Value/09B9AAA0"), IntToText(gv_roundCount), c_stringReplaceAll, c_stringCase));
    if ((gv_allRoundsCompleted == false)) {
        if ((gv_roundCount == 3)) {
            ObjectiveSetState(gv_objectiveSurvive01, c_objectiveStateCompleted);
        }
        else {
        }
        if ((gv_roundCount == 3) && (gf_TotalScore() <= gv_winningScoreSilver)) {
            ObjectiveSetState(gv_objectiveSurvive02, c_objectiveStateCompleted);
        }
        else {
        }
        if ((gv_roundCount == 3) && (gf_TotalScore() <= gv_winningScoreGold)) {
            ObjectiveSetState(gv_objectiveSurvive03, c_objectiveStateCompleted);
        }
        else {
        }
    }
    else {
        ObjectiveSetState(gv_objectiveSurvive01, c_objectiveStateCompleted);
        if ((gf_TotalScore() <= gv_winningScoreSilver)) {
            ObjectiveSetState(gv_objectiveSurvive02, c_objectiveStateCompleted);
        }
        else {
        }
        if ((gf_TotalScore() <= gv_winningScoreGold)) {
            ObjectiveSetState(gv_objectiveSurvive03, c_objectiveStateCompleted);
        }
        else {
        }
    }
    if ((gf_TotalScore() > gv_winningScoreSilver)) {
        ObjectiveSetState(gv_objectiveSurvive02, c_objectiveStateFailed);
    }
    else {
    }
    if ((gf_TotalScore() > gv_winningScoreGold)) {
        ObjectiveSetState(gv_objectiveSurvive03, c_objectiveStateFailed);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurviveUpdate_Init () {
    gt_ObjectiveSurviveUpdate = TriggerCreate("gt_ObjectiveSurviveUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObjectiveSurvive Protect
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurviveProtect_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_COMPUTER1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_attackers, c_unitCountAlive) == 0)) {
        ObjectiveSetState(gv_objectiveSurvive01, c_objectiveStateCompleted);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurviveProtect_Init () {
    gt_ObjectiveSurviveProtect = TriggerCreate("gt_ObjectiveSurviveProtect_Func");
    TriggerEnable(gt_ObjectiveSurviveProtect, false);
    TriggerAddEventUnitDied(gt_ObjectiveSurviveProtect, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObjectiveSurvive Discover Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurviveDiscoverQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveSurviveCreate, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurviveDiscoverQ_Init () {
    gt_ObjectiveSurviveDiscoverQ = TriggerCreate("gt_ObjectiveSurviveDiscoverQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObjectiveSurvive Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurviveComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveSurviveCreate, true, false);
    ObjectiveSetState(gv_objectiveSurvive01, c_objectiveStateCompleted);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurviveComplete_Init () {
    gt_ObjectiveSurviveComplete = TriggerCreate("gt_ObjectiveSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObjectiveSurvive Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurviveFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveSurviveCreate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurviveFailed_Init () {
    gt_ObjectiveSurviveFailed = TriggerCreate("gt_ObjectiveSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Final Round 1
//--------------------------------------------------------------------------------------------------
bool gt_FinalRound1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_attackers, c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_attackers, c_unitCountAlive) == 0) && (TriggerIsEnabled(TriggerGetCurrent()) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_SpiresInvulnerable, true, false);
        UnitPauseAll(true);
        Wait(2.0, c_timeGame);
        gv_roundCount = 1;
        TriggerExecute(gt_ObjectiveSurviveUpdate, true, false);
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_MakeRound1ScoreDialog, true, false);
        return true;
    }
    else {
    }
    if ((UnitGroupCount(gv_playerUnits, c_unitCountAlive) == 0) && (UnitGetOwner(EventUnit()) == gv_pLAYER_USER)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_FinalRound1, false);
        TriggerEnable(gt_FinalRound2, false);
        TriggerEnable(gt_FinalRound3, false);
        TriggerExecute(gt_FinishDefeatUnitsDead, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinalRound1_Init () {
    gt_FinalRound1 = TriggerCreate("gt_FinalRound1_Func");
    TriggerEnable(gt_FinalRound1, false);
    TriggerAddEventUnitDied(gt_FinalRound1, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Final Round 2
//--------------------------------------------------------------------------------------------------
bool gt_FinalRound2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_attackers, c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_attackers, c_unitCountAlive) == 0) && (TriggerIsEnabled(TriggerGetCurrent()) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_SpiresInvulnerable, true, false);
        UnitPauseAll(true);
        Wait(2.0, c_timeGame);
        gv_roundCount = 2;
        TriggerExecute(gt_ObjectiveSurviveUpdate, true, false);
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_MakeRound2ScoreDialog, true, false);
        return true;
    }
    else {
    }
    if ((UnitGroupCount(gv_playerUnits, c_unitCountAlive) == 0) && (UnitGetOwner(EventUnit()) == gv_pLAYER_USER)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_FinalRound1, false);
        TriggerEnable(gt_FinalRound2, false);
        TriggerEnable(gt_FinalRound3, false);
        TriggerExecute(gt_FinishDefeatUnitsDead, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinalRound2_Init () {
    gt_FinalRound2 = TriggerCreate("gt_FinalRound2_Func");
    TriggerEnable(gt_FinalRound2, false);
    TriggerAddEventUnitDied(gt_FinalRound2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Final Round 3
//--------------------------------------------------------------------------------------------------
bool gt_FinalRound3_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_attackers, c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_attackers, c_unitCountAlive) == 0) && (TriggerIsEnabled(TriggerGetCurrent()) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_SpiresInvulnerable, true, false);
        UnitPauseAll(true);
        Wait(2.0, c_timeGame);
        TriggerEnable(gt_FinishDefeatSpireBeforeVictory, false);
        gv_roundCount = 3;
        TriggerExecute(gt_ObjectiveSurviveUpdate, true, false);
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_MakeRound3ScoreDialog, true, false);
        return true;
    }
    else {
    }
    if ((UnitGroupCount(gv_playerUnits, c_unitCountAlive) == 0) && (UnitGetOwner(EventUnit()) == gv_pLAYER_USER)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_FinalRound1, false);
        TriggerEnable(gt_FinalRound2, false);
        TriggerEnable(gt_FinalRound3, false);
        TriggerExecute(gt_FinishDefeatUnitsDead, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinalRound3_Init () {
    gt_FinalRound3 = TriggerCreate("gt_FinalRound3_Func");
    TriggerEnable(gt_FinalRound3, false);
    TriggerAddEventUnitDied(gt_FinalRound3, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Finish Victory
//--------------------------------------------------------------------------------------------------
bool gt_FinishVictory_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_allRoundsCompleted = true;
    gf_SaveScores();
    UnitPauseAll(true);
    TriggerStop(gt_SpawnRound1);
    TriggerStop(gt_SpawnRound2);
    TriggerStop(gt_SpawnRound3);
    TriggerQueueClear(c_triggerQueueRetain);
    TriggerExecute(gt_ObjectiveSurviveComplete, true, false);
    UISetChallengeCompleted(PlayerGroupSingle(gv_pLAYER_USER), libChal_gf_ChallengeName(libChal_gf_CurrentChallengeType()), true);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_DialogScoreShow, true, false);
    TriggerEnable(gt_FinishDefeatSpireAfterVictory, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinishVictory_Init () {
    gt_FinishVictory = TriggerCreate("gt_FinishVictory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Finish Defeat Spire Before Victory
//--------------------------------------------------------------------------------------------------
bool gt_FinishDefeatSpireBeforeVictory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Spire"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_FinalRound1, false);
    TriggerEnable(gt_FinalRound2, false);
    TriggerEnable(gt_FinalRound3, false);
    gv_allRoundsCompleted = false;
    gv_spireDead = true;
    Wait(2.0, c_timeReal);
    if ((gv_roundCount == 0)) {
        libChal_gf_CreateChallengeWaveSuccessPanel(1, StringExternal("Param/Value/867CAA72"), StringExternal("Param/Value/B71C425C"), StringExternal("Param/Value/346217BF"), null, gt_WaitthengobackVictoryScreen);
        libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        gv_retryCountRound01 = (gv_retryCountRound01 + 1);
    }
    else {
    }
    if ((gv_roundCount == 1)) {
        libChal_gf_CreateChallengeWaveSuccessPanel(1, StringExternal("Param/Value/AA9782D8"), StringExternal("Param/Value/98D1AC21"), StringExternal("Param/Value/D1525EDE"), null, gt_WaitthengobackVictoryScreen);
        libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        gv_retryCountRound02 = (gv_retryCountRound02 + 1);
    }
    else {
    }
    if ((gv_roundCount == 2)) {
        libChal_gf_CreateChallengeWaveSuccessPanel(1, StringExternal("Param/Value/3518E36E"), StringExternal("Param/Value/5004DC69"), StringExternal("Param/Value/4C744EE3"), null, gt_WaitthengobackVictoryScreen);
        libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        gv_retryCountRound03 = (gv_retryCountRound03 + 1);
    }
    else {
    }
    UnitPauseAll(true);
    TriggerStop(gt_SpawnRound1);
    TriggerStop(gt_SpawnRound2);
    TriggerStop(gt_SpawnRound3);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRetain);
    TriggerExecute(gt_ObjectiveSurviveFailed, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinishDefeatSpireBeforeVictory_Init () {
    gt_FinishDefeatSpireBeforeVictory = TriggerCreate("gt_FinishDefeatSpireBeforeVictory_Func");
    TriggerEnable(gt_FinishDefeatSpireBeforeVictory, false);
    TriggerAddEventUnitDied(gt_FinishDefeatSpireBeforeVictory, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Finish Defeat Spire After Victory
//--------------------------------------------------------------------------------------------------
bool gt_FinishDefeatSpireAfterVictory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Spire"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_FinalRound1, false);
    TriggerEnable(gt_FinalRound2, false);
    TriggerEnable(gt_FinalRound3, false);
    gv_spireDead = true;
    Wait(2.0, c_timeReal);
    if ((gv_roundCount == 0)) {
        gv_lostUnitsRound1 = gv_lostUnitsRound1Best;
        libChal_gf_CreateChallengeWaveSuccessPanel(1, StringExternal("Param/Value/D41A79CB"), StringExternal("Param/Value/EB2C091C"), StringExternal("Param/Value/C72BF1DD"), null, gt_WaitthengobackVictoryScreen);
        libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
    }
    else {
    }
    if ((gv_roundCount == 1)) {
        gv_lostUnitsRound2 = gv_lostUnitsRound2Best;
        libChal_gf_CreateChallengeWaveSuccessPanel(1, StringExternal("Param/Value/D4993BEC"), StringExternal("Param/Value/1F3B5498"), StringExternal("Param/Value/CC6B0736"), null, gt_WaitthengobackVictoryScreen);
        libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
    }
    else {
    }
    if ((gv_roundCount == 2)) {
        gv_lostUnitsRound3 = gv_lostUnitsRound3Best;
        libChal_gf_CreateChallengeWaveSuccessPanel(1, StringExternal("Param/Value/6D049850"), StringExternal("Param/Value/72CD1C45"), StringExternal("Param/Value/CA788C0D"), null, gt_WaitthengobackVictoryScreen);
        libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
    }
    else {
    }
    TriggerExecute(gt_ObjectiveSurviveUpdate, true, false);
    UnitPauseAll(true);
    TriggerStop(gt_SpawnRound1);
    TriggerStop(gt_SpawnRound2);
    TriggerStop(gt_SpawnRound3);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRetain);
    TriggerExecute(gt_ObjectiveSurviveFailed, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinishDefeatSpireAfterVictory_Init () {
    gt_FinishDefeatSpireAfterVictory = TriggerCreate("gt_FinishDefeatSpireAfterVictory_Func");
    TriggerEnable(gt_FinishDefeatSpireAfterVictory, false);
    TriggerAddEventUnitDied(gt_FinishDefeatSpireAfterVictory, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Finish Defeat Units Dead
//--------------------------------------------------------------------------------------------------
bool gt_FinishDefeatUnitsDead_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitPauseAll(true);
    TriggerStop(gt_SpawnRound1);
    TriggerStop(gt_SpawnRound2);
    TriggerStop(gt_SpawnRound3);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRetain);
    Wait(2.0, c_timeReal);
    libChal_gf_DisplayChallengeMessage(PlayerGroupAll(), 0, StringExternal("Param/Value/BFB48B1F"), 0);
    Wait(libChal_gv_challengeObjectiveDelay, c_timeReal);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_ObjectiveSurviveFailed, true, false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_DialogScoreShow, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinishDefeatUnitsDead_Init () {
    gt_FinishDefeatUnitsDead = TriggerCreate("gt_FinishDefeatUnitsDead_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Counters Q 
//--------------------------------------------------------------------------------------------------
bool gt_TipCountersQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/F1BE80BE"), 0), StringExternal("Param/Value/7912E567"), StringExternal("Param/Value/95410D87"), "Assets\\Textures\\btn-tips-counter.dds");
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipCountersQ_Init () {
    gt_TipCountersQ = TriggerCreate("gt_TipCountersQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    libNtve_gf_GlobalCinematicSetting(true);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_ResetPlayField, true, false);
    GameTimeOfDayPause(true);
    PlayerSetState(gv_pLAYER_USER, c_playerStateXPGain, false);
    UnitPauseAll(false);
    UnitGroupLoopBegin(gv_playerUnitsRound3);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_playerUnitsRound2);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_playerUnitsRound1);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_PlayerUnitsRound1, true, false);
    gv_introPlayerUnitsSpawned = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(2), 0.0, -1, 10, true);
    gf_SpawnEnemyUnitsForArea1(5, "Colossus", RegionFromId(2));
    gf_SpawnEnemyUnitsForArea2(1, "Immortal", RegionFromId(4));
    gf_SpawnEnemyUnitsForArea3(8, "VoidRay", RegionFromId(5));
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_COMPUTER1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_MakeUnitFacePoint(UnitLastCreated(), PointFromId(38), 0.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_introCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(3), (SoundLengthSync(SoundLink("ChallengescombinedQueen00021", 0)) + SoundLengthSync(SoundLink("ChallengescombinedQueen00022", 0))), -1, 10, true);
    // Transmission - SoundLink("ChallengescombinedQueen00021", 0)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(2), SoundLink("ChallengescombinedQueen00021", 0), 0.0, c_transmissionDurationAdd, true);
    // Transmission - SoundLink("ChallengescombinedQueen00022", 0)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(2), SoundLink("ChallengescombinedQueen00022", 0), 0.0, c_transmissionDurationAdd, true);
    TriggerExecute(gt_IntroSpireCameras, true, false);
    // Transmission - SoundLink("ChallengescombinedQueen00023", 0)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(2), SoundLink("ChallengescombinedQueen00023", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(8), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(49), SoundLengthSync(SoundLink("ChallengescombinedQueen00024", 0)), -1, 10, true);
    // Transmission - SoundLink("ChallengescombinedQueen00024", 0)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(2), SoundLink("ChallengescombinedQueen00024", 0), 0.0, c_transmissionDurationAdd, true);
    gv_introCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Spire Cameras
//--------------------------------------------------------------------------------------------------
bool gt_IntroSpireCameras_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_totalTime;
    fixed lv_cameraTime;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_totalTime = (0.0 + SoundLengthSync(SoundLink("ChallengescombinedQueen00023", 0)));
    lv_cameraTime = (lv_totalTime / 3.0);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(5), 0.0, -1, 10, true);
    Wait(lv_cameraTime, c_timeReal);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(6), 0.0, -1, 10, true);
    Wait(lv_cameraTime, c_timeReal);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(7), 0.0, -1, 10, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSpireCameras_Init () {
    gt_IntroSpireCameras = TriggerCreate("gt_IntroSpireCameras_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_introCinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    TriggerStop(gt_IntroSpireCameras);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_COMPUTER1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_USER, c_playerStateXPGain, true);
    VisExploreArea(gv_pLAYER_USER, RegionEntireMap(), false, false);
    VisRevealerCreate(gv_pLAYER_USER, RegionFromId(12));
    VisRevealerCreate(gv_pLAYER_USER, RegionFromId(16));
    VisRevealerCreate(gv_pLAYER_USER, RegionFromId(17));
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(49), 0.0, -1, 10, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.0);
    libNtve_gf_GlobalCinematicSetting(false);
    UISetMode(PlayerGroupAll(), c_uiModeConsole, 1.0);
    GameSetSpeedLocked(true);
    GameSetSpeedValue(c_gameSpeedNormal);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_SpawnRound1, true, false);
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringExternal("Param/Value/E760DE32"), null, PointFromId(1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Players_Init();
    gt_Init01aTechnology_Init();
    gt_Init02Units_Init();
    gt_Init03Music_Init();
    gt_Init04Environment_Init();
    gt_Init05Hints_Init();
    gt_Init06MapSettings_Init();
    gt_ButtonChosenLeaveGame_Init();
    gt_ButtonChosenRetryRound1_Init();
    gt_ButtonChosenRetryRound2_Init();
    gt_ButtonChosenRetryRound3_Init();
    gt_DialogScoreShow_Init();
    gt_ResetPlayField_Init();
    gt_SpawnRound1_Init();
    gt_SpawnRound2_Init();
    gt_SpawnRound3_Init();
    gt_PlayerUnitsRound1_Init();
    gt_PlayerUnitsRound2_Init();
    gt_PlayerUnitsRound3_Init();
    gt_StartAI_Init();
    gt_WarnPlayerAttack_Init();
    gt_SpawnedPlayerUnits_Init();
    gt_SpiresInvulnerable_Init();
    gt_SpiresVulnerable_Init();
    gt_UnitDies_Init();
    gt_MakeRound1ScoreDialog_Init();
    gt_WaittoStartRound2_Init();
    gt_MakeRound2ScoreDialog_Init();
    gt_WaittoStartRound3_Init();
    gt_MakeRound3ScoreDialog_Init();
    gt_WaittogotoVictory_Init();
    gt_WaitthengobackVictoryScreen_Init();
    gt_CheckforCheating_Init();
    gt_AddReadyButtonQ_Init();
    gt_ReadyPressed_Init();
    gt_RemoveText_Init();
    gt_ObjectiveSurviveCreate_Init();
    gt_ObjectiveSurviveUpdate_Init();
    gt_ObjectiveSurviveProtect_Init();
    gt_ObjectiveSurviveDiscoverQ_Init();
    gt_ObjectiveSurviveComplete_Init();
    gt_ObjectiveSurviveFailed_Init();
    gt_FinalRound1_Init();
    gt_FinalRound2_Init();
    gt_FinalRound3_Init();
    gt_FinishVictory_Init();
    gt_FinishDefeatSpireBeforeVictory_Init();
    gt_FinishDefeatSpireAfterVictory_Init();
    gt_FinishDefeatUnitsDead_Init();
    gt_TipCountersQ_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroSpireCameras_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
