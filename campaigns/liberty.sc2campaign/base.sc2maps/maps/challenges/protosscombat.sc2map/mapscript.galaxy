//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Path of Ascension
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "LibChal"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libChal_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_USER = 1;
const int gv_pLAYER_COMPUTER1 = 2;
const int gv_pLAYER_COMPUTER2 = 4;
const int gv_pLAYER_BOARD = 6;
const int gv_readyButton = 1;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
region gv_playableArea;
unitgroup gv_playerUnits;
unitgroup gv_playerUnitsRound1;
unitgroup gv_playerUnitsRound2;
unitgroup gv_playerUnitsRound3;
unitgroup gv_playerUnitsArea1;
unitgroup gv_playerUnitsArea2;
unitgroup gv_playerUnitsArea3;
unitgroup gv_repulserFields;
unitgroup gv_attackers;
unit gv_pylon01;
unit gv_pylon02;
unit gv_pylon03;
bool gv_pylonDead;
bool gv_round2Played;
bool gv_round3Played;
bool gv_ready;
int gv_roundCount;
bool gv_allRoundsCompleted;
text gv_ratingText;
int gv_winningScoreSilver;
int gv_winningScoreGold;
revealer gv_revealer;
int gv_lostUnitsRound1;
int gv_lostUnitsRound2;
int gv_lostUnitsRound3;
int gv_lostUnitsTotalPrevious;
int gv_lostUnitsRound1Best;
int gv_lostUnitsRound2Best;
int gv_lostUnitsRound3Best;
unit gv_shield01;
unit gv_shield02;
unit gv_shield03;
bool gv_hallacinationsOff;
unitgroup gv_enemyAttackersA;
unitgroup gv_enemyAttackersB;
unitgroup gv_enemyAttackersC;
unitgroup gv_enemyAttackersD;
int gv_retryCountRound01;
int gv_retryCountRound02;
int gv_retryCountRound03;
text gv_ratingTextBronze;
text gv_ratingTextSilver;
text gv_ratingTextGold;
int gv_buildingPing01;
int gv_buildingPing02;
int gv_buildingPing03;
int gv_enemyPing01;
int gv_enemyPing02;
int gv_enemyPing03;
int gv_board;
timer gv_textTimer;
bool gv_cheatUsed;
int gv_objectiveSurvive01;
int gv_objectiveSurvive02;
int gv_objectiveSurvive03;
bool gv_introCinematicCompleted;

void InitGlobals () {
    gv_playerUnits = UnitGroupEmpty();
    gv_playerUnitsRound1 = UnitGroupEmpty();
    gv_playerUnitsRound2 = UnitGroupEmpty();
    gv_playerUnitsRound3 = UnitGroupEmpty();
    gv_playerUnitsArea1 = UnitGroupEmpty();
    gv_playerUnitsArea2 = UnitGroupEmpty();
    gv_playerUnitsArea3 = UnitGroupEmpty();
    gv_repulserFields = UnitGroupEmpty();
    gv_attackers = UnitGroupEmpty();
    gv_winningScoreSilver = 20;
    gv_winningScoreGold = 10;
    gv_enemyAttackersA = UnitGroupEmpty();
    gv_enemyAttackersB = UnitGroupEmpty();
    gv_enemyAttackersC = UnitGroupEmpty();
    gv_enemyAttackersD = UnitGroupEmpty();
    gv_ratingTextBronze = StringExternal("Param/Value/3DE1D6FD");
    gv_ratingTextSilver = StringExternal("Param/Value/4366ADDC");
    gv_ratingTextGold = StringExternal("Param/Value/5AEFC71C");
    gv_buildingPing01 = c_invalidPingId;
    gv_buildingPing02 = c_invalidPingId;
    gv_buildingPing03 = c_invalidPingId;
    gv_enemyPing01 = c_invalidPingId;
    gv_enemyPing02 = c_invalidPingId;
    gv_enemyPing03 = c_invalidPingId;
    gv_board = c_boardNone;
    gv_textTimer = TimerCreate();
    gv_objectiveSurvive01 = c_invalidObjectiveId;
    gv_objectiveSurvive02 = c_invalidObjectiveId;
    gv_objectiveSurvive03 = c_invalidObjectiveId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_ClearAlertsFunction ();
void gf_UnpauseShowEnemies (unitgroup lp_showGroup, unitgroup lp_hideGroup1, unitgroup lp_hideGroup2);
void gf_SpawnEnemyUnitsForArea1 (int lp_qty, string lp_type, region lp_location);
void gf_SpawnEnemyUnitsForArea2 (int lp_qty, string lp_type, region lp_location);
void gf_SpawnEnemyUnitsForArea2a (int lp_qty, string lp_type, region lp_location);
void gf_SpawnEnemyUnitsForArea3 (int lp_qty, string lp_type, region lp_location);
void gf_HidePauseGetReadyPlayer (region lp_whichArea, unitgroup lp_showGroup);
void gf_SpawnPlayerUnitsForRound1 (int lp_qty, string lp_type, region lp_location);
void gf_SpawnPlayerUnitsForRound2 (int lp_qty, string lp_type, region lp_location);
void gf_SpawnPlayerUnitsForRound3 (int lp_qty, string lp_type, region lp_location);
void gf_TextTag (text lp_roundText);
void gf_Achievements ();
int gf_TotalScore ();
void gf_SaveScores ();
void gf_UpdateScoreUI (int lp_score);
void gf_UNUSEDTEXTSTRINGS ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Players;
trigger gt_Init01aTechnology;
trigger gt_Init02Units;
trigger gt_Init03Music;
trigger gt_Init04Environment;
trigger gt_Init05Hints;
trigger gt_Init06MapSettings;
trigger gt_ButtonChosenLeaveGame;
trigger gt_ButtonChosenRetryRound1;
trigger gt_ButtonChosenRetryRound2;
trigger gt_ButtonChosenRetryRound3;
trigger gt_DialogScoreShow;
trigger gt_ResetPlayField;
trigger gt_SpawnRound1;
trigger gt_SpawnRound2;
trigger gt_SpawnRound3;
trigger gt_PlayerUnitsRound1;
trigger gt_PlayerUnitsRound2;
trigger gt_PlayerUnitsRound3;
trigger gt_VikingsTransform;
trigger gt_TurnAllianceSettingOn;
trigger gt_TurnAllianceSettingOff;
trigger gt_StartAI;
trigger gt_WarnPlayerAttack;
trigger gt_Interceptors;
trigger gt_PylonsInvulnerable;
trigger gt_PylonsVulnerable;
trigger gt_UnitDies;
trigger gt_MakeRound1ScoreDialog;
trigger gt_WaittoStartRound2;
trigger gt_MakeRound2ScoreDialog;
trigger gt_WaittoStartRound3;
trigger gt_MakeRound3ScoreDialog;
trigger gt_WaittogotoVictory;
trigger gt_WaitthengobacktoVictoryScreen;
trigger gt_CheckforCheating;
trigger gt_AddReadyButtonQ;
trigger gt_ReadyPressed;
trigger gt_RemoveText;
trigger gt_ObjectiveSurviveCreate;
trigger gt_ObjectiveSurviveUpdate;
trigger gt_ObjectiveSurviveProtect;
trigger gt_ObjectiveSurviveDiscoverQ;
trigger gt_ObjectiveSurviveComplete;
trigger gt_ObjectiveSurviveFailed;
trigger gt_FinalRound1;
trigger gt_FinalRound2;
trigger gt_FinalRound3;
trigger gt_FinishVictory;
trigger gt_FinishDefeatPylonBeforeVictory;
trigger gt_FinishDefeatPylonAfterVictory;
trigger gt_FinishDefeatUnitsDead;
trigger gt_TipCountersQ;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroPylonPan;
trigger gt_IntroCleanup;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_ClearAlertsFunction () {
    // Implementation
    Wait(3.0, c_timeGame);
    UIAlertClear(gv_pLAYER_USER);
}

void gf_UnpauseShowEnemies (unitgroup lp_showGroup, unitgroup lp_hideGroup1, unitgroup lp_hideGroup2) {
    // Implementation
    UnitGroupLoopBegin(lp_showGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(lp_hideGroup1);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(lp_hideGroup2);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
}

void gf_SpawnEnemyUnitsForArea1 (int lp_qty, string lp_type, region lp_location) {
    int auto11B9ECA8_n;
    int auto11B9ECA8_i;

    // Implementation
    auto11B9ECA8_n = lp_qty;
    for (auto11B9ECA8_i = 1; auto11B9ECA8_i <= auto11B9ECA8_n; auto11B9ECA8_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, lp_type, 0, gv_pLAYER_COMPUTER1, RegionGetCenter(lp_location));
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        UnitGroupAdd(gv_attackers, UnitLastCreated());
        UnitGroupAdd(gv_enemyAttackersA, UnitLastCreated());
        UnitBehaviorAddPlayer(UnitLastCreated(), "Untargetable", gv_pLAYER_COMPUTER1, 1);
        UnitBehaviorAddPlayer(UnitLastCreated(), "DamageTakenNone", gv_pLAYER_COMPUTER1, 1);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
    }
}

void gf_SpawnEnemyUnitsForArea2 (int lp_qty, string lp_type, region lp_location) {
    int auto1C232366_n;
    int auto1C232366_i;

    // Implementation
    auto1C232366_n = lp_qty;
    for (auto1C232366_i = 1; auto1C232366_i <= auto1C232366_n; auto1C232366_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, lp_type, 0, gv_pLAYER_COMPUTER1, RegionGetCenter(lp_location));
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        UnitGroupAdd(gv_attackers, UnitLastCreated());
        UnitGroupAdd(gv_enemyAttackersB, UnitLastCreated());
        UnitBehaviorAddPlayer(UnitLastCreated(), "Untargetable", gv_pLAYER_COMPUTER1, 1);
        UnitBehaviorAddPlayer(UnitLastCreated(), "DamageTakenNone", gv_pLAYER_COMPUTER1, 1);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
    }
}

void gf_SpawnEnemyUnitsForArea2a (int lp_qty, string lp_type, region lp_location) {
    int autoED83ABE4_n;
    int autoED83ABE4_i;

    // Implementation
    autoED83ABE4_n = lp_qty;
    for (autoED83ABE4_i = 1; autoED83ABE4_i <= autoED83ABE4_n; autoED83ABE4_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, lp_type, 0, gv_pLAYER_COMPUTER2, RegionGetCenter(lp_location));
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        UnitGroupAdd(gv_attackers, UnitLastCreated());
        UnitGroupAdd(gv_enemyAttackersD, UnitLastCreated());
        AIAttackWaveUseUnit(gv_pLAYER_COMPUTER2, UnitLastCreated());
        UnitBehaviorAddPlayer(UnitLastCreated(), "Untargetable", gv_pLAYER_COMPUTER1, 1);
        UnitBehaviorAddPlayer(UnitLastCreated(), "DamageTakenNone", gv_pLAYER_COMPUTER1, 1);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
    }
}

void gf_SpawnEnemyUnitsForArea3 (int lp_qty, string lp_type, region lp_location) {
    int autoA87659C5_n;
    int autoA87659C5_i;

    // Implementation
    autoA87659C5_n = lp_qty;
    for (autoA87659C5_i = 1; autoA87659C5_i <= autoA87659C5_n; autoA87659C5_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, lp_type, 0, gv_pLAYER_COMPUTER1, RegionGetCenter(lp_location));
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        UnitGroupAdd(gv_attackers, UnitLastCreated());
        UnitGroupAdd(gv_enemyAttackersC, UnitLastCreated());
        UnitBehaviorAddPlayer(UnitLastCreated(), "Untargetable", gv_pLAYER_COMPUTER1, 1);
        UnitBehaviorAddPlayer(UnitLastCreated(), "DamageTakenNone", gv_pLAYER_COMPUTER1, 1);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
    }
}

void gf_HidePauseGetReadyPlayer (region lp_whichArea, unitgroup lp_showGroup) {
    // Implementation
    UnitClearSelection(gv_pLAYER_USER);
    UnitGroupLoopBegin(UnitGroupFilterRegion(gv_playerUnits, RegionEntireMap(), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(lp_showGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSelect(UnitGroupLoopCurrent(), gv_pLAYER_USER, true);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "Untargetable", 1);
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "DamageTakenNone", 1);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHallucination - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFilterRegion(gv_repulserFields, RegionEntireMap(), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFilterRegion(gv_attackers, RegionEntireMap(), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorRemovePlayer(UnitGroupLoopCurrent(), "Untargetable", gv_pLAYER_COMPUTER1, 1);
        UnitBehaviorRemovePlayer(UnitGroupLoopCurrent(), "DamageTakenNone", gv_pLAYER_COMPUTER1, 1);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
    }
    UnitGroupLoopEnd();
}

void gf_SpawnPlayerUnitsForRound1 (int lp_qty, string lp_type, region lp_location) {
    int autoCADDB456_n;
    int autoCADDB456_i;

    // Implementation
    autoCADDB456_n = lp_qty;
    for (autoCADDB456_i = 1; autoCADDB456_i <= autoCADDB456_n; autoCADDB456_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, lp_type, 0, gv_pLAYER_USER, RegionGetCenter(lp_location));
        UnitGroupAdd(gv_playerUnits, UnitLastCreated());
        UnitGroupAdd(gv_playerUnitsRound1, UnitLastCreated());
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
        UnitBehaviorAddPlayer(UnitLastCreated(), "Untargetable", gv_pLAYER_USER, 1);
        UnitBehaviorAddPlayer(UnitLastCreated(), "DamageTakenNone", gv_pLAYER_USER, 1);
    }
}

void gf_SpawnPlayerUnitsForRound2 (int lp_qty, string lp_type, region lp_location) {
    int auto73989F48_n;
    int auto73989F48_i;

    // Implementation
    auto73989F48_n = lp_qty;
    for (auto73989F48_i = 1; auto73989F48_i <= auto73989F48_n; auto73989F48_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, lp_type, 0, gv_pLAYER_USER, RegionGetCenter(lp_location));
        UnitGroupAdd(gv_playerUnits, UnitLastCreated());
        UnitGroupAdd(gv_playerUnitsRound2, UnitLastCreated());
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
        UnitBehaviorAddPlayer(UnitLastCreated(), "Untargetable", gv_pLAYER_USER, 1);
        UnitBehaviorAddPlayer(UnitLastCreated(), "DamageTakenNone", gv_pLAYER_USER, 1);
        if ((UnitGetType(UnitLastCreated()) == "Carrier")) {
            UnitMagazineArm(UnitLastCreated(), AbilityCommand("CarrierHangar", 0), 4);
        }
        else {
        }
    }
}

void gf_SpawnPlayerUnitsForRound3 (int lp_qty, string lp_type, region lp_location) {
    int auto179ACAFD_n;
    int auto179ACAFD_i;

    // Implementation
    auto179ACAFD_n = lp_qty;
    for (auto179ACAFD_i = 1; auto179ACAFD_i <= auto179ACAFD_n; auto179ACAFD_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, lp_type, 0, gv_pLAYER_USER, RegionGetCenter(lp_location));
        UnitGroupAdd(gv_playerUnits, UnitLastCreated());
        UnitGroupAdd(gv_playerUnitsRound3, UnitLastCreated());
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
        UnitBehaviorAddPlayer(UnitLastCreated(), "Untargetable", gv_pLAYER_USER, 1);
        UnitBehaviorAddPlayer(UnitLastCreated(), "DamageTakenNone", gv_pLAYER_USER, 1);
    }
}

void gf_TextTag (text lp_roundText) {
    // Implementation
    PingSetVisible(gv_buildingPing01, true);
    PingSetVisible(gv_buildingPing02, true);
    PingSetVisible(gv_buildingPing03, true);
    PingSetVisible(gv_enemyPing01, true);
    PingSetVisible(gv_enemyPing02, true);
    PingSetVisible(gv_enemyPing03, true);
    TextTagCreate(lp_roundText, 60, CameraGetTarget(gv_pLAYER_USER), 2.0, true, false, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 94.90, 94.90));
    TextTagSetBackgroundBorderSize(TextTagLastCreated(), 2.0, 2.0);
    Wait(3.0, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
}

void gf_Achievements () {
    // Implementation
    gv_ratingText = (StringExternal("Param/Value/ADCB5C79") + gv_ratingTextBronze);
    AchievementAward(gv_pLAYER_USER, "Challenge_ProtossCombat_Basic");
    if ((gf_TotalScore() <= gv_winningScoreSilver)) {
        gv_ratingText = (StringExternal("Param/Value/40666BDC") + gv_ratingTextSilver);
        AchievementAward(gv_pLAYER_USER, "Challenge_ProtossCombat_Mastery");
    }
    else {
    }
    if ((gf_TotalScore() <= gv_winningScoreGold)) {
        gv_ratingText = (StringExternal("Param/Value/59DF4770") + gv_ratingTextGold);
        AchievementAward(gv_pLAYER_USER, "Challenge_ProtossCombat_Dominance");
    }
    else {
    }
}

int gf_TotalScore () {
    // Implementation
    return (gv_lostUnitsRound1 + gv_lostUnitsRound2 + gv_lostUnitsRound3);
}

void gf_SaveScores () {
    // Implementation
    if ((gv_cheatUsed == false)) {
        if ((libChal_gf_ChallengeScoreFromBank(libChal_gf_CurrentChallengeType()) <= -1)) {
            gf_UpdateScoreUI(gf_TotalScore());
            libChal_gf_SaveChallengeScoreToBank(libChal_gf_CurrentChallengeType(), gf_TotalScore());
        }
        else {
            if ((libChal_gf_ChallengeScoreFromBank(libChal_gf_CurrentChallengeType()) >= gf_TotalScore())) {
                gf_UpdateScoreUI(gf_TotalScore());
                libChal_gf_SaveChallengeScoreToBank(libChal_gf_CurrentChallengeType(), gf_TotalScore());
            }
            else {
                gf_UpdateScoreUI(libChal_gf_ChallengeScoreFromBank(libChal_gf_CurrentChallengeType()));
            }
        }
    }
    else {
    }
}

void gf_UpdateScoreUI (int lp_score) {
    // Implementation
    UISetChallengeScoreText(PlayerGroupAll(), "ProtossCombat", (StringExternal("Param/Value/3266C739") + StringExternal("Param/Value/ABAE6AD4") + IntToText(lp_score) + StringExternal("Param/Value/89936C55")));
}

void gf_UNUSEDTEXTSTRINGS () {
    // Implementation
    UISetChallengeScoreText(PlayerGroupAll(), "ProtossCombat", (StringExternal("Param/Value/4B5B04A4") + StringExternal("Param/Value/5CAC8E73") + IntToText(0) + StringExternal("Param/Value/B0A6725C")));
    UISetChallengeScoreText(PlayerGroupAll(), "ProtossCombat", (StringExternal("Param/Value/BAB772FC") + StringExternal("Param/Value/C20ED8D3") + IntToText(0) + StringExternal("Param/Value/88770290")));
    UISetChallengeScoreText(PlayerGroupAll(), "ProtossCombat", (StringExternal("Param/Value/1B1C77B5") + StringExternal("Param/Value/2F97A659") + IntToText(0) + StringExternal("Param/Value/6BC7A30F")));
    UISetChallengeScoreText(PlayerGroupAll(), "ProtossCombat", (StringExternal("Param/Value/CE9D4008") + StringExternal("Param/Value/668A4FCE") + IntToText(0) + StringExternal("Param/Value/60D16E89")));
    UISetChallengeScoreText(PlayerGroupAll(), "ProtossCombat", (StringExternal("Param/Value/D20E0021") + StringExternal("Param/Value/0405E3E5") + IntToText(0) + StringExternal("Param/Value/EB0944A0")));
    UISetChallengeScoreText(PlayerGroupAll(), "ProtossCombat", (StringExternal("Param/Value/ED8C7E9D") + StringExternal("Param/Value/523A507A") + IntToText(0) + StringExternal("Param/Value/4417DC67")));
    UISetChallengeScoreText(PlayerGroupAll(), "ProtossCombat", (StringExternal("Param/Value/1467AB8F") + StringExternal("Param/Value/564BB812") + IntToText(0) + StringExternal("Param/Value/95EE8628")));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UISetChallengeMode(PlayerGroupAll(), true);
    libChal_gf_LoadChallengeData(libChal_ge_ChallengeType_ProtossCombat);
    GameCheatAllow(c_gameCheatVictory, false);
    TriggerExecute(gt_Init01Players, true, false);
    TriggerExecute(gt_Init02Units, true, false);
    TriggerExecute(gt_Init03Music, true, false);
    TriggerExecute(gt_Init04Environment, true, false);
    TriggerExecute(gt_Init05Hints, true, false);
    TriggerExecute(gt_Init06MapSettings, true, false);
    TriggerExecute(gt_IntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init01Players_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Init01aTechnology, true, true);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER2, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER2, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_BOARD, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_COMPUTER1, gv_pLAYER_COMPUTER2, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_COMPUTER1, gv_pLAYER_BOARD, libNtve_ge_AllianceSetting_Ally);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UIUnitColorStyleOverride(PlayerGroupAll(), c_unitColorStyleNormal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Players_Init () {
    gt_Init01Players = TriggerCreate("gt_Init01Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01a Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01aTechnology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeRestrictionsEnable(gv_pLAYER_USER, true);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("ForceField", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("TemporalRift", 0), true);
    TechTreeUpgradeAllow(gv_pLAYER_USER, "PsiStormTech", true);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "PsiStormTech", 1);
    TechTreeUpgradeAllow(gv_pLAYER_USER, "haltech", true);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "haltech", 1);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("HallucinationArchon", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("HallucinationColossus", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("HallucinationHighTemplar", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("HallucinationImmortal", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("HallucinationPhoenix", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("HallucinationProbe", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("HallucinationStalker", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("HallucinationVoidRay", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("HallucinationWarpPrism", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("HallucinationZealot", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("ArchonWarp", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("PsiStorm", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("Blink", 0), true);
    TechTreeBehaviorAllow(gv_pLAYER_USER, "Charging", true);
    TechTreeBehaviorAllow(gv_pLAYER_USER, "Charging", true);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "Charge", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "BlinkTech", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "VoidRaySpeedUpgrade", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "ExtendedThermalLance", 1);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("Mergeable", 0), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01aTechnology_Init () {
    gt_Init01aTechnology = TriggerCreate("gt_Init01aTechnology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init02Units_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Units_Init () {
    gt_Init02Units = TriggerCreate("gt_Init02Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init03Music_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Music_Init () {
    gt_Init03Music = TriggerCreate("gt_Init03Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init04Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_playableArea = RegionPlayableMap();
    PingCreate(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(13)), ColorWithAlpha(0.78, 26.27, 4.31, 0.00), 0.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/D9B721B1"));
    gv_buildingPing01 = PingLastCreated();
    PingCreate(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(14)), ColorWithAlpha(0.78, 26.27, 4.31, 0.00), 0.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/2D1DD72D"));
    gv_buildingPing02 = PingLastCreated();
    PingCreate(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(15)), ColorWithAlpha(0.78, 26.27, 4.31, 0.00), 0.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/85A54D1E"));
    gv_buildingPing03 = PingLastCreated();
    PingCreate(PlayerGroupAll(), "PingWarning", RegionGetCenter(RegionFromId(2)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/DD581C7A"));
    gv_enemyPing01 = PingLastCreated();
    PingCreate(PlayerGroupAll(), "PingWarning", RegionGetCenter(RegionFromId(4)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/D6F8BB58"));
    gv_enemyPing02 = PingLastCreated();
    PingCreate(PlayerGroupAll(), "PingWarning", RegionGetCenter(RegionFromId(5)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/10E8D776"));
    gv_enemyPing03 = PingLastCreated();
    PingSetVisible(gv_buildingPing01, false);
    PingSetVisible(gv_buildingPing02, false);
    PingSetVisible(gv_buildingPing03, false);
    PingSetVisible(gv_enemyPing01, false);
    PingSetVisible(gv_enemyPing02, false);
    PingSetVisible(gv_enemyPing03, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Environment_Init () {
    gt_Init04Environment = TriggerCreate("gt_Init04Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Hints
//--------------------------------------------------------------------------------------------------
bool gt_Init05Hints_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    HelpPanelAddHint(PlayerGroupAll(), StringExternal("Param/Value/4C09A95C"), StringExternal("Param/Value/62AC6611"), "Assets\\Textures\\btn-unit-terran-battlecruiser.dds");
    HelpPanelAddHint(PlayerGroupAll(), StringExternal("Param/Value/5C4A6EDE"), StringExternal("Param/Value/8880C037"), "Assets\\Textures\\btn-unit-terran-siegetank.dds");
    HelpPanelAddHint(PlayerGroupAll(), StringExternal("Param/Value/0358000E"), StringExternal("Param/Value/42C8D80E"), "Assets\\Textures\\btn-unit-terran-marine.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Hints_Init () {
    gt_Init05Hints = TriggerCreate("gt_Init05Hints_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Map Settings
//--------------------------------------------------------------------------------------------------
bool gt_Init06MapSettings_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUnitHelpDefault(gv_pLAYER_USER, false);
    TechTreeUnitHelp(gv_pLAYER_USER, "Marine", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Marauder", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Reaper", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Hellion", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Battlecruiser", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "VikingAssault", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "VikingFighter", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "SiegeTankSieged", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "SiegeTank", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Thor", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Zealot", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Archon", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Sentry", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Stalker", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "HighTemplar", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Immortal", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Colossus", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Phoenix", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Carrier", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "VoidRay", true);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Prot", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Zerg", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Terr", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06MapSettings_Init () {
    gt_Init06MapSettings = TriggerCreate("gt_Init06MapSettings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Chosen Leave Game
//--------------------------------------------------------------------------------------------------
bool gt_ButtonChosenLeaveGame_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameOver(gv_pLAYER_USER, c_gameOverDefeat, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonChosenLeaveGame_Init () {
    gt_ButtonChosenLeaveGame = TriggerCreate("gt_ButtonChosenLeaveGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Chosen Retry Round 1
//--------------------------------------------------------------------------------------------------
bool gt_ButtonChosenRetryRound1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_SpawnRound1, true, false);
    ObjectiveShow(gv_objectiveSurvive01, PlayerGroupAll(), true);
    ObjectiveShow(gv_objectiveSurvive02, PlayerGroupAll(), true);
    ObjectiveShow(gv_objectiveSurvive03, PlayerGroupAll(), true);
    ObjectiveSetState(gv_objectiveSurvive01, c_objectiveStateActive);
    if ((gf_TotalScore() > gv_winningScoreSilver)) {
        ObjectiveSetState(gv_objectiveSurvive02, c_objectiveStateFailed);
    }
    else {
    }
    if ((gf_TotalScore() > gv_winningScoreGold)) {
        ObjectiveSetState(gv_objectiveSurvive03, c_objectiveStateFailed);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonChosenRetryRound1_Init () {
    gt_ButtonChosenRetryRound1 = TriggerCreate("gt_ButtonChosenRetryRound1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Chosen Retry Round 2
//--------------------------------------------------------------------------------------------------
bool gt_ButtonChosenRetryRound2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_SpawnRound2, true, false);
    ObjectiveShow(gv_objectiveSurvive01, PlayerGroupAll(), true);
    ObjectiveShow(gv_objectiveSurvive02, PlayerGroupAll(), true);
    ObjectiveShow(gv_objectiveSurvive03, PlayerGroupAll(), true);
    ObjectiveSetState(gv_objectiveSurvive01, c_objectiveStateActive);
    if ((gf_TotalScore() > gv_winningScoreSilver)) {
        ObjectiveSetState(gv_objectiveSurvive02, c_objectiveStateFailed);
    }
    else {
    }
    if ((gf_TotalScore() > gv_winningScoreGold)) {
        ObjectiveSetState(gv_objectiveSurvive03, c_objectiveStateFailed);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonChosenRetryRound2_Init () {
    gt_ButtonChosenRetryRound2 = TriggerCreate("gt_ButtonChosenRetryRound2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Chosen Retry Round 3
//--------------------------------------------------------------------------------------------------
bool gt_ButtonChosenRetryRound3_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_SpawnRound3, true, false);
    ObjectiveShow(gv_objectiveSurvive01, PlayerGroupAll(), true);
    ObjectiveShow(gv_objectiveSurvive02, PlayerGroupAll(), true);
    ObjectiveShow(gv_objectiveSurvive03, PlayerGroupAll(), true);
    ObjectiveSetState(gv_objectiveSurvive01, c_objectiveStateActive);
    if ((gf_TotalScore() > gv_winningScoreSilver)) {
        ObjectiveSetState(gv_objectiveSurvive02, c_objectiveStateFailed);
    }
    else {
    }
    if ((gf_TotalScore() > gv_winningScoreGold)) {
        ObjectiveSetState(gv_objectiveSurvive03, c_objectiveStateFailed);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonChosenRetryRound3_Init () {
    gt_ButtonChosenRetryRound3 = TriggerCreate("gt_ButtonChosenRetryRound3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialog Score Show
//--------------------------------------------------------------------------------------------------
bool gt_DialogScoreShow_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, c_transitionDurationImmediate);
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    TriggerQueueClear(c_triggerQueueKill);
    TriggerQueuePause(false);
    ObjectiveShow(gv_objectiveSurvive01, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveSurvive02, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveSurvive03, PlayerGroupAll(), false);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    CameraSetBounds(PlayerGroupAll(), RegionPlayableMap(), true);
    VisExploreArea(gv_pLAYER_USER, RegionEntireMap(), false, false);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_USER, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupRemove(gv_playerUnits, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_COMPUTER1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupRemove(gv_attackers, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    if ((gv_allRoundsCompleted == true)) {
        libChal_gf_CreateChallengeVictoryPanel(StringExternal("Param/Value/219A7E9E"), gv_ratingText, StringExternal("Param/Value/4CBE1226"), (StringExternal("Param/Value/18B9C10D") + IntToText(gf_TotalScore())), gt_ButtonChosenLeaveGame, null);
        libChal_gf_AddWaveToChallengeVictoryPanel((StringExternal("Param/Value/5BBECF78") + IntToText(gv_lostUnitsRound1)), gt_SpawnRound1);
        libChal_gf_AddWaveToChallengeVictoryPanel((StringExternal("Param/Value/14E95F77") + IntToText(gv_lostUnitsRound2)), gt_SpawnRound2);
        libChal_gf_AddWaveToChallengeVictoryPanel((StringExternal("Param/Value/49125007") + IntToText(gv_lostUnitsRound3)), gt_SpawnRound3);
        libChal_gf_AddAchievementToChallengeVictoryPanel("Challenge_ProtossCombat_Basic");
        libChal_gf_AddAchievementToChallengeVictoryPanel("Challenge_ProtossCombat_Mastery");
        libChal_gf_AddAchievementToChallengeVictoryPanel("Challenge_ProtossCombat_Dominance");
        libChal_gf_ShowHideChallengeVictoryPanel(true);
    }
    else {
        libChal_gf_CreateChallengeDefeatPanel(StringExternal("Param/Value/2AC3FAD8"), StringExternal("Param/Value/176C986C"), gt_ButtonChosenLeaveGame, null);
        if ((gv_lostUnitsRound1 >= 0) && (gv_roundCount >= 1)) {
            libChal_gf_AddWaveToChallengeDefeatPanel((StringExternal("Param/Value/CA4CC8D5") + IntToText(gv_lostUnitsRound1)), libChal_ge_CHL_DefeatPanelWaveResult_Survived, gt_ButtonChosenRetryRound1);
        }
        else {
            if ((gv_roundCount == 0) && (gv_pylonDead == true)) {
                libChal_gf_AddWaveToChallengeDefeatPanel((StringExternal("Param/Value/82B72AE9")), libChal_ge_CHL_DefeatPanelWaveResult_Failed, gt_ButtonChosenRetryRound1);
            }
            else {
                libChal_gf_AddWaveToChallengeDefeatPanel((StringExternal("Param/Value/D538E637")), libChal_ge_CHL_DefeatPanelWaveResult_Failed, gt_ButtonChosenRetryRound1);
            }
        }
        if ((gv_lostUnitsRound2 >= 0) && (gv_roundCount >= 2)) {
            libChal_gf_AddWaveToChallengeDefeatPanel((StringExternal("Param/Value/AC7CE442") + IntToText(gv_lostUnitsRound2)), libChal_ge_CHL_DefeatPanelWaveResult_Survived, gt_ButtonChosenRetryRound2);
        }
        else {
            if ((gv_roundCount == 1) && (gv_pylonDead == true)) {
                libChal_gf_AddWaveToChallengeDefeatPanel((StringExternal("Param/Value/5785748E")), libChal_ge_CHL_DefeatPanelWaveResult_Failed, gt_ButtonChosenRetryRound2);
            }
            else {
                libChal_gf_AddWaveToChallengeDefeatPanel((StringExternal("Param/Value/E7982C0B")), libChal_ge_CHL_DefeatPanelWaveResult_HaventTried, gt_ButtonChosenRetryRound2);
            }
        }
        if ((gv_lostUnitsRound3 >= 0) && (gv_roundCount >= 3)) {
            libChal_gf_AddWaveToChallengeDefeatPanel((StringExternal("Param/Value/845487B0") + IntToText(gv_lostUnitsRound3)), libChal_ge_CHL_DefeatPanelWaveResult_Survived, gt_ButtonChosenRetryRound3);
        }
        else {
            if ((gv_roundCount == 2) && (gv_pylonDead == true)) {
                libChal_gf_AddWaveToChallengeDefeatPanel((StringExternal("Param/Value/B7DC1D9D")), libChal_ge_CHL_DefeatPanelWaveResult_Failed, gt_ButtonChosenRetryRound3);
            }
            else {
                libChal_gf_AddWaveToChallengeDefeatPanel((StringExternal("Param/Value/470F2553")), libChal_ge_CHL_DefeatPanelWaveResult_HaventTried, gt_ButtonChosenRetryRound3);
            }
        }
        libChal_gf_ShowHideChallengeDefeatPanel(true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogScoreShow_Init () {
    gt_DialogScoreShow = TriggerCreate("gt_DialogScoreShow_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reset Play Field
//--------------------------------------------------------------------------------------------------
bool gt_ResetPlayField_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    RegionPlayableMapSet(gv_playableArea);
    UnitRemove(gv_shield01);
    UnitRemove(gv_shield02);
    UnitRemove(gv_shield03);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(49), 0.0, -1, 10, true);
    VisExploreArea(gv_pLAYER_USER, RegionEntireMap(), false, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RepulserField10", 0, gv_pLAYER_BOARD, RegionGetCenter(RegionFromId(20)));
    gv_shield01 = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RepulserField12", 0, gv_pLAYER_BOARD, RegionGetCenter(RegionFromId(29)));
    gv_shield02 = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RepulserField12", 0, gv_pLAYER_BOARD, RegionGetCenter(RegionFromId(37)));
    gv_shield03 = UnitLastCreated();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_BOARD, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_repulserFields, UnitGroupLoopCurrent());
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Pylon", 0, gv_pLAYER_USER, RegionGetCenter(RegionFromId(13)));
    gv_pylon01 = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Pylon", 0, gv_pLAYER_USER, RegionGetCenter(RegionFromId(14)));
    gv_pylon02 = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Pylon", 0, gv_pLAYER_USER, RegionGetCenter(RegionFromId(15)));
    gv_pylon03 = UnitLastCreated();
    gv_pylonDead = false;
    if ((gv_allRoundsCompleted == false)) {
        ObjectiveSetState(gv_objectiveSurvive01, c_objectiveStateActive);
    }
    else {
        TriggerEnable(gt_FinishDefeatPylonAfterVictory, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResetPlayField_Init () {
    gt_ResetPlayField = TriggerCreate("gt_ResetPlayField_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Round 1
//--------------------------------------------------------------------------------------------------
bool gt_SpawnRound1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libChal_gf_ShowHideChallengeVictoryPanel(false);
    libChal_gf_ShowHideChallengeDefeatPanel(false);
    gv_roundCount = 0;
    TriggerExecute(gt_ResetPlayField, true, false);
    if ((gv_allRoundsCompleted == true)) {
        gv_lostUnitsRound1Best = gv_lostUnitsRound1;
        gv_lostUnitsTotalPrevious = gf_TotalScore();
        gv_lostUnitsRound1 = 0;
        ObjectiveShow(gv_objectiveSurvive01, PlayerGroupAll(), true);
        ObjectiveShow(gv_objectiveSurvive02, PlayerGroupAll(), true);
        ObjectiveShow(gv_objectiveSurvive03, PlayerGroupAll(), true);
        ObjectiveSetState(gv_objectiveSurvive01, c_objectiveStateActive);
        UnitPauseAll(false);
        ObjectiveSetName(gv_objectiveSurvive01, (StringExternal("Param/Value/7690E3C5") + IntToText(gv_roundCount) + StringExternal("Param/Value/27179186")));
        if ((gf_TotalScore() > gv_winningScoreSilver)) {
            ObjectiveSetState(gv_objectiveSurvive02, c_objectiveStateFailed);
        }
        else {
        }
        if ((gf_TotalScore() > gv_winningScoreGold)) {
            ObjectiveSetState(gv_objectiveSurvive03, c_objectiveStateFailed);
        }
        else {
        }
        BoardItemSetText(gv_board, 1, 1, (StringExternal("Param/Value/E728850E") + StringExternal("Param/Value/DFF179EF") + IntToText(gv_lostUnitsRound1) + StringExternal("Param/Value/B4AC2693")));
        BoardItemSetText(gv_board, 1, 2, (StringExternal("Param/Value/941515DA") + StringExternal("Param/Value/A8BFDA4B") + IntToText(gv_lostUnitsRound2) + StringExternal("Param/Value/5ACB1D36")));
        BoardItemSetText(gv_board, 1, 3, (StringExternal("Param/Value/EE7C18BE") + StringExternal("Param/Value/1615E2C0") + IntToText(gv_lostUnitsRound3) + StringExternal("Param/Value/2159ECA9")));
        BoardItemSetText(gv_board, 1, 4, (StringExternal("Param/Value/E2C896FB") + StringExternal("Param/Value/CD4BA6DE") + IntToText(gf_TotalScore()) + StringExternal("Param/Value/7B55395B")));
    }
    else {
    }
    gv_lostUnitsRound1 = 0;
    RegionPlayableMapSet(gv_playableArea);
    TriggerStop(gt_SpawnRound2);
    TriggerStop(gt_SpawnRound3);
    TriggerExecute(gt_ObjectiveSurviveDiscoverQ, true, false);
    TriggerExecute(gt_TipCountersQ, true, false);
    TriggerExecute(gt_TurnAllianceSettingOn, true, false);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(49), 0.0, -1, 10, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationDefault);
    libNtve_gf_GlobalCinematicSetting(false);
    UISetMode(PlayerGroupAll(), c_uiModeConsole, c_transitionDurationDefault);
    UnitGroupLoopBegin(gv_attackers);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_repulserFields);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_PlayerUnitsRound1, true, false);
    gf_SpawnEnemyUnitsForArea1(13, "Hellion", RegionFromId(2));
    gf_SpawnEnemyUnitsForArea2(55, "Marine", RegionFromId(4));
    gf_SpawnEnemyUnitsForArea3(12, "Marauder", RegionFromId(5));
    TriggerExecute(gt_PylonsInvulnerable, true, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gf_TextTag(StringExternal("Param/Value/254D485D"));
    if ((gv_retryCountRound01 == 2)) {
        gv_retryCountRound01 = (gv_retryCountRound01 + 1);
        HelpPanelDisplayPage(PlayerGroupAll(), c_helpPanelPageTips);
    }
    else {
    }
    TriggerEnable(gt_FinishDefeatUnitsDead, true);
    if ((gv_allRoundsCompleted == false)) {
        TriggerEnable(gt_FinishDefeatPylonBeforeVictory, true);
    }
    else {
        TriggerEnable(gt_FinishDefeatPylonAfterVictory, true);
    }
    TriggerExecute(gt_AddReadyButtonQ, true, false);
    while (!((gv_ready == true))) {
        Wait(0.5, c_timeGame);
    }
    gv_ready = false;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    PingSetVisible(gv_buildingPing01, false);
    PingSetVisible(gv_buildingPing02, false);
    PingSetVisible(gv_buildingPing03, false);
    PingSetVisible(gv_enemyPing01, false);
    PingSetVisible(gv_enemyPing02, false);
    PingSetVisible(gv_enemyPing03, false);
    TriggerExecute(gt_TurnAllianceSettingOn, true, false);
    RegionPlayableMapSet(RegionFromId(24));
    CameraPan(gv_pLAYER_USER, PointFromId(814), 0.0, -1, 10, false);
    gv_hallacinationsOff = false;
    gf_HidePauseGetReadyPlayer(RegionFromId(50), gv_playerUnitsArea1);
    TriggerExecute(gt_PylonsVulnerable, true, false);
    gf_UnpauseShowEnemies(gv_enemyAttackersA, gv_enemyAttackersB, gv_enemyAttackersC);
    Wait(1.0, c_timeGame);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_WarnPlayerAttack, true, true);
    libNtve_gf_ShowHideUnit(gv_shield01, false);
    TriggerExecute(gt_TurnAllianceSettingOff, true, false);
    MinimapPing(PlayerGroupAll(), PointFromId(39), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringExternal("Param/Value/B2FE915C"), null, PointFromId(39));
    gf_ClearAlertsFunction();
    AIAttackWaveUseGroup(gv_pLAYER_COMPUTER1, gv_enemyAttackersA);
    AIAttackWaveSend(gv_pLAYER_COMPUTER1, 3, true);
    while (!((UnitGroupCount(gv_enemyAttackersA, c_unitCountAlive) == 0))) {
        Wait(0.5, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_TurnAllianceSettingOn, true, false);
    RegionPlayableMapSet(RegionFromId(26));
    CameraPan(gv_pLAYER_USER, PointFromId(813), 0.0, -1, 10, false);
    gf_HidePauseGetReadyPlayer(RegionFromId(51), gv_playerUnitsArea2);
    gf_UnpauseShowEnemies(gv_enemyAttackersB, gv_enemyAttackersA, gv_enemyAttackersC);
    Wait(1.0, c_timeGame);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_WarnPlayerAttack, true, true);
    libNtve_gf_ShowHideUnit(gv_shield02, false);
    TriggerExecute(gt_TurnAllianceSettingOff, true, false);
    MinimapPing(PlayerGroupAll(), PointFromId(4), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringExternal("Param/Value/5C69D3C8"), null, PointFromId(4));
    gf_ClearAlertsFunction();
    AIAttackWaveUseGroup(gv_pLAYER_COMPUTER1, gv_enemyAttackersB);
    AIAttackWaveSend(gv_pLAYER_COMPUTER1, 3, true);
    while (!((UnitGroupCount(gv_enemyAttackersB, c_unitCountAlive) == 0))) {
        Wait(0.5, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_TurnAllianceSettingOn, true, false);
    RegionPlayableMapSet(RegionFromId(27));
    CameraPan(gv_pLAYER_USER, PointFromId(815), 0.0, -1, 10, false);
    gf_HidePauseGetReadyPlayer(RegionFromId(49), gv_playerUnitsArea3);
    gf_UnpauseShowEnemies(gv_enemyAttackersC, gv_enemyAttackersA, gv_enemyAttackersB);
    Wait(1.0, c_timeGame);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_WarnPlayerAttack, true, true);
    libNtve_gf_ShowHideUnit(gv_shield03, false);
    TriggerExecute(gt_TurnAllianceSettingOff, true, false);
    MinimapPing(PlayerGroupAll(), PointFromId(25), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringExternal("Param/Value/5D638B92"), null, PointFromId(25));
    gf_ClearAlertsFunction();
    AIAttackWaveUseGroup(gv_pLAYER_COMPUTER1, gv_enemyAttackersC);
    AIAttackWaveSend(gv_pLAYER_COMPUTER1, 3, false);
    TriggerEnable(gt_FinalRound1, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnRound1_Init () {
    gt_SpawnRound1 = TriggerCreate("gt_SpawnRound1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Round 2
//--------------------------------------------------------------------------------------------------
bool gt_SpawnRound2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libChal_gf_ShowHideChallengeVictoryPanel(false);
    libChal_gf_ShowHideChallengeDefeatPanel(false);
    gv_round2Played = true;
    gv_roundCount = 1;
    TriggerExecute(gt_ResetPlayField, true, false);
    if ((gv_allRoundsCompleted == true)) {
        gv_lostUnitsRound2Best = gv_lostUnitsRound2;
        gv_lostUnitsTotalPrevious = gf_TotalScore();
        gv_lostUnitsRound2 = 0;
        ObjectiveShow(gv_objectiveSurvive01, PlayerGroupAll(), true);
        ObjectiveShow(gv_objectiveSurvive02, PlayerGroupAll(), true);
        ObjectiveShow(gv_objectiveSurvive03, PlayerGroupAll(), true);
        ObjectiveSetState(gv_objectiveSurvive01, c_objectiveStateActive);
        UnitPauseAll(false);
        ObjectiveSetName(gv_objectiveSurvive01, (StringExternal("Param/Value/2C489E15") + IntToText(gv_roundCount) + StringExternal("Param/Value/1F5F5C7C")));
        if ((gf_TotalScore() > gv_winningScoreSilver)) {
            ObjectiveSetState(gv_objectiveSurvive02, c_objectiveStateFailed);
        }
        else {
        }
        if ((gf_TotalScore() > gv_winningScoreGold)) {
            ObjectiveSetState(gv_objectiveSurvive03, c_objectiveStateFailed);
        }
        else {
        }
        BoardItemSetText(gv_board, 1, 1, (StringExternal("Param/Value/9208B1C4") + StringExternal("Param/Value/640E2EC3") + IntToText(gv_lostUnitsRound1) + StringExternal("Param/Value/C1779FF7")));
        BoardItemSetText(gv_board, 1, 2, (StringExternal("Param/Value/DB170D14") + StringExternal("Param/Value/097F1291") + IntToText(gv_lostUnitsRound2) + StringExternal("Param/Value/E7089846")));
        BoardItemSetText(gv_board, 1, 3, (StringExternal("Param/Value/3F26673D") + StringExternal("Param/Value/2523CBBB") + IntToText(gv_lostUnitsRound3) + StringExternal("Param/Value/45A2332C")));
        BoardItemSetText(gv_board, 1, 4, (StringExternal("Param/Value/C6C33E80") + StringExternal("Param/Value/5630EFC1") + IntToText(gf_TotalScore()) + StringExternal("Param/Value/35409BBE")));
    }
    else {
    }
    gv_lostUnitsRound2 = 0;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    RegionPlayableMapSet(gv_playableArea);
    TriggerStop(gt_SpawnRound1);
    TriggerStop(gt_SpawnRound3);
    gv_hallacinationsOff = true;
    TriggerExecute(gt_TurnAllianceSettingOn, true, false);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(49), 0.0, -1, 10, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationDefault);
    libNtve_gf_GlobalCinematicSetting(false);
    UISetMode(PlayerGroupAll(), c_uiModeConsole, c_transitionDurationDefault);
    UnitGroupLoopBegin(gv_playerUnitsRound1);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_attackers);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_repulserFields);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_PylonsInvulnerable, true, false);
    TriggerExecute(gt_PlayerUnitsRound2, true, false);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_COMPUTER2, "SiegeTech", 0);
    gf_SpawnEnemyUnitsForArea1(10, "Thor", RegionFromId(2));
    gf_SpawnEnemyUnitsForArea2(6, "SiegeTank", RegionFromId(4));
    gf_SpawnEnemyUnitsForArea2a(6, "SiegeTank", RegionFromId(4));
    gf_SpawnEnemyUnitsForArea3(3, "Battlecruiser", RegionFromId(5));
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    if ((gv_retryCountRound02 == 2)) {
        gv_retryCountRound02 = (gv_retryCountRound02 + 1);
        HelpPanelDisplayPage(PlayerGroupAll(), c_helpPanelPageTips);
    }
    else {
    }
    TriggerEnable(gt_FinishDefeatUnitsDead, true);
    if ((gv_allRoundsCompleted == false)) {
        TriggerEnable(gt_FinishDefeatPylonBeforeVictory, true);
    }
    else {
        TriggerEnable(gt_FinishDefeatPylonAfterVictory, true);
    }
    gf_TextTag(StringExternal("Param/Value/127A8BE0"));
    TriggerExecute(gt_AddReadyButtonQ, true, false);
    while (!((gv_ready == true))) {
        Wait(0.5, c_timeGame);
    }
    gv_ready = false;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    PingSetVisible(gv_buildingPing01, false);
    PingSetVisible(gv_buildingPing02, false);
    PingSetVisible(gv_buildingPing03, false);
    PingSetVisible(gv_enemyPing01, false);
    PingSetVisible(gv_enemyPing02, false);
    PingSetVisible(gv_enemyPing03, false);
    TriggerExecute(gt_TurnAllianceSettingOn, true, false);
    RegionPlayableMapSet(RegionFromId(24));
    CameraPan(gv_pLAYER_USER, PointFromId(814), 0.0, -1, 10, false);
    gv_hallacinationsOff = false;
    gf_HidePauseGetReadyPlayer(RegionFromId(50), gv_playerUnitsArea1);
    TriggerExecute(gt_PylonsVulnerable, true, false);
    gf_UnpauseShowEnemies(gv_enemyAttackersA, gv_enemyAttackersB, gv_enemyAttackersC);
    Wait(1.0, c_timeGame);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_WarnPlayerAttack, true, true);
    libNtve_gf_ShowHideUnit(gv_shield01, false);
    TriggerExecute(gt_TurnAllianceSettingOff, true, false);
    MinimapPing(PlayerGroupAll(), PointFromId(39), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringExternal("Param/Value/A515F5AA"), null, PointFromId(39));
    gf_ClearAlertsFunction();
    AIAttackWaveUseGroup(gv_pLAYER_COMPUTER1, gv_enemyAttackersA);
    AIAttackWaveSend(gv_pLAYER_COMPUTER1, 3, true);
    while (!((UnitGroupCount(gv_enemyAttackersA, c_unitCountAlive) == 0))) {
        Wait(0.5, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_TurnAllianceSettingOn, true, false);
    RegionPlayableMapSet(RegionFromId(26));
    CameraPan(gv_pLAYER_USER, PointFromId(813), 0.0, -1, 10, false);
    gf_HidePauseGetReadyPlayer(RegionFromId(51), gv_playerUnitsArea2);
    gf_UnpauseShowEnemies(gv_enemyAttackersB, gv_enemyAttackersA, gv_enemyAttackersC);
    UnitGroupLoopBegin(gv_enemyAttackersD);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    Wait(1.0, c_timeGame);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_WarnPlayerAttack, true, true);
    libNtve_gf_ShowHideUnit(gv_shield02, false);
    TriggerExecute(gt_TurnAllianceSettingOff, true, false);
    MinimapPing(PlayerGroupAll(), PointFromId(4), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringExternal("Param/Value/0F7BF892"), null, PointFromId(4));
    gf_ClearAlertsFunction();
    AIAttackWaveUseGroup(gv_pLAYER_COMPUTER1, gv_enemyAttackersB);
    AIAttackWaveSend(gv_pLAYER_COMPUTER1, 0, true);
    AIAttackWaveUseGroup(gv_pLAYER_COMPUTER1, gv_enemyAttackersD);
    AIAttackWaveSend(gv_pLAYER_COMPUTER2, 0, true);
    Wait(3.0, c_timeGame);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_COMPUTER2, "SiegeTech", 1);
    while (!((UnitGroupCount(gv_enemyAttackersB, c_unitCountAlive) == 0) && (UnitGroupCount(gv_enemyAttackersD, c_unitCountAlive) == 0))) {
        Wait(0.5, c_timeGame);
    }
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_COMPUTER2, "SiegeTech", 0);
    Wait(2.0, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_TurnAllianceSettingOn, true, false);
    RegionPlayableMapSet(RegionFromId(27));
    CameraPan(gv_pLAYER_USER, PointFromId(815), 0.0, -1, 10, false);
    gf_HidePauseGetReadyPlayer(RegionFromId(49), gv_playerUnitsArea3);
    gf_UnpauseShowEnemies(gv_enemyAttackersC, gv_enemyAttackersA, gv_enemyAttackersB);
    Wait(1.0, c_timeGame);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_WarnPlayerAttack, true, true);
    libNtve_gf_ShowHideUnit(gv_shield03, false);
    TriggerExecute(gt_TurnAllianceSettingOff, true, false);
    MinimapPing(PlayerGroupAll(), PointFromId(25), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringExternal("Param/Value/443A63F6"), null, PointFromId(25));
    gf_ClearAlertsFunction();
    AIAttackWaveUseGroup(gv_pLAYER_COMPUTER1, gv_enemyAttackersC);
    AIAttackWaveSend(gv_pLAYER_COMPUTER1, 3, false);
    TriggerEnable(gt_FinalRound2, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnRound2_Init () {
    gt_SpawnRound2 = TriggerCreate("gt_SpawnRound2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Round 3
//--------------------------------------------------------------------------------------------------
bool gt_SpawnRound3_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libChal_gf_ShowHideChallengeVictoryPanel(false);
    libChal_gf_ShowHideChallengeDefeatPanel(false);
    gv_round3Played = true;
    gv_roundCount = 2;
    TriggerExecute(gt_ResetPlayField, true, false);
    if ((gv_allRoundsCompleted == true)) {
        gv_lostUnitsRound3Best = gv_lostUnitsRound3;
        gv_lostUnitsTotalPrevious = gf_TotalScore();
        gv_lostUnitsRound3 = 0;
        ObjectiveShow(gv_objectiveSurvive01, PlayerGroupAll(), true);
        ObjectiveShow(gv_objectiveSurvive02, PlayerGroupAll(), true);
        ObjectiveShow(gv_objectiveSurvive03, PlayerGroupAll(), true);
        ObjectiveSetState(gv_objectiveSurvive01, c_objectiveStateActive);
        UnitPauseAll(false);
        ObjectiveSetName(gv_objectiveSurvive01, (StringExternal("Param/Value/35B68D6F") + IntToText(gv_roundCount) + StringExternal("Param/Value/942DDB8B")));
        if ((gf_TotalScore() > gv_winningScoreSilver)) {
            ObjectiveSetState(gv_objectiveSurvive02, c_objectiveStateFailed);
        }
        else {
        }
        if ((gf_TotalScore() > gv_winningScoreGold)) {
            ObjectiveSetState(gv_objectiveSurvive03, c_objectiveStateFailed);
        }
        else {
        }
        BoardItemSetText(gv_board, 1, 1, (StringExternal("Param/Value/4C0B3427") + StringExternal("Param/Value/A02D25ED") + IntToText(gv_lostUnitsRound1) + StringExternal("Param/Value/325D5437")));
        BoardItemSetText(gv_board, 1, 2, (StringExternal("Param/Value/1B756577") + StringExternal("Param/Value/46A577DC") + IntToText(gv_lostUnitsRound2) + StringExternal("Param/Value/DA8D8DFC")));
        BoardItemSetText(gv_board, 1, 3, (StringExternal("Param/Value/76AE8B1C") + StringExternal("Param/Value/D2F1BC23") + IntToText(gv_lostUnitsRound3) + StringExternal("Param/Value/E8E30C73")));
        BoardItemSetText(gv_board, 1, 4, (StringExternal("Param/Value/7DB126CE") + StringExternal("Param/Value/108F5601") + IntToText(gf_TotalScore()) + StringExternal("Param/Value/C20A0625")));
    }
    else {
    }
    gv_lostUnitsRound3 = 0;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    RegionPlayableMapSet(gv_playableArea);
    TriggerStop(gt_SpawnRound1);
    TriggerStop(gt_SpawnRound2);
    gv_hallacinationsOff = true;
    TriggerExecute(gt_TurnAllianceSettingOn, true, false);
    TriggerEnable(gt_VikingsTransform, false);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(49), 0.0, -1, 10, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationDefault);
    libNtve_gf_GlobalCinematicSetting(false);
    UISetMode(PlayerGroupAll(), c_uiModeConsole, c_transitionDurationDefault);
    UnitGroupLoopBegin(gv_playerUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_attackers);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_repulserFields);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_PylonsInvulnerable, true, false);
    TriggerExecute(gt_PlayerUnitsRound3, true, false);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_COMPUTER2, "SiegeTech", 0);
    gf_SpawnEnemyUnitsForArea1(1, "Battlecruiser", RegionFromId(6));
    gf_SpawnEnemyUnitsForArea1(5, "VikingFighter", RegionFromId(9));
    gf_SpawnEnemyUnitsForArea2(14, "Reaper", RegionFromId(7));
    gf_SpawnEnemyUnitsForArea2(14, "Hellion", RegionFromId(8));
    gf_SpawnEnemyUnitsForArea2a(11, "SiegeTank", RegionFromId(10));
    gf_SpawnEnemyUnitsForArea3(6, "Marauder", RegionFromId(11));
    VisExploreArea(gv_pLAYER_USER, RegionEntireMap(), false, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    if ((gv_retryCountRound03 == 2)) {
        gv_retryCountRound03 = (gv_retryCountRound03 + 1);
        HelpPanelDisplayPage(PlayerGroupAll(), c_helpPanelPageTips);
    }
    else {
    }
    TriggerEnable(gt_FinishDefeatUnitsDead, true);
    if ((gv_allRoundsCompleted == false)) {
        TriggerEnable(gt_FinishDefeatPylonBeforeVictory, true);
    }
    else {
        TriggerEnable(gt_FinishDefeatPylonAfterVictory, true);
    }
    gf_TextTag(StringExternal("Param/Value/BB4EC055"));
    TriggerExecute(gt_AddReadyButtonQ, true, false);
    while (!((gv_ready == true))) {
        Wait(0.5, c_timeGame);
    }
    gv_ready = false;
    TriggerEnable(gt_ObjectiveSurviveProtect, true);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    PingSetVisible(gv_buildingPing01, false);
    PingSetVisible(gv_buildingPing02, false);
    PingSetVisible(gv_buildingPing03, false);
    PingSetVisible(gv_enemyPing01, false);
    PingSetVisible(gv_enemyPing02, false);
    PingSetVisible(gv_enemyPing03, false);
    TriggerExecute(gt_TurnAllianceSettingOn, true, false);
    TriggerEnable(gt_VikingsTransform, true);
    RegionPlayableMapSet(RegionFromId(24));
    CameraPan(gv_pLAYER_USER, PointFromId(814), 0.0, -1, 10, false);
    gv_hallacinationsOff = false;
    gf_HidePauseGetReadyPlayer(RegionFromId(50), gv_playerUnitsArea1);
    TriggerExecute(gt_PylonsVulnerable, true, false);
    gf_UnpauseShowEnemies(gv_enemyAttackersA, gv_enemyAttackersB, gv_enemyAttackersC);
    Wait(1.0, c_timeGame);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_WarnPlayerAttack, true, true);
    libNtve_gf_ShowHideUnit(gv_shield01, false);
    TriggerExecute(gt_TurnAllianceSettingOff, true, false);
    MinimapPing(PlayerGroupAll(), PointFromId(39), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringExternal("Param/Value/3BA0B13E"), null, PointFromId(39));
    gf_ClearAlertsFunction();
    AIAttackWaveUseGroup(gv_pLAYER_COMPUTER1, gv_enemyAttackersA);
    AIAttackWaveSend(gv_pLAYER_COMPUTER1, 3, true);
    while (!((UnitGroupCount(gv_enemyAttackersA, c_unitCountAlive) == 0))) {
        Wait(0.5, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerEnable(gt_VikingsTransform, false);
    TriggerExecute(gt_TurnAllianceSettingOn, true, false);
    RegionPlayableMapSet(RegionFromId(26));
    CameraPan(gv_pLAYER_USER, PointFromId(813), 0.0, -1, 10, false);
    gf_HidePauseGetReadyPlayer(RegionFromId(51), gv_playerUnitsArea2);
    gf_UnpauseShowEnemies(gv_enemyAttackersB, gv_enemyAttackersA, gv_enemyAttackersC);
    Wait(1.0, c_timeGame);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_WarnPlayerAttack, true, true);
    libNtve_gf_ShowHideUnit(gv_shield02, false);
    TriggerExecute(gt_TurnAllianceSettingOff, true, false);
    MinimapPing(PlayerGroupAll(), PointFromId(4), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringExternal("Param/Value/E5D916E2"), null, PointFromId(4));
    gf_ClearAlertsFunction();
    AIAttackWaveUseGroup(gv_pLAYER_COMPUTER1, gv_enemyAttackersB);
    AIAttackWaveSend(gv_pLAYER_COMPUTER1, 3, true);
    while (!((UnitGroupCount(gv_enemyAttackersB, c_unitCountAlive) == 0))) {
        Wait(0.5, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_TurnAllianceSettingOn, true, false);
    RegionPlayableMapSet(RegionFromId(27));
    CameraPan(gv_pLAYER_USER, PointFromId(815), 0.0, -1, 10, false);
    gf_HidePauseGetReadyPlayer(RegionFromId(49), gv_playerUnitsArea3);
    gf_UnpauseShowEnemies(gv_enemyAttackersC, gv_enemyAttackersA, gv_enemyAttackersB);
    UnitGroupLoopBegin(gv_enemyAttackersD);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    Wait(1.0, c_timeGame);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_WarnPlayerAttack, true, true);
    libNtve_gf_ShowHideUnit(gv_shield03, false);
    TriggerExecute(gt_TurnAllianceSettingOff, true, false);
    MinimapPing(PlayerGroupAll(), PointFromId(25), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringExternal("Param/Value/1A5010DA"), null, PointFromId(25));
    gf_ClearAlertsFunction();
    AIAttackWaveUseGroup(gv_pLAYER_COMPUTER1, gv_enemyAttackersC);
    AIAttackWaveSend(gv_pLAYER_COMPUTER1, 0, true);
    AIAttackWaveUseGroup(gv_pLAYER_COMPUTER2, gv_enemyAttackersD);
    AIAttackWaveSend(gv_pLAYER_COMPUTER2, 0, false);
    Wait(3.0, c_timeGame);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_COMPUTER2, "SiegeTech", 1);
    TriggerEnable(gt_FinalRound3, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnRound3_Init () {
    gt_SpawnRound3 = TriggerCreate("gt_SpawnRound3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Units Round 1
//--------------------------------------------------------------------------------------------------
bool gt_PlayerUnitsRound1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_playerUnitsRound1, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnPlayerUnitsForRound1(14, "Zealot", RegionFromId(28));
    gf_SpawnPlayerUnitsForRound1(9, "Stalker", RegionFromId(33));
    gf_SpawnPlayerUnitsForRound1(5, "Colossus", RegionFromId(34));
    gf_SpawnPlayerUnitsForRound1(1, "Sentry", RegionFromId(36));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerUnitsRound1_Init () {
    gt_PlayerUnitsRound1 = TriggerCreate("gt_PlayerUnitsRound1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Units Round 2
//--------------------------------------------------------------------------------------------------
bool gt_PlayerUnitsRound2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnPlayerUnitsForRound2(7, "Immortal", RegionFromId(28));
    gf_SpawnPlayerUnitsForRound2(7, "Carrier", RegionFromId(33));
    gf_SpawnPlayerUnitsForRound2(6, "VoidRay", RegionFromId(34));
    gf_SpawnPlayerUnitsForRound2(1, "HighTemplar", RegionFromId(42));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerUnitsRound2_Init () {
    gt_PlayerUnitsRound2 = TriggerCreate("gt_PlayerUnitsRound2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Units Round 3
//--------------------------------------------------------------------------------------------------
bool gt_PlayerUnitsRound3_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnPlayerUnitsForRound3(8, "Zealot", RegionFromId(28));
    gf_SpawnPlayerUnitsForRound3(8, "Stalker", RegionFromId(33));
    gf_SpawnPlayerUnitsForRound3(4, "Phoenix", RegionFromId(34));
    gf_SpawnPlayerUnitsForRound3(7, "Immortal", RegionFromId(35));
    gf_SpawnPlayerUnitsForRound3(4, "Archon", RegionFromId(41));
    gf_SpawnPlayerUnitsForRound3(3, "Colossus", RegionFromId(42));
    gf_SpawnPlayerUnitsForRound3(1, "HighTemplar", RegionFromId(36));
    gf_SpawnPlayerUnitsForRound3(1, "Sentry", RegionFromId(36));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerUnitsRound3_Init () {
    gt_PlayerUnitsRound3 = TriggerCreate("gt_PlayerUnitsRound3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vikings Transform
//--------------------------------------------------------------------------------------------------
bool gt_VikingsTransform_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_USER))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_USER, RegionFromId(50), UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(UnitGroup("VikingFighter", gv_pLAYER_COMPUTER1, RegionFromId(50), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("AssaultMode", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(16)), c_orderQueueAddToEnd);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VikingsTransform_Init () {
    gt_VikingsTransform = TriggerCreate("gt_VikingsTransform_Func");
    TriggerEnable(gt_VikingsTransform, false);
    TriggerAddEventUnitDied(gt_VikingsTransform, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn Alliance Setting On
//--------------------------------------------------------------------------------------------------
bool gt_TurnAllianceSettingOn_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER2, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurnAllianceSettingOn_Init () {
    gt_TurnAllianceSettingOn = TriggerCreate("gt_TurnAllianceSettingOn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn Alliance Setting Off
//--------------------------------------------------------------------------------------------------
bool gt_TurnAllianceSettingOff_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER2, libNtve_ge_AllianceSetting_Enemy);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurnAllianceSettingOff_Init () {
    gt_TurnAllianceSettingOff = TriggerCreate("gt_TurnAllianceSettingOff_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    AICampaignStart(gv_pLAYER_COMPUTER1);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_COMPUTER1, PlayerGroupSingle(gv_pLAYER_USER));
    AICampaignStart(gv_pLAYER_COMPUTER2);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_COMPUTER2, PlayerGroupSingle(gv_pLAYER_USER));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warn Player - Attack
//--------------------------------------------------------------------------------------------------
bool gt_WarnPlayerAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_racingStartDIALOG;
    int lv_racingStartTEXT;

    // Variable Initialization
    lv_racingStartDIALOG = c_invalidDialogId;
    lv_racingStartTEXT = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, false);
    lv_racingStartDIALOG = DialogLastCreated();
    DialogSetImageVisible(lv_racingStartDIALOG, false);
    DialogControlCreate(lv_racingStartDIALOG, c_triggerControlTypeLabel);
    lv_racingStartTEXT = DialogControlLastCreated();
    DialogControlSetFullDialog(lv_racingStartTEXT, PlayerGroupAll(), true);
    DialogSetVisible(lv_racingStartDIALOG, PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemStyle(lv_racingStartTEXT, "ChallengeReady", PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lv_racingStartTEXT, StringExternal("Param/Value/46BCB542"), PlayerGroupAll());
    SoundPlay(SoundLink("TUIWarningPing", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(3.0, c_timeGame);
    DialogSetVisible(lv_racingStartDIALOG, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarnPlayerAttack_Init () {
    gt_WarnPlayerAttack = TriggerCreate("gt_WarnPlayerAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Interceptors
//--------------------------------------------------------------------------------------------------
bool gt_Interceptors_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Interceptor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_playerUnits, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Interceptors_Init () {
    gt_Interceptors = TriggerCreate("gt_Interceptors_Func");
    TriggerAddEventUnitRegion(gt_Interceptors, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pylons Invulnerable
//--------------------------------------------------------------------------------------------------
bool gt_PylonsInvulnerable_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(gv_pylon01, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_pylon02, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_pylon03, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_pylon01, c_unitPropShieldsPercent, 100.0);
    UnitSetPropertyFixed(gv_pylon02, c_unitPropShieldsPercent, 100.0);
    UnitSetPropertyFixed(gv_pylon03, c_unitPropShieldsPercent, 100.0);
    UnitBehaviorAddPlayer(gv_pylon01, "DamageTakenNone", gv_pLAYER_USER, 1);
    UnitBehaviorAddPlayer(gv_pylon02, "DamageTakenNone", gv_pLAYER_USER, 1);
    UnitBehaviorAddPlayer(gv_pylon03, "DamageTakenNone", gv_pLAYER_USER, 1);
    UnitBehaviorAddPlayer(gv_pylon01, "Untargetable", gv_pLAYER_USER, 1);
    UnitBehaviorAddPlayer(gv_pylon02, "Untargetable", gv_pLAYER_USER, 1);
    UnitBehaviorAddPlayer(gv_pylon03, "Untargetable", gv_pLAYER_USER, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PylonsInvulnerable_Init () {
    gt_PylonsInvulnerable = TriggerCreate("gt_PylonsInvulnerable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pylons Vulnerable
//--------------------------------------------------------------------------------------------------
bool gt_PylonsVulnerable_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemovePlayer(gv_pylon01, "DamageTakenNone", gv_pLAYER_USER, 1);
    UnitBehaviorRemovePlayer(gv_pylon02, "DamageTakenNone", gv_pLAYER_USER, 1);
    UnitBehaviorRemovePlayer(gv_pylon03, "DamageTakenNone", gv_pLAYER_USER, 1);
    UnitBehaviorRemovePlayer(gv_pylon01, "Untargetable", gv_pLAYER_USER, 1);
    UnitBehaviorRemovePlayer(gv_pylon02, "Untargetable", gv_pLAYER_USER, 1);
    UnitBehaviorRemovePlayer(gv_pylon03, "Untargetable", gv_pLAYER_USER, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PylonsVulnerable_Init () {
    gt_PylonsVulnerable = TriggerCreate("gt_PylonsVulnerable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Dies
//--------------------------------------------------------------------------------------------------
bool gt_UnitDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_USER, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(gv_playerUnitsRound1, EventUnit()) == true)) {
        gv_lostUnitsRound1 += 1;
        BoardItemSetText(gv_board, 1, 1, (StringExternal("Param/Value/83E7D617") + StringExternal("Param/Value/73F9CA65") + IntToText(gv_lostUnitsRound1) + StringExternal("Param/Value/EDA2C9FB")));
    }
    else {
    }
    if ((UnitGroupHasUnit(gv_playerUnitsRound2, EventUnit()) == true)) {
        gv_lostUnitsRound2 += 1;
        BoardItemSetText(gv_board, 1, 2, (StringExternal("Param/Value/58E4B978") + StringExternal("Param/Value/74880600") + IntToText(gv_lostUnitsRound2) + StringExternal("Param/Value/24E864A3")));
    }
    else {
    }
    if ((UnitGroupHasUnit(gv_playerUnitsRound3, EventUnit()) == true)) {
        gv_lostUnitsRound3 += 1;
        BoardItemSetText(gv_board, 1, 3, (StringExternal("Param/Value/EB7D88CF") + StringExternal("Param/Value/D5729D03") + IntToText(gv_lostUnitsRound3) + StringExternal("Param/Value/2BCD47DB")));
    }
    else {
    }
    if ((gf_TotalScore() > gv_winningScoreSilver)) {
        ObjectiveSetState(gv_objectiveSurvive02, c_objectiveStateFailed);
    }
    else {
    }
    if ((gf_TotalScore() > gv_winningScoreGold)) {
        ObjectiveSetState(gv_objectiveSurvive03, c_objectiveStateFailed);
    }
    else {
    }
    BoardItemSetText(gv_board, 1, 4, (StringExternal("Param/Value/4418BAFF") + StringExternal("Param/Value/759ECCD9") + IntToText(gf_TotalScore()) + StringExternal("Param/Value/D1CDE1A9")));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitDies_Init () {
    gt_UnitDies = TriggerCreate("gt_UnitDies_Func");
    TriggerAddEventUnitDied(gt_UnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make Round 1 Score Dialog
//--------------------------------------------------------------------------------------------------
bool gt_MakeRound1ScoreDialog_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_allRoundsCompleted == true)) {
        if ((gv_lostUnitsRound1 < gv_lostUnitsRound1Best)) {
            gf_SaveScores();
            if ((gv_lostUnitsRound1 == 0)) {
                libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Success, StringExternal("Param/Value/5722B60F"), StringExternal("Param/Value/25C7A967"), (StringExternal("Param/Value/A119C644") + IntToText(gv_lostUnitsRound1)), StringExternal("Param/Value/B79A5065"), gt_WaitthengobacktoVictoryScreen);
                libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
            }
            else {
                libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Success, StringExternal("Param/Value/66B7020F"), StringExternal("Param/Value/71DDBD6E"), (StringExternal("Param/Value/330E8952") + IntToText(gv_lostUnitsRound1)), StringExternal("Param/Value/12409AE5"), gt_WaitthengobacktoVictoryScreen);
                libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
            }
        }
        else {
            libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Success, StringExternal("Param/Value/A01A9A42"), StringExternal("Param/Value/CB5C4ED6"), (StringExternal("Param/Value/5FDEEBDD") + IntToText(gv_lostUnitsRound1)), StringExternal("Param/Value/7E75FB6B"), gt_WaitthengobacktoVictoryScreen);
            libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        }
        gf_Achievements();
    }
    else {
        if ((gv_lostUnitsRound1 == 0)) {
            libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Success, StringExternal("Param/Value/D6BCDFA9"), StringExternal("Param/Value/72B18FBC"), (StringExternal("Param/Value/93BBC271") + IntToText(gv_lostUnitsRound1)), null, gt_WaittoStartRound2);
            libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        }
        else {
            libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Success, StringExternal("Param/Value/00CD1BD9"), StringExternal("Param/Value/8BA90B6B"), (StringExternal("Param/Value/9298C89F") + IntToText(gv_lostUnitsRound1)), null, gt_WaittoStartRound2);
            libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakeRound1ScoreDialog_Init () {
    gt_MakeRound1ScoreDialog = TriggerCreate("gt_MakeRound1ScoreDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wait to Start Round 2
//--------------------------------------------------------------------------------------------------
bool gt_WaittoStartRound2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libChal_gf_ShowHideChallengeWaveSuccessPanel(false);
    TriggerExecute(gt_ObjectiveSurviveUpdate, true, false);
    TriggerExecute(gt_SpawnRound2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WaittoStartRound2_Init () {
    gt_WaittoStartRound2 = TriggerCreate("gt_WaittoStartRound2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make Round 2 Score Dialog
//--------------------------------------------------------------------------------------------------
bool gt_MakeRound2ScoreDialog_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_allRoundsCompleted == true)) {
        if ((gv_lostUnitsRound2 < gv_lostUnitsRound2Best)) {
            gf_SaveScores();
            if ((gv_lostUnitsRound2 == 0)) {
                libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Success, StringExternal("Param/Value/7F1E21A4"), StringExternal("Param/Value/238C23C5"), (StringExternal("Param/Value/FBD2BCF5") + IntToText(gv_lostUnitsRound2)), StringExternal("Param/Value/056B6E17"), gt_WaitthengobacktoVictoryScreen);
                libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
            }
            else {
                libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Success, StringExternal("Param/Value/B610721C"), StringExternal("Param/Value/0FB9BCF5"), (StringExternal("Param/Value/F8BFC56B") + IntToText(gv_lostUnitsRound2)), StringExternal("Param/Value/0BE0349F"), gt_WaitthengobacktoVictoryScreen);
                libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
            }
        }
        else {
            libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Success, StringExternal("Param/Value/6059407C"), StringExternal("Param/Value/21433072"), (StringExternal("Param/Value/8DE5F703") + IntToText(gv_lostUnitsRound2)), StringExternal("Param/Value/B2A62CFA"), gt_WaitthengobacktoVictoryScreen);
            libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        }
        gf_Achievements();
    }
    else {
        if ((gv_lostUnitsRound2 == 0)) {
            libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Success, StringExternal("Param/Value/683C85B6"), StringExternal("Param/Value/103C0C00"), (StringExternal("Param/Value/E15EFA42") + IntToText(gv_lostUnitsRound2)), null, gt_WaittoStartRound3);
            libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        }
        else {
            libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Success, StringExternal("Param/Value/7CE79954"), StringExternal("Param/Value/2936623F"), (StringExternal("Param/Value/137AFA2D") + IntToText(gv_lostUnitsRound2)), null, gt_WaittoStartRound3);
            libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakeRound2ScoreDialog_Init () {
    gt_MakeRound2ScoreDialog = TriggerCreate("gt_MakeRound2ScoreDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wait to Start Round 3
//--------------------------------------------------------------------------------------------------
bool gt_WaittoStartRound3_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libChal_gf_ShowHideChallengeWaveSuccessPanel(false);
    TriggerExecute(gt_ObjectiveSurviveUpdate, true, false);
    TriggerExecute(gt_SpawnRound3, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WaittoStartRound3_Init () {
    gt_WaittoStartRound3 = TriggerCreate("gt_WaittoStartRound3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make Round 3 Score Dialog
//--------------------------------------------------------------------------------------------------
bool gt_MakeRound3ScoreDialog_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_allRoundsCompleted == true)) {
        if ((gv_lostUnitsRound3 < gv_lostUnitsRound3Best)) {
            gf_SaveScores();
            if ((gv_lostUnitsRound3 == 0)) {
                libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Success, StringExternal("Param/Value/DFDA285C"), StringExternal("Param/Value/296B7AAB"), (StringExternal("Param/Value/DFC8DE90") + IntToText(gv_lostUnitsRound3)), StringExternal("Param/Value/5FF4ECE9"), gt_WaitthengobacktoVictoryScreen);
                libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
            }
            else {
                libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Success, StringExternal("Param/Value/7D80C2BC"), StringExternal("Param/Value/E6296F83"), (StringExternal("Param/Value/80DBD1AC") + IntToText(gv_lostUnitsRound3)), StringExternal("Param/Value/C5EE58DA"), gt_WaitthengobacktoVictoryScreen);
                libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
            }
        }
        else {
            libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Success, StringExternal("Param/Value/0DBAB3C8"), StringExternal("Param/Value/BC250BDA"), (StringExternal("Param/Value/53A6CACC") + IntToText(gv_lostUnitsRound3)), StringExternal("Param/Value/50AF9CA7"), gt_WaitthengobacktoVictoryScreen);
            libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        }
    }
    else {
        if ((gv_lostUnitsRound3 == 0)) {
            libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Success, StringExternal("Param/Value/D233BB86"), StringExternal("Param/Value/827D62CD"), (StringExternal("Param/Value/7020DDE5") + IntToText(gv_lostUnitsRound3)), null, gt_WaittogotoVictory);
            libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        }
        else {
            libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Success, StringExternal("Param/Value/AF0D55D2"), StringExternal("Param/Value/1F2DCB2B"), (StringExternal("Param/Value/22C03683") + IntToText(gv_lostUnitsRound3)), null, gt_WaittogotoVictory);
            libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        }
    }
    gf_Achievements();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakeRound3ScoreDialog_Init () {
    gt_MakeRound3ScoreDialog = TriggerCreate("gt_MakeRound3ScoreDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wait to go to Victory
//--------------------------------------------------------------------------------------------------
bool gt_WaittogotoVictory_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libChal_gf_ShowHideChallengeWaveSuccessPanel(false);
    TriggerExecute(gt_ObjectiveSurviveUpdate, true, false);
    TriggerExecute(gt_FinishVictory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WaittogotoVictory_Init () {
    gt_WaittogotoVictory = TriggerCreate("gt_WaittogotoVictory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wait then go back to Victory Screen
//--------------------------------------------------------------------------------------------------
bool gt_WaitthengobacktoVictoryScreen_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_pylonDead == false)) {
        if ((gv_lostUnitsRound1 <= gv_lostUnitsRound1Best)) {
            gv_lostUnitsRound1Best = gv_lostUnitsRound1;
            gv_lostUnitsRound1 = gv_lostUnitsRound1Best;
        }
        else {
            if ((gv_allRoundsCompleted == true) && (gv_roundCount == 1)) {
                gv_lostUnitsRound1 = gv_lostUnitsRound1Best;
            }
            else {
            }
        }
        if ((gv_lostUnitsRound2 <= gv_lostUnitsRound2Best)) {
            gv_lostUnitsRound2Best = gv_lostUnitsRound2;
            gv_lostUnitsRound2 = gv_lostUnitsRound2Best;
        }
        else {
            if ((gv_allRoundsCompleted == true) && (gv_roundCount == 2)) {
                gv_lostUnitsRound2 = gv_lostUnitsRound2Best;
            }
            else {
            }
        }
        if ((gv_lostUnitsRound3 <= gv_lostUnitsRound3Best)) {
            gv_lostUnitsRound3Best = gv_lostUnitsRound3;
            gv_lostUnitsRound3 = gv_lostUnitsRound3Best;
        }
        else {
            if ((gv_allRoundsCompleted == true) && (gv_roundCount == 3)) {
                gv_lostUnitsRound3 = gv_lostUnitsRound3Best;
            }
            else {
            }
        }
    }
    else {
    }
    libChal_gf_ShowHideChallengeWaveSuccessPanel(false);
    TriggerExecute(gt_ObjectiveSurviveUpdate, true, false);
    TriggerExecute(gt_DialogScoreShow, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WaitthengobacktoVictoryScreen_Init () {
    gt_WaitthengobacktoVictoryScreen = TriggerCreate("gt_WaitthengobacktoVictoryScreen_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check for Cheating
//--------------------------------------------------------------------------------------------------
bool gt_CheckforCheating_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_cheatUsed = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheckforCheating_Init () {
    gt_CheckforCheating = TriggerCreate("gt_CheckforCheating_Func");
    TriggerAddEventCheatUsed(gt_CheckforCheating, c_playerAny, c_gameCheatAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add Ready Button Q
//--------------------------------------------------------------------------------------------------
bool gt_AddReadyButtonQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealerCreate(gv_pLAYER_USER, RegionPlayableMap());
    gv_revealer = VisRevealerLastCreated();
    TriggerQueueEnter();
    if ((gv_board == c_boardNone)) {
        BoardDestroy(gv_board);
        libChal_gf_ChallengeScoreWindowwithRounds(StringExternal("Param/Value/98210A08"), StringExternal("Param/Value/4950023D"), StringExternal("Param/Value/C90D1FEF"), StringExternal("Param/Value/E7F31366"), gv_lostUnitsRound1, gv_lostUnitsRound2, gv_lostUnitsRound3, gf_TotalScore());
        gv_board = BoardLastCreated();
        BoardItemSetText(gv_board, 1, 1, (StringExternal("Param/Value/997D9960") + StringExternal("Param/Value/74A320E6") + IntToText(gv_lostUnitsRound1) + StringExternal("Param/Value/FA4F2F1F")));
        BoardItemSetText(gv_board, 1, 2, (StringExternal("Param/Value/3FFA4F71") + StringExternal("Param/Value/B317F63C") + IntToText(gv_lostUnitsRound2) + StringExternal("Param/Value/4D1C4CDA")));
        BoardItemSetText(gv_board, 1, 3, (StringExternal("Param/Value/B8000F0C") + StringExternal("Param/Value/44DCD27A") + IntToText(gv_lostUnitsRound3) + StringExternal("Param/Value/C70317AB")));
        BoardItemSetText(gv_board, 1, 4, (StringExternal("Param/Value/D00F5387") + StringExternal("Param/Value/232A1741") + IntToText(gf_TotalScore()) + StringExternal("Param/Value/8AF99356")));
    }
    else {
    }
    if ((gv_roundCount == 0)) {
        BoardItemSetText(gv_board, 1, 1, (StringExternal("Param/Value/8A988AED") + StringExternal("Param/Value/D6686F7F") + IntToText(gv_lostUnitsRound1) + StringExternal("Param/Value/46E9AE59")));
        BoardItemSetText(gv_board, 1, 2, (StringExternal("Param/Value/D073A037") + StringExternal("Param/Value/BE5040A5") + IntToText(gv_lostUnitsRound2) + StringExternal("Param/Value/0E343199")));
        BoardItemSetText(gv_board, 1, 3, (StringExternal("Param/Value/AFD1730E") + StringExternal("Param/Value/341E9B1D") + IntToText(gv_lostUnitsRound3) + StringExternal("Param/Value/3531A4FD")));
    }
    else {
    }
    if ((gv_roundCount == 1)) {
        BoardItemSetText(gv_board, 1, 1, (StringExternal("Param/Value/6D6D8E46") + StringExternal("Param/Value/98621E7F") + IntToText(gv_lostUnitsRound1) + StringExternal("Param/Value/A1C1CA3B")));
        BoardItemSetText(gv_board, 1, 2, (StringExternal("Param/Value/D75640A7") + StringExternal("Param/Value/24D798CA") + IntToText(gv_lostUnitsRound2) + StringExternal("Param/Value/820F13C6")));
        BoardItemSetText(gv_board, 1, 3, (StringExternal("Param/Value/2E19AFFA") + StringExternal("Param/Value/34C6C2CF") + IntToText(gv_lostUnitsRound3) + StringExternal("Param/Value/389F0792")));
    }
    else {
    }
    if ((gv_roundCount == 2)) {
        BoardItemSetText(gv_board, 1, 1, (StringExternal("Param/Value/2D007B28") + StringExternal("Param/Value/A17F8B01") + IntToText(gv_lostUnitsRound1) + StringExternal("Param/Value/3507F0DD")));
        BoardItemSetText(gv_board, 1, 2, (StringExternal("Param/Value/533C8808") + StringExternal("Param/Value/ABF59791") + IntToText(gv_lostUnitsRound2) + StringExternal("Param/Value/940651C8")));
        BoardItemSetText(gv_board, 1, 3, (StringExternal("Param/Value/C233EC17") + StringExternal("Param/Value/B40A9A1B") + IntToText(gv_lostUnitsRound3) + StringExternal("Param/Value/5DFCEDCF")));
    }
    else {
    }
    BoardItemSetText(gv_board, 1, 4, (StringExternal("Param/Value/954C8EB6") + StringExternal("Param/Value/3912DF8E") + IntToText(gf_TotalScore()) + StringExternal("Param/Value/77E0D852")));
    libChal_gf_ChallengeReadyButton(gv_readyButton, gv_pLAYER_USER, gt_ReadyPressed);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddReadyButtonQ_Init () {
    gt_AddReadyButtonQ = TriggerCreate("gt_AddReadyButtonQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ready Pressed
//--------------------------------------------------------------------------------------------------
bool gt_ReadyPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_unusedUnits;
    unitgroup lv_unitsByPylon1;
    unitgroup lv_unitsByPylon2;
    unitgroup lv_unitsByPylon3;

    // Variable Initialization
    lv_unusedUnits = UnitGroupEmpty();
    lv_unitsByPylon1 = UnitGroupEmpty();
    lv_unitsByPylon2 = UnitGroupEmpty();
    lv_unitsByPylon3 = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_USER, null, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((RegionContainsPoint(RegionFromId(24), UnitGetPosition(UnitGroupLoopCurrent())) == false) && (RegionContainsPoint(RegionFromId(26), UnitGetPosition(UnitGroupLoopCurrent())) == false) && (RegionContainsPoint(RegionFromId(27), UnitGetPosition(UnitGroupLoopCurrent())) == false)) {
            UnitGroupAdd(lv_unusedUnits, UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_USER, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(lv_unitsByPylon1, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_USER, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(lv_unitsByPylon2, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_USER, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(lv_unitsByPylon3, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    if ((UnitGroupCount(lv_unusedUnits, c_unitCountAlive) >= 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (StringExternal("Param/Value/FADFE21E") + StringExternal("Param/Value/5DB7E7A6") + IntToText(UnitGroupCount(lv_unusedUnits, c_unitCountAlive)) + StringExternal("Param/Value/ABF0A93D") + StringExternal("Param/Value/107B5B54") + StringExternal("Param/Value/51F7A041")));
        TimerStart(gv_textTimer, 8.0, false, c_timeReal);
        return true;
    }
    else {
    }
    if (((UnitGroupCount(lv_unitsByPylon1, c_unitCountAlive) == 0) || (UnitGroupCount(lv_unitsByPylon2, c_unitCountAlive) == 0) || (UnitGroupCount(lv_unitsByPylon3, c_unitCountAlive) == 0))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (StringExternal("Param/Value/5B27F18F") + StringExternal("Param/Value/EE014179") + StringExternal("Param/Value/144E9EAD") + StringExternal("Param/Value/C9731453")));
        TimerStart(gv_textTimer, 8.0, false, c_timeReal);
        return true;
    }
    else {
    }
    libNtve_gf_HideScreenButton(false, gv_readyButton);
    VisRevealerDestroy(gv_revealer);
    gv_ready = true;
    TimerStart(gv_textTimer, 0.0, false, c_timeReal);
    UnitGroupLoopBegin(UnitGroupFilterRegion(gv_playerUnits, RegionFromId(50), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_playerUnitsArea1, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFilterRegion(gv_playerUnits, RegionFromId(51), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_playerUnitsArea2, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFilterRegion(gv_playerUnits, RegionFromId(49), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_playerUnitsArea3, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReadyPressed_Init () {
    gt_ReadyPressed = TriggerCreate("gt_ReadyPressed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Text
//--------------------------------------------------------------------------------------------------
bool gt_RemoveText_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveText_Init () {
    gt_RemoveText = TriggerCreate("gt_RemoveText_Func");
    TriggerAddEventTimer(gt_RemoveText, gv_textTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObjectiveSurvive Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurviveCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveCreate(TextReplaceWord(StringExternal("Param/Value/54C42162"), StringExternal("Param/Value/56D79116"), IntToText(gv_roundCount), c_stringReplaceAll, c_stringCase), StringExternal("Param/Value/D651CBDC"), c_objectiveStateActive, true);
    gv_objectiveSurvive01 = ObjectiveLastCreated();
    PingSetVisible(gv_buildingPing01, true);
    PingSetVisible(gv_buildingPing02, true);
    PingSetVisible(gv_buildingPing03, true);
    PingSetVisible(gv_enemyPing01, true);
    PingSetVisible(gv_enemyPing02, true);
    PingSetVisible(gv_enemyPing03, true);
    Wait(2.0, c_timeGame);
    ObjectiveCreate(TextReplaceWord((StringExternal("Param/Value/203A7B8C") + gv_ratingTextSilver + StringExternal("Param/Value/51853534")), StringExternal("Param/Value/52B42A7D"), IntToText(gv_winningScoreSilver), c_stringReplaceAll, c_stringCase), TextReplaceWord(StringExternal("Param/Value/E6A97E03"), StringExternal("Param/Value/6F02CE23"), IntToText(gv_winningScoreSilver), c_stringReplaceAll, c_stringCase), c_objectiveStateActive, false);
    gv_objectiveSurvive02 = ObjectiveLastCreated();
    Wait(2.0, c_timeGame);
    ObjectiveCreate(TextReplaceWord((StringExternal("Param/Value/52A3B2DA") + gv_ratingTextGold + StringExternal("Param/Value/10814915")), StringExternal("Param/Value/6128B216"), IntToText(gv_winningScoreGold), c_stringReplaceAll, c_stringCase), TextReplaceWord(StringExternal("Param/Value/B73A69D3"), StringExternal("Param/Value/BE8D77BE"), IntToText(gv_winningScoreGold), c_stringReplaceAll, c_stringCase), c_objectiveStateActive, false);
    gv_objectiveSurvive03 = ObjectiveLastCreated();
    Wait(2.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurviveCreate_Init () {
    gt_ObjectiveSurviveCreate = TriggerCreate("gt_ObjectiveSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObjectiveSurvive Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurviveUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveSetName(gv_objectiveSurvive01, TextReplaceWord(StringExternal("Param/Value/16E9842C"), StringExternal("Param/Value/524D84D1"), IntToText(gv_roundCount), c_stringReplaceAll, c_stringCase));
    if ((gv_roundCount == 3)) {
        ObjectiveSetState(gv_objectiveSurvive01, c_objectiveStateCompleted);
    }
    else {
    }
    if ((gv_roundCount == 3) && (gf_TotalScore() <= gv_winningScoreSilver)) {
        ObjectiveSetState(gv_objectiveSurvive02, c_objectiveStateCompleted);
    }
    else {
    }
    if ((gv_roundCount == 3) && (gf_TotalScore() <= gv_winningScoreGold)) {
        ObjectiveSetState(gv_objectiveSurvive03, c_objectiveStateCompleted);
    }
    else {
    }
    if ((gf_TotalScore() > gv_winningScoreSilver)) {
        ObjectiveSetState(gv_objectiveSurvive02, c_objectiveStateFailed);
    }
    else {
    }
    if ((gf_TotalScore() > gv_winningScoreGold)) {
        ObjectiveSetState(gv_objectiveSurvive03, c_objectiveStateFailed);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurviveUpdate_Init () {
    gt_ObjectiveSurviveUpdate = TriggerCreate("gt_ObjectiveSurviveUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObjectiveSurvive Protect
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurviveProtect_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_COMPUTER1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_attackers, c_unitCountAlive) == 0)) {
        ObjectiveSetState(gv_objectiveSurvive01, c_objectiveStateCompleted);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurviveProtect_Init () {
    gt_ObjectiveSurviveProtect = TriggerCreate("gt_ObjectiveSurviveProtect_Func");
    TriggerEnable(gt_ObjectiveSurviveProtect, false);
    TriggerAddEventUnitDied(gt_ObjectiveSurviveProtect, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObjectiveSurvive Discover Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurviveDiscoverQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveSurviveCreate, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurviveDiscoverQ_Init () {
    gt_ObjectiveSurviveDiscoverQ = TriggerCreate("gt_ObjectiveSurviveDiscoverQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObjectiveSurvive Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurviveComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveSurviveCreate, true, false);
    ObjectiveSetState(gv_objectiveSurvive01, c_objectiveStateCompleted);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurviveComplete_Init () {
    gt_ObjectiveSurviveComplete = TriggerCreate("gt_ObjectiveSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObjectiveSurvive Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurviveFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveSurviveCreate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurviveFailed_Init () {
    gt_ObjectiveSurviveFailed = TriggerCreate("gt_ObjectiveSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Final Round 1
//--------------------------------------------------------------------------------------------------
bool gt_FinalRound1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_attackers, c_unitCountAlive) == 0) && (TriggerIsEnabled(TriggerGetCurrent()) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_PylonsInvulnerable, true, false);
        Wait(0.1, c_timeGame);
        UnitPauseAll(true);
        Wait(2.0, c_timeGame);
        gv_roundCount = 1;
        TriggerExecute(gt_ObjectiveSurviveUpdate, true, false);
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_MakeRound1ScoreDialog, true, false);
    }
    else {
    }
    if ((UnitGroupCount(gv_playerUnits, c_unitCountAlive) == 0) && (UnitGetOwner(EventUnit()) == gv_pLAYER_USER)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_FinalRound1, false);
        TriggerEnable(gt_FinalRound2, false);
        TriggerEnable(gt_FinalRound3, false);
        TriggerExecute(gt_FinishDefeatUnitsDead, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinalRound1_Init () {
    gt_FinalRound1 = TriggerCreate("gt_FinalRound1_Func");
    TriggerEnable(gt_FinalRound1, false);
    TriggerAddEventUnitDied(gt_FinalRound1, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Final Round 2
//--------------------------------------------------------------------------------------------------
bool gt_FinalRound2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_attackers, c_unitCountAlive) == 0) && (TriggerIsEnabled(TriggerGetCurrent()) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_PylonsInvulnerable, true, false);
        Wait(0.1, c_timeGame);
        UnitPauseAll(true);
        Wait(2.0, c_timeGame);
        gv_roundCount = 2;
        TriggerExecute(gt_ObjectiveSurviveUpdate, true, false);
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_MakeRound2ScoreDialog, true, false);
    }
    else {
    }
    if ((UnitGroupCount(gv_playerUnits, c_unitCountAlive) == 0) && (UnitGetOwner(EventUnit()) == gv_pLAYER_USER)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_FinalRound1, false);
        TriggerEnable(gt_FinalRound2, false);
        TriggerEnable(gt_FinalRound3, false);
        TriggerExecute(gt_FinishDefeatUnitsDead, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinalRound2_Init () {
    gt_FinalRound2 = TriggerCreate("gt_FinalRound2_Func");
    TriggerEnable(gt_FinalRound2, false);
    TriggerAddEventUnitDied(gt_FinalRound2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Final Round 3
//--------------------------------------------------------------------------------------------------
bool gt_FinalRound3_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_attackers, c_unitCountAlive) == 0) && (TriggerIsEnabled(TriggerGetCurrent()) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_PylonsInvulnerable, true, false);
        Wait(0.1, c_timeGame);
        UnitPauseAll(true);
        Wait(2.0, c_timeGame);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_COMPUTER2, "SiegeTech", 0);
        TriggerEnable(gt_FinishDefeatPylonBeforeVictory, false);
        gv_roundCount = 3;
        TriggerExecute(gt_ObjectiveSurviveUpdate, true, false);
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_MakeRound3ScoreDialog, true, false);
    }
    else {
    }
    if ((UnitGroupCount(gv_playerUnits, c_unitCountAlive) == 0) && (UnitGetOwner(EventUnit()) == gv_pLAYER_USER)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_FinalRound1, false);
        TriggerEnable(gt_FinalRound2, false);
        TriggerEnable(gt_FinalRound3, false);
        TriggerExecute(gt_FinishDefeatUnitsDead, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinalRound3_Init () {
    gt_FinalRound3 = TriggerCreate("gt_FinalRound3_Func");
    TriggerEnable(gt_FinalRound3, false);
    TriggerAddEventUnitDied(gt_FinalRound3, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Finish Victory
//--------------------------------------------------------------------------------------------------
bool gt_FinishVictory_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_allRoundsCompleted = true;
    gf_SaveScores();
    Wait(0.1, c_timeGame);
    UnitPauseAll(true);
    TriggerStop(gt_SpawnRound1);
    TriggerStop(gt_SpawnRound2);
    TriggerStop(gt_SpawnRound3);
    TriggerQueueClear(c_triggerQueueRetain);
    TriggerExecute(gt_ObjectiveSurviveComplete, true, false);
    UISetChallengeCompleted(PlayerGroupSingle(gv_pLAYER_USER), libChal_gf_ChallengeName(libChal_gf_CurrentChallengeType()), true);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_DialogScoreShow, true, false);
    TriggerEnable(gt_FinishDefeatPylonAfterVictory, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinishVictory_Init () {
    gt_FinishVictory = TriggerCreate("gt_FinishVictory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Finish Defeat Pylon Before Victory
//--------------------------------------------------------------------------------------------------
bool gt_FinishDefeatPylonBeforeVictory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Pylon"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_FinalRound1, false);
    TriggerEnable(gt_FinalRound2, false);
    TriggerEnable(gt_FinalRound3, false);
    gv_allRoundsCompleted = false;
    gv_pylonDead = true;
    Wait(2.0, c_timeReal);
    if ((gv_roundCount == 0)) {
        libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Failure, StringExternal("Param/Value/252E6101"), StringExternal("Param/Value/6C126CAD"), StringExternal("Param/Value/293C8E58"), null, gt_WaitthengobacktoVictoryScreen);
        libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        gv_retryCountRound01 = (gv_retryCountRound01 + 1);
    }
    else {
    }
    if ((gv_roundCount == 1)) {
        libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Failure, StringExternal("Param/Value/212F31CD"), StringExternal("Param/Value/ECE944FB"), StringExternal("Param/Value/DC1FF7B5"), null, gt_WaitthengobacktoVictoryScreen);
        libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        gv_retryCountRound02 = (gv_retryCountRound02 + 1);
    }
    else {
    }
    if ((gv_roundCount == 2)) {
        libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Failure, StringExternal("Param/Value/428E377E"), StringExternal("Param/Value/37FA9373"), StringExternal("Param/Value/1F9EF74B"), null, gt_WaitthengobacktoVictoryScreen);
        libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        gv_retryCountRound03 = (gv_retryCountRound03 + 1);
    }
    else {
    }
    UnitPauseAll(true);
    TriggerStop(gt_SpawnRound1);
    TriggerStop(gt_SpawnRound2);
    TriggerStop(gt_SpawnRound3);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRetain);
    TriggerExecute(gt_ObjectiveSurviveFailed, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinishDefeatPylonBeforeVictory_Init () {
    gt_FinishDefeatPylonBeforeVictory = TriggerCreate("gt_FinishDefeatPylonBeforeVictory_Func");
    TriggerEnable(gt_FinishDefeatPylonBeforeVictory, false);
    TriggerAddEventUnitDied(gt_FinishDefeatPylonBeforeVictory, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Finish Defeat Pylon After Victory
//--------------------------------------------------------------------------------------------------
bool gt_FinishDefeatPylonAfterVictory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Pylon"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_FinalRound1, false);
    TriggerEnable(gt_FinalRound2, false);
    TriggerEnable(gt_FinalRound3, false);
    gv_pylonDead = true;
    Wait(2.0, c_timeReal);
    if ((gv_roundCount == 0)) {
        gv_lostUnitsRound1 = gv_lostUnitsRound1Best;
        libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Failure, StringExternal("Param/Value/BB4E79F1"), StringExternal("Param/Value/6BFB6774"), StringExternal("Param/Value/D17026C1"), null, gt_WaitthengobacktoVictoryScreen);
        libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
    }
    else {
    }
    if ((gv_roundCount == 1)) {
        gv_lostUnitsRound2 = gv_lostUnitsRound2Best;
        libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Failure, StringExternal("Param/Value/DA778A96"), StringExternal("Param/Value/F3F17B02"), StringExternal("Param/Value/DDFB895C"), null, gt_WaitthengobacktoVictoryScreen);
        libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
    }
    else {
    }
    if ((gv_roundCount == 2)) {
        gv_lostUnitsRound3 = gv_lostUnitsRound3Best;
        libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Failure, StringExternal("Param/Value/C8B7F2B9"), StringExternal("Param/Value/77344B88"), StringExternal("Param/Value/DE180285"), null, gt_WaitthengobacktoVictoryScreen);
        libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
    }
    else {
    }
    TriggerExecute(gt_ObjectiveSurviveUpdate, true, false);
    UnitPauseAll(true);
    TriggerStop(gt_SpawnRound1);
    TriggerStop(gt_SpawnRound2);
    TriggerStop(gt_SpawnRound3);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRetain);
    TriggerExecute(gt_ObjectiveSurviveFailed, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinishDefeatPylonAfterVictory_Init () {
    gt_FinishDefeatPylonAfterVictory = TriggerCreate("gt_FinishDefeatPylonAfterVictory_Func");
    TriggerEnable(gt_FinishDefeatPylonAfterVictory, false);
    TriggerAddEventUnitDied(gt_FinishDefeatPylonAfterVictory, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Finish Defeat Units Dead
//--------------------------------------------------------------------------------------------------
bool gt_FinishDefeatUnitsDead_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitPauseAll(true);
    TriggerStop(gt_SpawnRound1);
    TriggerStop(gt_SpawnRound2);
    TriggerStop(gt_SpawnRound3);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRetain);
    Wait(2.0, c_timeReal);
    libChal_gf_DisplayChallengeMessage(PlayerGroupAll(), libChal_ge_CampaignMessageType_ChallengeFailed, StringExternal("Param/Value/BFB48B1F"), libChal_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libChal_gv_challengeObjectiveDelay, c_timeReal);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_ObjectiveSurviveFailed, true, false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_DialogScoreShow, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinishDefeatUnitsDead_Init () {
    gt_FinishDefeatUnitsDead = TriggerCreate("gt_FinishDefeatUnitsDead_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Counters Q 
//--------------------------------------------------------------------------------------------------
bool gt_TipCountersQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/7C514131"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/2C943937"), StringExternal("Param/Value/29E9F2A9"), "Assets\\Textures\\btn-tips-counter.dds");
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipCountersQ_Init () {
    gt_TipCountersQ = TriggerCreate("gt_TipCountersQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    libNtve_gf_GlobalCinematicSetting(true);
    TriggerExecute(gt_ResetPlayField, true, false);
    Wait(0.5, c_timeGame);
    GameTimeOfDayPause(true);
    PlayerSetState(gv_pLAYER_USER, c_playerStateXPGain, false);
    UnitPauseAll(false);
    UnitGroupLoopBegin(gv_playerUnitsRound3);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_playerUnitsRound2);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_playerUnitsRound1);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_PlayerUnitsRound1, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnEnemyUnitsForArea1(15, "Hellion", RegionFromId(2));
    gf_SpawnEnemyUnitsForArea2(50, "Marine", RegionFromId(4));
    gf_SpawnEnemyUnitsForArea3(12, "Marauder", RegionFromId(5));
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(59), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(63), SoundLengthSync(SoundLink("ChallengescombinedExecutor00015", -1)), -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_introCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    // Transmission - SoundLink("ChallengescombinedExecutor00015", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft), SoundLink("ChallengescombinedExecutor00015", 0), 0.0, c_transmissionDurationAdd, true);
    TriggerExecute(gt_IntroPylonPan, true, false);
    // Transmission - SoundLink("ChallengescombinedExecutor00016", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft), SoundLink("ChallengescombinedExecutor00016", 0), 0.0, c_transmissionDurationAdd, true);
    // Transmission - SoundLink("ChallengescombinedExecutor00017", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft), SoundLink("ChallengescombinedExecutor00017", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(64), 0.0, -1, 10, true);
    // Transmission - SoundLink("ChallengescombinedExecutor00018", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft), SoundLink("ChallengescombinedExecutor00018", 0), 0.0, c_transmissionDurationAdd, false);
    Wait((SoundLengthSync(SoundLink("ChallengescombinedExecutor00018", -1)) * 0.35), c_timeReal);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(66), 0.0, -1, 10, true);
    Wait((SoundLengthSync(SoundLink("ChallengescombinedExecutor00018", -1)) * 0.35), c_timeReal);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(67), 0.0, -1, 10, true);
    Wait((SoundLengthSync(SoundLink("ChallengescombinedExecutor00018", -1)) * 0.35), c_timeReal);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(68), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(49), SoundLengthSync(SoundLink("ChallengescombinedExecutor00019", -1)), -1, 10, true);
    // Transmission - SoundLink("ChallengescombinedExecutor00019", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft), SoundLink("ChallengescombinedExecutor00019", 0), 0.0, c_transmissionDurationAdd, true);
    gv_introCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Pylon Pan
//--------------------------------------------------------------------------------------------------
bool gt_IntroPylonPan_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_totalDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    // Transmission - SoundLink("ChallengescombinedExecutor00016", -1)
    // Transmission - SoundLink("ChallengescombinedExecutor00017", -1)
    lv_totalDuration = ((SoundLengthSync(SoundLink("ChallengescombinedExecutor00016", -1)) + SoundLengthSync(SoundLink("ChallengescombinedExecutor00017", -1))) - 1.0);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(56), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(57), (lv_totalDuration * 0.5), -1, 0, true);
    Wait((lv_totalDuration * 0.5), c_timeGame);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(58), (lv_totalDuration * 0.5), -1, 10, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroPylonPan_Init () {
    gt_IntroPylonPan = TriggerCreate("gt_IntroPylonPan_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_IntroPylonPan);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_COMPUTER1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_USER, c_playerStateXPGain, true);
    VisExploreArea(gv_pLAYER_USER, RegionEntireMap(), false, false);
    VisRevealerCreate(gv_pLAYER_USER, RegionFromId(16));
    VisRevealerCreate(gv_pLAYER_USER, RegionFromId(12));
    VisRevealerCreate(gv_pLAYER_USER, RegionFromId(17));
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.0);
    libNtve_gf_GlobalCinematicSetting(false);
    UISetMode(PlayerGroupAll(), c_uiModeConsole, 1.0);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(49), 1.0, -1, 10, true);
    GameSetSpeedLocked(true);
    GameSetSpeedValue(c_gameSpeedNormal);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_SpawnRound1, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Players_Init();
    gt_Init01aTechnology_Init();
    gt_Init02Units_Init();
    gt_Init03Music_Init();
    gt_Init04Environment_Init();
    gt_Init05Hints_Init();
    gt_Init06MapSettings_Init();
    gt_ButtonChosenLeaveGame_Init();
    gt_ButtonChosenRetryRound1_Init();
    gt_ButtonChosenRetryRound2_Init();
    gt_ButtonChosenRetryRound3_Init();
    gt_DialogScoreShow_Init();
    gt_ResetPlayField_Init();
    gt_SpawnRound1_Init();
    gt_SpawnRound2_Init();
    gt_SpawnRound3_Init();
    gt_PlayerUnitsRound1_Init();
    gt_PlayerUnitsRound2_Init();
    gt_PlayerUnitsRound3_Init();
    gt_VikingsTransform_Init();
    gt_TurnAllianceSettingOn_Init();
    gt_TurnAllianceSettingOff_Init();
    gt_StartAI_Init();
    gt_WarnPlayerAttack_Init();
    gt_Interceptors_Init();
    gt_PylonsInvulnerable_Init();
    gt_PylonsVulnerable_Init();
    gt_UnitDies_Init();
    gt_MakeRound1ScoreDialog_Init();
    gt_WaittoStartRound2_Init();
    gt_MakeRound2ScoreDialog_Init();
    gt_WaittoStartRound3_Init();
    gt_MakeRound3ScoreDialog_Init();
    gt_WaittogotoVictory_Init();
    gt_WaitthengobacktoVictoryScreen_Init();
    gt_CheckforCheating_Init();
    gt_AddReadyButtonQ_Init();
    gt_ReadyPressed_Init();
    gt_RemoveText_Init();
    gt_ObjectiveSurviveCreate_Init();
    gt_ObjectiveSurviveUpdate_Init();
    gt_ObjectiveSurviveProtect_Init();
    gt_ObjectiveSurviveDiscoverQ_Init();
    gt_ObjectiveSurviveComplete_Init();
    gt_ObjectiveSurviveFailed_Init();
    gt_FinalRound1_Init();
    gt_FinalRound2_Init();
    gt_FinalRound3_Init();
    gt_FinishVictory_Init();
    gt_FinishDefeatPylonBeforeVictory_Init();
    gt_FinishDefeatPylonAfterVictory_Init();
    gt_FinishDefeatUnitsDead_Init();
    gt_TipCountersQ_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroPylonPan_Init();
    gt_IntroCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
