//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Rush Defense
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "LibChal"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libChal_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_USER = 1;
const int gv_p2_ENEMY_ZERG = 2;
const int gv_p3_ENEMY_PROTOSS = 3;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
playergroup gv_allEnemyPlayers;
bool gv_inCinematic;
bool gv_gameOver;
bool gv_watchedIntroCinematicZerg;
bool gv_watchedIntroCinematicProtoss;
bool gv_playingReplay;
text gv_ratingTextBronze;
text gv_ratingTextSilver;
text gv_ratingTextGold;
int gv_time;
int gv_currentRoundPlayerDeaths;
int gv_totalPlayerDeaths;
int gv_leaderboard;
int gv_zerglingRushScoreBest;
int gv_zerglingRushScoreCurrent;
int gv_zerglingRushScorePrevious;
int gv_protossRushScoreBest;
int gv_protossRushScoreCurrent;
int gv_protossRushScorePrevious;
int gv_zerglingWaveSize;
int gv_silverLosses;
int gv_goldLosses;
int gv_protossStructures;
text gv_waveText;
int gv_scorePrevious;
int gv_scoreCurrent;
bool gv_protossPlayed;
bool gv_currentlyPlayingProtoss;
bool gv_victory;
bool gv_countProtossBuildings;
point[31] gv_mineralPositions;
point[31] gv_vespenePositions;
timer gv_prepTimer;
int gv_prepTimerWindow;
int gv_objectiveRushDefenseCompleteZergRush;
int gv_objectiveRushDefenseCompleteProtossRush;
int gv_objectiveRushDefenseSilver;
int gv_objectiveRushDefenseGold;
text gv_ratingText;
int gv_retryCountZerg;
int gv_retryCountProtoss;
bool gv_cheatUsed;
bool gv_introCinematicZergCompleted;
unitgroup gv_cineZerglings;
unitgroup gv_cinePlayerUnitsWorkers;
unitgroup gv_cinePlayerUnitsAttackers;
unitgroup gv_cinePlayerUnitsRepair;
unit gv_supplyDepot;
bool gv_introCinematicProtossCompleted;
unitgroup gv_cineProtoss;
unitgroup gv_cinePlayerUnitsWorkers2;
unitgroup gv_cinePlayerUnitsAttackers2;
unitgroup gv_cinePlayerUnitsRepair2;
unit gv_supplyDepot2;
unit gv_bunker;
unit gv_marine01;
unit gv_marine02;

void InitGlobals () {
    int init_i;

    gv_allEnemyPlayers = PlayerGroupEmpty();
    gv_inCinematic = false;
    gv_gameOver = false;
    gv_watchedIntroCinematicZerg = false;
    gv_watchedIntroCinematicProtoss = false;
    gv_playingReplay = false;
    gv_ratingTextBronze = StringExternal("Param/Value/F2831022");
    gv_ratingTextSilver = StringExternal("Param/Value/F614B8C3");
    gv_ratingTextGold = StringExternal("Param/Value/C9EC0380");
    gv_time = 0;
    gv_currentRoundPlayerDeaths = 0;
    gv_totalPlayerDeaths = 0;
    gv_leaderboard = c_boardNone;
    gv_zerglingRushScoreBest = -1;
    gv_zerglingRushScoreCurrent = 0;
    gv_zerglingRushScorePrevious = 0;
    gv_protossRushScoreBest = -1;
    gv_protossRushScoreCurrent = 0;
    gv_protossRushScorePrevious = 0;
    gv_zerglingWaveSize = 22;
    gv_silverLosses = 16;
    gv_goldLosses = 9;
    gv_protossStructures = 0;
    gv_waveText = null;
    gv_scorePrevious = 100;
    gv_scoreCurrent = 0;
    gv_protossPlayed = false;
    gv_currentlyPlayingProtoss = false;
    gv_victory = false;
    gv_countProtossBuildings = false;
    init_i = 0;
    while (init_i <= 30) {
        gv_mineralPositions[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 30) {
        gv_vespenePositions[init_i] = null;
        init_i = init_i + 1;
    }
    gv_prepTimer = TimerCreate();
    gv_prepTimerWindow = c_timerWindowNone;
    gv_objectiveRushDefenseCompleteZergRush = c_invalidObjectiveId;
    gv_objectiveRushDefenseCompleteProtossRush = c_invalidObjectiveId;
    gv_objectiveRushDefenseSilver = c_invalidObjectiveId;
    gv_objectiveRushDefenseGold = c_invalidObjectiveId;
    gv_ratingText = null;
    gv_retryCountZerg = 0;
    gv_retryCountProtoss = 0;
    gv_cheatUsed = false;
    gv_introCinematicZergCompleted = false;
    gv_cineZerglings = UnitGroupEmpty();
    gv_cinePlayerUnitsWorkers = UnitGroupEmpty();
    gv_cinePlayerUnitsAttackers = UnitGroupEmpty();
    gv_cinePlayerUnitsRepair = UnitGroupEmpty();
    gv_supplyDepot = null;
    gv_introCinematicProtossCompleted = false;
    gv_cineProtoss = UnitGroupEmpty();
    gv_cinePlayerUnitsWorkers2 = UnitGroupEmpty();
    gv_cinePlayerUnitsAttackers2 = UnitGroupEmpty();
    gv_cinePlayerUnitsRepair2 = UnitGroupEmpty();
    gv_supplyDepot2 = null;
    gv_bunker = null;
    gv_marine01 = null;
    gv_marine02 = null;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_Achievements ();
void gf_SaveScore ();
void gf_SetTotalPlayerDeaths ();
void gf_UpdateScoreUI (int lp_score);
void gf_UNUSEDTEXTSTRINGS ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Players;
trigger gt_Init02Units;
trigger gt_Init03Music;
trigger gt_Init04Environment;
trigger gt_Init05Hints;
trigger gt_Init06MapSettings;
trigger gt_StartGameplayZerglingRush;
trigger gt_WarnPlayerZerglingRush;
trigger gt_ZergAttackWaves;
trigger gt_ZerglingsorPlayerUnitsDie;
trigger gt_StartGameplayGatewayRush;
trigger gt_WarnPlayerGatewayRush;
trigger gt_ProtossAttackWaves;
trigger gt_ProtossChronoBoost;
trigger gt_NewProtossBuilding;
trigger gt_SuicideZealots;
trigger gt_ProtossorPlayerUnitsDie;
trigger gt_CreateLeaderboardZerg;
trigger gt_UpdateLeaderboardZerg;
trigger gt_CreateLeaderboardProtoss;
trigger gt_UpdateLeaderboardProtoss;
trigger gt_CheckforCheating;
trigger gt_StartAI;
trigger gt_UnlimitedAIResources;
trigger gt_RestartChallengeZerg;
trigger gt_RestartChallengeProtoss;
trigger gt_ResetPlayField;
trigger gt_ResetUpgrades;
trigger gt_Replaceallresources;
trigger gt_FinishVictory;
trigger gt_FinishDefeat;
trigger gt_BacktoVictoryScreen;
trigger gt_LeaveGame;
trigger gt_ObjectiveRushDefenseCreateQ;
trigger gt_ObjectiveRushDefenseUpdate;
trigger gt_DisplayTipsZerg;
trigger gt_TipSCVCombatQ;
trigger gt_DisplayTipsProtoss;
trigger gt_TipBunkerQ;
trigger gt_HintRepairQ;
trigger gt_HintDestroyingtheGatewaysQ;
trigger gt_ZergIntroQ;
trigger gt_ZergIntroSetup;
trigger gt_ZergIntroCinematic;
trigger gt_ZergIntroSCVMicro;
trigger gt_ZergIntroCinematicEnd;
trigger gt_ZergIntroCleanup;
trigger gt_ProtossIntroQ;
trigger gt_ProtossIntroSetup;
trigger gt_ProtossIntroCinematic;
trigger gt_ProtossIntroCinematicEnd;
trigger gt_ProtossIntroCleanup;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_Achievements () {
    // Implementation
    gv_ratingText = (StringExternal("Param/Value/423F2FCC") + gv_ratingTextBronze);
    AchievementAward(gv_pLAYER_USER, "Challenge_RushDefense_Basic");
    if ((gv_totalPlayerDeaths <= gv_silverLosses)) {
        gv_ratingText = (StringExternal("Param/Value/EC05A243") + gv_ratingTextSilver);
        AchievementAward(gv_pLAYER_USER, "Challenge_RushDefense_Mastery");
    }
    else {
    }
    if ((gv_totalPlayerDeaths <= gv_goldLosses)) {
        gv_ratingText = (StringExternal("Param/Value/68628298") + gv_ratingTextGold);
        AchievementAward(gv_pLAYER_USER, "Challenge_RushDefense_Dominance");
    }
    else {
    }
}

void gf_SaveScore () {
    // Implementation
    if ((gv_cheatUsed == false)) {
        if ((libChal_gf_ChallengeScoreFromBank(5) <= -1)) {
            gf_UpdateScoreUI((gv_zerglingRushScoreBest + gv_protossRushScoreBest));
            libChal_gf_SaveChallengeScoreToBank(5, (gv_zerglingRushScoreBest + gv_protossRushScoreBest));
        }
        else {
            if ((libChal_gf_ChallengeScoreFromBank(5) >= (gv_zerglingRushScoreBest + gv_protossRushScoreBest))) {
                gf_UpdateScoreUI((gv_zerglingRushScoreBest + gv_protossRushScoreBest));
                libChal_gf_SaveChallengeScoreToBank(5, (gv_zerglingRushScoreBest + gv_protossRushScoreBest));
            }
            else {
                gf_UpdateScoreUI(libChal_gf_ChallengeScoreFromBank(libChal_gf_CurrentChallengeType()));
            }
        }
    }
    else {
    }
}

void gf_SetTotalPlayerDeaths () {
    // Implementation
    gv_totalPlayerDeaths = 0;
    if ((gv_zerglingRushScoreBest >= 0) && (gv_currentlyPlayingProtoss == true)) {
        gv_totalPlayerDeaths = (gv_totalPlayerDeaths + gv_zerglingRushScoreBest);
    }
    else {
    }
    if ((gv_protossRushScoreBest >= 0) && (gv_currentlyPlayingProtoss == false)) {
        gv_totalPlayerDeaths = (gv_totalPlayerDeaths + gv_protossRushScoreBest);
    }
    else {
    }
}

void gf_UpdateScoreUI (int lp_score) {
    // Implementation
    UISetChallengeScoreText(PlayerGroupAll(), "RushDefense", (StringExternal("Param/Value/926A8B6A") + StringExternal("Param/Value/2EFFCF92") + IntToText(lp_score) + StringExternal("Param/Value/A781E2C8")));
}

void gf_UNUSEDTEXTSTRINGS () {
    // Implementation
    UISetChallengeScoreText(PlayerGroupAll(), "RushDefense", (StringExternal("Param/Value/543F6FE7") + StringExternal("Param/Value/8ED94B19") + IntToText(0) + StringExternal("Param/Value/1D1310C2")));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UISetChallengeMode(PlayerGroupAll(), true);
    libChal_gf_LoadChallengeData(5);
    GameCheatAllow(c_gameCheatVictory, false);
    TriggerExecute(gt_Init01Players, true, false);
    TriggerExecute(gt_Init02Units, true, false);
    TriggerExecute(gt_Init03Music, true, false);
    TriggerExecute(gt_Init04Environment, true, false);
    TriggerExecute(gt_Init05Hints, true, false);
    TriggerExecute(gt_Init06MapSettings, true, false);
    TriggerExecute(gt_ZergIntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init01Players_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAllianceOneWay(gv_p2_ENEMY_ZERG, gv_pLAYER_USER, 6);
    libNtve_gf_SetAllianceOneWay(gv_p3_ENEMY_PROTOSS, gv_pLAYER_USER, 6);
    libNtve_gf_SetAlliance(gv_p2_ENEMY_ZERG, gv_p3_ENEMY_PROTOSS, 1);
    PlayerGroupAdd(gv_allEnemyPlayers, gv_p2_ENEMY_ZERG);
    PlayerGroupAdd(gv_allEnemyPlayers, gv_p3_ENEMY_PROTOSS);
    PlayerModifyPropertyInt(gv_p3_ENEMY_PROTOSS, c_playerPropMinerals, c_playerPropOperSetTo, 100000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Players_Init () {
    gt_Init01Players = TriggerCreate("gt_Init01Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init02Units_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Units_Init () {
    gt_Init02Units = TriggerCreate("gt_Init02Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init03Music_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Music_Init () {
    gt_Init03Music = TriggerCreate("gt_Init03Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init04Environment_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization
    lv_i = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 0;
    UnitGroupLoopBegin(UnitGroup("MineralField", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gv_mineralPositions[lv_i] = UnitGetPosition(UnitGroupLoopCurrent());
        lv_i += 1;
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    lv_i = 0;
    UnitGroupLoopBegin(UnitGroup("VespeneGeyser", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gv_vespenePositions[lv_i] = UnitGetPosition(UnitGroupLoopCurrent());
        lv_i += 1;
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Environment_Init () {
    gt_Init04Environment = TriggerCreate("gt_Init04Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Hints
//--------------------------------------------------------------------------------------------------
bool gt_Init05Hints_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Hints_Init () {
    gt_Init05Hints = TriggerCreate("gt_Init05Hints_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Map Settings
//--------------------------------------------------------------------------------------------------
bool gt_Init06MapSettings_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUnitHelpDefault(gv_pLAYER_USER, false);
    TechTreeUnitHelp(gv_pLAYER_USER, "Marine", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Marauder", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Ghost", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "SCV", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Reaper", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "VikingAssault", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "VikingFighter", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Raven", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "SiegeTankSieged", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "SiegeTank", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Battlecruiser", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Banshee", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Thor", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "MULE", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Hellion", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Medivac", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Zealot", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Probe", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Zergling", true);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Prot", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Zerg", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Terr", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06MapSettings_Init () {
    gt_Init06MapSettings = TriggerCreate("gt_Init06MapSettings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Gameplay - Zergling Rush
//--------------------------------------------------------------------------------------------------
bool gt_StartGameplayZerglingRush_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_currentlyPlayingProtoss = false;
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_pLAYER_USER);
    UIAlertPoint("Trigger", 1, StringExternal("Param/Value/7257C198"), null, PointFromId(37));
    TriggerEnable(gt_ZerglingsorPlayerUnitsDie, true);
    if ((gv_retryCountZerg == 2)) {
        HelpPanelDisplayPage(PlayerGroupAll(), c_helpPanelPageTips);
        gv_retryCountZerg = (gv_retryCountZerg + 1);
    }
    else {
    }
    TimerStart(gv_prepTimer, 57.0, false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/32DBD2F9"), true, false);
    TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<mintotal/>:<sec2/>"));
    gv_prepTimerWindow = TimerWindowLastCreated();
    gf_SetTotalPlayerDeaths();
    if ((gv_totalPlayerDeaths > gv_silverLosses)) {
        ObjectiveSetState(gv_objectiveRushDefenseSilver, c_objectiveStateFailed);
    }
    else {
    }
    if ((gv_totalPlayerDeaths > gv_goldLosses)) {
        ObjectiveSetState(gv_objectiveRushDefenseGold, c_objectiveStateFailed);
    }
    else {
    }
    gv_zerglingWaveSize = 22;
    PlayerModifyPropertyInt(gv_pLAYER_USER, c_playerPropMinerals, c_playerPropOperSetTo, 215);
    TriggerExecute(gt_DisplayTipsZerg, true, false);
    while (!((TimerGetRemaining(gv_prepTimer) <= 15.0))) {
        Wait(0.25, c_timeGame);
    }
    TriggerExecute(gt_WarnPlayerZerglingRush, true, false);
    while (!((TimerGetRemaining(gv_prepTimer) <= 0.0))) {
        Wait(0.25, c_timeGame);
    }
    TimerWindowDestroy(gv_prepTimerWindow);
    TriggerExecute(gt_CreateLeaderboardZerg, true, false);
    TriggerExecute(gt_ZergAttackWaves, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameplayZerglingRush_Init () {
    gt_StartGameplayZerglingRush = TriggerCreate("gt_StartGameplayZerglingRush_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warn Player - Zergling Rush
//--------------------------------------------------------------------------------------------------
bool gt_WarnPlayerZerglingRush_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_racingStartDIALOG;
    int lv_racingStartTEXT;

    // Variable Initialization
    lv_racingStartDIALOG = c_invalidDialogId;
    lv_racingStartTEXT = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, false);
    lv_racingStartDIALOG = DialogLastCreated();
    DialogSetImageVisible(lv_racingStartDIALOG, false);
    DialogControlCreate(lv_racingStartDIALOG, c_triggerControlTypeLabel);
    lv_racingStartTEXT = DialogControlLastCreated();
    DialogControlSetFullDialog(lv_racingStartTEXT, PlayerGroupAll(), true);
    DialogSetVisible(lv_racingStartDIALOG, PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemStyle(lv_racingStartTEXT, "ChallengeReady", PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lv_racingStartTEXT, StringExternal("Param/Value/608FA6B5"), PlayerGroupAll());
    SoundPlay(SoundLink("TUIWarningPing", 0), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", PointFromId(47), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0, 270.0);
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringExternal("Param/Value/7F2B3FA5"), null, PointFromId(47));
    Wait(7.0, c_timeGame);
    UIAlertClear(gv_pLAYER_USER);
    DialogSetVisible(lv_racingStartDIALOG, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarnPlayerZerglingRush_Init () {
    gt_WarnPlayerZerglingRush = TriggerCreate("gt_WarnPlayerZerglingRush_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackWaves_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(6, "Zergling", 0, gv_p2_ENEMY_ZERG, PointFromId(53));
    AIAttackWaveUseGroup(gv_p2_ENEMY_ZERG, UnitLastCreatedGroup());
    AIAttackWaveSend(gv_p2_ENEMY_ZERG, 0, false);
    Wait(51.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(2, "Zergling", 0, gv_p2_ENEMY_ZERG, PointFromId(53));
    AIAttackWaveUseGroup(gv_p2_ENEMY_ZERG, UnitLastCreatedGroup());
    AIAttackWaveSend(gv_p2_ENEMY_ZERG, 0, false);
    Wait(27.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(2, "Zergling", 0, gv_p2_ENEMY_ZERG, PointFromId(53));
    AIAttackWaveUseGroup(gv_p2_ENEMY_ZERG, UnitLastCreatedGroup());
    AIAttackWaveSend(gv_p2_ENEMY_ZERG, 0, false);
    Wait(16.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(4, "Zergling", 0, gv_p2_ENEMY_ZERG, PointFromId(53));
    AIAttackWaveUseGroup(gv_p2_ENEMY_ZERG, UnitLastCreatedGroup());
    AIAttackWaveSend(gv_p2_ENEMY_ZERG, 0, false);
    Wait(41.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(8, "Zergling", 0, gv_p2_ENEMY_ZERG, PointFromId(53));
    AIAttackWaveUseGroup(gv_p2_ENEMY_ZERG, UnitLastCreatedGroup());
    AIAttackWaveSend(gv_p2_ENEMY_ZERG, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackWaves_Init () {
    gt_ZergAttackWaves = TriggerCreate("gt_ZergAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerglings or Player Units Die
//--------------------------------------------------------------------------------------------------
bool gt_ZerglingsorPlayerUnitsDie_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == gv_pLAYER_USER) && (EventUnitDamageDeathCheck(c_deathTypeCancel) == true)) {
        return true;
    }
    else {
    }
    if ((UnitGetOwner(EventUnit()) == gv_pLAYER_USER) && (EventUnitDamageEffect() != "SalvageDeath") && (UnitGetType(EventUnit()) != "MULE") && (UnitGetType(EventUnit()) != "Nuke") && (UnitGetType(EventUnit()) != "AutoTurret") && (UnitGetType(EventUnit()) != "PointDefenseDrone")) {
        gv_currentRoundPlayerDeaths += 1;
        gv_zerglingRushScoreCurrent = gv_currentRoundPlayerDeaths;
        gv_totalPlayerDeaths += 1;
        if ((gv_totalPlayerDeaths > gv_silverLosses)) {
            ObjectiveSetState(gv_objectiveRushDefenseSilver, c_objectiveStateFailed);
        }
        else {
        }
        if ((gv_totalPlayerDeaths > gv_goldLosses)) {
            ObjectiveSetState(gv_objectiveRushDefenseGold, c_objectiveStateFailed);
        }
        else {
        }
    }
    else {
    }
    if ((UnitGetOwner(EventUnit()) == gv_p2_ENEMY_ZERG)) {
        gv_zerglingWaveSize -= 1;
    }
    else {
    }
    TriggerExecute(gt_UpdateLeaderboardZerg, true, false);
    if ((gv_zerglingWaveSize == 0)) {
        gv_gameOver = true;
        TriggerStop(gt_StartGameplayZerglingRush);
        TriggerStop(gt_ZergAttackWaves);
        TriggerEnable(gt_ZerglingsorPlayerUnitsDie, false);
        ObjectiveSetState(gv_objectiveRushDefenseCompleteZergRush, c_objectiveStateCompleted);
        SoundPlay(SoundLink("UI_ObjectiveComplete", 0), PlayerGroupAll(), 100.0, 0.0);
        UnitPauseAll(true);
        gv_zerglingRushScoreCurrent = gv_currentRoundPlayerDeaths;
        gv_scoreCurrent = (gv_protossRushScoreCurrent + gv_zerglingRushScoreCurrent);
        Wait(2.0, c_timeGame);
        if ((gv_victory == true)) {
            gf_Achievements();
            if ((gv_playingReplay == true) && (gv_zerglingRushScoreCurrent < gv_zerglingRushScoreBest) && (gv_zerglingRushScoreBest >= 0)) {
                gv_zerglingRushScoreBest = gv_zerglingRushScoreCurrent;
                gf_SaveScore();
                libChal_gf_CreateChallengeWaveSuccessPanel(0, StringExternal("Param/Value/48E20F76"), StringExternal("Param/Value/96CF3DDC"), (StringExternal("Param/Value/D259368F") + IntToText(gv_zerglingRushScoreCurrent)), StringExternal("Param/Value/3329CBEC"), gt_BacktoVictoryScreen);
                libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
                if ((gv_zerglingRushScoreCurrent == 0)) {
                    libChal_gf_CreateChallengeWaveSuccessPanel(0, StringExternal("Param/Value/D642DDC5"), StringExternal("Param/Value/070E5B4F"), (StringExternal("Param/Value/A93A1E44") + IntToText(gv_zerglingRushScoreCurrent)), StringExternal("Param/Value/02BDFD00"), gt_BacktoVictoryScreen);
                    libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
                }
                else {
                }
            }
            else {
                libChal_gf_CreateChallengeWaveSuccessPanel(0, StringExternal("Param/Value/B0FBFDF4"), StringExternal("Param/Value/FC970463"), (StringExternal("Param/Value/88FE168E") + IntToText(gv_zerglingRushScoreCurrent)), StringExternal("Param/Value/E13EA675"), gt_BacktoVictoryScreen);
                libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
            }
            TriggerExecute(gt_ObjectiveRushDefenseUpdate, true, true);
            return true;
        }
        else {
        }
        if ((gv_playingReplay == true) && (gv_zerglingRushScoreCurrent >= gv_zerglingRushScoreBest) && (gv_zerglingRushScoreBest >= 0)) {
            libChal_gf_CreateChallengeWaveSuccessPanel(0, StringExternal("Param/Value/8D8DFCE4"), StringExternal("Param/Value/7AF8A15D"), (StringExternal("Param/Value/02F3B893") + IntToText(gv_zerglingRushScorePrevious)), StringExternal("Param/Value/9EEE1626"), gt_RestartChallengeProtoss);
            libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        }
        else {
            if ((gv_playingReplay == true) && (gv_zerglingRushScoreCurrent < gv_zerglingRushScoreBest) && (gv_zerglingRushScoreBest >= 0)) {
                libChal_gf_CreateChallengeWaveSuccessPanel(0, StringExternal("Param/Value/691D1D23"), StringExternal("Param/Value/D663C032"), (StringExternal("Param/Value/BBC4FC95") + IntToText(gv_zerglingRushScoreCurrent)), StringExternal("Param/Value/9CA21A51"), gt_RestartChallengeProtoss);
                libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
            }
            else {
                gv_zerglingRushScoreBest = gv_zerglingRushScoreCurrent;
                libChal_gf_CreateChallengeWaveSuccessPanel(0, StringExternal("Param/Value/872BBC89"), StringExternal("Param/Value/F5D880DC"), (StringExternal("Param/Value/0C242554") + IntToText(gv_zerglingRushScoreCurrent)), null, gt_RestartChallengeProtoss);
                libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
                if ((gv_zerglingRushScoreCurrent == 0)) {
                    libChal_gf_CreateChallengeWaveSuccessPanel(0, StringExternal("Param/Value/DE89329D"), StringExternal("Param/Value/994F0712"), (StringExternal("Param/Value/810257C0") + IntToText(gv_zerglingRushScoreCurrent)), null, gt_RestartChallengeProtoss);
                    libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
                }
                else {
                }
            }
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerglingsorPlayerUnitsDie_Init () {
    gt_ZerglingsorPlayerUnitsDie = TriggerCreate("gt_ZerglingsorPlayerUnitsDie_Func");
    TriggerEnable(gt_ZerglingsorPlayerUnitsDie, false);
    TriggerAddEventUnitDied(gt_ZerglingsorPlayerUnitsDie, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Gameplay - Gateway Rush
//--------------------------------------------------------------------------------------------------
bool gt_StartGameplayGatewayRush_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_currentlyPlayingProtoss = true;
    gv_protossPlayed = true;
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_pLAYER_USER);
    TriggerEnable(gt_ProtossorPlayerUnitsDie, true);
    if ((gv_retryCountProtoss == 2)) {
        HelpPanelDisplayPage(PlayerGroupAll(), c_helpPanelPageTips);
        gv_retryCountProtoss = (gv_retryCountProtoss + 1);
    }
    else {
    }
    TimerStart(gv_prepTimer, 80.0, false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/85654043"), true, false);
    TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<mintotal/>:<sec2/>"));
    gv_prepTimerWindow = TimerWindowLastCreated();
    gf_SetTotalPlayerDeaths();
    if ((gv_totalPlayerDeaths > gv_silverLosses)) {
        ObjectiveSetState(gv_objectiveRushDefenseSilver, c_objectiveStateFailed);
    }
    else {
    }
    if ((gv_totalPlayerDeaths > gv_goldLosses)) {
        ObjectiveSetState(gv_objectiveRushDefenseGold, c_objectiveStateFailed);
    }
    else {
    }
    TriggerExecute(gt_DisplayTipsProtoss, true, false);
    TriggerEnable(gt_ProtossChronoBoost, true);
    TriggerExecute(gt_ProtossAttackWaves, true, false);
    AIResetBullyRebuildCountsInRegion(gv_p3_ENEMY_PROTOSS, RegionEntireMap());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Nexus", 0, gv_p3_ENEMY_PROTOSS, RegionGetCenter(RegionFromId(2)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Pylon", 0, gv_p3_ENEMY_PROTOSS, RegionGetCenter(RegionFromId(2)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Pylon", 0, gv_p3_ENEMY_PROTOSS, RegionGetCenter(RegionFromId(2)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Pylon", 0, gv_p3_ENEMY_PROTOSS, RegionGetCenter(RegionFromId(2)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Pylon", 0, gv_p3_ENEMY_PROTOSS, RegionGetCenter(RegionFromId(2)));
    UnitGroupLoopBegin(UnitGroup(null, gv_p3_ENEMY_PROTOSS, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Probe", 0, gv_p3_ENEMY_PROTOSS, PointFromId(38));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Probe", 0, gv_p3_ENEMY_PROTOSS, PointFromId(39));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Pylon", 0, gv_p3_ENEMY_PROTOSS, PointFromId(40));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", 0, gv_p3_ENEMY_PROTOSS, PointFromId(75));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Gateway", c_unitCreateConstruct, gv_p3_ENEMY_PROTOSS, RegionGetCenter(RegionFromId(4)));
    UnitSetProgressComplete(UnitLastCreated(), 1, 15);
    while (!((TimerGetRemaining(gv_prepTimer) <= 15.0))) {
        Wait(0.25, c_timeGame);
    }
    TriggerExecute(gt_WarnPlayerGatewayRush, true, false);
    while (!((TimerGetRemaining(gv_prepTimer) <= 0.0))) {
        Wait(0.25, c_timeGame);
    }
    TimerWindowDestroy(gv_prepTimerWindow);
    UnitGroupLoopBegin(UnitGroup(null, gv_p3_ENEMY_PROTOSS, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gv_protossStructures = (gv_protossStructures + 1);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gv_countProtossBuildings = true;
    TriggerExecute(gt_CreateLeaderboardProtoss, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameplayGatewayRush_Init () {
    gt_StartGameplayGatewayRush = TriggerCreate("gt_StartGameplayGatewayRush_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warn Player - Gateway Rush
//--------------------------------------------------------------------------------------------------
bool gt_WarnPlayerGatewayRush_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_racingStartDIALOG;
    int lv_racingStartTEXT;

    // Variable Initialization
    lv_racingStartDIALOG = c_invalidDialogId;
    lv_racingStartTEXT = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, false);
    lv_racingStartDIALOG = DialogLastCreated();
    DialogSetImageVisible(lv_racingStartDIALOG, false);
    DialogControlCreate(lv_racingStartDIALOG, c_triggerControlTypeLabel);
    lv_racingStartTEXT = DialogControlLastCreated();
    DialogControlSetFullDialog(lv_racingStartTEXT, PlayerGroupAll(), true);
    DialogSetVisible(lv_racingStartDIALOG, PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemStyle(lv_racingStartTEXT, "ChallengeReady", PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lv_racingStartTEXT, StringExternal("Param/Value/A6BE1E38"), PlayerGroupAll());
    SoundPlay(SoundLink("TUIWarningPing", 0), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", PointFromId(3), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0, 270.0);
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringExternal("Param/Value/274D3D89"), null, PointFromId(3));
    Wait(7.0, c_timeGame);
    UIAlertClear(gv_pLAYER_USER);
    DialogSetVisible(lv_racingStartDIALOG, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarnPlayerGatewayRush_Init () {
    gt_WarnPlayerGatewayRush = TriggerCreate("gt_WarnPlayerGatewayRush_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_ProtossAttackWaves_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetGatherPoint(gv_p3_ENEMY_PROTOSS, PointFromId(62));
    AIToggleBulliesInRegion(gv_p3_ENEMY_PROTOSS, RegionFromId(1), true);
    Wait(4.0, c_timeGame);
    AIToggleBulliesInRegion(gv_p3_ENEMY_PROTOSS, RegionFromId(11), true);
    Wait(15.0, c_timeGame);
    AIToggleBulliesInRegion(gv_p3_ENEMY_PROTOSS, RegionFromId(7), true);
    Wait(80.0, c_timeGame);
    AIToggleBulliesInRegion(gv_p3_ENEMY_PROTOSS, RegionFromId(12), true);
    Wait(58.0, c_timeGame);
    AIToggleBulliesInRegion(gv_p3_ENEMY_PROTOSS, RegionFromId(9), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossAttackWaves_Init () {
    gt_ProtossAttackWaves = TriggerCreate("gt_ProtossAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Chrono Boost
//--------------------------------------------------------------------------------------------------
bool gt_ProtossChronoBoost_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("Gateway", gv_p3_ENEMY_PROTOSS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "TimeWarpProduction") == false)) {
            PlayerCreateEffectUnit(gv_p3_ENEMY_PROTOSS, "ChronoBoost", UnitGroupLoopCurrent());
            TriggerEnable(TriggerGetCurrent(), false);
            Wait(45.0, c_timeGame);
            TriggerEnable(TriggerGetCurrent(), true);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossChronoBoost_Init () {
    gt_ProtossChronoBoost = TriggerCreate("gt_ProtossChronoBoost_Func");
    TriggerEnable(gt_ProtossChronoBoost, false);
    TriggerAddEventTimePeriodic(gt_ProtossChronoBoost, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Protoss Building
//--------------------------------------------------------------------------------------------------
bool gt_NewProtossBuilding_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitProgressUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_p3_ENEMY_PROTOSS))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_protossStructures = (gv_protossStructures + 1);
    TriggerExecute(gt_UpdateLeaderboardProtoss, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewProtossBuilding_Init () {
    gt_NewProtossBuilding = TriggerCreate("gt_NewProtossBuilding_Func");
    TriggerEnable(gt_NewProtossBuilding, false);
    TriggerAddEventUnitConstructProgress(gt_NewProtossBuilding, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Suicide Zealots
//--------------------------------------------------------------------------------------------------
bool gt_SuicideZealots_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Zealot"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p3_ENEMY_PROTOSS))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveUseUnit(gv_p3_ENEMY_PROTOSS, EventUnit());
    AIAttackWaveSend(gv_p3_ENEMY_PROTOSS, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SuicideZealots_Init () {
    gt_SuicideZealots = TriggerCreate("gt_SuicideZealots_Func");
    TriggerAddEventUnitRegion(gt_SuicideZealots, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss or Player Units Die
//--------------------------------------------------------------------------------------------------
bool gt_ProtossorPlayerUnitsDie_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == gv_pLAYER_USER) && (EventUnitDamageDeathCheck(c_deathTypeCancel) == true)) {
        return true;
    }
    else {
    }
    if ((UnitGetOwner(EventUnit()) == gv_pLAYER_USER) && (EventUnitDamageEffect() != "SalvageDeath") && (UnitGetType(EventUnit()) != "MULE") && (UnitGetType(EventUnit()) != "Nuke") && (UnitGetType(EventUnit()) != "AutoTurret") && (UnitGetType(EventUnit()) != "PointDefenseDrone")) {
        gv_currentRoundPlayerDeaths += 1;
        gv_protossRushScoreCurrent = gv_currentRoundPlayerDeaths;
        gv_totalPlayerDeaths += 1;
        if ((gv_totalPlayerDeaths > gv_silverLosses)) {
            ObjectiveSetState(gv_objectiveRushDefenseSilver, c_objectiveStateFailed);
        }
        else {
        }
        if ((gv_totalPlayerDeaths > gv_goldLosses)) {
            ObjectiveSetState(gv_objectiveRushDefenseGold, c_objectiveStateFailed);
        }
        else {
        }
    }
    else {
    }
    if ((UnitGetOwner(EventUnit()) == gv_p3_ENEMY_PROTOSS) && (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true) && (gv_countProtossBuildings == true)) {
        gv_protossStructures -= 1;
    }
    else {
    }
    TriggerExecute(gt_UpdateLeaderboardProtoss, true, false);
    if ((UnitGroupCount(UnitGroup(null, gv_p3_ENEMY_PROTOSS, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        gv_gameOver = true;
        TriggerStop(gt_StartGameplayGatewayRush);
        TriggerStop(gt_ProtossAttackWaves);
        TriggerEnable(gt_ProtossorPlayerUnitsDie, false);
        TriggerEnable(gt_ProtossChronoBoost, false);
        ObjectiveSetState(gv_objectiveRushDefenseCompleteProtossRush, c_objectiveStateCompleted);
        SoundPlay(SoundLink("UI_ObjectiveComplete", 0), PlayerGroupAll(), 100.0, 0.0);
        UnitPauseAll(true);
        gv_protossRushScoreCurrent = gv_currentRoundPlayerDeaths;
        gv_scoreCurrent = (gv_protossRushScoreCurrent + gv_zerglingRushScoreCurrent);
        Wait(2.0, c_timeGame);
        gf_Achievements();
        if ((gv_victory == true)) {
            if ((gv_playingReplay == true) && (gv_protossRushScoreCurrent < gv_protossRushScoreBest) && (gv_protossRushScoreBest >= 0)) {
                gv_protossRushScoreBest = gv_protossRushScoreCurrent;
                gf_SaveScore();
                libChal_gf_CreateChallengeWaveSuccessPanel(0, StringExternal("Param/Value/68D01A28"), StringExternal("Param/Value/73F3A289"), (StringExternal("Param/Value/7E4C1B31") + IntToText(gv_protossRushScoreCurrent)), StringExternal("Param/Value/C136DD8F"), gt_BacktoVictoryScreen);
                libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
                if ((gv_protossRushScoreCurrent == 0)) {
                    libChal_gf_CreateChallengeWaveSuccessPanel(0, StringExternal("Param/Value/8332E04E"), StringExternal("Param/Value/947EF782"), (StringExternal("Param/Value/EBF4CF13") + IntToText(gv_protossRushScoreCurrent)), StringExternal("Param/Value/14F14A1C"), gt_BacktoVictoryScreen);
                    libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
                }
                else {
                }
            }
            else {
                libChal_gf_CreateChallengeWaveSuccessPanel(0, StringExternal("Param/Value/747F1D7E"), StringExternal("Param/Value/491DC1E1"), (StringExternal("Param/Value/47913B25") + IntToText(gv_protossRushScoreCurrent)), StringExternal("Param/Value/7133832E"), gt_BacktoVictoryScreen);
                libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
            }
            TriggerExecute(gt_ObjectiveRushDefenseUpdate, true, true);
            return true;
        }
        else {
        }
        TriggerExecute(gt_ObjectiveRushDefenseUpdate, true, true);
        if ((gv_playingReplay == true) && (gv_protossRushScoreCurrent >= gv_protossRushScoreBest) && (gv_protossRushScoreBest >= 0)) {
            libChal_gf_CreateChallengeWaveSuccessPanel(0, StringExternal("Param/Value/57DE81C3"), StringExternal("Param/Value/A23F730D"), (StringExternal("Param/Value/B2507D87") + IntToText(gv_protossRushScorePrevious)), StringExternal("Param/Value/E3E7B66E"), gt_BacktoVictoryScreen);
            libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        }
        else {
            if ((gv_playingReplay == true) && (gv_protossRushScoreCurrent < gv_protossRushScoreBest) && (gv_protossRushScoreBest >= 0)) {
                libChal_gf_CreateChallengeWaveSuccessPanel(0, StringExternal("Param/Value/25BD086C"), StringExternal("Param/Value/EB94B3FB"), (StringExternal("Param/Value/DBAF4532") + IntToText(gv_protossRushScoreCurrent)), StringExternal("Param/Value/BF7AEA74"), gt_BacktoVictoryScreen);
                libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
            }
            else {
                gv_protossRushScoreBest = gv_protossRushScoreCurrent;
                libChal_gf_CreateChallengeWaveSuccessPanel(0, StringExternal("Param/Value/D55CC49E"), StringExternal("Param/Value/0846A0BF"), (StringExternal("Param/Value/F3596FE5") + IntToText(gv_protossRushScoreCurrent)), null, gt_FinishVictory);
                libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
                if ((gv_protossRushScoreCurrent == 0)) {
                    libChal_gf_CreateChallengeWaveSuccessPanel(0, StringExternal("Param/Value/25076620"), StringExternal("Param/Value/15D41A37"), (StringExternal("Param/Value/740E2F51") + IntToText(gv_protossRushScoreCurrent)), null, gt_FinishVictory);
                    libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
                }
                else {
                }
            }
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossorPlayerUnitsDie_Init () {
    gt_ProtossorPlayerUnitsDie = TriggerCreate("gt_ProtossorPlayerUnitsDie_Func");
    TriggerEnable(gt_ProtossorPlayerUnitsDie, false);
    TriggerAddEventUnitDied(gt_ProtossorPlayerUnitsDie, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Leaderboard - Zerg
//--------------------------------------------------------------------------------------------------
bool gt_CreateLeaderboardZerg_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    BoardCreate(2, 2, StringExternal("Param/Value/5A8FB6AE"), Color(100.00, 100.00, 100.00));
    gv_leaderboard = BoardLastCreated();
    BoardSetColumnWidth(BoardLastCreated(), 1, 15.0);
    BoardSetColumnWidth(BoardLastCreated(), 2, 5.0);
    BoardMinimizeShow(BoardLastCreated(), PlayerGroupAll(), false);
    BoardSetState(BoardLastCreated(), PlayerGroupAll(), c_boardStateShowTitle, false);
    BoardSetState(BoardLastCreated(), PlayerGroupAll(), c_boardStateShowHeader, false);
    BoardSetGroupCount(BoardLastCreated(), 1);
    BoardRowSetGroup(BoardLastCreated(), 1, 1);
    BoardRowSetGroup(BoardLastCreated(), 2, 1);
    BoardItemSetText(BoardLastCreated(), c_boardColGroups, 1, StringExternal("Param/Value/783C4293"));
    BoardItemSetFontSize(BoardLastCreated(), 1, 1, 16);
    BoardItemSetFontSize(BoardLastCreated(), 2, 1, 16);
    BoardItemSetFontSize(BoardLastCreated(), 1, 2, 16);
    BoardItemSetFontSize(BoardLastCreated(), 2, 2, 16);
    BoardItemSetText(BoardLastCreated(), 1, 1, StringExternal("Param/Value/A52238A3"));
    BoardItemSetText(BoardLastCreated(), 2, 1, StringExternal("Param/Value/5D2B069A"));
    BoardItemSetText(BoardLastCreated(), 1, 2, StringExternal("Param/Value/F9C48E46"));
    BoardItemSetText(BoardLastCreated(), 2, 2, IntToText(gv_totalPlayerDeaths));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateLeaderboardZerg_Init () {
    gt_CreateLeaderboardZerg = TriggerCreate("gt_CreateLeaderboardZerg_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Leaderboard - Zerg
//--------------------------------------------------------------------------------------------------
bool gt_UpdateLeaderboardZerg_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    BoardItemSetText(gv_leaderboard, 2, 1, IntToText(gv_zerglingWaveSize));
    BoardItemSetText(gv_leaderboard, 2, 2, IntToText(gv_totalPlayerDeaths));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateLeaderboardZerg_Init () {
    gt_UpdateLeaderboardZerg = TriggerCreate("gt_UpdateLeaderboardZerg_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Leaderboard - Protoss
//--------------------------------------------------------------------------------------------------
bool gt_CreateLeaderboardProtoss_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    BoardCreate(2, 2, StringExternal("Param/Value/E5825392"), Color(100.00, 100.00, 100.00));
    gv_leaderboard = BoardLastCreated();
    BoardSetColumnWidth(BoardLastCreated(), 1, 20.0);
    BoardSetColumnWidth(BoardLastCreated(), 2, 4.0);
    BoardMinimizeShow(BoardLastCreated(), PlayerGroupAll(), false);
    BoardSetState(BoardLastCreated(), PlayerGroupAll(), c_boardStateShowTitle, false);
    BoardSetState(BoardLastCreated(), PlayerGroupAll(), c_boardStateShowHeader, false);
    BoardSetGroupCount(BoardLastCreated(), 1);
    BoardRowSetGroup(BoardLastCreated(), 1, 1);
    BoardRowSetGroup(BoardLastCreated(), 2, 1);
    BoardItemSetText(BoardLastCreated(), c_boardColGroups, 1, StringExternal("Param/Value/F20F9865"));
    BoardItemSetFontSize(BoardLastCreated(), 1, 1, 16);
    BoardItemSetFontSize(BoardLastCreated(), 2, 1, 16);
    BoardItemSetFontSize(BoardLastCreated(), 1, 2, 16);
    BoardItemSetFontSize(BoardLastCreated(), 2, 2, 16);
    BoardItemSetText(BoardLastCreated(), 1, 1, StringExternal("Param/Value/E0D7D5EA"));
    BoardItemSetText(BoardLastCreated(), 2, 1, IntToText(gv_protossStructures));
    BoardItemSetText(BoardLastCreated(), 1, 2, StringExternal("Param/Value/93B2DD93"));
    BoardItemSetText(BoardLastCreated(), 2, 2, IntToText(gv_totalPlayerDeaths));
    TriggerEnable(gt_NewProtossBuilding, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateLeaderboardProtoss_Init () {
    gt_CreateLeaderboardProtoss = TriggerCreate("gt_CreateLeaderboardProtoss_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Leaderboard - Protoss
//--------------------------------------------------------------------------------------------------
bool gt_UpdateLeaderboardProtoss_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    BoardItemSetText(gv_leaderboard, 2, 1, IntToText(gv_protossStructures));
    BoardItemSetText(gv_leaderboard, 2, 2, IntToText(gv_totalPlayerDeaths));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateLeaderboardProtoss_Init () {
    gt_UpdateLeaderboardProtoss = TriggerCreate("gt_UpdateLeaderboardProtoss_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check for Cheating
//--------------------------------------------------------------------------------------------------
bool gt_CheckforCheating_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_cheatUsed = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheckforCheating_Init () {
    gt_CheckforCheating = TriggerCreate("gt_CheckforCheating_Func");
    TriggerAddEventCheatUsed(gt_CheckforCheating, c_playerAny, c_gameCheatAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_bool;

    // Variable Initialization
    lv_bool = false;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AICampaignStart(gv_p2_ENEMY_ZERG);
    AICampaignStart(gv_p3_ENEMY_PROTOSS);
    AIAttackWaveSetTargetPlayer(gv_p2_ENEMY_ZERG, PlayerGroupSingle(gv_pLAYER_USER));
    AIAttackWaveSetTargetPlayer(gv_p3_ENEMY_PROTOSS, PlayerGroupSingle(gv_pLAYER_USER));
    AISetAPM(gv_p2_ENEMY_ZERG, 3000);
    AISetAPM(gv_p3_ENEMY_PROTOSS, 3000);
    PlayerGroupLoopBegin(gv_allEnemyPlayers);
    while (!PlayerGroupLoopDone()) {
        AISetDifficulty(PlayerGroupLoopCurrent(), c_diffNormalTargetPrio, true);
        lv_bool = AICombatDiffFlagTieBreakHealers(PlayerGroupLoopCurrent(), c_combatFlagEnable);
        lv_bool = AICombatDiffFlagTieBreakInjured(PlayerGroupLoopCurrent(), c_combatFlagEnable);
        lv_bool = AICombatDiffFlagCatWorkersNormalPrio(PlayerGroupLoopCurrent(), c_combatFlagEnable);
        lv_bool = AICombatDiffFlagTieBreakLowHP(PlayerGroupLoopCurrent(), c_combatFlagEnable);
        lv_bool = AICombatDiffFlagCatSortBuildingsPrio(PlayerGroupLoopCurrent(), c_combatFlagDisable);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unlimited AI Resources
//--------------------------------------------------------------------------------------------------
bool gt_UnlimitedAIResources_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(gv_p2_ENEMY_ZERG, c_playerPropMinerals, c_playerPropOperSetTo, 100000);
    PlayerModifyPropertyInt(gv_p2_ENEMY_ZERG, c_playerPropVespene, c_playerPropOperSetTo, 100000);
    PlayerModifyPropertyInt(gv_p3_ENEMY_PROTOSS, c_playerPropMinerals, c_playerPropOperSetTo, 100000);
    PlayerModifyPropertyInt(gv_p3_ENEMY_PROTOSS, c_playerPropVespene, c_playerPropOperSetTo, 100000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnlimitedAIResources_Init () {
    gt_UnlimitedAIResources = TriggerCreate("gt_UnlimitedAIResources_Func");
    TriggerAddEventTimePeriodic(gt_UnlimitedAIResources, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Restart Challenge Zerg
//--------------------------------------------------------------------------------------------------
bool gt_RestartChallengeZerg_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libChal_gf_ShowHideChallengeWaveSuccessPanel(false);
    libChal_gf_ShowHideChallengeVictoryPanel(false);
    libChal_gf_ShowHideChallengeDefeatPanel(false);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    TriggerStop(gt_ObjectiveRushDefenseCreateQ);
    ObjectiveDestroy(gv_objectiveRushDefenseCompleteZergRush);
    ObjectiveDestroy(gv_objectiveRushDefenseCompleteProtossRush);
    ObjectiveDestroy(gv_objectiveRushDefenseGold);
    ObjectiveDestroy(gv_objectiveRushDefenseSilver);
    TriggerEnable(gt_ObjectiveRushDefenseUpdate, true);
    TriggerEnable(gt_ObjectiveRushDefenseCreateQ, true);
    TriggerEnable(gt_ZerglingsorPlayerUnitsDie, false);
    TriggerEnable(gt_ProtossorPlayerUnitsDie, false);
    TriggerEnable(gt_ProtossChronoBoost, false);
    TriggerEnable(gt_NewProtossBuilding, false);
    TriggerEnable(gt_FinishDefeat, true);
    TriggerStop(gt_StartGameplayZerglingRush);
    TriggerStop(gt_StartGameplayGatewayRush);
    TriggerStop(gt_ZergAttackWaves);
    TriggerStop(gt_ProtossAttackWaves);
    TriggerExecute(gt_ResetUpgrades, true, false);
    TriggerExecute(gt_ResetPlayField, true, false);
    CameraPan(gv_pLAYER_USER, PointFromId(37), 0.0, -1, 10, false);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(0.2, c_timeGame);
    TriggerExecute(gt_StartGameplayZerglingRush, true, false);
    gv_gameOver = false;
    TriggerExecute(gt_ObjectiveRushDefenseCreateQ, true, true);
    if ((gv_protossPlayed == true)) {
        ObjectiveSetState(gv_objectiveRushDefenseCompleteProtossRush, c_objectiveStateCompleted);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RestartChallengeZerg_Init () {
    gt_RestartChallengeZerg = TriggerCreate("gt_RestartChallengeZerg_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Restart Challenge Protoss
//--------------------------------------------------------------------------------------------------
bool gt_RestartChallengeProtoss_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libChal_gf_ShowHideChallengeWaveSuccessPanel(false);
    libChal_gf_ShowHideChallengeVictoryPanel(false);
    libChal_gf_ShowHideChallengeDefeatPanel(false);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gv_protossStructures = 0;
    gv_countProtossBuildings = false;
    TriggerStop(gt_ObjectiveRushDefenseCreateQ);
    ObjectiveDestroy(gv_objectiveRushDefenseCompleteZergRush);
    ObjectiveDestroy(gv_objectiveRushDefenseCompleteProtossRush);
    ObjectiveDestroy(gv_objectiveRushDefenseGold);
    ObjectiveDestroy(gv_objectiveRushDefenseSilver);
    TriggerEnable(gt_ObjectiveRushDefenseUpdate, true);
    TriggerEnable(gt_ObjectiveRushDefenseCreateQ, true);
    TriggerEnable(gt_ZerglingsorPlayerUnitsDie, false);
    TriggerEnable(gt_ProtossorPlayerUnitsDie, false);
    TriggerEnable(gt_ProtossChronoBoost, false);
    TriggerEnable(gt_NewProtossBuilding, false);
    TriggerEnable(gt_FinishDefeat, true);
    TriggerStop(gt_StartGameplayZerglingRush);
    TriggerStop(gt_StartGameplayGatewayRush);
    TriggerStop(gt_ZergAttackWaves);
    TriggerStop(gt_ProtossAttackWaves);
    TriggerExecute(gt_ResetUpgrades, true, false);
    TriggerExecute(gt_ProtossIntroQ, true, true);
    PlayerModifyPropertyInt(gv_pLAYER_USER, c_playerPropMinerals, c_playerPropOperSetTo, 185);
    if (((gv_victory == true) || (gv_retryCountProtoss > 0))) {
        TriggerExecute(gt_ResetPlayField, true, false);
        CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(64), 0.0, -1, 10, true);
        CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
        Wait(0.2, c_timeGame);
        TriggerExecute(gt_StartGameplayGatewayRush, true, false);
    }
    else {
    }
    gv_gameOver = false;
    TriggerExecute(gt_ObjectiveRushDefenseCreateQ, true, true);
    ObjectiveSetState(gv_objectiveRushDefenseCompleteZergRush, c_objectiveStateCompleted);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RestartChallengeProtoss_Init () {
    gt_RestartChallengeProtoss = TriggerCreate("gt_RestartChallengeProtoss_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reset Play Field
//--------------------------------------------------------------------------------------------------
bool gt_ResetPlayField_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    BoardDestroy(gv_leaderboard);
    TimerWindowDestroy(gv_prepTimerWindow);
    gv_time = 0;
    gv_currentRoundPlayerDeaths = 0;
    libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "Signal DestroyPod");
    UnitGroupLoopBegin(UnitGroup("MULE", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_USER, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p2_ENEMY_ZERG, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p3_ENEMY_PROTOSS, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    ActorWorldParticleFXDestroy();
    Wait(0.1, c_timeGame);
    AIToggleBulliesInRegion(gv_p3_ENEMY_PROTOSS, RegionFromId(1), false);
    AIToggleBulliesInRegion(gv_p3_ENEMY_PROTOSS, RegionFromId(4), false);
    AIToggleBulliesInRegion(gv_p3_ENEMY_PROTOSS, RegionFromId(7), false);
    AIToggleBulliesInRegion(gv_p3_ENEMY_PROTOSS, RegionFromId(9), false);
    AIToggleBulliesInRegion(gv_p3_ENEMY_PROTOSS, RegionFromId(10), false);
    AIToggleBulliesInRegion(gv_p3_ENEMY_PROTOSS, RegionFromId(11), false);
    AIToggleBulliesInRegion(gv_p3_ENEMY_PROTOSS, RegionFromId(12), false);
    VisExploreArea(gv_pLAYER_USER, RegionEntireMap(), false, false);
    VisExploreArea(gv_p2_ENEMY_ZERG, RegionEntireMap(), false, false);
    VisExploreArea(gv_p3_ENEMY_PROTOSS, RegionEntireMap(), false, false);
    UIAlertClear(gv_pLAYER_USER);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    PlayerModifyPropertyInt(gv_pLAYER_USER, c_playerPropVespene, c_playerPropOperSetTo, 0);
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(14));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(15));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(16));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(17));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(18));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(29));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(30));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(31));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, gv_pLAYER_USER, PointFromId(103));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, gv_pLAYER_USER, PointFromId(104));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, gv_pLAYER_USER, PointFromId(14));
    UnitCreate(1, "SupplyDepot", 0, gv_pLAYER_USER, PointFromId(102), 270.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "CommandCenter", 0, gv_pLAYER_USER, PointFromId(37));
    PlayerModifyPropertyInt(gv_p3_ENEMY_PROTOSS, c_playerPropMinerals, c_playerPropOperSetTo, 100000);
    TriggerExecute(gt_Replaceallresources, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResetPlayField_Init () {
    gt_ResetPlayField = TriggerCreate("gt_ResetPlayField_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reset Upgrades
//--------------------------------------------------------------------------------------------------
bool gt_ResetUpgrades_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "TerranBuildingArmor", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "TerranInfantryArmorsLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "TerranInfantryArmorsLevel2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "TerranInfantryArmorsLevel3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "TerranInfantryWeaponsLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "TerranInfantryWeaponsLevel2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "TerranInfantryWeaponsLevel3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "TerranShipArmorsLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "TerranShipArmorsLevel2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "TerranShipArmorsLevel3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "TerranShipWeaponsLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "TerranShipWeaponsLevel2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "TerranShipWeaponsLevel3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "TerranVehicleArmorsLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "TerranVehicleArmorsLevel2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "TerranVehicleArmorsLevel3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "TerranVehicleWeaponsLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "TerranVehicleWeaponsLevel2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "TerranVehicleWeaponsLevel3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "NeosteelFrame", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "HiSecAutoTracking", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "BattlecruiserBehemothReactor", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "BattlecruiserEnableSpecializations", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "MedivacCaduceusReactor", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "Stimpack", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "ShieldWall", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "ReaperSpeed", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "PunisherGrenades", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "GhostMoebiusReactor", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "PersonalCloaking", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "HighCapacityBarrels", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "SiegeTech", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "VikingJotunBoosters", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "HunterSeeker", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "DurableMaterials", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "RavenCorvidReactor", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_USER, "BattlecruiserBehemothReactor", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResetUpgrades_Init () {
    gt_ResetUpgrades = TriggerCreate("gt_ResetUpgrades_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Replace all resources
//--------------------------------------------------------------------------------------------------
bool gt_Replaceallresources_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("MineralField", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Refinery", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("VespeneGeyser", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    IntLoopBegin(0, 30);
    while (!IntLoopDone()) {
        if ((gv_mineralPositions[IntLoopCurrent()] != null)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralField", 0, 0, gv_mineralPositions[IntLoopCurrent()]);
        }
        else {
            break;
        }
        IntLoopStep();
    }
    IntLoopEnd();
    IntLoopBegin(0, 30);
    while (!IntLoopDone()) {
        if ((gv_vespenePositions[IntLoopCurrent()] != null)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "VespeneGeyser", 0, 0, gv_vespenePositions[IntLoopCurrent()]);
        }
        else {
            break;
        }
        IntLoopStep();
    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Replaceallresources_Init () {
    gt_Replaceallresources = TriggerCreate("gt_Replaceallresources_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Finish Victory
//--------------------------------------------------------------------------------------------------
bool gt_FinishVictory_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    gv_victory = true;
    UnitPauseAll(true);
    gf_SaveScore();
    libChal_gf_ShowHideChallengeWaveSuccessPanel(false);
    libChal_gf_CreateChallengeVictoryPanel(StringExternal("Param/Value/E17F089B"), gv_ratingText, StringExternal("Param/Value/6C250688"), (StringExternal("Param/Value/640422E0") + IntToText((gv_zerglingRushScoreCurrent + gv_protossRushScoreCurrent))), gt_LeaveGame, null);
    libChal_gf_AddWaveToChallengeVictoryPanel((StringExternal("Param/Value/E0A2A437") + IntToText(gv_zerglingRushScoreCurrent)), gt_RestartChallengeZerg);
    libChal_gf_AddWaveToChallengeVictoryPanel((StringExternal("Param/Value/8F8C9FA6") + IntToText(gv_protossRushScoreCurrent)), gt_RestartChallengeProtoss);
    if (((gv_zerglingRushScoreCurrent + gv_protossRushScoreCurrent) == 0)) {
        libChal_gf_CreateChallengeVictoryPanel(StringExternal("Param/Value/FC6963D0"), gv_ratingText, StringExternal("Param/Value/1D5BED09"), (StringExternal("Param/Value/D642C4B8") + IntToText((gv_zerglingRushScoreCurrent + gv_protossRushScoreCurrent))), gt_LeaveGame, null);
        libChal_gf_AddWaveToChallengeVictoryPanel((StringExternal("Param/Value/2CF1E31C") + IntToText(gv_zerglingRushScoreCurrent)), gt_RestartChallengeZerg);
        libChal_gf_AddWaveToChallengeVictoryPanel((StringExternal("Param/Value/29C61C67") + IntToText(gv_protossRushScoreCurrent)), gt_RestartChallengeProtoss);
    }
    else {
    }
    libChal_gf_AddAchievementToChallengeVictoryPanel("Challenge_RushDefense_Basic");
    libChal_gf_AddAchievementToChallengeVictoryPanel("Challenge_RushDefense_Mastery");
    libChal_gf_AddAchievementToChallengeVictoryPanel("Challenge_RushDefense_Dominance");
    Wait(0.5, c_timeGame);
    libChal_gf_ShowHideChallengeVictoryPanel(true);
    gv_zerglingRushScorePrevious = gv_zerglingRushScoreCurrent;
    gv_protossRushScorePrevious = gv_protossRushScoreCurrent;
    gv_scorePrevious = gv_scoreCurrent;
    gv_playingReplay = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinishVictory_Init () {
    gt_FinishVictory = TriggerCreate("gt_FinishVictory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Finish Defeat
//--------------------------------------------------------------------------------------------------
bool gt_FinishDefeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_USER, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_StartGameplayZerglingRush);
    TriggerStop(gt_StartGameplayGatewayRush);
    TriggerStop(gt_ZergAttackWaves);
    TriggerStop(gt_ProtossAttackWaves);
    TriggerStop(gt_DisplayTipsZerg);
    TriggerStop(gt_DisplayTipsProtoss);
    gv_gameOver = true;
    UnitPauseAll(true);
    TimerPause(gv_prepTimer, true);
    TriggerQueueClear(c_triggerQueueRetain);
    Wait(2.0, c_timeGame);
    if ((gv_playingReplay == true)) {
        if ((gv_currentlyPlayingProtoss == true)) {
            libChal_gf_CreateChallengeWaveSuccessPanel(1, StringExternal("Param/Value/55283246"), StringExternal("Param/Value/504A4653"), StringExternal("Param/Value/2475EB1E"), null, gt_BacktoVictoryScreen);
        }
        else {
            libChal_gf_CreateChallengeWaveSuccessPanel(1, StringExternal("Param/Value/565D9AD9"), StringExternal("Param/Value/2FFBB2AC"), StringExternal("Param/Value/47B47F90"), null, gt_BacktoVictoryScreen);
        }
        libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        return true;
    }
    else {
    }
    libChal_gf_CreateChallengeDefeatPanel(StringExternal("Param/Value/FE663EA7"), StringExternal("Param/Value/06937C70"), gt_LeaveGame, null);
    if ((gv_protossPlayed == true)) {
        libChal_gf_AddWaveToChallengeDefeatPanel((StringExternal("Param/Value/BF26E898") + IntToText(gv_zerglingRushScoreCurrent)), 2, gt_RestartChallengeZerg);
        libChal_gf_AddWaveToChallengeDefeatPanel((StringExternal("Param/Value/069A014A") + IntToText(gv_protossRushScoreCurrent)), 1, gt_RestartChallengeProtoss);
        gv_retryCountProtoss = (gv_retryCountProtoss + 1);
    }
    else {
        libChal_gf_AddWaveToChallengeDefeatPanel((StringExternal("Param/Value/59B9B61B") + IntToText(gv_zerglingRushScoreCurrent)), 1, gt_RestartChallengeZerg);
        libChal_gf_AddWaveToChallengeDefeatPanel((StringExternal("Param/Value/82A0C905") + IntToText(gv_protossRushScoreCurrent)), 0, gt_RestartChallengeProtoss);
        gv_retryCountZerg = (gv_retryCountZerg + 1);
    }
    libChal_gf_ShowHideChallengeDefeatPanel(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinishDefeat_Init () {
    gt_FinishDefeat = TriggerCreate("gt_FinishDefeat_Func");
    TriggerAddEventUnitDied(gt_FinishDefeat, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Back to Victory Screen
//--------------------------------------------------------------------------------------------------
bool gt_BacktoVictoryScreen_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libChal_gf_ShowHideChallengeDefeatPanel(false);
    libChal_gf_ShowHideChallengeWaveSuccessPanel(false);
    TriggerExecute(gt_ObjectiveRushDefenseUpdate, true, true);
    if (((gv_zerglingRushScoreBest + gv_protossRushScoreBest) == 0)) {
        libChal_gf_CreateChallengeVictoryPanel(StringExternal("Param/Value/D9836722"), gv_ratingText, StringExternal("Param/Value/D3A7CAAE"), (StringExternal("Param/Value/F2FB7D18") + IntToText((gv_zerglingRushScoreBest + gv_protossRushScoreBest))), gt_LeaveGame, null);
        libChal_gf_AddWaveToChallengeVictoryPanel((StringExternal("Param/Value/347C7392") + IntToText(gv_zerglingRushScoreBest)), gt_RestartChallengeZerg);
        libChal_gf_AddWaveToChallengeVictoryPanel((StringExternal("Param/Value/531AA5E0") + IntToText(gv_protossRushScoreBest)), gt_RestartChallengeProtoss);
        libChal_gf_AddAchievementToChallengeVictoryPanel("Challenge_RushDefense_Basic");
        libChal_gf_AddAchievementToChallengeVictoryPanel("Challenge_RushDefense_Mastery");
        libChal_gf_AddAchievementToChallengeVictoryPanel("Challenge_RushDefense_Dominance");
        libChal_gf_ShowHideChallengeVictoryPanel(true);
        gv_zerglingRushScorePrevious = gv_zerglingRushScoreCurrent;
        gv_protossRushScorePrevious = gv_protossRushScoreCurrent;
        gv_scorePrevious = gv_scoreCurrent;
        return true;
    }
    else {
    }
    if ((gv_playingReplay == true) && (gv_scoreCurrent < gv_scorePrevious)) {
        gv_waveText = StringExternal("Param/Value/0C3EF574");
        libChal_gf_CreateChallengeVictoryPanel(StringExternal("Param/Value/15977FF4"), gv_ratingText, StringExternal("Param/Value/0702A09B"), (StringExternal("Param/Value/3334F66E") + IntToText((gv_zerglingRushScoreBest + gv_protossRushScoreBest))), gt_LeaveGame, null);
        libChal_gf_AddWaveToChallengeVictoryPanel((StringExternal("Param/Value/51189409") + IntToText(gv_zerglingRushScoreBest)), gt_RestartChallengeZerg);
        libChal_gf_AddWaveToChallengeVictoryPanel((StringExternal("Param/Value/256022BD") + IntToText(gv_protossRushScoreBest)), gt_RestartChallengeProtoss);
        libChal_gf_AddAchievementToChallengeVictoryPanel("Challenge_RushDefense_Basic");
        libChal_gf_AddAchievementToChallengeVictoryPanel("Challenge_RushDefense_Mastery");
        libChal_gf_AddAchievementToChallengeVictoryPanel("Challenge_RushDefense_Dominance");
        libChal_gf_ShowHideChallengeVictoryPanel(true);
        gv_zerglingRushScorePrevious = gv_zerglingRushScoreCurrent;
        gv_protossRushScorePrevious = gv_protossRushScoreCurrent;
        gv_scorePrevious = gv_scoreCurrent;
        return true;
    }
    else {
        if ((gv_playingReplay == true) && (gv_scoreCurrent >= gv_scorePrevious)) {
            gv_waveText = StringExternal("Param/Value/4E111B0A");
            libChal_gf_CreateChallengeVictoryPanel(StringExternal("Param/Value/CBCA9F90"), gv_ratingText, StringExternal("Param/Value/00CA0E0F"), (StringExternal("Param/Value/DE905378") + IntToText((gv_zerglingRushScoreBest + gv_protossRushScoreBest))), gt_LeaveGame, null);
            libChal_gf_AddWaveToChallengeVictoryPanel((StringExternal("Param/Value/96092499") + IntToText(gv_zerglingRushScoreBest)), gt_RestartChallengeZerg);
            libChal_gf_AddWaveToChallengeVictoryPanel((StringExternal("Param/Value/A0F767D1") + IntToText(gv_protossRushScoreBest)), gt_RestartChallengeProtoss);
            libChal_gf_AddAchievementToChallengeVictoryPanel("Challenge_RushDefense_Basic");
            libChal_gf_AddAchievementToChallengeVictoryPanel("Challenge_RushDefense_Mastery");
            libChal_gf_AddAchievementToChallengeVictoryPanel("Challenge_RushDefense_Dominance");
            libChal_gf_ShowHideChallengeVictoryPanel(true);
            gv_zerglingRushScorePrevious = gv_zerglingRushScoreCurrent;
            gv_protossRushScorePrevious = gv_protossRushScoreCurrent;
            gv_scorePrevious = gv_scoreCurrent;
            return true;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BacktoVictoryScreen_Init () {
    gt_BacktoVictoryScreen = TriggerCreate("gt_BacktoVictoryScreen_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leave Game
//--------------------------------------------------------------------------------------------------
bool gt_LeaveGame_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameOver(gv_pLAYER_USER, c_gameOverDefeat, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeaveGame_Init () {
    gt_LeaveGame = TriggerCreate("gt_LeaveGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Rush Defense Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRushDefenseCreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/C643D3CC"), StringExternal("Param/Value/AACF2B33"), c_objectiveStateActive, true);
    gv_objectiveRushDefenseCompleteZergRush = ObjectiveLastCreated();
    Wait(2.0, c_timeGame);
    ObjectiveCreate(StringExternal("Param/Value/CE6AC15F"), StringExternal("Param/Value/7B33532F"), c_objectiveStateActive, true);
    gv_objectiveRushDefenseCompleteProtossRush = ObjectiveLastCreated();
    Wait(2.0, c_timeGame);
    ObjectiveCreate(TextReplaceWord((StringExternal("Param/Value/49304EAE") + gv_ratingTextSilver + StringExternal("Param/Value/3077DE16")), StringExternal("Param/Value/75080C2D"), IntToText(gv_silverLosses), c_stringReplaceAll, c_stringCase), (StringExternal("Param/Value/C0A8E02F") + IntToText(gv_silverLosses) + StringExternal("Param/Value/0E5A0996")), c_objectiveStateActive, false);
    gv_objectiveRushDefenseSilver = ObjectiveLastCreated();
    Wait(2.0, c_timeGame);
    ObjectiveCreate(TextReplaceWord((StringExternal("Param/Value/4377C835") + gv_ratingTextGold + StringExternal("Param/Value/D7702915")), StringExternal("Param/Value/238D3C64"), IntToText(gv_goldLosses), c_stringReplaceAll, c_stringCase), (StringExternal("Param/Value/717B40B9") + IntToText(gv_goldLosses) + StringExternal("Param/Value/CA719937")), c_objectiveStateActive, false);
    gv_objectiveRushDefenseGold = ObjectiveLastCreated();
    if ((gv_totalPlayerDeaths > gv_silverLosses)) {
        ObjectiveSetState(gv_objectiveRushDefenseSilver, c_objectiveStateFailed);
    }
    else {
    }
    if ((gv_totalPlayerDeaths > gv_goldLosses)) {
        ObjectiveSetState(gv_objectiveRushDefenseGold, c_objectiveStateFailed);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRushDefenseCreateQ_Init () {
    gt_ObjectiveRushDefenseCreateQ = TriggerCreate("gt_ObjectiveRushDefenseCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Rush Defense Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRushDefenseUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveRushDefenseCreateQ, true, false);
    if ((gv_totalPlayerDeaths <= gv_silverLosses)) {
        ObjectiveSetState(gv_objectiveRushDefenseSilver, c_objectiveStateCompleted);
    }
    else {
    }
    if ((gv_totalPlayerDeaths <= gv_goldLosses)) {
        ObjectiveSetState(gv_objectiveRushDefenseGold, c_objectiveStateCompleted);
    }
    else {
    }
    if (((gv_zerglingRushScoreBest + gv_protossRushScoreBest) <= gv_silverLosses) && (gv_playingReplay == true)) {
        gv_ratingText = (StringExternal("Param/Value/4A4394BC") + gv_ratingTextSilver);
    }
    else {
    }
    if (((gv_zerglingRushScoreBest + gv_protossRushScoreBest) <= gv_goldLosses) && (gv_playingReplay == true)) {
        gv_ratingText = (StringExternal("Param/Value/5EEC31CA") + gv_ratingTextGold);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRushDefenseUpdate_Init () {
    gt_ObjectiveRushDefenseUpdate = TriggerCreate("gt_ObjectiveRushDefenseUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Display Tips (Zerg)
//--------------------------------------------------------------------------------------------------
bool gt_DisplayTipsZerg_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    TriggerExecute(gt_TipSCVCombatQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisplayTipsZerg_Init () {
    gt_DisplayTipsZerg = TriggerCreate("gt_DisplayTipsZerg_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip SCV Combat Q
//--------------------------------------------------------------------------------------------------
bool gt_TipSCVCombatQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/23F5F5FB"), 0), StringExternal("Param/Value/C2523A1A"), StringExternal("Param/Value/7A749526"), "Assets\\Textures\\btn-unit-terran-scv.dds");
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipSCVCombatQ_Init () {
    gt_TipSCVCombatQ = TriggerCreate("gt_TipSCVCombatQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Display Tips (Protoss)
//--------------------------------------------------------------------------------------------------
bool gt_DisplayTipsProtoss_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertClear(gv_pLAYER_USER);
    TipAlertPanelClear(PlayerGroupAll());
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_HintDestroyingtheGatewaysQ, true, false);
    TriggerExecute(gt_HintRepairQ, true, false);
    Wait(4.0, c_timeGame);
    TriggerExecute(gt_TipBunkerQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisplayTipsProtoss_Init () {
    gt_DisplayTipsProtoss = TriggerCreate("gt_DisplayTipsProtoss_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Bunker Q
//--------------------------------------------------------------------------------------------------
bool gt_TipBunkerQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/9E29324F"), 0), StringExternal("Param/Value/F1657940"), StringExternal("Param/Value/79D61687"), "Assets\\Textures\\btn-building-terran-bunker.dds");
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipBunkerQ_Init () {
    gt_TipBunkerQ = TriggerCreate("gt_TipBunkerQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hint Repair Q
//--------------------------------------------------------------------------------------------------
bool gt_HintRepairQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    HelpPanelAddHint(PlayerGroupAll(), StringExternal("Param/Value/03C51547"), StringExternal("Param/Value/E6B932CA"), "Assets\\Textures\\btn-ability-terran-repair.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HintRepairQ_Init () {
    gt_HintRepairQ = TriggerCreate("gt_HintRepairQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hint Destroying the Gateways Q
//--------------------------------------------------------------------------------------------------
bool gt_HintDestroyingtheGatewaysQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    HelpPanelAddHint(PlayerGroupAll(), StringExternal("Param/Value/7CCD4A8B"), StringExternal("Param/Value/F855CC15"), "Assets\\Textures\\btn-building-protoss-gateway.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HintDestroyingtheGatewaysQ_Init () {
    gt_HintDestroyingtheGatewaysQ = TriggerCreate("gt_HintDestroyingtheGatewaysQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergIntroQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_ZergIntroSetup, true, true);
    TriggerExecute(gt_ZergIntroCinematic, true, true);
    TriggerExecute(gt_ZergIntroCinematicEnd, true, true);
    TriggerExecute(gt_ZergIntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergIntroQ_Init () {
    gt_ZergIntroQ = TriggerCreate("gt_ZergIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_ZergIntroSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    libNtve_gf_GlobalCinematicSetting(true);
    GameTimeOfDayPause(true);
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(14));
    UnitGroupAdd(gv_cinePlayerUnitsWorkers, UnitLastCreated());
    UnitGroupAdd(gv_cinePlayerUnitsAttackers, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(15));
    UnitGroupAdd(gv_cinePlayerUnitsWorkers, UnitLastCreated());
    UnitGroupAdd(gv_cinePlayerUnitsAttackers, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(16));
    UnitGroupAdd(gv_cinePlayerUnitsWorkers, UnitLastCreated());
    UnitGroupAdd(gv_cinePlayerUnitsAttackers, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(17));
    UnitGroupAdd(gv_cinePlayerUnitsWorkers, UnitLastCreated());
    UnitGroupAdd(gv_cinePlayerUnitsAttackers, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(18));
    UnitGroupAdd(gv_cinePlayerUnitsWorkers, UnitLastCreated());
    UnitGroupAdd(gv_cinePlayerUnitsRepair, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(29));
    UnitGroupAdd(gv_cinePlayerUnitsWorkers, UnitLastCreated());
    UnitGroupAdd(gv_cinePlayerUnitsAttackers, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(30));
    UnitGroupAdd(gv_cinePlayerUnitsWorkers, UnitLastCreated());
    UnitGroupAdd(gv_cinePlayerUnitsAttackers, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(31));
    UnitGroupAdd(gv_cinePlayerUnitsWorkers, UnitLastCreated());
    UnitGroupAdd(gv_cinePlayerUnitsAttackers, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(103));
    UnitGroupAdd(gv_cinePlayerUnitsWorkers, UnitLastCreated());
    UnitGroupAdd(gv_cinePlayerUnitsAttackers, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(104));
    UnitGroupAdd(gv_cinePlayerUnitsWorkers, UnitLastCreated());
    UnitGroupAdd(gv_cinePlayerUnitsAttackers, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "SupplyDepot", 0, gv_pLAYER_USER, PointFromId(105));
    UnitGroupAdd(gv_cinePlayerUnitsWorkers, UnitLastCreated());
    gv_supplyDepot = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "CommandCenter", 0, gv_pLAYER_USER, PointFromId(37));
    UnitGroupAdd(gv_cinePlayerUnitsWorkers, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p2_ENEMY_ZERG, PointFromId(106));
    UnitGroupAdd(gv_cineZerglings, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p2_ENEMY_ZERG, PointFromId(107));
    UnitGroupAdd(gv_cineZerglings, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p2_ENEMY_ZERG, PointFromId(108));
    UnitGroupAdd(gv_cineZerglings, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_p2_ENEMY_ZERG, PointFromId(109));
    UnitGroupAdd(gv_cineZerglings, UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergIntroSetup_Init () {
    gt_ZergIntroSetup = TriggerCreate("gt_ZergIntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_ZergIntroCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(13), 0.0, -1, 10, true);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_pLAYER_USER);
    TriggerExecute(gt_ZergIntroSCVMicro, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_introCinematicZergCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(32), (SoundLengthSync(SoundLink("ChallengescombinedAdjutant00031", -1)) + (SoundLengthSync(SoundLink("ChallengescombinedAdjutant00033", -1)) - 1.0)), -1, 10, true);
    // Transmission - SoundLink("ChallengescombinedAdjutant00031", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(2), SoundLink("ChallengescombinedAdjutant00031", -1), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 6.0);
    UnitGroupIssueOrder(gv_cineZerglings, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupUnit(UnitGroup("SupplyDepot", gv_pLAYER_USER, RegionCircle(PointFromId(105), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1)), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    UnitGroupIssueOrder(gv_cineZerglings, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(116)), c_orderQueueReplace);
    // Transmission - SoundLink("ChallengescombinedAdjutant00033", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(2), SoundLink("ChallengescombinedAdjutant00033", -1), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 5.0);
    UnitGroupIssueOrder(gv_cinePlayerUnitsAttackers, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(117)), c_orderQueueReplace);
    UnitGroupIssueOrder(gv_cinePlayerUnitsRepair, OrderTargetingUnit(AbilityCommand("Repair", 0), gv_supplyDepot), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gv_introCinematicZergCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergIntroCinematic_Init () {
    gt_ZergIntroCinematic = TriggerCreate("gt_ZergIntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Intro SCV Micro
//--------------------------------------------------------------------------------------------------
bool gt_ZergIntroSCVMicro_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(0.1, c_timeGame);
        UnitGroupLoopBegin(gv_cinePlayerUnitsAttackers);
        while (!UnitGroupLoopDone()) {
            if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) <= 15.0)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitFromId(22)), c_orderQueueReplace);
                UnitGroupRemove(gv_cinePlayerUnitsAttackers, UnitGroupLoopCurrent());
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergIntroSCVMicro_Init () {
    gt_ZergIntroSCVMicro = TriggerCreate("gt_ZergIntroSCVMicro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_ZergIntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_introCinematicZergCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerStop(gt_ZergIntroSCVMicro);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergIntroCinematicEnd_Init () {
    gt_ZergIntroCinematicEnd = TriggerCreate("gt_ZergIntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_ZergIntroCleanup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    GameTimeOfDayPause(false);
    UnitGroupLoopBegin(UnitGroup("MineralField", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropResources, 1500.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    PlayerModifyPropertyInt(gv_pLAYER_USER, c_playerPropVespene, c_playerPropOperSetTo, 0);
    VisExploreArea(gv_pLAYER_USER, RegionEntireMap(), false, false);
    UnitGroupLoopBegin(gv_cinePlayerUnitsWorkers);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cineZerglings);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    ActorWorldParticleFXDestroy();
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(14));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(15));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(16));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(17));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(18));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(29));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(30));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(31));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(103));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(104));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(14));
    libNtve_gf_CreateUnitsAtPoint2(1, "CommandCenter", 0, gv_pLAYER_USER, PointFromId(37));
    UnitCreate(1, "SupplyDepot", 0, gv_pLAYER_USER, PointFromId(102), 270.0);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(64), 0.0, -1, 10, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.0);
    libNtve_gf_GlobalCinematicSetting(false);
    UISetMode(PlayerGroupAll(), c_uiModeConsole, 1.0);
    GameSetSpeedLocked(true);
    GameSetSpeedValue(c_gameSpeedNormal);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    gv_watchedIntroCinematicZerg = true;
    gv_inCinematic = false;
    TriggerExecute(gt_StartAI, true, false);
    UnitPauseAll(false);
    TriggerExecute(gt_StartGameplayZerglingRush, true, false);
    TriggerExecute(gt_ObjectiveRushDefenseCreateQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergIntroCleanup_Init () {
    gt_ZergIntroCleanup = TriggerCreate("gt_ZergIntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossIntroQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_ProtossIntroSetup, true, true);
    TriggerExecute(gt_ProtossIntroCinematic, true, true);
    TriggerExecute(gt_ProtossIntroCinematicEnd, true, true);
    TriggerExecute(gt_ProtossIntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossIntroQ_Init () {
    gt_ProtossIntroQ = TriggerCreate("gt_ProtossIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_ProtossIntroSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    BoardDestroy(gv_leaderboard);
    TimerWindowDestroy(gv_prepTimerWindow);
    gv_time = 0;
    gv_currentRoundPlayerDeaths = 0;
    UnitGroupLoopBegin(UnitGroup("MULE", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_USER, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p2_ENEMY_ZERG, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p3_ENEMY_PROTOSS, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    ActorWorldParticleFXDestroy();
    TriggerExecute(gt_Replaceallresources, true, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationDefault);
    libNtve_gf_GlobalCinematicSetting(true);
    GameTimeOfDayPause(true);
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(14));
    UnitGroupAdd(gv_cinePlayerUnitsWorkers2, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(15));
    UnitGroupAdd(gv_cinePlayerUnitsWorkers2, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(16));
    UnitGroupAdd(gv_cinePlayerUnitsWorkers2, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(17));
    UnitGroupAdd(gv_cinePlayerUnitsWorkers2, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(18));
    UnitGroupAdd(gv_cinePlayerUnitsWorkers2, UnitLastCreated());
    UnitGroupAdd(gv_cinePlayerUnitsRepair2, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(29));
    UnitGroupAdd(gv_cinePlayerUnitsWorkers2, UnitLastCreated());
    UnitGroupAdd(gv_cinePlayerUnitsAttackers2, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(30));
    UnitGroupAdd(gv_cinePlayerUnitsWorkers2, UnitLastCreated());
    UnitGroupAdd(gv_cinePlayerUnitsAttackers2, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(31));
    UnitGroupAdd(gv_cinePlayerUnitsWorkers2, UnitLastCreated());
    UnitGroupAdd(gv_cinePlayerUnitsAttackers2, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(103));
    UnitGroupAdd(gv_cinePlayerUnitsWorkers2, UnitLastCreated());
    UnitGroupAdd(gv_cinePlayerUnitsAttackers2, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(104));
    UnitGroupAdd(gv_cinePlayerUnitsWorkers2, UnitLastCreated());
    UnitGroupAdd(gv_cinePlayerUnitsAttackers2, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "CommandCenter", 0, gv_pLAYER_USER, PointFromId(37));
    UnitGroupAdd(gv_cinePlayerUnitsWorkers2, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "SupplyDepot", 0, gv_pLAYER_USER, PointFromId(111));
    UnitGroupAdd(gv_cinePlayerUnitsWorkers2, UnitLastCreated());
    gv_supplyDepot2 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "Barracks", 0, gv_pLAYER_USER, RegionGetCenter(RegionFromId(5)));
    UnitGroupAdd(gv_cinePlayerUnitsWorkers2, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Barracks", 0, gv_pLAYER_USER, RegionGetCenter(RegionFromId(6)));
    UnitGroupAdd(gv_cinePlayerUnitsWorkers2, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Bunker", 0, gv_pLAYER_USER, RegionGetCenter(RegionFromId(8)));
    UnitGroupAdd(gv_cinePlayerUnitsWorkers2, UnitLastCreated());
    gv_bunker = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(103));
    UnitGroupAdd(gv_cinePlayerUnitsAttackers2, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER_USER, PointFromId(118));
    UnitGroupAdd(gv_cinePlayerUnitsAttackers2, UnitLastCreated());
    gv_marine01 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER_USER, PointFromId(119));
    UnitGroupAdd(gv_cinePlayerUnitsAttackers2, UnitLastCreated());
    gv_marine02 = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "Gateway", 0, gv_p3_ENEMY_PROTOSS, RegionGetCenter(RegionFromId(4)));
    UnitGroupAdd(gv_cineProtoss, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Gateway", 0, gv_p3_ENEMY_PROTOSS, RegionGetCenter(RegionFromId(7)));
    UnitGroupAdd(gv_cineProtoss, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Pylon", 0, gv_p3_ENEMY_PROTOSS, RegionGetCenter(RegionFromId(11)));
    UnitGroupAdd(gv_cineProtoss, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", 0, gv_p3_ENEMY_PROTOSS, PointFromId(112));
    UnitGroupAdd(gv_cineProtoss, UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossIntroSetup_Init () {
    gt_ProtossIntroSetup = TriggerCreate("gt_ProtossIntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_ProtossIntroCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(110), 0.0, -1, 10, true);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_pLAYER_USER);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_introCinematicProtossCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(120), (SoundLengthSync(SoundLink("ChallengescombinedAdjutant00031", -1)) + (SoundLengthSync(SoundLink("ChallengescombinedAdjutant00033", -1)) - 1.0)), -1, 10, true);
    // Transmission - SoundLink("ChallengescombinedAdjutant00031", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(2), SoundLink("ChallengescombinedAdjutant00031", -1), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 6.0);
    UnitGroupIssueOrder(gv_cineProtoss, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(116)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", 0, gv_p3_ENEMY_PROTOSS, PointFromId(113));
    UnitGroupAdd(gv_cineProtoss, UnitLastCreated());
    TransmissionWait(TransmissionLastSent(), 0.0);
    UnitIssueOrder(gv_bunker, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), gv_marine01), c_orderQueueReplace);
    UnitIssueOrder(gv_bunker, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), gv_marine02), c_orderQueueReplace);
    // Transmission - SoundLink("ChallengescombinedAdjutant00033", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(2), SoundLink("ChallengescombinedAdjutant00033", -1), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 5.0);
    UnitGroupIssueOrder(gv_cinePlayerUnitsRepair2, OrderTargetingUnit(AbilityCommand("Repair", 0), gv_supplyDepot2), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", 0, gv_p3_ENEMY_PROTOSS, PointFromId(114));
    UnitGroupAdd(gv_cineProtoss, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", 0, gv_p3_ENEMY_PROTOSS, PointFromId(115));
    UnitGroupAdd(gv_cineProtoss, UnitLastCreated());
    UnitGroupIssueOrder(gv_cineProtoss, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(116)), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gv_introCinematicProtossCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossIntroCinematic_Init () {
    gt_ProtossIntroCinematic = TriggerCreate("gt_ProtossIntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_ProtossIntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_introCinematicProtossCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossIntroCinematicEnd_Init () {
    gt_ProtossIntroCinematicEnd = TriggerCreate("gt_ProtossIntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_ProtossIntroCleanup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    GameTimeOfDayPause(false);
    UnitGroupLoopBegin(UnitGroup("MineralField", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropResources, 1500.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    PlayerModifyPropertyInt(gv_pLAYER_USER, c_playerPropVespene, c_playerPropOperSetTo, 0);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(64), 0.0, -1, 10, true);
    VisExploreArea(gv_pLAYER_USER, RegionEntireMap(), false, false);
    UnitGroupLoopBegin(UnitGroup("MULE", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinePlayerUnitsWorkers2);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinePlayerUnitsAttackers2);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cineProtoss);
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    ActorWorldParticleFXDestroy();
    TriggerExecute(gt_Replaceallresources, true, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "CommandCenter", 0, gv_pLAYER_USER, PointFromId(37));
    UnitCreate(1, "SupplyDepot", 0, gv_pLAYER_USER, PointFromId(102), 270.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(14));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(15));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(16));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(17));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(18));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(29));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(30));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(31));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(103));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER_USER, PointFromId(104));
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.0);
    libNtve_gf_GlobalCinematicSetting(false);
    UISetMode(PlayerGroupAll(), c_uiModeConsole, 1.0);
    GameSetSpeedLocked(true);
    GameSetSpeedValue(c_gameSpeedNormal);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    gv_watchedIntroCinematicProtoss = true;
    gv_inCinematic = false;
    TriggerExecute(gt_StartAI, true, false);
    UnitPauseAll(false);
    libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "Signal DestroyPod");
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_pLAYER_USER);
    TriggerExecute(gt_StartGameplayGatewayRush, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossIntroCleanup_Init () {
    gt_ProtossIntroCleanup = TriggerCreate("gt_ProtossIntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Players_Init();
    gt_Init02Units_Init();
    gt_Init03Music_Init();
    gt_Init04Environment_Init();
    gt_Init05Hints_Init();
    gt_Init06MapSettings_Init();
    gt_StartGameplayZerglingRush_Init();
    gt_WarnPlayerZerglingRush_Init();
    gt_ZergAttackWaves_Init();
    gt_ZerglingsorPlayerUnitsDie_Init();
    gt_StartGameplayGatewayRush_Init();
    gt_WarnPlayerGatewayRush_Init();
    gt_ProtossAttackWaves_Init();
    gt_ProtossChronoBoost_Init();
    gt_NewProtossBuilding_Init();
    gt_SuicideZealots_Init();
    gt_ProtossorPlayerUnitsDie_Init();
    gt_CreateLeaderboardZerg_Init();
    gt_UpdateLeaderboardZerg_Init();
    gt_CreateLeaderboardProtoss_Init();
    gt_UpdateLeaderboardProtoss_Init();
    gt_CheckforCheating_Init();
    gt_StartAI_Init();
    gt_UnlimitedAIResources_Init();
    gt_RestartChallengeZerg_Init();
    gt_RestartChallengeProtoss_Init();
    gt_ResetPlayField_Init();
    gt_ResetUpgrades_Init();
    gt_Replaceallresources_Init();
    gt_FinishVictory_Init();
    gt_FinishDefeat_Init();
    gt_BacktoVictoryScreen_Init();
    gt_LeaveGame_Init();
    gt_ObjectiveRushDefenseCreateQ_Init();
    gt_ObjectiveRushDefenseUpdate_Init();
    gt_DisplayTipsZerg_Init();
    gt_TipSCVCombatQ_Init();
    gt_DisplayTipsProtoss_Init();
    gt_TipBunkerQ_Init();
    gt_HintRepairQ_Init();
    gt_HintDestroyingtheGatewaysQ_Init();
    gt_ZergIntroQ_Init();
    gt_ZergIntroSetup_Init();
    gt_ZergIntroCinematic_Init();
    gt_ZergIntroSCVMicro_Init();
    gt_ZergIntroCinematicEnd_Init();
    gt_ZergIntroCleanup_Init();
    gt_ProtossIntroQ_Init();
    gt_ProtossIntroSetup_Init();
    gt_ProtossIntroCinematic_Init();
    gt_ProtossIntroCinematicEnd_Init();
    gt_ProtossIntroCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
